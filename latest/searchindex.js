Search.setIndex({"docnames": ["autoapi/644ec953a7dc_pruning_support/index", "autoapi/6ece06672ed3_v1_14/index", "autoapi/6f0d0f71d92e_v1_13/index", "autoapi/9e89549a08c8_v1_11/index", "autoapi/block_mask/index", "autoapi/env/index", "autoapi/neural_compressor/adaptor/adaptor/index", "autoapi/neural_compressor/adaptor/index", "autoapi/neural_compressor/adaptor/keras/index", "autoapi/neural_compressor/adaptor/keras_utils/index", "autoapi/neural_compressor/adaptor/keras_utils/quantizer/index", "autoapi/neural_compressor/adaptor/mxnet/index", "autoapi/neural_compressor/adaptor/mxnet_utils/index", "autoapi/neural_compressor/adaptor/mxnet_utils/util/index", "autoapi/neural_compressor/adaptor/onnxrt/index", "autoapi/neural_compressor/adaptor/ox_utils/calibration/index", "autoapi/neural_compressor/adaptor/ox_utils/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/activation/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/argmax/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/attention/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/binary_op/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/concat/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/conv/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/direct_q8/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/embed_layernorm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gather/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gavgpool/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gemm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/lstm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/matmul/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/maxpool/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/ops/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/pad/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/pooling/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/resize/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/split/index", "autoapi/neural_compressor/adaptor/ox_utils/quantizer/index", "autoapi/neural_compressor/adaptor/ox_utils/util/index", "autoapi/neural_compressor/adaptor/pytorch/index", "autoapi/neural_compressor/adaptor/query/index", "autoapi/neural_compressor/adaptor/tensorflow/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter_without_calib/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/bf16_convert/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_add_to_biasadd/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_layout/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_leakyrelu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_nan_to_random/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_placeholder_to_const/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dequantize_cast_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dilated_contraction/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dummy_biasadd/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/expanddims_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fetch_weight_from_reshape/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_batch_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_constant/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_biasadd_add/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_column_wise_mul/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_conv_with_math/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_in/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_gelu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_layer_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_reshape_transpose/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/graph_cse_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/grappler_pass/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/insert_print_node/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/move_squeeze_after_relu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/pre_optimize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/remove_training_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/rename_batch_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/split_shared_input/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_equivalent_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_unused_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/switch_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/graph_base/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_fake_quant/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value_without_calib/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_requantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_requantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/meta_op_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_hostconst_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_quantized_op_cse/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/rnn_convert/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/scale_propagation/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_node/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_schema/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/tf2onnx_utils/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/insert_qdq_pattern/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/merge_duplicated_qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/share_qdq_y_pattern/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_util/index", "autoapi/neural_compressor/adaptor/tf_utils/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/fake_quantize/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_config/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_helper/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/optimize_layer/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_wrapper/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_concatv2/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_deconv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_in/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_matmul/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_pooling/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/optimize_qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_base/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_concatv2/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_for_intel_cpu/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_matmul/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_pooling/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph_common/index", "autoapi/neural_compressor/adaptor/tf_utils/tf2onnx_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/bias_correction/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/graph_transform_base/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/insert_logging/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/rerange_quantized_concat/index", "autoapi/neural_compressor/adaptor/tf_utils/util/index", "autoapi/neural_compressor/adaptor/torch_utils/bf16_convert/index", "autoapi/neural_compressor/adaptor/torch_utils/hawq_metric/index", "autoapi/neural_compressor/adaptor/torch_utils/index", "autoapi/neural_compressor/adaptor/torch_utils/onnx/index", "autoapi/neural_compressor/adaptor/torch_utils/smooth_quant/index", "autoapi/neural_compressor/adaptor/torch_utils/symbolic_trace/index", "autoapi/neural_compressor/adaptor/torch_utils/util/index", "autoapi/neural_compressor/algorithm/algorithm/index", "autoapi/neural_compressor/algorithm/fast_bias_correction/index", "autoapi/neural_compressor/algorithm/index", "autoapi/neural_compressor/algorithm/smooth_quant/index", "autoapi/neural_compressor/algorithm/weight_correction/index", "autoapi/neural_compressor/benchmark/index", "autoapi/neural_compressor/compression/callbacks/index", "autoapi/neural_compressor/compression/distillation/criterions/index", "autoapi/neural_compressor/compression/distillation/index", "autoapi/neural_compressor/compression/index", "autoapi/neural_compressor/compression/pruner/criteria/index", "autoapi/neural_compressor/compression/pruner/index", "autoapi/neural_compressor/compression/pruner/patterns/index", "autoapi/neural_compressor/compression/pruner/pruners/index", "autoapi/neural_compressor/compression/pruner/regs/index", "autoapi/neural_compressor/compression/pruner/schedulers/index", "autoapi/neural_compressor/compression/pruner/utils/index", "autoapi/neural_compressor/conf/config/index", "autoapi/neural_compressor/conf/dotdict/index", "autoapi/neural_compressor/conf/index", "autoapi/neural_compressor/conf/pythonic_config/index", "autoapi/neural_compressor/config/index", "autoapi/neural_compressor/contrib/index", "autoapi/neural_compressor/contrib/strategy/index", "autoapi/neural_compressor/contrib/strategy/sigopt/index", "autoapi/neural_compressor/contrib/strategy/tpe/index", "autoapi/neural_compressor/data/dataloaders/base_dataloader/index", "autoapi/neural_compressor/data/dataloaders/dataloader/index", "autoapi/neural_compressor/data/dataloaders/default_dataloader/index", "autoapi/neural_compressor/data/dataloaders/fetcher/index", "autoapi/neural_compressor/data/dataloaders/index", "autoapi/neural_compressor/data/dataloaders/mxnet_dataloader/index", "autoapi/neural_compressor/data/dataloaders/onnxrt_dataloader/index", "autoapi/neural_compressor/data/dataloaders/pytorch_dataloader/index", "autoapi/neural_compressor/data/dataloaders/sampler/index", "autoapi/neural_compressor/data/dataloaders/tensorflow_dataloader/index", "autoapi/neural_compressor/data/datasets/bert_dataset/index", "autoapi/neural_compressor/data/datasets/coco_dataset/index", "autoapi/neural_compressor/data/datasets/dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/data/datasets/index", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/data/filters/coco_filter/index", "autoapi/neural_compressor/data/filters/filter/index", "autoapi/neural_compressor/data/filters/index", "autoapi/neural_compressor/data/index", "autoapi/neural_compressor/data/transforms/coco_transform/index", "autoapi/neural_compressor/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/data/transforms/index", "autoapi/neural_compressor/data/transforms/postprocess/index", "autoapi/neural_compressor/data/transforms/tokenization/index", "autoapi/neural_compressor/data/transforms/transform/index", "autoapi/neural_compressor/experimental/benchmark/index", "autoapi/neural_compressor/experimental/common/criterion/index", "autoapi/neural_compressor/experimental/common/dataloader/index", "autoapi/neural_compressor/experimental/common/index", "autoapi/neural_compressor/experimental/common/metric/index", "autoapi/neural_compressor/experimental/common/model/index", "autoapi/neural_compressor/experimental/common/optimizer/index", "autoapi/neural_compressor/experimental/common/postprocess/index", "autoapi/neural_compressor/experimental/common/torch_utils/index", "autoapi/neural_compressor/experimental/component/index", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index", "autoapi/neural_compressor/experimental/data/dataloaders/index", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/index", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index", "autoapi/neural_compressor/experimental/data/filters/filter/index", "autoapi/neural_compressor/experimental/data/filters/index", "autoapi/neural_compressor/experimental/data/index", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/experimental/data/transforms/index", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index", "autoapi/neural_compressor/experimental/data/transforms/transform/index", "autoapi/neural_compressor/experimental/distillation/index", "autoapi/neural_compressor/experimental/export/index", "autoapi/neural_compressor/experimental/export/qlinear2qdq/index", "autoapi/neural_compressor/experimental/export/tf2onnx/index", "autoapi/neural_compressor/experimental/export/torch2onnx/index", "autoapi/neural_compressor/experimental/export/utils/index", "autoapi/neural_compressor/experimental/graph_optimization/index", "autoapi/neural_compressor/experimental/index", "autoapi/neural_compressor/experimental/metric/bleu/index", "autoapi/neural_compressor/experimental/metric/bleu_util/index", "autoapi/neural_compressor/experimental/metric/coco_label_map/index", "autoapi/neural_compressor/experimental/metric/coco_tools/index", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index", "autoapi/neural_compressor/experimental/metric/f1/index", "autoapi/neural_compressor/experimental/metric/index", "autoapi/neural_compressor/experimental/metric/metric/index", "autoapi/neural_compressor/experimental/mixed_precision/index", "autoapi/neural_compressor/experimental/model_conversion/index", "autoapi/neural_compressor/experimental/nas/basic_nas/index", "autoapi/neural_compressor/experimental/nas/dynas/index", "autoapi/neural_compressor/experimental/nas/dynast/dynas_manager/index", "autoapi/neural_compressor/experimental/nas/dynast/dynas_predictor/index", "autoapi/neural_compressor/experimental/nas/dynast/dynas_search/index", "autoapi/neural_compressor/experimental/nas/dynast/dynas_utils/index", "autoapi/neural_compressor/experimental/nas/dynast/index", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/index", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/machine_translation/index", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/machine_translation/modules_supernetwork/index", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/machine_translation/transformer_interface/index", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/machine_translation/transformer_supernetwork/index", "autoapi/neural_compressor/experimental/nas/index", "autoapi/neural_compressor/experimental/nas/nas/index", "autoapi/neural_compressor/experimental/nas/nas_utils/index", "autoapi/neural_compressor/experimental/nas/search_algorithms/index", "autoapi/neural_compressor/experimental/pruner_legacy/gradient_sensitivity/index", "autoapi/neural_compressor/experimental/pruner_legacy/group_lasso/index", "autoapi/neural_compressor/experimental/pruner_legacy/index", "autoapi/neural_compressor/experimental/pruner_legacy/magnitude/index", "autoapi/neural_compressor/experimental/pruner_legacy/pattern_lock/index", "autoapi/neural_compressor/experimental/pruner_legacy/pruner/index", "autoapi/neural_compressor/experimental/pruning/index", "autoapi/neural_compressor/experimental/pruning_recipes/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index", "autoapi/neural_compressor/experimental/pruning_v2/index", "autoapi/neural_compressor/experimental/pytorch_pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index", "autoapi/neural_compressor/experimental/quantization/index", "autoapi/neural_compressor/experimental/scheduler/index", "autoapi/neural_compressor/index", "autoapi/neural_compressor/metric/bleu/index", "autoapi/neural_compressor/metric/bleu_util/index", "autoapi/neural_compressor/metric/coco_label_map/index", "autoapi/neural_compressor/metric/coco_tools/index", "autoapi/neural_compressor/metric/evaluate_squad/index", "autoapi/neural_compressor/metric/f1/index", "autoapi/neural_compressor/metric/index", "autoapi/neural_compressor/metric/metric/index", "autoapi/neural_compressor/mix_precision/index", "autoapi/neural_compressor/model/base_model/index", "autoapi/neural_compressor/model/index", "autoapi/neural_compressor/model/keras_model/index", "autoapi/neural_compressor/model/model/index", "autoapi/neural_compressor/model/mxnet_model/index", "autoapi/neural_compressor/model/nets_factory/index", "autoapi/neural_compressor/model/onnx_model/index", "autoapi/neural_compressor/model/tensorflow_model/index", "autoapi/neural_compressor/model/torch_model/index", "autoapi/neural_compressor/objective/index", "autoapi/neural_compressor/quantization/index", "autoapi/neural_compressor/strategy/auto_mixed_precision/index", "autoapi/neural_compressor/strategy/basic/index", "autoapi/neural_compressor/strategy/bayesian/index", "autoapi/neural_compressor/strategy/conservative/index", "autoapi/neural_compressor/strategy/exhaustive/index", "autoapi/neural_compressor/strategy/hawq_v2/index", "autoapi/neural_compressor/strategy/index", "autoapi/neural_compressor/strategy/mse/index", "autoapi/neural_compressor/strategy/mse_v2/index", "autoapi/neural_compressor/strategy/random/index", "autoapi/neural_compressor/strategy/strategy/index", "autoapi/neural_compressor/strategy/utils/constant/index", "autoapi/neural_compressor/strategy/utils/index", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index", "autoapi/neural_compressor/strategy/utils/tuning_space/index", "autoapi/neural_compressor/strategy/utils/tuning_structs/index", "autoapi/neural_compressor/strategy/utils/utility/index", "autoapi/neural_compressor/training/index", "autoapi/neural_compressor/utils/collect_layer_histogram/index", "autoapi/neural_compressor/utils/constant/index", "autoapi/neural_compressor/utils/create_obj_from_config/index", "autoapi/neural_compressor/utils/index", "autoapi/neural_compressor/utils/kl_divergence/index", "autoapi/neural_compressor/utils/load_huggingface/index", "autoapi/neural_compressor/utils/logger/index", "autoapi/neural_compressor/utils/options/index", "autoapi/neural_compressor/utils/pytorch/index", "autoapi/neural_compressor/utils/utility/index", "autoapi/neural_compressor/ux/components/benchmark/benchmark/index", "autoapi/neural_compressor/ux/components/benchmark/benchmark_model/index", "autoapi/neural_compressor/ux/components/benchmark/execute_benchmark/index", "autoapi/neural_compressor/ux/components/benchmark/index", "autoapi/neural_compressor/ux/components/config_generator/benchmark_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/graph_optimization_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/mixed_precision_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/profiling_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/pruning_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/quantization_config_generator/index", "autoapi/neural_compressor/ux/components/configuration_wizard/configuration_parser/index", "autoapi/neural_compressor/ux/components/configuration_wizard/get_boundary_nodes/index", "autoapi/neural_compressor/ux/components/configuration_wizard/get_configuration/index", "autoapi/neural_compressor/ux/components/configuration_wizard/index", "autoapi/neural_compressor/ux/components/configuration_wizard/params_feeder/index", "autoapi/neural_compressor/ux/components/configuration_wizard/pruning_config_parser/index", "autoapi/neural_compressor/ux/components/db_manager/db_manager/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/benchmark/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/benchmark_result/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/dataloader/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/dataset/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/domain/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/domain_flavour/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/example/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/framework/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/metric/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/model/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/optimization/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/optimization_type/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/precision/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/profiling/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/profiling_result/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/project/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/pruning_details/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/transform/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/tuning_details/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/tuning_history/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/benchmark_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/dataset_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/db_operations/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/diagnosis_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/dictionaries_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/examples_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/model_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/optimization_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/profiling_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/project_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/index", "autoapi/neural_compressor/ux/components/db_manager/params_interfaces/index", "autoapi/neural_compressor/ux/components/db_manager/utils/index", "autoapi/neural_compressor/ux/components/diagnosis/diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/factory/index", "autoapi/neural_compressor/ux/components/diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/onnx_diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/onnx_diagnosis/onnxrt_diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/op_details/index", "autoapi/neural_compressor/ux/components/diagnosis/op_entry/index", "autoapi/neural_compressor/ux/components/diagnosis/tensorflow_diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/tensorflow_diagnosis/tensorflow_diagnosis/index", "autoapi/neural_compressor/ux/components/file_browser/file_browser/index", "autoapi/neural_compressor/ux/components/file_browser/index", "autoapi/neural_compressor/ux/components/graph/attribute/index", "autoapi/neural_compressor/ux/components/graph/collapser/index", "autoapi/neural_compressor/ux/components/graph/edge/index", "autoapi/neural_compressor/ux/components/graph/graph/index", "autoapi/neural_compressor/ux/components/graph/graph_reader/index", "autoapi/neural_compressor/ux/components/graph/index", "autoapi/neural_compressor/ux/components/graph/node/index", "autoapi/neural_compressor/ux/components/graph/reader/index", "autoapi/neural_compressor/ux/components/graph/reader/onnxrt_reader/index", "autoapi/neural_compressor/ux/components/graph/reader/tensorflow_reader/index", "autoapi/neural_compressor/ux/components/index", "autoapi/neural_compressor/ux/components/jobs_management/index", "autoapi/neural_compressor/ux/components/jobs_management/jobs_control_queue/index", "autoapi/neural_compressor/ux/components/jobs_management/jobs_manager/index", "autoapi/neural_compressor/ux/components/jobs_management/request/index", "autoapi/neural_compressor/ux/components/manage_workspace/index", "autoapi/neural_compressor/ux/components/model/domain/index", "autoapi/neural_compressor/ux/components/model/index", "autoapi/neural_compressor/ux/components/model/model/index", "autoapi/neural_compressor/ux/components/model/model_type_getter/index", "autoapi/neural_compressor/ux/components/model/onnxrt/index", "autoapi/neural_compressor/ux/components/model/onnxrt/model/index", "autoapi/neural_compressor/ux/components/model/pytorch/index", "autoapi/neural_compressor/ux/components/model/pytorch/model/index", "autoapi/neural_compressor/ux/components/model/repository/index", "autoapi/neural_compressor/ux/components/model/shape/index", "autoapi/neural_compressor/ux/components/model/tensorflow/frozen_pb/index", "autoapi/neural_compressor/ux/components/model/tensorflow/index", "autoapi/neural_compressor/ux/components/model/tensorflow/keras/index", "autoapi/neural_compressor/ux/components/model/tensorflow/meta_graph/index", "autoapi/neural_compressor/ux/components/model/tensorflow/model/index", "autoapi/neural_compressor/ux/components/model/tensorflow/saved_model/index", "autoapi/neural_compressor/ux/components/model/tensorflow/utils/index", "autoapi/neural_compressor/ux/components/model_zoo/download_config/index", "autoapi/neural_compressor/ux/components/model_zoo/download_model/index", "autoapi/neural_compressor/ux/components/model_zoo/downloader/index", "autoapi/neural_compressor/ux/components/model_zoo/index", "autoapi/neural_compressor/ux/components/model_zoo/list_models/index", "autoapi/neural_compressor/ux/components/names_mapper/index", "autoapi/neural_compressor/ux/components/names_mapper/names_mapper/index", "autoapi/neural_compressor/ux/components/optimization/execute_optimization/index", "autoapi/neural_compressor/ux/components/optimization/factory/index", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/graph_optimization/index", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/index", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/optimize_model/index", "autoapi/neural_compressor/ux/components/optimization/index", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/index", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/mixed_precision/index", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/optimize_model/index", "autoapi/neural_compressor/ux/components/optimization/neural_coder_optimization/index", "autoapi/neural_compressor/ux/components/optimization/neural_coder_optimization/optimize_model/index", "autoapi/neural_compressor/ux/components/optimization/optimization/index", "autoapi/neural_compressor/ux/components/optimization/pruning/index", "autoapi/neural_compressor/ux/components/optimization/pruning/optimize_model/index", "autoapi/neural_compressor/ux/components/optimization/pruning/pruning/index", "autoapi/neural_compressor/ux/components/optimization/tune/index", "autoapi/neural_compressor/ux/components/optimization/tune/tune_model/index", "autoapi/neural_compressor/ux/components/optimization/tune/tuning/index", "autoapi/neural_compressor/ux/components/optimization/tuning_history/index", "autoapi/neural_compressor/ux/components/profiling/execute_profiling/index", "autoapi/neural_compressor/ux/components/profiling/factory/index", "autoapi/neural_compressor/ux/components/profiling/index", "autoapi/neural_compressor/ux/components/profiling/profile_model/index", "autoapi/neural_compressor/ux/components/profiling/profiler/index", "autoapi/neural_compressor/ux/components/profiling/profiling/index", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/factory/index", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/index", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/profiler/index", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/utils/index", "autoapi/neural_compressor/ux/inc_bench/index", "autoapi/neural_compressor/ux/index", "autoapi/neural_compressor/ux/utils/consts/index", "autoapi/neural_compressor/ux/utils/environment/index", "autoapi/neural_compressor/ux/utils/exceptions/index", "autoapi/neural_compressor/ux/utils/executor/index", "autoapi/neural_compressor/ux/utils/expiring_dict/index", "autoapi/neural_compressor/ux/utils/github_info/index", "autoapi/neural_compressor/ux/utils/hw_info/index", "autoapi/neural_compressor/ux/utils/index", "autoapi/neural_compressor/ux/utils/json_serializer/index", "autoapi/neural_compressor/ux/utils/logger/index", "autoapi/neural_compressor/ux/utils/parser/index", "autoapi/neural_compressor/ux/utils/proc/index", "autoapi/neural_compressor/ux/utils/processes/index", "autoapi/neural_compressor/ux/utils/singleton/index", "autoapi/neural_compressor/ux/utils/status_updates/index", "autoapi/neural_compressor/ux/utils/templates/index", "autoapi/neural_compressor/ux/utils/templates/metric/index", "autoapi/neural_compressor/ux/utils/templates/workdir/index", "autoapi/neural_compressor/ux/utils/utils/index", "autoapi/neural_compressor/ux/utils/workload/config/index", "autoapi/neural_compressor/ux/utils/workload/dataloader/index", "autoapi/neural_compressor/ux/utils/workload/evaluation/index", "autoapi/neural_compressor/ux/utils/workload/graph_optimization/index", "autoapi/neural_compressor/ux/utils/workload/index", "autoapi/neural_compressor/ux/utils/workload/mixed_precision/index", "autoapi/neural_compressor/ux/utils/workload/model/index", "autoapi/neural_compressor/ux/utils/workload/pruning/index", "autoapi/neural_compressor/ux/utils/workload/quantization/index", "autoapi/neural_compressor/ux/utils/workload/tuning/index", "autoapi/neural_compressor/ux/utils/yaml_utils/index", "autoapi/neural_compressor/ux/web/communication/index", "autoapi/neural_compressor/ux/web/configuration/index", "autoapi/neural_compressor/ux/web/exceptions/index", "autoapi/neural_compressor/ux/web/index", "autoapi/neural_compressor/ux/web/router/index", "autoapi/neural_compressor/ux/web/server/index", "autoapi/neural_compressor/ux/web/service/benchmark/index", "autoapi/neural_compressor/ux/web/service/history_snapshot_parser/index", "autoapi/neural_compressor/ux/web/service/index", "autoapi/neural_compressor/ux/web/service/model/index", "autoapi/neural_compressor/ux/web/service/optimization/index", "autoapi/neural_compressor/ux/web/service/profiling/index", "autoapi/neural_compressor/ux/web/service/request_data_processor/index", "autoapi/neural_compressor/ux/web/service/response_generator/index", "autoapi/neural_compressor/ux/web/service/workload/index", "autoapi/neural_compressor/version/index", "docs/build_docs/source/index", "docs/source/CODE_OF_CONDUCT", "docs/source/CONTRIBUTING", "docs/source/FX", "docs/source/NAS", "docs/source/SECURITY", "docs/source/Welcome", "docs/source/adaptor", "docs/source/api-doc/adaptor", "docs/source/api-doc/adaptor/onnxrt", "docs/source/api-doc/adaptor/torch_utils", "docs/source/api-doc/adaptor/torch_utils/bf16_convert", "docs/source/api-doc/adaptor/torch_utils/hawq_metric", "docs/source/api-doc/adaptor/torch_utils/onnx", "docs/source/api-doc/adaptor/torch_utils/symbolic_trace", "docs/source/api-doc/adaptor/torch_utils/util", "docs/source/api-doc/algorithm", "docs/source/api-doc/apis", "docs/source/api-doc/basic_api", "docs/source/api-doc/basic_api/benchmark", "docs/source/api-doc/basic_api/config", "docs/source/api-doc/basic_api/mix_precision", "docs/source/api-doc/basic_api/objective", "docs/source/api-doc/basic_api/quantization", "docs/source/api-doc/basic_api/training", "docs/source/api-doc/common", "docs/source/api-doc/common/benchmark", "docs/source/api-doc/common/bleu", "docs/source/api-doc/common/criterion", "docs/source/api-doc/common/data", "docs/source/api-doc/common/data/dataloader", "docs/source/api-doc/common/data/datasets", "docs/source/api-doc/common/data/transforms", "docs/source/api-doc/common/metric", "docs/source/api-doc/common/model", "docs/source/api-doc/common/optimizer", "docs/source/api-doc/component", "docs/source/api-doc/component/Distillation", "docs/source/api-doc/component/MixedPrecision", "docs/source/api-doc/component/ModelConversion", "docs/source/api-doc/component/Nas", "docs/source/api-doc/component/Pruning", "docs/source/api-doc/component/Quantization", "docs/source/api-doc/component/Scheduler", "docs/source/api-doc/contrib", "docs/source/api-doc/model", "docs/source/api-doc/pythonic", "docs/source/api-doc/strategy", "docs/source/api-doc/strategy/strategy", "docs/source/api-doc/utils", "docs/source/bench", "docs/source/benchmark", "docs/source/dataloader", "docs/source/dataset", "docs/source/design", "docs/source/distillation", "docs/source/distillation_quantization", "docs/source/distributed", "docs/source/examples_readme", "docs/source/export", "docs/source/faq", "docs/source/framework_yaml", "docs/source/get_started", "docs/source/incompatible_changes", "docs/source/infrastructure", "docs/source/installation_guide", "docs/source/legal_information", "docs/source/metric", "docs/source/mixed_precision", "docs/source/model", "docs/source/neural_coder/README", "docs/source/neural_coder/docs/AWSSageMakerSupport", "docs/source/neural_coder/docs/BigDLNanoSupport", "docs/source/neural_coder/docs/IntelCPU_PerformanceSetting", "docs/source/neural_coder/docs/PythonAPI", "docs/source/neural_coder/docs/PythonLauncher", "docs/source/neural_coder/docs/Quantization", "docs/source/neural_coder/docs/SupportMatrix", "docs/source/neural_coder/docs/release_notes/v0.4", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/DEVELOP", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/README", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/RELEASE", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/DEVELOP", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/RELEASE", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/README", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/vsc-extension-quickstart", "docs/source/objective", "docs/source/orchestration", "docs/source/platform_configuration", "docs/source/pruning", "docs/source/pruning_details", "docs/source/publication_list", "docs/source/pythonic_style", "docs/source/quantization", "docs/source/quantization_mixed_precision", "docs/source/releases_info", "docs/source/sigopt_strategy", "docs/source/tensorboard", "docs/source/transform", "docs/source/tuning_strategies", "docs/source/user_guide", "docs/source/user_yaml", "docs/source/validated_model_list", "index"], "filenames": ["autoapi/644ec953a7dc_pruning_support/index.rst", "autoapi/6ece06672ed3_v1_14/index.rst", "autoapi/6f0d0f71d92e_v1_13/index.rst", "autoapi/9e89549a08c8_v1_11/index.rst", "autoapi/block_mask/index.rst", "autoapi/env/index.rst", "autoapi/neural_compressor/adaptor/adaptor/index.rst", "autoapi/neural_compressor/adaptor/index.rst", "autoapi/neural_compressor/adaptor/keras/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/quantizer/index.rst", "autoapi/neural_compressor/adaptor/mxnet/index.rst", "autoapi/neural_compressor/adaptor/mxnet_utils/index.rst", "autoapi/neural_compressor/adaptor/mxnet_utils/util/index.rst", "autoapi/neural_compressor/adaptor/onnxrt/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/calibration/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/activation/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/argmax/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/attention/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/binary_op/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/concat/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/conv/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/direct_q8/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/embed_layernorm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gather/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gavgpool/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gemm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/lstm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/matmul/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/maxpool/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/ops/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/pad/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/pooling/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/resize/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/split/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/quantizer/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/util/index.rst", "autoapi/neural_compressor/adaptor/pytorch/index.rst", "autoapi/neural_compressor/adaptor/query/index.rst", "autoapi/neural_compressor/adaptor/tensorflow/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter_without_calib/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/bf16_convert/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_add_to_biasadd/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_layout/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_leakyrelu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_nan_to_random/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_placeholder_to_const/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dequantize_cast_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dilated_contraction/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dummy_biasadd/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/expanddims_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fetch_weight_from_reshape/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_batch_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_constant/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_biasadd_add/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_column_wise_mul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_conv_with_math/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_in/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_gelu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_layer_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_reshape_transpose/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/graph_cse_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/grappler_pass/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/insert_print_node/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/move_squeeze_after_relu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/pre_optimize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/remove_training_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/rename_batch_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/split_shared_input/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_equivalent_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_unused_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/switch_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/graph_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_fake_quant/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value_without_calib/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_requantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_requantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/meta_op_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_hostconst_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_quantized_op_cse/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/rnn_convert/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/scale_propagation/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_node/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_schema/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/tf2onnx_utils/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/insert_qdq_pattern/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/merge_duplicated_qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/share_qdq_y_pattern/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_util/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/fake_quantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_config/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_helper/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/optimize_layer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_wrapper/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_concatv2/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_deconv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_in/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_matmul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_pooling/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/optimize_qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_concatv2/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_for_intel_cpu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_matmul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_pooling/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph_common/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/tf2onnx_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/bias_correction/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/graph_transform_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/insert_logging/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/rerange_quantized_concat/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/util/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/bf16_convert/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/hawq_metric/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/onnx/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/smooth_quant/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/symbolic_trace/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/util/index.rst", "autoapi/neural_compressor/algorithm/algorithm/index.rst", "autoapi/neural_compressor/algorithm/fast_bias_correction/index.rst", "autoapi/neural_compressor/algorithm/index.rst", "autoapi/neural_compressor/algorithm/smooth_quant/index.rst", "autoapi/neural_compressor/algorithm/weight_correction/index.rst", "autoapi/neural_compressor/benchmark/index.rst", "autoapi/neural_compressor/compression/callbacks/index.rst", "autoapi/neural_compressor/compression/distillation/criterions/index.rst", "autoapi/neural_compressor/compression/distillation/index.rst", "autoapi/neural_compressor/compression/index.rst", "autoapi/neural_compressor/compression/pruner/criteria/index.rst", "autoapi/neural_compressor/compression/pruner/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/index.rst", "autoapi/neural_compressor/compression/pruner/regs/index.rst", "autoapi/neural_compressor/compression/pruner/schedulers/index.rst", "autoapi/neural_compressor/compression/pruner/utils/index.rst", "autoapi/neural_compressor/conf/config/index.rst", "autoapi/neural_compressor/conf/dotdict/index.rst", "autoapi/neural_compressor/conf/index.rst", "autoapi/neural_compressor/conf/pythonic_config/index.rst", "autoapi/neural_compressor/config/index.rst", "autoapi/neural_compressor/contrib/index.rst", "autoapi/neural_compressor/contrib/strategy/index.rst", "autoapi/neural_compressor/contrib/strategy/sigopt/index.rst", "autoapi/neural_compressor/contrib/strategy/tpe/index.rst", "autoapi/neural_compressor/data/dataloaders/base_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/default_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/fetcher/index.rst", "autoapi/neural_compressor/data/dataloaders/index.rst", "autoapi/neural_compressor/data/dataloaders/mxnet_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/onnxrt_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/pytorch_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/sampler/index.rst", "autoapi/neural_compressor/data/dataloaders/tensorflow_dataloader/index.rst", "autoapi/neural_compressor/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/data/datasets/index.rst", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/data/filters/filter/index.rst", "autoapi/neural_compressor/data/filters/index.rst", "autoapi/neural_compressor/data/index.rst", "autoapi/neural_compressor/data/transforms/coco_transform/index.rst", "autoapi/neural_compressor/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/data/transforms/index.rst", "autoapi/neural_compressor/data/transforms/postprocess/index.rst", "autoapi/neural_compressor/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/benchmark/index.rst", "autoapi/neural_compressor/experimental/common/criterion/index.rst", "autoapi/neural_compressor/experimental/common/dataloader/index.rst", "autoapi/neural_compressor/experimental/common/index.rst", "autoapi/neural_compressor/experimental/common/metric/index.rst", "autoapi/neural_compressor/experimental/common/model/index.rst", "autoapi/neural_compressor/experimental/common/optimizer/index.rst", "autoapi/neural_compressor/experimental/common/postprocess/index.rst", "autoapi/neural_compressor/experimental/common/torch_utils/index.rst", "autoapi/neural_compressor/experimental/component/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/index.rst", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/index.rst", "autoapi/neural_compressor/experimental/data/index.rst", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/experimental/data/transforms/index.rst", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/experimental/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/distillation/index.rst", "autoapi/neural_compressor/experimental/export/index.rst", "autoapi/neural_compressor/experimental/export/qlinear2qdq/index.rst", "autoapi/neural_compressor/experimental/export/tf2onnx/index.rst", "autoapi/neural_compressor/experimental/export/torch2onnx/index.rst", "autoapi/neural_compressor/experimental/export/utils/index.rst", "autoapi/neural_compressor/experimental/graph_optimization/index.rst", "autoapi/neural_compressor/experimental/index.rst", "autoapi/neural_compressor/experimental/metric/bleu/index.rst", "autoapi/neural_compressor/experimental/metric/bleu_util/index.rst", "autoapi/neural_compressor/experimental/metric/coco_label_map/index.rst", "autoapi/neural_compressor/experimental/metric/coco_tools/index.rst", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/experimental/metric/f1/index.rst", "autoapi/neural_compressor/experimental/metric/index.rst", "autoapi/neural_compressor/experimental/metric/metric/index.rst", "autoapi/neural_compressor/experimental/mixed_precision/index.rst", "autoapi/neural_compressor/experimental/model_conversion/index.rst", "autoapi/neural_compressor/experimental/nas/basic_nas/index.rst", "autoapi/neural_compressor/experimental/nas/dynas/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/dynas_manager/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/dynas_predictor/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/dynas_search/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/dynas_utils/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/machine_translation/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/machine_translation/modules_supernetwork/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/machine_translation/transformer_interface/index.rst", "autoapi/neural_compressor/experimental/nas/dynast/supernetwork/machine_translation/transformer_supernetwork/index.rst", "autoapi/neural_compressor/experimental/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas_utils/index.rst", "autoapi/neural_compressor/experimental/nas/search_algorithms/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/gradient_sensitivity/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/group_lasso/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/magnitude/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/pattern_lock/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/pruner/index.rst", "autoapi/neural_compressor/experimental/pruning/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_v2/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index.rst", "autoapi/neural_compressor/experimental/quantization/index.rst", "autoapi/neural_compressor/experimental/scheduler/index.rst", "autoapi/neural_compressor/index.rst", "autoapi/neural_compressor/metric/bleu/index.rst", "autoapi/neural_compressor/metric/bleu_util/index.rst", "autoapi/neural_compressor/metric/coco_label_map/index.rst", "autoapi/neural_compressor/metric/coco_tools/index.rst", "autoapi/neural_compressor/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/metric/f1/index.rst", "autoapi/neural_compressor/metric/index.rst", "autoapi/neural_compressor/metric/metric/index.rst", "autoapi/neural_compressor/mix_precision/index.rst", "autoapi/neural_compressor/model/base_model/index.rst", "autoapi/neural_compressor/model/index.rst", "autoapi/neural_compressor/model/keras_model/index.rst", "autoapi/neural_compressor/model/model/index.rst", "autoapi/neural_compressor/model/mxnet_model/index.rst", "autoapi/neural_compressor/model/nets_factory/index.rst", "autoapi/neural_compressor/model/onnx_model/index.rst", "autoapi/neural_compressor/model/tensorflow_model/index.rst", "autoapi/neural_compressor/model/torch_model/index.rst", "autoapi/neural_compressor/objective/index.rst", "autoapi/neural_compressor/quantization/index.rst", "autoapi/neural_compressor/strategy/auto_mixed_precision/index.rst", "autoapi/neural_compressor/strategy/basic/index.rst", "autoapi/neural_compressor/strategy/bayesian/index.rst", "autoapi/neural_compressor/strategy/conservative/index.rst", "autoapi/neural_compressor/strategy/exhaustive/index.rst", "autoapi/neural_compressor/strategy/hawq_v2/index.rst", "autoapi/neural_compressor/strategy/index.rst", "autoapi/neural_compressor/strategy/mse/index.rst", "autoapi/neural_compressor/strategy/mse_v2/index.rst", "autoapi/neural_compressor/strategy/random/index.rst", "autoapi/neural_compressor/strategy/strategy/index.rst", "autoapi/neural_compressor/strategy/utils/constant/index.rst", "autoapi/neural_compressor/strategy/utils/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_space/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_structs/index.rst", "autoapi/neural_compressor/strategy/utils/utility/index.rst", "autoapi/neural_compressor/training/index.rst", "autoapi/neural_compressor/utils/collect_layer_histogram/index.rst", "autoapi/neural_compressor/utils/constant/index.rst", "autoapi/neural_compressor/utils/create_obj_from_config/index.rst", "autoapi/neural_compressor/utils/index.rst", "autoapi/neural_compressor/utils/kl_divergence/index.rst", "autoapi/neural_compressor/utils/load_huggingface/index.rst", "autoapi/neural_compressor/utils/logger/index.rst", "autoapi/neural_compressor/utils/options/index.rst", "autoapi/neural_compressor/utils/pytorch/index.rst", "autoapi/neural_compressor/utils/utility/index.rst", "autoapi/neural_compressor/ux/components/benchmark/benchmark/index.rst", "autoapi/neural_compressor/ux/components/benchmark/benchmark_model/index.rst", "autoapi/neural_compressor/ux/components/benchmark/execute_benchmark/index.rst", "autoapi/neural_compressor/ux/components/benchmark/index.rst", "autoapi/neural_compressor/ux/components/config_generator/benchmark_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/graph_optimization_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/mixed_precision_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/profiling_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/pruning_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/quantization_config_generator/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/configuration_parser/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/get_boundary_nodes/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/get_configuration/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/params_feeder/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/pruning_config_parser/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_manager/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/benchmark/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/benchmark_result/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/dataloader/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/dataset/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/domain/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/domain_flavour/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/example/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/framework/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/metric/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/model/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/optimization/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/optimization_type/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/precision/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/profiling/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/profiling_result/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/project/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/pruning_details/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/transform/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/tuning_details/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/tuning_history/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/benchmark_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/dataset_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/db_operations/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/diagnosis_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/dictionaries_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/examples_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/model_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/optimization_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/profiling_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/project_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/index.rst", "autoapi/neural_compressor/ux/components/db_manager/params_interfaces/index.rst", "autoapi/neural_compressor/ux/components/db_manager/utils/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/factory/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/onnx_diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/onnx_diagnosis/onnxrt_diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/op_details/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/op_entry/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/tensorflow_diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/tensorflow_diagnosis/tensorflow_diagnosis/index.rst", "autoapi/neural_compressor/ux/components/file_browser/file_browser/index.rst", "autoapi/neural_compressor/ux/components/file_browser/index.rst", "autoapi/neural_compressor/ux/components/graph/attribute/index.rst", "autoapi/neural_compressor/ux/components/graph/collapser/index.rst", "autoapi/neural_compressor/ux/components/graph/edge/index.rst", "autoapi/neural_compressor/ux/components/graph/graph/index.rst", "autoapi/neural_compressor/ux/components/graph/graph_reader/index.rst", "autoapi/neural_compressor/ux/components/graph/index.rst", "autoapi/neural_compressor/ux/components/graph/node/index.rst", "autoapi/neural_compressor/ux/components/graph/reader/index.rst", "autoapi/neural_compressor/ux/components/graph/reader/onnxrt_reader/index.rst", "autoapi/neural_compressor/ux/components/graph/reader/tensorflow_reader/index.rst", "autoapi/neural_compressor/ux/components/index.rst", "autoapi/neural_compressor/ux/components/jobs_management/index.rst", "autoapi/neural_compressor/ux/components/jobs_management/jobs_control_queue/index.rst", "autoapi/neural_compressor/ux/components/jobs_management/jobs_manager/index.rst", "autoapi/neural_compressor/ux/components/jobs_management/request/index.rst", "autoapi/neural_compressor/ux/components/manage_workspace/index.rst", "autoapi/neural_compressor/ux/components/model/domain/index.rst", "autoapi/neural_compressor/ux/components/model/index.rst", "autoapi/neural_compressor/ux/components/model/model/index.rst", "autoapi/neural_compressor/ux/components/model/model_type_getter/index.rst", "autoapi/neural_compressor/ux/components/model/onnxrt/index.rst", "autoapi/neural_compressor/ux/components/model/onnxrt/model/index.rst", "autoapi/neural_compressor/ux/components/model/pytorch/index.rst", "autoapi/neural_compressor/ux/components/model/pytorch/model/index.rst", "autoapi/neural_compressor/ux/components/model/repository/index.rst", "autoapi/neural_compressor/ux/components/model/shape/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/frozen_pb/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/keras/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/meta_graph/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/model/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/saved_model/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/utils/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/download_config/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/download_model/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/downloader/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/list_models/index.rst", "autoapi/neural_compressor/ux/components/names_mapper/index.rst", "autoapi/neural_compressor/ux/components/names_mapper/names_mapper/index.rst", "autoapi/neural_compressor/ux/components/optimization/execute_optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/factory/index.rst", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/graph_optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/index.rst", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/optimize_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/index.rst", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/mixed_precision/index.rst", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/optimize_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/neural_coder_optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/neural_coder_optimization/optimize_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/pruning/index.rst", "autoapi/neural_compressor/ux/components/optimization/pruning/optimize_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/pruning/pruning/index.rst", "autoapi/neural_compressor/ux/components/optimization/tune/index.rst", "autoapi/neural_compressor/ux/components/optimization/tune/tune_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/tune/tuning/index.rst", "autoapi/neural_compressor/ux/components/optimization/tuning_history/index.rst", "autoapi/neural_compressor/ux/components/profiling/execute_profiling/index.rst", "autoapi/neural_compressor/ux/components/profiling/factory/index.rst", "autoapi/neural_compressor/ux/components/profiling/index.rst", "autoapi/neural_compressor/ux/components/profiling/profile_model/index.rst", "autoapi/neural_compressor/ux/components/profiling/profiler/index.rst", "autoapi/neural_compressor/ux/components/profiling/profiling/index.rst", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/factory/index.rst", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/index.rst", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/profiler/index.rst", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/utils/index.rst", "autoapi/neural_compressor/ux/inc_bench/index.rst", "autoapi/neural_compressor/ux/index.rst", "autoapi/neural_compressor/ux/utils/consts/index.rst", "autoapi/neural_compressor/ux/utils/environment/index.rst", "autoapi/neural_compressor/ux/utils/exceptions/index.rst", "autoapi/neural_compressor/ux/utils/executor/index.rst", "autoapi/neural_compressor/ux/utils/expiring_dict/index.rst", "autoapi/neural_compressor/ux/utils/github_info/index.rst", "autoapi/neural_compressor/ux/utils/hw_info/index.rst", "autoapi/neural_compressor/ux/utils/index.rst", "autoapi/neural_compressor/ux/utils/json_serializer/index.rst", "autoapi/neural_compressor/ux/utils/logger/index.rst", "autoapi/neural_compressor/ux/utils/parser/index.rst", "autoapi/neural_compressor/ux/utils/proc/index.rst", "autoapi/neural_compressor/ux/utils/processes/index.rst", "autoapi/neural_compressor/ux/utils/singleton/index.rst", "autoapi/neural_compressor/ux/utils/status_updates/index.rst", "autoapi/neural_compressor/ux/utils/templates/index.rst", "autoapi/neural_compressor/ux/utils/templates/metric/index.rst", "autoapi/neural_compressor/ux/utils/templates/workdir/index.rst", "autoapi/neural_compressor/ux/utils/utils/index.rst", "autoapi/neural_compressor/ux/utils/workload/config/index.rst", "autoapi/neural_compressor/ux/utils/workload/dataloader/index.rst", "autoapi/neural_compressor/ux/utils/workload/evaluation/index.rst", "autoapi/neural_compressor/ux/utils/workload/graph_optimization/index.rst", "autoapi/neural_compressor/ux/utils/workload/index.rst", "autoapi/neural_compressor/ux/utils/workload/mixed_precision/index.rst", "autoapi/neural_compressor/ux/utils/workload/model/index.rst", "autoapi/neural_compressor/ux/utils/workload/pruning/index.rst", "autoapi/neural_compressor/ux/utils/workload/quantization/index.rst", "autoapi/neural_compressor/ux/utils/workload/tuning/index.rst", "autoapi/neural_compressor/ux/utils/yaml_utils/index.rst", "autoapi/neural_compressor/ux/web/communication/index.rst", "autoapi/neural_compressor/ux/web/configuration/index.rst", "autoapi/neural_compressor/ux/web/exceptions/index.rst", "autoapi/neural_compressor/ux/web/index.rst", "autoapi/neural_compressor/ux/web/router/index.rst", "autoapi/neural_compressor/ux/web/server/index.rst", "autoapi/neural_compressor/ux/web/service/benchmark/index.rst", "autoapi/neural_compressor/ux/web/service/history_snapshot_parser/index.rst", "autoapi/neural_compressor/ux/web/service/index.rst", "autoapi/neural_compressor/ux/web/service/model/index.rst", "autoapi/neural_compressor/ux/web/service/optimization/index.rst", "autoapi/neural_compressor/ux/web/service/profiling/index.rst", "autoapi/neural_compressor/ux/web/service/request_data_processor/index.rst", "autoapi/neural_compressor/ux/web/service/response_generator/index.rst", "autoapi/neural_compressor/ux/web/service/workload/index.rst", "autoapi/neural_compressor/version/index.rst", "docs/build_docs/source/index.rst", "docs/source/CODE_OF_CONDUCT.md", "docs/source/CONTRIBUTING.md", "docs/source/FX.md", "docs/source/NAS.md", "docs/source/SECURITY.md", "docs/source/Welcome.md", "docs/source/adaptor.md", "docs/source/api-doc/adaptor.rst", "docs/source/api-doc/adaptor/onnxrt.rst", "docs/source/api-doc/adaptor/torch_utils.rst", "docs/source/api-doc/adaptor/torch_utils/bf16_convert.rst", "docs/source/api-doc/adaptor/torch_utils/hawq_metric.rst", "docs/source/api-doc/adaptor/torch_utils/onnx.rst", "docs/source/api-doc/adaptor/torch_utils/symbolic_trace.rst", "docs/source/api-doc/adaptor/torch_utils/util.rst", "docs/source/api-doc/algorithm.rst", "docs/source/api-doc/apis.rst", "docs/source/api-doc/basic_api.rst", "docs/source/api-doc/basic_api/benchmark.rst", "docs/source/api-doc/basic_api/config.rst", "docs/source/api-doc/basic_api/mix_precision.rst", "docs/source/api-doc/basic_api/objective.rst", "docs/source/api-doc/basic_api/quantization.rst", "docs/source/api-doc/basic_api/training.rst", "docs/source/api-doc/common.rst", "docs/source/api-doc/common/benchmark.rst", "docs/source/api-doc/common/bleu.rst", "docs/source/api-doc/common/criterion.rst", "docs/source/api-doc/common/data.rst", "docs/source/api-doc/common/data/dataloader.rst", "docs/source/api-doc/common/data/datasets.rst", "docs/source/api-doc/common/data/transforms.rst", "docs/source/api-doc/common/metric.rst", "docs/source/api-doc/common/model.rst", "docs/source/api-doc/common/optimizer.rst", "docs/source/api-doc/component.rst", "docs/source/api-doc/component/Distillation.rst", "docs/source/api-doc/component/MixedPrecision.rst", "docs/source/api-doc/component/ModelConversion.rst", "docs/source/api-doc/component/Nas.rst", "docs/source/api-doc/component/Pruning.rst", "docs/source/api-doc/component/Quantization.rst", "docs/source/api-doc/component/Scheduler.rst", "docs/source/api-doc/contrib.rst", "docs/source/api-doc/model.rst", "docs/source/api-doc/pythonic.rst", "docs/source/api-doc/strategy.rst", "docs/source/api-doc/strategy/strategy.rst", "docs/source/api-doc/utils.rst", "docs/source/bench.md", "docs/source/benchmark.md", "docs/source/dataloader.md", "docs/source/dataset.md", "docs/source/design.md", "docs/source/distillation.md", "docs/source/distillation_quantization.md", "docs/source/distributed.md", "docs/source/examples_readme.md", "docs/source/export.md", "docs/source/faq.md", "docs/source/framework_yaml.md", "docs/source/get_started.md", "docs/source/incompatible_changes.md", "docs/source/infrastructure.md", "docs/source/installation_guide.md", "docs/source/legal_information.md", "docs/source/metric.md", "docs/source/mixed_precision.md", "docs/source/model.md", "docs/source/neural_coder/README.md", "docs/source/neural_coder/docs/AWSSageMakerSupport.md", "docs/source/neural_coder/docs/BigDLNanoSupport.md", "docs/source/neural_coder/docs/IntelCPU_PerformanceSetting.md", "docs/source/neural_coder/docs/PythonAPI.md", "docs/source/neural_coder/docs/PythonLauncher.md", "docs/source/neural_coder/docs/Quantization.md", "docs/source/neural_coder/docs/SupportMatrix.md", "docs/source/neural_coder/docs/release_notes/v0.4.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/DEVELOP.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/README.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/RELEASE.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/DEVELOP.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/RELEASE.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/README.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/vsc-extension-quickstart.md", "docs/source/objective.md", "docs/source/orchestration.md", "docs/source/platform_configuration.md", "docs/source/pruning.md", "docs/source/pruning_details.md", "docs/source/publication_list.md", "docs/source/pythonic_style.md", "docs/source/quantization.md", "docs/source/quantization_mixed_precision.md", "docs/source/releases_info.md", "docs/source/sigopt_strategy.md", "docs/source/tensorboard.md", "docs/source/transform.md", "docs/source/tuning_strategies.md", "docs/source/user_guide.md", "docs/source/user_yaml.md", "docs/source/validated_model_list.md", "index.rst"], "titles": ["<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">644ec953a7dc_pruning_support</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">6ece06672ed3_v1_14</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">6f0d0f71d92e_v1_13</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">9e89549a08c8_v1_11</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">block_mask</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">env</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.adaptor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.onnxrt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.calibration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.activation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.argmax</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.attention</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.binary_op</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.concat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.direct_q8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.embed_layernorm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gather</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gavgpool</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gemm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.lstm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.maxpool</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.ops</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.pad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.resize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.split</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.query</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tensorflow</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_converter_without_calib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph_common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.tf2onnx_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.bias_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.insert_logging</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.bf16_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.hawq_metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.smooth_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.symbolic_trace</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.algorithm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.fast_bias_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.smooth_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.weight_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.callbacks</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.distillation.criterions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.distillation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.criteria</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.regs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.schedulers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.dotdict</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.pythonic_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy.sigopt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy.tpe</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.base_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.default_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.fetcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.mxnet_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.onnxrt_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.pytorch_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.tensorflow_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.bert_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.coco_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dummy_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dummy_dataset_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.imagenet_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.style_transfer_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters.coco_filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters.filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.coco_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.imagenet_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.postprocess</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.tokenization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.criterion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.postprocess</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.torch_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.component</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.base_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.default_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.fetcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.mxnet_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.onnxrt_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.pytorch_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.tensorflow_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.bert_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.coco_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dummy_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dummy_dataset_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.imagenet_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.style_transfer_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters.coco_filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters.filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.imagenet_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.tokenization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.distillation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.qlinear2qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.tf2onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.torch2onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.graph_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.bleu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.bleu_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.coco_label_map</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.coco_tools</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.evaluate_squad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.f1</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.model_conversion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.basic_nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.dynas_manager</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.dynas_predictor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.dynas_search</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.dynas_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.supernetwork</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.supernetwork.machine_translation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.nas_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.search_algorithms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.gradient_sensitivity</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.group_lasso</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.magnitude</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.pattern_lock</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns.pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns.tile_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.prune_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.scheduler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.scheduler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.bleu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.bleu_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.coco_label_map</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.coco_tools</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.evaluate_squad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.f1</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.mix_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.base_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.keras_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.mxnet_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.nets_factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.onnx_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.tensorflow_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.torch_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.objective</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.auto_mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.basic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.bayesian</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.conservative</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.exhaustive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.hawq_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.mse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.mse_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_space</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_structs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.training</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.collect_layer_histogram</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.create_obj_from_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.kl_divergence</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.load_huggingface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.options</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.benchmark.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.benchmark.benchmark_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.benchmark.execute_benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.benchmark_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.graph_optimization_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.mixed_precision_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.profiling_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.pruning_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.quantization_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.configuration_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.get_boundary_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.get_configuration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.params_feeder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.pruning_config_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_manager</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.benchmark_result</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.domain</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.domain_flavour</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.example</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.framework</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.optimization_type</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.profiling_result</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.project</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.pruning_details</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.tuning_details</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.tuning_history</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.db_operations</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.examples_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.model_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.project_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.params_interfaces</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.onnx_diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.op_details</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.op_entry</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.tensorflow_diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.file_browser.file_browser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.file_browser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.attribute</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.collapser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.edge</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.graph_reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.reader.onnxrt_reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.reader.tensorflow_reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.jobs_management</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.jobs_management.jobs_control_queue</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.jobs_management.jobs_manager</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.jobs_management.request</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.manage_workspace</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.domain</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.model_type_getter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.onnxrt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.onnxrt.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.pytorch.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.repository</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.shape</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.frozen_pb</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.keras</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.meta_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.saved_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo.download_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo.download_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo.downloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo.list_models</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.names_mapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.names_mapper.names_mapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.execute_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.graph_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.graph_optimizer.optimize_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.mixed_precision.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.mixed_precision.optimize_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.neural_coder_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.pruning.optimize_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.pruning.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.tune</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.tune.tune_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.tune.tuning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.tuning_history</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.execute_profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.profile_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.tensorflow_profiler.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.tensorflow_profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.tensorflow_profiler.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.tensorflow_profiler.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.inc_bench</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.consts</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.environment</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.exceptions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.executor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.expiring_dict</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.github_info</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.hw_info</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.json_serializer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.proc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.processes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.singleton</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.status_updates</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.templates</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.templates.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.templates.workdir</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.evaluation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.graph_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.tuning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.yaml_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.communication</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.configuration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.exceptions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.router</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.server</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.history_snapshot_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.request_data_processor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.response_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.workload</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.version</span></code>", "Intel\u00ae Neural Compressor Documentation", "Contributor Covenant Code of Conduct", "Contribution Guidelines", "FX", "Neural Architecture Search", "Security Policy", "Intel\u00ae Neural Compressor", "Adaptor", "Adaptor", "ONNX Runtime", "Torch Utils", "Bf16 Convert", "Hawq Metric", "Onnx", "Symbolic Trace", "Util", "Algorithm", "APIs", "User facing APIs", "Benchmark", "Config", "Mix Precision", "Objective", "Quantization", "Training", "Common", "Benchmark", "BLEU", "Criterion", "Data", "Dataloader", "Datasets", "Transforms", "Metric", "Model", "Optimizer", "Component(experiemental API, deprecated in 2.0)", "Distillation", "MixedPrecision", "ModelConversion", "Neural architecture search (NAS)", "Pruning", "Quantization", "Scheduler", "Contrib", "Model", "Pythonic", "Strategy", "Strategies", "Utils", "Intel\u00ae Neural Compressor Bench", "Benchmarking", "DataLoader", "Dataset", "Design", "Distillation", "Distillation for Quantization", "Distributed Training and Inference (Evaluation)", "Examples", "Export", "Frequently Asked Questions", "Framework YAML Configuration Files", "Getting Started", "Incompatible changes between v1.2 and v1.1", "Infrastructure of Intel\u00ae Neural Compressor", "Installation", "Legal Information", "Metrics", "Mixed Precision", "Model", "Neural Coder", "AWS Amazon SageMaker Support", "BigDL Nano Support", "Intel CPU Platforms: Best Performance Setting", "Neural Coder as Python API", "Python Launcher", "Neural Coder for Quantization", "Supported Optimization Features", "v0.4", "Changelog", "neural_compressor_ext_lab", "Intel\u00ae Neural Compressor as JupyterLab Extension", "Making a new release of neural_compressor_ext_lab", "Changelog", "neural_compressor_ext_lab_alibaba", "Making a new release of neural_compressor_ext_lab_alibaba", "Change Log", "Neural Coder", "Welcome to your VS Code Extension", "Objective", "Optimization Orchestration", "SYSTEM CONFIGURATION", "Pruning", "Pruning details", "Full Publications/Events (56)", "Pythonic Style Access for Configurations", "Quantization", "Turn OFF Auto Mixed Precision during Quantization", "Release", "SigOpt Strategy", "TensorBoard", "Transform", "Tuning Strategies", "User Guide", "User YAML Configuration Files", "Validated Models", "Intel\u00ae Neural Compressor Documentation"], "terms": {"pruning_support": 0, "revis": [0, 1, 2, 3, 337], "id": [0, 1, 2, 3, 96, 153, 200, 202, 236, 246, 248, 249, 250, 251, 294, 296, 297, 298, 299, 324, 337, 361, 362, 364, 365, 366, 368, 371, 372, 373, 374, 375, 377, 378, 380, 381, 409, 410, 413, 481, 551, 591, 623, 626], "644ec953a7dc": 0, "6ece06672ed3": [0, 1], "creat": [0, 1, 2, 3, 5, 13, 41, 96, 99, 104, 116, 133, 154, 157, 174, 184, 186, 204, 205, 212, 222, 224, 238, 245, 249, 257, 258, 268, 269, 270, 292, 297, 302, 313, 316, 324, 326, 328, 329, 334, 360, 377, 387, 388, 392, 393, 474, 495, 508, 521, 525, 528, 531, 577, 593, 604, 606, 608, 609, 612, 620, 623, 624, 626], "date": [0, 1, 2, 3, 314, 465], "2022": [0, 1, 2, 3, 530, 590], "12": [0, 574, 586, 589, 629], "09": [0, 629], "17": [0, 629], "22": [0, 3, 486, 489, 629], "310141": 0, "v1": [1, 2, 3, 41, 140, 195, 196, 197, 198, 234, 250, 251, 253, 298, 299, 300, 301, 310, 581, 586, 591, 593, 622, 623, 629], "14": [1, 2, 169, 239, 241, 242, 311, 583, 629], "6f0d0f71d92e": [1, 2], "08": [1, 201, 237, 625, 629], "31": [1, 629], "07": [1, 2, 628, 629], "16": [1, 576, 577, 616, 629], "24": [1, 626, 629], "229939": 1, "update_dataload": 1, "db_session": [1, 361, 362, 363, 364, 365, 366, 368, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 387, 388, 390, 392, 395], "sqlalchemi": [1, 360, 361, 362, 363, 364, 365, 366, 368, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 387, 388, 390, 392, 393, 395, 584, 589], "orm": [1, 361, 362, 363, 364, 365, 366, 368, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 387, 388, 390, 392, 395], "session": [1, 140, 183, 221, 310, 360, 361, 362, 363, 364, 365, 366, 368, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 387, 388, 390, 392, 393, 395, 624, 626], "updat": [1, 42, 56, 68, 96, 97, 104, 109, 116, 158, 160, 161, 163, 164, 242, 246, 252, 253, 261, 272, 273, 275, 276, 277, 286, 288, 294, 300, 301, 309, 310, 311, 324, 344, 361, 362, 363, 364, 372, 375, 377, 378, 380, 382, 388, 390, 391, 392, 395, 465, 488, 492, 497, 500, 502, 506, 551, 574, 583, 591, 597, 602, 605, 615, 616, 617, 626], "dataload": [1, 6, 8, 11, 13, 14, 15, 39, 41, 142, 144, 145, 147, 148, 150, 153, 154, 161, 172, 173, 184, 195, 202, 205, 211, 222, 233, 238, 245, 255, 277, 278, 283, 288, 291, 292, 293, 311, 313, 331, 334, 342, 347, 354, 358, 369, 383, 386, 388, 393, 395, 417, 458, 471, 474, 477, 485, 496, 497, 501, 527, 530, 531, 553, 574, 579, 580, 581, 586, 587, 591, 592, 614, 620, 621, 624, 625, 628], "exist": [1, 47, 97, 133, 153, 155, 166, 202, 203, 249, 269, 297, 310, 326, 328, 337, 362, 382, 388, 390, 391, 428, 479, 495, 496, 591, 598, 616, 626], "databas": [1, 186, 190, 195, 224, 360, 361, 362, 363, 364, 365, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 388, 389, 390, 391, 392, 393, 465, 479, 495], "update_transform": 1, "transform": [1, 14, 38, 44, 56, 61, 62, 83, 84, 86, 125, 126, 130, 135, 136, 137, 138, 139, 145, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 222, 223, 224, 225, 226, 227, 229, 231, 232, 233, 245, 264, 266, 267, 293, 354, 358, 364, 369, 383, 386, 388, 393, 395, 417, 496, 497, 498, 499, 504, 527, 528, 553, 576, 577, 579, 580, 581, 582, 586, 594, 599, 600, 601, 602, 618, 621, 624, 628, 629], "13": [2, 3, 313, 574, 589], "9e89549a08c8": [2, 3], "29": [2, 629], "41": [2, 629], "291905": 2, "11": [3, 486, 574, 589, 591, 592], "03": [3, 486, 629], "34": [3, 629], "52": [3, 629], "916541": 3, "block": [4, 61, 160, 164, 245, 258, 267, 278, 283, 286, 289, 312, 513, 588, 613, 616, 617], "mask": [4, 160, 161, 163, 184, 222, 249, 265, 267, 272, 275, 276, 282, 286, 288, 290, 297, 311, 616, 617, 629], "run_migrations_offlin": 5, "run": [5, 6, 8, 11, 13, 15, 39, 104, 140, 153, 161, 164, 169, 172, 173, 183, 200, 202, 221, 236, 245, 258, 261, 287, 288, 293, 302, 313, 316, 317, 324, 331, 443, 489, 511, 512, 513, 526, 531, 574, 575, 581, 584, 585, 592, 594, 596, 598, 599, 600, 602, 604, 605, 606, 608, 609, 611, 616, 618, 620, 622, 623, 624, 626, 628], "migrat": [5, 479], "offlin": [5, 341, 525, 620], "mode": [5, 6, 8, 11, 14, 19, 37, 38, 39, 41, 104, 145, 161, 193, 202, 231, 245, 249, 297, 310, 324, 326, 328, 341, 361, 488, 531, 574, 588, 589, 604, 608, 620, 621, 626], "thi": [5, 8, 37, 39, 41, 50, 56, 61, 62, 75, 80, 96, 101, 104, 109, 116, 126, 133, 135, 139, 142, 147, 152, 154, 157, 160, 161, 162, 163, 172, 173, 183, 184, 185, 186, 187, 188, 189, 190, 191, 195, 198, 200, 201, 204, 205, 210, 211, 221, 222, 223, 224, 225, 226, 227, 229, 236, 237, 245, 246, 249, 250, 251, 253, 258, 263, 264, 271, 272, 273, 275, 276, 277, 278, 283, 286, 288, 289, 290, 291, 292, 294, 297, 298, 299, 300, 301, 302, 312, 313, 316, 321, 331, 340, 341, 525, 526, 527, 528, 531, 551, 574, 576, 577, 579, 580, 581, 585, 588, 590, 591, 592, 593, 594, 596, 597, 599, 600, 602, 604, 606, 608, 609, 610, 611, 612, 616, 617, 620, 621, 622, 623, 624, 625, 626], "configur": [5, 6, 8, 11, 13, 14, 39, 40, 41, 96, 104, 112, 141, 147, 153, 154, 157, 160, 164, 165, 169, 172, 173, 175, 178, 186, 189, 195, 202, 207, 224, 227, 238, 239, 242, 244, 245, 249, 255, 256, 257, 258, 260, 268, 269, 278, 283, 287, 289, 291, 292, 293, 297, 302, 311, 312, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 326, 329, 331, 333, 334, 337, 339, 340, 342, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 361, 372, 383, 385, 388, 447, 449, 454, 458, 461, 464, 477, 479, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 511, 513, 527, 528, 531, 574, 577, 591, 598, 612, 613, 616, 622, 625, 626, 629], "context": [5, 13, 341, 619], "just": [5, 91, 174, 195, 198, 199, 201, 204, 205, 206, 207, 209, 212, 237, 312, 528, 601, 605, 611, 614, 620, 625, 626], "url": [5, 186, 224, 442, 509, 590], "an": [5, 13, 14, 37, 39, 56, 61, 62, 64, 96, 99, 109, 133, 135, 142, 147, 152, 160, 161, 163, 177, 182, 186, 190, 195, 198, 201, 205, 210, 211, 215, 220, 224, 228, 233, 237, 245, 246, 249, 250, 251, 258, 265, 268, 269, 270, 292, 293, 294, 297, 298, 299, 302, 309, 316, 405, 410, 486, 523, 525, 527, 528, 530, 531, 551, 576, 577, 578, 583, 591, 592, 594, 598, 599, 602, 611, 613, 617, 618, 623, 624, 625, 626], "engin": [5, 260, 360, 372, 393], "though": [5, 267], "i": [5, 6, 8, 11, 13, 14, 15, 38, 39, 41, 42, 43, 47, 48, 51, 54, 56, 58, 61, 62, 64, 75, 76, 79, 85, 86, 87, 96, 97, 99, 101, 103, 104, 109, 116, 126, 133, 135, 136, 140, 142, 146, 147, 152, 153, 154, 157, 158, 160, 161, 162, 164, 169, 172, 173, 174, 182, 183, 184, 185, 186, 187, 188, 190, 191, 193, 194, 195, 197, 198, 201, 202, 204, 205, 208, 210, 211, 212, 220, 221, 222, 223, 224, 225, 226, 229, 231, 232, 233, 234, 237, 245, 246, 249, 251, 252, 253, 255, 258, 261, 265, 267, 270, 272, 278, 283, 287, 288, 289, 292, 293, 294, 297, 299, 300, 301, 302, 309, 312, 313, 316, 317, 322, 323, 324, 331, 340, 341, 360, 393, 405, 425, 428, 430, 431, 433, 435, 436, 437, 438, 444, 482, 484, 486, 488, 489, 494, 496, 498, 504, 509, 511, 525, 526, 527, 528, 531, 532, 534, 540, 541, 542, 549, 551, 553, 560, 568, 569, 570, 571, 573, 574, 575, 576, 577, 579, 580, 581, 583, 585, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 599, 600, 602, 604, 605, 606, 608, 609, 611, 612, 613, 614, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 628], "accept": [5, 312, 525, 574, 575], "here": [5, 62, 64, 116, 249, 256, 267, 268, 297, 574, 577, 581, 582, 583, 585, 586, 591, 599, 606, 609, 611, 616, 620, 622, 623, 626], "well": [5, 172, 173, 302, 313, 331, 528, 530, 577, 620, 622, 628], "By": [5, 246, 294, 551, 591, 593, 604, 605, 608, 626], "skip": [5, 61, 97, 312, 624, 626], "creation": [5, 357], "we": [5, 38, 61, 62, 64, 68, 80, 96, 104, 133, 135, 145, 151, 152, 153, 183, 202, 204, 205, 221, 246, 249, 256, 267, 268, 294, 297, 318, 319, 337, 525, 527, 531, 551, 576, 581, 583, 585, 591, 598, 599, 602, 606, 609, 611, 612, 613, 614, 616, 617, 619, 620, 623, 624, 626], "don": [5, 135, 152, 160, 486, 527, 574, 626], "t": [5, 61, 62, 64, 104, 133, 135, 152, 160, 195, 198, 201, 204, 205, 237, 251, 260, 261, 265, 292, 299, 486, 495, 527, 531, 574, 579, 581, 592, 612, 626, 628], "even": [5, 56, 574, 616], "need": [5, 6, 8, 11, 13, 14, 38, 39, 56, 75, 80, 97, 99, 103, 104, 126, 133, 145, 153, 160, 172, 173, 174, 182, 183, 186, 190, 193, 194, 195, 198, 201, 204, 205, 206, 207, 212, 220, 221, 224, 231, 232, 233, 237, 238, 245, 252, 253, 258, 265, 267, 278, 283, 292, 300, 301, 302, 308, 309, 312, 313, 317, 321, 324, 331, 340, 341, 515, 527, 531, 574, 576, 577, 579, 581, 588, 592, 594, 596, 597, 600, 604, 605, 606, 608, 609, 611, 612, 616, 619, 620, 621, 622, 625, 626, 628], "dbapi": 5, "avail": [5, 169, 306, 358, 363, 365, 366, 370, 373, 374, 379, 444, 532, 534, 540, 541, 542, 549, 553, 560, 568, 569, 570, 571, 573, 574, 582, 586, 588, 604, 608, 615, 617, 626], "call": [5, 13, 96, 116, 145, 148, 150, 154, 157, 161, 211, 245, 249, 260, 261, 272, 276, 277, 278, 283, 286, 288, 289, 297, 331, 360, 393, 481, 489, 490, 527, 528, 531, 574, 576, 587, 600, 602, 612, 616, 620, 624, 625], "execut": [5, 8, 11, 14, 38, 39, 41, 44, 46, 47, 49, 63, 67, 73, 76, 78, 82, 102, 138, 148, 150, 154, 161, 202, 211, 238, 245, 256, 257, 268, 278, 283, 288, 291, 292, 302, 313, 315, 331, 334, 340, 341, 342, 343, 344, 361, 372, 375, 382, 388, 390, 391, 447, 449, 451, 454, 455, 458, 459, 460, 461, 463, 464, 466, 471, 474, 478, 481, 489, 490, 512, 574, 579, 580, 592, 596, 597, 604, 605, 608, 611, 612, 614, 616, 617, 620, 623, 626, 629], "emit": 5, "given": [5, 13, 14, 15, 37, 41, 61, 62, 64, 96, 98, 99, 109, 110, 140, 147, 160, 161, 169, 195, 198, 200, 201, 236, 237, 249, 297, 309, 310, 311, 313, 324, 337, 405, 411, 425, 428, 430, 431, 433, 435, 436, 438, 482, 496, 509, 528, 616, 617, 625], "string": [5, 6, 8, 37, 38, 39, 40, 41, 50, 57, 73, 96, 97, 104, 109, 110, 133, 136, 140, 155, 160, 161, 162, 163, 164, 165, 184, 186, 203, 208, 222, 224, 238, 242, 244, 245, 246, 249, 255, 256, 257, 260, 268, 269, 270, 278, 283, 286, 287, 288, 289, 290, 291, 292, 294, 297, 306, 310, 311, 326, 328, 334, 341, 354, 474, 496, 520, 591, 625], "script": [5, 246, 247, 250, 251, 294, 295, 298, 299, 343, 344, 430, 447, 449, 451, 454, 455, 457, 458, 460, 461, 463, 464, 469, 581, 588, 594, 598, 601, 602, 605, 618], "output": [5, 15, 37, 38, 39, 41, 47, 51, 53, 54, 62, 64, 68, 79, 85, 87, 92, 96, 97, 99, 103, 104, 107, 116, 133, 140, 147, 155, 160, 161, 166, 169, 172, 173, 200, 203, 205, 206, 210, 236, 238, 239, 241, 242, 244, 245, 246, 249, 253, 258, 259, 267, 286, 293, 294, 297, 300, 301, 302, 309, 310, 311, 313, 331, 332, 335, 337, 338, 341, 361, 372, 375, 382, 388, 390, 391, 425, 435, 436, 437, 451, 455, 458, 481, 489, 497, 503, 527, 531, 551, 574, 579, 580, 581, 583, 585, 587, 591, 593, 602, 611, 612, 614, 616, 619, 620, 624, 625, 626, 628], "run_migrations_onlin": 5, "onlin": [5, 525, 530, 623], "In": [5, 50, 61, 62, 109, 154, 157, 160, 161, 162, 183, 211, 221, 245, 249, 267, 286, 288, 297, 312, 322, 525, 527, 528, 530, 531, 574, 576, 577, 579, 580, 581, 591, 601, 604, 605, 608, 613, 614, 616, 617, 620, 621, 623, 624, 625, 626], "scenario": [5, 358, 531, 574, 575, 579, 616, 617], "associ": [5, 249, 297, 383, 384], "connect": [5, 158, 288, 372, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 574, 611, 615, 616, 617, 623], "adaptor_registri": [6, 531], "cl": [6, 39, 148, 150, 155, 160, 161, 162, 163, 186, 190, 193, 194, 195, 198, 201, 203, 208, 224, 228, 231, 232, 233, 235, 237, 270, 277, 281, 286, 288, 290, 312, 324, 341], "The": [6, 8, 11, 14, 15, 32, 38, 39, 41, 47, 62, 64, 68, 73, 85, 86, 87, 96, 104, 107, 109, 113, 115, 140, 142, 145, 147, 148, 150, 153, 154, 155, 157, 158, 160, 161, 162, 163, 164, 165, 166, 172, 173, 174, 184, 185, 186, 187, 188, 190, 192, 193, 194, 195, 198, 201, 203, 205, 206, 208, 211, 212, 222, 223, 224, 225, 226, 228, 230, 231, 232, 233, 235, 237, 238, 244, 245, 246, 247, 248, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 267, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 281, 283, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 300, 301, 302, 309, 310, 312, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 326, 328, 329, 330, 331, 332, 334, 335, 336, 337, 340, 341, 361, 362, 364, 367, 371, 372, 375, 376, 378, 380, 381, 388, 393, 396, 398, 399, 400, 401, 402, 403, 404, 417, 424, 425, 477, 525, 527, 528, 531, 532, 534, 540, 541, 542, 549, 551, 553, 560, 568, 569, 570, 571, 573, 574, 575, 576, 577, 579, 581, 583, 585, 587, 588, 589, 591, 592, 593, 596, 597, 599, 602, 604, 605, 606, 608, 609, 611, 612, 613, 614, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 628], "decor": [6, 32, 61, 62, 64, 140, 148, 150, 160, 161, 163, 195, 198, 201, 208, 233, 235, 237, 252, 253, 270, 277, 281, 286, 288, 290, 300, 301, 312, 324, 327, 341, 491, 527, 528, 531, 626], "us": [6, 8, 11, 13, 14, 32, 38, 39, 41, 42, 43, 61, 62, 64, 96, 97, 99, 107, 109, 110, 116, 142, 147, 153, 154, 155, 157, 158, 160, 161, 163, 166, 172, 173, 182, 183, 184, 185, 186, 187, 188, 190, 191, 195, 198, 200, 201, 202, 203, 208, 220, 221, 222, 223, 224, 225, 226, 229, 233, 235, 236, 237, 238, 239, 241, 242, 244, 245, 246, 247, 249, 253, 254, 255, 256, 259, 261, 267, 268, 270, 277, 278, 281, 283, 286, 288, 289, 290, 291, 292, 293, 294, 295, 297, 301, 302, 312, 313, 316, 318, 319, 321, 322, 323, 324, 327, 328, 332, 333, 334, 335, 336, 337, 341, 388, 393, 398, 399, 403, 405, 417, 424, 426, 451, 455, 479, 496, 498, 508, 509, 525, 526, 527, 528, 531, 551, 574, 575, 576, 577, 579, 580, 581, 583, 585, 587, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 602, 604, 606, 608, 609, 611, 613, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629], "regist": [6, 32, 126, 148, 150, 154, 155, 157, 158, 160, 161, 162, 163, 186, 190, 193, 194, 195, 198, 201, 203, 208, 211, 224, 228, 231, 232, 233, 235, 237, 238, 245, 252, 253, 270, 271, 277, 278, 279, 280, 281, 283, 286, 288, 290, 300, 301, 308, 311, 312, 316, 324, 327, 528, 531, 577, 581, 591, 612, 613, 626], "all": [6, 8, 13, 15, 32, 39, 41, 54, 57, 79, 91, 96, 116, 125, 130, 148, 150, 153, 154, 155, 157, 160, 161, 164, 174, 175, 178, 182, 186, 190, 193, 194, 195, 198, 201, 202, 203, 208, 211, 212, 220, 224, 228, 231, 232, 233, 235, 237, 242, 245, 246, 249, 251, 252, 253, 263, 264, 265, 267, 270, 277, 278, 279, 280, 281, 282, 283, 286, 289, 292, 294, 297, 299, 300, 301, 303, 304, 309, 312, 314, 315, 316, 317, 318, 324, 326, 327, 328, 334, 341, 345, 357, 360, 369, 386, 388, 393, 398, 399, 412, 414, 417, 418, 424, 425, 428, 430, 437, 443, 450, 452, 456, 457, 459, 462, 468, 473, 477, 486, 490, 513, 525, 530, 531, 574, 576, 577, 581, 585, 589, 594, 602, 605, 606, 609, 610, 611, 612, 614, 615, 616, 617, 618, 620, 621, 625, 626], "subclass": [6, 32, 148, 150, 160, 161, 163, 179, 183, 186, 190, 193, 194, 195, 198, 201, 208, 217, 221, 224, 228, 231, 232, 233, 235, 237, 252, 253, 270, 277, 279, 280, 281, 286, 288, 290, 300, 301, 312, 324, 327, 531], "paramet": [6, 8, 11, 13, 14, 15, 37, 38, 39, 41, 50, 51, 54, 55, 56, 57, 61, 62, 64, 68, 73, 79, 80, 83, 84, 96, 97, 99, 104, 107, 109, 110, 116, 126, 133, 134, 136, 140, 141, 142, 146, 147, 148, 150, 153, 154, 155, 157, 158, 160, 161, 162, 163, 164, 165, 166, 169, 172, 173, 174, 183, 184, 186, 190, 193, 194, 195, 197, 198, 200, 201, 202, 203, 208, 212, 221, 222, 224, 228, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 267, 268, 269, 270, 271, 272, 273, 275, 276, 277, 278, 281, 283, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 306, 308, 309, 310, 311, 312, 313, 316, 317, 321, 324, 326, 327, 328, 329, 330, 331, 334, 335, 337, 338, 340, 341, 354, 358, 363, 364, 383, 384, 385, 388, 394, 396, 405, 431, 449, 454, 458, 461, 464, 476, 481, 486, 488, 489, 495, 496, 498, 508, 509, 527, 551, 574, 576, 577, 579, 581, 588, 591, 605, 611, 612, 616, 617, 620, 623, 625, 626, 628], "framework_specific_info": [6, 8, 11, 14, 39, 41, 531], "base": [6, 8, 11, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 65, 66, 67, 68, 69, 71, 72, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 98, 99, 101, 102, 103, 107, 110, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 135, 136, 138, 139, 141, 142, 144, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 160, 161, 162, 163, 165, 166, 169, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 245, 246, 249, 252, 253, 254, 256, 257, 258, 260, 261, 265, 266, 267, 268, 269, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 286, 288, 290, 291, 292, 293, 294, 297, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 326, 327, 328, 330, 332, 335, 336, 337, 338, 341, 346, 347, 348, 350, 351, 352, 353, 356, 361, 362, 363, 364, 365, 366, 367, 368, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 400, 401, 402, 404, 407, 409, 410, 413, 423, 425, 428, 430, 432, 433, 435, 436, 437, 438, 446, 449, 454, 458, 461, 464, 474, 478, 480, 482, 484, 488, 489, 490, 491, 494, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 509, 510, 512, 514, 518, 519, 528, 530, 531, 551, 577, 580, 581, 585, 599, 600, 602, 611, 615, 617, 623, 624, 626, 629], "object": [6, 8, 11, 13, 14, 32, 38, 39, 41, 51, 54, 55, 56, 57, 68, 73, 79, 80, 85, 86, 87, 88, 97, 98, 99, 104, 107, 110, 126, 133, 136, 141, 142, 146, 147, 148, 150, 153, 154, 155, 157, 158, 160, 161, 162, 163, 164, 165, 166, 169, 172, 173, 174, 175, 177, 178, 182, 184, 185, 186, 190, 193, 194, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 215, 220, 222, 223, 224, 228, 231, 232, 233, 235, 236, 237, 238, 242, 244, 245, 246, 249, 252, 253, 254, 257, 258, 260, 268, 269, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 283, 286, 287, 288, 289, 290, 291, 292, 293, 294, 297, 300, 301, 302, 304, 306, 308, 309, 310, 311, 313, 316, 324, 331, 332, 334, 335, 336, 338, 340, 341, 358, 373, 374, 377, 380, 421, 486, 489, 496, 506, 508, 509, 513, 527, 528, 542, 551, 574, 575, 576, 577, 584, 591, 593, 614, 616, 617, 619, 620, 625, 626], "framework": [6, 8, 11, 13, 14, 39, 153, 155, 170, 171, 175, 176, 180, 183, 184, 185, 186, 187, 188, 189, 190, 191, 193, 194, 195, 198, 201, 203, 204, 205, 208, 213, 214, 216, 218, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 235, 237, 244, 245, 252, 253, 254, 261, 291, 292, 300, 301, 302, 303, 304, 305, 306, 307, 309, 310, 311, 313, 322, 324, 326, 328, 334, 343, 358, 369, 386, 388, 393, 395, 397, 417, 425, 428, 430, 431, 437, 444, 446, 451, 455, 460, 463, 467, 478, 484, 496, 497, 530, 531, 574, 581, 582, 586, 587, 588, 589, 591, 592, 616, 618, 620, 624, 625, 626, 628], "layer": [6, 8, 11, 14, 38, 39, 40, 41, 62, 64, 109, 110, 111, 112, 113, 115, 116, 145, 151, 155, 160, 164, 169, 203, 210, 245, 267, 278, 283, 286, 287, 289, 332, 334, 335, 341, 508, 531, 580, 588, 616, 617, 622], "abstract": [6, 11, 13, 40, 80, 107, 116, 154, 155, 157, 160, 163, 201, 203, 237, 238, 244, 245, 252, 253, 269, 271, 277, 281, 286, 290, 291, 300, 301, 303, 304, 305, 312, 313, 324, 347, 359, 425, 436, 437, 458, 470, 488, 512, 531, 587], "quantiz": [6, 7, 8, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 82, 86, 88, 90, 93, 101, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 139, 141, 142, 144, 145, 147, 148, 150, 151, 153, 154, 157, 169, 172, 173, 197, 204, 205, 211, 234, 239, 242, 243, 244, 245, 255, 292, 293, 302, 311, 315, 316, 317, 318, 319, 321, 322, 323, 324, 326, 327, 328, 331, 332, 335, 336, 337, 340, 341, 353, 358, 388, 390, 396, 477, 485, 497, 501, 531, 542, 560, 574, 576, 577, 581, 582, 583, 585, 587, 588, 591, 592, 593, 594, 599, 601, 602, 605, 614, 618, 622, 624, 625, 626, 628], "tune_cfg": [6, 8, 11, 13, 14, 39, 41, 140, 141, 147, 173, 317, 324, 531, 626], "model": [6, 8, 11, 13, 14, 15, 28, 37, 38, 39, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 110, 112, 133, 134, 140, 141, 142, 145, 146, 147, 148, 150, 151, 153, 154, 155, 157, 160, 161, 163, 164, 169, 172, 173, 180, 183, 184, 186, 195, 198, 201, 202, 203, 205, 206, 211, 218, 221, 222, 224, 237, 238, 239, 240, 241, 242, 243, 244, 245, 253, 254, 255, 256, 257, 259, 261, 266, 267, 268, 269, 271, 272, 273, 275, 276, 277, 278, 283, 286, 287, 288, 289, 290, 291, 292, 293, 300, 301, 302, 312, 313, 316, 317, 319, 321, 322, 323, 324, 326, 328, 331, 337, 340, 341, 343, 344, 345, 347, 358, 361, 369, 372, 375, 377, 385, 386, 387, 388, 389, 390, 392, 393, 394, 396, 400, 404, 405, 410, 411, 412, 415, 416, 417, 441, 442, 444, 447, 450, 451, 452, 453, 455, 456, 457, 458, 462, 463, 468, 470, 473, 474, 477, 478, 485, 494, 496, 501, 511, 512, 516, 523, 527, 528, 530, 531, 541, 549, 575, 576, 577, 579, 580, 581, 582, 587, 588, 590, 591, 592, 594, 599, 601, 602, 605, 611, 613, 614, 615, 616, 617, 618, 620, 622, 623, 624, 625, 626, 628], "q_func": [6, 8, 11, 14, 39, 41, 172, 173, 245, 291, 292, 316, 317, 319, 321, 323, 324, 531, 626], "none": [6, 8, 11, 13, 14, 15, 37, 38, 39, 41, 42, 43, 57, 83, 96, 97, 98, 99, 104, 110, 116, 133, 134, 140, 142, 145, 147, 153, 154, 155, 157, 161, 164, 165, 166, 169, 172, 173, 174, 176, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 195, 197, 198, 201, 202, 203, 204, 205, 211, 212, 214, 219, 220, 222, 223, 224, 225, 226, 227, 229, 234, 237, 238, 239, 241, 242, 244, 245, 246, 249, 252, 253, 254, 255, 256, 258, 260, 261, 265, 267, 268, 269, 277, 278, 282, 283, 287, 288, 291, 292, 293, 294, 297, 300, 301, 302, 307, 309, 310, 311, 312, 313, 316, 317, 319, 321, 323, 324, 326, 328, 331, 332, 334, 335, 340, 341, 342, 343, 344, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 360, 361, 362, 363, 364, 365, 366, 368, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 387, 388, 391, 393, 394, 395, 396, 410, 425, 428, 430, 432, 435, 436, 437, 442, 444, 449, 451, 454, 455, 458, 460, 461, 463, 464, 465, 466, 467, 470, 471, 472, 474, 476, 479, 481, 482, 484, 487, 489, 490, 494, 495, 496, 497, 498, 499, 500, 502, 504, 505, 506, 508, 509, 513, 515, 521, 531, 551, 577, 591, 620, 624, 625, 626], "do": [6, 8, 11, 14, 17, 19, 20, 21, 22, 23, 24, 25, 27, 29, 30, 31, 32, 33, 34, 35, 36, 39, 42, 43, 71, 73, 101, 154, 157, 183, 184, 221, 222, 238, 239, 242, 245, 246, 249, 289, 292, 294, 297, 312, 317, 340, 525, 551, 574, 577, 581, 585, 588, 589, 591, 606, 609, 616, 621, 622, 626], "calibr": [6, 7, 8, 11, 13, 14, 16, 38, 39, 42, 43, 71, 83, 84, 145, 147, 148, 150, 153, 172, 173, 244, 245, 291, 292, 302, 311, 313, 336, 505, 531, 576, 577, 587, 588, 620, 626, 628], "quanit": [6, 11, 14], "post": [6, 11, 14, 91, 92, 145, 151, 169, 172, 173, 195, 198, 201, 211, 237, 242, 245, 292, 293, 313, 324, 508, 525, 530, 531, 580, 581, 583, 588, 589, 594, 600, 611, 618, 624, 626], "train": [6, 8, 11, 14, 39, 41, 50, 56, 73, 74, 116, 145, 151, 154, 157, 161, 169, 172, 173, 184, 186, 201, 211, 222, 224, 237, 238, 245, 255, 256, 258, 259, 266, 268, 277, 278, 283, 288, 289, 291, 292, 293, 313, 324, 334, 504, 528, 530, 531, 542, 577, 579, 580, 583, 588, 592, 594, 600, 611, 614, 616, 617, 618, 623, 626, 628, 629], "dict": [6, 8, 11, 13, 14, 15, 38, 39, 41, 107, 109, 110, 116, 136, 140, 141, 142, 147, 148, 150, 153, 155, 158, 160, 161, 162, 163, 164, 166, 172, 173, 183, 186, 202, 203, 208, 221, 224, 239, 240, 242, 245, 248, 249, 250, 251, 253, 256, 258, 261, 267, 268, 269, 270, 271, 278, 279, 280, 281, 283, 286, 287, 288, 289, 290, 296, 297, 298, 299, 301, 302, 303, 304, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 334, 335, 340, 341, 342, 344, 347, 354, 355, 356, 358, 359, 361, 362, 363, 364, 365, 366, 368, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 394, 395, 396, 401, 402, 405, 413, 422, 425, 432, 440, 441, 442, 444, 446, 447, 448, 449, 454, 458, 461, 464, 465, 466, 467, 469, 471, 472, 474, 481, 482, 484, 486, 488, 489, 492, 494, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 508, 509, 512, 513, 515, 517, 519, 520, 522, 527, 591, 616, 619, 624, 626], "chosen": [6, 8, 574], "tune": [6, 8, 11, 13, 14, 39, 41, 153, 154, 169, 172, 173, 184, 186, 222, 224, 244, 245, 291, 293, 302, 312, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 341, 353, 372, 380, 381, 388, 390, 394, 417, 447, 452, 465, 477, 485, 497, 501, 531, 574, 576, 577, 581, 588, 590, 592, 611, 613, 618, 621, 622, 623, 624, 628], "load": [6, 8, 184, 186, 200, 201, 222, 224, 236, 237, 249, 259, 261, 269, 297, 302, 310, 311, 313, 340, 341, 388, 390, 469, 496, 497, 576, 604, 608, 612, 619, 620], "dataset": [6, 8, 11, 14, 39, 41, 147, 172, 173, 174, 176, 177, 181, 182, 183, 195, 204, 205, 212, 214, 215, 219, 220, 221, 233, 244, 245, 249, 250, 251, 253, 255, 261, 291, 292, 293, 297, 298, 299, 300, 301, 302, 313, 331, 334, 361, 369, 372, 375, 383, 388, 392, 393, 394, 405, 417, 494, 496, 497, 498, 528, 530, 531, 553, 576, 581, 586, 591, 599, 616, 617, 620, 622, 626, 628, 629], "option": [6, 8, 11, 14, 15, 39, 41, 96, 99, 104, 133, 155, 160, 169, 172, 173, 174, 184, 195, 198, 201, 203, 212, 222, 237, 239, 241, 242, 245, 249, 255, 260, 261, 267, 286, 292, 293, 297, 302, 310, 311, 313, 324, 326, 328, 331, 335, 337, 341, 486, 577, 585, 589, 605, 623, 625, 626, 628], "awar": [6, 8, 11, 14, 39, 41, 142, 154, 157, 169, 211, 245, 255, 286, 291, 292, 293, 319, 324, 331, 531, 580, 581, 583, 588, 592, 611, 614, 626, 629], "evalu": [6, 8, 11, 14, 39, 41, 153, 154, 157, 160, 161, 172, 173, 184, 202, 211, 222, 238, 244, 245, 246, 249, 250, 251, 252, 253, 255, 256, 257, 260, 261, 268, 269, 278, 283, 288, 289, 292, 293, 294, 297, 298, 299, 300, 301, 302, 312, 313, 324, 331, 334, 346, 348, 350, 352, 353, 354, 477, 485, 497, 501, 528, 531, 551, 576, 577, 579, 580, 587, 588, 591, 592, 594, 600, 602, 605, 611, 613, 616, 620, 623, 624, 626, 628], "postprocess": [6, 8, 11, 14, 39, 41, 195, 198, 201, 202, 205, 233, 235, 237, 244, 245, 255, 267, 291, 292, 293, 334, 499, 504, 531, 624, 625], "metric": [6, 8, 11, 14, 39, 41, 154, 157, 172, 173, 202, 205, 238, 244, 245, 255, 256, 257, 259, 261, 268, 269, 270, 271, 278, 283, 291, 292, 293, 302, 312, 313, 331, 334, 354, 358, 364, 369, 383, 386, 388, 393, 417, 477, 485, 488, 493, 496, 497, 499, 515, 528, 531, 534, 549, 551, 574, 576, 577, 581, 592, 623, 624, 626, 628, 629], "measur": [6, 8, 11, 14, 39, 41, 140, 202, 260, 261, 266, 302, 312, 336, 515, 528, 531, 575, 579, 591, 624, 626], "iter": [6, 8, 11, 13, 14, 15, 39, 41, 99, 140, 148, 150, 153, 161, 163, 169, 172, 173, 177, 182, 186, 187, 190, 195, 204, 205, 215, 220, 224, 225, 228, 233, 269, 288, 290, 302, 310, 313, 331, 334, 361, 489, 497, 527, 528, 531, 575, 577, 616, 617, 619, 624, 626, 628], "1": [6, 8, 11, 14, 37, 38, 39, 41, 42, 48, 61, 68, 73, 83, 96, 97, 99, 103, 107, 109, 138, 140, 145, 147, 149, 151, 152, 153, 155, 160, 161, 169, 174, 176, 181, 183, 184, 185, 187, 188, 190, 191, 192, 194, 195, 197, 198, 201, 202, 203, 204, 205, 212, 214, 219, 221, 222, 223, 225, 226, 229, 230, 234, 237, 244, 245, 249, 250, 251, 253, 258, 261, 265, 267, 278, 283, 286, 288, 291, 292, 293, 297, 298, 299, 300, 301, 311, 312, 313, 314, 334, 344, 466, 474, 525, 527, 530, 531, 576, 577, 579, 583, 585, 586, 589, 591, 592, 595, 597, 613, 614, 615, 616, 617, 619, 620, 622, 623, 624, 625, 626, 628], "tensorboard": [6, 8, 11, 14, 39, 41, 169, 293, 331, 334, 341, 531], "fals": [6, 8, 11, 13, 14, 15, 37, 39, 41, 42, 43, 57, 65, 66, 73, 83, 86, 93, 96, 97, 99, 104, 107, 118, 125, 130, 135, 138, 139, 140, 145, 146, 147, 153, 155, 160, 169, 173, 174, 176, 181, 184, 186, 195, 197, 198, 201, 202, 203, 204, 205, 210, 212, 214, 219, 222, 224, 234, 237, 249, 252, 253, 258, 259, 260, 261, 265, 266, 267, 286, 293, 297, 300, 301, 309, 312, 324, 334, 337, 413, 432, 481, 484, 489, 490, 496, 515, 521, 531, 577, 585, 591, 604, 608, 619, 620, 624, 625, 628], "valid": [6, 8, 11, 40, 41, 48, 53, 61, 62, 97, 98, 99, 104, 133, 160, 161, 164, 186, 190, 195, 224, 249, 261, 287, 288, 297, 310, 444, 513, 526, 528, 530, 531, 577, 579, 582, 585, 588, 590, 602, 616, 617, 620, 622], "gener": [6, 7, 8, 13, 41, 42, 43, 81, 83, 84, 101, 104, 105, 116, 133, 136, 140, 147, 153, 160, 164, 172, 173, 174, 183, 186, 187, 188, 189, 195, 198, 201, 202, 212, 221, 224, 225, 226, 227, 233, 235, 237, 242, 243, 245, 246, 254, 258, 265, 278, 286, 289, 292, 293, 294, 302, 311, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 331, 342, 343, 346, 347, 348, 349, 350, 351, 352, 353, 359, 383, 388, 394, 449, 454, 458, 461, 463, 464, 469, 470, 471, 480, 489, 521, 527, 531, 574, 576, 579, 591, 592, 594, 599, 604, 606, 608, 609, 611, 613, 615, 616, 617, 618, 620, 621, 624, 625, 626], "data": [6, 8, 11, 13, 14, 15, 38, 39, 41, 49, 73, 96, 97, 99, 104, 133, 140, 142, 144, 145, 147, 151, 153, 155, 160, 172, 173, 202, 203, 204, 205, 239, 242, 243, 245, 261, 266, 286, 292, 293, 302, 309, 313, 316, 322, 328, 330, 331, 334, 341, 342, 344, 347, 354, 355, 356, 358, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 394, 396, 405, 421, 422, 425, 428, 432, 437, 440, 441, 442, 444, 447, 449, 454, 458, 461, 464, 466, 471, 474, 481, 494, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 508, 512, 517, 519, 520, 522, 530, 531, 549, 574, 576, 577, 581, 585, 586, 589, 591, 592, 620, 621, 622, 623, 624, 625, 626], "label": [6, 8, 41, 155, 172, 173, 184, 186, 187, 188, 189, 192, 194, 195, 197, 198, 201, 203, 205, 206, 222, 224, 225, 226, 227, 230, 234, 237, 246, 248, 252, 253, 258, 259, 294, 296, 300, 301, 302, 313, 331, 413, 527, 551, 576, 577, 591, 625], "process": [6, 8, 11, 14, 39, 41, 110, 142, 153, 154, 157, 160, 161, 163, 164, 172, 173, 184, 185, 186, 190, 195, 197, 198, 201, 202, 211, 222, 223, 224, 233, 234, 235, 237, 238, 239, 242, 245, 256, 257, 260, 266, 268, 269, 277, 278, 283, 286, 288, 289, 290, 292, 293, 302, 313, 315, 316, 324, 331, 340, 341, 357, 440, 441, 444, 477, 481, 485, 488, 489, 497, 528, 531, 574, 576, 577, 579, 580, 581, 583, 595, 614, 616, 617, 620, 624, 625, 628], "result": [6, 8, 11, 14, 38, 39, 41, 96, 140, 142, 147, 153, 155, 172, 195, 197, 198, 201, 202, 203, 234, 237, 245, 246, 249, 250, 251, 252, 253, 258, 260, 269, 293, 294, 297, 298, 299, 300, 301, 312, 315, 319, 324, 326, 328, 342, 344, 361, 362, 375, 376, 378, 382, 388, 391, 394, 471, 512, 515, 525, 528, 530, 551, 574, 576, 579, 581, 588, 590, 591, 599, 600, 611, 612, 613, 616, 618, 620, 623, 624, 625, 626, 629], "from": [6, 8, 11, 13, 15, 38, 39, 41, 55, 61, 62, 63, 64, 96, 97, 99, 104, 107, 109, 116, 126, 133, 134, 136, 140, 147, 153, 154, 155, 157, 158, 160, 161, 162, 163, 164, 169, 172, 173, 174, 177, 181, 184, 185, 186, 187, 188, 189, 190, 191, 195, 196, 197, 198, 203, 204, 205, 207, 211, 212, 215, 219, 222, 223, 224, 225, 226, 227, 229, 234, 238, 240, 241, 242, 243, 245, 246, 249, 250, 251, 255, 258, 259, 260, 261, 265, 267, 270, 278, 283, 286, 287, 288, 289, 290, 292, 293, 294, 297, 298, 299, 302, 308, 309, 310, 312, 313, 316, 318, 323, 324, 326, 328, 329, 330, 334, 337, 340, 341, 359, 361, 364, 365, 366, 368, 371, 372, 373, 374, 375, 377, 378, 380, 382, 383, 385, 388, 389, 390, 391, 392, 394, 405, 410, 428, 431, 440, 441, 442, 444, 469, 474, 488, 489, 494, 496, 497, 498, 504, 513, 515, 520, 521, 525, 527, 528, 531, 551, 575, 576, 577, 579, 580, 581, 582, 583, 584, 586, 588, 591, 592, 593, 594, 598, 599, 600, 602, 612, 613, 614, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626], "depend": [6, 8, 13, 41, 56, 73, 172, 173, 202, 245, 256, 268, 269, 302, 313, 331, 526, 574, 584, 585, 619, 626], "categori": [6, 8, 41, 186, 224, 248, 249, 296, 297, 575, 577, 601], "default": [6, 8, 15, 39, 41, 91, 97, 104, 133, 140, 155, 164, 166, 169, 172, 173, 174, 176, 184, 185, 186, 190, 195, 197, 198, 201, 203, 211, 212, 214, 222, 223, 224, 234, 237, 239, 241, 242, 245, 246, 249, 252, 253, 255, 267, 287, 293, 294, 297, 300, 301, 310, 311, 326, 328, 330, 334, 337, 341, 363, 365, 366, 368, 370, 373, 374, 379, 401, 402, 405, 422, 432, 484, 486, 496, 498, 499, 503, 504, 527, 531, 551, 574, 577, 583, 585, 588, 589, 591, 592, 599, 602, 604, 608, 613, 616, 617, 619, 621, 623, 625, 626, 628], "precis": [6, 8, 11, 39, 40, 41, 42, 43, 73, 141, 172, 173, 244, 245, 249, 251, 253, 254, 291, 297, 299, 300, 301, 302, 312, 313, 314, 315, 317, 324, 326, 328, 358, 369, 372, 373, 383, 384, 385, 386, 387, 388, 393, 417, 446, 451, 453, 454, 455, 478, 497, 500, 502, 530, 531, 542, 574, 575, 580, 581, 585, 588, 594, 600, 601, 602, 618, 619, 620, 626], "benchmark": [6, 8, 11, 41, 169, 204, 205, 245, 292, 293, 312, 341, 362, 369, 372, 382, 388, 390, 393, 394, 417, 477, 478, 488, 494, 511, 516, 530, 542, 549, 593, 594, 598, 602, 605, 611, 626, 628, 629], "int": [6, 8, 11, 13, 14, 38, 39, 41, 97, 99, 104, 133, 140, 142, 147, 160, 174, 183, 184, 185, 190, 195, 197, 198, 201, 212, 221, 222, 223, 234, 237, 239, 241, 242, 247, 249, 253, 258, 260, 261, 270, 277, 293, 295, 297, 300, 301, 309, 311, 312, 317, 335, 341, 347, 360, 361, 362, 363, 364, 365, 366, 368, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 385, 387, 388, 389, 390, 391, 392, 393, 395, 439, 474, 481, 482, 484, 486, 487, 488, 489, 490, 496, 497, 499, 504, 506, 509, 521, 577, 591, 619, 625], "control": [6, 8, 11, 41, 74, 148, 150, 261, 388, 393, 527, 574, 616, 626], "step": [6, 8, 11, 41, 42, 61, 62, 86, 101, 154, 158, 160, 161, 162, 163, 211, 245, 276, 277, 286, 288, 289, 290, 312, 331, 574, 579, 580, 581, 606, 609, 611, 614, 616, 617, 619, 621, 623, 624, 626], "mini": [6, 8, 11, 41, 629], "batch": [6, 8, 11, 13, 41, 56, 61, 109, 147, 154, 174, 176, 177, 182, 183, 195, 204, 205, 211, 212, 214, 215, 220, 221, 245, 261, 265, 267, 278, 283, 322, 331, 361, 372, 494, 574, 576, 579, 580, 614, 616, 625, 626, 629], "boolean": [6, 8, 11, 13, 41, 50, 161, 260, 496], "inspect": [6, 8, 11, 14, 41, 574, 622, 624], "tensor": [6, 8, 11, 13, 14, 15, 37, 38, 39, 41, 64, 96, 97, 99, 104, 116, 126, 133, 140, 142, 147, 155, 158, 160, 161, 162, 163, 195, 198, 201, 203, 237, 239, 240, 242, 267, 272, 281, 282, 286, 288, 290, 308, 309, 310, 311, 321, 341, 385, 388, 396, 425, 527, 577, 616, 617, 620, 622, 624, 625, 626], "query_fw_cap": [6, 8, 11, 14, 39, 41, 531], "return": [6, 8, 11, 13, 14, 15, 38, 39, 41, 42, 43, 44, 47, 50, 51, 54, 55, 56, 57, 61, 62, 64, 68, 73, 75, 79, 83, 84, 85, 86, 87, 88, 96, 97, 99, 104, 107, 109, 110, 116, 126, 133, 136, 138, 140, 141, 142, 145, 146, 147, 148, 150, 153, 154, 155, 157, 160, 161, 162, 163, 164, 166, 172, 173, 174, 176, 183, 186, 190, 193, 194, 195, 197, 198, 200, 201, 202, 203, 208, 212, 214, 221, 224, 228, 231, 232, 233, 234, 235, 236, 237, 238, 242, 243, 245, 246, 247, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 261, 267, 268, 269, 270, 271, 277, 278, 281, 283, 286, 287, 288, 289, 290, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 309, 310, 311, 312, 313, 315, 316, 317, 318, 319, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 334, 337, 340, 341, 361, 362, 364, 371, 372, 373, 374, 375, 377, 378, 380, 381, 405, 408, 409, 410, 411, 442, 481, 484, 486, 488, 489, 490, 496, 499, 508, 509, 512, 527, 528, 551, 577, 581, 591, 593, 613, 620, 624, 626], "capabl": [6, 8, 11, 13, 14, 39, 40, 41, 324, 326, 328, 575, 585, 592, 602, 619, 620, 626, 628], "queri": [6, 8, 11, 13, 14, 39, 41, 104, 109, 116, 140, 265, 267, 317, 326, 328, 363, 370, 379, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 620], "query_fused_pattern": [6, 531], "fuse": [6, 13, 39, 41, 42, 43, 48, 52, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 73, 85, 86, 87, 88, 90, 125, 129, 130, 142, 146, 147, 151, 527, 624], "pattern": [6, 40, 41, 52, 53, 55, 56, 58, 61, 62, 64, 72, 73, 86, 90, 101, 102, 103, 104, 117, 118, 120, 121, 122, 123, 125, 127, 128, 129, 130, 131, 132, 157, 159, 161, 162, 165, 169, 186, 190, 195, 224, 245, 276, 277, 279, 284, 288, 293, 326, 328, 385, 388, 401, 410, 411, 488, 512, 531, 577, 585, 588, 612, 614, 619, 629], "conv": [6, 7, 14, 15, 16, 28, 37, 42, 43, 52, 56, 60, 65, 66, 67, 86, 103, 104, 119, 129, 151, 160, 169, 293, 527, 616, 619], "relu": [6, 68, 72, 73, 103, 117, 119, 121, 122, 127, 129, 131, 527, 585, 624], "bn": [6, 56, 73, 75, 117, 629], "inspect_tensor": [6, 8, 11, 14, 41, 531], "op_list": [6, 8, 11, 14, 41, 142, 321, 531, 624], "iteration_list": [6, 8, 11, 14, 41, 531], "inspect_typ": [6, 8, 11, 14, 41, 396, 531], "activ": [6, 7, 8, 11, 14, 15, 16, 28, 41, 104, 122, 142, 145, 147, 210, 239, 242, 311, 326, 328, 401, 531, 574, 580, 585, 612, 615, 619, 620, 624, 628], "save_to_disk": [6, 8, 11, 14, 41, 531], "strategi": [6, 8, 11, 13, 14, 39, 147, 154, 169, 170, 186, 224, 245, 291, 293, 302, 313, 358, 380, 478, 496, 506, 530, 531, 541, 581, 588, 599, 611, 618, 619, 620, 621, 622, 628], "dump": [6, 8, 11, 14, 15, 39, 41, 96, 104, 202, 239, 242, 245, 309, 341, 351, 465, 486, 497, 509, 620, 624], "info": [6, 8, 11, 14, 15, 38, 42, 98, 104, 147, 160, 164, 195, 198, 199, 204, 205, 209, 242, 286, 292, 305, 306, 309, 310, 311, 335, 338, 341, 361, 362, 364, 371, 372, 375, 376, 378, 381, 481, 484, 489, 496, 512, 527, 574, 583, 593], "feed": [6, 8, 140, 183, 221, 358, 579], "list": [6, 8, 11, 13, 38, 39, 41, 47, 50, 73, 96, 97, 99, 104, 109, 116, 133, 140, 141, 142, 147, 148, 150, 153, 155, 160, 169, 172, 173, 177, 184, 195, 197, 198, 200, 201, 202, 203, 215, 222, 234, 236, 237, 239, 241, 242, 245, 246, 247, 249, 250, 251, 253, 258, 260, 261, 270, 278, 283, 286, 289, 293, 294, 295, 297, 298, 299, 300, 301, 302, 309, 310, 311, 312, 313, 315, 317, 321, 324, 326, 327, 328, 331, 332, 335, 354, 356, 358, 359, 361, 363, 364, 365, 366, 368, 370, 371, 372, 373, 374, 375, 376, 377, 379, 381, 382, 383, 384, 385, 386, 388, 389, 390, 391, 392, 394, 395, 396, 405, 408, 410, 411, 413, 425, 428, 431, 432, 435, 436, 437, 439, 444, 447, 449, 451, 454, 455, 458, 461, 464, 474, 481, 486, 488, 489, 490, 494, 496, 497, 498, 499, 500, 502, 503, 504, 506, 508, 515, 527, 530, 531, 551, 577, 585, 589, 594, 599, 601, 604, 605, 608, 613, 616, 619, 621, 624, 626], "op": [6, 7, 8, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 46, 48, 50, 51, 53, 54, 56, 59, 60, 61, 62, 63, 64, 65, 66, 68, 72, 73, 75, 79, 82, 85, 86, 87, 88, 90, 96, 97, 98, 99, 101, 103, 104, 117, 118, 119, 125, 127, 128, 129, 130, 132, 133, 135, 138, 140, 141, 142, 145, 146, 147, 151, 239, 242, 310, 314, 315, 317, 319, 321, 322, 326, 327, 328, 329, 336, 385, 388, 396, 401, 402, 410, 512, 531, 574, 585, 592, 616, 620, 621, 622, 624, 626, 628], "name": [6, 8, 13, 37, 38, 39, 41, 47, 56, 57, 61, 62, 64, 73, 96, 97, 98, 99, 104, 109, 110, 126, 133, 136, 140, 141, 142, 146, 147, 148, 150, 153, 155, 158, 160, 161, 162, 163, 166, 169, 184, 185, 186, 189, 190, 193, 194, 195, 198, 199, 201, 202, 203, 205, 206, 208, 209, 210, 222, 223, 224, 227, 228, 231, 232, 233, 235, 237, 239, 240, 241, 242, 248, 249, 252, 253, 258, 259, 261, 267, 272, 278, 281, 283, 286, 288, 290, 292, 296, 297, 300, 301, 306, 308, 309, 310, 311, 312, 326, 327, 328, 330, 332, 334, 335, 337, 341, 361, 365, 366, 368, 371, 372, 373, 374, 375, 377, 396, 405, 407, 425, 428, 430, 431, 437, 444, 445, 446, 447, 458, 474, 481, 484, 496, 498, 499, 520, 527, 574, 577, 581, 585, 590, 591, 593, 597, 604, 608, 612, 615, 622, 623, 624, 626, 628, 629], "fp32": [6, 8, 11, 37, 39, 40, 41, 42, 43, 73, 85, 87, 125, 130, 135, 142, 145, 147, 152, 169, 172, 173, 239, 241, 242, 253, 301, 310, 311, 312, 315, 317, 321, 324, 326, 328, 334, 340, 341, 396, 530, 531, 574, 585, 586, 591, 592, 601, 619, 620, 621, 622, 623, 624, 626, 628, 629], "contain": [6, 8, 11, 13, 39, 50, 61, 62, 64, 68, 73, 96, 104, 107, 133, 140, 142, 153, 154, 157, 160, 161, 163, 164, 172, 173, 184, 185, 186, 190, 195, 222, 223, 224, 238, 239, 242, 244, 245, 249, 250, 251, 255, 258, 263, 264, 278, 279, 280, 281, 283, 286, 287, 288, 289, 290, 291, 293, 297, 298, 299, 302, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 331, 334, 340, 345, 349, 357, 363, 365, 366, 368, 369, 370, 373, 374, 377, 379, 383, 388, 393, 398, 399, 403, 406, 412, 417, 418, 424, 443, 450, 452, 453, 456, 457, 459, 462, 468, 473, 477, 481, 489, 577, 579, 588, 591, 612, 616, 617, 624, 626], "str": [6, 8, 13, 14, 15, 104, 133, 134, 141, 142, 146, 147, 148, 150, 155, 160, 174, 184, 185, 186, 190, 193, 194, 195, 197, 198, 201, 203, 207, 208, 212, 222, 223, 224, 228, 231, 232, 233, 234, 235, 237, 239, 241, 242, 243, 246, 247, 249, 251, 252, 253, 258, 260, 261, 270, 281, 293, 294, 295, 297, 299, 300, 301, 303, 304, 308, 309, 310, 311, 321, 326, 327, 330, 331, 334, 337, 341, 342, 343, 344, 347, 354, 355, 356, 358, 360, 361, 364, 365, 366, 368, 371, 372, 373, 374, 375, 376, 377, 380, 383, 384, 385, 387, 388, 393, 394, 395, 396, 401, 402, 405, 407, 408, 409, 410, 411, 413, 422, 423, 425, 426, 428, 430, 431, 432, 433, 435, 436, 437, 438, 440, 441, 442, 444, 446, 447, 449, 451, 454, 455, 458, 460, 461, 463, 464, 465, 466, 469, 470, 471, 474, 481, 483, 484, 486, 488, 489, 492, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 508, 509, 512, 513, 520, 521, 551, 577, 591, 619, 624, 625], "valu": [6, 8, 11, 15, 38, 39, 41, 49, 50, 56, 61, 62, 64, 83, 84, 96, 97, 99, 104, 109, 133, 135, 136, 140, 145, 147, 152, 153, 155, 158, 160, 164, 166, 169, 172, 173, 184, 187, 188, 195, 197, 198, 201, 202, 203, 222, 225, 226, 234, 237, 245, 249, 253, 259, 260, 265, 272, 275, 278, 283, 286, 287, 289, 297, 301, 302, 309, 311, 312, 313, 316, 321, 324, 326, 328, 331, 332, 334, 335, 341, 354, 356, 358, 363, 365, 366, 368, 370, 373, 374, 379, 383, 384, 405, 407, 446, 478, 481, 482, 486, 488, 494, 496, 499, 504, 506, 507, 509, 520, 527, 574, 577, 585, 591, 597, 613, 616, 617, 619, 620, 625, 626, 628], "ar": [6, 8, 15, 56, 61, 62, 68, 96, 99, 116, 126, 154, 160, 161, 169, 184, 195, 198, 201, 211, 222, 237, 245, 246, 249, 253, 259, 261, 265, 267, 270, 278, 283, 286, 287, 288, 289, 292, 293, 294, 297, 301, 309, 314, 315, 316, 318, 334, 340, 341, 425, 428, 430, 437, 481, 490, 525, 526, 527, 528, 531, 551, 574, 576, 577, 579, 580, 581, 582, 583, 585, 586, 587, 588, 589, 590, 591, 592, 594, 597, 599, 602, 605, 611, 613, 614, 615, 616, 617, 620, 621, 622, 623, 624, 625, 626, 628], "weight": [6, 8, 15, 37, 38, 41, 54, 55, 56, 73, 104, 116, 133, 135, 142, 145, 152, 158, 160, 161, 162, 163, 239, 242, 252, 253, 267, 272, 273, 275, 276, 282, 286, 288, 290, 300, 301, 310, 311, 319, 324, 326, 328, 341, 401, 506, 531, 574, 580, 583, 585, 587, 591, 613, 616, 617, 619, 620, 624, 626, 628], "bool": [6, 8, 13, 14, 15, 39, 56, 57, 73, 96, 104, 109, 133, 140, 142, 146, 147, 160, 173, 184, 186, 195, 197, 198, 201, 222, 224, 234, 237, 239, 242, 247, 249, 253, 258, 260, 261, 267, 286, 293, 295, 297, 301, 311, 312, 317, 324, 326, 327, 337, 341, 371, 405, 410, 413, 425, 428, 430, 431, 432, 433, 435, 436, 437, 438, 442, 444, 447, 465, 481, 482, 484, 489, 490, 496, 498, 499, 509, 515, 521, 577, 591, 619, 625], "save": [6, 8, 14, 38, 39, 41, 99, 104, 134, 164, 186, 190, 195, 224, 228, 233, 239, 241, 242, 259, 269, 292, 303, 304, 305, 307, 309, 310, 311, 312, 313, 317, 324, 331, 332, 335, 337, 341, 527, 531, 576, 587, 592, 593, 595, 599, 604, 608, 614, 616, 617, 620], "disk": [6, 8, 41], "memori": [6, 8, 68, 244, 245, 278, 283, 291, 312, 313, 341, 576, 580, 592, 594, 613, 616, 617, 620, 626], "numpi": [6, 8, 11, 38, 41, 61, 62, 64, 96, 97, 99, 104, 140, 201, 237, 243, 249, 253, 258, 260, 270, 297, 301, 584, 625], "arrai": [6, 8, 11, 37, 38, 41, 97, 104, 133, 140, 195, 198, 201, 237, 249, 253, 258, 260, 270, 297, 301, 309, 311, 316, 341, 625], "node0_nam": [6, 8, 41], "weight0_nam": [6, 8, 11, 41], "bias0_nam": [6, 8, 11, 41], "node1_nam": [6, 8, 41], "weight1_nam": [6, 8, 41], "bias1_nam": [6, 8, 41], "0": [6, 8, 13, 14, 37, 38, 39, 40, 47, 84, 96, 99, 104, 133, 140, 142, 145, 149, 151, 155, 160, 163, 169, 174, 176, 181, 184, 187, 188, 191, 195, 197, 198, 201, 203, 204, 205, 212, 214, 219, 222, 225, 226, 229, 234, 237, 239, 242, 244, 245, 253, 258, 260, 261, 265, 267, 270, 278, 283, 286, 291, 293, 300, 301, 311, 312, 313, 317, 326, 328, 481, 489, 527, 574, 577, 579, 581, 583, 585, 586, 589, 590, 591, 592, 597, 599, 604, 608, 615, 616, 617, 619, 620, 622, 623, 624, 625, 626, 628], "output0_nam": [6, 8, 41], "output1_nam": [6, 8, 41], "set_tensor": [6, 8, 11, 41, 531], "tensor_dict": [6, 8, 11, 41, 531], "set": [6, 8, 11, 13, 15, 38, 39, 40, 51, 61, 62, 90, 96, 97, 99, 104, 109, 133, 140, 147, 148, 150, 153, 160, 161, 164, 166, 169, 172, 173, 174, 176, 184, 186, 189, 195, 201, 202, 207, 208, 212, 214, 222, 224, 227, 237, 238, 242, 244, 245, 249, 254, 255, 256, 258, 265, 267, 268, 278, 283, 287, 292, 293, 297, 302, 310, 312, 313, 324, 326, 327, 328, 331, 335, 341, 343, 383, 384, 385, 388, 405, 451, 455, 463, 484, 488, 494, 495, 497, 498, 499, 504, 508, 509, 513, 525, 528, 574, 575, 577, 581, 585, 587, 588, 589, 591, 592, 594, 596, 598, 612, 616, 619, 620, 623, 626, 628], "back": [6, 8, 11, 41, 116, 147, 201, 207, 237, 258, 273, 324, 611], "usual": [6, 8, 11, 184, 222, 245, 278, 283, 579, 614, 620], "note": [6, 8, 11, 48, 160, 245, 249, 278, 283, 289, 297, 322, 377, 388, 392, 528, 574, 581, 585, 589, 596, 599, 604, 608, 611, 616, 620, 624, 626, 628], "float": [6, 8, 11, 14, 38, 39, 41, 104, 133, 142, 160, 161, 162, 163, 164, 184, 195, 197, 198, 222, 234, 245, 246, 247, 249, 250, 251, 258, 260, 261, 277, 278, 283, 286, 288, 289, 290, 294, 295, 297, 298, 299, 310, 311, 312, 316, 344, 362, 371, 380, 381, 396, 402, 457, 465, 481, 482, 486, 488, 494, 496, 497, 504, 506, 507, 515, 551, 577, 591, 619, 620, 625], "ha": [6, 8, 11, 38, 56, 57, 61, 62, 64, 68, 73, 74, 86, 96, 97, 98, 104, 116, 133, 160, 161, 202, 245, 246, 260, 286, 288, 294, 526, 528, 531, 551, 574, 576, 583, 588, 592, 597, 611, 617, 619, 620, 621, 623, 626], "respons": [6, 8, 11, 484, 488, 495, 508, 512, 513, 517, 519, 521, 522, 620], "int8": [6, 7, 8, 11, 17, 18, 38, 39, 40, 41, 42, 43, 81, 105, 117, 118, 119, 125, 127, 128, 129, 130, 135, 140, 142, 152, 153, 169, 197, 234, 239, 240, 241, 242, 310, 311, 317, 326, 328, 330, 396, 527, 531, 574, 575, 577, 580, 585, 596, 599, 601, 602, 605, 611, 619, 620, 621, 622, 623, 624, 625, 628], "int32": [6, 8, 11, 104, 239, 242, 577], "format": [6, 8, 11, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 41, 47, 61, 62, 97, 140, 184, 185, 186, 190, 195, 222, 223, 224, 228, 233, 239, 242, 245, 249, 255, 258, 269, 297, 311, 321, 326, 328, 447, 486, 504, 577, 581, 583, 591, 592, 593, 594, 620], "someth": [6, 8, 11, 172, 173, 186, 224, 313, 331], "like": [6, 8, 11, 68, 73, 90, 92, 104, 133, 140, 160, 172, 173, 174, 186, 190, 195, 212, 224, 228, 233, 244, 245, 253, 259, 288, 291, 292, 300, 301, 310, 313, 331, 526, 527, 528, 531, 574, 579, 580, 588, 599, 614, 616, 620, 622, 626], "quantize_input": [6, 8, 37, 41], "abl": [6, 8, 41, 75, 172, 173, 200, 236, 302, 313, 331, 602, 611, 616, 620], "take": [6, 8, 41, 96, 160, 172, 173, 177, 195, 198, 201, 205, 206, 215, 237, 286, 300, 301, 302, 313, 316, 331, 525, 527, 528, 574, 576, 579, 585, 611, 616, 620, 621, 625, 626, 628], "input": [6, 8, 13, 14, 15, 37, 38, 39, 41, 47, 54, 56, 57, 58, 61, 62, 64, 65, 66, 68, 73, 74, 76, 77, 79, 80, 96, 97, 99, 103, 104, 109, 110, 116, 126, 133, 134, 136, 140, 141, 142, 145, 146, 147, 151, 154, 155, 160, 161, 169, 172, 173, 184, 185, 186, 188, 190, 195, 197, 198, 200, 201, 203, 205, 206, 211, 222, 223, 224, 226, 234, 236, 237, 238, 239, 240, 241, 242, 244, 245, 249, 254, 261, 265, 267, 278, 283, 292, 293, 297, 300, 301, 302, 306, 308, 309, 310, 311, 313, 331, 341, 343, 354, 377, 382, 383, 385, 388, 389, 390, 391, 392, 425, 428, 435, 436, 437, 439, 451, 455, 460, 463, 469, 494, 497, 503, 528, 531, 574, 575, 576, 577, 579, 580, 581, 583, 585, 587, 591, 593, 594, 599, 616, 619, 620, 624, 625, 628], "scale": [6, 8, 14, 15, 37, 38, 39, 41, 56, 61, 94, 135, 145, 151, 152, 195, 197, 198, 201, 234, 237, 242, 309, 583, 620, 623, 625], "type": [6, 8, 11, 13, 14, 15, 38, 39, 40, 41, 51, 54, 55, 56, 57, 62, 64, 68, 73, 79, 85, 86, 87, 88, 90, 96, 97, 99, 104, 107, 109, 110, 116, 126, 133, 140, 141, 142, 145, 147, 148, 150, 155, 160, 161, 162, 163, 164, 166, 169, 173, 174, 182, 184, 186, 190, 193, 194, 195, 198, 201, 203, 208, 212, 220, 222, 224, 228, 231, 232, 233, 235, 237, 239, 242, 243, 245, 246, 247, 249, 252, 253, 255, 258, 260, 267, 270, 277, 279, 280, 281, 286, 288, 290, 292, 294, 295, 297, 300, 301, 303, 304, 309, 310, 311, 312, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 337, 340, 354, 359, 373, 374, 383, 384, 386, 388, 426, 481, 484, 486, 488, 491, 492, 526, 531, 551, 574, 577, 581, 585, 588, 592, 612, 616, 620, 623, 625, 626, 628], "path": [6, 8, 14, 39, 41, 99, 104, 133, 134, 140, 164, 165, 184, 185, 186, 190, 195, 198, 201, 222, 223, 224, 237, 238, 239, 241, 242, 244, 245, 255, 256, 257, 258, 261, 268, 269, 278, 283, 287, 289, 291, 292, 302, 309, 310, 311, 313, 326, 328, 331, 337, 341, 342, 347, 361, 364, 371, 372, 375, 382, 383, 388, 390, 391, 405, 411, 422, 425, 428, 430, 431, 433, 435, 436, 437, 438, 442, 449, 454, 458, 461, 464, 465, 471, 481, 489, 494, 496, 497, 506, 521, 527, 528, 531, 574, 576, 577, 581, 587, 591, 592, 593, 597, 600, 611, 614, 625, 628], "where": [6, 8, 15, 38, 61, 116, 160, 249, 253, 265, 267, 269, 271, 286, 297, 300, 301, 579, 604, 608, 612, 616, 624], "convert": [6, 8, 13, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 46, 47, 48, 49, 50, 60, 68, 75, 80, 91, 93, 94, 96, 97, 98, 99, 125, 130, 134, 141, 147, 184, 195, 197, 198, 200, 201, 222, 234, 236, 237, 239, 241, 245, 249, 253, 255, 269, 271, 287, 297, 301, 303, 304, 314, 328, 331, 363, 370, 379, 474, 486, 527, 534, 592, 596, 620, 621, 625], "sourc": [6, 8, 15, 41, 205, 245, 247, 255, 267, 293, 295, 334, 409, 523, 527, 530, 590, 604, 606, 608, 609, 611, 618], "destinatin": [6, 8], "anoth": [6, 8, 41, 96, 103, 104, 195, 198, 201, 237, 245, 246, 255, 294, 331, 341, 551, 579, 592, 604, 608, 625, 626], "destin": [6, 8, 15, 41, 239, 240, 245, 255], "mxnet_util": 7, "util": [7, 12, 16, 96, 99, 104, 105, 133, 134, 141, 142, 143, 144, 146, 157, 159, 210, 239, 245, 247, 287, 293, 295, 320, 322, 346, 347, 348, 350, 352, 353, 356, 361, 372, 375, 378, 382, 383, 388, 390, 391, 393, 401, 402, 407, 409, 410, 413, 417, 423, 424, 432, 434, 458, 464, 468, 473, 477, 510, 532, 581, 594, 620, 626], "ox_util": 7, "oper": [7, 16, 38, 96, 98, 104, 140, 160, 195, 197, 198, 234, 267, 286, 317, 508, 512, 527, 574, 575, 576, 583, 611, 620, 625, 626], "argmax": [7, 16, 28], "attent": [7, 16, 28, 184, 222, 265, 267, 525, 579], "binary_op": [7, 16, 28], "concat": [7, 16, 28, 139, 481], "direct_q8": [7, 16, 28], "embed_layernorm": [7, 16, 28], "gather": [7, 13, 15, 16, 28, 160, 286, 484], "gavgpool": [7, 16, 28], "gemm": [7, 16, 28, 616], "lstm": [7, 16, 28], "matmul": [7, 14, 15, 16, 28, 40, 46, 53, 59, 67, 73, 79, 88, 103, 104, 122, 131, 160, 242, 286, 583, 585], "maxpool": [7, 16, 28, 123, 132, 585], "pad": [7, 16, 28, 65, 66, 184, 195, 198, 201, 222, 237, 265, 267, 577, 625], "pool": [7, 16, 28, 132], "resiz": [7, 16, 28, 184, 185, 190, 195, 197, 198, 201, 222, 223, 234, 237, 576, 577, 625], "split": [7, 16, 28, 38, 73, 76, 133, 195, 198, 200, 201, 236, 237, 258, 527, 625], "tf_util": 7, "graph_rewrit": [7, 105], "bf16": [7, 40, 41, 42, 43, 51, 75, 81, 85, 87, 105, 141, 169, 311, 315, 317, 326, 328, 341, 531, 534, 585, 592, 596, 601, 605, 611, 621, 626], "onnx": [7, 14, 15, 28, 37, 38, 81, 105, 134, 143, 151, 180, 218, 239, 240, 241, 242, 243, 302, 303, 304, 309, 310, 311, 331, 339, 344, 447, 530, 531, 532, 534, 576, 582, 583, 585, 586, 588, 592, 593, 596, 601, 602, 618, 619, 626], "qdq": [7, 17, 19, 20, 21, 22, 24, 26, 27, 30, 32, 34, 36, 37, 42, 81, 105, 106, 107, 134, 147, 169, 239, 240, 241, 242, 309, 311, 531, 583, 588, 601, 602, 620], "graph_bas": [7, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 65, 66, 67, 68, 69, 71, 72, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 101, 102, 103, 105], "quantize_graph": [7, 105], "qat": [7, 39, 105, 106, 146, 169, 242, 245, 255, 293, 310, 580, 581, 583, 588, 620], "quantize_graph_bas": [7, 105, 106, 117, 118, 119, 120, 121, 122, 123, 125, 127, 128, 129, 130, 131, 132], "quantize_graph_bn": [7, 105, 106], "quantize_graph_concatv2": [7, 105, 106], "quantize_graph_conv": [7, 105, 106], "quantize_graph_for_intel_cpu": [7, 105, 106], "quantize_graph_matmul": [7, 105, 106], "quantize_graph_pool": [7, 105, 106], "transform_graph": [7, 105], "bias_correct": [7, 105, 137], "graph_transform_bas": [7, 105, 135, 137, 138, 139], "insert_log": [7, 105, 137], "rerange_quantized_concat": [7, 105, 137], "graph_convert": [7, 105], "graph_converter_without_calib": [7, 105], "graph_util": [7, 105], "quantize_graph_common": [7, 105], "tf2onnx_convert": [7, 105], "torch_util": [7, 205, 245, 293], "bf16_convert": [7, 42, 43, 45, 81, 105, 143], "hawq_metr": [7, 143], "symbolic_trac": [7, 143], "tensorflow": [7, 45, 47, 69, 70, 71, 75, 81, 89, 95, 96, 97, 98, 99, 100, 104, 105, 106, 108, 111, 116, 124, 134, 137, 140, 183, 184, 185, 186, 189, 190, 191, 193, 194, 195, 198, 201, 203, 208, 221, 222, 223, 224, 227, 228, 229, 231, 232, 233, 235, 237, 239, 241, 242, 243, 244, 245, 247, 249, 252, 253, 254, 255, 291, 295, 297, 300, 301, 302, 310, 313, 322, 341, 403, 404, 416, 417, 424, 473, 474, 475, 477, 528, 530, 531, 574, 576, 579, 580, 582, 583, 585, 586, 588, 589, 592, 593, 601, 602, 616, 618, 619, 623, 626, 628], "kerasadaptor": 8, "specifi": [8, 11, 14, 15, 39, 40, 41, 73, 96, 104, 133, 153, 172, 173, 201, 202, 237, 244, 245, 249, 252, 253, 256, 259, 261, 268, 269, 272, 278, 283, 291, 292, 297, 300, 301, 302, 311, 313, 326, 328, 331, 340, 341, 358, 361, 364, 371, 372, 373, 375, 376, 377, 382, 383, 385, 386, 388, 390, 391, 395, 396, 397, 410, 442, 446, 447, 448, 467, 472, 488, 492, 496, 509, 513, 574, 581, 585, 591, 599, 613, 619, 620, 625, 626, 628], "function": [8, 11, 14, 37, 41, 56, 96, 104, 133, 145, 172, 173, 185, 211, 223, 244, 245, 256, 267, 268, 269, 278, 283, 289, 292, 309, 332, 527, 528, 531, 574, 575, 576, 579, 580, 587, 588, 589, 591, 592, 602, 612, 616, 617, 620, 623, 624, 626], "fp32_baselin": [8, 11, 14, 39, 41, 334, 531], "boolen": [8, 14, 39, 41], "onli": [8, 11, 14, 15, 38, 39, 41, 42, 43, 47, 56, 57, 61, 62, 64, 68, 80, 96, 103, 109, 128, 132, 135, 145, 151, 152, 153, 160, 161, 184, 202, 204, 205, 208, 222, 245, 255, 267, 272, 286, 288, 309, 318, 322, 323, 324, 496, 506, 508, 509, 531, 575, 576, 581, 583, 585, 592, 599, 612, 616, 617, 619, 624, 626, 628], "compare_label": [8, 11, 14, 39, 41, 253, 301, 591], "pipelin": [8, 11, 14, 39, 41, 154, 157, 238, 245, 256, 257, 268, 289, 292, 580, 614], "get_optype_wise_": [8, 41], "quantizable_op_detail": 8, "get": [8, 13, 14, 15, 38, 39, 40, 41, 61, 62, 64, 73, 96, 97, 98, 99, 104, 109, 116, 117, 118, 119, 120, 121, 122, 123, 125, 127, 129, 131, 133, 136, 140, 142, 144, 147, 148, 150, 153, 154, 158, 160, 161, 162, 163, 166, 169, 172, 174, 177, 195, 198, 201, 202, 208, 210, 211, 212, 215, 233, 235, 237, 242, 243, 244, 245, 254, 261, 265, 271, 278, 283, 286, 288, 290, 291, 292, 293, 302, 309, 310, 311, 312, 313, 316, 321, 326, 328, 330, 331, 334, 336, 338, 341, 342, 347, 354, 355, 356, 358, 361, 364, 365, 366, 368, 371, 372, 373, 374, 375, 376, 377, 382, 383, 385, 387, 388, 389, 390, 391, 392, 395, 396, 397, 400, 404, 405, 410, 422, 425, 426, 428, 430, 431, 435, 436, 437, 439, 442, 444, 446, 447, 448, 449, 454, 458, 461, 464, 465, 467, 471, 472, 474, 476, 483, 484, 488, 492, 494, 496, 497, 499, 503, 506, 508, 509, 512, 513, 517, 519, 520, 521, 522, 574, 588, 589, 597, 626, 630], "wise": [8, 15, 41, 135, 152, 160, 286, 315, 316, 317, 321, 326, 327, 385, 388, 496, 574, 588, 616, 617, 624, 626, 628], "union": [8, 41, 253, 301, 331, 486, 591], "each": [8, 14, 15, 38, 39, 40, 41, 80, 104, 109, 136, 142, 160, 161, 182, 186, 189, 195, 197, 198, 201, 220, 224, 227, 234, 237, 247, 249, 250, 251, 260, 261, 267, 288, 295, 297, 298, 299, 309, 310, 311, 312, 315, 321, 526, 531, 574, 577, 579, 580, 585, 596, 602, 605, 611, 613, 616, 617, 623, 624, 625, 626], "kei": [8, 38, 39, 41, 104, 109, 133, 136, 140, 142, 160, 164, 166, 245, 249, 265, 267, 270, 278, 283, 287, 289, 297, 309, 310, 316, 324, 332, 334, 335, 341, 488, 504, 530, 574, 583, 624], "while": [8, 41, 97, 136, 161, 267, 288, 316, 531, 574, 577, 582, 586, 588, 592, 594, 599, 611, 619, 620], "detail": [8, 41, 145, 151, 195, 198, 201, 237, 265, 361, 364, 371, 372, 375, 377, 378, 380, 382, 383, 385, 388, 389, 390, 391, 392, 396, 401, 464, 469, 483, 496, 525, 526, 530, 585, 586, 587, 591, 592, 594, 602, 611, 616, 622, 623, 624, 626, 629], "kerasqueri": 8, "local_config_fil": [8, 39, 41], "querybackendcap": [8, 39, 40, 41, 531], "defin": [8, 39, 40, 41, 80, 86, 96, 104, 133, 142, 155, 160, 161, 162, 163, 172, 173, 203, 245, 256, 257, 260, 268, 269, 270, 271, 278, 283, 286, 287, 288, 289, 290, 302, 310, 313, 316, 331, 340, 419, 420, 421, 508, 525, 528, 531, 574, 576, 577, 579, 580, 585, 588, 591, 612, 614, 616, 617, 620, 623, 624, 626, 628], "interfac": [8, 39, 40, 80, 104, 107, 126, 136, 165, 169, 244, 245, 260, 261, 278, 283, 291, 292, 293, 312, 324, 334, 336, 342, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 394, 458, 464, 471, 483, 588, 602, 615, 620, 622], "adapt": [8, 39, 40, 525, 530, 577, 602, 618], "should": [8, 15, 37, 39, 40, 41, 48, 68, 73, 109, 110, 136, 160, 161, 172, 173, 182, 184, 186, 190, 195, 198, 200, 201, 205, 206, 220, 222, 224, 228, 233, 236, 237, 242, 247, 252, 253, 288, 292, 295, 300, 301, 302, 313, 324, 331, 337, 341, 405, 486, 527, 528, 531, 574, 577, 581, 591, 592, 597, 606, 609, 611, 613, 617, 620, 625, 626, 628], "implement": [8, 39, 40, 41, 80, 104, 126, 135, 136, 139, 160, 161, 162, 163, 172, 173, 179, 182, 183, 184, 186, 190, 195, 217, 220, 221, 222, 224, 228, 233, 246, 252, 253, 281, 286, 290, 294, 300, 301, 302, 312, 313, 319, 324, 331, 551, 576, 577, 602, 612, 617, 622, 624, 626, 628], "inherit": [8, 39, 40, 96, 154, 155, 161, 163, 181, 201, 203, 211, 219, 237, 245, 288, 290, 528, 531, 577], "specif": [8, 11, 14, 39, 40, 96, 98, 109, 110, 153, 164, 184, 185, 186, 187, 190, 191, 193, 194, 195, 202, 208, 222, 223, 224, 225, 229, 231, 232, 233, 245, 246, 249, 255, 256, 267, 268, 269, 272, 273, 275, 276, 277, 293, 294, 297, 311, 337, 372, 383, 384, 385, 388, 396, 411, 525, 528, 531, 574, 579, 585, 587, 591, 592, 593, 594, 598, 599, 601, 605, 611, 613, 616, 619, 626, 628], "backend": [8, 15, 39, 40, 41, 151, 169, 170, 171, 175, 176, 180, 184, 185, 187, 188, 189, 190, 191, 195, 198, 201, 207, 208, 213, 214, 216, 218, 222, 223, 225, 226, 227, 228, 229, 233, 235, 237, 254, 293, 302, 303, 304, 306, 309, 322, 527, 581, 587, 588, 592, 600, 619, 620, 625, 628], "own": [8, 39, 40, 68, 182, 201, 220, 237, 312, 528, 574, 576, 577, 588, 591, 613, 623], "get_vers": [8, 40, 41], "current": [8, 13, 37, 38, 40, 41, 56, 61, 62, 64, 68, 96, 98, 104, 109, 145, 158, 160, 161, 163, 245, 255, 261, 272, 273, 275, 276, 277, 278, 283, 286, 288, 289, 290, 309, 316, 317, 318, 321, 322, 324, 527, 528, 531, 574, 581, 585, 589, 591, 592, 594, 598, 611, 613, 616, 617, 620, 626], "version": [8, 13, 37, 40, 41, 47, 98, 147, 172, 239, 241, 242, 267, 293, 311, 316, 337, 444, 479, 484, 496, 525, 527, 531, 574, 585, 589, 590, 604, 606, 608, 609, 615, 618, 626], "infom": [8, 41, 204, 205, 242], "get_precis": [8, 40, 358], "support": [8, 13, 38, 39, 40, 41, 68, 75, 91, 98, 145, 151, 153, 154, 155, 160, 161, 169, 172, 173, 174, 183, 184, 186, 190, 193, 194, 195, 197, 198, 201, 202, 203, 204, 205, 208, 211, 212, 221, 222, 224, 228, 231, 232, 233, 234, 235, 237, 245, 252, 253, 255, 260, 261, 267, 270, 278, 279, 280, 281, 283, 286, 288, 292, 293, 300, 301, 302, 306, 312, 313, 322, 326, 328, 331, 334, 336, 358, 425, 428, 430, 431, 433, 435, 436, 437, 438, 444, 478, 486, 496, 523, 530, 574, 594, 599, 602, 605, 611, 617, 618, 621, 623, 626], "get_op_typ": [8, 39, 40, 41], "A": [8, 14, 38, 39, 41, 48, 50, 61, 62, 64, 68, 69, 97, 104, 107, 109, 110, 116, 133, 140, 145, 147, 148, 150, 154, 157, 158, 160, 161, 162, 163, 164, 186, 190, 195, 200, 201, 204, 205, 206, 207, 224, 228, 233, 236, 237, 238, 245, 246, 249, 250, 251, 253, 256, 268, 269, 270, 271, 278, 279, 280, 281, 283, 286, 287, 288, 289, 290, 294, 297, 298, 299, 300, 301, 302, 304, 306, 310, 314, 315, 316, 318, 319, 321, 322, 323, 326, 329, 331, 577, 582, 585, 591, 593, 604, 605, 608, 611, 616, 618, 625, 626, 628], "compos": [8, 39, 41, 133, 195, 198, 201, 237, 334, 625], "dictionari": [8, 15, 39, 41, 61, 62, 64, 116, 141, 142, 147, 166, 169, 200, 236, 249, 256, 258, 261, 267, 268, 269, 271, 293, 297, 309, 363, 365, 366, 368, 370, 373, 374, 379, 383, 384, 386], "which": [8, 13, 39, 41, 49, 61, 62, 74, 77, 103, 104, 109, 133, 142, 145, 158, 160, 161, 163, 172, 184, 185, 186, 190, 195, 197, 198, 202, 222, 223, 224, 234, 245, 246, 249, 251, 259, 261, 269, 270, 272, 273, 275, 276, 277, 278, 279, 280, 281, 286, 287, 288, 289, 290, 294, 297, 299, 306, 309, 312, 314, 316, 324, 337, 341, 494, 525, 527, 528, 531, 551, 574, 576, 577, 579, 581, 585, 588, 591, 592, 593, 595, 599, 602, 605, 611, 612, 614, 616, 617, 619, 620, 621, 622, 624, 625, 626, 628], "get_quantization_cap": [8, 39, 40, 41], "describ": [8, 39, 41, 61, 62, 261, 531, 574, 585, 624], "get_op_types_by_precis": [8, 39, 41], "per": [8, 15, 37, 38, 39, 40, 41, 145, 151, 153, 160, 174, 183, 202, 212, 221, 249, 261, 297, 336, 341, 361, 531, 574, 615, 621, 629], "mxnetadaptor": 11, "nc_model": [11, 13, 278, 283, 331], "config": [11, 13, 14, 15, 39, 40, 41, 107, 109, 110, 112, 116, 147, 153, 158, 160, 161, 162, 163, 164, 172, 173, 184, 202, 211, 222, 244, 245, 258, 266, 269, 272, 273, 275, 276, 277, 278, 283, 286, 287, 288, 289, 290, 293, 302, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 326, 328, 329, 331, 334, 335, 340, 341, 342, 343, 346, 347, 348, 350, 352, 353, 356, 382, 388, 390, 391, 395, 396, 440, 442, 449, 451, 454, 455, 458, 460, 461, 463, 464, 471, 474, 477, 485, 496, 499, 500, 501, 502, 504, 506, 507, 509, 517, 519, 522, 528, 530, 542, 574, 575, 579, 580, 581, 583, 586, 588, 592, 593, 614, 616, 619, 620, 621, 623, 624, 626], "unimpl": [11, 14], "yet": [11, 14, 41, 160, 528, 574, 606, 609, 612], "mxnetmodel": [11, 307], "data_x": [11, 13], "loader": [11, 13, 172, 173, 292, 302, 313, 331, 337], "acc": [11, 14, 253, 261, 301, 312, 528, 624, 629], "level": [11, 169, 293, 317, 324, 335, 338, 487, 509, 525, 626], "modelwis": 11, "opwis": 11, "save_path": [11, 14, 41, 134, 140, 239, 241, 242, 303, 304, 309, 310, 311, 331, 531, 593], "quantization_cfg": [11, 14, 41, 531], "includ": [11, 42, 43, 155, 158, 160, 162, 163, 184, 186, 190, 193, 194, 195, 198, 201, 203, 222, 224, 228, 231, 232, 233, 235, 237, 244, 245, 249, 254, 267, 286, 290, 291, 297, 302, 313, 318, 324, 326, 329, 525, 526, 531, 574, 577, 589, 590, 591, 592, 594, 597, 600, 605, 616, 617, 620, 621, 624, 626], "recover_tuned_model": [11, 41], "q_config": [11, 14, 15, 37, 40, 41, 239, 242, 305, 309, 310, 531], "recov": [11, 14, 41, 145, 341, 531, 580], "mxnet": [12, 13, 179, 183, 186, 189, 190, 193, 194, 195, 198, 201, 217, 221, 224, 227, 228, 231, 232, 233, 235, 237, 244, 245, 252, 253, 291, 300, 301, 302, 307, 313, 530, 531, 576, 582, 585, 588, 589, 592, 593, 619, 626, 628], "init": [12, 16, 150, 155, 156, 159, 203, 324, 577, 591], "optyp": [13, 240], "enum": [13, 38, 341, 446, 478], "isiter": 13, "obj": [13, 99, 153, 164, 183, 221, 238, 244, 245, 255, 256, 257, 268, 269, 278, 283, 287, 291, 292, 293, 302, 312, 313, 331, 334, 341], "check": [13, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 56, 57, 61, 62, 73, 96, 97, 98, 99, 104, 109, 116, 140, 147, 160, 161, 164, 169, 173, 186, 224, 240, 245, 255, 287, 292, 309, 312, 316, 317, 324, 341, 383, 388, 425, 428, 430, 431, 433, 435, 436, 437, 438, 444, 447, 465, 481, 482, 484, 489, 496, 498, 526, 530, 574, 581, 589, 595, 597, 599, 606, 609, 610, 622], "whether": [13, 14, 15, 39, 41, 96, 97, 99, 109, 110, 140, 160, 174, 182, 184, 195, 197, 198, 201, 212, 220, 222, 234, 237, 238, 245, 247, 249, 253, 267, 278, 283, 286, 288, 295, 297, 301, 312, 317, 324, 334, 337, 341, 447, 531, 577, 591, 625], "true": [13, 14, 15, 37, 39, 41, 56, 57, 73, 79, 96, 97, 104, 107, 109, 138, 140, 142, 153, 160, 169, 173, 174, 182, 184, 186, 187, 195, 198, 200, 201, 202, 212, 220, 222, 224, 225, 236, 237, 239, 242, 247, 249, 253, 258, 265, 267, 272, 281, 286, 295, 297, 301, 311, 312, 324, 326, 327, 334, 442, 481, 484, 489, 490, 496, 577, 581, 585, 591, 594, 597, 598, 619, 620, 624, 625, 626, 628], "els": [13, 56, 57, 140, 182, 220, 312, 317, 324, 481, 496, 599, 624], "ensure_list": 13, "x": [13, 48, 61, 62, 64, 68, 141, 183, 195, 198, 201, 221, 237, 261, 265, 267, 316, 581, 592, 593, 616, 620, 624, 625], "ensur": [13, 15, 195, 198, 201, 237, 289, 316, 360, 393, 425, 428, 430, 437, 479, 574, 581, 583, 620, 625], "check_mx_vers": 13, "mx": 13, "__version__": 13, "combine_cap": 13, "new": [13, 50, 96, 97, 101, 104, 126, 140, 153, 160, 163, 174, 186, 195, 198, 201, 202, 212, 224, 233, 235, 237, 267, 286, 287, 290, 292, 312, 324, 327, 387, 388, 392, 508, 526, 581, 592, 605, 611, 612, 618, 620, 622, 623, 625, 628], "combin": [13, 40, 147, 169, 172, 173, 195, 197, 198, 211, 234, 245, 292, 293, 302, 313, 331, 341, 527, 531, 588, 614, 618, 621, 625, 626], "make_nc_model": 13, "target": [13, 38, 39, 83, 84, 96, 104, 133, 155, 160, 163, 164, 172, 203, 258, 275, 277, 287, 290, 312, 314, 316, 409, 410, 577, 581, 616, 617, 624, 625, 626, 628], "sym_model": 13, "ctx": [13, 134], "input_desc": 13, "symbol": [13, 141, 146, 147, 246, 294, 302, 313, 527, 534, 593], "neural": [13, 39, 142, 153, 154, 160, 169, 195, 196, 197, 198, 201, 202, 205, 208, 211, 234, 235, 237, 239, 245, 252, 253, 255, 278, 283, 286, 289, 291, 292, 293, 300, 301, 302, 304, 306, 313, 319, 320, 326, 331, 337, 400, 404, 428, 437, 476, 483, 496, 523, 526, 531, 560, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 590, 591, 592, 593, 595, 596, 599, 601, 602, 604, 606, 608, 609, 610, 613, 614, 618, 620, 622, 624, 625, 626, 628], "compressor": [13, 39, 153, 154, 160, 169, 195, 196, 197, 198, 201, 202, 205, 208, 211, 234, 235, 237, 239, 245, 252, 253, 255, 286, 289, 291, 292, 293, 300, 301, 302, 304, 306, 313, 320, 326, 331, 337, 400, 404, 428, 437, 476, 483, 496, 523, 526, 528, 531, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 590, 591, 592, 593, 594, 595, 599, 601, 602, 604, 606, 608, 609, 610, 613, 614, 616, 618, 620, 622, 624, 625, 626, 628], "tupl": [13, 39, 41, 99, 104, 116, 147, 155, 160, 172, 173, 195, 197, 198, 201, 203, 234, 237, 239, 242, 249, 258, 261, 267, 297, 302, 312, 313, 321, 326, 327, 328, 331, 411, 442, 496, 515, 577, 591, 625], "symnet": 13, "arg": [13, 39, 47, 99, 184, 185, 186, 190, 195, 222, 223, 224, 244, 245, 255, 267, 283, 286, 291, 292, 303, 304, 305, 308, 311, 316, 335, 337, 338, 346, 348, 350, 351, 352, 353, 363, 365, 366, 368, 370, 373, 374, 379, 481, 489, 509, 576, 577, 581, 600, 620, 624, 625], "aux": 13, "descript": [13, 104, 126, 133, 242, 243, 249, 269, 297, 311, 526, 527], "ncmodel": 13, "suppli": [13, 265], "get_framework_nam": [13, 425, 428, 430, 437], "prepare_model_data": 13, "prepar": [13, 39, 147, 211, 238, 245, 278, 283, 289, 291, 383, 388, 476, 527, 530, 577, 581, 586, 620], "dataloaderwrap": 13, "prepare_model": 13, "create_data_exampl": 13, "exampl": [13, 109, 142, 147, 153, 169, 184, 185, 186, 190, 195, 197, 200, 201, 222, 223, 224, 234, 236, 237, 249, 250, 251, 253, 259, 289, 293, 297, 298, 299, 301, 302, 311, 312, 313, 331, 369, 387, 393, 417, 441, 442, 443, 444, 489, 496, 525, 526, 530, 574, 587, 588, 594, 597, 598, 599, 602, 621, 622, 625, 626, 630], "prepare_dataload": 13, "io": [13, 530], "ndarray_to_devic": 13, "ndarrai": [13, 61, 62, 64, 96, 97, 104, 201, 237, 258, 260, 311, 316, 332, 335, 584, 625], "devic": [13, 73, 83, 84, 85, 86, 87, 88, 91, 101, 104, 125, 130, 133, 139, 142, 155, 169, 203, 261, 293, 579, 592, 594, 597, 602, 611, 616, 619], "is_model_quant": 13, "query_quantizable_nod": 13, "node": [13, 15, 21, 23, 32, 36, 37, 38, 41, 42, 43, 44, 47, 48, 49, 50, 54, 56, 57, 58, 61, 62, 64, 68, 71, 73, 74, 76, 77, 78, 92, 96, 97, 99, 103, 104, 126, 133, 134, 136, 140, 239, 240, 242, 303, 304, 309, 310, 311, 324, 394, 407, 408, 409, 410, 411, 412, 417, 425, 428, 435, 436, 437, 474, 475, 477, 531, 574, 581, 624], "map": [13, 38, 41, 96, 99, 126, 136, 142, 160, 162, 201, 237, 239, 240, 242, 244, 245, 248, 249, 250, 251, 253, 258, 278, 283, 286, 288, 291, 296, 297, 298, 299, 300, 301, 313, 446, 577, 581, 591, 604, 608, 616, 617, 620], "quantize_sym_model": 13, "qconfig": [13, 624], "accord": [13, 41, 96, 116, 153, 160, 163, 169, 172, 184, 185, 186, 190, 195, 198, 201, 222, 223, 224, 233, 235, 237, 245, 267, 272, 275, 276, 277, 290, 291, 311, 314, 315, 316, 317, 319, 321, 324, 326, 328, 334, 495, 528, 531, 577, 581, 616, 617, 621, 625, 626], "run_forward": 13, "b_filter": 13, "collector": [13, 142, 332, 335], "pre_batch": 13, "post_batch": 13, "forward": [13, 141, 155, 203, 265, 267, 311, 530, 619, 620, 624], "propag": [13, 94, 116, 273], "filter": [13, 184, 185, 186, 187, 188, 189, 190, 191, 195, 222, 223, 224, 225, 226, 227, 229, 233, 245, 293, 341, 364, 405, 428, 498, 576, 577, 588, 616, 617, 624], "infer": [13, 15, 61, 62, 96, 99, 126, 133, 244, 245, 291, 310, 312, 313, 331, 530, 531, 579, 580, 592, 611, 613, 616, 617, 618, 620, 624, 626], "collect": [13, 38, 41, 195, 198, 199, 201, 204, 205, 206, 207, 209, 233, 235, 237, 246, 251, 252, 253, 294, 299, 300, 301, 326, 327, 328, 330, 332, 335, 341, 342, 447, 471, 482, 484, 496, 497, 583, 620, 624, 626], "inform": [13, 15, 38, 41, 97, 107, 142, 158, 160, 161, 162, 163, 164, 172, 173, 204, 205, 206, 207, 249, 286, 288, 289, 290, 292, 297, 300, 301, 309, 324, 358, 396, 425, 483, 484, 489, 490, 525, 526, 529, 530, 531, 532, 534, 540, 541, 542, 549, 553, 560, 568, 569, 570, 571, 573, 579, 583, 585, 593, 606, 609, 612, 616, 617, 621, 622, 624, 628, 629, 630], "dure": [13, 41, 56, 61, 62, 96, 116, 160, 163, 258, 261, 267, 286, 290, 292, 312, 490, 592, 593, 613, 614, 616, 617, 620, 624, 628], "prior": [13, 82, 316, 626], "after": [13, 15, 38, 39, 51, 72, 147, 154, 157, 158, 160, 161, 162, 163, 184, 195, 197, 198, 201, 204, 205, 211, 222, 234, 237, 238, 239, 242, 245, 258, 286, 288, 289, 290, 317, 331, 482, 528, 574, 576, 577, 579, 580, 583, 588, 591, 604, 605, 608, 612, 613, 614, 616, 617, 620, 621, 623, 624, 625, 626], "count": [13, 160, 269, 317, 528, 577], "make_symbol_block": 13, "gluon": [13, 302, 313, 593], "symbolblock": 13, "make_modul": 13, "parse_tune_config": 13, "quantizable_nod": 13, "distribute_calib_tensor": 13, "calib_tensor": 13, "calib_cfg": 13, "tensor_to_nod": 13, "distribut": [13, 135, 152, 174, 176, 177, 181, 182, 195, 204, 205, 212, 214, 215, 219, 220, 238, 245, 278, 283, 291, 316, 324, 336, 484, 530, 579, 589, 606, 609, 618, 620, 622, 626, 629], "algorithm": [13, 147, 165, 200, 236, 246, 253, 256, 260, 268, 269, 271, 293, 294, 301, 316, 326, 328, 334, 336, 528, 531, 551, 579, 580, 585, 588, 600, 605, 616, 617, 620, 624, 628], "kl": [13, 332, 335, 336, 585, 626, 628], "minmax": [13, 585, 628], "calib_model": 13, "qsym_model": 13, "calib_data": 13, "calibdata": 13, "threshold": [13, 15, 149, 160, 249, 286, 297, 332, 335, 336, 591], "amp_convert": 13, "amp_cfg": 13, "amp": [13, 594, 601, 615], "wrap": [13, 99, 110, 116, 155, 203, 249, 297, 354, 527, 581, 606, 609], "dataiterload": 13, "data_it": 13, "collectorbas": 13, "collect_gluon": 13, "_": [13, 172, 173, 313, 527, 528, 531, 574, 579, 581, 585, 591, 592, 593, 594, 600, 604, 606, 608, 609, 613, 616, 617, 620, 622, 623, 624, 626, 628], "arr": [13, 38, 341], "api": [13, 14, 39, 41, 64, 69, 101, 104, 116, 126, 244, 245, 249, 289, 291, 297, 313, 326, 327, 328, 341, 382, 383, 384, 385, 386, 387, 389, 390, 391, 392, 512, 513, 526, 527, 532, 534, 540, 549, 553, 568, 569, 570, 571, 573, 583, 588, 596, 600, 601, 602, 622, 623, 626, 630], "collect_modul": 13, "m": [13, 38, 64, 142, 160, 286, 579, 589, 594, 596, 599, 602, 606, 609, 629], "b": [13, 38, 64, 68, 184, 222, 242, 577, 591, 617, 626], "o": [13, 64, 405, 589, 596, 615], "calibcollector": 13, "include_tensors_kl": 13, "include_tensors_minmax": 13, "num_bin": [13, 332, 335, 336], "8001": [13, 332, 335], "calc_kl_th_dict": 13, "quantized_dtyp": 13, "calcul": [13, 15, 38, 39, 41, 54, 142, 155, 158, 160, 162, 164, 173, 187, 188, 203, 225, 226, 245, 250, 251, 261, 266, 267, 278, 282, 283, 286, 288, 289, 298, 299, 312, 321, 332, 335, 396, 488, 494, 577, 591, 602, 613, 616, 617, 620, 623, 626, 628], "tensorcollector": 13, "include_nod": 13, "qtensor_to_tensor": 13, "build": [13, 109, 116, 126, 148, 149, 150, 151, 152, 242, 243, 256, 258, 268, 269, 305, 307, 309, 310, 311, 361, 362, 364, 375, 376, 378, 381, 405, 465, 474, 496, 513, 531, 574, 589, 593, 604, 606, 608, 609, 612, 618, 623, 626], "up": [13, 61, 62, 64, 94, 195, 198, 201, 237, 245, 261, 278, 283, 287, 312, 382, 574, 581, 582, 585, 586, 588, 602, 606, 609, 611, 618, 619, 620, 623, 625, 628], "preprocess": [13, 184, 195, 198, 201, 222, 233, 235, 237, 238, 245, 267, 334, 581, 625], "namecollector": 13, "cache_kl": 13, "cache_minmax": 13, "tensors_kl": 13, "tensors_minmax": 13, "properti": [13, 96, 97, 98, 104, 116, 148, 150, 153, 154, 155, 157, 169, 174, 176, 184, 186, 195, 202, 203, 211, 212, 214, 222, 224, 238, 244, 245, 252, 253, 254, 255, 269, 278, 283, 291, 292, 293, 300, 301, 302, 303, 304, 305, 307, 309, 310, 311, 312, 313, 316, 324, 326, 328, 331, 341, 342, 360, 393, 400, 404, 409, 410, 413, 425, 428, 433, 437, 446, 449, 454, 458, 461, 464, 471, 481, 488, 489, 490, 494, 499, 503, 506, 508, 509, 590, 615], "min_max_dict": 13, "mix": [13, 41, 42, 43, 141, 302, 314, 328, 453, 454, 455, 502, 530, 531, 542, 588, 594, 600, 601, 602], "max": [13, 14, 15, 38, 41, 98, 104, 135, 152, 169, 195, 198, 201, 237, 250, 251, 293, 298, 299, 316, 341, 506, 530, 574, 589, 620, 625, 626], "post_collect": 13, "2": [13, 38, 40, 41, 42, 47, 68, 73, 99, 103, 145, 149, 151, 153, 160, 161, 185, 202, 223, 249, 251, 253, 261, 281, 282, 288, 297, 299, 300, 301, 312, 314, 316, 527, 531, 577, 579, 585, 586, 588, 589, 590, 591, 592, 613, 615, 616, 620, 622, 623, 625, 626], "onnxruntimeadaptor": 14, "rt": 14, "smooth_quant": [14, 39, 150, 293], "alpha": [14, 38, 39, 145, 151, 158, 162, 259, 324], "5": [14, 39, 73, 145, 151, 155, 169, 188, 197, 203, 226, 234, 249, 253, 297, 300, 301, 317, 531, 574, 577, 585, 591, 615, 616, 619, 625, 626, 628, 629], "percentil": [14, 15, 39, 145], "99": [14, 145, 629], "999": [14, 145, 628, 629], "op_typ": [14, 15, 32, 39, 96, 145, 309, 317, 321, 324, 326, 328, 329], "linear": [14, 38, 145, 151, 160, 169, 239, 242, 286, 293, 527, 579, 583, 616, 617], "scales_per_op": [14, 39, 145], "augment": [14, 15], "smooth": [14, 15, 38, 39, 145, 151, 324, 327, 617], "quant": [14, 39, 41, 145, 147, 324, 326, 328, 527, 620], "model_wrapp": [14, 15], "origin_model": [14, 148, 150], "smoothquant": [14, 39, 145, 151, 530], "fallback": [14, 39, 41, 147, 314, 315, 318, 319, 321, 322, 592, 621, 626], "spiq": [14, 39, 145, 151], "remov": [14, 15, 17, 37, 38, 39, 41, 50, 51, 54, 56, 68, 73, 74, 77, 78, 79, 90, 92, 96, 104, 109, 126, 133, 142, 154, 155, 203, 242, 251, 299, 309, 311, 326, 328, 361, 364, 371, 372, 375, 377, 378, 380, 382, 428, 489, 490, 497, 525, 526, 604, 608, 616, 617, 624], "outlier": [14, 15, 39], "whose": [14, 15, 38, 39, 54, 79, 145, 151, 160, 287, 587, 616, 626], "have": [14, 38, 39, 68, 77, 96, 97, 104, 140, 160, 161, 182, 200, 204, 205, 220, 236, 246, 249, 253, 260, 286, 288, 294, 297, 301, 324, 326, 328, 525, 526, 551, 574, 576, 577, 581, 585, 590, 591, 592, 594, 611, 613, 616, 617, 620, 626], "individu": [14, 38, 39, 61, 62, 64, 160, 257, 258, 268, 286, 525], "mainli": [14, 15, 39, 154, 157, 160, 163, 211, 245, 290, 617, 620], "accuraci": [14, 39, 153, 154, 169, 172, 173, 202, 238, 244, 245, 253, 257, 258, 259, 261, 268, 278, 283, 291, 293, 300, 301, 302, 312, 313, 314, 317, 322, 324, 331, 346, 362, 372, 382, 388, 390, 464, 488, 494, 497, 499, 515, 527, 530, 574, 576, 577, 580, 581, 582, 583, 586, 591, 592, 602, 611, 613, 614, 616, 617, 618, 619, 622, 623, 624, 628, 629], "same": [14, 38, 39, 41, 50, 61, 77, 134, 140, 145, 160, 184, 195, 198, 201, 222, 237, 249, 278, 283, 297, 317, 318, 321, 341, 531, 575, 576, 577, 579, 581, 585, 595, 599, 604, 608, 615, 619, 620, 624, 625, 626], "share": [14, 38, 39, 73, 76, 92, 103, 133, 134, 584, 585, 626], "perform": [14, 39, 56, 61, 62, 90, 153, 161, 162, 169, 184, 195, 196, 197, 198, 200, 202, 222, 234, 236, 244, 245, 256, 257, 259, 261, 268, 269, 278, 283, 291, 293, 312, 313, 315, 317, 318, 321, 323, 346, 362, 372, 382, 388, 390, 479, 488, 497, 499, 506, 515, 527, 528, 530, 531, 574, 575, 576, 577, 578, 580, 582, 583, 586, 588, 589, 591, 592, 593, 594, 596, 600, 602, 605, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 624, 626, 628, 629], "modifi": [14, 39, 50, 56, 61, 62, 64, 75, 186, 224, 245, 278, 283, 289, 475, 527, 574, 581, 585, 628], "data_load": [14, 41, 42, 43, 531], "todo": [14, 38, 184, 187, 222, 225, 249, 297, 328, 494, 627], "replac": [14, 61, 62, 79, 96, 104, 251, 299, 309, 317, 496, 581, 602, 622], "input_graph": [14, 125, 126, 130, 133, 135, 343, 451, 455, 460, 463, 470, 531], "eval": [14, 154, 211, 245, 249, 255, 297, 313, 331, 527, 576, 594, 624], "func": [14, 96, 155, 203, 292, 311, 496, 513, 628], "onnxdataload": 14, "evalut": 14, "onnxtransform": 14, "onnxmetr": 14, "evaluaton": 14, "visualizaton": 14, "f1": [14, 245, 250, 252, 253, 293, 298, 300, 301, 581, 591, 623, 629], "e": [14, 40, 64, 96, 160, 258, 260, 292, 486, 488, 513, 525, 579, 582, 586, 594, 599, 600, 604, 608, 616, 626], "g": [14, 40, 99, 160, 258, 260, 292, 488, 579, 582, 586, 594, 599, 616, 617, 622, 626], "modelproto": [14, 96, 239, 240, 242, 302, 593], "onnxrt_qlinearopsadaptor": [14, 531], "onnxrt_integeropsadaptor": 14, "onnxrt_qdqadaptor": 14, "onnxrtaug": 15, "dump_op_typ": 15, "black_nod": 15, "white_nod": 15, "cpuexecutionprovid": 15, "reduce_rang": [15, 37, 169, 293, 619], "augment_graph": 15, "activation_onli": 15, "weight_onli": 15, "add": [15, 37, 38, 46, 53, 58, 61, 62, 96, 103, 104, 109, 113, 119, 122, 140, 164, 184, 186, 208, 222, 224, 245, 246, 253, 267, 278, 283, 287, 289, 292, 294, 300, 301, 309, 317, 326, 328, 354, 361, 362, 364, 371, 372, 373, 374, 375, 376, 378, 380, 381, 382, 383, 387, 388, 389, 390, 391, 392, 394, 410, 496, 521, 526, 527, 551, 574, 576, 577, 581, 583, 585, 591, 592, 606, 609, 623, 624, 626], "quantization_candid": 15, "store": [15, 96, 158, 160, 161, 162, 163, 186, 224, 249, 267, 279, 280, 281, 286, 288, 297, 316, 337, 587], "part": [15, 161, 238, 245, 249, 286, 288, 297, 527, 589, 592, 606, 609], "graph": [15, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 106, 107, 108, 111, 124, 126, 130, 133, 134, 135, 137, 138, 139, 140, 183, 221, 242, 244, 293, 303, 304, 305, 309, 310, 311, 348, 350, 352, 417, 425, 428, 436, 437, 439, 449, 450, 451, 456, 457, 461, 474, 475, 477, 497, 500, 512, 527, 531, 577, 579, 581, 587, 591, 593, 594, 620, 621, 624], "get_intermediate_output": 15, "calib_mod": 15, "intermedi": [15, 38, 142, 155, 169, 203, 313, 527, 588, 616, 620], "dump_minmax": 15, "naiv": 15, "min": [15, 41, 104, 135, 152, 341, 574, 620, 625, 626], "dump_calibr": 15, "param": [15, 39, 40, 41, 61, 142, 145, 153, 172, 174, 202, 208, 212, 249, 252, 253, 267, 297, 300, 301, 316, 363, 395, 496, 499, 531, 593, 626], "give": [15, 611, 626], "pair": [15, 37, 42, 101, 109, 576, 592], "across": [15, 244, 245, 254, 291, 302, 313, 578, 616, 617], "test": [15, 201, 237, 258, 526, 530, 574, 589, 629], "first": [15, 41, 86, 101, 135, 152, 166, 184, 200, 222, 236, 238, 245, 249, 297, 314, 315, 317, 328, 405, 527, 528, 531, 574, 577, 583, 589, 592, 596, 605, 606, 609, 612, 619, 620, 621, 623, 624, 626, 628], "element": [15, 160, 164, 182, 220, 245, 249, 265, 267, 278, 283, 286, 289, 297, 341, 359, 577, 588, 591, 616], "minimum": [15, 160, 316, 602, 616, 626], "second": [15, 58, 169, 184, 222, 293, 317, 341, 405, 488, 574, 604, 608, 612, 626, 628], "maximum": [15, 48, 160, 161, 184, 195, 198, 201, 222, 237, 247, 267, 286, 288, 295, 316, 577, 616, 620, 625], "calculate_quantization_param": 15, "quantization_threshold": 15, "follow": [15, 62, 64, 73, 82, 85, 86, 87, 88, 104, 186, 190, 195, 224, 245, 246, 249, 267, 278, 283, 294, 297, 314, 525, 526, 527, 528, 531, 541, 574, 576, 577, 579, 580, 581, 583, 585, 589, 590, 591, 592, 593, 594, 595, 596, 604, 608, 614, 616, 617, 619, 620, 624, 626], "param_nam": [15, 354], "dump_tensor": 15, "both": [15, 140, 142, 267, 269, 271, 525, 528, 531, 580, 589, 595, 619, 620, 626], "calculate_scale_zeropoint": 15, "last_nod": 15, "next_nod": 15, "rmin": [15, 38, 620], "rmax": [15, 38, 620], "scheme": [15, 37, 38, 40, 147, 326, 328, 513, 531, 576, 585, 602, 626, 628], "qtype": [15, 38, 531], "quantize_rang": [15, 38], "zero": [15, 37, 38, 160, 161, 164, 195, 198, 201, 237, 245, 253, 278, 283, 286, 288, 289, 301, 341, 530, 616, 617, 620, 625, 626], "point": [15, 37, 38, 96, 197, 234, 250, 251, 270, 298, 299, 312, 316, 591, 611, 620, 625, 626], "calib_smooth": 15, "channel": [15, 37, 38, 104, 135, 145, 151, 152, 160, 195, 197, 198, 201, 234, 237, 261, 265, 286, 425, 428, 437, 531, 588, 589, 594, 596, 601, 616, 617, 625, 629], "shape_info": [15, 38], "shape": [15, 38, 96, 97, 99, 104, 116, 133, 140, 160, 187, 188, 195, 197, 198, 201, 225, 226, 234, 237, 249, 265, 267, 286, 297, 308, 417, 424, 425, 428, 437, 439, 477, 530, 574, 577, 585, 586, 625], "max_vals_per_channel": [15, 38], "activationoper": 17, "onnx_quant": [17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36], "onnx_nod": [17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 81, 95, 105], "quantize_check": [17, 20, 21, 23, 25, 27, 31, 32, 33, 34, 35], "quantizaion": [17, 19, 20, 21, 22, 23, 24, 25, 27, 29, 30, 31, 32, 33, 34, 35, 36], "can": [17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 50, 135, 142, 145, 152, 153, 160, 161, 163, 172, 173, 183, 186, 195, 198, 201, 202, 204, 205, 221, 224, 237, 245, 249, 251, 253, 265, 267, 278, 283, 286, 288, 289, 290, 293, 297, 299, 301, 302, 312, 313, 331, 337, 447, 479, 486, 496, 527, 528, 530, 531, 574, 575, 576, 577, 579, 580, 581, 585, 588, 589, 591, 592, 593, 594, 595, 596, 598, 599, 600, 602, 604, 605, 606, 608, 609, 611, 612, 613, 614, 615, 616, 617, 619, 620, 621, 623, 624, 625, 626, 628], "done": [17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 527, 579, 580, 595, 611, 616, 620], "convert_check": [17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36], "convert_format": [17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36], "convers": [17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 48, 75, 96, 97, 245, 255, 531, 592, 620, 621], "qoper": [17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37], "removableactivationoper": 17, "qactivationoper": 17, "children": [17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 36, 309], "initi": [17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 36, 37, 38, 99, 110, 140, 154, 155, 157, 161, 172, 173, 181, 184, 203, 211, 219, 222, 238, 245, 256, 257, 268, 269, 287, 288, 292, 309, 310, 313, 324, 328, 331, 360, 383, 384, 393, 442, 474, 476, 484, 497, 504, 528, 574, 576, 577, 591, 610, 616, 617, 626], "argmaxoper": 18, "qargmaxoper": 18, "attentionoper": 19, "qattentionoper": 19, "qattent": 19, "binari": [20, 140, 253, 265, 267, 301, 584, 591, 606, 609], "binaryoper": 20, "qbinaryoper": 20, "qbinari": 20, "concatoper": 21, "cast": [21, 23, 32, 36, 37, 38, 51, 583, 621, 625], "qconcatoper": 21, "qconcat": 21, "convoper": 22, "qconvoper": 22, "qlinearconv": 22, "direct8bit": 23, "direct8bitoper": 23, "qdirectoper": 23, "qdirect": 23, "embedlayernorm": 24, "embedlayernormalizationoper": 24, "qembedlayernormalizationoper": 24, "qembedlayernorm": 24, "gatheroper": 25, "qgatheroper": 25, "qgather": 25, "globalaveragepool": 26, "globalaveragepooloper": 26, "qglobalaveragepooloper": 26, "qlinearglobalaveragepool": 26, "gemmoper": 27, "qgemmoper": 27, "qgemm": 27, "lstmoper": 29, "matmuloper": 30, "qmatmuloper": 30, "qlinearmatmul": 30, "maxpooloper": 31, "qmaxpooloper": 31, "qmaxpool": 31, "op_registri": 32, "qop_registri": 32, "padoper": 33, "qpadoper": 33, "qpad": 33, "averagepool": 34, "pooloper": 34, "qpooloper": 34, "qlinearaveragepool": 34, "resizeoper": 35, "qresizeoper": 35, "qresiz": 35, "splitoper": 36, "qsplitoper": 36, "qsplit": 36, "static": [37, 39, 41, 98, 104, 133, 144, 145, 151, 169, 243, 258, 292, 293, 309, 313, 326, 328, 354, 358, 361, 362, 363, 364, 365, 366, 368, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 394, 396, 397, 425, 428, 430, 431, 433, 435, 436, 437, 438, 448, 465, 467, 472, 474, 479, 481, 486, 488, 494, 495, 497, 499, 504, 509, 513, 520, 521, 531, 583, 588, 594, 599, 600, 601, 602, 605, 611, 626, 629], "quantization_param": 37, "op_types_to_quant": 37, "fallback_list": 37, "add_qdq_pair_to_weight": 37, "optypes_to_exclude_output_qu": 37, "dedicated_qdq_pair": 37, "check_opset_vers": 37, "opset": [37, 96, 98, 99, 239, 241, 242, 311], "should_quant": 37, "quantize_model": 37, "merge_dedicated_qdq_pair": 37, "merg": [37, 102, 176, 214, 326, 328, 606, 609, 624, 626], "dedic": 37, "q": [37, 38, 42, 101, 103, 125], "dq": [37, 42, 101, 103, 125], "should_cast": 37, "insert_qdq": 37, "insert": [37, 38, 41, 42, 71, 96, 99, 101, 103, 104, 107, 126, 134, 138, 151, 239, 242, 527, 588, 594, 616, 617, 620, 621, 624], "should_convert": 37, "convert_qdq_to_operator_ori": 37, "remove_redundant_pair": 37, "redud": 37, "dtype_cast": 37, "cfg": [37, 41, 65, 66, 147, 165, 328, 334], "keep_io_typ": 37, "dtype": [37, 38, 42, 43, 96, 97, 99, 104, 133, 141, 169, 187, 188, 197, 201, 225, 226, 234, 237, 239, 242, 243, 311, 577, 583, 585, 594, 619, 624, 625, 628], "quantize_output": 37, "initializer_use_weight_qtyp": 37, "direct_int8": 37, "indic": [37, 96, 154, 157, 160, 177, 182, 184, 215, 220, 222, 238, 245, 249, 265, 267, 270, 271, 297, 527, 574, 584, 624], "quantize_bias_tensor": 37, "bia": [37, 41, 104, 133, 135, 239, 242, 265, 324, 624], "quantize_bia": 37, "bias_nam": [37, 242], "input_nam": [37, 61, 62, 96, 134, 169, 239, 241, 242, 311, 583], "weight_nam": [37, 272], "beta": [37, 61, 62, 64, 158], "input_scal": 37, "weight_scal": 37, "quantize_weights_per_channel": 37, "weight_qtyp": 37, "axi": [37, 38, 160], "quantize_weight_per_channel": 37, "channel_axi": [37, 107, 149, 152], "tensor_proto_to_arrai": 37, "tensorproto": [37, 38, 99], "get_bias_add_nod": 37, "last_output": 37, "quantized_bias_nam": 37, "handl": [37, 54, 55, 56, 140, 142, 145, 151, 245, 258, 259, 260, 291, 324, 338, 486, 512, 513, 527, 529, 576], "ad": [37, 38, 116, 160, 161, 184, 222, 246, 294, 316, 361, 362, 364, 371, 372, 373, 374, 375, 378, 380, 381, 574, 592, 594, 599, 602, 606, 609, 624], "reshap": [37, 55, 61, 62, 64, 67, 72, 160, 281], "nodeproto": [37, 242], "_type_": [37, 242, 308], "previou": [37, 41, 61, 73, 160, 267, 269, 312, 315, 322, 574, 622, 624, 626], "is_valid_quantize_weight": 37, "dequantize_tensor": [37, 142, 396], "value_nam": 37, "dequant": [37, 38, 51, 82, 85, 86, 87, 88, 90, 96, 119, 120, 122, 134, 142, 147, 341, 396, 527, 624], "helper": [38, 39, 41, 104, 110, 140, 142, 147, 184, 185, 186, 200, 222, 223, 224, 236, 240, 241, 242, 265, 310, 339, 490], "onnxrt": [38, 184, 186, 193, 194, 195, 198, 201, 222, 224, 231, 232, 233, 235, 237, 252, 253, 300, 301, 339, 399, 400, 415, 417, 424, 477, 531, 592], "dtype_to_nam": 38, "dtype_map": 38, "its": [38, 41, 54, 90, 96, 104, 107, 116, 142, 160, 161, 180, 186, 195, 198, 200, 201, 218, 224, 236, 237, 239, 240, 247, 248, 252, 253, 288, 292, 295, 296, 300, 301, 316, 317, 321, 326, 328, 525, 574, 577, 579, 590, 591, 592, 602, 604, 608, 611, 612, 615, 616, 617, 623, 625, 626], "represent": [38, 50, 258, 361, 362, 364, 367, 371, 372, 375, 376, 378, 380, 381, 507, 525, 527, 580, 617, 620], "quanttyp": 38, "repres": [38, 160, 161, 162, 163, 164, 186, 191, 224, 229, 249, 251, 253, 297, 299, 301, 363, 365, 366, 368, 370, 373, 374, 377, 379, 494, 525, 577, 583, 620, 626], "make_quant_nod": 38, "make": [38, 62, 96, 99, 133, 134, 135, 152, 160, 161, 163, 182, 220, 286, 288, 290, 341, 360, 393, 425, 525, 526, 531, 574, 575, 576, 585, 591, 599, 604, 608, 611, 620, 621, 623, 626], "quantizelinear": [38, 96, 583], "make_dquant_nod": 38, "dequantizelinear": [38, 96, 583], "is_b_transpos": 38, "wheter": 38, "inuput": 38, "transpos": [38, 67, 134, 160, 201, 237, 239, 241, 286, 625], "split_shared_bia": 38, "float_to_float16": 38, "float16": [38, 577], "float_to_bfloat16": 38, "bfloat16": [38, 592, 594, 602, 621], "cast_tensor": 38, "remove_init_from_model_input": 38, "collate_pr": 38, "quantize_data_with_scale_zero": 38, "zero_point": [38, 160, 242, 309], "To": [38, 160, 163, 249, 281, 286, 290, 297, 312, 486, 526, 574, 577, 581, 583, 592, 595, 598, 604, 606, 608, 609, 619, 621, 622, 626, 628], "pack": [38, 55], "comput": [38, 41, 56, 61, 62, 99, 116, 142, 147, 154, 211, 238, 245, 246, 247, 249, 250, 251, 253, 259, 272, 275, 276, 294, 295, 297, 298, 299, 300, 301, 331, 341, 551, 580, 591, 592, 594, 605, 616, 617, 620, 626], "when": [38, 47, 58, 61, 64, 97, 116, 140, 160, 161, 164, 169, 184, 185, 190, 193, 194, 195, 198, 201, 222, 223, 231, 232, 233, 237, 246, 247, 259, 267, 272, 286, 287, 288, 293, 294, 295, 309, 313, 324, 331, 494, 496, 509, 513, 525, 528, 551, 574, 576, 577, 602, 604, 605, 608, 612, 616, 617, 620, 625, 626], "uint8": [38, 169, 197, 234, 249, 297, 330, 531, 577, 585, 619, 620, 625, 628], "ab": [38, 158, 267, 288, 620], "np": [38, 97, 104, 133, 195, 198, 201, 237, 316, 581, 625], "sym": [38, 585, 628], "asym": [38, 585, 628], "calculate_scale_zp": 38, "quantize_data": 38, "necessari": [38, 154, 157, 238, 245, 525, 528, 593, 612, 623, 626], "trasnform": 38, "full": [38, 41, 184, 185, 186, 190, 195, 202, 222, 223, 224, 245, 326, 328, 341, 530, 574, 577, 584, 586, 589, 590, 612], "equat": [38, 251, 253, 299, 301, 620], "r": [38, 64, 135, 152, 261, 574, 589, 612, 615, 620, 629], "": [38, 40, 41, 50, 56, 64, 73, 96, 97, 99, 104, 116, 133, 135, 136, 140, 152, 160, 161, 165, 166, 169, 174, 183, 186, 200, 201, 202, 204, 205, 206, 212, 221, 224, 236, 237, 245, 251, 259, 261, 267, 286, 288, 289, 293, 299, 300, 301, 302, 306, 313, 317, 324, 341, 394, 425, 481, 482, 525, 528, 579, 581, 585, 588, 592, 599, 602, 604, 608, 611, 614, 615, 616, 617, 618, 619, 620, 622, 623, 628], "z": [38, 579], "real": [38, 39, 187, 204, 205, 225, 581, 618, 620], "origin": [38, 39, 96, 136, 147, 148, 150, 160, 161, 164, 184, 201, 202, 222, 237, 245, 258, 267, 272, 273, 275, 276, 277, 278, 283, 286, 287, 288, 289, 317, 321, 330, 341, 344, 526, 577, 599, 616, 617, 620, 625, 626, 628], "quantize_data_per_channel": 38, "tensor_valu": 38, "scale_valu": 38, "zo_valu": 38, "dequantize_data_with_scale_zero": 38, "sacal": 38, "dequantize_data": 38, "valueinfo": 38, "tensor_nam": [38, 140, 309, 310, 311], "new_dtyp": 38, "quantizedvalu": 38, "new_quantized_nam": 38, "scale_nam": 38, "zero_point_nam": 38, "quantized_value_typ": 38, "quint8": 38, "linearli": 38, "intial": 38, "quantizediniti": 38, "quantized_data": 38, "quantizationmod": 38, "quantizedvaluetyp": 38, "quantformat": [38, 242], "quantize_nparrai": 38, "low": [38, 40, 41, 172, 173, 187, 188, 225, 226, 244, 245, 254, 291, 302, 313, 531, 575, 577, 581, 592, 618, 620, 626], "high": [38, 187, 188, 225, 226, 315, 577, 589, 618, 626], "attribute_to_kwarg": 38, "attribut": [38, 56, 77, 96, 97, 98, 99, 104, 116, 133, 147, 154, 166, 211, 291, 313, 331, 412, 413, 417, 477, 494, 531, 576, 585, 587, 619, 628], "kwarg": [38, 39, 41, 96, 99, 116, 117, 118, 119, 120, 121, 122, 123, 126, 127, 129, 131, 169, 186, 195, 198, 199, 201, 205, 206, 209, 224, 237, 244, 245, 255, 261, 267, 278, 283, 289, 291, 292, 293, 300, 301, 302, 303, 304, 305, 307, 308, 309, 310, 311, 313, 326, 327, 329, 331, 335, 337, 338, 340, 341, 346, 348, 350, 351, 352, 353, 363, 365, 366, 368, 370, 373, 374, 379, 576], "make_nod": [38, 96], "find_by_nam": 38, "item_list": 38, "find": [38, 61, 62, 64, 96, 99, 140, 173, 253, 269, 270, 300, 301, 309, 316, 324, 341, 442, 512, 530, 531, 574, 597, 604, 608, 611, 612, 616, 623, 624, 626], "item": [38, 164, 166, 200, 236, 287, 324, 326, 328, 394, 482, 515, 581, 626], "get_smooth_scales_per_op": 38, "input_tensors_2_weight": 38, "input_tensors_2_weights_nod": 38, "one": [38, 41, 96, 103, 104, 109, 126, 147, 160, 163, 195, 198, 201, 202, 211, 237, 245, 246, 249, 252, 253, 255, 258, 286, 289, 290, 294, 297, 300, 301, 315, 324, 490, 528, 531, 551, 574, 579, 580, 581, 585, 586, 588, 589, 591, 592, 594, 595, 599, 600, 602, 604, 605, 608, 611, 612, 613, 614, 616, 617, 619, 620, 622, 625, 626], "mul": [38, 48, 59, 60, 61, 63, 64, 73, 119, 122, 151, 583], "correspond": [38, 41, 116, 142, 161, 184, 222, 246, 249, 253, 286, 288, 292, 294, 297, 300, 301, 316, 324, 334, 531, 551, 585, 616, 617, 619, 620, 623, 626], "paper": [38, 145, 267, 579, 616, 617], "get_smooth_scales_per_input": 38, "insert_smooth_mul_op_per_input": 38, "inupt": 38, "new_init_tensor": 38, "new_added_mul_nod": 38, "adjust_weights_per_op": 38, "adjust": [38, 160, 261, 602, 620], "adjustd": 38, "adjust_weights_per_input": 38, "insert_smooth_mul_op_per_op": 38, "befor": [38, 101, 103, 116, 151, 154, 158, 160, 161, 162, 163, 184, 211, 222, 238, 239, 242, 245, 277, 278, 283, 286, 288, 289, 290, 321, 331, 382, 526, 574, 577, 579, 580, 581, 584, 585, 589, 606, 609, 616, 620, 623, 624, 626], "name_2_nod": 38, "trt_env_setup": 38, "environ": [38, 153, 202, 293, 444, 476, 477, 485, 509, 525, 574, 575, 604, 608, 611, 626], "variabl": [38, 116, 153, 162, 186, 202, 224, 245, 254, 260, 302, 310, 316, 484, 509, 574, 589, 617, 626], "tensorrt": 38, "provid": [38, 61, 62, 96, 99, 104, 116, 172, 173, 195, 198, 201, 211, 233, 235, 237, 244, 245, 249, 258, 267, 278, 283, 291, 292, 297, 302, 313, 331, 335, 337, 405, 425, 431, 481, 490, 515, 528, 530, 531, 574, 575, 576, 580, 581, 582, 583, 588, 589, 592, 593, 594, 598, 602, 605, 611, 612, 616, 619, 620, 624, 626, 628, 629], "get_ops_recurs": 39, "prefix": [39, 140, 141, 146, 153, 202, 245, 246, 293, 294, 509, 594, 599, 624], "graph_info": [39, 41, 303, 304, 305, 309, 310, 311], "templateadaptor": 39, "tampl": 39, "yaml": [39, 40, 41, 153, 164, 166, 172, 173, 184, 186, 202, 211, 222, 224, 238, 244, 245, 255, 256, 257, 268, 269, 278, 283, 291, 292, 293, 302, 340, 341, 342, 346, 347, 348, 349, 350, 352, 353, 355, 356, 440, 442, 449, 454, 458, 461, 464, 496, 507, 531, 587, 591, 613, 616, 619, 624, 625], "file": [39, 99, 104, 133, 140, 150, 164, 165, 172, 173, 184, 185, 186, 189, 190, 195, 198, 200, 201, 207, 210, 222, 223, 224, 227, 236, 237, 238, 242, 244, 245, 249, 255, 256, 257, 258, 259, 261, 268, 269, 278, 283, 287, 289, 291, 292, 297, 302, 311, 312, 313, 337, 340, 341, 346, 347, 348, 349, 350, 351, 352, 353, 405, 442, 451, 455, 465, 481, 488, 489, 495, 496, 497, 509, 513, 517, 519, 521, 522, 528, 531, 574, 581, 584, 587, 590, 591, 593, 597, 606, 609, 610, 611, 612, 613, 616, 619, 624, 625], "is_fused_modul": [39, 142, 147], "_propagate_qconfig_help": [39, 142, 147], "detect": [39, 142, 147, 249, 253, 297, 300, 301, 306, 425, 428, 437, 496, 527, 574, 594, 601, 602], "calculate_hessian_trac": 39, "fp32_model": [39, 41, 140, 142, 147, 239, 242, 311, 321, 324, 341, 531], "q_model": [39, 142, 148, 150, 245, 255, 313, 324, 337, 527, 530, 576, 577, 581, 583, 586, 587, 591, 593, 620, 621], "criterion": [39, 41, 142, 154, 156, 157, 158, 160, 161, 169, 205, 208, 238, 245, 293, 464, 504, 549, 579, 580, 583, 616, 617, 620, 626, 628], "enable_act": [39, 142], "hessian": [39, 142, 319, 626], "trace": [39, 141, 142, 146, 147, 239, 242, 313, 319, 527, 534, 601, 626], "loss": [39, 116, 154, 155, 169, 173, 203, 211, 244, 245, 253, 278, 283, 291, 293, 301, 312, 313, 331, 579, 580, 581, 582, 586, 591, 592, 602, 614, 616, 617, 620, 626, 628], "gradient": [39, 116, 158, 272, 273, 288, 311, 588, 616, 617, 629], "amap": 39, "enabl": [39, 41, 103, 142, 161, 169, 267, 288, 293, 484, 574, 581, 589, 592, 594, 596, 599, 600, 602, 615, 616, 617, 618, 626], "error": [39, 99, 142, 246, 253, 259, 292, 294, 301, 321, 335, 338, 480, 508, 551, 591, 595, 626], "op_nam": [39, 147, 165, 169, 293, 317, 321, 324, 326, 328, 329, 396, 401, 402, 410, 411, 616, 624], "hessian_trac": [39, 142], "calib_it": [39, 145, 148, 150], "force_re_smooth": 39, "calib": 39, "now": [39, 145, 201, 237, 318, 494, 527, 528, 577, 581, 602, 619, 625, 626], "pytorchadaptor": 39, "objext": 39, "number": [39, 61, 62, 99, 142, 147, 148, 150, 160, 161, 163, 174, 182, 185, 190, 195, 197, 198, 201, 212, 220, 223, 234, 237, 250, 251, 253, 260, 269, 272, 277, 286, 298, 299, 300, 301, 316, 334, 341, 428, 484, 494, 497, 574, 575, 577, 581, 591, 616, 620, 623, 625, 626], "summari": [39, 97, 153, 202, 245, 275, 293, 331, 574, 606, 609, 615, 624], "optimizer_tupl": [39, 41], "criterion_tupl": [39, 41], "hook": [39, 41, 142, 154, 155, 157, 172, 203, 210, 211, 238, 245, 278, 283, 311, 324, 334, 579, 580, 616, 624], "optim": [39, 41, 42, 43, 47, 51, 54, 55, 57, 68, 69, 73, 74, 79, 82, 85, 86, 87, 88, 92, 96, 110, 112, 133, 134, 154, 158, 161, 162, 165, 169, 205, 211, 238, 244, 245, 259, 271, 277, 288, 289, 291, 293, 311, 313, 316, 324, 331, 332, 335, 342, 344, 348, 350, 352, 369, 373, 374, 380, 382, 383, 384, 385, 386, 387, 388, 390, 391, 393, 394, 396, 397, 398, 399, 400, 403, 404, 417, 471, 477, 478, 488, 494, 497, 500, 504, 511, 516, 528, 530, 549, 575, 579, 580, 581, 585, 586, 588, 589, 593, 594, 596, 598, 599, 602, 605, 615, 616, 618, 619, 620, 621, 623, 624, 626, 628], "It": [39, 47, 56, 73, 96, 160, 172, 173, 210, 245, 251, 253, 258, 259, 270, 286, 291, 292, 299, 301, 302, 313, 316, 317, 318, 321, 324, 331, 337, 531, 574, 579, 597, 600, 605, 611, 612, 616, 617, 620, 623, 626, 628], "other": [39, 61, 62, 64, 96, 133, 145, 151, 183, 221, 251, 292, 299, 310, 337, 486, 490, 513, 525, 526, 527, 574, 585, 588, 589, 590, 593, 613, 615, 616, 620, 625, 626, 629], "is_fused_child": 39, "_post_eval_hook": [39, 624], "is_fused_op": 39, "is_last_fused_child": 39, "last": [39, 41, 86, 147, 158, 160, 172, 174, 212, 267, 286, 312, 324, 465, 574, 592, 594, 596, 601, 605, 620], "q_capabl": 39, "get_non_quant_modul": 39, "model_kwarg": 39, "non_quant_modul": 39, "custom": [39, 96, 109, 153, 258, 292, 312, 340, 383, 388, 575, 579, 580, 594, 616, 623], "keyword": 39, "custom_non_quant_dict": 39, "pytorch_ipexadaptor": 39, "intel": [39, 160, 205, 208, 239, 245, 252, 253, 286, 289, 293, 300, 301, 320, 326, 337, 476, 489, 523, 525, 526, 528, 529, 531, 576, 577, 578, 579, 580, 582, 583, 585, 586, 590, 592, 593, 594, 599, 601, 602, 613, 614, 615, 616, 618, 620, 621, 622, 624, 626, 628], "extens": [39, 292, 431, 496, 528, 530, 531, 585, 588, 589, 592, 593, 595, 600, 601, 602, 606, 609, 610, 618, 626, 628], "ipex": [39, 147, 311, 588, 596, 600, 601, 629], "unspport": 39, "best": [39, 96, 154, 157, 173, 195, 198, 201, 237, 238, 244, 245, 256, 257, 268, 269, 291, 312, 313, 315, 321, 324, 525, 528, 589, 594, 600, 611, 613, 620, 625, 626], "No": [39, 584, 615, 618], "pytorch_fxadaptor": 39, "fx": [39, 147, 313, 322, 588, 600, 601, 618, 620, 621, 629], "prepare_sub_graph": 39, "sub_module_list": 39, "fx_op_cfg": 39, "is_qat": [39, 146], "example_input": [39, 147, 169, 239, 242, 311, 583], "method": [39, 96, 98, 104, 116, 133, 135, 147, 162, 177, 182, 183, 184, 186, 190, 193, 194, 195, 198, 201, 204, 205, 215, 220, 221, 222, 224, 228, 231, 232, 233, 235, 237, 245, 252, 253, 258, 261, 267, 269, 270, 271, 281, 291, 300, 301, 303, 304, 326, 328, 334, 335, 337, 338, 481, 486, 490, 508, 527, 528, 530, 577, 579, 580, 591, 614, 616, 617, 620, 621, 625, 626], "sub": [39, 60, 61, 62, 80, 104, 153, 202, 242, 245, 261, 293, 324, 528, 626], "recurs": [39, 96, 97, 326, 328, 341], "traceabl": [39, 527], "qconfigmap": 39, "prepare_fx": 39, "dir": [39, 147, 184, 222, 340, 577, 584, 587], "convert_sub_graph": 39, "fuse_fx_model": 39, "approach": [39, 165, 169, 245, 256, 257, 258, 267, 268, 269, 293, 324, 358, 497, 504, 527, 528, 576, 577, 579, 588, 599, 611, 618, 619, 626, 628], "graphmodul": [39, 147, 527, 621], "torch": [39, 141, 142, 143, 144, 146, 147, 151, 155, 160, 165, 169, 203, 239, 242, 253, 261, 265, 267, 293, 301, 302, 311, 313, 337, 527, 530, 532, 579, 581, 583, 592, 593, 594, 599, 602, 620, 624], "fused_model": 39, "calculate_op_sensit": [39, 41], "output_op_nam": [39, 41], "confidence_batch": [39, 41, 147, 626], "requantize_cfg": [39, 41, 147], "inc": [39, 201, 237, 337, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 389, 390, 391, 392, 504, 525, 530, 594, 601, 611, 618, 619, 622], "switch": [39, 79, 594, 624], "stage": [39, 41, 86, 314, 315, 322, 489, 579, 624, 626], "re": [39, 41, 316, 337, 589, 611], "sort": [39, 41, 96, 133, 309, 315, 321, 405, 626], "sensit": [39, 41, 158, 272, 288, 588, 616, 617], "ops_lst": 39, "pytorchqueri": 39, "3": [40, 64, 73, 109, 140, 186, 190, 195, 198, 201, 224, 228, 233, 235, 237, 249, 261, 297, 486, 527, 528, 530, 574, 576, 577, 579, 581, 583, 585, 586, 589, 591, 592, 594, 598, 602, 604, 608, 613, 616, 619, 620, 623, 625, 626, 629], "conv2d": [40, 46, 53, 54, 55, 59, 60, 65, 66, 73, 119, 129, 135, 145, 585, 624, 626], "get_fuse_pattern": [40, 41], "fusion": [40, 52, 53, 55, 58, 61, 62, 63, 64, 67, 72, 88, 90, 103, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 131, 132, 527, 531, 585], "everi": [40, 61, 62, 64, 96, 160, 161, 286, 288, 289, 531, 599, 604, 608, 616, 617, 626], "set_quantization_config": 40, "organ": [40, 574, 628], "granular": [40, 531, 585, 588, 597, 616, 628], "etc": [40, 153, 154, 157, 200, 211, 236, 238, 244, 245, 251, 259, 260, 278, 283, 291, 293, 299, 302, 313, 340, 579, 588, 623, 626], "get_mixed_precision_combin": [40, 41], "unsupported_precis": 40, "hardwar": [40, 484, 526, 530, 531, 579, 588, 592, 611, 615, 616, 617, 618, 619], "user": [40, 104, 134, 153, 154, 161, 164, 172, 173, 186, 189, 193, 194, 195, 201, 202, 208, 211, 224, 227, 231, 232, 233, 237, 244, 245, 258, 260, 278, 283, 289, 291, 292, 293, 302, 312, 313, 317, 324, 331, 341, 480, 527, 528, 531, 541, 575, 579, 580, 585, 588, 591, 592, 593, 594, 595, 596, 598, 599, 600, 602, 605, 611, 613, 614, 616, 618, 620, 621, 622, 624, 625, 626, 630], "tensorflowadaptor": 41, "stock": [41, 600], "spr": 41, "graphdef": [41, 50, 51, 54, 55, 57, 61, 62, 64, 68, 73, 79, 85, 86, 87, 88, 104, 126, 133, 134, 140, 310, 474, 593], "could": [41, 61, 62, 145, 151, 160, 172, 173, 186, 224, 292, 302, 313, 324, 331, 525, 527, 580, 614, 616, 617, 620], "graph_def": [41, 47, 104, 140, 239, 241, 302, 310, 313, 439, 474, 475], "frozen": [41, 50, 302, 310, 313, 433, 436, 574, 593], "pb": [41, 153, 169, 302, 310, 313, 433, 436, 447, 530, 575, 581, 586, 593, 624, 629], "ckpt": [41, 140, 302, 310, 313, 629], "savedmodel": [41, 302, 310, 313, 629], "folder": [41, 140, 186, 191, 224, 229, 302, 313, 340, 577, 599, 604, 608, 624], "callback": [41, 157, 278, 283, 331, 332, 334, 335, 512, 527, 614, 616, 620], "on_epoch_begin": [41, 154, 161, 211, 245, 272, 275, 276, 277, 278, 283, 288, 289, 331, 334, 579, 580, 614, 616], "on_epoch_end": [41, 154, 161, 211, 245, 272, 275, 276, 277, 278, 283, 288, 289, 331, 334, 579, 580, 614, 616], "larger": [41, 160], "better": [41, 90, 172, 173, 270, 302, 312, 313, 323, 331, 580, 591, 592, 616, 617, 618, 620, 623, 626], "tf": [41, 99, 110, 116, 140, 183, 184, 185, 186, 190, 195, 198, 201, 221, 222, 223, 224, 237, 308, 310, 344, 574, 581, 593, 618, 621, 625], "compat": [41, 75, 140, 249, 258, 297, 310, 581, 593, 606, 609, 611, 622], "definit": [41, 104, 177, 182, 215, 220, 410, 423, 432, 481, 512], "inspect_weight_and_bia": 41, "node_list": 41, "graph_node_name_map": [41, 140], "bias": 41, "fused_node_map": 41, "pattern_map": 41, "between": [41, 135, 142, 152, 155, 161, 195, 198, 201, 203, 237, 250, 252, 253, 258, 260, 261, 298, 300, 301, 396, 508, 512, 527, 531, 579, 583, 588, 591, 602, 617, 620, 622, 623, 625, 626], "sequenc": [41, 57, 73, 99, 160, 184, 195, 198, 200, 201, 222, 236, 237, 246, 247, 251, 286, 294, 295, 299, 309, 531, 551, 577, 585, 617, 625], "val": [41, 96, 140, 164, 186, 189, 224, 227, 287], "seq": 41, "fused_mapping_revers": 41, "fused_map": 41, "inspect_activ": 41, "local": [41, 160, 161, 286, 324, 337, 341, 356, 388, 393, 406, 426, 574, 604, 608, 617, 623], "actual": [41, 96, 253, 301, 312, 581], "4": [41, 47, 73, 153, 160, 169, 193, 194, 195, 196, 197, 198, 201, 231, 232, 233, 234, 235, 237, 246, 247, 249, 294, 295, 297, 317, 486, 525, 531, 551, 574, 575, 581, 582, 584, 585, 586, 588, 589, 591, 599, 615, 616, 625, 626, 629], "tensorflowbasemodel": [41, 310, 437], "start": [41, 161, 195, 198, 201, 237, 246, 249, 260, 294, 297, 309, 312, 314, 317, 489, 509, 589, 625, 626, 630], "quantizedv2": 41, "move": [41, 72, 527, 619, 622], "quantizedconv2d": 41, "qat_convert": 41, "quantize_recip": [41, 109, 110], "kera": [41, 64, 110, 116, 208, 305, 310, 417, 424, 434, 581, 593, 601, 602, 629], "expect": [41, 96, 116, 186, 224, 316, 344, 466, 489, 525, 526, 584, 611, 620, 626], "sequenti": [41, 182, 220, 292, 315, 318, 626], "decid": [41, 109, 110, 169, 247, 288, 293, 295, 405, 531, 622, 626], "fake": [41, 107, 145, 151, 620], "converted_model": [41, 169, 293, 302, 592], "diagnosis_help": [41, 531], "quan_model": [41, 140], "diagnosi": [41, 140, 293, 385, 388, 394, 417, 477, 506, 512], "get_output_op_nam": 41, "qmodel": [41, 142], "oupur": 41, "mse": [41, 147, 169, 253, 293, 301, 320, 396, 402, 574, 591, 619, 622], "backup": 41, "fallen": 41, "denot": 41, "tensorflow_itexadaptor": 41, "itex": [41, 103, 239, 241], "tensorflowqueri": [41, 531], "performance_onli": [41, 42, 43, 101, 125, 130, 139, 506], "itex_mod": [41, 42, 73, 83, 101, 125, 130], "quant_mod": [41, 324, 326, 328], "get_bf16_pattern": 41, "get_eightbit_pattern": 41, "qdq_enabl": [41, 42], "eightbit": [41, 624], "generate_internal_pattern": 41, "translat": [41, 246, 247, 258, 261, 264, 266, 294, 295, 551], "intern": [41, 96, 97, 104, 142, 265, 326, 328, 480, 576, 577, 617], "express": [41, 246, 294, 525], "graphconvert": 42, "qt_config": 42, "recip": [42, 109, 169, 239, 242, 244, 245, 291, 293, 313, 324, 583, 626], "int8_sequ": 42, "fp32_op": [42, 44, 101, 104], "bf16_op": [42, 44, 101, 104, 621], "fake_qu": [42, 82, 101, 125, 130], "new_api": [42, 43, 65, 66, 71, 73, 86, 93, 125, 130, 135], "use_bf16": [42, 43, 619], "fp32_frozen_graph": 42, "requantizeop": [42, 43], "so": [42, 43, 99, 116, 195, 198, 201, 237, 288, 331, 337, 527, 531, 584, 588, 591, 597, 599, 620, 621, 624, 625], "self": [42, 57, 86, 169, 245, 249, 278, 288, 293, 297, 312, 316, 324, 509, 531, 574, 576, 577, 588, 591, 623, 624, 626], "empti": [42, 96, 109, 249, 297, 316, 597], "without": [42, 43, 84, 96, 104, 140, 161, 201, 237, 249, 288, 297, 330, 496, 525, 574, 576, 579, 581, 591, 602, 616, 618, 619, 620, 626], "bf16_node": [42, 43], "quantize_with_qdq_pattern": 42, "newapi": [42, 88], "graphconverterwithoutcalib": 43, "recover_config": 43, "convert_without_calib": 43, "quantize_without_calib": 43, "rewrit": [44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 100, 101, 102, 103], "bf16convert": [44, 621], "graphrewriterbas": [44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 65, 66, 67, 68, 69, 71, 72, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 101, 102, 103], "do_transform": [44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 74, 75, 76, 77, 78, 79, 80, 82, 83, 85, 86, 87, 88, 90, 91, 92, 93, 94, 101, 102, 103, 118, 125, 126, 130, 135, 136, 138, 139], "biasadd": [46, 53, 58, 60, 73, 103, 119, 120, 122, 129, 131, 585], "convertaddtobiasaddoptim": 46, "addv2": [46, 62, 63, 64, 119, 122, 585], "layout": 47, "convertlayoutoptim": 47, "nchw": [47, 134], "nhwc": [47, 61, 62, 97, 134], "abov": [47, 96, 249, 297, 531, 616], "leakyrelu": [48, 117, 119, 121, 122, 127], "convertleakyreluoptim": 48, "below": [48, 60, 61, 62, 68, 73, 292, 315, 317, 322, 526, 527, 530, 531, 574, 576, 579, 581, 587, 591, 594, 596, 604, 605, 608, 611, 613, 614, 616, 619, 620, 623, 624, 626], "subgraph": [48, 56, 60, 61, 62, 64, 96, 99, 146, 583], "coeffici": [48, 259, 617], "less": [48, 73, 140, 341, 575, 579, 616], "than": [48, 56, 140, 184, 195, 198, 201, 222, 237, 249, 297, 312, 341, 528, 530, 575, 577, 587, 591, 613, 614, 616, 617, 620, 623, 625, 626], "small": [48, 61, 62, 63, 249, 297, 319, 528, 574, 626], "nan": 49, "random": [49, 133, 140, 169, 195, 197, 198, 201, 234, 237, 258, 271, 293, 316, 320, 335, 341, 506, 526, 528, 619, 625, 628], "convertnantorandom": 49, "const": [49, 50, 57, 58, 61, 62, 64, 76, 79, 91, 92, 96, 97, 104, 293, 361, 372, 375, 382, 388, 390, 391, 395, 477, 485, 495], "consist": [49, 57, 267, 526, 527, 574, 583, 626], "placehold": [50, 96, 182, 220], "convertplaceholdertoconst": 50, "renam": [50, 75, 96, 267, 622], "placeholderwithdefault": 50, "constant": [50, 56, 73, 96, 97, 99, 104, 133, 239, 242, 293, 309, 311, 316, 320, 326, 335, 478, 576, 585, 625], "help": [50, 96, 210, 255, 309, 358, 496, 593, 594, 600, 611, 626], "simplifi": [50, 594, 605, 611], "input_graph_def": [50, 51, 54, 55, 57, 61, 62, 64, 68, 79, 104, 133], "nodes_to_convert": 50, "strtobool": 50, "val_str": 50, "equival": [50, 77, 258], "rerewrit": 51, "dequantizecastoptim": 51, "b16": 51, "redund": [51, 85, 87, 126], "dilat": 52, "contract": 52, "dilatedcontract": 52, "spacetobatchnd": 52, "batchtospacend": 52, "inject": 53, "dummi": [53, 187, 188, 225, 226, 243, 253, 301, 388, 392, 498, 530, 574, 577, 586, 591], "injectdummybiasaddoptim": 53, "miss": [53, 96, 354, 616, 620], "behind": 53, "them": [53, 56, 104, 184, 222, 527, 576, 585, 587, 614, 616, 626], "expanddim": 54, "expanddimsoptim": 54, "next": [54, 144, 163, 177, 215, 243, 269, 290, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 528, 574, 619, 626], "featch": 55, "fetchweightfromreshapeoptim": 55, "fetch": [55, 147, 150, 177, 215, 249, 297, 577], "fold": [56, 57, 61, 62, 73, 239, 242, 311, 585], "batchnorm": [56, 61, 115, 527], "foldbatchnormnodesoptim": 56, "scale_after_norm": 56, "batchnormwithglobalnorm": 56, "nodedef": [56, 61, 62, 64, 104, 133, 136, 474], "normal": [56, 61, 62, 64, 195, 198, 201, 237, 251, 299, 496, 613, 625], "convolut": [56, 61, 62, 579, 616, 618], "multipl": [56, 61, 62, 109, 161, 170, 171, 175, 176, 184, 185, 187, 188, 189, 190, 191, 195, 198, 201, 208, 213, 214, 216, 222, 223, 225, 226, 227, 228, 229, 233, 235, 237, 254, 272, 288, 302, 303, 304, 306, 312, 315, 324, 481, 575, 577, 583, 614, 616, 623, 626], "dynam": [56, 104, 174, 212, 239, 242, 292, 311, 326, 328, 349, 531, 576, 579, 583, 588, 594, 599, 600, 601, 602, 605, 611, 618, 626, 629], "onc": [56, 104, 140, 145, 163, 208, 290, 315, 574, 576, 611, 616, 617, 618, 626, 629], "final": [56, 96, 160, 161, 288, 488, 597, 613, 616, 617, 620, 622, 626], "becom": [56, 531, 583, 617], "That": [56, 574], "mean": [56, 61, 62, 64, 145, 160, 174, 195, 197, 198, 201, 212, 234, 237, 249, 251, 253, 259, 261, 267, 286, 297, 299, 300, 301, 309, 312, 321, 527, 576, 581, 585, 591, 597, 616, 617, 620, 625, 626, 628], "opportun": [56, 61, 62], "reduc": [56, 61, 62, 160, 281, 531, 580, 592, 611, 612, 617, 618, 620, 621, 626, 628], "down": [56, 605], "addit": [56, 62, 64, 147, 172, 331, 481, 574, 579, 605, 622], "rather": [56, 587], "more": [56, 96, 133, 134, 140, 145, 151, 160, 172, 195, 198, 201, 237, 249, 265, 267, 286, 297, 324, 528, 529, 530, 574, 577, 579, 581, 586, 588, 589, 591, 592, 594, 602, 606, 609, 613, 614, 616, 617, 621, 626, 629], "expens": [56, 579, 626], "bake": 56, "identifi": [56, 61, 62, 64, 249, 297, 310, 337], "typic": [56, 109, 116, 245, 255, 292, 528, 530, 580, 582, 586, 616, 617], "simpler": 56, "form": [56, 61, 62, 64, 75, 249, 251, 297, 299, 388, 390, 489, 574, 579, 611], "spot": 56, "fusedbatchnorm": [56, 61, 75], "fusedbatchnormv3": [56, 117, 127], "_fusedbatchnormex": 56, "extend": [56, 61, 62], "futur": [56, 151, 172, 173, 204, 205, 588, 602], "newer": [56, 61, 62], "style": [56, 177, 191, 215, 229, 526, 577, 587], "rais": [56, 61, 62, 64, 75, 99, 104, 155, 160, 161, 164, 203, 246, 249, 252, 253, 286, 287, 288, 294, 297, 300, 301, 302, 316, 496, 509, 530, 551, 616, 617], "valueerror": [56, 61, 62, 64, 75, 104, 246, 249, 253, 294, 297, 301, 551, 584], "If": [56, 61, 62, 64, 68, 75, 97, 104, 153, 172, 173, 186, 195, 198, 201, 224, 237, 249, 261, 286, 287, 288, 297, 302, 313, 314, 331, 526, 527, 574, 575, 577, 581, 583, 589, 590, 591, 592, 597, 605, 606, 609, 611, 613, 620, 623, 624, 625, 626], "badli": [56, 61, 62, 64, 75], "duplic": [56, 61, 62, 64, 92, 102, 134, 316], "graphfoldconstantoptim": 57, "supported_op_typ": 57, "check_all_fold": 57, "been": [57, 160, 161, 200, 236, 246, 260, 286, 288, 294, 526, 528, 551, 574, 579, 592, 611], "complet": [57, 326, 328, 531, 574, 626, 628, 629], "check_const_input": 57, "node_nam": [57, 61, 62, 64, 73, 96, 104, 126, 133, 136, 140, 242, 309, 310, 376, 474], "fusebiasaddandaddoptim": 58, "columnwis": 59, "fusecolumnwisemuloptim": 59, "depthwiseconv2dn": [59, 65, 66, 119, 129, 585], "math": [60, 620], "fuseconvwithmathoptim": 60, "elimin": 60, "realdiv": [60, 63], "decompos": [61, 62], "fusedecomposedbnoptim": 61, "some": [61, 62, 109, 172, 184, 211, 222, 245, 287, 324, 496, 574, 577, 589, 591, 613, 616, 617, 620, 621, 624, 626], "normalizatin": [61, 62], "via": [61, 62, 116, 244, 245, 278, 283, 291, 513, 525, 581, 588, 594, 611], "group": [61, 62, 162, 273, 413, 588, 616, 617, 624, 625, 626, 629], "instead": [61, 62, 166, 183, 221, 341, 597, 599, 602], "singl": [61, 62, 119, 120, 126, 128, 129, 158, 163, 177, 184, 200, 201, 215, 222, 236, 237, 249, 258, 260, 288, 290, 297, 316, 377, 394, 413, 481, 515, 527, 577, 589, 616, 617], "made": [61, 62, 64, 259, 261, 319, 531, 620, 622, 626], "those": [61, 62, 68, 321, 341, 579, 580, 587, 614, 616, 617, 620, 626], "further": [61, 62, 64, 525, 592, 593, 594, 596, 605, 611], "recogn": [61, 62, 246, 294], "seen": [61, 62, 341, 531], "also": [61, 62, 160, 183, 186, 190, 195, 201, 221, 224, 228, 233, 237, 246, 294, 312, 313, 322, 323, 526, 528, 531, 551, 574, 576, 582, 586, 588, 591, 594, 599, 604, 605, 608, 611, 612, 613, 616, 620, 621, 626], "attempt": [61, 62, 337], "multipli": 61, "rsqrt": [61, 62], "varianc": [61, 135, 152], "epsilon": [61, 628], "gamma": [61, 62, 64], "OR": 61, "mul_0": 61, "appli": [61, 69, 83, 84, 88, 90, 92, 93, 94, 107, 117, 118, 119, 120, 121, 122, 125, 127, 128, 129, 130, 131, 135, 139, 154, 157, 160, 161, 211, 245, 247, 275, 286, 288, 295, 311, 324, 525, 574, 594, 596, 602, 611, 614, 616, 617, 620, 621, 623, 626, 628], "mul_1": 61, "insid": [61, 249, 297, 579, 580, 612, 616, 626], "end": [61, 96, 104, 140, 154, 157, 161, 184, 195, 198, 200, 201, 211, 222, 236, 237, 245, 258, 272, 276, 277, 288, 289, 312, 315, 331, 531, 579, 580, 585, 589, 605, 613, 616, 617, 624, 625, 626], "mul_3": 61, "batchnorma": 61, "node_name_from_input": [61, 62, 64, 104, 133, 136], "strip": [61, 62, 64, 73, 77, 78, 140, 624], "off": [61, 62, 64, 526], "port": [61, 62, 64, 133, 509, 513, 574], "underli": [61, 62, 64, 259], "node_from_map": [61, 62, 64], "node_map": [61, 62, 64], "pull": [61, 62, 64, 489], "def": [61, 62, 64, 126, 169, 172, 173, 302, 313, 331, 527, 531, 576, 577, 579, 580, 581, 591, 620, 624, 626], "entri": [61, 62, 64, 126, 142, 145, 208, 244, 292, 359, 402, 405, 488, 496, 590], "index": [61, 62, 64, 96, 99, 109, 116, 153, 177, 182, 186, 190, 195, 202, 215, 220, 224, 228, 233, 245, 270, 293, 309, 312, 341, 513, 577, 591, 612], "want": [61, 62, 64, 96, 104, 154, 182, 184, 220, 222, 288, 317, 331, 527, 531, 574, 577, 581, 589, 591, 592, 599, 611, 612, 613, 623, 624, 626], "isn": [61, 62, 64, 104], "present": [61, 62, 64, 574, 618], "values_from_const": [61, 62, 64, 104], "node_def": [61, 62, 64, 104], "extract": [61, 62, 64, 104, 186, 224, 330, 515, 577], "access": [61, 62, 64, 104, 116, 166, 337, 341, 480, 496, 509, 513, 574, 606, 609], "valid_reshape_input": [61, 62], "reshape_in0_ndef": [61, 62], "reshape_in1_ndef": [61, 62], "bypass_reshap": [61, 62], "input_node_map": [61, 62], "get_const_dim_count": [61, 62], "dimens": [61, 62, 99, 160, 176, 195, 198, 201, 214, 237, 261, 282, 316, 577, 579, 616, 625], "instancenorm": 62, "fusedecomposedinoptim": 62, "instanc": [62, 107, 109, 110, 116, 148, 150, 153, 172, 173, 184, 202, 222, 245, 250, 251, 253, 256, 268, 269, 272, 273, 275, 276, 277, 293, 298, 299, 301, 302, 313, 316, 324, 330, 331, 361, 400, 404, 428, 437, 504, 525, 527, 531, 574, 575, 596, 602, 628, 629], "search": [62, 64, 73, 96, 165, 172, 173, 244, 245, 246, 256, 257, 258, 260, 261, 268, 269, 270, 271, 291, 294, 313, 316, 318, 319, 323, 383, 384, 411, 530, 551, 560, 574, 586, 588, 591, 594, 595, 605, 618, 624, 626], "contraint": [62, 64], "ani": [62, 64, 96, 116, 133, 142, 238, 245, 249, 251, 267, 297, 299, 324, 326, 327, 337, 343, 344, 346, 348, 350, 351, 352, 353, 354, 355, 356, 358, 359, 361, 362, 364, 371, 372, 373, 374, 375, 376, 378, 381, 383, 384, 394, 396, 401, 402, 405, 407, 413, 422, 425, 428, 432, 435, 436, 437, 439, 442, 444, 447, 451, 455, 457, 460, 463, 466, 469, 474, 475, 481, 482, 484, 486, 488, 489, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 512, 513, 520, 521, 525, 526, 530, 574, 576, 581, 594, 599, 612, 623], "clang": 62, "x____________": 62, "mean1": 62, "fusedop": [62, 64], "_mklfusedinstancenorm": 62, "_mkllayernorm": [62, 64], "squareddiff": 62, "mean0": 62, "mul1": 62, "constx": 62, "mul2": 62, "mul0": 62, "gelu": [63, 122], "fusegeluoptim": 63, "sqrt": 63, "erf": 63, "samll": 64, "layernorm": [64, 267], "fuselayernormoptim": 64, "remap": 64, "smaller": [64, 195, 198, 201, 237, 579, 616, 617, 625], "case": [64, 68, 153, 183, 195, 198, 200, 201, 202, 221, 236, 237, 244, 245, 253, 278, 283, 291, 292, 301, 312, 313, 486, 490, 496, 574, 576, 579, 580, 581, 585, 587, 591, 595, 599, 611, 612, 613, 616, 618, 620, 622, 625, 628, 629], "fusedbatcnormv3": 64, "And": [64, 211, 245, 527, 575, 597], "restrict": [64, 616, 617, 623], "2d": 64, "3d": [64, 618], "fill": [64, 363, 365, 366, 368, 370, 373, 374, 379, 574, 611, 623, 625], "f": [64, 579, 581, 620], "u": [64, 96, 135, 152, 530, 594], "d": [64, 68, 258, 579, 587, 612, 617, 629], "c": [64, 68, 186, 224, 574, 577, 584, 589, 617, 626], "h": [64, 201, 237, 581, 625], "n": [64, 160, 185, 195, 198, 201, 223, 237, 247, 286, 295, 484, 577, 579, 616, 617, 625], "v": [64, 602, 611, 628], "fusepadwithconv2doptim": 65, "excluded_op_nam": [65, 66, 165, 169, 293, 616], "itex_qdq_mod": [65, 66], "conv3d": [65, 66, 119], "fusepadwithfp32conv2doptim": 66, "fusetransposereshapeoptim": 67, "cse": [68, 92], "graphcseoptim": 68, "introduc": [68, 526, 531, 583, 585, 616, 617, 620, 622, 626], "ident": [68, 73, 74, 104, 133, 160, 286, 525, 579], "three": [68, 164, 184, 222, 245, 278, 283, 289, 315, 527, 531, 574, 576, 583, 589, 592, 605, 614, 620, 621, 623, 624, 626], "child": [68, 97, 624], "b1": 68, "c1c2": 68, "d1": [68, 341], "c1": 68, "c2": 68, "bound": [68, 153, 201, 202, 237, 245, 249, 258, 293, 297, 316, 591, 625], "relu6": [68, 119, 122, 585], "multi": [68, 73, 153, 202, 245, 249, 260, 265, 267, 293, 297, 312, 322, 354, 528, 576, 577, 588, 613, 626], "elim": [68, 73], "grappler": [69, 585], "grappleroptim": 69, "input_output_nam": 69, "opt_cfg": 69, "python": [69, 116, 140, 186, 205, 224, 245, 249, 293, 297, 341, 444, 523, 526, 527, 574, 577, 581, 589, 596, 602, 605, 611, 618, 625], "wrapper": [69, 96, 97, 98, 99, 116, 141, 155, 183, 195, 198, 201, 203, 204, 205, 206, 207, 221, 233, 235, 237, 249, 253, 297, 300, 301, 304, 306, 310, 513, 521, 621], "leverag": [69, 528, 530, 579, 594, 611, 614, 620], "built": [69, 116, 170, 171, 175, 180, 184, 185, 190, 192, 194, 195, 197, 198, 201, 205, 206, 208, 213, 216, 218, 222, 223, 228, 230, 232, 233, 234, 235, 237, 292, 300, 301, 304, 308, 312, 313, 331, 528, 531, 577, 581, 604, 608, 613, 625, 626, 628], "convert_add_to_biasadd": [70, 81, 105], "convert_layout": [70, 81, 105], "convert_leakyrelu": [70, 81, 105], "convert_nan_to_random": [70, 81, 105], "convert_placeholder_to_const": [70, 81, 105], "dequantize_cast_optim": [70, 81, 105], "dilated_contract": [70, 81, 105], "dummy_biasadd": [70, 81, 105], "expanddims_optim": [70, 81, 105], "fetch_weight_from_reshap": [70, 81, 105], "fold_batch_norm": [70, 81, 105], "fold_const": [70, 81, 105], "fuse_biasadd_add": [70, 81, 105], "fuse_column_wise_mul": [70, 81, 105], "fuse_conv_with_math": [70, 81, 105], "fuse_decomposed_bn": [70, 81, 105], "fuse_decomposed_in": [70, 81, 105], "fuse_gelu": [70, 81, 105], "fuse_layer_norm": [70, 81, 105], "fuse_pad_with_conv": [70, 81, 105], "fuse_pad_with_fp32_conv": [70, 81, 105], "fuse_reshape_transpos": [70, 81, 105], "graph_cse_optim": [70, 81, 105], "grappler_pass": [70, 81, 105], "insert_print_nod": [70, 81, 105], "move_squeeze_after_relu": [70, 81, 105], "pre_optim": [70, 81, 105], "remove_training_nod": [70, 81, 105, 133], "rename_batch_norm": [70, 81, 105], "split_shared_input": [70, 81, 105, 133], "strip_equivalent_nod": [70, 81, 105, 140], "strip_unused_nod": [70, 81, 105, 140], "switch_optim": [70, 81, 105], "print": [71, 142, 253, 301, 311, 341, 574, 581, 591, 616, 626], "insertprintminmaxnod": 71, "pre_node_nam": 71, "post_node_nam": 71, "pass": [71, 73, 75, 96, 140, 153, 200, 236, 245, 265, 267, 278, 283, 289, 292, 341, 439, 495, 508, 509, 527, 531, 575, 577, 579, 580, 581, 583, 587, 591, 612, 616, 619, 620, 621, 628], "sampl": [71, 104, 142, 174, 177, 182, 184, 185, 186, 190, 195, 197, 198, 201, 212, 215, 220, 222, 223, 224, 228, 233, 234, 237, 252, 253, 270, 300, 301, 316, 372, 428, 497, 528, 530, 577, 582, 588, 612, 620, 625, 626, 628, 629], "squeez": [72, 527], "movesqueezeafterreluoptim": 72, "match": [72, 73, 96, 104, 116, 200, 236, 249, 250, 297, 298, 309, 579, 612], "pre": [73, 110, 134, 172, 173, 184, 222, 266, 302, 311, 313, 324, 331, 577, 579, 580, 592, 599, 616, 617, 618, 620, 624, 626], "entranc": [73, 175, 178, 195], "preoptim": 73, "get_excluded_node_nam": 73, "exclud": [73, 265, 267, 309, 531, 592, 621], "get_optimized_model": 73, "non": [73, 116, 208, 287, 341, 527, 615, 616, 626], "possibl": [73, 202, 245, 258, 314, 315, 318, 358, 425, 574, 614, 621, 626], "useless": 73, "6": [73, 574, 585, 620, 626, 629], "common": [73, 133, 160, 199, 245, 255, 261, 269, 270, 271, 286, 292, 293, 334, 489, 490, 496, 525, 577, 580, 581, 583, 587, 589, 620], "7": [73, 133, 153, 169, 312, 575, 584, 585, 589, 620, 622, 626, 629], "get_matched_nod": 73, "illustr": [73, 580], "matched_node_a_nam": 73, "has_positive_input": [73, 104], "posit": [73, 104, 160, 201, 237, 267, 525, 574, 591, 594], "neg": [73, 104], "removetrainingnodesoptim": 74, "protected_nod": [74, 133], "types_to_splic": [74, 133], "checknumer": [74, 133], "stopgradi": 74, "tranin": 74, "edg": [74, 309, 410, 412, 417, 477, 625], "fusedbatchnormv2": 75, "renamebatchnormoptim": 75, "due": [75, 616, 617, 620, 624], "histor": 75, "reason": [75, 204, 205, 318, 525, 576, 624, 626], "As": [75, 249, 297, 323, 527, 574, 576, 579, 605, 616, 617, 626], "latter": [75, 109], "former": 75, "chang": [75, 90, 135, 145, 152, 161, 163, 288, 290, 316, 319, 341, 356, 362, 465, 487, 494, 526, 576, 581, 584, 590, 591, 594, 604, 605, 608, 611, 617, 624, 625, 626], "platform": [75, 96, 341, 484, 530, 588, 594, 602, 618, 620, 629], "vnni_bf16": 75, "amx": [75, 530, 618], "instruct": [75, 574, 579, 589, 592, 606, 609, 618, 619, 620], "splitsharedinputoptim": 76, "stripequivalentnodesoptim": 77, "output_node_nam": [77, 78, 125, 126, 130, 133, 140, 310], "unus": [78, 96, 140, 258, 267, 309], "stripunusednodesoptim": 78, "input_node_nam": [78, 125, 130, 133, 140, 310], "switchoptim": 79, "condit": [79, 184, 185, 186, 190, 195, 198, 201, 222, 223, 224, 237, 315, 577, 590, 625, 626], "enter": [79, 605, 611], "freeze_fake_qu": [81, 89, 105], "freeze_valu": [81, 89, 105], "freeze_value_without_calib": [81, 89, 105], "fuse_conv_redundant_dequant": [81, 89, 105], "fuse_conv_requant": [81, 89, 105], "fuse_matmul_redundant_dequant": [81, 89, 105], "fuse_matmul_requant": [81, 89, 105], "meta_op_optim": [81, 89, 105], "post_hostconst_convert": [81, 89, 105], "post_quantized_op_cs": [81, 89, 105], "rnn_convert": [81, 89, 105], "scale_propag": [81, 89, 105], "onnx_graph": [81, 95, 105], "onnx_schema": [81, 95, 105], "tf2onnx_util": [81, 95, 105], "insert_qdq_pattern": [81, 100, 105], "merge_duplicated_qdq": [81, 100, 105], "share_qdq_y_pattern": [81, 100, 105], "freez": [82, 83, 84, 594, 616, 617], "fakequ": 82, "freezefakequantopoptim": 82, "freezevaluetransform": 83, "max_min_data": [83, 84], "postfix": [83, 84], "tensor_data": [83, 341], "th": [83, 84], "gpu": [83, 84, 91, 104, 133, 530, 575, 588, 592, 596, 602, 611, 619, 620], "generate_output_graph": [83, 84], "max_name_valu": [83, 84], "freeze_max": [83, 84], "freeze_min": [83, 84], "generate_output_graph_rang": [83, 84], "freezevaluewithoutcalibtransform": 84, "95": [84, 249, 253, 297, 300, 301, 591, 629], "do_transformation_without_calib": 84, "quantizedconv": [85, 86], "quantizeddeconv": 85, "fuseconvredundantdequantizetransform": 85, "cpu": [85, 86, 87, 88, 104, 133, 169, 261, 293, 341, 530, 575, 588, 592, 594, 596, 602, 611, 615, 618, 619, 621, 624], "_quantizedconv": 85, "_quantizeddeconv": 85, "successor": [85, 86, 87, 88], "requant": [86, 88, 624], "fuseconvrequantizetransform": 86, "two": [86, 104, 142, 153, 160, 161, 163, 186, 190, 191, 195, 202, 224, 228, 229, 233, 249, 286, 290, 292, 297, 322, 324, 341, 527, 528, 574, 577, 579, 581, 585, 591, 592, 616, 620, 621, 623, 626, 628], "fuse_pattern": 86, "sum_pattern": 86, "quantizedmatmul": [87, 88], "fusematmulredundantdequantizetransform": 87, "_quantizedmatmul": [87, 88], "fusematmulrequantizedequantizetransform": 88, "quantizedmatmulwithbiasanddequant": 88, "fusematmulrequantizetransform": 88, "fusematmulrequantizedequantizenewapitransform": 88, "fusematmulrequantizenewapitransform": 88, "meta": [90, 186, 224, 618], "metainfochangingmemopoptim": 90, "metaop": 90, "With": [90, 153, 293, 312, 527, 531, 576, 599, 604, 608, 612, 613, 616, 618, 620, 623, 626, 629], "quantizev2": [90, 92, 96, 119, 120, 122, 126, 134], "hostconst": 91, "posthostconstconvert": 91, "postcseoptim": 92, "decreas": 92, "size": [92, 104, 145, 160, 174, 176, 177, 183, 186, 190, 192, 194, 195, 197, 198, 201, 212, 214, 215, 221, 224, 228, 230, 233, 234, 237, 249, 258, 261, 267, 286, 297, 309, 312, 341, 361, 371, 372, 494, 496, 497, 525, 574, 576, 577, 581, 584, 611, 612, 613, 616, 617, 625, 628, 629], "rnn": [93, 104], "quantizedrnnconvert": 93, "calibration_data": [93, 101], "rnn_detail": 93, "scalepropagationtransform": 94, "direct": [94, 160, 286, 446], "algrothim": 94, "export": [95, 169, 245, 249, 293, 297, 303, 304, 309, 310, 311, 331, 496, 530, 597, 612, 624], "onnxgraph": 96, "output_shap": [96, 97, 116], "extra_opset": 96, "output_nam": [96, 126, 134, 169, 239, 241, 242, 311, 583], "is_subgraph": 96, "graph_nam": 96, "manipul": [96, 97], "extra": [96, 251, 299], "set_config": 96, "field": [96, 104, 133, 169, 186, 224, 249, 292, 293, 297, 527, 531, 574, 581, 623, 626, 628], "is_target": 96, "make_const": 96, "np_val": 96, "skip_convers": [96, 97], "raw": [96, 97, 185, 189, 192, 223, 227, 230, 321, 586, 591, 626], "must": [96, 201, 237, 249, 253, 297, 301, 526, 527, 574, 575, 576, 589, 625], "uniqu": [96, 249, 261, 292, 297, 316, 383, 384, 620], "would": [96, 104, 160, 526, 592, 616, 617, 620], "raw_data": 96, "attr": [96, 97, 98, 99, 104, 133, 140], "output_count": 96, "op_name_scop": 96, "domain": [96, 97, 98, 99, 160, 169, 293, 358, 366, 369, 386, 388, 393, 417, 424, 425, 428, 446, 477, 478, 480, 496, 508, 513, 574, 616, 617, 626], "onnx_domain": 96, "infer_shape_dtyp": 96, "branch": [96, 140, 337, 574], "append_nod": 96, "remove_nod": [96, 104, 309], "safe_remove_nod": 96, "to_delet": 96, "delet": [96, 337, 376, 382, 383, 388, 389, 390, 391, 392, 616, 617], "third": [96, 249, 297, 574, 590], "parti": [96, 249, 297, 590, 620], "consum": [96, 576], "reset_nod": 96, "reset": [96, 142, 148, 150, 246, 252, 253, 294, 300, 301, 312, 509, 551, 591], "create_new_graph_with_same_config": 96, "clean": [96, 155, 200, 203, 236, 361, 372, 375, 382, 383, 388, 390, 391, 392, 479, 495, 526], "is_empty_input": 96, "mai": [96, 104, 133, 140, 272, 273, 275, 276, 277, 312, 525, 526, 574, 576, 584, 590, 592, 604, 608, 615, 618, 620, 626], "place": [96, 311, 580, 589, 616, 624], "argument": [96, 245, 265, 267, 278, 283, 289, 292, 343, 451, 455, 460, 463, 469, 481, 489, 509, 528], "update_node_shape_dtyp": 96, "overrid": [96, 172, 211, 245, 291, 324, 337, 341, 486], "try": [96, 182, 220, 425, 428, 437, 509, 527, 583, 620], "update_proto": [96, 97], "protobuf": [96, 97, 99], "out": [96, 133, 142, 160, 184, 185, 186, 190, 195, 222, 223, 224, 244, 245, 267, 286, 291, 309, 313, 526, 527, 530, 577, 594, 599, 604, 605, 606, 608, 609, 611, 617, 619, 620], "structur": [96, 97, 104, 161, 288, 329, 421, 588, 610, 612, 616, 617, 620, 624, 629], "get_nod": [96, 410], "get_node_by_output": 96, "search_in_parent_graph": 96, "go": [96, 317, 585, 606, 609, 619, 625], "through": [96, 142, 172, 173, 200, 236, 302, 313, 317, 530, 575, 585, 587, 588, 591, 597, 613, 614, 616, 619], "nest": [96, 97, 166], "parent": [96, 104, 161, 163, 282, 288, 290, 309, 624], "get_node_by_output_in_current_graph": 96, "get_node_by_nam": [96, 474], "set_node_by_nam": 96, "is_const": [96, 97], "get_tensor_valu": [96, 97, 624], "as_list": [96, 97], "get_dtyp": 96, "set_dtyp": 96, "copy_dtyp": 96, "src_name": 96, "dst_name": 96, "copi": [96, 133, 169, 287, 293, 341], "get_shap": 96, "get_rank": 96, "len": [96, 142, 169, 195, 198, 201, 237, 316, 577, 581, 625], "set_shap": 96, "copy_shap": 96, "add_graph_output": 96, "topological_sort": [96, 309], "topolog": [96, 309], "make_graph": 96, "doc": [96, 160, 286, 326, 327, 328, 341, 591, 606, 609], "graphproto": [96, 97], "text": [96, 99, 195, 198, 200, 201, 236, 237, 246, 251, 289, 294, 299, 551, 590, 600, 618, 625, 629], "make_model": 96, "graph_doc": 96, "tfqdq_to_onnxqdq": 96, "make_onnx_graph_io": 96, "tensor_value_info": 96, "dump_graph": [96, 104], "debug": [96, 335, 338, 398, 399, 403, 574, 604, 608, 612, 626], "dump_node_statist": 96, "include_attr": 96, "include_subgraph": 96, "counter": [96, 99], "within": [96, 98, 161, 244, 245, 249, 291, 297, 310, 313, 316, 525, 527, 592, 604, 608, 611, 618], "remove_input": 96, "to_be_remov": 96, "input_index": [96, 309], "effici": [96, 145, 151, 528, 576, 579, 594, 614, 618], "otherwis": [96, 97, 173, 186, 195, 198, 201, 224, 237, 324, 525, 577, 606, 609, 619, 625], "look": [96, 530, 531, 585, 591, 628], "old_input": 96, "insert_new_node_on_input": 96, "scalar": [96, 97, 172, 173, 302, 313, 331, 591, 620], "wa": [96, 133, 173, 465, 531, 574, 618, 626], "add_graph_input": 96, "order": [96, 147, 246, 247, 267, 292, 294, 295, 311, 315, 316, 317, 321, 322, 328, 330, 425, 428, 437, 498, 527, 551, 591, 616, 619, 624, 626], "matter": [96, 182, 220, 621], "assum": [96, 200, 236, 249, 270, 297, 531, 585, 611], "main": [96, 145, 172, 208, 289, 324, 476, 513, 527, 581, 586, 598, 600, 612, 617, 620], "insert_node_on_output": 96, "produc": [96, 579], "goe": 96, "insert_new_node_on_output": 96, "find_output_consum": 96, "replace_all_input": 96, "new_input": 96, "_output_to_consum": 96, "determin": [96, 158, 160, 161, 336, 509, 525, 527, 617], "impact": [96, 315, 318, 319, 321, 322, 622, 626], "replace_input": 96, "extract_sub_graph_nod": 96, "outputs_nam": 96, "input_check": 96, "remove_unused_input": 96, "output_id": 96, "delete_unused_nod": 96, "safe_to_remove_nod": 96, "safe": [96, 116, 336, 526], "convert_qdq_nod": 96, "q_node": 96, "dq_node": 96, "delete_qdq_nod": 96, "onnxnod": 97, "data_format": [97, 186, 190, 195, 197, 198, 224, 228, 233, 234], "output_dtyp": 97, "get_value_attr": 97, "get_onnx_attr": 97, "child_nam": 97, "is_nhwc": 97, "is_scalar": 97, "is_graph_input": 97, "is_graph_input_default_const": 97, "is_whil": 97, "get_attr": 97, "get_attr_valu": 97, "get_attr_int": 97, "get_attr_str": 97, "encod": [97, 249, 258, 267, 297, 625], "utf": [97, 200, 236], "8": [97, 107, 169, 200, 236, 293, 486, 527, 585, 589, 616, 618, 626, 629], "set_attr": 97, "set_attr_onnx": 97, "need_skip": 97, "possibli": [97, 267], "scalar_to_dim1": 97, "set_tensor_valu": 97, "new_val": 97, "get_body_graph": 97, "bodi": [97, 525], "set_body_graph_as_attr": 97, "attr_nam": 97, "get_implicit_input": 97, "implicit": 97, "being": [97, 142, 249, 261, 292, 297, 311, 413], "schema": 98, "onnxopschema": 98, "since_vers": 98, "from_onnx_schema": 98, "construct": [98, 184, 187, 188, 191, 195, 198, 199, 204, 205, 206, 207, 209, 222, 225, 226, 229, 300, 301, 304, 306, 310, 334, 525, 577, 581, 617, 626], "has_attribut": 98, "get_schema": 98, "max_inclusive_opset_vers": 98, "get_max_supported_opset_vers": 98, "packag": [98, 316, 349, 357, 363, 365, 366, 368, 369, 370, 373, 374, 377, 379, 398, 399, 403, 406, 412, 414, 417, 418, 424, 443, 445, 450, 453, 456, 457, 459, 462, 468, 473, 477, 511, 531, 574, 584, 589, 611, 612, 618, 622, 626], "set_nam": 99, "find_opset": 99, "assert_error": 99, "bool_val": 99, "error_msg": 99, "messag": [99, 138, 496, 508, 513, 626], "map_numpy_to_onnx_dtyp": 99, "np_dtype": 99, "map_onnx_to_numpy_typ": 99, "onnx_typ": 99, "add_port_to_nam": 99, "nr": 99, "get_tensorflow_node_attr": 99, "pars": [99, 133, 136, 147, 184, 185, 197, 201, 222, 223, 234, 237, 267, 272, 343, 354, 359, 382, 383, 385, 388, 389, 390, 391, 394, 447, 451, 455, 460, 463, 469, 488, 496, 504, 515, 625], "get_tensorflow_tensor_shap": 99, "get_tensorflow_node_shape_attr": 99, "map_tensorflow_dtyp": 99, "get_tensorflow_tensor_data": 99, "convert_tensorflow_tensor_to_onnx": 99, "read_tensorflow_node_attr": 99, "read": [99, 140, 186, 189, 201, 224, 227, 237, 245, 278, 283, 287, 289, 411, 415, 416, 577, 621, 623], "infer_onnx_shape_dtyp": 99, "opset_vers": [99, 134, 169, 239, 241, 242, 311, 583], "input_shap": [99, 116, 188, 226, 308, 425, 428, 437, 576, 577], "input_dtyp": 99, "sometim": [99, 104, 133, 527, 616, 620], "make_onnx_shap": 99, "seqtyp": 99, "tensor_dtyp": 99, "around": 99, "signifi": 99, "make_onnx_inputs_output": 99, "elem_typ": 99, "datatyp": [99, 104, 133, 169, 318, 621, 626], "save_protobuf": 99, "as_text": 99, "is_onnx_domain": 99, "is_list_or_tupl": 99, "are_shapes_equ": 99, "src": [99, 169, 612], "dest": 99, "equal": [99, 135, 140, 152, 341, 591, 617], "get_subgraphs_from_onnx": 99, "model_proto": 99, "over": [99, 186, 190, 195, 224, 228, 233, 249, 253, 297, 301, 309, 316, 582, 586, 588, 591, 602, 611, 619, 626], "df": [99, 258, 310, 311], "initialize_name_count": 99, "avoid": [99, 184, 222, 310, 527, 624], "conflict": [99, 584], "make_nam": 99, "get_index_from_strided_slice_of_shap": 99, "outputs_to_valu": 99, "stride": [99, 195, 198, 201, 237, 272, 625], "slice": 99, "compute_const_folding_using_tf": 99, "const_node_valu": 99, "graph_output": 99, "generategraphwithqdqpattern": 101, "op_wise_config": [101, 125, 130, 326, 327], "quantized_nod": 101, "quantizaiton": 101, "mergeduplicatedqdqoptim": 102, "y": [103, 201, 237, 316, 597, 625], "shareqdqforitexypatternoptim": 103, "break": [103, 581], "graphanalyz": 104, "extend_engin": 104, "analyz": [104, 133, 310, 616, 617, 623, 624], "under": [104, 116, 186, 224, 340, 528, 574, 577, 590, 591, 594, 599, 600, 611, 614, 616, 617, 620, 624, 626], "singleton": [104, 293, 341, 477, 485], "getter": [104, 154, 157, 211, 238, 245, 269, 278, 283, 291, 292, 311, 313, 331, 426], "_graph": 104, "retrun": 104, "get_graph_input_output": 104, "doesn": [104, 195, 198, 201, 237, 292, 495, 531, 581, 612, 628], "know": [104, 204, 205, 238, 245, 278, 283, 482, 581, 622], "clearli": 104, "similar": [104, 267, 619, 626, 628], "featur": [104, 142, 155, 169, 184, 185, 197, 201, 203, 222, 223, 234, 237, 267, 293, 526, 530, 575, 576, 578, 579, 592, 593, 594, 598, 599, 602, 611, 617, 618, 622, 625], "summarize_graph": 104, "py": [104, 140, 142, 161, 247, 249, 250, 251, 288, 295, 297, 298, 299, 512, 527, 531, 574, 581, 589, 596, 598, 599, 600, 606, 609, 620, 622, 624], "writtern": 104, "googl": [104, 530, 592, 618], "query_fusion_pattern_nod": 104, "public": [104, 525, 606, 609], "aggreg": [104, 490], "statu": [104, 361, 372, 375, 380, 382, 388, 390, 391, 479, 492, 508, 521, 525, 576, 613], "pleas": [104, 142, 145, 151, 158, 160, 184, 185, 186, 189, 190, 195, 222, 223, 224, 227, 245, 278, 283, 286, 288, 289, 527, 528, 529, 530, 531, 574, 575, 577, 580, 581, 589, 591, 592, 594, 595, 599, 602, 616, 617, 621, 622, 623, 626], "_search_pattern": 104, "remove_node_with_single_input_output": 104, "rebuild": [104, 595, 604, 608], "except": [104, 293, 341, 477, 485, 486, 496, 511, 521], "fail": [104, 490, 527], "replace_const_nod": 104, "new_const_nod": 104, "target_nod": 104, "old_constant_node_nam": 104, "replace_al": 104, "outdat": 104, "replace_constant_graph_with_constant_nod": 104, "new_nod": 104, "old_end_node_nam": 104, "replace_single_nod": 104, "old_output_node_nam": 104, "old_output_nam": [104, 309], "old_input_node_nam": 104, "old_input_nam": [104, 309], "top": [104, 201, 237, 244, 245, 253, 278, 283, 291, 300, 301, 313, 591, 611, 625, 629], "bottom": [104, 574], "replace_nod": 104, "old_node_nam": 104, "output_nodes_nam": 104, "node_name_detail": 104, "add_nod": [104, 309, 410], "start_node_nam": 104, "end_node_nam": 104, "get_frame_info": 104, "frame": 104, "ordereddict": [104, 324, 330, 383, 388, 497], "parent_frame_detail": 104, "parse_graph": 104, "outputnod": 104, "graphrewriterhelp": 104, "encapsul": [104, 172, 173, 302, 313, 331, 593], "compare_node_attr": 104, "node_a": 104, "node_b": 104, "compar": [104, 142, 253, 301, 312, 324, 574, 580, 591, 617, 620, 623, 624, 626], "create_nod": [104, 133], "create_constant_nod": [104, 133], "set_attr_dtyp": [104, 133], "set_attr_tensor": [104, 133], "set_attr_type_list": [104, 133], "set_attr_string_list": [104, 133], "set_attr_str": [104, 133], "set_attr_int_list": 104, "set_attr_int": [104, 133], "set_attr_float": [104, 133], "set_attr_bool": [104, 133], "generate_int32_bias_for_conv": 104, "bias_tensor": 104, "channel_s": 104, "max_input": 104, "min_input": 104, "max_filter_tensor": [104, 341], "min_filter_tensor": [104, 341], "activation_rang": 104, "weights_rang": 104, "127": [104, 187, 188, 225, 226, 577, 620], "rang": [104, 187, 188, 201, 225, 226, 237, 249, 258, 297, 331, 530, 531, 577, 579, 580, 581, 614, 616, 617, 620, 625], "int32_bia": 104, "generate_int32_bias_for_matmul": 104, "weights_tensor": 104, "input_rang": 104, "max_filter_valu": 104, "min_filter_valu": 104, "gen_valid_sampling_log": 104, "log_path": 104, "log": [104, 138, 202, 245, 278, 283, 335, 338, 344, 361, 372, 375, 382, 388, 390, 391, 447, 481, 487, 488, 489, 490, 495, 509, 527, 574, 602, 623, 624, 626], "analysis_rnn_model": 104, "quantize_lay": [105, 106, 108], "fake_quant": [105, 106, 108], "quantize_config": [105, 106, 108], "quantize_help": [105, 106, 108], "quantize_wrapp": [105, 106, 108], "fuse_qdq_bn": [105, 106, 124], "fuse_qdq_concatv2": [105, 106, 124], "fuse_qdq_conv": [105, 106, 124], "fuse_qdq_deconv": [105, 106, 124], "fuse_qdq_in": [105, 106, 124], "fuse_qdq_matmul": [105, 106, 124], "fuse_qdq_pool": [105, 106, 124], "optimize_qdq": [105, 106, 124], "optimize_lay": [106, 108, 111], "quantize_layer_add": [106, 108, 111], "quantize_layer_bas": [106, 108, 111, 113, 115], "quantize_layer_bn": [106, 108, 111], "fakequantizebas": 107, "abc": [107, 251, 299, 425, 488, 531, 624, 626], "get_config": [107, 116, 522], "serial": [107, 184, 222, 394, 401, 402, 432, 484, 486, 498, 499, 503, 504], "fakequant": 107, "classmethod": [107, 116, 148, 150, 279, 280, 281, 326, 327, 329, 337, 483, 517, 519, 522], "from_config": [107, 116], "instanti": [107, 337, 614], "requir": [107, 116, 211, 245, 249, 261, 292, 297, 310, 312, 314, 317, 324, 343, 345, 354, 357, 412, 418, 425, 428, 430, 437, 443, 450, 451, 452, 453, 455, 456, 457, 459, 462, 463, 468, 473, 477, 527, 531, 574, 575, 576, 580, 581, 585, 592, 593, 595, 605, 611, 615, 616, 617, 620, 622, 623, 624, 626, 628], "per_channel": [107, 133, 585, 628], "num_bit": 107, "symmetr": [107, 620, 625, 626], "narrow_rang": 107, "quantizeconfig": [109, 110, 116], "There": [109, 253, 292, 301, 315, 574, 579, 585, 588, 591, 592, 594, 626, 628], "global": [109, 160, 161, 169, 272, 273, 275, 276, 277, 286, 293, 341, 509, 527, 616, 617, 619, 626], "add_quantize_recip": 109, "layer_nam": [109, 160, 286], "For": [109, 151, 160, 186, 200, 201, 211, 224, 236, 237, 245, 249, 250, 251, 253, 258, 286, 289, 297, 298, 299, 301, 302, 313, 317, 324, 486, 525, 527, 529, 531, 574, 580, 581, 583, 585, 588, 594, 596, 597, 599, 602, 616, 621, 624, 626, 628, 629], "conv5_block3_3_conv": 109, "flase": 109, "conv5_block3_3_add": 109, "query_lay": 109, "layer_recip": 109, "remove_lay": 109, "get_quantize_recip": 109, "is_empti": 109, "clear_quantize_recip": 109, "clear": [109, 182, 220, 246, 252, 253, 261, 294, 300, 301, 531, 551, 585, 591], "class": [110, 147, 270, 419, 420, 527, 528, 576, 577, 579, 591, 602, 613, 614, 622, 624, 626, 628], "init_quantize_config": 110, "begin": [110, 154, 158, 161, 211, 245, 272, 276, 277, 278, 283, 288, 289, 331, 579, 580, 616, 626], "model_nam": [110, 261, 371, 377, 496], "special": [110, 312, 527, 576, 591, 613], "qat_clone_funct": 110, "leav": [110, 605], "quantizewrapp": [110, 116], "wrapped_lay": 110, "config_quantizable_lay": 112, "quantizelayeradd": 113, "quantizelayerbas": [113, 114, 115], "quantizelay": 114, "quantizelayerbatchnorm": 115, "quantizewrapperbas": 116, "trainabl": 116, "sublay": 116, "trainable_weight": 116, "track": [116, 324, 611, 623], "descent": 116, "non_trainable_weight": 116, "thei": [116, 153, 160, 202, 245, 267, 293, 337, 525, 579, 585, 591, 592, 599, 613, 616, 617], "manual": [116, 186, 224, 577, 594, 600, 602, 605], "add_loss": 116, "regular": [116, 162, 246, 287, 294, 616], "eager": [116, 289, 343, 451, 455, 463, 581, 588, 620, 621, 624, 629], "gradienttap": 116, "tensorshap": 116, "compute_output_shap": 116, "caus": [116, 595, 616, 617], "state": [116, 142, 252, 253, 265, 267, 300, 301, 311, 326, 329, 597, 616, 617], "happen": 116, "later": [116, 145, 151, 624], "integ": [116, 154, 157, 160, 161, 163, 238, 245, 249, 253, 270, 286, 288, 290, 297, 301, 531, 620, 626], "query_input_index": 116, "design": [116, 154, 157, 183, 205, 206, 211, 221, 245, 260, 291, 300, 301, 302, 313, 317, 528, 599, 602, 616, 617, 620], "logic": [116, 172, 173, 324, 508, 628], "live": 116, "output_obj": 116, "fusenodestartwithfusedbatchnormv3": [117, 127], "quantizenodebas": [117, 118, 119, 120, 121, 122, 123, 126, 127, 128, 129, 131, 132], "_quantizedfusedbatchnorm": 117, "apply_newly_bn_relu_fus": [117, 127], "match_node_nam": [117, 119, 120, 121, 122, 127, 129, 131], "apply_newly_bn_leakyrelu_fus": [117, 127], "get_longest_fus": [117, 118, 119, 120, 121, 122, 123, 126, 127, 128, 129, 131, 132], "longest": [117, 118, 119, 120, 121, 122, 123, 127, 129, 131, 195, 198, 200, 201, 236, 237, 625], "apply_the_transform": [117, 118, 119, 120, 121, 122, 123, 126, 127, 128, 129, 131, 132], "concatv2": [118, 128, 139, 585], "fusenodestartwithconcatv2": [118, 128], "quantizedconcatv2": [118, 128], "fusenodestartwithconv2d": [119, 129], "apply_conv3d_add_addn_relu_fus": 119, "addn": [119, 129, 585], "apply_conv3d_add_addn_fus": 119, "apply_conv3d_add_relu_fus": 119, "apply_conv3d_add_fus": 119, "apply_conv3d_single_fus": 119, "apply_newly_conv_biasadd_relu_fus": 119, "elu": [119, 122], "sigmoid": [119, 122], "apply_newly_conv_biasadd_fus": 119, "apply_newly_conv_single_fus": 119, "apply_newly_conv_biasadd_addn_relu_fus": 119, "apply_conv_biasadd_hardswish_fus": 119, "hardswish": 119, "apply_newly_conv_biasadd_swishf32_fus": 119, "swishf32": 119, "swish_f32": 119, "apply_newly_conv_biasadd_addn_fus": 119, "patter": 119, "conv2dbackpropinput": 120, "conv3dbackpropinputv2": 120, "fusenodestartwithdeconv2d": 120, "apply_single_deconv2d_fus": 120, "apply_deconv2d_biasadd_fus": 120, "apply_single_deconv3d_fus": 120, "apply_deconv3d_biasadd_fus": 120, "fusedinstancenorm": 121, "fusenodestartwithfusedinstancenorm": 121, "apply_newly_in_relu_fus": 121, "batchmatmul": 122, "batchmatmulv2": 122, "fusenodestartwithmatmul": [122, 131], "apply_matmul_biasadd_relu_fus": [122, 131], "tanh": 122, "apply_matmul_biasadd_fus": [122, 131], "apply_batchmatmulv2_fus": 122, "apply_batchmatmulv2_mul_add_fus": 122, "avgpool": [123, 132, 585], "fusenodestartwithpool": [123, 132], "optimizeqdqgraph": 125, "op_wise_sequ": [125, 130], "quantizegraphbas": [125, 126, 130], "get_quantized_nod": 125, "quantizegraph": 126, "register_transform": 126, "virtual": [126, 136, 618], "deriv": [126, 154, 157, 158, 160, 161, 162, 163, 211, 238, 245, 286, 288, 290], "remove_dead_nod": 126, "longer": [126, 184, 195, 198, 201, 222, 237, 577, 625], "eightbitize_single_input_tensor_nod": 126, "original_nod": 126, "add_op_funct": 126, "add_output_graph_nod": 126, "output_nod": [126, 371], "remove_redundant_quant": 126, "old_graph": 126, "create_nodes_map": 126, "apply_conv_single_fus": 129, "apply_conv_biasadd_relu_fus": 129, "apply_conv_biasadd_fus": 129, "apply_conv_biasadd_addn_relu_fus": 129, "quantizegraphforintel": 130, "itself": [132, 303, 304, 305, 307, 309, 310, 599], "herlper": 133, "quantizegraphhelp": 133, "sever": [133, 163, 195, 198, 201, 237, 290, 528, 574, 579, 580, 588, 592, 604, 608, 616, 617, 619, 625, 626, 628], "staticmethod": 133, "get_sorted_graph": 133, "reorder": [133, 265, 267], "easier": [133, 134, 574, 604, 608, 611, 618], "in_graph": [133, 140], "ouput": 133, "prune": [133, 154, 157, 158, 159, 160, 161, 162, 163, 164, 169, 211, 245, 272, 273, 275, 276, 277, 279, 280, 281, 283, 284, 286, 287, 288, 290, 292, 293, 311, 331, 341, 352, 359, 372, 378, 388, 390, 417, 425, 437, 452, 477, 485, 496, 501, 530, 560, 581, 582, 585, 586, 588, 614, 618, 620, 628], "aren": 133, "uncondition": 133, "copy_attr": 133, "attr_valu": 133, "unique_node_name_from_input": 133, "ensure_tensor_name_has_port": 133, "sure": [133, 160, 161, 163, 286, 288, 290, 425, 574, 575], "explicit": [133, 525], "generate_quantized_weight_nod": 133, "host_op_typ": 133, "input_nod": [133, 371], "weight_bit": 133, "enter_nod": 133, "tensorflowqdqtoonnxqdqconvert": 134, "shape_overrid": 134, "inputs_as_nchw": [134, 239, 241], "default_opset_vers": 134, "duplicate_tf_quantizev2_nod": 134, "tf_graph_optim": 134, "transpose_input": 134, "request": [134, 405, 417, 418, 419, 440, 441, 444, 465, 477, 481, 508, 510, 512, 513, 517, 519, 520, 522, 574, 620], "correct": [135, 152, 164, 249, 250, 251, 253, 287, 297, 298, 299, 300, 301, 324, 446, 525, 574, 594], "biascorrect": 135, "fp32_graph": 135, "weight_empir": 135, "graphtransformbas": [135, 136, 138, 139], "Will": [135, 509, 579, 588], "our": [135, 528, 530, 583, 612, 623], "task": [135, 184, 191, 222, 229, 253, 267, 300, 301, 324, 577, 579, 580, 588, 591, 616, 617], "close": [135, 152], "w_int8": [135, 152], "w_fp32": [135, 152], "ratio": [135, 152, 160, 161, 163, 164, 195, 197, 198, 201, 234, 237, 245, 275, 278, 283, 286, 288, 289, 290, 577, 616, 617, 625, 629], "differ": [135, 145, 148, 150, 152, 155, 160, 177, 186, 201, 203, 215, 224, 237, 244, 245, 246, 252, 253, 260, 268, 269, 271, 280, 286, 291, 292, 294, 300, 301, 312, 313, 336, 525, 527, 528, 551, 574, 576, 577, 579, 581, 582, 583, 587, 588, 591, 593, 604, 608, 613, 616, 620, 624, 625, 626], "minim": [135, 152, 316, 579, 582, 586, 591, 604, 608, 616, 617, 620, 626], "round": [135, 152, 620], "scale_c": [135, 152], "shift": [135, 152, 195, 197, 198, 234, 612, 625], "notic": [135, 152, 202, 245, 590, 622], "empir": [135, 152], "solut": [135, 152, 258, 530, 531, 584, 596, 600, 605, 618, 626], "graphtransform": 136, "input_pb": [136, 138, 139], "parse_input_pb": 136, "pbdef": 136, "generate_input_map": 136, "get_node_name_from_input": 136, "insertlog": 138, "node_name_list": 138, "show_nam": 138, "show_op": 138, "first_n": 138, "summar": [138, 579], "1024": [138, 186, 224, 597], "dump_fp32": 138, "rerang": 139, "rerangequantizedconcat": 139, "rerange_quant": 139, "version1_lt_version2": [140, 341], "version1": [140, 341], "version2": [140, 341], "version1_gt_version2": [140, 341], "greater": [140, 341], "version1_eq_version2": [140, 341], "version1_gte_version2": [140, 341], "version1_lte_version2": [140, 341], "disable_random": 140, "seed": [140, 169, 258, 260, 271, 293, 335, 341, 506, 628], "disabl": [140, 484, 513, 525, 611, 621], "read_graph": 140, "in_graph_is_binari": 140, "write_graph": 140, "out_graph_def": 140, "out_graph_fil": 140, "write": [140, 193, 194, 195, 231, 232, 233, 249, 297, 341, 581, 587, 594, 624], "is_ckpt_format": 140, "model_path": [140, 309, 411, 426, 431, 496], "is_saved_model_format": 140, "saved_model": [140, 245, 255, 310, 417, 424, 434], "get_estimator_graph": 140, "estim": [140, 142, 253, 256, 257, 261, 268, 269, 301, 310, 626], "input_fn": [140, 310], "get_tensor_by_nam": 140, "try_cnt": 140, "consid": [140, 253, 300, 301, 323, 525, 579, 612, 626], "import": [140, 153, 169, 245, 255, 258, 272, 293, 302, 312, 313, 331, 341, 527, 528, 530, 575, 576, 577, 579, 580, 581, 583, 586, 591, 592, 593, 594, 598, 600, 613, 614, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626], "scope": [140, 154, 211, 245, 308, 616], "suffix": 140, "time": [140, 169, 195, 198, 201, 237, 253, 265, 293, 300, 301, 312, 316, 341, 482, 488, 489, 494, 509, 581, 584, 599, 601, 604, 608, 611, 612, 613, 616, 617, 618, 620, 623, 624, 625, 626], "got": [140, 584, 624], "iterator_sess_run": 140, "sess": [140, 310], "iter_op": [140, 310], "feed_dict": [140, 183, 221], "output_tensor": [140, 310], "integr": [140, 155, 203, 531, 574, 612], "makeiter": 140, "predict": [140, 195, 198, 201, 205, 206, 237, 246, 250, 251, 252, 253, 259, 261, 294, 298, 299, 300, 301, 528, 551, 579, 591, 602, 624, 625], "pred": [140, 252, 253, 300, 301, 591], "collate_tf_pr": 140, "collat": [140, 147], "tbe": 140, "get_input_output_node_nam": 140, "fix_ref_type_of_graph_def": 140, "fix": [140, 161, 184, 222, 288, 526, 577, 598, 617, 626], "ref": 140, "tool": [140, 239, 241, 341, 530, 531, 604, 608, 618, 620], "strip_unused_lib": 140, "offici": [140, 246, 250, 251, 294, 298, 299, 525, 574, 591], "r1": 140, "15": [140, 260, 585, 629], "get_graph_def": 140, "auto_input_output": 140, "get_model_input_shap": 140, "inout": 140, "get_tensor_val_from_graph_nod": 140, "tensor_v": 140, "int8_node_name_revers": 140, "revers": [140, 574], "tf_diagnosis_help": 140, "generate_feed_dict": 140, "input_tensor": [140, 310, 311], "bf16modulewrapp": 141, "nn": [141, 142, 147, 155, 169, 203, 239, 242, 261, 265, 267, 293, 302, 311, 313, 337, 527, 579, 583, 593, 624], "bf16modul": 141, "mixed_precision_model": 141, "bf16_symbolic_trac": 141, "fx_sub_module_list": 141, "_description_": 141, "node_collector": 142, "record": [142, 147, 155, 184, 185, 186, 190, 192, 194, 195, 203, 210, 222, 223, 224, 230, 312, 315, 577, 623, 624, 626], "hook_fn_act": 142, "inp": 142, "outp": 142, "hessiantrac": 142, "refer": [142, 145, 151, 158, 160, 164, 184, 222, 245, 246, 247, 252, 253, 278, 283, 286, 288, 289, 294, 295, 300, 301, 527, 531, 551, 575, 576, 577, 580, 581, 587, 589, 590, 591, 592, 594, 599, 602, 613, 616, 619, 622, 625, 626], "yao": 142, "zhewei": 142, "et": [142, 267], "al": [142, 267], "pyhessian": 142, "network": [142, 158, 160, 258, 261, 288, 319, 528, 574, 579, 580, 583, 615, 618, 620, 626], "2020": 142, "ieee": [142, 592], "confer": [142, 617], "big": 142, "dong": 142, "zhen": 142, "hawq": [142, 319, 534, 626], "v2": [142, 319, 581, 589, 600, 622, 626, 629], "advanc": [142, 505, 525, 530, 620, 628], "system": [142, 153, 202, 337, 341, 484, 511, 512, 575, 597, 616], "33": [142, 258, 629], "18518": 142, "18529": 142, "http": [142, 158, 160, 184, 186, 222, 224, 246, 247, 249, 250, 251, 267, 286, 288, 289, 294, 295, 297, 298, 299, 521, 527, 530, 574, 577, 586, 589, 590, 600, 606, 609, 622], "github": [142, 160, 184, 222, 246, 247, 250, 251, 286, 289, 294, 295, 298, 299, 440, 442, 483, 526, 530, 574, 577, 582, 586, 589, 590, 600, 606, 609, 622], "com": [142, 160, 184, 222, 246, 247, 250, 251, 286, 289, 294, 295, 298, 299, 489, 525, 530, 574, 577, 586, 589, 590, 594, 600, 622, 623, 629], "openvinotoolkit": 142, "nncf": 142, "blob": [142, 160, 246, 247, 250, 251, 286, 294, 295, 298, 299, 600], "develop": [142, 312, 496, 526, 527, 589, 592, 594, 600, 611, 618, 620, 621, 623], "mse_metric_gap": [142, 396], "fp32_tensor": [142, 396], "euclidean": [142, 396, 579], "distanc": [142, 396, 579], "get_fused_map": 142, "weight_to_op": 142, "get_devic": 142, "register_act_grad_hook": 142, "append": [142, 147, 148, 150, 169, 292, 309, 316, 326, 328, 527, 580, 614], "reset_act_gradient_and_hook": 142, "get_param": [142, 201, 237], "get_vthv_weight": 142, "num_sampl": [142, 253, 300, 301], "vthv": 142, "get_weight_trac": 142, "op_name_to_trac": 142, "get_act_trac": 142, "res_dict": 142, "get_act_gap": 142, "gap": [142, 583, 593], "get_avg_trac": 142, "averag": [142, 249, 250, 251, 253, 297, 298, 299, 300, 301, 591, 626], "compare_weight": 142, "float_dict": 142, "quantized_dict": 142, "usag": [142, 183, 221, 245, 249, 255, 292, 297, 312, 496, 574, 577, 581, 582, 591, 594, 602, 613, 619, 625], "wt_compare_dict": 142, "float_model": 142, "state_dict": [142, 267, 581, 624], "compute_error": 142, "weight_dict": 142, "hawq_top": 142, "modul": [143, 239, 245, 262, 263, 264, 268, 274, 284, 285, 485, 493, 501, 527, 574, 576, 579, 583, 588, 591, 593, 616, 619, 621, 624], "dataread": [144, 243], "sample_s": 144, "100": [144, 145, 153, 169, 186, 190, 195, 224, 249, 258, 293, 297, 575, 577, 581, 587, 619, 620, 625, 626, 628, 629], "ortq": [144, 243], "get_next": [144, 243], "torchsmoothqu": 145, "traced_model": [145, 146], "accur": [145, 151], "larg": [145, 151, 249, 297, 530, 576, 579, 616, 617, 629], "languag": [145, 151, 246, 267, 294, 525, 551, 618], "free": [145, 151, 172, 173, 313, 324, 525, 530, 591, 600, 605, 613, 623], "absorb": [145, 151], "inplac": 145, "you": [145, 182, 184, 220, 222, 249, 265, 267, 288, 297, 526, 527, 574, 577, 581, 583, 589, 590, 591, 594, 596, 597, 599, 604, 608, 611, 612, 616, 622, 623, 624], "convtranspose2d": 145, "balanc": [145, 192, 194, 195, 230, 615], "difficulti": 145, "Not": [145, 153, 154, 202, 211, 245, 278, 283, 293, 313, 326, 327, 328, 331, 341, 480, 528], "architectur": [145, 153, 202, 256, 257, 267, 268, 269, 271, 530, 560, 574, 575, 579, 616, 617, 618], "orig": 145, "benefit": [145, 614, 616], "graphtrac": 145, "trace_and_fuse_sub_graph": 146, "get_embedding_contigu": 147, "embed": [147, 267], "contigu": [147, 616], "collate_torch_pr": 147, "collate_result": 147, "input2tupl": 147, "append_attr": 147, "fx_model": 147, "fx_white_list": 147, "generate_activation_observ": 147, "observ": [147, 623, 624, 626], "what": [147, 153, 161, 182, 220, 293, 331, 525, 574], "check_cfg_and_qconfig": 147, "op_infos_from_cfg": 147, "output_tensor_ids_op_nam": 147, "paser_cfg": 147, "ops_nam": 147, "get_quantizable_ops_from_cfg": 147, "input_tensor_ids_op_nam": 147, "auto_copi": 147, "fetch_modul": 147, "set_modul": 147, "new_modul": 147, "simple_infer": 147, "get_example_input": 147, "example_inp": 147, "get_fallback_ord": 147, "fall": 147, "confid": 147, "ordered_op": 147, "get_mse_order_per_fp32": 147, "influenc": 147, "fallback_ord": 147, "get_mse_order_per_int8": 147, "get_torch_vers": 147, "algorithm_registri": [148, 150], "algorithm_typ": [148, 150], "locat": [148, 150, 201, 237, 581, 597, 604, 608, 611, 620, 622, 625, 628], "registr": [148, 150, 186, 190, 193, 194, 195, 198, 201, 208, 224, 228, 231, 232, 233, 235, 237, 281], "support_algorithm": [148, 150], "algorithmschedul": [148, 150], "conf": [148, 150, 153, 154, 157, 169, 172, 173, 202, 245, 254, 255, 272, 273, 275, 276, 277, 278, 283, 292, 293, 302, 303, 304, 309, 310, 311, 312, 313, 316, 317, 319, 321, 323, 324, 326, 328, 331, 504, 507, 527, 528, 530, 575, 579, 586, 587, 592, 593, 614, 620, 621, 623, 626], "phase": [148, 150, 161, 292, 528, 616, 617, 620, 621, 626], "adaptor": [148, 150, 211, 245, 330, 334, 530, 541, 588, 621, 622, 624], "append_algorithm": [148, 150], "reset_exec_algorithm": [148, 150], "fastbiascorrect": [149, 152], "fast_bias_correct": [150, 293], "weight_correct": [150, 293], "kernel": [151, 484, 531, 615, 616, 626], "weightcorrect": 152, "ep": [152, 592], "1e": [152, 628], "05": [152, 249, 253, 297, 300, 301, 489, 591, 629], "set_env_var": [153, 202], "env_var": [153, 202], "overwrite_exist": [153, 202], "env": [153, 202, 481, 489], "alreadi": [153, 186, 200, 202, 224, 236, 482, 509, 531, 574, 577, 588, 606, 609, 626], "set_all_env_var": [153, 202], "physic": [153, 202, 525, 575], "core": [153, 202, 245, 260, 293, 341, 361, 574, 575, 590, 604, 608, 615, 629], "get_architectur": [153, 202], "get_threads_per_cor": [153, 202], "thread": [153, 202, 245, 512, 574, 576, 615], "get_thread": [153, 202], "get_physical_id": [153, 202], "socket": [153, 202, 341, 484, 513, 615, 629], "get_core_id": [153, 202], "get_bounded_thread": [153, 202], "core_id": [153, 202], "bind": [153, 202], "benchmarkconfig": [153, 169, 293, 575], "goal": [153, 173, 238, 244, 245, 277, 278, 283, 291, 293, 302, 312, 313, 324, 497, 576, 614, 620, 626], "b_dataload": [153, 169, 202, 245, 293, 575], "b_func": [153, 202, 245, 293, 575], "summary_benchmark": [153, 202, 245, 293], "config_inst": [153, 202, 245, 293], "command": [153, 202, 245, 267, 293, 331, 361, 372, 375, 382, 388, 390, 391, 458, 481, 489, 509, 574, 581, 594, 596, 599, 604, 608, 612], "trigger": [153, 161, 202, 245, 288, 293, 526], "generate_prefix": [153, 202, 245, 293], "core_list": [153, 202, 245, 293], "numactl": [153, 202, 245, 293, 597, 605], "run_inst": [153, 202, 245, 293], "fit": [153, 160, 169, 293, 302, 313, 316, 331, 527, 530, 575, 576, 577, 581, 586, 587, 591, 592, 593, 616, 617, 620, 621], "prefer": [153, 244, 245, 291, 302, 313], "space": [153, 161, 172, 173, 244, 245, 251, 256, 258, 260, 268, 269, 270, 271, 291, 299, 302, 312, 313, 314, 316, 317, 318, 319, 321, 323, 324, 326, 328, 496, 525, 526, 528, 531, 616, 620, 628], "cores_per_inst": [153, 169, 361, 497, 575, 619], "num_of_inst": [153, 169, 497, 575, 619], "eval_dataload": [153, 154, 169, 172, 173, 211, 244, 245, 255, 292, 302, 313, 316, 317, 319, 321, 323, 324, 331, 530, 575, 586, 587, 626], "compon": [154, 157, 238, 245, 256, 268, 278, 283, 291, 292, 293, 477, 512, 515, 527, 581, 589, 590, 594, 611, 614, 615], "distil": [154, 157, 169, 203, 210, 211, 245, 293, 331, 530, 560, 582, 586, 588, 614, 628], "basecallback": [154, 157], "quantizationcallback": 154, "pruningcallback": [154, 157, 331], "distillationcallback": [154, 157], "train_func": [154, 211, 245, 292, 313, 331, 581, 620], "eval_func": [154, 172, 173, 211, 244, 245, 255, 292, 302, 312, 313, 316, 317, 319, 321, 323, 324, 331, 527, 576, 577, 579, 580, 581, 621, 626, 628], "on_train_begin": [154, 161, 211, 245, 277, 278, 283, 288, 289, 331, 527, 579, 580, 614, 616, 620], "Be": [154, 157, 211, 245, 249, 272, 276, 277, 297, 331], "on_train_end": [154, 157, 161, 211, 245, 277, 278, 283, 288, 289, 331, 579, 580, 614, 616, 620], "epoch": [154, 157, 161, 211, 238, 245, 272, 275, 276, 277, 278, 283, 288, 289, 331, 579, 580, 581, 614, 616, 628], "on_step_begin": [154, 158, 161, 211, 245, 272, 275, 276, 277, 278, 283, 288, 289, 331, 334, 579, 580, 614, 616], "batch_id": [154, 211, 245, 272, 275, 276, 277, 331], "on_after_compute_loss": [154, 211, 245, 278, 283, 331, 579, 580, 614], "student_output": [154, 155, 203, 211, 245, 331, 579, 580], "student_loss": [154, 155, 203, 211, 245, 331, 579, 580], "teacher_output": [154, 155, 203, 211, 238, 245, 331], "on_before_optimizer_step": [154, 158, 161, 162, 211, 245, 273, 277, 288, 289, 331, 579, 580, 614, 616], "on_after_optimizer_step": [154, 158, 161, 162, 211, 245, 288, 289, 331, 616], "on_before_ev": [154, 161, 211, 245, 288, 289, 331], "on_after_ev": [154, 161, 211, 245, 288, 289, 331], "on_step_end": [154, 161, 211, 245, 272, 275, 276, 277, 278, 283, 288, 289, 331, 334, 579, 580, 614, 616], "register_hook": [154, 211, 245], "input_arg": [154, 211, 245], "input_kwarg": [154, 211, 245], "reserv": [154, 172, 173, 211, 245, 272, 292], "pre_process": [154, 211, 238, 245, 256, 268, 278, 283, 291, 302, 581], "routinu": [154, 245, 291, 302, 313], "remove_hook": [154, 311], "awaretrainingquantcallback": [154, 157, 331], "generate_hook": [154, 157, 238, 245, 278, 283], "knowledg": [154, 155, 157, 169, 203, 238, 245, 580, 582, 586, 588, 593, 628], "transfer": [154, 157, 191, 229, 238, 245, 577, 579, 580], "teacher": [154, 155, 157, 169, 203, 238, 245, 267, 293, 579, 580, 629], "student": [154, 155, 157, 184, 203, 210, 222, 238, 245, 577, 579, 580, 629], "distillation_conf": [154, 157, 165, 238, 245], "_epoch_ran": [154, 157, 238, 245], "how": [154, 157, 158, 160, 161, 195, 198, 201, 237, 238, 245, 260, 261, 286, 526, 527, 529, 531, 574, 576, 577, 579, 580, 581, 587, 605, 606, 609, 610, 611, 616, 617, 620, 625, 626, 628], "much": [154, 157, 158, 195, 198, 201, 237, 238, 245, 579, 605, 616, 617, 625], "ran": [154, 157, 238, 245], "eval_frequ": [154, 157, 238, 245], "frequenc": [154, 157, 161, 238, 245, 288, 615, 616, 628], "term": [154, 157, 161, 162, 238, 245, 526, 579, 590, 591, 613, 614, 626], "best_scor": [154, 157, 238, 245], "best_model": [154, 157, 238, 245], "found": [154, 157, 238, 245, 256, 257, 268, 269, 309, 316, 322, 480, 496, 513, 530, 574, 592, 599, 626], "teacher_model": [154, 155, 157, 169, 203, 238, 245, 293, 579, 580], "student_model": [154, 155, 157, 203, 238, 245], "train_cfg": [154, 157, 238, 245, 334], "init_train_cfg": [154, 157, 238, 245], "create_criterion": [154, 157, 238, 245], "critet": [155, 203], "tensorflowknowledgedistillationloss": [155, 203], "pytorchknowledgedistillationloss": [155, 203], "pytorchintermediatelayersknowledgedistillationloss": [155, 203], "tensorflowcriterion": [155, 203], "pytorchcriterion": [155, 203], "criterion_cl": [155, 203], "criterion_registri": [155, 203], "criterion_typ": [155, 203], "registry_criterion": [155, 203], "knowledgedistillationframework": [155, 203], "knowledgedistillationloss": [155, 203, 628], "temperatur": [155, 169, 203, 628], "loss_typ": [155, 169, 203, 628], "ce": [155, 169, 203, 628], "loss_weight": [155, 169, 203, 628], "teacher_model_forward": [155, 203], "notimplementederror": [155, 203, 252, 253, 300, 301], "teacher_student_loss_c": [155, 203], "student_targets_loss_c": [155, 203], "groud": [155, 203], "truth": [155, 203, 250, 251, 298, 299], "loss_cal": [155, 203], "loss_cal_sloss": [155, 203], "softcrossentropi": [155, 203], "logit": [155, 203, 579], "ground": [155, 203, 250, 251, 298, 299], "kullbackleiblerdiverg": [155, 203], "pytorchknowledgedistillationlosswrapp": [155, 203], "param_dict": [155, 203, 208, 258], "tensorflowknowledgedistillationlosswrapp": [155, 203], "tensorflowknowledgedistillationlossextern": [155, 203], "intermediatelayersknowledgedistillationloss": [155, 203, 504], "layer_map": [155, 169, 203], "add_origin_loss": [155, 169, 203], "init_loss_func": [155, 203], "init_feature_match": [155, 203], "student_featur": [155, 203], "teacher_featur": [155, 203], "matcher": [155, 203, 612], "clear_featur": [155, 203], "pytorch": [155, 160, 183, 184, 186, 189, 190, 193, 194, 195, 198, 201, 203, 208, 210, 221, 222, 224, 227, 228, 231, 232, 233, 235, 237, 239, 242, 243, 244, 245, 252, 253, 254, 284, 286, 289, 291, 293, 300, 301, 302, 311, 313, 322, 335, 337, 341, 344, 417, 424, 447, 457, 477, 527, 528, 530, 531, 576, 579, 580, 582, 583, 585, 588, 589, 592, 593, 594, 596, 599, 600, 601, 602, 611, 616, 618, 619, 622, 626, 628], "register_hooks_for_model": [155, 203], "attributeerror": [155, 203], "remove_all_hook": [155, 203], "pytorch_linear_feature_match": [155, 203], "pytorchintermediatelayersknowledgedistillationlosswrapp": [155, 203], "selfknowledgedistillationloss": [155, 203, 504], "selfknowledg": [155, 203], "pytorchselfknowledgedistillationloss": [155, 203], "l2diverg": [155, 203], "feature1": [155, 203], "feature2": [155, 203], "pytorchselfknowledgedistillationlosswrapp": [155, 203], "pruner": [157, 245, 272, 273, 274, 275, 276, 278, 283, 284, 286, 289, 293, 504, 507, 616, 628], "criteria": [157, 159, 244, 245, 278, 283, 286, 288, 291, 313, 322, 527, 611], "reg": [157, 159, 161], "schedul": [157, 159, 161, 162, 245, 275, 284, 288, 293, 324, 560, 614], "register_criterion": 158, "registri": [158, 160, 161, 162, 163, 286, 288, 290, 528], "get_criterion": 158, "pruningcriterion": 158, "about": [158, 309, 396, 425, 481, 483, 484, 489, 490, 525, 574, 576, 621, 629], "module_nam": [158, 161, 162, 163, 288, 290, 341, 496], "score": [158, 160, 161, 162, 246, 247, 249, 250, 251, 253, 266, 286, 288, 294, 295, 297, 298, 299, 300, 301, 315, 319, 322, 334, 527, 551, 591, 613, 616, 617, 623, 626], "magnitudecriterion": 158, "magnitud": [158, 245, 253, 273, 274, 293, 301, 588, 616, 617, 629], "criterion_class": 158, "magtinud": 158, "gradientcriterion": 158, "absolut": [158, 169, 253, 259, 272, 275, 301, 489, 591, 615, 616, 617, 620, 626], "snipcriterion": 158, "snip": [158, 288, 588, 616, 617, 629], "product": [158, 588, 592, 594, 595, 611, 615, 618, 620, 623, 626], "shot": [158, 163, 211, 245, 288, 290, 528, 588, 616, 617, 618], "arxiv": [158, 267, 288], "org": [158, 249, 267, 288, 297, 526, 527, 574, 589, 606, 609], "1810": [158, 288], "02340": [158, 288], "snipmomentumcriterion": 158, "snip_momentum": [158, 169, 293, 616], "momentum": [158, 288, 588, 616, 617, 628], "mechan": [158, 623], "preserv": 158, "register_pattern": [160, 286], "get_pattern": [160, 286], "assertionerror": [160, 161, 164, 286, 287, 288, 302], "basepattern": [160, 162], "basic": [160, 169, 200, 236, 256, 268, 286, 293, 320, 324, 326, 327, 331, 588, 589, 619, 623], "unit": [160, 286, 488, 496, 526], "4x1": [160, 169, 282, 293, 616, 629], "is_glob": [160, 286], "contrast": [160, 286, 625], "keep_mask_lay": 160, "invalid_lay": 160, "max_sparsity_ratio_per_op": [160, 161, 165, 169, 293, 616], "sparsiti": [160, 161, 163, 164, 245, 275, 276, 277, 278, 282, 283, 286, 288, 289, 290, 310, 311, 341, 530, 577, 588, 616, 629], "reach": [160, 163, 173, 286, 290, 312, 324, 526, 530, 576, 616, 617, 626], "min_sparsity_ratio_per_op": [160, 165, 169, 293, 616], "target_spars": [160, 165, 169, 293, 616, 619, 628], "reduce_tensor": 160, "dim": [160, 201, 237, 281, 316, 625], "along": [160, 489, 589], "get_mask": [160, 286], "target_sparsity_ratio": [160, 161, 286, 288], "pre_mask": [160, 286], "unprun": 160, "get_masks_glob": [160, 286], "get_masks_loc": [160, 286], "get_single_mask_per_target_ratio": 160, "exact_sparsity_ratio": [160, 286], "get_block_size_dict": [160, 286], "get_sparsity_ratio": [160, 164, 245, 278, 283, 286, 289], "return_dict": 160, "zero_cnt": 160, "total_cnt": 160, "get_pattern_lock_mask": [160, 286], "obtain": [160, 162, 163, 164, 286, 287, 290, 527, 583, 617, 623, 626], "lock": [160, 276, 277, 286, 588, 614, 616, 617], "check_layer_valid": 160, "block_siz": [160, 286], "get_reduced_masks_from_data": 160, "update_residual_cnt": 160, "left": [160, 195, 197, 198, 201, 234, 237, 574, 605, 611, 625], "get_sparsity_ratio_each_lay": 160, "sparsity_ratio": 160, "total": [160, 161, 163, 195, 198, 201, 237, 253, 288, 290, 300, 301, 310, 311, 312, 317, 577, 617, 625], "cnt": 160, "sparsityinfo": 160, "adjust_ratio": 160, "key_new_spars": 160, "max_sparsity_ratio": 160, "min_sparsity_ratio": 160, "final_target_sparsity_ratio": 160, "examin": [160, 616], "propos": [160, 269, 528, 531, 579, 592, 616], "adjust_sparsity_ratio": 160, "patternnxm": [160, 286], "nxm": [160, 161, 282, 286, 617], "kept": [160, 286], "height": [160, 195, 197, 198, 201, 234, 237, 261, 286, 581, 616, 625, 628], "width": [160, 195, 197, 198, 201, 234, 237, 261, 286, 581, 620, 625, 628], "vertic": [160, 201, 237, 286, 625], "becaus": [160, 195, 198, 201, 237, 249, 286, 297, 527, 616, 620, 625, 626], "hidden": [160, 286, 496, 531, 616], "calul": [160, 286], "ration": [160, 286], "block_size_1": [160, 286], "block_size_2": [160, 286], "block_wis": 160, "get_sparsity_ratio_progress": 160, "reshape_orig_to_pattern": 160, "s1": 160, "s2": 160, "reshape_reduced_to_orig": 160, "orig_shap": 160, "permut": [160, 201, 237, 625], "reduce_scor": 160, "recalcul": [160, 242], "get_mask_per_threshold": 160, "cur_target_sparsity_ratio": 160, "keep_exact_sparsity_ratio": 160, "togeth": [160, 195, 198, 201, 237, 286, 292, 579, 589, 598, 618, 624, 625], "keep_pre_mask": [160, 286], "remain": [160, 599], "unchang": [160, 286], "count_new_masked_cnt": 160, "new_added_mask": 160, "update_new_added_mask": 160, "cur_mask": 160, "procedur": [160, 165, 317, 528], "bacaus": 160, "update_progressive_mask": 160, "progressive_step": 160, "progressive_config": 160, "progress": [160, 161, 163, 186, 224, 290, 605, 611, 617], "update_progressive_masks_linear": 160, "update_progressive_masks_scor": 160, "update_progressive_masks_loc": 160, "update_progressive_masks_glob": 160, "patternninm": [160, 286], "continu": [160, 249, 286, 297, 317, 528, 612, 616], "master": [160, 246, 247, 250, 251, 286, 289, 294, 295, 298, 299, 324], "md": [160, 286, 581], "get_least_ninm_mask_from_data": 160, "least": [160, 253, 289, 301, 490, 616, 617, 626], "elementwis": [160, 272], "sparisti": 160, "get_ele_mask_per_threshold": 160, "least_ninm_mask": 160, "least_m_in_m_mask": 160, "register_prun": [161, 288], "parse_valid_pruner_typ": 161, "get_prun": [161, 288], "cuurent": [161, 288], "baseprun": 161, "current_sparsity_ratio": [161, 288], "global_step": [161, 288], "start_step": [161, 165, 169, 288, 293, 616, 619], "end_step": [161, 165, 169, 288, 293, 616, 619], "pruning_frequ": [161, 165, 169, 293, 616], "show": [161, 341, 525, 574, 579, 581, 597, 612, 616, 626], "mask_weight": [161, 288], "formal": [161, 288], "mask_weights_gener": 161, "input_mask": [161, 201, 237], "local_step": [161, 288, 289], "update_mask": 161, "check_is_pruned_step": [161, 288], "basicprun": 161, "arrang": [161, 185, 186, 189, 190, 195, 223, 224, 227, 577, 616], "proce": 161, "regul": 161, "set_global_step": 161, "patternlockprun": [161, 276, 288], "spars": [161, 245, 278, 283, 288, 577, 616, 617, 618], "progressiveprun": 161, "interpol": [161, 195, 198, 201, 237, 591, 617, 625], "fine": [161, 184, 222, 577, 597, 618, 620], "grain": [161, 618], "improv": [161, 316, 526, 594, 611, 612, 616, 617, 620, 621, 626, 629], "interv": [161, 617], "check_progressive_valid": 161, "check_is_pruned_progressive_step": 161, "update_masks_progress": 161, "print_progressive_spars": 161, "register_reg": 162, "regulariz": 162, "get_reg_typ": 162, "get_reg": 162, "basereg": 162, "grouplasso": 162, "coeff": 162, "lasso": [162, 273, 588, 616, 617], "select": [162, 184, 222, 257, 261, 268, 322, 527, 528, 574, 588, 589, 611, 617, 620, 624, 626], "reg_term": 162, "coeffient": 162, "relat": [162, 238, 245, 249, 263, 264, 278, 283, 286, 297, 334, 424, 427, 429, 434, 514, 517, 518, 519, 522, 594, 628], "register_schedul": [163, 290], "get_schedul": [163, 290], "pruningschedul": 163, "dens": [163, 245, 278, 283, 290, 616, 617, 629], "gradual": [163, 290, 616, 617], "update_sparsity_ratio": [163, 290], "target_ratio": [163, 290], "current_prune_step": [163, 290], "total_prune_step": [163, 290], "init_ratio": 163, "oneshotschedul": [163, 290], "iterativeschedul": [163, 290], "init_sparsity_ratio": 163, "elementwise_over_matmul_gemm_conv": [164, 245, 278, 283, 289], "elementwise_over_al": [164, 245, 278, 283, 289], "blockwise_over_matmul_gemm_conv": [164, 245, 278, 283, 289], "check_config": [164, 287], "prune_config": [164, 287], "everyth": [164, 287, 599], "reset_none_to_default": 164, "undefin": [164, 287], "update_param": [164, 363], "process_weight_config": 164, "global_config": [164, 272, 273, 275, 276, 277], "local_config": [164, 169, 272, 273, 275, 276, 277, 293], "default_config": 164, "pruners_info": 164, "process_yaml_config": 164, "check_key_valid": 164, "template_config": 164, "user_config": 164, "process_and_check_config": [164, 287], "process_config": [164, 287], "parse_to_prun": [164, 287], "keep": [164, 286, 287, 317, 527, 531, 610, 611, 622, 626], "generate_pruner_config": 164, "dotdict": [164, 165, 312], "prunerv2": 165, "pruning_typ": [165, 169, 293, 616], "pruning_scop": [165, 169, 293, 616], "sparsity_decay_typ": [165, 169, 293, 616], "pruning_op_typ": [165, 169, 293, 616], "reg_typ": 165, "criterion_reduce_typ": 165, "resume_from_pruned_checkpoint": 165, "similiar": [165, 169, 293], "cfg_fname": 165, "parser": [165, 293, 354, 359, 477, 481, 485, 515], "quantization_conf": 165, "pruning_conf": 165, "graph_optimization_conf": [165, 244, 245], "mixedprecision_conf": 165, "benchmark_conf": 165, "nasconfig": [165, 245, 257, 268, 269, 528], "search_spac": [165, 256, 268, 269, 270, 271], "search_algorithm": [165, 245, 268, 269, 293, 528], "na": [165, 245, 293, 306, 560, 588], "deep_get": [166, 312], "dot": [166, 496, 592, 620], "eg": [166, 186, 190, 195, 224, 228, 233, 577, 619], "person": [166, 525, 618], "john": 166, "deep": [166, 530, 531, 576, 588, 589, 592, 594, 596, 599, 600, 602, 605, 611, 618, 620, 626, 629], "deep_set": [166, 312], "sex": [166, 525], "male": 166, "notat": 166, "check_valu": 169, "supported_typ": 169, "supported_valu": 169, "_datatyp": 169, "random_se": [169, 316, 331, 380, 506, 628], "1978": 169, "workspac": [169, 293, 310, 311, 331, 340, 341, 382, 383, 388, 390, 391, 392, 422, 495, 497, 506, 593], "default_workspac": 169, "resume_from": [169, 341], "warmup": [169, 497, 575, 619], "inter_num_of_thread": [169, 619], "intra_num_of_thread": [169, 619], "accuracycriterion": [169, 464, 626], "higher_is_bett": [169, 591, 626, 628], "rel": [169, 312, 619, 626, 628, 629], "tolerable_loss": [169, 626], "01": [169, 615, 619, 626, 628, 629], "accuracy_criterion": [169, 293, 312, 613, 619, 626, 628], "tuningcriterion": [169, 293, 613, 623, 626], "strategy_kwarg": [169, 623, 626], "timeout": [169, 173, 293, 324, 506, 619, 626, 628], "max_trial": [169, 293, 506, 626], "tuning_criterion": [169, 293, 613, 623, 626], "earli": [169, 293, 620, 626, 628], "stop": [169, 173, 293, 309, 317, 324, 465, 489, 626, 628], "exit": [169, 293, 315, 574, 592, 628], "see": [169, 195, 198, 201, 237, 246, 249, 265, 294, 297, 525, 527, 529, 574, 590, 604, 605, 608, 611, 612, 624, 626, 629], "concret": [169, 172, 324, 626], "posttrainingquantconfig": [169, 293, 313, 527, 530, 576, 586, 593, 620, 621, 623, 626], "auto": [169, 293, 314, 341, 527, 594, 597, 599, 601, 602], "quant_format": [169, 239, 242, 293, 311, 583], "calibration_sampling_s": [169, 293], "op_type_list": [169, 293, 619, 626], "op_name_list": [169, 293, 626], "excluded_precis": [169, 293, 592, 621], "quant_level": [169, 293, 626], "use_distributed_tun": [169, 293], "_basequantizationconfig": [169, 293], "quantizationawaretrainingconfig": [169, 293, 313, 331, 527, 580, 620, 621, 626], "deepcopi": [169, 293], "model_origin": [169, 293, 313, 621], "qat_op_name_list": [169, 293], "compression_manag": [169, 293, 331, 527, 579, 580, 614, 616, 620], "prepare_compress": [169, 293, 331, 527, 579, 580, 614, 616, 620], "weightpruningconfig": [169, 293, 614, 616], "pruning_config": [169, 293, 616], "9": [169, 260, 293, 527, 589, 616, 617, 619, 626, 628], "98": [169, 293, 616, 619, 629], "exp": [169, 293, 616, 617], "update_config": [169, 283, 293], "10": [169, 186, 224, 249, 293, 297, 316, 474, 530, 574, 575, 577, 589, 616, 619, 625, 626, 629], "weight_compress": [169, 293, 619, 628], "knowledgedistillationlossconfig": [169, 580, 614], "distillationconfig": [169, 293, 331, 579, 580, 614], "comb": [169, 580], "distillation_criterion": [169, 580, 614], "d_conf": [169, 580, 614], "q_conf": [169, 580], "intermediatelayersknowledgedistillationlossconfig": 169, "selfknowledgedistillationlossconfig": [169, 293, 579], "distil_loss": [169, 293, 579], "crossentropyloss": [169, 203, 293, 579], "sgd": [169, 208, 293, 579, 619, 628], "lr": [169, 293, 579, 581], "0001": [169, 293, 579, 619], "learning_r": [169, 293, 619, 628], "callabl": [169, 251, 293, 299, 331, 492, 496, 512, 513], "altern": [169, 293], "mixedprecisionconfig": [169, 293, 302, 592], "mixedprecis": [169, 245, 254, 293, 302, 350, 454, 502, 560], "mix_precis": [169, 293, 592], "exportconfig": 169, "dynamic_ax": [169, 239, 242, 311, 583], "onnxqlinear2qdqconfig": 169, "onnxqlinear2qdq": 169, "torch2onnxconfig": [169, 583], "qdq_op_fp32_bia": [169, 239, 242, 583], "torch2onnx": [169, 239, 245, 293], "tf2onnxconfig": 169, "tf2onnx": [169, 239, 245, 293], "sigopt": [170, 171, 293, 618], "tpe": [170, 171, 293], "sigopttunestrategi": 172, "q_dataload": [172, 173, 316, 317, 319, 321, 323, 324, 587, 626], "q_hook": [172, 173, 316, 317, 319, 321, 323, 324], "tunestrategi": [172, 173, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 626], "hpo": 172, "mandatori": [172, 173, 313, 628], "yield": [172, 173, 182, 204, 205, 220, 302, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 331, 576, 620, 626], "taken": [172, 173, 302, 313, 331], "tuner": [172, 173, 244, 245, 291, 302, 313, 331], "higher": [172, 173, 270, 302, 313, 314, 331, 527, 579, 583, 591, 616, 617, 620, 623, 626], "pseudo": [172, 173, 313, 331, 624], "code": [172, 173, 202, 245, 255, 263, 264, 267, 289, 292, 313, 331, 383, 388, 406, 424, 489, 490, 521, 522, 527, 530, 531, 574, 576, 577, 579, 580, 581, 587, 588, 590, 591, 594, 596, 598, 599, 600, 602, 605, 611, 613, 614, 616, 618, 619, 620, 623, 624, 625], "resum": [172, 173, 319, 323, 324, 331, 337], "params_to_tune_config": 172, "next_tune_cfg": [172, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 626], "travers": [172, 173, 314, 315, 317, 318, 324, 626], "get_acc_target": 172, "base_acc": 172, "ceiterion": 172, "constraint": [172, 244, 245, 291, 309, 313, 623, 626, 628], "create_exp": 172, "acc_target": 172, "experi": [172, 525, 594, 623, 626], "fefin": 173, "tpetunestrategi": 173, "add_loss_to_tuned_history_and_find_best": 173, "tuning_history_list": 173, "histori": [173, 316, 324, 340, 341, 381, 388, 390, 394, 447, 465, 515, 611, 626], "object_evalu": 173, "alredi": 173, "calculate_loss": 173, "acc_diff": 173, "lat_diff": 173, "trials_count": [173, 317, 324], "either": [173, 249, 297, 324, 592, 595, 599, 614, 619, 620], "met": [173, 324, 528, 585, 592, 620, 624], "basedatalod": [174, 212], "basedataload": [174, 176, 179, 180, 181, 183, 195, 212, 214, 217, 218, 219, 221], "batch_siz": [174, 176, 181, 182, 183, 184, 185, 190, 195, 204, 205, 212, 214, 219, 220, 221, 222, 223, 239, 242, 261, 266, 311, 347, 361, 372, 474, 497, 528, 576, 577, 581, 583, 587, 594, 620], "last_batch": [174, 176, 181, 183, 195, 204, 205, 212, 214, 219, 221], "rollov": [174, 176, 181, 183, 195, 204, 205, 212, 214, 219, 221], "collate_fn": [174, 176, 177, 181, 195, 204, 205, 212, 214, 215, 219, 577], "sampler": [174, 176, 178, 181, 195, 204, 205, 212, 214, 216, 219, 233, 245, 326, 327, 581], "batch_sampl": [174, 176, 181, 195, 204, 205, 212, 214, 219], "num_work": [174, 176, 181, 195, 204, 205, 212, 214, 219, 261, 620], "pin_memori": [174, 176, 181, 195, 204, 205, 212, 214, 219], "shuffl": [174, 176, 181, 195, 204, 205, 212, 214, 219, 620], "_generate_dataload": [174, 212], "drop": [174, 212, 249, 287, 297, 592, 605, 616, 617, 629], "incomplet": [174, 212, 326, 328, 337], "discard": [174, 212], "default_col": [176, 214], "outer": [176, 214], "defaultdataload": [176, 180, 183, 195, 214, 218, 221], "base_dataload": [176, 178, 179, 180, 181, 183, 195, 214, 216, 217, 218, 219, 221, 233, 245], "drop_last": [177, 182, 215, 220], "iterablefetch": [177, 215], "indexfetch": [177, 215], "default_dataload": [178, 180, 183, 216, 218, 221, 233, 245], "fetcher": [178, 216, 233, 245], "mxnet_dataload": [178, 216, 233, 245], "onnxrt_dataload": [178, 216, 233, 245], "pytorch_dataload": [178, 216, 233, 245], "tensorflow_dataload": [178, 216, 233, 245, 474], "mxnetdataload": [179, 217], "onnxruntim": [180, 186, 190, 193, 194, 195, 218, 224, 228, 231, 232, 233, 245, 254, 302, 400, 404, 531, 586, 588, 589, 619], "onnxrtbertdataload": [180, 218], "bert": [180, 183, 184, 195, 198, 201, 218, 221, 222, 237, 530, 577, 579, 591, 599, 625, 629], "varient": [180, 218], "onnxrtdataload": [180, 218], "pytorchdataload": [181, 219], "data_sourc": [182, 220, 334], "__iter__": [182, 186, 190, 195, 220, 224, 228, 233, 576, 577], "iterablesampl": [182, 220], "squential": [182, 220], "your": [182, 184, 220, 222, 249, 297, 526, 574, 577, 581, 583, 589, 590, 594, 597, 598, 599, 604, 605, 606, 608, 609, 611, 616, 623, 624, 626], "iterabledataset": [182, 185, 186, 188, 189, 190, 195, 220, 223, 224, 226, 227, 228, 233], "indexdataset": [182, 220], "__getitem__": [182, 186, 190, 195, 198, 201, 220, 224, 228, 233, 235, 237, 577], "__len__": [182, 186, 190, 195, 220, 224, 228, 233, 577], "inter": [182, 186, 190, 195, 220, 224, 228, 233], "retriev": [182, 220, 490], "act": [182, 220, 525], "sequentialsampl": [182, 220], "batchsampl": [182, 220], "tfdatadataload": [183, 221], "tensorflow1": [183, 221], "coupl": [183, 221], "satisfi": [183, 221, 589], "tf1": [183, 221, 593], "although": [183, 221, 623], "tensorflowbertdataload": [183, 221], "tensorflowmodelzoobertdataload": [183, 221], "zoo": [183, 201, 221, 237, 530, 582, 586, 629], "tensorflowdataload": [183, 221, 474], "directli": [183, 221, 249, 253, 287, 297, 301, 324, 583, 591, 598, 619, 620, 624], "pytorchbertdataset": [184, 222], "model_typ": [184, 222, 310, 396, 426, 577], "tensordataset": [184, 222, 577], "repo": [184, 222, 524, 577, 582, 604, 606, 608, 609, 630], "link": [184, 222, 574, 577, 604, 608, 611], "huggingfac": [184, 222, 337, 577, 582, 586, 599, 600, 601, 602], "easi": [184, 222, 245, 291, 574, 576, 583, 618, 620, 623], "classifi": [184, 222, 253, 300, 301, 317, 577, 579, 616], "squad": [184, 195, 198, 201, 222, 237, 250, 251, 253, 298, 299, 300, 301, 577, 591, 625, 629], "distilbert": [184, 222, 530, 577, 618, 629], "xlnet": [184, 222, 577], "xlm": [184, 222, 577, 629], "101": [184, 222, 253, 300, 301, 591, 629], "2043": [184, 222], "2001": [184, 222], "onnxrtbertdataset": [184, 222], "data_dir": [184, 222, 577], "model_name_or_path": [184, 222, 337, 577, 599, 600], "max_seq_length": [184, 195, 198, 201, 222, 237, 577, 625], "128": [184, 187, 188, 195, 198, 201, 222, 225, 226, 237, 577, 620, 625], "do_lower_cas": [184, 195, 198, 200, 201, 222, 236, 237, 577, 625], "mrpc": [184, 222, 253, 301, 577, 591, 599, 629], "dynamic_length": [184, 222, 577], "shortcut": [184, 222, 577], "length": [184, 195, 198, 201, 222, 237, 246, 249, 267, 294, 297, 530, 551, 577, 591, 618, 620, 625], "token": [184, 195, 198, 201, 222, 233, 235, 237, 245, 246, 247, 267, 293, 294, 295, 337, 509, 513, 551, 574, 577, 591, 623, 625, 626], "truncat": [184, 195, 198, 201, 222, 237, 577, 625], "shorter": [184, 195, 198, 201, 222, 237, 577, 625], "lowercas": [184, 222, 577], "choic": [184, 222, 531, 574, 577, 591], "qqp": [184, 222, 577, 591, 629], "qnli": [184, 222, 577, 591, 629], "rte": [184, 222, 577, 591, 629], "st": [184, 222, 577, 591], "cola": [184, 222, 577, 591, 629], "mnli": [184, 222, 577, 591, 629], "wnli": [184, 222, 577, 591, 629], "mobilebert": [184, 222, 577, 579, 629], "roberta": [184, 222, 577, 629], "uncas": [184, 195, 198, 201, 222, 237, 577, 625, 629], "load_and_cache_exampl": [184, 222], "cach": [184, 222, 246, 294, 337, 426, 513, 551, 584, 620], "convert_examples_to_featur": [184, 201, 222, 237], "max_length": [184, 222], "label_list": [184, 222, 253, 301], "output_mod": [184, 222], "classif": [184, 201, 222, 237, 253, 289, 300, 301, 579, 586, 591, 600, 618], "pad_token": [184, 222], "pad_token_segment_id": [184, 222], "mask_padding_with_zero": [184, 222], "inputfeatur": [184, 201, 222, 237], "input_id": [184, 201, 222, 237], "vocabulari": [184, 195, 198, 200, 201, 222, 236, 237, 267, 625], "attention_mask": [184, 222], "NOT": [184, 222, 585, 589], "token_type_id": [184, 222], "segment": [184, 222, 247, 249, 295, 297], "portion": [184, 222], "problem": [184, 222, 253, 260, 301, 591, 592, 612], "regress": [184, 222], "seq_length": [184, 222], "to_json_str": [184, 222], "json": [184, 185, 195, 198, 201, 222, 223, 237, 351, 469, 471, 479, 486, 496, 577, 593, 612, 625], "tensorflowbertdataset": [184, 222], "root": [184, 185, 186, 189, 190, 195, 222, 223, 224, 227, 253, 259, 301, 303, 304, 305, 307, 309, 310, 311, 331, 513, 576, 577, 581, 591, 628], "label_fil": [184, 195, 198, 201, 222, 237, 577, 625], "tfrecord": [184, 185, 186, 190, 195, 222, 223, 224, 228, 233, 577], "guid": [184, 222, 527, 530, 577, 579, 589, 594, 602, 611, 630], "parsedecodebert": [184, 222], "tensorflowmodelzoobertdataset": [184, 185, 222, 223], "num_cor": [184, 185, 189, 190, 195, 222, 223, 227, 577], "28": [184, 185, 189, 190, 195, 222, 223, 227, 577, 629], "coco": [185, 190, 192, 194, 195, 196, 198, 223, 230, 249, 253, 297, 301, 591], "parsedecodecoco": [185, 223], "cocorecorddataset": [185, 190, 195, 223], "directori": [185, 186, 190, 195, 223, 224, 310, 337, 340, 341, 405, 458, 479, 496, 509, 577, 581, 584, 604, 606, 608, 609, 624], "interleav": [185, 190, 195, 223, 577], "parallel": [185, 190, 195, 223, 577], "cocoraw": [185, 223, 576, 577], "img_dir": [185, 223, 577], "val2017": [185, 223, 577], "anno_dir": [185, 223, 577], "annot": [185, 223, 249, 297, 577, 591], "instances_val2017": [185, 223, 577], "wai": [185, 186, 189, 190, 195, 223, 224, 227, 528, 574, 576, 577, 591, 594, 597, 612, 614, 616, 617, 620, 626, 628], "jpg": [185, 189, 191, 223, 227, 229, 577], "imag": [185, 186, 189, 191, 195, 197, 198, 201, 223, 224, 227, 229, 234, 237, 249, 261, 297, 494, 574, 577, 581, 619, 624, 625, 629], "coconpi": [185, 223, 577], "npy_dir": [185, 223, 577], "npy": [185, 223, 577], "tensorflowdataset": [186, 224], "pytorchdataset": [186, 224], "mxnetdataset": [186, 224], "onnxrtqldataset": [186, 224], "qlinear": [186, 193, 224, 231, 253, 301, 309, 531, 583, 601, 629], "onnxrtitdataset": [186, 224], "IT": [186, 193, 224, 231, 618], "pytorchmxnetwrapdataset": [186, 224], "datafunc": [186, 224], "pytorchmxnetwrapfunct": [186, 201, 224, 237], "framework_dataset": [186, 224], "convent": [186, 224, 249, 297, 579], "imageclassifi": [186, 224], "choos": [186, 224, 323, 574, 588, 589, 599, 622, 626, 628], "tensorflow_itex": [186, 189, 190, 191, 193, 194, 195, 224, 227, 228, 229, 231, 232, 233, 619], "onnxrt_qdq": [186, 190, 193, 194, 195, 224, 228, 231, 232, 233, 619], "onnxrt_qlinearop": [186, 190, 193, 194, 195, 201, 224, 228, 231, 232, 233, 237, 619], "onnxrt_integerop": [186, 190, 193, 194, 195, 201, 224, 228, 231, 232, 233, 237, 619], "pytorch_ipex": [186, 190, 193, 194, 195, 224, 228, 231, 232, 233, 619, 628], "pytorch_fx": [186, 190, 193, 194, 195, 224, 228, 231, 232, 233, 619], "dataset_registri": [186, 190, 195, 224, 228, 233], "dataset_typ": [186, 190, 195, 224, 228, 233, 244, 245, 255, 291, 364], "dataset_format": [186, 190, 195, 224, 228, 233], "raw_imag": [186, 190, 195, 224, 228, 233], "overwrit": [186, 190, 195, 224, 228, 233, 604, 608], "download_url": [186, 224], "filenam": [186, 224, 259, 341, 342, 442, 458, 465, 471, 481, 489, 577], "md5": [186, 224], "download": [186, 224, 337, 417, 440, 441, 443, 444, 477, 574, 577, 589, 622], "address": [186, 224, 513, 525, 574, 592, 618], "gen_bar_updat": [186, 224], "bar": [186, 224, 574, 611], "check_integr": [186, 224], "fpath": [186, 224], "checksum": [186, 224], "calculate_md5": [186, 224], "chunk_siz": [186, 224], "cifar10": [186, 224, 577], "cifar100": [186, 224, 577], "automat": [186, 189, 195, 196, 197, 198, 224, 227, 234, 244, 245, 254, 261, 291, 302, 313, 527, 530, 574, 575, 577, 588, 592, 594, 596, 599, 600, 602, 604, 605, 606, 608, 609, 611, 614, 617, 625, 626], "www": [186, 224, 577, 629], "toronto": [186, 224, 577], "edu": [186, 224, 577], "kriz": [186, 224, 577], "cifar": [186, 224, 577, 629], "tar": [186, 224, 577, 606, 609], "gz": [186, 224, 577, 606, 609], "subset": [186, 189, 224, 227, 577], "internet": [186, 224, 574, 577], "put": [186, 224, 577, 579, 616], "again": [186, 224, 577, 621], "load_meta": [186, 224], "pytorchcifar10": [186, 224], "mxnetcifar10": [186, 224], "tensorflowcifar10": [186, 224], "pytorchcifar100": [186, 224], "mxnetcifar100": [186, 224], "tensorflowcifar100": [186, 224], "mnist": [186, 224, 577, 581], "nation": [186, 224, 525], "institut": [186, 224], "standard": [186, 195, 198, 201, 224, 237, 337, 583, 591, 625, 626], "technologi": [186, 224, 615], "fashionmnist": [186, 224, 577], "npz": [186, 224, 577], "idx1": [186, 224, 577], "ubyt": [186, 224, 577], "idx3": [186, 224, 577], "t10k": [186, 224, 577], "class_to_idx": [186, 224], "read_data": [186, 224], "pytorchmnist": [186, 224], "mxnetmnist": [186, 224], "tensorflowmnist": [186, 224], "pytorchfashionmnist": [186, 224], "mxnetfashionmnist": [186, 224], "tensorflowfashionmnist": [186, 224], "imagefold": [186, 224, 577, 581], "subfold": [186, 224], "belong": [186, 224, 242, 306, 620], "class_1": [186, 224, 577], "xxx": [186, 224, 526, 577], "png": [186, 224, 577], "xxy": [186, 224, 577], "xxz": [186, 224, 577], "class_n": [186, 224, 577], "123": [186, 224, 577, 625], "nsdf3": [186, 224, 577], "asd932_": [186, 224, 577], "mxnetimagefold": [186, 224], "tensorflowtfrecorddataset": [186, 224], "tensorflowimagerecord": [186, 190, 195, 224], "imagenet": [186, 189, 190, 195, 197, 198, 224, 227, 234, 261, 528, 574, 600, 624, 625, 628, 629], "000": [186, 190, 195, 224, 530, 577], "001": [186, 190, 195, 224, 577, 581, 628], "099": [186, 190, 195, 224, 577], "tensorflowvocrecord": [186, 224], "pascal": [186, 224], "voc": [186, 224, 253, 301], "2012": [186, 224], "00000": [186, 224], "00004": [186, 224], "00001": [186, 224], "00003": [186, 224], "dummydataset": [187, 188, 225, 226], "float32": [187, 188, 201, 225, 226, 237, 249, 297, 494, 531, 575, 577, 620, 625], "stand_norm": [187, 188, 225, 226, 577], "dummy_v2": [188, 226, 576, 577], "sparse_dummy_v2": [188, 226, 577], "label_shap": [188, 226, 577], "sparsedummydataset": [188, 226], "dense_shap": [188, 226, 577], "sparse_ratio": [188, 226, 577], "imagenetraw": [189, 227, 577], "data_path": [189, 227, 577], "image_list": [189, 227, 577], "img1": [189, 227, 577], "img2": [189, 227, 577], "imgx": [189, 227, 577], "val_map": [189, 227, 577], "txt": [189, 227, 489, 574, 577, 589], "pytorchimagenetraw": [189, 227], "mxnetimagenetraw": [189, 227], "tensorflowimagenetraw": [189, 227], "inteltensorflow": [189, 191, 227, 229, 589], "tensorflowimagenetdataset": [189, 227], "onnxrtimagenetdataset": [189, 227], "bert_dataset": [190, 195, 228, 233, 245, 293], "coco_dataset": [190, 195, 228, 233, 245, 293], "dummy_dataset": [190, 195, 228, 233, 245, 293], "dummy_dataset_v2": [190, 195, 228, 233, 245, 293], "imagenet_dataset": [190, 195, 228, 233, 245, 293], "style_transfer_dataset": [190, 195, 228, 233, 245, 293], "styletransferdataset": [191, 229], "content_fold": [191, 229, 577], "style_fold": [191, 229, 577], "crop_ratio": [191, 229, 577], "resize_shap": [191, 229, 577], "256": [191, 195, 197, 198, 229, 234, 577, 581, 625], "image_format": [191, 229, 577], "holder": [191, 229, 577], "labelbalancecocorecordfilt": [192, 194, 195, 230], "labelbalancecocorawfilt": [192, 230], "tensorflowfilt": [193, 231], "onnxrtqlfilt": [193, 231], "onnxrtitfilt": [193, 231], "pytorchfilt": [193, 231], "mxnetfilt": [193, 231], "filter_registri": [193, 194, 195, 231, 232, 233], "filter_typ": [193, 194, 195, 231, 232, 233], "__call__": [193, 194, 195, 231, 232, 233], "coco_filt": [194, 195, 232, 233, 245, 293], "imagenet_transform": [195, 198, 233, 235, 245, 293], "transform_cl": [195, 198, 201, 233, 235, 237], "basetransform": [195, 196, 197, 198, 201, 233, 234, 235, 237], "composetransform": [195, 198, 201, 237], "transform_list": [195, 198, 201, 237, 625], "transform_registri": [195, 198, 201, 233, 235, 237], "transform_typ": [195, 198, 201, 233, 235, 237], "postprocess_cl": [195, 198, 199, 205, 209], "user_postprocess": [195, 198, 199, 205, 209], "labelshift": [195, 197, 198, 234, 499, 625], "label_shift": [195, 197, 198, 234, 625], "bilinearimagenettransform": [195, 197, 198, 234], "central_fract": [195, 197, 198, 234, 625], "875": [195, 197, 198, 234, 625], "mean_valu": [195, 197, 198, 234, 625], "seri": [195, 197, 198, 234, 530, 589, 625], "applic": [195, 197, 198, 234, 480, 509, 511, 513, 574, 583, 594, 611, 618, 624, 625], "fraction": [195, 197, 198, 234, 625], "crop": [195, 197, 198, 201, 234, 237, 577, 625], "std": [195, 197, 198, 201, 234, 237, 261, 625], "tensorflowresizecropimagenettransform": [195, 197, 198, 234], "random_crop": [195, 197, 198, 234, 625], "resize_sid": [195, 197, 198, 234, 625], "resize_method": [195, 197, 198, 234], "bilinear": [195, 197, 198, 201, 234, 237, 625], "random_flip_left_right": [195, 197, 198, 234, 625], "channels_last": [195, 197, 198, 234, 594], "subpixel": [195, 197, 198, 234], "rgb": [195, 197, 198, 234], "desir": [195, 197, 198, 201, 234, 237, 267, 625], "flip": [195, 197, 198, 201, 234, 237, 625], "right": [195, 197, 198, 234, 249, 297, 494, 525, 527, 574, 611, 625], "tfsquadv1posttransform": [195, 198, 201, 237], "vocab_fil": [195, 198, 200, 201, 236, 237, 625], "n_best_siz": [195, 198, 201, 237, 625], "20": [195, 198, 201, 237, 260, 261, 589, 615, 625, 628, 629], "384": [195, 198, 201, 237, 625], "max_query_length": [195, 198, 201, 237, 625], "64": [195, 198, 201, 237, 528, 625, 629], "max_answer_length": [195, 198, 201, 237, 625], "30": [195, 198, 201, 237, 582, 586, 588, 625, 629], "doc_strid": [195, 198, 201, 237, 625], "nbest_predict": [195, 198, 201, 237, 625], "wordpiec": [195, 198, 200, 201, 236, 237, 625], "question": [195, 198, 201, 237, 250, 251, 298, 299, 525, 526, 531, 589, 594, 625, 629], "answer": [195, 198, 201, 237, 250, 251, 298, 299, 525, 625, 629], "lower": [195, 198, 200, 201, 236, 237, 251, 299, 317, 496, 580, 616, 617, 618, 620, 625, 626], "long": [195, 198, 201, 237, 584, 625], "document": [195, 198, 201, 237, 526, 581, 592, 596, 606, 609, 610, 622, 625], "chunk": [195, 198, 201, 237, 625], "process_result": [195, 198, 201, 237], "get_postprocess_result": [195, 198, 201, 237], "tfsquadv1modelzooposttransform": [195, 198, 201, 237], "squadv1": [195, 198, 201, 237, 625], "tensorflowresizewithratio": [195, 198, 201, 237], "min_dim": [195, 198, 201, 237, 625], "800": [195, 198, 201, 237, 625], "max_dim": [195, 198, 201, 237, 625], "1365": [195, 198, 201, 237, 625, 629], "constant_valu": [195, 198, 201, 237], "aspect": [195, 197, 198, 201, 234, 237, 625], "side": [195, 198, 201, 237, 267, 574, 577, 605, 625], "exce": [195, 198, 201, 237, 625], "resizetftransform": [195, 198, 201, 237], "nearest": [195, 198, 201, 237, 625], "bicub": [195, 198, 201, 237, 625], "rescaletftransform": [195, 198, 201, 237], "normalizetftransform": [195, 198, 201, 237], "rescal": [195, 198, 201, 237, 625], "deviat": [195, 198, 201, 237, 625], "broadcast": [195, 198, 201, 237, 581, 625], "parsedecodecocotransform": [195, 196, 198], "decod": [195, 196, 197, 198, 234, 246, 267, 294, 551, 591, 625], "quantizedinput": [197, 234, 625], "parsedecodeimagenet": [197, 234, 625], "proto": [197, 201, 234, 237, 625], "parsedecodeimagenettransform": [197, 234], "onnxbilinearimagenettransform": [197, 234], "onnxresizecropimagenettransform": [197, 234], "std_valu": [197, 234], "229": [197, 234, 629], "224": [197, 234, 261, 530, 576, 577, 581, 583, 586, 594, 625, 628, 629], "225": [197, 234, 629], "resizewithaspectratio": [197, 234], "87": [197, 234, 629], "inter_pol": [197, 234], "cv2": [197, 234], "inter_area": [197, 234], "convert_to_unicod": [200, 236], "unicod": [200, 236, 246, 294], "load_vocab": [200, 236], "convert_by_vocab": [200, 236], "vocab": [200, 236, 267], "whitespace_token": [200, 236], "whitespac": [200, 236, 251, 299], "piec": [200, 236, 246, 294, 551, 583, 591], "fulltoken": [200, 236], "tokenzi": [200, 236], "convert_tokens_to_id": [200, 236], "convert_ids_to_token": [200, 236], "basictoken": [200, 236], "punctuat": [200, 236, 246, 251, 294, 299], "wordpiecetoken": [200, 236], "unk_token": [200, 236], "unk": [200, 236], "max_input_chars_per_word": [200, 236], "200": [200, 236, 527, 626], "word": [200, 236, 246, 294, 551, 591], "greedi": [200, 236], "unaff": [200, 236], "un": [200, 236], "aff": [200, 236], "separ": [200, 236, 512, 525, 574, 587, 590, 614, 619], "concat_gener": [201, 237], "tensorflowtransform": [201, 237], "mxnettransform": [201, 237], "pytorchtransform": [201, 237], "onnxrtqltransform": [201, 237], "onnxrtittransform": [201, 237], "tensorflowwrapfunct": [201, 237], "transform_func": [201, 237], "pytorchmxnettransform": [201, 237], "get_torchvision_map": [201, 237], "torchvis": [201, 237, 261, 574, 582, 586, 594, 600], "croptoboundingbox": [201, 237, 625], "offset_height": [201, 237, 625], "offset_width": [201, 237, 625], "target_height": [201, 237, 625], "target_width": [201, 237, 625], "box": [201, 237, 249, 253, 297, 300, 301, 316, 527, 574, 591, 594, 605, 611, 624, 625, 626], "coordin": [201, 237, 316, 625], "corner": [201, 237, 531, 625], "horizont": [201, 237, 625], "mxnetcroptoboundingbox": [201, 237], "onnxrtcroptoboundingbox": [201, 237], "tensorflowcroptoboundingbox": [201, 237], "resizewithratio": [201, 237, 625], "perm": [201, 237, 625], "tensorflowtranspos": [201, 237], "mxnettranspos": [201, 237], "pytorchtranspos": [201, 237], "randomverticalflip": [201, 237, 625], "randomli": [201, 237, 271, 316, 323, 528, 625, 626], "tensorflowrandomverticalflip": [201, 237], "randomhorizontalflip": [201, 237, 625], "tensorflowrandomhorizontalflip": [201, 237], "toarrai": [201, 237, 625], "pil": [201, 237, 625], "casttftransform": [201, 237], "castonnxtransform": [201, 237], "castpytorchtransform": [201, 237], "centercroptftransform": [201, 237], "center": [201, 237, 529, 530, 589, 625, 626], "paddedcentercroptransform": [201, 237], "crop_pad": [201, 237], "resizepytorchtransform": [201, 237], "randomcroptftransform": [201, 237], "randomresizedcroppytorchtransform": [201, 237], "randomresizedcropmxnettransform": [201, 237], "randomresizedcroptftransform": [201, 237], "pramet": [201, 237], "rescalekeraspretraintransform": [201, 237], "rescaletransform": [201, 237], "alignimagechanneltransform": [201, 237], "align": [201, 237, 289, 525, 625], "w": [201, 237, 261, 616, 617, 625], "pytorchalignimagechannel": [201, 237], "tondarraytransform": [201, 237], "resizemxnettransform": [201, 237], "resizetransform": [201, 237], "cropresizetftransform": [201, 237], "boundari": [201, 237, 394, 625], "area": [201, 237, 249, 297, 591, 625], "pytorchcropresizetransform": [201, 237], "mxnetcropresizetransform": [201, 237], "cropresizetransform": [201, 237], "centercroptransform": [201, 237], "mxnetnormalizetransform": [201, 237], "pytorchnormalizetransform": [201, 237], "normalizetransform": [201, 237], "randomcroptransform": [201, 237], "randomresizedcroptransform": [201, 237], "get_final_text": [201, 237], "pred_text": [201, 237], "orig_text": [201, 237], "project": [201, 237, 267, 361, 364, 369, 371, 372, 375, 382, 383, 387, 388, 389, 390, 391, 392, 393, 417, 524, 525, 526, 618, 623, 626, 630], "squadexampl": [201, 237], "qas_id": [201, 237], "question_text": [201, 237], "doc_token": [201, 237], "orig_answer_text": [201, 237], "start_posit": [201, 237], "end_posit": [201, 237], "is_imposs": [201, 237], "simpl": [201, 237, 574, 589, 623, 626], "unique_id": [201, 237], "example_index": [201, 237], "doc_span_index": [201, 237], "token_to_orig_map": [201, 237], "token_is_max_context": [201, 237], "segment_id": [201, 237], "read_squad_exampl": [201, 237], "input_fil": [201, 237], "output_fn": [201, 237], "inputbatch": [201, 237], "collecttransform": [201, 237], "10833": [201, 237], "tfmodelzoocollecttransform": [201, 237], "parsedecodevoctransform": [201, 237], "conf_fname_or_obj": [202, 211, 238, 244, 245, 254, 255, 256, 257, 268, 269, 278, 283, 291, 292], "unnecessari": [202, 245], "call_on": [202, 245, 481], "cmd": [202, 245, 489, 612], "log_fil": [202, 245], "window": [202, 245, 575, 611, 612], "tensorflowcrossentropyloss": 203, "pytorchcrossentropyloss": 203, "tensorflowsparsecategoricalcrossentropi": 203, "sparsecategoricalcrossentropyloss": 203, "setter": [204, 205], "calib_dataload": [204, 205, 245, 291, 292, 311, 313, 527, 530, 576, 577, 586, 587, 591, 620, 621], "known": [204, 205, 316, 583, 616, 624, 626], "open": [205, 245, 293, 334, 489, 523, 525, 530, 574, 583, 584, 606, 609, 612, 618], "librari": [205, 245, 293, 523, 526, 530, 589, 596, 605, 611, 618, 620], "metric_cl": [205, 206, 252, 253, 300, 301], "user_metr": [205, 206, 300, 301], "alwai": [205, 206, 249, 297, 300, 301, 591], "recommend": [205, 206, 300, 301, 531, 577, 583, 585, 602, 605, 610, 612, 616, 619, 626], "set_backend": 207, "tensorflowoptim": 208, "pytorchoptim": 208, "optimizer_cl": 208, "allow": [208, 309, 316, 337, 513, 574, 579, 581, 591, 592, 619, 628], "optimizer_registri": 208, "optimizer_typ": 208, "cross": [208, 252, 253, 300, 301, 587, 626], "tensorflowsgd": 208, "tensorflowadamw": 208, "tensorflow_addon": 208, "adamw": 208, "tensorflowadam": 208, "adam": [208, 628], "pytorchsgd": 208, "record_output": 210, "output_process": 210, "get_activ": 210, "train_dataload": [211, 245, 616], "prepare_qat": [211, 245], "compress": [211, 245, 278, 283, 293, 312, 331, 523, 530, 579, 588, 611, 613, 614, 616, 617, 618, 620], "post_process": [211, 245], "pre_epoch_begin": [211, 245, 278, 283], "post_epoch_end": [211, 245, 278, 283], "on_batch_begin": [211, 245, 278, 283], "on_post_grad": [211, 245], "on_batch_end": [211, 245, 278, 283], "tensorflowimagefold": 224, "evaluation_distribut": [238, 245, 278, 283], "train_distribut": [238, 245, 278, 283], "on_post_forward": [238, 245], "deprec": [238, 245, 496, 606, 609, 625], "create_optim": [238, 245], "disil": [238, 245], "qlinear2qdq": [239, 245, 293], "torch_to_fp32_onnx": [239, 242], "do_constant_fold": [239, 242, 311], "verbos": [239, 242, 258, 259, 260, 311, 316], "int8_model": [239, 241, 242, 531], "ax": [239, 242, 311], "torch_to_int8_onnx": [239, 242], "u8s8": [239, 242], "optionl": [239, 242], "qdq_op_int32_bia": [239, 242, 583], "qdq_op_fp32_bias_qdq": [239, 242, 583], "onnx_qlinear_to_qdq": [239, 240], "input_name_to_nod": [239, 240, 309], "qlinearop": [239, 240, 588, 602, 620], "tf_to_fp32_onnx": [239, 241], "tf_to_int8_onnx": [239, 241], "check_model": 240, "update_weight_bia": 242, "fp32_onnx_path": [242, 243], "wegiht": 242, "set_data_typ": 242, "weight_typ": 242, "activation_typ": 242, "get_node_map": 242, "module_node_map": 242, "get_quantizable_onnx_op": 242, "quantize_nod": 242, "build_scale_map": 242, "int8_scale_info": 242, "scale_zp_dict": 242, "set_scale_info": 242, "int8_onnx_model": 242, "int8_onnx_path": 242, "recalculate_bia": 242, "remove_nodes_by_nam": 242, "sub_graph_with_int32_bia": 242, "a_info": 242, "b_info": 242, "qdq_fp32_bia": 242, "excut": 242, "qdq_int32_bia": 242, "qdq_fp32_bias_qdq": 242, "onnx2numpy_dtyp": 243, "onnx_node_typ": 243, "dummydataread": 243, "achiev": [244, 245, 291, 313, 583, 591, 614, 616, 617, 618, 620, 624, 626], "variou": [244, 245, 254, 291, 302, 313, 588, 594, 617, 619], "dl": [244, 245, 254, 278, 283, 291, 302, 313, 587, 598, 611, 618], "bring": [244, 245, 291, 313, 605, 620], "unifi": [244, 245, 291, 313, 488, 531, 576, 587, 588, 593], "work": [244, 245, 278, 283, 291, 313, 529, 576, 579, 606, 609, 616, 617, 621, 622, 624], "sinc": [244, 245, 246, 278, 283, 291, 294, 313, 337, 465, 551, 579, 583, 589, 591, 605, 611, 614], "vari": [244, 245, 278, 283, 291, 313, 615, 629], "roc": [244, 245, 253, 278, 283, 291, 301, 313], "footprint": [244, 245, 278, 283, 291, 312, 313, 580, 613, 616, 617, 619], "flexibl": [244, 245, 278, 283, 291, 579, 616, 617], "set_config_by_model": [244, 245, 254], "model_obj": [244, 245, 254], "popular": [245, 293, 523, 530, 531, 579, 582, 583, 586, 616, 620, 626], "techniqu": [245, 293, 523, 530, 588, 594, 614, 616, 617, 619, 620, 628], "bleu": [245, 247, 252, 266, 293, 295, 300, 591], "bleu_util": [245, 252, 293, 300], "coco_label_map": [245, 252, 293, 300], "coco_tool": [245, 252, 293, 300], "evaluate_squad": [245, 252, 293, 300], "dynast": [245, 268, 293], "supernetwork": [245, 258, 261, 262, 268], "dynas_manag": [245, 261, 262, 268], "dynas_predictor": [245, 261, 262, 268], "dynas_search": [245, 262, 268], "dynas_util": [245, 260, 262, 268], "basic_na": [245, 268, 293], "dyna": [245, 258, 259, 260, 261, 262, 268, 293, 528, 588, 619], "nas_util": [245, 268, 293], "pruner_legaci": [245, 293], "gradient_sensit": [245, 274, 293], "group_lasso": [245, 274, 293], "pattern_lock": [245, 274, 293], "pruning_recip": [245, 293], "tile_pattern": [245, 279, 280], "pytorch_prun": [245, 293], "logger": [245, 284, 293, 332, 335, 341, 477, 481, 485], "prune_util": [245, 284, 293], "graph_optim": [245, 254, 293, 348, 417, 452, 456, 457, 477, 485, 501], "mixed_precis": [245, 293, 350, 417, 452, 477, 485, 501], "model_convers": [245, 293], "pruning_v2": [245, 293], "quantconf": [245, 291, 302], "qfunc": [245, 291], "distributed_execut": [245, 291], "pruningconf": [245, 278, 283], "pruning_func": [245, 278, 283], "update_items_for_all_prun": [245, 278, 289], "howev": [245, 278, 283, 289, 583, 616], "still": [245, 278, 283, 289, 620, 621], "analys": [245, 278, 283, 289], "generate_prun": [245, 278, 283], "flow": [245, 250, 251, 278, 283, 298, 299, 527, 528], "graphoptim": [245, 254, 348, 449, 500], "privat": [245, 254, 302, 525], "member": [245, 254, 302, 525, 531], "modelconvers": [245, 255, 560], "unicoderegex": [246, 294], "hoc": [246, 294], "hack": [246, 294], "nondigit_punct_r": [246, 294], "compil": [246, 294, 615], "preced": [246, 294], "digit": [246, 294, 618], "punct_nondigit_r": [246, 294], "symbol_r": [246, 294], "property_char": [246, 294], "join": [246, 294], "bleu_token": [246, 294], "mose": [246, 294], "smt": [246, 294], "mosesdecod": [246, 294], "mteval": [246, 294], "v14": [246, 294], "pl": [246, 294], "l954": [246, 294], "l983": [246, 294], "bilingu": [246, 294, 551], "understudi": [246, 294, 551], "qualiti": [246, 294, 551], "machin": [246, 264, 294, 356, 551, 574, 583, 589, 597, 611, 618, 624], "natur": [246, 294, 551], "approxim": [246, 247, 294, 295, 551, 591], "glue": [246, 253, 294, 301, 551, 577, 591, 600], "ngram": [246, 294, 551, 591], "breviti": [246, 247, 294, 295, 551, 591], "penalti": [246, 247, 294, 295, 551, 591], "doe": [246, 249, 258, 294, 297, 314, 322, 551, 577, 591, 622, 625], "beam": [246, 294, 551, 591], "occur": [246, 294, 551], "bleu_scor": [246, 247, 294, 295, 551], "tensor2tensor": [247, 267, 295], "bleu_hook": [247, 295], "compute_bleu": [247, 266, 295], "reference_corpu": [247, 295], "translation_corpu": [247, 295], "max_ord": [247, 295], "use_bp": [247, 295], "against": [247, 295], "gram": [247, 295], "flag": [247, 295, 331, 506], "pycocotool": [249, 297, 584, 589], "object_detect": [249, 297], "noth": [249, 297, 489, 626], "thu": [249, 297, 620], "cannot": [249, 297, 484, 527, 583, 584, 624], "slim": [249, 297, 308, 310, 593], "jonathanhuang": [249, 297], "image_id": [249, 297, 591], "groundtruth": [249, 297], "invok": [249, 297], "groundtruth_dict": [249, 297], "exportgroundtruthtococo": [249, 297], "groundtruth_boxes_list": [249, 297], "groundtruth_classes_list": [249, 297], "max_num_class": [249, 297], "output_path": [249, 297, 309, 489], "detections_list": [249, 297], "exportdetectionstococo": [249, 297], "detection_boxes_list": [249, 297], "detection_scores_list": [249, 297], "detection_classes_list": [249, 297], "cocowrapp": [249, 297], "loadannot": [249, 297], "cocoevalwrapp": [249, 297], "agnostic_mod": [249, 297], "computemetr": [249, 297], "detection_typ": [249, 297], "bbox": [249, 297, 527, 591], "hold": [249, 297, 309, 316, 577], "datastructur": [249, 297], "mscoco": [249, 297], "replic": [249, 297], "behavior": [249, 297, 525, 526, 531, 585, 593, 624, 628], "extern": [249, 297, 309, 574], "storag": [249, 297, 530, 586, 591], "category_id": [249, 297], "iou_typ": [249, 297], "iou_thr": [249, 253, 297, 300, 301, 591], "map_point": [249, 253, 297, 300, 301, 591], "cocoev": [249, 297], "Then": [249, 297, 324, 574, 604, 606, 608, 609, 626], "getcategori": [249, 297], "getagnosticmod": [249, 297], "agnost": [249, 297, 579], "getcategoryidlist": [249, 297], "accumul": [249, 297, 315, 326, 327, 626], "p": [249, 297, 574, 612], "include_metrics_per_categori": [249, 297], "all_metrics_per_categori": [249, 297], "summeri": [249, 297], "per_category_ap": [249, 297], "care": [249, 297], "hand": [249, 297, 528, 574], "pollut": [249, 297], "mldash": [249, 297], "summary_metr": [249, 297], "iou": [249, 253, 297, 301], "increment": [249, 265, 267, 297, 315, 626], "50iou": [249, 297], "50": [249, 251, 260, 297, 299, 528, 629], "75iou": [249, 297], "75": [249, 297, 629], "32": [249, 297, 581, 587, 615, 616, 629], "pixel": [249, 297, 625], "medium": [249, 297, 618], "96": [249, 297, 629], "10000": [249, 297, 316], "recal": [249, 251, 253, 297, 299, 301], "bycategori": [249, 297], "supercategori": [249, 297], "backward": [249, 297, 331, 579, 580, 581, 614, 616, 620, 622], "performancebycategori": [249, 297], "regardless": [249, 297, 525], "category_stat": [249, 297], "exportsingleimagegroundtruthtococo": [249, 297], "next_annotation_id": [249, 297], "category_id_set": [249, 297], "groundtruth_box": [249, 297], "groundtruth_class": [249, 297], "groundtruth_mask": [249, 297], "groundtruth_is_crowd": [249, 297], "ingest": [249, 297], "ones": [249, 297, 617], "exportsingleimagedetectionstococo": [249, 297], "assign": [249, 297, 311, 324, 341, 382, 383, 388, 389, 390, 391, 574, 581, 619], "num_gt_box": [249, 297], "num_detect": [249, 253, 297, 300, 301, 591, 628], "image_height": [249, 297], "image_width": [249, 297], "detection_mask": [249, 297], "crowd": [249, 297], "exportsingleimagedetectionboxestococo": [249, 297], "detection_box": [249, 297, 628], "detection_scor": [249, 297, 628], "detection_class": [249, 297, 628], "exporsingleimagedetectionboxestococo": [249, 297], "exportsingleimagedetectionmaskstococo": [249, 297], "allenai": [250, 251, 298, 299], "bi": [250, 251, 298, 299], "att": [250, 251, 298, 299], "f1_score": [250, 251, 298, 299], "ground_truth": [250, 251, 298, 299], "metric_max_over_ground_truth": [250, 251, 298, 299], "metric_fn": [250, 251, 298, 299], "exact_match_scor": [250, 298], "exact": [250, 298], "articl": [250, 251, 298, 299], "paragraph": [250, 251, 298, 299], "qa": [250, 251, 298, 299], "cantain": [250, 251, 298, 299], "normalize_answ": [251, 299], "newlin": [251, 299], "tab": [251, 299, 385, 388, 394, 512, 611, 624], "harmon": [251, 253, 299, 301], "answer_start": [251, 299], "177": [251, 299], "denver": [251, 299], "bronco": [251, 299], "nfl": [251, 299], "team": [251, 299, 525, 621], "afc": [251, 299], "super": [251, 258, 261, 299, 528], "bowl": [251, 299], "56be4db0acb8001400a502ec": [251, 299], "percentag": [251, 259, 299, 628], "basemetr": [252, 253, 300, 301], "single_output": [252, 253, 300, 301], "hvd": [252, 253, 300, 301, 581], "sample_weight": [252, 253, 300, 301], "metric_registri": [252, 253, 300, 301], "metric_typ": [252, 253, 300, 301], "decorator_metr": [252, 253, 300, 301], "tensorflowmetr": [253, 301], "maintain": [253, 301, 525, 526, 530, 593, 594, 606, 609, 616, 622], "pytorchmetr": [253, 301], "mxnetmetr": [253, 301], "onnxrtqlmetr": [253, 301], "onnxrtitmetr": [253, 301], "wrappytorchmetr": [253, 301], "wrapmxnetmetr": [253, 301], "wraponnxrtmetr": [253, 301], "proport": [253, 301], "were": [253, 300, 301, 597], "pred_list": [253, 301], "pytorchloss": [253, 301], "sum": [253, 301, 579], "mae": [253, 301, 591], "numer": [253, 301, 592, 618, 620], "rmse": [253, 259, 301, 591, 626], "squar": [253, 259, 301, 321, 591, 626], "tensorflowtopk": [253, 300, 301], "k": [253, 300, 301, 591, 616], "among": [253, 300, 301, 605], "most": [253, 300, 301, 316, 574, 592, 616, 620, 626], "outcom": [253, 300, 301], "num_correct": [253, 300, 301], "generaltopk": [253, 300, 301], "cocomapv2": [253, 300, 301, 591], "anno_path": [253, 300, 301, 591], "map_kei": [253, 300, 301], "detectionboxes_precis": [253, 300, 301], "output_index_map": [253, 300, 301, 591], "tensorflowmap": [253, 301], "tensorflowcocomap": [253, 301], "tensorflowvocmap": [253, 301], "squadf1": [253, 300, 301, 591], "miou": [253, 301], "num_class": [253, 301], "21": [253, 301, 599, 600, 618, 629], "intersect": [253, 301, 531, 591], "hist": [253, 301, 336], "onnxrtglu": [253, 301], "dlrm": [253, 301], "basicna": [256, 268], "model_build": [256, 268, 269], "nasbas": [256, 257, 268, 269, 528], "conf_fnam": [256, 268], "init_by_cfg": [256, 268], "init_for_search": [257, 268], "select_model_arch": [257, 268, 269], "create_acc_predictor": [257, 268], "predictor": [257, 258, 259, 261, 268, 528], "create_macs_predictor": [257, 268], "mac": [257, 259, 261, 266, 268, 528, 612], "create_latency_predictor": [257, 268], "latenc": [257, 258, 259, 261, 266, 268, 494, 623, 626], "init_cfg": [257, 268], "manag": [258, 259, 260, 261, 324, 331, 334, 360, 393, 395, 418, 479, 495, 586, 594, 595, 605], "parametermanag": [258, 261], "hot": 258, "pymoo": [258, 260, 261, 574], "process_param_dict": 258, "upper": [258, 260, 611], "vector": [258, 269, 271], "onehot_gener": 258, "in_arrai": 258, "onehot": 258, "account": [258, 525, 623, 626], "depth": [258, 326, 328, 579, 621], "input_arrai": 258, "elast": 258, "mapper": [258, 382, 445, 446], "random_sampl": [258, 316], "subnetwork": [258, 261], "trial_limit": 258, "100000": 258, "translate2param": 258, "pymoo_vector": 258, "translate2pymoo": 258, "import_csv": 258, "filepath": 258, "column_nam": 258, "drop_dupl": 258, "panda": 258, "datafram": [258, 310, 311], "csv": [258, 261, 496, 528, 574], "purpos": [258, 585, 592, 611, 619], "subnet": [258, 261], "column": [258, 574, 616], "set_se": 258, "create_training_set": 258, "train_with_al": 258, "sklearn": 258, "transformerltencod": 258, "default_alpha": 259, "cost_factor": 259, "default_cost_factor": 259, "max_iter": 259, "default_max_iter": 259, "regressor": 259, "get_paramet": 259, "get_metr": [259, 334, 358], "mape": 259, "kendal": 259, "rank": [259, 581], "correl": 259, "spearman": 259, "searcher": [259, 271], "searchalgomanag": 260, "nsga2": [260, 528], "optuna": 260, "configure_nsga2": 260, "popul": [260, 528], "num_ev": [260, 528], "1000": [260, 494, 628], "warm_pop": 260, "crossover_prob": 260, "crossover_eta": 260, "mutation_prob": 260, "02": [260, 629], "mutation_eta": 260, "configure_ag": 260, "ag": [260, 525], "run_search": 260, "save_histori": 260, "previous": [260, 576], "problemmultiobject": 260, "evaluation_interfac": 260, "evaluationinterfac": [260, 261], "param_count": 260, "param_upperbound": 260, "supernet": [260, 261, 263, 264, 528], "ofa": [260, 261, 574], "mobilenetv3": [260, 261, 528], "45": [260, 527, 629], "mani": [260, 261, 312, 314, 315, 589, 626, 628], "get_mac": 261, "input_s": 261, "measure_lat": 261, "warmup_step": 261, "measure_step": 261, "resolut": 261, "warm": [261, 312], "runner": [261, 612], "ofarunn": 261, "acc_predictor": 261, "macs_predictor": 261, "latency_predictor": 261, "datasetpath": 261, "resnet50": [261, 530, 581, 586, 594, 598, 620, 623, 629], "w1": 261, "ilsvrc2012": [261, 528], "estimate_accuracy_top1": 261, "subnet_cfg": 261, "top1": [261, 620], "estimate_mac": 261, "estimate_lat": 261, "validate_top1": 261, "validate_mac": 261, "flop": 261, "fvcore": [261, 574], "get_subnet": 261, "transformerltrunn": 261, "checkpoint_path": [261, 266], "predictor_mod": 261, "csv_path": 261, "written": 261, "eval_subnet": 261, "clear_csv": 261, "evaluationinterfaceresnet50": 261, "evaluationinterfacemobilenetv3": 261, "evaluationinterfacetransformerlt": 261, "get_torchvision_model": 261, "torchvisionrefer": 261, "dataset_path": [261, 266, 497, 528], "baselin": [261, 312, 324, 334, 623, 624], "subprocess": [261, 489, 512], "machine_transl": [262, 263, 268], "transformer_interfac": [262, 263, 264], "lt": [264, 528, 577, 615, 629], "get_incremental_st": 265, "incremental_st": [265, 267], "set_incremental_st": 265, "multiheadattentionsup": 265, "super_embed_dim": 265, "num_head": 265, "is_encod": 265, "super_kdim": 265, "super_vdim": 265, "dropout": [265, 267], "add_bias_kv": [265, 267], "add_zero_attn": [265, 267], "self_attent": 265, "encoder_decoder_attent": 265, "out_dim": 265, "qkv_dim": 265, "head": [265, 267, 616], "key_padding_mask": 265, "need_weight": 265, "static_kv": 265, "attn_mask": [265, 267], "timestep": 265, "bytetensor": [265, 267], "src_len": [265, 267], "reorder_incremental_st": 265, "new_ord": [265, 267], "buffer": [265, 310], "compute_lat": 266, "get_model_paramet": 266, "compute_mac": 266, "transformersupernetwork": 267, "fairseq": 267, "vaswani": 267, "2017": 267, "1706": 267, "03762": 267, "transformerencod": 267, "transformerdecod": 267, "line": [267, 488, 489, 509, 574, 581, 588, 594, 599, 600, 616, 624], "encoder_config": 267, "embed_token": 267, "encoder_lay": 267, "transformerencoderlay": 267, "argpars": [267, 611], "namespac": 267, "src_token": 267, "src_length": 267, "longtensor": 267, "sentenc": 267, "encoder_out": 267, "embed_dim": 267, "encoder_padding_mask": 267, "reorder_encoder_out": 267, "rearrang": 267, "max_posit": 267, "upgrade_state_dict_nam": 267, "upgrad": 267, "old": [267, 289, 341, 622], "decoder_config": 267, "no_encoder_attn": 267, "decoder_lay": 267, "transformerdecoderlay": 267, "attend": 267, "prev_output_token": 267, "tgt_len": 267, "forc": [267, 337, 621], "extract_featur": 267, "output_lay": 267, "layer_idx": 267, "ffn": 267, "residu": 267, "suggest": [267, 271, 316, 527, 623], "learn": [267, 530, 531, 576, 577, 583, 587, 588, 589, 592, 594, 596, 599, 600, 602, 605, 606, 609, 611, 617, 618, 620, 624, 626], "robust": 267, "encoder_normalize_befor": 267, "norm": 267, "layer_norm": 267, "self_attn_layer_norm": 267, "final_layer_norm": 267, "seq_len": 267, "t_tgt": 267, "t_src": 267, "decoder_normalize_befor": 267, "prev_self_attn_st": 267, "prev_attn_st": 267, "self_attn_mask": 267, "self_attn_padding_mask": 267, "builder": [269, 310], "res_save_path": 269, "count_model_paramet": 269, "load_search_result": 269, "dump_search_result": 269, "params_vec2params_dict": [269, 271], "paras_vec": 269, "find_best_model_arch": 269, "lie": [269, 528], "pareto": [269, 270, 528], "front": [269, 270, 528], "metrics_convers": 269, "init_search_cfg": 269, "nas_registri": 270, "nas_method": 270, "create_search_space_pool": 270, "idx": [270, 309, 577], "enumer": [270, 331, 345, 446, 452, 478, 531, 579, 580, 581, 614, 616, 624], "find_pareto_front": 270, "n_point": 270, "n_metric": 270, "n_pareto_point": 270, "get_feedback": 271, "feedback": 271, "para_vec": 271, "gridsearch": 271, "grid": [271, 528], "whole": [271, 511, 574, 620], "exhaust": [271, 293, 320, 323, 619], "randomsearch": 271, "42": [271, 615, 629], "bayesianoptimizationsearch": 271, "bayesian": [271, 293, 318, 320, 528, 619], "indices2params_vec": 271, "gradientsensitivityprun": 272, "pytorchmodel": [272, 273, 275, 276, 277, 311], "overwritten": [272, 273, 275, 276, 277, 599], "elementwise_prun": 272, "parse_weight_nam": 272, "weight_name_pattern": 272, "compute_mask": [272, 275, 276], "prune_weight": 272, "update_importance_elementwis": 272, "update_importance_ab": 272, "update_importance_weight": 272, "prune_by_import": 272, "num_inst": 272, "grouplassoprun": 273, "basicmagnitudeprun": [273, 275], "legaci": 274, "accordingli": [275, 292, 602], "update_weight": [276, 310, 311], "pruner_registri": 277, "clase": 277, "update_spars": 277, "tfpruningcallback": [278, 283], "input_model": [278, 283, 593, 624], "pure": [278, 283, 592], "s_output": [278, 283], "s_loss": [278, 283], "t_output": [278, 283], "support_pattern": [279, 280, 281], "pattern_registri": 281, "pattern_typ": 281, "patternbas": [281, 282], "mask_shap": [281, 282], "is_contigu": 281, "compute_spars": [281, 282, 341], "abs_sum": 281, "abs_max": 281, "tile": 282, "tilepatternbas": 282, "matrix": [282, 530, 602, 617], "repeat_mask": 282, "ori_shap": 282, "repeat": [282, 626], "tilepattern_1x1": 282, "1x1": [282, 579, 616], "unstructur": [282, 588, 616, 617, 629], "tilepattern_2x2": 282, "2x2": 282, "tilepattern_1x16": 282, "1x16": 282, "tilepattern_4x1": 282, "tilepattern_1x2": 282, "1x2": 282, "max_sparsity_ratio_per_lay": [286, 288, 619], "get_mask_singl": 286, "reset_non_value_to_default": 287, "obejct": 287, "parse_not_to_prun": 287, "update_frequency_on_step": [288, 619], "judg": 288, "Or": 288, "simpli": [288, 581, 593, 594, 596, 599, 611], "update_scor": 288, "magnitudeprun": 288, "snipprun": 288, "snipmomentumprun": 288, "moreoev": 288, "templat": [289, 293, 364, 383, 388, 477, 485, 522, 574, 616], "tree": [289, 326, 328, 359, 388, 390], "nlp": [289, 599, 616, 617, 620], "huggingface_model": 289, "config_file_path": 289, "pruner_info": 289, "aggressive_ratio": 290, "aggress": 290, "server": [292, 293, 417, 424, 476, 477, 484, 485, 493, 496, 507, 509, 511, 574, 611], "seper": 292, "opt_model": 292, "fulli": [292, 620], "meet": [292, 312, 314, 315, 317, 322, 324, 527, 583, 613, 618, 619, 620, 624, 626], "saniti": 292, "illeg": 292, "sync": 292, "contrib": 293, "experiment": [293, 474, 528, 551, 577, 580, 581, 583, 619, 622, 625], "base_model": [293, 304, 305, 307, 309, 310, 311], "keras_model": [293, 304], "mxnet_model": [293, 304], "nets_factori": [293, 304], "onnx_model": [293, 304, 428], "tensorflow_model": [293, 304], "torch_model": [293, 304], "tuning_sampl": [293, 320, 326], "tuning_spac": [293, 320, 326, 327, 329], "tuning_struct": [293, 320, 326, 327, 328], "auto_mixed_precis": [293, 320], "conserv": [293, 320], "hawq_v2": [293, 320], "mse_v2": [293, 320], "collect_layer_histogram": [293, 335], "create_obj_from_config": [293, 335], "kl_diverg": [293, 335], "load_huggingfac": [293, 335], "ux": 293, "config_gener": [293, 417, 477], "configuration_wizard": [293, 417, 477], "db_manag": [293, 417, 477, 515], "file_brows": [293, 417, 477], "jobs_manag": [293, 417, 477], "model_zoo": [293, 417, 477], "names_mapp": [293, 417, 477], "profil": [293, 351, 369, 376, 378, 388, 391, 393, 394, 417, 425, 433, 477, 478, 488, 494, 511, 516], "manage_workspac": [293, 417, 477], "workload": [293, 346, 347, 348, 350, 352, 353, 356, 378, 383, 388, 448, 465, 472, 477, 479, 485, 495, 496, 511, 514, 516, 517, 518, 519, 618], "executor": [293, 344, 477, 485], "expiring_dict": [293, 477, 485], "github_info": [293, 477, 485], "hw_info": [293, 477, 485], "json_seri": [293, 347, 401, 402, 407, 409, 410, 413, 423, 432, 458, 464, 477, 484, 485, 494, 497, 498, 499, 500, 502, 503, 504, 505, 506], "proc": [293, 477, 485], "status_upd": [293, 477, 485], "yaml_util": [293, 477, 485], "web": [293, 476, 477, 530, 574, 624], "servic": [293, 477, 510, 511, 530, 611, 615], "commun": [293, 477, 511, 512, 513, 525, 574], "router": [293, 477, 511], "inc_bench": [293, 477, 574, 586], "set_random_se": [293, 335, 341, 506], "set_tensorboard": [293, 341], "set_workspac": [293, 313, 341, 497, 506], "output_model": [302, 576, 624], "eval_metr": [302, 313, 331], "chould": 302, "onnx_ml_pb2": [302, 593], "hybirdblock": [302, 313], "paramt": [302, 313, 331], "basemodel": [303, 304, 305, 307, 309, 310, 311], "plai": [303, 304, 616, 618], "role": [303, 304, 616], "node_typ": [303, 304], "kerasmodel": [305, 435], "get_model_fwk_nam": 306, "fwk": 306, "net": 308, "factori": [308, 398, 417, 452, 468, 473, 477, 488, 492], "tfslimnetsfactori": 308, "model_func": 308, "arg_scop": 308, "onnxmodel": [309, 428], "is_large_model": 309, "2gb": 309, "ort": 309, "output_name_to_nod": 309, "ir_vers": 309, "opset_import": 309, "nodes_to_remov": 309, "nodes_to_add": 309, "add_initi": 309, "get_initi": 309, "remove_initi": 309, "init_to_remov": 309, "set_initi": 309, "get_children": 309, "get_par": 309, "find_node_by_nam": 309, "new_nodes_list": 309, "find_nodes_by_initi": 309, "get_scale_zero": 309, "save_model_to_fil": 309, "use_external_data_format": 309, "replace_node_input": 309, "new_input_nam": 309, "replace_input_of_all_nod": 309, "white_optyp": 309, "black_optyp": 309, "replace_node_output": 309, "new_output_nam": 309, "replace_output_of_all_nod": 309, "remove_unused_const": 309, "enable_subgraph": 309, "get_nodes_chain": 309, "start_nod": 309, "stop_nod": 309, "result_chain": 309, "chain": 309, "add_tensors_to_output": 309, "remove_tensors_from_output": 309, "match_first_par": 309, "parent_op_typ": 309, "match_par": 309, "return_indic": 309, "match_parent_path": 309, "parent_input_index": 309, "get_model_typ": [310, 426], "validate_graph_nod": 310, "validate_and_inference_input_output": 310, "input_tensor_nam": 310, "output_tensor_nam": 310, "graph_sess": 310, "graph_def_sess": 310, "frozen_pb_sess": 310, "load_saved_model": 310, "saved_model_tag": 310, "serv": [310, 513, 521], "signatur": 310, "saved_model_dir": 310, "tag": [310, 337, 483, 496, 624], "metagraphdef": 310, "keras_sess": 310, "slim_sess": 310, "checkpoint_sess": 310, "estimator_sess": 310, "saved_model_sess": 310, "renturn": 310, "workspace_path": [310, 311, 481, 496], "tensorflowsavedmodelmodel": 310, "get_all_weight_nam": [310, 311], "new_tensor": [310, 311], "get_weight": [310, 311], "wight": 310, "report_spars": [310, 311], "total_spars": [310, 311], "build_saved_model": 310, "savedmodelbuild": 310, "protocol": 310, "asset": 310, "tensorflowqatmodel": 310, "frozen_graph_def": 310, "tensorflowcheckpointmodel": 310, "checkpoint": [310, 340, 593], "issu": [310, 525, 526, 529, 574, 589, 620, 624], "tensorflowmodel": [310, 404, 433, 435, 436, 437, 438], "pytorchbasemodel": 311, "register_forward_pre_hook": 311, "generate_forward_pre_hook": 311, "update_gradi": 311, "grad_nam": 311, "new_grad": 311, "grad": 311, "prune_weights_": 311, "get_input": 311, "get_gradi": 311, "quantized_state_dict": 311, "load_quantized_state_dict": 311, "stat_dict": 311, "export_to_jit": 311, "jit": [311, 594, 596, 601, 624], "export_to_fp32_onnx": 311, "rand": [311, 594], "stdout": 311, "export_to_bf16_onnx": 311, "export_to_int8_onnx": 311, "s8s8": 311, "pytorchfxmodel": 311, "ipexmodel": 311, "driven": [312, 530, 592, 611, 613, 624], "objective_registri": 312, "objective_custom_registri": 312, "obj_cl": 312, "eural_compressor": 312, "objective_cl": 312, "user_object": 312, "__class__": 312, "__name__": 312, "objective_cfg": 312, "usr_cfg": 312, "user_obj_cfg": 312, "easili": [312, 531, 595, 599, 611, 613, 616, 617], "sart": 312, "result_list": 312, "loop": [312, 331, 527, 528, 585, 623, 626], "durat": [312, 324, 361, 372, 375, 382, 388, 390, 391, 481, 623], "peak": [312, 613], "alloc": 312, "models": [312, 613, 619], "multiobject": [312, 506], "metric_criterion": 312, "metric_weight": 312, "obj_criterion": 312, "obj_weight": 312, "is_measur": 312, "accuracy_target": 312, "accuracy_meet": 312, "verifi": 312, "accuracy_meet_req": 312, "last_result": 312, "check_result": 312, "set_model": 312, "best_result": 312, "tune_data": 312, "acc1": 312, "obj1": 312, "obj2": 312, "acc2": 312, "posttrainingqu": 313, "calib_func": [313, 621], "pre_proccess": 313, "entir": [313, 331, 527, 616, 617], "ptq": [313, 527, 581, 588, 620, 624, 626], "automixedprecisiontunestrategi": 314, "rule": [314, 594, 616, 617], "tri": [314, 315, 509, 626], "tune_config": [314, 315, 316, 317, 318, 319, 321, 322, 323, 324], "basictunestrategi": [315, 324], "polici": [315, 321, 525, 530, 615, 628, 630], "distributed_next_tune_cfg_lst": [315, 324], "comm": [315, 324], "One": [315, 574, 577, 581, 588, 616, 617, 618, 626], "tuning_config_list": 315, "ii": [315, 626], "bayesiantunestrategi": 316, "come": [316, 530, 626], "discret": [316, 626], "gaussian": [316, 626], "posterior": [316, 626], "black": [316, 626], "maxim": [316, 616, 617, 626], "acq_max": 316, "ac": 316, "gp": 316, "y_max": 316, "n_warmup": 316, "n_iter": 316, "acquisit": 316, "relev": 316, "limit": [316, 341, 530, 579, 616, 624], "acq": 316, "randomst": 316, "scipi": 316, "x_max": 316, "targetspac": 316, "pbound": 316, "9527": [316, 628], "params_to_arrai": 316, "array_to_param": 316, "amort": 316, "keyerror": 316, "get_target": 316, "num": [316, 341, 591], "_kei": 316, "bayesianoptim": 316, "promis": [316, 580, 616, 617], "gen_next_param": 316, "conservativetunestrategi": 317, "o0": [317, 626], "who": [317, 525, 626], "quantifi": 317, "quant_queu": 317, "prioriti": [317, 626], "fp16": [317, 326, 328, 592, 620], "trail": 317, "exhaustivetunestrategi": 318, "perspect": [318, 626], "hawq_v2tunestrategi": 319, "msetunestrategi": 321, "mse_impact_lst": 321, "best_qmodel": 321, "current_best_model": 321, "ordered_op_name_typ": 321, "mse_v2tunestrategi": 322, "revert": [322, 330, 626], "highest": [322, 626], "lowest": [322, 616, 617, 626], "until": [322, 324, 528, 626], "randomtunestrategi": 323, "strategy_registri": [324, 626], "evaluation_result": [324, 581], "meet_acc_req": 324, "eval_r": 324, "master_worker_handl": 324, "matster": 324, "worker": [324, 620], "send": [324, 465, 508, 513, 526], "wait": [324, 508, 604, 608, 611], "receiv": [324, 337, 623], "sender": 324, "mpi": 324, "comun": 324, "slave_worker_handl": 324, "slave": 324, "tune_cfg_lst": 324, "distributed_travers": 324, "disribut": 324, "apply_all_tuning_recip": 324, "tunabl": 324, "apply_recipe_one_by_on": 324, "set_param_for_pre_quantization_algo": 324, "algo_schedul": 324, "algo": [324, 334], "set_param_for_post_quantization_algo": 324, "pre_optimized_model": 324, "initial_tuning_cfg": 324, "quant_mode_wise_item": 324, "initial_op_tuning_cfg": [324, 326, 327], "op_item_dtype_dict": 324, "show_baseline_info": 324, "displai": [324, 326, 327, 328, 341, 412, 425, 611], "initial_best_acc": 324, "set_tuning_spac": 324, "setup_resum": 324, "set_q_func": 324, "update_best_op_tuning_cfg": 324, "op_tuning_cfg": 324, "deploy_config": 324, "deploy": [324, 578, 594, 611], "tuningsampl": [326, 327], "tuningspac": [326, 327, 328], "tuning_order_lst": [326, 327], "tuningord": [326, 327], "opwisetuningsampl": [326, 327], "tuning_items_prior": [326, 327], "op_dtype_dict": [326, 327], "get_opwise_candid": [326, 327], "optypewisetuningsampl": [326, 327], "optuningconfig": [326, 327, 328, 329], "fallbacktuningsampl": [326, 327], "op_dtyp": [326, 327], "skip_first": [326, 327], "op_quant_mod": [326, 329], "get_stat": [326, 329], "from_stat": [326, 329], "tuningitem": [326, 328], "item_typ": [326, 328], "get_options_nam": [326, 328], "get_option_by_nam": [326, 328], "option_nam": [326, 328], "get_detail": [326, 328], "query_item_opt": [326, 328], "op_name_typ": [326, 328], "method_nam": [326, 328], "method_v": [326, 328], "get_default_config": [326, 328], "op_tuning_config": [326, 328], "get_item_by_path": [326, 328], "get_default_full_path": [326, 328], "op_path": [326, 328], "new_path": [326, 328], "query_quant_mode_item_by_full_path": [326, 328], "query_items_by_quant_mod": [326, 328], "get_op_default_path_by_pattern": [326, 328], "tuningsamplerregistri": 327, "modelwisetuningsampl": 327, "smoothquantsampl": 327, "hyperparamet": [327, 623, 626], "get_op_mode_by_query_ord": 328, "query_ord": 328, "pattern_to_intern": 328, "default_dtyp": 328, "pattern_to_path": 328, "quant_mode_from_pattern": 328, "internal_pattern": 328, "initial_tuning_cfg_with_quant_mod": 328, "step1": 328, "step2": 328, "step3": 328, "step4": 328, "step5": 328, "ordereddefaultdict": 330, "extract_data_typ": 330, "data_typ": 330, "sign": [330, 526, 574, 620, 623], "unsign": 330, "reverted_data_typ": 330, "signed_flag": 330, "get_adaptor_nam": 330, "compressionmanag": 331, "callbacks_list": 331, "uesd": 331, "deal": 331, "Such": 331, "distillationcallbback": 331, "train_loop": [331, 614], "path_to_sav": 331, "orchestr": [331, 530, 588], "pruningconfig": 331, "layerhistogramcollector": [332, 335], "histogram": [332, 335, 341, 385, 388, 396, 624], "layer_tensor": [332, 335], "include_lay": [332, 335], "diverg": [332, 335, 336, 579, 626], "get_func_from_config": 334, "func_dict": 334, "get_preprocess": 334, "get_postprocess": 334, "get_algorithm": 334, "create_dataset": 334, "cfg_preprocess": 334, "cfg_filter": 334, "create_dataload": 334, "dataloader_cfg": 334, "create_eval_func": 334, "postprocess_cfg": 334, "create_train_func": 334, "Their": 334, "auxiliari": 335, "msg": [335, 338], "warn": [335, 338, 574], "warin": [335, 338], "alia": [335, 338, 596, 601], "fatal": [335, 338], "probabl": 336, "expand_quantized_bin": 336, "quantized_bin": 336, "reference_bin": 336, "expand": 336, "bin": [336, 341], "safe_entropi": 336, "reference_distr_p": 336, "p_sum": 336, "candidate_distr_q": 336, "q_sum": 336, "entropi": [336, 626], "get_threshold": 336, "hist_edg": 336, "min_val": 336, "max_val": 336, "quantized_typ": 336, "num_quantized_bin": 336, "255": [336, 620], "pretrain": [337, 594, 600], "optimizedmodel": 337, "from_pretrain": 337, "repositori": [337, 417, 422, 424, 477, 483, 606, 609], "hug": [337, 530, 618], "face": [337, 525, 530, 541, 594, 598, 618, 622], "hub": [337, 489, 530, 582, 586, 602], "host": [337, 581], "cache_dir": 337, "force_download": 337, "resume_download": 337, "commit": [337, 525, 526], "git": [337, 574, 589], "artifact": 337, "co": [337, 617], "save_for_huggingface_upstream": 337, "output_dir": [337, 489, 599, 600], "get_logg": 338, "checkpoint_dir": 340, "history_cfg": 340, "best_configur": 340, "best_model_weight": 340, "pt": [340, 593, 618, 621], "snapshot": [340, 394, 515], "cfg_from_fil": 341, "yaml_fil": [341, 577, 581, 591], "lazyimport": 341, "lazi": 341, "till": [341, 626], "decorat": 341, "time_limit": 341, "get_siz": [341, 496], "fault_tolerant_fil": 341, "temporari": [341, 525], "equal_dict": 341, "d2": 341, "compare_kei": 341, "ignore_kei": 341, "ignor": [341, 577], "cpuinfo": 341, "vnni": [341, 582, 586, 588, 619, 620], "cores_per_socket": 341, "get_number_of_socket": [341, 484], "dump_elapsed_tim": [341, 531], "customized_msg": 341, "elaps": 341, "combine_histogram": 341, "old_hist": 341, "get_tensor_histogram": 341, "2048": 341, "get_all_fp32_data": 341, "get_tuning_histori": 341, "tuning_history_path": [341, 465], "str2arrai": 341, "dequantizeweight": 341, "weight_tensor": 341, "scale_info": 341, "captureoutputtofil": 341, "tmp_file_path": 341, "stream": 341, "sy": [341, 597], "stderr": 341, "captur": 341, "statist": 341, "header": [341, 442, 521, 584], "field_nam": 341, "output_handl": 341, "printer": 341, "print_stat": 341, "global_st": 341, "load_data_from_pkl": 341, "pkl": 341, "dump_data_to_loc": 341, "set_resume_from": 341, "show_memory_info": 341, "hint": 341, "project_data": [342, 448, 449, 454, 458, 461, 464, 471], "benchmark_data": 342, "workdir": [342, 458, 471, 477, 481, 485, 493], "config_filenam": [342, 458, 471], "configuration_data": [342, 449, 454, 458, 461, 464], "generate_config": [342, 449, 454, 458, 461, 464, 471], "dataloaderinterfac": [342, 458, 471], "dataloader_data": [342, 354, 383, 388, 458, 471], "parse_arg": [343, 451, 455, 460, 463, 469], "benchmark_mod": [343, 488], "set_eager_execut": [343, 451, 455, 463], "request_id": [344, 447, 465, 466, 481, 489], "asd": [344, 466], "benchmark_id": [344, 361, 362, 372], "benchmark_result_upd": 344, "benchmark_result_update_pytorch_script": 344, "neural_coder_perform": 344, "neural_coder_tim": 344, "pytorch_script_bench_optim": 344, "command_line_of_script": 344, "pytorch_script_bench_original_model": 344, "execute_real_benchmark": 344, "project_detail": [344, 377, 447, 466], "benchmark_detail": 344, "benchmark_model": [345, 417, 477], "execute_benchmark": [345, 417, 477], "benchmarkconfiggener": 346, "configgener": [346, 347, 348, 350, 351, 352, 353], "generate_evaluation_config": [346, 348, 350, 352, 353], "generate_accuracy_config": 346, "generate_performance_config": 346, "workload_directori": 347, "configuration_path": 347, "jsonseri": [347, 401, 402, 407, 409, 410, 413, 423, 432, 458, 464, 484, 486, 494, 497, 498, 499, 500, 502, 503, 504, 505, 506], "get_predefined_config_path": [347, 496], "predefin": [347, 383, 387, 388, 496], "generate_model_config": 347, "generate_dataloader_config": 347, "graphoptimizationconfiggener": 348, "generate_graph_optimization_config": 348, "benchmark_config_gener": [349, 417, 477], "graph_optimization_config_gener": [349, 417, 477], "mixed_precision_config_gener": [349, 417, 477], "profiling_config_gener": [349, 417, 477], "pruning_config_gener": [349, 417, 477], "quantization_config_gener": [349, 417, 477], "mixedprecisionconfiggener": 350, "generate_mixed_precision_config": 350, "profilingconfiggener": 351, "pruningconfiggener": 352, "generate_pruning_config": 352, "quantizationconfiggener": 353, "generate_tuning_config": 353, "generate_quantization_config": 353, "configurationpars": 354, "input_data": [354, 359, 576], "parse_evaluation_data": 354, "evaluation_data": 354, "parse_transform": 354, "transforms_data": [354, 383, 388], "parse_dataload": 354, "parse_metr": 354, "metric_data": 354, "get_param_typ": 354, "param_group": 354, "parse_valu": 354, "required_typ": 354, "parse_list_valu": 354, "parse_multidim_list": 354, "dimension": 354, "normalize_string_list": 354, "string_list": 354, "bracket": 354, "get_predefined_configur": 356, "update_config_to_machine_specif": 356, "configuration_pars": [357, 417, 477], "get_boundary_nod": [357, 417, 477], "get_configur": [357, 417, 477], "params_feed": [357, 417, 477], "pruning_config_pars": [357, 417, 477], "feeder": 358, "get_framework": [358, 431], "get_domain": 358, "get_model": [358, 431, 517], "get_dataload": 358, "get_transform": 358, "get_object": 358, "get_strategi": 358, "get_quantization_approach": 358, "get_possible_valu": 358, "pruningconfigpars": 359, "generate_tre": 359, "parse_entri": 359, "bench": [360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 389, 390, 391, 392, 447, 476, 594], "dbmanag": [360, 393], "database_loc": [360, 393], "log_level": [360, 393, 487], "initialize_databas": [360, 393], "create_sqlalchemy_engin": [360, 393], "create_al": [360, 393], "tabl": [360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 371, 372, 373, 374, 375, 376, 378, 379, 380, 381, 383, 384, 393], "project_id": [361, 364, 371, 372, 375, 377, 383, 387, 388], "model_id": [361, 371, 372, 375], "dataset_id": [361, 364, 372, 375, 383, 387, 388], "warmup_iter": 361, "number_of_inst": 361, "execution_command": [361, 372, 375], "benchark": 361, "delete_benchmark": [361, 382, 388], "benchmark_nam": 361, "update_statu": [361, 372, 375], "execution_statu": [361, 372, 375], "executionstatu": [361, 372, 375, 382, 388, 390, 391, 478, 495], "update_dur": [361, 372, 375], "update_execution_command": [361, 372, 375, 382, 388, 390, 391], "update_log_path": [361, 372, 375, 388, 391], "update_config_path": [361, 372], "update_dataset": [361, 372, 375], "update_batch_s": [361, 372], "update_mod": 361, "update_cores_per_inst": 361, "update_number_of_inst": 361, "clean_statu": [361, 372, 375, 382, 388, 390, 391, 495], "status_to_clean": [361, 372, 375, 382, 388, 390, 391, 495], "build_info": [361, 362, 364, 371, 372, 375, 376, 378, 381], "benchmark_result": [361, 369, 393, 417], "benchmarkresult": [361, 362], "update_accuraci": 362, "update_perform": 362, "list_by_framework": [363, 370, 379], "framework_id": [363, 370, 371, 379, 395], "query_to_list": [363, 370, 379], "dataloaders_queri": 363, "dataloader_id": 363, "fill_dictionari": [363, 365, 366, 368, 370, 373, 374, 379], "dataset_nam": [364, 383, 388], "template_path": 364, "delete_dataset": [364, 383, 388], "update_template_path": 364, "get_domain_id": 365, "domain_nam": 365, "domainflavour": [366, 478], "db": [366, 373, 374, 394, 395], "get_domain_flavour_id": 366, "domain_flavour_nam": 366, "flavour": [366, 386, 388, 446, 478], "get_framework_id": 368, "framework_nam": [368, 444, 484], "domain_flavour": [369, 393, 417, 423, 496], "optimization_typ": [369, 372, 393, 417], "profiling_result": [369, 375, 393, 417], "pruning_detail": [369, 372, 393, 417], "tuning_detail": [369, 372, 393, 417], "tuning_histori": [369, 372, 388, 390, 393, 417, 452, 477], "metrics_queri": 370, "precision_id": [371, 372, 373, 374], "domain_id": [371, 379], "domain_flavour_id": 371, "supports_profil": [371, 425, 433], "supports_graph": [371, 425], "supports_prun": [371, 425, 437], "delete_model": [371, 388, 389], "optimization_type_id": 372, "sampling_s": [372, 497, 628], "tuning_details_id": [372, 380], "pruning_details_id": [372, 378], "diagnosis_config": 372, "delete_optim": [372, 388, 390], "optimization_id": [372, 373, 388, 390, 447], "optimization_nam": [372, 373, 387, 388], "update_optimized_model": [372, 388, 390], "optimized_model_id": 372, "update_sampling_s": 372, "update_precis": 372, "update_tuning_detail": 372, "update_pruning_detail": 372, "pin_accuracy_benchmark": [372, 388, 390], "pin": [372, 388, 390, 604, 608], "pin_performance_benchmark": [372, 388, 390], "get_optimization_by_project_and_model": 372, "unpin_benchmark": 372, "db_connect": 372, "unpin": 372, "optimizationtyp": [372, 373, 478], "tuningdetail": [372, 380, 464], "tuninghistori": [372, 381, 465], "pruningdetail": [372, 378], "optimized_model": 372, "get_pinned_benchmark": 372, "list_for_precis": 373, "precision_nam": [373, 374], "get_optimization_type_for_precis": 373, "get_optimization_type_id": 373, "get_optimization_type_by_nam": 373, "get_optimization_type_by_id": 373, "get_precision_id": 374, "get_precision_by_nam": 374, "get_precision_by_id": 374, "num_thread": 375, "delete_profil": [375, 388, 391], "profiling_id": [375, 376, 388, 391, 466], "profiling_nam": 375, "update_num_thread": 375, "profilingresult": [375, 376], "total_execution_tim": 376, "accelerator_execution_tim": 376, "cpu_execution_tim": 376, "op_run": 376, "op_defin": 376, "get_result": 376, "bulk_add": 376, "params_interfac": [376, 382, 383, 385, 387, 388, 389, 390, 391, 393, 417, 477, 515], "profilingresultaddparamsinterfac": [376, 388, 391, 394], "bulk": [376, 388, 391], "delete_result": 376, "create_project": [377, 387, 388, 392], "delete_project": [377, 388, 392], "project_nam": [377, 383, 388], "get_model_by_nam": 377, "list_project": [377, 388, 392], "update_not": 377, "pruning_details_data": 378, "delete_pruning_detail": 378, "list_by_domain": 379, "transforms_queri": 379, "accuracy_criterion_typ": 380, "accuracy_criterion_threshold": 380, "exit_polici": [380, 628], "tuning_details_data": 380, "delete_tuning_detail": 380, "update_tuning_histori": 380, "tuning_history_id": 380, "minimal_accuraci": 381, "baseline_accuraci": 381, "baseline_perform": 381, "last_tune_accuraci": 381, "last_tune_perform": 381, "best_tune_accuraci": 381, "best_tune_perform": 381, "benchmarkapiinterfac": [382, 388], "get_benchmark_detail": [382, 388], "list_benchmark": [382, 388], "update_benchmark_accuraci": [382, 388], "update_benchmark_perform": [382, 388], "update_benchmark_statu": [382, 388], "update_benchmark_dur": [382, 388], "update_path": [382, 388, 390], "add_benchmark": [382, 388], "add_result": [382, 388, 391], "edit_benchmark": [382, 388], "edit": [382, 388, 390, 391, 394, 525], "parse_benchmark_data": [382, 388], "benchmarkaddparamsinterfac": [382, 388, 394], "parse_benchmark_edit_data": [382, 388], "benchmarkeditparamsinterfac": [382, 388, 394], "before_delete_benchmark_entri": 382, "sqlite3": 382, "db_model": [382, 393, 417, 477], "datasetapiinterfac": [383, 388], "get_dataset_detail": [383, 388], "list_dataset": [383, 388], "add_dataset": [383, 388], "set_template_path": [383, 388], "parsed_dataset_data": [383, 388], "datasetaddparamsinterfac": [383, 388, 394], "check_if_custom_metric_or_dataload": [383, 388], "dataset_data": [383, 388, 448, 449, 454, 458, 461, 464, 498], "generate_custom_templ": [383, 388], "dataloader_path": [383, 388], "generate_templ": [383, 388], "template_typ": [383, 388], "parse_dataset_data": [383, 388], "get_predefined_dataset": [383, 388], "prepare_predefined_dataload": [383, 388], "prepare_predefined_transform": [383, 388], "set_database_vers": [383, 384], "version_num": [383, 384], "alembic_vers": [383, 384], "initialize_associ": [383, 384], "initialize_precision_optimization_types_associ": [383, 384], "search_in_list_of_dict_for_unique_valu": [383, 384], "list_of_dict": [383, 384], "search_in_list_of_dict": [383, 384], "diagnosisapiinterfac": [385, 388], "get_op_list": [385, 388, 396], "get_op_detail": [385, 388, 396], "generate_optim": [385, 388], "model_wise_param": [385, 388], "parse_optimization_data": [385, 388, 390], "diagnosisoptimizationparamsinterfac": [385, 388, 394], "parse_op_wise_config": [385, 388], "op_wise_param": [385, 388], "parse_wise_paramet": [385, 388], "params_per_typ": [385, 388], "set_op_wise_pattern_precis": [385, 388], "parse_model_wise_config": [385, 388], "dictionariesapiinterfac": [386, 388], "dictonari": [386, 388], "list_domain": [386, 388], "list_domain_flavour": [386, 388], "list_optimization_typ": [386, 388], "list_optimization_types_for_precis": [386, 388], "list_precis": [386, 388], "list_dataload": [386, 388], "list_dataloaders_by_framework": [386, 388], "list_transform": [386, 388], "list_transforms_by_framework": [386, 388], "list_transforms_by_domain": [386, 388], "list_metr": [386, 388], "list_metrics_by_framework": [386, 388], "examplesapiinterfac": [387, 388], "get_optimization_data": [387, 388], "optimizationaddparamsinterfac": [387, 388, 390, 394], "benchmark_api_interfac": [388, 393, 417], "dataset_api_interfac": [388, 393, 417], "diagnosis_api_interfac": [388, 393, 417], "dictionaries_api_interfac": [388, 393, 417], "examples_api_interfac": [388, 393, 417], "model_api_interfac": [388, 393, 417], "optimization_api_interfac": [388, 393, 417], "profiling_api_interfac": [388, 393, 417], "project_api_interfac": [388, 393, 417], "modelapiinterfac": [388, 389], "add_model": [388, 389, 392], "get_model_detail": [388, 389], "list_model": [388, 389, 417, 443, 477], "parse_model_data": [388, 389], "modeladdparamsinterfac": [388, 389, 394], "optimizationapiinterfac": [388, 390], "get_optimization_detail": [388, 390], "list_optim": [388, 390], "update_optimization_statu": [388, 390], "update_optimization_dur": [388, 390], "add_optim": [388, 390], "add_quantization_optim": [388, 390], "optimization_data": [388, 390, 448, 449, 454, 458, 461, 464], "add_pruning_optim": [388, 390], "add_standard_optim": [388, 390], "edit_optim": [388, 390], "get_pruning_detail": [388, 390], "gat": [388, 390], "edit_tuning_detail": [388, 390], "parsed_optimization_data": [388, 390], "optimizationeditparamsinterfac": [388, 390, 394], "edit_pruning_detail": [388, 390], "pruning_data": [388, 390], "add_tuning_histori": [388, 390], "parse_tuning_histori": [388, 390], "tuninghistoryinterfac": [388, 390, 394, 515], "parse_optimization_edit_data": [388, 390], "load_pruning_details_config": [388, 390, 496], "profilingapiinterfac": [388, 391], "get_profiling_detail": [388, 391], "list_profil": [388, 391], "update_profiling_statu": [388, 391], "update_profiling_dur": [388, 391], "add_profil": [388, 391], "edit_profil": [388, 391], "bulk_add_result": [388, 391], "parse_profiling_data": [388, 391], "profilingaddparamsinterfac": [388, 391, 394], "parse_profiling_result_data": [388, 391], "parse_profiling_edit_data": [388, 391], "profilingeditparamsinterfac": [388, 391, 394], "projectapiinterfac": [388, 392], "get_project_detail": [388, 392], "add_dummy_dataset": [388, 392], "update_project_not": [388, 392], "db_oper": [393, 417, 477], "parse_nod": 394, "tuninghistoryiteminterfac": [394, 515], "update_dataloaders_param": 395, "dataloaders_to_upd": 395, "framework_dataloaders_config": 395, "get_framework_dataloaders_config": 395, "get_framework_transforms_config": 395, "get_tensors_info": [396, 425], "load_quantization_config": 396, "calculate_ms": 396, "input_model_tensor": 396, "optimized_model_tensor": 396, "op_detail": [396, 398, 417, 477], "opdetail": [396, 401], "get_histogram_data": 396, "draw": [396, 623, 626], "diagnosisfactori": 397, "get_diagnosi": 397, "onnx_diagnosi": [398, 417, 477], "onnxrt_diagnosi": [398, 399, 417], "tensorflow_diagnosi": [398, 417, 477], "op_entri": [398, 417, 477], "onnxrtdiagnosi": 400, "onnxrtmodel": [400, 428], "serialization_typ": [401, 402, 432, 484, 486, 498, 499, 503, 504], "oppattern": 401, "pattern_data": 401, "opweight": 401, "weights_data": 401, "opactiv": 401, "op_activ": 401, "opentri": 402, "activation_min": 402, "activation_max": 402, "tensorflowdiagnosi": 404, "browser": [405, 574, 604, 608], "get_directory_entri": 405, "get_requested_path": 405, "get_non_hidden_directory_entri": 405, "create_dir_entri": 405, "direntri": 405, "create_file_entri": 405, "create_entri": 405, "is_directori": 405, "sort_entri": 405, "should_show_fil": 405, "should_show_only_model_fil": 405, "get_setting_valu": 405, "get_filter_valu": 405, "filter_requested_entri": 405, "filter_nam": 405, "is_directory_entri": 405, "is_model_or_directory_entri": 405, "shown": [405, 528, 574, 576, 579, 591, 605, 613, 614, 626], "is_dataset_or_directory_entri": 405, "brows": 406, "filesystem": [406, 496, 521], "attribute_typ": 407, "expanded_group": [408, 411], "add_edg": 410, "source_id": 410, "target_id": 410, "highlight_pattern": 410, "highlight": [410, 413, 527, 574], "get_target_nod": 410, "reader": [411, 412, 417, 477], "graphread": 411, "find_pattern_in_graph": [411, 512], "onnxrt_read": [412, 414, 417], "tensorflow_read": [412, 414, 417], "collaps": [412, 417, 477, 574], "graph_read": [412, 417, 477], "groupnod": 413, "group_nam": 413, "onnxrtread": 415, "tensorflowread": 416, "jobs_control_queu": [417, 418, 477], "frozen_pb": [417, 424, 434], "meta_graph": [417, 424, 434], "model_type_gett": [417, 424, 477], "download_config": [417, 442, 443, 477], "download_model": [417, 442, 443, 477], "optimize_model": [417, 450, 452, 453, 456, 459], "neural_coder_optim": [417, 452, 477], "tune_model": [417, 452, 462], "execute_optim": [417, 452, 477], "tensorflow_profil": [417, 468, 477], "execute_profil": [417, 468, 477], "profile_model": [417, 468, 470, 474, 477], "job": [418, 492], "_jobscontrolqueu": 419, "queu": 419, "jobsmanag": 419, "_jobsmmanag": 420, "_job": 420, "get_default_path": 422, "shape_elements_ord": [425, 428, 437, 496], "get_input_nod": [425, 435, 436, 437], "get_output_nod": [425, 435, 436, 437], "ensure_supported_path": 425, "get_model_graph": [425, 428, 436, 437, 512], "supports_path": [425, 428, 430, 433, 435, 436, 438], "guard_requirements_instal": [425, 428, 430, 437], "instal": [425, 428, 430, 437, 444, 581, 584, 586, 594, 596, 599, 602, 606, 609, 611, 612, 615, 630], "nc_model_inst": [428, 437], "filtered_input_nod": 428, "remove_number_of_samples_from_shap": 428, "pytorchscriptmodel": 430, "modelrepositori": 431, "get_framework_from_path": [431, 496], "get_supported_framework": 431, "is_model_path": 431, "trust": [432, 574], "frozenpbmodel": 433, "metagraphmodel": 436, "metagraph": 436, "savedmodelmodel": 438, "get_input_shap": 439, "fix_dynamic_shap": 439, "resourc": [442, 579, 616], "download_yaml_config": 442, "model_info": 442, "download_fil": 442, "download_path": 442, "report_progress": 442, "unpack_arch": 442, "archive_path": 442, "unpack": 442, "archiv": 442, "get_yaml_url": 442, "model_src_dir": 442, "yaml_relative_loc": 442, "get_available_model": 444, "check_vers": 444, "framework_vers": 444, "supported_vers": 444, "validate_model_list": 444, "model_list": 444, "get_framework_module_nam": 444, "get_installed_framework": 444, "mappingdirect": 446, "namesmapp": 446, "framework_map": 446, "domain_map": 446, "domain_flavour_map": 446, "precision_map": 446, "map_nam": 446, "parameter_typ": 446, "execute_optimization_pytorch_script": 447, "execute_optimization_regular": 447, "parse_model_data_to_bench_nam": 447, "parse_log": 447, "optimization_detail": 447, "check_if_collect_tuning_histori": 447, "optimizationfactori": 448, "get_optim": 448, "optimization_script": [449, 454, 458, 461, 464], "optimize_graph": [451, 455], "output_graph": [451, 455, 460, 463], "optimize_graph_config": [451, 455], "optimize_pt_script": 457, "output_model_nam": 458, "output_model_dir": 458, "optimizationinterfac": 458, "optimization_workdir": 465, "watcher": 465, "process_succeed": 465, "signal": [465, 496], "was_history_file_chang": 465, "history_file_modification_tim": 465, "modif": [465, 531, 576, 585, 599], "send_history_snapshot": 465, "execute_real_profil": 466, "profiling_detail": 466, "profilerfactori": [467, 472], "get_profil": [467, 472], "profiling_data": [467, 471, 472, 474, 494], "load_profiling_detail": 469, "json_path": 469, "config_path": 471, "initialize_graph": 474, "tf_modul": 474, "create_tf_config": 474, "num_warmup": 474, "convert_nodes_to_list": 474, "build_dataload": 474, "delete_assign": 475, "wsgi": 476, "prepare_environ": 476, "app": [477, 511], "history_snapshot_pars": [477, 511, 516], "request_data_processor": [477, 511, 516], "response_gener": [477, 511, 516, 517, 519, 522], "status": [478, 490, 495], "ensure_workdir_exists_and_writ": 479, "clean_workloads_wip_statu": 479, "wip": [479, 629], "workloads_list": 479, "migrate_databas": 479, "latest": [479, 489, 589, 618, 622], "alemb": [479, 584, 589], "notfoundexcept": [480, 509, 510], "accessdeniedexcept": 480, "deni": 480, "clienterrorexcept": 480, "internalexcept": 480, "subject": [481, 508, 590], "send_respons": 481, "log_nam": 481, "additional_log_nam": [481, 489], "shell": [481, 489, 624], "process_dur": 481, "cwd": [481, 489], "universal_newlin": [481, 489], "startupinfo": [481, 489], "creationflag": [481, 489], "ignore_exit_cod": [481, 489], "pid": [481, 489], "env_arg": 481, "ncprocess": [481, 490], "refresh_workdir": 481, "is_multi_command": 481, "expir": 482, "expiringdictitem": 482, "expires_at": 482, "is_expir": 482, "expiringdict": 482, "initial_valu": 482, "ttl": 482, "120": 482, "userdict": 482, "githubinfo": 483, "releas": [483, 496, 530, 589, 600, 602, 604, 608, 610, 630], "hw": 484, "hwinfo": 484, "get_distribut": 484, "distibut": 484, "get_bios_vers": 484, "bio": [484, 615], "is_turbo_boost_en": 484, "turbo": [484, 615], "boost": [484, 592, 595, 611, 618], "get_kernel_vers": 484, "get_framework_info": 484, "get_framework_dependency_info": 484, "subdepend": 484, "serializ": 486, "serialize_item": 486, "datetim": 486, "throw": 486, "typeerror": 486, "2016": 486, "84913": 486, "04": [486, 589, 615, 629], "08t11": 486, "084913": 486, "change_log_level": 487, "optimizationpars": 488, "performancepars": 488, "update_parti": 488, "partial": [488, 620], "parsed_result": 488, "summarize_parti": 488, "summarize_valu": 488, "accuracypars": 488, "benchmarkparserfactori": 488, "get_pars": 488, "profilingpars": 488, "unify_tim": 488, "string_valu": 488, "micro": 488, "125": [488, 629], "6m": 488, "microsecond": 488, "docker": 489, "aibt_tensorflow": 489, "cento": [489, 589], "7_3_mkldnn_tensorflow": 489, "111224": 489, "pull_imag": 489, "0c750a01": 489, "90e0": 489, "4aa8": 489, "99fe": 489, "a194d55a2046": 489, "time_start": 489, "2018": 489, "17t14": 489, "47": [489, 629], "352502": 489, "time_stop": 489, "25": [489, 629], "110410": 489, "info_path": 489, "runtim": [489, 530, 531, 532, 576, 582, 585, 588, 592, 596, 601, 602, 619], "tail": 489, "is_ok": [489, 490], "popen": 489, "remove_log": 489, "properli": 490, "rtype": 490, "return_code_al": 490, "remove_successful_log": 490, "success": [490, 508, 589], "get_status_update_funct": 492, "job_typ": 492, "sent": 494, "throughput": 494, "acc_input_model": 494, "acc_optimized_model": 494, "size_input_model": 494, "size_optimized_model": 494, "path_optimized_model": 494, "optimization_tim": 494, "insert_data": 494, "calculate_throughput": 494, "readi": 494, "ensure_working_path_exist": 495, "clean_log": 495, "workdir_path": 495, "is_hidden": 496, "get_dataset_path": 496, "get_file_extens": 496, "lead": [496, 579, 592, 616, 617], "is_dataset_fil": 496, "normalize_domain": 496, "underscor": 496, "normalize_framework": 496, "normalize_str": 496, "string_to_norm": 496, "get_model_zoo_config_path": 496, "model_dict": 496, "get_model_zoo_model_path": 496, "check_modul": 496, "get_module_vers": 496, "mb": 496, "add_unit": 496, "load_model_config": 496, "load_dataloader_config": 496, "load_transforms_config": 496, "load_transforms_filter_config": 496, "meaning": [496, 614], "load_precisions_config": 496, "get_default_pruning_config_path": 496, "load_model_wise_param": 496, "load_metrics_config": 496, "get_metrics_dict": 496, "load_help_nc_param": 496, "replace_with_valu": 496, "file_path": 496, "verify_file_path": 496, "determine_ip": 496, "ip": 496, "is_development_env": 496, "nc_mode": 496, "filter_transform": 496, "parse_bool_valu": 496, "release_tag": 496, "get_shape_from_transform": 496, "get_height_width_from_s": 496, "parse_to_string_list": 496, "parse_to_float_list": 496, "export_to_csv": 496, "parse_vers": 496, "string_vers": 496, "remove_dataload": 497, "datalad": 497, "remove_accuracy_metr": 497, "set_evaluation_dataload": 497, "udpat": 497, "set_evaluation_dataset_path": 497, "get_performance_config": 497, "set_performance_cores_per_inst": 497, "get_performance_cores_per_inst": 497, "set_performance_num_of_inst": 497, "get_performance_num_of_inst": 497, "set_accuracy_and_performance_batch_s": 497, "set_quantization_dataload": 497, "set_quantization_dataset_path": 497, "set_quantization_batch_s": 497, "set_accuracy_go": 497, "accuracy_go": 497, "set_accuracy_metr": 497, "set_transform": 497, "process_transform": 497, "set_quantization_approach": 497, "set_input": 497, "set_output": 497, "set_quantization_sampling_s": 497, "set_performance_warmup": 497, "set_performance_iter": 497, "set_optimization_precis": 497, "yaml_path": 497, "is_dummi": 498, "labelbal": [498, 576, 577], "set_transforms_from_list": 498, "transforms_list": 498, "set_dataset": 498, "postprocessschema": 499, "get_label_shift_valu": 499, "set_accuracy_postprocess_transform": 499, "set_precis": [500, 502], "sgdoptim": 504, "adamwoptim": 504, "adamoptim": 504, "crossentropylosscriterion": 504, "sparsecategoricalcrossentropycriterion": 504, "knowledgedistillationlosscriterion": 504, "set_postprocess_transform": 504, "weightcompressionapproach": 504, "initialize_prun": 504, "pruner_dict_list": 504, "serialize_prun": 504, "parse_dict_value_to_float": 504, "parse_dict_value_to_int": 504, "wiseconfigdetail": 505, "wiseconfig": 505, "acccriterion": 506, "exitpolici": 506, "set_timeout": 506, "set_max_tri": 506, "trial": [506, 626], "set_performance_onli": 506, "float_represent": 507, "dumper": 507, "pruner_represent": 507, "outsid": 508, "create_simple_respons": 508, "gui": [508, 509, 513, 530, 574, 588, 589], "messagequeu": 508, "queue": [508, 513], "post_failur": 508, "failur": [508, 527], "post_success": 508, "post_error": 508, "global_config_directori": 509, "set_up": 509, "determine_values_from_environ": 509, "get_command_line_arg": 509, "determine_server_port": 509, "max_ports_tri": 509, "port_default": 509, "determine_gui_port": 509, "client": [509, 574], "server_port": 509, "unless": [509, 585], "is_port_taken": 509, "determine_log_level": 509, "determine_url_prefix": 509, "get_url": 509, "dump_token_to_fil": 509, "servicenotfoundexcept": 510, "unknown": 510, "connector": 512, "routingdefinit": 512, "rout": 512, "realtimeroutingdefinit": 512, "realtim": 512, "deferredroutingdefinit": 512, "deferredsubprocessroutingdefinit": 512, "spawn": 512, "get_system_info": 512, "endpoint": 513, "run_serv": 513, "webserv": 513, "get_tls_arg": 513, "tl": [513, 574], "block_ifram": 513, "werkzeug": [513, 521], "ifram": 513, "csp": 513, "block_snif": 513, "mime": 513, "snif": 513, "require_api_token": 513, "author": [513, 590], "j": [513, 526, 530, 629], "handle_api_cal": 513, "subpath": 513, "allow_api_cal": 513, "page_not_found": 513, "disable_cach": 513, "build_paramet": 513, "flask": [513, 574], "web_socket_publish": 513, "web_socket": 513, "flask_socketio": 513, "socketio": [513, 574], "benchmarkservic": 514, "workloadservic": [514, 518, 519, 522], "historysnapshotpars": 515, "history_snapshot": 515, "provide_perform": 515, "parse_history_snapshot": 515, "parse_history_item": 515, "history_item": 515, "extract_accuraci": 515, "extract_perform": 515, "modelservic": 517, "optimizationservic": 518, "profilingservic": 519, "generate_csv": 519, "processor": [520, 530, 592, 615, 618, 620, 621, 629], "requestdataprocessor": 520, "get_string_valu": 520, "responsegener": 521, "serve_from_filesystem": 521, "mimetyp": 521, "as_attach": 521, "add_refresh": 521, "refresh_tim": 521, "refresh": [521, 604, 608], "from_except": 521, "get_status_code_for_except": 521, "get_code_templ": 522, "get_output": 522, "welcom": [524, 525, 526, 530, 630], "interest": [525, 530, 624], "foster": 525, "particip": 525, "harass": 525, "everyon": 525, "ethnic": 525, "characterist": 525, "gender": 525, "educ": 525, "socio": 525, "econom": 525, "appear": [525, 574, 605, 611], "race": 525, "religion": 525, "sexual": 525, "orient": 525, "contribut": [525, 530], "inclus": 525, "Being": 525, "respect": [525, 585, 616, 617, 628], "viewpoint": 525, "gracefulli": 525, "critic": 525, "focus": [525, 531], "empathi": 525, "toward": [525, 579], "unaccept": 525, "imageri": 525, "unwelcom": 525, "troll": 525, "insult": 525, "derogatori": 525, "comment": [525, 577, 591, 625], "polit": 525, "attack": 525, "publish": [525, 590, 592, 612], "electron": 525, "permiss": 525, "inappropri": 525, "profession": 525, "clarifi": 525, "appropri": 525, "fair": 525, "action": [525, 606, 609], "reject": 525, "wiki": 525, "ban": 525, "temporarili": 525, "perman": 525, "deem": 525, "threaten": 525, "offens": 525, "harm": 525, "mail": 525, "social": [525, 530, 618], "media": [525, 530, 618], "appoint": 525, "event": [525, 624], "abus": 525, "report": [525, 526, 574, 623], "contact": [525, 622, 623], "complaint": 525, "review": [525, 526], "investig": 525, "circumst": [525, 619], "oblig": 525, "confidenti": [525, 574], "regard": [525, 621], "incid": 525, "good": [525, 620, 626], "faith": 525, "repercuss": 525, "leadership": 525, "faq": [525, 530], "page": [525, 526, 530], "view": [526, 530, 574, 582, 602, 611, 622], "pylint": 526, "flake8": 526, "autopep8": 526, "cover": [526, 587, 618], "adopt": [526, 594], "certif": [526, 574], "agre": 526, "bug": 526, "jira": 526, "ticket": 526, "potenti": [526, 528], "risk": 526, "pr": [526, 591, 606, 609, 622], "reproduc": 526, "submit": [526, 618], "intend": 526, "collabor": [526, 596, 602], "adher": 526, "toolkit": [527, 530, 589, 594, 602, 618], "tracer": 527, "resolv": [527, 529], "floatfunct": 527, "cat": [527, 597], "10004": [527, 528, 531, 576, 579, 580, 583, 585, 588, 592, 614, 619, 628], "neural_compressor": [527, 528, 530, 551, 575, 576, 577, 579, 580, 581, 583, 586, 587, 591, 592, 593, 613, 614, 616, 619, 620, 621, 622, 623, 625, 626, 628], "conduct": [527, 599, 611], "imper": 527, "therefor": [527, 617, 620, 622], "lot": 527, "might": [527, 574, 626], "successfulli": [527, 581, 618], "proxi": 527, "tutori": [527, 602, 618], "prototyp": 527, "html": [527, 606, 609], "untrac": 527, "ssd": [527, 629], "resnet34": [527, 629], "r34": 527, "bboxes_labels_scor": 527, "prob": 527, "max_output": 527, "zip": 527, "dbox": 527, "dlabel": 527, "dscore": 527, "decode_singl": 527, "autom": [528, 594, 611, 612], "artifici": 528, "ann": 528, "par": 528, "outperform": 528, "4x": [528, 620], "figur": [528, 604, 605, 608, 616], "inner": 528, "evolutionari": 528, "cycl": 528, "conclud": 528, "simplest": [528, 597], "launcher": [528, 530, 579, 580, 602, 616], "agent": 528, "ofa_mbv3_d234_e346_k357_w1": 528, "250": 528, "results_csv_path": 528, "search_result": 528, "aim": [528, 530, 594, 617, 626], "wmt": 528, "en": 528, "de": 528, "guidelin": [529, 530], "mainstream": 530, "showcas": 530, "broad": [530, 588, 600], "wide": [530, 582, 592, 617, 620, 629], "xeon": [530, 589, 590, 592, 615, 618, 620, 621, 629], "scalabl": [530, 589, 592, 615, 618, 620, 621, 629], "flex": [530, 589], "amd": [530, 588, 589, 629], "arm": [530, 588, 589, 629], "nvidia": [530, 588, 589, 616, 620, 629], "stabl": [530, 574, 589, 618], "diffus": [530, 618, 629], "gpt": [530, 629], "vision": [530, 586, 598], "coder": [530, 588, 595, 596, 599, 602, 605, 618], "cloud": [530, 618], "marketplac": [530, 612, 618], "amazon": [530, 594, 602], "azur": [530, 618], "softwar": [530, 590, 592, 615, 618, 622], "alibaba": [530, 601, 608, 609, 618], "tencent": [530, 618], "taco": 530, "ai": [530, 594, 618, 621], "ecosystem": [530, 618], "lightn": [530, 601], "visit": [530, 629], "websit": [530, 589], "pip": [530, 574, 581, 584, 586, 589, 596, 599, 604, 606, 608, 609, 622], "wget": [530, 586], "googleapi": [530, 586], "v1_6": [530, 586], "mobilenet_v1_1": [530, 586], "0_224_frozen": [530, 586], "quick": [530, 585, 628], "overview": 530, "workflow": [530, 579, 589, 592, 606, 609, 624], "notebook": 530, "oneapi": [530, 589, 618], "analyt": [530, 589, 618], "jupyterlab": [530, 594, 600, 602, 604, 608], "visual": [530, 602, 611, 623, 624, 626], "studio": [530, 602, 611], "topic": 530, "soon": 530, "busi": [530, 618], "jan": [530, 618], "2023": [530, 629], "blog": [530, 618], "enhanc": [530, 594, 618, 621], "4th": [530, 618], "gen": [530, 592, 618, 621], "neurip": [530, 618], "fast": [530, 618], "oct": [530, 618], "quala": [530, 618], "minilm": [530, 618, 629], "legal": [530, 630], "secur": [530, 615, 618, 630], "idea": [530, 617, 626], "feel": 530, "bridg": [531, 588], "vanilla": [531, 588], "abcadaptor": 531, "__init__": [531, 576, 577, 591, 626], "he": 531, "besid": [531, 579], "past": 531, "effect": [531, 616, 617], "mainten": 531, "difficult": 531, "abil": [531, 577, 585], "fragment": 531, "semant": [531, 585], "microsoft": 531, "mla": [531, 620], "explor": 531, "nightli": [574, 589], "pypi": [574, 589, 606, 609], "conda": [574, 584, 589, 597, 605, 622], "forg": [574, 584, 589], "clone": [574, 589, 604, 608], "cd": [574, 581, 589], "setup": [574, 585, 589, 606, 609, 616], "ui": 574, "5000": 574, "338174d13706855fc6924cec7b3a8ae8": 574, "listen": 574, "firewal": 574, "8080": 574, "tf_enable_onednn_opt": [574, 589], "cert": 574, "path_to_cert": 574, "crt": 574, "path_to_private_kei": 574, "encrypt": 574, "insecur": 574, "expos": 574, "forfeit": 574, "threat": 574, "button": [574, 588, 605, 611], "click": [574, 586, 588, 594, 595, 602, 605, 611, 618, 624], "pop": [574, 611], "recognit": [574, 581, 624], "few": [574, 618, 626], "finish": [574, 605], "synthet": 574, "plu": 574, "icon": 574, "section": [574, 579, 580, 611, 616, 619, 628], "unfold": 574, "On": [574, 620], "panel": [574, 606, 609, 611], "navig": 574, "trash": 574, "visibl": 574, "cursor": 574, "prompt": [574, 581], "confirm": 574, "pencil": 574, "light": [574, 580], "blue": 574, "color": 574, "row": [574, 616], "arrow": 574, "checkbox": 574, "chart": [574, 620, 623, 624], "offer": [574, 577], "conveni": 574, "variat": 574, "yellow": 574, "remind": 574, "autograd": 574, "numba": 574, "pictur": 574, "ilsvrc": 574, "hour": [574, 626], "dialog": 574, "cryptographi": 574, "linux": [575, 605, 611], "x86_64": 575, "aarch64": 575, "often": [576, 579, 614, 616, 617], "encount": 576, "lack": 576, "faster": [576, 578, 618, 629], "hard": 576, "treat": 576, "manner": [576, 579, 593], "post_training_static_qu": [576, 577, 619, 626], "300": [576, 577], "customis": [576, 577], "ensp": [577, 591, 625], "imagerecord": [577, 581, 628], "image_nam": 577, "cocorecord": 577, "gt": [577, 583, 625], "int64": 577, "style_transf": 577, "content": 577, "tfrecorddataset": 577, "helloworld": [577, 625], "aid": 578, "increas": [578, 588, 594, 611, 626], "infrastructur": 578, "deploi": [579, 626], "power": [579, 605, 615], "mobil": [579, 629], "softmax": 579, "l": [579, 624, 626], "kd": 579, "kullback": 579, "leibler": 579, "patient": 579, "compact": [579, 597, 616, 617], "ia": 579, "attach": 579, "shallow": 579, "deepest": 579, "deeper": 579, "acceler": [579, 594, 602, 611, 616, 617, 618, 621, 626], "10006": [579, 580], "training_func_for_nc": [579, 580], "huge": [580, 617], "bit": [580, 592, 618, 620], "heavi": 580, "booster": 580, "degrad": 580, "retrain": [580, 616, 617], "incorpor": [580, 626], "novel": [580, 594, 605, 611], "horovod": 581, "builtin": 581, "program": [581, 590, 592, 594, 611], "addition": [581, 626], "enable_eager_execut": 581, "yaml_file_path": 581, "evaluation_time_cost": 581, "partit": 581, "distributedsampl": 581, "train_sampl": 581, "train_dataset": 581, "num_replica": 581, "train_load": 581, "train_kwarg": 581, "adadelta": 581, "distributedoptim": 581, "named_paramet": 581, "broadcast_paramet": 581, "root_rank": 581, "broadcast_optimizer_st": 581, "set_epoch": 581, "batch_idx": 581, "zero_grad": [581, 616], "nll_loss": 581, "log_interv": 581, "0f": 581, "tloss": 581, "6f": 581, "dry_run": 581, "test_func": 581, "num_of_process": 581, "002": 581, "ssh": [581, 611], "readm": 581, "exactli": [581, 595], "resnet50_v1": 581, "topk": [581, 591], "resizecropimagenet": [581, 625], "realiz": [581, 591, 613, 621, 623], "tow": 581, "situat": 581, "node1": 581, "node2": 581, "TO": [581, 596], "your_node1_nam": 581, "your_node2_nam": 581, "resnet50_fp32_pretrained_model": 581, "nc_resnet50_v1": 581, "resnet": [581, 586, 629], "varieti": [582, 619, 626], "demonstr": [582, 594, 616, 617, 624], "10k": [582, 586], "speedup": [582, 586, 588, 620], "2x": [582, 586, 588, 615], "exchang": 583, "hope": 583, "briefli": [583, 616], "matur": 583, "major": [583, 587, 620], "reus": 583, "inc_model": [583, 593], "fp32_onnx_config": 583, "randn": 583, "int8_onnx_config": 583, "matmulintegertofloat": 583, "matmulinteg": 583, "incompat": 584, "88": [584, 623, 629], "80": [584, 624, 629], "pyobject": 584, "reinstal": 584, "importerror": 584, "libgl": 584, "apt": [584, 589, 597, 605], "yum": [584, 589], "opencv": [584, 605], "pend": 584, "27": [584, 589, 629], "friendli": [585, 628], "dive": 585, "let": [585, 599, 619, 628], "syntax": 585, "up1": 585, "up2": 585, "valid_mixed_precis": 585, "per_tensor": [585, 628], "grappler_optim": 585, "constfold": 585, "arithmet": 585, "debug_stripp": 585, "jupyt": [586, 602, 604, 605, 608], "lab": [586, 604, 605, 606, 608, 609], "concept": [587, 623], "custom_metr": 587, "explicitli": 587, "refin": [587, 617], "These": 588, "420": 588, "geomean": 588, "snippet": 588, "upload": [588, 606, 609], "dispatch": 588, "qintegerop": [588, 620], "plan": 588, "uninstal": [589, 611], "frequent": 589, "ask": 589, "consolid": 589, "eas": [589, 596, 618], "streamlin": 589, "scienc": 589, "anaconda": 589, "suit": [589, 612, 624], "esri": 589, "formerli": 589, "skylak": 589, "cascad": 589, "lake": [589, 592, 618], "cooper": [589, 592, 618], "ic": [589, 616, 618], "sapphir": 589, "rapid": 589, "hbm": 589, "arctic": 589, "sound": 589, "pont": 589, "vecchio": 589, "ubuntu": [589, 615], "fortensorflow": 589, "forpytorch": 589, "onednn": [589, 620], "apach": 590, "copyright": 590, "accompani": 590, "research": 590, "wish": 590, "bibtex": 590, "misc": 590, "feng": 590, "tian": 590, "hanwen": 590, "haihao": 590, "shen": 590, "suyu": 590, "chen": 590, "titl": [590, 612], "howpublish": 590, "year": 590, "logo": [590, 615], "atom": 590, "phi": 590, "pentium": 590, "vtune": 590, "corpor": [590, 615], "subsidiari": [590, 615], "brand": [590, 615], "claim": [590, 615], "popularli": 591, "industri": [591, 618], "label_map": 591, "decis": 591, "ap": 591, "curv": 591, "turn": [591, 605], "target_boxes_num": 591, "str_label": 591, "int_label": 591, "inturn": 591, "cocomap": 591, "vocmap": 591, "categor": 591, "multiclass": 591, "multilabel": 591, "multi_metr": 591, "newmetr": 591, "reflect": [591, 615, 625], "recent": 592, "growth": [592, 617], "complex": [592, 617], "significantli": [592, 616, 617], "half": [592, 602], "sixteen": 592, "bandwidth": 592, "launch": [592, 612], "3rd": [592, 618, 620, 621], "codenam": 592, "x86": 592, "avx512": [592, 620], "vcvtne2ps2bf16": 592, "vcvtneps2bf16": 592, "vdpbf16p": 592, "onnxrt_cuda_ep": 592, "avx512_bf16": 592, "consequ": 592, "cuda": [592, 594, 596], "persist": 593, "brought": [593, 595, 602, 620], "tf2": 593, "h5": 593, "hybridblock": 593, "0000": 593, "saved_result": 593, "subsequ": [594, 611], "acquir": 594, "analysi": [594, 611, 623], "heurist": [594, 611], "great": 594, "facilit": 594, "autocast": 594, "simultan": [594, 614, 619], "my_model": 594, "no_grad": 594, "memory_format": 594, "112": [594, 629], "plugin": [594, 612], "aw": [594, 602, 618, 629], "sagemak": [594, 602], "inlin": [594, 599, 602], "neural_cod": [594, 596, 598, 599, 600, 602], "superbench": 594, "enjoi": [595, 599, 602], "reload": [595, 612], "modern": 596, "democrat": [596, 618], "programm": [596, 602, 611], "nano_bf16_channels_last": 596, "resnet18": [596, 629], "nano_bf16_ipex_channels_last": 596, "nano_bf16_ipex": 596, "nano_bf16": 596, "nano_fp32_channels_last": 596, "nano_fp32_ipex_channels_last": 596, "nano_fp32_ipex": 596, "nano_gpu_to_cpu": 596, "nano_int8": 596, "nano_jit_bf16_channels_last": 596, "nano_jit_bf16_ipex_channels_last": 596, "nano_jit_bf16_ipex": 596, "nano_jit_bf16": 596, "nano_jit_fp32_channels_last": 596, "nano_jit_fp32_ipex_channels_last": 596, "nano_jit_fp32_ipex": 596, "nano_jit_fp32": 596, "nano_onnxruntime_fp32": 596, "nano_onnxruntime_int8_qlinear": 596, "openvino": 596, "nano_openvino_fp32": 596, "nano_openvino_int8": 596, "bc": [597, 605], "conda_prefix": 597, "echo": 597, "tradit": [597, 617], "libjemalloc": 597, "libiomp5": 597, "home": 597, "lib": 597, "ld_preload": 597, "malloc_conf": 597, "oversize_threshold": 597, "background_thread": 597, "metadata_thp": 597, "dirty_decay_m": 597, "9000000000": 597, "muzzy_decay_m": 597, "kmp_affin": 597, "kmp_blocktim": 597, "dnnl_primitive_cache_capac": 597, "cpufreq": 597, "scaling_governor": 597, "powersav": 597, "sudo": 597, "tee": 597, "pytorch_jit_script": [598, 601], "pytorch_channels_last": [598, 601], "run_bench": 598, "patch": [598, 611], "patch_path": 598, "your_patch_path": 598, "sweep": 598, "sweep_object": 598, "bench_config": 598, "bench_featur": 598, "sai": 599, "run_glu": [599, 600], "requisit": 599, "task_nam": [599, 600], "do_ev": [599, 600], "run_glue_optim": 599, "opt": 599, "static_ipex": 599, "auto_qu": 600, "v4": [600, 629], "albert": [600, 629], "sst2": 600, "alexnet": [600, 629], "pytorch_amp": 601, "optimize_for_infer": 601, "pytorch_jit_trac": 601, "pytorch_jit_script_ofi": 601, "pytorch_jit_trace_ofi": 601, "torchdynamo": 601, "pytorch_torchdynamo_jit_script": 601, "pytorch_torchdynamo_jit_trac": 601, "pytorch_torchdynamo_jit_script_ofi": 601, "pytorch_torchdynamo_jit_trace_ofi": 601, "pytorch_inc_bf16": 601, "pytorch_inc_static_quant_fx": 601, "pytorch_inc_static_quant_ipex": 601, "pytorch_inc_dynamic_qu": 601, "pytorch_ipex_fp32": 601, "pytorch_ipex_bf16": 601, "pytorch_ipex_int8_static_qu": 601, "pytorch_ipex_int8_dynamic_qu": 601, "blade": 601, "disc": 601, "pytorch_aliblad": 601, "pytorch_lightning_bf16_cpu": 601, "tensorflow_amp": 601, "keras_amp": 601, "tensorflow_inc": 601, "keras_inc": 601, "onnx_inc_static_quant_qlinear": 601, "onnx_inc_static_quant_qdq": 601, "onnx_inc_dynamic_qu": 601, "optimum": [601, 602], "pytorch_inc_huggingface_optimum_stat": 601, "pytorch_inc_huggingface_optimum_dynam": 601, "intel_extension_for_transform": 601, "bigdl": [601, 602], "nano": [601, 602], "nano_": 601, "inc_auto": 601, "delight": 602, "announc": 602, "trainer": 602, "500": 602, "speed": [602, 617, 618, 620], "innov": [602, 618], "isa": 602, "xpu": 602, "delta": 602, "acc_delta": 602, "int8_acc": 602, "fp32_acc": 602, "ext": [604, 606, 608, 609, 610], "nodej": [604, 608], "jlpm": [604, 608], "yarn": [604, 608], "npm": [604, 605, 608], "lieu": [604, 608], "labextens": [604, 605, 608], "typescript": [604, 608], "watch": [604, 608], "termin": [604, 605, 608], "immedi": [604, 608], "rebuilt": [604, 608], "dev": [604, 608], "symlink": [604, 608], "blank": 605, "cell": 605, "gain": [605, 614, 618], "mkl": 605, "jemalloc": 605, "pip3": 605, "headless": 605, "pyproject": [606, 609], "toml": [606, 609], "twine": [606, 609], "whl": [606, 609], "dist": [606, 609], "sdist": [606, 609], "bdist_wheel": [606, 609], "frontend": [606, 609], "login": [606, 609, 623], "cut": [606, 609], "fork": [606, 609], "admin_github_token": [606, 609], "pypi_token": [606, 609], "npm_token": [606, 609], "secret": [606, 609], "draft": [606, 609], "changelog": [606, 609, 610], "pkg": [606, 609], "bot": [606, 609], "pick": [606, 609, 612], "feedstock": [606, 609], "hatch": 609, "notabl": 610, "vscode": [610, 612], "daili": 611, "advantag": [611, 619], "remot": 611, "market": 611, "sidebar": 611, "hover": 611, "diff": 611, "manifest": 612, "declar": 612, "palett": 612, "veri": [612, 620, 626], "registercommand": 612, "amodio": 612, "tsl": 612, "dbaeumer": 612, "eslint": 612, "press": 612, "f5": 612, "ctrl": [612, 629], "hello": 612, "world": 612, "breakpoint": 612, "consol": 612, "relaunch": 612, "toolbar": 612, "node_modul": 612, "viewlet": 612, "dropdown": 612, "startup": 612, "bundl": 612, "multi_object": 613, "arbitrari": 614, "p_conf": 614, "platinum": [615, 629], "8358": 615, "manufactur": 615, "m50cyp2sbstd": 615, "se5c620": 615, "86b": 615, "0005": 615, "2202160810": 615, "microcod": 615, "0xd000332": 615, "irq": 615, "60ghz": 615, "6chz": 615, "perf": 615, "512gb": 615, "16x32gb": 615, "ddr4": 615, "3200": 615, "mt": 615, "nic": 615, "1x": 615, "ethernet": 615, "100mb": 615, "i350": 615, "gigabit": 615, "drive": 615, "intel_ssdsckkb48": 615, "447": 615, "1g": 615, "factor": [615, 629], "publicli": 615, "degre": 615, "mark": 615, "trademark": 615, "art": [616, 617], "increasingli": [616, 617], "crucial": [616, 617], "salient": [616, 617], "nonzero": [616, 617], "irregular": [616, 617], "anywher": [616, 617], "2in4": 616, "amper": 616, "oc": 616, "kh": 616, "kw": 616, "fastform": 616, "finetun": [616, 617], "downstream": [616, 617], "formula": [616, 617], "exemplifi": 616, "complement": 616, "pruner1": 616, "layer1": 616, "layer3": 616, "rate": [616, 620], "pruner2": 616, "snip_momentum_progress": 616, "layer2": 616, "num_train_epoch": 616, "lr_schedul": 616, "mention": 616, "cv": [616, 617], "grown": 617, "unpreced": 617, "cube": 617, "discourag": 617, "penal": 617, "l2": 617, "parametr": 617, "namhoon": 617, "lee": 617, "thalaiyasingam": 617, "ajanthan": 617, "philip": 617, "torr": 617, "2019": 617, "mleffici": 618, "dec": 618, "wechat": 618, "deepen": 618, "foundat": 618, "intellig": 618, "vmware": 618, "applianc": 618, "bitnami": 618, "nov": 618, "signific": [618, 620], "sota": 618, "plug": 618, "twitter": 618, "linkedin": 618, "zone": 618, "land": 618, "gcp": 618, "pat": 618, "keynot": 618, "intelon": 618, "sep": 618, "deliv": 618, "chines": 618, "aug": 618, "purif": 618, "sacrif": 618, "jun": 618, "partner": 618, "apr": 618, "feb": 618, "joint": 618, "msft": 618, "bilibili": 618, "gestalt": 618, "ml": 618, "doubl": 618, "mlperf": [618, 629], "reconstruct": 618, "abound": 618, "lpot": [618, 622], "mar": 618, "nextplatform": 618, "cern": 618, "gan": 618, "3dgan": 618, "iml": 618, "workshop": 618, "asplo": 618, "18": [618, 629], "highli": 618, "intelcaff": 618, "aris": 619, "tell": 619, "henc": 619, "onnxrt_qoper": 619, "post_training_dynamic_qu": [619, 626], "quant_aware_train": 619, "initial_spars": [619, 628], "prune_typ": [619, 628], "basic_magnitud": [619, 628], "start_epoch": [619, 628], "end_epoch": [619, 628], "update_frequ": 619, "prune_domain": 619, "tile_pattern_1x1": 619, "graph_optimization_level": 619, "disable_al": 619, "invent": 620, "int4": 620, "cost": 620, "theoret": 620, "affin": 620, "zeropoint": 620, "asymmetr": [620, 626], "overflow": 620, "solv": [620, 622], "fbgemm": 620, "unseen": 620, "enough": 620, "peopl": 620, "emul": 620, "mimic": 620, "fact": 620, "ultim": 620, "pain": 620, "lossi": 620, "understand": [620, 624], "philosophi": 620, "val_dataset": 620, "val_dataload": 620, "ping_memori": 620, "val_load": 620, "avg": 620, "ON": 621, "postposttrainingquantconfig": 621, "bf16wrapper": 621, "retrac": 621, "site": 622, "assist": 622, "comparison": [622, 624], "sed": 622, "your_script": 622, "backbon": 623, "interact": 623, "sigopt_api_token": [623, 626], "sigopt_project_id": [623, 626], "sigopt_experiment_id": 623, "nc": [623, 626], "certain": 623, "suffici": 623, "ordinari": 623, "capac": 623, "sigopt_experiment_nam": [623, 626], "mobilenet": [623, 629], "8266": 623, "8372": 623, "2132": 623, "83": [623, 629], "7495": 623, "8299": 623, "8294": 623, "85": [623, 629], "0837": 623, "8291": 623, "4469": 623, "discov": 624, "why": 624, "valuabl": 624, "instrument": 624, "writer": 624, "_pre_eval_hook": 624, "submodul": 624, "whitelist": 624, "_recordingobserv": 624, "output_tensors_dict": 624, "current_it": 624, "_observer_forward_hook": 624, "activation_post_process": 624, "_add_observer_": 624, "named_children": 624, "leaf": 624, "add_modul": 624, "register_forward_hook": 624, "dump_tim": 624, "summarywrit": 624, "_acc": 624, "tune_": 624, "add_graph": 624, "get_observer_dict": 624, "observer_dict": 624, "is_quant": 624, "add_histogram": 624, "bind_al": 624, "logdir_spec": 624, "tune_0_acc0": 624, "tune_1": 624, "tune_1_acc0": 624, "79": [624, 629], "four": 624, "baseline_acc_0": 624, "776": 624, "tune_1_acc_0": 624, "095": 624, "runs_v3": 624, "image_recognit": 624, "run_tuning_dump_tensor": 624, "sh": 624, "inceptionv3": 624, "v0": 624, "cg": 624, "conv0": 624, "op_wis": [624, 628], "bash": 624, "run_tun": 624, "topologi": 624, "inception_v3": 624, "dataset_loc": 624, "inceptionv3_fp32_pretrained_model": 624, "nc_inceptionv3": 624, "inceptionv3_dump_tensor": 624, "poor": 624, "disappear": 624, "centercrop": 625, "randomresizedcrop": 625, "randomcrop": 625, "cropres": 625, "decodeimag": 625, "jpeg": 625, "encodejp": 625, "alignimagechannel": 625, "68": [625, 629], "116": 625, "78": [625, 629], "103": 625, "94": [625, 629], "017": 625, "bilinearimagenet": [625, 628], "totensor": 625, "topilimag": 625, "padding_mod": 625, "border": 625, "colorjitt": 625, "bright": 625, "satur": 625, "hue": 625, "jitter": 625, "tondarrai": 625, "quickli": 626, "human": 626, "post_training_auto_qu": 626, "iii": 626, "classic": 626, "primari": 626, "spent": 626, "hawq_v2_loss": 626, "model_loss": 626, "compli": 626, "focu": 626, "short": 626, "never": 626, "loglevel": 626, "endlessli": 626, "smbo": 626, "appl": 626, "surrog": 626, "divid": 626, "quantil": 626, "x1": 626, "x2": 626, "densiti": 626, "parzen": 626, "greatest": 626, "dai": 626, "abctunestrategi": 626, "overridden": 626, "mobilenet_v1": 628, "onnxrt_integ": 628, "onnxrt_qlinear": 628, "image_tensor": 628, "subsect": 628, "model_wis": 628, "conv1": 628, "hyper": 628, "40": [628, 629], "06": [628, 629], "beta_1": 628, "beta_2": 628, "sparsecategoricalcrossentropi": 628, "reduct": 628, "sum_over_batch_s": 628, "from_logit": 628, "54": [628, 629], "19": [628, 629], "90": [628, 629], "nesterov": 628, "weight_decai": 628, "overal": 628, "8380": 629, "performancethroughput": 629, "sec": 629, "86": 629, "00": 629, "170": 629, "44": 629, "93": 629, "69": 629, "82x": 629, "92": 629, "63": 629, "39": 629, "85x": 629, "61": 629, "83x": 629, "densenet": 629, "121": 629, "73": 629, "72": 629, "89": 629, "274": 629, "148": 629, "161": 629, "76": 629, "132": 629, "35": 629, "39x": 629, "169": 629, "74": 629, "38": 629, "65": 629, "36": 629, "191": 629, "118": 629, "61x": 629, "cnn": 629, "incept": 629, "37": 629, "81": 629, "55": 629, "84x": 629, "resnet101": 629, "57": 629, "21x": 629, "43": 629, "70x": 629, "26": 629, "59": 629, "51": 629, "70": 629, "14x": 629, "139": 629, "955": 629, "328": 629, "91x": 629, "97": 629, "709": 629, "282": 629, "51x": 629, "v3": 629, "71": 629, "337": 629, "160": 629, "11x": 629, "77": 629, "438": 629, "204": 629, "223": 629, "105": 629, "12x": 629, "10x": 629, "1347": 629, "439": 629, "07x": 629, "56": 629, "1192": 629, "492": 629, "42x": 629, "91": 629, "412": 629, "376": 629, "662": 629, "397": 629, "66x": 629, "299": 629, "23": 629, "154": 629, "67": 629, "93x": 629, "476": 629, "227": 629, "fashion": 629, "2734": 629, "1299": 629, "498": 629, "178": 629, "79x": 629, "46": 629, "427": 629, "173": 629, "47x": 629, "resnetv2": 629, "194": 629, "146": 629, "33x": 629, "48": 629, "237": 629, "187": 629, "27x": 629, "152": 629, "155": 629, "38x": 629, "302": 629, "215": 629, "40x": 629, "346": 629, "312": 629, "277": 629, "60x": 629, "273": 629, "31x": 629, "66": 629, "18x": 629, "82": 629, "53x": 629, "24x": 629, "vgg16": 629, "219": 629, "vgg19": 629, "193": 629, "11506": 629, "9665": 629, "19x": 629, "xception": 629, "262": 629, "137": 629, "58": 629, "barthez": 629, "143": 629, "02x": 629, "84": 629, "20x": 629, "209": 629, "08x": 629, "221": 629, "sst": 629, "stsb": 629, "218": 629, "16x": 629, "62": 629, "57x": 629, "55x": 629, "56x": 629, "53": 629, "89x": 629, "blendcnn": 629, "4885": 629, "60": 629, "3715": 629, "camembert": 629, "206": 629, "09x": 629, "deberta": 629, "366": 629, "197": 629, "399": 629, "flaubert": 629, "592": 629, "385": 629, "54x": 629, "wikitext": 629, "hubert": 629, "446": 629, "181": 629, "46x": 629, "layoutlm": 629, "longform": 629, "49": 629, "mbart": 629, "625": 629, "451": 629, "lvwerra": 629, "pegasu": 629, "samsum": 629, "peleenet": 629, "402": 629, "29x": 629, "pokemon": 629, "275": 629, "334": 629, "48x": 629, "reform": 629, "crime": 629, "punish": 629, "162": 629, "153": 629, "06x": 629, "657": 629, "327": 629, "01x": 629, "812": 629, "344": 629, "36x": 629, "360": 629, "23x": 629, "resnext101": 629, "32x8d": 629, "182": 629, "207": 629, "squeezebert": 629, "195": 629, "150": 629, "30x": 629, "75x": 629, "transfo": 629, "xl": 629, "41x": 629, "wave2vec2": 629, "22x": 629, "102": 629, "00x": 629, "115": 629, "17x": 629, "yolo": 629, "232": 629, "28x": 629, "664": 629, "329": 629, "832": 629, "338": 629, "433": 629, "164": 629, "63x": 629, "836": 629, "1396": 629, "463": 629, "90x": 629, "159": 629, "32x": 629, "968": 629, "473": 629, "05x": 629, "958": 629, "477": 629, "arcfac": 629, "126": 629, "78x": 629, "298": 629, "124": 629, "624": 629, "254": 629, "45x": 629, "caffenet": 629, "1432": 629, "540": 629, "65x": 629, "1460": 629, "357": 629, "265": 629, "35x": 629, "86x": 629, "524": 629, "duc": 629, "efficientnet": 629, "1211": 629, "758": 629, "856": 629, "762": 629, "emot": 629, "ferplu": 629, "925": 629, "694": 629, "fcn": 629, "25x": 629, "googlenet": 629, "771": 629, "571": 629, "763": 629, "579": 629, "hf": 629, "156": 629, "multilingu": 629, "99x": 629, "199": 629, "104": 629, "73x": 629, "449": 629, "74x": 629, "l12": 629, "h384": 629, "466": 629, "247": 629, "88x": 629, "l6": 629, "523": 629, "354": 629, "183": 629, "107": 629, "spanbert": 629, "208": 629, "795": 629, "600": 629, "780": 629, "591": 629, "515": 629, "15x": 629, "2370": 629, "1526": 629, "2216": 629, "1506": 629, "2078": 629, "1028": 629, "1762": 629, "76x": 629, "mobilenetv2": 629, "2615": 629, "1645": 629, "59x": 629, "2461": 629, "1674": 629, "766": 629, "431": 629, "77x": 629, "575": 629, "430": 629, "34x": 629, "747": 629, "564": 629, "594": 629, "590": 629, "643": 629, "253": 629, "shufflenet": 629, "2354": 629, "1461": 629, "1850": 629, "1368": 629, "squeezenet": 629, "2484": 629, "1912": 629, "2526": 629, "1911": 629, "710": 629, "549": 629, "622": 629, "497": 629, "652": 629, "507": 629, "573": 629, "470": 629, "527": 629, "396": 629, "68x": 629, "tini": 629, "647": 629, "514": 629, "26x": 629, "ultrafac": 629, "314": 629, "50x": 629, "304": 629, "316": 629, "315": 629, "119": 629, "zfnet": 629, "462": 629, "268": 629, "72x": 629, "465": 629, "62x": 629, "436": 629, "270": 629, "429": 629, "92x": 629, "94x": 629, "331": 629, "242": 629, "37x": 629, "98x": 629, "taskdataset": 629, "accuracyspars": 629, "ratiospars": 629, "commentsbalanc": 629, "unbalanc": 629, "classificationimagenet": 629, "76top": 629, "13top": 629, "magnitudepost": 629, "magnitudequant": 629, "answeringsquad": 629, "34f1": 629, "2x1": 629, "lassounbalanc": 629, "classificationmnli": 629, "mm": 629, "allbalanc": 629, "classificationsst": 629, "32accuraci": 629, "sensitivitybalanc": 629, "classificationqqp": 629, "classificationqnli": 629, "54accuraci": 629, "em": 629, "87f1": 629, "momentumunbalanc": 629, "momentumbalanc": 629, "90f1": 629, "59f1": 629, "23f1": 629, "classificationmrpc": 629, "52f1": 629, "26f1": 629, "61accuraci": 629, "7965": 629, "wideresnet40": 629, "9522": 629, "8178": 629, "0213": 629, "8235": 629, "027": 629, "5494": 629, "7153": 629, "5540": 629, "0046": 629, "5523": 629, "0029": 629, "vgg": 629, "7022": 629, "7415": 629, "7025": 629, "0003": 629, "6739": 629, "7399": 629, "6845": 629, "0106": 629, "7034": 629, "8382": 629, "bilstm": 629, "8314": 629, "9403": 629, "9048": 629, "0734": 629, "7323": 629, "8256": 629, "8084": 629, "8814": 629, "7442": 629, "8371": 629, "0119": 629, "0115": 629, "tinybert": 629, "8018": 629, "8044": 629, "8363": 629, "8411": 629, "8025": 629, "8074": 629, "0007": 629, "0030": 629, "8626": 629, "8213": 629, "9091": 629, "8782": 629, "8684": 629, "8259": 629, "0058": 629, "distilroberta": 629, "6057": 629, "6455": 629, "6187": 629, "0130": 629, "c6i": 629, "2xlarg": 629, "c6a": 629, "c6g": 629, "a100cuda": 629}, "objects": {"": [[0, 0, 0, "-", "644ec953a7dc_pruning_support"], [1, 0, 0, "-", "6ece06672ed3_v1_14"], [2, 0, 0, "-", "6f0d0f71d92e_v1_13"], [3, 0, 0, "-", "9e89549a08c8_v1_11"], [4, 0, 0, "-", "block_mask"], [5, 0, 0, "-", "env"], [293, 0, 0, "-", "neural_compressor"]], "6ece06672ed3_v1_14": [[1, 1, 1, "ece06672ed3_v1_14.update_dataloaders", "update_dataloaders"], [1, 1, 1, "ece06672ed3_v1_14.update_transformations", "update_transformations"]], "env": [[5, 1, 1, "", "run_migrations_offline"], [5, 1, 1, "", "run_migrations_online"]], "neural_compressor": [[293, 2, 1, "", "Benchmark"], [293, 2, 1, "", "DistillationConfig"], [293, 2, 1, "", "MixedPrecisionConfig"], [293, 2, 1, "", "PostTrainingQuantConfig"], [293, 2, 1, "", "QuantizationAwareTrainingConfig"], [293, 2, 1, "", "WeightPruningConfig"], [7, 0, 0, "-", "adaptor"], [150, 0, 0, "-", "algorithm"], [153, 0, 0, "-", "benchmark"], [157, 0, 0, "-", "compression"], [167, 0, 0, "-", "conf"], [169, 0, 0, "-", "config"], [170, 0, 0, "-", "contrib"], [195, 0, 0, "-", "data"], [245, 0, 0, "-", "experimental"], [300, 0, 0, "-", "metric"], [302, 0, 0, "-", "mix_precision"], [304, 0, 0, "-", "model"], [312, 0, 0, "-", "objective"], [313, 0, 0, "-", "quantization"], [293, 1, 1, "", "set_random_seed"], [293, 1, 1, "", "set_tensorboard"], [293, 1, 1, "", "set_workspace"], [320, 0, 0, "-", "strategy"], [331, 0, 0, "-", "training"], [335, 0, 0, "-", "utils"], [477, 0, 0, "-", "ux"], [523, 0, 0, "-", "version"]], "neural_compressor.Benchmark": [[293, 3, 1, "", "b_dataloader"], [293, 3, 1, "", "b_func"], [293, 4, 1, "", "config_instance"], [293, 4, 1, "", "generate_prefix"], [293, 3, 1, "", "model"], [293, 3, 1, "", "results"], [293, 4, 1, "", "run_instance"], [293, 4, 1, "", "summary_benchmark"]], "neural_compressor.DistillationConfig": [[293, 3, 1, "", "criterion"], [293, 3, 1, "", "optimizer"], [293, 3, 1, "", "teacher_model"]], "neural_compressor.PostTrainingQuantConfig": [[293, 3, 1, "", "approach"], [293, 3, 1, "", "tuning_criterion"]], "neural_compressor.QuantizationAwareTrainingConfig": [[293, 3, 1, "", "approach"]], "neural_compressor.WeightPruningConfig": [[293, 3, 1, "", "weight_compression"]], "neural_compressor.adaptor": [[6, 0, 0, "-", "adaptor"], [8, 0, 0, "-", "keras"], [9, 0, 0, "-", "keras_utils"], [11, 0, 0, "-", "mxnet"], [12, 0, 0, "-", "mxnet_utils"], [14, 0, 0, "-", "onnxrt"], [16, 0, 0, "-", "ox_utils"], [39, 0, 0, "-", "pytorch"], [40, 0, 0, "-", "query"], [41, 0, 0, "-", "tensorflow"], [105, 0, 0, "-", "tf_utils"], [143, 0, 0, "-", "torch_utils"]], "neural_compressor.adaptor.adaptor": [[6, 2, 1, "", "Adaptor"], [6, 1, 1, "", "adaptor_registry"]], "neural_compressor.adaptor.adaptor.Adaptor": [[6, 4, 1, "", "convert"], [6, 4, 1, "", "evaluate"], [6, 4, 1, "", "inspect_tensor"], [6, 4, 1, "", "quantize"], [6, 4, 1, "", "quantize_input"], [6, 4, 1, "", "query_fused_patterns"], [6, 4, 1, "", "query_fw_capability"], [6, 4, 1, "", "save"], [6, 4, 1, "", "set_tensor"]], "neural_compressor.adaptor.keras": [[8, 2, 1, "", "KerasAdaptor"], [8, 2, 1, "", "KerasQuery"]], "neural_compressor.adaptor.keras.KerasAdaptor": [[8, 4, 1, "", "convert"], [8, 4, 1, "", "evaluate"], [8, 4, 1, "", "get_optype_wise_ability"], [8, 4, 1, "", "inspect_tensor"], [8, 4, 1, "", "quantize"], [8, 4, 1, "", "quantize_input"], [8, 4, 1, "", "query_fw_capability"], [8, 4, 1, "", "save"], [8, 4, 1, "", "set_tensor"]], "neural_compressor.adaptor.keras.KerasQuery": [[8, 4, 1, "", "get_op_types"], [8, 4, 1, "", "get_op_types_by_precision"], [8, 4, 1, "", "get_precisions"], [8, 4, 1, "", "get_quantization_capability"], [8, 4, 1, "", "get_version"]], "neural_compressor.adaptor.keras_utils": [[10, 0, 0, "-", "quantizer"]], "neural_compressor.adaptor.mxnet": [[11, 2, 1, "", "MxNetAdaptor"]], "neural_compressor.adaptor.mxnet.MxNetAdaptor": [[11, 4, 1, "", "evaluate"], [11, 4, 1, "", "inspect_tensor"], [11, 4, 1, "", "quantize"], [11, 4, 1, "", "query_fw_capability"], [11, 4, 1, "", "recover_tuned_model"], [11, 4, 1, "", "set_tensor"]], "neural_compressor.adaptor.mxnet_utils": [[13, 0, 0, "-", "util"]], "neural_compressor.adaptor.mxnet_utils.util": [[13, 2, 1, "", "CalibCollector"], [13, 2, 1, "", "CalibData"], [13, 2, 1, "", "CollectorBase"], [13, 2, 1, "", "DataIterLoader"], [13, 2, 1, "", "DataLoaderWrap"], [13, 2, 1, "", "NameCollector"], [13, 2, 1, "", "OpType"], [13, 2, 1, "", "TensorCollector"], [13, 1, 1, "", "amp_convert"], [13, 1, 1, "", "calib_model"], [13, 1, 1, "", "check_mx_version"], [13, 1, 1, "", "combine_capabilities"], [13, 1, 1, "", "create_data_example"], [13, 1, 1, "", "distribute_calib_tensors"], [13, 1, 1, "", "ensure_list"], [13, 1, 1, "", "fuse"], [13, 1, 1, "", "get_framework_name"], [13, 1, 1, "", "is_model_quantized"], [13, 1, 1, "", "isiterable"], [13, 1, 1, "", "make_module"], [13, 1, 1, "", "make_nc_model"], [13, 1, 1, "", "make_symbol_block"], [13, 1, 1, "", "ndarray_to_device"], [13, 1, 1, "", "parse_tune_config"], [13, 1, 1, "", "prepare_dataloader"], [13, 1, 1, "", "prepare_model"], [13, 1, 1, "", "prepare_model_data"], [13, 1, 1, "", "quantize_sym_model"], [13, 1, 1, "", "query_quantizable_nodes"], [13, 1, 1, "", "run_forward"]], "neural_compressor.adaptor.mxnet_utils.util.CalibCollector": [[13, 4, 1, "", "calc_kl_th_dict"], [13, 4, 1, "", "collect_gluon"]], "neural_compressor.adaptor.mxnet_utils.util.CalibData": [[13, 3, 1, "", "min_max_dict"], [13, 4, 1, "", "post_collect"]], "neural_compressor.adaptor.mxnet_utils.util.CollectorBase": [[13, 4, 1, "", "collect_gluon"], [13, 4, 1, "", "collect_module"], [13, 4, 1, "", "post_batch"], [13, 4, 1, "", "pre_batch"]], "neural_compressor.adaptor.mxnet_utils.util.NameCollector": [[13, 4, 1, "", "collect_gluon"]], "neural_compressor.adaptor.mxnet_utils.util.TensorCollector": [[13, 4, 1, "", "collect_gluon"], [13, 4, 1, "", "pre_batch"]], "neural_compressor.adaptor.onnxrt": [[14, 2, 1, "", "ONNXRT_IntegerOpsAdaptor"], [14, 2, 1, "", "ONNXRT_QDQAdaptor"], [14, 2, 1, "", "ONNXRT_QLinearOpsAdaptor"], [14, 2, 1, "", "ONNXRUNTIMEAdaptor"]], "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor": [[14, 4, 1, "", "evaluate"], [14, 4, 1, "", "inspect_tensor"], [14, 4, 1, "", "quantize"], [14, 4, 1, "", "query_fw_capability"], [14, 4, 1, "", "recover"], [14, 4, 1, "", "save"], [14, 4, 1, "", "smooth_quant"]], "neural_compressor.adaptor.ox_utils": [[15, 0, 0, "-", "calibration"], [28, 0, 0, "-", "operators"], [37, 0, 0, "-", "quantizer"], [38, 0, 0, "-", "util"]], "neural_compressor.adaptor.ox_utils.calibration": [[15, 2, 1, "", "ONNXRTAugment"]], "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment": [[15, 4, 1, "", "augment_graph"], [15, 4, 1, "", "calculate_quantization_params"], [15, 4, 1, "", "calculate_scale_zeropoint"], [15, 4, 1, "", "calib_smooth"], [15, 4, 1, "", "dump_calibration"], [15, 4, 1, "", "dump_minmax"], [15, 4, 1, "", "dump_tensor"], [15, 4, 1, "", "get_intermediate_outputs"]], "neural_compressor.adaptor.ox_utils.operators": [[17, 0, 0, "-", "activation"], [18, 0, 0, "-", "argmax"], [19, 0, 0, "-", "attention"], [20, 0, 0, "-", "binary_op"], [21, 0, 0, "-", "concat"], [22, 0, 0, "-", "conv"], [23, 0, 0, "-", "direct_q8"], [24, 0, 0, "-", "embed_layernorm"], [25, 0, 0, "-", "gather"], [26, 0, 0, "-", "gavgpool"], [27, 0, 0, "-", "gemm"], [29, 0, 0, "-", "lstm"], [30, 0, 0, "-", "matmul"], [31, 0, 0, "-", "maxpool"], [32, 0, 0, "-", "ops"], [33, 0, 0, "-", "pad"], [34, 0, 0, "-", "pooling"], [35, 0, 0, "-", "resize"], [36, 0, 0, "-", "split"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[17, 2, 1, "", "ActivationOperator"], [17, 2, 1, "", "QActivationOperator"], [17, 2, 1, "", "RemovableActivationOperator"]], "neural_compressor.adaptor.ox_utils.operators.activation.ActivationOperator": [[17, 4, 1, "", "convert"], [17, 4, 1, "", "convert_check"], [17, 4, 1, "", "quantize"], [17, 4, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.activation.QActivationOperator": [[17, 4, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.activation.RemovableActivationOperator": [[17, 4, 1, "", "quantize"], [17, 4, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[18, 2, 1, "", "ArgMaxOperator"], [18, 2, 1, "", "QArgMaxOperator"]], "neural_compressor.adaptor.ox_utils.operators.argmax.ArgMaxOperator": [[18, 4, 1, "", "convert"], [18, 4, 1, "", "convert_check"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[19, 2, 1, "", "AttentionOperator"], [19, 2, 1, "", "QAttentionOperator"]], "neural_compressor.adaptor.ox_utils.operators.attention.AttentionOperator": [[19, 4, 1, "", "convert"], [19, 4, 1, "", "convert_check"], [19, 4, 1, "", "quantize"]], "neural_compressor.adaptor.ox_utils.operators.attention.QAttentionOperator": [[19, 4, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[20, 2, 1, "", "BinaryOperator"], [20, 2, 1, "", "QBinaryOperator"]], "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryOperator": [[20, 4, 1, "", "convert"], [20, 4, 1, "", "convert_check"], [20, 4, 1, "", "quantize"], [20, 4, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.binary_op.QBinaryOperator": [[20, 4, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[21, 2, 1, "", "ConcatOperator"], [21, 2, 1, "", "QConcatOperator"]], "neural_compressor.adaptor.ox_utils.operators.concat.ConcatOperator": [[21, 4, 1, "", "cast"], [21, 4, 1, "", "convert"], [21, 4, 1, "", "convert_check"], [21, 4, 1, "", "quantize"], [21, 4, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.concat.QConcatOperator": [[21, 4, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[22, 2, 1, "", "ConvOperator"], [22, 2, 1, "", "QConvOperator"]], "neural_compressor.adaptor.ox_utils.operators.conv.ConvOperator": [[22, 4, 1, "", "convert"], [22, 4, 1, "", "convert_check"], [22, 4, 1, "", "quantize"]], "neural_compressor.adaptor.ox_utils.operators.conv.QConvOperator": [[22, 4, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[23, 2, 1, "", "Direct8BitOperator"], [23, 2, 1, "", "QDirectOperator"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8.Direct8BitOperator": [[23, 4, 1, "", "cast"], [23, 4, 1, "", "convert"], [23, 4, 1, "", "convert_check"], [23, 4, 1, "", "quantize"], [23, 4, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[24, 2, 1, "", "EmbedLayerNormalizationOperator"], [24, 2, 1, "", "QEmbedLayerNormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.EmbedLayerNormalizationOperator": [[24, 4, 1, "", "convert"], [24, 4, 1, "", "convert_check"], [24, 4, 1, "", "quantize"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.QEmbedLayerNormalizationOperator": [[24, 4, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[25, 2, 1, "", "GatherOperator"], [25, 2, 1, "", "QGatherOperator"]], "neural_compressor.adaptor.ox_utils.operators.gather.GatherOperator": [[25, 4, 1, "", "convert"], [25, 4, 1, "", "convert_check"], [25, 4, 1, "", "quantize"], [25, 4, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[26, 2, 1, "", "GlobalAveragePoolOperator"], [26, 2, 1, "", "QGlobalAveragePoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool.GlobalAveragePoolOperator": [[26, 4, 1, "", "convert"], [26, 4, 1, "", "convert_check"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool.QGlobalAveragePoolOperator": [[26, 4, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[27, 2, 1, "", "GemmOperator"], [27, 2, 1, "", "QGemmOperator"]], "neural_compressor.adaptor.ox_utils.operators.gemm.GemmOperator": [[27, 4, 1, "", "convert"], [27, 4, 1, "", "convert_check"], [27, 4, 1, "", "quantize"], [27, 4, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.gemm.QGemmOperator": [[27, 4, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[29, 2, 1, "", "LSTMOperator"]], "neural_compressor.adaptor.ox_utils.operators.lstm.LSTMOperator": [[29, 4, 1, "", "convert"], [29, 4, 1, "", "convert_check"], [29, 4, 1, "", "quantize"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[30, 2, 1, "", "MatMulOperator"], [30, 2, 1, "", "QMatMulOperator"]], "neural_compressor.adaptor.ox_utils.operators.matmul.MatMulOperator": [[30, 4, 1, "", "convert"], [30, 4, 1, "", "convert_check"], [30, 4, 1, "", "quantize"]], "neural_compressor.adaptor.ox_utils.operators.matmul.QMatMulOperator": [[30, 4, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[31, 2, 1, "", "MaxPoolOperator"], [31, 2, 1, "", "QMaxPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.maxpool.MaxPoolOperator": [[31, 4, 1, "", "convert"], [31, 4, 1, "", "convert_check"], [31, 4, 1, "", "quantize"], [31, 4, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[32, 2, 1, "", "Operator"], [32, 2, 1, "", "QOperator"], [32, 1, 1, "", "op_registry"], [32, 1, 1, "", "qop_registry"]], "neural_compressor.adaptor.ox_utils.operators.ops.Operator": [[32, 4, 1, "", "cast"], [32, 4, 1, "", "convert"], [32, 4, 1, "", "convert_check"], [32, 4, 1, "", "quantize"], [32, 4, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.ops.QOperator": [[32, 4, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[33, 2, 1, "", "PadOperator"], [33, 2, 1, "", "QPadOperator"]], "neural_compressor.adaptor.ox_utils.operators.pad.PadOperator": [[33, 4, 1, "", "convert"], [33, 4, 1, "", "convert_check"], [33, 4, 1, "", "quantize"], [33, 4, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[34, 2, 1, "", "PoolOperator"], [34, 2, 1, "", "QPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.pooling.PoolOperator": [[34, 4, 1, "", "convert"], [34, 4, 1, "", "convert_check"], [34, 4, 1, "", "quantize"], [34, 4, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.pooling.QPoolOperator": [[34, 4, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[35, 2, 1, "", "QResizeOperator"], [35, 2, 1, "", "ResizeOperator"]], "neural_compressor.adaptor.ox_utils.operators.resize.ResizeOperator": [[35, 4, 1, "", "convert"], [35, 4, 1, "", "convert_check"], [35, 4, 1, "", "quantize"], [35, 4, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.split": [[36, 2, 1, "", "QSplitOperator"], [36, 2, 1, "", "SplitOperator"]], "neural_compressor.adaptor.ox_utils.operators.split.QSplitOperator": [[36, 4, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.split.SplitOperator": [[36, 4, 1, "", "cast"], [36, 4, 1, "", "convert"], [36, 4, 1, "", "convert_check"], [36, 4, 1, "", "quantize"]], "neural_compressor.adaptor.ox_utils.quantizer": [[37, 2, 1, "", "Quantizer"]], "neural_compressor.adaptor.ox_utils.quantizer.Quantizer": [[37, 4, 1, "", "check_opset_version"], [37, 4, 1, "", "convert_qdq_to_operator_oriented"], [37, 4, 1, "", "dequantize_tensor"], [37, 4, 1, "", "dtype_cast"], [37, 4, 1, "", "get_bias_add_nodes"], [37, 4, 1, "", "insert_qdq"], [37, 4, 1, "", "is_valid_quantize_weight"], [37, 4, 1, "", "merge_dedicated_qdq_pair"], [37, 4, 1, "", "quantize_bias"], [37, 4, 1, "", "quantize_bias_tensor"], [37, 4, 1, "", "quantize_inputs"], [37, 4, 1, "", "quantize_model"], [37, 4, 1, "", "quantize_outputs"], [37, 4, 1, "", "quantize_weight_per_channel"], [37, 4, 1, "", "quantize_weights_per_channel"], [37, 4, 1, "", "remove_redundant_pairs"], [37, 4, 1, "", "should_cast"], [37, 4, 1, "", "should_convert"], [37, 4, 1, "", "should_quantize"], [37, 4, 1, "", "tensor_proto_to_array"]], "neural_compressor.adaptor.ox_utils.util": [[38, 2, 1, "", "QuantFormat"], [38, 2, 1, "", "QuantType"], [38, 2, 1, "", "QuantizationMode"], [38, 2, 1, "", "QuantizedInitializer"], [38, 2, 1, "", "QuantizedValue"], [38, 2, 1, "", "QuantizedValueType"], [38, 2, 1, "", "ValueInfo"], [38, 1, 1, "", "adjust_weights_per_input"], [38, 1, 1, "", "adjust_weights_per_op"], [38, 1, 1, "", "attribute_to_kwarg"], [38, 1, 1, "", "calculate_scale_zp"], [38, 1, 1, "", "cast_tensor"], [38, 1, 1, "", "collate_preds"], [38, 1, 1, "", "dequantize_data"], [38, 1, 1, "", "dequantize_data_with_scale_zero"], [38, 1, 1, "", "dtype_to_name"], [38, 1, 1, "", "find_by_name"], [38, 1, 1, "", "float_to_bfloat16"], [38, 1, 1, "", "float_to_float16"], [38, 1, 1, "", "get_smooth_scales_per_input"], [38, 1, 1, "", "get_smooth_scales_per_op"], [38, 1, 1, "", "insert_smooth_mul_op_per_input"], [38, 1, 1, "", "insert_smooth_mul_op_per_op"], [38, 1, 1, "", "is_B_transposed"], [38, 1, 1, "", "make_dquant_node"], [38, 1, 1, "", "make_quant_node"], [38, 1, 1, "", "quantize_data"], [38, 1, 1, "", "quantize_data_per_channel"], [38, 1, 1, "", "quantize_data_with_scale_zero"], [38, 1, 1, "", "quantize_nparray"], [38, 1, 1, "", "remove_init_from_model_input"], [38, 1, 1, "", "split_shared_bias"], [38, 1, 1, "", "trt_env_setup"]], "neural_compressor.adaptor.pytorch": [[39, 2, 1, "", "PyTorchAdaptor"], [39, 2, 1, "", "PyTorchQuery"], [39, 2, 1, "", "PyTorch_FXAdaptor"], [39, 2, 1, "", "PyTorch_IPEXAdaptor"], [39, 2, 1, "", "TemplateAdaptor"], [39, 1, 1, "", "get_ops_recursively"]], "neural_compressor.adaptor.pytorch.PyTorchAdaptor": [[39, 4, 1, "", "evaluate"], [39, 4, 1, "", "get_non_quant_modules"], [39, 4, 1, "", "is_fused_child"], [39, 4, 1, "", "is_fused_op"], [39, 4, 1, "", "is_last_fused_child"], [39, 4, 1, "", "quantize"], [39, 4, 1, "", "query_fw_capability"], [39, 4, 1, "", "train"]], "neural_compressor.adaptor.pytorch.PyTorchQuery": [[39, 4, 1, "", "get_op_types"], [39, 4, 1, "", "get_op_types_by_precision"], [39, 4, 1, "", "get_quantization_capability"]], "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor": [[39, 4, 1, "", "calculate_op_sensitivity"], [39, 4, 1, "", "convert_sub_graph"], [39, 4, 1, "", "evaluate"], [39, 4, 1, "", "fuse_fx_model"], [39, 4, 1, "", "prepare_sub_graph"], [39, 4, 1, "", "quantize"], [39, 4, 1, "", "query_fw_capability"], [39, 4, 1, "", "train"]], "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor": [[39, 4, 1, "", "evaluate"], [39, 4, 1, "", "quantize"], [39, 4, 1, "", "query_fw_capability"], [39, 4, 1, "", "save"]], "neural_compressor.adaptor.pytorch.TemplateAdaptor": [[39, 4, 1, "", "calculate_hessian_trace"], [39, 4, 1, "", "is_fused_module"], [39, 4, 1, "", "smooth_quant"]], "neural_compressor.adaptor.query": [[40, 2, 1, "", "QueryBackendCapability"]], "neural_compressor.adaptor.query.QueryBackendCapability": [[40, 4, 1, "", "get_fuse_patterns"], [40, 4, 1, "", "get_mixed_precision_combination"], [40, 4, 1, "", "get_op_types"], [40, 4, 1, "", "get_precisions"], [40, 4, 1, "", "get_quantization_capability"], [40, 4, 1, "", "get_version"], [40, 4, 1, "", "set_quantization_config"]], "neural_compressor.adaptor.tensorflow": [[41, 2, 1, "", "TensorFlowAdaptor"], [41, 2, 1, "", "TensorflowQuery"], [41, 2, 1, "", "Tensorflow_ITEXAdaptor"]], "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor": [[41, 4, 1, "", "calculate_op_sensitivity"], [41, 4, 1, "", "convert"], [41, 4, 1, "", "diagnosis_helper"], [41, 4, 1, "", "evaluate"], [41, 4, 1, "", "fused_node_mapping"], [41, 4, 1, "", "get_optype_wise_ability"], [41, 4, 1, "", "get_output_op_names"], [41, 4, 1, "", "inspect_activation"], [41, 4, 1, "", "inspect_tensor"], [41, 4, 1, "", "inspect_weight_and_bias"], [41, 4, 1, "", "qat_convert"], [41, 4, 1, "", "quantize"], [41, 4, 1, "", "quantize_input"], [41, 4, 1, "", "query_fw_capability"], [41, 4, 1, "", "recover_tuned_model"], [41, 4, 1, "", "save"], [41, 4, 1, "", "set_tensor"], [41, 4, 1, "", "train"]], "neural_compressor.adaptor.tensorflow.TensorflowQuery": [[41, 4, 1, "", "generate_internal_patterns"], [41, 4, 1, "", "get_bf16_patterns"], [41, 4, 1, "", "get_eightbit_patterns"], [41, 4, 1, "", "get_fuse_patterns"], [41, 4, 1, "", "get_mixed_precision_combination"], [41, 4, 1, "", "get_op_types"], [41, 4, 1, "", "get_op_types_by_precision"], [41, 4, 1, "", "get_quantization_capability"], [41, 4, 1, "", "get_version"]], "neural_compressor.adaptor.tensorflow.Tensorflow_ITEXAdaptor": [[41, 4, 1, "", "quantize"]], "neural_compressor.adaptor.tf_utils": [[42, 0, 0, "-", "graph_converter"], [43, 0, 0, "-", "graph_converter_without_calib"], [81, 0, 0, "-", "graph_rewriter"], [104, 0, 0, "-", "graph_util"], [106, 0, 0, "-", "quantize_graph"], [133, 0, 0, "-", "quantize_graph_common"], [134, 0, 0, "-", "tf2onnx_converter"], [137, 0, 0, "-", "transform_graph"], [140, 0, 0, "-", "util"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[42, 2, 1, "", "GraphConverter"]], "neural_compressor.adaptor.tf_utils.graph_converter.GraphConverter": [[42, 4, 1, "", "bf16_convert"], [42, 4, 1, "", "convert"], [42, 4, 1, "", "quantize"], [42, 4, 1, "", "quantize_with_qdq_pattern"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[43, 2, 1, "", "GraphConverterWithoutCalib"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib.GraphConverterWithoutCalib": [[43, 4, 1, "", "bf16_convert"], [43, 4, 1, "", "convert_without_calib"], [43, 4, 1, "", "quantize_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[45, 0, 0, "-", "bf16"], [70, 0, 0, "-", "generic"], [80, 0, 0, "-", "graph_base"], [89, 0, 0, "-", "int8"], [95, 0, 0, "-", "onnx"], [100, 0, 0, "-", "qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[44, 0, 0, "-", "bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[44, 2, 1, "", "BF16Convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert.BF16Convert": [[44, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[46, 0, 0, "-", "convert_add_to_biasadd"], [47, 0, 0, "-", "convert_layout"], [48, 0, 0, "-", "convert_leakyrelu"], [49, 0, 0, "-", "convert_nan_to_random"], [50, 0, 0, "-", "convert_placeholder_to_const"], [51, 0, 0, "-", "dequantize_cast_optimizer"], [52, 0, 0, "-", "dilated_contraction"], [53, 0, 0, "-", "dummy_biasadd"], [54, 0, 0, "-", "expanddims_optimizer"], [55, 0, 0, "-", "fetch_weight_from_reshape"], [56, 0, 0, "-", "fold_batch_norm"], [57, 0, 0, "-", "fold_constant"], [58, 0, 0, "-", "fuse_biasadd_add"], [59, 0, 0, "-", "fuse_column_wise_mul"], [60, 0, 0, "-", "fuse_conv_with_math"], [61, 0, 0, "-", "fuse_decomposed_bn"], [62, 0, 0, "-", "fuse_decomposed_in"], [63, 0, 0, "-", "fuse_gelu"], [64, 0, 0, "-", "fuse_layer_norm"], [65, 0, 0, "-", "fuse_pad_with_conv"], [66, 0, 0, "-", "fuse_pad_with_fp32_conv"], [67, 0, 0, "-", "fuse_reshape_transpose"], [68, 0, 0, "-", "graph_cse_optimizer"], [69, 0, 0, "-", "grappler_pass"], [71, 0, 0, "-", "insert_print_node"], [72, 0, 0, "-", "move_squeeze_after_relu"], [73, 0, 0, "-", "pre_optimize"], [74, 0, 0, "-", "remove_training_nodes"], [75, 0, 0, "-", "rename_batch_norm"], [76, 0, 0, "-", "split_shared_input"], [77, 0, 0, "-", "strip_equivalent_nodes"], [78, 0, 0, "-", "strip_unused_nodes"], [79, 0, 0, "-", "switch_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[46, 2, 1, "", "ConvertAddToBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd.ConvertAddToBiasAddOptimizer": [[46, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[47, 2, 1, "", "ConvertLayoutOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout.ConvertLayoutOptimizer": [[47, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[48, 2, 1, "", "ConvertLeakyReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu.ConvertLeakyReluOptimizer": [[48, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[49, 2, 1, "", "ConvertNanToRandom"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random.ConvertNanToRandom": [[49, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[50, 2, 1, "", "ConvertPlaceholderToConst"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst": [[50, 4, 1, "", "do_transformation"], [50, 4, 1, "", "strtobool"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[51, 2, 1, "", "DequantizeCastOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer.DequantizeCastOptimizer": [[51, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[52, 2, 1, "", "DilatedContraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction.DilatedContraction": [[52, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[53, 2, 1, "", "InjectDummyBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd.InjectDummyBiasAddOptimizer": [[53, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[54, 2, 1, "", "ExpandDimsOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer.ExpandDimsOptimizer": [[54, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[55, 2, 1, "", "FetchWeightFromReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape.FetchWeightFromReshapeOptimizer": [[55, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[56, 2, 1, "", "FoldBatchNormNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer": [[56, 4, 1, "", "do_transformation"], [56, 4, 1, "", "scale_after_normalization"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[57, 2, 1, "", "GraphFoldConstantOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer": [[57, 4, 1, "", "check_all_folded"], [57, 4, 1, "", "check_const_inputs"], [57, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[58, 2, 1, "", "FuseBiasAddAndAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add.FuseBiasAddAndAddOptimizer": [[58, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[59, 2, 1, "", "FuseColumnWiseMulOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul.FuseColumnWiseMulOptimizer": [[59, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[60, 2, 1, "", "FuseConvWithMathOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math.FuseConvWithMathOptimizer": [[60, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[61, 2, 1, "", "FuseDecomposedBNOptimizer"], [61, 1, 1, "", "bypass_reshape"], [61, 1, 1, "", "get_const_dim_count"], [61, 1, 1, "", "node_from_map"], [61, 1, 1, "", "node_name_from_input"], [61, 1, 1, "", "valid_reshape_inputs"], [61, 1, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.FuseDecomposedBNOptimizer": [[61, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[62, 2, 1, "", "FuseDecomposedINOptimizer"], [62, 1, 1, "", "bypass_reshape"], [62, 1, 1, "", "get_const_dim_count"], [62, 1, 1, "", "node_from_map"], [62, 1, 1, "", "node_name_from_input"], [62, 1, 1, "", "valid_reshape_inputs"], [62, 1, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.FuseDecomposedINOptimizer": [[62, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[63, 2, 1, "", "FuseGeluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu.FuseGeluOptimizer": [[63, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[64, 2, 1, "", "FuseLayerNormOptimizer"], [64, 1, 1, "", "node_from_map"], [64, 1, 1, "", "node_name_from_input"], [64, 1, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.FuseLayerNormOptimizer": [[64, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[65, 2, 1, "", "FusePadWithConv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv.FusePadWithConv2DOptimizer": [[65, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[66, 2, 1, "", "FusePadWithFP32Conv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.FusePadWithFP32Conv2DOptimizer": [[66, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[67, 2, 1, "", "FuseTransposeReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose.FuseTransposeReshapeOptimizer": [[67, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[68, 2, 1, "", "GraphCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer.GraphCseOptimizer": [[68, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[69, 2, 1, "", "GrapplerOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass.GrapplerOptimizer": [[69, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[71, 2, 1, "", "InsertPrintMinMaxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node.InsertPrintMinMaxNode": [[71, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[72, 2, 1, "", "MoveSqueezeAfterReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu.MoveSqueezeAfterReluOptimizer": [[72, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[73, 2, 1, "", "PreOptimization"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.PreOptimization": [[73, 4, 1, "", "get_excluded_node_names"], [73, 4, 1, "", "get_matched_nodes"], [73, 4, 1, "", "get_optimized_model"], [73, 4, 1, "", "has_positive_input"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[74, 2, 1, "", "RemoveTrainingNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes.RemoveTrainingNodesOptimizer": [[74, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[75, 2, 1, "", "RenameBatchNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm.RenameBatchNormOptimizer": [[75, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[76, 2, 1, "", "SplitSharedInputOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input.SplitSharedInputOptimizer": [[76, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[77, 2, 1, "", "StripEquivalentNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes.StripEquivalentNodesOptimizer": [[77, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[78, 2, 1, "", "StripUnusedNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes.StripUnusedNodesOptimizer": [[78, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[79, 2, 1, "", "SwitchOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer.SwitchOptimizer": [[79, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[80, 2, 1, "", "GraphRewriterBase"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base.GraphRewriterBase": [[80, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[82, 0, 0, "-", "freeze_fake_quant"], [83, 0, 0, "-", "freeze_value"], [84, 0, 0, "-", "freeze_value_without_calib"], [85, 0, 0, "-", "fuse_conv_redundant_dequantize"], [86, 0, 0, "-", "fuse_conv_requantize"], [87, 0, 0, "-", "fuse_matmul_redundant_dequantize"], [88, 0, 0, "-", "fuse_matmul_requantize"], [90, 0, 0, "-", "meta_op_optimizer"], [91, 0, 0, "-", "post_hostconst_converter"], [92, 0, 0, "-", "post_quantized_op_cse"], [93, 0, 0, "-", "rnn_convert"], [94, 0, 0, "-", "scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[82, 2, 1, "", "FreezeFakeQuantOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant.FreezeFakeQuantOpOptimizer": [[82, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[83, 2, 1, "", "FreezeValueTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer": [[83, 4, 1, "", "do_transformation"], [83, 4, 1, "", "generate_output_graph"], [83, 4, 1, "", "generate_output_graph_ranges"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[84, 2, 1, "", "FreezeValueWithoutCalibTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer": [[84, 4, 1, "", "do_transformation_without_calib"], [84, 4, 1, "", "generate_output_graph"], [84, 4, 1, "", "generate_output_graph_ranges"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[85, 2, 1, "", "FuseConvRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.FuseConvRedundantDequantizeTransformer": [[85, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[86, 2, 1, "", "FuseConvRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize.FuseConvRequantizeTransformer": [[86, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[87, 2, 1, "", "FuseMatMulRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.FuseMatMulRedundantDequantizeTransformer": [[87, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[88, 2, 1, "", "FuseMatMulRequantizeDequantizeNewAPITransformer"], [88, 2, 1, "", "FuseMatMulRequantizeDequantizeTransformer"], [88, 2, 1, "", "FuseMatMulRequantizeNewAPITransformer"], [88, 2, 1, "", "FuseMatMulRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeNewAPITransformer": [[88, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeTransformer": [[88, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeNewAPITransformer": [[88, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeTransformer": [[88, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[90, 2, 1, "", "MetaInfoChangingMemOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer.MetaInfoChangingMemOpOptimizer": [[90, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[91, 2, 1, "", "PostHostConstConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter.PostHostConstConverter": [[91, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[92, 2, 1, "", "PostCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse.PostCseOptimizer": [[92, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[93, 2, 1, "", "QuantizedRNNConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert.QuantizedRNNConverter": [[93, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[94, 2, 1, "", "ScaleProPagationTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation.ScaleProPagationTransformer": [[94, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[96, 0, 0, "-", "onnx_graph"], [97, 0, 0, "-", "onnx_node"], [98, 0, 0, "-", "onnx_schema"], [99, 0, 0, "-", "tf2onnx_utils"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[96, 2, 1, "", "OnnxGraph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph": [[96, 4, 1, "", "add_graph_input"], [96, 4, 1, "", "add_graph_output"], [96, 4, 1, "", "append_node"], [96, 4, 1, "", "convert_qdq_nodes"], [96, 4, 1, "", "copy_dtype"], [96, 4, 1, "", "copy_shape"], [96, 4, 1, "", "create_new_graph_with_same_config"], [96, 4, 1, "", "delete_qdq_nodes"], [96, 4, 1, "", "delete_unused_nodes"], [96, 4, 1, "", "dump_graph"], [96, 4, 1, "", "dump_node_statistics"], [96, 3, 1, "", "extra_opset"], [96, 4, 1, "", "extract_sub_graph_nodes"], [96, 4, 1, "", "find_output_consumers"], [96, 4, 1, "", "get_dtype"], [96, 4, 1, "", "get_node_by_name"], [96, 4, 1, "", "get_node_by_output"], [96, 4, 1, "", "get_node_by_output_in_current_graph"], [96, 4, 1, "", "get_nodes"], [96, 4, 1, "", "get_rank"], [96, 4, 1, "", "get_shape"], [96, 4, 1, "", "get_tensor_value"], [96, 3, 1, "", "input_names"], [96, 4, 1, "", "insert_new_node_on_input"], [96, 4, 1, "", "insert_new_node_on_output"], [96, 4, 1, "", "insert_node_on_output"], [96, 4, 1, "", "is_const"], [96, 4, 1, "", "is_empty_input"], [96, 4, 1, "", "is_target"], [96, 4, 1, "", "make_const"], [96, 4, 1, "", "make_graph"], [96, 4, 1, "", "make_model"], [96, 4, 1, "", "make_node"], [96, 4, 1, "", "make_onnx_graph_io"], [96, 3, 1, "", "opset"], [96, 4, 1, "", "remove_input"], [96, 4, 1, "", "remove_node"], [96, 4, 1, "", "replace_all_inputs"], [96, 4, 1, "", "replace_input"], [96, 4, 1, "", "replace_inputs"], [96, 4, 1, "", "reset_nodes"], [96, 4, 1, "", "safe_remove_nodes"], [96, 4, 1, "", "safe_to_remove_nodes"], [96, 4, 1, "", "set_config"], [96, 4, 1, "", "set_dtype"], [96, 4, 1, "", "set_node_by_name"], [96, 4, 1, "", "set_shape"], [96, 4, 1, "", "topological_sort"], [96, 4, 1, "", "update_node_shape_dtype"], [96, 4, 1, "", "update_proto"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[97, 2, 1, "", "OnnxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode": [[97, 3, 1, "", "attr"], [97, 4, 1, "", "child_name"], [97, 3, 1, "", "data_format"], [97, 3, 1, "", "domain"], [97, 4, 1, "", "get_attr"], [97, 4, 1, "", "get_attr_int"], [97, 4, 1, "", "get_attr_str"], [97, 4, 1, "", "get_attr_value"], [97, 4, 1, "", "get_body_graphs"], [97, 4, 1, "", "get_implicit_inputs"], [97, 4, 1, "", "get_onnx_attrs"], [97, 4, 1, "", "get_tensor_value"], [97, 4, 1, "", "get_value_attr"], [97, 3, 1, "", "input"], [97, 3, 1, "", "inputs"], [97, 4, 1, "", "is_const"], [97, 4, 1, "", "is_graph_input"], [97, 4, 1, "", "is_graph_input_default_const"], [97, 4, 1, "", "is_nhwc"], [97, 4, 1, "", "is_scalar"], [97, 4, 1, "", "is_while"], [97, 3, 1, "", "name"], [97, 4, 1, "", "need_skip"], [97, 3, 1, "", "op"], [97, 3, 1, "", "output"], [97, 3, 1, "", "output_dtypes"], [97, 3, 1, "", "output_shapes"], [97, 4, 1, "", "scalar_to_dim1"], [97, 4, 1, "", "set_attr"], [97, 4, 1, "", "set_attr_onnx"], [97, 4, 1, "", "set_body_graph_as_attr"], [97, 4, 1, "", "set_tensor_value"], [97, 3, 1, "", "skip_conversion"], [97, 3, 1, "", "summary"], [97, 3, 1, "", "type"], [97, 4, 1, "", "update_proto"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[98, 2, 1, "", "OnnxOpSchema"], [98, 1, 1, "", "get_max_supported_opset_version"], [98, 1, 1, "", "get_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.OnnxOpSchema": [[98, 3, 1, "", "attributes"], [98, 3, 1, "", "domain"], [98, 4, 1, "", "from_onnx_schema"], [98, 4, 1, "", "has_attribute"], [98, 3, 1, "", "name"], [98, 3, 1, "", "since_version"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[99, 2, 1, "", "SeqType"], [99, 1, 1, "", "add_port_to_name"], [99, 1, 1, "", "are_shapes_equal"], [99, 1, 1, "", "assert_error"], [99, 1, 1, "", "compute_const_folding_using_tf"], [99, 1, 1, "", "convert_tensorflow_tensor_to_onnx"], [99, 1, 1, "", "find_opset"], [99, 1, 1, "", "get_index_from_strided_slice_of_shape"], [99, 1, 1, "", "get_subgraphs_from_onnx"], [99, 1, 1, "", "get_tensorflow_node_attr"], [99, 1, 1, "", "get_tensorflow_node_shape_attr"], [99, 1, 1, "", "get_tensorflow_tensor_data"], [99, 1, 1, "", "get_tensorflow_tensor_shape"], [99, 1, 1, "", "infer_onnx_shape_dtype"], [99, 1, 1, "", "initialize_name_counter"], [99, 1, 1, "", "is_list_or_tuple"], [99, 1, 1, "", "is_onnx_domain"], [99, 1, 1, "", "make_onnx_inputs_outputs"], [99, 1, 1, "", "make_onnx_shape"], [99, 1, 1, "", "map_numpy_to_onnx_dtype"], [99, 1, 1, "", "map_onnx_to_numpy_type"], [99, 1, 1, "", "map_tensorflow_dtype"], [99, 1, 1, "", "read_tensorflow_node_attrs"], [99, 1, 1, "", "save_protobuf"], [99, 1, 1, "", "set_name"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[101, 0, 0, "-", "insert_qdq_pattern"], [102, 0, 0, "-", "merge_duplicated_qdq"], [103, 0, 0, "-", "share_qdq_y_pattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[101, 2, 1, "", "GenerateGraphWithQDQPattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern.GenerateGraphWithQDQPattern": [[101, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[102, 2, 1, "", "MergeDuplicatedQDQOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq.MergeDuplicatedQDQOptimizer": [[102, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[103, 2, 1, "", "ShareQDQForItexYPatternOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern.ShareQDQForItexYPatternOptimizer": [[103, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_util": [[104, 2, 1, "", "GraphAnalyzer"], [104, 2, 1, "", "GraphRewriterHelper"]], "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer": [[104, 4, 1, "", "add_node"], [104, 4, 1, "", "dump_graph"], [104, 4, 1, "", "get_frame_info"], [104, 4, 1, "", "get_graph_input_output"], [104, 3, 1, "", "graph"], [104, 4, 1, "", "has_positive_input"], [104, 4, 1, "", "parse_graph"], [104, 4, 1, "", "query_fusion_pattern_nodes"], [104, 4, 1, "", "remove_node"], [104, 4, 1, "", "remove_node_with_single_input_output"], [104, 4, 1, "", "replace_const_node"], [104, 4, 1, "", "replace_constant_graph_with_constant_node"], [104, 4, 1, "", "replace_node"], [104, 4, 1, "", "replace_single_node"]], "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper": [[104, 4, 1, "", "analysis_rnn_model"], [104, 4, 1, "", "compare_node_attr"], [104, 4, 1, "", "create_constant_node"], [104, 4, 1, "", "create_node"], [104, 4, 1, "", "gen_valid_sampling_log"], [104, 4, 1, "", "generate_int32_bias_for_conv"], [104, 4, 1, "", "generate_int32_bias_for_matmul"], [104, 4, 1, "", "node_name_from_input"], [104, 4, 1, "", "set_attr_bool"], [104, 4, 1, "", "set_attr_dtype"], [104, 4, 1, "", "set_attr_float"], [104, 4, 1, "", "set_attr_int"], [104, 4, 1, "", "set_attr_int_list"], [104, 4, 1, "", "set_attr_string"], [104, 4, 1, "", "set_attr_string_list"], [104, 4, 1, "", "set_attr_tensor"], [104, 4, 1, "", "set_attr_type_list"], [104, 4, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[108, 0, 0, "-", "qat"], [124, 0, 0, "-", "qdq"], [126, 0, 0, "-", "quantize_graph_base"], [127, 0, 0, "-", "quantize_graph_bn"], [128, 0, 0, "-", "quantize_graph_concatv2"], [129, 0, 0, "-", "quantize_graph_conv"], [130, 0, 0, "-", "quantize_graph_for_intel_cpu"], [131, 0, 0, "-", "quantize_graph_matmul"], [132, 0, 0, "-", "quantize_graph_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[107, 0, 0, "-", "fake_quantize"], [109, 0, 0, "-", "quantize_config"], [110, 0, 0, "-", "quantize_helper"], [111, 0, 0, "-", "quantize_layers"], [116, 0, 0, "-", "quantize_wrapper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[107, 2, 1, "", "FakeQuantize"], [107, 2, 1, "", "FakeQuantizeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantize": [[107, 4, 1, "", "get_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantizeBase": [[107, 4, 1, "", "from_config"], [107, 4, 1, "", "get_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[109, 2, 1, "", "QuantizeConfig"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig": [[109, 4, 1, "", "add_quantize_recipe"], [109, 4, 1, "", "clear_quantize_recipe"], [109, 4, 1, "", "get_quantize_recipe"], [109, 4, 1, "", "is_empty"], [109, 4, 1, "", "query_layer"], [109, 4, 1, "", "remove_layer"], [109, 4, 1, "", "remove_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[110, 1, 1, "", "init_quantize_config"], [110, 1, 1, "", "qat_clone_function"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[112, 0, 0, "-", "optimize_layer"], [113, 0, 0, "-", "quantize_layer_add"], [114, 0, 0, "-", "quantize_layer_base"], [115, 0, 0, "-", "quantize_layer_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[112, 1, 1, "", "config_quantizable_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[113, 2, 1, "", "QuantizeLayerAdd"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[114, 2, 1, "", "QuantizeLayerBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[115, 2, 1, "", "QuantizeLayerBatchNormalization"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[116, 2, 1, "", "QuantizeWrapper"], [116, 2, 1, "", "QuantizeWrapperBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapper": [[116, 4, 1, "", "build"], [116, 4, 1, "", "call"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase": [[116, 4, 1, "", "build"], [116, 4, 1, "", "call"], [116, 4, 1, "", "compute_output_shape"], [116, 4, 1, "", "from_config"], [116, 4, 1, "", "get_config"], [116, 3, 1, "", "losses"], [116, 3, 1, "", "non_trainable_weights"], [116, 4, 1, "", "query_input_index"], [116, 3, 1, "", "trainable"], [116, 3, 1, "", "trainable_weights"], [116, 3, 1, "", "updates"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[117, 0, 0, "-", "fuse_qdq_bn"], [118, 0, 0, "-", "fuse_qdq_concatv2"], [119, 0, 0, "-", "fuse_qdq_conv"], [120, 0, 0, "-", "fuse_qdq_deconv"], [121, 0, 0, "-", "fuse_qdq_in"], [122, 0, 0, "-", "fuse_qdq_matmul"], [123, 0, 0, "-", "fuse_qdq_pooling"], [125, 0, 0, "-", "optimize_qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[117, 2, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3": [[117, 4, 1, "", "apply_newly_bn_leakyrelu_fusion"], [117, 4, 1, "", "apply_newly_bn_relu_fusion"], [117, 4, 1, "", "apply_the_transform"], [117, 4, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[118, 2, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2": [[118, 4, 1, "", "apply_the_transform"], [118, 4, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[119, 2, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d": [[119, 4, 1, "", "apply_conv3d_add_addn_fusion"], [119, 4, 1, "", "apply_conv3d_add_addn_relu_fusion"], [119, 4, 1, "", "apply_conv3d_add_fusion"], [119, 4, 1, "", "apply_conv3d_add_relu_fusion"], [119, 4, 1, "", "apply_conv3d_single_fusion"], [119, 4, 1, "", "apply_conv_biasadd_hardswish_fusion"], [119, 4, 1, "", "apply_newly_conv_biasadd_addn_fusion"], [119, 4, 1, "", "apply_newly_conv_biasadd_addn_relu_fusion"], [119, 4, 1, "", "apply_newly_conv_biasadd_fusion"], [119, 4, 1, "", "apply_newly_conv_biasadd_relu_fusion"], [119, 4, 1, "", "apply_newly_conv_biasadd_swishf32_fusion"], [119, 4, 1, "", "apply_newly_conv_single_fusion"], [119, 4, 1, "", "apply_the_transform"], [119, 4, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[120, 2, 1, "", "FuseNodeStartWithDeconv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d": [[120, 4, 1, "", "apply_deconv2d_biasadd_fusion"], [120, 4, 1, "", "apply_deconv3d_biasadd_fusion"], [120, 4, 1, "", "apply_single_deconv2d_fusion"], [120, 4, 1, "", "apply_single_deconv3d_fusion"], [120, 4, 1, "", "apply_the_transform"], [120, 4, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[121, 2, 1, "", "FuseNodeStartWithFusedInstanceNorm"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm": [[121, 4, 1, "", "apply_newly_in_relu_fusion"], [121, 4, 1, "", "apply_the_transform"], [121, 4, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[122, 2, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul": [[122, 4, 1, "", "apply_batchmatmulv2_fusion"], [122, 4, 1, "", "apply_batchmatmulv2_mul_add_fusion"], [122, 4, 1, "", "apply_matmul_biasadd_fusion"], [122, 4, 1, "", "apply_matmul_biasadd_relu_fusion"], [122, 4, 1, "", "apply_the_transform"], [122, 4, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[123, 2, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling": [[123, 4, 1, "", "apply_the_transform"], [123, 4, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[125, 2, 1, "", "OptimizeQDQGraph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.OptimizeQDQGraph": [[125, 4, 1, "", "do_transform"], [125, 4, 1, "", "get_quantized_nodes"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[126, 2, 1, "", "QuantizeGraphBase"], [126, 2, 1, "", "QuantizeNodeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase": [[126, 4, 1, "", "do_transform"], [126, 4, 1, "", "register_transformer"], [126, 4, 1, "", "remove_dead_nodes"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase": [[126, 4, 1, "", "add_output_graph_node"], [126, 4, 1, "", "apply_the_transform"], [126, 4, 1, "", "create_nodes_map"], [126, 4, 1, "", "eightbitize_single_input_tensor_node"], [126, 4, 1, "", "get_longest_fuse"], [126, 4, 1, "", "remove_redundant_quantization"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[127, 2, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3": [[127, 4, 1, "", "apply_newly_bn_leakyrelu_fusion"], [127, 4, 1, "", "apply_newly_bn_relu_fusion"], [127, 4, 1, "", "apply_the_transform"], [127, 4, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[128, 2, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2": [[128, 4, 1, "", "apply_the_transform"], [128, 4, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[129, 2, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d": [[129, 4, 1, "", "apply_conv_biasadd_addn_relu_fusion"], [129, 4, 1, "", "apply_conv_biasadd_fusion"], [129, 4, 1, "", "apply_conv_biasadd_relu_fusion"], [129, 4, 1, "", "apply_conv_single_fusion"], [129, 4, 1, "", "apply_the_transform"], [129, 4, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[130, 2, 1, "", "QuantizeGraphForIntel"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu.QuantizeGraphForIntel": [[130, 4, 1, "", "do_transform"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[131, 2, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul": [[131, 4, 1, "", "apply_matmul_biasadd_fusion"], [131, 4, 1, "", "apply_matmul_biasadd_relu_fusion"], [131, 4, 1, "", "apply_the_transform"], [131, 4, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[132, 2, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling": [[132, 4, 1, "", "apply_the_transform"], [132, 4, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[133, 2, 1, "", "QuantizeGraphHelper"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper": [[133, 4, 1, "", "copy_attr"], [133, 4, 1, "", "create_constant_node"], [133, 4, 1, "", "create_node"], [133, 4, 1, "", "ensure_tensor_name_has_port"], [133, 4, 1, "", "generate_quantized_weight_node"], [133, 4, 1, "", "get_sorted_graph"], [133, 4, 1, "", "node_name_from_input"], [133, 4, 1, "", "remove_training_nodes"], [133, 4, 1, "", "set_attr_bool"], [133, 4, 1, "", "set_attr_dtype"], [133, 4, 1, "", "set_attr_float"], [133, 4, 1, "", "set_attr_int"], [133, 4, 1, "", "set_attr_string"], [133, 4, 1, "", "set_attr_string_list"], [133, 4, 1, "", "set_attr_tensor"], [133, 4, 1, "", "set_attr_type_list"], [133, 4, 1, "", "split_shared_inputs"], [133, 4, 1, "", "unique_node_name_from_input"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[134, 2, 1, "", "TensorflowQDQToOnnxQDQConverter"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter.TensorflowQDQToOnnxQDQConverter": [[134, 4, 1, "", "convert"], [134, 4, 1, "", "duplicate_tf_quantizev2_nodes"], [134, 4, 1, "", "tf_graph_optimize"], [134, 4, 1, "", "transpose_inputs"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[135, 0, 0, "-", "bias_correction"], [136, 0, 0, "-", "graph_transform_base"], [138, 0, 0, "-", "insert_logging"], [139, 0, 0, "-", "rerange_quantized_concat"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[135, 2, 1, "", "BiasCorrection"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction.BiasCorrection": [[135, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[136, 2, 1, "", "GraphTransformBase"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.GraphTransformBase": [[136, 4, 1, "", "do_transformation"], [136, 4, 1, "", "generate_input_map"], [136, 4, 1, "", "get_node_name_from_input"], [136, 4, 1, "", "node_name_from_input"], [136, 4, 1, "", "parse_input_pb"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[138, 2, 1, "", "InsertLogging"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging.InsertLogging": [[138, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[139, 2, 1, "", "RerangeQuantizedConcat"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat.RerangeQuantizedConcat": [[139, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.util": [[140, 1, 1, "", "collate_tf_preds"], [140, 1, 1, "", "disable_random"], [140, 1, 1, "", "fix_ref_type_of_graph_def"], [140, 1, 1, "", "generate_feed_dict"], [140, 1, 1, "", "get_estimator_graph"], [140, 1, 1, "", "get_graph_def"], [140, 1, 1, "", "get_input_output_node_names"], [140, 1, 1, "", "get_model_input_shape"], [140, 1, 1, "", "get_tensor_by_name"], [140, 1, 1, "", "get_tensor_val_from_graph_node"], [140, 1, 1, "", "int8_node_name_reverse"], [140, 1, 1, "", "is_ckpt_format"], [140, 1, 1, "", "is_saved_model_format"], [140, 1, 1, "", "iterator_sess_run"], [140, 1, 1, "", "read_graph"], [140, 1, 1, "", "strip_equivalent_nodes"], [140, 1, 1, "", "strip_unused_nodes"], [140, 1, 1, "", "tf_diagnosis_helper"], [140, 1, 1, "", "version1_eq_version2"], [140, 1, 1, "", "version1_gt_version2"], [140, 1, 1, "", "version1_gte_version2"], [140, 1, 1, "", "version1_lt_version2"], [140, 1, 1, "", "version1_lte_version2"], [140, 1, 1, "", "write_graph"]], "neural_compressor.adaptor.torch_utils": [[141, 0, 0, "-", "bf16_convert"], [142, 0, 0, "-", "hawq_metric"], [144, 0, 0, "-", "onnx"], [145, 0, 0, "-", "smooth_quant"], [146, 0, 0, "-", "symbolic_trace"], [147, 0, 0, "-", "util"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[141, 2, 1, "", "BF16ModuleWrapper"], [141, 1, 1, "", "Convert"], [141, 1, 1, "", "bf16_symbolic_trace"]], "neural_compressor.adaptor.torch_utils.bf16_convert.BF16ModuleWrapper": [[141, 4, 1, "", "forward"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[142, 2, 1, "", "HessianTrace"], [142, 2, 1, "", "Node_collector"], [142, 1, 1, "", "compare_weights"], [142, 1, 1, "", "hawq_top"]], "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace": [[142, 4, 1, "", "get_act_gap"], [142, 4, 1, "", "get_act_traces"], [142, 4, 1, "", "get_avg_traces"], [142, 4, 1, "", "get_device"], [142, 4, 1, "", "get_fused_mapping"], [142, 4, 1, "", "get_params"], [142, 4, 1, "", "get_vtHv_weight"], [142, 4, 1, "", "get_weight_traces"], [142, 4, 1, "", "is_fused_module"], [142, 4, 1, "", "mse_metric_gap"], [142, 4, 1, "", "register_act_grad_hooks"], [142, 4, 1, "", "reset_act_gradient_and_hooks"]], "neural_compressor.adaptor.torch_utils.hawq_metric.Node_collector": [[142, 4, 1, "", "hook_fn_act"], [142, 4, 1, "", "remove"]], "neural_compressor.adaptor.torch_utils.onnx": [[144, 2, 1, "", "DataReader"]], "neural_compressor.adaptor.torch_utils.onnx.DataReader": [[144, 4, 1, "", "get_next"]], "neural_compressor.adaptor.torch_utils.smooth_quant": [[145, 2, 1, "", "GraphTrace"], [145, 2, 1, "", "TorchSmoothQuant"]], "neural_compressor.adaptor.torch_utils.smooth_quant.TorchSmoothQuant": [[145, 4, 1, "", "recover"], [145, 4, 1, "", "transform"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[146, 1, 1, "", "symbolic_trace"], [146, 1, 1, "", "trace_and_fuse_sub_graph"]], "neural_compressor.adaptor.torch_utils.util": [[147, 1, 1, "", "append_attr"], [147, 1, 1, "", "auto_copy"], [147, 1, 1, "", "check_cfg_and_qconfig"], [147, 1, 1, "", "collate_torch_preds"], [147, 1, 1, "", "fetch_module"], [147, 1, 1, "", "generate_activation_observer"], [147, 1, 1, "", "get_embedding_contiguous"], [147, 1, 1, "", "get_example_input"], [147, 1, 1, "", "get_fallback_order"], [147, 1, 1, "", "get_mse_order_per_fp32"], [147, 1, 1, "", "get_mse_order_per_int8"], [147, 1, 1, "", "get_quantizable_ops_from_cfgs"], [147, 1, 1, "", "get_torch_version"], [147, 1, 1, "", "input2tuple"], [147, 1, 1, "", "is_fused_module"], [147, 1, 1, "", "paser_cfgs"], [147, 1, 1, "", "set_module"], [147, 1, 1, "", "simple_inference"]], "neural_compressor.algorithm": [[150, 2, 1, "", "ALGORITHMS"], [150, 2, 1, "", "Algorithm"], [150, 2, 1, "", "AlgorithmScheduler"], [148, 0, 0, "-", "algorithm"], [150, 1, 1, "", "algorithm_registry"], [149, 0, 0, "-", "fast_bias_correction"], [151, 0, 0, "-", "smooth_quant"], [152, 0, 0, "-", "weight_correction"]], "neural_compressor.algorithm.ALGORITHMS": [[150, 4, 1, "", "support_algorithms"]], "neural_compressor.algorithm.AlgorithmScheduler": [[150, 3, 1, "", "adaptor"], [150, 4, 1, "", "append_algorithm"], [150, 3, 1, "", "calib_iter"], [150, 3, 1, "", "dataloader"], [150, 3, 1, "", "origin_model"], [150, 3, 1, "", "q_model"], [150, 4, 1, "", "reset_exec_algorithms"]], "neural_compressor.algorithm.algorithm": [[148, 2, 1, "", "ALGORITHMS"], [148, 2, 1, "", "Algorithm"], [148, 2, 1, "", "AlgorithmScheduler"], [148, 1, 1, "", "algorithm_registry"]], "neural_compressor.algorithm.algorithm.ALGORITHMS": [[148, 4, 1, "", "support_algorithms"]], "neural_compressor.algorithm.algorithm.AlgorithmScheduler": [[148, 3, 1, "", "adaptor"], [148, 4, 1, "", "append_algorithm"], [148, 3, 1, "", "calib_iter"], [148, 3, 1, "", "dataloader"], [148, 3, 1, "", "origin_model"], [148, 3, 1, "", "q_model"], [148, 4, 1, "", "reset_exec_algorithms"]], "neural_compressor.algorithm.fast_bias_correction": [[149, 2, 1, "", "FastBiasCorrection"]], "neural_compressor.algorithm.smooth_quant": [[151, 2, 1, "", "SmoothQuant"]], "neural_compressor.algorithm.weight_correction": [[152, 2, 1, "", "WeightCorrection"]], "neural_compressor.benchmark": [[153, 2, 1, "", "Benchmark"], [153, 1, 1, "", "fit"], [153, 1, 1, "", "get_architecture"], [153, 1, 1, "", "get_bounded_threads"], [153, 1, 1, "", "get_core_ids"], [153, 1, 1, "", "get_physical_ids"], [153, 1, 1, "", "get_threads"], [153, 1, 1, "", "get_threads_per_core"], [153, 1, 1, "", "set_all_env_var"], [153, 1, 1, "", "set_env_var"]], "neural_compressor.benchmark.Benchmark": [[153, 3, 1, "", "b_dataloader"], [153, 3, 1, "", "b_func"], [153, 4, 1, "", "config_instance"], [153, 4, 1, "", "generate_prefix"], [153, 3, 1, "", "model"], [153, 3, 1, "", "results"], [153, 4, 1, "", "run_instance"], [153, 4, 1, "", "summary_benchmark"]], "neural_compressor.compression": [[157, 2, 1, "", "AwareTrainingQuantCallbacks"], [157, 2, 1, "", "DistillationCallbacks"], [157, 2, 1, "", "PruningCallbacks"], [154, 0, 0, "-", "callbacks"], [156, 0, 0, "-", "distillation"], [159, 0, 0, "-", "pruner"]], "neural_compressor.compression.DistillationCallbacks": [[157, 5, 1, "", "_epoch_ran"], [157, 5, 1, "", "best_model"], [157, 5, 1, "", "best_score"], [157, 4, 1, "", "create_criterion"], [157, 3, 1, "", "criterion"], [157, 5, 1, "", "eval_frequency"], [157, 4, 1, "", "generate_hooks"], [157, 4, 1, "", "init_train_cfg"], [157, 3, 1, "", "student_model"], [157, 3, 1, "", "teacher_model"], [157, 3, 1, "", "train_cfg"]], "neural_compressor.compression.PruningCallbacks": [[157, 4, 1, "", "generate_hooks"], [157, 4, 1, "", "on_train_end"]], "neural_compressor.compression.callbacks": [[154, 2, 1, "", "AwareTrainingQuantCallbacks"], [154, 2, 1, "", "BaseCallbacks"], [154, 2, 1, "", "DistillationCallbacks"], [154, 2, 1, "", "PruningCallbacks"]], "neural_compressor.compression.callbacks.BaseCallbacks": [[154, 3, 1, "", "eval_dataloader"], [154, 3, 1, "", "eval_func"], [154, 4, 1, "", "execute"], [154, 3, 1, "", "metric"], [154, 3, 1, "", "model"], [154, 4, 1, "", "on_after_compute_loss"], [154, 4, 1, "", "on_after_eval"], [154, 4, 1, "", "on_after_optimizer_step"], [154, 4, 1, "", "on_before_eval"], [154, 4, 1, "", "on_before_optimizer_step"], [154, 4, 1, "", "on_epoch_begin"], [154, 4, 1, "", "on_epoch_end"], [154, 4, 1, "", "on_step_begin"], [154, 4, 1, "", "on_step_end"], [154, 4, 1, "", "on_train_begin"], [154, 4, 1, "", "on_train_end"], [154, 4, 1, "", "pre_process"], [154, 4, 1, "", "register_hook"], [154, 4, 1, "", "remove_hook"], [154, 3, 1, "", "train_func"]], "neural_compressor.compression.callbacks.DistillationCallbacks": [[154, 5, 1, "", "_epoch_ran"], [154, 5, 1, "", "best_model"], [154, 5, 1, "", "best_score"], [154, 4, 1, "", "create_criterion"], [154, 3, 1, "", "criterion"], [154, 5, 1, "", "eval_frequency"], [154, 4, 1, "", "generate_hooks"], [154, 4, 1, "", "init_train_cfg"], [154, 3, 1, "", "student_model"], [154, 3, 1, "", "teacher_model"], [154, 3, 1, "", "train_cfg"]], "neural_compressor.compression.callbacks.PruningCallbacks": [[154, 4, 1, "", "generate_hooks"], [154, 4, 1, "", "on_train_end"]], "neural_compressor.compression.distillation": [[155, 0, 0, "-", "criterions"]], "neural_compressor.compression.distillation.criterions": [[155, 2, 1, "", "Criterions"], [155, 2, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [155, 2, 1, "", "KnowledgeDistillationFramework"], [155, 2, 1, "", "KnowledgeDistillationLoss"], [155, 2, 1, "", "PyTorchCriterions"], [155, 2, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLoss"], [155, 2, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"], [155, 2, 1, "", "PyTorchKnowledgeDistillationLoss"], [155, 2, 1, "", "PyTorchKnowledgeDistillationLossWrapper"], [155, 2, 1, "", "PyTorchSelfKnowledgeDistillationLoss"], [155, 2, 1, "", "PyTorchSelfKnowledgeDistillationLossWrapper"], [155, 2, 1, "", "SelfKnowledgeDistillationLoss"], [155, 2, 1, "", "TensorflowCriterions"], [155, 2, 1, "", "TensorflowKnowledgeDistillationLoss"], [155, 2, 1, "", "TensorflowKnowledgeDistillationLossExternal"], [155, 2, 1, "", "TensorflowKnowledgeDistillationLossWrapper"], [155, 1, 1, "", "criterion_registry"]], "neural_compressor.compression.distillation.criterions.Criterions": [[155, 4, 1, "", "register"]], "neural_compressor.compression.distillation.criterions.IntermediateLayersKnowledgeDistillationLoss": [[155, 4, 1, "", "clear_features"], [155, 4, 1, "", "init_feature_matcher"], [155, 4, 1, "", "init_loss_funcs"], [155, 4, 1, "", "loss_cal"], [155, 4, 1, "", "loss_cal_sloss"], [155, 4, 1, "", "teacher_model_forward"]], "neural_compressor.compression.distillation.criterions.KnowledgeDistillationFramework": [[155, 3, 1, "", "student_model"], [155, 3, 1, "", "teacher_model"]], "neural_compressor.compression.distillation.criterions.KnowledgeDistillationLoss": [[155, 4, 1, "", "loss_cal"], [155, 4, 1, "", "loss_cal_sloss"], [155, 4, 1, "", "student_targets_loss_cal"], [155, 4, 1, "", "teacher_model_forward"], [155, 4, 1, "", "teacher_student_loss_cal"]], "neural_compressor.compression.distillation.criterions.PyTorchIntermediateLayersKnowledgeDistillationLoss": [[155, 4, 1, "", "init_feature_matcher"], [155, 4, 1, "", "init_loss_funcs"], [155, 4, 1, "", "loss_cal"], [155, 4, 1, "", "loss_cal_sloss"], [155, 4, 1, "", "register_hooks_for_models"], [155, 4, 1, "", "remove_all_hooks"], [155, 4, 1, "", "teacher_model_forward"]], "neural_compressor.compression.distillation.criterions.PyTorchKnowledgeDistillationLoss": [[155, 4, 1, "", "KullbackLeiblerDivergence"], [155, 4, 1, "", "SoftCrossEntropy"], [155, 4, 1, "", "student_targets_loss_cal"], [155, 4, 1, "", "teacher_model_forward"], [155, 4, 1, "", "teacher_student_loss_cal"]], "neural_compressor.compression.distillation.criterions.PyTorchSelfKnowledgeDistillationLoss": [[155, 4, 1, "", "KullbackLeiblerDivergence"], [155, 4, 1, "", "L2Divergence"], [155, 4, 1, "", "SoftCrossEntropy"], [155, 4, 1, "", "init_loss_funcs"], [155, 4, 1, "", "loss_cal"], [155, 4, 1, "", "teacher_model_forward"]], "neural_compressor.compression.distillation.criterions.SelfKnowledgeDistillationLoss": [[155, 4, 1, "", "init_loss_funcs"], [155, 4, 1, "", "loss_cal"], [155, 4, 1, "", "loss_cal_sloss"], [155, 4, 1, "", "teacher_model_forward"]], "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLoss": [[155, 4, 1, "", "SoftCrossEntropy"], [155, 4, 1, "", "student_targets_loss_cal"], [155, 4, 1, "", "teacher_model_forward"], [155, 4, 1, "", "teacher_student_loss_cal"]], "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLossExternal": [[155, 4, 1, "", "student_targets_loss_cal"], [155, 4, 1, "", "teacher_model_forward"], [155, 4, 1, "", "teacher_student_loss_cal"]], "neural_compressor.compression.pruner": [[158, 0, 0, "-", "criteria"], [160, 0, 0, "-", "patterns"], [161, 0, 0, "-", "pruners"], [162, 0, 0, "-", "regs"], [163, 0, 0, "-", "schedulers"], [164, 0, 0, "-", "utils"]], "neural_compressor.compression.pruner.criteria": [[158, 2, 1, "", "GradientCriterion"], [158, 2, 1, "", "MagnitudeCriterion"], [158, 2, 1, "", "PruningCriterion"], [158, 2, 1, "", "SnipCriterion"], [158, 2, 1, "", "SnipMomentumCriterion"], [158, 1, 1, "", "get_criterion"], [158, 1, 1, "", "register_criterion"]], "neural_compressor.compression.pruner.criteria.GradientCriterion": [[158, 4, 1, "", "on_before_optimizer_step"], [158, 5, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.MagnitudeCriterion": [[158, 4, 1, "", "on_step_begin"], [158, 5, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.PruningCriterion": [[158, 4, 1, "", "on_after_optimizer_step"], [158, 4, 1, "", "on_before_optimizer_step"], [158, 4, 1, "", "on_step_begin"], [158, 5, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.SnipCriterion": [[158, 4, 1, "", "on_before_optimizer_step"], [158, 5, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion": [[158, 4, 1, "", "on_before_optimizer_step"], [158, 5, 1, "", "scores"]], "neural_compressor.compression.pruner.patterns": [[160, 2, 1, "", "BasePattern"], [160, 2, 1, "", "PatternNInM"], [160, 2, 1, "", "PatternNxM"], [160, 1, 1, "", "get_pattern"], [160, 1, 1, "", "register_pattern"]], "neural_compressor.compression.pruner.patterns.BasePattern": [[160, 4, 1, "", "adjust_ratio"], [160, 4, 1, "", "check_layer_validity"], [160, 5, 1, "", "config"], [160, 4, 1, "", "get_block_size_dict"], [160, 4, 1, "", "get_masks"], [160, 4, 1, "", "get_masks_global"], [160, 4, 1, "", "get_masks_local"], [160, 4, 1, "", "get_pattern_lock_masks"], [160, 4, 1, "", "get_reduced_masks_from_data"], [160, 4, 1, "", "get_single_mask_per_target_ratio"], [160, 4, 1, "", "get_sparsity_ratio"], [160, 4, 1, "", "get_sparsity_ratio_each_layer"], [160, 5, 1, "", "invalid_layers"], [160, 5, 1, "", "is_global"], [160, 5, 1, "", "keep_mask_layers"], [160, 5, 1, "", "max_sparsity_ratio_per_op"], [160, 5, 1, "", "min_sparsity_ratio_per_op"], [160, 5, 1, "", "modules"], [160, 5, 1, "", "pattern"], [160, 4, 1, "", "reduce_tensor"], [160, 5, 1, "", "target_sparsity"], [160, 4, 1, "", "update_residual_cnt"]], "neural_compressor.compression.pruner.patterns.PatternNInM": [[160, 5, 1, "", "M"], [160, 5, 1, "", "N"], [160, 4, 1, "", "check_layer_validity"], [160, 4, 1, "", "get_ele_mask_per_threshold"], [160, 4, 1, "", "get_least_ninm_mask_from_data"], [160, 4, 1, "", "get_masks_global"], [160, 4, 1, "", "get_pattern_lock_masks"], [160, 4, 1, "", "get_reduced_masks_from_data"], [160, 4, 1, "", "get_sparsity_ratio"], [160, 4, 1, "", "reduce_scores"], [160, 4, 1, "", "reshape_orig_to_pattern"], [160, 4, 1, "", "reshape_reduced_to_orig"]], "neural_compressor.compression.pruner.patterns.PatternNxM": [[160, 5, 1, "", "block_size"], [160, 4, 1, "", "check_layer_validity"], [160, 4, 1, "", "count_new_masked_cnts"], [160, 4, 1, "", "get_block_size_dict"], [160, 4, 1, "", "get_mask_per_threshold"], [160, 4, 1, "", "get_masks_global"], [160, 4, 1, "", "get_pattern_lock_masks"], [160, 4, 1, "", "get_reduced_masks_from_data"], [160, 4, 1, "", "get_sparsity_ratio"], [160, 4, 1, "", "get_sparsity_ratio_progressive"], [160, 4, 1, "", "reduce_scores"], [160, 4, 1, "", "reshape_orig_to_pattern"], [160, 4, 1, "", "reshape_reduced_to_orig"], [160, 4, 1, "", "update_new_added_masks"], [160, 4, 1, "", "update_progressive_masks"], [160, 4, 1, "", "update_progressive_masks_global"], [160, 4, 1, "", "update_progressive_masks_linear"], [160, 4, 1, "", "update_progressive_masks_local"], [160, 4, 1, "", "update_progressive_masks_scores"]], "neural_compressor.compression.pruner.pruners": [[161, 2, 1, "", "BasePruner"], [161, 2, 1, "", "BasicPruner"], [161, 2, 1, "", "PatternLockPruner"], [161, 2, 1, "", "ProgressivePruner"], [161, 1, 1, "", "get_pruner"], [161, 1, 1, "", "parse_valid_pruner_types"], [161, 1, 1, "", "register_pruner"]], "neural_compressor.compression.pruner.pruners.BasePruner": [[161, 4, 1, "", "check_is_pruned_step"], [161, 5, 1, "", "config"], [161, 5, 1, "", "current_sparsity_ratio"], [161, 5, 1, "", "end_step"], [161, 5, 1, "", "global_step"], [161, 4, 1, "", "mask_weights"], [161, 4, 1, "", "mask_weights_general"], [161, 5, 1, "", "masks"], [161, 5, 1, "", "max_sparsity_ratio_per_op"], [161, 5, 1, "", "modules"], [161, 4, 1, "", "on_after_eval"], [161, 4, 1, "", "on_after_optimizer_step"], [161, 4, 1, "", "on_before_eval"], [161, 4, 1, "", "on_before_optimizer_step"], [161, 4, 1, "", "on_epoch_begin"], [161, 4, 1, "", "on_epoch_end"], [161, 4, 1, "", "on_step_begin"], [161, 4, 1, "", "on_step_end"], [161, 4, 1, "", "on_train_begin"], [161, 4, 1, "", "on_train_end"], [161, 5, 1, "", "pattern"], [161, 5, 1, "", "pruning_frequency"], [161, 5, 1, "", "scheduler"], [161, 5, 1, "", "scores"], [161, 5, 1, "", "start_step"], [161, 5, 1, "", "target_sparsity_ratio"], [161, 4, 1, "", "update_masks"]], "neural_compressor.compression.pruner.pruners.BasicPruner": [[161, 5, 1, "", "criterion"], [161, 4, 1, "", "on_after_optimizer_step"], [161, 4, 1, "", "on_before_optimizer_step"], [161, 5, 1, "", "pattern"], [161, 5, 1, "", "reg"], [161, 5, 1, "", "scheduler"], [161, 4, 1, "", "set_global_step"], [161, 4, 1, "", "update_masks"]], "neural_compressor.compression.pruner.pruners.PatternLockPruner": [[161, 4, 1, "", "on_after_optimizer_step"], [161, 4, 1, "", "update_masks"]], "neural_compressor.compression.pruner.pruners.ProgressivePruner": [[161, 4, 1, "", "check_is_pruned_progressive_step"], [161, 4, 1, "", "check_progressive_validity"], [161, 4, 1, "", "on_after_optimizer_step"], [161, 4, 1, "", "on_before_optimizer_step"], [161, 4, 1, "", "on_step_begin"], [161, 4, 1, "", "print_progressive_sparsity"], [161, 4, 1, "", "update_masks_progressive"]], "neural_compressor.compression.pruner.regs": [[162, 2, 1, "", "BaseReg"], [162, 2, 1, "", "GroupLasso"], [162, 1, 1, "", "get_reg"], [162, 1, 1, "", "get_reg_type"], [162, 1, 1, "", "register_reg"]], "neural_compressor.compression.pruner.regs.BaseReg": [[162, 4, 1, "", "on_after_optimizer_step"], [162, 4, 1, "", "on_before_optimizer_step"]], "neural_compressor.compression.pruner.regs.GroupLasso": [[162, 5, 1, "", "alpha"], [162, 4, 1, "", "on_after_optimizer_step"], [162, 4, 1, "", "on_before_optimizer_step"], [162, 5, 1, "", "reg_terms"]], "neural_compressor.compression.pruner.schedulers": [[163, 2, 1, "", "IterativeScheduler"], [163, 2, 1, "", "OneshotScheduler"], [163, 2, 1, "", "PruningScheduler"], [163, 1, 1, "", "get_scheduler"], [163, 1, 1, "", "register_scheduler"]], "neural_compressor.compression.pruner.schedulers.IterativeScheduler": [[163, 4, 1, "", "update_sparsity_ratio"]], "neural_compressor.compression.pruner.schedulers.OneshotScheduler": [[163, 4, 1, "", "update_sparsity_ratio"]], "neural_compressor.compression.pruner.schedulers.PruningScheduler": [[163, 5, 1, "", "config"], [163, 4, 1, "", "update_sparsity_ratio"]], "neural_compressor.compression.pruner.utils": [[164, 1, 1, "", "check_config"], [164, 1, 1, "", "check_key_validity"], [164, 1, 1, "", "generate_pruner_config"], [164, 1, 1, "", "get_sparsity_ratio"], [164, 1, 1, "", "parse_to_prune"], [164, 1, 1, "", "process_and_check_config"], [164, 1, 1, "", "process_config"], [164, 1, 1, "", "process_weight_config"], [164, 1, 1, "", "process_yaml_config"], [164, 1, 1, "", "reset_none_to_default"], [164, 1, 1, "", "update_params"]], "neural_compressor.conf": [[165, 0, 0, "-", "config"], [166, 0, 0, "-", "dotdict"], [168, 0, 0, "-", "pythonic_config"]], "neural_compressor.conf.config": [[165, 2, 1, "", "Benchmark_Conf"], [165, 2, 1, "", "Conf"], [165, 2, 1, "", "Distillation_Conf"], [165, 2, 1, "", "Graph_Optimization_Conf"], [165, 2, 1, "", "MixedPrecision_Conf"], [165, 2, 1, "", "NASConfig"], [165, 2, 1, "", "PrunerV2"], [165, 2, 1, "", "Pruning_Conf"], [165, 2, 1, "", "Quantization_Conf"]], "neural_compressor.conf.dotdict": [[166, 2, 1, "", "DotDict"], [166, 1, 1, "", "deep_get"], [166, 1, 1, "", "deep_set"]], "neural_compressor.config": [[169, 2, 1, "", "AccuracyCriterion"], [169, 2, 1, "", "BenchmarkConfig"], [169, 2, 1, "", "DistillationConfig"], [169, 2, 1, "", "ExportConfig"], [169, 2, 1, "", "IntermediateLayersKnowledgeDistillationLossConfig"], [169, 2, 1, "", "KnowledgeDistillationLossConfig"], [169, 2, 1, "", "MixedPrecisionConfig"], [169, 2, 1, "", "ONNXQlinear2QDQConfig"], [169, 2, 1, "", "Options"], [169, 2, 1, "", "PostTrainingQuantConfig"], [169, 2, 1, "", "QuantizationAwareTrainingConfig"], [169, 2, 1, "", "SelfKnowledgeDistillationLossConfig"], [169, 2, 1, "", "TF2ONNXConfig"], [169, 2, 1, "", "Torch2ONNXConfig"], [169, 2, 1, "", "TuningCriterion"], [169, 2, 1, "", "WeightPruningConfig"], [169, 1, 1, "", "check_value"]], "neural_compressor.config.AccuracyCriterion": [[169, 3, 1, "", "absolute"], [169, 3, 1, "", "criterion"], [169, 3, 1, "", "higher_is_better"], [169, 3, 1, "", "relative"], [169, 3, 1, "", "tolerable_loss"]], "neural_compressor.config.BenchmarkConfig": [[169, 3, 1, "", "backend"], [169, 3, 1, "", "cores_per_instance"], [169, 3, 1, "", "inputs"], [169, 3, 1, "", "inter_num_of_threads"], [169, 3, 1, "", "intra_num_of_threads"], [169, 3, 1, "", "iteration"], [169, 3, 1, "", "num_of_instance"], [169, 3, 1, "", "outputs"], [169, 3, 1, "", "warmup"]], "neural_compressor.config.DistillationConfig": [[169, 3, 1, "", "criterion"], [169, 3, 1, "", "optimizer"], [169, 3, 1, "", "teacher_model"]], "neural_compressor.config.ExportConfig": [[169, 3, 1, "", "dtype"], [169, 3, 1, "", "dynamic_axes"], [169, 3, 1, "", "example_inputs"], [169, 3, 1, "", "input_names"], [169, 3, 1, "", "opset_version"], [169, 3, 1, "", "output_names"], [169, 3, 1, "", "quant_format"]], "neural_compressor.config.Options": [[169, 3, 1, "", "random_seed"], [169, 3, 1, "", "resume_from"], [169, 3, 1, "", "tensorboard"], [169, 3, 1, "", "workspace"]], "neural_compressor.config.PostTrainingQuantConfig": [[169, 3, 1, "", "approach"], [169, 3, 1, "", "tuning_criterion"]], "neural_compressor.config.QuantizationAwareTrainingConfig": [[169, 3, 1, "", "approach"]], "neural_compressor.config.TuningCriterion": [[169, 3, 1, "", "max_trials"], [169, 3, 1, "", "objective"], [169, 3, 1, "", "strategy"], [169, 3, 1, "", "strategy_kwargs"], [169, 3, 1, "", "timeout"]], "neural_compressor.config.WeightPruningConfig": [[169, 3, 1, "", "weight_compression"]], "neural_compressor.contrib": [[171, 0, 0, "-", "strategy"]], "neural_compressor.contrib.strategy": [[172, 0, 0, "-", "sigopt"], [173, 0, 0, "-", "tpe"]], "neural_compressor.contrib.strategy.sigopt": [[172, 2, 1, "", "SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy": [[172, 4, 1, "", "create_exp"], [172, 4, 1, "", "get_acc_target"], [172, 4, 1, "", "next_tune_cfg"], [172, 4, 1, "", "params_to_tune_configs"], [172, 4, 1, "", "traverse"]], "neural_compressor.contrib.strategy.tpe": [[173, 2, 1, "", "TpeTuneStrategy"]], "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy": [[173, 4, 1, "", "add_loss_to_tuned_history_and_find_best"], [173, 4, 1, "", "calculate_loss"], [173, 4, 1, "", "object_evaluation"], [173, 4, 1, "", "stop"], [173, 4, 1, "", "traverse"]], "neural_compressor.data": [[195, 2, 1, "", "BaseTransform"], [195, 2, 1, "", "BilinearImagenetTransform"], [195, 2, 1, "", "COCORecordDataset"], [195, 2, 1, "", "ComposeTransform"], [195, 2, 1, "", "DataLoader"], [195, 2, 1, "", "Dataset"], [195, 2, 1, "", "Datasets"], [195, 2, 1, "", "DefaultDataLoader"], [195, 2, 1, "", "FILTERS"], [195, 2, 1, "", "Filter"], [195, 2, 1, "", "IterableDataset"], [195, 2, 1, "", "LabelBalanceCOCORecordFilter"], [195, 2, 1, "", "LabelShift"], [195, 2, 1, "", "NormalizeTFTransform"], [195, 2, 1, "", "ParseDecodeCocoTransform"], [195, 2, 1, "", "Postprocess"], [195, 2, 1, "", "RescaleTFTransform"], [195, 2, 1, "", "ResizeTFTransform"], [195, 2, 1, "", "TFSquadV1ModelZooPostTransform"], [195, 2, 1, "", "TFSquadV1PostTransform"], [195, 2, 1, "", "TRANSFORMS"], [195, 2, 1, "", "TensorflowImageRecord"], [195, 2, 1, "", "TensorflowResizeCropImagenetTransform"], [195, 2, 1, "", "TensorflowResizeWithRatio"], [178, 0, 0, "-", "dataloaders"], [195, 1, 1, "", "dataset_registry"], [190, 0, 0, "-", "datasets"], [195, 1, 1, "", "filter_registry"], [194, 0, 0, "-", "filters"], [195, 1, 1, "", "transform_registry"], [198, 0, 0, "-", "transforms"]], "neural_compressor.data.DefaultDataLoader": [[195, 4, 1, "", "batch"], [195, 3, 1, "", "dataloader"]], "neural_compressor.data.TFSquadV1PostTransform": [[195, 4, 1, "", "get_postprocess_result"], [195, 4, 1, "", "process_result"]], "neural_compressor.data.TRANSFORMS": [[195, 4, 1, "", "register"]], "neural_compressor.data.dataloaders": [[178, 2, 1, "", "DataLoader"], [174, 0, 0, "-", "base_dataloader"], [175, 0, 0, "-", "dataloader"], [176, 0, 0, "-", "default_dataloader"], [177, 0, 0, "-", "fetcher"], [179, 0, 0, "-", "mxnet_dataloader"], [180, 0, 0, "-", "onnxrt_dataloader"], [181, 0, 0, "-", "pytorch_dataloader"], [182, 0, 0, "-", "sampler"], [183, 0, 0, "-", "tensorflow_dataloader"]], "neural_compressor.data.dataloaders.base_dataloader": [[174, 2, 1, "", "BaseDataLoader"]], "neural_compressor.data.dataloaders.base_dataloader.BaseDataLoader": [[174, 4, 1, "", "batch"], [174, 3, 1, "", "batch_size"]], "neural_compressor.data.dataloaders.dataloader": [[175, 2, 1, "", "DataLoader"]], "neural_compressor.data.dataloaders.default_dataloader": [[176, 2, 1, "", "DefaultDataLoader"], [176, 1, 1, "", "default_collate"]], "neural_compressor.data.dataloaders.default_dataloader.DefaultDataLoader": [[176, 4, 1, "", "batch"], [176, 3, 1, "", "dataloader"]], "neural_compressor.data.dataloaders.fetcher": [[177, 2, 1, "", "Fetcher"], [177, 2, 1, "", "IndexFetcher"], [177, 2, 1, "", "IterableFetcher"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[179, 2, 1, "", "MXNetDataLoader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[180, 2, 1, "", "ONNXRTBertDataLoader"], [180, 2, 1, "", "ONNXRTDataLoader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[181, 2, 1, "", "PyTorchDataLoader"]], "neural_compressor.data.dataloaders.sampler": [[182, 2, 1, "", "BatchSampler"], [182, 2, 1, "", "IterableSampler"], [182, 2, 1, "", "Sampler"], [182, 2, 1, "", "SequentialSampler"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[183, 2, 1, "", "TFDataDataLoader"], [183, 2, 1, "", "TensorflowBertDataLoader"], [183, 2, 1, "", "TensorflowDataLoader"], [183, 2, 1, "", "TensorflowModelZooBertDataLoader"]], "neural_compressor.data.dataloaders.tensorflow_dataloader.TFDataDataLoader": [[183, 4, 1, "", "batch"]], "neural_compressor.data.datasets": [[190, 2, 1, "", "COCORecordDataset"], [190, 2, 1, "", "Dataset"], [190, 2, 1, "", "Datasets"], [190, 2, 1, "", "IterableDataset"], [190, 2, 1, "", "TensorflowImageRecord"], [184, 0, 0, "-", "bert_dataset"], [185, 0, 0, "-", "coco_dataset"], [186, 0, 0, "-", "dataset"], [190, 1, 1, "", "dataset_registry"], [187, 0, 0, "-", "dummy_dataset"], [188, 0, 0, "-", "dummy_dataset_v2"], [189, 0, 0, "-", "imagenet_dataset"], [191, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.data.datasets.bert_dataset": [[184, 2, 1, "", "InputFeatures"], [184, 2, 1, "", "ONNXRTBertDataset"], [184, 2, 1, "", "ParseDecodeBert"], [184, 2, 1, "", "PytorchBertDataset"], [184, 2, 1, "", "TensorflowBertDataset"], [184, 2, 1, "", "TensorflowModelZooBertDataset"], [184, 1, 1, "", "convert_examples_to_features"], [184, 1, 1, "", "load_and_cache_examples"]], "neural_compressor.data.datasets.bert_dataset.InputFeatures": [[184, 4, 1, "", "to_json_string"]], "neural_compressor.data.datasets.coco_dataset": [[185, 2, 1, "", "COCONpy"], [185, 2, 1, "", "COCORaw"], [185, 2, 1, "", "COCORecordDataset"], [185, 2, 1, "", "ParseDecodeCoco"]], "neural_compressor.data.datasets.dataset": [[186, 2, 1, "", "CIFAR10"], [186, 2, 1, "", "CIFAR100"], [186, 2, 1, "", "Dataset"], [186, 2, 1, "", "Datasets"], [186, 2, 1, "", "FashionMNIST"], [186, 2, 1, "", "ImageFolder"], [186, 2, 1, "", "IterableDataset"], [186, 2, 1, "", "MNIST"], [186, 2, 1, "", "MXNetCIFAR10"], [186, 2, 1, "", "MXNetCIFAR100"], [186, 2, 1, "", "MXNetDatasets"], [186, 2, 1, "", "MXNetFashionMNIST"], [186, 2, 1, "", "MXNetImageFolder"], [186, 2, 1, "", "MXNetMNIST"], [186, 2, 1, "", "ONNXRTITDatasets"], [186, 2, 1, "", "ONNXRTQLDatasets"], [186, 2, 1, "", "PyTorchDatasets"], [186, 2, 1, "", "PytorchCIFAR10"], [186, 2, 1, "", "PytorchCIFAR100"], [186, 2, 1, "", "PytorchFashionMNIST"], [186, 2, 1, "", "PytorchMNIST"], [186, 2, 1, "", "PytorchMxnetWrapDataset"], [186, 2, 1, "", "PytorchMxnetWrapFunction"], [186, 2, 1, "", "Tensorflow"], [186, 2, 1, "", "TensorflowCIFAR10"], [186, 2, 1, "", "TensorflowCIFAR100"], [186, 2, 1, "", "TensorflowDatasets"], [186, 2, 1, "", "TensorflowFashionMNIST"], [186, 2, 1, "", "TensorflowImageRecord"], [186, 2, 1, "", "TensorflowMNIST"], [186, 2, 1, "", "TensorflowTFRecordDataset"], [186, 2, 1, "", "TensorflowVOCRecord"], [186, 1, 1, "", "calculate_md5"], [186, 1, 1, "", "check_integrity"], [186, 1, 1, "", "dataset_registry"], [186, 1, 1, "", "download_url"], [186, 6, 1, "", "framework_datasets"], [186, 1, 1, "", "gen_bar_updater"]], "neural_compressor.data.datasets.dataset.CIFAR10": [[186, 4, 1, "", "download"], [186, 4, 1, "", "load_meta"]], "neural_compressor.data.datasets.dataset.FashionMNIST": [[186, 4, 1, "", "read_data"]], "neural_compressor.data.datasets.dataset.MNIST": [[186, 3, 1, "", "class_to_idx"], [186, 4, 1, "", "download"], [186, 4, 1, "", "read_data"]], "neural_compressor.data.datasets.dummy_dataset": [[187, 2, 1, "", "DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[188, 2, 1, "", "DummyDataset"], [188, 2, 1, "", "SparseDummyDataset"]], "neural_compressor.data.datasets.imagenet_dataset": [[189, 2, 1, "", "ImagenetRaw"], [189, 2, 1, "", "MXNetImagenetRaw"], [189, 2, 1, "", "ONNXRTImagenetDataset"], [189, 2, 1, "", "PytorchImagenetRaw"], [189, 2, 1, "", "TensorflowImagenetDataset"], [189, 2, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.data.datasets.style_transfer_dataset": [[191, 2, 1, "", "StyleTransferDataset"]], "neural_compressor.data.filters": [[194, 2, 1, "", "FILTERS"], [194, 2, 1, "", "Filter"], [194, 2, 1, "", "LabelBalanceCOCORecordFilter"], [192, 0, 0, "-", "coco_filter"], [193, 0, 0, "-", "filter"], [194, 1, 1, "", "filter_registry"]], "neural_compressor.data.filters.coco_filter": [[192, 2, 1, "", "LabelBalanceCOCORawFilter"], [192, 2, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.filter": [[193, 2, 1, "", "FILTERS"], [193, 2, 1, "", "Filter"], [193, 2, 1, "", "MXNetFilters"], [193, 2, 1, "", "ONNXRTITFilters"], [193, 2, 1, "", "ONNXRTQLFilters"], [193, 2, 1, "", "PyTorchFilters"], [193, 2, 1, "", "TensorflowFilters"], [193, 1, 1, "", "filter_registry"]], "neural_compressor.data.transforms": [[198, 2, 1, "", "BaseTransform"], [198, 2, 1, "", "BilinearImagenetTransform"], [198, 2, 1, "", "ComposeTransform"], [198, 2, 1, "", "LabelShift"], [198, 2, 1, "", "NormalizeTFTransform"], [198, 2, 1, "", "ParseDecodeCocoTransform"], [198, 2, 1, "", "Postprocess"], [198, 2, 1, "", "RescaleTFTransform"], [198, 2, 1, "", "ResizeTFTransform"], [198, 2, 1, "", "TFSquadV1ModelZooPostTransform"], [198, 2, 1, "", "TFSquadV1PostTransform"], [198, 2, 1, "", "TRANSFORMS"], [198, 2, 1, "", "TensorflowResizeCropImagenetTransform"], [198, 2, 1, "", "TensorflowResizeWithRatio"], [196, 0, 0, "-", "coco_transform"], [197, 0, 0, "-", "imagenet_transform"], [199, 0, 0, "-", "postprocess"], [200, 0, 0, "-", "tokenization"], [201, 0, 0, "-", "transform"], [198, 1, 1, "", "transform_registry"]], "neural_compressor.data.transforms.TFSquadV1PostTransform": [[198, 4, 1, "", "get_postprocess_result"], [198, 4, 1, "", "process_result"]], "neural_compressor.data.transforms.TRANSFORMS": [[198, 4, 1, "", "register"]], "neural_compressor.data.transforms.coco_transform": [[196, 2, 1, "", "ParseDecodeCocoTransform"]], "neural_compressor.data.transforms.imagenet_transform": [[197, 2, 1, "", "BilinearImagenetTransform"], [197, 2, 1, "", "LabelShift"], [197, 2, 1, "", "ONNXResizeCropImagenetTransform"], [197, 2, 1, "", "OnnxBilinearImagenetTransform"], [197, 2, 1, "", "ParseDecodeImagenet"], [197, 2, 1, "", "ParseDecodeImagenetTransform"], [197, 2, 1, "", "QuantizedInput"], [197, 2, 1, "", "ResizeWithAspectRatio"], [197, 2, 1, "", "TensorflowResizeCropImagenetTransform"]], "neural_compressor.data.transforms.postprocess": [[199, 2, 1, "", "Postprocess"]], "neural_compressor.data.transforms.tokenization": [[200, 2, 1, "", "BasicTokenizer"], [200, 2, 1, "", "FullTokenizer"], [200, 2, 1, "", "WordpieceTokenizer"], [200, 1, 1, "", "convert_by_vocab"], [200, 1, 1, "", "convert_to_unicode"], [200, 1, 1, "", "load_vocab"], [200, 1, 1, "", "whitespace_tokenize"]], "neural_compressor.data.transforms.tokenization.BasicTokenizer": [[200, 4, 1, "", "tokenize"]], "neural_compressor.data.transforms.tokenization.FullTokenizer": [[200, 4, 1, "", "convert_ids_to_tokens"], [200, 4, 1, "", "convert_tokens_to_ids"], [200, 4, 1, "", "tokenize"]], "neural_compressor.data.transforms.tokenization.WordpieceTokenizer": [[200, 4, 1, "", "tokenize"]], "neural_compressor.data.transforms.transform": [[201, 2, 1, "", "AlignImageChannelTransform"], [201, 2, 1, "", "BaseTransform"], [201, 2, 1, "", "CastONNXTransform"], [201, 2, 1, "", "CastPyTorchTransform"], [201, 2, 1, "", "CastTFTransform"], [201, 2, 1, "", "CenterCropTFTransform"], [201, 2, 1, "", "CenterCropTransform"], [201, 2, 1, "", "CollectTransform"], [201, 2, 1, "", "ComposeTransform"], [201, 2, 1, "", "CropResizeTFTransform"], [201, 2, 1, "", "CropResizeTransform"], [201, 2, 1, "", "CropToBoundingBox"], [201, 2, 1, "", "InputFeatures"], [201, 2, 1, "", "MXNetCropResizeTransform"], [201, 2, 1, "", "MXNetCropToBoundingBox"], [201, 2, 1, "", "MXNetNormalizeTransform"], [201, 2, 1, "", "MXNetTransforms"], [201, 2, 1, "", "MXNetTranspose"], [201, 2, 1, "", "NormalizeTFTransform"], [201, 2, 1, "", "NormalizeTransform"], [201, 2, 1, "", "ONNXRTCropToBoundingBox"], [201, 2, 1, "", "ONNXRTITTransforms"], [201, 2, 1, "", "ONNXRTQLTransforms"], [201, 2, 1, "", "PaddedCenterCropTransform"], [201, 2, 1, "", "ParseDecodeVocTransform"], [201, 2, 1, "", "PyTorchAlignImageChannel"], [201, 2, 1, "", "PyTorchCropResizeTransform"], [201, 2, 1, "", "PyTorchNormalizeTransform"], [201, 2, 1, "", "PyTorchTransforms"], [201, 2, 1, "", "PyTorchTranspose"], [201, 2, 1, "", "PytorchMxnetTransform"], [201, 2, 1, "", "PytorchMxnetWrapFunction"], [201, 2, 1, "", "RandomCropTFTransform"], [201, 2, 1, "", "RandomCropTransform"], [201, 2, 1, "", "RandomHorizontalFlip"], [201, 2, 1, "", "RandomResizedCropMXNetTransform"], [201, 2, 1, "", "RandomResizedCropPytorchTransform"], [201, 2, 1, "", "RandomResizedCropTFTransform"], [201, 2, 1, "", "RandomResizedCropTransform"], [201, 2, 1, "", "RandomVerticalFlip"], [201, 2, 1, "", "RescaleKerasPretrainTransform"], [201, 2, 1, "", "RescaleTFTransform"], [201, 2, 1, "", "RescaleTransform"], [201, 2, 1, "", "ResizeMXNetTransform"], [201, 2, 1, "", "ResizePytorchTransform"], [201, 2, 1, "", "ResizeTFTransform"], [201, 2, 1, "", "ResizeTransform"], [201, 2, 1, "", "ResizeWithRatio"], [201, 2, 1, "", "SquadExample"], [201, 2, 1, "", "TFModelZooCollectTransform"], [201, 2, 1, "", "TFSquadV1ModelZooPostTransform"], [201, 2, 1, "", "TFSquadV1PostTransform"], [201, 2, 1, "", "TRANSFORMS"], [201, 2, 1, "", "TensorflowCropToBoundingBox"], [201, 2, 1, "", "TensorflowRandomHorizontalFlip"], [201, 2, 1, "", "TensorflowRandomVerticalFlip"], [201, 2, 1, "", "TensorflowResizeWithRatio"], [201, 2, 1, "", "TensorflowTransform"], [201, 2, 1, "", "TensorflowTransforms"], [201, 2, 1, "", "TensorflowTranspose"], [201, 2, 1, "", "TensorflowWrapFunction"], [201, 2, 1, "", "ToArray"], [201, 2, 1, "", "ToNDArrayTransform"], [201, 2, 1, "", "Transforms"], [201, 2, 1, "", "Transpose"], [201, 1, 1, "", "convert_examples_to_features"], [201, 1, 1, "", "get_final_text"], [201, 1, 1, "", "get_torchvision_map"], [201, 1, 1, "", "read_squad_examples"], [201, 1, 1, "", "transform_registry"]], "neural_compressor.data.transforms.transform.RandomResizedCropTFTransform": [[201, 4, 1, "", "get_params"]], "neural_compressor.data.transforms.transform.RandomResizedCropTransform": [[201, 4, 1, "", "get_params"]], "neural_compressor.data.transforms.transform.TFSquadV1PostTransform": [[201, 4, 1, "", "get_postprocess_result"], [201, 4, 1, "", "process_result"]], "neural_compressor.data.transforms.transform.TRANSFORMS": [[201, 4, 1, "", "register"]], "neural_compressor.experimental": [[245, 2, 1, "", "Benchmark"], [245, 2, 1, "", "Component"], [245, 2, 1, "", "Distillation"], [245, 2, 1, "", "Graph_Optimization"], [245, 2, 1, "", "MixedPrecision"], [245, 2, 1, "", "ModelConversion"], [245, 2, 1, "", "NAS"], [245, 2, 1, "", "Pruning"], [245, 2, 1, "", "Quantization"], [202, 0, 0, "-", "benchmark"], [205, 0, 0, "-", "common"], [211, 0, 0, "-", "component"], [233, 0, 0, "-", "data"], [238, 0, 0, "-", "distillation"], [239, 0, 0, "-", "export"], [244, 0, 0, "-", "graph_optimization"], [252, 0, 0, "-", "metric"], [254, 0, 0, "-", "mixed_precision"], [255, 0, 0, "-", "model_conversion"], [268, 0, 0, "-", "nas"], [274, 0, 0, "-", "pruner_legacy"], [278, 0, 0, "-", "pruning"], [279, 0, 0, "-", "pruning_recipes"], [283, 0, 0, "-", "pruning_v2"], [284, 0, 0, "-", "pytorch_pruner"], [291, 0, 0, "-", "quantization"], [292, 0, 0, "-", "scheduler"]], "neural_compressor.experimental.Benchmark": [[245, 3, 1, "", "b_dataloader"], [245, 3, 1, "", "b_func"], [245, 4, 1, "", "call_one"], [245, 4, 1, "", "config_instance"], [245, 4, 1, "", "generate_prefix"], [245, 3, 1, "", "metric"], [245, 3, 1, "", "model"], [245, 3, 1, "", "postprocess"], [245, 3, 1, "", "results"], [245, 4, 1, "", "run_instance"], [245, 4, 1, "", "summary_benchmark"]], "neural_compressor.experimental.Component": [[245, 3, 1, "", "eval_dataloader"], [245, 3, 1, "", "eval_func"], [245, 4, 1, "", "execute"], [245, 3, 1, "", "model"], [245, 4, 1, "", "on_after_compute_loss"], [245, 4, 1, "", "on_after_eval"], [245, 4, 1, "", "on_after_optimizer_step"], [245, 4, 1, "", "on_batch_begin"], [245, 4, 1, "", "on_batch_end"], [245, 4, 1, "", "on_before_eval"], [245, 4, 1, "", "on_before_optimizer_step"], [245, 4, 1, "", "on_epoch_begin"], [245, 4, 1, "", "on_epoch_end"], [245, 4, 1, "", "on_post_grad"], [245, 4, 1, "", "on_step_begin"], [245, 4, 1, "", "on_step_end"], [245, 4, 1, "", "on_train_begin"], [245, 4, 1, "", "on_train_end"], [245, 4, 1, "", "post_epoch_end"], [245, 4, 1, "", "post_process"], [245, 4, 1, "", "pre_epoch_begin"], [245, 4, 1, "", "pre_process"], [245, 4, 1, "", "prepare"], [245, 4, 1, "", "prepare_qat"], [245, 4, 1, "", "register_hook"], [245, 3, 1, "", "train_dataloader"], [245, 3, 1, "", "train_func"]], "neural_compressor.experimental.Distillation": [[245, 5, 1, "", "_epoch_ran"], [245, 5, 1, "", "best_model"], [245, 5, 1, "", "best_score"], [245, 4, 1, "", "create_criterion"], [245, 4, 1, "", "create_optimizer"], [245, 3, 1, "", "criterion"], [245, 5, 1, "", "eval_frequency"], [245, 3, 1, "", "evaluation_distributed"], [245, 4, 1, "", "execute"], [245, 4, 1, "", "generate_hooks"], [245, 4, 1, "", "init_train_cfg"], [245, 4, 1, "", "on_post_forward"], [245, 3, 1, "", "optimizer"], [245, 4, 1, "", "pre_process"], [245, 4, 1, "", "prepare"], [245, 3, 1, "", "student_model"], [245, 3, 1, "", "teacher_model"], [245, 3, 1, "", "train_cfg"], [245, 3, 1, "", "train_distributed"]], "neural_compressor.experimental.Graph_Optimization": [[245, 4, 1, "", "dataset"], [245, 3, 1, "", "eval_dataloader"], [245, 3, 1, "", "eval_func"], [245, 3, 1, "", "input"], [245, 3, 1, "", "metric"], [245, 3, 1, "", "model"], [245, 3, 1, "", "output"], [245, 3, 1, "", "postprocess"], [245, 3, 1, "", "precisions"], [245, 4, 1, "", "set_config_by_model"]], "neural_compressor.experimental.MixedPrecision": [[245, 3, 1, "", "precisions"], [245, 4, 1, "", "set_config_by_model"]], "neural_compressor.experimental.ModelConversion": [[245, 4, 1, "", "dataset"], [245, 3, 1, "", "destination"], [245, 3, 1, "", "eval_dataloader"], [245, 3, 1, "", "eval_func"], [245, 3, 1, "", "metric"], [245, 3, 1, "", "model"], [245, 3, 1, "", "postprocess"], [245, 3, 1, "", "source"]], "neural_compressor.experimental.Pruning": [[245, 5, 1, "", "conf"], [245, 3, 1, "", "evaluation_distributed"], [245, 4, 1, "", "execute"], [245, 4, 1, "", "generate_hooks"], [245, 4, 1, "", "generate_pruners"], [245, 4, 1, "", "get_sparsity_ratio"], [245, 4, 1, "", "pre_process"], [245, 4, 1, "", "prepare"], [245, 5, 1, "", "pruners"], [245, 3, 1, "", "pruning_func"], [245, 3, 1, "", "train_distributed"], [245, 4, 1, "", "update_items_for_all_pruners"]], "neural_compressor.experimental.Quantization": [[245, 3, 1, "", "calib_dataloader"], [245, 4, 1, "", "dataset"], [245, 4, 1, "", "distributed_execute"], [245, 4, 1, "", "execute"], [245, 3, 1, "", "metric"], [245, 3, 1, "", "model"], [245, 3, 1, "", "objective"], [245, 3, 1, "", "postprocess"], [245, 4, 1, "", "pre_process"], [245, 3, 1, "", "q_func"]], "neural_compressor.experimental.benchmark": [[202, 2, 1, "", "Benchmark"], [202, 1, 1, "", "get_architecture"], [202, 1, 1, "", "get_bounded_threads"], [202, 1, 1, "", "get_core_ids"], [202, 1, 1, "", "get_physical_ids"], [202, 1, 1, "", "get_threads"], [202, 1, 1, "", "get_threads_per_core"], [202, 1, 1, "", "set_all_env_var"], [202, 1, 1, "", "set_env_var"]], "neural_compressor.experimental.benchmark.Benchmark": [[202, 3, 1, "", "b_dataloader"], [202, 3, 1, "", "b_func"], [202, 4, 1, "", "call_one"], [202, 4, 1, "", "config_instance"], [202, 4, 1, "", "generate_prefix"], [202, 3, 1, "", "metric"], [202, 3, 1, "", "model"], [202, 3, 1, "", "postprocess"], [202, 3, 1, "", "results"], [202, 4, 1, "", "run_instance"], [202, 4, 1, "", "summary_benchmark"]], "neural_compressor.experimental.common": [[205, 2, 1, "", "DataLoader"], [205, 2, 1, "", "Metric"], [205, 2, 1, "", "Model"], [205, 2, 1, "", "Postprocess"], [203, 0, 0, "-", "criterion"], [204, 0, 0, "-", "dataloader"], [206, 0, 0, "-", "metric"], [207, 0, 0, "-", "model"], [208, 0, 0, "-", "optimizer"], [209, 0, 0, "-", "postprocess"], [210, 0, 0, "-", "torch_utils"]], "neural_compressor.experimental.common.criterion": [[203, 2, 1, "", "Criterions"], [203, 2, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [203, 2, 1, "", "KnowledgeDistillationFramework"], [203, 2, 1, "", "KnowledgeDistillationLoss"], [203, 2, 1, "", "PyTorchCriterions"], [203, 2, 1, "", "PyTorchCrossEntropyLoss"], [203, 2, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLoss"], [203, 2, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"], [203, 2, 1, "", "PyTorchKnowledgeDistillationLoss"], [203, 2, 1, "", "PyTorchKnowledgeDistillationLossWrapper"], [203, 2, 1, "", "PyTorchSelfKnowledgeDistillationLoss"], [203, 2, 1, "", "PyTorchSelfKnowledgeDistillationLossWrapper"], [203, 2, 1, "", "SelfKnowledgeDistillationLoss"], [203, 2, 1, "", "TensorFlowCrossEntropyLoss"], [203, 2, 1, "", "TensorFlowSparseCategoricalCrossentropy"], [203, 2, 1, "", "TensorflowCriterions"], [203, 2, 1, "", "TensorflowKnowledgeDistillationLoss"], [203, 2, 1, "", "TensorflowKnowledgeDistillationLossExternal"], [203, 2, 1, "", "TensorflowKnowledgeDistillationLossWrapper"], [203, 1, 1, "", "criterion_registry"]], "neural_compressor.experimental.common.criterion.Criterions": [[203, 4, 1, "", "register"]], "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss": [[203, 4, 1, "", "clear_features"], [203, 4, 1, "", "init_feature_matcher"], [203, 4, 1, "", "init_loss_funcs"], [203, 4, 1, "", "loss_cal"], [203, 4, 1, "", "loss_cal_sloss"], [203, 4, 1, "", "teacher_model_forward"]], "neural_compressor.experimental.common.criterion.KnowledgeDistillationFramework": [[203, 3, 1, "", "student_model"], [203, 3, 1, "", "teacher_model"]], "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss": [[203, 4, 1, "", "loss_cal"], [203, 4, 1, "", "loss_cal_sloss"], [203, 4, 1, "", "student_targets_loss_cal"], [203, 4, 1, "", "teacher_model_forward"], [203, 4, 1, "", "teacher_student_loss_cal"]], "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss": [[203, 4, 1, "", "init_feature_matcher"], [203, 4, 1, "", "init_loss_funcs"], [203, 4, 1, "", "loss_cal"], [203, 4, 1, "", "loss_cal_sloss"], [203, 4, 1, "", "register_hooks_for_models"], [203, 4, 1, "", "remove_all_hooks"], [203, 4, 1, "", "teacher_model_forward"]], "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss": [[203, 4, 1, "", "KullbackLeiblerDivergence"], [203, 4, 1, "", "SoftCrossEntropy"], [203, 4, 1, "", "student_targets_loss_cal"], [203, 4, 1, "", "teacher_model_forward"], [203, 4, 1, "", "teacher_student_loss_cal"]], "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss": [[203, 4, 1, "", "KullbackLeiblerDivergence"], [203, 4, 1, "", "L2Divergence"], [203, 4, 1, "", "SoftCrossEntropy"], [203, 4, 1, "", "init_loss_funcs"], [203, 4, 1, "", "loss_cal"], [203, 4, 1, "", "teacher_model_forward"]], "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss": [[203, 4, 1, "", "init_loss_funcs"], [203, 4, 1, "", "loss_cal"], [203, 4, 1, "", "loss_cal_sloss"], [203, 4, 1, "", "teacher_model_forward"]], "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss": [[203, 4, 1, "", "SoftCrossEntropy"], [203, 4, 1, "", "student_targets_loss_cal"], [203, 4, 1, "", "teacher_model_forward"], [203, 4, 1, "", "teacher_student_loss_cal"]], "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal": [[203, 4, 1, "", "student_targets_loss_cal"], [203, 4, 1, "", "teacher_model_forward"], [203, 4, 1, "", "teacher_student_loss_cal"]], "neural_compressor.experimental.common.dataloader": [[204, 2, 1, "", "DataLoader"]], "neural_compressor.experimental.common.metric": [[206, 2, 1, "", "Metric"]], "neural_compressor.experimental.common.model": [[207, 2, 1, "", "Model"], [207, 1, 1, "", "set_backend"]], "neural_compressor.experimental.common.optimizer": [[208, 2, 1, "", "Optimizers"], [208, 2, 1, "", "PyTorchOptimizers"], [208, 2, 1, "", "PyTorchSGD"], [208, 2, 1, "", "TensorFlowAdam"], [208, 2, 1, "", "TensorFlowAdamW"], [208, 2, 1, "", "TensorFlowSGD"], [208, 2, 1, "", "TensorflowOptimizers"], [208, 1, 1, "", "optimizer_registry"]], "neural_compressor.experimental.common.optimizer.Optimizers": [[208, 4, 1, "", "register"]], "neural_compressor.experimental.common.postprocess": [[209, 2, 1, "", "Postprocess"]], "neural_compressor.experimental.common.torch_utils": [[210, 1, 1, "", "get_activation"], [210, 1, 1, "", "record_output"]], "neural_compressor.experimental.component": [[211, 2, 1, "", "Component"]], "neural_compressor.experimental.component.Component": [[211, 3, 1, "", "eval_dataloader"], [211, 3, 1, "", "eval_func"], [211, 4, 1, "", "execute"], [211, 3, 1, "", "model"], [211, 4, 1, "", "on_after_compute_loss"], [211, 4, 1, "", "on_after_eval"], [211, 4, 1, "", "on_after_optimizer_step"], [211, 4, 1, "", "on_batch_begin"], [211, 4, 1, "", "on_batch_end"], [211, 4, 1, "", "on_before_eval"], [211, 4, 1, "", "on_before_optimizer_step"], [211, 4, 1, "", "on_epoch_begin"], [211, 4, 1, "", "on_epoch_end"], [211, 4, 1, "", "on_post_grad"], [211, 4, 1, "", "on_step_begin"], [211, 4, 1, "", "on_step_end"], [211, 4, 1, "", "on_train_begin"], [211, 4, 1, "", "on_train_end"], [211, 4, 1, "", "post_epoch_end"], [211, 4, 1, "", "post_process"], [211, 4, 1, "", "pre_epoch_begin"], [211, 4, 1, "", "pre_process"], [211, 4, 1, "", "prepare"], [211, 4, 1, "", "prepare_qat"], [211, 4, 1, "", "register_hook"], [211, 3, 1, "", "train_dataloader"], [211, 3, 1, "", "train_func"]], "neural_compressor.experimental.data": [[233, 2, 1, "", "BaseTransform"], [233, 2, 1, "", "Dataset"], [233, 2, 1, "", "Datasets"], [233, 2, 1, "", "FILTERS"], [233, 2, 1, "", "Filter"], [233, 2, 1, "", "IterableDataset"], [233, 2, 1, "", "TRANSFORMS"], [216, 0, 0, "-", "dataloaders"], [233, 1, 1, "", "dataset_registry"], [228, 0, 0, "-", "datasets"], [233, 1, 1, "", "filter_registry"], [232, 0, 0, "-", "filters"], [233, 1, 1, "", "transform_registry"], [235, 0, 0, "-", "transforms"]], "neural_compressor.experimental.data.TRANSFORMS": [[233, 4, 1, "", "register"]], "neural_compressor.experimental.data.dataloaders": [[212, 0, 0, "-", "base_dataloader"], [213, 0, 0, "-", "dataloader"], [214, 0, 0, "-", "default_dataloader"], [215, 0, 0, "-", "fetcher"], [217, 0, 0, "-", "mxnet_dataloader"], [218, 0, 0, "-", "onnxrt_dataloader"], [219, 0, 0, "-", "pytorch_dataloader"], [220, 0, 0, "-", "sampler"], [221, 0, 0, "-", "tensorflow_dataloader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[212, 2, 1, "", "BaseDataLoader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader.BaseDataLoader": [[212, 4, 1, "", "batch"], [212, 3, 1, "", "batch_size"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[214, 2, 1, "", "DefaultDataLoader"], [214, 1, 1, "", "default_collate"]], "neural_compressor.experimental.data.dataloaders.default_dataloader.DefaultDataLoader": [[214, 4, 1, "", "batch"], [214, 3, 1, "", "dataloader"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[215, 2, 1, "", "Fetcher"], [215, 2, 1, "", "IndexFetcher"], [215, 2, 1, "", "IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[217, 2, 1, "", "MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[218, 2, 1, "", "ONNXRTBertDataLoader"], [218, 2, 1, "", "ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[219, 2, 1, "", "PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[220, 2, 1, "", "BatchSampler"], [220, 2, 1, "", "IterableSampler"], [220, 2, 1, "", "Sampler"], [220, 2, 1, "", "SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[221, 2, 1, "", "TFDataDataLoader"], [221, 2, 1, "", "TensorflowBertDataLoader"], [221, 2, 1, "", "TensorflowDataLoader"], [221, 2, 1, "", "TensorflowModelZooBertDataLoader"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TFDataDataLoader": [[221, 4, 1, "", "batch"]], "neural_compressor.experimental.data.datasets": [[228, 2, 1, "", "Dataset"], [228, 2, 1, "", "Datasets"], [228, 2, 1, "", "IterableDataset"], [222, 0, 0, "-", "bert_dataset"], [223, 0, 0, "-", "coco_dataset"], [224, 0, 0, "-", "dataset"], [228, 1, 1, "", "dataset_registry"], [225, 0, 0, "-", "dummy_dataset"], [226, 0, 0, "-", "dummy_dataset_v2"], [227, 0, 0, "-", "imagenet_dataset"], [229, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[222, 2, 1, "", "InputFeatures"], [222, 2, 1, "", "ONNXRTBertDataset"], [222, 2, 1, "", "ParseDecodeBert"], [222, 2, 1, "", "PytorchBertDataset"], [222, 2, 1, "", "TensorflowBertDataset"], [222, 2, 1, "", "TensorflowModelZooBertDataset"], [222, 1, 1, "", "convert_examples_to_features"], [222, 1, 1, "", "load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.bert_dataset.InputFeatures": [[222, 4, 1, "", "to_json_string"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[223, 2, 1, "", "COCONpy"], [223, 2, 1, "", "COCORaw"], [223, 2, 1, "", "COCORecordDataset"], [223, 2, 1, "", "ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.dataset": [[224, 2, 1, "", "CIFAR10"], [224, 2, 1, "", "CIFAR100"], [224, 2, 1, "", "Dataset"], [224, 2, 1, "", "Datasets"], [224, 2, 1, "", "FashionMNIST"], [224, 2, 1, "", "ImageFolder"], [224, 2, 1, "", "IterableDataset"], [224, 2, 1, "", "MNIST"], [224, 2, 1, "", "MXNetCIFAR10"], [224, 2, 1, "", "MXNetCIFAR100"], [224, 2, 1, "", "MXNetDatasets"], [224, 2, 1, "", "MXNetFashionMNIST"], [224, 2, 1, "", "MXNetImageFolder"], [224, 2, 1, "", "MXNetMNIST"], [224, 2, 1, "", "ONNXRTITDatasets"], [224, 2, 1, "", "ONNXRTQLDatasets"], [224, 2, 1, "", "PyTorchDatasets"], [224, 2, 1, "", "PytorchCIFAR10"], [224, 2, 1, "", "PytorchCIFAR100"], [224, 2, 1, "", "PytorchFashionMNIST"], [224, 2, 1, "", "PytorchMNIST"], [224, 2, 1, "", "PytorchMxnetWrapDataset"], [224, 2, 1, "", "PytorchMxnetWrapFunction"], [224, 2, 1, "", "TensorflowCIFAR10"], [224, 2, 1, "", "TensorflowCIFAR100"], [224, 2, 1, "", "TensorflowDatasets"], [224, 2, 1, "", "TensorflowFashionMNIST"], [224, 2, 1, "", "TensorflowImageFolder"], [224, 2, 1, "", "TensorflowImageRecord"], [224, 2, 1, "", "TensorflowMNIST"], [224, 2, 1, "", "TensorflowTFRecordDataset"], [224, 2, 1, "", "TensorflowVOCRecord"], [224, 1, 1, "", "calculate_md5"], [224, 1, 1, "", "check_integrity"], [224, 1, 1, "", "dataset_registry"], [224, 1, 1, "", "download_url"], [224, 6, 1, "", "framework_datasets"], [224, 1, 1, "", "gen_bar_updater"]], "neural_compressor.experimental.data.datasets.dataset.CIFAR10": [[224, 4, 1, "", "download"], [224, 4, 1, "", "load_meta"]], "neural_compressor.experimental.data.datasets.dataset.FashionMNIST": [[224, 4, 1, "", "read_data"]], "neural_compressor.experimental.data.datasets.dataset.MNIST": [[224, 3, 1, "", "class_to_idx"], [224, 4, 1, "", "download"], [224, 4, 1, "", "read_data"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[225, 2, 1, "", "DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[226, 2, 1, "", "DummyDataset"], [226, 2, 1, "", "SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[227, 2, 1, "", "ImagenetRaw"], [227, 2, 1, "", "MXNetImagenetRaw"], [227, 2, 1, "", "ONNXRTImagenetDataset"], [227, 2, 1, "", "PytorchImagenetRaw"], [227, 2, 1, "", "TensorflowImagenetDataset"], [227, 2, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[229, 2, 1, "", "StyleTransferDataset"]], "neural_compressor.experimental.data.filters": [[232, 2, 1, "", "FILTERS"], [232, 2, 1, "", "Filter"], [230, 0, 0, "-", "coco_filter"], [231, 0, 0, "-", "filter"], [232, 1, 1, "", "filter_registry"]], "neural_compressor.experimental.data.filters.coco_filter": [[230, 2, 1, "", "LabelBalanceCOCORawFilter"], [230, 2, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.filter": [[231, 2, 1, "", "FILTERS"], [231, 2, 1, "", "Filter"], [231, 2, 1, "", "MXNetFilters"], [231, 2, 1, "", "ONNXRTITFilters"], [231, 2, 1, "", "ONNXRTQLFilters"], [231, 2, 1, "", "PyTorchFilters"], [231, 2, 1, "", "TensorflowFilters"], [231, 1, 1, "", "filter_registry"]], "neural_compressor.experimental.data.transforms": [[235, 2, 1, "", "BaseTransform"], [235, 2, 1, "", "TRANSFORMS"], [234, 0, 0, "-", "imagenet_transform"], [236, 0, 0, "-", "tokenization"], [237, 0, 0, "-", "transform"], [235, 1, 1, "", "transform_registry"]], "neural_compressor.experimental.data.transforms.TRANSFORMS": [[235, 4, 1, "", "register"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[234, 2, 1, "", "BilinearImagenetTransform"], [234, 2, 1, "", "LabelShift"], [234, 2, 1, "", "ONNXResizeCropImagenetTransform"], [234, 2, 1, "", "OnnxBilinearImagenetTransform"], [234, 2, 1, "", "ParseDecodeImagenet"], [234, 2, 1, "", "ParseDecodeImagenetTransform"], [234, 2, 1, "", "QuantizedInput"], [234, 2, 1, "", "ResizeWithAspectRatio"], [234, 2, 1, "", "TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental.data.transforms.tokenization": [[236, 2, 1, "", "BasicTokenizer"], [236, 2, 1, "", "FullTokenizer"], [236, 2, 1, "", "WordpieceTokenizer"], [236, 1, 1, "", "convert_by_vocab"], [236, 1, 1, "", "convert_to_unicode"], [236, 1, 1, "", "load_vocab"], [236, 1, 1, "", "whitespace_tokenize"]], "neural_compressor.experimental.data.transforms.tokenization.BasicTokenizer": [[236, 4, 1, "", "tokenize"]], "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer": [[236, 4, 1, "", "convert_ids_to_tokens"], [236, 4, 1, "", "convert_tokens_to_ids"], [236, 4, 1, "", "tokenize"]], "neural_compressor.experimental.data.transforms.tokenization.WordpieceTokenizer": [[236, 4, 1, "", "tokenize"]], "neural_compressor.experimental.data.transforms.transform": [[237, 2, 1, "", "AlignImageChannelTransform"], [237, 2, 1, "", "BaseTransform"], [237, 2, 1, "", "CastONNXTransform"], [237, 2, 1, "", "CastPyTorchTransform"], [237, 2, 1, "", "CastTFTransform"], [237, 2, 1, "", "CenterCropTFTransform"], [237, 2, 1, "", "CenterCropTransform"], [237, 2, 1, "", "CollectTransform"], [237, 2, 1, "", "ComposeTransform"], [237, 2, 1, "", "CropResizeTFTransform"], [237, 2, 1, "", "CropResizeTransform"], [237, 2, 1, "", "CropToBoundingBox"], [237, 2, 1, "", "InputFeatures"], [237, 2, 1, "", "MXNetCropResizeTransform"], [237, 2, 1, "", "MXNetCropToBoundingBox"], [237, 2, 1, "", "MXNetNormalizeTransform"], [237, 2, 1, "", "MXNetTransforms"], [237, 2, 1, "", "MXNetTranspose"], [237, 2, 1, "", "NormalizeTFTransform"], [237, 2, 1, "", "NormalizeTransform"], [237, 2, 1, "", "ONNXRTCropToBoundingBox"], [237, 2, 1, "", "ONNXRTITTransforms"], [237, 2, 1, "", "ONNXRTQLTransforms"], [237, 2, 1, "", "PaddedCenterCropTransform"], [237, 2, 1, "", "ParseDecodeVocTransform"], [237, 2, 1, "", "PyTorchAlignImageChannel"], [237, 2, 1, "", "PyTorchCropResizeTransform"], [237, 2, 1, "", "PyTorchNormalizeTransform"], [237, 2, 1, "", "PyTorchTransforms"], [237, 2, 1, "", "PyTorchTranspose"], [237, 2, 1, "", "PytorchMxnetTransform"], [237, 2, 1, "", "PytorchMxnetWrapFunction"], [237, 2, 1, "", "RandomCropTFTransform"], [237, 2, 1, "", "RandomCropTransform"], [237, 2, 1, "", "RandomHorizontalFlip"], [237, 2, 1, "", "RandomResizedCropMXNetTransform"], [237, 2, 1, "", "RandomResizedCropPytorchTransform"], [237, 2, 1, "", "RandomResizedCropTFTransform"], [237, 2, 1, "", "RandomResizedCropTransform"], [237, 2, 1, "", "RandomVerticalFlip"], [237, 2, 1, "", "RescaleKerasPretrainTransform"], [237, 2, 1, "", "RescaleTFTransform"], [237, 2, 1, "", "RescaleTransform"], [237, 2, 1, "", "ResizeMXNetTransform"], [237, 2, 1, "", "ResizePytorchTransform"], [237, 2, 1, "", "ResizeTFTransform"], [237, 2, 1, "", "ResizeTransform"], [237, 2, 1, "", "ResizeWithRatio"], [237, 2, 1, "", "SquadExample"], [237, 2, 1, "", "TFModelZooCollectTransform"], [237, 2, 1, "", "TFSquadV1ModelZooPostTransform"], [237, 2, 1, "", "TFSquadV1PostTransform"], [237, 2, 1, "", "TRANSFORMS"], [237, 2, 1, "", "TensorflowCropToBoundingBox"], [237, 2, 1, "", "TensorflowRandomHorizontalFlip"], [237, 2, 1, "", "TensorflowRandomVerticalFlip"], [237, 2, 1, "", "TensorflowResizeWithRatio"], [237, 2, 1, "", "TensorflowTransform"], [237, 2, 1, "", "TensorflowTransforms"], [237, 2, 1, "", "TensorflowTranspose"], [237, 2, 1, "", "TensorflowWrapFunction"], [237, 2, 1, "", "ToArray"], [237, 2, 1, "", "ToNDArrayTransform"], [237, 2, 1, "", "Transforms"], [237, 2, 1, "", "Transpose"], [237, 1, 1, "", "convert_examples_to_features"], [237, 1, 1, "", "get_final_text"], [237, 1, 1, "", "get_torchvision_map"], [237, 1, 1, "", "read_squad_examples"], [237, 1, 1, "", "transform_registry"]], "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTFTransform": [[237, 4, 1, "", "get_params"]], "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTransform": [[237, 4, 1, "", "get_params"]], "neural_compressor.experimental.data.transforms.transform.TFSquadV1PostTransform": [[237, 4, 1, "", "get_postprocess_result"], [237, 4, 1, "", "process_result"]], "neural_compressor.experimental.data.transforms.transform.TRANSFORMS": [[237, 4, 1, "", "register"]], "neural_compressor.experimental.distillation": [[238, 2, 1, "", "Distillation"]], "neural_compressor.experimental.distillation.Distillation": [[238, 5, 1, "", "_epoch_ran"], [238, 5, 1, "", "best_model"], [238, 5, 1, "", "best_score"], [238, 4, 1, "", "create_criterion"], [238, 4, 1, "", "create_optimizer"], [238, 3, 1, "", "criterion"], [238, 5, 1, "", "eval_frequency"], [238, 3, 1, "", "evaluation_distributed"], [238, 4, 1, "", "execute"], [238, 4, 1, "", "generate_hooks"], [238, 4, 1, "", "init_train_cfg"], [238, 4, 1, "", "on_post_forward"], [238, 3, 1, "", "optimizer"], [238, 4, 1, "", "pre_process"], [238, 4, 1, "", "prepare"], [238, 3, 1, "", "student_model"], [238, 3, 1, "", "teacher_model"], [238, 3, 1, "", "train_cfg"], [238, 3, 1, "", "train_distributed"]], "neural_compressor.experimental.export": [[239, 1, 1, "", "onnx_qlinear_to_qdq"], [240, 0, 0, "-", "qlinear2qdq"], [241, 0, 0, "-", "tf2onnx"], [239, 1, 1, "", "tf_to_fp32_onnx"], [239, 1, 1, "", "tf_to_int8_onnx"], [242, 0, 0, "-", "torch2onnx"], [239, 1, 1, "", "torch_to_fp32_onnx"], [239, 1, 1, "", "torch_to_int8_onnx"], [243, 0, 0, "-", "utils"]], "neural_compressor.experimental.export.qlinear2qdq": [[240, 1, 1, "", "check_model"], [240, 1, 1, "", "onnx_qlinear_to_qdq"]], "neural_compressor.experimental.export.tf2onnx": [[241, 1, 1, "", "tf_to_fp32_onnx"], [241, 1, 1, "", "tf_to_int8_onnx"]], "neural_compressor.experimental.export.torch2onnx": [[242, 1, 1, "", "build_scale_mapping"], [242, 1, 1, "", "get_node_mapping"], [242, 1, 1, "", "get_quantizable_onnx_ops"], [242, 1, 1, "", "qdq_fp32_bias"], [242, 1, 1, "", "qdq_fp32_bias_qdq"], [242, 1, 1, "", "qdq_int32_bias"], [242, 1, 1, "", "recalculate_bias"], [242, 1, 1, "", "remove_nodes_by_name"], [242, 1, 1, "", "set_data_type"], [242, 1, 1, "", "set_scale_info"], [242, 1, 1, "", "sub_graph_with_int32_bias"], [242, 1, 1, "", "torch_to_fp32_onnx"], [242, 1, 1, "", "torch_to_int8_onnx"], [242, 1, 1, "", "update_weight_bias"]], "neural_compressor.experimental.export.utils": [[243, 2, 1, "", "DummyDataReader"], [243, 1, 1, "", "ONNX2Numpy_dtype"]], "neural_compressor.experimental.export.utils.DummyDataReader": [[243, 4, 1, "", "get_next"]], "neural_compressor.experimental.graph_optimization": [[244, 2, 1, "", "Graph_Optimization"]], "neural_compressor.experimental.graph_optimization.Graph_Optimization": [[244, 4, 1, "", "dataset"], [244, 3, 1, "", "eval_dataloader"], [244, 3, 1, "", "eval_func"], [244, 3, 1, "", "input"], [244, 3, 1, "", "metric"], [244, 3, 1, "", "model"], [244, 3, 1, "", "output"], [244, 3, 1, "", "postprocess"], [244, 3, 1, "", "precisions"], [244, 4, 1, "", "set_config_by_model"]], "neural_compressor.experimental.metric": [[252, 2, 1, "", "BaseMetric"], [252, 2, 1, "", "METRICS"], [551, 0, 0, "-", "bleu"], [247, 0, 0, "-", "bleu_util"], [248, 0, 0, "-", "coco_label_map"], [249, 0, 0, "-", "coco_tools"], [250, 0, 0, "-", "evaluate_squad"], [251, 0, 0, "-", "f1"], [253, 0, 0, "-", "metric"], [252, 1, 1, "", "metric_registry"]], "neural_compressor.experimental.metric.BaseMetric": [[252, 3, 1, "", "hvd"], [252, 3, 1, "", "metric"], [252, 4, 1, "", "reset"], [252, 4, 1, "", "result"], [252, 4, 1, "", "update"]], "neural_compressor.experimental.metric.METRICS": [[252, 5, 1, "", "metrics"], [252, 4, 1, "", "register"]], "neural_compressor.experimental.metric.bleu": [[551, 2, 1, "", "BLEU"], [246, 2, 1, "", "UnicodeRegex"], [246, 1, 1, "", "bleu_tokenize"]], "neural_compressor.experimental.metric.bleu.BLEU": [[551, 5, 1, "", "labels"], [551, 5, 1, "", "predictions"], [551, 4, 1, "", "reset"], [551, 4, 1, "", "result"], [551, 4, 1, "", "update"]], "neural_compressor.experimental.metric.bleu.UnicodeRegex": [[246, 5, 1, "", "nondigit_punct_re"], [246, 4, 1, "", "property_chars"], [246, 5, 1, "", "punct_nondigit_re"], [246, 5, 1, "", "symbol_re"]], "neural_compressor.experimental.metric.bleu_util": [[247, 1, 1, "", "compute_bleu"]], "neural_compressor.experimental.metric.coco_tools": [[249, 2, 1, "", "COCOEvalWrapper"], [249, 2, 1, "", "COCOWrapper"], [249, 1, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [249, 1, 1, "", "ExportSingleImageDetectionMasksToCoco"], [249, 1, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper": [[249, 4, 1, "", "ComputeMetrics"], [249, 4, 1, "", "GetAgnosticMode"], [249, 4, 1, "", "GetCategory"], [249, 4, 1, "", "GetCategoryIdList"], [249, 4, 1, "", "accumulate"]], "neural_compressor.experimental.metric.coco_tools.COCOWrapper": [[249, 4, 1, "", "LoadAnnotations"], [249, 5, 1, "", "dataset"], [249, 5, 1, "", "detection_type"]], "neural_compressor.experimental.metric.evaluate_squad": [[250, 1, 1, "", "evaluate"], [250, 1, 1, "", "exact_match_score"], [250, 1, 1, "", "f1_score"], [250, 1, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[251, 1, 1, "", "evaluate"], [251, 1, 1, "", "f1_score"], [251, 1, 1, "", "metric_max_over_ground_truths"], [251, 1, 1, "", "normalize_answer"]], "neural_compressor.experimental.metric.metric": [[253, 2, 1, "", "Accuracy"], [253, 2, 1, "", "BaseMetric"], [253, 2, 1, "", "COCOmAPv2"], [253, 2, 1, "", "F1"], [253, 2, 1, "", "GeneralTopK"], [253, 2, 1, "", "Loss"], [253, 2, 1, "", "MAE"], [253, 2, 1, "", "METRICS"], [253, 2, 1, "", "MSE"], [253, 2, 1, "", "MXNetMetrics"], [253, 2, 1, "", "ONNXRTGLUE"], [253, 2, 1, "", "ONNXRTITMetrics"], [253, 2, 1, "", "ONNXRTQLMetrics"], [253, 2, 1, "", "PyTorchLoss"], [253, 2, 1, "", "PyTorchMetrics"], [253, 2, 1, "", "RMSE"], [253, 2, 1, "", "ROC"], [253, 2, 1, "", "SquadF1"], [253, 2, 1, "", "TensorflowCOCOMAP"], [253, 2, 1, "", "TensorflowMAP"], [253, 2, 1, "", "TensorflowMetrics"], [253, 2, 1, "", "TensorflowTopK"], [253, 2, 1, "", "TensorflowVOCMAP"], [253, 2, 1, "", "WrapMXNetMetric"], [253, 2, 1, "", "WrapONNXRTMetric"], [253, 2, 1, "", "WrapPyTorchMetric"], [253, 2, 1, "", "mIOU"], [253, 1, 1, "", "metric_registry"]], "neural_compressor.experimental.metric.metric.Accuracy": [[253, 5, 1, "", "label_list"], [253, 5, 1, "", "pred_list"], [253, 4, 1, "", "reset"], [253, 4, 1, "", "result"], [253, 5, 1, "", "sample"], [253, 4, 1, "", "update"]], "neural_compressor.experimental.metric.metric.BaseMetric": [[253, 3, 1, "", "hvd"], [253, 3, 1, "", "metric"], [253, 4, 1, "", "reset"], [253, 4, 1, "", "result"], [253, 4, 1, "", "update"]], "neural_compressor.experimental.metric.metric.COCOmAPv2": [[253, 4, 1, "", "reset"], [253, 4, 1, "", "result"], [253, 4, 1, "", "update"]], "neural_compressor.experimental.metric.metric.F1": [[253, 4, 1, "", "reset"], [253, 4, 1, "", "result"], [253, 4, 1, "", "update"]], "neural_compressor.experimental.metric.metric.GeneralTopK": [[253, 5, 1, "", "k"], [253, 5, 1, "", "num_correct"], [253, 5, 1, "", "num_sample"], [253, 4, 1, "", "reset"], [253, 4, 1, "", "result"], [253, 4, 1, "", "update"]], "neural_compressor.experimental.metric.metric.Loss": [[253, 4, 1, "", "reset"], [253, 4, 1, "", "result"], [253, 5, 1, "", "sample"], [253, 5, 1, "", "sum"], [253, 4, 1, "", "update"]], "neural_compressor.experimental.metric.metric.MAE": [[253, 5, 1, "", "compare_label"], [253, 5, 1, "", "label_list"], [253, 5, 1, "", "pred_list"], [253, 4, 1, "", "reset"], [253, 4, 1, "", "result"], [253, 4, 1, "", "update"]], "neural_compressor.experimental.metric.metric.METRICS": [[253, 5, 1, "", "metrics"], [253, 4, 1, "", "register"]], "neural_compressor.experimental.metric.metric.MSE": [[253, 5, 1, "", "compare_label"], [253, 5, 1, "", "label_list"], [253, 5, 1, "", "pred_list"], [253, 4, 1, "", "reset"], [253, 4, 1, "", "result"], [253, 4, 1, "", "update"]], "neural_compressor.experimental.metric.metric.MXNetMetrics": [[253, 5, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTGLUE": [[253, 4, 1, "", "reset"], [253, 4, 1, "", "result"], [253, 4, 1, "", "update"]], "neural_compressor.experimental.metric.metric.ONNXRTITMetrics": [[253, 5, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics": [[253, 5, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.PyTorchLoss": [[253, 4, 1, "", "compute"], [253, 4, 1, "", "reset"], [253, 4, 1, "", "update"]], "neural_compressor.experimental.metric.metric.PyTorchMetrics": [[253, 5, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.RMSE": [[253, 5, 1, "", "mse"], [253, 4, 1, "", "reset"], [253, 4, 1, "", "result"], [253, 4, 1, "", "update"]], "neural_compressor.experimental.metric.metric.ROC": [[253, 4, 1, "", "reset"], [253, 4, 1, "", "result"], [253, 4, 1, "", "update"]], "neural_compressor.experimental.metric.metric.SquadF1": [[253, 4, 1, "", "reset"], [253, 4, 1, "", "result"], [253, 4, 1, "", "update"]], "neural_compressor.experimental.metric.metric.TensorflowMAP": [[253, 4, 1, "", "reset"], [253, 4, 1, "", "result"], [253, 4, 1, "", "update"]], "neural_compressor.experimental.metric.metric.TensorflowMetrics": [[253, 5, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.TensorflowTopK": [[253, 5, 1, "", "k"], [253, 5, 1, "", "num_correct"], [253, 5, 1, "", "num_sample"], [253, 4, 1, "", "reset"], [253, 4, 1, "", "result"], [253, 4, 1, "", "update"]], "neural_compressor.experimental.metric.metric.WrapMXNetMetric": [[253, 4, 1, "", "reset"], [253, 4, 1, "", "result"], [253, 4, 1, "", "update"]], "neural_compressor.experimental.metric.metric.WrapONNXRTMetric": [[253, 4, 1, "", "reset"], [253, 4, 1, "", "result"], [253, 4, 1, "", "update"]], "neural_compressor.experimental.metric.metric.WrapPyTorchMetric": [[253, 4, 1, "", "reset"], [253, 4, 1, "", "result"], [253, 4, 1, "", "update"]], "neural_compressor.experimental.metric.metric.mIOU": [[253, 4, 1, "", "reset"], [253, 4, 1, "", "result"], [253, 4, 1, "", "update"]], "neural_compressor.experimental.mixed_precision": [[254, 2, 1, "", "MixedPrecision"]], "neural_compressor.experimental.mixed_precision.MixedPrecision": [[254, 3, 1, "", "precisions"], [254, 4, 1, "", "set_config_by_model"]], "neural_compressor.experimental.model_conversion": [[255, 2, 1, "", "ModelConversion"]], "neural_compressor.experimental.model_conversion.ModelConversion": [[255, 4, 1, "", "dataset"], [255, 3, 1, "", "destination"], [255, 3, 1, "", "eval_dataloader"], [255, 3, 1, "", "eval_func"], [255, 3, 1, "", "metric"], [255, 3, 1, "", "model"], [255, 3, 1, "", "postprocess"], [255, 3, 1, "", "source"]], "neural_compressor.experimental.nas": [[268, 2, 1, "", "BasicNAS"], [268, 2, 1, "", "DyNAS"], [268, 2, 1, "", "NAS"], [256, 0, 0, "-", "basic_nas"], [257, 0, 0, "-", "dynas"], [262, 0, 0, "-", "dynast"], [269, 0, 0, "-", "nas"], [270, 0, 0, "-", "nas_utils"], [271, 0, 0, "-", "search_algorithms"]], "neural_compressor.experimental.nas.BasicNAS": [[268, 4, 1, "", "estimate"], [268, 4, 1, "", "execute"], [268, 4, 1, "", "init_by_cfg"], [268, 4, 1, "", "pre_process"]], "neural_compressor.experimental.nas.DyNAS": [[268, 4, 1, "", "create_acc_predictor"], [268, 4, 1, "", "create_latency_predictor"], [268, 4, 1, "", "create_macs_predictor"], [268, 4, 1, "", "estimate"], [268, 4, 1, "", "init_cfg"], [268, 4, 1, "", "init_for_search"], [268, 4, 1, "", "search"], [268, 4, 1, "", "select_model_arch"]], "neural_compressor.experimental.nas.basic_nas": [[256, 2, 1, "", "BasicNAS"]], "neural_compressor.experimental.nas.basic_nas.BasicNAS": [[256, 4, 1, "", "estimate"], [256, 4, 1, "", "execute"], [256, 4, 1, "", "init_by_cfg"], [256, 4, 1, "", "pre_process"]], "neural_compressor.experimental.nas.dynas": [[257, 2, 1, "", "DyNAS"]], "neural_compressor.experimental.nas.dynas.DyNAS": [[257, 4, 1, "", "create_acc_predictor"], [257, 4, 1, "", "create_latency_predictor"], [257, 4, 1, "", "create_macs_predictor"], [257, 4, 1, "", "estimate"], [257, 4, 1, "", "init_cfg"], [257, 4, 1, "", "init_for_search"], [257, 4, 1, "", "search"], [257, 4, 1, "", "select_model_arch"]], "neural_compressor.experimental.nas.dynast": [[258, 0, 0, "-", "dynas_manager"], [259, 0, 0, "-", "dynas_predictor"], [260, 0, 0, "-", "dynas_search"], [261, 0, 0, "-", "dynas_utils"], [263, 0, 0, "-", "supernetwork"]], "neural_compressor.experimental.nas.dynast.dynas_manager": [[258, 2, 1, "", "ParameterManager"], [258, 2, 1, "", "TransformerLTEncoding"]], "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager": [[258, 4, 1, "", "create_training_set"], [258, 4, 1, "", "import_csv"], [258, 4, 1, "", "onehot_generic"], [258, 4, 1, "", "process_param_dict"], [258, 4, 1, "", "random_sample"], [258, 4, 1, "", "random_samples"], [258, 4, 1, "", "set_seed"], [258, 4, 1, "", "translate2param"], [258, 4, 1, "", "translate2pymoo"]], "neural_compressor.experimental.nas.dynast.dynas_manager.TransformerLTEncoding": [[258, 4, 1, "", "create_training_set"], [258, 4, 1, "", "import_csv"]], "neural_compressor.experimental.nas.dynast.dynas_predictor": [[259, 2, 1, "", "Predictor"]], "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor": [[259, 4, 1, "", "get_metrics"], [259, 4, 1, "", "get_parameters"], [259, 4, 1, "", "load"], [259, 4, 1, "", "predict"], [259, 4, 1, "", "save"], [259, 4, 1, "", "train"]], "neural_compressor.experimental.nas.dynast.dynas_search": [[260, 2, 1, "", "ProblemMultiObjective"], [260, 2, 1, "", "SearchAlgoManager"]], "neural_compressor.experimental.nas.dynast.dynas_search.SearchAlgoManager": [[260, 4, 1, "", "configure_age"], [260, 4, 1, "", "configure_nsga2"], [260, 4, 1, "", "run_search"]], "neural_compressor.experimental.nas.dynast.dynas_utils": [[261, 2, 1, "", "EvaluationInterface"], [261, 2, 1, "", "EvaluationInterfaceMobileNetV3"], [261, 2, 1, "", "EvaluationInterfaceResNet50"], [261, 2, 1, "", "EvaluationInterfaceTransformerLT"], [261, 2, 1, "", "OFARunner"], [261, 2, 1, "", "Runner"], [261, 2, 1, "", "TorchVisionReference"], [261, 2, 1, "", "TransformerLTRunner"], [261, 1, 1, "", "get_macs"], [261, 1, 1, "", "get_torchvision_model"], [261, 1, 1, "", "measure_latency"]], "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterface": [[261, 4, 1, "", "clear_csv"], [261, 4, 1, "", "eval_subnet"]], "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceMobileNetV3": [[261, 4, 1, "", "eval_subnet"]], "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceResNet50": [[261, 4, 1, "", "eval_subnet"]], "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceTransformerLT": [[261, 4, 1, "", "clear_csv"], [261, 4, 1, "", "eval_subnet"]], "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner": [[261, 4, 1, "", "estimate_accuracy_top1"], [261, 4, 1, "", "estimate_latency"], [261, 4, 1, "", "estimate_macs"], [261, 4, 1, "", "get_subnet"], [261, 4, 1, "", "measure_latency"], [261, 4, 1, "", "validate_macs"], [261, 4, 1, "", "validate_top1"]], "neural_compressor.experimental.nas.dynast.dynas_utils.TorchVisionReference": [[261, 4, 1, "", "measure_latency"], [261, 4, 1, "", "validate_macs"], [261, 4, 1, "", "validate_top1"]], "neural_compressor.experimental.nas.dynast.dynas_utils.TransformerLTRunner": [[261, 4, 1, "", "measure_latency"], [261, 4, 1, "", "validate_macs"]], "neural_compressor.experimental.nas.dynast.supernetwork": [[264, 0, 0, "-", "machine_translation"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation": [[265, 0, 0, "-", "modules_supernetwork"], [266, 0, 0, "-", "transformer_interface"], [267, 0, 0, "-", "transformer_supernetwork"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork": [[265, 2, 1, "", "MultiheadAttentionSuper"], [265, 1, 1, "", "get_incremental_state"], [265, 1, 1, "", "set_incremental_state"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork.MultiheadAttentionSuper": [[265, 4, 1, "", "forward"], [265, 4, 1, "", "reorder_incremental_state"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface": [[266, 1, 1, "", "compute_bleu"], [266, 1, 1, "", "compute_latency"], [266, 1, 1, "", "compute_macs"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork": [[267, 2, 1, "", "TransformerDecoder"], [267, 2, 1, "", "TransformerDecoderLayer"], [267, 2, 1, "", "TransformerEncoder"], [267, 2, 1, "", "TransformerEncoderLayer"], [267, 2, 1, "", "TransformerSuperNetwork"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoder": [[267, 4, 1, "", "extract_features"], [267, 4, 1, "", "forward"], [267, 4, 1, "", "max_positions"], [267, 4, 1, "", "output_layer"], [267, 4, 1, "", "upgrade_state_dict_named"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoderLayer": [[267, 4, 1, "", "forward"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoder": [[267, 4, 1, "", "forward"], [267, 4, 1, "", "max_positions"], [267, 4, 1, "", "reorder_encoder_out"], [267, 4, 1, "", "upgrade_state_dict_named"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoderLayer": [[267, 4, 1, "", "forward"], [267, 4, 1, "", "upgrade_state_dict_named"]], "neural_compressor.experimental.nas.nas": [[269, 2, 1, "", "NAS"], [269, 2, 1, "", "NASBase"]], "neural_compressor.experimental.nas.nas.NASBase": [[269, 4, 1, "", "count_model_parameters"], [269, 4, 1, "", "dump_search_results"], [269, 4, 1, "", "estimate"], [269, 4, 1, "", "find_best_model_archs"], [269, 4, 1, "", "init_search_cfg"], [269, 4, 1, "", "load_search_results"], [269, 4, 1, "", "metrics_conversion"], [269, 3, 1, "", "model_builder"], [269, 4, 1, "", "params_vec2params_dict"], [269, 4, 1, "", "search"], [269, 3, 1, "", "search_algorithm"], [269, 3, 1, "", "search_space"], [269, 4, 1, "", "select_model_arch"]], "neural_compressor.experimental.nas.nas_utils": [[270, 1, 1, "", "create_search_space_pool"], [270, 1, 1, "", "find_pareto_front"], [270, 1, 1, "", "nas_registry"]], "neural_compressor.experimental.nas.search_algorithms": [[271, 2, 1, "", "BayesianOptimizationSearcher"], [271, 2, 1, "", "GridSearcher"], [271, 2, 1, "", "RandomSearcher"], [271, 2, 1, "", "Searcher"]], "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher": [[271, 4, 1, "", "get_feedback"], [271, 4, 1, "", "indices2params_vec"], [271, 4, 1, "", "suggest"]], "neural_compressor.experimental.nas.search_algorithms.GridSearcher": [[271, 4, 1, "", "suggest"]], "neural_compressor.experimental.nas.search_algorithms.RandomSearcher": [[271, 4, 1, "", "suggest"]], "neural_compressor.experimental.nas.search_algorithms.Searcher": [[271, 4, 1, "", "get_feedback"], [271, 4, 1, "", "params_vec2params_dict"], [271, 4, 1, "", "suggest"]], "neural_compressor.experimental.pruner_legacy": [[272, 0, 0, "-", "gradient_sensitivity"], [273, 0, 0, "-", "group_lasso"], [275, 0, 0, "-", "magnitude"], [276, 0, 0, "-", "pattern_lock"], [277, 0, 0, "-", "pruner"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[272, 2, 1, "", "GradientSensitivityPruner"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner": [[272, 4, 1, "", "compute_mask"], [272, 4, 1, "", "on_epoch_begin"], [272, 4, 1, "", "on_epoch_end"], [272, 4, 1, "", "on_step_begin"], [272, 4, 1, "", "on_step_end"], [272, 4, 1, "", "parse_weight_name"], [272, 4, 1, "", "prune_by_importance"], [272, 4, 1, "", "prune_weight"], [272, 4, 1, "", "update_importance_abs"], [272, 4, 1, "", "update_importance_elementwise"], [272, 4, 1, "", "update_importance_weighted"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[273, 2, 1, "", "GroupLassoPruner"]], "neural_compressor.experimental.pruner_legacy.group_lasso.GroupLassoPruner": [[273, 4, 1, "", "on_before_optimizer_step"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[275, 2, 1, "", "BasicMagnitudePruner"]], "neural_compressor.experimental.pruner_legacy.magnitude.BasicMagnitudePruner": [[275, 4, 1, "", "compute_mask"], [275, 4, 1, "", "on_epoch_begin"], [275, 4, 1, "", "on_epoch_end"], [275, 4, 1, "", "on_step_begin"], [275, 4, 1, "", "on_step_end"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[276, 2, 1, "", "PatternLockPruner"]], "neural_compressor.experimental.pruner_legacy.pattern_lock.PatternLockPruner": [[276, 4, 1, "", "compute_mask"], [276, 4, 1, "", "on_epoch_begin"], [276, 4, 1, "", "on_epoch_end"], [276, 4, 1, "", "on_step_begin"], [276, 4, 1, "", "on_step_end"], [276, 4, 1, "", "update_weights"]], "neural_compressor.experimental.pruner_legacy.pruner": [[277, 2, 1, "", "Pruner"], [277, 1, 1, "", "pruner_registry"]], "neural_compressor.experimental.pruner_legacy.pruner.Pruner": [[277, 4, 1, "", "on_before_optimizer_step"], [277, 4, 1, "", "on_epoch_begin"], [277, 4, 1, "", "on_epoch_end"], [277, 4, 1, "", "on_step_begin"], [277, 4, 1, "", "on_step_end"], [277, 4, 1, "", "on_train_begin"], [277, 4, 1, "", "on_train_end"], [277, 4, 1, "", "update_sparsity"]], "neural_compressor.experimental.pruning": [[278, 2, 1, "", "Pruning"], [278, 2, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning.Pruning": [[278, 5, 1, "", "conf"], [278, 3, 1, "", "evaluation_distributed"], [278, 4, 1, "", "execute"], [278, 4, 1, "", "generate_hooks"], [278, 4, 1, "", "generate_pruners"], [278, 4, 1, "", "get_sparsity_ratio"], [278, 4, 1, "", "pre_process"], [278, 4, 1, "", "prepare"], [278, 5, 1, "", "pruners"], [278, 3, 1, "", "pruning_func"], [278, 3, 1, "", "train_distributed"], [278, 4, 1, "", "update_items_for_all_pruners"]], "neural_compressor.experimental.pruning.TfPruningCallback": [[278, 4, 1, "", "on_after_compute_loss"], [278, 4, 1, "", "on_batch_begin"], [278, 4, 1, "", "on_batch_end"], [278, 4, 1, "", "on_epoch_begin"], [278, 4, 1, "", "on_epoch_end"], [278, 4, 1, "", "on_step_begin"], [278, 4, 1, "", "on_step_end"], [278, 4, 1, "", "on_train_begin"], [278, 4, 1, "", "on_train_end"], [278, 4, 1, "", "post_epoch_end"], [278, 4, 1, "", "pre_epoch_begin"]], "neural_compressor.experimental.pruning_recipes": [[279, 2, 1, "", "PATTERNS"], [280, 0, 0, "-", "patterns"]], "neural_compressor.experimental.pruning_recipes.PATTERNS": [[279, 5, 1, "", "patterns"], [279, 4, 1, "", "support_pattern"]], "neural_compressor.experimental.pruning_recipes.patterns": [[280, 2, 1, "", "PATTERNS"], [281, 0, 0, "-", "pattern"], [282, 0, 0, "-", "tile_pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.PATTERNS": [[280, 5, 1, "", "patterns"], [280, 4, 1, "", "support_pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[281, 2, 1, "", "PATTERNS"], [281, 2, 1, "", "PatternBase"], [281, 1, 1, "", "pattern_registry"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS": [[281, 5, 1, "", "patterns"], [281, 4, 1, "", "support_pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase": [[281, 4, 1, "", "compute_sparsity"], [281, 4, 1, "", "reduce"], [281, 4, 1, "", "reshape"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[282, 2, 1, "", "TilePatternBase"], [282, 2, 1, "", "TilePattern_1x1"], [282, 2, 1, "", "TilePattern_1x16"], [282, 2, 1, "", "TilePattern_1x2"], [282, 2, 1, "", "TilePattern_2x2"], [282, 2, 1, "", "TilePattern_4x1"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePatternBase": [[282, 4, 1, "", "compute_sparsity"], [282, 4, 1, "", "repeat_mask"]], "neural_compressor.experimental.pruning_v2": [[283, 2, 1, "", "Pruning"], [283, 2, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning_v2.Pruning": [[283, 5, 1, "", "conf"], [283, 3, 1, "", "evaluation_distributed"], [283, 4, 1, "", "execute"], [283, 4, 1, "", "generate_hooks"], [283, 4, 1, "", "get_sparsity_ratio"], [283, 4, 1, "", "pre_process"], [283, 4, 1, "", "prepare"], [283, 5, 1, "", "pruners"], [283, 3, 1, "", "pruning_func"], [283, 3, 1, "", "train_distributed"], [283, 4, 1, "", "update_config"]], "neural_compressor.experimental.pruning_v2.TfPruningCallback": [[283, 4, 1, "", "on_after_compute_loss"], [283, 4, 1, "", "on_batch_begin"], [283, 4, 1, "", "on_batch_end"], [283, 4, 1, "", "on_epoch_begin"], [283, 4, 1, "", "on_epoch_end"], [283, 4, 1, "", "on_step_begin"], [283, 4, 1, "", "on_step_end"], [283, 4, 1, "", "on_train_begin"], [283, 4, 1, "", "on_train_end"], [283, 4, 1, "", "post_epoch_end"], [283, 4, 1, "", "pre_epoch_begin"]], "neural_compressor.experimental.pytorch_pruner": [[285, 0, 0, "-", "logger"], [286, 0, 0, "-", "patterns"], [287, 0, 0, "-", "prune_utils"], [288, 0, 0, "-", "pruner"], [289, 0, 0, "-", "pruning"], [290, 0, 0, "-", "scheduler"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[286, 2, 1, "", "Pattern"], [286, 2, 1, "", "PatternNInM"], [286, 2, 1, "", "PatternNxM"], [286, 1, 1, "", "get_pattern"], [286, 1, 1, "", "register_pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.Pattern": [[286, 4, 1, "", "get_block_size_dict"], [286, 4, 1, "", "get_mask_single"], [286, 4, 1, "", "get_masks"], [286, 4, 1, "", "get_masks_global"], [286, 4, 1, "", "get_masks_local"], [286, 4, 1, "", "get_pattern_lock_masks"], [286, 4, 1, "", "get_sparsity_ratio"], [286, 5, 1, "", "is_global"], [286, 5, 1, "", "pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM": [[286, 5, 1, "", "M"], [286, 5, 1, "", "N"], [286, 4, 1, "", "get_masks_global"], [286, 4, 1, "", "get_pattern_lock_masks"], [286, 4, 1, "", "get_sparsity_ratio"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM": [[286, 5, 1, "", "block_size"], [286, 4, 1, "", "get_block_size_dict"], [286, 4, 1, "", "get_masks_global"], [286, 4, 1, "", "get_pattern_lock_masks"], [286, 4, 1, "", "get_sparsity_ratio"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[287, 1, 1, "", "check_config"], [287, 1, 1, "", "parse_not_to_prune"], [287, 1, 1, "", "parse_to_prune"], [287, 1, 1, "", "process_and_check_config"], [287, 1, 1, "", "process_config"], [287, 1, 1, "", "reset_non_value_to_default"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[288, 2, 1, "", "MagnitudePruner"], [288, 2, 1, "", "PatternLockPruner"], [288, 2, 1, "", "Pruner"], [288, 2, 1, "", "SnipMomentumPruner"], [288, 2, 1, "", "SnipPruner"], [288, 1, 1, "", "get_pruner"], [288, 1, 1, "", "register_pruners"]], "neural_compressor.experimental.pytorch_pruner.pruner.MagnitudePruner": [[288, 4, 1, "", "update_scores"]], "neural_compressor.experimental.pytorch_pruner.pruner.PatternLockPruner": [[288, 4, 1, "", "on_after_optimizer_step"], [288, 4, 1, "", "on_step_begin"]], "neural_compressor.experimental.pytorch_pruner.pruner.Pruner": [[288, 4, 1, "", "check_is_pruned_step"], [288, 5, 1, "", "config"], [288, 5, 1, "", "current_sparsity_ratio"], [288, 5, 1, "", "end_step"], [288, 5, 1, "", "global_step"], [288, 4, 1, "", "mask_weights"], [288, 5, 1, "", "masks"], [288, 5, 1, "", "max_sparsity_ratio_per_layer"], [288, 5, 1, "", "modules"], [288, 4, 1, "", "on_after_eval"], [288, 4, 1, "", "on_after_optimizer_step"], [288, 4, 1, "", "on_before_eval"], [288, 4, 1, "", "on_before_optimizer_step"], [288, 4, 1, "", "on_epoch_begin"], [288, 4, 1, "", "on_epoch_end"], [288, 4, 1, "", "on_step_begin"], [288, 4, 1, "", "on_step_end"], [288, 4, 1, "", "on_train_begin"], [288, 4, 1, "", "on_train_end"], [288, 5, 1, "", "pattern"], [288, 5, 1, "", "scheduler"], [288, 5, 1, "", "scores"], [288, 5, 1, "", "start_step"], [288, 5, 1, "", "target_sparsity_ratio"], [288, 5, 1, "", "update_frequency_on_step"], [288, 4, 1, "", "update_scores"]], "neural_compressor.experimental.pytorch_pruner.pruner.SnipMomentumPruner": [[288, 4, 1, "", "on_after_optimizer_step"]], "neural_compressor.experimental.pytorch_pruner.pruner.SnipPruner": [[288, 4, 1, "", "on_after_optimizer_step"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[289, 2, 1, "", "Pruning"]], "neural_compressor.experimental.pytorch_pruner.pruning.Pruning": [[289, 5, 1, "", "config_file_path"], [289, 4, 1, "", "get_sparsity_ratio"], [289, 5, 1, "", "model"], [289, 4, 1, "", "on_after_eval"], [289, 4, 1, "", "on_after_optimizer_step"], [289, 4, 1, "", "on_before_eval"], [289, 4, 1, "", "on_before_optimizer_step"], [289, 4, 1, "", "on_epoch_begin"], [289, 4, 1, "", "on_epoch_end"], [289, 4, 1, "", "on_step_begin"], [289, 4, 1, "", "on_step_end"], [289, 4, 1, "", "on_train_begin"], [289, 4, 1, "", "on_train_end"], [289, 4, 1, "", "prepare"], [289, 5, 1, "", "pruner_info"], [289, 5, 1, "", "pruners"], [289, 4, 1, "", "update_items_for_all_pruners"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[290, 2, 1, "", "IterativeScheduler"], [290, 2, 1, "", "OneshotScheduler"], [290, 2, 1, "", "Scheduler"], [290, 1, 1, "", "get_scheduler"], [290, 1, 1, "", "register_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler.IterativeScheduler": [[290, 4, 1, "", "update_sparsity_ratio"]], "neural_compressor.experimental.pytorch_pruner.scheduler.OneshotScheduler": [[290, 4, 1, "", "update_sparsity_ratio"]], "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler": [[290, 5, 1, "", "config"], [290, 4, 1, "", "update_sparsity_ratio"]], "neural_compressor.experimental.quantization": [[291, 2, 1, "", "Quantization"]], "neural_compressor.experimental.quantization.Quantization": [[291, 3, 1, "", "calib_dataloader"], [291, 4, 1, "", "dataset"], [291, 4, 1, "", "distributed_execute"], [291, 4, 1, "", "execute"], [291, 3, 1, "", "metric"], [291, 3, 1, "", "model"], [291, 3, 1, "", "objective"], [291, 3, 1, "", "postprocess"], [291, 4, 1, "", "pre_process"], [291, 3, 1, "", "q_func"]], "neural_compressor.experimental.scheduler": [[292, 2, 1, "", "Scheduler"]], "neural_compressor.experimental.scheduler.Scheduler": [[292, 4, 1, "", "append"], [292, 4, 1, "", "combine"], [292, 3, 1, "", "eval_func"], [292, 3, 1, "", "model"], [292, 3, 1, "", "train_func"]], "neural_compressor.metric": [[300, 2, 1, "", "BaseMetric"], [300, 2, 1, "", "COCOmAPv2"], [300, 2, 1, "", "GeneralTopK"], [300, 2, 1, "", "METRICS"], [300, 2, 1, "", "Metric"], [300, 2, 1, "", "SquadF1"], [300, 2, 1, "", "TensorflowTopK"], [294, 0, 0, "-", "bleu"], [295, 0, 0, "-", "bleu_util"], [296, 0, 0, "-", "coco_label_map"], [297, 0, 0, "-", "coco_tools"], [298, 0, 0, "-", "evaluate_squad"], [299, 0, 0, "-", "f1"], [301, 0, 0, "-", "metric"], [300, 1, 1, "", "metric_registry"]], "neural_compressor.metric.BaseMetric": [[300, 3, 1, "", "hvd"], [300, 3, 1, "", "metric"], [300, 4, 1, "", "reset"], [300, 4, 1, "", "result"], [300, 4, 1, "", "update"]], "neural_compressor.metric.COCOmAPv2": [[300, 4, 1, "", "reset"], [300, 4, 1, "", "result"], [300, 4, 1, "", "update"]], "neural_compressor.metric.GeneralTopK": [[300, 5, 1, "", "k"], [300, 5, 1, "", "num_correct"], [300, 5, 1, "", "num_sample"], [300, 4, 1, "", "reset"], [300, 4, 1, "", "result"], [300, 4, 1, "", "update"]], "neural_compressor.metric.METRICS": [[300, 5, 1, "", "metrics"], [300, 4, 1, "", "register"]], "neural_compressor.metric.SquadF1": [[300, 4, 1, "", "reset"], [300, 4, 1, "", "result"], [300, 4, 1, "", "update"]], "neural_compressor.metric.TensorflowTopK": [[300, 5, 1, "", "k"], [300, 5, 1, "", "num_correct"], [300, 5, 1, "", "num_sample"], [300, 4, 1, "", "reset"], [300, 4, 1, "", "result"], [300, 4, 1, "", "update"]], "neural_compressor.metric.bleu": [[294, 2, 1, "", "BLEU"], [294, 2, 1, "", "UnicodeRegex"], [294, 1, 1, "", "bleu_tokenize"]], "neural_compressor.metric.bleu.BLEU": [[294, 5, 1, "", "labels"], [294, 5, 1, "", "predictions"], [294, 4, 1, "", "reset"], [294, 4, 1, "", "result"], [294, 4, 1, "", "update"]], "neural_compressor.metric.bleu.UnicodeRegex": [[294, 5, 1, "", "nondigit_punct_re"], [294, 4, 1, "", "property_chars"], [294, 5, 1, "", "punct_nondigit_re"], [294, 5, 1, "", "symbol_re"]], "neural_compressor.metric.bleu_util": [[295, 1, 1, "", "compute_bleu"]], "neural_compressor.metric.coco_tools": [[297, 2, 1, "", "COCOEvalWrapper"], [297, 2, 1, "", "COCOWrapper"], [297, 1, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [297, 1, 1, "", "ExportSingleImageDetectionMasksToCoco"], [297, 1, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.metric.coco_tools.COCOEvalWrapper": [[297, 4, 1, "", "ComputeMetrics"], [297, 4, 1, "", "GetAgnosticMode"], [297, 4, 1, "", "GetCategory"], [297, 4, 1, "", "GetCategoryIdList"], [297, 4, 1, "", "accumulate"]], "neural_compressor.metric.coco_tools.COCOWrapper": [[297, 4, 1, "", "LoadAnnotations"], [297, 5, 1, "", "dataset"], [297, 5, 1, "", "detection_type"]], "neural_compressor.metric.evaluate_squad": [[298, 1, 1, "", "evaluate"], [298, 1, 1, "", "exact_match_score"], [298, 1, 1, "", "f1_score"], [298, 1, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[299, 1, 1, "", "evaluate"], [299, 1, 1, "", "f1_score"], [299, 1, 1, "", "metric_max_over_ground_truths"], [299, 1, 1, "", "normalize_answer"]], "neural_compressor.metric.metric": [[301, 2, 1, "", "Accuracy"], [301, 2, 1, "", "BaseMetric"], [301, 2, 1, "", "COCOmAPv2"], [301, 2, 1, "", "F1"], [301, 2, 1, "", "GeneralTopK"], [301, 2, 1, "", "Loss"], [301, 2, 1, "", "MAE"], [301, 2, 1, "", "METRICS"], [301, 2, 1, "", "MSE"], [301, 2, 1, "", "MXNetMetrics"], [301, 2, 1, "", "Metric"], [301, 2, 1, "", "ONNXRTGLUE"], [301, 2, 1, "", "ONNXRTITMetrics"], [301, 2, 1, "", "ONNXRTQLMetrics"], [301, 2, 1, "", "PyTorchLoss"], [301, 2, 1, "", "PyTorchMetrics"], [301, 2, 1, "", "RMSE"], [301, 2, 1, "", "ROC"], [301, 2, 1, "", "SquadF1"], [301, 2, 1, "", "TensorflowCOCOMAP"], [301, 2, 1, "", "TensorflowMAP"], [301, 2, 1, "", "TensorflowMetrics"], [301, 2, 1, "", "TensorflowTopK"], [301, 2, 1, "", "TensorflowVOCMAP"], [301, 2, 1, "", "WrapMXNetMetric"], [301, 2, 1, "", "WrapONNXRTMetric"], [301, 2, 1, "", "WrapPyTorchMetric"], [301, 2, 1, "", "mIOU"], [301, 1, 1, "", "metric_registry"]], "neural_compressor.metric.metric.Accuracy": [[301, 5, 1, "", "label_list"], [301, 5, 1, "", "pred_list"], [301, 4, 1, "", "reset"], [301, 4, 1, "", "result"], [301, 5, 1, "", "sample"], [301, 4, 1, "", "update"]], "neural_compressor.metric.metric.BaseMetric": [[301, 3, 1, "", "hvd"], [301, 3, 1, "", "metric"], [301, 4, 1, "", "reset"], [301, 4, 1, "", "result"], [301, 4, 1, "", "update"]], "neural_compressor.metric.metric.COCOmAPv2": [[301, 4, 1, "", "reset"], [301, 4, 1, "", "result"], [301, 4, 1, "", "update"]], "neural_compressor.metric.metric.F1": [[301, 4, 1, "", "reset"], [301, 4, 1, "", "result"], [301, 4, 1, "", "update"]], "neural_compressor.metric.metric.GeneralTopK": [[301, 5, 1, "", "k"], [301, 5, 1, "", "num_correct"], [301, 5, 1, "", "num_sample"], [301, 4, 1, "", "reset"], [301, 4, 1, "", "result"], [301, 4, 1, "", "update"]], "neural_compressor.metric.metric.Loss": [[301, 4, 1, "", "reset"], [301, 4, 1, "", "result"], [301, 5, 1, "", "sample"], [301, 5, 1, "", "sum"], [301, 4, 1, "", "update"]], "neural_compressor.metric.metric.MAE": [[301, 5, 1, "", "compare_label"], [301, 5, 1, "", "label_list"], [301, 5, 1, "", "pred_list"], [301, 4, 1, "", "reset"], [301, 4, 1, "", "result"], [301, 4, 1, "", "update"]], "neural_compressor.metric.metric.METRICS": [[301, 5, 1, "", "metrics"], [301, 4, 1, "", "register"]], "neural_compressor.metric.metric.MSE": [[301, 5, 1, "", "compare_label"], [301, 5, 1, "", "label_list"], [301, 5, 1, "", "pred_list"], [301, 4, 1, "", "reset"], [301, 4, 1, "", "result"], [301, 4, 1, "", "update"]], "neural_compressor.metric.metric.MXNetMetrics": [[301, 5, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTGLUE": [[301, 4, 1, "", "reset"], [301, 4, 1, "", "result"], [301, 4, 1, "", "update"]], "neural_compressor.metric.metric.ONNXRTITMetrics": [[301, 5, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTQLMetrics": [[301, 5, 1, "", "metrics"]], "neural_compressor.metric.metric.PyTorchLoss": [[301, 4, 1, "", "compute"], [301, 4, 1, "", "reset"], [301, 4, 1, "", "update"]], "neural_compressor.metric.metric.PyTorchMetrics": [[301, 5, 1, "", "metrics"]], "neural_compressor.metric.metric.RMSE": [[301, 5, 1, "", "mse"], [301, 4, 1, "", "reset"], [301, 4, 1, "", "result"], [301, 4, 1, "", "update"]], "neural_compressor.metric.metric.ROC": [[301, 4, 1, "", "reset"], [301, 4, 1, "", "result"], [301, 4, 1, "", "update"]], "neural_compressor.metric.metric.SquadF1": [[301, 4, 1, "", "reset"], [301, 4, 1, "", "result"], [301, 4, 1, "", "update"]], "neural_compressor.metric.metric.TensorflowMAP": [[301, 4, 1, "", "reset"], [301, 4, 1, "", "result"], [301, 4, 1, "", "update"]], "neural_compressor.metric.metric.TensorflowMetrics": [[301, 5, 1, "", "metrics"]], "neural_compressor.metric.metric.TensorflowTopK": [[301, 5, 1, "", "k"], [301, 5, 1, "", "num_correct"], [301, 5, 1, "", "num_sample"], [301, 4, 1, "", "reset"], [301, 4, 1, "", "result"], [301, 4, 1, "", "update"]], "neural_compressor.metric.metric.WrapMXNetMetric": [[301, 4, 1, "", "reset"], [301, 4, 1, "", "result"], [301, 4, 1, "", "update"]], "neural_compressor.metric.metric.WrapONNXRTMetric": [[301, 4, 1, "", "reset"], [301, 4, 1, "", "result"], [301, 4, 1, "", "update"]], "neural_compressor.metric.metric.WrapPyTorchMetric": [[301, 4, 1, "", "reset"], [301, 4, 1, "", "result"], [301, 4, 1, "", "update"]], "neural_compressor.metric.metric.mIOU": [[301, 4, 1, "", "reset"], [301, 4, 1, "", "result"], [301, 4, 1, "", "update"]], "neural_compressor.mix_precision": [[302, 2, 1, "", "MixedPrecision"], [302, 1, 1, "", "fit"]], "neural_compressor.mix_precision.MixedPrecision": [[302, 3, 1, "", "eval_dataloader"], [302, 3, 1, "", "eval_func"], [302, 4, 1, "", "execute"], [302, 3, 1, "", "metric"], [302, 3, 1, "", "model"], [302, 4, 1, "", "pre_process"], [302, 3, 1, "", "precisions"]], "neural_compressor.model": [[304, 2, 1, "", "BaseModel"], [304, 2, 1, "", "Model"], [303, 0, 0, "-", "base_model"], [305, 0, 0, "-", "keras_model"], [306, 0, 0, "-", "model"], [307, 0, 0, "-", "mxnet_model"], [308, 0, 0, "-", "nets_factory"], [309, 0, 0, "-", "onnx_model"], [310, 0, 0, "-", "tensorflow_model"], [311, 0, 0, "-", "torch_model"]], "neural_compressor.model.BaseModel": [[304, 4, 1, "", "export"], [304, 4, 1, "", "framework"], [304, 3, 1, "", "graph_info"], [304, 3, 1, "", "model"], [304, 4, 1, "", "save"]], "neural_compressor.model.base_model": [[303, 2, 1, "", "BaseModel"]], "neural_compressor.model.base_model.BaseModel": [[303, 4, 1, "", "export"], [303, 4, 1, "", "framework"], [303, 3, 1, "", "graph_info"], [303, 3, 1, "", "model"], [303, 4, 1, "", "save"]], "neural_compressor.model.keras_model": [[305, 2, 1, "", "KerasModel"]], "neural_compressor.model.keras_model.KerasModel": [[305, 4, 1, "", "framework"], [305, 3, 1, "", "graph_info"], [305, 3, 1, "", "model"], [305, 3, 1, "", "q_config"], [305, 4, 1, "", "save"]], "neural_compressor.model.model": [[306, 2, 1, "", "Model"], [306, 1, 1, "", "get_model_fwk_name"]], "neural_compressor.model.mxnet_model": [[307, 2, 1, "", "MXNetModel"]], "neural_compressor.model.mxnet_model.MXNetModel": [[307, 4, 1, "", "framework"], [307, 3, 1, "", "model"], [307, 4, 1, "", "save"]], "neural_compressor.model.nets_factory": [[308, 2, 1, "", "TFSlimNetsFactory"]], "neural_compressor.model.nets_factory.TFSlimNetsFactory": [[308, 4, 1, "", "register"]], "neural_compressor.model.onnx_model": [[309, 2, 1, "", "ONNXModel"]], "neural_compressor.model.onnx_model.ONNXModel": [[309, 4, 1, "", "add_initializer"], [309, 4, 1, "", "add_initializers"], [309, 4, 1, "", "add_node"], [309, 4, 1, "", "add_nodes"], [309, 4, 1, "", "add_tensors_to_outputs"], [309, 4, 1, "", "export"], [309, 4, 1, "", "find_node_by_name"], [309, 4, 1, "", "find_nodes_by_initializer"], [309, 4, 1, "", "framework"], [309, 4, 1, "", "get_children"], [309, 4, 1, "", "get_initializer"], [309, 4, 1, "", "get_nodes_chain"], [309, 4, 1, "", "get_parent"], [309, 4, 1, "", "get_parents"], [309, 4, 1, "", "get_scale_zero"], [309, 4, 1, "", "graph"], [309, 3, 1, "", "graph_info"], [309, 4, 1, "", "initializer"], [309, 4, 1, "", "input"], [309, 3, 1, "", "input_name_to_nodes"], [309, 4, 1, "", "ir_version"], [309, 3, 1, "", "is_large_model"], [309, 4, 1, "", "match_first_parent"], [309, 4, 1, "", "match_parent"], [309, 4, 1, "", "match_parent_path"], [309, 3, 1, "", "model"], [309, 3, 1, "", "model_path"], [309, 4, 1, "", "nodes"], [309, 4, 1, "", "opset_import"], [309, 4, 1, "", "output"], [309, 3, 1, "", "output_name_to_node"], [309, 3, 1, "", "q_config"], [309, 4, 1, "", "remove_initializer"], [309, 4, 1, "", "remove_initializers"], [309, 4, 1, "", "remove_node"], [309, 4, 1, "", "remove_nodes"], [309, 4, 1, "", "remove_tensors_from_outputs"], [309, 4, 1, "", "remove_unused_constant"], [309, 4, 1, "", "replace_input_of_all_nodes"], [309, 4, 1, "", "replace_node_input"], [309, 4, 1, "", "replace_node_output"], [309, 4, 1, "", "replace_output_of_all_nodes"], [309, 4, 1, "", "save"], [309, 4, 1, "", "save_model_to_file"], [309, 4, 1, "", "set_initializer"], [309, 4, 1, "", "topological_sort"], [309, 4, 1, "", "update"]], "neural_compressor.model.tensorflow_model": [[310, 2, 1, "", "TensorflowBaseModel"], [310, 2, 1, "", "TensorflowCheckpointModel"], [310, 2, 1, "", "TensorflowModel"], [310, 2, 1, "", "TensorflowQATModel"], [310, 2, 1, "", "TensorflowSavedModelModel"], [310, 1, 1, "", "checkpoint_session"], [310, 1, 1, "", "estimator_session"], [310, 1, 1, "", "frozen_pb_session"], [310, 1, 1, "", "get_model_type"], [310, 1, 1, "", "graph_def_session"], [310, 1, 1, "", "graph_session"], [310, 1, 1, "", "keras_session"], [310, 1, 1, "", "load_saved_model"], [310, 1, 1, "", "saved_model_session"], [310, 1, 1, "", "slim_session"], [310, 1, 1, "", "validate_and_inference_input_output"], [310, 1, 1, "", "validate_graph_node"]], "neural_compressor.model.tensorflow_model.TensorflowBaseModel": [[310, 4, 1, "", "export"], [310, 4, 1, "", "framework"], [310, 3, 1, "", "graph"], [310, 3, 1, "", "graph_def"], [310, 3, 1, "", "graph_info"], [310, 3, 1, "", "input_node_names"], [310, 3, 1, "", "input_tensor"], [310, 3, 1, "", "input_tensor_names"], [310, 3, 1, "", "iter_op"], [310, 3, 1, "", "model"], [310, 3, 1, "", "model_type"], [310, 3, 1, "", "name"], [310, 3, 1, "", "output_node_names"], [310, 3, 1, "", "output_tensor"], [310, 3, 1, "", "output_tensor_names"], [310, 3, 1, "", "q_config"], [310, 4, 1, "", "save"], [310, 3, 1, "", "sess"], [310, 3, 1, "", "weights"], [310, 3, 1, "", "workspace_path"]], "neural_compressor.model.tensorflow_model.TensorflowCheckpointModel": [[310, 3, 1, "", "graph_def"], [310, 3, 1, "", "model"]], "neural_compressor.model.tensorflow_model.TensorflowQATModel": [[310, 3, 1, "", "frozen_graph_def"], [310, 3, 1, "", "model"], [310, 4, 1, "", "save"]], "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel": [[310, 4, 1, "", "build_saved_model"], [310, 4, 1, "", "get_all_weight_names"], [310, 4, 1, "", "get_weight"], [310, 3, 1, "", "model"], [310, 4, 1, "", "report_sparsity"], [310, 4, 1, "", "save"], [310, 4, 1, "", "update_weights"]], "neural_compressor.model.torch_model": [[311, 2, 1, "", "IPEXModel"], [311, 2, 1, "", "PyTorchBaseModel"], [311, 2, 1, "", "PyTorchFXModel"], [311, 2, 1, "", "PyTorchModel"]], "neural_compressor.model.torch_model.IPEXModel": [[311, 4, 1, "", "save"], [311, 3, 1, "", "workspace_path"]], "neural_compressor.model.torch_model.PyTorchBaseModel": [[311, 4, 1, "", "forward"], [311, 3, 1, "", "fp32_model"], [311, 4, 1, "", "framework"], [311, 4, 1, "", "generate_forward_pre_hook"], [311, 4, 1, "", "get_all_weight_names"], [311, 4, 1, "", "get_gradient"], [311, 4, 1, "", "get_inputs"], [311, 4, 1, "", "get_weight"], [311, 3, 1, "", "model"], [311, 4, 1, "", "prune_weights_"], [311, 4, 1, "", "register_forward_pre_hook"], [311, 4, 1, "", "remove_hooks"], [311, 4, 1, "", "report_sparsity"], [311, 4, 1, "", "update_gradient"], [311, 4, 1, "", "update_weights"]], "neural_compressor.model.torch_model.PyTorchModel": [[311, 4, 1, "", "export"], [311, 4, 1, "", "export_to_bf16_onnx"], [311, 4, 1, "", "export_to_fp32_onnx"], [311, 4, 1, "", "export_to_int8_onnx"], [311, 4, 1, "", "export_to_jit"], [311, 3, 1, "", "graph_info"], [311, 4, 1, "", "load_quantized_state_dict"], [311, 4, 1, "", "quantized_state_dict"], [311, 4, 1, "", "save"], [311, 3, 1, "", "workspace_path"]], "neural_compressor.objective": [[312, 2, 1, "", "Accuracy"], [312, 2, 1, "", "Footprint"], [312, 2, 1, "", "ModelSize"], [312, 2, 1, "", "MultiObjective"], [312, 2, 1, "", "Objective"], [312, 2, 1, "", "Performance"], [312, 1, 1, "", "objective_custom_registry"], [312, 1, 1, "", "objective_registry"]], "neural_compressor.objective.Accuracy": [[312, 4, 1, "", "end"], [312, 4, 1, "", "start"]], "neural_compressor.objective.Footprint": [[312, 4, 1, "", "end"], [312, 4, 1, "", "start"]], "neural_compressor.objective.ModelSize": [[312, 4, 1, "", "end"], [312, 4, 1, "", "start"]], "neural_compressor.objective.MultiObjective": [[312, 4, 1, "", "accuracy_meet_req"], [312, 4, 1, "", "accuracy_meets"], [312, 3, 1, "", "accuracy_target"], [312, 3, 1, "", "baseline"], [312, 4, 1, "", "best_result"], [312, 4, 1, "", "compare"], [312, 4, 1, "", "end"], [312, 4, 1, "", "evaluate"], [312, 4, 1, "", "reset"], [312, 4, 1, "", "result"], [312, 4, 1, "", "set_model"], [312, 4, 1, "", "start"]], "neural_compressor.objective.Objective": [[312, 4, 1, "", "end"], [312, 3, 1, "", "model"], [312, 4, 1, "", "reset"], [312, 4, 1, "", "result"], [312, 4, 1, "", "result_list"], [312, 4, 1, "", "start"]], "neural_compressor.objective.Performance": [[312, 4, 1, "", "end"], [312, 4, 1, "", "start"]], "neural_compressor.quantization": [[313, 2, 1, "", "PostTrainingQuant"], [313, 1, 1, "", "fit"]], "neural_compressor.quantization.PostTrainingQuant": [[313, 3, 1, "", "calib_dataloader"], [313, 3, 1, "", "calib_func"], [313, 3, 1, "", "eval_dataloader"], [313, 3, 1, "", "eval_func"], [313, 4, 1, "", "execute"], [313, 3, 1, "", "metric"], [313, 3, 1, "", "model"], [313, 4, 1, "", "pre_proccess"]], "neural_compressor.strategy": [[314, 0, 0, "-", "auto_mixed_precision"], [315, 0, 0, "-", "basic"], [316, 0, 0, "-", "bayesian"], [317, 0, 0, "-", "conservative"], [318, 0, 0, "-", "exhaustive"], [319, 0, 0, "-", "hawq_v2"], [321, 0, 0, "-", "mse"], [322, 0, 0, "-", "mse_v2"], [323, 0, 0, "-", "random"], [324, 0, 0, "-", "strategy"], [326, 0, 0, "-", "utils"]], "neural_compressor.strategy.auto_mixed_precision": [[314, 2, 1, "", "AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy": [[314, 4, 1, "", "next_tune_cfg"], [314, 4, 1, "", "traverse"]], "neural_compressor.strategy.basic": [[315, 2, 1, "", "BasicTuneStrategy"]], "neural_compressor.strategy.basic.BasicTuneStrategy": [[315, 4, 1, "", "distributed_next_tune_cfg_lst"], [315, 4, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.bayesian": [[316, 2, 1, "", "BayesianOptimization"], [316, 2, 1, "", "BayesianTuneStrategy"], [316, 2, 1, "", "TargetSpace"], [316, 1, 1, "", "acq_max"]], "neural_compressor.strategy.bayesian.BayesianOptimization": [[316, 4, 1, "", "gen_next_params"], [316, 3, 1, "", "max"], [316, 3, 1, "", "res"], [316, 3, 1, "", "space"], [316, 4, 1, "", "suggest"]], "neural_compressor.strategy.bayesian.BayesianTuneStrategy": [[316, 4, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.bayesian.TargetSpace": [[316, 4, 1, "", "array_to_params"], [316, 3, 1, "", "bounds"], [316, 3, 1, "", "dim"], [316, 3, 1, "", "empty"], [316, 4, 1, "", "get_target"], [316, 3, 1, "", "keys"], [316, 4, 1, "", "max"], [316, 3, 1, "", "params"], [316, 4, 1, "", "params_to_array"], [316, 4, 1, "", "random_sample"], [316, 4, 1, "", "register"], [316, 4, 1, "", "res"], [316, 3, 1, "", "target"]], "neural_compressor.strategy.conservative": [[317, 2, 1, "", "ConservativeTuneStrategy"]], "neural_compressor.strategy.conservative.ConservativeTuneStrategy": [[317, 4, 1, "", "next_tune_cfg"], [317, 4, 1, "", "stop"], [317, 4, 1, "", "traverse"]], "neural_compressor.strategy.exhaustive": [[318, 2, 1, "", "ExhaustiveTuneStrategy"]], "neural_compressor.strategy.exhaustive.ExhaustiveTuneStrategy": [[318, 4, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.hawq_v2": [[319, 2, 1, "", "HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.hawq_v2.HAWQ_V2TuneStrategy": [[319, 4, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.mse": [[321, 2, 1, "", "MSETuneStrategy"]], "neural_compressor.strategy.mse.MSETuneStrategy": [[321, 4, 1, "", "mse_impact_lst"], [321, 4, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.mse_v2": [[322, 2, 1, "", "MSE_V2TuneStrategy"]], "neural_compressor.strategy.mse_v2.MSE_V2TuneStrategy": [[322, 4, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.random": [[323, 2, 1, "", "RandomTuneStrategy"]], "neural_compressor.strategy.random.RandomTuneStrategy": [[323, 4, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.strategy": [[324, 2, 1, "", "TuneStrategy"], [324, 1, 1, "", "strategy_registry"]], "neural_compressor.strategy.strategy.TuneStrategy": [[324, 4, 1, "", "apply_all_tuning_recipes"], [324, 4, 1, "", "apply_recipe_one_by_one"], [324, 4, 1, "", "deploy_config"], [324, 4, 1, "", "distributed_next_tune_cfg_lst"], [324, 4, 1, "", "distributed_traverse"], [324, 3, 1, "", "evaluation_result"], [324, 4, 1, "", "initial_best_acc"], [324, 4, 1, "", "initial_tuning_cfg"], [324, 4, 1, "", "master_worker_handle"], [324, 4, 1, "", "meet_acc_req"], [324, 4, 1, "", "next_tune_cfg"], [324, 4, 1, "", "set_param_for_post_quantization_algos"], [324, 4, 1, "", "set_param_for_pre_quantization_algos"], [324, 4, 1, "", "set_q_func"], [324, 4, 1, "", "set_tuning_space"], [324, 4, 1, "", "setup_resume"], [324, 4, 1, "", "show_baseline_info"], [324, 4, 1, "", "slave_worker_handle"], [324, 4, 1, "", "stop"], [324, 4, 1, "", "traverse"], [324, 4, 1, "", "update_best_op_tuning_cfg"]], "neural_compressor.strategy.utils": [[326, 2, 1, "", "FallbackTuningSampler"], [326, 2, 1, "", "OpTuningConfig"], [326, 2, 1, "", "OpTypeWiseTuningSampler"], [326, 2, 1, "", "OpWiseTuningSampler"], [326, 2, 1, "", "TuningItem"], [326, 2, 1, "", "TuningSampler"], [326, 2, 1, "", "TuningSpace"], [325, 0, 0, "-", "constant"], [327, 0, 0, "-", "tuning_sampler"], [328, 0, 0, "-", "tuning_space"], [329, 0, 0, "-", "tuning_structs"], [330, 0, 0, "-", "utility"]], "neural_compressor.strategy.utils.OpTuningConfig": [[326, 4, 1, "", "from_state"], [326, 4, 1, "", "get_state"]], "neural_compressor.strategy.utils.OpWiseTuningSampler": [[326, 4, 1, "", "get_opwise_candidate"]], "neural_compressor.strategy.utils.TuningItem": [[326, 4, 1, "", "append"], [326, 4, 1, "", "get_details"], [326, 4, 1, "", "get_option_by_name"], [326, 4, 1, "", "get_options_name"], [326, 3, 1, "", "options"], [326, 4, 1, "", "remove"]], "neural_compressor.strategy.utils.TuningSpace": [[326, 4, 1, "", "get_default_config"], [326, 4, 1, "", "get_default_full_path"], [326, 4, 1, "", "get_item_by_path"], [326, 4, 1, "", "get_op_default_path_by_pattern"], [326, 4, 1, "", "query_item_option"], [326, 4, 1, "", "query_items_by_quant_mode"], [326, 4, 1, "", "query_quant_mode_item_by_full_path"]], "neural_compressor.strategy.utils.tuning_sampler": [[327, 2, 1, "", "FallbackTuningSampler"], [327, 2, 1, "", "ModelWiseTuningSampler"], [327, 2, 1, "", "OpTypeWiseTuningSampler"], [327, 2, 1, "", "OpWiseTuningSampler"], [327, 2, 1, "", "SmoothQuantSampler"], [327, 2, 1, "", "TuningOrder"], [327, 2, 1, "", "TuningSampler"], [327, 2, 1, "", "TuningSamplerRegistry"]], "neural_compressor.strategy.utils.tuning_sampler.OpWiseTuningSampler": [[327, 4, 1, "", "get_opwise_candidate"]], "neural_compressor.strategy.utils.tuning_sampler.TuningSamplerRegistry": [[327, 4, 1, "", "register"]], "neural_compressor.strategy.utils.tuning_space": [[328, 2, 1, "", "TuningItem"], [328, 2, 1, "", "TuningSpace"], [328, 1, 1, "", "get_op_mode_by_query_order"], [328, 1, 1, "", "initial_tuning_cfg_with_quant_mode"], [328, 1, 1, "", "pattern_to_internal"], [328, 1, 1, "", "pattern_to_path"], [328, 1, 1, "", "quant_mode_from_pattern"]], "neural_compressor.strategy.utils.tuning_space.TuningItem": [[328, 4, 1, "", "append"], [328, 4, 1, "", "get_details"], [328, 4, 1, "", "get_option_by_name"], [328, 4, 1, "", "get_options_name"], [328, 3, 1, "", "options"], [328, 4, 1, "", "remove"]], "neural_compressor.strategy.utils.tuning_space.TuningSpace": [[328, 4, 1, "", "get_default_config"], [328, 4, 1, "", "get_default_full_path"], [328, 4, 1, "", "get_item_by_path"], [328, 4, 1, "", "get_op_default_path_by_pattern"], [328, 4, 1, "", "query_item_option"], [328, 4, 1, "", "query_items_by_quant_mode"], [328, 4, 1, "", "query_quant_mode_item_by_full_path"]], "neural_compressor.strategy.utils.tuning_structs": [[329, 2, 1, "", "OpTuningConfig"]], "neural_compressor.strategy.utils.tuning_structs.OpTuningConfig": [[329, 4, 1, "", "from_state"], [329, 4, 1, "", "get_state"]], "neural_compressor.strategy.utils.utility": [[330, 2, 1, "", "OrderedDefaultDict"], [330, 1, 1, "", "extract_data_type"], [330, 1, 1, "", "get_adaptor_name"], [330, 1, 1, "", "reverted_data_type"]], "neural_compressor.training": [[331, 2, 1, "", "CallBacks"], [331, 2, 1, "", "CompressionManager"], [331, 1, 1, "", "fit"], [331, 1, 1, "", "prepare_compression"]], "neural_compressor.training.CallBacks": [[331, 4, 1, "", "on_after_compute_loss"], [331, 4, 1, "", "on_after_eval"], [331, 4, 1, "", "on_after_optimizer_step"], [331, 4, 1, "", "on_before_eval"], [331, 4, 1, "", "on_before_optimizer_step"], [331, 4, 1, "", "on_epoch_begin"], [331, 4, 1, "", "on_epoch_end"], [331, 4, 1, "", "on_step_begin"], [331, 4, 1, "", "on_step_end"], [331, 4, 1, "", "on_train_begin"], [331, 4, 1, "", "on_train_end"]], "neural_compressor.training.CompressionManager": [[331, 3, 1, "", "eval_dataloader"], [331, 3, 1, "", "eval_func"], [331, 4, 1, "", "export"], [331, 4, 1, "", "fit"], [331, 3, 1, "", "metric"], [331, 4, 1, "", "save"], [331, 3, 1, "", "train_func"]], "neural_compressor.utils": [[335, 2, 1, "", "LayerHistogramCollector"], [332, 0, 0, "-", "collect_layer_histogram"], [333, 0, 0, "-", "constant"], [334, 0, 0, "-", "create_obj_from_config"], [335, 1, 1, "", "debug"], [335, 1, 1, "", "error"], [335, 1, 1, "", "fatal"], [335, 1, 1, "", "info"], [336, 0, 0, "-", "kl_divergence"], [337, 0, 0, "-", "load_huggingface"], [335, 1, 1, "", "log"], [338, 0, 0, "-", "logger"], [339, 0, 0, "-", "options"], [340, 0, 0, "-", "pytorch"], [335, 1, 1, "", "set_random_seed"], [341, 0, 0, "-", "utility"], [335, 1, 1, "", "warn"], [335, 1, 1, "", "warning"]], "neural_compressor.utils.LayerHistogramCollector": [[335, 4, 1, "", "collect"]], "neural_compressor.utils.collect_layer_histogram": [[332, 2, 1, "", "LayerHistogramCollector"]], "neural_compressor.utils.collect_layer_histogram.LayerHistogramCollector": [[332, 4, 1, "", "collect"]], "neural_compressor.utils.create_obj_from_config": [[334, 1, 1, "", "create_dataloader"], [334, 1, 1, "", "create_dataset"], [334, 1, 1, "", "create_eval_func"], [334, 1, 1, "", "create_train_func"], [334, 1, 1, "", "get_algorithm"], [334, 1, 1, "", "get_func_from_config"], [334, 1, 1, "", "get_metrics"], [334, 1, 1, "", "get_postprocess"], [334, 1, 1, "", "get_preprocess"]], "neural_compressor.utils.kl_divergence": [[336, 2, 1, "", "KL_Divergence"]], "neural_compressor.utils.kl_divergence.KL_Divergence": [[336, 4, 1, "", "expand_quantized_bins"], [336, 4, 1, "", "get_threshold"], [336, 4, 1, "", "safe_entropy"]], "neural_compressor.utils.load_huggingface": [[337, 2, 1, "", "OptimizedModel"], [337, 1, 1, "", "save_for_huggingface_upstream"]], "neural_compressor.utils.load_huggingface.OptimizedModel": [[337, 4, 1, "", "from_pretrained"]], "neural_compressor.utils.logger": [[338, 2, 1, "", "Logger"], [338, 1, 1, "", "debug"], [338, 1, 1, "", "error"], [338, 1, 1, "", "fatal"], [338, 1, 1, "", "info"], [338, 1, 1, "", "log"], [338, 1, 1, "", "warn"], [338, 1, 1, "", "warning"]], "neural_compressor.utils.logger.Logger": [[338, 4, 1, "", "get_logger"]], "neural_compressor.utils.options": [[339, 2, 1, "", "onnxrt"]], "neural_compressor.utils.pytorch": [[340, 1, 1, "", "load"]], "neural_compressor.utils.utility": [[341, 2, 1, "", "CaptureOutputToFile"], [341, 2, 1, "", "CpuInfo"], [341, 1, 1, "", "Dequantize"], [341, 1, 1, "", "DequantizeWeight"], [341, 2, 1, "", "GLOBAL_STATE"], [341, 2, 1, "", "LazyImport"], [341, 2, 1, "", "MODE"], [341, 2, 1, "", "Statistics"], [341, 1, 1, "", "combine_histogram"], [341, 1, 1, "", "compute_sparsity"], [341, 1, 1, "", "dump_data_to_local"], [341, 1, 1, "", "dump_elapsed_time"], [341, 1, 1, "", "equal_dicts"], [341, 1, 1, "", "fault_tolerant_file"], [341, 1, 1, "", "get_all_fp32_data"], [341, 1, 1, "", "get_size"], [341, 1, 1, "", "get_tensor_histogram"], [341, 1, 1, "", "get_tuning_history"], [341, 1, 1, "", "load_data_from_pkl"], [341, 1, 1, "", "recover"], [341, 1, 1, "", "set_random_seed"], [341, 1, 1, "", "set_resume_from"], [341, 1, 1, "", "set_tensorboard"], [341, 1, 1, "", "set_workspace"], [341, 1, 1, "", "show_memory_info"], [341, 1, 1, "", "singleton"], [341, 1, 1, "", "str2array"], [341, 1, 1, "", "time_limit"], [341, 1, 1, "", "version1_eq_version2"], [341, 1, 1, "", "version1_gt_version2"], [341, 1, 1, "", "version1_gte_version2"], [341, 1, 1, "", "version1_lt_version2"], [341, 1, 1, "", "version1_lte_version2"]], "neural_compressor.utils.utility.CpuInfo": [[341, 3, 1, "", "bf16"], [341, 3, 1, "", "cores_per_socket"], [341, 4, 1, "", "get_number_of_sockets"], [341, 3, 1, "", "vnni"]], "neural_compressor.utils.utility.Statistics": [[341, 4, 1, "", "print_stat"]], "neural_compressor.ux": [[417, 0, 0, "-", "components"], [476, 0, 0, "-", "inc_bench"], [485, 0, 0, "-", "utils"], [511, 0, 0, "-", "web"]], "neural_compressor.ux.components": [[345, 0, 0, "-", "benchmark"], [349, 0, 0, "-", "config_generator"], [357, 0, 0, "-", "configuration_wizard"], [393, 0, 0, "-", "db_manager"], [398, 0, 0, "-", "diagnosis"], [406, 0, 0, "-", "file_browser"], [412, 0, 0, "-", "graph"], [418, 0, 0, "-", "jobs_management"], [422, 0, 0, "-", "manage_workspace"], [424, 0, 0, "-", "model"], [443, 0, 0, "-", "model_zoo"], [445, 0, 0, "-", "names_mapper"], [452, 0, 0, "-", "optimization"], [468, 0, 0, "-", "profiling"]], "neural_compressor.ux.components.benchmark": [[345, 2, 1, "", "Benchmarks"], [342, 0, 0, "-", "benchmark"], [343, 0, 0, "-", "benchmark_model"], [344, 0, 0, "-", "execute_benchmark"]], "neural_compressor.ux.components.benchmark.benchmark": [[342, 2, 1, "", "Benchmark"], [342, 2, 1, "", "DataloaderInterface"]], "neural_compressor.ux.components.benchmark.benchmark.Benchmark": [[342, 3, 1, "", "config_filename"], [342, 3, 1, "", "configuration_data"], [342, 4, 1, "", "execute"], [342, 4, 1, "", "generate_config"], [342, 3, 1, "", "workdir"]], "neural_compressor.ux.components.benchmark.benchmark_model": [[343, 1, 1, "", "benchmark_model"], [343, 1, 1, "", "parse_args"], [343, 1, 1, "", "set_eager_execution"]], "neural_compressor.ux.components.benchmark.execute_benchmark": [[344, 1, 1, "", "benchmark_result_update"], [344, 1, 1, "", "benchmark_result_update_pytorch_script"], [344, 1, 1, "", "execute_benchmark"], [344, 1, 1, "", "execute_real_benchmark"], [344, 1, 1, "", "pytorch_script_bench_optimizations"], [344, 1, 1, "", "pytorch_script_bench_original_model"]], "neural_compressor.ux.components.config_generator": [[346, 0, 0, "-", "benchmark_config_generator"], [347, 0, 0, "-", "config_generator"], [348, 0, 0, "-", "graph_optimization_config_generator"], [350, 0, 0, "-", "mixed_precision_config_generator"], [351, 0, 0, "-", "profiling_config_generator"], [352, 0, 0, "-", "pruning_config_generator"], [353, 0, 0, "-", "quantization_config_generator"]], "neural_compressor.ux.components.config_generator.benchmark_config_generator": [[346, 2, 1, "", "BenchmarkConfigGenerator"]], "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator": [[346, 4, 1, "", "generate"], [346, 4, 1, "", "generate_accuracy_config"], [346, 4, 1, "", "generate_evaluation_config"], [346, 4, 1, "", "generate_performance_config"]], "neural_compressor.ux.components.config_generator.config_generator": [[347, 2, 1, "", "ConfigGenerator"]], "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator": [[347, 4, 1, "", "generate"], [347, 4, 1, "", "generate_dataloader_config"], [347, 4, 1, "", "generate_model_config"], [347, 4, 1, "", "get_predefined_config_path"]], "neural_compressor.ux.components.config_generator.graph_optimization_config_generator": [[348, 2, 1, "", "GraphOptimizationConfigGenerator"]], "neural_compressor.ux.components.config_generator.graph_optimization_config_generator.GraphOptimizationConfigGenerator": [[348, 4, 1, "", "generate"], [348, 4, 1, "", "generate_evaluation_config"], [348, 4, 1, "", "generate_graph_optimization_config"]], "neural_compressor.ux.components.config_generator.mixed_precision_config_generator": [[350, 2, 1, "", "MixedPrecisionConfigGenerator"]], "neural_compressor.ux.components.config_generator.mixed_precision_config_generator.MixedPrecisionConfigGenerator": [[350, 4, 1, "", "generate"], [350, 4, 1, "", "generate_evaluation_config"], [350, 4, 1, "", "generate_mixed_precision_config"]], "neural_compressor.ux.components.config_generator.profiling_config_generator": [[351, 2, 1, "", "ProfilingConfigGenerator"]], "neural_compressor.ux.components.config_generator.profiling_config_generator.ProfilingConfigGenerator": [[351, 4, 1, "", "generate"]], "neural_compressor.ux.components.config_generator.pruning_config_generator": [[352, 2, 1, "", "PruningConfigGenerator"]], "neural_compressor.ux.components.config_generator.pruning_config_generator.PruningConfigGenerator": [[352, 4, 1, "", "generate"], [352, 4, 1, "", "generate_evaluation_config"], [352, 4, 1, "", "generate_pruning_config"]], "neural_compressor.ux.components.config_generator.quantization_config_generator": [[353, 2, 1, "", "QuantizationConfigGenerator"]], "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator": [[353, 4, 1, "", "generate"], [353, 4, 1, "", "generate_evaluation_config"], [353, 4, 1, "", "generate_quantization_config"], [353, 4, 1, "", "generate_tuning_config"]], "neural_compressor.ux.components.configuration_wizard": [[354, 0, 0, "-", "configuration_parser"], [355, 0, 0, "-", "get_boundary_nodes"], [356, 0, 0, "-", "get_configuration"], [358, 0, 0, "-", "params_feeder"], [359, 0, 0, "-", "pruning_config_parser"]], "neural_compressor.ux.components.configuration_wizard.configuration_parser": [[354, 2, 1, "", "ConfigurationParser"], [354, 1, 1, "", "normalize_string_list"], [354, 1, 1, "", "parse_list_value"], [354, 1, 1, "", "parse_multidim_list"]], "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser": [[354, 4, 1, "", "get_param_type"], [354, 4, 1, "", "parse"], [354, 4, 1, "", "parse_dataloader"], [354, 4, 1, "", "parse_evaluation_data"], [354, 4, 1, "", "parse_metric"], [354, 4, 1, "", "parse_transforms"], [354, 4, 1, "", "parse_value"]], "neural_compressor.ux.components.configuration_wizard.get_boundary_nodes": [[355, 1, 1, "", "get_boundary_nodes"]], "neural_compressor.ux.components.configuration_wizard.get_configuration": [[356, 1, 1, "", "get_predefined_configuration"], [356, 1, 1, "", "update_config_to_machine_specification"]], "neural_compressor.ux.components.configuration_wizard.params_feeder": [[358, 2, 1, "", "Feeder"], [358, 1, 1, "", "get_possible_values"]], "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder": [[358, 4, 1, "", "feed"], [358, 4, 1, "", "get_dataloaders"], [358, 4, 1, "", "get_domains"], [358, 4, 1, "", "get_frameworks"], [358, 4, 1, "", "get_metrics"], [358, 4, 1, "", "get_models"], [358, 4, 1, "", "get_objectives"], [358, 4, 1, "", "get_precisions"], [358, 4, 1, "", "get_quantization_approaches"], [358, 4, 1, "", "get_strategies"], [358, 4, 1, "", "get_transforms"]], "neural_compressor.ux.components.configuration_wizard.pruning_config_parser": [[359, 2, 1, "", "PruningConfigParser"]], "neural_compressor.ux.components.configuration_wizard.pruning_config_parser.PruningConfigParser": [[359, 4, 1, "", "generate_tree"], [359, 4, 1, "", "parse"], [359, 4, 1, "", "parse_entry"]], "neural_compressor.ux.components.db_manager": [[393, 2, 1, "", "DBManager"], [360, 0, 0, "-", "db_manager"], [369, 0, 0, "-", "db_models"], [388, 0, 0, "-", "db_operations"], [394, 0, 0, "-", "params_interfaces"], [395, 0, 0, "-", "utils"]], "neural_compressor.ux.components.db_manager.DBManager": [[393, 4, 1, "", "create_all"], [393, 4, 1, "", "create_sqlalchemy_engine"], [393, 3, 1, "", "engine"], [393, 4, 1, "", "initialize_database"]], "neural_compressor.ux.components.db_manager.db_manager": [[360, 2, 1, "", "DBManager"]], "neural_compressor.ux.components.db_manager.db_manager.DBManager": [[360, 4, 1, "", "create_all"], [360, 4, 1, "", "create_sqlalchemy_engine"], [360, 3, 1, "", "engine"], [360, 4, 1, "", "initialize_database"]], "neural_compressor.ux.components.db_manager.db_models": [[361, 0, 0, "-", "benchmark"], [362, 0, 0, "-", "benchmark_result"], [363, 0, 0, "-", "dataloader"], [364, 0, 0, "-", "dataset"], [365, 0, 0, "-", "domain"], [366, 0, 0, "-", "domain_flavour"], [367, 0, 0, "-", "example"], [368, 0, 0, "-", "framework"], [370, 0, 0, "-", "metric"], [371, 0, 0, "-", "model"], [372, 0, 0, "-", "optimization"], [373, 0, 0, "-", "optimization_type"], [374, 0, 0, "-", "precision"], [375, 0, 0, "-", "profiling"], [376, 0, 0, "-", "profiling_result"], [377, 0, 0, "-", "project"], [378, 0, 0, "-", "pruning_details"], [379, 0, 0, "-", "transform"], [380, 0, 0, "-", "tuning_details"], [381, 0, 0, "-", "tuning_history"]], "neural_compressor.ux.components.db_manager.db_models.benchmark": [[361, 2, 1, "", "Benchmark"]], "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark": [[361, 4, 1, "", "add"], [361, 4, 1, "", "build_info"], [361, 4, 1, "", "clean_status"], [361, 4, 1, "", "delete_benchmark"], [361, 4, 1, "", "details"], [361, 4, 1, "", "list"], [361, 4, 1, "", "update_batch_size"], [361, 4, 1, "", "update_config_path"], [361, 4, 1, "", "update_cores_per_instance"], [361, 4, 1, "", "update_dataset"], [361, 4, 1, "", "update_duration"], [361, 4, 1, "", "update_execution_command"], [361, 4, 1, "", "update_log_path"], [361, 4, 1, "", "update_mode"], [361, 4, 1, "", "update_number_of_instance"], [361, 4, 1, "", "update_status"]], "neural_compressor.ux.components.db_manager.db_models.benchmark_result": [[362, 2, 1, "", "BenchmarkResult"]], "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult": [[362, 4, 1, "", "add"], [362, 4, 1, "", "build_info"], [362, 4, 1, "", "update_accuracy"], [362, 4, 1, "", "update_performance"]], "neural_compressor.ux.components.db_manager.db_models.dataloader": [[363, 2, 1, "", "Dataloader"], [363, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader": [[363, 4, 1, "", "list"], [363, 4, 1, "", "list_by_framework"], [363, 4, 1, "", "query_to_list"], [363, 4, 1, "", "update_params"]], "neural_compressor.ux.components.db_manager.db_models.dataset": [[364, 2, 1, "", "Dataset"]], "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset": [[364, 4, 1, "", "add"], [364, 4, 1, "", "build_info"], [364, 4, 1, "", "delete_dataset"], [364, 4, 1, "", "details"], [364, 4, 1, "", "list"], [364, 4, 1, "", "update_template_path"]], "neural_compressor.ux.components.db_manager.db_models.domain": [[365, 2, 1, "", "Domain"], [365, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.domain.Domain": [[365, 4, 1, "", "get_domain_id"], [365, 4, 1, "", "list"]], "neural_compressor.ux.components.db_manager.db_models.domain_flavour": [[366, 2, 1, "", "DomainFlavour"], [366, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.domain_flavour.DomainFlavour": [[366, 4, 1, "", "get_domain_flavour_id"], [366, 4, 1, "", "list"]], "neural_compressor.ux.components.db_manager.db_models.example": [[367, 2, 1, "", "Example"]], "neural_compressor.ux.components.db_manager.db_models.framework": [[368, 2, 1, "", "Framework"], [368, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.framework.Framework": [[368, 4, 1, "", "get_framework_id"]], "neural_compressor.ux.components.db_manager.db_models.metric": [[370, 2, 1, "", "Metric"], [370, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.metric.Metric": [[370, 4, 1, "", "list"], [370, 4, 1, "", "list_by_framework"], [370, 4, 1, "", "query_to_list"]], "neural_compressor.ux.components.db_manager.db_models.model": [[371, 2, 1, "", "Model"]], "neural_compressor.ux.components.db_manager.db_models.model.Model": [[371, 4, 1, "", "add"], [371, 4, 1, "", "build_info"], [371, 4, 1, "", "delete_model"], [371, 4, 1, "", "details"], [371, 4, 1, "", "list"]], "neural_compressor.ux.components.db_manager.db_models.optimization": [[372, 2, 1, "", "Optimization"]], "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization": [[372, 4, 1, "", "add"], [372, 4, 1, "", "build_info"], [372, 4, 1, "", "clean_status"], [372, 4, 1, "", "delete_optimization"], [372, 4, 1, "", "details"], [372, 4, 1, "", "get_optimization_by_project_and_model"], [372, 4, 1, "", "get_pinned_benchmarks"], [372, 4, 1, "", "list"], [372, 4, 1, "", "pin_accuracy_benchmark"], [372, 4, 1, "", "pin_performance_benchmark"], [372, 4, 1, "", "unpin_benchmark"], [372, 4, 1, "", "update_batch_size"], [372, 4, 1, "", "update_config_path"], [372, 4, 1, "", "update_dataset"], [372, 4, 1, "", "update_duration"], [372, 4, 1, "", "update_execution_command"], [372, 4, 1, "", "update_log_path"], [372, 4, 1, "", "update_optimized_model"], [372, 4, 1, "", "update_precision"], [372, 4, 1, "", "update_pruning_details"], [372, 4, 1, "", "update_sampling_size"], [372, 4, 1, "", "update_status"], [372, 4, 1, "", "update_tuning_details"]], "neural_compressor.ux.components.db_manager.db_models.optimization_type": [[373, 2, 1, "", "OptimizationType"], [373, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType": [[373, 4, 1, "", "add"], [373, 4, 1, "", "get_optimization_type_by_id"], [373, 4, 1, "", "get_optimization_type_by_name"], [373, 4, 1, "", "get_optimization_type_for_precision"], [373, 4, 1, "", "get_optimization_type_id"], [373, 4, 1, "", "list"], [373, 4, 1, "", "list_for_precision"]], "neural_compressor.ux.components.db_manager.db_models.precision": [[374, 2, 1, "", "Precision"], [374, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.precision.Precision": [[374, 4, 1, "", "add"], [374, 4, 1, "", "get_precision_by_id"], [374, 4, 1, "", "get_precision_by_name"], [374, 4, 1, "", "get_precision_id"], [374, 4, 1, "", "list"]], "neural_compressor.ux.components.db_manager.db_models.profiling": [[375, 2, 1, "", "Profiling"]], "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling": [[375, 4, 1, "", "add"], [375, 4, 1, "", "build_info"], [375, 4, 1, "", "clean_status"], [375, 4, 1, "", "delete_profiling"], [375, 4, 1, "", "details"], [375, 4, 1, "", "list"], [375, 4, 1, "", "update_dataset"], [375, 4, 1, "", "update_duration"], [375, 4, 1, "", "update_execution_command"], [375, 4, 1, "", "update_log_path"], [375, 4, 1, "", "update_num_threads"], [375, 4, 1, "", "update_status"]], "neural_compressor.ux.components.db_manager.db_models.profiling_result": [[376, 2, 1, "", "ProfilingResult"]], "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult": [[376, 4, 1, "", "add"], [376, 4, 1, "", "build_info"], [376, 4, 1, "", "bulk_add"], [376, 4, 1, "", "delete_results"], [376, 4, 1, "", "get_results"]], "neural_compressor.ux.components.db_manager.db_models.project": [[377, 2, 1, "", "Project"]], "neural_compressor.ux.components.db_manager.db_models.project.Project": [[377, 4, 1, "", "create_project"], [377, 4, 1, "", "delete_project"], [377, 4, 1, "", "get_model_by_name"], [377, 4, 1, "", "list_projects"], [377, 4, 1, "", "project_details"], [377, 4, 1, "", "update_notes"]], "neural_compressor.ux.components.db_manager.db_models.pruning_details": [[378, 2, 1, "", "PruningDetails"]], "neural_compressor.ux.components.db_manager.db_models.pruning_details.PruningDetails": [[378, 4, 1, "", "add"], [378, 4, 1, "", "build_info"], [378, 4, 1, "", "delete_pruning_details"], [378, 4, 1, "", "update"]], "neural_compressor.ux.components.db_manager.db_models.transform": [[379, 2, 1, "", "Transform"], [379, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.transform.Transform": [[379, 4, 1, "", "list"], [379, 4, 1, "", "list_by_domain"], [379, 4, 1, "", "list_by_framework"], [379, 4, 1, "", "query_to_list"]], "neural_compressor.ux.components.db_manager.db_models.tuning_details": [[380, 2, 1, "", "TuningDetails"]], "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails": [[380, 4, 1, "", "add"], [380, 4, 1, "", "delete_tuning_details"], [380, 4, 1, "", "update"], [380, 4, 1, "", "update_tuning_history"]], "neural_compressor.ux.components.db_manager.db_models.tuning_history": [[381, 2, 1, "", "TuningHistory"]], "neural_compressor.ux.components.db_manager.db_models.tuning_history.TuningHistory": [[381, 4, 1, "", "add"], [381, 4, 1, "", "build_info"]], "neural_compressor.ux.components.db_manager.db_operations": [[388, 2, 1, "", "BenchmarkAPIInterface"], [388, 2, 1, "", "DatasetAPIInterface"], [388, 2, 1, "", "DiagnosisAPIInterface"], [388, 2, 1, "", "DictionariesAPIInterface"], [388, 2, 1, "", "ExamplesAPIInterface"], [388, 2, 1, "", "ModelAPIInterface"], [388, 2, 1, "", "OptimizationAPIInterface"], [388, 2, 1, "", "ProfilingAPIInterface"], [388, 2, 1, "", "ProjectAPIInterface"], [382, 0, 0, "-", "benchmark_api_interface"], [383, 0, 0, "-", "dataset_api_interface"], [384, 0, 0, "-", "db_operations"], [385, 0, 0, "-", "diagnosis_api_interface"], [386, 0, 0, "-", "dictionaries_api_interface"], [387, 0, 0, "-", "examples_api_interface"], [389, 0, 0, "-", "model_api_interface"], [390, 0, 0, "-", "optimization_api_interface"], [391, 0, 0, "-", "profiling_api_interface"], [392, 0, 0, "-", "project_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface": [[388, 4, 1, "", "add_benchmark"], [388, 4, 1, "", "add_result"], [388, 4, 1, "", "clean_status"], [388, 4, 1, "", "delete_benchmark"], [388, 4, 1, "", "edit_benchmark"], [388, 4, 1, "", "get_benchmark_details"], [388, 4, 1, "", "list_benchmarks"], [388, 4, 1, "", "parse_benchmark_data"], [388, 4, 1, "", "parse_benchmark_edit_data"], [388, 4, 1, "", "update_benchmark_accuracy"], [388, 4, 1, "", "update_benchmark_duration"], [388, 4, 1, "", "update_benchmark_performance"], [388, 4, 1, "", "update_benchmark_status"], [388, 4, 1, "", "update_execution_command"], [388, 4, 1, "", "update_paths"]], "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface": [[388, 4, 1, "", "add_dataset"], [388, 4, 1, "", "check_if_custom_metric_or_dataloader"], [388, 4, 1, "", "dataloader_path"], [388, 4, 1, "", "delete_dataset"], [388, 4, 1, "", "generate_custom_template"], [388, 4, 1, "", "generate_template"], [388, 4, 1, "", "get_dataset_details"], [388, 4, 1, "", "get_predefined_dataset"], [388, 4, 1, "", "list_datasets"], [388, 4, 1, "", "parse_dataset_data"], [388, 4, 1, "", "prepare_predefined_dataloader"], [388, 4, 1, "", "prepare_predefined_transform"], [388, 4, 1, "", "set_template_path"]], "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface": [[388, 4, 1, "", "generate_optimization"], [388, 4, 1, "", "get_op_details"], [388, 4, 1, "", "get_op_list"], [388, 4, 1, "", "histogram"], [388, 4, 1, "", "model_wise_params"], [388, 4, 1, "", "parse_model_wise_config"], [388, 4, 1, "", "parse_op_wise_config"], [388, 4, 1, "", "parse_optimization_data"], [388, 4, 1, "", "parse_wise_parameters"], [388, 4, 1, "", "set_op_wise_pattern_precision"]], "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface": [[388, 4, 1, "", "list_dataloaders"], [388, 4, 1, "", "list_dataloaders_by_framework"], [388, 4, 1, "", "list_domain_flavours"], [388, 4, 1, "", "list_domains"], [388, 4, 1, "", "list_metrics"], [388, 4, 1, "", "list_metrics_by_framework"], [388, 4, 1, "", "list_optimization_types"], [388, 4, 1, "", "list_optimization_types_for_precision"], [388, 4, 1, "", "list_precisions"], [388, 4, 1, "", "list_transforms"], [388, 4, 1, "", "list_transforms_by_domain"], [388, 4, 1, "", "list_transforms_by_framework"]], "neural_compressor.ux.components.db_manager.db_operations.ExamplesAPIInterface": [[388, 4, 1, "", "create_project"], [388, 4, 1, "", "get_optimization_data"]], "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface": [[388, 4, 1, "", "add_model"], [388, 4, 1, "", "delete_model"], [388, 4, 1, "", "get_model_details"], [388, 4, 1, "", "list_models"], [388, 4, 1, "", "parse_model_data"]], "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface": [[388, 4, 1, "", "add_optimization"], [388, 4, 1, "", "add_pruning_optimization"], [388, 4, 1, "", "add_quantization_optimization"], [388, 4, 1, "", "add_standard_optimization"], [388, 4, 1, "", "add_tuning_history"], [388, 4, 1, "", "clean_status"], [388, 4, 1, "", "delete_optimization"], [388, 4, 1, "", "edit_optimization"], [388, 4, 1, "", "edit_pruning_details"], [388, 4, 1, "", "edit_tuning_details"], [388, 4, 1, "", "get_optimization_details"], [388, 4, 1, "", "get_pruning_details"], [388, 4, 1, "", "list_optimizations"], [388, 4, 1, "", "load_pruning_details_config"], [388, 4, 1, "", "parse_optimization_data"], [388, 4, 1, "", "parse_optimization_edit_data"], [388, 4, 1, "", "parse_tuning_history"], [388, 4, 1, "", "pin_accuracy_benchmark"], [388, 4, 1, "", "pin_performance_benchmark"], [388, 4, 1, "", "update_execution_command"], [388, 4, 1, "", "update_optimization_duration"], [388, 4, 1, "", "update_optimization_status"], [388, 4, 1, "", "update_optimized_model"], [388, 4, 1, "", "update_paths"]], "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface": [[388, 4, 1, "", "add_profiling"], [388, 4, 1, "", "add_result"], [388, 4, 1, "", "bulk_add_results"], [388, 4, 1, "", "clean_status"], [388, 4, 1, "", "delete_profiling"], [388, 4, 1, "", "edit_profiling"], [388, 4, 1, "", "get_profiling_details"], [388, 4, 1, "", "list_profilings"], [388, 4, 1, "", "parse_profiling_data"], [388, 4, 1, "", "parse_profiling_edit_data"], [388, 4, 1, "", "parse_profiling_result_data"], [388, 4, 1, "", "update_execution_command"], [388, 4, 1, "", "update_log_path"], [388, 4, 1, "", "update_profiling_duration"], [388, 4, 1, "", "update_profiling_status"]], "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface": [[388, 4, 1, "", "add_dummy_dataset"], [388, 4, 1, "", "add_model"], [388, 4, 1, "", "create_project"], [388, 4, 1, "", "delete_project"], [388, 4, 1, "", "get_project_details"], [388, 4, 1, "", "list_projects"], [388, 4, 1, "", "update_project_notes"]], "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface": [[382, 2, 1, "", "BenchmarkAPIInterface"], [382, 1, 1, "", "before_delete_benchmark_entry"]], "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface": [[382, 4, 1, "", "add_benchmark"], [382, 4, 1, "", "add_result"], [382, 4, 1, "", "clean_status"], [382, 4, 1, "", "delete_benchmark"], [382, 4, 1, "", "edit_benchmark"], [382, 4, 1, "", "get_benchmark_details"], [382, 4, 1, "", "list_benchmarks"], [382, 4, 1, "", "parse_benchmark_data"], [382, 4, 1, "", "parse_benchmark_edit_data"], [382, 4, 1, "", "update_benchmark_accuracy"], [382, 4, 1, "", "update_benchmark_duration"], [382, 4, 1, "", "update_benchmark_performance"], [382, 4, 1, "", "update_benchmark_status"], [382, 4, 1, "", "update_execution_command"], [382, 4, 1, "", "update_paths"]], "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface": [[383, 2, 1, "", "DatasetAPIInterface"], [383, 1, 1, "", "initialize_associations"], [383, 1, 1, "", "initialize_precision_optimization_types_association"], [383, 1, 1, "", "search_in_list_of_dict"], [383, 1, 1, "", "search_in_list_of_dict_for_unique_value"], [383, 1, 1, "", "set_database_version"]], "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface": [[383, 4, 1, "", "add_dataset"], [383, 4, 1, "", "check_if_custom_metric_or_dataloader"], [383, 4, 1, "", "dataloader_path"], [383, 4, 1, "", "delete_dataset"], [383, 4, 1, "", "generate_custom_template"], [383, 4, 1, "", "generate_template"], [383, 4, 1, "", "get_dataset_details"], [383, 4, 1, "", "get_predefined_dataset"], [383, 4, 1, "", "list_datasets"], [383, 4, 1, "", "parse_dataset_data"], [383, 4, 1, "", "prepare_predefined_dataloader"], [383, 4, 1, "", "prepare_predefined_transform"], [383, 4, 1, "", "set_template_path"]], "neural_compressor.ux.components.db_manager.db_operations.db_operations": [[384, 1, 1, "", "initialize_associations"], [384, 1, 1, "", "initialize_precision_optimization_types_association"], [384, 1, 1, "", "search_in_list_of_dict"], [384, 1, 1, "", "search_in_list_of_dict_for_unique_value"], [384, 1, 1, "", "set_database_version"]], "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface": [[385, 2, 1, "", "DiagnosisAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface": [[385, 4, 1, "", "generate_optimization"], [385, 4, 1, "", "get_op_details"], [385, 4, 1, "", "get_op_list"], [385, 4, 1, "", "histogram"], [385, 4, 1, "", "model_wise_params"], [385, 4, 1, "", "parse_model_wise_config"], [385, 4, 1, "", "parse_op_wise_config"], [385, 4, 1, "", "parse_optimization_data"], [385, 4, 1, "", "parse_wise_parameters"], [385, 4, 1, "", "set_op_wise_pattern_precision"]], "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface": [[386, 2, 1, "", "DictionariesAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface": [[386, 4, 1, "", "list_dataloaders"], [386, 4, 1, "", "list_dataloaders_by_framework"], [386, 4, 1, "", "list_domain_flavours"], [386, 4, 1, "", "list_domains"], [386, 4, 1, "", "list_metrics"], [386, 4, 1, "", "list_metrics_by_framework"], [386, 4, 1, "", "list_optimization_types"], [386, 4, 1, "", "list_optimization_types_for_precision"], [386, 4, 1, "", "list_precisions"], [386, 4, 1, "", "list_transforms"], [386, 4, 1, "", "list_transforms_by_domain"], [386, 4, 1, "", "list_transforms_by_framework"]], "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface": [[387, 2, 1, "", "ExamplesAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.ExamplesAPIInterface": [[387, 4, 1, "", "create_project"], [387, 4, 1, "", "get_optimization_data"]], "neural_compressor.ux.components.db_manager.db_operations.model_api_interface": [[389, 2, 1, "", "ModelAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface": [[389, 4, 1, "", "add_model"], [389, 4, 1, "", "delete_model"], [389, 4, 1, "", "get_model_details"], [389, 4, 1, "", "list_models"], [389, 4, 1, "", "parse_model_data"]], "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface": [[390, 2, 1, "", "OptimizationAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface": [[390, 4, 1, "", "add_optimization"], [390, 4, 1, "", "add_pruning_optimization"], [390, 4, 1, "", "add_quantization_optimization"], [390, 4, 1, "", "add_standard_optimization"], [390, 4, 1, "", "add_tuning_history"], [390, 4, 1, "", "clean_status"], [390, 4, 1, "", "delete_optimization"], [390, 4, 1, "", "edit_optimization"], [390, 4, 1, "", "edit_pruning_details"], [390, 4, 1, "", "edit_tuning_details"], [390, 4, 1, "", "get_optimization_details"], [390, 4, 1, "", "get_pruning_details"], [390, 4, 1, "", "list_optimizations"], [390, 4, 1, "", "load_pruning_details_config"], [390, 4, 1, "", "parse_optimization_data"], [390, 4, 1, "", "parse_optimization_edit_data"], [390, 4, 1, "", "parse_tuning_history"], [390, 4, 1, "", "pin_accuracy_benchmark"], [390, 4, 1, "", "pin_performance_benchmark"], [390, 4, 1, "", "update_execution_command"], [390, 4, 1, "", "update_optimization_duration"], [390, 4, 1, "", "update_optimization_status"], [390, 4, 1, "", "update_optimized_model"], [390, 4, 1, "", "update_paths"]], "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface": [[391, 2, 1, "", "ProfilingAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface": [[391, 4, 1, "", "add_profiling"], [391, 4, 1, "", "add_result"], [391, 4, 1, "", "bulk_add_results"], [391, 4, 1, "", "clean_status"], [391, 4, 1, "", "delete_profiling"], [391, 4, 1, "", "edit_profiling"], [391, 4, 1, "", "get_profiling_details"], [391, 4, 1, "", "list_profilings"], [391, 4, 1, "", "parse_profiling_data"], [391, 4, 1, "", "parse_profiling_edit_data"], [391, 4, 1, "", "parse_profiling_result_data"], [391, 4, 1, "", "update_execution_command"], [391, 4, 1, "", "update_log_path"], [391, 4, 1, "", "update_profiling_duration"], [391, 4, 1, "", "update_profiling_status"]], "neural_compressor.ux.components.db_manager.db_operations.project_api_interface": [[392, 2, 1, "", "ProjectAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface": [[392, 4, 1, "", "add_dummy_dataset"], [392, 4, 1, "", "add_model"], [392, 4, 1, "", "create_project"], [392, 4, 1, "", "delete_project"], [392, 4, 1, "", "get_project_details"], [392, 4, 1, "", "list_projects"], [392, 4, 1, "", "update_project_notes"]], "neural_compressor.ux.components.db_manager.params_interfaces": [[394, 2, 1, "", "BenchmarkAddParamsInterface"], [394, 2, 1, "", "BenchmarkEditParamsInterface"], [394, 2, 1, "", "DatasetAddParamsInterface"], [394, 2, 1, "", "DiagnosisOptimizationParamsInterface"], [394, 2, 1, "", "ModelAddParamsInterface"], [394, 2, 1, "", "OptimizationAddParamsInterface"], [394, 2, 1, "", "OptimizationEditParamsInterface"], [394, 2, 1, "", "ProfilingAddParamsInterface"], [394, 2, 1, "", "ProfilingEditParamsInterface"], [394, 2, 1, "", "ProfilingResultAddParamsInterface"], [394, 2, 1, "", "TuningHistoryInterface"], [394, 2, 1, "", "TuningHistoryItemInterface"]], "neural_compressor.ux.components.db_manager.params_interfaces.ModelAddParamsInterface": [[394, 4, 1, "", "parse_nodes"]], "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryInterface": [[394, 4, 1, "", "serialize"]], "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryItemInterface": [[394, 4, 1, "", "serialize"]], "neural_compressor.ux.components.db_manager.utils": [[395, 1, 1, "", "get_framework_dataloaders_config"], [395, 1, 1, "", "get_framework_transforms_config"], [395, 1, 1, "", "update_dataloaders_params"]], "neural_compressor.ux.components.diagnosis": [[396, 0, 0, "-", "diagnosis"], [397, 0, 0, "-", "factory"], [399, 0, 0, "-", "onnx_diagnosis"], [401, 0, 0, "-", "op_details"], [402, 0, 0, "-", "op_entry"], [403, 0, 0, "-", "tensorflow_diagnosis"]], "neural_compressor.ux.components.diagnosis.diagnosis": [[396, 2, 1, "", "Diagnosis"]], "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis": [[396, 4, 1, "", "calculate_mse"], [396, 4, 1, "", "get_histogram_data"], [396, 4, 1, "", "get_op_details"], [396, 4, 1, "", "get_op_list"], [396, 4, 1, "", "get_tensors_info"], [396, 4, 1, "", "load_quantization_config"], [396, 4, 1, "", "mse_metric_gap"]], "neural_compressor.ux.components.diagnosis.factory": [[397, 2, 1, "", "DiagnosisFactory"]], "neural_compressor.ux.components.diagnosis.factory.DiagnosisFactory": [[397, 4, 1, "", "get_diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis": [[400, 0, 0, "-", "onnxrt_diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis": [[400, 2, 1, "", "OnnxRtDiagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis.OnnxRtDiagnosis": [[400, 3, 1, "", "model"]], "neural_compressor.ux.components.diagnosis.op_details": [[401, 2, 1, "", "OpActivation"], [401, 2, 1, "", "OpDetails"], [401, 2, 1, "", "OpPattern"], [401, 2, 1, "", "OpWeights"]], "neural_compressor.ux.components.diagnosis.op_details.OpDetails": [[401, 4, 1, "", "serialize"]], "neural_compressor.ux.components.diagnosis.op_entry": [[402, 2, 1, "", "OpEntry"]], "neural_compressor.ux.components.diagnosis.op_entry.OpEntry": [[402, 4, 1, "", "serialize"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis": [[404, 0, 0, "-", "tensorflow_diagnosis"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis": [[404, 2, 1, "", "TensorflowDiagnosis"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis.TensorflowDiagnosis": [[404, 3, 1, "", "model"]], "neural_compressor.ux.components.file_browser": [[405, 0, 0, "-", "file_browser"]], "neural_compressor.ux.components.file_browser.file_browser": [[405, 1, 1, "", "create_dir_entry"], [405, 1, 1, "", "create_entry"], [405, 1, 1, "", "create_file_entry"], [405, 1, 1, "", "filter_requested_entries"], [405, 1, 1, "", "get_directory_entries"], [405, 1, 1, "", "get_filter_value"], [405, 1, 1, "", "get_non_hidden_directory_entries"], [405, 1, 1, "", "get_requested_path"], [405, 1, 1, "", "get_setting_value"], [405, 1, 1, "", "is_dataset_or_directory_entry"], [405, 1, 1, "", "is_directory_entry"], [405, 1, 1, "", "is_model_or_directory_entry"], [405, 1, 1, "", "should_show_files"], [405, 1, 1, "", "should_show_only_model_files"], [405, 1, 1, "", "sort_entries"]], "neural_compressor.ux.components.graph": [[407, 0, 0, "-", "attribute"], [408, 0, 0, "-", "collapser"], [409, 0, 0, "-", "edge"], [410, 0, 0, "-", "graph"], [411, 0, 0, "-", "graph_reader"], [413, 0, 0, "-", "node"], [414, 0, 0, "-", "reader"]], "neural_compressor.ux.components.graph.attribute": [[407, 2, 1, "", "Attribute"]], "neural_compressor.ux.components.graph.collapser": [[408, 2, 1, "", "Collapser"]], "neural_compressor.ux.components.graph.collapser.Collapser": [[408, 4, 1, "", "collapse"]], "neural_compressor.ux.components.graph.edge": [[409, 2, 1, "", "Edge"]], "neural_compressor.ux.components.graph.edge.Edge": [[409, 3, 1, "", "source"], [409, 3, 1, "", "target"]], "neural_compressor.ux.components.graph.graph": [[410, 2, 1, "", "Graph"]], "neural_compressor.ux.components.graph.graph.Graph": [[410, 4, 1, "", "add_edge"], [410, 4, 1, "", "add_node"], [410, 3, 1, "", "edges"], [410, 4, 1, "", "get_node"], [410, 4, 1, "", "get_target_nodes"], [410, 4, 1, "", "highlight_pattern"], [410, 3, 1, "", "nodes"]], "neural_compressor.ux.components.graph.graph_reader": [[411, 2, 1, "", "GraphReader"]], "neural_compressor.ux.components.graph.graph_reader.GraphReader": [[411, 4, 1, "", "find_pattern_in_graph"], [411, 4, 1, "", "read"]], "neural_compressor.ux.components.graph.node": [[413, 2, 1, "", "GroupNode"], [413, 2, 1, "", "Node"]], "neural_compressor.ux.components.graph.reader": [[415, 0, 0, "-", "onnxrt_reader"], [416, 0, 0, "-", "tensorflow_reader"]], "neural_compressor.ux.components.graph.reader.onnxrt_reader": [[415, 2, 1, "", "OnnxrtReader"]], "neural_compressor.ux.components.graph.reader.onnxrt_reader.OnnxrtReader": [[415, 4, 1, "", "read"]], "neural_compressor.ux.components.graph.reader.tensorflow_reader": [[416, 2, 1, "", "TensorflowReader"]], "neural_compressor.ux.components.graph.reader.tensorflow_reader.TensorflowReader": [[416, 4, 1, "", "read"]], "neural_compressor.ux.components.jobs_management": [[419, 0, 0, "-", "jobs_control_queue"], [420, 0, 0, "-", "jobs_manager"], [421, 0, 0, "-", "request"]], "neural_compressor.ux.components.manage_workspace": [[422, 1, 1, "", "get_default_path"]], "neural_compressor.ux.components.model": [[423, 0, 0, "-", "domain"], [425, 0, 0, "-", "model"], [426, 0, 0, "-", "model_type_getter"], [427, 0, 0, "-", "onnxrt"], [429, 0, 0, "-", "pytorch"], [431, 0, 0, "-", "repository"], [432, 0, 0, "-", "shape"], [434, 0, 0, "-", "tensorflow"]], "neural_compressor.ux.components.model.domain": [[423, 2, 1, "", "Domain"]], "neural_compressor.ux.components.model.model": [[425, 2, 1, "", "Model"]], "neural_compressor.ux.components.model.model.Model": [[425, 3, 1, "", "domain"], [425, 4, 1, "", "ensure_supported_path"], [425, 4, 1, "", "get_framework_name"], [425, 4, 1, "", "get_input_nodes"], [425, 4, 1, "", "get_model_graph"], [425, 4, 1, "", "get_output_nodes"], [425, 4, 1, "", "get_tensors_info"], [425, 4, 1, "", "guard_requirements_installed"], [425, 3, 1, "", "input_shape"], [425, 3, 1, "", "shape_elements_order"], [425, 3, 1, "", "supports_graph"], [425, 4, 1, "", "supports_path"], [425, 3, 1, "", "supports_profiling"], [425, 3, 1, "", "supports_pruning"]], "neural_compressor.ux.components.model.model_type_getter": [[426, 1, 1, "", "get_model_type"]], "neural_compressor.ux.components.model.onnxrt": [[428, 0, 0, "-", "model"]], "neural_compressor.ux.components.model.onnxrt.model": [[428, 2, 1, "", "OnnxrtModel"], [428, 1, 1, "", "remove_number_of_samples_from_shape"]], "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel": [[428, 3, 1, "", "domain"], [428, 3, 1, "", "filtered_input_nodes"], [428, 4, 1, "", "get_framework_name"], [428, 4, 1, "", "get_model_graph"], [428, 4, 1, "", "guard_requirements_installed"], [428, 3, 1, "", "input_shape"], [428, 3, 1, "", "nc_model_instance"], [428, 3, 1, "", "shape_elements_order"], [428, 4, 1, "", "supports_path"]], "neural_compressor.ux.components.model.pytorch": [[430, 0, 0, "-", "model"]], "neural_compressor.ux.components.model.pytorch.model": [[430, 2, 1, "", "PyTorchScriptModel"]], "neural_compressor.ux.components.model.pytorch.model.PyTorchScriptModel": [[430, 4, 1, "", "get_framework_name"], [430, 4, 1, "", "guard_requirements_installed"], [430, 4, 1, "", "supports_path"]], "neural_compressor.ux.components.model.repository": [[431, 2, 1, "", "ModelRepository"]], "neural_compressor.ux.components.model.repository.ModelRepository": [[431, 4, 1, "", "get_framework_from_path"], [431, 4, 1, "", "get_frameworks"], [431, 4, 1, "", "get_model"], [431, 4, 1, "", "get_supported_frameworks"], [431, 4, 1, "", "is_model_path"]], "neural_compressor.ux.components.model.shape": [[432, 2, 1, "", "Shape"]], "neural_compressor.ux.components.model.shape.Shape": [[432, 4, 1, "", "serialize"]], "neural_compressor.ux.components.model.tensorflow": [[433, 0, 0, "-", "frozen_pb"], [435, 0, 0, "-", "keras"], [436, 0, 0, "-", "meta_graph"], [437, 0, 0, "-", "model"], [438, 0, 0, "-", "saved_model"], [439, 0, 0, "-", "utils"]], "neural_compressor.ux.components.model.tensorflow.frozen_pb": [[433, 2, 1, "", "FrozenPbModel"]], "neural_compressor.ux.components.model.tensorflow.frozen_pb.FrozenPbModel": [[433, 4, 1, "", "supports_path"], [433, 3, 1, "", "supports_profiling"]], "neural_compressor.ux.components.model.tensorflow.keras": [[435, 2, 1, "", "KerasModel"]], "neural_compressor.ux.components.model.tensorflow.keras.KerasModel": [[435, 4, 1, "", "get_input_nodes"], [435, 4, 1, "", "get_output_nodes"], [435, 4, 1, "", "supports_path"]], "neural_compressor.ux.components.model.tensorflow.meta_graph": [[436, 2, 1, "", "MetaGraphModel"]], "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel": [[436, 4, 1, "", "get_input_nodes"], [436, 4, 1, "", "get_model_graph"], [436, 4, 1, "", "get_output_nodes"], [436, 4, 1, "", "supports_path"]], "neural_compressor.ux.components.model.tensorflow.model": [[437, 2, 1, "", "TensorflowModel"]], "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel": [[437, 4, 1, "", "get_framework_name"], [437, 4, 1, "", "get_input_nodes"], [437, 4, 1, "", "get_model_graph"], [437, 4, 1, "", "get_output_nodes"], [437, 4, 1, "", "guard_requirements_installed"], [437, 3, 1, "", "input_shape"], [437, 3, 1, "", "nc_model_instance"], [437, 3, 1, "", "shape_elements_order"], [437, 3, 1, "", "supports_pruning"]], "neural_compressor.ux.components.model.tensorflow.saved_model": [[438, 2, 1, "", "SavedModelModel"]], "neural_compressor.ux.components.model.tensorflow.saved_model.SavedModelModel": [[438, 4, 1, "", "supports_path"]], "neural_compressor.ux.components.model.tensorflow.utils": [[439, 1, 1, "", "get_input_shape"]], "neural_compressor.ux.components.model_zoo": [[440, 0, 0, "-", "download_config"], [441, 0, 0, "-", "download_model"], [442, 0, 0, "-", "downloader"], [444, 0, 0, "-", "list_models"]], "neural_compressor.ux.components.model_zoo.download_config": [[440, 1, 1, "", "download_config"]], "neural_compressor.ux.components.model_zoo.download_model": [[441, 1, 1, "", "download_model"]], "neural_compressor.ux.components.model_zoo.downloader": [[442, 2, 1, "", "Downloader"]], "neural_compressor.ux.components.model_zoo.downloader.Downloader": [[442, 4, 1, "", "download"], [442, 4, 1, "", "download_config"], [442, 4, 1, "", "download_file"], [442, 4, 1, "", "download_model"], [442, 4, 1, "", "download_yaml_config"], [442, 4, 1, "", "get_yaml_url"], [442, 4, 1, "", "unpack_archive"]], "neural_compressor.ux.components.model_zoo.list_models": [[444, 1, 1, "", "check_version"], [444, 1, 1, "", "get_available_models"], [444, 1, 1, "", "get_framework_module_name"], [444, 1, 1, "", "get_installed_frameworks"], [444, 1, 1, "", "list_models"], [444, 1, 1, "", "validate_model_list"]], "neural_compressor.ux.components.names_mapper": [[446, 0, 0, "-", "names_mapper"]], "neural_compressor.ux.components.names_mapper.names_mapper": [[446, 2, 1, "", "MappingDirection"], [446, 2, 1, "", "NamesMapper"]], "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper": [[446, 3, 1, "", "domain_flavour_mappings"], [446, 3, 1, "", "domain_mappings"], [446, 3, 1, "", "framework_mappings"], [446, 4, 1, "", "map_name"], [446, 3, 1, "", "precision_mappings"]], "neural_compressor.ux.components.optimization": [[452, 2, 1, "", "Optimizations"], [447, 0, 0, "-", "execute_optimization"], [448, 0, 0, "-", "factory"], [450, 0, 0, "-", "graph_optimizer"], [453, 0, 0, "-", "mixed_precision"], [456, 0, 0, "-", "neural_coder_optimization"], [458, 0, 0, "-", "optimization"], [459, 0, 0, "-", "pruning"], [462, 0, 0, "-", "tune"], [465, 0, 0, "-", "tuning_history"]], "neural_compressor.ux.components.optimization.execute_optimization": [[447, 1, 1, "", "check_if_collect_tuning_history"], [447, 1, 1, "", "execute_optimization"], [447, 1, 1, "", "execute_optimization_pytorch_script"], [447, 1, 1, "", "execute_optimization_regular"], [447, 1, 1, "", "parse_logs"], [447, 1, 1, "", "parse_model_data_to_bench_names"]], "neural_compressor.ux.components.optimization.factory": [[448, 2, 1, "", "OptimizationFactory"]], "neural_compressor.ux.components.optimization.factory.OptimizationFactory": [[448, 4, 1, "", "get_optimization"]], "neural_compressor.ux.components.optimization.graph_optimizer": [[449, 0, 0, "-", "graph_optimization"], [451, 0, 0, "-", "optimize_model"]], "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization": [[449, 2, 1, "", "GraphOptimization"]], "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization": [[449, 3, 1, "", "configuration_data"], [449, 4, 1, "", "execute"], [449, 4, 1, "", "generate_config"], [449, 3, 1, "", "optimization_script"], [449, 3, 1, "", "parameters"]], "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model": [[451, 1, 1, "", "optimize_graph"], [451, 1, 1, "", "optimize_graph_config"], [451, 1, 1, "", "parse_args"], [451, 1, 1, "", "set_eager_execution"]], "neural_compressor.ux.components.optimization.mixed_precision": [[454, 0, 0, "-", "mixed_precision"], [455, 0, 0, "-", "optimize_model"]], "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision": [[454, 2, 1, "", "MixedPrecision"]], "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision": [[454, 3, 1, "", "configuration_data"], [454, 4, 1, "", "execute"], [454, 4, 1, "", "generate_config"], [454, 3, 1, "", "optimization_script"], [454, 3, 1, "", "parameters"]], "neural_compressor.ux.components.optimization.mixed_precision.optimize_model": [[455, 1, 1, "", "optimize_graph"], [455, 1, 1, "", "optimize_graph_config"], [455, 1, 1, "", "parse_args"], [455, 1, 1, "", "set_eager_execution"]], "neural_compressor.ux.components.optimization.neural_coder_optimization": [[457, 0, 0, "-", "optimize_model"]], "neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model": [[457, 1, 1, "", "optimize_pt_script"]], "neural_compressor.ux.components.optimization.optimization": [[458, 2, 1, "", "DataloaderInterface"], [458, 2, 1, "", "Optimization"], [458, 2, 1, "", "OptimizationInterface"]], "neural_compressor.ux.components.optimization.optimization.Optimization": [[458, 3, 1, "", "command"], [458, 3, 1, "", "config_filename"], [458, 3, 1, "", "configuration_data"], [458, 4, 1, "", "execute"], [458, 4, 1, "", "generate_config"], [458, 3, 1, "", "optimization_script"], [458, 3, 1, "", "output_model_dir"], [458, 3, 1, "", "output_model_name"], [458, 3, 1, "", "parameters"], [458, 3, 1, "", "workdir"]], "neural_compressor.ux.components.optimization.pruning": [[460, 0, 0, "-", "optimize_model"], [461, 0, 0, "-", "pruning"]], "neural_compressor.ux.components.optimization.pruning.optimize_model": [[460, 1, 1, "", "optimize_model"], [460, 1, 1, "", "parse_args"]], "neural_compressor.ux.components.optimization.pruning.pruning": [[461, 2, 1, "", "Pruning"]], "neural_compressor.ux.components.optimization.pruning.pruning.Pruning": [[461, 3, 1, "", "configuration_data"], [461, 4, 1, "", "execute"], [461, 4, 1, "", "generate_config"], [461, 3, 1, "", "optimization_script"], [461, 3, 1, "", "parameters"]], "neural_compressor.ux.components.optimization.tune": [[463, 0, 0, "-", "tune_model"], [464, 0, 0, "-", "tuning"]], "neural_compressor.ux.components.optimization.tune.tune_model": [[463, 1, 1, "", "parse_args"], [463, 1, 1, "", "set_eager_execution"], [463, 1, 1, "", "tune_model"]], "neural_compressor.ux.components.optimization.tune.tuning": [[464, 2, 1, "", "AccuracyCriterion"], [464, 2, 1, "", "Tuning"], [464, 2, 1, "", "TuningDetails"]], "neural_compressor.ux.components.optimization.tune.tuning.Tuning": [[464, 3, 1, "", "configuration_data"], [464, 4, 1, "", "execute"], [464, 4, 1, "", "generate_config"], [464, 3, 1, "", "optimization_script"], [464, 3, 1, "", "parameters"]], "neural_compressor.ux.components.optimization.tuning_history": [[465, 2, 1, "", "TuningHistory"], [465, 2, 1, "", "Watcher"], [465, 1, 1, "", "tuning_history"], [465, 1, 1, "", "tuning_history_path"]], "neural_compressor.ux.components.optimization.tuning_history.TuningHistory": [[465, 4, 1, "", "send_history_snapshot"]], "neural_compressor.ux.components.optimization.tuning_history.Watcher": [[465, 4, 1, "", "history_file_modification_time"], [465, 4, 1, "", "stop"], [465, 4, 1, "", "was_history_file_changed"]], "neural_compressor.ux.components.profiling": [[466, 0, 0, "-", "execute_profiling"], [467, 0, 0, "-", "factory"], [469, 0, 0, "-", "profile_model"], [470, 0, 0, "-", "profiler"], [471, 0, 0, "-", "profiling"], [473, 0, 0, "-", "tensorflow_profiler"]], "neural_compressor.ux.components.profiling.execute_profiling": [[466, 1, 1, "", "execute_profiling"], [466, 1, 1, "", "execute_real_profiling"]], "neural_compressor.ux.components.profiling.factory": [[467, 2, 1, "", "ProfilerFactory"]], "neural_compressor.ux.components.profiling.factory.ProfilerFactory": [[467, 4, 1, "", "get_profiler"]], "neural_compressor.ux.components.profiling.profile_model": [[469, 1, 1, "", "load_profiling_details"], [469, 1, 1, "", "parse_args"]], "neural_compressor.ux.components.profiling.profiler": [[470, 2, 1, "", "Profiler"]], "neural_compressor.ux.components.profiling.profiler.Profiler": [[470, 4, 1, "", "profile_model"]], "neural_compressor.ux.components.profiling.profiling": [[471, 2, 1, "", "DataloaderInterface"], [471, 2, 1, "", "Profiling"]], "neural_compressor.ux.components.profiling.profiling.Profiling": [[471, 3, 1, "", "config_filename"], [471, 3, 1, "", "config_path"], [471, 4, 1, "", "execute"], [471, 4, 1, "", "generate_config"], [471, 3, 1, "", "profiling_data"], [471, 3, 1, "", "workdir"]], "neural_compressor.ux.components.profiling.tensorflow_profiler": [[472, 0, 0, "-", "factory"], [474, 0, 0, "-", "profiler"], [475, 0, 0, "-", "utils"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.factory": [[472, 2, 1, "", "ProfilerFactory"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.factory.ProfilerFactory": [[472, 4, 1, "", "get_profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler": [[474, 2, 1, "", "Profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler": [[474, 4, 1, "", "build_dataloader"], [474, 4, 1, "", "convert_nodes_to_list"], [474, 4, 1, "", "create_tf_config"], [474, 4, 1, "", "get_node_by_name"], [474, 4, 1, "", "initialize_graph"], [474, 4, 1, "", "profile_model"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.utils": [[475, 1, 1, "", "delete_assign"]], "neural_compressor.ux.inc_bench": [[476, 1, 1, "", "main"], [476, 1, 1, "", "prepare_environment"]], "neural_compressor.ux.utils": [[478, 0, 0, "-", "consts"], [479, 0, 0, "-", "environment"], [480, 0, 0, "-", "exceptions"], [481, 0, 0, "-", "executor"], [482, 0, 0, "-", "expiring_dict"], [483, 0, 0, "-", "github_info"], [484, 0, 0, "-", "hw_info"], [486, 0, 0, "-", "json_serializer"], [487, 0, 0, "-", "logger"], [488, 0, 0, "-", "parser"], [489, 0, 0, "-", "proc"], [490, 0, 0, "-", "processes"], [491, 0, 0, "-", "singleton"], [492, 0, 0, "-", "status_updates"], [493, 0, 0, "-", "templates"], [496, 0, 0, "-", "utils"], [501, 0, 0, "-", "workload"], [507, 0, 0, "-", "yaml_utils"]], "neural_compressor.ux.utils.consts": [[478, 2, 1, "", "DomainFlavours"], [478, 2, 1, "", "Domains"], [478, 2, 1, "", "ExecutionStatus"], [478, 2, 1, "", "Frameworks"], [478, 2, 1, "", "OptimizationTypes"], [478, 2, 1, "", "Precisions"], [478, 2, 1, "", "Strategies"]], "neural_compressor.ux.utils.environment": [[479, 2, 1, "", "Environment"]], "neural_compressor.ux.utils.environment.Environment": [[479, 4, 1, "", "clean_workloads_wip_status"], [479, 4, 1, "", "ensure_workdir_exists_and_writeable"], [479, 4, 1, "", "migrate_database"]], "neural_compressor.ux.utils.exceptions": [[480, 7, 1, "", "AccessDeniedException"], [480, 7, 1, "", "ClientErrorException"], [480, 7, 1, "", "InternalException"], [480, 7, 1, "", "NotFoundException"]], "neural_compressor.ux.utils.executor": [[481, 2, 1, "", "Executor"]], "neural_compressor.ux.utils.executor.Executor": [[481, 3, 1, "", "additional_log_names"], [481, 4, 1, "", "call"], [481, 4, 1, "", "call_one"], [481, 4, 1, "", "is_multi_commands"], [481, 3, 1, "", "log_name"], [481, 3, 1, "", "process_duration"], [481, 4, 1, "", "refresh_workdir"], [481, 3, 1, "", "request_id"], [481, 3, 1, "", "workdir"]], "neural_compressor.ux.utils.expiring_dict": [[482, 2, 1, "", "ExpiringDict"], [482, 2, 1, "", "ExpiringDictItem"]], "neural_compressor.ux.utils.expiring_dict.ExpiringDictItem": [[482, 4, 1, "", "is_expired"]], "neural_compressor.ux.utils.github_info": [[483, 2, 1, "", "GithubInfo"]], "neural_compressor.ux.utils.github_info.GithubInfo": [[483, 4, 1, "", "tag"]], "neural_compressor.ux.utils.hw_info": [[484, 2, 1, "", "HWInfo"], [484, 1, 1, "", "get_bios_version"], [484, 1, 1, "", "get_distribution"], [484, 1, 1, "", "get_framework_dependency_info"], [484, 1, 1, "", "get_framework_info"], [484, 1, 1, "", "get_kernel_version"], [484, 1, 1, "", "get_number_of_sockets"], [484, 1, 1, "", "is_turbo_boost_enabled"]], "neural_compressor.ux.utils.hw_info.HWInfo": [[484, 4, 1, "", "initialize"], [484, 4, 1, "", "serialize"]], "neural_compressor.ux.utils.json_serializer": [[486, 2, 1, "", "JsonSerializer"]], "neural_compressor.ux.utils.json_serializer.JsonSerializer": [[486, 4, 1, "", "serialize"], [486, 4, 1, "", "serialize_item"]], "neural_compressor.ux.utils.logger": [[487, 1, 1, "", "change_log_level"]], "neural_compressor.ux.utils.parser": [[488, 2, 1, "", "AccuracyParser"], [488, 2, 1, "", "BenchmarkParserFactory"], [488, 2, 1, "", "OptimizationParser"], [488, 2, 1, "", "Parser"], [488, 2, 1, "", "PerformanceParser"], [488, 2, 1, "", "ProfilingParser"]], "neural_compressor.ux.utils.parser.AccuracyParser": [[488, 3, 1, "", "patterns"], [488, 4, 1, "", "process"]], "neural_compressor.ux.utils.parser.BenchmarkParserFactory": [[488, 4, 1, "", "get_parser"]], "neural_compressor.ux.utils.parser.OptimizationParser": [[488, 3, 1, "", "patterns"], [488, 4, 1, "", "process"]], "neural_compressor.ux.utils.parser.Parser": [[488, 3, 1, "", "patterns"], [488, 4, 1, "", "process"]], "neural_compressor.ux.utils.parser.PerformanceParser": [[488, 3, 1, "", "patterns"], [488, 4, 1, "", "process"], [488, 4, 1, "", "summarize_partial"], [488, 4, 1, "", "summarize_value"], [488, 4, 1, "", "update_partial"]], "neural_compressor.ux.utils.parser.ProfilingParser": [[488, 3, 1, "", "patterns"], [488, 4, 1, "", "process"], [488, 4, 1, "", "unify_time"]], "neural_compressor.ux.utils.proc": [[489, 2, 1, "", "Proc"]], "neural_compressor.ux.utils.proc.Proc": [[489, 3, 1, "", "info"], [489, 3, 1, "", "info_path"], [489, 3, 1, "", "is_ok"], [489, 3, 1, "", "output"], [489, 3, 1, "", "output_path"], [489, 4, 1, "", "remove_logs"], [489, 4, 1, "", "run"], [489, 3, 1, "", "tail"]], "neural_compressor.ux.utils.processes": [[490, 2, 1, "", "NCProcesses"]], "neural_compressor.ux.utils.processes.NCProcesses": [[490, 3, 1, "", "is_ok"], [490, 4, 1, "", "remove_successful_logs"], [490, 4, 1, "", "return_code_all"]], "neural_compressor.ux.utils.singleton": [[491, 2, 1, "", "Singleton"]], "neural_compressor.ux.utils.status_updates": [[492, 1, 1, "", "get_status_update_function"]], "neural_compressor.ux.utils.templates": [[494, 0, 0, "-", "metric"], [495, 0, 0, "-", "workdir"]], "neural_compressor.ux.utils.templates.metric": [[494, 2, 1, "", "Metric"]], "neural_compressor.ux.utils.templates.metric.Metric": [[494, 3, 1, "", "acc_input_model"], [494, 3, 1, "", "acc_optimized_model"], [494, 3, 1, "", "accuracy"], [494, 4, 1, "", "calculate_throughput"], [494, 4, 1, "", "insert_data"], [494, 3, 1, "", "latency"], [494, 3, 1, "", "optimization_time"], [494, 3, 1, "", "path_optimized_model"], [494, 3, 1, "", "profiling_data"], [494, 3, 1, "", "size_input_model"], [494, 3, 1, "", "size_optimized_model"], [494, 3, 1, "", "throughput"]], "neural_compressor.ux.utils.templates.workdir": [[495, 2, 1, "", "Workdir"]], "neural_compressor.ux.utils.templates.workdir.Workdir": [[495, 4, 1, "", "clean_logs"], [495, 4, 1, "", "clean_status"], [495, 4, 1, "", "ensure_working_path_exists"]], "neural_compressor.ux.utils.utils": [[496, 1, 1, "", "check_module"], [496, 1, 1, "", "deprecated"], [496, 1, 1, "", "determine_ip"], [496, 1, 1, "", "export_to_csv"], [496, 1, 1, "", "filter_transforms"], [496, 1, 1, "", "get_dataset_path"], [496, 1, 1, "", "get_default_pruning_config_path"], [496, 1, 1, "", "get_file_extension"], [496, 1, 1, "", "get_framework_from_path"], [496, 1, 1, "", "get_height_width_from_size"], [496, 1, 1, "", "get_metrics_dict"], [496, 1, 1, "", "get_model_zoo_config_path"], [496, 1, 1, "", "get_model_zoo_model_path"], [496, 1, 1, "", "get_module_version"], [496, 1, 1, "", "get_predefined_config_path"], [496, 1, 1, "", "get_shape_from_transforms"], [496, 1, 1, "", "get_size"], [496, 1, 1, "", "is_dataset_file"], [496, 1, 1, "", "is_development_env"], [496, 1, 1, "", "is_hidden"], [496, 1, 1, "", "load_dataloader_config"], [496, 1, 1, "", "load_help_nc_params"], [496, 1, 1, "", "load_metrics_config"], [496, 1, 1, "", "load_model_config"], [496, 1, 1, "", "load_model_wise_params"], [496, 1, 1, "", "load_precisions_config"], [496, 1, 1, "", "load_pruning_details_config"], [496, 1, 1, "", "load_transforms_config"], [496, 1, 1, "", "load_transforms_filter_config"], [496, 1, 1, "", "normalize_domain"], [496, 1, 1, "", "normalize_framework"], [496, 1, 1, "", "normalize_string"], [496, 1, 1, "", "parse_bool_value"], [496, 1, 1, "", "parse_to_float_list"], [496, 1, 1, "", "parse_to_string_list"], [496, 1, 1, "", "parse_version"], [496, 1, 1, "", "release_tag"], [496, 1, 1, "", "replace_with_values"], [496, 1, 1, "", "verify_file_path"]], "neural_compressor.ux.utils.workload": [[497, 0, 0, "-", "config"], [498, 0, 0, "-", "dataloader"], [499, 0, 0, "-", "evaluation"], [500, 0, 0, "-", "graph_optimization"], [502, 0, 0, "-", "mixed_precision"], [503, 0, 0, "-", "model"], [504, 0, 0, "-", "pruning"], [505, 0, 0, "-", "quantization"], [506, 0, 0, "-", "tuning"]], "neural_compressor.ux.utils.workload.config": [[497, 2, 1, "", "Config"]], "neural_compressor.ux.utils.workload.config.Config": [[497, 4, 1, "", "dump"], [497, 4, 1, "", "get_performance_configs"], [497, 4, 1, "", "get_performance_cores_per_instance"], [497, 4, 1, "", "get_performance_num_of_instance"], [497, 4, 1, "", "initialize"], [497, 4, 1, "", "load"], [497, 4, 1, "", "process_transform"], [497, 4, 1, "", "remove_accuracy_metric"], [497, 4, 1, "", "remove_dataloader"], [497, 4, 1, "", "set_accuracy_and_performance_batch_sizes"], [497, 4, 1, "", "set_accuracy_goal"], [497, 4, 1, "", "set_accuracy_metric"], [497, 4, 1, "", "set_evaluation_dataloader"], [497, 4, 1, "", "set_evaluation_dataset_path"], [497, 4, 1, "", "set_inputs"], [497, 4, 1, "", "set_optimization_precision"], [497, 4, 1, "", "set_outputs"], [497, 4, 1, "", "set_performance_cores_per_instance"], [497, 4, 1, "", "set_performance_iterations"], [497, 4, 1, "", "set_performance_num_of_instance"], [497, 4, 1, "", "set_performance_warmup"], [497, 4, 1, "", "set_quantization_approach"], [497, 4, 1, "", "set_quantization_batch_size"], [497, 4, 1, "", "set_quantization_dataloader"], [497, 4, 1, "", "set_quantization_dataset_path"], [497, 4, 1, "", "set_quantization_sampling_size"], [497, 4, 1, "", "set_transform"], [497, 4, 1, "", "set_workspace"]], "neural_compressor.ux.utils.workload.dataloader": [[498, 2, 1, "", "Dataloader"], [498, 2, 1, "", "Dataset"], [498, 2, 1, "", "Filter"], [498, 2, 1, "", "LabelBalance"], [498, 2, 1, "", "Transform"]], "neural_compressor.ux.utils.workload.dataloader.Dataloader": [[498, 4, 1, "", "serialize"], [498, 4, 1, "", "set_dataset"], [498, 4, 1, "", "set_transforms_from_list"]], "neural_compressor.ux.utils.workload.dataloader.Dataset": [[498, 4, 1, "", "is_dummy"], [498, 4, 1, "", "serialize"]], "neural_compressor.ux.utils.workload.dataloader.Transform": [[498, 4, 1, "", "serialize"]], "neural_compressor.ux.utils.workload.evaluation": [[499, 2, 1, "", "Accuracy"], [499, 2, 1, "", "Configs"], [499, 2, 1, "", "Evaluation"], [499, 2, 1, "", "Metric"], [499, 2, 1, "", "Performance"], [499, 2, 1, "", "Postprocess"], [499, 2, 1, "", "PostprocessSchema"]], "neural_compressor.ux.utils.workload.evaluation.Evaluation": [[499, 4, 1, "", "set_accuracy_postprocess_transforms"]], "neural_compressor.ux.utils.workload.evaluation.Metric": [[499, 3, 1, "", "name"], [499, 3, 1, "", "param"], [499, 4, 1, "", "serialize"]], "neural_compressor.ux.utils.workload.evaluation.PostprocessSchema": [[499, 4, 1, "", "get_label_shift_value"]], "neural_compressor.ux.utils.workload.graph_optimization": [[500, 2, 1, "", "GraphOptimization"]], "neural_compressor.ux.utils.workload.graph_optimization.GraphOptimization": [[500, 4, 1, "", "set_precisions"]], "neural_compressor.ux.utils.workload.mixed_precision": [[502, 2, 1, "", "MixedPrecision"]], "neural_compressor.ux.utils.workload.mixed_precision.MixedPrecision": [[502, 4, 1, "", "set_precisions"]], "neural_compressor.ux.utils.workload.model": [[503, 2, 1, "", "Model"]], "neural_compressor.ux.utils.workload.model.Model": [[503, 3, 1, "", "inputs"], [503, 3, 1, "", "outputs"], [503, 4, 1, "", "serialize"]], "neural_compressor.ux.utils.workload.pruning": [[504, 2, 1, "", "AdamOptimizer"], [504, 2, 1, "", "AdamWOptimizer"], [504, 2, 1, "", "Approach"], [504, 2, 1, "", "Criterion"], [504, 2, 1, "", "CrossEntropyLossCriterion"], [504, 2, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [504, 2, 1, "", "KnowledgeDistillationLossCriterion"], [504, 2, 1, "", "Optimizer"], [504, 2, 1, "", "Pruning"], [504, 2, 1, "", "SGDOptimizer"], [504, 2, 1, "", "SelfKnowledgeDistillationLoss"], [504, 2, 1, "", "SparseCategoricalCrossentropyCriterion"], [504, 2, 1, "", "Train"], [504, 2, 1, "", "WeightCompressionApproach"], [504, 1, 1, "", "parse_dict_value_to_float"], [504, 1, 1, "", "parse_dict_value_to_int"]], "neural_compressor.ux.utils.workload.pruning.Train": [[504, 4, 1, "", "serialize"], [504, 4, 1, "", "set_postprocess_transforms"]], "neural_compressor.ux.utils.workload.pruning.WeightCompressionApproach": [[504, 4, 1, "", "initialize_pruners"], [504, 4, 1, "", "serialize"], [504, 4, 1, "", "serialize_pruner"]], "neural_compressor.ux.utils.workload.quantization": [[505, 2, 1, "", "Advance"], [505, 2, 1, "", "Calibration"], [505, 2, 1, "", "Quantization"], [505, 2, 1, "", "WiseConfig"], [505, 2, 1, "", "WiseConfigDetails"]], "neural_compressor.ux.utils.workload.tuning": [[506, 2, 1, "", "AccCriterion"], [506, 2, 1, "", "Diagnosis"], [506, 2, 1, "", "ExitPolicy"], [506, 2, 1, "", "MultiObjectives"], [506, 2, 1, "", "Strategy"], [506, 2, 1, "", "Tuning"], [506, 2, 1, "", "Workspace"]], "neural_compressor.ux.utils.workload.tuning.MultiObjectives": [[506, 3, 1, "", "objective"], [506, 3, 1, "", "weight"]], "neural_compressor.ux.utils.workload.tuning.Tuning": [[506, 4, 1, "", "set_max_trials"], [506, 4, 1, "", "set_performance_only"], [506, 4, 1, "", "set_random_seed"], [506, 4, 1, "", "set_timeout"], [506, 4, 1, "", "set_workspace"]], "neural_compressor.ux.utils.yaml_utils": [[507, 1, 1, "", "float_representer"], [507, 1, 1, "", "pruner_representer"]], "neural_compressor.ux.web": [[508, 0, 0, "-", "communication"], [509, 0, 0, "-", "configuration"], [510, 0, 0, "-", "exceptions"], [512, 0, 0, "-", "router"], [513, 0, 0, "-", "server"], [516, 0, 0, "-", "service"]], "neural_compressor.ux.web.communication": [[508, 2, 1, "", "Message"], [508, 2, 1, "", "MessageQueue"], [508, 2, 1, "", "Request"], [508, 2, 1, "", "Response"], [508, 1, 1, "", "create_simple_response"]], "neural_compressor.ux.web.communication.Message": [[508, 3, 1, "", "data"], [508, 3, 1, "", "status"], [508, 3, 1, "", "subject"]], "neural_compressor.ux.web.communication.MessageQueue": [[508, 4, 1, "", "get"], [508, 4, 1, "", "post_error"], [508, 4, 1, "", "post_failure"], [508, 4, 1, "", "post_success"]], "neural_compressor.ux.web.configuration": [[509, 2, 1, "", "Configuration"]], "neural_compressor.ux.web.configuration.Configuration": [[509, 4, 1, "", "determine_gui_port"], [509, 4, 1, "", "determine_log_level"], [509, 4, 1, "", "determine_server_port"], [509, 4, 1, "", "determine_url_prefix"], [509, 4, 1, "", "determine_values_from_environment"], [509, 4, 1, "", "dump_token_to_file"], [509, 4, 1, "", "get_command_line_args"], [509, 4, 1, "", "get_url"], [509, 3, 1, "", "global_config_directory"], [509, 4, 1, "", "is_port_taken"], [509, 4, 1, "", "set_up"]], "neural_compressor.ux.web.exceptions": [[510, 2, 1, "", "ServiceNotFoundException"]], "neural_compressor.ux.web.router": [[512, 2, 1, "", "DeferredRoutingDefinition"], [512, 2, 1, "", "DeferredSubprocessRoutingDefinition"], [512, 2, 1, "", "RealtimeRoutingDefinition"], [512, 2, 1, "", "Router"], [512, 2, 1, "", "RoutingDefinition"], [512, 1, 1, "", "find_pattern_in_graph"], [512, 1, 1, "", "get_model_graph"], [512, 1, 1, "", "get_system_info"]], "neural_compressor.ux.web.router.Router": [[512, 4, 1, "", "handle"]], "neural_compressor.ux.web.server": [[513, 1, 1, "", "allow_api_call"], [513, 1, 1, "", "block_iframe"], [513, 1, 1, "", "block_sniffing"], [513, 1, 1, "", "build_parameters"], [513, 1, 1, "", "disable_cache"], [513, 1, 1, "", "get_tls_args"], [513, 1, 1, "", "handle_api_call"], [513, 1, 1, "", "page_not_found"], [513, 1, 1, "", "require_api_token"], [513, 1, 1, "", "root"], [513, 1, 1, "", "run_server"], [513, 1, 1, "", "web_socket_publisher"]], "neural_compressor.ux.web.service": [[514, 0, 0, "-", "benchmark"], [515, 0, 0, "-", "history_snapshot_parser"], [517, 0, 0, "-", "model"], [518, 0, 0, "-", "optimization"], [519, 0, 0, "-", "profiling"], [520, 0, 0, "-", "request_data_processor"], [521, 0, 0, "-", "response_generator"], [522, 0, 0, "-", "workload"]], "neural_compressor.ux.web.service.benchmark": [[514, 2, 1, "", "BenchmarkService"]], "neural_compressor.ux.web.service.history_snapshot_parser": [[515, 2, 1, "", "HistorySnapshotParser"]], "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser": [[515, 4, 1, "", "extract_accuracy"], [515, 4, 1, "", "extract_performance"], [515, 4, 1, "", "parse_history_item"], [515, 4, 1, "", "parse_history_snapshot"]], "neural_compressor.ux.web.service.model": [[517, 2, 1, "", "ModelService"]], "neural_compressor.ux.web.service.model.ModelService": [[517, 4, 1, "", "get_model"]], "neural_compressor.ux.web.service.optimization": [[518, 2, 1, "", "OptimizationService"]], "neural_compressor.ux.web.service.profiling": [[519, 2, 1, "", "ProfilingService"]], "neural_compressor.ux.web.service.profiling.ProfilingService": [[519, 4, 1, "", "generate_csv"]], "neural_compressor.ux.web.service.request_data_processor": [[520, 2, 1, "", "RequestDataProcessor"]], "neural_compressor.ux.web.service.request_data_processor.RequestDataProcessor": [[520, 4, 1, "", "get_string_value"]], "neural_compressor.ux.web.service.response_generator": [[521, 2, 1, "", "ResponseGenerator"]], "neural_compressor.ux.web.service.response_generator.ResponseGenerator": [[521, 4, 1, "", "add_refresh"], [521, 4, 1, "", "from_exception"], [521, 4, 1, "", "get_status_code_for_exception"], [521, 4, 1, "", "serve_from_filesystem"]], "neural_compressor.ux.web.service.workload": [[522, 2, 1, "", "WorkloadService"]], "neural_compressor.ux.web.service.workload.WorkloadService": [[522, 4, 1, "", "get_code_template"], [522, 4, 1, "", "get_config"], [522, 4, 1, "", "get_output"]]}, "objtypes": {"0": "py:module", "1": "py:function", "2": "py:class", "3": "py:property", "4": "py:method", "5": "py:attribute", "6": "py:data", "7": "py:exception"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "function", "Python function"], "2": ["py", "class", "Python class"], "3": ["py", "property", "Python property"], "4": ["py", "method", "Python method"], "5": ["py", "attribute", "Python attribute"], "6": ["py", "data", "Python data"], "7": ["py", "exception", "Python exception"]}, "titleterms": {"644ec953a7dc_pruning_support": 0, "6ece06672ed3_v1_14": 1, "modul": [1, 5, 6, 8, 11, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 96, 97, 98, 99, 101, 102, 103, 104, 107, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 158, 160, 161, 162, 163, 164, 165, 166, 169, 172, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 192, 193, 196, 197, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229, 230, 231, 234, 236, 237, 238, 240, 241, 242, 243, 244, 246, 247, 249, 250, 251, 253, 254, 255, 256, 257, 258, 259, 260, 261, 265, 266, 267, 269, 270, 271, 272, 273, 275, 276, 277, 278, 281, 282, 283, 286, 287, 288, 289, 290, 291, 292, 294, 295, 297, 298, 299, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 327, 328, 329, 330, 331, 332, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 389, 390, 391, 392, 394, 395, 396, 397, 400, 401, 402, 404, 405, 407, 408, 409, 410, 411, 413, 415, 416, 422, 423, 425, 426, 428, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 444, 446, 447, 448, 449, 451, 454, 455, 457, 458, 460, 461, 463, 464, 465, 466, 467, 469, 470, 471, 472, 474, 475, 476, 478, 479, 480, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 551], "content": [1, 5, 6, 7, 8, 11, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 96, 97, 98, 99, 101, 102, 103, 104, 107, 109, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 160, 161, 162, 163, 164, 165, 166, 169, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 400, 401, 402, 404, 405, 407, 408, 409, 410, 411, 413, 415, 416, 422, 423, 425, 426, 428, 430, 431, 432, 433, 435, 436, 437, 438, 439, 440, 441, 442, 444, 446, 447, 448, 449, 451, 452, 454, 455, 457, 458, 460, 461, 463, 464, 465, 466, 467, 469, 470, 471, 472, 474, 475, 476, 478, 479, 480, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 494, 495, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 530, 551, 564, 574], "function": [1, 5, 6, 13, 32, 38, 39, 61, 62, 64, 98, 99, 110, 112, 140, 141, 142, 146, 147, 148, 150, 153, 155, 158, 160, 161, 162, 163, 164, 166, 169, 176, 184, 186, 190, 193, 194, 195, 198, 200, 201, 202, 203, 205, 207, 208, 210, 214, 222, 224, 228, 231, 232, 233, 235, 236, 237, 239, 240, 241, 242, 243, 246, 247, 249, 250, 251, 252, 253, 261, 265, 266, 270, 277, 281, 286, 287, 288, 290, 293, 294, 295, 297, 298, 299, 300, 301, 302, 306, 310, 312, 313, 316, 324, 328, 330, 331, 334, 335, 337, 338, 340, 341, 343, 344, 354, 355, 356, 358, 363, 365, 366, 368, 370, 373, 374, 379, 382, 383, 384, 395, 405, 422, 426, 428, 439, 440, 441, 444, 447, 451, 455, 457, 460, 463, 465, 466, 469, 475, 476, 484, 487, 492, 496, 504, 507, 508, 512, 513, 581], "6f0d0f71d92e_v1_13": 2, "9e89549a08c8_v1_11": 3, "block_mask": 4, "env": 5, "neural_compressor": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523], "adaptor": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 531, 532], "class": [6, 8, 11, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 94, 96, 97, 98, 99, 101, 102, 103, 104, 107, 109, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 138, 139, 141, 142, 144, 145, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 160, 161, 162, 163, 165, 166, 169, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 243, 244, 245, 246, 249, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 265, 267, 268, 269, 271, 272, 273, 275, 276, 277, 278, 279, 280, 281, 282, 283, 286, 288, 289, 290, 291, 292, 293, 294, 297, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 335, 336, 337, 338, 339, 341, 342, 345, 346, 347, 348, 350, 351, 352, 353, 354, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 396, 397, 400, 401, 402, 404, 407, 408, 409, 410, 411, 413, 415, 416, 423, 425, 428, 430, 431, 432, 433, 435, 436, 437, 438, 442, 446, 448, 449, 452, 454, 458, 461, 464, 465, 467, 470, 471, 472, 474, 478, 479, 481, 482, 483, 484, 486, 488, 489, 490, 491, 494, 495, 497, 498, 499, 500, 502, 503, 504, 505, 506, 508, 509, 510, 512, 514, 515, 517, 518, 519, 520, 521, 522, 531, 551, 564], "subpackag": [7, 16, 81, 105, 106, 108, 157, 170, 195, 233, 245, 262, 263, 268, 279, 293, 320, 393, 398, 412, 417, 424, 452, 468, 477, 485, 511], "submodul": [7, 12, 16, 28, 45, 70, 81, 89, 95, 100, 105, 106, 108, 111, 124, 137, 143, 150, 156, 157, 159, 171, 178, 190, 194, 198, 205, 216, 228, 232, 235, 239, 245, 252, 262, 264, 268, 274, 280, 284, 293, 300, 304, 320, 326, 335, 345, 349, 357, 369, 388, 393, 398, 399, 403, 406, 412, 414, 417, 418, 424, 427, 429, 434, 443, 445, 450, 452, 453, 456, 459, 462, 468, 473, 477, 485, 493, 501, 511, 516], "packag": [7, 28, 150, 157, 178, 190, 194, 195, 198, 205, 216, 228, 232, 233, 235, 239, 245, 252, 268, 274, 279, 280, 293, 300, 304, 320, 326, 335, 345, 388, 393, 452, 564, 604, 606, 608, 609], "kera": [8, 435], "keras_util": [9, 10], "quantiz": [10, 37, 291, 313, 505, 527, 530, 547, 566, 580, 586, 589, 600, 611, 619, 620, 621, 629], "mxnet": [11, 577, 591, 620, 625, 629], "mxnet_util": [12, 13], "util": [13, 38, 140, 147, 164, 243, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 395, 439, 475, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 534, 539, 573], "onnxrt": [14, 427, 428, 577, 591, 625], "ox_util": [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38], "calibr": 15, "oper": [17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36], "activ": 17, "argmax": 18, "attent": 19, "binary_op": 20, "concat": 21, "conv": 22, "direct_q8": 23, "embed_layernorm": 24, "gather": 25, "gavgpool": 26, "gemm": 27, "lstm": 29, "matmul": 30, "maxpool": 31, "op": 32, "pad": 33, "pool": 34, "resiz": 35, "split": 36, "pytorch": [39, 340, 429, 430, 577, 581, 591, 620, 621, 624, 625, 629], "queri": [40, 531], "tensorflow": [41, 433, 434, 435, 436, 437, 438, 439, 577, 581, 591, 620, 621, 624, 625, 629], "tf_util": [42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140], "graph_convert": 42, "graph_converter_without_calib": 43, "graph_rewrit": [44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103], "bf16": [44, 45, 535], "bf16_convert": [44, 141], "gener": [46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79], "convert_add_to_biasadd": 46, "convert_layout": 47, "convert_leakyrelu": 48, "convert_nan_to_random": 49, "convert_placeholder_to_const": 50, "dequantize_cast_optim": 51, "dilated_contract": 52, "dummy_biasadd": 53, "expanddims_optim": 54, "fetch_weight_from_reshap": 55, "fold_batch_norm": 56, "fold_const": 57, "fuse_biasadd_add": 58, "fuse_column_wise_mul": 59, "fuse_conv_with_math": 60, "fuse_decomposed_bn": 61, "fuse_decomposed_in": 62, "fuse_gelu": 63, "fuse_layer_norm": 64, "fuse_pad_with_conv": 65, "fuse_pad_with_fp32_conv": 66, "fuse_reshape_transpos": 67, "graph_cse_optim": 68, "grappler_pass": 69, "insert_print_nod": 71, "move_squeeze_after_relu": 72, "pre_optim": 73, "remove_training_nod": 74, "rename_batch_norm": 75, "split_shared_input": 76, "strip_equivalent_nod": 77, "strip_unused_nod": 78, "switch_optim": 79, "graph_bas": 80, "int8": [82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 583, 629], "freeze_fake_qu": 82, "freeze_valu": 83, "freeze_value_without_calib": 84, "fuse_conv_redundant_dequant": 85, "fuse_conv_requant": 86, "fuse_matmul_redundant_dequant": 87, "fuse_matmul_requant": 88, "meta_op_optim": 90, "post_hostconst_convert": 91, "post_quantized_op_cs": 92, "rnn_convert": 93, "scale_propag": 94, "onnx": [95, 96, 97, 98, 99, 144, 533, 537, 589, 620, 629], "onnx_graph": 96, "onnx_nod": 97, "onnx_schema": 98, "tf2onnx_util": 99, "qdq": [100, 101, 102, 103, 117, 118, 119, 120, 121, 122, 123, 124, 125, 629], "insert_qdq_pattern": 101, "merge_duplicated_qdq": 102, "share_qdq_y_pattern": 103, "graph_util": 104, "quantize_graph": [106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132], "qat": [107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 629], "fake_quant": 107, "quantize_config": 109, "quantize_help": 110, "quantize_lay": [111, 112, 113, 114, 115], "optimize_lay": 112, "quantize_layer_add": 113, "quantize_layer_bas": 114, "quantize_layer_bn": 115, "quantize_wrapp": 116, "fuse_qdq_bn": 117, "fuse_qdq_concatv2": 118, "fuse_qdq_conv": 119, "fuse_qdq_deconv": 120, "fuse_qdq_in": 121, "fuse_qdq_matmul": 122, "fuse_qdq_pool": 123, "optimize_qdq": 125, "quantize_graph_bas": 126, "quantize_graph_bn": 127, "quantize_graph_concatv2": 128, "quantize_graph_conv": 129, "quantize_graph_for_intel_cpu": 130, "quantize_graph_matmul": 131, "quantize_graph_pool": 132, "quantize_graph_common": 133, "tf2onnx_convert": 134, "transform_graph": [135, 136, 137, 138, 139], "bias_correct": 135, "graph_transform_bas": 136, "insert_log": 138, "rerange_quantized_concat": 139, "torch_util": [141, 142, 143, 144, 145, 146, 147, 210], "hawq_metr": 142, "smooth_quant": [145, 151], "symbolic_trac": 146, "algorithm": [148, 149, 150, 151, 152, 540, 626], "fast_bias_correct": 149, "weight_correct": 152, "benchmark": [153, 202, 342, 343, 344, 345, 361, 514, 543, 550, 574, 575, 619], "compress": [154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164], "callback": 154, "distil": [155, 156, 238, 561, 579, 580, 619, 629], "criterion": [155, 203, 552], "pruner": [158, 159, 160, 161, 162, 163, 164, 277, 288], "criteria": [158, 616, 617, 626], "pattern": [160, 280, 281, 282, 286, 616, 617], "reg": 162, "schedul": [163, 290, 292, 567, 616, 617], "conf": [165, 166, 167, 168], "config": [165, 169, 497, 544, 576, 577, 613], "dotdict": 166, "pythonic_config": 168, "contrib": [170, 171, 172, 173, 568], "strategi": [171, 172, 173, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 571, 572, 623, 626], "sigopt": [172, 623, 626], "tpe": [173, 626], "data": [174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 553, 582], "dataload": [174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 204, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 363, 498, 554, 576, 577], "base_dataload": [174, 212], "default_dataload": [176, 214], "fetcher": [177, 215], "attribut": [178, 186, 195, 224, 233, 245, 279, 304, 335, 407, 525], "mxnet_dataload": [179, 217], "onnxrt_dataload": [180, 218], "pytorch_dataload": [181, 219], "sampler": [182, 220], "tensorflow_dataload": [183, 221], "dataset": [184, 185, 186, 187, 188, 189, 190, 191, 222, 223, 224, 225, 226, 227, 228, 229, 364, 555, 574, 577, 587], "bert_dataset": [184, 222], "coco_dataset": [185, 223], "dummy_dataset": [187, 225], "dummy_dataset_v2": [188, 226], "imagenet_dataset": [189, 227], "style_transfer_dataset": [191, 229], "filter": [192, 193, 194, 230, 231, 232], "coco_filt": [192, 230], "transform": [196, 197, 198, 199, 200, 201, 234, 235, 236, 237, 379, 556, 587, 625], "coco_transform": 196, "imagenet_transform": [197, 234], "postprocess": [199, 209], "token": [200, 236], "experiment": [202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292], "common": [203, 204, 205, 206, 207, 208, 209, 210, 527, 549, 584], "metric": [206, 246, 247, 248, 249, 250, 251, 252, 253, 294, 295, 296, 297, 298, 299, 300, 301, 370, 494, 536, 557, 587, 591], "model": [207, 303, 304, 305, 306, 307, 308, 309, 310, 311, 371, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 503, 517, 558, 569, 574, 583, 586, 589, 593, 600, 629], "optim": [208, 372, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 518, 559, 574, 601, 611, 614], "compon": [211, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 560], "export": [239, 240, 241, 242, 243, 583], "qlinear2qdq": 240, "tf2onnx": 241, "torch2onnx": 242, "graph_optim": [244, 449, 450, 451, 500], "bleu": [246, 294, 551], "bleu_util": [247, 295], "coco_label_map": [248, 296], "coco_tool": [249, 297], "evaluate_squad": [250, 298], "f1": [251, 299], "mixed_precis": [254, 453, 454, 455, 502], "model_convers": 255, "na": [256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 528, 564, 574, 619], "basic_na": 256, "dyna": 257, "dynast": [258, 259, 260, 261, 262, 263, 264, 265, 266, 267], "dynas_manag": 258, "dynas_predictor": 259, "dynas_search": 260, "dynas_util": 261, "supernetwork": [263, 264, 265, 266, 267], "machine_transl": [264, 265, 266, 267], "modules_supernetwork": 265, "transformer_interfac": 266, "transformer_supernetwork": 267, "nas_util": 270, "search_algorithm": 271, "pruner_legaci": [272, 273, 274, 275, 276, 277], "gradient_sensit": 272, "group_lasso": 273, "magnitud": 275, "pattern_lock": 276, "prune": [278, 289, 459, 460, 461, 504, 565, 574, 616, 617, 619, 629], "pruning_recip": [279, 280, 281, 282], "tile_pattern": 282, "pruning_v2": 283, "pytorch_prun": [284, 285, 286, 287, 288, 289, 290], "logger": [285, 338, 487], "prune_util": 287, "mix_precis": 302, "base_model": 303, "keras_model": 305, "mxnet_model": 307, "nets_factori": 308, "onnx_model": 309, "tensorflow_model": 310, "torch_model": 311, "object": [312, 546, 613], "auto_mixed_precis": 314, "basic": [315, 528, 626], "bayesian": [316, 626], "conserv": [317, 626], "exhaust": [318, 626], "hawq_v2": [319, 626], "mse": [321, 626], "mse_v2": [322, 626], "random": [323, 626], "constant": [325, 333], "tuning_sampl": 327, "tuning_spac": 328, "tuning_struct": 329, "train": [331, 527, 548, 581, 620], "collect_layer_histogram": 332, "create_obj_from_config": 334, "kl_diverg": 336, "load_huggingfac": 337, "option": [339, 574, 581, 599], "ux": [342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522], "benchmark_model": 343, "execute_benchmark": 344, "config_gener": [346, 347, 348, 349, 350, 351, 352, 353], "benchmark_config_gener": 346, "graph_optimization_config_gener": 348, "mixed_precision_config_gener": 350, "profiling_config_gener": 351, "pruning_config_gener": 352, "quantization_config_gener": 353, "configuration_wizard": [354, 355, 356, 357, 358, 359], "configuration_pars": 354, "get_boundary_nod": 355, "get_configur": 356, "params_feed": 358, "pruning_config_pars": 359, "db_manag": [360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395], "db_model": [361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381], "benchmark_result": 362, "domain": [365, 423], "domain_flavour": 366, "exampl": [367, 527, 528, 531, 575, 576, 577, 579, 580, 581, 582, 583, 592, 593, 596, 600, 613, 614, 616, 617, 620, 624, 629], "framework": [368, 576, 577, 583, 585, 593, 619], "optimization_typ": 373, "precis": [374, 545, 592, 621], "profil": [375, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 519, 574], "profiling_result": 376, "project": [377, 574], "pruning_detail": 378, "tuning_detail": 380, "tuning_histori": [381, 465], "db_oper": [382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392], "benchmark_api_interfac": 382, "dataset_api_interfac": 383, "diagnosis_api_interfac": 385, "dictionaries_api_interfac": 386, "examples_api_interfac": 387, "model_api_interfac": 389, "optimization_api_interfac": 390, "profiling_api_interfac": 391, "project_api_interfac": 392, "params_interfac": 394, "diagnosi": [396, 397, 398, 399, 400, 401, 402, 403, 404, 574], "factori": [397, 448, 467, 472], "onnx_diagnosi": [399, 400], "onnxrt_diagnosi": 400, "op_detail": 401, "op_entri": 402, "tensorflow_diagnosi": [403, 404], "file_brows": [405, 406], "graph": [407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 574], "collaps": 408, "edg": 409, "graph_read": 411, "node": 413, "reader": [414, 415, 416], "onnxrt_read": 415, "tensorflow_read": 416, "jobs_manag": [418, 419, 420, 421], "jobs_control_queu": 419, "request": [421, 526], "manage_workspac": 422, "model_type_gett": 426, "repositori": 431, "shape": 432, "frozen_pb": 433, "meta_graph": 436, "saved_model": 438, "model_zoo": [440, 441, 442, 443, 444], "download_config": 440, "download_model": 441, "download": 442, "list_model": 444, "names_mapp": [445, 446], "execute_optim": 447, "optimize_model": [451, 455, 457, 460], "neural_coder_optim": [456, 457], "tune": [462, 463, 464, 506, 620, 626], "tune_model": 463, "execute_profil": 466, "profile_model": 469, "tensorflow_profil": [472, 473, 474, 475], "inc_bench": 476, "const": 478, "environ": [479, 589, 597], "except": [480, 510], "executor": 481, "expiring_dict": 482, "github_info": 483, "hw_info": 484, "json_seri": 486, "parser": 488, "proc": 489, "process": [490, 626], "singleton": 491, "status_upd": 492, "templat": [493, 494, 495, 526], "workdir": 495, "workload": [497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 522], "evalu": [499, 581], "yaml_util": 507, "web": [508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522], "commun": 508, "configur": [509, 581, 585, 615, 619, 623, 628], "router": 512, "server": 513, "servic": [514, 515, 516, 517, 518, 519, 520, 521, 522], "history_snapshot_pars": 515, "request_data_processor": 520, "response_gener": 521, "version": 523, "intel": [524, 530, 574, 588, 589, 597, 605, 611, 629, 630], "neural": [524, 527, 528, 530, 564, 574, 588, 589, 594, 598, 600, 605, 611, 616, 617, 623, 630], "compressor": [524, 527, 530, 574, 588, 589, 605, 611, 623, 630], "document": [524, 530, 630], "section": [524, 630], "contributor": [525, 526], "coven": [525, 526], "code": [525, 526, 528, 612], "conduct": [525, 526], "our": 525, "pledg": 525, "standard": 525, "respons": 525, "scope": [525, 617], "enforc": 525, "contribut": [526, 604, 608], "guidelin": 526, "pull": 526, "checklist": 526, "support": [526, 527, 528, 531, 575, 576, 577, 579, 580, 581, 583, 585, 588, 589, 591, 592, 593, 595, 596, 600, 601, 613, 614, 616, 619, 620, 624, 625, 628], "fx": 527, "introduct": [527, 528, 531, 574, 575, 576, 577, 579, 580, 581, 583, 585, 588, 591, 592, 593, 611, 613, 614, 616, 617, 619, 620, 623, 624, 625, 626, 628], "mode": [527, 629], "matrix": [527, 528, 531, 575, 576, 577, 579, 580, 581, 583, 585, 588, 591, 592, 593, 596, 613, 614, 616, 619, 620, 624, 628], "get": [527, 528, 530, 531, 575, 576, 577, 579, 580, 581, 585, 586, 591, 592, 594, 605, 612, 613, 614, 616, 619, 620, 624, 628], "start": [527, 528, 530, 531, 574, 575, 576, 577, 579, 580, 581, 585, 586, 591, 592, 594, 595, 599, 605, 613, 614, 616, 619, 620, 624, 628], "post": [527, 620], "static": [527, 620], "dynam": [527, 528, 620], "awar": [527, 620], "note": [527, 622], "detail": [527, 574, 617], "problem": 527, "architectur": [528, 564, 578, 588, 589], "search": [528, 564, 611], "api": [528, 530, 531, 541, 542, 560, 575, 576, 577, 579, 580, 581, 586, 587, 591, 592, 594, 598, 612, 613, 614, 616, 619], "usag": [528, 600, 611, 624, 626], "1": [528, 574, 581, 584, 587, 611, 629], "python": [528, 530, 570, 586, 591, 594, 598, 599, 606, 609, 619], "yaml": [528, 576, 577, 581, 585, 628], "2": [528, 560, 574, 581, 584, 587, 611, 629], "onli": 528, "advanc": 528, "custom": [528, 574, 591, 626], "secur": [529, 574, 581], "polici": [529, 626], "report": 529, "vulner": 529, "instal": [530, 574, 589, 595, 597, 604, 605, 608], "from": [530, 574, 589], "pypi": [530, 600], "select": [530, 605], "public": [530, 618], "event": [530, 618], "addit": 530, "research": 530, "collabor": 530, "work": [531, 620], "flow": [531, 620], "background": [531, 611], "ad": 531, "new": [531, 574, 606, 609, 626], "backend": 531, "capabl": 531, "implement": 531, "onnxrtadaptor": 531, "runtim": [533, 589, 620, 629], "torch": [534, 629], "convert": 535, "hawq": 536, "symbol": 538, "trace": 538, "user": [542, 576, 577, 581, 587, 619, 627, 628], "face": [542, 587], "mix": [545, 592, 621], "basedataload": 554, "experiement": 560, "deprec": 560, "0": [560, 629], "mixedprecis": 562, "modelconvers": 563, "bench": [574, 598], "tabl": 574, "binari": [574, 589], "sourc": [574, 589], "home": 574, "screen": 574, "creat": [574, 576], "predefin": 574, "displai": 574, "list": [574, 582, 625], "remov": 574, "develop": [574, 604, 608], "tab": 574, "wizard": 574, "edit": 574, "entri": 574, "inform": [574, 590], "demo": 574, "system": [574, 589, 615], "file": [576, 577, 585, 628], "specif": [576, 577], "design": [578, 626], "workflow": 578, "knowledg": [579, 629], "intermedi": 579, "layer": 579, "self": 579, "distribut": [581, 600], "infer": 581, "featur": [581, 585, 588, 600, 601, 605, 619, 620, 624, 628], "pure": 581, "defin": 581, "horovodrun": 581, "execut": 581, "releas": [582, 606, 609, 622], "fp32": 583, "appendix": 583, "frequent": 584, "ask": 584, "question": 584, "build": [584, 591], "issu": [584, 622], "3": [584, 595, 611, 618], "quick": [586, 599], "sampl": 586, "jupyterlab": [586, 605], "extens": [586, 594, 604, 605, 608, 611, 612, 629], "gui": 586, "valid": [586, 589, 629], "incompat": [587, 622], "chang": [587, 610, 612, 622], "between": 587, "v1": 587, "built": [587, 589, 591], "infrastructur": 588, "linux": 589, "prerequisit": 589, "ai": 589, "kit": 589, "window": 589, "requir": [589, 604, 608], "hardwar": [589, 629], "cpu": [589, 597, 629], "base": 589, "64": 589, "compat": 589, "processor": 589, "gpu": 589, "": [589, 612], "xe": 589, "multipl": [589, 613, 629], "vendor": 589, "through": [589, 629], "softwar": 589, "legal": 590, "licens": 590, "citat": 590, "trademark": 590, "singl": [591, 613], "multi": 591, "coder": [594, 598, 600, 611], "what": [594, 612], "do": 594, "we": 594, "offer": 594, "jupyt": [594, 595, 606, 609], "lab": [594, 595], "launcher": [594, 599], "contact": 594, "aw": 595, "amazon": 595, "sagemak": 595, "For": 595, "studio": 595, "notebook": 595, "instanc": 595, "guid": [595, 627], "bigdl": 596, "nano": 596, "platform": [597, 623], "best": [597, 605], "perform": [597, 623], "set": [597, 611], "mkl": 597, "openmp": 597, "jemalloc": 597, "numa": 597, "control": 597, "variabl": 597, "frequenc": 597, "govern": 597, "enabl": [598, 605, 611], "superbench": 598, "argument": 599, "v0": 602, "4": [602, 611, 618], "highlight": 602, "other": 602, "changelog": [603, 607], "neural_compressor_ext_lab": [604, 606], "uninstal": [604, 608], "auto": [605, 611, 621], "Or": 605, "let": 605, "u": 605, "help": 605, "you": 605, "pre": 605, "requisit": 605, "make": [606, 609, 612], "manual": [606, 609], "npm": [606, 609], "autom": [606, 609], "publish": [606, 609], "conda": [606, 609], "forg": [606, 609], "neural_compressor_ext_lab_alibaba": [608, 609], "log": 610, "unreleas": 610, "vscode": 611, "open": 611, "icon": 611, "5": 611, "welcom": 612, "your": 612, "v": 612, "folder": 612, "setup": 612, "up": 612, "run": 612, "straight": 612, "awai": 612, "explor": 612, "test": 612, "go": 612, "further": 612, "orchestr": 614, "One": 614, "shot": 614, "network": [616, 617], "type": 617, "sparsiti": 617, "decai": 617, "regular": 617, "refer": [617, 620], "full": 618, "56": 618, "2023": 618, "2022": 618, "34": 618, "2021": 618, "15": 618, "2018": 618, "2020": 618, "style": 619, "access": 619, "fundament": 620, "scheme": 620, "ipex": 620, "approach": 620, "accuraci": [620, 626], "turn": 621, "off": 621, "dure": 621, "known": 622, "prepar": 623, "benefit": 623, "comparison": 623, "differ": 623, "tensorboard": 624, "space": 626, "exit": 626, "11": 629, "13": 629, "ptq": 629, "9": 629}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"644ec953a7dc_pruning_support": [[0, "module-644ec953a7dc_pruning_support"]], "6ece06672ed3_v1_14": [[1, "module-6ece06672ed3_v1_14"]], "Module Contents": [[1, "module-contents"], [5, "module-contents"], [6, "module-contents"], [8, "module-contents"], [11, "module-contents"], [13, "module-contents"], [14, "module-contents"], [15, "module-contents"], [17, "module-contents"], [18, "module-contents"], [19, "module-contents"], [20, "module-contents"], [21, "module-contents"], [22, "module-contents"], [23, "module-contents"], [24, "module-contents"], [25, "module-contents"], [26, "module-contents"], [27, "module-contents"], [29, "module-contents"], [30, "module-contents"], [31, "module-contents"], [32, "module-contents"], [33, "module-contents"], [34, "module-contents"], [35, "module-contents"], [36, "module-contents"], [37, "module-contents"], [38, "module-contents"], [39, "module-contents"], [40, "module-contents"], [41, "module-contents"], [42, "module-contents"], [43, "module-contents"], [44, "module-contents"], [46, "module-contents"], [47, "module-contents"], [48, "module-contents"], [49, "module-contents"], [50, "module-contents"], [51, "module-contents"], [52, "module-contents"], [53, "module-contents"], [54, "module-contents"], [55, "module-contents"], [56, "module-contents"], [57, "module-contents"], [58, "module-contents"], [59, "module-contents"], [60, "module-contents"], [61, "module-contents"], [62, "module-contents"], [63, "module-contents"], [64, "module-contents"], [65, "module-contents"], [66, "module-contents"], [67, "module-contents"], [68, "module-contents"], [69, "module-contents"], [71, "module-contents"], [72, "module-contents"], [73, "module-contents"], [74, "module-contents"], [75, "module-contents"], [76, "module-contents"], [77, "module-contents"], [78, "module-contents"], [79, "module-contents"], [80, "module-contents"], [82, "module-contents"], [83, "module-contents"], [84, "module-contents"], [85, "module-contents"], [86, "module-contents"], [87, "module-contents"], [88, "module-contents"], [90, "module-contents"], [91, "module-contents"], [92, "module-contents"], [93, "module-contents"], [94, "module-contents"], [96, "module-contents"], [97, "module-contents"], [98, "module-contents"], [99, "module-contents"], [101, "module-contents"], [102, "module-contents"], [103, "module-contents"], [104, "module-contents"], [107, "module-contents"], [109, "module-contents"], [110, "module-contents"], [112, "module-contents"], [113, "module-contents"], [114, "module-contents"], [115, "module-contents"], [116, "module-contents"], [117, "module-contents"], [118, "module-contents"], [119, "module-contents"], [120, "module-contents"], [121, "module-contents"], [122, "module-contents"], [123, "module-contents"], [125, "module-contents"], [126, "module-contents"], [127, "module-contents"], [128, "module-contents"], [129, "module-contents"], [130, "module-contents"], [131, "module-contents"], [132, "module-contents"], [133, "module-contents"], [134, "module-contents"], [135, "module-contents"], [136, "module-contents"], [138, "module-contents"], [139, "module-contents"], [140, "module-contents"], [141, "module-contents"], [142, "module-contents"], [144, "module-contents"], [145, "module-contents"], [146, "module-contents"], [147, "module-contents"], [148, "module-contents"], [149, "module-contents"], [151, "module-contents"], [152, "module-contents"], [153, "module-contents"], [154, "module-contents"], [155, "module-contents"], [158, "module-contents"], [160, "module-contents"], [161, "module-contents"], [162, "module-contents"], [163, "module-contents"], [164, "module-contents"], [165, "module-contents"], [166, "module-contents"], [169, "module-contents"], [172, "module-contents"], [173, "module-contents"], [174, "module-contents"], [175, "module-contents"], [176, "module-contents"], [177, "module-contents"], [179, "module-contents"], [180, "module-contents"], [181, "module-contents"], [182, "module-contents"], [183, "module-contents"], [184, "module-contents"], [185, "module-contents"], [186, "module-contents"], [187, "module-contents"], [188, "module-contents"], [189, "module-contents"], [191, "module-contents"], [192, "module-contents"], [193, "module-contents"], [196, "module-contents"], [197, "module-contents"], [199, "module-contents"], [200, "module-contents"], [201, "module-contents"], [202, "module-contents"], [203, "module-contents"], [204, "module-contents"], [206, "module-contents"], [207, "module-contents"], [208, "module-contents"], [209, "module-contents"], [210, "module-contents"], [211, "module-contents"], [212, "module-contents"], [214, "module-contents"], [215, "module-contents"], [217, "module-contents"], [218, "module-contents"], [219, "module-contents"], [220, "module-contents"], [221, "module-contents"], [222, "module-contents"], [223, "module-contents"], [224, "module-contents"], [225, "module-contents"], [226, "module-contents"], [227, "module-contents"], [229, "module-contents"], [230, "module-contents"], [231, "module-contents"], [234, "module-contents"], [236, "module-contents"], [237, "module-contents"], [238, "module-contents"], [240, "module-contents"], [241, "module-contents"], [242, "module-contents"], [243, "module-contents"], [244, "module-contents"], [246, "module-contents"], [247, "module-contents"], [249, "module-contents"], [250, "module-contents"], [251, "module-contents"], [253, "module-contents"], [254, "module-contents"], [255, "module-contents"], [256, "module-contents"], [257, "module-contents"], [258, "module-contents"], [259, "module-contents"], [260, "module-contents"], [261, "module-contents"], [265, "module-contents"], [266, "module-contents"], [267, "module-contents"], [269, "module-contents"], [270, "module-contents"], [271, "module-contents"], [272, "module-contents"], [273, "module-contents"], [275, "module-contents"], [276, "module-contents"], [277, "module-contents"], [278, "module-contents"], [281, "module-contents"], [282, "module-contents"], [283, "module-contents"], [286, "module-contents"], [287, "module-contents"], [288, "module-contents"], [289, "module-contents"], [290, "module-contents"], [291, "module-contents"], [292, "module-contents"], [294, "module-contents"], [295, "module-contents"], [297, "module-contents"], [298, "module-contents"], [299, "module-contents"], [301, "module-contents"], [302, "module-contents"], [303, "module-contents"], [305, "module-contents"], [306, "module-contents"], [307, "module-contents"], [308, "module-contents"], [309, "module-contents"], [310, "module-contents"], [311, "module-contents"], [312, "module-contents"], [313, "module-contents"], [314, "module-contents"], [315, "module-contents"], [316, "module-contents"], [317, "module-contents"], [318, "module-contents"], [319, "module-contents"], [321, "module-contents"], [322, "module-contents"], [323, "module-contents"], [324, "module-contents"], [327, "module-contents"], [328, "module-contents"], [329, "module-contents"], [330, "module-contents"], [331, "module-contents"], [332, "module-contents"], [334, "module-contents"], [336, "module-contents"], [337, "module-contents"], [338, "module-contents"], [339, "module-contents"], [340, "module-contents"], [341, "module-contents"], [342, "module-contents"], [343, "module-contents"], [344, "module-contents"], [346, "module-contents"], [347, "module-contents"], [348, "module-contents"], [350, "module-contents"], [351, "module-contents"], [352, "module-contents"], [353, "module-contents"], [354, "module-contents"], [355, "module-contents"], [356, "module-contents"], [358, "module-contents"], [359, "module-contents"], [360, "module-contents"], [361, "module-contents"], [362, "module-contents"], [363, "module-contents"], [364, "module-contents"], [365, "module-contents"], [366, "module-contents"], [367, "module-contents"], [368, "module-contents"], [370, "module-contents"], [371, "module-contents"], [372, "module-contents"], [373, "module-contents"], [374, "module-contents"], [375, "module-contents"], [376, "module-contents"], [377, "module-contents"], [378, "module-contents"], [379, "module-contents"], [380, "module-contents"], [381, "module-contents"], [382, "module-contents"], [383, "module-contents"], [384, "module-contents"], [385, "module-contents"], [386, "module-contents"], [387, "module-contents"], [389, "module-contents"], [390, "module-contents"], [391, "module-contents"], [392, "module-contents"], [394, "module-contents"], [395, "module-contents"], [396, "module-contents"], [397, "module-contents"], [400, "module-contents"], [401, "module-contents"], [402, "module-contents"], [404, "module-contents"], [405, "module-contents"], [407, "module-contents"], [408, "module-contents"], [409, "module-contents"], [410, "module-contents"], [411, "module-contents"], [413, "module-contents"], [415, "module-contents"], [416, "module-contents"], [422, "module-contents"], [423, "module-contents"], [425, "module-contents"], [426, "module-contents"], [428, "module-contents"], [430, "module-contents"], [431, "module-contents"], [432, "module-contents"], [433, "module-contents"], [435, "module-contents"], [436, "module-contents"], [437, "module-contents"], [438, "module-contents"], [439, "module-contents"], [440, "module-contents"], [441, "module-contents"], [442, "module-contents"], [444, "module-contents"], [446, "module-contents"], [447, "module-contents"], [448, "module-contents"], [449, "module-contents"], [451, "module-contents"], [454, "module-contents"], [455, "module-contents"], [457, "module-contents"], [458, "module-contents"], [460, "module-contents"], [461, "module-contents"], [463, "module-contents"], [464, "module-contents"], [465, "module-contents"], [466, "module-contents"], [467, "module-contents"], [469, "module-contents"], [470, "module-contents"], [471, "module-contents"], [472, "module-contents"], [474, "module-contents"], [475, "module-contents"], [476, "module-contents"], [478, "module-contents"], [479, "module-contents"], [480, "module-contents"], [481, "module-contents"], [482, "module-contents"], [483, "module-contents"], [484, "module-contents"], [486, "module-contents"], [487, "module-contents"], [488, "module-contents"], [489, "module-contents"], [490, "module-contents"], [491, "module-contents"], [492, "module-contents"], [494, "module-contents"], [495, "module-contents"], [496, "module-contents"], [497, "module-contents"], [498, "module-contents"], [499, "module-contents"], [500, "module-contents"], [502, "module-contents"], [503, "module-contents"], [504, "module-contents"], [505, "module-contents"], [506, "module-contents"], [507, "module-contents"], [508, "module-contents"], [509, "module-contents"], [510, "module-contents"], [512, "module-contents"], [513, "module-contents"], [514, "module-contents"], [515, "module-contents"], [517, "module-contents"], [518, "module-contents"], [519, "module-contents"], [520, "module-contents"], [521, "module-contents"], [522, "module-contents"], [551, "module-contents"]], "Functions": [[1, "functions"], [5, "functions"], [6, "functions"], [13, "functions"], [32, "functions"], [38, "functions"], [39, "functions"], [61, "functions"], [62, "functions"], [64, "functions"], [98, "functions"], [99, "functions"], [110, "functions"], [112, "functions"], [140, "functions"], [141, "functions"], [142, "functions"], [146, "functions"], [147, "functions"], [148, "functions"], [150, "functions"], [153, "functions"], [155, "functions"], [158, "functions"], [160, "functions"], [161, "functions"], [162, "functions"], [163, "functions"], [164, "functions"], [166, "functions"], [169, "functions"], [176, "functions"], [184, "functions"], [186, "functions"], [190, "functions"], [193, "functions"], [194, "functions"], [195, "functions"], [198, "functions"], [200, "functions"], [201, "functions"], [202, "functions"], [203, "functions"], [205, "functions"], [207, "functions"], [208, "functions"], [210, "functions"], [214, "functions"], [222, "functions"], [224, "functions"], [228, "functions"], [231, "functions"], [232, "functions"], [233, "functions"], [235, "functions"], [236, "functions"], [237, "functions"], [239, "functions"], [240, "functions"], [241, "functions"], [242, "functions"], [243, "functions"], [246, "functions"], [247, "functions"], [249, "functions"], [250, "functions"], [251, "functions"], [252, "functions"], [253, "functions"], [261, "functions"], [265, "functions"], [266, "functions"], [270, "functions"], [277, "functions"], [281, "functions"], [286, "functions"], [287, "functions"], [288, "functions"], [290, "functions"], [293, "functions"], [294, "functions"], [295, "functions"], [297, "functions"], [298, "functions"], [299, "functions"], [300, "functions"], [301, "functions"], [302, "functions"], [306, "functions"], [310, "functions"], [312, "functions"], [313, "functions"], [316, "functions"], [324, "functions"], [328, "functions"], [330, "functions"], [331, "functions"], [334, "functions"], [335, "functions"], [337, "functions"], [338, "functions"], [340, "functions"], [341, "functions"], [343, "functions"], [344, "functions"], [354, "functions"], [355, "functions"], [356, "functions"], [358, "functions"], [363, "functions"], [365, "functions"], [366, "functions"], [368, "functions"], [370, "functions"], [373, "functions"], [374, "functions"], [379, "functions"], [382, "functions"], [383, "functions"], [384, "functions"], [395, "functions"], [405, "functions"], [422, "functions"], [426, "functions"], [428, "functions"], [439, "functions"], [440, "functions"], [441, "functions"], [444, "functions"], [447, "functions"], [451, "functions"], [455, "functions"], [457, "functions"], [460, "functions"], [463, "functions"], [465, "functions"], [466, "functions"], [469, "functions"], [475, "functions"], [476, "functions"], [484, "functions"], [487, "functions"], [492, "functions"], [496, "functions"], [504, "functions"], [507, "functions"], [508, "functions"], [512, "functions"], [513, "functions"]], "6f0d0f71d92e_v1_13": [[2, "module-6f0d0f71d92e_v1_13"]], "9e89549a08c8_v1_11": [[3, "module-9e89549a08c8_v1_11"]], "block_mask": [[4, "module-block_mask"]], "env": [[5, "module-env"]], "neural_compressor.adaptor.adaptor": [[6, "module-neural_compressor.adaptor.adaptor"]], "Classes": [[6, "classes"], [8, "classes"], [11, "classes"], [13, "classes"], [14, "classes"], [15, "classes"], [17, "classes"], [18, "classes"], [19, "classes"], [20, "classes"], [21, "classes"], [22, "classes"], [23, "classes"], [24, "classes"], [25, "classes"], [26, "classes"], [27, "classes"], [29, "classes"], [30, "classes"], [31, "classes"], [32, "classes"], [33, "classes"], [34, "classes"], [35, "classes"], [36, "classes"], [37, "classes"], [38, "classes"], [39, "classes"], [40, "classes"], [41, "classes"], [42, "classes"], [43, "classes"], [44, "classes"], [46, "classes"], [47, "classes"], [48, "classes"], [49, "classes"], [50, "classes"], [51, "classes"], [52, "classes"], [53, "classes"], [54, "classes"], [55, "classes"], [56, "classes"], [57, "classes"], [58, "classes"], [59, "classes"], [60, "classes"], [61, "classes"], [62, "classes"], [63, "classes"], [64, "classes"], [65, "classes"], [66, "classes"], [67, "classes"], [68, "classes"], [69, "classes"], [71, "classes"], [72, "classes"], [73, "classes"], [74, "classes"], [75, "classes"], [76, "classes"], [77, "classes"], [78, "classes"], [79, "classes"], [80, "classes"], [82, "classes"], [83, "classes"], [84, "classes"], [85, "classes"], [86, "classes"], [87, "classes"], [88, "classes"], [90, "classes"], [91, "classes"], [92, "classes"], [93, "classes"], [94, "classes"], [96, "classes"], [97, "classes"], [98, "classes"], [99, "classes"], [101, "classes"], [102, "classes"], [103, "classes"], [104, "classes"], [107, "classes"], [109, "classes"], [113, "classes"], [114, "classes"], [115, "classes"], [116, "classes"], [117, "classes"], [118, "classes"], [119, "classes"], [120, "classes"], [121, "classes"], [122, "classes"], [123, "classes"], [125, "classes"], [126, "classes"], [127, "classes"], [128, "classes"], [129, "classes"], [130, "classes"], [131, "classes"], [132, "classes"], [133, "classes"], [134, "classes"], [135, "classes"], [136, "classes"], [138, "classes"], [139, "classes"], [141, "classes"], [142, "classes"], [144, "classes"], [145, "classes"], [148, "classes"], [149, "classes"], [150, "classes"], [151, "classes"], [152, "classes"], [153, "classes"], [154, "classes"], [155, "classes"], [157, "classes"], [158, "classes"], [160, "classes"], [161, "classes"], [162, "classes"], [163, "classes"], [165, "classes"], [166, "classes"], [169, "classes"], [172, "classes"], [173, "classes"], [174, "classes"], [175, "classes"], [176, "classes"], [177, "classes"], [178, "classes"], [179, "classes"], [180, "classes"], [181, "classes"], [182, "classes"], [183, "classes"], [184, "classes"], [185, "classes"], [186, "classes"], [187, "classes"], [188, "classes"], [189, "classes"], [190, "classes"], [191, "classes"], [192, "classes"], [193, "classes"], [194, "classes"], [195, "classes"], [196, "classes"], [197, "classes"], [198, "classes"], [199, "classes"], [200, "classes"], [201, "classes"], [202, "classes"], [203, "classes"], [204, "classes"], [205, "classes"], [206, "classes"], [207, "classes"], [208, "classes"], [209, "classes"], [211, "classes"], [212, "classes"], [214, "classes"], [215, "classes"], [217, "classes"], [218, "classes"], [219, "classes"], [220, "classes"], [221, "classes"], [222, "classes"], [223, "classes"], [224, "classes"], [225, "classes"], [226, "classes"], [227, "classes"], [228, "classes"], [229, "classes"], [230, "classes"], [231, "classes"], [232, "classes"], [233, "classes"], [234, "classes"], [235, "classes"], [236, "classes"], [237, "classes"], [238, "classes"], [243, "classes"], [244, "classes"], [245, "classes"], [246, "classes"], [249, "classes"], [252, "classes"], [253, "classes"], [254, "classes"], [255, "classes"], [256, "classes"], [257, "classes"], [258, "classes"], [259, "classes"], [260, "classes"], [261, "classes"], [265, "classes"], [267, "classes"], [268, "classes"], [269, "classes"], [271, "classes"], [272, "classes"], [273, "classes"], [275, "classes"], [276, "classes"], [277, "classes"], [278, "classes"], [279, "classes"], [280, "classes"], [281, "classes"], [282, "classes"], [283, "classes"], [286, "classes"], [288, "classes"], [289, "classes"], [290, "classes"], [291, "classes"], [292, "classes"], [293, "classes"], [294, "classes"], [297, "classes"], [300, "classes"], [301, "classes"], [302, "classes"], [303, "classes"], [304, "classes"], [305, "classes"], [306, "classes"], [307, "classes"], [308, "classes"], [309, "classes"], [310, "classes"], [311, "classes"], [312, "classes"], [313, "classes"], [314, "classes"], [315, "classes"], [316, "classes"], [317, "classes"], [318, "classes"], [319, "classes"], [321, "classes"], [322, "classes"], [323, "classes"], [324, "classes"], [326, "classes"], [327, "classes"], [328, "classes"], [329, "classes"], [330, "classes"], [331, "classes"], [332, "classes"], [335, "classes"], [336, "classes"], [337, "classes"], [338, "classes"], [339, "classes"], [341, "classes"], [342, "classes"], [345, "classes"], [346, "classes"], [347, "classes"], [348, "classes"], [350, "classes"], [351, "classes"], [352, "classes"], [353, "classes"], [354, "classes"], [358, "classes"], [359, "classes"], [360, "classes"], [361, "classes"], [362, "classes"], [363, "classes"], [364, "classes"], [365, "classes"], [366, "classes"], [367, "classes"], [368, "classes"], [370, "classes"], [371, "classes"], [372, "classes"], [373, "classes"], [374, "classes"], [375, "classes"], [376, "classes"], [377, "classes"], [378, "classes"], [379, "classes"], [380, "classes"], [381, "classes"], [382, "classes"], [383, "classes"], [385, "classes"], [386, "classes"], [387, "classes"], [388, "classes"], [389, "classes"], [390, "classes"], [391, "classes"], [392, "classes"], [393, "classes"], [394, "classes"], [396, "classes"], [397, "classes"], [400, "classes"], [401, "classes"], [402, "classes"], [404, "classes"], [407, "classes"], [408, "classes"], [409, "classes"], [410, "classes"], [411, "classes"], [413, "classes"], [415, "classes"], [416, "classes"], [423, "classes"], [425, "classes"], [428, "classes"], [430, "classes"], [431, "classes"], [432, "classes"], [433, "classes"], [435, "classes"], [436, "classes"], [437, "classes"], [438, "classes"], [442, "classes"], [446, "classes"], [448, "classes"], [449, "classes"], [452, "classes"], [454, "classes"], [458, "classes"], [461, "classes"], [464, "classes"], [465, "classes"], [467, "classes"], [470, "classes"], [471, "classes"], [472, "classes"], [474, "classes"], [478, "classes"], [479, "classes"], [481, "classes"], [482, "classes"], [483, "classes"], [484, "classes"], [486, "classes"], [488, "classes"], [489, "classes"], [490, "classes"], [491, "classes"], [494, "classes"], [495, "classes"], [497, "classes"], [498, "classes"], [499, "classes"], [500, "classes"], [502, "classes"], [503, "classes"], [504, "classes"], [505, "classes"], [506, "classes"], [508, "classes"], [509, "classes"], [510, "classes"], [512, "classes"], [514, "classes"], [515, "classes"], [517, "classes"], [518, "classes"], [519, "classes"], [520, "classes"], [521, "classes"], [522, "classes"], [551, "classes"], [564, "classes"]], "neural_compressor.adaptor": [[7, "module-neural_compressor.adaptor"]], "Subpackages": [[7, "subpackages"], [16, "subpackages"], [81, "subpackages"], [105, "subpackages"], [106, "subpackages"], [108, "subpackages"], [157, "subpackages"], [170, "subpackages"], [195, "subpackages"], [233, "subpackages"], [245, "subpackages"], [262, "subpackages"], [263, "subpackages"], [268, "subpackages"], [279, "subpackages"], [293, "subpackages"], [320, "subpackages"], [393, "subpackages"], [398, "subpackages"], [412, "subpackages"], [417, "subpackages"], [424, "subpackages"], [452, "subpackages"], [468, "subpackages"], [477, "subpackages"], [485, "subpackages"], [511, "subpackages"]], "Submodules": [[7, "submodules"], [12, "submodules"], [16, "submodules"], [28, "submodules"], [45, "submodules"], [70, "submodules"], [81, "submodules"], [89, "submodules"], [95, "submodules"], [100, "submodules"], [105, "submodules"], [106, "submodules"], [108, "submodules"], [111, "submodules"], [124, "submodules"], [137, "submodules"], [143, "submodules"], [150, "submodules"], [156, "submodules"], [157, "submodules"], [159, "submodules"], [171, "submodules"], [178, "submodules"], [190, "submodules"], [194, "submodules"], [198, "submodules"], [205, "submodules"], [216, "submodules"], [228, "submodules"], [232, "submodules"], [235, "submodules"], [239, "submodules"], [245, "submodules"], [252, "submodules"], [262, "submodules"], [264, "submodules"], [268, "submodules"], [274, "submodules"], [280, "submodules"], [284, "submodules"], [293, "submodules"], [300, "submodules"], [304, "submodules"], [320, "submodules"], [326, "submodules"], [335, "submodules"], [345, "submodules"], [349, "submodules"], [357, "submodules"], [369, "submodules"], [388, "submodules"], [393, "submodules"], [398, "submodules"], [399, "submodules"], [403, "submodules"], [406, "submodules"], [412, "submodules"], [414, "submodules"], [417, "submodules"], [418, "submodules"], [424, "submodules"], [427, "submodules"], [429, "submodules"], [434, "submodules"], [443, "submodules"], [445, "submodules"], [450, "submodules"], [452, "submodules"], [453, "submodules"], [456, "submodules"], [459, "submodules"], [462, "submodules"], [468, "submodules"], [473, "submodules"], [477, "submodules"], [485, "submodules"], [493, "submodules"], [501, "submodules"], [511, "submodules"], [516, "submodules"]], "Package Contents": [[7, "package-contents"], [28, "package-contents"], [150, "package-contents"], [157, "package-contents"], [178, "package-contents"], [190, "package-contents"], [194, "package-contents"], [195, "package-contents"], [198, "package-contents"], [205, "package-contents"], [216, "package-contents"], [228, "package-contents"], [232, "package-contents"], [233, "package-contents"], [235, "package-contents"], [239, "package-contents"], [245, "package-contents"], [252, "package-contents"], [268, "package-contents"], [274, "package-contents"], [279, "package-contents"], [280, "package-contents"], [293, "package-contents"], [300, "package-contents"], [304, "package-contents"], [320, "package-contents"], [326, "package-contents"], [335, "package-contents"], [345, "package-contents"], [388, "package-contents"], [393, "package-contents"], [452, "package-contents"], [564, "package-contents"]], "neural_compressor.adaptor.keras": [[8, "module-neural_compressor.adaptor.keras"]], "neural_compressor.adaptor.keras_utils": [[9, "module-neural_compressor.adaptor.keras_utils"]], "neural_compressor.adaptor.keras_utils.quantizer": [[10, "module-neural_compressor.adaptor.keras_utils.quantizer"]], "neural_compressor.adaptor.mxnet": [[11, "module-neural_compressor.adaptor.mxnet"]], "neural_compressor.adaptor.mxnet_utils": [[12, "module-neural_compressor.adaptor.mxnet_utils"]], "neural_compressor.adaptor.mxnet_utils.util": [[13, "module-neural_compressor.adaptor.mxnet_utils.util"]], "neural_compressor.adaptor.onnxrt": [[14, "module-neural_compressor.adaptor.onnxrt"]], "neural_compressor.adaptor.ox_utils.calibration": [[15, "module-neural_compressor.adaptor.ox_utils.calibration"]], "neural_compressor.adaptor.ox_utils": [[16, "module-neural_compressor.adaptor.ox_utils"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[17, "module-neural_compressor.adaptor.ox_utils.operators.activation"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[18, "module-neural_compressor.adaptor.ox_utils.operators.argmax"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[19, "module-neural_compressor.adaptor.ox_utils.operators.attention"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[20, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[21, "module-neural_compressor.adaptor.ox_utils.operators.concat"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[22, "module-neural_compressor.adaptor.ox_utils.operators.conv"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[23, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[24, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[25, "module-neural_compressor.adaptor.ox_utils.operators.gather"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[26, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[27, "module-neural_compressor.adaptor.ox_utils.operators.gemm"]], "neural_compressor.adaptor.ox_utils.operators": [[28, "module-neural_compressor.adaptor.ox_utils.operators"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[29, "module-neural_compressor.adaptor.ox_utils.operators.lstm"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[30, "module-neural_compressor.adaptor.ox_utils.operators.matmul"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[31, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[32, "module-neural_compressor.adaptor.ox_utils.operators.ops"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[33, "module-neural_compressor.adaptor.ox_utils.operators.pad"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[34, "module-neural_compressor.adaptor.ox_utils.operators.pooling"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[35, "module-neural_compressor.adaptor.ox_utils.operators.resize"]], "neural_compressor.adaptor.ox_utils.operators.split": [[36, "module-neural_compressor.adaptor.ox_utils.operators.split"]], "neural_compressor.adaptor.ox_utils.quantizer": [[37, "module-neural_compressor.adaptor.ox_utils.quantizer"]], "neural_compressor.adaptor.ox_utils.util": [[38, "module-neural_compressor.adaptor.ox_utils.util"]], "neural_compressor.adaptor.pytorch": [[39, "module-neural_compressor.adaptor.pytorch"]], "neural_compressor.adaptor.query": [[40, "module-neural_compressor.adaptor.query"]], "neural_compressor.adaptor.tensorflow": [[41, "module-neural_compressor.adaptor.tensorflow"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[42, "module-neural_compressor.adaptor.tf_utils.graph_converter"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[43, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[44, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[45, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[46, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[47, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[48, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[49, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "neural_compressor.adaptor.tf_utils.graph_util": [[104, "module-neural_compressor.adaptor.tf_utils.graph_util"]], "neural_compressor.adaptor.tf_utils": [[105, "module-neural_compressor.adaptor.tf_utils"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[106, "module-neural_compressor.adaptor.tf_utils.quantize_graph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[107, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[108, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[109, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[110, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[111, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[112, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[133, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[134, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[135, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[136, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[137, "module-neural_compressor.adaptor.tf_utils.transform_graph"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[138, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[139, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"]], "neural_compressor.adaptor.tf_utils.util": [[140, "module-neural_compressor.adaptor.tf_utils.util"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[141, "module-neural_compressor.adaptor.torch_utils.bf16_convert"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[142, "module-neural_compressor.adaptor.torch_utils.hawq_metric"]], "neural_compressor.adaptor.torch_utils": [[143, "module-neural_compressor.adaptor.torch_utils"]], "neural_compressor.adaptor.torch_utils.onnx": [[144, "module-neural_compressor.adaptor.torch_utils.onnx"]], "neural_compressor.adaptor.torch_utils.smooth_quant": [[145, "module-neural_compressor.adaptor.torch_utils.smooth_quant"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[146, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"]], "neural_compressor.adaptor.torch_utils.util": [[147, "module-neural_compressor.adaptor.torch_utils.util"]], "neural_compressor.algorithm.algorithm": [[148, "module-neural_compressor.algorithm.algorithm"]], "neural_compressor.algorithm.fast_bias_correction": [[149, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm": [[150, "module-neural_compressor.algorithm"]], "neural_compressor.algorithm.smooth_quant": [[151, "module-neural_compressor.algorithm.smooth_quant"]], "neural_compressor.algorithm.weight_correction": [[152, "module-neural_compressor.algorithm.weight_correction"]], "neural_compressor.benchmark": [[153, "module-neural_compressor.benchmark"]], "neural_compressor.compression.callbacks": [[154, "module-neural_compressor.compression.callbacks"]], "neural_compressor.compression.distillation.criterions": [[155, "module-neural_compressor.compression.distillation.criterions"]], "neural_compressor.compression.distillation": [[156, "module-neural_compressor.compression.distillation"]], "neural_compressor.compression": [[157, "module-neural_compressor.compression"]], "neural_compressor.compression.pruner.criteria": [[158, "module-neural_compressor.compression.pruner.criteria"]], "neural_compressor.compression.pruner": [[159, "module-neural_compressor.compression.pruner"]], "neural_compressor.compression.pruner.patterns": [[160, "module-neural_compressor.compression.pruner.patterns"]], "neural_compressor.compression.pruner.pruners": [[161, "module-neural_compressor.compression.pruner.pruners"]], "neural_compressor.compression.pruner.regs": [[162, "module-neural_compressor.compression.pruner.regs"]], "neural_compressor.compression.pruner.schedulers": [[163, "module-neural_compressor.compression.pruner.schedulers"]], "neural_compressor.compression.pruner.utils": [[164, "module-neural_compressor.compression.pruner.utils"]], "neural_compressor.conf.config": [[165, "module-neural_compressor.conf.config"]], "neural_compressor.conf.dotdict": [[166, "module-neural_compressor.conf.dotdict"]], "neural_compressor.conf": [[167, "module-neural_compressor.conf"]], "neural_compressor.conf.pythonic_config": [[168, "module-neural_compressor.conf.pythonic_config"]], "neural_compressor.config": [[169, "module-neural_compressor.config"]], "neural_compressor.contrib": [[170, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[171, "module-neural_compressor.contrib.strategy"]], "neural_compressor.contrib.strategy.sigopt": [[172, "module-neural_compressor.contrib.strategy.sigopt"]], "neural_compressor.contrib.strategy.tpe": [[173, "module-neural_compressor.contrib.strategy.tpe"]], "neural_compressor.data.dataloaders.base_dataloader": [[174, "module-neural_compressor.data.dataloaders.base_dataloader"]], "neural_compressor.data.dataloaders.dataloader": [[175, "module-neural_compressor.data.dataloaders.dataloader"]], "neural_compressor.data.dataloaders.default_dataloader": [[176, "module-neural_compressor.data.dataloaders.default_dataloader"]], "neural_compressor.data.dataloaders.fetcher": [[177, "module-neural_compressor.data.dataloaders.fetcher"]], "neural_compressor.data.dataloaders": [[178, "module-neural_compressor.data.dataloaders"]], "Attributes": [[178, "attributes"], [186, "attributes"], [195, "attributes"], [224, "attributes"], [233, "attributes"], [245, "attributes"], [279, "attributes"], [304, "attributes"], [335, "attributes"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[179, "module-neural_compressor.data.dataloaders.mxnet_dataloader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[180, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[181, "module-neural_compressor.data.dataloaders.pytorch_dataloader"]], "neural_compressor.data.dataloaders.sampler": [[182, "module-neural_compressor.data.dataloaders.sampler"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[183, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"]], "neural_compressor.data.datasets.bert_dataset": [[184, "module-neural_compressor.data.datasets.bert_dataset"]], "neural_compressor.data.datasets.coco_dataset": [[185, "module-neural_compressor.data.datasets.coco_dataset"]], "neural_compressor.data.datasets.dataset": [[186, "module-neural_compressor.data.datasets.dataset"]], "neural_compressor.data.datasets.dummy_dataset": [[187, "module-neural_compressor.data.datasets.dummy_dataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[188, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "neural_compressor.data.datasets.imagenet_dataset": [[189, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[190, "module-neural_compressor.data.datasets"]], "neural_compressor.data.datasets.style_transfer_dataset": [[191, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "neural_compressor.data.filters.coco_filter": [[192, "module-neural_compressor.data.filters.coco_filter"]], "neural_compressor.data.filters.filter": [[193, "module-neural_compressor.data.filters.filter"]], "neural_compressor.data.filters": [[194, "module-neural_compressor.data.filters"]], "neural_compressor.data": [[195, "module-neural_compressor.data"]], "neural_compressor.data.transforms.coco_transform": [[196, "module-neural_compressor.data.transforms.coco_transform"]], "neural_compressor.data.transforms.imagenet_transform": [[197, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[198, "module-neural_compressor.data.transforms"]], "neural_compressor.data.transforms.postprocess": [[199, "module-neural_compressor.data.transforms.postprocess"]], "neural_compressor.data.transforms.tokenization": [[200, "module-neural_compressor.data.transforms.tokenization"]], "neural_compressor.data.transforms.transform": [[201, "module-neural_compressor.data.transforms.transform"]], "neural_compressor.experimental.benchmark": [[202, "module-neural_compressor.experimental.benchmark"]], "neural_compressor.experimental.common.criterion": [[203, "module-neural_compressor.experimental.common.criterion"]], "neural_compressor.experimental.common.dataloader": [[204, "module-neural_compressor.experimental.common.dataloader"]], "neural_compressor.experimental.common": [[205, "module-neural_compressor.experimental.common"]], "neural_compressor.experimental.common.metric": [[206, "module-neural_compressor.experimental.common.metric"]], "neural_compressor.experimental.common.model": [[207, "module-neural_compressor.experimental.common.model"]], "neural_compressor.experimental.common.optimizer": [[208, "module-neural_compressor.experimental.common.optimizer"]], "neural_compressor.experimental.common.postprocess": [[209, "module-neural_compressor.experimental.common.postprocess"]], "neural_compressor.experimental.common.torch_utils": [[210, "module-neural_compressor.experimental.common.torch_utils"]], "neural_compressor.experimental.component": [[211, "module-neural_compressor.experimental.component"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[212, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[213, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[214, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[215, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[216, "module-neural_compressor.experimental.data.dataloaders"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[217, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[218, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[219, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[220, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[221, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[222, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[223, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "neural_compressor.experimental.data.datasets.dataset": [[224, "module-neural_compressor.experimental.data.datasets.dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[225, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[226, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[227, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "neural_compressor.experimental.data.datasets": [[228, "module-neural_compressor.experimental.data.datasets"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[229, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "neural_compressor.experimental.data.filters.coco_filter": [[230, "module-neural_compressor.experimental.data.filters.coco_filter"]], "neural_compressor.experimental.data.filters.filter": [[231, "module-neural_compressor.experimental.data.filters.filter"]], "neural_compressor.experimental.data.filters": [[232, "module-neural_compressor.experimental.data.filters"]], "neural_compressor.experimental.data": [[233, "module-neural_compressor.experimental.data"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[234, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "neural_compressor.experimental.data.transforms": [[235, "module-neural_compressor.experimental.data.transforms"]], "neural_compressor.experimental.data.transforms.tokenization": [[236, "module-neural_compressor.experimental.data.transforms.tokenization"]], "neural_compressor.experimental.data.transforms.transform": [[237, "module-neural_compressor.experimental.data.transforms.transform"]], "neural_compressor.experimental.distillation": [[238, "module-neural_compressor.experimental.distillation"]], "neural_compressor.experimental.export": [[239, "module-neural_compressor.experimental.export"]], "neural_compressor.experimental.export.qlinear2qdq": [[240, "module-neural_compressor.experimental.export.qlinear2qdq"]], "neural_compressor.experimental.export.tf2onnx": [[241, "module-neural_compressor.experimental.export.tf2onnx"]], "neural_compressor.experimental.export.torch2onnx": [[242, "module-neural_compressor.experimental.export.torch2onnx"]], "neural_compressor.experimental.export.utils": [[243, "module-neural_compressor.experimental.export.utils"]], "neural_compressor.experimental.graph_optimization": [[244, "module-neural_compressor.experimental.graph_optimization"]], "neural_compressor.experimental": [[245, "module-neural_compressor.experimental"]], "neural_compressor.experimental.metric.bleu": [[246, "module-neural_compressor.experimental.metric.bleu"]], "neural_compressor.experimental.metric.bleu_util": [[247, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[248, "module-neural_compressor.experimental.metric.coco_label_map"]], "neural_compressor.experimental.metric.coco_tools": [[249, "module-neural_compressor.experimental.metric.coco_tools"]], "neural_compressor.experimental.metric.evaluate_squad": [[250, "module-neural_compressor.experimental.metric.evaluate_squad"]], "neural_compressor.experimental.metric.f1": [[251, "module-neural_compressor.experimental.metric.f1"]], "neural_compressor.experimental.metric": [[252, "module-neural_compressor.experimental.metric"]], "neural_compressor.experimental.metric.metric": [[253, "module-neural_compressor.experimental.metric.metric"]], "neural_compressor.experimental.mixed_precision": [[254, "module-neural_compressor.experimental.mixed_precision"]], "neural_compressor.experimental.model_conversion": [[255, "module-neural_compressor.experimental.model_conversion"]], "neural_compressor.experimental.nas.basic_nas": [[256, "module-neural_compressor.experimental.nas.basic_nas"]], "neural_compressor.experimental.nas.dynas": [[257, "module-neural_compressor.experimental.nas.dynas"]], "neural_compressor.experimental.nas.dynast.dynas_manager": [[258, "module-neural_compressor.experimental.nas.dynast.dynas_manager"]], "neural_compressor.experimental.nas.dynast.dynas_predictor": [[259, "module-neural_compressor.experimental.nas.dynast.dynas_predictor"]], "neural_compressor.experimental.nas.dynast.dynas_search": [[260, "module-neural_compressor.experimental.nas.dynast.dynas_search"]], "neural_compressor.experimental.nas.dynast.dynas_utils": [[261, "module-neural_compressor.experimental.nas.dynast.dynas_utils"]], "neural_compressor.experimental.nas.dynast": [[262, "module-neural_compressor.experimental.nas.dynast"]], "neural_compressor.experimental.nas.dynast.supernetwork": [[263, "module-neural_compressor.experimental.nas.dynast.supernetwork"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation": [[264, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork": [[265, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface": [[266, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork": [[267, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork"]], "neural_compressor.experimental.nas": [[268, "module-neural_compressor.experimental.nas"]], "neural_compressor.experimental.nas.nas": [[269, "module-neural_compressor.experimental.nas.nas"]], "neural_compressor.experimental.nas.nas_utils": [[270, "module-neural_compressor.experimental.nas.nas_utils"]], "neural_compressor.experimental.nas.search_algorithms": [[271, "module-neural_compressor.experimental.nas.search_algorithms"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[272, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[273, "module-neural_compressor.experimental.pruner_legacy.group_lasso"]], "neural_compressor.experimental.pruner_legacy": [[274, "module-neural_compressor.experimental.pruner_legacy"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[275, "module-neural_compressor.experimental.pruner_legacy.magnitude"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[276, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"]], "neural_compressor.experimental.pruner_legacy.pruner": [[277, "module-neural_compressor.experimental.pruner_legacy.pruner"]], "neural_compressor.experimental.pruning": [[278, "module-neural_compressor.experimental.pruning"]], "neural_compressor.experimental.pruning_recipes": [[279, "module-neural_compressor.experimental.pruning_recipes"]], "neural_compressor.experimental.pruning_recipes.patterns": [[280, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[281, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[282, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "neural_compressor.experimental.pruning_v2": [[283, "module-neural_compressor.experimental.pruning_v2"]], "neural_compressor.experimental.pytorch_pruner": [[284, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[285, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[286, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[287, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[288, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[289, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[290, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "neural_compressor.experimental.quantization": [[291, "module-neural_compressor.experimental.quantization"]], "neural_compressor.experimental.scheduler": [[292, "module-neural_compressor.experimental.scheduler"]], "neural_compressor": [[293, "module-neural_compressor"]], "neural_compressor.metric.bleu": [[294, "module-neural_compressor.metric.bleu"]], "neural_compressor.metric.bleu_util": [[295, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[296, "module-neural_compressor.metric.coco_label_map"]], "neural_compressor.metric.coco_tools": [[297, "module-neural_compressor.metric.coco_tools"]], "neural_compressor.metric.evaluate_squad": [[298, "module-neural_compressor.metric.evaluate_squad"]], "neural_compressor.metric.f1": [[299, "module-neural_compressor.metric.f1"]], "neural_compressor.metric": [[300, "module-neural_compressor.metric"]], "neural_compressor.metric.metric": [[301, "module-neural_compressor.metric.metric"]], "neural_compressor.mix_precision": [[302, "module-neural_compressor.mix_precision"]], "neural_compressor.model.base_model": [[303, "module-neural_compressor.model.base_model"]], "neural_compressor.model": [[304, "module-neural_compressor.model"]], "neural_compressor.model.keras_model": [[305, "module-neural_compressor.model.keras_model"]], "neural_compressor.model.model": [[306, "module-neural_compressor.model.model"]], "neural_compressor.model.mxnet_model": [[307, "module-neural_compressor.model.mxnet_model"]], "neural_compressor.model.nets_factory": [[308, "module-neural_compressor.model.nets_factory"]], "neural_compressor.model.onnx_model": [[309, "module-neural_compressor.model.onnx_model"]], "neural_compressor.model.tensorflow_model": [[310, "module-neural_compressor.model.tensorflow_model"]], "neural_compressor.model.torch_model": [[311, "module-neural_compressor.model.torch_model"]], "neural_compressor.objective": [[312, "module-neural_compressor.objective"]], "neural_compressor.quantization": [[313, "module-neural_compressor.quantization"]], "neural_compressor.strategy.auto_mixed_precision": [[314, "module-neural_compressor.strategy.auto_mixed_precision"]], "neural_compressor.strategy.basic": [[315, "module-neural_compressor.strategy.basic"]], "neural_compressor.strategy.bayesian": [[316, "module-neural_compressor.strategy.bayesian"]], "neural_compressor.strategy.conservative": [[317, "module-neural_compressor.strategy.conservative"]], "neural_compressor.strategy.exhaustive": [[318, "module-neural_compressor.strategy.exhaustive"]], "neural_compressor.strategy.hawq_v2": [[319, "module-neural_compressor.strategy.hawq_v2"]], "neural_compressor.strategy": [[320, "module-neural_compressor.strategy"]], "neural_compressor.strategy.mse": [[321, "module-neural_compressor.strategy.mse"]], "neural_compressor.strategy.mse_v2": [[322, "module-neural_compressor.strategy.mse_v2"]], "neural_compressor.strategy.random": [[323, "module-neural_compressor.strategy.random"]], "neural_compressor.strategy.strategy": [[324, "module-neural_compressor.strategy.strategy"]], "neural_compressor.strategy.utils.constant": [[325, "module-neural_compressor.strategy.utils.constant"]], "neural_compressor.strategy.utils": [[326, "module-neural_compressor.strategy.utils"]], "neural_compressor.strategy.utils.tuning_sampler": [[327, "module-neural_compressor.strategy.utils.tuning_sampler"]], "neural_compressor.strategy.utils.tuning_space": [[328, "module-neural_compressor.strategy.utils.tuning_space"]], "neural_compressor.strategy.utils.tuning_structs": [[329, "module-neural_compressor.strategy.utils.tuning_structs"]], "neural_compressor.strategy.utils.utility": [[330, "module-neural_compressor.strategy.utils.utility"]], "neural_compressor.training": [[331, "module-neural_compressor.training"]], "neural_compressor.utils.collect_layer_histogram": [[332, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[333, "module-neural_compressor.utils.constant"]], "neural_compressor.utils.create_obj_from_config": [[334, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils": [[335, "module-neural_compressor.utils"]], "neural_compressor.utils.kl_divergence": [[336, "module-neural_compressor.utils.kl_divergence"]], "neural_compressor.utils.load_huggingface": [[337, "module-neural_compressor.utils.load_huggingface"]], "neural_compressor.utils.logger": [[338, "module-neural_compressor.utils.logger"]], "neural_compressor.utils.options": [[339, "module-neural_compressor.utils.options"]], "neural_compressor.utils.pytorch": [[340, "module-neural_compressor.utils.pytorch"]], "neural_compressor.utils.utility": [[341, "module-neural_compressor.utils.utility"]], "neural_compressor.ux.components.benchmark.benchmark": [[342, "module-neural_compressor.ux.components.benchmark.benchmark"]], "neural_compressor.ux.components.benchmark.benchmark_model": [[343, "module-neural_compressor.ux.components.benchmark.benchmark_model"]], "neural_compressor.ux.components.benchmark.execute_benchmark": [[344, "module-neural_compressor.ux.components.benchmark.execute_benchmark"]], "neural_compressor.ux.components.benchmark": [[345, "module-neural_compressor.ux.components.benchmark"]], "neural_compressor.ux.components.config_generator.benchmark_config_generator": [[346, "module-neural_compressor.ux.components.config_generator.benchmark_config_generator"]], "neural_compressor.ux.components.config_generator.config_generator": [[347, "module-neural_compressor.ux.components.config_generator.config_generator"]], "neural_compressor.ux.components.config_generator.graph_optimization_config_generator": [[348, "module-neural_compressor.ux.components.config_generator.graph_optimization_config_generator"]], "neural_compressor.ux.components.config_generator": [[349, "module-neural_compressor.ux.components.config_generator"]], "neural_compressor.ux.components.config_generator.mixed_precision_config_generator": [[350, "module-neural_compressor.ux.components.config_generator.mixed_precision_config_generator"]], "neural_compressor.ux.components.config_generator.profiling_config_generator": [[351, "module-neural_compressor.ux.components.config_generator.profiling_config_generator"]], "neural_compressor.ux.components.config_generator.pruning_config_generator": [[352, "module-neural_compressor.ux.components.config_generator.pruning_config_generator"]], "neural_compressor.ux.components.config_generator.quantization_config_generator": [[353, "module-neural_compressor.ux.components.config_generator.quantization_config_generator"]], "neural_compressor.ux.components.configuration_wizard.configuration_parser": [[354, "module-neural_compressor.ux.components.configuration_wizard.configuration_parser"]], "neural_compressor.ux.components.configuration_wizard.get_boundary_nodes": [[355, "module-neural_compressor.ux.components.configuration_wizard.get_boundary_nodes"]], "neural_compressor.ux.components.configuration_wizard.get_configuration": [[356, "module-neural_compressor.ux.components.configuration_wizard.get_configuration"]], "neural_compressor.ux.components.configuration_wizard": [[357, "module-neural_compressor.ux.components.configuration_wizard"]], "neural_compressor.ux.components.configuration_wizard.params_feeder": [[358, "module-neural_compressor.ux.components.configuration_wizard.params_feeder"]], "neural_compressor.ux.components.configuration_wizard.pruning_config_parser": [[359, "module-neural_compressor.ux.components.configuration_wizard.pruning_config_parser"]], "neural_compressor.ux.components.db_manager.db_manager": [[360, "module-neural_compressor.ux.components.db_manager.db_manager"]], "neural_compressor.ux.components.db_manager.db_models.benchmark": [[361, "module-neural_compressor.ux.components.db_manager.db_models.benchmark"]], "neural_compressor.ux.components.db_manager.db_models.benchmark_result": [[362, "module-neural_compressor.ux.components.db_manager.db_models.benchmark_result"]], "neural_compressor.ux.components.db_manager.db_models.dataloader": [[363, "module-neural_compressor.ux.components.db_manager.db_models.dataloader"]], "neural_compressor.ux.components.db_manager.db_models.dataset": [[364, "module-neural_compressor.ux.components.db_manager.db_models.dataset"]], "neural_compressor.ux.components.db_manager.db_models.domain": [[365, "module-neural_compressor.ux.components.db_manager.db_models.domain"]], "neural_compressor.ux.components.db_manager.db_models.domain_flavour": [[366, "module-neural_compressor.ux.components.db_manager.db_models.domain_flavour"]], "neural_compressor.ux.components.db_manager.db_models.example": [[367, "module-neural_compressor.ux.components.db_manager.db_models.example"]], "neural_compressor.ux.components.db_manager.db_models.framework": [[368, "module-neural_compressor.ux.components.db_manager.db_models.framework"]], "neural_compressor.ux.components.db_manager.db_models": [[369, "module-neural_compressor.ux.components.db_manager.db_models"]], "neural_compressor.ux.components.db_manager.db_models.metric": [[370, "module-neural_compressor.ux.components.db_manager.db_models.metric"]], "neural_compressor.ux.components.db_manager.db_models.model": [[371, "module-neural_compressor.ux.components.db_manager.db_models.model"]], "neural_compressor.ux.components.db_manager.db_models.optimization": [[372, "module-neural_compressor.ux.components.db_manager.db_models.optimization"]], "neural_compressor.ux.components.db_manager.db_models.optimization_type": [[373, "module-neural_compressor.ux.components.db_manager.db_models.optimization_type"]], "neural_compressor.ux.components.db_manager.db_models.precision": [[374, "module-neural_compressor.ux.components.db_manager.db_models.precision"]], "neural_compressor.ux.components.db_manager.db_models.profiling": [[375, "module-neural_compressor.ux.components.db_manager.db_models.profiling"]], "neural_compressor.ux.components.db_manager.db_models.profiling_result": [[376, "module-neural_compressor.ux.components.db_manager.db_models.profiling_result"]], "neural_compressor.ux.components.db_manager.db_models.project": [[377, "module-neural_compressor.ux.components.db_manager.db_models.project"]], "neural_compressor.ux.components.db_manager.db_models.pruning_details": [[378, "module-neural_compressor.ux.components.db_manager.db_models.pruning_details"]], "neural_compressor.ux.components.db_manager.db_models.transform": [[379, "module-neural_compressor.ux.components.db_manager.db_models.transform"]], "neural_compressor.ux.components.db_manager.db_models.tuning_details": [[380, "module-neural_compressor.ux.components.db_manager.db_models.tuning_details"]], "neural_compressor.ux.components.db_manager.db_models.tuning_history": [[381, "module-neural_compressor.ux.components.db_manager.db_models.tuning_history"]], "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface": [[382, "module-neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface": [[383, "module-neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.db_operations": [[384, "module-neural_compressor.ux.components.db_manager.db_operations.db_operations"]], "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface": [[385, "module-neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface": [[386, "module-neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface": [[387, "module-neural_compressor.ux.components.db_manager.db_operations.examples_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations": [[388, "module-neural_compressor.ux.components.db_manager.db_operations"]], "neural_compressor.ux.components.db_manager.db_operations.model_api_interface": [[389, "module-neural_compressor.ux.components.db_manager.db_operations.model_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface": [[390, "module-neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface": [[391, "module-neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.project_api_interface": [[392, "module-neural_compressor.ux.components.db_manager.db_operations.project_api_interface"]], "neural_compressor.ux.components.db_manager": [[393, "module-neural_compressor.ux.components.db_manager"]], "neural_compressor.ux.components.db_manager.params_interfaces": [[394, "module-neural_compressor.ux.components.db_manager.params_interfaces"]], "neural_compressor.ux.components.db_manager.utils": [[395, "module-neural_compressor.ux.components.db_manager.utils"]], "neural_compressor.ux.components.diagnosis.diagnosis": [[396, "module-neural_compressor.ux.components.diagnosis.diagnosis"]], "neural_compressor.ux.components.diagnosis.factory": [[397, "module-neural_compressor.ux.components.diagnosis.factory"]], "neural_compressor.ux.components.diagnosis": [[398, "module-neural_compressor.ux.components.diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis": [[399, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis": [[400, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis"]], "neural_compressor.ux.components.diagnosis.op_details": [[401, "module-neural_compressor.ux.components.diagnosis.op_details"]], "neural_compressor.ux.components.diagnosis.op_entry": [[402, "module-neural_compressor.ux.components.diagnosis.op_entry"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis": [[403, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis": [[404, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis"]], "neural_compressor.ux.components.file_browser.file_browser": [[405, "module-neural_compressor.ux.components.file_browser.file_browser"]], "neural_compressor.ux.components.file_browser": [[406, "module-neural_compressor.ux.components.file_browser"]], "neural_compressor.ux.components.graph.attribute": [[407, "module-neural_compressor.ux.components.graph.attribute"]], "neural_compressor.ux.components.graph.collapser": [[408, "module-neural_compressor.ux.components.graph.collapser"]], "neural_compressor.ux.components.graph.edge": [[409, "module-neural_compressor.ux.components.graph.edge"]], "neural_compressor.ux.components.graph.graph": [[410, "module-neural_compressor.ux.components.graph.graph"]], "neural_compressor.ux.components.graph.graph_reader": [[411, "module-neural_compressor.ux.components.graph.graph_reader"]], "neural_compressor.ux.components.graph": [[412, "module-neural_compressor.ux.components.graph"]], "neural_compressor.ux.components.graph.node": [[413, "module-neural_compressor.ux.components.graph.node"]], "neural_compressor.ux.components.graph.reader": [[414, "module-neural_compressor.ux.components.graph.reader"]], "neural_compressor.ux.components.graph.reader.onnxrt_reader": [[415, "module-neural_compressor.ux.components.graph.reader.onnxrt_reader"]], "neural_compressor.ux.components.graph.reader.tensorflow_reader": [[416, "module-neural_compressor.ux.components.graph.reader.tensorflow_reader"]], "neural_compressor.ux.components": [[417, "module-neural_compressor.ux.components"]], "neural_compressor.ux.components.jobs_management": [[418, "module-neural_compressor.ux.components.jobs_management"]], "neural_compressor.ux.components.jobs_management.jobs_control_queue": [[419, "module-neural_compressor.ux.components.jobs_management.jobs_control_queue"]], "neural_compressor.ux.components.jobs_management.jobs_manager": [[420, "module-neural_compressor.ux.components.jobs_management.jobs_manager"]], "neural_compressor.ux.components.jobs_management.request": [[421, "module-neural_compressor.ux.components.jobs_management.request"]], "neural_compressor.ux.components.manage_workspace": [[422, "module-neural_compressor.ux.components.manage_workspace"]], "neural_compressor.ux.components.model.domain": [[423, "module-neural_compressor.ux.components.model.domain"]], "neural_compressor.ux.components.model": [[424, "module-neural_compressor.ux.components.model"]], "neural_compressor.ux.components.model.model": [[425, "module-neural_compressor.ux.components.model.model"]], "neural_compressor.ux.components.model.model_type_getter": [[426, "module-neural_compressor.ux.components.model.model_type_getter"]], "neural_compressor.ux.components.model.onnxrt": [[427, "module-neural_compressor.ux.components.model.onnxrt"]], "neural_compressor.ux.components.model.onnxrt.model": [[428, "module-neural_compressor.ux.components.model.onnxrt.model"]], "neural_compressor.ux.components.model.pytorch": [[429, "module-neural_compressor.ux.components.model.pytorch"]], "neural_compressor.ux.components.model.pytorch.model": [[430, "module-neural_compressor.ux.components.model.pytorch.model"]], "neural_compressor.ux.components.model.repository": [[431, "module-neural_compressor.ux.components.model.repository"]], "neural_compressor.ux.components.model.shape": [[432, "module-neural_compressor.ux.components.model.shape"]], "neural_compressor.ux.components.model.tensorflow.frozen_pb": [[433, "module-neural_compressor.ux.components.model.tensorflow.frozen_pb"]], "neural_compressor.ux.components.model.tensorflow": [[434, "module-neural_compressor.ux.components.model.tensorflow"]], "neural_compressor.ux.components.model.tensorflow.keras": [[435, "module-neural_compressor.ux.components.model.tensorflow.keras"]], "neural_compressor.ux.components.model.tensorflow.meta_graph": [[436, "module-neural_compressor.ux.components.model.tensorflow.meta_graph"]], "neural_compressor.ux.components.model.tensorflow.model": [[437, "module-neural_compressor.ux.components.model.tensorflow.model"]], "neural_compressor.ux.components.model.tensorflow.saved_model": [[438, "module-neural_compressor.ux.components.model.tensorflow.saved_model"]], "neural_compressor.ux.components.model.tensorflow.utils": [[439, "module-neural_compressor.ux.components.model.tensorflow.utils"]], "neural_compressor.ux.components.model_zoo.download_config": [[440, "module-neural_compressor.ux.components.model_zoo.download_config"]], "neural_compressor.ux.components.model_zoo.download_model": [[441, "module-neural_compressor.ux.components.model_zoo.download_model"]], "neural_compressor.ux.components.model_zoo.downloader": [[442, "module-neural_compressor.ux.components.model_zoo.downloader"]], "neural_compressor.ux.components.model_zoo": [[443, "module-neural_compressor.ux.components.model_zoo"]], "neural_compressor.ux.components.model_zoo.list_models": [[444, "module-neural_compressor.ux.components.model_zoo.list_models"]], "neural_compressor.ux.components.names_mapper": [[445, "module-neural_compressor.ux.components.names_mapper"]], "neural_compressor.ux.components.names_mapper.names_mapper": [[446, "module-neural_compressor.ux.components.names_mapper.names_mapper"]], "neural_compressor.ux.components.optimization.execute_optimization": [[447, "module-neural_compressor.ux.components.optimization.execute_optimization"]], "neural_compressor.ux.components.optimization.factory": [[448, "module-neural_compressor.ux.components.optimization.factory"]], "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization": [[449, "module-neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization"]], "neural_compressor.ux.components.optimization.graph_optimizer": [[450, "module-neural_compressor.ux.components.optimization.graph_optimizer"]], "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model": [[451, "module-neural_compressor.ux.components.optimization.graph_optimizer.optimize_model"]], "neural_compressor.ux.components.optimization": [[452, "module-neural_compressor.ux.components.optimization"]], "neural_compressor.ux.components.optimization.mixed_precision": [[453, "module-neural_compressor.ux.components.optimization.mixed_precision"]], "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision": [[454, "module-neural_compressor.ux.components.optimization.mixed_precision.mixed_precision"]], "neural_compressor.ux.components.optimization.mixed_precision.optimize_model": [[455, "module-neural_compressor.ux.components.optimization.mixed_precision.optimize_model"]], "neural_compressor.ux.components.optimization.neural_coder_optimization": [[456, "module-neural_compressor.ux.components.optimization.neural_coder_optimization"]], "neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model": [[457, "module-neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model"]], "neural_compressor.ux.components.optimization.optimization": [[458, "module-neural_compressor.ux.components.optimization.optimization"]], "neural_compressor.ux.components.optimization.pruning": [[459, "module-neural_compressor.ux.components.optimization.pruning"]], "neural_compressor.ux.components.optimization.pruning.optimize_model": [[460, "module-neural_compressor.ux.components.optimization.pruning.optimize_model"]], "neural_compressor.ux.components.optimization.pruning.pruning": [[461, "module-neural_compressor.ux.components.optimization.pruning.pruning"]], "neural_compressor.ux.components.optimization.tune": [[462, "module-neural_compressor.ux.components.optimization.tune"]], "neural_compressor.ux.components.optimization.tune.tune_model": [[463, "module-neural_compressor.ux.components.optimization.tune.tune_model"]], "neural_compressor.ux.components.optimization.tune.tuning": [[464, "module-neural_compressor.ux.components.optimization.tune.tuning"]], "neural_compressor.ux.components.optimization.tuning_history": [[465, "module-neural_compressor.ux.components.optimization.tuning_history"]], "neural_compressor.ux.components.profiling.execute_profiling": [[466, "module-neural_compressor.ux.components.profiling.execute_profiling"]], "neural_compressor.ux.components.profiling.factory": [[467, "module-neural_compressor.ux.components.profiling.factory"]], "neural_compressor.ux.components.profiling": [[468, "module-neural_compressor.ux.components.profiling"]], "neural_compressor.ux.components.profiling.profile_model": [[469, "module-neural_compressor.ux.components.profiling.profile_model"]], "neural_compressor.ux.components.profiling.profiler": [[470, "module-neural_compressor.ux.components.profiling.profiler"]], "neural_compressor.ux.components.profiling.profiling": [[471, "module-neural_compressor.ux.components.profiling.profiling"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.factory": [[472, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.factory"]], "neural_compressor.ux.components.profiling.tensorflow_profiler": [[473, "module-neural_compressor.ux.components.profiling.tensorflow_profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler": [[474, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.utils": [[475, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.utils"]], "neural_compressor.ux.inc_bench": [[476, "module-neural_compressor.ux.inc_bench"]], "neural_compressor.ux": [[477, "module-neural_compressor.ux"]], "neural_compressor.ux.utils.consts": [[478, "module-neural_compressor.ux.utils.consts"]], "neural_compressor.ux.utils.environment": [[479, "module-neural_compressor.ux.utils.environment"]], "neural_compressor.ux.utils.exceptions": [[480, "module-neural_compressor.ux.utils.exceptions"]], "neural_compressor.ux.utils.executor": [[481, "module-neural_compressor.ux.utils.executor"]], "neural_compressor.ux.utils.expiring_dict": [[482, "module-neural_compressor.ux.utils.expiring_dict"]], "neural_compressor.ux.utils.github_info": [[483, "module-neural_compressor.ux.utils.github_info"]], "neural_compressor.ux.utils.hw_info": [[484, "module-neural_compressor.ux.utils.hw_info"]], "neural_compressor.ux.utils": [[485, "module-neural_compressor.ux.utils"]], "neural_compressor.ux.utils.json_serializer": [[486, "module-neural_compressor.ux.utils.json_serializer"]], "neural_compressor.ux.utils.logger": [[487, "module-neural_compressor.ux.utils.logger"]], "neural_compressor.ux.utils.parser": [[488, "module-neural_compressor.ux.utils.parser"]], "neural_compressor.ux.utils.proc": [[489, "module-neural_compressor.ux.utils.proc"]], "neural_compressor.ux.utils.processes": [[490, "module-neural_compressor.ux.utils.processes"]], "neural_compressor.ux.utils.singleton": [[491, "module-neural_compressor.ux.utils.singleton"]], "neural_compressor.ux.utils.status_updates": [[492, "module-neural_compressor.ux.utils.status_updates"]], "neural_compressor.ux.utils.templates": [[493, "module-neural_compressor.ux.utils.templates"]], "neural_compressor.ux.utils.templates.metric": [[494, "module-neural_compressor.ux.utils.templates.metric"]], "neural_compressor.ux.utils.templates.workdir": [[495, "module-neural_compressor.ux.utils.templates.workdir"]], "neural_compressor.ux.utils.utils": [[496, "module-neural_compressor.ux.utils.utils"]], "neural_compressor.ux.utils.workload.config": [[497, "module-neural_compressor.ux.utils.workload.config"]], "neural_compressor.ux.utils.workload.dataloader": [[498, "module-neural_compressor.ux.utils.workload.dataloader"]], "neural_compressor.ux.utils.workload.evaluation": [[499, "module-neural_compressor.ux.utils.workload.evaluation"]], "neural_compressor.ux.utils.workload.graph_optimization": [[500, "module-neural_compressor.ux.utils.workload.graph_optimization"]], "neural_compressor.ux.utils.workload": [[501, "module-neural_compressor.ux.utils.workload"]], "neural_compressor.ux.utils.workload.mixed_precision": [[502, "module-neural_compressor.ux.utils.workload.mixed_precision"]], "neural_compressor.ux.utils.workload.model": [[503, "module-neural_compressor.ux.utils.workload.model"]], "neural_compressor.ux.utils.workload.pruning": [[504, "module-neural_compressor.ux.utils.workload.pruning"]], "neural_compressor.ux.utils.workload.quantization": [[505, "module-neural_compressor.ux.utils.workload.quantization"]], "neural_compressor.ux.utils.workload.tuning": [[506, "module-neural_compressor.ux.utils.workload.tuning"]], "neural_compressor.ux.utils.yaml_utils": [[507, "module-neural_compressor.ux.utils.yaml_utils"]], "neural_compressor.ux.web.communication": [[508, "module-neural_compressor.ux.web.communication"]], "neural_compressor.ux.web.configuration": [[509, "module-neural_compressor.ux.web.configuration"]], "neural_compressor.ux.web.exceptions": [[510, "module-neural_compressor.ux.web.exceptions"]], "neural_compressor.ux.web": [[511, "module-neural_compressor.ux.web"]], "neural_compressor.ux.web.router": [[512, "module-neural_compressor.ux.web.router"]], "neural_compressor.ux.web.server": [[513, "module-neural_compressor.ux.web.server"]], "neural_compressor.ux.web.service.benchmark": [[514, "module-neural_compressor.ux.web.service.benchmark"]], "neural_compressor.ux.web.service.history_snapshot_parser": [[515, "module-neural_compressor.ux.web.service.history_snapshot_parser"]], "neural_compressor.ux.web.service": [[516, "module-neural_compressor.ux.web.service"]], "neural_compressor.ux.web.service.model": [[517, "module-neural_compressor.ux.web.service.model"]], "neural_compressor.ux.web.service.optimization": [[518, "module-neural_compressor.ux.web.service.optimization"]], "neural_compressor.ux.web.service.profiling": [[519, "module-neural_compressor.ux.web.service.profiling"]], "neural_compressor.ux.web.service.request_data_processor": [[520, "module-neural_compressor.ux.web.service.request_data_processor"]], "neural_compressor.ux.web.service.response_generator": [[521, "module-neural_compressor.ux.web.service.response_generator"]], "neural_compressor.ux.web.service.workload": [[522, "module-neural_compressor.ux.web.service.workload"]], "neural_compressor.version": [[523, "module-neural_compressor.version"]], "Intel\u00ae Neural Compressor Documentation": [[524, "intel-neural-compressor-documentation"], [630, "intel-neural-compressor-documentation"]], "Sections": [[524, "sections"], [630, "sections"]], "Contributor Covenant Code of Conduct": [[525, "contributor-covenant-code-of-conduct"], [526, "contributor-covenant-code-of-conduct"]], "Our Pledge": [[525, "our-pledge"]], "Our Standards": [[525, "our-standards"]], "Our Responsibilities": [[525, "our-responsibilities"]], "Scope": [[525, "scope"]], "Enforcement": [[525, "enforcement"]], "Attribution": [[525, "attribution"]], "Contribution Guidelines": [[526, "contribution-guidelines"]], "Pull Request Checklist": [[526, "pull-request-checklist"]], "Pull Request Template": [[526, "pull-request-template"]], "Support": [[526, "support"]], "FX": [[527, "fx"]], "Introduction": [[527, "introduction"], [528, "introduction"], [531, "introduction"], [574, "introduction"], [575, "introduction"], [576, "introduction"], [577, "introduction"], [579, "introduction"], [580, "introduction"], [581, "introduction"], [583, "introduction"], [585, "introduction"], [588, "introduction"], [591, "introduction"], [592, "introduction"], [593, "introduction"], [613, "introduction"], [614, "introduction"], [616, "introduction"], [617, "introduction"], [619, "introduction"], [623, "introduction"], [624, "introduction"], [625, "introduction"], [626, "introduction"], [628, "introduction"]], "FX Mode Support Matrix in Neural Compressor": [[527, "fx-mode-support-matrix-in-neural-compressor"]], "Get Start": [[527, "get-start"]], "Post Training Static Quantization": [[527, "post-training-static-quantization"], [620, "post-training-static-quantization"]], "Post Training Dynamic Quantization": [[527, "post-training-dynamic-quantization"], [620, "post-training-dynamic-quantization"]], "Quantization-Aware Training": [[527, "quantization-aware-training"]], "Examples": [[527, "examples"], [528, "examples"], [575, "examples"], [576, "examples"], [577, "examples"], [579, "examples"], [580, "examples"], [581, "examples"], [582, "examples"], [583, "examples"], [592, "examples"], [593, "examples"], [614, "examples"], [616, "examples"], [620, "examples"], [624, "examples"]], "Note": [[527, "note"]], "Details": [[527, "details"]], "Common Problem": [[527, "common-problem"]], "Dynamic Quantization": [[527, "dynamic-quantization"]], "Static Quantization & Quantization Aware Training": [[527, "static-quantization-quantization-aware-training"]], "Neural Architecture Search": [[528, "neural-architecture-search"]], "Basic NAS": [[528, "basic-nas"]], "Dynamic NAS": [[528, "dynamic-nas"]], "NAS Support Matrix": [[528, "nas-support-matrix"]], "Get Started with NAS API": [[528, "get-started-with-nas-api"]], "Basic Usage": [[528, "basic-usage"]], "1. Python code + YAML": [[528, "python-code-yaml"]], "2. Python code only": [[528, "python-code-only"]], "Advanced Usage (Custom NAS)": [[528, "advanced-usage-custom-nas"]], "Security Policy": [[529, "security-policy"]], "Report a Vulnerability": [[529, "report-a-vulnerability"]], "Intel\u00ae Neural Compressor": [[530, "intel-neural-compressor"], [611, "intel-neural-compressor"]], "Installation": [[530, "installation"], [589, "installation"], [605, "installation"]], "Install from pypi": [[530, "install-from-pypi"]], "Getting Started": [[530, "getting-started"], [586, "getting-started"]], "Quantization with Python API": [[530, "quantization-with-python-api"], [586, "quantization-with-python-api"]], "Documentation": [[530, "documentation"]], "Selected Publications/Events": [[530, "selected-publications-events"]], "Additional Content": [[530, "additional-content"]], "Research Collaborations": [[530, "research-collaborations"]], "Adaptor": [[531, "adaptor"], [532, "adaptor"]], "Adaptor Support Matrix": [[531, "adaptor-support-matrix"]], "Working Flow": [[531, "working-flow"], [620, "working-flow"]], "Get Start with Adaptor API": [[531, "get-start-with-adaptor-api"]], "Query API": [[531, "query-api"]], "Background": [[531, "background"]], "Query API Introduction": [[531, "query-api-introduction"]], "Example of Adding a New Backend Support": [[531, "example-of-adding-a-new-backend-support"]], "Capability": [[531, "capability"]], "Implement ONNXRTAdaptor Class": [[531, "implement-onnxrtadaptor-class"]], "ONNX Runtime": [[533, "onnx-runtime"]], "Torch Utils": [[534, "torch-utils"]], "Bf16 Convert": [[535, "bf16-convert"]], "Hawq Metric": [[536, "hawq-metric"]], "Onnx": [[537, "onnx"]], "Symbolic Trace": [[538, "symbolic-trace"]], "Util": [[539, "util"]], "Algorithm": [[540, "algorithm"]], "APIs": [[541, "apis"]], "User facing APIs": [[542, "user-facing-apis"]], "Benchmark": [[543, "benchmark"], [550, "benchmark"], [619, "benchmark"]], "Config": [[544, "config"]], "Mix Precision": [[545, "mix-precision"]], "Objective": [[546, "objective"], [613, "objective"]], "Quantization": [[547, "quantization"], [566, "quantization"], [619, "quantization"], [620, "quantization"]], "Training": [[548, "training"]], "Common": [[549, "common"]], "BLEU": [[551, "module-neural_compressor.experimental.metric.bleu"]], "Criterion": [[552, "criterion"]], "Data": [[553, "data"]], "Dataloader": [[554, "dataloader"]], "BaseDataLoader": [[554, "basedataloader"]], "dataloaders": [[554, "dataloaders"]], "Datasets": [[555, "datasets"]], "Transforms": [[556, "transforms"]], "Metric": [[557, "metric"]], "Model": [[558, "model"], [569, "model"], [593, "model"]], "Optimizer": [[559, "optimizer"]], "Component(experiemental API, deprecated in 2.0)": [[560, "component-experiemental-api-deprecated-in-2-0"]], "Distillation": [[561, "distillation"], [579, "distillation"], [619, "distillation"]], "MixedPrecision": [[562, "mixedprecision"]], "ModelConversion": [[563, "modelconversion"]], "Neural architecture search (NAS)": [[564, "neural-architecture-search-nas"]], "Pruning": [[565, "pruning"], [574, "pruning"], [616, "pruning"], [619, "pruning"]], "Scheduler": [[567, "scheduler"]], "Contrib": [[568, "contrib"]], "Pythonic": [[570, "pythonic"]], "Strategy": [[571, "strategy"]], "Strategies": [[572, "strategies"]], "Utils": [[573, "utils"]], "Intel\u00ae Neural Compressor Bench": [[574, "intel-neural-compressor-bench"]], "Table of Contents": [[574, "table-of-contents"]], "Install Intel\u00ae Neural Compressor with Bench": [[574, "install-intel-neural-compressor-with-bench"]], "Option 1: Install from Binary": [[574, "option-1-install-from-binary"]], "Option 2: Install from Source": [[574, "option-2-install-from-source"]], "Start the Intel\u00ae Neural Compressor Bench": [[574, "start-the-intel-neural-compressor-bench"]], "Home Screen": [[574, "home-screen"]], "Create New Project": [[574, "create-new-project"]], "Predefined Model": [[574, "predefined-model"]], "Custom Model": [[574, "custom-model"]], "Display Model Graph": [[574, "display-model-graph"]], "Project List": [[574, "project-list"]], "Remove Project": [[574, "remove-project"]], "Develop Project": [[574, "develop-project"]], "Optimization Tab": [[574, "optimization-tab"]], "Optimization Table": [[574, "optimization-table"]], "Optimization Wizard": [[574, "optimization-wizard"]], "Editing Optimization Entries": [[574, "editing-optimization-entries"]], "Optimization Details": [[574, "optimization-details"]], "Benchmark Tab": [[574, "benchmark-tab"]], "Benchmark Table": [[574, "benchmark-table"]], "Benchmark Wizard": [[574, "benchmark-wizard"]], "Editing Benchmark Entries": [[574, "editing-benchmark-entries"]], "Benchmark Details": [[574, "benchmark-details"]], "Profiling Tab": [[574, "profiling-tab"]], "Profiling Table": [[574, "profiling-table"]], "Profiling Wizard": [[574, "profiling-wizard"]], "Editing Profiling Entries": [[574, "editing-profiling-entries"]], "Profiling Details": [[574, "profiling-details"]], "Diagnosis Tab": [[574, "diagnosis-tab"]], "Dataset Tab": [[574, "dataset-tab"]], "Dataset List": [[574, "dataset-list"]], "Dataset Wizard": [[574, "dataset-wizard"]], "Dataset Details": [[574, "dataset-details"]], "Custom Dataset": [[574, "custom-dataset"]], "Project Information": [[574, "project-information"]], "NAS demo": [[574, "nas-demo"]], "System Information": [[574, "system-information"]], "Security": [[574, "security"], [581, "security"]], "Benchmarking": [[575, "benchmarking"]], "Benchmark Support Matrix": [[575, "benchmark-support-matrix"]], "Get Started with Benchmark API": [[575, "get-started-with-benchmark-api"]], "DataLoader": [[576, "dataloader"]], "Supported Framework Dataloader Matrix": [[576, "supported-framework-dataloader-matrix"]], "Get Start with Dataloader API": [[576, "get-start-with-dataloader-api"]], "Config Dataloader in a Yaml File": [[576, "config-dataloader-in-a-yaml-file"]], "Create a User-specific Dataloader": [[576, "create-a-user-specific-dataloader"]], "Dataset": [[577, "dataset"]], "Supported Framework Dataset Matrix": [[577, "supported-framework-dataset-matrix"]], "TensorFlow": [[577, "tensorflow"], [591, "tensorflow"], [625, "tensorflow"]], "PyTorch": [[577, "pytorch"], [591, "pytorch"], [621, "pytorch"]], "MXNet": [[577, "mxnet"], [591, "mxnet"], [625, "mxnet"]], "ONNXRT": [[577, "onnxrt"], [591, "onnxrt"], [625, "onnxrt"]], "Get start with Dataset API": [[577, "get-start-with-dataset-api"]], "Config dataloader in a yaml file": [[577, "config-dataloader-in-a-yaml-file"]], "User-specific dataset": [[577, "user-specific-dataset"]], "Design": [[578, "design"], [626, "design"], [626, "id1"], [626, "id3"], [626, "id5"], [626, "id7"], [626, "id9"], [626, "id11"], [626, "id13"], [626, "id15"], [626, "id17"]], "Architecture": [[578, "architecture"], [588, "architecture"]], "Workflow": [[578, "workflow"]], "Knowledge Distillation": [[579, "knowledge-distillation"]], "Intermediate Layer Knowledge Distillation": [[579, "intermediate-layer-knowledge-distillation"]], "Self Distillation": [[579, "self-distillation"]], "Distillation Support Matrix": [[579, "distillation-support-matrix"]], "Get Started with Distillation API": [[579, "get-started-with-distillation-api"]], "Distillation for Quantization": [[580, "distillation-for-quantization"]], "Distillation for Quantization Support Matrix": [[580, "distillation-for-quantization-support-matrix"]], "Get Started with Distillation for Quantization API": [[580, "get-started-with-distillation-for-quantization-api"]], "Distributed Training and Inference (Evaluation)": [[581, "distributed-training-and-inference-evaluation"]], "Supported Feature Matrix": [[581, "supported-feature-matrix"], [585, "supported-feature-matrix"], [588, "supported-feature-matrix"], [619, "supported-feature-matrix"], [620, "supported-feature-matrix"], [624, "supported-feature-matrix"], [628, "supported-feature-matrix"]], "Get Started with Distributed Training and Inference API": [[581, "get-started-with-distributed-training-and-inference-api"]], "Option 1: Pure Yaml Configuration": [[581, "option-1-pure-yaml-configuration"]], "Option 2: User Defined Training Function": [[581, "option-2-user-defined-training-function"]], "Horovodrun Execution": [[581, "horovodrun-execution"]], "PyTorch Examples:": [[581, "pytorch-examples"]], "TensorFlow Examples:": [[581, "tensorflow-examples"]], "Example List": [[582, "example-list"]], "Release Data": [[582, "release-data"]], "Export": [[583, "export"]], "Supported Framework Model Matrix": [[583, "supported-framework-model-matrix"], [593, "supported-framework-model-matrix"]], "FP32 Model Export": [[583, "fp32-model-export"]], "INT8 Model Export": [[583, "int8-model-export"]], "Appendix": [[583, "appendix"]], "Frequently Asked Questions": [[584, "frequently-asked-questions"]], "Common Build Issues": [[584, "common-build-issues"]], "Issue 1:": [[584, "issue-1"]], "Issue 2:": [[584, "issue-2"]], "Issue 3:": [[584, "issue-3"]], "Framework YAML Configuration Files": [[585, "framework-yaml-configuration-files"]], "Get started with Framework YAML Files": [[585, "get-started-with-framework-yaml-files"]], "Quick Samples": [[586, "quick-samples"]], "Quantization with JupyterLab Extension": [[586, "quantization-with-jupyterlab-extension"]], "Quantization with GUI": [[586, "quantization-with-gui"]], "Validated Models": [[586, "validated-models"], [629, "validated-models"]], "Incompatible changes between v1.2 and v1.1": [[587, "incompatible-changes-between-v1-2-and-v1-1"]], "User-facing APIs": [[587, "user-facing-apis"]], "Built-in transform/dataset/metric APIs": [[587, "built-in-transform-dataset-metric-apis"]], "Infrastructure of Intel\u00ae Neural Compressor": [[588, "infrastructure-of-intel-neural-compressor"]], "Linux Installation": [[589, "linux-installation"]], "Prerequisites": [[589, "prerequisites"], [589, "id1"]], "Install from Binary": [[589, "install-from-binary"], [589, "id2"]], "Install from Source": [[589, "install-from-source"], [589, "id3"]], "Install from AI Kit": [[589, "install-from-ai-kit"]], "Windows Installation": [[589, "windows-installation"]], "System Requirements": [[589, "system-requirements"]], "Validated Hardware Environment": [[589, "validated-hardware-environment"]], "Intel\u00ae Neural Compressor supports CPUs based on Intel 64 architecture or compatible processors:": [[589, "intel-neural-compressor-supports-cpus-based-on-intel-64-architecture-or-compatible-processors"]], "Intel\u00ae Neural Compressor supports GPUs built on Intel\u2019s Xe architecture:": [[589, "intel-neural-compressor-supports-gpus-built-on-intel-s-xe-architecture"]], "Intel\u00ae Neural Compressor quantized ONNX models support multiple hardware vendors through ONNX Runtime:": [[589, "intel-neural-compressor-quantized-onnx-models-support-multiple-hardware-vendors-through-onnx-runtime"]], "Validated Software Environment": [[589, "validated-software-environment"]], "Legal Information": [[590, "legal-information"]], "License": [[590, "license"]], "Citation": [[590, "citation"]], "Trademarks": [[590, "trademarks"]], "Metrics": [[591, "metrics"]], "Supported Built-in Metric Matrix": [[591, "supported-built-in-metric-matrix"]], "Get Start with Metrics": [[591, "get-start-with-metrics"]], "Support Single-metric and Multi-metrics": [[591, "support-single-metric-and-multi-metrics"]], "Build Custom Metric with Python API": [[591, "build-custom-metric-with-python-api"]], "Mixed Precision": [[592, "mixed-precision"]], "Mixed Precision Support Matrix": [[592, "mixed-precision-support-matrix"]], "Get Started with Mixed Precision API": [[592, "get-started-with-mixed-precision-api"]], "Neural Coder": [[594, "neural-coder"], [611, "neural-coder"], [611, "id1"]], "What do we offer?": [[594, "what-do-we-offer"]], "Getting Started!": [[594, "getting-started"], [605, "getting-started"]], "Jupyter Lab Extension": [[594, "jupyter-lab-extension"]], "Python Launcher": [[594, "python-launcher"], [599, "python-launcher"]], "Python API": [[594, "python-api"]], "Contact": [[594, "contact"]], "AWS Amazon SageMaker Support": [[595, "aws-amazon-sagemaker-support"]], "Start Jupyter Lab 3": [[595, "start-jupyter-lab-3"]], "For SageMaker Studio": [[595, "for-sagemaker-studio"]], "For SageMaker Notebook instance": [[595, "for-sagemaker-notebook-instance"]], "Installation Guide": [[595, "installation-guide"]], "BigDL Nano Support": [[596, "bigdl-nano-support"]], "Example": [[596, "example"], [600, "example"], [613, "example"]], "Support Matrix": [[596, "support-matrix"]], "Intel CPU Platforms: Best Performance Setting": [[597, "intel-cpu-platforms-best-performance-setting"]], "Install MKL, OpenMP and JEMALLOC": [[597, "install-mkl-openmp-and-jemalloc"]], "Install NUMA Controller": [[597, "install-numa-controller"]], "Environment Variables": [[597, "environment-variables"]], "Frequency Governers": [[597, "frequency-governers"]], "Neural Coder as Python API": [[598, "neural-coder-as-python-api"]], "Enable": [[598, "enable"]], "Bench": [[598, "bench"]], "SuperBench": [[598, "superbench"]], "Quick-Start": [[599, "quick-start"]], "Launcher Arguments (Optional)": [[599, "launcher-arguments-optional"]], "Neural Coder for Quantization": [[600, "neural-coder-for-quantization"]], "Features Supported": [[600, "features-supported"]], "Models Supported": [[600, "models-supported"]], "Usage": [[600, "usage"], [624, "usage"], [624, "id1"], [626, "usage"], [626, "id2"], [626, "id4"], [626, "id6"], [626, "id8"], [626, "id10"], [626, "id12"], [626, "id14"], [626, "id16"], [626, "id18"]], "PyPI distribution:": [[600, "pypi-distribution"]], "Supported Optimization Features": [[601, "supported-optimization-features"]], "v0.4": [[602, "v0-4"]], "Highlights": [[602, "highlights"]], "Others": [[602, "others"]], "Changelog": [[603, "changelog"], [607, "changelog"]], "neural_compressor_ext_lab": [[604, "neural-compressor-ext-lab"]], "Requirements": [[604, "requirements"], [608, "requirements"]], "Install": [[604, "install"], [608, "install"]], "Uninstall": [[604, "uninstall"], [608, "uninstall"]], "Contributing": [[604, "contributing"], [608, "contributing"]], "Development install": [[604, "development-install"], [608, "development-install"]], "Development uninstall": [[604, "development-uninstall"], [608, "development-uninstall"]], "Packaging the extension": [[604, "packaging-the-extension"], [608, "packaging-the-extension"]], "Intel\u00ae Neural Compressor as JupyterLab Extension": [[605, "intel-neural-compressor-as-jupyterlab-extension"]], "Auto-enable a feature": [[605, "auto-enable-a-feature"]], "Or let us help you auto-select the best feature": [[605, "or-let-us-help-you-auto-select-the-best-feature"]], "Pre-requisites": [[605, "pre-requisites"]], "Making a new release of neural_compressor_ext_lab": [[606, "making-a-new-release-of-neural-compressor-ext-lab"]], "Manual release": [[606, "manual-release"], [609, "manual-release"]], "Python package": [[606, "python-package"], [609, "python-package"]], "NPM package": [[606, "npm-package"], [609, "npm-package"]], "Automated releases with the Jupyter Releaser": [[606, "automated-releases-with-the-jupyter-releaser"], [609, "automated-releases-with-the-jupyter-releaser"]], "Publishing to conda-forge": [[606, "publishing-to-conda-forge"], [609, "publishing-to-conda-forge"]], "neural_compressor_ext_lab_alibaba": [[608, "neural-compressor-ext-lab-alibaba"]], "Making a new release of neural_compressor_ext_lab_alibaba": [[609, "making-a-new-release-of-neural-compressor-ext-lab-alibaba"]], "Change Log": [[610, "change-log"]], "[Unreleased]": [[610, "unreleased"]], "Background Introduction": [[611, "background-introduction"]], "Neural Coder Extension in VSCode": [[611, "neural-coder-extension-in-vscode"]], "Neural Coder Extension Usage": [[611, "neural-coder-extension-usage"]], "1. Open": [[611, "open"]], "2. Search": [[611, "search"]], "3. Setting": [[611, "setting"]], "4. Icon": [[611, "icon"]], "5. optimization (quantization)": [[611, "optimization-quantization"]], "5.1 Enable": [[611, "enable"]], "5.2 Auto": [[611, "auto"]], "Welcome to your VS Code Extension": [[612, "welcome-to-your-vs-code-extension"]], "What\u2019s in the folder": [[612, "what-s-in-the-folder"]], "Setup": [[612, "setup"]], "Get up and running straight away": [[612, "get-up-and-running-straight-away"]], "Make changes": [[612, "make-changes"]], "Explore the API": [[612, "explore-the-api"]], "Run tests": [[612, "run-tests"]], "Go further": [[612, "go-further"]], "Single Objective": [[613, "single-objective"]], "Multiple Objectives": [[613, "multiple-objectives"]], "Objective Support Matrix": [[613, "objective-support-matrix"]], "Get Started with Objective API": [[613, "get-started-with-objective-api"]], "Config Single Objective": [[613, "config-single-objective"]], "Config Multiple Objectives": [[613, "config-multiple-objectives"]], "Optimization Orchestration": [[614, "optimization-orchestration"]], "One-shot": [[614, "one-shot"]], "Orchestration Support Matrix": [[614, "orchestration-support-matrix"]], "Get Started with Orchestration API": [[614, "get-started-with-orchestration-api"]], "SYSTEM CONFIGURATION": [[615, "system-configuration"]], "Neural Network Pruning": [[616, "neural-network-pruning"], [617, "neural-network-pruning"]], "Pruning Patterns": [[616, "pruning-patterns"], [617, "pruning-patterns"]], "Pruning Criteria": [[616, "pruning-criteria"], [617, "pruning-criteria"]], "Pruning Schedule": [[616, "pruning-schedule"], [617, "pruning-schedule"]], "Pruning Support Matrix": [[616, "pruning-support-matrix"]], "Get Started with Pruning API": [[616, "get-started-with-pruning-api"]], "Pruning details": [[617, "pruning-details"]], "Pruning Type": [[617, "pruning-type"]], "Pruning Scope": [[617, "pruning-scope"]], "Sparsity Decay Type": [[617, "sparsity-decay-type"]], "Regularization": [[617, "regularization"]], "Pruning Examples": [[617, "pruning-examples"]], "Reference": [[617, "reference"], [620, "reference"]], "Full Publications/Events (56)": [[618, "full-publications-events-56"]], "2023 (3)": [[618, "id1"]], "2022 (34)": [[618, "id2"]], "2021 (15)": [[618, "id3"]], "2018 - 2020 (4)": [[618, "id4"]], "Pythonic Style Access for Configurations": [[619, "pythonic-style-access-for-configurations"]], "Pythonic API for User Configurations": [[619, "pythonic-api-for-user-configurations"], [619, "id1"]], "Pythonic API for Framework Configurations": [[619, "pythonic-api-for-framework-configurations"], [619, "id2"]], "Get Started with Pythonic API for Configurations": [[619, "get-started-with-pythonic-api-for-configurations"]], "NAS": [[619, "nas"]], "Quantization Introduction": [[620, "quantization-introduction"]], "Quantization Fundamentals": [[620, "quantization-fundamentals"]], "Quantization Support Matrix": [[620, "quantization-support-matrix"]], "Quantization Scheme in TensorFlow": [[620, "quantization-scheme-in-tensorflow"]], "Quantization Scheme in PyTorch": [[620, "quantization-scheme-in-pytorch"]], "Quantization Scheme in IPEX": [[620, "quantization-scheme-in-ipex"]], "Quantization Scheme in MXNet": [[620, "quantization-scheme-in-mxnet"]], "Quantization Scheme in ONNX Runtime": [[620, "quantization-scheme-in-onnx-runtime"]], "Quantization Approaches": [[620, "quantization-approaches"]], "Quantization Aware Training": [[620, "quantization-aware-training"]], "Accuracy Aware Tuning": [[620, "accuracy-aware-tuning"]], "Get Started": [[620, "get-started"]], "Turn OFF Auto Mixed Precision during Quantization": [[621, "turn-off-auto-mixed-precision-during-quantization"]], "Tensorflow": [[621, "tensorflow"]], "Release": [[622, "release"]], "Release Notes": [[622, "release-notes"]], "Known Issues": [[622, "known-issues"]], "Incompatible Changes": [[622, "incompatible-changes"]], "SigOpt Strategy": [[623, "sigopt-strategy"]], "Preparation": [[623, "preparation"]], "SigOpt Platform": [[623, "sigopt-platform"]], "Neural Compressor Configuration": [[623, "neural-compressor-configuration"]], "Performance": [[623, "performance"]], "Benefit of SigOpt Strategy": [[623, "benefit-of-sigopt-strategy"]], "Performance Comparison of Different Strategies": [[623, "performance-comparison-of-different-strategies"]], "TensorBoard": [[624, "tensorboard"]], "Get Started with TensorBoard": [[624, "get-started-with-tensorboard"]], "PyTorch TensorBoard": [[624, "pytorch-tensorboard"]], "TensorFlow Tensorboard": [[624, "tensorflow-tensorboard"]], "PyTorch Examples": [[624, "pytorch-examples"]], "TensorFlow Examples": [[624, "tensorflow-examples"]], "Transform": [[625, "transform"]], "Transform Support List": [[625, "transform-support-list"]], "Pytorch": [[625, "pytorch"]], "Tuning Strategies": [[626, "tuning-strategies"]], "Strategy Design": [[626, "strategy-design"]], "Tuning Space": [[626, "tuning-space"]], "Exit Policy": [[626, "exit-policy"]], "Accuracy Criteria": [[626, "accuracy-criteria"]], "Tuning Process": [[626, "tuning-process"]], "Tuning Algorithms": [[626, "tuning-algorithms"]], "Conservative Tuning": [[626, "conservative-tuning"]], "Basic": [[626, "basic"]], "MSE": [[626, "mse"]], "MSE_V2": [[626, "mse-v2"]], "HAWQ_V2": [[626, "hawq-v2"]], "Bayesian": [[626, "bayesian"]], "Exhaustive": [[626, "exhaustive"]], "Random": [[626, "random"]], "SigOpt": [[626, "sigopt"]], "TPE": [[626, "tpe"]], "Customize a New Tuning Strategy": [[626, "customize-a-new-tuning-strategy"]], "User Guide": [[627, "user-guide"]], "User YAML Configuration Files": [[628, "user-yaml-configuration-files"]], "Get started with User YAML Files": [[628, "get-started-with-user-yaml-files"]], "Validated Quantization Examples": [[629, "validated-quantization-examples"]], "TensorFlow Models with Intel TensorFlow 2.11.0": [[629, "tensorflow-models-with-intel-tensorflow-2-11-0"]], "PyTorch Models with Torch 1.13.0+cpu in PTQ Mode": [[629, "pytorch-models-with-torch-1-13-0-cpu-in-ptq-mode"]], "PyTorch Models with Torch 1.13.0+cpu in QAT Mode": [[629, "pytorch-models-with-torch-1-13-0-cpu-in-qat-mode"]], "PyTorch Models with Torch and Intel\u00ae Extension for PyTorch* 1.13.0+cpu": [[629, "pytorch-models-with-torch-and-intel-extension-for-pytorch-1-13-0-cpu"]], "ONNX Models with ONNX Runtime 1.13.1": [[629, "onnx-models-with-onnx-runtime-1-13-1"]], "MXNet Models with MXNet 1.9.1": [[629, "mxnet-models-with-mxnet-1-9-1"]], "Validated Pruning Examples": [[629, "validated-pruning-examples"]], "Validated Knowledge Distillation Examples": [[629, "validated-knowledge-distillation-examples"]], "Validated ONNX QDQ INT8 Models on Multiple Hardware through ONNX Runtime": [[629, "validated-onnx-qdq-int8-models-on-multiple-hardware-through-onnx-runtime"]]}, "indexentries": {"644ec953a7dc_pruning_support": [[0, "module-644ec953a7dc_pruning_support"]], "module": [[0, "module-644ec953a7dc_pruning_support"], [1, "module-6ece06672ed3_v1_14"], [2, "module-6f0d0f71d92e_v1_13"], [3, "module-9e89549a08c8_v1_11"], [4, "module-block_mask"], [5, "module-env"], [6, "module-neural_compressor.adaptor.adaptor"], [7, "module-neural_compressor.adaptor"], [8, "module-neural_compressor.adaptor.keras"], [9, "module-neural_compressor.adaptor.keras_utils"], [10, "module-neural_compressor.adaptor.keras_utils.quantizer"], [11, "module-neural_compressor.adaptor.mxnet"], [12, "module-neural_compressor.adaptor.mxnet_utils"], [13, "module-neural_compressor.adaptor.mxnet_utils.util"], [14, "module-neural_compressor.adaptor.onnxrt"], [15, "module-neural_compressor.adaptor.ox_utils.calibration"], [16, "module-neural_compressor.adaptor.ox_utils"], [17, "module-neural_compressor.adaptor.ox_utils.operators.activation"], [18, "module-neural_compressor.adaptor.ox_utils.operators.argmax"], [19, "module-neural_compressor.adaptor.ox_utils.operators.attention"], [20, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"], [21, "module-neural_compressor.adaptor.ox_utils.operators.concat"], [22, "module-neural_compressor.adaptor.ox_utils.operators.conv"], [23, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"], [24, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"], [25, "module-neural_compressor.adaptor.ox_utils.operators.gather"], [26, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"], [27, "module-neural_compressor.adaptor.ox_utils.operators.gemm"], [28, "module-neural_compressor.adaptor.ox_utils.operators"], [29, "module-neural_compressor.adaptor.ox_utils.operators.lstm"], [30, "module-neural_compressor.adaptor.ox_utils.operators.matmul"], [31, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"], [32, "module-neural_compressor.adaptor.ox_utils.operators.ops"], [33, "module-neural_compressor.adaptor.ox_utils.operators.pad"], [34, "module-neural_compressor.adaptor.ox_utils.operators.pooling"], [35, "module-neural_compressor.adaptor.ox_utils.operators.resize"], [36, "module-neural_compressor.adaptor.ox_utils.operators.split"], [37, "module-neural_compressor.adaptor.ox_utils.quantizer"], [38, "module-neural_compressor.adaptor.ox_utils.util"], [39, "module-neural_compressor.adaptor.pytorch"], [40, "module-neural_compressor.adaptor.query"], [41, "module-neural_compressor.adaptor.tensorflow"], [42, "module-neural_compressor.adaptor.tf_utils.graph_converter"], [43, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"], [44, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"], [45, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"], [46, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"], [47, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"], [48, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"], [49, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"], [50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"], [51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"], [52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"], [53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"], [54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"], [55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"], [56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"], [57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"], [58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"], [59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"], [60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"], [61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"], [62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"], [63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"], [64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"], [65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"], [66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"], [67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"], [68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"], [69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"], [70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"], [71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"], [72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"], [73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"], [74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"], [75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"], [76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"], [77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"], [78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"], [79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"], [80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"], [81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"], [82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"], [83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"], [84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"], [85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"], [86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"], [87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"], [88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"], [89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"], [90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"], [91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"], [92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"], [93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"], [94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"], [95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"], [96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"], [97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"], [98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"], [99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"], [100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"], [101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"], [102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"], [103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"], [104, "module-neural_compressor.adaptor.tf_utils.graph_util"], [105, "module-neural_compressor.adaptor.tf_utils"], [106, "module-neural_compressor.adaptor.tf_utils.quantize_graph"], [107, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"], [108, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"], [109, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"], [110, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"], [111, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"], [112, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"], [113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"], [114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"], [115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"], [116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"], [117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"], [118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"], [119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"], [120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"], [121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"], [122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"], [123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"], [124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"], [125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"], [126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"], [127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"], [128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"], [129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"], [130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"], [131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"], [132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"], [133, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"], [134, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"], [135, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"], [136, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"], [137, "module-neural_compressor.adaptor.tf_utils.transform_graph"], [138, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"], [139, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"], [140, "module-neural_compressor.adaptor.tf_utils.util"], [141, "module-neural_compressor.adaptor.torch_utils.bf16_convert"], [142, "module-neural_compressor.adaptor.torch_utils.hawq_metric"], [143, "module-neural_compressor.adaptor.torch_utils"], [144, "module-neural_compressor.adaptor.torch_utils.onnx"], [145, "module-neural_compressor.adaptor.torch_utils.smooth_quant"], [146, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"], [147, "module-neural_compressor.adaptor.torch_utils.util"], [148, "module-neural_compressor.algorithm.algorithm"], [149, "module-neural_compressor.algorithm.fast_bias_correction"], [150, "module-neural_compressor.algorithm"], [151, "module-neural_compressor.algorithm.smooth_quant"], [152, "module-neural_compressor.algorithm.weight_correction"], [153, "module-neural_compressor.benchmark"], [154, "module-neural_compressor.compression.callbacks"], [155, "module-neural_compressor.compression.distillation.criterions"], [156, "module-neural_compressor.compression.distillation"], [157, "module-neural_compressor.compression"], [158, "module-neural_compressor.compression.pruner.criteria"], [159, "module-neural_compressor.compression.pruner"], [160, "module-neural_compressor.compression.pruner.patterns"], [161, "module-neural_compressor.compression.pruner.pruners"], [162, "module-neural_compressor.compression.pruner.regs"], [163, "module-neural_compressor.compression.pruner.schedulers"], [164, "module-neural_compressor.compression.pruner.utils"], [165, "module-neural_compressor.conf.config"], [166, "module-neural_compressor.conf.dotdict"], [167, "module-neural_compressor.conf"], [168, "module-neural_compressor.conf.pythonic_config"], [169, "module-neural_compressor.config"], [170, "module-neural_compressor.contrib"], [171, "module-neural_compressor.contrib.strategy"], [172, "module-neural_compressor.contrib.strategy.sigopt"], [173, "module-neural_compressor.contrib.strategy.tpe"], [174, "module-neural_compressor.data.dataloaders.base_dataloader"], [175, "module-neural_compressor.data.dataloaders.dataloader"], [176, "module-neural_compressor.data.dataloaders.default_dataloader"], [177, "module-neural_compressor.data.dataloaders.fetcher"], [178, "module-neural_compressor.data.dataloaders"], [179, "module-neural_compressor.data.dataloaders.mxnet_dataloader"], [180, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"], [181, "module-neural_compressor.data.dataloaders.pytorch_dataloader"], [182, "module-neural_compressor.data.dataloaders.sampler"], [183, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"], [184, "module-neural_compressor.data.datasets.bert_dataset"], [185, "module-neural_compressor.data.datasets.coco_dataset"], [186, "module-neural_compressor.data.datasets.dataset"], [187, "module-neural_compressor.data.datasets.dummy_dataset"], [188, "module-neural_compressor.data.datasets.dummy_dataset_v2"], [189, "module-neural_compressor.data.datasets.imagenet_dataset"], [190, "module-neural_compressor.data.datasets"], [191, "module-neural_compressor.data.datasets.style_transfer_dataset"], [192, "module-neural_compressor.data.filters.coco_filter"], [193, "module-neural_compressor.data.filters.filter"], [194, "module-neural_compressor.data.filters"], [195, "module-neural_compressor.data"], [196, "module-neural_compressor.data.transforms.coco_transform"], [197, "module-neural_compressor.data.transforms.imagenet_transform"], [198, "module-neural_compressor.data.transforms"], [199, "module-neural_compressor.data.transforms.postprocess"], [200, "module-neural_compressor.data.transforms.tokenization"], [201, "module-neural_compressor.data.transforms.transform"], [202, "module-neural_compressor.experimental.benchmark"], [203, "module-neural_compressor.experimental.common.criterion"], [204, "module-neural_compressor.experimental.common.dataloader"], [205, "module-neural_compressor.experimental.common"], [206, "module-neural_compressor.experimental.common.metric"], [207, "module-neural_compressor.experimental.common.model"], [208, "module-neural_compressor.experimental.common.optimizer"], [209, "module-neural_compressor.experimental.common.postprocess"], [210, "module-neural_compressor.experimental.common.torch_utils"], [211, "module-neural_compressor.experimental.component"], [212, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"], [213, "module-neural_compressor.experimental.data.dataloaders.dataloader"], [214, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"], [215, "module-neural_compressor.experimental.data.dataloaders.fetcher"], [216, "module-neural_compressor.experimental.data.dataloaders"], [217, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"], [218, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"], [219, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"], [220, "module-neural_compressor.experimental.data.dataloaders.sampler"], [221, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"], [222, "module-neural_compressor.experimental.data.datasets.bert_dataset"], [223, "module-neural_compressor.experimental.data.datasets.coco_dataset"], [224, "module-neural_compressor.experimental.data.datasets.dataset"], [225, "module-neural_compressor.experimental.data.datasets.dummy_dataset"], [226, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"], [227, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"], [228, "module-neural_compressor.experimental.data.datasets"], [229, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"], [230, "module-neural_compressor.experimental.data.filters.coco_filter"], [231, "module-neural_compressor.experimental.data.filters.filter"], [232, "module-neural_compressor.experimental.data.filters"], [233, "module-neural_compressor.experimental.data"], [234, "module-neural_compressor.experimental.data.transforms.imagenet_transform"], [235, "module-neural_compressor.experimental.data.transforms"], [236, "module-neural_compressor.experimental.data.transforms.tokenization"], [237, "module-neural_compressor.experimental.data.transforms.transform"], [238, "module-neural_compressor.experimental.distillation"], [239, "module-neural_compressor.experimental.export"], [240, "module-neural_compressor.experimental.export.qlinear2qdq"], [241, "module-neural_compressor.experimental.export.tf2onnx"], [242, "module-neural_compressor.experimental.export.torch2onnx"], [243, "module-neural_compressor.experimental.export.utils"], [244, "module-neural_compressor.experimental.graph_optimization"], [245, "module-neural_compressor.experimental"], [246, "module-neural_compressor.experimental.metric.bleu"], [247, "module-neural_compressor.experimental.metric.bleu_util"], [248, "module-neural_compressor.experimental.metric.coco_label_map"], [249, "module-neural_compressor.experimental.metric.coco_tools"], [250, "module-neural_compressor.experimental.metric.evaluate_squad"], [251, "module-neural_compressor.experimental.metric.f1"], [252, "module-neural_compressor.experimental.metric"], [253, "module-neural_compressor.experimental.metric.metric"], [254, "module-neural_compressor.experimental.mixed_precision"], [255, "module-neural_compressor.experimental.model_conversion"], [256, "module-neural_compressor.experimental.nas.basic_nas"], [257, "module-neural_compressor.experimental.nas.dynas"], [258, "module-neural_compressor.experimental.nas.dynast.dynas_manager"], [259, "module-neural_compressor.experimental.nas.dynast.dynas_predictor"], [260, "module-neural_compressor.experimental.nas.dynast.dynas_search"], [261, "module-neural_compressor.experimental.nas.dynast.dynas_utils"], [262, "module-neural_compressor.experimental.nas.dynast"], [263, "module-neural_compressor.experimental.nas.dynast.supernetwork"], [264, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation"], [265, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork"], [266, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface"], [267, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork"], [268, "module-neural_compressor.experimental.nas"], [269, "module-neural_compressor.experimental.nas.nas"], [270, "module-neural_compressor.experimental.nas.nas_utils"], [271, "module-neural_compressor.experimental.nas.search_algorithms"], [272, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"], [273, "module-neural_compressor.experimental.pruner_legacy.group_lasso"], [274, "module-neural_compressor.experimental.pruner_legacy"], [275, "module-neural_compressor.experimental.pruner_legacy.magnitude"], [276, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"], [277, "module-neural_compressor.experimental.pruner_legacy.pruner"], [278, "module-neural_compressor.experimental.pruning"], [279, "module-neural_compressor.experimental.pruning_recipes"], [280, "module-neural_compressor.experimental.pruning_recipes.patterns"], [281, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"], [282, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"], [283, "module-neural_compressor.experimental.pruning_v2"], [284, "module-neural_compressor.experimental.pytorch_pruner"], [285, "module-neural_compressor.experimental.pytorch_pruner.logger"], [286, "module-neural_compressor.experimental.pytorch_pruner.patterns"], [287, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"], [288, "module-neural_compressor.experimental.pytorch_pruner.pruner"], [289, "module-neural_compressor.experimental.pytorch_pruner.pruning"], [290, "module-neural_compressor.experimental.pytorch_pruner.scheduler"], [291, "module-neural_compressor.experimental.quantization"], [292, "module-neural_compressor.experimental.scheduler"], [293, "module-neural_compressor"], [294, "module-neural_compressor.metric.bleu"], [295, "module-neural_compressor.metric.bleu_util"], [296, "module-neural_compressor.metric.coco_label_map"], [297, "module-neural_compressor.metric.coco_tools"], [298, "module-neural_compressor.metric.evaluate_squad"], [299, "module-neural_compressor.metric.f1"], [300, "module-neural_compressor.metric"], [301, "module-neural_compressor.metric.metric"], [302, "module-neural_compressor.mix_precision"], [303, "module-neural_compressor.model.base_model"], [304, "module-neural_compressor.model"], [305, "module-neural_compressor.model.keras_model"], [306, "module-neural_compressor.model.model"], [307, "module-neural_compressor.model.mxnet_model"], [308, "module-neural_compressor.model.nets_factory"], [309, "module-neural_compressor.model.onnx_model"], [310, "module-neural_compressor.model.tensorflow_model"], [311, "module-neural_compressor.model.torch_model"], [312, "module-neural_compressor.objective"], [313, "module-neural_compressor.quantization"], [314, "module-neural_compressor.strategy.auto_mixed_precision"], [315, "module-neural_compressor.strategy.basic"], [316, "module-neural_compressor.strategy.bayesian"], [317, "module-neural_compressor.strategy.conservative"], [318, "module-neural_compressor.strategy.exhaustive"], [319, "module-neural_compressor.strategy.hawq_v2"], [320, "module-neural_compressor.strategy"], [321, "module-neural_compressor.strategy.mse"], [322, "module-neural_compressor.strategy.mse_v2"], [323, "module-neural_compressor.strategy.random"], [324, "module-neural_compressor.strategy.strategy"], [325, "module-neural_compressor.strategy.utils.constant"], [326, "module-neural_compressor.strategy.utils"], [327, "module-neural_compressor.strategy.utils.tuning_sampler"], [328, "module-neural_compressor.strategy.utils.tuning_space"], [329, "module-neural_compressor.strategy.utils.tuning_structs"], [330, "module-neural_compressor.strategy.utils.utility"], [331, "module-neural_compressor.training"], [332, "module-neural_compressor.utils.collect_layer_histogram"], [333, "module-neural_compressor.utils.constant"], [334, "module-neural_compressor.utils.create_obj_from_config"], [335, "module-neural_compressor.utils"], [336, "module-neural_compressor.utils.kl_divergence"], [337, "module-neural_compressor.utils.load_huggingface"], [338, "module-neural_compressor.utils.logger"], [339, "module-neural_compressor.utils.options"], [340, "module-neural_compressor.utils.pytorch"], [341, "module-neural_compressor.utils.utility"], [342, "module-neural_compressor.ux.components.benchmark.benchmark"], [343, "module-neural_compressor.ux.components.benchmark.benchmark_model"], [344, "module-neural_compressor.ux.components.benchmark.execute_benchmark"], [345, "module-neural_compressor.ux.components.benchmark"], [346, "module-neural_compressor.ux.components.config_generator.benchmark_config_generator"], [347, "module-neural_compressor.ux.components.config_generator.config_generator"], [348, "module-neural_compressor.ux.components.config_generator.graph_optimization_config_generator"], [349, "module-neural_compressor.ux.components.config_generator"], [350, "module-neural_compressor.ux.components.config_generator.mixed_precision_config_generator"], [351, "module-neural_compressor.ux.components.config_generator.profiling_config_generator"], [352, "module-neural_compressor.ux.components.config_generator.pruning_config_generator"], [353, "module-neural_compressor.ux.components.config_generator.quantization_config_generator"], [354, "module-neural_compressor.ux.components.configuration_wizard.configuration_parser"], [355, "module-neural_compressor.ux.components.configuration_wizard.get_boundary_nodes"], [356, "module-neural_compressor.ux.components.configuration_wizard.get_configuration"], [357, "module-neural_compressor.ux.components.configuration_wizard"], [358, "module-neural_compressor.ux.components.configuration_wizard.params_feeder"], [359, "module-neural_compressor.ux.components.configuration_wizard.pruning_config_parser"], [360, "module-neural_compressor.ux.components.db_manager.db_manager"], [361, "module-neural_compressor.ux.components.db_manager.db_models.benchmark"], [362, "module-neural_compressor.ux.components.db_manager.db_models.benchmark_result"], [363, "module-neural_compressor.ux.components.db_manager.db_models.dataloader"], [364, "module-neural_compressor.ux.components.db_manager.db_models.dataset"], [365, "module-neural_compressor.ux.components.db_manager.db_models.domain"], [366, "module-neural_compressor.ux.components.db_manager.db_models.domain_flavour"], [367, "module-neural_compressor.ux.components.db_manager.db_models.example"], [368, "module-neural_compressor.ux.components.db_manager.db_models.framework"], [369, "module-neural_compressor.ux.components.db_manager.db_models"], [370, "module-neural_compressor.ux.components.db_manager.db_models.metric"], [371, "module-neural_compressor.ux.components.db_manager.db_models.model"], [372, "module-neural_compressor.ux.components.db_manager.db_models.optimization"], [373, "module-neural_compressor.ux.components.db_manager.db_models.optimization_type"], [374, "module-neural_compressor.ux.components.db_manager.db_models.precision"], [375, "module-neural_compressor.ux.components.db_manager.db_models.profiling"], [376, "module-neural_compressor.ux.components.db_manager.db_models.profiling_result"], [377, "module-neural_compressor.ux.components.db_manager.db_models.project"], [378, "module-neural_compressor.ux.components.db_manager.db_models.pruning_details"], [379, "module-neural_compressor.ux.components.db_manager.db_models.transform"], [380, "module-neural_compressor.ux.components.db_manager.db_models.tuning_details"], [381, "module-neural_compressor.ux.components.db_manager.db_models.tuning_history"], [382, "module-neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface"], [383, "module-neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface"], [384, "module-neural_compressor.ux.components.db_manager.db_operations.db_operations"], [385, "module-neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface"], [386, "module-neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface"], [387, "module-neural_compressor.ux.components.db_manager.db_operations.examples_api_interface"], [388, "module-neural_compressor.ux.components.db_manager.db_operations"], [389, "module-neural_compressor.ux.components.db_manager.db_operations.model_api_interface"], [390, "module-neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface"], [391, "module-neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface"], [392, "module-neural_compressor.ux.components.db_manager.db_operations.project_api_interface"], [393, "module-neural_compressor.ux.components.db_manager"], [394, "module-neural_compressor.ux.components.db_manager.params_interfaces"], [395, "module-neural_compressor.ux.components.db_manager.utils"], [396, "module-neural_compressor.ux.components.diagnosis.diagnosis"], [397, "module-neural_compressor.ux.components.diagnosis.factory"], [398, "module-neural_compressor.ux.components.diagnosis"], [399, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis"], [400, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis"], [401, "module-neural_compressor.ux.components.diagnosis.op_details"], [402, "module-neural_compressor.ux.components.diagnosis.op_entry"], [403, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis"], [404, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis"], [405, "module-neural_compressor.ux.components.file_browser.file_browser"], [406, "module-neural_compressor.ux.components.file_browser"], [407, "module-neural_compressor.ux.components.graph.attribute"], [408, "module-neural_compressor.ux.components.graph.collapser"], [409, "module-neural_compressor.ux.components.graph.edge"], [410, "module-neural_compressor.ux.components.graph.graph"], [411, "module-neural_compressor.ux.components.graph.graph_reader"], [412, "module-neural_compressor.ux.components.graph"], [413, "module-neural_compressor.ux.components.graph.node"], [414, "module-neural_compressor.ux.components.graph.reader"], [415, "module-neural_compressor.ux.components.graph.reader.onnxrt_reader"], [416, "module-neural_compressor.ux.components.graph.reader.tensorflow_reader"], [417, "module-neural_compressor.ux.components"], [418, "module-neural_compressor.ux.components.jobs_management"], [419, "module-neural_compressor.ux.components.jobs_management.jobs_control_queue"], [420, "module-neural_compressor.ux.components.jobs_management.jobs_manager"], [421, "module-neural_compressor.ux.components.jobs_management.request"], [422, "module-neural_compressor.ux.components.manage_workspace"], [423, "module-neural_compressor.ux.components.model.domain"], [424, "module-neural_compressor.ux.components.model"], [425, "module-neural_compressor.ux.components.model.model"], [426, "module-neural_compressor.ux.components.model.model_type_getter"], [427, "module-neural_compressor.ux.components.model.onnxrt"], [428, "module-neural_compressor.ux.components.model.onnxrt.model"], [429, "module-neural_compressor.ux.components.model.pytorch"], [430, "module-neural_compressor.ux.components.model.pytorch.model"], [431, "module-neural_compressor.ux.components.model.repository"], [432, "module-neural_compressor.ux.components.model.shape"], [433, "module-neural_compressor.ux.components.model.tensorflow.frozen_pb"], [434, "module-neural_compressor.ux.components.model.tensorflow"], [435, "module-neural_compressor.ux.components.model.tensorflow.keras"], [436, "module-neural_compressor.ux.components.model.tensorflow.meta_graph"], [437, "module-neural_compressor.ux.components.model.tensorflow.model"], [438, "module-neural_compressor.ux.components.model.tensorflow.saved_model"], [439, "module-neural_compressor.ux.components.model.tensorflow.utils"], [440, "module-neural_compressor.ux.components.model_zoo.download_config"], [441, "module-neural_compressor.ux.components.model_zoo.download_model"], [442, "module-neural_compressor.ux.components.model_zoo.downloader"], [443, "module-neural_compressor.ux.components.model_zoo"], [444, "module-neural_compressor.ux.components.model_zoo.list_models"], [445, "module-neural_compressor.ux.components.names_mapper"], [446, "module-neural_compressor.ux.components.names_mapper.names_mapper"], [447, "module-neural_compressor.ux.components.optimization.execute_optimization"], [448, "module-neural_compressor.ux.components.optimization.factory"], [449, "module-neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization"], [450, "module-neural_compressor.ux.components.optimization.graph_optimizer"], [451, "module-neural_compressor.ux.components.optimization.graph_optimizer.optimize_model"], [452, "module-neural_compressor.ux.components.optimization"], [453, "module-neural_compressor.ux.components.optimization.mixed_precision"], [454, "module-neural_compressor.ux.components.optimization.mixed_precision.mixed_precision"], [455, "module-neural_compressor.ux.components.optimization.mixed_precision.optimize_model"], [456, "module-neural_compressor.ux.components.optimization.neural_coder_optimization"], [457, "module-neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model"], [458, "module-neural_compressor.ux.components.optimization.optimization"], [459, "module-neural_compressor.ux.components.optimization.pruning"], [460, "module-neural_compressor.ux.components.optimization.pruning.optimize_model"], [461, "module-neural_compressor.ux.components.optimization.pruning.pruning"], [462, "module-neural_compressor.ux.components.optimization.tune"], [463, "module-neural_compressor.ux.components.optimization.tune.tune_model"], [464, "module-neural_compressor.ux.components.optimization.tune.tuning"], [465, "module-neural_compressor.ux.components.optimization.tuning_history"], [466, "module-neural_compressor.ux.components.profiling.execute_profiling"], [467, "module-neural_compressor.ux.components.profiling.factory"], [468, "module-neural_compressor.ux.components.profiling"], [469, "module-neural_compressor.ux.components.profiling.profile_model"], [470, "module-neural_compressor.ux.components.profiling.profiler"], [471, "module-neural_compressor.ux.components.profiling.profiling"], [472, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.factory"], [473, "module-neural_compressor.ux.components.profiling.tensorflow_profiler"], [474, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.profiler"], [475, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.utils"], [476, "module-neural_compressor.ux.inc_bench"], [477, "module-neural_compressor.ux"], [478, "module-neural_compressor.ux.utils.consts"], [479, "module-neural_compressor.ux.utils.environment"], [480, "module-neural_compressor.ux.utils.exceptions"], [481, "module-neural_compressor.ux.utils.executor"], [482, "module-neural_compressor.ux.utils.expiring_dict"], [483, "module-neural_compressor.ux.utils.github_info"], [484, "module-neural_compressor.ux.utils.hw_info"], [485, "module-neural_compressor.ux.utils"], [486, "module-neural_compressor.ux.utils.json_serializer"], [487, "module-neural_compressor.ux.utils.logger"], [488, "module-neural_compressor.ux.utils.parser"], [489, "module-neural_compressor.ux.utils.proc"], [490, "module-neural_compressor.ux.utils.processes"], [491, "module-neural_compressor.ux.utils.singleton"], [492, "module-neural_compressor.ux.utils.status_updates"], [493, "module-neural_compressor.ux.utils.templates"], [494, "module-neural_compressor.ux.utils.templates.metric"], [495, "module-neural_compressor.ux.utils.templates.workdir"], [496, "module-neural_compressor.ux.utils.utils"], [497, "module-neural_compressor.ux.utils.workload.config"], [498, "module-neural_compressor.ux.utils.workload.dataloader"], [499, "module-neural_compressor.ux.utils.workload.evaluation"], [500, "module-neural_compressor.ux.utils.workload.graph_optimization"], [501, "module-neural_compressor.ux.utils.workload"], [502, "module-neural_compressor.ux.utils.workload.mixed_precision"], [503, "module-neural_compressor.ux.utils.workload.model"], [504, "module-neural_compressor.ux.utils.workload.pruning"], [505, "module-neural_compressor.ux.utils.workload.quantization"], [506, "module-neural_compressor.ux.utils.workload.tuning"], [507, "module-neural_compressor.ux.utils.yaml_utils"], [508, "module-neural_compressor.ux.web.communication"], [509, "module-neural_compressor.ux.web.configuration"], [510, "module-neural_compressor.ux.web.exceptions"], [511, "module-neural_compressor.ux.web"], [512, "module-neural_compressor.ux.web.router"], [513, "module-neural_compressor.ux.web.server"], [514, "module-neural_compressor.ux.web.service.benchmark"], [515, "module-neural_compressor.ux.web.service.history_snapshot_parser"], [516, "module-neural_compressor.ux.web.service"], [517, "module-neural_compressor.ux.web.service.model"], [518, "module-neural_compressor.ux.web.service.optimization"], [519, "module-neural_compressor.ux.web.service.profiling"], [520, "module-neural_compressor.ux.web.service.request_data_processor"], [521, "module-neural_compressor.ux.web.service.response_generator"], [522, "module-neural_compressor.ux.web.service.workload"], [523, "module-neural_compressor.version"], [551, "module-neural_compressor.experimental.metric.bleu"]], "6ece06672ed3_v1_14": [[1, "module-6ece06672ed3_v1_14"]], "update_dataloaders() (in module 6ece06672ed3_v1_14)": [[1, "ece06672ed3_v1_14.update_dataloaders"]], "update_transformations() (in module 6ece06672ed3_v1_14)": [[1, "ece06672ed3_v1_14.update_transformations"]], "6f0d0f71d92e_v1_13": [[2, "module-6f0d0f71d92e_v1_13"]], "9e89549a08c8_v1_11": [[3, "module-9e89549a08c8_v1_11"]], "block_mask": [[4, "module-block_mask"]], "env": [[5, "module-env"]], "run_migrations_offline() (in module env)": [[5, "env.run_migrations_offline"]], "run_migrations_online() (in module env)": [[5, "env.run_migrations_online"]], "adaptor (class in neural_compressor.adaptor.adaptor)": [[6, "neural_compressor.adaptor.adaptor.Adaptor"]], "adaptor_registry() (in module neural_compressor.adaptor.adaptor)": [[6, "neural_compressor.adaptor.adaptor.adaptor_registry"]], "convert() (neural_compressor.adaptor.adaptor.adaptor method)": [[6, "neural_compressor.adaptor.adaptor.Adaptor.convert"]], "evaluate() (neural_compressor.adaptor.adaptor.adaptor method)": [[6, "neural_compressor.adaptor.adaptor.Adaptor.evaluate"]], "inspect_tensor() (neural_compressor.adaptor.adaptor.adaptor method)": [[6, "neural_compressor.adaptor.adaptor.Adaptor.inspect_tensor"]], "neural_compressor.adaptor.adaptor": [[6, "module-neural_compressor.adaptor.adaptor"]], "quantize() (neural_compressor.adaptor.adaptor.adaptor method)": [[6, "neural_compressor.adaptor.adaptor.Adaptor.quantize"]], "quantize_input() (neural_compressor.adaptor.adaptor.adaptor method)": [[6, "neural_compressor.adaptor.adaptor.Adaptor.quantize_input"]], "query_fused_patterns() (neural_compressor.adaptor.adaptor.adaptor method)": [[6, "neural_compressor.adaptor.adaptor.Adaptor.query_fused_patterns"]], "query_fw_capability() (neural_compressor.adaptor.adaptor.adaptor method)": [[6, "neural_compressor.adaptor.adaptor.Adaptor.query_fw_capability"]], "save() (neural_compressor.adaptor.adaptor.adaptor method)": [[6, "neural_compressor.adaptor.adaptor.Adaptor.save"]], "set_tensor() (neural_compressor.adaptor.adaptor.adaptor method)": [[6, "neural_compressor.adaptor.adaptor.Adaptor.set_tensor"]], "neural_compressor.adaptor": [[7, "module-neural_compressor.adaptor"]], "kerasadaptor (class in neural_compressor.adaptor.keras)": [[8, "neural_compressor.adaptor.keras.KerasAdaptor"]], "kerasquery (class in neural_compressor.adaptor.keras)": [[8, "neural_compressor.adaptor.keras.KerasQuery"]], "convert() (neural_compressor.adaptor.keras.kerasadaptor method)": [[8, "neural_compressor.adaptor.keras.KerasAdaptor.convert"]], "evaluate() (neural_compressor.adaptor.keras.kerasadaptor method)": [[8, "neural_compressor.adaptor.keras.KerasAdaptor.evaluate"]], "get_op_types() (neural_compressor.adaptor.keras.kerasquery method)": [[8, "neural_compressor.adaptor.keras.KerasQuery.get_op_types"]], "get_op_types_by_precision() (neural_compressor.adaptor.keras.kerasquery method)": [[8, "neural_compressor.adaptor.keras.KerasQuery.get_op_types_by_precision"]], "get_optype_wise_ability() (neural_compressor.adaptor.keras.kerasadaptor method)": [[8, "neural_compressor.adaptor.keras.KerasAdaptor.get_optype_wise_ability"]], "get_precisions() (neural_compressor.adaptor.keras.kerasquery method)": [[8, "neural_compressor.adaptor.keras.KerasQuery.get_precisions"]], "get_quantization_capability() (neural_compressor.adaptor.keras.kerasquery method)": [[8, "neural_compressor.adaptor.keras.KerasQuery.get_quantization_capability"]], "get_version() (neural_compressor.adaptor.keras.kerasquery method)": [[8, "neural_compressor.adaptor.keras.KerasQuery.get_version"]], "inspect_tensor() (neural_compressor.adaptor.keras.kerasadaptor method)": [[8, "neural_compressor.adaptor.keras.KerasAdaptor.inspect_tensor"]], "neural_compressor.adaptor.keras": [[8, "module-neural_compressor.adaptor.keras"]], "quantize() (neural_compressor.adaptor.keras.kerasadaptor method)": [[8, "neural_compressor.adaptor.keras.KerasAdaptor.quantize"]], "quantize_input() (neural_compressor.adaptor.keras.kerasadaptor method)": [[8, "neural_compressor.adaptor.keras.KerasAdaptor.quantize_input"]], "query_fw_capability() (neural_compressor.adaptor.keras.kerasadaptor method)": [[8, "neural_compressor.adaptor.keras.KerasAdaptor.query_fw_capability"]], "save() (neural_compressor.adaptor.keras.kerasadaptor method)": [[8, "neural_compressor.adaptor.keras.KerasAdaptor.save"]], "set_tensor() (neural_compressor.adaptor.keras.kerasadaptor method)": [[8, "neural_compressor.adaptor.keras.KerasAdaptor.set_tensor"]], "neural_compressor.adaptor.keras_utils": [[9, "module-neural_compressor.adaptor.keras_utils"]], "neural_compressor.adaptor.keras_utils.quantizer": [[10, "module-neural_compressor.adaptor.keras_utils.quantizer"]], "mxnetadaptor (class in neural_compressor.adaptor.mxnet)": [[11, "neural_compressor.adaptor.mxnet.MxNetAdaptor"]], "evaluate() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[11, "neural_compressor.adaptor.mxnet.MxNetAdaptor.evaluate"]], "inspect_tensor() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[11, "neural_compressor.adaptor.mxnet.MxNetAdaptor.inspect_tensor"]], "neural_compressor.adaptor.mxnet": [[11, "module-neural_compressor.adaptor.mxnet"]], "quantize() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[11, "neural_compressor.adaptor.mxnet.MxNetAdaptor.quantize"]], "query_fw_capability() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[11, "neural_compressor.adaptor.mxnet.MxNetAdaptor.query_fw_capability"]], "recover_tuned_model() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[11, "neural_compressor.adaptor.mxnet.MxNetAdaptor.recover_tuned_model"]], "set_tensor() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[11, "neural_compressor.adaptor.mxnet.MxNetAdaptor.set_tensor"]], "neural_compressor.adaptor.mxnet_utils": [[12, "module-neural_compressor.adaptor.mxnet_utils"]], "calibcollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CalibCollector"]], "calibdata (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CalibData"]], "collectorbase (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CollectorBase"]], "dataiterloader (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.DataIterLoader"]], "dataloaderwrap (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.DataLoaderWrap"]], "namecollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.NameCollector"]], "optype (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.OpType"]], "tensorcollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.TensorCollector"]], "amp_convert() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.amp_convert"]], "calc_kl_th_dict() (neural_compressor.adaptor.mxnet_utils.util.calibcollector method)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CalibCollector.calc_kl_th_dict"]], "calib_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.calib_model"]], "check_mx_version() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.check_mx_version"]], "collect_gluon() (neural_compressor.adaptor.mxnet_utils.util.calibcollector method)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CalibCollector.collect_gluon"]], "collect_gluon() (neural_compressor.adaptor.mxnet_utils.util.collectorbase method)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CollectorBase.collect_gluon"]], "collect_gluon() (neural_compressor.adaptor.mxnet_utils.util.namecollector method)": [[13, "neural_compressor.adaptor.mxnet_utils.util.NameCollector.collect_gluon"]], "collect_gluon() (neural_compressor.adaptor.mxnet_utils.util.tensorcollector method)": [[13, "neural_compressor.adaptor.mxnet_utils.util.TensorCollector.collect_gluon"]], "collect_module() (neural_compressor.adaptor.mxnet_utils.util.collectorbase method)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CollectorBase.collect_module"]], "combine_capabilities() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.combine_capabilities"]], "create_data_example() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.create_data_example"]], "distribute_calib_tensors() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.distribute_calib_tensors"]], "ensure_list() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.ensure_list"]], "fuse() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.fuse"]], "get_framework_name() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.get_framework_name"]], "is_model_quantized() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.is_model_quantized"]], "isiterable() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.isiterable"]], "make_module() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.make_module"]], "make_nc_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.make_nc_model"]], "make_symbol_block() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.make_symbol_block"]], "min_max_dict (neural_compressor.adaptor.mxnet_utils.util.calibdata property)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CalibData.min_max_dict"]], "ndarray_to_device() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.ndarray_to_device"]], "neural_compressor.adaptor.mxnet_utils.util": [[13, "module-neural_compressor.adaptor.mxnet_utils.util"]], "parse_tune_config() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.parse_tune_config"]], "post_batch() (neural_compressor.adaptor.mxnet_utils.util.collectorbase method)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CollectorBase.post_batch"]], "post_collect() (neural_compressor.adaptor.mxnet_utils.util.calibdata method)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CalibData.post_collect"]], "pre_batch() (neural_compressor.adaptor.mxnet_utils.util.collectorbase method)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CollectorBase.pre_batch"]], "pre_batch() (neural_compressor.adaptor.mxnet_utils.util.tensorcollector method)": [[13, "neural_compressor.adaptor.mxnet_utils.util.TensorCollector.pre_batch"]], "prepare_dataloader() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.prepare_dataloader"]], "prepare_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.prepare_model"]], "prepare_model_data() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.prepare_model_data"]], "quantize_sym_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.quantize_sym_model"]], "query_quantizable_nodes() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.query_quantizable_nodes"]], "run_forward() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.run_forward"]], "onnxrt_integeropsadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRT_IntegerOpsAdaptor"]], "onnxrt_qdqadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRT_QDQAdaptor"]], "onnxrt_qlinearopsadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRT_QLinearOpsAdaptor"]], "onnxruntimeadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor"]], "evaluate() (neural_compressor.adaptor.onnxrt.onnxruntimeadaptor method)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor.evaluate"]], "inspect_tensor() (neural_compressor.adaptor.onnxrt.onnxruntimeadaptor method)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor.inspect_tensor"]], "neural_compressor.adaptor.onnxrt": [[14, "module-neural_compressor.adaptor.onnxrt"]], "quantize() (neural_compressor.adaptor.onnxrt.onnxruntimeadaptor method)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor.quantize"]], "query_fw_capability() (neural_compressor.adaptor.onnxrt.onnxruntimeadaptor method)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor.query_fw_capability"]], "recover() (neural_compressor.adaptor.onnxrt.onnxruntimeadaptor method)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor.recover"]], "save() (neural_compressor.adaptor.onnxrt.onnxruntimeadaptor method)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor.save"]], "smooth_quant() (neural_compressor.adaptor.onnxrt.onnxruntimeadaptor method)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor.smooth_quant"]], "onnxrtaugment (class in neural_compressor.adaptor.ox_utils.calibration)": [[15, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment"]], "augment_graph() (neural_compressor.adaptor.ox_utils.calibration.onnxrtaugment method)": [[15, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment.augment_graph"]], "calculate_quantization_params() (neural_compressor.adaptor.ox_utils.calibration.onnxrtaugment method)": [[15, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment.calculate_quantization_params"]], "calculate_scale_zeropoint() (neural_compressor.adaptor.ox_utils.calibration.onnxrtaugment method)": [[15, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment.calculate_scale_zeropoint"]], "calib_smooth() (neural_compressor.adaptor.ox_utils.calibration.onnxrtaugment method)": [[15, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment.calib_smooth"]], "dump_calibration() (neural_compressor.adaptor.ox_utils.calibration.onnxrtaugment method)": [[15, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment.dump_calibration"]], "dump_minmax() (neural_compressor.adaptor.ox_utils.calibration.onnxrtaugment method)": [[15, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment.dump_minmax"]], "dump_tensor() (neural_compressor.adaptor.ox_utils.calibration.onnxrtaugment method)": [[15, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment.dump_tensor"]], "get_intermediate_outputs() (neural_compressor.adaptor.ox_utils.calibration.onnxrtaugment method)": [[15, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment.get_intermediate_outputs"]], "neural_compressor.adaptor.ox_utils.calibration": [[15, "module-neural_compressor.adaptor.ox_utils.calibration"]], "neural_compressor.adaptor.ox_utils": [[16, "module-neural_compressor.adaptor.ox_utils"]], "activationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[17, "neural_compressor.adaptor.ox_utils.operators.activation.ActivationOperator"]], "qactivationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[17, "neural_compressor.adaptor.ox_utils.operators.activation.QActivationOperator"]], "removableactivationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[17, "neural_compressor.adaptor.ox_utils.operators.activation.RemovableActivationOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.activation.activationoperator method)": [[17, "neural_compressor.adaptor.ox_utils.operators.activation.ActivationOperator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.activation.qactivationoperator method)": [[17, "neural_compressor.adaptor.ox_utils.operators.activation.QActivationOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.activation.activationoperator method)": [[17, "neural_compressor.adaptor.ox_utils.operators.activation.ActivationOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[17, "module-neural_compressor.adaptor.ox_utils.operators.activation"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.activation.activationoperator method)": [[17, "neural_compressor.adaptor.ox_utils.operators.activation.ActivationOperator.quantize"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.activation.removableactivationoperator method)": [[17, "neural_compressor.adaptor.ox_utils.operators.activation.RemovableActivationOperator.quantize"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.activation.activationoperator method)": [[17, "neural_compressor.adaptor.ox_utils.operators.activation.ActivationOperator.quantize_check"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.activation.removableactivationoperator method)": [[17, "neural_compressor.adaptor.ox_utils.operators.activation.RemovableActivationOperator.quantize_check"]], "argmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.argmax)": [[18, "neural_compressor.adaptor.ox_utils.operators.argmax.ArgMaxOperator"]], "qargmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.argmax)": [[18, "neural_compressor.adaptor.ox_utils.operators.argmax.QArgMaxOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.argmax.argmaxoperator method)": [[18, "neural_compressor.adaptor.ox_utils.operators.argmax.ArgMaxOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.argmax.argmaxoperator method)": [[18, "neural_compressor.adaptor.ox_utils.operators.argmax.ArgMaxOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[18, "module-neural_compressor.adaptor.ox_utils.operators.argmax"]], "attentionoperator (class in neural_compressor.adaptor.ox_utils.operators.attention)": [[19, "neural_compressor.adaptor.ox_utils.operators.attention.AttentionOperator"]], "qattentionoperator (class in neural_compressor.adaptor.ox_utils.operators.attention)": [[19, "neural_compressor.adaptor.ox_utils.operators.attention.QAttentionOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.attention.attentionoperator method)": [[19, "neural_compressor.adaptor.ox_utils.operators.attention.AttentionOperator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.attention.qattentionoperator method)": [[19, "neural_compressor.adaptor.ox_utils.operators.attention.QAttentionOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.attention.attentionoperator method)": [[19, "neural_compressor.adaptor.ox_utils.operators.attention.AttentionOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[19, "module-neural_compressor.adaptor.ox_utils.operators.attention"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.attention.attentionoperator method)": [[19, "neural_compressor.adaptor.ox_utils.operators.attention.AttentionOperator.quantize"]], "binaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[20, "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryOperator"]], "qbinaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[20, "neural_compressor.adaptor.ox_utils.operators.binary_op.QBinaryOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.binary_op.binaryoperator method)": [[20, "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryOperator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.binary_op.qbinaryoperator method)": [[20, "neural_compressor.adaptor.ox_utils.operators.binary_op.QBinaryOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.binary_op.binaryoperator method)": [[20, "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[20, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.binary_op.binaryoperator method)": [[20, "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryOperator.quantize"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.binary_op.binaryoperator method)": [[20, "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryOperator.quantize_check"]], "concatoperator (class in neural_compressor.adaptor.ox_utils.operators.concat)": [[21, "neural_compressor.adaptor.ox_utils.operators.concat.ConcatOperator"]], "qconcatoperator (class in neural_compressor.adaptor.ox_utils.operators.concat)": [[21, "neural_compressor.adaptor.ox_utils.operators.concat.QConcatOperator"]], "cast() (neural_compressor.adaptor.ox_utils.operators.concat.concatoperator method)": [[21, "neural_compressor.adaptor.ox_utils.operators.concat.ConcatOperator.cast"]], "convert() (neural_compressor.adaptor.ox_utils.operators.concat.concatoperator method)": [[21, "neural_compressor.adaptor.ox_utils.operators.concat.ConcatOperator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.concat.qconcatoperator method)": [[21, "neural_compressor.adaptor.ox_utils.operators.concat.QConcatOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.concat.concatoperator method)": [[21, "neural_compressor.adaptor.ox_utils.operators.concat.ConcatOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[21, "module-neural_compressor.adaptor.ox_utils.operators.concat"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.concat.concatoperator method)": [[21, "neural_compressor.adaptor.ox_utils.operators.concat.ConcatOperator.quantize"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.concat.concatoperator method)": [[21, "neural_compressor.adaptor.ox_utils.operators.concat.ConcatOperator.quantize_check"]], "convoperator (class in neural_compressor.adaptor.ox_utils.operators.conv)": [[22, "neural_compressor.adaptor.ox_utils.operators.conv.ConvOperator"]], "qconvoperator (class in neural_compressor.adaptor.ox_utils.operators.conv)": [[22, "neural_compressor.adaptor.ox_utils.operators.conv.QConvOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.conv.convoperator method)": [[22, "neural_compressor.adaptor.ox_utils.operators.conv.ConvOperator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.conv.qconvoperator method)": [[22, "neural_compressor.adaptor.ox_utils.operators.conv.QConvOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.conv.convoperator method)": [[22, "neural_compressor.adaptor.ox_utils.operators.conv.ConvOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[22, "module-neural_compressor.adaptor.ox_utils.operators.conv"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.conv.convoperator method)": [[22, "neural_compressor.adaptor.ox_utils.operators.conv.ConvOperator.quantize"]], "direct8bitoperator (class in neural_compressor.adaptor.ox_utils.operators.direct_q8)": [[23, "neural_compressor.adaptor.ox_utils.operators.direct_q8.Direct8BitOperator"]], "qdirectoperator (class in neural_compressor.adaptor.ox_utils.operators.direct_q8)": [[23, "neural_compressor.adaptor.ox_utils.operators.direct_q8.QDirectOperator"]], "cast() (neural_compressor.adaptor.ox_utils.operators.direct_q8.direct8bitoperator method)": [[23, "neural_compressor.adaptor.ox_utils.operators.direct_q8.Direct8BitOperator.cast"]], "convert() (neural_compressor.adaptor.ox_utils.operators.direct_q8.direct8bitoperator method)": [[23, "neural_compressor.adaptor.ox_utils.operators.direct_q8.Direct8BitOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.direct_q8.direct8bitoperator method)": [[23, "neural_compressor.adaptor.ox_utils.operators.direct_q8.Direct8BitOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[23, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.direct_q8.direct8bitoperator method)": [[23, "neural_compressor.adaptor.ox_utils.operators.direct_q8.Direct8BitOperator.quantize"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.direct_q8.direct8bitoperator method)": [[23, "neural_compressor.adaptor.ox_utils.operators.direct_q8.Direct8BitOperator.quantize_check"]], "embedlayernormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.embed_layernorm)": [[24, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.EmbedLayerNormalizationOperator"]], "qembedlayernormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.embed_layernorm)": [[24, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.QEmbedLayerNormalizationOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.embed_layernorm.embedlayernormalizationoperator method)": [[24, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.EmbedLayerNormalizationOperator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.embed_layernorm.qembedlayernormalizationoperator method)": [[24, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.QEmbedLayerNormalizationOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.embed_layernorm.embedlayernormalizationoperator method)": [[24, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.EmbedLayerNormalizationOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[24, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.embed_layernorm.embedlayernormalizationoperator method)": [[24, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.EmbedLayerNormalizationOperator.quantize"]], "gatheroperator (class in neural_compressor.adaptor.ox_utils.operators.gather)": [[25, "neural_compressor.adaptor.ox_utils.operators.gather.GatherOperator"]], "qgatheroperator (class in neural_compressor.adaptor.ox_utils.operators.gather)": [[25, "neural_compressor.adaptor.ox_utils.operators.gather.QGatherOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.gather.gatheroperator method)": [[25, "neural_compressor.adaptor.ox_utils.operators.gather.GatherOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.gather.gatheroperator method)": [[25, "neural_compressor.adaptor.ox_utils.operators.gather.GatherOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[25, "module-neural_compressor.adaptor.ox_utils.operators.gather"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.gather.gatheroperator method)": [[25, "neural_compressor.adaptor.ox_utils.operators.gather.GatherOperator.quantize"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.gather.gatheroperator method)": [[25, "neural_compressor.adaptor.ox_utils.operators.gather.GatherOperator.quantize_check"]], "globalaveragepooloperator (class in neural_compressor.adaptor.ox_utils.operators.gavgpool)": [[26, "neural_compressor.adaptor.ox_utils.operators.gavgpool.GlobalAveragePoolOperator"]], "qglobalaveragepooloperator (class in neural_compressor.adaptor.ox_utils.operators.gavgpool)": [[26, "neural_compressor.adaptor.ox_utils.operators.gavgpool.QGlobalAveragePoolOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.gavgpool.globalaveragepooloperator method)": [[26, "neural_compressor.adaptor.ox_utils.operators.gavgpool.GlobalAveragePoolOperator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.gavgpool.qglobalaveragepooloperator method)": [[26, "neural_compressor.adaptor.ox_utils.operators.gavgpool.QGlobalAveragePoolOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.gavgpool.globalaveragepooloperator method)": [[26, "neural_compressor.adaptor.ox_utils.operators.gavgpool.GlobalAveragePoolOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[26, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"]], "gemmoperator (class in neural_compressor.adaptor.ox_utils.operators.gemm)": [[27, "neural_compressor.adaptor.ox_utils.operators.gemm.GemmOperator"]], "qgemmoperator (class in neural_compressor.adaptor.ox_utils.operators.gemm)": [[27, "neural_compressor.adaptor.ox_utils.operators.gemm.QGemmOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.gemm.gemmoperator method)": [[27, "neural_compressor.adaptor.ox_utils.operators.gemm.GemmOperator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.gemm.qgemmoperator method)": [[27, "neural_compressor.adaptor.ox_utils.operators.gemm.QGemmOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.gemm.gemmoperator method)": [[27, "neural_compressor.adaptor.ox_utils.operators.gemm.GemmOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[27, "module-neural_compressor.adaptor.ox_utils.operators.gemm"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.gemm.gemmoperator method)": [[27, "neural_compressor.adaptor.ox_utils.operators.gemm.GemmOperator.quantize"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.gemm.gemmoperator method)": [[27, "neural_compressor.adaptor.ox_utils.operators.gemm.GemmOperator.quantize_check"]], "neural_compressor.adaptor.ox_utils.operators": [[28, "module-neural_compressor.adaptor.ox_utils.operators"]], "lstmoperator (class in neural_compressor.adaptor.ox_utils.operators.lstm)": [[29, "neural_compressor.adaptor.ox_utils.operators.lstm.LSTMOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.lstm.lstmoperator method)": [[29, "neural_compressor.adaptor.ox_utils.operators.lstm.LSTMOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.lstm.lstmoperator method)": [[29, "neural_compressor.adaptor.ox_utils.operators.lstm.LSTMOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[29, "module-neural_compressor.adaptor.ox_utils.operators.lstm"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.lstm.lstmoperator method)": [[29, "neural_compressor.adaptor.ox_utils.operators.lstm.LSTMOperator.quantize"]], "matmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[30, "neural_compressor.adaptor.ox_utils.operators.matmul.MatMulOperator"]], "qmatmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[30, "neural_compressor.adaptor.ox_utils.operators.matmul.QMatMulOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.matmul.matmuloperator method)": [[30, "neural_compressor.adaptor.ox_utils.operators.matmul.MatMulOperator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.matmul.qmatmuloperator method)": [[30, "neural_compressor.adaptor.ox_utils.operators.matmul.QMatMulOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.matmul.matmuloperator method)": [[30, "neural_compressor.adaptor.ox_utils.operators.matmul.MatMulOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[30, "module-neural_compressor.adaptor.ox_utils.operators.matmul"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.matmul.matmuloperator method)": [[30, "neural_compressor.adaptor.ox_utils.operators.matmul.MatMulOperator.quantize"]], "maxpooloperator (class in neural_compressor.adaptor.ox_utils.operators.maxpool)": [[31, "neural_compressor.adaptor.ox_utils.operators.maxpool.MaxPoolOperator"]], "qmaxpooloperator (class in neural_compressor.adaptor.ox_utils.operators.maxpool)": [[31, "neural_compressor.adaptor.ox_utils.operators.maxpool.QMaxPoolOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.maxpool.maxpooloperator method)": [[31, "neural_compressor.adaptor.ox_utils.operators.maxpool.MaxPoolOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.maxpool.maxpooloperator method)": [[31, "neural_compressor.adaptor.ox_utils.operators.maxpool.MaxPoolOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[31, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.maxpool.maxpooloperator method)": [[31, "neural_compressor.adaptor.ox_utils.operators.maxpool.MaxPoolOperator.quantize"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.maxpool.maxpooloperator method)": [[31, "neural_compressor.adaptor.ox_utils.operators.maxpool.MaxPoolOperator.quantize_check"]], "operator (class in neural_compressor.adaptor.ox_utils.operators.ops)": [[32, "neural_compressor.adaptor.ox_utils.operators.ops.Operator"]], "qoperator (class in neural_compressor.adaptor.ox_utils.operators.ops)": [[32, "neural_compressor.adaptor.ox_utils.operators.ops.QOperator"]], "cast() (neural_compressor.adaptor.ox_utils.operators.ops.operator method)": [[32, "neural_compressor.adaptor.ox_utils.operators.ops.Operator.cast"]], "convert() (neural_compressor.adaptor.ox_utils.operators.ops.operator method)": [[32, "neural_compressor.adaptor.ox_utils.operators.ops.Operator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.ops.qoperator method)": [[32, "neural_compressor.adaptor.ox_utils.operators.ops.QOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.ops.operator method)": [[32, "neural_compressor.adaptor.ox_utils.operators.ops.Operator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[32, "module-neural_compressor.adaptor.ox_utils.operators.ops"]], "op_registry() (in module neural_compressor.adaptor.ox_utils.operators.ops)": [[32, "neural_compressor.adaptor.ox_utils.operators.ops.op_registry"]], "qop_registry() (in module neural_compressor.adaptor.ox_utils.operators.ops)": [[32, "neural_compressor.adaptor.ox_utils.operators.ops.qop_registry"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.ops.operator method)": [[32, "neural_compressor.adaptor.ox_utils.operators.ops.Operator.quantize"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.ops.operator method)": [[32, "neural_compressor.adaptor.ox_utils.operators.ops.Operator.quantize_check"]], "padoperator (class in neural_compressor.adaptor.ox_utils.operators.pad)": [[33, "neural_compressor.adaptor.ox_utils.operators.pad.PadOperator"]], "qpadoperator (class in neural_compressor.adaptor.ox_utils.operators.pad)": [[33, "neural_compressor.adaptor.ox_utils.operators.pad.QPadOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.pad.padoperator method)": [[33, "neural_compressor.adaptor.ox_utils.operators.pad.PadOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.pad.padoperator method)": [[33, "neural_compressor.adaptor.ox_utils.operators.pad.PadOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[33, "module-neural_compressor.adaptor.ox_utils.operators.pad"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.pad.padoperator method)": [[33, "neural_compressor.adaptor.ox_utils.operators.pad.PadOperator.quantize"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.pad.padoperator method)": [[33, "neural_compressor.adaptor.ox_utils.operators.pad.PadOperator.quantize_check"]], "pooloperator (class in neural_compressor.adaptor.ox_utils.operators.pooling)": [[34, "neural_compressor.adaptor.ox_utils.operators.pooling.PoolOperator"]], "qpooloperator (class in neural_compressor.adaptor.ox_utils.operators.pooling)": [[34, "neural_compressor.adaptor.ox_utils.operators.pooling.QPoolOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.pooling.pooloperator method)": [[34, "neural_compressor.adaptor.ox_utils.operators.pooling.PoolOperator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.pooling.qpooloperator method)": [[34, "neural_compressor.adaptor.ox_utils.operators.pooling.QPoolOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.pooling.pooloperator method)": [[34, "neural_compressor.adaptor.ox_utils.operators.pooling.PoolOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[34, "module-neural_compressor.adaptor.ox_utils.operators.pooling"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.pooling.pooloperator method)": [[34, "neural_compressor.adaptor.ox_utils.operators.pooling.PoolOperator.quantize"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.pooling.pooloperator method)": [[34, "neural_compressor.adaptor.ox_utils.operators.pooling.PoolOperator.quantize_check"]], "qresizeoperator (class in neural_compressor.adaptor.ox_utils.operators.resize)": [[35, "neural_compressor.adaptor.ox_utils.operators.resize.QResizeOperator"]], "resizeoperator (class in neural_compressor.adaptor.ox_utils.operators.resize)": [[35, "neural_compressor.adaptor.ox_utils.operators.resize.ResizeOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.resize.resizeoperator method)": [[35, "neural_compressor.adaptor.ox_utils.operators.resize.ResizeOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.resize.resizeoperator method)": [[35, "neural_compressor.adaptor.ox_utils.operators.resize.ResizeOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[35, "module-neural_compressor.adaptor.ox_utils.operators.resize"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.resize.resizeoperator method)": [[35, "neural_compressor.adaptor.ox_utils.operators.resize.ResizeOperator.quantize"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.resize.resizeoperator method)": [[35, "neural_compressor.adaptor.ox_utils.operators.resize.ResizeOperator.quantize_check"]], "qsplitoperator (class in neural_compressor.adaptor.ox_utils.operators.split)": [[36, "neural_compressor.adaptor.ox_utils.operators.split.QSplitOperator"]], "splitoperator (class in neural_compressor.adaptor.ox_utils.operators.split)": [[36, "neural_compressor.adaptor.ox_utils.operators.split.SplitOperator"]], "cast() (neural_compressor.adaptor.ox_utils.operators.split.splitoperator method)": [[36, "neural_compressor.adaptor.ox_utils.operators.split.SplitOperator.cast"]], "convert() (neural_compressor.adaptor.ox_utils.operators.split.qsplitoperator method)": [[36, "neural_compressor.adaptor.ox_utils.operators.split.QSplitOperator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.split.splitoperator method)": [[36, "neural_compressor.adaptor.ox_utils.operators.split.SplitOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.split.splitoperator method)": [[36, "neural_compressor.adaptor.ox_utils.operators.split.SplitOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.split": [[36, "module-neural_compressor.adaptor.ox_utils.operators.split"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.split.splitoperator method)": [[36, "neural_compressor.adaptor.ox_utils.operators.split.SplitOperator.quantize"]], "quantizer (class in neural_compressor.adaptor.ox_utils.quantizer)": [[37, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer"]], "check_opset_version() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[37, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.check_opset_version"]], "convert_qdq_to_operator_oriented() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[37, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.convert_qdq_to_operator_oriented"]], "dequantize_tensor() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[37, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.dequantize_tensor"]], "dtype_cast() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[37, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.dtype_cast"]], "get_bias_add_nodes() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[37, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.get_bias_add_nodes"]], "insert_qdq() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[37, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.insert_qdq"]], "is_valid_quantize_weight() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[37, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.is_valid_quantize_weight"]], "merge_dedicated_qdq_pair() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[37, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.merge_dedicated_qdq_pair"]], "neural_compressor.adaptor.ox_utils.quantizer": [[37, "module-neural_compressor.adaptor.ox_utils.quantizer"]], "quantize_bias() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[37, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.quantize_bias"]], "quantize_bias_tensor() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[37, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.quantize_bias_tensor"]], "quantize_inputs() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[37, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.quantize_inputs"]], "quantize_model() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[37, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.quantize_model"]], "quantize_outputs() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[37, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.quantize_outputs"]], "quantize_weight_per_channel() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[37, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.quantize_weight_per_channel"]], "quantize_weights_per_channel() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[37, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.quantize_weights_per_channel"]], "remove_redundant_pairs() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[37, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.remove_redundant_pairs"]], "should_cast() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[37, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.should_cast"]], "should_convert() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[37, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.should_convert"]], "should_quantize() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[37, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.should_quantize"]], "tensor_proto_to_array() (neural_compressor.adaptor.ox_utils.quantizer.quantizer static method)": [[37, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.tensor_proto_to_array"]], "quantformat (class in neural_compressor.adaptor.ox_utils.util)": [[38, "neural_compressor.adaptor.ox_utils.util.QuantFormat"]], "quanttype (class in neural_compressor.adaptor.ox_utils.util)": [[38, "neural_compressor.adaptor.ox_utils.util.QuantType"]], "quantizationmode (class in neural_compressor.adaptor.ox_utils.util)": [[38, "neural_compressor.adaptor.ox_utils.util.QuantizationMode"]], "quantizedinitializer (class in neural_compressor.adaptor.ox_utils.util)": [[38, "neural_compressor.adaptor.ox_utils.util.QuantizedInitializer"]], "quantizedvalue (class in neural_compressor.adaptor.ox_utils.util)": [[38, "neural_compressor.adaptor.ox_utils.util.QuantizedValue"]], "quantizedvaluetype (class in neural_compressor.adaptor.ox_utils.util)": [[38, "neural_compressor.adaptor.ox_utils.util.QuantizedValueType"]], "valueinfo (class in neural_compressor.adaptor.ox_utils.util)": [[38, "neural_compressor.adaptor.ox_utils.util.ValueInfo"]], "adjust_weights_per_input() (in module neural_compressor.adaptor.ox_utils.util)": [[38, "neural_compressor.adaptor.ox_utils.util.adjust_weights_per_input"]], "adjust_weights_per_op() (in module neural_compressor.adaptor.ox_utils.util)": [[38, "neural_compressor.adaptor.ox_utils.util.adjust_weights_per_op"]], "attribute_to_kwarg() (in module neural_compressor.adaptor.ox_utils.util)": [[38, "neural_compressor.adaptor.ox_utils.util.attribute_to_kwarg"]], "calculate_scale_zp() (in module neural_compressor.adaptor.ox_utils.util)": [[38, "neural_compressor.adaptor.ox_utils.util.calculate_scale_zp"]], "cast_tensor() (in module neural_compressor.adaptor.ox_utils.util)": [[38, "neural_compressor.adaptor.ox_utils.util.cast_tensor"]], "collate_preds() (in module neural_compressor.adaptor.ox_utils.util)": [[38, "neural_compressor.adaptor.ox_utils.util.collate_preds"]], "dequantize_data() (in module neural_compressor.adaptor.ox_utils.util)": [[38, "neural_compressor.adaptor.ox_utils.util.dequantize_data"]], "dequantize_data_with_scale_zero() (in module neural_compressor.adaptor.ox_utils.util)": [[38, "neural_compressor.adaptor.ox_utils.util.dequantize_data_with_scale_zero"]], "dtype_to_name() (in module neural_compressor.adaptor.ox_utils.util)": [[38, "neural_compressor.adaptor.ox_utils.util.dtype_to_name"]], "find_by_name() (in module neural_compressor.adaptor.ox_utils.util)": [[38, "neural_compressor.adaptor.ox_utils.util.find_by_name"]], "float_to_bfloat16() (in module neural_compressor.adaptor.ox_utils.util)": [[38, "neural_compressor.adaptor.ox_utils.util.float_to_bfloat16"]], "float_to_float16() (in module neural_compressor.adaptor.ox_utils.util)": [[38, "neural_compressor.adaptor.ox_utils.util.float_to_float16"]], "get_smooth_scales_per_input() (in module neural_compressor.adaptor.ox_utils.util)": [[38, "neural_compressor.adaptor.ox_utils.util.get_smooth_scales_per_input"]], "get_smooth_scales_per_op() (in module neural_compressor.adaptor.ox_utils.util)": [[38, "neural_compressor.adaptor.ox_utils.util.get_smooth_scales_per_op"]], "insert_smooth_mul_op_per_input() (in module neural_compressor.adaptor.ox_utils.util)": [[38, "neural_compressor.adaptor.ox_utils.util.insert_smooth_mul_op_per_input"]], "insert_smooth_mul_op_per_op() (in module neural_compressor.adaptor.ox_utils.util)": [[38, "neural_compressor.adaptor.ox_utils.util.insert_smooth_mul_op_per_op"]], "is_b_transposed() (in module neural_compressor.adaptor.ox_utils.util)": [[38, "neural_compressor.adaptor.ox_utils.util.is_B_transposed"]], "make_dquant_node() (in module neural_compressor.adaptor.ox_utils.util)": [[38, "neural_compressor.adaptor.ox_utils.util.make_dquant_node"]], "make_quant_node() (in module neural_compressor.adaptor.ox_utils.util)": [[38, "neural_compressor.adaptor.ox_utils.util.make_quant_node"]], "neural_compressor.adaptor.ox_utils.util": [[38, "module-neural_compressor.adaptor.ox_utils.util"]], "quantize_data() (in module neural_compressor.adaptor.ox_utils.util)": [[38, "neural_compressor.adaptor.ox_utils.util.quantize_data"]], "quantize_data_per_channel() (in module neural_compressor.adaptor.ox_utils.util)": [[38, "neural_compressor.adaptor.ox_utils.util.quantize_data_per_channel"]], "quantize_data_with_scale_zero() (in module neural_compressor.adaptor.ox_utils.util)": [[38, "neural_compressor.adaptor.ox_utils.util.quantize_data_with_scale_zero"]], "quantize_nparray() (in module neural_compressor.adaptor.ox_utils.util)": [[38, "neural_compressor.adaptor.ox_utils.util.quantize_nparray"]], "remove_init_from_model_input() (in module neural_compressor.adaptor.ox_utils.util)": [[38, "neural_compressor.adaptor.ox_utils.util.remove_init_from_model_input"]], "split_shared_bias() (in module neural_compressor.adaptor.ox_utils.util)": [[38, "neural_compressor.adaptor.ox_utils.util.split_shared_bias"]], "trt_env_setup() (in module neural_compressor.adaptor.ox_utils.util)": [[38, "neural_compressor.adaptor.ox_utils.util.trt_env_setup"]], "pytorchadaptor (class in neural_compressor.adaptor.pytorch)": [[39, "neural_compressor.adaptor.pytorch.PyTorchAdaptor"]], "pytorchquery (class in neural_compressor.adaptor.pytorch)": [[39, "neural_compressor.adaptor.pytorch.PyTorchQuery"]], "pytorch_fxadaptor (class in neural_compressor.adaptor.pytorch)": [[39, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor"]], "pytorch_ipexadaptor (class in neural_compressor.adaptor.pytorch)": [[39, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor"]], "templateadaptor (class in neural_compressor.adaptor.pytorch)": [[39, "neural_compressor.adaptor.pytorch.TemplateAdaptor"]], "calculate_hessian_trace() (neural_compressor.adaptor.pytorch.templateadaptor method)": [[39, "neural_compressor.adaptor.pytorch.TemplateAdaptor.calculate_hessian_trace"]], "calculate_op_sensitivity() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor method)": [[39, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.calculate_op_sensitivity"]], "convert_sub_graph() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor static method)": [[39, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.convert_sub_graph"]], "evaluate() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[39, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.evaluate"]], "evaluate() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor method)": [[39, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.evaluate"]], "evaluate() (neural_compressor.adaptor.pytorch.pytorch_ipexadaptor method)": [[39, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor.evaluate"]], "fuse_fx_model() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor method)": [[39, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.fuse_fx_model"]], "get_non_quant_modules() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[39, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.get_non_quant_modules"]], "get_op_types() (neural_compressor.adaptor.pytorch.pytorchquery method)": [[39, "neural_compressor.adaptor.pytorch.PyTorchQuery.get_op_types"]], "get_op_types_by_precision() (neural_compressor.adaptor.pytorch.pytorchquery method)": [[39, "neural_compressor.adaptor.pytorch.PyTorchQuery.get_op_types_by_precision"]], "get_ops_recursively() (in module neural_compressor.adaptor.pytorch)": [[39, "neural_compressor.adaptor.pytorch.get_ops_recursively"]], "get_quantization_capability() (neural_compressor.adaptor.pytorch.pytorchquery method)": [[39, "neural_compressor.adaptor.pytorch.PyTorchQuery.get_quantization_capability"]], "is_fused_child() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[39, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.is_fused_child"]], "is_fused_module() (neural_compressor.adaptor.pytorch.templateadaptor method)": [[39, "neural_compressor.adaptor.pytorch.TemplateAdaptor.is_fused_module"]], "is_fused_op() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[39, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.is_fused_op"]], "is_last_fused_child() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[39, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.is_last_fused_child"]], "neural_compressor.adaptor.pytorch": [[39, "module-neural_compressor.adaptor.pytorch"]], "prepare_sub_graph() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor static method)": [[39, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.prepare_sub_graph"]], "quantize() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[39, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.quantize"]], "quantize() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor method)": [[39, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.quantize"]], "quantize() (neural_compressor.adaptor.pytorch.pytorch_ipexadaptor method)": [[39, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor.quantize"]], "query_fw_capability() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[39, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.query_fw_capability"]], "query_fw_capability() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor method)": [[39, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.query_fw_capability"]], "query_fw_capability() (neural_compressor.adaptor.pytorch.pytorch_ipexadaptor method)": [[39, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor.query_fw_capability"]], "save() (neural_compressor.adaptor.pytorch.pytorch_ipexadaptor method)": [[39, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor.save"]], "smooth_quant() (neural_compressor.adaptor.pytorch.templateadaptor method)": [[39, "neural_compressor.adaptor.pytorch.TemplateAdaptor.smooth_quant"]], "train() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[39, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.train"]], "train() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor method)": [[39, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.train"]], "querybackendcapability (class in neural_compressor.adaptor.query)": [[40, "neural_compressor.adaptor.query.QueryBackendCapability"]], "get_fuse_patterns() (neural_compressor.adaptor.query.querybackendcapability method)": [[40, "neural_compressor.adaptor.query.QueryBackendCapability.get_fuse_patterns"]], "get_mixed_precision_combination() (neural_compressor.adaptor.query.querybackendcapability method)": [[40, "neural_compressor.adaptor.query.QueryBackendCapability.get_mixed_precision_combination"]], "get_op_types() (neural_compressor.adaptor.query.querybackendcapability method)": [[40, "neural_compressor.adaptor.query.QueryBackendCapability.get_op_types"]], "get_precisions() (neural_compressor.adaptor.query.querybackendcapability method)": [[40, "neural_compressor.adaptor.query.QueryBackendCapability.get_precisions"]], "get_quantization_capability() (neural_compressor.adaptor.query.querybackendcapability method)": [[40, "neural_compressor.adaptor.query.QueryBackendCapability.get_quantization_capability"]], "get_version() (neural_compressor.adaptor.query.querybackendcapability method)": [[40, "neural_compressor.adaptor.query.QueryBackendCapability.get_version"]], "neural_compressor.adaptor.query": [[40, "module-neural_compressor.adaptor.query"]], "set_quantization_config() (neural_compressor.adaptor.query.querybackendcapability method)": [[40, "neural_compressor.adaptor.query.QueryBackendCapability.set_quantization_config"]], "tensorflowadaptor (class in neural_compressor.adaptor.tensorflow)": [[41, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor"]], "tensorflowquery (class in neural_compressor.adaptor.tensorflow)": [[41, "neural_compressor.adaptor.tensorflow.TensorflowQuery"]], "tensorflow_itexadaptor (class in neural_compressor.adaptor.tensorflow)": [[41, "neural_compressor.adaptor.tensorflow.Tensorflow_ITEXAdaptor"]], "calculate_op_sensitivity() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[41, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.calculate_op_sensitivity"]], "convert() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[41, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.convert"]], "diagnosis_helper() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[41, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.diagnosis_helper"]], "evaluate() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[41, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.evaluate"]], "fused_node_mapping() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[41, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.fused_node_mapping"]], "generate_internal_patterns() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[41, "neural_compressor.adaptor.tensorflow.TensorflowQuery.generate_internal_patterns"]], "get_bf16_patterns() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[41, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_bf16_patterns"]], "get_eightbit_patterns() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[41, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_eightbit_patterns"]], "get_fuse_patterns() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[41, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_fuse_patterns"]], "get_mixed_precision_combination() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[41, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_mixed_precision_combination"]], "get_op_types() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[41, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_op_types"]], "get_op_types_by_precision() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[41, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_op_types_by_precision"]], "get_optype_wise_ability() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[41, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.get_optype_wise_ability"]], "get_output_op_names() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[41, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.get_output_op_names"]], "get_quantization_capability() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[41, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_quantization_capability"]], "get_version() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[41, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_version"]], "inspect_activation() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[41, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.inspect_activation"]], "inspect_tensor() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[41, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.inspect_tensor"]], "inspect_weight_and_bias() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[41, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.inspect_weight_and_bias"]], "neural_compressor.adaptor.tensorflow": [[41, "module-neural_compressor.adaptor.tensorflow"]], "qat_convert() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[41, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.qat_convert"]], "quantize() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[41, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.quantize"]], "quantize() (neural_compressor.adaptor.tensorflow.tensorflow_itexadaptor method)": [[41, "neural_compressor.adaptor.tensorflow.Tensorflow_ITEXAdaptor.quantize"]], "quantize_input() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[41, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.quantize_input"]], "query_fw_capability() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[41, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.query_fw_capability"]], "recover_tuned_model() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[41, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.recover_tuned_model"]], "save() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[41, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.save"]], "set_tensor() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[41, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.set_tensor"]], "train() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[41, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.train"]], "graphconverter (class in neural_compressor.adaptor.tf_utils.graph_converter)": [[42, "neural_compressor.adaptor.tf_utils.graph_converter.GraphConverter"]], "bf16_convert() (neural_compressor.adaptor.tf_utils.graph_converter.graphconverter method)": [[42, "neural_compressor.adaptor.tf_utils.graph_converter.GraphConverter.bf16_convert"]], "convert() (neural_compressor.adaptor.tf_utils.graph_converter.graphconverter method)": [[42, "neural_compressor.adaptor.tf_utils.graph_converter.GraphConverter.convert"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[42, "module-neural_compressor.adaptor.tf_utils.graph_converter"]], "quantize() (neural_compressor.adaptor.tf_utils.graph_converter.graphconverter method)": [[42, "neural_compressor.adaptor.tf_utils.graph_converter.GraphConverter.quantize"]], "quantize_with_qdq_pattern() (neural_compressor.adaptor.tf_utils.graph_converter.graphconverter method)": [[42, "neural_compressor.adaptor.tf_utils.graph_converter.GraphConverter.quantize_with_qdq_pattern"]], "graphconverterwithoutcalib (class in neural_compressor.adaptor.tf_utils.graph_converter_without_calib)": [[43, "neural_compressor.adaptor.tf_utils.graph_converter_without_calib.GraphConverterWithoutCalib"]], "bf16_convert() (neural_compressor.adaptor.tf_utils.graph_converter_without_calib.graphconverterwithoutcalib method)": [[43, "neural_compressor.adaptor.tf_utils.graph_converter_without_calib.GraphConverterWithoutCalib.bf16_convert"]], "convert_without_calib() (neural_compressor.adaptor.tf_utils.graph_converter_without_calib.graphconverterwithoutcalib method)": [[43, "neural_compressor.adaptor.tf_utils.graph_converter_without_calib.GraphConverterWithoutCalib.convert_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[43, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"]], "quantize_without_calib() (neural_compressor.adaptor.tf_utils.graph_converter_without_calib.graphconverterwithoutcalib method)": [[43, "neural_compressor.adaptor.tf_utils.graph_converter_without_calib.GraphConverterWithoutCalib.quantize_without_calib"]], "bf16convert (class in neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert)": [[44, "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert.BF16Convert"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert.bf16convert method)": [[44, "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert.BF16Convert.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[44, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[45, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"]], "convertaddtobiasaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd)": [[46, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd.ConvertAddToBiasAddOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd.convertaddtobiasaddoptimizer method)": [[46, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd.ConvertAddToBiasAddOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[46, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"]], "convertlayoutoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout)": [[47, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout.ConvertLayoutOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout.convertlayoutoptimizer method)": [[47, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout.ConvertLayoutOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[47, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"]], "convertleakyreluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu)": [[48, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu.ConvertLeakyReluOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu.convertleakyreluoptimizer method)": [[48, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu.ConvertLeakyReluOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[48, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"]], "convertnantorandom (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random)": [[49, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random.ConvertNanToRandom"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random.convertnantorandom method)": [[49, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random.ConvertNanToRandom.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[49, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"]], "convertplaceholdertoconst (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const)": [[50, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.convertplaceholdertoconst method)": [[50, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"]], "strtobool() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.convertplaceholdertoconst method)": [[50, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst.strtobool"]], "dequantizecastoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer)": [[51, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer.DequantizeCastOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer.dequantizecastoptimizer method)": [[51, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer.DequantizeCastOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"]], "dilatedcontraction (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction)": [[52, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction.DilatedContraction"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction.dilatedcontraction method)": [[52, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction.DilatedContraction.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"]], "injectdummybiasaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd)": [[53, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd.InjectDummyBiasAddOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd.injectdummybiasaddoptimizer method)": [[53, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd.InjectDummyBiasAddOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"]], "expanddimsoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer)": [[54, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer.ExpandDimsOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer.expanddimsoptimizer method)": [[54, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer.ExpandDimsOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"]], "fetchweightfromreshapeoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape)": [[55, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape.FetchWeightFromReshapeOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape.fetchweightfromreshapeoptimizer method)": [[55, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape.FetchWeightFromReshapeOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "foldbatchnormnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm)": [[56, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.foldbatchnormnodesoptimizer method)": [[56, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"]], "scale_after_normalization() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.foldbatchnormnodesoptimizer method)": [[56, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer.scale_after_normalization"]], "graphfoldconstantoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant)": [[57, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer"]], "check_all_folded() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.graphfoldconstantoptimizer method)": [[57, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer.check_all_folded"]], "check_const_inputs() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.graphfoldconstantoptimizer method)": [[57, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer.check_const_inputs"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.graphfoldconstantoptimizer method)": [[57, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"]], "fusebiasaddandaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add)": [[58, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add.FuseBiasAddAndAddOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add.fusebiasaddandaddoptimizer method)": [[58, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add.FuseBiasAddAndAddOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"]], "fusecolumnwisemuloptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul)": [[59, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul.FuseColumnWiseMulOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul.fusecolumnwisemuloptimizer method)": [[59, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul.FuseColumnWiseMulOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"]], "fuseconvwithmathoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math)": [[60, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math.FuseConvWithMathOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math.fuseconvwithmathoptimizer method)": [[60, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math.FuseConvWithMathOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"]], "fusedecomposedbnoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[61, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.FuseDecomposedBNOptimizer"]], "bypass_reshape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[61, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.bypass_reshape"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.fusedecomposedbnoptimizer method)": [[61, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.FuseDecomposedBNOptimizer.do_transformation"]], "get_const_dim_count() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[61, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.get_const_dim_count"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[61, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[61, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_name_from_input"]], "valid_reshape_inputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[61, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.valid_reshape_inputs"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[61, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.values_from_const"]], "fusedecomposedinoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[62, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.FuseDecomposedINOptimizer"]], "bypass_reshape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[62, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.bypass_reshape"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.fusedecomposedinoptimizer method)": [[62, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.FuseDecomposedINOptimizer.do_transformation"]], "get_const_dim_count() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[62, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.get_const_dim_count"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[62, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[62, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.node_name_from_input"]], "valid_reshape_inputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[62, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.valid_reshape_inputs"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[62, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.values_from_const"]], "fusegeluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu)": [[63, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu.FuseGeluOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu.fusegeluoptimizer method)": [[63, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu.FuseGeluOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"]], "fuselayernormoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[64, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.FuseLayerNormOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.fuselayernormoptimizer method)": [[64, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.FuseLayerNormOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[64, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[64, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.node_name_from_input"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[64, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.values_from_const"]], "fusepadwithconv2doptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv)": [[65, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv.FusePadWithConv2DOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv.fusepadwithconv2doptimizer method)": [[65, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv.FusePadWithConv2DOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"]], "fusepadwithfp32conv2doptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.FusePadWithFP32Conv2DOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.fusepadwithfp32conv2doptimizer method)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.FusePadWithFP32Conv2DOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "fusetransposereshapeoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose.FuseTransposeReshapeOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose.fusetransposereshapeoptimizer method)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose.FuseTransposeReshapeOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"]], "graphcseoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer.GraphCseOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer.graphcseoptimizer method)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer.GraphCseOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"]], "grappleroptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass)": [[69, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass.GrapplerOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass.grappleroptimizer method)": [[69, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass.GrapplerOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"]], "insertprintminmaxnode (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node)": [[71, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node.InsertPrintMinMaxNode"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node.insertprintminmaxnode method)": [[71, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node.InsertPrintMinMaxNode.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"]], "movesqueezeafterreluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu)": [[72, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu.MoveSqueezeAfterReluOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu.movesqueezeafterreluoptimizer method)": [[72, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu.MoveSqueezeAfterReluOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"]], "preoptimization (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize)": [[73, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.PreOptimization"]], "get_excluded_node_names() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.preoptimization method)": [[73, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.PreOptimization.get_excluded_node_names"]], "get_matched_nodes() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.preoptimization method)": [[73, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.PreOptimization.get_matched_nodes"]], "get_optimized_model() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.preoptimization method)": [[73, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.PreOptimization.get_optimized_model"]], "has_positive_input() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.preoptimization method)": [[73, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.PreOptimization.has_positive_input"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"]], "removetrainingnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes)": [[74, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes.RemoveTrainingNodesOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes.removetrainingnodesoptimizer method)": [[74, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes.RemoveTrainingNodesOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"]], "renamebatchnormoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm)": [[75, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm.RenameBatchNormOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm.renamebatchnormoptimizer method)": [[75, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm.RenameBatchNormOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"]], "splitsharedinputoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input)": [[76, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input.SplitSharedInputOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input.splitsharedinputoptimizer method)": [[76, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input.SplitSharedInputOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"]], "stripequivalentnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes)": [[77, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes.StripEquivalentNodesOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes.stripequivalentnodesoptimizer method)": [[77, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes.StripEquivalentNodesOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"]], "stripunusednodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes)": [[78, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes.StripUnusedNodesOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes.stripunusednodesoptimizer method)": [[78, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes.StripUnusedNodesOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"]], "switchoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer)": [[79, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer.SwitchOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer.switchoptimizer method)": [[79, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer.SwitchOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"]], "graphrewriterbase (class in neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base)": [[80, "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base.GraphRewriterBase"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base.graphrewriterbase method)": [[80, "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base.GraphRewriterBase.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"]], "freezefakequantopoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant)": [[82, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant.FreezeFakeQuantOpOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant.freezefakequantopoptimizer method)": [[82, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant.FreezeFakeQuantOpOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"]], "freezevaluetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value)": [[83, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.freezevaluetransformer method)": [[83, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer.do_transformation"]], "generate_output_graph() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.freezevaluetransformer method)": [[83, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer.generate_output_graph"]], "generate_output_graph_ranges() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.freezevaluetransformer method)": [[83, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer.generate_output_graph_ranges"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"]], "freezevaluewithoutcalibtransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib)": [[84, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer"]], "do_transformation_without_calib() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.freezevaluewithoutcalibtransformer method)": [[84, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer.do_transformation_without_calib"]], "generate_output_graph() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.freezevaluewithoutcalibtransformer method)": [[84, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer.generate_output_graph"]], "generate_output_graph_ranges() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.freezevaluewithoutcalibtransformer method)": [[84, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer.generate_output_graph_ranges"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"]], "fuseconvredundantdequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize)": [[85, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.FuseConvRedundantDequantizeTransformer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.fuseconvredundantdequantizetransformer method)": [[85, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.FuseConvRedundantDequantizeTransformer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "fuseconvrequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize)": [[86, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize.FuseConvRequantizeTransformer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize.fuseconvrequantizetransformer method)": [[86, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize.FuseConvRequantizeTransformer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"]], "fusematmulredundantdequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize)": [[87, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.FuseMatMulRedundantDequantizeTransformer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.fusematmulredundantdequantizetransformer method)": [[87, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.FuseMatMulRedundantDequantizeTransformer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "fusematmulrequantizedequantizenewapitransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[88, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeNewAPITransformer"]], "fusematmulrequantizedequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[88, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeTransformer"]], "fusematmulrequantizenewapitransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[88, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeNewAPITransformer"]], "fusematmulrequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[88, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeTransformer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.fusematmulrequantizedequantizenewapitransformer method)": [[88, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeNewAPITransformer.do_transformation"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.fusematmulrequantizedequantizetransformer method)": [[88, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeTransformer.do_transformation"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.fusematmulrequantizenewapitransformer method)": [[88, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeNewAPITransformer.do_transformation"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.fusematmulrequantizetransformer method)": [[88, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeTransformer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"]], "metainfochangingmemopoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer.MetaInfoChangingMemOpOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer.metainfochangingmemopoptimizer method)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer.MetaInfoChangingMemOpOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"]], "posthostconstconverter (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter.PostHostConstConverter"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter.posthostconstconverter method)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter.PostHostConstConverter.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"]], "postcseoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse)": [[92, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse.PostCseOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse.postcseoptimizer method)": [[92, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse.PostCseOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"]], "quantizedrnnconverter (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert)": [[93, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert.QuantizedRNNConverter"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert.quantizedrnnconverter method)": [[93, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert.QuantizedRNNConverter.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"]], "scalepropagationtransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation.ScaleProPagationTransformer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation.scalepropagationtransformer method)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation.ScaleProPagationTransformer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"]], "onnxgraph (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph"]], "add_graph_input() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.add_graph_input"]], "add_graph_output() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.add_graph_output"]], "append_node() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.append_node"]], "convert_qdq_nodes() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.convert_qdq_nodes"]], "copy_dtype() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.copy_dtype"]], "copy_shape() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.copy_shape"]], "create_new_graph_with_same_config() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.create_new_graph_with_same_config"]], "delete_qdq_nodes() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.delete_qdq_nodes"]], "delete_unused_nodes() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.delete_unused_nodes"]], "dump_graph() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.dump_graph"]], "dump_node_statistics() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.dump_node_statistics"]], "extra_opset (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph property)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.extra_opset"]], "extract_sub_graph_nodes() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.extract_sub_graph_nodes"]], "find_output_consumers() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.find_output_consumers"]], "get_dtype() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.get_dtype"]], "get_node_by_name() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.get_node_by_name"]], "get_node_by_output() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.get_node_by_output"]], "get_node_by_output_in_current_graph() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.get_node_by_output_in_current_graph"]], "get_nodes() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.get_nodes"]], "get_rank() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.get_rank"]], "get_shape() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.get_shape"]], "get_tensor_value() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.get_tensor_value"]], "input_names (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph property)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.input_names"]], "insert_new_node_on_input() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.insert_new_node_on_input"]], "insert_new_node_on_output() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.insert_new_node_on_output"]], "insert_node_on_output() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.insert_node_on_output"]], "is_const() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.is_const"]], "is_empty_input() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.is_empty_input"]], "is_target() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.is_target"]], "make_const() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.make_const"]], "make_graph() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.make_graph"]], "make_model() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.make_model"]], "make_node() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.make_node"]], "make_onnx_graph_io() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.make_onnx_graph_io"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"]], "opset (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph property)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.opset"]], "remove_input() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.remove_input"]], "remove_node() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.remove_node"]], "replace_all_inputs() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.replace_all_inputs"]], "replace_input() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.replace_input"]], "replace_inputs() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.replace_inputs"]], "reset_nodes() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.reset_nodes"]], "safe_remove_nodes() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.safe_remove_nodes"]], "safe_to_remove_nodes() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.safe_to_remove_nodes"]], "set_config() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.set_config"]], "set_dtype() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.set_dtype"]], "set_node_by_name() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.set_node_by_name"]], "set_shape() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.set_shape"]], "topological_sort() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.topological_sort"]], "update_node_shape_dtype() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.update_node_shape_dtype"]], "update_proto() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.update_proto"]], "onnxnode (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode"]], "attr (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode property)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.attr"]], "child_name() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode method)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.child_name"]], "data_format (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode property)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.data_format"]], "domain (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode property)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.domain"]], "get_attr() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode method)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.get_attr"]], "get_attr_int() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode method)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.get_attr_int"]], "get_attr_str() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode method)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.get_attr_str"]], "get_attr_value() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode method)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.get_attr_value"]], "get_body_graphs() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode method)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.get_body_graphs"]], "get_implicit_inputs() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode method)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.get_implicit_inputs"]], "get_onnx_attrs() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode method)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.get_onnx_attrs"]], "get_tensor_value() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode method)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.get_tensor_value"]], "get_value_attr() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode method)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.get_value_attr"]], "input (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode property)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.input"]], "inputs (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode property)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.inputs"]], "is_const() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode method)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.is_const"]], "is_graph_input() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode method)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.is_graph_input"]], "is_graph_input_default_const() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode method)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.is_graph_input_default_const"]], "is_nhwc() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode method)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.is_nhwc"]], "is_scalar() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode method)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.is_scalar"]], "is_while() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode method)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.is_while"]], "name (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode property)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.name"]], "need_skip() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode method)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.need_skip"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"]], "op (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode property)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.op"]], "output (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode property)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.output"]], "output_dtypes (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode property)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.output_dtypes"]], "output_shapes (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode property)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.output_shapes"]], "scalar_to_dim1() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode method)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.scalar_to_dim1"]], "set_attr() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode method)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.set_attr"]], "set_attr_onnx() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode method)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.set_attr_onnx"]], "set_body_graph_as_attr() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode method)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.set_body_graph_as_attr"]], "set_tensor_value() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode method)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.set_tensor_value"]], "skip_conversion (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode property)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.skip_conversion"]], "summary (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode property)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.summary"]], "type (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode property)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.type"]], "update_proto() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode method)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.update_proto"]], "onnxopschema (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.OnnxOpSchema"]], "attributes (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.onnxopschema property)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.OnnxOpSchema.attributes"]], "domain (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.onnxopschema property)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.OnnxOpSchema.domain"]], "from_onnx_schema() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.onnxopschema static method)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.OnnxOpSchema.from_onnx_schema"]], "get_max_supported_opset_version() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.get_max_supported_opset_version"]], "get_schema() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.get_schema"]], "has_attribute() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.onnxopschema method)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.OnnxOpSchema.has_attribute"]], "name (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.onnxopschema property)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.OnnxOpSchema.name"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"]], "since_version (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.onnxopschema property)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.OnnxOpSchema.since_version"]], "seqtype (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.SeqType"]], "add_port_to_name() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.add_port_to_name"]], "are_shapes_equal() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.are_shapes_equal"]], "assert_error() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.assert_error"]], "compute_const_folding_using_tf() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.compute_const_folding_using_tf"]], "convert_tensorflow_tensor_to_onnx() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.convert_tensorflow_tensor_to_onnx"]], "find_opset() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.find_opset"]], "get_index_from_strided_slice_of_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_index_from_strided_slice_of_shape"]], "get_subgraphs_from_onnx() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_subgraphs_from_onnx"]], "get_tensorflow_node_attr() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_node_attr"]], "get_tensorflow_node_shape_attr() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_node_shape_attr"]], "get_tensorflow_tensor_data() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_tensor_data"]], "get_tensorflow_tensor_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_tensor_shape"]], "infer_onnx_shape_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.infer_onnx_shape_dtype"]], "initialize_name_counter() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.initialize_name_counter"]], "is_list_or_tuple() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.is_list_or_tuple"]], "is_onnx_domain() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.is_onnx_domain"]], "make_onnx_inputs_outputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.make_onnx_inputs_outputs"]], "make_onnx_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.make_onnx_shape"]], "map_numpy_to_onnx_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_numpy_to_onnx_dtype"]], "map_onnx_to_numpy_type() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_onnx_to_numpy_type"]], "map_tensorflow_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_tensorflow_dtype"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"]], "read_tensorflow_node_attrs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.read_tensorflow_node_attrs"]], "save_protobuf() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.save_protobuf"]], "set_name() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.set_name"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"]], "generategraphwithqdqpattern (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern.GenerateGraphWithQDQPattern"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern.generategraphwithqdqpattern method)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern.GenerateGraphWithQDQPattern.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"]], "mergeduplicatedqdqoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq)": [[102, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq.MergeDuplicatedQDQOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq.mergeduplicatedqdqoptimizer method)": [[102, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq.MergeDuplicatedQDQOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "shareqdqforitexypatternoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern.ShareQDQForItexYPatternOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern.shareqdqforitexypatternoptimizer method)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern.ShareQDQForItexYPatternOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "graphanalyzer (class in neural_compressor.adaptor.tf_utils.graph_util)": [[104, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer"]], "graphrewriterhelper (class in neural_compressor.adaptor.tf_utils.graph_util)": [[104, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper"]], "add_node() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[104, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.add_node"]], "analysis_rnn_model() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[104, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.analysis_rnn_model"]], "compare_node_attr() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[104, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.compare_node_attr"]], "create_constant_node() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[104, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.create_constant_node"]], "create_node() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[104, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.create_node"]], "dump_graph() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[104, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.dump_graph"]], "gen_valid_sampling_log() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[104, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.gen_valid_sampling_log"]], "generate_int32_bias_for_conv() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[104, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.generate_int32_bias_for_conv"]], "generate_int32_bias_for_matmul() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[104, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.generate_int32_bias_for_matmul"]], "get_frame_info() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[104, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.get_frame_info"]], "get_graph_input_output() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[104, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.get_graph_input_output"]], "graph (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer property)": [[104, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.graph"]], "has_positive_input() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[104, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.has_positive_input"]], "neural_compressor.adaptor.tf_utils.graph_util": [[104, "module-neural_compressor.adaptor.tf_utils.graph_util"]], "node_name_from_input() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[104, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.node_name_from_input"]], "parse_graph() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[104, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.parse_graph"]], "query_fusion_pattern_nodes() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[104, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.query_fusion_pattern_nodes"]], "remove_node() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[104, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.remove_node"]], "remove_node_with_single_input_output() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[104, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.remove_node_with_single_input_output"]], "replace_const_node() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[104, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.replace_const_node"]], "replace_constant_graph_with_constant_node() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[104, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.replace_constant_graph_with_constant_node"]], "replace_node() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[104, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.replace_node"]], "replace_single_node() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[104, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.replace_single_node"]], "set_attr_bool() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[104, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_bool"]], "set_attr_dtype() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[104, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_dtype"]], "set_attr_float() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[104, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_float"]], "set_attr_int() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[104, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_int"]], "set_attr_int_list() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[104, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_int_list"]], "set_attr_string() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[104, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_string"]], "set_attr_string_list() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[104, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_string_list"]], "set_attr_tensor() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[104, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_tensor"]], "set_attr_type_list() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[104, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_type_list"]], "values_from_const() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[104, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.values_from_const"]], "neural_compressor.adaptor.tf_utils": [[105, "module-neural_compressor.adaptor.tf_utils"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[106, "module-neural_compressor.adaptor.tf_utils.quantize_graph"]], "fakequantize (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize)": [[107, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantize"]], "fakequantizebase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize)": [[107, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantizeBase"]], "from_config() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.fakequantizebase class method)": [[107, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantizeBase.from_config"]], "get_config() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.fakequantize method)": [[107, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantize.get_config"]], "get_config() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.fakequantizebase method)": [[107, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantizeBase.get_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[107, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[108, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"]], "quantizeconfig (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config)": [[109, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig"]], "add_quantize_recipe() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.quantizeconfig method)": [[109, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig.add_quantize_recipe"]], "clear_quantize_recipe() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.quantizeconfig method)": [[109, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig.clear_quantize_recipe"]], "get_quantize_recipe() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.quantizeconfig method)": [[109, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig.get_quantize_recipe"]], "is_empty() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.quantizeconfig method)": [[109, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig.is_empty"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[109, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"]], "query_layer() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.quantizeconfig method)": [[109, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig.query_layer"]], "remove_layer() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.quantizeconfig method)": [[109, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig.remove_layer"]], "remove_layers() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.quantizeconfig method)": [[109, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig.remove_layers"]], "init_quantize_config() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper)": [[110, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper.init_quantize_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[110, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"]], "qat_clone_function() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper)": [[110, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper.qat_clone_function"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[111, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"]], "config_quantizable_layers() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer)": [[112, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer.config_quantizable_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[112, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "quantizelayeradd (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add)": [[113, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add.QuantizeLayerAdd"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "quantizelayerbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base)": [[114, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base.QuantizeLayerBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "quantizelayerbatchnormalization (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn)": [[115, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn.QuantizeLayerBatchNormalization"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "quantizewrapper (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper)": [[116, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapper"]], "quantizewrapperbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper)": [[116, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase"]], "build() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapper method)": [[116, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapper.build"]], "build() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase method)": [[116, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.build"]], "call() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapper method)": [[116, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapper.call"]], "call() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase method)": [[116, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.call"]], "compute_output_shape() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase method)": [[116, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.compute_output_shape"]], "from_config() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase class method)": [[116, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.from_config"]], "get_config() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase method)": [[116, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.get_config"]], "losses (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase property)": [[116, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.losses"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"]], "non_trainable_weights (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase property)": [[116, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.non_trainable_weights"]], "query_input_index() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase method)": [[116, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.query_input_index"]], "trainable (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase property)": [[116, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.trainable"]], "trainable_weights (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase property)": [[116, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.trainable_weights"]], "updates (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase property)": [[116, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.updates"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn)": [[117, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3"]], "apply_newly_bn_leakyrelu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.fusenodestartwithfusedbatchnormv3 method)": [[117, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3.apply_newly_bn_leakyrelu_fusion"]], "apply_newly_bn_relu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.fusenodestartwithfusedbatchnormv3 method)": [[117, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3.apply_newly_bn_relu_fusion"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.fusenodestartwithfusedbatchnormv3 method)": [[117, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.fusenodestartwithfusedbatchnormv3 method)": [[117, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2)": [[118, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.fusenodestartwithconcatv2 method)": [[118, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.fusenodestartwithconcatv2 method)": [[118, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv)": [[119, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d"]], "apply_conv3d_add_addn_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[119, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_conv3d_add_addn_fusion"]], "apply_conv3d_add_addn_relu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[119, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_conv3d_add_addn_relu_fusion"]], "apply_conv3d_add_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[119, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_conv3d_add_fusion"]], "apply_conv3d_add_relu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[119, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_conv3d_add_relu_fusion"]], "apply_conv3d_single_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[119, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_conv3d_single_fusion"]], "apply_conv_biasadd_hardswish_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[119, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_conv_biasadd_hardswish_fusion"]], "apply_newly_conv_biasadd_addn_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[119, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_newly_conv_biasadd_addn_fusion"]], "apply_newly_conv_biasadd_addn_relu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[119, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_newly_conv_biasadd_addn_relu_fusion"]], "apply_newly_conv_biasadd_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[119, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_newly_conv_biasadd_fusion"]], "apply_newly_conv_biasadd_relu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[119, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_newly_conv_biasadd_relu_fusion"]], "apply_newly_conv_biasadd_swishf32_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[119, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_newly_conv_biasadd_swishf32_fusion"]], "apply_newly_conv_single_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[119, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_newly_conv_single_fusion"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[119, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[119, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"]], "fusenodestartwithdeconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv)": [[120, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d"]], "apply_deconv2d_biasadd_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.fusenodestartwithdeconv2d method)": [[120, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d.apply_deconv2d_biasadd_fusion"]], "apply_deconv3d_biasadd_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.fusenodestartwithdeconv2d method)": [[120, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d.apply_deconv3d_biasadd_fusion"]], "apply_single_deconv2d_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.fusenodestartwithdeconv2d method)": [[120, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d.apply_single_deconv2d_fusion"]], "apply_single_deconv3d_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.fusenodestartwithdeconv2d method)": [[120, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d.apply_single_deconv3d_fusion"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.fusenodestartwithdeconv2d method)": [[120, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.fusenodestartwithdeconv2d method)": [[120, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"]], "fusenodestartwithfusedinstancenorm (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in)": [[121, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm"]], "apply_newly_in_relu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.fusenodestartwithfusedinstancenorm method)": [[121, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm.apply_newly_in_relu_fusion"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.fusenodestartwithfusedinstancenorm method)": [[121, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.fusenodestartwithfusedinstancenorm method)": [[121, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"]], "fusenodestartwithmatmul (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul)": [[122, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul"]], "apply_batchmatmulv2_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.fusenodestartwithmatmul method)": [[122, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul.apply_batchmatmulv2_fusion"]], "apply_batchmatmulv2_mul_add_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.fusenodestartwithmatmul method)": [[122, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul.apply_batchmatmulv2_mul_add_fusion"]], "apply_matmul_biasadd_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.fusenodestartwithmatmul method)": [[122, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul.apply_matmul_biasadd_fusion"]], "apply_matmul_biasadd_relu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.fusenodestartwithmatmul method)": [[122, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul.apply_matmul_biasadd_relu_fusion"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.fusenodestartwithmatmul method)": [[122, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.fusenodestartwithmatmul method)": [[122, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"]], "fusenodestartwithpooling (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling)": [[123, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.fusenodestartwithpooling method)": [[123, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.fusenodestartwithpooling method)": [[123, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"]], "optimizeqdqgraph (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq)": [[125, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.OptimizeQDQGraph"]], "do_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.optimizeqdqgraph method)": [[125, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.OptimizeQDQGraph.do_transform"]], "get_quantized_nodes() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.optimizeqdqgraph method)": [[125, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.OptimizeQDQGraph.get_quantized_nodes"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"]], "quantizegraphbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base)": [[126, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase"]], "quantizenodebase (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base)": [[126, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase"]], "add_output_graph_node() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizenodebase method)": [[126, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase.add_output_graph_node"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizenodebase method)": [[126, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase.apply_the_transform"]], "create_nodes_map() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizenodebase method)": [[126, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase.create_nodes_map"]], "do_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizegraphbase method)": [[126, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase.do_transform"]], "eightbitize_single_input_tensor_node() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizenodebase method)": [[126, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase.eightbitize_single_input_tensor_node"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizenodebase method)": [[126, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"]], "register_transformer() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizegraphbase method)": [[126, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase.register_transformer"]], "remove_dead_nodes() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizegraphbase method)": [[126, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase.remove_dead_nodes"]], "remove_redundant_quantization() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizenodebase method)": [[126, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase.remove_redundant_quantization"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn)": [[127, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3"]], "apply_newly_bn_leakyrelu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.fusenodestartwithfusedbatchnormv3 method)": [[127, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3.apply_newly_bn_leakyrelu_fusion"]], "apply_newly_bn_relu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.fusenodestartwithfusedbatchnormv3 method)": [[127, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3.apply_newly_bn_relu_fusion"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.fusenodestartwithfusedbatchnormv3 method)": [[127, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.fusenodestartwithfusedbatchnormv3 method)": [[127, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2)": [[128, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.fusenodestartwithconcatv2 method)": [[128, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.fusenodestartwithconcatv2 method)": [[128, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv)": [[129, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d"]], "apply_conv_biasadd_addn_relu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.fusenodestartwithconv2d method)": [[129, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d.apply_conv_biasadd_addn_relu_fusion"]], "apply_conv_biasadd_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.fusenodestartwithconv2d method)": [[129, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d.apply_conv_biasadd_fusion"]], "apply_conv_biasadd_relu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.fusenodestartwithconv2d method)": [[129, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d.apply_conv_biasadd_relu_fusion"]], "apply_conv_single_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.fusenodestartwithconv2d method)": [[129, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d.apply_conv_single_fusion"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.fusenodestartwithconv2d method)": [[129, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.fusenodestartwithconv2d method)": [[129, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"]], "quantizegraphforintel (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu)": [[130, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu.QuantizeGraphForIntel"]], "do_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu.quantizegraphforintel method)": [[130, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu.QuantizeGraphForIntel.do_transform"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"]], "fusenodestartwithmatmul (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul)": [[131, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul"]], "apply_matmul_biasadd_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.fusenodestartwithmatmul method)": [[131, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul.apply_matmul_biasadd_fusion"]], "apply_matmul_biasadd_relu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.fusenodestartwithmatmul method)": [[131, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul.apply_matmul_biasadd_relu_fusion"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.fusenodestartwithmatmul method)": [[131, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.fusenodestartwithmatmul method)": [[131, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"]], "fusenodestartwithpooling (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling)": [[132, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.fusenodestartwithpooling method)": [[132, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.fusenodestartwithpooling method)": [[132, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"]], "quantizegraphhelper (class in neural_compressor.adaptor.tf_utils.quantize_graph_common)": [[133, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper"]], "copy_attr() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[133, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.copy_attr"]], "create_constant_node() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[133, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.create_constant_node"]], "create_node() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[133, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.create_node"]], "ensure_tensor_name_has_port() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[133, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.ensure_tensor_name_has_port"]], "generate_quantized_weight_node() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[133, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.generate_quantized_weight_node"]], "get_sorted_graph() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper method)": [[133, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.get_sorted_graph"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[133, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"]], "node_name_from_input() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[133, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.node_name_from_input"]], "remove_training_nodes() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[133, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.remove_training_nodes"]], "set_attr_bool() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[133, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_bool"]], "set_attr_dtype() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[133, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_dtype"]], "set_attr_float() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[133, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_float"]], "set_attr_int() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[133, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_int"]], "set_attr_string() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[133, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_string"]], "set_attr_string_list() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[133, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_string_list"]], "set_attr_tensor() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[133, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_tensor"]], "set_attr_type_list() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[133, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_type_list"]], "split_shared_inputs() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[133, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.split_shared_inputs"]], "unique_node_name_from_input() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[133, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.unique_node_name_from_input"]], "tensorflowqdqtoonnxqdqconverter (class in neural_compressor.adaptor.tf_utils.tf2onnx_converter)": [[134, "neural_compressor.adaptor.tf_utils.tf2onnx_converter.TensorflowQDQToOnnxQDQConverter"]], "convert() (neural_compressor.adaptor.tf_utils.tf2onnx_converter.tensorflowqdqtoonnxqdqconverter method)": [[134, "neural_compressor.adaptor.tf_utils.tf2onnx_converter.TensorflowQDQToOnnxQDQConverter.convert"]], "duplicate_tf_quantizev2_nodes() (neural_compressor.adaptor.tf_utils.tf2onnx_converter.tensorflowqdqtoonnxqdqconverter method)": [[134, "neural_compressor.adaptor.tf_utils.tf2onnx_converter.TensorflowQDQToOnnxQDQConverter.duplicate_tf_quantizev2_nodes"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[134, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"]], "tf_graph_optimize() (neural_compressor.adaptor.tf_utils.tf2onnx_converter.tensorflowqdqtoonnxqdqconverter method)": [[134, "neural_compressor.adaptor.tf_utils.tf2onnx_converter.TensorflowQDQToOnnxQDQConverter.tf_graph_optimize"]], "transpose_inputs() (neural_compressor.adaptor.tf_utils.tf2onnx_converter.tensorflowqdqtoonnxqdqconverter method)": [[134, "neural_compressor.adaptor.tf_utils.tf2onnx_converter.TensorflowQDQToOnnxQDQConverter.transpose_inputs"]], "biascorrection (class in neural_compressor.adaptor.tf_utils.transform_graph.bias_correction)": [[135, "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction.BiasCorrection"]], "do_transformation() (neural_compressor.adaptor.tf_utils.transform_graph.bias_correction.biascorrection method)": [[135, "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction.BiasCorrection.do_transformation"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[135, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"]], "graphtransformbase (class in neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base)": [[136, "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.GraphTransformBase"]], "do_transformation() (neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.graphtransformbase method)": [[136, "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.GraphTransformBase.do_transformation"]], "generate_input_map() (neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.graphtransformbase method)": [[136, "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.GraphTransformBase.generate_input_map"]], "get_node_name_from_input() (neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.graphtransformbase method)": [[136, "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.GraphTransformBase.get_node_name_from_input"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[136, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"]], "node_name_from_input() (neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.graphtransformbase method)": [[136, "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.GraphTransformBase.node_name_from_input"]], "parse_input_pb() (neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.graphtransformbase method)": [[136, "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.GraphTransformBase.parse_input_pb"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[137, "module-neural_compressor.adaptor.tf_utils.transform_graph"]], "insertlogging (class in neural_compressor.adaptor.tf_utils.transform_graph.insert_logging)": [[138, "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging.InsertLogging"]], "do_transformation() (neural_compressor.adaptor.tf_utils.transform_graph.insert_logging.insertlogging method)": [[138, "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging.InsertLogging.do_transformation"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[138, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"]], "rerangequantizedconcat (class in neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat)": [[139, "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat.RerangeQuantizedConcat"]], "do_transformation() (neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat.rerangequantizedconcat method)": [[139, "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat.RerangeQuantizedConcat.do_transformation"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[139, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"]], "collate_tf_preds() (in module neural_compressor.adaptor.tf_utils.util)": [[140, "neural_compressor.adaptor.tf_utils.util.collate_tf_preds"]], "disable_random() (in module neural_compressor.adaptor.tf_utils.util)": [[140, "neural_compressor.adaptor.tf_utils.util.disable_random"]], "fix_ref_type_of_graph_def() (in module neural_compressor.adaptor.tf_utils.util)": [[140, "neural_compressor.adaptor.tf_utils.util.fix_ref_type_of_graph_def"]], "generate_feed_dict() (in module neural_compressor.adaptor.tf_utils.util)": [[140, "neural_compressor.adaptor.tf_utils.util.generate_feed_dict"]], "get_estimator_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[140, "neural_compressor.adaptor.tf_utils.util.get_estimator_graph"]], "get_graph_def() (in module neural_compressor.adaptor.tf_utils.util)": [[140, "neural_compressor.adaptor.tf_utils.util.get_graph_def"]], "get_input_output_node_names() (in module neural_compressor.adaptor.tf_utils.util)": [[140, "neural_compressor.adaptor.tf_utils.util.get_input_output_node_names"]], "get_model_input_shape() (in module neural_compressor.adaptor.tf_utils.util)": [[140, "neural_compressor.adaptor.tf_utils.util.get_model_input_shape"]], "get_tensor_by_name() (in module neural_compressor.adaptor.tf_utils.util)": [[140, "neural_compressor.adaptor.tf_utils.util.get_tensor_by_name"]], "get_tensor_val_from_graph_node() (in module neural_compressor.adaptor.tf_utils.util)": [[140, "neural_compressor.adaptor.tf_utils.util.get_tensor_val_from_graph_node"]], "int8_node_name_reverse() (in module neural_compressor.adaptor.tf_utils.util)": [[140, "neural_compressor.adaptor.tf_utils.util.int8_node_name_reverse"]], "is_ckpt_format() (in module neural_compressor.adaptor.tf_utils.util)": [[140, "neural_compressor.adaptor.tf_utils.util.is_ckpt_format"]], "is_saved_model_format() (in module neural_compressor.adaptor.tf_utils.util)": [[140, "neural_compressor.adaptor.tf_utils.util.is_saved_model_format"]], "iterator_sess_run() (in module neural_compressor.adaptor.tf_utils.util)": [[140, "neural_compressor.adaptor.tf_utils.util.iterator_sess_run"]], "neural_compressor.adaptor.tf_utils.util": [[140, "module-neural_compressor.adaptor.tf_utils.util"]], "read_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[140, "neural_compressor.adaptor.tf_utils.util.read_graph"]], "strip_equivalent_nodes() (in module neural_compressor.adaptor.tf_utils.util)": [[140, "neural_compressor.adaptor.tf_utils.util.strip_equivalent_nodes"]], "strip_unused_nodes() (in module neural_compressor.adaptor.tf_utils.util)": [[140, "neural_compressor.adaptor.tf_utils.util.strip_unused_nodes"]], "tf_diagnosis_helper() (in module neural_compressor.adaptor.tf_utils.util)": [[140, "neural_compressor.adaptor.tf_utils.util.tf_diagnosis_helper"]], "version1_eq_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[140, "neural_compressor.adaptor.tf_utils.util.version1_eq_version2"]], "version1_gt_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[140, "neural_compressor.adaptor.tf_utils.util.version1_gt_version2"]], "version1_gte_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[140, "neural_compressor.adaptor.tf_utils.util.version1_gte_version2"]], "version1_lt_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[140, "neural_compressor.adaptor.tf_utils.util.version1_lt_version2"]], "version1_lte_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[140, "neural_compressor.adaptor.tf_utils.util.version1_lte_version2"]], "write_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[140, "neural_compressor.adaptor.tf_utils.util.write_graph"]], "bf16modulewrapper (class in neural_compressor.adaptor.torch_utils.bf16_convert)": [[141, "neural_compressor.adaptor.torch_utils.bf16_convert.BF16ModuleWrapper"]], "convert() (in module neural_compressor.adaptor.torch_utils.bf16_convert)": [[141, "neural_compressor.adaptor.torch_utils.bf16_convert.Convert"]], "bf16_symbolic_trace() (in module neural_compressor.adaptor.torch_utils.bf16_convert)": [[141, "neural_compressor.adaptor.torch_utils.bf16_convert.bf16_symbolic_trace"]], "forward() (neural_compressor.adaptor.torch_utils.bf16_convert.bf16modulewrapper method)": [[141, "neural_compressor.adaptor.torch_utils.bf16_convert.BF16ModuleWrapper.forward"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[141, "module-neural_compressor.adaptor.torch_utils.bf16_convert"]], "hessiantrace (class in neural_compressor.adaptor.torch_utils.hawq_metric)": [[142, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace"]], "node_collector (class in neural_compressor.adaptor.torch_utils.hawq_metric)": [[142, "neural_compressor.adaptor.torch_utils.hawq_metric.Node_collector"]], "compare_weights() (in module neural_compressor.adaptor.torch_utils.hawq_metric)": [[142, "neural_compressor.adaptor.torch_utils.hawq_metric.compare_weights"]], "get_act_gap() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[142, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.get_act_gap"]], "get_act_traces() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[142, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.get_act_traces"]], "get_avg_traces() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[142, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.get_avg_traces"]], "get_device() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[142, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.get_device"]], "get_fused_mapping() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[142, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.get_fused_mapping"]], "get_params() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[142, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.get_params"]], "get_vthv_weight() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[142, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.get_vtHv_weight"]], "get_weight_traces() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[142, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.get_weight_traces"]], "hawq_top() (in module neural_compressor.adaptor.torch_utils.hawq_metric)": [[142, "neural_compressor.adaptor.torch_utils.hawq_metric.hawq_top"]], "hook_fn_act() (neural_compressor.adaptor.torch_utils.hawq_metric.node_collector method)": [[142, "neural_compressor.adaptor.torch_utils.hawq_metric.Node_collector.hook_fn_act"]], "is_fused_module() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[142, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.is_fused_module"]], "mse_metric_gap() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[142, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.mse_metric_gap"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[142, "module-neural_compressor.adaptor.torch_utils.hawq_metric"]], "register_act_grad_hooks() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[142, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.register_act_grad_hooks"]], "remove() (neural_compressor.adaptor.torch_utils.hawq_metric.node_collector method)": [[142, "neural_compressor.adaptor.torch_utils.hawq_metric.Node_collector.remove"]], "reset_act_gradient_and_hooks() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[142, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.reset_act_gradient_and_hooks"]], "neural_compressor.adaptor.torch_utils": [[143, "module-neural_compressor.adaptor.torch_utils"]], "datareader (class in neural_compressor.adaptor.torch_utils.onnx)": [[144, "neural_compressor.adaptor.torch_utils.onnx.DataReader"]], "get_next() (neural_compressor.adaptor.torch_utils.onnx.datareader method)": [[144, "neural_compressor.adaptor.torch_utils.onnx.DataReader.get_next"]], "neural_compressor.adaptor.torch_utils.onnx": [[144, "module-neural_compressor.adaptor.torch_utils.onnx"]], "graphtrace (class in neural_compressor.adaptor.torch_utils.smooth_quant)": [[145, "neural_compressor.adaptor.torch_utils.smooth_quant.GraphTrace"]], "torchsmoothquant (class in neural_compressor.adaptor.torch_utils.smooth_quant)": [[145, "neural_compressor.adaptor.torch_utils.smooth_quant.TorchSmoothQuant"]], "neural_compressor.adaptor.torch_utils.smooth_quant": [[145, "module-neural_compressor.adaptor.torch_utils.smooth_quant"]], "recover() (neural_compressor.adaptor.torch_utils.smooth_quant.torchsmoothquant method)": [[145, "neural_compressor.adaptor.torch_utils.smooth_quant.TorchSmoothQuant.recover"]], "transform() (neural_compressor.adaptor.torch_utils.smooth_quant.torchsmoothquant method)": [[145, "neural_compressor.adaptor.torch_utils.smooth_quant.TorchSmoothQuant.transform"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[146, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"]], "symbolic_trace() (in module neural_compressor.adaptor.torch_utils.symbolic_trace)": [[146, "neural_compressor.adaptor.torch_utils.symbolic_trace.symbolic_trace"]], "trace_and_fuse_sub_graph() (in module neural_compressor.adaptor.torch_utils.symbolic_trace)": [[146, "neural_compressor.adaptor.torch_utils.symbolic_trace.trace_and_fuse_sub_graph"]], "append_attr() (in module neural_compressor.adaptor.torch_utils.util)": [[147, "neural_compressor.adaptor.torch_utils.util.append_attr"]], "auto_copy() (in module neural_compressor.adaptor.torch_utils.util)": [[147, "neural_compressor.adaptor.torch_utils.util.auto_copy"]], "check_cfg_and_qconfig() (in module neural_compressor.adaptor.torch_utils.util)": [[147, "neural_compressor.adaptor.torch_utils.util.check_cfg_and_qconfig"]], "collate_torch_preds() (in module neural_compressor.adaptor.torch_utils.util)": [[147, "neural_compressor.adaptor.torch_utils.util.collate_torch_preds"]], "fetch_module() (in module neural_compressor.adaptor.torch_utils.util)": [[147, "neural_compressor.adaptor.torch_utils.util.fetch_module"]], "generate_activation_observer() (in module neural_compressor.adaptor.torch_utils.util)": [[147, "neural_compressor.adaptor.torch_utils.util.generate_activation_observer"]], "get_embedding_contiguous() (in module neural_compressor.adaptor.torch_utils.util)": [[147, "neural_compressor.adaptor.torch_utils.util.get_embedding_contiguous"]], "get_example_input() (in module neural_compressor.adaptor.torch_utils.util)": [[147, "neural_compressor.adaptor.torch_utils.util.get_example_input"]], "get_fallback_order() (in module neural_compressor.adaptor.torch_utils.util)": [[147, "neural_compressor.adaptor.torch_utils.util.get_fallback_order"]], "get_mse_order_per_fp32() (in module neural_compressor.adaptor.torch_utils.util)": [[147, "neural_compressor.adaptor.torch_utils.util.get_mse_order_per_fp32"]], "get_mse_order_per_int8() (in module neural_compressor.adaptor.torch_utils.util)": [[147, "neural_compressor.adaptor.torch_utils.util.get_mse_order_per_int8"]], "get_quantizable_ops_from_cfgs() (in module neural_compressor.adaptor.torch_utils.util)": [[147, "neural_compressor.adaptor.torch_utils.util.get_quantizable_ops_from_cfgs"]], "get_torch_version() (in module neural_compressor.adaptor.torch_utils.util)": [[147, "neural_compressor.adaptor.torch_utils.util.get_torch_version"]], "input2tuple() (in module neural_compressor.adaptor.torch_utils.util)": [[147, "neural_compressor.adaptor.torch_utils.util.input2tuple"]], "is_fused_module() (in module neural_compressor.adaptor.torch_utils.util)": [[147, "neural_compressor.adaptor.torch_utils.util.is_fused_module"]], "neural_compressor.adaptor.torch_utils.util": [[147, "module-neural_compressor.adaptor.torch_utils.util"]], "paser_cfgs() (in module neural_compressor.adaptor.torch_utils.util)": [[147, "neural_compressor.adaptor.torch_utils.util.paser_cfgs"]], "set_module() (in module neural_compressor.adaptor.torch_utils.util)": [[147, "neural_compressor.adaptor.torch_utils.util.set_module"]], "simple_inference() (in module neural_compressor.adaptor.torch_utils.util)": [[147, "neural_compressor.adaptor.torch_utils.util.simple_inference"]], "algorithms (class in neural_compressor.algorithm.algorithm)": [[148, "neural_compressor.algorithm.algorithm.ALGORITHMS"]], "algorithm (class in neural_compressor.algorithm.algorithm)": [[148, "neural_compressor.algorithm.algorithm.Algorithm"]], "algorithmscheduler (class in neural_compressor.algorithm.algorithm)": [[148, "neural_compressor.algorithm.algorithm.AlgorithmScheduler"]], "adaptor (neural_compressor.algorithm.algorithm.algorithmscheduler property)": [[148, "neural_compressor.algorithm.algorithm.AlgorithmScheduler.adaptor"]], "algorithm_registry() (in module neural_compressor.algorithm.algorithm)": [[148, "neural_compressor.algorithm.algorithm.algorithm_registry"]], "append_algorithm() (neural_compressor.algorithm.algorithm.algorithmscheduler method)": [[148, "neural_compressor.algorithm.algorithm.AlgorithmScheduler.append_algorithm"]], "calib_iter (neural_compressor.algorithm.algorithm.algorithmscheduler property)": [[148, "neural_compressor.algorithm.algorithm.AlgorithmScheduler.calib_iter"]], "dataloader (neural_compressor.algorithm.algorithm.algorithmscheduler property)": [[148, "neural_compressor.algorithm.algorithm.AlgorithmScheduler.dataloader"]], "neural_compressor.algorithm.algorithm": [[148, "module-neural_compressor.algorithm.algorithm"]], "origin_model (neural_compressor.algorithm.algorithm.algorithmscheduler property)": [[148, "neural_compressor.algorithm.algorithm.AlgorithmScheduler.origin_model"]], "q_model (neural_compressor.algorithm.algorithm.algorithmscheduler property)": [[148, "neural_compressor.algorithm.algorithm.AlgorithmScheduler.q_model"]], "reset_exec_algorithms() (neural_compressor.algorithm.algorithm.algorithmscheduler method)": [[148, "neural_compressor.algorithm.algorithm.AlgorithmScheduler.reset_exec_algorithms"]], "support_algorithms() (neural_compressor.algorithm.algorithm.algorithms class method)": [[148, "neural_compressor.algorithm.algorithm.ALGORITHMS.support_algorithms"]], "fastbiascorrection (class in neural_compressor.algorithm.fast_bias_correction)": [[149, "neural_compressor.algorithm.fast_bias_correction.FastBiasCorrection"]], "neural_compressor.algorithm.fast_bias_correction": [[149, "module-neural_compressor.algorithm.fast_bias_correction"]], "algorithms (class in neural_compressor.algorithm)": [[150, "neural_compressor.algorithm.ALGORITHMS"]], "algorithm (class in neural_compressor.algorithm)": [[150, "neural_compressor.algorithm.Algorithm"]], "algorithmscheduler (class in neural_compressor.algorithm)": [[150, "neural_compressor.algorithm.AlgorithmScheduler"]], "adaptor (neural_compressor.algorithm.algorithmscheduler property)": [[150, "neural_compressor.algorithm.AlgorithmScheduler.adaptor"]], "algorithm_registry() (in module neural_compressor.algorithm)": [[150, "neural_compressor.algorithm.algorithm_registry"]], "append_algorithm() (neural_compressor.algorithm.algorithmscheduler method)": [[150, "neural_compressor.algorithm.AlgorithmScheduler.append_algorithm"]], "calib_iter (neural_compressor.algorithm.algorithmscheduler property)": [[150, "neural_compressor.algorithm.AlgorithmScheduler.calib_iter"]], "dataloader (neural_compressor.algorithm.algorithmscheduler property)": [[150, "neural_compressor.algorithm.AlgorithmScheduler.dataloader"]], "neural_compressor.algorithm": [[150, "module-neural_compressor.algorithm"]], "origin_model (neural_compressor.algorithm.algorithmscheduler property)": [[150, "neural_compressor.algorithm.AlgorithmScheduler.origin_model"]], "q_model (neural_compressor.algorithm.algorithmscheduler property)": [[150, "neural_compressor.algorithm.AlgorithmScheduler.q_model"]], "reset_exec_algorithms() (neural_compressor.algorithm.algorithmscheduler method)": [[150, "neural_compressor.algorithm.AlgorithmScheduler.reset_exec_algorithms"]], "support_algorithms() (neural_compressor.algorithm.algorithms class method)": [[150, "neural_compressor.algorithm.ALGORITHMS.support_algorithms"]], "smoothquant (class in neural_compressor.algorithm.smooth_quant)": [[151, "neural_compressor.algorithm.smooth_quant.SmoothQuant"]], "neural_compressor.algorithm.smooth_quant": [[151, "module-neural_compressor.algorithm.smooth_quant"]], "weightcorrection (class in neural_compressor.algorithm.weight_correction)": [[152, "neural_compressor.algorithm.weight_correction.WeightCorrection"]], "neural_compressor.algorithm.weight_correction": [[152, "module-neural_compressor.algorithm.weight_correction"]], "benchmark (class in neural_compressor.benchmark)": [[153, "neural_compressor.benchmark.Benchmark"]], "b_dataloader (neural_compressor.benchmark.benchmark property)": [[153, "neural_compressor.benchmark.Benchmark.b_dataloader"]], "b_func (neural_compressor.benchmark.benchmark property)": [[153, "neural_compressor.benchmark.Benchmark.b_func"]], "config_instance() (neural_compressor.benchmark.benchmark method)": [[153, "neural_compressor.benchmark.Benchmark.config_instance"]], "fit() (in module neural_compressor.benchmark)": [[153, "neural_compressor.benchmark.fit"]], "generate_prefix() (neural_compressor.benchmark.benchmark method)": [[153, "neural_compressor.benchmark.Benchmark.generate_prefix"]], "get_architecture() (in module neural_compressor.benchmark)": [[153, "neural_compressor.benchmark.get_architecture"]], "get_bounded_threads() (in module neural_compressor.benchmark)": [[153, "neural_compressor.benchmark.get_bounded_threads"]], "get_core_ids() (in module neural_compressor.benchmark)": [[153, "neural_compressor.benchmark.get_core_ids"]], "get_physical_ids() (in module neural_compressor.benchmark)": [[153, "neural_compressor.benchmark.get_physical_ids"]], "get_threads() (in module neural_compressor.benchmark)": [[153, "neural_compressor.benchmark.get_threads"]], "get_threads_per_core() (in module neural_compressor.benchmark)": [[153, "neural_compressor.benchmark.get_threads_per_core"]], "model (neural_compressor.benchmark.benchmark property)": [[153, "neural_compressor.benchmark.Benchmark.model"]], "neural_compressor.benchmark": [[153, "module-neural_compressor.benchmark"]], "results (neural_compressor.benchmark.benchmark property)": [[153, "neural_compressor.benchmark.Benchmark.results"]], "run_instance() (neural_compressor.benchmark.benchmark method)": [[153, "neural_compressor.benchmark.Benchmark.run_instance"]], "set_all_env_var() (in module neural_compressor.benchmark)": [[153, "neural_compressor.benchmark.set_all_env_var"]], "set_env_var() (in module neural_compressor.benchmark)": [[153, "neural_compressor.benchmark.set_env_var"]], "summary_benchmark() (neural_compressor.benchmark.benchmark method)": [[153, "neural_compressor.benchmark.Benchmark.summary_benchmark"]], "awaretrainingquantcallbacks (class in neural_compressor.compression.callbacks)": [[154, "neural_compressor.compression.callbacks.AwareTrainingQuantCallbacks"]], "basecallbacks (class in neural_compressor.compression.callbacks)": [[154, "neural_compressor.compression.callbacks.BaseCallbacks"]], "distillationcallbacks (class in neural_compressor.compression.callbacks)": [[154, "neural_compressor.compression.callbacks.DistillationCallbacks"]], "pruningcallbacks (class in neural_compressor.compression.callbacks)": [[154, "neural_compressor.compression.callbacks.PruningCallbacks"]], "_epoch_ran (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[154, "neural_compressor.compression.callbacks.DistillationCallbacks._epoch_ran"]], "best_model (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[154, "neural_compressor.compression.callbacks.DistillationCallbacks.best_model"]], "best_score (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[154, "neural_compressor.compression.callbacks.DistillationCallbacks.best_score"]], "create_criterion() (neural_compressor.compression.callbacks.distillationcallbacks method)": [[154, "neural_compressor.compression.callbacks.DistillationCallbacks.create_criterion"]], "criterion (neural_compressor.compression.callbacks.distillationcallbacks property)": [[154, "neural_compressor.compression.callbacks.DistillationCallbacks.criterion"]], "eval_dataloader (neural_compressor.compression.callbacks.basecallbacks property)": [[154, "neural_compressor.compression.callbacks.BaseCallbacks.eval_dataloader"]], "eval_frequency (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[154, "neural_compressor.compression.callbacks.DistillationCallbacks.eval_frequency"]], "eval_func (neural_compressor.compression.callbacks.basecallbacks property)": [[154, "neural_compressor.compression.callbacks.BaseCallbacks.eval_func"]], "execute() (neural_compressor.compression.callbacks.basecallbacks method)": [[154, "neural_compressor.compression.callbacks.BaseCallbacks.execute"]], "generate_hooks() (neural_compressor.compression.callbacks.distillationcallbacks method)": [[154, "neural_compressor.compression.callbacks.DistillationCallbacks.generate_hooks"]], "generate_hooks() (neural_compressor.compression.callbacks.pruningcallbacks method)": [[154, "neural_compressor.compression.callbacks.PruningCallbacks.generate_hooks"]], "init_train_cfg() (neural_compressor.compression.callbacks.distillationcallbacks method)": [[154, "neural_compressor.compression.callbacks.DistillationCallbacks.init_train_cfg"]], "metric (neural_compressor.compression.callbacks.basecallbacks property)": [[154, "neural_compressor.compression.callbacks.BaseCallbacks.metric"]], "model (neural_compressor.compression.callbacks.basecallbacks property)": [[154, "neural_compressor.compression.callbacks.BaseCallbacks.model"]], "neural_compressor.compression.callbacks": [[154, "module-neural_compressor.compression.callbacks"]], "on_after_compute_loss() (neural_compressor.compression.callbacks.basecallbacks method)": [[154, "neural_compressor.compression.callbacks.BaseCallbacks.on_after_compute_loss"]], "on_after_eval() (neural_compressor.compression.callbacks.basecallbacks method)": [[154, "neural_compressor.compression.callbacks.BaseCallbacks.on_after_eval"]], "on_after_optimizer_step() (neural_compressor.compression.callbacks.basecallbacks method)": [[154, "neural_compressor.compression.callbacks.BaseCallbacks.on_after_optimizer_step"]], "on_before_eval() (neural_compressor.compression.callbacks.basecallbacks method)": [[154, "neural_compressor.compression.callbacks.BaseCallbacks.on_before_eval"]], "on_before_optimizer_step() (neural_compressor.compression.callbacks.basecallbacks method)": [[154, "neural_compressor.compression.callbacks.BaseCallbacks.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.compression.callbacks.basecallbacks method)": [[154, "neural_compressor.compression.callbacks.BaseCallbacks.on_epoch_begin"]], "on_epoch_end() (neural_compressor.compression.callbacks.basecallbacks method)": [[154, "neural_compressor.compression.callbacks.BaseCallbacks.on_epoch_end"]], "on_step_begin() (neural_compressor.compression.callbacks.basecallbacks method)": [[154, "neural_compressor.compression.callbacks.BaseCallbacks.on_step_begin"]], "on_step_end() (neural_compressor.compression.callbacks.basecallbacks method)": [[154, "neural_compressor.compression.callbacks.BaseCallbacks.on_step_end"]], "on_train_begin() (neural_compressor.compression.callbacks.basecallbacks method)": [[154, "neural_compressor.compression.callbacks.BaseCallbacks.on_train_begin"]], "on_train_end() (neural_compressor.compression.callbacks.basecallbacks method)": [[154, "neural_compressor.compression.callbacks.BaseCallbacks.on_train_end"]], "on_train_end() (neural_compressor.compression.callbacks.pruningcallbacks method)": [[154, "neural_compressor.compression.callbacks.PruningCallbacks.on_train_end"]], "pre_process() (neural_compressor.compression.callbacks.basecallbacks method)": [[154, "neural_compressor.compression.callbacks.BaseCallbacks.pre_process"]], "register_hook() (neural_compressor.compression.callbacks.basecallbacks method)": [[154, "neural_compressor.compression.callbacks.BaseCallbacks.register_hook"]], "remove_hook() (neural_compressor.compression.callbacks.basecallbacks method)": [[154, "neural_compressor.compression.callbacks.BaseCallbacks.remove_hook"]], "student_model (neural_compressor.compression.callbacks.distillationcallbacks property)": [[154, "neural_compressor.compression.callbacks.DistillationCallbacks.student_model"]], "teacher_model (neural_compressor.compression.callbacks.distillationcallbacks property)": [[154, "neural_compressor.compression.callbacks.DistillationCallbacks.teacher_model"]], "train_cfg (neural_compressor.compression.callbacks.distillationcallbacks property)": [[154, "neural_compressor.compression.callbacks.DistillationCallbacks.train_cfg"]], "train_func (neural_compressor.compression.callbacks.basecallbacks property)": [[154, "neural_compressor.compression.callbacks.BaseCallbacks.train_func"]], "criterions (class in neural_compressor.compression.distillation.criterions)": [[155, "neural_compressor.compression.distillation.criterions.Criterions"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[155, "neural_compressor.compression.distillation.criterions.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationframework (class in neural_compressor.compression.distillation.criterions)": [[155, "neural_compressor.compression.distillation.criterions.KnowledgeDistillationFramework"]], "knowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[155, "neural_compressor.compression.distillation.criterions.KnowledgeDistillationLoss"]], "kullbackleiblerdivergence() (neural_compressor.compression.distillation.criterions.pytorchknowledgedistillationloss method)": [[155, "neural_compressor.compression.distillation.criterions.PyTorchKnowledgeDistillationLoss.KullbackLeiblerDivergence"]], "kullbackleiblerdivergence() (neural_compressor.compression.distillation.criterions.pytorchselfknowledgedistillationloss method)": [[155, "neural_compressor.compression.distillation.criterions.PyTorchSelfKnowledgeDistillationLoss.KullbackLeiblerDivergence"]], "l2divergence() (neural_compressor.compression.distillation.criterions.pytorchselfknowledgedistillationloss method)": [[155, "neural_compressor.compression.distillation.criterions.PyTorchSelfKnowledgeDistillationLoss.L2Divergence"]], "pytorchcriterions (class in neural_compressor.compression.distillation.criterions)": [[155, "neural_compressor.compression.distillation.criterions.PyTorchCriterions"]], "pytorchintermediatelayersknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[155, "neural_compressor.compression.distillation.criterions.PyTorchIntermediateLayersKnowledgeDistillationLoss"]], "pytorchintermediatelayersknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[155, "neural_compressor.compression.distillation.criterions.PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"]], "pytorchknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[155, "neural_compressor.compression.distillation.criterions.PyTorchKnowledgeDistillationLoss"]], "pytorchknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[155, "neural_compressor.compression.distillation.criterions.PyTorchKnowledgeDistillationLossWrapper"]], "pytorchselfknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[155, "neural_compressor.compression.distillation.criterions.PyTorchSelfKnowledgeDistillationLoss"]], "pytorchselfknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[155, "neural_compressor.compression.distillation.criterions.PyTorchSelfKnowledgeDistillationLossWrapper"]], "selfknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[155, "neural_compressor.compression.distillation.criterions.SelfKnowledgeDistillationLoss"]], "softcrossentropy() (neural_compressor.compression.distillation.criterions.pytorchknowledgedistillationloss method)": [[155, "neural_compressor.compression.distillation.criterions.PyTorchKnowledgeDistillationLoss.SoftCrossEntropy"]], "softcrossentropy() (neural_compressor.compression.distillation.criterions.pytorchselfknowledgedistillationloss method)": [[155, "neural_compressor.compression.distillation.criterions.PyTorchSelfKnowledgeDistillationLoss.SoftCrossEntropy"]], "softcrossentropy() (neural_compressor.compression.distillation.criterions.tensorflowknowledgedistillationloss method)": [[155, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLoss.SoftCrossEntropy"]], "tensorflowcriterions (class in neural_compressor.compression.distillation.criterions)": [[155, "neural_compressor.compression.distillation.criterions.TensorflowCriterions"]], "tensorflowknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[155, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLoss"]], "tensorflowknowledgedistillationlossexternal (class in neural_compressor.compression.distillation.criterions)": [[155, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLossExternal"]], "tensorflowknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[155, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLossWrapper"]], "clear_features() (neural_compressor.compression.distillation.criterions.intermediatelayersknowledgedistillationloss method)": [[155, "neural_compressor.compression.distillation.criterions.IntermediateLayersKnowledgeDistillationLoss.clear_features"]], "criterion_registry() (in module neural_compressor.compression.distillation.criterions)": [[155, "neural_compressor.compression.distillation.criterions.criterion_registry"]], "init_feature_matcher() (neural_compressor.compression.distillation.criterions.intermediatelayersknowledgedistillationloss method)": [[155, "neural_compressor.compression.distillation.criterions.IntermediateLayersKnowledgeDistillationLoss.init_feature_matcher"]], "init_feature_matcher() (neural_compressor.compression.distillation.criterions.pytorchintermediatelayersknowledgedistillationloss method)": [[155, "neural_compressor.compression.distillation.criterions.PyTorchIntermediateLayersKnowledgeDistillationLoss.init_feature_matcher"]], "init_loss_funcs() (neural_compressor.compression.distillation.criterions.intermediatelayersknowledgedistillationloss method)": [[155, "neural_compressor.compression.distillation.criterions.IntermediateLayersKnowledgeDistillationLoss.init_loss_funcs"]], "init_loss_funcs() (neural_compressor.compression.distillation.criterions.pytorchintermediatelayersknowledgedistillationloss method)": [[155, "neural_compressor.compression.distillation.criterions.PyTorchIntermediateLayersKnowledgeDistillationLoss.init_loss_funcs"]], "init_loss_funcs() (neural_compressor.compression.distillation.criterions.pytorchselfknowledgedistillationloss method)": [[155, "neural_compressor.compression.distillation.criterions.PyTorchSelfKnowledgeDistillationLoss.init_loss_funcs"]], "init_loss_funcs() (neural_compressor.compression.distillation.criterions.selfknowledgedistillationloss method)": [[155, "neural_compressor.compression.distillation.criterions.SelfKnowledgeDistillationLoss.init_loss_funcs"]], "loss_cal() (neural_compressor.compression.distillation.criterions.intermediatelayersknowledgedistillationloss method)": [[155, "neural_compressor.compression.distillation.criterions.IntermediateLayersKnowledgeDistillationLoss.loss_cal"]], "loss_cal() (neural_compressor.compression.distillation.criterions.knowledgedistillationloss method)": [[155, "neural_compressor.compression.distillation.criterions.KnowledgeDistillationLoss.loss_cal"]], "loss_cal() (neural_compressor.compression.distillation.criterions.pytorchintermediatelayersknowledgedistillationloss method)": [[155, "neural_compressor.compression.distillation.criterions.PyTorchIntermediateLayersKnowledgeDistillationLoss.loss_cal"]], "loss_cal() (neural_compressor.compression.distillation.criterions.pytorchselfknowledgedistillationloss method)": [[155, "neural_compressor.compression.distillation.criterions.PyTorchSelfKnowledgeDistillationLoss.loss_cal"]], "loss_cal() (neural_compressor.compression.distillation.criterions.selfknowledgedistillationloss method)": [[155, "neural_compressor.compression.distillation.criterions.SelfKnowledgeDistillationLoss.loss_cal"]], "loss_cal_sloss() (neural_compressor.compression.distillation.criterions.intermediatelayersknowledgedistillationloss method)": [[155, "neural_compressor.compression.distillation.criterions.IntermediateLayersKnowledgeDistillationLoss.loss_cal_sloss"]], "loss_cal_sloss() (neural_compressor.compression.distillation.criterions.knowledgedistillationloss method)": [[155, "neural_compressor.compression.distillation.criterions.KnowledgeDistillationLoss.loss_cal_sloss"]], "loss_cal_sloss() (neural_compressor.compression.distillation.criterions.pytorchintermediatelayersknowledgedistillationloss method)": [[155, "neural_compressor.compression.distillation.criterions.PyTorchIntermediateLayersKnowledgeDistillationLoss.loss_cal_sloss"]], "loss_cal_sloss() (neural_compressor.compression.distillation.criterions.selfknowledgedistillationloss method)": [[155, "neural_compressor.compression.distillation.criterions.SelfKnowledgeDistillationLoss.loss_cal_sloss"]], "neural_compressor.compression.distillation.criterions": [[155, "module-neural_compressor.compression.distillation.criterions"]], "register() (neural_compressor.compression.distillation.criterions.criterions method)": [[155, "neural_compressor.compression.distillation.criterions.Criterions.register"]], "register_hooks_for_models() (neural_compressor.compression.distillation.criterions.pytorchintermediatelayersknowledgedistillationloss method)": [[155, "neural_compressor.compression.distillation.criterions.PyTorchIntermediateLayersKnowledgeDistillationLoss.register_hooks_for_models"]], "remove_all_hooks() (neural_compressor.compression.distillation.criterions.pytorchintermediatelayersknowledgedistillationloss method)": [[155, "neural_compressor.compression.distillation.criterions.PyTorchIntermediateLayersKnowledgeDistillationLoss.remove_all_hooks"]], "student_model (neural_compressor.compression.distillation.criterions.knowledgedistillationframework property)": [[155, "neural_compressor.compression.distillation.criterions.KnowledgeDistillationFramework.student_model"]], "student_targets_loss_cal() (neural_compressor.compression.distillation.criterions.knowledgedistillationloss method)": [[155, "neural_compressor.compression.distillation.criterions.KnowledgeDistillationLoss.student_targets_loss_cal"]], "student_targets_loss_cal() (neural_compressor.compression.distillation.criterions.pytorchknowledgedistillationloss method)": [[155, "neural_compressor.compression.distillation.criterions.PyTorchKnowledgeDistillationLoss.student_targets_loss_cal"]], "student_targets_loss_cal() (neural_compressor.compression.distillation.criterions.tensorflowknowledgedistillationloss method)": [[155, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLoss.student_targets_loss_cal"]], "student_targets_loss_cal() (neural_compressor.compression.distillation.criterions.tensorflowknowledgedistillationlossexternal method)": [[155, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLossExternal.student_targets_loss_cal"]], "teacher_model (neural_compressor.compression.distillation.criterions.knowledgedistillationframework property)": [[155, "neural_compressor.compression.distillation.criterions.KnowledgeDistillationFramework.teacher_model"]], "teacher_model_forward() (neural_compressor.compression.distillation.criterions.intermediatelayersknowledgedistillationloss method)": [[155, "neural_compressor.compression.distillation.criterions.IntermediateLayersKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.compression.distillation.criterions.knowledgedistillationloss method)": [[155, "neural_compressor.compression.distillation.criterions.KnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.compression.distillation.criterions.pytorchintermediatelayersknowledgedistillationloss method)": [[155, "neural_compressor.compression.distillation.criterions.PyTorchIntermediateLayersKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.compression.distillation.criterions.pytorchknowledgedistillationloss method)": [[155, "neural_compressor.compression.distillation.criterions.PyTorchKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.compression.distillation.criterions.pytorchselfknowledgedistillationloss method)": [[155, "neural_compressor.compression.distillation.criterions.PyTorchSelfKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.compression.distillation.criterions.selfknowledgedistillationloss method)": [[155, "neural_compressor.compression.distillation.criterions.SelfKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.compression.distillation.criterions.tensorflowknowledgedistillationloss method)": [[155, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.compression.distillation.criterions.tensorflowknowledgedistillationlossexternal method)": [[155, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLossExternal.teacher_model_forward"]], "teacher_student_loss_cal() (neural_compressor.compression.distillation.criterions.knowledgedistillationloss method)": [[155, "neural_compressor.compression.distillation.criterions.KnowledgeDistillationLoss.teacher_student_loss_cal"]], "teacher_student_loss_cal() (neural_compressor.compression.distillation.criterions.pytorchknowledgedistillationloss method)": [[155, "neural_compressor.compression.distillation.criterions.PyTorchKnowledgeDistillationLoss.teacher_student_loss_cal"]], "teacher_student_loss_cal() (neural_compressor.compression.distillation.criterions.tensorflowknowledgedistillationloss method)": [[155, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLoss.teacher_student_loss_cal"]], "teacher_student_loss_cal() (neural_compressor.compression.distillation.criterions.tensorflowknowledgedistillationlossexternal method)": [[155, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLossExternal.teacher_student_loss_cal"]], "neural_compressor.compression.distillation": [[156, "module-neural_compressor.compression.distillation"]], "awaretrainingquantcallbacks (class in neural_compressor.compression)": [[157, "neural_compressor.compression.AwareTrainingQuantCallbacks"]], "distillationcallbacks (class in neural_compressor.compression)": [[157, "neural_compressor.compression.DistillationCallbacks"]], "pruningcallbacks (class in neural_compressor.compression)": [[157, "neural_compressor.compression.PruningCallbacks"]], "_epoch_ran (neural_compressor.compression.distillationcallbacks attribute)": [[157, "neural_compressor.compression.DistillationCallbacks._epoch_ran"]], "best_model (neural_compressor.compression.distillationcallbacks attribute)": [[157, "neural_compressor.compression.DistillationCallbacks.best_model"]], "best_score (neural_compressor.compression.distillationcallbacks attribute)": [[157, "neural_compressor.compression.DistillationCallbacks.best_score"]], "create_criterion() (neural_compressor.compression.distillationcallbacks method)": [[157, "neural_compressor.compression.DistillationCallbacks.create_criterion"]], "criterion (neural_compressor.compression.distillationcallbacks property)": [[157, "neural_compressor.compression.DistillationCallbacks.criterion"]], "eval_frequency (neural_compressor.compression.distillationcallbacks attribute)": [[157, "neural_compressor.compression.DistillationCallbacks.eval_frequency"]], "generate_hooks() (neural_compressor.compression.distillationcallbacks method)": [[157, "neural_compressor.compression.DistillationCallbacks.generate_hooks"]], "generate_hooks() (neural_compressor.compression.pruningcallbacks method)": [[157, "neural_compressor.compression.PruningCallbacks.generate_hooks"]], "init_train_cfg() (neural_compressor.compression.distillationcallbacks method)": [[157, "neural_compressor.compression.DistillationCallbacks.init_train_cfg"]], "neural_compressor.compression": [[157, "module-neural_compressor.compression"]], "on_train_end() (neural_compressor.compression.pruningcallbacks method)": [[157, "neural_compressor.compression.PruningCallbacks.on_train_end"]], "student_model (neural_compressor.compression.distillationcallbacks property)": [[157, "neural_compressor.compression.DistillationCallbacks.student_model"]], "teacher_model (neural_compressor.compression.distillationcallbacks property)": [[157, "neural_compressor.compression.DistillationCallbacks.teacher_model"]], "train_cfg (neural_compressor.compression.distillationcallbacks property)": [[157, "neural_compressor.compression.DistillationCallbacks.train_cfg"]], "gradientcriterion (class in neural_compressor.compression.pruner.criteria)": [[158, "neural_compressor.compression.pruner.criteria.GradientCriterion"]], "magnitudecriterion (class in neural_compressor.compression.pruner.criteria)": [[158, "neural_compressor.compression.pruner.criteria.MagnitudeCriterion"]], "pruningcriterion (class in neural_compressor.compression.pruner.criteria)": [[158, "neural_compressor.compression.pruner.criteria.PruningCriterion"]], "snipcriterion (class in neural_compressor.compression.pruner.criteria)": [[158, "neural_compressor.compression.pruner.criteria.SnipCriterion"]], "snipmomentumcriterion (class in neural_compressor.compression.pruner.criteria)": [[158, "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion"]], "get_criterion() (in module neural_compressor.compression.pruner.criteria)": [[158, "neural_compressor.compression.pruner.criteria.get_criterion"]], "neural_compressor.compression.pruner.criteria": [[158, "module-neural_compressor.compression.pruner.criteria"]], "on_after_optimizer_step() (neural_compressor.compression.pruner.criteria.pruningcriterion method)": [[158, "neural_compressor.compression.pruner.criteria.PruningCriterion.on_after_optimizer_step"]], "on_before_optimizer_step() (neural_compressor.compression.pruner.criteria.gradientcriterion method)": [[158, "neural_compressor.compression.pruner.criteria.GradientCriterion.on_before_optimizer_step"]], "on_before_optimizer_step() (neural_compressor.compression.pruner.criteria.pruningcriterion method)": [[158, "neural_compressor.compression.pruner.criteria.PruningCriterion.on_before_optimizer_step"]], "on_before_optimizer_step() (neural_compressor.compression.pruner.criteria.snipcriterion method)": [[158, "neural_compressor.compression.pruner.criteria.SnipCriterion.on_before_optimizer_step"]], "on_before_optimizer_step() (neural_compressor.compression.pruner.criteria.snipmomentumcriterion method)": [[158, "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion.on_before_optimizer_step"]], "on_step_begin() (neural_compressor.compression.pruner.criteria.magnitudecriterion method)": [[158, "neural_compressor.compression.pruner.criteria.MagnitudeCriterion.on_step_begin"]], "on_step_begin() (neural_compressor.compression.pruner.criteria.pruningcriterion method)": [[158, "neural_compressor.compression.pruner.criteria.PruningCriterion.on_step_begin"]], "register_criterion() (in module neural_compressor.compression.pruner.criteria)": [[158, "neural_compressor.compression.pruner.criteria.register_criterion"]], "scores (neural_compressor.compression.pruner.criteria.gradientcriterion attribute)": [[158, "neural_compressor.compression.pruner.criteria.GradientCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.magnitudecriterion attribute)": [[158, "neural_compressor.compression.pruner.criteria.MagnitudeCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.pruningcriterion attribute)": [[158, "neural_compressor.compression.pruner.criteria.PruningCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.snipcriterion attribute)": [[158, "neural_compressor.compression.pruner.criteria.SnipCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.snipmomentumcriterion attribute)": [[158, "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion.scores"]], "neural_compressor.compression.pruner": [[159, "module-neural_compressor.compression.pruner"]], "basepattern (class in neural_compressor.compression.pruner.patterns)": [[160, "neural_compressor.compression.pruner.patterns.BasePattern"]], "m (neural_compressor.compression.pruner.patterns.patternninm attribute)": [[160, "neural_compressor.compression.pruner.patterns.PatternNInM.M"]], "n (neural_compressor.compression.pruner.patterns.patternninm attribute)": [[160, "neural_compressor.compression.pruner.patterns.PatternNInM.N"]], "patternninm (class in neural_compressor.compression.pruner.patterns)": [[160, "neural_compressor.compression.pruner.patterns.PatternNInM"]], "patternnxm (class in neural_compressor.compression.pruner.patterns)": [[160, "neural_compressor.compression.pruner.patterns.PatternNxM"]], "adjust_ratio() (neural_compressor.compression.pruner.patterns.basepattern method)": [[160, "neural_compressor.compression.pruner.patterns.BasePattern.adjust_ratio"]], "block_size (neural_compressor.compression.pruner.patterns.patternnxm attribute)": [[160, "neural_compressor.compression.pruner.patterns.PatternNxM.block_size"]], "check_layer_validity() (neural_compressor.compression.pruner.patterns.basepattern method)": [[160, "neural_compressor.compression.pruner.patterns.BasePattern.check_layer_validity"]], "check_layer_validity() (neural_compressor.compression.pruner.patterns.patternninm method)": [[160, "neural_compressor.compression.pruner.patterns.PatternNInM.check_layer_validity"]], "check_layer_validity() (neural_compressor.compression.pruner.patterns.patternnxm method)": [[160, "neural_compressor.compression.pruner.patterns.PatternNxM.check_layer_validity"]], "config (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[160, "neural_compressor.compression.pruner.patterns.BasePattern.config"]], "count_new_masked_cnts() (neural_compressor.compression.pruner.patterns.patternnxm method)": [[160, "neural_compressor.compression.pruner.patterns.PatternNxM.count_new_masked_cnts"]], "get_block_size_dict() (neural_compressor.compression.pruner.patterns.basepattern method)": [[160, "neural_compressor.compression.pruner.patterns.BasePattern.get_block_size_dict"]], "get_block_size_dict() (neural_compressor.compression.pruner.patterns.patternnxm method)": [[160, "neural_compressor.compression.pruner.patterns.PatternNxM.get_block_size_dict"]], "get_ele_mask_per_threshold() (neural_compressor.compression.pruner.patterns.patternninm method)": [[160, "neural_compressor.compression.pruner.patterns.PatternNInM.get_ele_mask_per_threshold"]], "get_least_ninm_mask_from_data() (neural_compressor.compression.pruner.patterns.patternninm method)": [[160, "neural_compressor.compression.pruner.patterns.PatternNInM.get_least_ninm_mask_from_data"]], "get_mask_per_threshold() (neural_compressor.compression.pruner.patterns.patternnxm method)": [[160, "neural_compressor.compression.pruner.patterns.PatternNxM.get_mask_per_threshold"]], "get_masks() (neural_compressor.compression.pruner.patterns.basepattern method)": [[160, "neural_compressor.compression.pruner.patterns.BasePattern.get_masks"]], "get_masks_global() (neural_compressor.compression.pruner.patterns.basepattern method)": [[160, "neural_compressor.compression.pruner.patterns.BasePattern.get_masks_global"]], "get_masks_global() (neural_compressor.compression.pruner.patterns.patternninm method)": [[160, "neural_compressor.compression.pruner.patterns.PatternNInM.get_masks_global"]], "get_masks_global() (neural_compressor.compression.pruner.patterns.patternnxm method)": [[160, "neural_compressor.compression.pruner.patterns.PatternNxM.get_masks_global"]], "get_masks_local() (neural_compressor.compression.pruner.patterns.basepattern method)": [[160, "neural_compressor.compression.pruner.patterns.BasePattern.get_masks_local"]], "get_pattern() (in module neural_compressor.compression.pruner.patterns)": [[160, "neural_compressor.compression.pruner.patterns.get_pattern"]], "get_pattern_lock_masks() (neural_compressor.compression.pruner.patterns.basepattern method)": [[160, "neural_compressor.compression.pruner.patterns.BasePattern.get_pattern_lock_masks"]], "get_pattern_lock_masks() (neural_compressor.compression.pruner.patterns.patternninm method)": [[160, "neural_compressor.compression.pruner.patterns.PatternNInM.get_pattern_lock_masks"]], "get_pattern_lock_masks() (neural_compressor.compression.pruner.patterns.patternnxm method)": [[160, "neural_compressor.compression.pruner.patterns.PatternNxM.get_pattern_lock_masks"]], "get_reduced_masks_from_data() (neural_compressor.compression.pruner.patterns.basepattern method)": [[160, "neural_compressor.compression.pruner.patterns.BasePattern.get_reduced_masks_from_data"]], "get_reduced_masks_from_data() (neural_compressor.compression.pruner.patterns.patternninm method)": [[160, "neural_compressor.compression.pruner.patterns.PatternNInM.get_reduced_masks_from_data"]], "get_reduced_masks_from_data() (neural_compressor.compression.pruner.patterns.patternnxm method)": [[160, "neural_compressor.compression.pruner.patterns.PatternNxM.get_reduced_masks_from_data"]], "get_single_mask_per_target_ratio() (neural_compressor.compression.pruner.patterns.basepattern method)": [[160, "neural_compressor.compression.pruner.patterns.BasePattern.get_single_mask_per_target_ratio"]], "get_sparsity_ratio() (neural_compressor.compression.pruner.patterns.basepattern method)": [[160, "neural_compressor.compression.pruner.patterns.BasePattern.get_sparsity_ratio"]], "get_sparsity_ratio() (neural_compressor.compression.pruner.patterns.patternninm method)": [[160, "neural_compressor.compression.pruner.patterns.PatternNInM.get_sparsity_ratio"]], "get_sparsity_ratio() (neural_compressor.compression.pruner.patterns.patternnxm method)": [[160, "neural_compressor.compression.pruner.patterns.PatternNxM.get_sparsity_ratio"]], "get_sparsity_ratio_each_layer() (neural_compressor.compression.pruner.patterns.basepattern method)": [[160, "neural_compressor.compression.pruner.patterns.BasePattern.get_sparsity_ratio_each_layer"]], "get_sparsity_ratio_progressive() (neural_compressor.compression.pruner.patterns.patternnxm method)": [[160, "neural_compressor.compression.pruner.patterns.PatternNxM.get_sparsity_ratio_progressive"]], "invalid_layers (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[160, "neural_compressor.compression.pruner.patterns.BasePattern.invalid_layers"]], "is_global (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[160, "neural_compressor.compression.pruner.patterns.BasePattern.is_global"]], "keep_mask_layers (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[160, "neural_compressor.compression.pruner.patterns.BasePattern.keep_mask_layers"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[160, "neural_compressor.compression.pruner.patterns.BasePattern.max_sparsity_ratio_per_op"]], "min_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[160, "neural_compressor.compression.pruner.patterns.BasePattern.min_sparsity_ratio_per_op"]], "modules (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[160, "neural_compressor.compression.pruner.patterns.BasePattern.modules"]], "neural_compressor.compression.pruner.patterns": [[160, "module-neural_compressor.compression.pruner.patterns"]], "pattern (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[160, "neural_compressor.compression.pruner.patterns.BasePattern.pattern"]], "reduce_scores() (neural_compressor.compression.pruner.patterns.patternninm method)": [[160, "neural_compressor.compression.pruner.patterns.PatternNInM.reduce_scores"]], "reduce_scores() (neural_compressor.compression.pruner.patterns.patternnxm method)": [[160, "neural_compressor.compression.pruner.patterns.PatternNxM.reduce_scores"]], "reduce_tensor() (neural_compressor.compression.pruner.patterns.basepattern method)": [[160, "neural_compressor.compression.pruner.patterns.BasePattern.reduce_tensor"]], "register_pattern() (in module neural_compressor.compression.pruner.patterns)": [[160, "neural_compressor.compression.pruner.patterns.register_pattern"]], "reshape_orig_to_pattern() (neural_compressor.compression.pruner.patterns.patternninm method)": [[160, "neural_compressor.compression.pruner.patterns.PatternNInM.reshape_orig_to_pattern"]], "reshape_orig_to_pattern() (neural_compressor.compression.pruner.patterns.patternnxm method)": [[160, "neural_compressor.compression.pruner.patterns.PatternNxM.reshape_orig_to_pattern"]], "reshape_reduced_to_orig() (neural_compressor.compression.pruner.patterns.patternninm method)": [[160, "neural_compressor.compression.pruner.patterns.PatternNInM.reshape_reduced_to_orig"]], "reshape_reduced_to_orig() (neural_compressor.compression.pruner.patterns.patternnxm method)": [[160, "neural_compressor.compression.pruner.patterns.PatternNxM.reshape_reduced_to_orig"]], "target_sparsity (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[160, "neural_compressor.compression.pruner.patterns.BasePattern.target_sparsity"]], "update_new_added_masks() (neural_compressor.compression.pruner.patterns.patternnxm method)": [[160, "neural_compressor.compression.pruner.patterns.PatternNxM.update_new_added_masks"]], "update_progressive_masks() (neural_compressor.compression.pruner.patterns.patternnxm method)": [[160, "neural_compressor.compression.pruner.patterns.PatternNxM.update_progressive_masks"]], "update_progressive_masks_global() (neural_compressor.compression.pruner.patterns.patternnxm method)": [[160, "neural_compressor.compression.pruner.patterns.PatternNxM.update_progressive_masks_global"]], "update_progressive_masks_linear() (neural_compressor.compression.pruner.patterns.patternnxm method)": [[160, "neural_compressor.compression.pruner.patterns.PatternNxM.update_progressive_masks_linear"]], "update_progressive_masks_local() (neural_compressor.compression.pruner.patterns.patternnxm method)": [[160, "neural_compressor.compression.pruner.patterns.PatternNxM.update_progressive_masks_local"]], "update_progressive_masks_scores() (neural_compressor.compression.pruner.patterns.patternnxm method)": [[160, "neural_compressor.compression.pruner.patterns.PatternNxM.update_progressive_masks_scores"]], "update_residual_cnt() (neural_compressor.compression.pruner.patterns.basepattern method)": [[160, "neural_compressor.compression.pruner.patterns.BasePattern.update_residual_cnt"]], "basepruner (class in neural_compressor.compression.pruner.pruners)": [[161, "neural_compressor.compression.pruner.pruners.BasePruner"]], "basicpruner (class in neural_compressor.compression.pruner.pruners)": [[161, "neural_compressor.compression.pruner.pruners.BasicPruner"]], "patternlockpruner (class in neural_compressor.compression.pruner.pruners)": [[161, "neural_compressor.compression.pruner.pruners.PatternLockPruner"]], "progressivepruner (class in neural_compressor.compression.pruner.pruners)": [[161, "neural_compressor.compression.pruner.pruners.ProgressivePruner"]], "check_is_pruned_progressive_step() (neural_compressor.compression.pruner.pruners.progressivepruner method)": [[161, "neural_compressor.compression.pruner.pruners.ProgressivePruner.check_is_pruned_progressive_step"]], "check_is_pruned_step() (neural_compressor.compression.pruner.pruners.basepruner method)": [[161, "neural_compressor.compression.pruner.pruners.BasePruner.check_is_pruned_step"]], "check_progressive_validity() (neural_compressor.compression.pruner.pruners.progressivepruner method)": [[161, "neural_compressor.compression.pruner.pruners.ProgressivePruner.check_progressive_validity"]], "config (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[161, "neural_compressor.compression.pruner.pruners.BasePruner.config"]], "criterion (neural_compressor.compression.pruner.pruners.basicpruner attribute)": [[161, "neural_compressor.compression.pruner.pruners.BasicPruner.criterion"]], "current_sparsity_ratio (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[161, "neural_compressor.compression.pruner.pruners.BasePruner.current_sparsity_ratio"]], "end_step (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[161, "neural_compressor.compression.pruner.pruners.BasePruner.end_step"]], "get_pruner() (in module neural_compressor.compression.pruner.pruners)": [[161, "neural_compressor.compression.pruner.pruners.get_pruner"]], "global_step (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[161, "neural_compressor.compression.pruner.pruners.BasePruner.global_step"]], "mask_weights() (neural_compressor.compression.pruner.pruners.basepruner method)": [[161, "neural_compressor.compression.pruner.pruners.BasePruner.mask_weights"]], "mask_weights_general() (neural_compressor.compression.pruner.pruners.basepruner method)": [[161, "neural_compressor.compression.pruner.pruners.BasePruner.mask_weights_general"]], "masks (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[161, "neural_compressor.compression.pruner.pruners.BasePruner.masks"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[161, "neural_compressor.compression.pruner.pruners.BasePruner.max_sparsity_ratio_per_op"]], "modules (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[161, "neural_compressor.compression.pruner.pruners.BasePruner.modules"]], "neural_compressor.compression.pruner.pruners": [[161, "module-neural_compressor.compression.pruner.pruners"]], "on_after_eval() (neural_compressor.compression.pruner.pruners.basepruner method)": [[161, "neural_compressor.compression.pruner.pruners.BasePruner.on_after_eval"]], "on_after_optimizer_step() (neural_compressor.compression.pruner.pruners.basepruner method)": [[161, "neural_compressor.compression.pruner.pruners.BasePruner.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.compression.pruner.pruners.basicpruner method)": [[161, "neural_compressor.compression.pruner.pruners.BasicPruner.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.compression.pruner.pruners.patternlockpruner method)": [[161, "neural_compressor.compression.pruner.pruners.PatternLockPruner.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.compression.pruner.pruners.progressivepruner method)": [[161, "neural_compressor.compression.pruner.pruners.ProgressivePruner.on_after_optimizer_step"]], "on_before_eval() (neural_compressor.compression.pruner.pruners.basepruner method)": [[161, "neural_compressor.compression.pruner.pruners.BasePruner.on_before_eval"]], "on_before_optimizer_step() (neural_compressor.compression.pruner.pruners.basepruner method)": [[161, "neural_compressor.compression.pruner.pruners.BasePruner.on_before_optimizer_step"]], "on_before_optimizer_step() (neural_compressor.compression.pruner.pruners.basicpruner method)": [[161, "neural_compressor.compression.pruner.pruners.BasicPruner.on_before_optimizer_step"]], "on_before_optimizer_step() (neural_compressor.compression.pruner.pruners.progressivepruner method)": [[161, "neural_compressor.compression.pruner.pruners.ProgressivePruner.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.compression.pruner.pruners.basepruner method)": [[161, "neural_compressor.compression.pruner.pruners.BasePruner.on_epoch_begin"]], "on_epoch_end() (neural_compressor.compression.pruner.pruners.basepruner method)": [[161, "neural_compressor.compression.pruner.pruners.BasePruner.on_epoch_end"]], "on_step_begin() (neural_compressor.compression.pruner.pruners.basepruner method)": [[161, "neural_compressor.compression.pruner.pruners.BasePruner.on_step_begin"]], "on_step_begin() (neural_compressor.compression.pruner.pruners.progressivepruner method)": [[161, "neural_compressor.compression.pruner.pruners.ProgressivePruner.on_step_begin"]], "on_step_end() (neural_compressor.compression.pruner.pruners.basepruner method)": [[161, "neural_compressor.compression.pruner.pruners.BasePruner.on_step_end"]], "on_train_begin() (neural_compressor.compression.pruner.pruners.basepruner method)": [[161, "neural_compressor.compression.pruner.pruners.BasePruner.on_train_begin"]], "on_train_end() (neural_compressor.compression.pruner.pruners.basepruner method)": [[161, "neural_compressor.compression.pruner.pruners.BasePruner.on_train_end"]], "parse_valid_pruner_types() (in module neural_compressor.compression.pruner.pruners)": [[161, "neural_compressor.compression.pruner.pruners.parse_valid_pruner_types"]], "pattern (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[161, "neural_compressor.compression.pruner.pruners.BasePruner.pattern"]], "pattern (neural_compressor.compression.pruner.pruners.basicpruner attribute)": [[161, "neural_compressor.compression.pruner.pruners.BasicPruner.pattern"]], "print_progressive_sparsity() (neural_compressor.compression.pruner.pruners.progressivepruner method)": [[161, "neural_compressor.compression.pruner.pruners.ProgressivePruner.print_progressive_sparsity"]], "pruning_frequency (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[161, "neural_compressor.compression.pruner.pruners.BasePruner.pruning_frequency"]], "reg (neural_compressor.compression.pruner.pruners.basicpruner attribute)": [[161, "neural_compressor.compression.pruner.pruners.BasicPruner.reg"]], "register_pruner() (in module neural_compressor.compression.pruner.pruners)": [[161, "neural_compressor.compression.pruner.pruners.register_pruner"]], "scheduler (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[161, "neural_compressor.compression.pruner.pruners.BasePruner.scheduler"]], "scheduler (neural_compressor.compression.pruner.pruners.basicpruner attribute)": [[161, "neural_compressor.compression.pruner.pruners.BasicPruner.scheduler"]], "scores (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[161, "neural_compressor.compression.pruner.pruners.BasePruner.scores"]], "set_global_step() (neural_compressor.compression.pruner.pruners.basicpruner method)": [[161, "neural_compressor.compression.pruner.pruners.BasicPruner.set_global_step"]], "start_step (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[161, "neural_compressor.compression.pruner.pruners.BasePruner.start_step"]], "target_sparsity_ratio (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[161, "neural_compressor.compression.pruner.pruners.BasePruner.target_sparsity_ratio"]], "update_masks() (neural_compressor.compression.pruner.pruners.basepruner method)": [[161, "neural_compressor.compression.pruner.pruners.BasePruner.update_masks"]], "update_masks() (neural_compressor.compression.pruner.pruners.basicpruner method)": [[161, "neural_compressor.compression.pruner.pruners.BasicPruner.update_masks"]], "update_masks() (neural_compressor.compression.pruner.pruners.patternlockpruner method)": [[161, "neural_compressor.compression.pruner.pruners.PatternLockPruner.update_masks"]], "update_masks_progressive() (neural_compressor.compression.pruner.pruners.progressivepruner method)": [[161, "neural_compressor.compression.pruner.pruners.ProgressivePruner.update_masks_progressive"]], "basereg (class in neural_compressor.compression.pruner.regs)": [[162, "neural_compressor.compression.pruner.regs.BaseReg"]], "grouplasso (class in neural_compressor.compression.pruner.regs)": [[162, "neural_compressor.compression.pruner.regs.GroupLasso"]], "alpha (neural_compressor.compression.pruner.regs.grouplasso attribute)": [[162, "neural_compressor.compression.pruner.regs.GroupLasso.alpha"]], "get_reg() (in module neural_compressor.compression.pruner.regs)": [[162, "neural_compressor.compression.pruner.regs.get_reg"]], "get_reg_type() (in module neural_compressor.compression.pruner.regs)": [[162, "neural_compressor.compression.pruner.regs.get_reg_type"]], "neural_compressor.compression.pruner.regs": [[162, "module-neural_compressor.compression.pruner.regs"]], "on_after_optimizer_step() (neural_compressor.compression.pruner.regs.basereg method)": [[162, "neural_compressor.compression.pruner.regs.BaseReg.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.compression.pruner.regs.grouplasso method)": [[162, "neural_compressor.compression.pruner.regs.GroupLasso.on_after_optimizer_step"]], "on_before_optimizer_step() (neural_compressor.compression.pruner.regs.basereg method)": [[162, "neural_compressor.compression.pruner.regs.BaseReg.on_before_optimizer_step"]], "on_before_optimizer_step() (neural_compressor.compression.pruner.regs.grouplasso method)": [[162, "neural_compressor.compression.pruner.regs.GroupLasso.on_before_optimizer_step"]], "reg_terms (neural_compressor.compression.pruner.regs.grouplasso attribute)": [[162, "neural_compressor.compression.pruner.regs.GroupLasso.reg_terms"]], "register_reg() (in module neural_compressor.compression.pruner.regs)": [[162, "neural_compressor.compression.pruner.regs.register_reg"]], "iterativescheduler (class in neural_compressor.compression.pruner.schedulers)": [[163, "neural_compressor.compression.pruner.schedulers.IterativeScheduler"]], "oneshotscheduler (class in neural_compressor.compression.pruner.schedulers)": [[163, "neural_compressor.compression.pruner.schedulers.OneshotScheduler"]], "pruningscheduler (class in neural_compressor.compression.pruner.schedulers)": [[163, "neural_compressor.compression.pruner.schedulers.PruningScheduler"]], "config (neural_compressor.compression.pruner.schedulers.pruningscheduler attribute)": [[163, "neural_compressor.compression.pruner.schedulers.PruningScheduler.config"]], "get_scheduler() (in module neural_compressor.compression.pruner.schedulers)": [[163, "neural_compressor.compression.pruner.schedulers.get_scheduler"]], "neural_compressor.compression.pruner.schedulers": [[163, "module-neural_compressor.compression.pruner.schedulers"]], "register_scheduler() (in module neural_compressor.compression.pruner.schedulers)": [[163, "neural_compressor.compression.pruner.schedulers.register_scheduler"]], "update_sparsity_ratio() (neural_compressor.compression.pruner.schedulers.iterativescheduler method)": [[163, "neural_compressor.compression.pruner.schedulers.IterativeScheduler.update_sparsity_ratio"]], "update_sparsity_ratio() (neural_compressor.compression.pruner.schedulers.oneshotscheduler method)": [[163, "neural_compressor.compression.pruner.schedulers.OneshotScheduler.update_sparsity_ratio"]], "update_sparsity_ratio() (neural_compressor.compression.pruner.schedulers.pruningscheduler method)": [[163, "neural_compressor.compression.pruner.schedulers.PruningScheduler.update_sparsity_ratio"]], "check_config() (in module neural_compressor.compression.pruner.utils)": [[164, "neural_compressor.compression.pruner.utils.check_config"]], "check_key_validity() (in module neural_compressor.compression.pruner.utils)": [[164, "neural_compressor.compression.pruner.utils.check_key_validity"]], "generate_pruner_config() (in module neural_compressor.compression.pruner.utils)": [[164, "neural_compressor.compression.pruner.utils.generate_pruner_config"]], "get_sparsity_ratio() (in module neural_compressor.compression.pruner.utils)": [[164, "neural_compressor.compression.pruner.utils.get_sparsity_ratio"]], "neural_compressor.compression.pruner.utils": [[164, "module-neural_compressor.compression.pruner.utils"]], "parse_to_prune() (in module neural_compressor.compression.pruner.utils)": [[164, "neural_compressor.compression.pruner.utils.parse_to_prune"]], "process_and_check_config() (in module neural_compressor.compression.pruner.utils)": [[164, "neural_compressor.compression.pruner.utils.process_and_check_config"]], "process_config() (in module neural_compressor.compression.pruner.utils)": [[164, "neural_compressor.compression.pruner.utils.process_config"]], "process_weight_config() (in module neural_compressor.compression.pruner.utils)": [[164, "neural_compressor.compression.pruner.utils.process_weight_config"]], "process_yaml_config() (in module neural_compressor.compression.pruner.utils)": [[164, "neural_compressor.compression.pruner.utils.process_yaml_config"]], "reset_none_to_default() (in module neural_compressor.compression.pruner.utils)": [[164, "neural_compressor.compression.pruner.utils.reset_none_to_default"]], "update_params() (in module neural_compressor.compression.pruner.utils)": [[164, "neural_compressor.compression.pruner.utils.update_params"]], "benchmark_conf (class in neural_compressor.conf.config)": [[165, "neural_compressor.conf.config.Benchmark_Conf"]], "conf (class in neural_compressor.conf.config)": [[165, "neural_compressor.conf.config.Conf"]], "distillation_conf (class in neural_compressor.conf.config)": [[165, "neural_compressor.conf.config.Distillation_Conf"]], "graph_optimization_conf (class in neural_compressor.conf.config)": [[165, "neural_compressor.conf.config.Graph_Optimization_Conf"]], "mixedprecision_conf (class in neural_compressor.conf.config)": [[165, "neural_compressor.conf.config.MixedPrecision_Conf"]], "nasconfig (class in neural_compressor.conf.config)": [[165, "neural_compressor.conf.config.NASConfig"]], "prunerv2 (class in neural_compressor.conf.config)": [[165, "neural_compressor.conf.config.PrunerV2"]], "pruning_conf (class in neural_compressor.conf.config)": [[165, "neural_compressor.conf.config.Pruning_Conf"]], "quantization_conf (class in neural_compressor.conf.config)": [[165, "neural_compressor.conf.config.Quantization_Conf"]], "neural_compressor.conf.config": [[165, "module-neural_compressor.conf.config"]], "dotdict (class in neural_compressor.conf.dotdict)": [[166, "neural_compressor.conf.dotdict.DotDict"]], "deep_get() (in module neural_compressor.conf.dotdict)": [[166, "neural_compressor.conf.dotdict.deep_get"]], "deep_set() (in module neural_compressor.conf.dotdict)": [[166, "neural_compressor.conf.dotdict.deep_set"]], "neural_compressor.conf.dotdict": [[166, "module-neural_compressor.conf.dotdict"]], "neural_compressor.conf": [[167, "module-neural_compressor.conf"]], "neural_compressor.conf.pythonic_config": [[168, "module-neural_compressor.conf.pythonic_config"]], "accuracycriterion (class in neural_compressor.config)": [[169, "neural_compressor.config.AccuracyCriterion"]], "benchmarkconfig (class in neural_compressor.config)": [[169, "neural_compressor.config.BenchmarkConfig"]], "distillationconfig (class in neural_compressor.config)": [[169, "neural_compressor.config.DistillationConfig"]], "exportconfig (class in neural_compressor.config)": [[169, "neural_compressor.config.ExportConfig"]], "intermediatelayersknowledgedistillationlossconfig (class in neural_compressor.config)": [[169, "neural_compressor.config.IntermediateLayersKnowledgeDistillationLossConfig"]], "knowledgedistillationlossconfig (class in neural_compressor.config)": [[169, "neural_compressor.config.KnowledgeDistillationLossConfig"]], "mixedprecisionconfig (class in neural_compressor.config)": [[169, "neural_compressor.config.MixedPrecisionConfig"]], "onnxqlinear2qdqconfig (class in neural_compressor.config)": [[169, "neural_compressor.config.ONNXQlinear2QDQConfig"]], "options (class in neural_compressor.config)": [[169, "neural_compressor.config.Options"]], "posttrainingquantconfig (class in neural_compressor.config)": [[169, "neural_compressor.config.PostTrainingQuantConfig"]], "quantizationawaretrainingconfig (class in neural_compressor.config)": [[169, "neural_compressor.config.QuantizationAwareTrainingConfig"]], "selfknowledgedistillationlossconfig (class in neural_compressor.config)": [[169, "neural_compressor.config.SelfKnowledgeDistillationLossConfig"]], "tf2onnxconfig (class in neural_compressor.config)": [[169, "neural_compressor.config.TF2ONNXConfig"]], "torch2onnxconfig (class in neural_compressor.config)": [[169, "neural_compressor.config.Torch2ONNXConfig"]], "tuningcriterion (class in neural_compressor.config)": [[169, "neural_compressor.config.TuningCriterion"]], "weightpruningconfig (class in neural_compressor.config)": [[169, "neural_compressor.config.WeightPruningConfig"]], "absolute (neural_compressor.config.accuracycriterion property)": [[169, "neural_compressor.config.AccuracyCriterion.absolute"]], "approach (neural_compressor.config.posttrainingquantconfig property)": [[169, "neural_compressor.config.PostTrainingQuantConfig.approach"]], "approach (neural_compressor.config.quantizationawaretrainingconfig property)": [[169, "neural_compressor.config.QuantizationAwareTrainingConfig.approach"]], "backend (neural_compressor.config.benchmarkconfig property)": [[169, "neural_compressor.config.BenchmarkConfig.backend"]], "check_value() (in module neural_compressor.config)": [[169, "neural_compressor.config.check_value"]], "cores_per_instance (neural_compressor.config.benchmarkconfig property)": [[169, "neural_compressor.config.BenchmarkConfig.cores_per_instance"]], "criterion (neural_compressor.config.accuracycriterion property)": [[169, "neural_compressor.config.AccuracyCriterion.criterion"]], "criterion (neural_compressor.config.distillationconfig property)": [[169, "neural_compressor.config.DistillationConfig.criterion"]], "dtype (neural_compressor.config.exportconfig property)": [[169, "neural_compressor.config.ExportConfig.dtype"]], "dynamic_axes (neural_compressor.config.exportconfig property)": [[169, "neural_compressor.config.ExportConfig.dynamic_axes"]], "example_inputs (neural_compressor.config.exportconfig property)": [[169, "neural_compressor.config.ExportConfig.example_inputs"]], "higher_is_better (neural_compressor.config.accuracycriterion property)": [[169, "neural_compressor.config.AccuracyCriterion.higher_is_better"]], "input_names (neural_compressor.config.exportconfig property)": [[169, "neural_compressor.config.ExportConfig.input_names"]], "inputs (neural_compressor.config.benchmarkconfig property)": [[169, "neural_compressor.config.BenchmarkConfig.inputs"]], "inter_num_of_threads (neural_compressor.config.benchmarkconfig property)": [[169, "neural_compressor.config.BenchmarkConfig.inter_num_of_threads"]], "intra_num_of_threads (neural_compressor.config.benchmarkconfig property)": [[169, "neural_compressor.config.BenchmarkConfig.intra_num_of_threads"]], "iteration (neural_compressor.config.benchmarkconfig property)": [[169, "neural_compressor.config.BenchmarkConfig.iteration"]], "max_trials (neural_compressor.config.tuningcriterion property)": [[169, "neural_compressor.config.TuningCriterion.max_trials"]], "neural_compressor.config": [[169, "module-neural_compressor.config"]], "num_of_instance (neural_compressor.config.benchmarkconfig property)": [[169, "neural_compressor.config.BenchmarkConfig.num_of_instance"]], "objective (neural_compressor.config.tuningcriterion property)": [[169, "neural_compressor.config.TuningCriterion.objective"]], "opset_version (neural_compressor.config.exportconfig property)": [[169, "neural_compressor.config.ExportConfig.opset_version"]], "optimizer (neural_compressor.config.distillationconfig property)": [[169, "neural_compressor.config.DistillationConfig.optimizer"]], "output_names (neural_compressor.config.exportconfig property)": [[169, "neural_compressor.config.ExportConfig.output_names"]], "outputs (neural_compressor.config.benchmarkconfig property)": [[169, "neural_compressor.config.BenchmarkConfig.outputs"]], "quant_format (neural_compressor.config.exportconfig property)": [[169, "neural_compressor.config.ExportConfig.quant_format"]], "random_seed (neural_compressor.config.options property)": [[169, "neural_compressor.config.Options.random_seed"]], "relative (neural_compressor.config.accuracycriterion property)": [[169, "neural_compressor.config.AccuracyCriterion.relative"]], "resume_from (neural_compressor.config.options property)": [[169, "neural_compressor.config.Options.resume_from"]], "strategy (neural_compressor.config.tuningcriterion property)": [[169, "neural_compressor.config.TuningCriterion.strategy"]], "strategy_kwargs (neural_compressor.config.tuningcriterion property)": [[169, "neural_compressor.config.TuningCriterion.strategy_kwargs"]], "teacher_model (neural_compressor.config.distillationconfig property)": [[169, "neural_compressor.config.DistillationConfig.teacher_model"]], "tensorboard (neural_compressor.config.options property)": [[169, "neural_compressor.config.Options.tensorboard"]], "timeout (neural_compressor.config.tuningcriterion property)": [[169, "neural_compressor.config.TuningCriterion.timeout"]], "tolerable_loss (neural_compressor.config.accuracycriterion property)": [[169, "neural_compressor.config.AccuracyCriterion.tolerable_loss"]], "tuning_criterion (neural_compressor.config.posttrainingquantconfig property)": [[169, "neural_compressor.config.PostTrainingQuantConfig.tuning_criterion"]], "warmup (neural_compressor.config.benchmarkconfig property)": [[169, "neural_compressor.config.BenchmarkConfig.warmup"]], "weight_compression (neural_compressor.config.weightpruningconfig property)": [[169, "neural_compressor.config.WeightPruningConfig.weight_compression"]], "workspace (neural_compressor.config.options property)": [[169, "neural_compressor.config.Options.workspace"]], "neural_compressor.contrib": [[170, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[171, "module-neural_compressor.contrib.strategy"]], "sigopttunestrategy (class in neural_compressor.contrib.strategy.sigopt)": [[172, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy"]], "create_exp() (neural_compressor.contrib.strategy.sigopt.sigopttunestrategy method)": [[172, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy.create_exp"]], "get_acc_target() (neural_compressor.contrib.strategy.sigopt.sigopttunestrategy method)": [[172, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy.get_acc_target"]], "neural_compressor.contrib.strategy.sigopt": [[172, "module-neural_compressor.contrib.strategy.sigopt"]], "next_tune_cfg() (neural_compressor.contrib.strategy.sigopt.sigopttunestrategy method)": [[172, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy.next_tune_cfg"]], "params_to_tune_configs() (neural_compressor.contrib.strategy.sigopt.sigopttunestrategy method)": [[172, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy.params_to_tune_configs"]], "traverse() (neural_compressor.contrib.strategy.sigopt.sigopttunestrategy method)": [[172, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy.traverse"]], "tpetunestrategy (class in neural_compressor.contrib.strategy.tpe)": [[173, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy"]], "add_loss_to_tuned_history_and_find_best() (neural_compressor.contrib.strategy.tpe.tpetunestrategy method)": [[173, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy.add_loss_to_tuned_history_and_find_best"]], "calculate_loss() (neural_compressor.contrib.strategy.tpe.tpetunestrategy method)": [[173, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy.calculate_loss"]], "neural_compressor.contrib.strategy.tpe": [[173, "module-neural_compressor.contrib.strategy.tpe"]], "object_evaluation() (neural_compressor.contrib.strategy.tpe.tpetunestrategy method)": [[173, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy.object_evaluation"]], "stop() (neural_compressor.contrib.strategy.tpe.tpetunestrategy method)": [[173, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy.stop"]], "traverse() (neural_compressor.contrib.strategy.tpe.tpetunestrategy method)": [[173, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy.traverse"]], "basedataloader (class in neural_compressor.data.dataloaders.base_dataloader)": [[174, "neural_compressor.data.dataloaders.base_dataloader.BaseDataLoader"]], "batch() (neural_compressor.data.dataloaders.base_dataloader.basedataloader method)": [[174, "neural_compressor.data.dataloaders.base_dataloader.BaseDataLoader.batch"]], "batch_size (neural_compressor.data.dataloaders.base_dataloader.basedataloader property)": [[174, "neural_compressor.data.dataloaders.base_dataloader.BaseDataLoader.batch_size"]], "neural_compressor.data.dataloaders.base_dataloader": [[174, "module-neural_compressor.data.dataloaders.base_dataloader"]], "dataloader (class in neural_compressor.data.dataloaders.dataloader)": [[175, "neural_compressor.data.dataloaders.dataloader.DataLoader"]], "neural_compressor.data.dataloaders.dataloader": [[175, "module-neural_compressor.data.dataloaders.dataloader"]], "defaultdataloader (class in neural_compressor.data.dataloaders.default_dataloader)": [[176, "neural_compressor.data.dataloaders.default_dataloader.DefaultDataLoader"]], "batch() (neural_compressor.data.dataloaders.default_dataloader.defaultdataloader method)": [[176, "neural_compressor.data.dataloaders.default_dataloader.DefaultDataLoader.batch"]], "dataloader (neural_compressor.data.dataloaders.default_dataloader.defaultdataloader property)": [[176, "neural_compressor.data.dataloaders.default_dataloader.DefaultDataLoader.dataloader"]], "default_collate() (in module neural_compressor.data.dataloaders.default_dataloader)": [[176, "neural_compressor.data.dataloaders.default_dataloader.default_collate"]], "neural_compressor.data.dataloaders.default_dataloader": [[176, "module-neural_compressor.data.dataloaders.default_dataloader"]], "fetcher (class in neural_compressor.data.dataloaders.fetcher)": [[177, "neural_compressor.data.dataloaders.fetcher.Fetcher"]], "indexfetcher (class in neural_compressor.data.dataloaders.fetcher)": [[177, "neural_compressor.data.dataloaders.fetcher.IndexFetcher"]], "iterablefetcher (class in neural_compressor.data.dataloaders.fetcher)": [[177, "neural_compressor.data.dataloaders.fetcher.IterableFetcher"]], "neural_compressor.data.dataloaders.fetcher": [[177, "module-neural_compressor.data.dataloaders.fetcher"]], "dataloader (class in neural_compressor.data.dataloaders)": [[178, "neural_compressor.data.dataloaders.DataLoader"]], "neural_compressor.data.dataloaders": [[178, "module-neural_compressor.data.dataloaders"]], "mxnetdataloader (class in neural_compressor.data.dataloaders.mxnet_dataloader)": [[179, "neural_compressor.data.dataloaders.mxnet_dataloader.MXNetDataLoader"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[179, "module-neural_compressor.data.dataloaders.mxnet_dataloader"]], "onnxrtbertdataloader (class in neural_compressor.data.dataloaders.onnxrt_dataloader)": [[180, "neural_compressor.data.dataloaders.onnxrt_dataloader.ONNXRTBertDataLoader"]], "onnxrtdataloader (class in neural_compressor.data.dataloaders.onnxrt_dataloader)": [[180, "neural_compressor.data.dataloaders.onnxrt_dataloader.ONNXRTDataLoader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[180, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"]], "pytorchdataloader (class in neural_compressor.data.dataloaders.pytorch_dataloader)": [[181, "neural_compressor.data.dataloaders.pytorch_dataloader.PyTorchDataLoader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[181, "module-neural_compressor.data.dataloaders.pytorch_dataloader"]], "batchsampler (class in neural_compressor.data.dataloaders.sampler)": [[182, "neural_compressor.data.dataloaders.sampler.BatchSampler"]], "iterablesampler (class in neural_compressor.data.dataloaders.sampler)": [[182, "neural_compressor.data.dataloaders.sampler.IterableSampler"]], "sampler (class in neural_compressor.data.dataloaders.sampler)": [[182, "neural_compressor.data.dataloaders.sampler.Sampler"]], "sequentialsampler (class in neural_compressor.data.dataloaders.sampler)": [[182, "neural_compressor.data.dataloaders.sampler.SequentialSampler"]], "neural_compressor.data.dataloaders.sampler": [[182, "module-neural_compressor.data.dataloaders.sampler"]], "tfdatadataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[183, "neural_compressor.data.dataloaders.tensorflow_dataloader.TFDataDataLoader"]], "tensorflowbertdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[183, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowBertDataLoader"]], "tensorflowdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[183, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowDataLoader"]], "tensorflowmodelzoobertdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[183, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowModelZooBertDataLoader"]], "batch() (neural_compressor.data.dataloaders.tensorflow_dataloader.tfdatadataloader method)": [[183, "neural_compressor.data.dataloaders.tensorflow_dataloader.TFDataDataLoader.batch"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[183, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"]], "inputfeatures (class in neural_compressor.data.datasets.bert_dataset)": [[184, "neural_compressor.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[184, "neural_compressor.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.data.datasets.bert_dataset)": [[184, "neural_compressor.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[184, "neural_compressor.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[184, "neural_compressor.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[184, "neural_compressor.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.data.datasets.bert_dataset)": [[184, "neural_compressor.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.data.datasets.bert_dataset)": [[184, "neural_compressor.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.data.datasets.bert_dataset": [[184, "module-neural_compressor.data.datasets.bert_dataset"]], "to_json_string() (neural_compressor.data.datasets.bert_dataset.inputfeatures method)": [[184, "neural_compressor.data.datasets.bert_dataset.InputFeatures.to_json_string"]], "coconpy (class in neural_compressor.data.datasets.coco_dataset)": [[185, "neural_compressor.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.data.datasets.coco_dataset)": [[185, "neural_compressor.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.data.datasets.coco_dataset)": [[185, "neural_compressor.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.data.datasets.coco_dataset)": [[185, "neural_compressor.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.data.datasets.coco_dataset": [[185, "module-neural_compressor.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.data.datasets.dataset)": [[186, "neural_compressor.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.data.datasets.dataset)": [[186, "neural_compressor.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.data.datasets.dataset)": [[186, "neural_compressor.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.data.datasets.dataset)": [[186, "neural_compressor.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.data.datasets.dataset)": [[186, "neural_compressor.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.data.datasets.dataset)": [[186, "neural_compressor.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.data.datasets.dataset)": [[186, "neural_compressor.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.data.datasets.dataset)": [[186, "neural_compressor.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.data.datasets.dataset)": [[186, "neural_compressor.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.data.datasets.dataset)": [[186, "neural_compressor.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.data.datasets.dataset)": [[186, "neural_compressor.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.data.datasets.dataset)": [[186, "neural_compressor.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.data.datasets.dataset)": [[186, "neural_compressor.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.data.datasets.dataset)": [[186, "neural_compressor.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.data.datasets.dataset)": [[186, "neural_compressor.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.data.datasets.dataset)": [[186, "neural_compressor.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.data.datasets.dataset)": [[186, "neural_compressor.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.data.datasets.dataset)": [[186, "neural_compressor.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.data.datasets.dataset)": [[186, "neural_compressor.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.data.datasets.dataset)": [[186, "neural_compressor.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.data.datasets.dataset)": [[186, "neural_compressor.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.data.datasets.dataset)": [[186, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.datasets.dataset)": [[186, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflow (class in neural_compressor.data.datasets.dataset)": [[186, "neural_compressor.data.datasets.dataset.Tensorflow"]], "tensorflowcifar10 (class in neural_compressor.data.datasets.dataset)": [[186, "neural_compressor.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.data.datasets.dataset)": [[186, "neural_compressor.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.data.datasets.dataset)": [[186, "neural_compressor.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.data.datasets.dataset)": [[186, "neural_compressor.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagerecord (class in neural_compressor.data.datasets.dataset)": [[186, "neural_compressor.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.data.datasets.dataset)": [[186, "neural_compressor.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.data.datasets.dataset)": [[186, "neural_compressor.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.data.datasets.dataset)": [[186, "neural_compressor.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.data.datasets.dataset)": [[186, "neural_compressor.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.data.datasets.dataset)": [[186, "neural_compressor.data.datasets.dataset.check_integrity"]], "class_to_idx (neural_compressor.data.datasets.dataset.mnist property)": [[186, "neural_compressor.data.datasets.dataset.MNIST.class_to_idx"]], "dataset_registry() (in module neural_compressor.data.datasets.dataset)": [[186, "neural_compressor.data.datasets.dataset.dataset_registry"]], "download() (neural_compressor.data.datasets.dataset.cifar10 method)": [[186, "neural_compressor.data.datasets.dataset.CIFAR10.download"]], "download() (neural_compressor.data.datasets.dataset.mnist method)": [[186, "neural_compressor.data.datasets.dataset.MNIST.download"]], "download_url() (in module neural_compressor.data.datasets.dataset)": [[186, "neural_compressor.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.data.datasets.dataset)": [[186, "neural_compressor.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.data.datasets.dataset)": [[186, "neural_compressor.data.datasets.dataset.gen_bar_updater"]], "load_meta() (neural_compressor.data.datasets.dataset.cifar10 method)": [[186, "neural_compressor.data.datasets.dataset.CIFAR10.load_meta"]], "neural_compressor.data.datasets.dataset": [[186, "module-neural_compressor.data.datasets.dataset"]], "read_data() (neural_compressor.data.datasets.dataset.fashionmnist method)": [[186, "neural_compressor.data.datasets.dataset.FashionMNIST.read_data"]], "read_data() (neural_compressor.data.datasets.dataset.mnist method)": [[186, "neural_compressor.data.datasets.dataset.MNIST.read_data"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset)": [[187, "neural_compressor.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset": [[187, "module-neural_compressor.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[188, "neural_compressor.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[188, "neural_compressor.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[188, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[189, "neural_compressor.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[189, "neural_compressor.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[189, "neural_compressor.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[189, "neural_compressor.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[189, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[189, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.data.datasets.imagenet_dataset": [[189, "module-neural_compressor.data.datasets.imagenet_dataset"]], "cocorecorddataset (class in neural_compressor.data.datasets)": [[190, "neural_compressor.data.datasets.COCORecordDataset"]], "dataset (class in neural_compressor.data.datasets)": [[190, "neural_compressor.data.datasets.Dataset"]], "datasets (class in neural_compressor.data.datasets)": [[190, "neural_compressor.data.datasets.Datasets"]], "iterabledataset (class in neural_compressor.data.datasets)": [[190, "neural_compressor.data.datasets.IterableDataset"]], "tensorflowimagerecord (class in neural_compressor.data.datasets)": [[190, "neural_compressor.data.datasets.TensorflowImageRecord"]], "dataset_registry() (in module neural_compressor.data.datasets)": [[190, "neural_compressor.data.datasets.dataset_registry"]], "neural_compressor.data.datasets": [[190, "module-neural_compressor.data.datasets"]], "styletransferdataset (class in neural_compressor.data.datasets.style_transfer_dataset)": [[191, "neural_compressor.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.data.datasets.style_transfer_dataset": [[191, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.data.filters.coco_filter)": [[192, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.data.filters.coco_filter)": [[192, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.coco_filter": [[192, "module-neural_compressor.data.filters.coco_filter"]], "filters (class in neural_compressor.data.filters.filter)": [[193, "neural_compressor.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.data.filters.filter)": [[193, "neural_compressor.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.data.filters.filter)": [[193, "neural_compressor.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.data.filters.filter)": [[193, "neural_compressor.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.data.filters.filter)": [[193, "neural_compressor.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.data.filters.filter)": [[193, "neural_compressor.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.data.filters.filter)": [[193, "neural_compressor.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.data.filters.filter)": [[193, "neural_compressor.data.filters.filter.filter_registry"]], "neural_compressor.data.filters.filter": [[193, "module-neural_compressor.data.filters.filter"]], "filters (class in neural_compressor.data.filters)": [[194, "neural_compressor.data.filters.FILTERS"]], "filter (class in neural_compressor.data.filters)": [[194, "neural_compressor.data.filters.Filter"]], "labelbalancecocorecordfilter (class in neural_compressor.data.filters)": [[194, "neural_compressor.data.filters.LabelBalanceCOCORecordFilter"]], "filter_registry() (in module neural_compressor.data.filters)": [[194, "neural_compressor.data.filters.filter_registry"]], "neural_compressor.data.filters": [[194, "module-neural_compressor.data.filters"]], "basetransform (class in neural_compressor.data)": [[195, "neural_compressor.data.BaseTransform"]], "bilinearimagenettransform (class in neural_compressor.data)": [[195, "neural_compressor.data.BilinearImagenetTransform"]], "cocorecorddataset (class in neural_compressor.data)": [[195, "neural_compressor.data.COCORecordDataset"]], "composetransform (class in neural_compressor.data)": [[195, "neural_compressor.data.ComposeTransform"]], "dataloader (class in neural_compressor.data)": [[195, "neural_compressor.data.DataLoader"]], "dataset (class in neural_compressor.data)": [[195, "neural_compressor.data.Dataset"]], "datasets (class in neural_compressor.data)": [[195, "neural_compressor.data.Datasets"]], "defaultdataloader (class in neural_compressor.data)": [[195, "neural_compressor.data.DefaultDataLoader"]], "filters (class in neural_compressor.data)": [[195, "neural_compressor.data.FILTERS"]], "filter (class in neural_compressor.data)": [[195, "neural_compressor.data.Filter"]], "iterabledataset (class in neural_compressor.data)": [[195, "neural_compressor.data.IterableDataset"]], "labelbalancecocorecordfilter (class in neural_compressor.data)": [[195, "neural_compressor.data.LabelBalanceCOCORecordFilter"]], "labelshift (class in neural_compressor.data)": [[195, "neural_compressor.data.LabelShift"]], "normalizetftransform (class in neural_compressor.data)": [[195, "neural_compressor.data.NormalizeTFTransform"]], "parsedecodecocotransform (class in neural_compressor.data)": [[195, "neural_compressor.data.ParseDecodeCocoTransform"]], "postprocess (class in neural_compressor.data)": [[195, "neural_compressor.data.Postprocess"]], "rescaletftransform (class in neural_compressor.data)": [[195, "neural_compressor.data.RescaleTFTransform"]], "resizetftransform (class in neural_compressor.data)": [[195, "neural_compressor.data.ResizeTFTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.data)": [[195, "neural_compressor.data.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.data)": [[195, "neural_compressor.data.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.data)": [[195, "neural_compressor.data.TRANSFORMS"]], "tensorflowimagerecord (class in neural_compressor.data)": [[195, "neural_compressor.data.TensorflowImageRecord"]], "tensorflowresizecropimagenettransform (class in neural_compressor.data)": [[195, "neural_compressor.data.TensorflowResizeCropImagenetTransform"]], "tensorflowresizewithratio (class in neural_compressor.data)": [[195, "neural_compressor.data.TensorflowResizeWithRatio"]], "batch() (neural_compressor.data.defaultdataloader method)": [[195, "neural_compressor.data.DefaultDataLoader.batch"]], "dataloader (neural_compressor.data.defaultdataloader property)": [[195, "neural_compressor.data.DefaultDataLoader.dataloader"]], "dataset_registry() (in module neural_compressor.data)": [[195, "neural_compressor.data.dataset_registry"]], "filter_registry() (in module neural_compressor.data)": [[195, "neural_compressor.data.filter_registry"]], "get_postprocess_result() (neural_compressor.data.tfsquadv1posttransform method)": [[195, "neural_compressor.data.TFSquadV1PostTransform.get_postprocess_result"]], "neural_compressor.data": [[195, "module-neural_compressor.data"]], "process_result() (neural_compressor.data.tfsquadv1posttransform method)": [[195, "neural_compressor.data.TFSquadV1PostTransform.process_result"]], "register() (neural_compressor.data.transforms method)": [[195, "neural_compressor.data.TRANSFORMS.register"]], "transform_registry() (in module neural_compressor.data)": [[195, "neural_compressor.data.transform_registry"]], "parsedecodecocotransform (class in neural_compressor.data.transforms.coco_transform)": [[196, "neural_compressor.data.transforms.coco_transform.ParseDecodeCocoTransform"]], "neural_compressor.data.transforms.coco_transform": [[196, "module-neural_compressor.data.transforms.coco_transform"]], "bilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[197, "neural_compressor.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.data.transforms.imagenet_transform)": [[197, "neural_compressor.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[197, "neural_compressor.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[197, "neural_compressor.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.data.transforms.imagenet_transform)": [[197, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[197, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.data.transforms.imagenet_transform)": [[197, "neural_compressor.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.data.transforms.imagenet_transform)": [[197, "neural_compressor.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[197, "neural_compressor.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "neural_compressor.data.transforms.imagenet_transform": [[197, "module-neural_compressor.data.transforms.imagenet_transform"]], "basetransform (class in neural_compressor.data.transforms)": [[198, "neural_compressor.data.transforms.BaseTransform"]], "bilinearimagenettransform (class in neural_compressor.data.transforms)": [[198, "neural_compressor.data.transforms.BilinearImagenetTransform"]], "composetransform (class in neural_compressor.data.transforms)": [[198, "neural_compressor.data.transforms.ComposeTransform"]], "labelshift (class in neural_compressor.data.transforms)": [[198, "neural_compressor.data.transforms.LabelShift"]], "normalizetftransform (class in neural_compressor.data.transforms)": [[198, "neural_compressor.data.transforms.NormalizeTFTransform"]], "parsedecodecocotransform (class in neural_compressor.data.transforms)": [[198, "neural_compressor.data.transforms.ParseDecodeCocoTransform"]], "postprocess (class in neural_compressor.data.transforms)": [[198, "neural_compressor.data.transforms.Postprocess"]], "rescaletftransform (class in neural_compressor.data.transforms)": [[198, "neural_compressor.data.transforms.RescaleTFTransform"]], "resizetftransform (class in neural_compressor.data.transforms)": [[198, "neural_compressor.data.transforms.ResizeTFTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.data.transforms)": [[198, "neural_compressor.data.transforms.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.data.transforms)": [[198, "neural_compressor.data.transforms.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.data.transforms)": [[198, "neural_compressor.data.transforms.TRANSFORMS"]], "tensorflowresizecropimagenettransform (class in neural_compressor.data.transforms)": [[198, "neural_compressor.data.transforms.TensorflowResizeCropImagenetTransform"]], "tensorflowresizewithratio (class in neural_compressor.data.transforms)": [[198, "neural_compressor.data.transforms.TensorflowResizeWithRatio"]], "get_postprocess_result() (neural_compressor.data.transforms.tfsquadv1posttransform method)": [[198, "neural_compressor.data.transforms.TFSquadV1PostTransform.get_postprocess_result"]], "neural_compressor.data.transforms": [[198, "module-neural_compressor.data.transforms"]], "process_result() (neural_compressor.data.transforms.tfsquadv1posttransform method)": [[198, "neural_compressor.data.transforms.TFSquadV1PostTransform.process_result"]], "register() (neural_compressor.data.transforms.transforms method)": [[198, "neural_compressor.data.transforms.TRANSFORMS.register"]], "transform_registry() (in module neural_compressor.data.transforms)": [[198, "neural_compressor.data.transforms.transform_registry"]], "postprocess (class in neural_compressor.data.transforms.postprocess)": [[199, "neural_compressor.data.transforms.postprocess.Postprocess"]], "neural_compressor.data.transforms.postprocess": [[199, "module-neural_compressor.data.transforms.postprocess"]], "basictokenizer (class in neural_compressor.data.transforms.tokenization)": [[200, "neural_compressor.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.data.transforms.tokenization)": [[200, "neural_compressor.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.data.transforms.tokenization)": [[200, "neural_compressor.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.data.transforms.tokenization)": [[200, "neural_compressor.data.transforms.tokenization.convert_by_vocab"]], "convert_ids_to_tokens() (neural_compressor.data.transforms.tokenization.fulltokenizer method)": [[200, "neural_compressor.data.transforms.tokenization.FullTokenizer.convert_ids_to_tokens"]], "convert_to_unicode() (in module neural_compressor.data.transforms.tokenization)": [[200, "neural_compressor.data.transforms.tokenization.convert_to_unicode"]], "convert_tokens_to_ids() (neural_compressor.data.transforms.tokenization.fulltokenizer method)": [[200, "neural_compressor.data.transforms.tokenization.FullTokenizer.convert_tokens_to_ids"]], "load_vocab() (in module neural_compressor.data.transforms.tokenization)": [[200, "neural_compressor.data.transforms.tokenization.load_vocab"]], "neural_compressor.data.transforms.tokenization": [[200, "module-neural_compressor.data.transforms.tokenization"]], "tokenize() (neural_compressor.data.transforms.tokenization.basictokenizer method)": [[200, "neural_compressor.data.transforms.tokenization.BasicTokenizer.tokenize"]], "tokenize() (neural_compressor.data.transforms.tokenization.fulltokenizer method)": [[200, "neural_compressor.data.transforms.tokenization.FullTokenizer.tokenize"]], "tokenize() (neural_compressor.data.transforms.tokenization.wordpiecetokenizer method)": [[200, "neural_compressor.data.transforms.tokenization.WordpieceTokenizer.tokenize"]], "whitespace_tokenize() (in module neural_compressor.data.transforms.tokenization)": [[200, "neural_compressor.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.data.transforms.transform)": [[201, "neural_compressor.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.data.transforms.transform)": [[201, "neural_compressor.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.data.transforms.transform)": [[201, "neural_compressor.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.data.transforms.transform)": [[201, "neural_compressor.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.data.transforms.transform)": [[201, "neural_compressor.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.data.transforms.transform)": [[201, "neural_compressor.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.data.transforms.transform)": [[201, "neural_compressor.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.data.transforms.transform)": [[201, "neural_compressor.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.data.transforms.transform)": [[201, "neural_compressor.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.data.transforms.transform)": [[201, "neural_compressor.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.data.transforms.transform)": [[201, "neural_compressor.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.data.transforms.transform)": [[201, "neural_compressor.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.data.transforms.transform)": [[201, "neural_compressor.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.data.transforms.transform)": [[201, "neural_compressor.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[201, "neural_compressor.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.data.transforms.transform)": [[201, "neural_compressor.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.data.transforms.transform)": [[201, "neural_compressor.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.data.transforms.transform)": [[201, "neural_compressor.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.data.transforms.transform)": [[201, "neural_compressor.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.data.transforms.transform)": [[201, "neural_compressor.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[201, "neural_compressor.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.data.transforms.transform)": [[201, "neural_compressor.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.data.transforms.transform)": [[201, "neural_compressor.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.data.transforms.transform)": [[201, "neural_compressor.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.data.transforms.transform)": [[201, "neural_compressor.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.data.transforms.transform)": [[201, "neural_compressor.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.data.transforms.transform)": [[201, "neural_compressor.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.data.transforms.transform)": [[201, "neural_compressor.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.data.transforms.transform)": [[201, "neural_compressor.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.data.transforms.transform)": [[201, "neural_compressor.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.data.transforms.transform)": [[201, "neural_compressor.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.transforms.transform)": [[201, "neural_compressor.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.data.transforms.transform)": [[201, "neural_compressor.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.data.transforms.transform)": [[201, "neural_compressor.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[201, "neural_compressor.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.data.transforms.transform)": [[201, "neural_compressor.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.data.transforms.transform)": [[201, "neural_compressor.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.data.transforms.transform)": [[201, "neural_compressor.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.data.transforms.transform)": [[201, "neural_compressor.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.data.transforms.transform)": [[201, "neural_compressor.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.data.transforms.transform)": [[201, "neural_compressor.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.data.transforms.transform)": [[201, "neural_compressor.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.data.transforms.transform)": [[201, "neural_compressor.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.data.transforms.transform)": [[201, "neural_compressor.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.data.transforms.transform)": [[201, "neural_compressor.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.data.transforms.transform)": [[201, "neural_compressor.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.data.transforms.transform)": [[201, "neural_compressor.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.data.transforms.transform)": [[201, "neural_compressor.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.data.transforms.transform)": [[201, "neural_compressor.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.data.transforms.transform)": [[201, "neural_compressor.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.data.transforms.transform)": [[201, "neural_compressor.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.data.transforms.transform)": [[201, "neural_compressor.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.data.transforms.transform)": [[201, "neural_compressor.data.transforms.transform.TRANSFORMS"], [201, "neural_compressor.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[201, "neural_compressor.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[201, "neural_compressor.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.data.transforms.transform)": [[201, "neural_compressor.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.data.transforms.transform)": [[201, "neural_compressor.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.data.transforms.transform)": [[201, "neural_compressor.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.data.transforms.transform)": [[201, "neural_compressor.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.data.transforms.transform)": [[201, "neural_compressor.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.data.transforms.transform)": [[201, "neural_compressor.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.data.transforms.transform)": [[201, "neural_compressor.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.data.transforms.transform)": [[201, "neural_compressor.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.data.transforms.transform)": [[201, "neural_compressor.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.data.transforms.transform)": [[201, "neural_compressor.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.data.transforms.transform)": [[201, "neural_compressor.data.transforms.transform.get_final_text"]], "get_params() (neural_compressor.data.transforms.transform.randomresizedcroptftransform method)": [[201, "neural_compressor.data.transforms.transform.RandomResizedCropTFTransform.get_params"]], "get_params() (neural_compressor.data.transforms.transform.randomresizedcroptransform method)": [[201, "neural_compressor.data.transforms.transform.RandomResizedCropTransform.get_params"]], "get_postprocess_result() (neural_compressor.data.transforms.transform.tfsquadv1posttransform method)": [[201, "neural_compressor.data.transforms.transform.TFSquadV1PostTransform.get_postprocess_result"]], "get_torchvision_map() (in module neural_compressor.data.transforms.transform)": [[201, "neural_compressor.data.transforms.transform.get_torchvision_map"]], "neural_compressor.data.transforms.transform": [[201, "module-neural_compressor.data.transforms.transform"]], "process_result() (neural_compressor.data.transforms.transform.tfsquadv1posttransform method)": [[201, "neural_compressor.data.transforms.transform.TFSquadV1PostTransform.process_result"]], "read_squad_examples() (in module neural_compressor.data.transforms.transform)": [[201, "neural_compressor.data.transforms.transform.read_squad_examples"]], "register() (neural_compressor.data.transforms.transform.transforms method)": [[201, "neural_compressor.data.transforms.transform.TRANSFORMS.register"]], "transform_registry() (in module neural_compressor.data.transforms.transform)": [[201, "neural_compressor.data.transforms.transform.transform_registry"]], "benchmark (class in neural_compressor.experimental.benchmark)": [[202, "neural_compressor.experimental.benchmark.Benchmark"]], "b_dataloader (neural_compressor.experimental.benchmark.benchmark property)": [[202, "neural_compressor.experimental.benchmark.Benchmark.b_dataloader"]], "b_func (neural_compressor.experimental.benchmark.benchmark property)": [[202, "neural_compressor.experimental.benchmark.Benchmark.b_func"]], "call_one() (neural_compressor.experimental.benchmark.benchmark method)": [[202, "neural_compressor.experimental.benchmark.Benchmark.call_one"]], "config_instance() (neural_compressor.experimental.benchmark.benchmark method)": [[202, "neural_compressor.experimental.benchmark.Benchmark.config_instance"]], "generate_prefix() (neural_compressor.experimental.benchmark.benchmark method)": [[202, "neural_compressor.experimental.benchmark.Benchmark.generate_prefix"]], "get_architecture() (in module neural_compressor.experimental.benchmark)": [[202, "neural_compressor.experimental.benchmark.get_architecture"]], "get_bounded_threads() (in module neural_compressor.experimental.benchmark)": [[202, "neural_compressor.experimental.benchmark.get_bounded_threads"]], "get_core_ids() (in module neural_compressor.experimental.benchmark)": [[202, "neural_compressor.experimental.benchmark.get_core_ids"]], "get_physical_ids() (in module neural_compressor.experimental.benchmark)": [[202, "neural_compressor.experimental.benchmark.get_physical_ids"]], "get_threads() (in module neural_compressor.experimental.benchmark)": [[202, "neural_compressor.experimental.benchmark.get_threads"]], "get_threads_per_core() (in module neural_compressor.experimental.benchmark)": [[202, "neural_compressor.experimental.benchmark.get_threads_per_core"]], "metric (neural_compressor.experimental.benchmark.benchmark property)": [[202, "neural_compressor.experimental.benchmark.Benchmark.metric"]], "model (neural_compressor.experimental.benchmark.benchmark property)": [[202, "neural_compressor.experimental.benchmark.Benchmark.model"]], "neural_compressor.experimental.benchmark": [[202, "module-neural_compressor.experimental.benchmark"]], "postprocess (neural_compressor.experimental.benchmark.benchmark property)": [[202, "neural_compressor.experimental.benchmark.Benchmark.postprocess"]], "results (neural_compressor.experimental.benchmark.benchmark property)": [[202, "neural_compressor.experimental.benchmark.Benchmark.results"]], "run_instance() (neural_compressor.experimental.benchmark.benchmark method)": [[202, "neural_compressor.experimental.benchmark.Benchmark.run_instance"]], "set_all_env_var() (in module neural_compressor.experimental.benchmark)": [[202, "neural_compressor.experimental.benchmark.set_all_env_var"]], "set_env_var() (in module neural_compressor.experimental.benchmark)": [[202, "neural_compressor.experimental.benchmark.set_env_var"]], "summary_benchmark() (neural_compressor.experimental.benchmark.benchmark method)": [[202, "neural_compressor.experimental.benchmark.Benchmark.summary_benchmark"]], "criterions (class in neural_compressor.experimental.common.criterion)": [[203, "neural_compressor.experimental.common.criterion.Criterions"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[203, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationframework (class in neural_compressor.experimental.common.criterion)": [[203, "neural_compressor.experimental.common.criterion.KnowledgeDistillationFramework"]], "knowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[203, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss"]], "kullbackleiblerdivergence() (neural_compressor.experimental.common.criterion.pytorchknowledgedistillationloss method)": [[203, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss.KullbackLeiblerDivergence"]], "kullbackleiblerdivergence() (neural_compressor.experimental.common.criterion.pytorchselfknowledgedistillationloss method)": [[203, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss.KullbackLeiblerDivergence"]], "l2divergence() (neural_compressor.experimental.common.criterion.pytorchselfknowledgedistillationloss method)": [[203, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss.L2Divergence"]], "pytorchcriterions (class in neural_compressor.experimental.common.criterion)": [[203, "neural_compressor.experimental.common.criterion.PyTorchCriterions"]], "pytorchcrossentropyloss (class in neural_compressor.experimental.common.criterion)": [[203, "neural_compressor.experimental.common.criterion.PyTorchCrossEntropyLoss"]], "pytorchintermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[203, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss"]], "pytorchintermediatelayersknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[203, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"]], "pytorchknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[203, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss"]], "pytorchknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[203, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLossWrapper"]], "pytorchselfknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[203, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss"]], "pytorchselfknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[203, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLossWrapper"]], "selfknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[203, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss"]], "softcrossentropy() (neural_compressor.experimental.common.criterion.pytorchknowledgedistillationloss method)": [[203, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss.SoftCrossEntropy"]], "softcrossentropy() (neural_compressor.experimental.common.criterion.pytorchselfknowledgedistillationloss method)": [[203, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss.SoftCrossEntropy"]], "softcrossentropy() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationloss method)": [[203, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss.SoftCrossEntropy"]], "tensorflowcrossentropyloss (class in neural_compressor.experimental.common.criterion)": [[203, "neural_compressor.experimental.common.criterion.TensorFlowCrossEntropyLoss"]], "tensorflowsparsecategoricalcrossentropy (class in neural_compressor.experimental.common.criterion)": [[203, "neural_compressor.experimental.common.criterion.TensorFlowSparseCategoricalCrossentropy"]], "tensorflowcriterions (class in neural_compressor.experimental.common.criterion)": [[203, "neural_compressor.experimental.common.criterion.TensorflowCriterions"]], "tensorflowknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[203, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss"]], "tensorflowknowledgedistillationlossexternal (class in neural_compressor.experimental.common.criterion)": [[203, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal"]], "tensorflowknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[203, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossWrapper"]], "clear_features() (neural_compressor.experimental.common.criterion.intermediatelayersknowledgedistillationloss method)": [[203, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss.clear_features"]], "criterion_registry() (in module neural_compressor.experimental.common.criterion)": [[203, "neural_compressor.experimental.common.criterion.criterion_registry"]], "init_feature_matcher() (neural_compressor.experimental.common.criterion.intermediatelayersknowledgedistillationloss method)": [[203, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss.init_feature_matcher"]], "init_feature_matcher() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[203, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.init_feature_matcher"]], "init_loss_funcs() (neural_compressor.experimental.common.criterion.intermediatelayersknowledgedistillationloss method)": [[203, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss.init_loss_funcs"]], "init_loss_funcs() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[203, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.init_loss_funcs"]], "init_loss_funcs() (neural_compressor.experimental.common.criterion.pytorchselfknowledgedistillationloss method)": [[203, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss.init_loss_funcs"]], "init_loss_funcs() (neural_compressor.experimental.common.criterion.selfknowledgedistillationloss method)": [[203, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss.init_loss_funcs"]], "loss_cal() (neural_compressor.experimental.common.criterion.intermediatelayersknowledgedistillationloss method)": [[203, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss.loss_cal"]], "loss_cal() (neural_compressor.experimental.common.criterion.knowledgedistillationloss method)": [[203, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss.loss_cal"]], "loss_cal() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[203, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.loss_cal"]], "loss_cal() (neural_compressor.experimental.common.criterion.pytorchselfknowledgedistillationloss method)": [[203, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss.loss_cal"]], "loss_cal() (neural_compressor.experimental.common.criterion.selfknowledgedistillationloss method)": [[203, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss.loss_cal"]], "loss_cal_sloss() (neural_compressor.experimental.common.criterion.intermediatelayersknowledgedistillationloss method)": [[203, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss.loss_cal_sloss"]], "loss_cal_sloss() (neural_compressor.experimental.common.criterion.knowledgedistillationloss method)": [[203, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss.loss_cal_sloss"]], "loss_cal_sloss() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[203, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.loss_cal_sloss"]], "loss_cal_sloss() (neural_compressor.experimental.common.criterion.selfknowledgedistillationloss method)": [[203, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss.loss_cal_sloss"]], "neural_compressor.experimental.common.criterion": [[203, "module-neural_compressor.experimental.common.criterion"]], "register() (neural_compressor.experimental.common.criterion.criterions method)": [[203, "neural_compressor.experimental.common.criterion.Criterions.register"]], "register_hooks_for_models() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[203, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.register_hooks_for_models"]], "remove_all_hooks() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[203, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.remove_all_hooks"]], "student_model (neural_compressor.experimental.common.criterion.knowledgedistillationframework property)": [[203, "neural_compressor.experimental.common.criterion.KnowledgeDistillationFramework.student_model"]], "student_targets_loss_cal() (neural_compressor.experimental.common.criterion.knowledgedistillationloss method)": [[203, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss.student_targets_loss_cal"]], "student_targets_loss_cal() (neural_compressor.experimental.common.criterion.pytorchknowledgedistillationloss method)": [[203, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss.student_targets_loss_cal"]], "student_targets_loss_cal() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationloss method)": [[203, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss.student_targets_loss_cal"]], "student_targets_loss_cal() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationlossexternal method)": [[203, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal.student_targets_loss_cal"]], "teacher_model (neural_compressor.experimental.common.criterion.knowledgedistillationframework property)": [[203, "neural_compressor.experimental.common.criterion.KnowledgeDistillationFramework.teacher_model"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.intermediatelayersknowledgedistillationloss method)": [[203, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.knowledgedistillationloss method)": [[203, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[203, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.pytorchknowledgedistillationloss method)": [[203, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.pytorchselfknowledgedistillationloss method)": [[203, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.selfknowledgedistillationloss method)": [[203, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationloss method)": [[203, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationlossexternal method)": [[203, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal.teacher_model_forward"]], "teacher_student_loss_cal() (neural_compressor.experimental.common.criterion.knowledgedistillationloss method)": [[203, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss.teacher_student_loss_cal"]], "teacher_student_loss_cal() (neural_compressor.experimental.common.criterion.pytorchknowledgedistillationloss method)": [[203, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss.teacher_student_loss_cal"]], "teacher_student_loss_cal() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationloss method)": [[203, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss.teacher_student_loss_cal"]], "teacher_student_loss_cal() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationlossexternal method)": [[203, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal.teacher_student_loss_cal"]], "dataloader (class in neural_compressor.experimental.common.dataloader)": [[204, "neural_compressor.experimental.common.dataloader.DataLoader"]], "neural_compressor.experimental.common.dataloader": [[204, "module-neural_compressor.experimental.common.dataloader"]], "dataloader (class in neural_compressor.experimental.common)": [[205, "neural_compressor.experimental.common.DataLoader"]], "metric (class in neural_compressor.experimental.common)": [[205, "neural_compressor.experimental.common.Metric"]], "model (class in neural_compressor.experimental.common)": [[205, "neural_compressor.experimental.common.Model"]], "postprocess (class in neural_compressor.experimental.common)": [[205, "neural_compressor.experimental.common.Postprocess"]], "neural_compressor.experimental.common": [[205, "module-neural_compressor.experimental.common"]], "metric (class in neural_compressor.experimental.common.metric)": [[206, "neural_compressor.experimental.common.metric.Metric"]], "neural_compressor.experimental.common.metric": [[206, "module-neural_compressor.experimental.common.metric"]], "model (class in neural_compressor.experimental.common.model)": [[207, "neural_compressor.experimental.common.model.Model"]], "neural_compressor.experimental.common.model": [[207, "module-neural_compressor.experimental.common.model"]], "set_backend() (in module neural_compressor.experimental.common.model)": [[207, "neural_compressor.experimental.common.model.set_backend"]], "optimizers (class in neural_compressor.experimental.common.optimizer)": [[208, "neural_compressor.experimental.common.optimizer.Optimizers"]], "pytorchoptimizers (class in neural_compressor.experimental.common.optimizer)": [[208, "neural_compressor.experimental.common.optimizer.PyTorchOptimizers"]], "pytorchsgd (class in neural_compressor.experimental.common.optimizer)": [[208, "neural_compressor.experimental.common.optimizer.PyTorchSGD"]], "tensorflowadam (class in neural_compressor.experimental.common.optimizer)": [[208, "neural_compressor.experimental.common.optimizer.TensorFlowAdam"]], "tensorflowadamw (class in neural_compressor.experimental.common.optimizer)": [[208, "neural_compressor.experimental.common.optimizer.TensorFlowAdamW"]], "tensorflowsgd (class in neural_compressor.experimental.common.optimizer)": [[208, "neural_compressor.experimental.common.optimizer.TensorFlowSGD"]], "tensorflowoptimizers (class in neural_compressor.experimental.common.optimizer)": [[208, "neural_compressor.experimental.common.optimizer.TensorflowOptimizers"]], "neural_compressor.experimental.common.optimizer": [[208, "module-neural_compressor.experimental.common.optimizer"]], "optimizer_registry() (in module neural_compressor.experimental.common.optimizer)": [[208, "neural_compressor.experimental.common.optimizer.optimizer_registry"]], "register() (neural_compressor.experimental.common.optimizer.optimizers method)": [[208, "neural_compressor.experimental.common.optimizer.Optimizers.register"]], "postprocess (class in neural_compressor.experimental.common.postprocess)": [[209, "neural_compressor.experimental.common.postprocess.Postprocess"]], "neural_compressor.experimental.common.postprocess": [[209, "module-neural_compressor.experimental.common.postprocess"]], "get_activation() (in module neural_compressor.experimental.common.torch_utils)": [[210, "neural_compressor.experimental.common.torch_utils.get_activation"]], "neural_compressor.experimental.common.torch_utils": [[210, "module-neural_compressor.experimental.common.torch_utils"]], "record_output() (in module neural_compressor.experimental.common.torch_utils)": [[210, "neural_compressor.experimental.common.torch_utils.record_output"]], "component (class in neural_compressor.experimental.component)": [[211, "neural_compressor.experimental.component.Component"]], "eval_dataloader (neural_compressor.experimental.component.component property)": [[211, "neural_compressor.experimental.component.Component.eval_dataloader"]], "eval_func (neural_compressor.experimental.component.component property)": [[211, "neural_compressor.experimental.component.Component.eval_func"]], "execute() (neural_compressor.experimental.component.component method)": [[211, "neural_compressor.experimental.component.Component.execute"]], "model (neural_compressor.experimental.component.component property)": [[211, "neural_compressor.experimental.component.Component.model"]], "neural_compressor.experimental.component": [[211, "module-neural_compressor.experimental.component"]], "on_after_compute_loss() (neural_compressor.experimental.component.component method)": [[211, "neural_compressor.experimental.component.Component.on_after_compute_loss"]], "on_after_eval() (neural_compressor.experimental.component.component method)": [[211, "neural_compressor.experimental.component.Component.on_after_eval"]], "on_after_optimizer_step() (neural_compressor.experimental.component.component method)": [[211, "neural_compressor.experimental.component.Component.on_after_optimizer_step"]], "on_batch_begin() (neural_compressor.experimental.component.component method)": [[211, "neural_compressor.experimental.component.Component.on_batch_begin"]], "on_batch_end() (neural_compressor.experimental.component.component method)": [[211, "neural_compressor.experimental.component.Component.on_batch_end"]], "on_before_eval() (neural_compressor.experimental.component.component method)": [[211, "neural_compressor.experimental.component.Component.on_before_eval"]], "on_before_optimizer_step() (neural_compressor.experimental.component.component method)": [[211, "neural_compressor.experimental.component.Component.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.experimental.component.component method)": [[211, "neural_compressor.experimental.component.Component.on_epoch_begin"]], "on_epoch_end() (neural_compressor.experimental.component.component method)": [[211, "neural_compressor.experimental.component.Component.on_epoch_end"]], "on_post_grad() (neural_compressor.experimental.component.component method)": [[211, "neural_compressor.experimental.component.Component.on_post_grad"]], "on_step_begin() (neural_compressor.experimental.component.component method)": [[211, "neural_compressor.experimental.component.Component.on_step_begin"]], "on_step_end() (neural_compressor.experimental.component.component method)": [[211, "neural_compressor.experimental.component.Component.on_step_end"]], "on_train_begin() (neural_compressor.experimental.component.component method)": [[211, "neural_compressor.experimental.component.Component.on_train_begin"]], "on_train_end() (neural_compressor.experimental.component.component method)": [[211, "neural_compressor.experimental.component.Component.on_train_end"]], "post_epoch_end() (neural_compressor.experimental.component.component method)": [[211, "neural_compressor.experimental.component.Component.post_epoch_end"]], "post_process() (neural_compressor.experimental.component.component method)": [[211, "neural_compressor.experimental.component.Component.post_process"]], "pre_epoch_begin() (neural_compressor.experimental.component.component method)": [[211, "neural_compressor.experimental.component.Component.pre_epoch_begin"]], "pre_process() (neural_compressor.experimental.component.component method)": [[211, "neural_compressor.experimental.component.Component.pre_process"]], "prepare() (neural_compressor.experimental.component.component method)": [[211, "neural_compressor.experimental.component.Component.prepare"]], "prepare_qat() (neural_compressor.experimental.component.component method)": [[211, "neural_compressor.experimental.component.Component.prepare_qat"]], "register_hook() (neural_compressor.experimental.component.component method)": [[211, "neural_compressor.experimental.component.Component.register_hook"]], "train_dataloader (neural_compressor.experimental.component.component property)": [[211, "neural_compressor.experimental.component.Component.train_dataloader"]], "train_func (neural_compressor.experimental.component.component property)": [[211, "neural_compressor.experimental.component.Component.train_func"]], "basedataloader (class in neural_compressor.experimental.data.dataloaders.base_dataloader)": [[212, "neural_compressor.experimental.data.dataloaders.base_dataloader.BaseDataLoader"]], "batch() (neural_compressor.experimental.data.dataloaders.base_dataloader.basedataloader method)": [[212, "neural_compressor.experimental.data.dataloaders.base_dataloader.BaseDataLoader.batch"]], "batch_size (neural_compressor.experimental.data.dataloaders.base_dataloader.basedataloader property)": [[212, "neural_compressor.experimental.data.dataloaders.base_dataloader.BaseDataLoader.batch_size"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[212, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[213, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "defaultdataloader (class in neural_compressor.experimental.data.dataloaders.default_dataloader)": [[214, "neural_compressor.experimental.data.dataloaders.default_dataloader.DefaultDataLoader"]], "batch() (neural_compressor.experimental.data.dataloaders.default_dataloader.defaultdataloader method)": [[214, "neural_compressor.experimental.data.dataloaders.default_dataloader.DefaultDataLoader.batch"]], "dataloader (neural_compressor.experimental.data.dataloaders.default_dataloader.defaultdataloader property)": [[214, "neural_compressor.experimental.data.dataloaders.default_dataloader.DefaultDataLoader.dataloader"]], "default_collate() (in module neural_compressor.experimental.data.dataloaders.default_dataloader)": [[214, "neural_compressor.experimental.data.dataloaders.default_dataloader.default_collate"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[214, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "fetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[215, "neural_compressor.experimental.data.dataloaders.fetcher.Fetcher"]], "indexfetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[215, "neural_compressor.experimental.data.dataloaders.fetcher.IndexFetcher"]], "iterablefetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[215, "neural_compressor.experimental.data.dataloaders.fetcher.IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[215, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[216, "module-neural_compressor.experimental.data.dataloaders"]], "mxnetdataloader (class in neural_compressor.experimental.data.dataloaders.mxnet_dataloader)": [[217, "neural_compressor.experimental.data.dataloaders.mxnet_dataloader.MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[217, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "onnxrtbertdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[218, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTBertDataLoader"]], "onnxrtdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[218, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[218, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "pytorchdataloader (class in neural_compressor.experimental.data.dataloaders.pytorch_dataloader)": [[219, "neural_compressor.experimental.data.dataloaders.pytorch_dataloader.PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[219, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "batchsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[220, "neural_compressor.experimental.data.dataloaders.sampler.BatchSampler"]], "iterablesampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[220, "neural_compressor.experimental.data.dataloaders.sampler.IterableSampler"]], "sampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[220, "neural_compressor.experimental.data.dataloaders.sampler.Sampler"]], "sequentialsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[220, "neural_compressor.experimental.data.dataloaders.sampler.SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.sampler": [[220, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "tfdatadataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[221, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TFDataDataLoader"]], "tensorflowbertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[221, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowBertDataLoader"]], "tensorflowdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[221, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowDataLoader"]], "tensorflowmodelzoobertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[221, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowModelZooBertDataLoader"]], "batch() (neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.tfdatadataloader method)": [[221, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TFDataDataLoader.batch"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[221, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "inputfeatures (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[222, "neural_compressor.experimental.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[222, "neural_compressor.experimental.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[222, "neural_compressor.experimental.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[222, "neural_compressor.experimental.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[222, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[222, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[222, "neural_compressor.experimental.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[222, "neural_compressor.experimental.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[222, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "to_json_string() (neural_compressor.experimental.data.datasets.bert_dataset.inputfeatures method)": [[222, "neural_compressor.experimental.data.datasets.bert_dataset.InputFeatures.to_json_string"]], "coconpy (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[223, "neural_compressor.experimental.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[223, "neural_compressor.experimental.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[223, "neural_compressor.experimental.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[223, "neural_compressor.experimental.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[223, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[224, "neural_compressor.experimental.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[224, "neural_compressor.experimental.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.experimental.data.datasets.dataset)": [[224, "neural_compressor.experimental.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.experimental.data.datasets.dataset)": [[224, "neural_compressor.experimental.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[224, "neural_compressor.experimental.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[224, "neural_compressor.experimental.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.experimental.data.datasets.dataset)": [[224, "neural_compressor.experimental.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.experimental.data.datasets.dataset)": [[224, "neural_compressor.experimental.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[224, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[224, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[224, "neural_compressor.experimental.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[224, "neural_compressor.experimental.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[224, "neural_compressor.experimental.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[224, "neural_compressor.experimental.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[224, "neural_compressor.experimental.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[224, "neural_compressor.experimental.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[224, "neural_compressor.experimental.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[224, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[224, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[224, "neural_compressor.experimental.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[224, "neural_compressor.experimental.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.experimental.data.datasets.dataset)": [[224, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.datasets.dataset)": [[224, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflowcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[224, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[224, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[224, "neural_compressor.experimental.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[224, "neural_compressor.experimental.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[224, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageFolder"]], "tensorflowimagerecord (class in neural_compressor.experimental.data.datasets.dataset)": [[224, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[224, "neural_compressor.experimental.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.experimental.data.datasets.dataset)": [[224, "neural_compressor.experimental.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.experimental.data.datasets.dataset)": [[224, "neural_compressor.experimental.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.experimental.data.datasets.dataset)": [[224, "neural_compressor.experimental.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.experimental.data.datasets.dataset)": [[224, "neural_compressor.experimental.data.datasets.dataset.check_integrity"]], "class_to_idx (neural_compressor.experimental.data.datasets.dataset.mnist property)": [[224, "neural_compressor.experimental.data.datasets.dataset.MNIST.class_to_idx"]], "dataset_registry() (in module neural_compressor.experimental.data.datasets.dataset)": [[224, "neural_compressor.experimental.data.datasets.dataset.dataset_registry"]], "download() (neural_compressor.experimental.data.datasets.dataset.cifar10 method)": [[224, "neural_compressor.experimental.data.datasets.dataset.CIFAR10.download"]], "download() (neural_compressor.experimental.data.datasets.dataset.mnist method)": [[224, "neural_compressor.experimental.data.datasets.dataset.MNIST.download"]], "download_url() (in module neural_compressor.experimental.data.datasets.dataset)": [[224, "neural_compressor.experimental.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.experimental.data.datasets.dataset)": [[224, "neural_compressor.experimental.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.experimental.data.datasets.dataset)": [[224, "neural_compressor.experimental.data.datasets.dataset.gen_bar_updater"]], "load_meta() (neural_compressor.experimental.data.datasets.dataset.cifar10 method)": [[224, "neural_compressor.experimental.data.datasets.dataset.CIFAR10.load_meta"]], "neural_compressor.experimental.data.datasets.dataset": [[224, "module-neural_compressor.experimental.data.datasets.dataset"]], "read_data() (neural_compressor.experimental.data.datasets.dataset.fashionmnist method)": [[224, "neural_compressor.experimental.data.datasets.dataset.FashionMNIST.read_data"]], "read_data() (neural_compressor.experimental.data.datasets.dataset.mnist method)": [[224, "neural_compressor.experimental.data.datasets.dataset.MNIST.read_data"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset)": [[225, "neural_compressor.experimental.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[225, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[226, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[226, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[226, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[227, "neural_compressor.experimental.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[227, "neural_compressor.experimental.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[227, "neural_compressor.experimental.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[227, "neural_compressor.experimental.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[227, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[227, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[227, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "dataset (class in neural_compressor.experimental.data.datasets)": [[228, "neural_compressor.experimental.data.datasets.Dataset"]], "datasets (class in neural_compressor.experimental.data.datasets)": [[228, "neural_compressor.experimental.data.datasets.Datasets"]], "iterabledataset (class in neural_compressor.experimental.data.datasets)": [[228, "neural_compressor.experimental.data.datasets.IterableDataset"]], "dataset_registry() (in module neural_compressor.experimental.data.datasets)": [[228, "neural_compressor.experimental.data.datasets.dataset_registry"]], "neural_compressor.experimental.data.datasets": [[228, "module-neural_compressor.experimental.data.datasets"]], "styletransferdataset (class in neural_compressor.experimental.data.datasets.style_transfer_dataset)": [[229, "neural_compressor.experimental.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[229, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[230, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[230, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.coco_filter": [[230, "module-neural_compressor.experimental.data.filters.coco_filter"]], "filters (class in neural_compressor.experimental.data.filters.filter)": [[231, "neural_compressor.experimental.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.experimental.data.filters.filter)": [[231, "neural_compressor.experimental.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.experimental.data.filters.filter)": [[231, "neural_compressor.experimental.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.experimental.data.filters.filter)": [[231, "neural_compressor.experimental.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.experimental.data.filters.filter)": [[231, "neural_compressor.experimental.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.experimental.data.filters.filter)": [[231, "neural_compressor.experimental.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.experimental.data.filters.filter)": [[231, "neural_compressor.experimental.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.experimental.data.filters.filter)": [[231, "neural_compressor.experimental.data.filters.filter.filter_registry"]], "neural_compressor.experimental.data.filters.filter": [[231, "module-neural_compressor.experimental.data.filters.filter"]], "filters (class in neural_compressor.experimental.data.filters)": [[232, "neural_compressor.experimental.data.filters.FILTERS"]], "filter (class in neural_compressor.experimental.data.filters)": [[232, "neural_compressor.experimental.data.filters.Filter"]], "filter_registry() (in module neural_compressor.experimental.data.filters)": [[232, "neural_compressor.experimental.data.filters.filter_registry"]], "neural_compressor.experimental.data.filters": [[232, "module-neural_compressor.experimental.data.filters"]], "basetransform (class in neural_compressor.experimental.data)": [[233, "neural_compressor.experimental.data.BaseTransform"]], "dataset (class in neural_compressor.experimental.data)": [[233, "neural_compressor.experimental.data.Dataset"]], "datasets (class in neural_compressor.experimental.data)": [[233, "neural_compressor.experimental.data.Datasets"]], "filters (class in neural_compressor.experimental.data)": [[233, "neural_compressor.experimental.data.FILTERS"]], "filter (class in neural_compressor.experimental.data)": [[233, "neural_compressor.experimental.data.Filter"]], "iterabledataset (class in neural_compressor.experimental.data)": [[233, "neural_compressor.experimental.data.IterableDataset"]], "transforms (class in neural_compressor.experimental.data)": [[233, "neural_compressor.experimental.data.TRANSFORMS"]], "dataset_registry() (in module neural_compressor.experimental.data)": [[233, "neural_compressor.experimental.data.dataset_registry"]], "filter_registry() (in module neural_compressor.experimental.data)": [[233, "neural_compressor.experimental.data.filter_registry"]], "neural_compressor.experimental.data": [[233, "module-neural_compressor.experimental.data"]], "register() (neural_compressor.experimental.data.transforms method)": [[233, "neural_compressor.experimental.data.TRANSFORMS.register"]], "transform_registry() (in module neural_compressor.experimental.data)": [[233, "neural_compressor.experimental.data.transform_registry"]], "bilinearimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[234, "neural_compressor.experimental.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[234, "neural_compressor.experimental.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[234, "neural_compressor.experimental.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[234, "neural_compressor.experimental.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[234, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[234, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[234, "neural_compressor.experimental.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[234, "neural_compressor.experimental.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[234, "neural_compressor.experimental.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[234, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "basetransform (class in neural_compressor.experimental.data.transforms)": [[235, "neural_compressor.experimental.data.transforms.BaseTransform"]], "transforms (class in neural_compressor.experimental.data.transforms)": [[235, "neural_compressor.experimental.data.transforms.TRANSFORMS"]], "neural_compressor.experimental.data.transforms": [[235, "module-neural_compressor.experimental.data.transforms"]], "register() (neural_compressor.experimental.data.transforms.transforms method)": [[235, "neural_compressor.experimental.data.transforms.TRANSFORMS.register"]], "transform_registry() (in module neural_compressor.experimental.data.transforms)": [[235, "neural_compressor.experimental.data.transforms.transform_registry"]], "basictokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[236, "neural_compressor.experimental.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[236, "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[236, "neural_compressor.experimental.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[236, "neural_compressor.experimental.data.transforms.tokenization.convert_by_vocab"]], "convert_ids_to_tokens() (neural_compressor.experimental.data.transforms.tokenization.fulltokenizer method)": [[236, "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer.convert_ids_to_tokens"]], "convert_to_unicode() (in module neural_compressor.experimental.data.transforms.tokenization)": [[236, "neural_compressor.experimental.data.transforms.tokenization.convert_to_unicode"]], "convert_tokens_to_ids() (neural_compressor.experimental.data.transforms.tokenization.fulltokenizer method)": [[236, "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer.convert_tokens_to_ids"]], "load_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[236, "neural_compressor.experimental.data.transforms.tokenization.load_vocab"]], "neural_compressor.experimental.data.transforms.tokenization": [[236, "module-neural_compressor.experimental.data.transforms.tokenization"]], "tokenize() (neural_compressor.experimental.data.transforms.tokenization.basictokenizer method)": [[236, "neural_compressor.experimental.data.transforms.tokenization.BasicTokenizer.tokenize"]], "tokenize() (neural_compressor.experimental.data.transforms.tokenization.fulltokenizer method)": [[236, "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer.tokenize"]], "tokenize() (neural_compressor.experimental.data.transforms.tokenization.wordpiecetokenizer method)": [[236, "neural_compressor.experimental.data.transforms.tokenization.WordpieceTokenizer.tokenize"]], "whitespace_tokenize() (in module neural_compressor.experimental.data.transforms.tokenization)": [[236, "neural_compressor.experimental.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.experimental.data.transforms.transform)": [[237, "neural_compressor.experimental.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.experimental.data.transforms.transform)": [[237, "neural_compressor.experimental.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.experimental.data.transforms.transform)": [[237, "neural_compressor.experimental.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[237, "neural_compressor.experimental.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.experimental.data.transforms.transform)": [[237, "neural_compressor.experimental.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[237, "neural_compressor.experimental.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[237, "neural_compressor.experimental.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[237, "neural_compressor.experimental.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.experimental.data.transforms.transform)": [[237, "neural_compressor.experimental.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[237, "neural_compressor.experimental.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[237, "neural_compressor.experimental.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[237, "neural_compressor.experimental.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.experimental.data.transforms.transform)": [[237, "neural_compressor.experimental.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[237, "neural_compressor.experimental.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[237, "neural_compressor.experimental.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[237, "neural_compressor.experimental.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.experimental.data.transforms.transform)": [[237, "neural_compressor.experimental.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.experimental.data.transforms.transform)": [[237, "neural_compressor.experimental.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[237, "neural_compressor.experimental.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[237, "neural_compressor.experimental.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[237, "neural_compressor.experimental.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.experimental.data.transforms.transform)": [[237, "neural_compressor.experimental.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.experimental.data.transforms.transform)": [[237, "neural_compressor.experimental.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[237, "neural_compressor.experimental.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.experimental.data.transforms.transform)": [[237, "neural_compressor.experimental.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.experimental.data.transforms.transform)": [[237, "neural_compressor.experimental.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[237, "neural_compressor.experimental.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[237, "neural_compressor.experimental.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[237, "neural_compressor.experimental.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[237, "neural_compressor.experimental.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[237, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[237, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[237, "neural_compressor.experimental.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[237, "neural_compressor.experimental.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[237, "neural_compressor.experimental.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[237, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[237, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[237, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[237, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[237, "neural_compressor.experimental.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.experimental.data.transforms.transform)": [[237, "neural_compressor.experimental.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.experimental.data.transforms.transform)": [[237, "neural_compressor.experimental.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.experimental.data.transforms.transform)": [[237, "neural_compressor.experimental.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[237, "neural_compressor.experimental.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[237, "neural_compressor.experimental.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[237, "neural_compressor.experimental.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[237, "neural_compressor.experimental.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[237, "neural_compressor.experimental.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.experimental.data.transforms.transform)": [[237, "neural_compressor.experimental.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[237, "neural_compressor.experimental.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.experimental.data.transforms.transform)": [[237, "neural_compressor.experimental.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.experimental.data.transforms.transform)": [[237, "neural_compressor.experimental.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.experimental.data.transforms.transform)": [[237, "neural_compressor.experimental.data.transforms.transform.TRANSFORMS"], [237, "neural_compressor.experimental.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[237, "neural_compressor.experimental.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[237, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[237, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[237, "neural_compressor.experimental.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.experimental.data.transforms.transform)": [[237, "neural_compressor.experimental.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[237, "neural_compressor.experimental.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[237, "neural_compressor.experimental.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[237, "neural_compressor.experimental.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.experimental.data.transforms.transform)": [[237, "neural_compressor.experimental.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.experimental.data.transforms.transform)": [[237, "neural_compressor.experimental.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.experimental.data.transforms.transform)": [[237, "neural_compressor.experimental.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.transforms.transform)": [[237, "neural_compressor.experimental.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.experimental.data.transforms.transform)": [[237, "neural_compressor.experimental.data.transforms.transform.get_final_text"]], "get_params() (neural_compressor.experimental.data.transforms.transform.randomresizedcroptftransform method)": [[237, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTFTransform.get_params"]], "get_params() (neural_compressor.experimental.data.transforms.transform.randomresizedcroptransform method)": [[237, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTransform.get_params"]], "get_postprocess_result() (neural_compressor.experimental.data.transforms.transform.tfsquadv1posttransform method)": [[237, "neural_compressor.experimental.data.transforms.transform.TFSquadV1PostTransform.get_postprocess_result"]], "get_torchvision_map() (in module neural_compressor.experimental.data.transforms.transform)": [[237, "neural_compressor.experimental.data.transforms.transform.get_torchvision_map"]], "neural_compressor.experimental.data.transforms.transform": [[237, "module-neural_compressor.experimental.data.transforms.transform"]], "process_result() (neural_compressor.experimental.data.transforms.transform.tfsquadv1posttransform method)": [[237, "neural_compressor.experimental.data.transforms.transform.TFSquadV1PostTransform.process_result"]], "read_squad_examples() (in module neural_compressor.experimental.data.transforms.transform)": [[237, "neural_compressor.experimental.data.transforms.transform.read_squad_examples"]], "register() (neural_compressor.experimental.data.transforms.transform.transforms method)": [[237, "neural_compressor.experimental.data.transforms.transform.TRANSFORMS.register"]], "transform_registry() (in module neural_compressor.experimental.data.transforms.transform)": [[237, "neural_compressor.experimental.data.transforms.transform.transform_registry"]], "distillation (class in neural_compressor.experimental.distillation)": [[238, "neural_compressor.experimental.distillation.Distillation"]], "_epoch_ran (neural_compressor.experimental.distillation.distillation attribute)": [[238, "neural_compressor.experimental.distillation.Distillation._epoch_ran"]], "best_model (neural_compressor.experimental.distillation.distillation attribute)": [[238, "neural_compressor.experimental.distillation.Distillation.best_model"]], "best_score (neural_compressor.experimental.distillation.distillation attribute)": [[238, "neural_compressor.experimental.distillation.Distillation.best_score"]], "create_criterion() (neural_compressor.experimental.distillation.distillation method)": [[238, "neural_compressor.experimental.distillation.Distillation.create_criterion"]], "create_optimizer() (neural_compressor.experimental.distillation.distillation method)": [[238, "neural_compressor.experimental.distillation.Distillation.create_optimizer"]], "criterion (neural_compressor.experimental.distillation.distillation property)": [[238, "neural_compressor.experimental.distillation.Distillation.criterion"]], "eval_frequency (neural_compressor.experimental.distillation.distillation attribute)": [[238, "neural_compressor.experimental.distillation.Distillation.eval_frequency"]], "evaluation_distributed (neural_compressor.experimental.distillation.distillation property)": [[238, "neural_compressor.experimental.distillation.Distillation.evaluation_distributed"]], "execute() (neural_compressor.experimental.distillation.distillation method)": [[238, "neural_compressor.experimental.distillation.Distillation.execute"]], "generate_hooks() (neural_compressor.experimental.distillation.distillation method)": [[238, "neural_compressor.experimental.distillation.Distillation.generate_hooks"]], "init_train_cfg() (neural_compressor.experimental.distillation.distillation method)": [[238, "neural_compressor.experimental.distillation.Distillation.init_train_cfg"]], "neural_compressor.experimental.distillation": [[238, "module-neural_compressor.experimental.distillation"]], "on_post_forward() (neural_compressor.experimental.distillation.distillation method)": [[238, "neural_compressor.experimental.distillation.Distillation.on_post_forward"]], "optimizer (neural_compressor.experimental.distillation.distillation property)": [[238, "neural_compressor.experimental.distillation.Distillation.optimizer"]], "pre_process() (neural_compressor.experimental.distillation.distillation method)": [[238, "neural_compressor.experimental.distillation.Distillation.pre_process"]], "prepare() (neural_compressor.experimental.distillation.distillation method)": [[238, "neural_compressor.experimental.distillation.Distillation.prepare"]], "student_model (neural_compressor.experimental.distillation.distillation property)": [[238, "neural_compressor.experimental.distillation.Distillation.student_model"]], "teacher_model (neural_compressor.experimental.distillation.distillation property)": [[238, "neural_compressor.experimental.distillation.Distillation.teacher_model"]], "train_cfg (neural_compressor.experimental.distillation.distillation property)": [[238, "neural_compressor.experimental.distillation.Distillation.train_cfg"]], "train_distributed (neural_compressor.experimental.distillation.distillation property)": [[238, "neural_compressor.experimental.distillation.Distillation.train_distributed"]], "neural_compressor.experimental.export": [[239, "module-neural_compressor.experimental.export"]], "onnx_qlinear_to_qdq() (in module neural_compressor.experimental.export)": [[239, "neural_compressor.experimental.export.onnx_qlinear_to_qdq"]], "tf_to_fp32_onnx() (in module neural_compressor.experimental.export)": [[239, "neural_compressor.experimental.export.tf_to_fp32_onnx"]], "tf_to_int8_onnx() (in module neural_compressor.experimental.export)": [[239, "neural_compressor.experimental.export.tf_to_int8_onnx"]], "torch_to_fp32_onnx() (in module neural_compressor.experimental.export)": [[239, "neural_compressor.experimental.export.torch_to_fp32_onnx"]], "torch_to_int8_onnx() (in module neural_compressor.experimental.export)": [[239, "neural_compressor.experimental.export.torch_to_int8_onnx"]], "check_model() (in module neural_compressor.experimental.export.qlinear2qdq)": [[240, "neural_compressor.experimental.export.qlinear2qdq.check_model"]], "neural_compressor.experimental.export.qlinear2qdq": [[240, "module-neural_compressor.experimental.export.qlinear2qdq"]], "onnx_qlinear_to_qdq() (in module neural_compressor.experimental.export.qlinear2qdq)": [[240, "neural_compressor.experimental.export.qlinear2qdq.onnx_qlinear_to_qdq"]], "neural_compressor.experimental.export.tf2onnx": [[241, "module-neural_compressor.experimental.export.tf2onnx"]], "tf_to_fp32_onnx() (in module neural_compressor.experimental.export.tf2onnx)": [[241, "neural_compressor.experimental.export.tf2onnx.tf_to_fp32_onnx"]], "tf_to_int8_onnx() (in module neural_compressor.experimental.export.tf2onnx)": [[241, "neural_compressor.experimental.export.tf2onnx.tf_to_int8_onnx"]], "build_scale_mapping() (in module neural_compressor.experimental.export.torch2onnx)": [[242, "neural_compressor.experimental.export.torch2onnx.build_scale_mapping"]], "get_node_mapping() (in module neural_compressor.experimental.export.torch2onnx)": [[242, "neural_compressor.experimental.export.torch2onnx.get_node_mapping"]], "get_quantizable_onnx_ops() (in module neural_compressor.experimental.export.torch2onnx)": [[242, "neural_compressor.experimental.export.torch2onnx.get_quantizable_onnx_ops"]], "neural_compressor.experimental.export.torch2onnx": [[242, "module-neural_compressor.experimental.export.torch2onnx"]], "qdq_fp32_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[242, "neural_compressor.experimental.export.torch2onnx.qdq_fp32_bias"]], "qdq_fp32_bias_qdq() (in module neural_compressor.experimental.export.torch2onnx)": [[242, "neural_compressor.experimental.export.torch2onnx.qdq_fp32_bias_qdq"]], "qdq_int32_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[242, "neural_compressor.experimental.export.torch2onnx.qdq_int32_bias"]], "recalculate_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[242, "neural_compressor.experimental.export.torch2onnx.recalculate_bias"]], "remove_nodes_by_name() (in module neural_compressor.experimental.export.torch2onnx)": [[242, "neural_compressor.experimental.export.torch2onnx.remove_nodes_by_name"]], "set_data_type() (in module neural_compressor.experimental.export.torch2onnx)": [[242, "neural_compressor.experimental.export.torch2onnx.set_data_type"]], "set_scale_info() (in module neural_compressor.experimental.export.torch2onnx)": [[242, "neural_compressor.experimental.export.torch2onnx.set_scale_info"]], "sub_graph_with_int32_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[242, "neural_compressor.experimental.export.torch2onnx.sub_graph_with_int32_bias"]], "torch_to_fp32_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[242, "neural_compressor.experimental.export.torch2onnx.torch_to_fp32_onnx"]], "torch_to_int8_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[242, "neural_compressor.experimental.export.torch2onnx.torch_to_int8_onnx"]], "update_weight_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[242, "neural_compressor.experimental.export.torch2onnx.update_weight_bias"]], "dummydatareader (class in neural_compressor.experimental.export.utils)": [[243, "neural_compressor.experimental.export.utils.DummyDataReader"]], "onnx2numpy_dtype() (in module neural_compressor.experimental.export.utils)": [[243, "neural_compressor.experimental.export.utils.ONNX2Numpy_dtype"]], "get_next() (neural_compressor.experimental.export.utils.dummydatareader method)": [[243, "neural_compressor.experimental.export.utils.DummyDataReader.get_next"]], "neural_compressor.experimental.export.utils": [[243, "module-neural_compressor.experimental.export.utils"]], "graph_optimization (class in neural_compressor.experimental.graph_optimization)": [[244, "neural_compressor.experimental.graph_optimization.Graph_Optimization"]], "dataset() (neural_compressor.experimental.graph_optimization.graph_optimization method)": [[244, "neural_compressor.experimental.graph_optimization.Graph_Optimization.dataset"]], "eval_dataloader (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[244, "neural_compressor.experimental.graph_optimization.Graph_Optimization.eval_dataloader"]], "eval_func (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[244, "neural_compressor.experimental.graph_optimization.Graph_Optimization.eval_func"]], "input (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[244, "neural_compressor.experimental.graph_optimization.Graph_Optimization.input"]], "metric (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[244, "neural_compressor.experimental.graph_optimization.Graph_Optimization.metric"]], "model (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[244, "neural_compressor.experimental.graph_optimization.Graph_Optimization.model"]], "neural_compressor.experimental.graph_optimization": [[244, "module-neural_compressor.experimental.graph_optimization"]], "output (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[244, "neural_compressor.experimental.graph_optimization.Graph_Optimization.output"]], "postprocess (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[244, "neural_compressor.experimental.graph_optimization.Graph_Optimization.postprocess"]], "precisions (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[244, "neural_compressor.experimental.graph_optimization.Graph_Optimization.precisions"]], "set_config_by_model() (neural_compressor.experimental.graph_optimization.graph_optimization method)": [[244, "neural_compressor.experimental.graph_optimization.Graph_Optimization.set_config_by_model"]], "benchmark (class in neural_compressor.experimental)": [[245, "neural_compressor.experimental.Benchmark"]], "component (class in neural_compressor.experimental)": [[245, "neural_compressor.experimental.Component"]], "distillation (class in neural_compressor.experimental)": [[245, "neural_compressor.experimental.Distillation"]], "graph_optimization (class in neural_compressor.experimental)": [[245, "neural_compressor.experimental.Graph_Optimization"]], "mixedprecision (class in neural_compressor.experimental)": [[245, "neural_compressor.experimental.MixedPrecision"]], "modelconversion (class in neural_compressor.experimental)": [[245, "neural_compressor.experimental.ModelConversion"]], "nas (class in neural_compressor.experimental)": [[245, "neural_compressor.experimental.NAS"]], "pruning (class in neural_compressor.experimental)": [[245, "neural_compressor.experimental.Pruning"]], "quantization (class in neural_compressor.experimental)": [[245, "neural_compressor.experimental.Quantization"]], "_epoch_ran (neural_compressor.experimental.distillation attribute)": [[245, "neural_compressor.experimental.Distillation._epoch_ran"]], "b_dataloader (neural_compressor.experimental.benchmark property)": [[245, "neural_compressor.experimental.Benchmark.b_dataloader"]], "b_func (neural_compressor.experimental.benchmark property)": [[245, "neural_compressor.experimental.Benchmark.b_func"]], "best_model (neural_compressor.experimental.distillation attribute)": [[245, "neural_compressor.experimental.Distillation.best_model"]], "best_score (neural_compressor.experimental.distillation attribute)": [[245, "neural_compressor.experimental.Distillation.best_score"]], "calib_dataloader (neural_compressor.experimental.quantization property)": [[245, "neural_compressor.experimental.Quantization.calib_dataloader"]], "call_one() (neural_compressor.experimental.benchmark method)": [[245, "neural_compressor.experimental.Benchmark.call_one"]], "conf (neural_compressor.experimental.pruning attribute)": [[245, "neural_compressor.experimental.Pruning.conf"]], "config_instance() (neural_compressor.experimental.benchmark method)": [[245, "neural_compressor.experimental.Benchmark.config_instance"]], "create_criterion() (neural_compressor.experimental.distillation method)": [[245, "neural_compressor.experimental.Distillation.create_criterion"]], "create_optimizer() (neural_compressor.experimental.distillation method)": [[245, "neural_compressor.experimental.Distillation.create_optimizer"]], "criterion (neural_compressor.experimental.distillation property)": [[245, "neural_compressor.experimental.Distillation.criterion"]], "dataset() (neural_compressor.experimental.graph_optimization method)": [[245, "neural_compressor.experimental.Graph_Optimization.dataset"]], "dataset() (neural_compressor.experimental.modelconversion method)": [[245, "neural_compressor.experimental.ModelConversion.dataset"]], "dataset() (neural_compressor.experimental.quantization method)": [[245, "neural_compressor.experimental.Quantization.dataset"]], "destination (neural_compressor.experimental.modelconversion property)": [[245, "neural_compressor.experimental.ModelConversion.destination"]], "distributed_execute() (neural_compressor.experimental.quantization method)": [[245, "neural_compressor.experimental.Quantization.distributed_execute"]], "eval_dataloader (neural_compressor.experimental.component property)": [[245, "neural_compressor.experimental.Component.eval_dataloader"]], "eval_dataloader (neural_compressor.experimental.graph_optimization property)": [[245, "neural_compressor.experimental.Graph_Optimization.eval_dataloader"]], "eval_dataloader (neural_compressor.experimental.modelconversion property)": [[245, "neural_compressor.experimental.ModelConversion.eval_dataloader"]], "eval_frequency (neural_compressor.experimental.distillation attribute)": [[245, "neural_compressor.experimental.Distillation.eval_frequency"]], "eval_func (neural_compressor.experimental.component property)": [[245, "neural_compressor.experimental.Component.eval_func"]], "eval_func (neural_compressor.experimental.graph_optimization property)": [[245, "neural_compressor.experimental.Graph_Optimization.eval_func"]], "eval_func (neural_compressor.experimental.modelconversion property)": [[245, "neural_compressor.experimental.ModelConversion.eval_func"]], "evaluation_distributed (neural_compressor.experimental.distillation property)": [[245, "neural_compressor.experimental.Distillation.evaluation_distributed"]], "evaluation_distributed (neural_compressor.experimental.pruning property)": [[245, "neural_compressor.experimental.Pruning.evaluation_distributed"]], "execute() (neural_compressor.experimental.component method)": [[245, "neural_compressor.experimental.Component.execute"]], "execute() (neural_compressor.experimental.distillation method)": [[245, "neural_compressor.experimental.Distillation.execute"]], "execute() (neural_compressor.experimental.pruning method)": [[245, "neural_compressor.experimental.Pruning.execute"]], "execute() (neural_compressor.experimental.quantization method)": [[245, "neural_compressor.experimental.Quantization.execute"]], "generate_hooks() (neural_compressor.experimental.distillation method)": [[245, "neural_compressor.experimental.Distillation.generate_hooks"]], "generate_hooks() (neural_compressor.experimental.pruning method)": [[245, "neural_compressor.experimental.Pruning.generate_hooks"]], "generate_prefix() (neural_compressor.experimental.benchmark method)": [[245, "neural_compressor.experimental.Benchmark.generate_prefix"]], "generate_pruners() (neural_compressor.experimental.pruning method)": [[245, "neural_compressor.experimental.Pruning.generate_pruners"]], "get_sparsity_ratio() (neural_compressor.experimental.pruning method)": [[245, "neural_compressor.experimental.Pruning.get_sparsity_ratio"]], "init_train_cfg() (neural_compressor.experimental.distillation method)": [[245, "neural_compressor.experimental.Distillation.init_train_cfg"]], "input (neural_compressor.experimental.graph_optimization property)": [[245, "neural_compressor.experimental.Graph_Optimization.input"]], "metric (neural_compressor.experimental.benchmark property)": [[245, "neural_compressor.experimental.Benchmark.metric"]], "metric (neural_compressor.experimental.graph_optimization property)": [[245, "neural_compressor.experimental.Graph_Optimization.metric"]], "metric (neural_compressor.experimental.modelconversion property)": [[245, "neural_compressor.experimental.ModelConversion.metric"]], "metric (neural_compressor.experimental.quantization property)": [[245, "neural_compressor.experimental.Quantization.metric"]], "model (neural_compressor.experimental.benchmark property)": [[245, "neural_compressor.experimental.Benchmark.model"]], "model (neural_compressor.experimental.component property)": [[245, "neural_compressor.experimental.Component.model"]], "model (neural_compressor.experimental.graph_optimization property)": [[245, "neural_compressor.experimental.Graph_Optimization.model"]], "model (neural_compressor.experimental.modelconversion property)": [[245, "neural_compressor.experimental.ModelConversion.model"]], "model (neural_compressor.experimental.quantization property)": [[245, "neural_compressor.experimental.Quantization.model"]], "neural_compressor.experimental": [[245, "module-neural_compressor.experimental"]], "objective (neural_compressor.experimental.quantization property)": [[245, "neural_compressor.experimental.Quantization.objective"]], "on_after_compute_loss() (neural_compressor.experimental.component method)": [[245, "neural_compressor.experimental.Component.on_after_compute_loss"]], "on_after_eval() (neural_compressor.experimental.component method)": [[245, "neural_compressor.experimental.Component.on_after_eval"]], "on_after_optimizer_step() (neural_compressor.experimental.component method)": [[245, "neural_compressor.experimental.Component.on_after_optimizer_step"]], "on_batch_begin() (neural_compressor.experimental.component method)": [[245, "neural_compressor.experimental.Component.on_batch_begin"]], "on_batch_end() (neural_compressor.experimental.component method)": [[245, "neural_compressor.experimental.Component.on_batch_end"]], "on_before_eval() (neural_compressor.experimental.component method)": [[245, "neural_compressor.experimental.Component.on_before_eval"]], "on_before_optimizer_step() (neural_compressor.experimental.component method)": [[245, "neural_compressor.experimental.Component.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.experimental.component method)": [[245, "neural_compressor.experimental.Component.on_epoch_begin"]], "on_epoch_end() (neural_compressor.experimental.component method)": [[245, "neural_compressor.experimental.Component.on_epoch_end"]], "on_post_forward() (neural_compressor.experimental.distillation method)": [[245, "neural_compressor.experimental.Distillation.on_post_forward"]], "on_post_grad() (neural_compressor.experimental.component method)": [[245, "neural_compressor.experimental.Component.on_post_grad"]], "on_step_begin() (neural_compressor.experimental.component method)": [[245, "neural_compressor.experimental.Component.on_step_begin"]], "on_step_end() (neural_compressor.experimental.component method)": [[245, "neural_compressor.experimental.Component.on_step_end"]], "on_train_begin() (neural_compressor.experimental.component method)": [[245, "neural_compressor.experimental.Component.on_train_begin"]], "on_train_end() (neural_compressor.experimental.component method)": [[245, "neural_compressor.experimental.Component.on_train_end"]], "optimizer (neural_compressor.experimental.distillation property)": [[245, "neural_compressor.experimental.Distillation.optimizer"]], "output (neural_compressor.experimental.graph_optimization property)": [[245, "neural_compressor.experimental.Graph_Optimization.output"]], "post_epoch_end() (neural_compressor.experimental.component method)": [[245, "neural_compressor.experimental.Component.post_epoch_end"]], "post_process() (neural_compressor.experimental.component method)": [[245, "neural_compressor.experimental.Component.post_process"]], "postprocess (neural_compressor.experimental.benchmark property)": [[245, "neural_compressor.experimental.Benchmark.postprocess"]], "postprocess (neural_compressor.experimental.graph_optimization property)": [[245, "neural_compressor.experimental.Graph_Optimization.postprocess"]], "postprocess (neural_compressor.experimental.modelconversion property)": [[245, "neural_compressor.experimental.ModelConversion.postprocess"]], "postprocess (neural_compressor.experimental.quantization property)": [[245, "neural_compressor.experimental.Quantization.postprocess"]], "pre_epoch_begin() (neural_compressor.experimental.component method)": [[245, "neural_compressor.experimental.Component.pre_epoch_begin"]], "pre_process() (neural_compressor.experimental.component method)": [[245, "neural_compressor.experimental.Component.pre_process"]], "pre_process() (neural_compressor.experimental.distillation method)": [[245, "neural_compressor.experimental.Distillation.pre_process"]], "pre_process() (neural_compressor.experimental.pruning method)": [[245, "neural_compressor.experimental.Pruning.pre_process"]], "pre_process() (neural_compressor.experimental.quantization method)": [[245, "neural_compressor.experimental.Quantization.pre_process"]], "precisions (neural_compressor.experimental.graph_optimization property)": [[245, "neural_compressor.experimental.Graph_Optimization.precisions"]], "precisions (neural_compressor.experimental.mixedprecision property)": [[245, "neural_compressor.experimental.MixedPrecision.precisions"]], "prepare() (neural_compressor.experimental.component method)": [[245, "neural_compressor.experimental.Component.prepare"]], "prepare() (neural_compressor.experimental.distillation method)": [[245, "neural_compressor.experimental.Distillation.prepare"]], "prepare() (neural_compressor.experimental.pruning method)": [[245, "neural_compressor.experimental.Pruning.prepare"]], "prepare_qat() (neural_compressor.experimental.component method)": [[245, "neural_compressor.experimental.Component.prepare_qat"]], "pruners (neural_compressor.experimental.pruning attribute)": [[245, "neural_compressor.experimental.Pruning.pruners"]], "pruning_func (neural_compressor.experimental.pruning property)": [[245, "neural_compressor.experimental.Pruning.pruning_func"]], "q_func (neural_compressor.experimental.quantization property)": [[245, "neural_compressor.experimental.Quantization.q_func"]], "register_hook() (neural_compressor.experimental.component method)": [[245, "neural_compressor.experimental.Component.register_hook"]], "results (neural_compressor.experimental.benchmark property)": [[245, "neural_compressor.experimental.Benchmark.results"]], "run_instance() (neural_compressor.experimental.benchmark method)": [[245, "neural_compressor.experimental.Benchmark.run_instance"]], "set_config_by_model() (neural_compressor.experimental.graph_optimization method)": [[245, "neural_compressor.experimental.Graph_Optimization.set_config_by_model"]], "set_config_by_model() (neural_compressor.experimental.mixedprecision method)": [[245, "neural_compressor.experimental.MixedPrecision.set_config_by_model"]], "source (neural_compressor.experimental.modelconversion property)": [[245, "neural_compressor.experimental.ModelConversion.source"]], "student_model (neural_compressor.experimental.distillation property)": [[245, "neural_compressor.experimental.Distillation.student_model"]], "summary_benchmark() (neural_compressor.experimental.benchmark method)": [[245, "neural_compressor.experimental.Benchmark.summary_benchmark"]], "teacher_model (neural_compressor.experimental.distillation property)": [[245, "neural_compressor.experimental.Distillation.teacher_model"]], "train_cfg (neural_compressor.experimental.distillation property)": [[245, "neural_compressor.experimental.Distillation.train_cfg"]], "train_dataloader (neural_compressor.experimental.component property)": [[245, "neural_compressor.experimental.Component.train_dataloader"]], "train_distributed (neural_compressor.experimental.distillation property)": [[245, "neural_compressor.experimental.Distillation.train_distributed"]], "train_distributed (neural_compressor.experimental.pruning property)": [[245, "neural_compressor.experimental.Pruning.train_distributed"]], "train_func (neural_compressor.experimental.component property)": [[245, "neural_compressor.experimental.Component.train_func"]], "update_items_for_all_pruners() (neural_compressor.experimental.pruning method)": [[245, "neural_compressor.experimental.Pruning.update_items_for_all_pruners"]], "bleu (class in neural_compressor.experimental.metric.bleu)": [[246, "neural_compressor.experimental.metric.bleu.BLEU"], [551, "neural_compressor.experimental.metric.bleu.BLEU"]], "unicoderegex (class in neural_compressor.experimental.metric.bleu)": [[246, "neural_compressor.experimental.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.experimental.metric.bleu)": [[246, "neural_compressor.experimental.metric.bleu.bleu_tokenize"]], "labels (neural_compressor.experimental.metric.bleu.bleu attribute)": [[246, "neural_compressor.experimental.metric.bleu.BLEU.labels"], [551, "neural_compressor.experimental.metric.bleu.BLEU.labels"]], "neural_compressor.experimental.metric.bleu": [[246, "module-neural_compressor.experimental.metric.bleu"], [551, "module-neural_compressor.experimental.metric.bleu"]], "nondigit_punct_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[246, "neural_compressor.experimental.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "predictions (neural_compressor.experimental.metric.bleu.bleu attribute)": [[246, "neural_compressor.experimental.metric.bleu.BLEU.predictions"], [551, "neural_compressor.experimental.metric.bleu.BLEU.predictions"]], "property_chars() (neural_compressor.experimental.metric.bleu.unicoderegex method)": [[246, "neural_compressor.experimental.metric.bleu.UnicodeRegex.property_chars"]], "punct_nondigit_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[246, "neural_compressor.experimental.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "reset() (neural_compressor.experimental.metric.bleu.bleu method)": [[246, "neural_compressor.experimental.metric.bleu.BLEU.reset"], [551, "neural_compressor.experimental.metric.bleu.BLEU.reset"]], "result() (neural_compressor.experimental.metric.bleu.bleu method)": [[246, "neural_compressor.experimental.metric.bleu.BLEU.result"], [551, "neural_compressor.experimental.metric.bleu.BLEU.result"]], "symbol_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[246, "neural_compressor.experimental.metric.bleu.UnicodeRegex.symbol_re"]], "update() (neural_compressor.experimental.metric.bleu.bleu method)": [[246, "neural_compressor.experimental.metric.bleu.BLEU.update"], [551, "neural_compressor.experimental.metric.bleu.BLEU.update"]], "compute_bleu() (in module neural_compressor.experimental.metric.bleu_util)": [[247, "neural_compressor.experimental.metric.bleu_util.compute_bleu"]], "neural_compressor.experimental.metric.bleu_util": [[247, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[248, "module-neural_compressor.experimental.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.experimental.metric.coco_tools)": [[249, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.experimental.metric.coco_tools)": [[249, "neural_compressor.experimental.metric.coco_tools.COCOWrapper"]], "computemetrics() (neural_compressor.experimental.metric.coco_tools.cocoevalwrapper method)": [[249, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper.ComputeMetrics"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.experimental.metric.coco_tools)": [[249, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.experimental.metric.coco_tools)": [[249, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.experimental.metric.coco_tools)": [[249, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "getagnosticmode() (neural_compressor.experimental.metric.coco_tools.cocoevalwrapper method)": [[249, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper.GetAgnosticMode"]], "getcategory() (neural_compressor.experimental.metric.coco_tools.cocoevalwrapper method)": [[249, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper.GetCategory"]], "getcategoryidlist() (neural_compressor.experimental.metric.coco_tools.cocoevalwrapper method)": [[249, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper.GetCategoryIdList"]], "loadannotations() (neural_compressor.experimental.metric.coco_tools.cocowrapper method)": [[249, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.LoadAnnotations"]], "accumulate() (neural_compressor.experimental.metric.coco_tools.cocoevalwrapper method)": [[249, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper.accumulate"]], "dataset (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[249, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[249, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.experimental.metric.coco_tools": [[249, "module-neural_compressor.experimental.metric.coco_tools"]], "evaluate() (in module neural_compressor.experimental.metric.evaluate_squad)": [[250, "neural_compressor.experimental.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[250, "neural_compressor.experimental.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[250, "neural_compressor.experimental.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.evaluate_squad)": [[250, "neural_compressor.experimental.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.evaluate_squad": [[250, "module-neural_compressor.experimental.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.experimental.metric.f1)": [[251, "neural_compressor.experimental.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.experimental.metric.f1)": [[251, "neural_compressor.experimental.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.f1)": [[251, "neural_compressor.experimental.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[251, "module-neural_compressor.experimental.metric.f1"]], "normalize_answer() (in module neural_compressor.experimental.metric.f1)": [[251, "neural_compressor.experimental.metric.f1.normalize_answer"]], "basemetric (class in neural_compressor.experimental.metric)": [[252, "neural_compressor.experimental.metric.BaseMetric"]], "metrics (class in neural_compressor.experimental.metric)": [[252, "neural_compressor.experimental.metric.METRICS"]], "hvd (neural_compressor.experimental.metric.basemetric property)": [[252, "neural_compressor.experimental.metric.BaseMetric.hvd"]], "metric (neural_compressor.experimental.metric.basemetric property)": [[252, "neural_compressor.experimental.metric.BaseMetric.metric"]], "metric_registry() (in module neural_compressor.experimental.metric)": [[252, "neural_compressor.experimental.metric.metric_registry"]], "metrics (neural_compressor.experimental.metric.metrics attribute)": [[252, "neural_compressor.experimental.metric.METRICS.metrics"]], "neural_compressor.experimental.metric": [[252, "module-neural_compressor.experimental.metric"]], "register() (neural_compressor.experimental.metric.metrics method)": [[252, "neural_compressor.experimental.metric.METRICS.register"]], "reset() (neural_compressor.experimental.metric.basemetric method)": [[252, "neural_compressor.experimental.metric.BaseMetric.reset"]], "result() (neural_compressor.experimental.metric.basemetric method)": [[252, "neural_compressor.experimental.metric.BaseMetric.result"]], "update() (neural_compressor.experimental.metric.basemetric method)": [[252, "neural_compressor.experimental.metric.BaseMetric.update"]], "accuracy (class in neural_compressor.experimental.metric.metric)": [[253, "neural_compressor.experimental.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.experimental.metric.metric)": [[253, "neural_compressor.experimental.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.experimental.metric.metric)": [[253, "neural_compressor.experimental.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.experimental.metric.metric)": [[253, "neural_compressor.experimental.metric.metric.F1"]], "generaltopk (class in neural_compressor.experimental.metric.metric)": [[253, "neural_compressor.experimental.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.experimental.metric.metric)": [[253, "neural_compressor.experimental.metric.metric.Loss"]], "mae (class in neural_compressor.experimental.metric.metric)": [[253, "neural_compressor.experimental.metric.metric.MAE"]], "metrics (class in neural_compressor.experimental.metric.metric)": [[253, "neural_compressor.experimental.metric.metric.METRICS"]], "mse (class in neural_compressor.experimental.metric.metric)": [[253, "neural_compressor.experimental.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.experimental.metric.metric)": [[253, "neural_compressor.experimental.metric.metric.MXNetMetrics"]], "onnxrtglue (class in neural_compressor.experimental.metric.metric)": [[253, "neural_compressor.experimental.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.experimental.metric.metric)": [[253, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.experimental.metric.metric)": [[253, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.experimental.metric.metric)": [[253, "neural_compressor.experimental.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.experimental.metric.metric)": [[253, "neural_compressor.experimental.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.experimental.metric.metric)": [[253, "neural_compressor.experimental.metric.metric.RMSE"]], "roc (class in neural_compressor.experimental.metric.metric)": [[253, "neural_compressor.experimental.metric.metric.ROC"]], "squadf1 (class in neural_compressor.experimental.metric.metric)": [[253, "neural_compressor.experimental.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.experimental.metric.metric)": [[253, "neural_compressor.experimental.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.experimental.metric.metric)": [[253, "neural_compressor.experimental.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.experimental.metric.metric)": [[253, "neural_compressor.experimental.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.experimental.metric.metric)": [[253, "neural_compressor.experimental.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.experimental.metric.metric)": [[253, "neural_compressor.experimental.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.experimental.metric.metric)": [[253, "neural_compressor.experimental.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.experimental.metric.metric)": [[253, "neural_compressor.experimental.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.experimental.metric.metric)": [[253, "neural_compressor.experimental.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.experimental.metric.metric.mae attribute)": [[253, "neural_compressor.experimental.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.experimental.metric.metric.mse attribute)": [[253, "neural_compressor.experimental.metric.metric.MSE.compare_label"]], "compute() (neural_compressor.experimental.metric.metric.pytorchloss method)": [[253, "neural_compressor.experimental.metric.metric.PyTorchLoss.compute"]], "hvd (neural_compressor.experimental.metric.metric.basemetric property)": [[253, "neural_compressor.experimental.metric.metric.BaseMetric.hvd"]], "k (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[253, "neural_compressor.experimental.metric.metric.GeneralTopK.k"]], "k (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[253, "neural_compressor.experimental.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[253, "neural_compressor.experimental.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mae attribute)": [[253, "neural_compressor.experimental.metric.metric.MAE.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mse attribute)": [[253, "neural_compressor.experimental.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.experimental.metric.metric)": [[253, "neural_compressor.experimental.metric.metric.mIOU"]], "metric (neural_compressor.experimental.metric.metric.basemetric property)": [[253, "neural_compressor.experimental.metric.metric.BaseMetric.metric"]], "metric_registry() (in module neural_compressor.experimental.metric.metric)": [[253, "neural_compressor.experimental.metric.metric.metric_registry"]], "metrics (neural_compressor.experimental.metric.metric.metrics attribute)": [[253, "neural_compressor.experimental.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.experimental.metric.metric.mxnetmetrics attribute)": [[253, "neural_compressor.experimental.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtitmetrics attribute)": [[253, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtqlmetrics attribute)": [[253, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.pytorchmetrics attribute)": [[253, "neural_compressor.experimental.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.tensorflowmetrics attribute)": [[253, "neural_compressor.experimental.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.experimental.metric.metric.rmse attribute)": [[253, "neural_compressor.experimental.metric.metric.RMSE.mse"]], "neural_compressor.experimental.metric.metric": [[253, "module-neural_compressor.experimental.metric.metric"]], "num_correct (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[253, "neural_compressor.experimental.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[253, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[253, "neural_compressor.experimental.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[253, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[253, "neural_compressor.experimental.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mae attribute)": [[253, "neural_compressor.experimental.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mse attribute)": [[253, "neural_compressor.experimental.metric.metric.MSE.pred_list"]], "register() (neural_compressor.experimental.metric.metric.metrics method)": [[253, "neural_compressor.experimental.metric.metric.METRICS.register"]], "reset() (neural_compressor.experimental.metric.metric.accuracy method)": [[253, "neural_compressor.experimental.metric.metric.Accuracy.reset"]], "reset() (neural_compressor.experimental.metric.metric.basemetric method)": [[253, "neural_compressor.experimental.metric.metric.BaseMetric.reset"]], "reset() (neural_compressor.experimental.metric.metric.cocomapv2 method)": [[253, "neural_compressor.experimental.metric.metric.COCOmAPv2.reset"]], "reset() (neural_compressor.experimental.metric.metric.f1 method)": [[253, "neural_compressor.experimental.metric.metric.F1.reset"]], "reset() (neural_compressor.experimental.metric.metric.generaltopk method)": [[253, "neural_compressor.experimental.metric.metric.GeneralTopK.reset"]], "reset() (neural_compressor.experimental.metric.metric.loss method)": [[253, "neural_compressor.experimental.metric.metric.Loss.reset"]], "reset() (neural_compressor.experimental.metric.metric.mae method)": [[253, "neural_compressor.experimental.metric.metric.MAE.reset"]], "reset() (neural_compressor.experimental.metric.metric.mse method)": [[253, "neural_compressor.experimental.metric.metric.MSE.reset"]], "reset() (neural_compressor.experimental.metric.metric.onnxrtglue method)": [[253, "neural_compressor.experimental.metric.metric.ONNXRTGLUE.reset"]], "reset() (neural_compressor.experimental.metric.metric.pytorchloss method)": [[253, "neural_compressor.experimental.metric.metric.PyTorchLoss.reset"]], "reset() (neural_compressor.experimental.metric.metric.rmse method)": [[253, "neural_compressor.experimental.metric.metric.RMSE.reset"]], "reset() (neural_compressor.experimental.metric.metric.roc method)": [[253, "neural_compressor.experimental.metric.metric.ROC.reset"]], "reset() (neural_compressor.experimental.metric.metric.squadf1 method)": [[253, "neural_compressor.experimental.metric.metric.SquadF1.reset"]], "reset() (neural_compressor.experimental.metric.metric.tensorflowmap method)": [[253, "neural_compressor.experimental.metric.metric.TensorflowMAP.reset"]], "reset() (neural_compressor.experimental.metric.metric.tensorflowtopk method)": [[253, "neural_compressor.experimental.metric.metric.TensorflowTopK.reset"]], "reset() (neural_compressor.experimental.metric.metric.wrapmxnetmetric method)": [[253, "neural_compressor.experimental.metric.metric.WrapMXNetMetric.reset"]], "reset() (neural_compressor.experimental.metric.metric.wraponnxrtmetric method)": [[253, "neural_compressor.experimental.metric.metric.WrapONNXRTMetric.reset"]], "reset() (neural_compressor.experimental.metric.metric.wrappytorchmetric method)": [[253, "neural_compressor.experimental.metric.metric.WrapPyTorchMetric.reset"]], "reset() (neural_compressor.experimental.metric.metric.miou method)": [[253, "neural_compressor.experimental.metric.metric.mIOU.reset"]], "result() (neural_compressor.experimental.metric.metric.accuracy method)": [[253, "neural_compressor.experimental.metric.metric.Accuracy.result"]], "result() (neural_compressor.experimental.metric.metric.basemetric method)": [[253, "neural_compressor.experimental.metric.metric.BaseMetric.result"]], "result() (neural_compressor.experimental.metric.metric.cocomapv2 method)": [[253, "neural_compressor.experimental.metric.metric.COCOmAPv2.result"]], "result() (neural_compressor.experimental.metric.metric.f1 method)": [[253, "neural_compressor.experimental.metric.metric.F1.result"]], "result() (neural_compressor.experimental.metric.metric.generaltopk method)": [[253, "neural_compressor.experimental.metric.metric.GeneralTopK.result"]], "result() (neural_compressor.experimental.metric.metric.loss method)": [[253, "neural_compressor.experimental.metric.metric.Loss.result"]], "result() (neural_compressor.experimental.metric.metric.mae method)": [[253, "neural_compressor.experimental.metric.metric.MAE.result"]], "result() (neural_compressor.experimental.metric.metric.mse method)": [[253, "neural_compressor.experimental.metric.metric.MSE.result"]], "result() (neural_compressor.experimental.metric.metric.onnxrtglue method)": [[253, "neural_compressor.experimental.metric.metric.ONNXRTGLUE.result"]], "result() (neural_compressor.experimental.metric.metric.rmse method)": [[253, "neural_compressor.experimental.metric.metric.RMSE.result"]], "result() (neural_compressor.experimental.metric.metric.roc method)": [[253, "neural_compressor.experimental.metric.metric.ROC.result"]], "result() (neural_compressor.experimental.metric.metric.squadf1 method)": [[253, "neural_compressor.experimental.metric.metric.SquadF1.result"]], "result() (neural_compressor.experimental.metric.metric.tensorflowmap method)": [[253, "neural_compressor.experimental.metric.metric.TensorflowMAP.result"]], "result() (neural_compressor.experimental.metric.metric.tensorflowtopk method)": [[253, "neural_compressor.experimental.metric.metric.TensorflowTopK.result"]], "result() (neural_compressor.experimental.metric.metric.wrapmxnetmetric method)": [[253, "neural_compressor.experimental.metric.metric.WrapMXNetMetric.result"]], "result() (neural_compressor.experimental.metric.metric.wraponnxrtmetric method)": [[253, "neural_compressor.experimental.metric.metric.WrapONNXRTMetric.result"]], "result() (neural_compressor.experimental.metric.metric.wrappytorchmetric method)": [[253, "neural_compressor.experimental.metric.metric.WrapPyTorchMetric.result"]], "result() (neural_compressor.experimental.metric.metric.miou method)": [[253, "neural_compressor.experimental.metric.metric.mIOU.result"]], "sample (neural_compressor.experimental.metric.metric.accuracy attribute)": [[253, "neural_compressor.experimental.metric.metric.Accuracy.sample"]], "sample (neural_compressor.experimental.metric.metric.loss attribute)": [[253, "neural_compressor.experimental.metric.metric.Loss.sample"]], "sum (neural_compressor.experimental.metric.metric.loss attribute)": [[253, "neural_compressor.experimental.metric.metric.Loss.sum"]], "update() (neural_compressor.experimental.metric.metric.accuracy method)": [[253, "neural_compressor.experimental.metric.metric.Accuracy.update"]], "update() (neural_compressor.experimental.metric.metric.basemetric method)": [[253, "neural_compressor.experimental.metric.metric.BaseMetric.update"]], "update() (neural_compressor.experimental.metric.metric.cocomapv2 method)": [[253, "neural_compressor.experimental.metric.metric.COCOmAPv2.update"]], "update() (neural_compressor.experimental.metric.metric.f1 method)": [[253, "neural_compressor.experimental.metric.metric.F1.update"]], "update() (neural_compressor.experimental.metric.metric.generaltopk method)": [[253, "neural_compressor.experimental.metric.metric.GeneralTopK.update"]], "update() (neural_compressor.experimental.metric.metric.loss method)": [[253, "neural_compressor.experimental.metric.metric.Loss.update"]], "update() (neural_compressor.experimental.metric.metric.mae method)": [[253, "neural_compressor.experimental.metric.metric.MAE.update"]], "update() (neural_compressor.experimental.metric.metric.mse method)": [[253, "neural_compressor.experimental.metric.metric.MSE.update"]], "update() (neural_compressor.experimental.metric.metric.onnxrtglue method)": [[253, "neural_compressor.experimental.metric.metric.ONNXRTGLUE.update"]], "update() (neural_compressor.experimental.metric.metric.pytorchloss method)": [[253, "neural_compressor.experimental.metric.metric.PyTorchLoss.update"]], "update() (neural_compressor.experimental.metric.metric.rmse method)": [[253, "neural_compressor.experimental.metric.metric.RMSE.update"]], "update() (neural_compressor.experimental.metric.metric.roc method)": [[253, "neural_compressor.experimental.metric.metric.ROC.update"]], "update() (neural_compressor.experimental.metric.metric.squadf1 method)": [[253, "neural_compressor.experimental.metric.metric.SquadF1.update"]], "update() (neural_compressor.experimental.metric.metric.tensorflowmap method)": [[253, "neural_compressor.experimental.metric.metric.TensorflowMAP.update"]], "update() (neural_compressor.experimental.metric.metric.tensorflowtopk method)": [[253, "neural_compressor.experimental.metric.metric.TensorflowTopK.update"]], "update() (neural_compressor.experimental.metric.metric.wrapmxnetmetric method)": [[253, "neural_compressor.experimental.metric.metric.WrapMXNetMetric.update"]], "update() (neural_compressor.experimental.metric.metric.wraponnxrtmetric method)": [[253, "neural_compressor.experimental.metric.metric.WrapONNXRTMetric.update"]], "update() (neural_compressor.experimental.metric.metric.wrappytorchmetric method)": [[253, "neural_compressor.experimental.metric.metric.WrapPyTorchMetric.update"]], "update() (neural_compressor.experimental.metric.metric.miou method)": [[253, "neural_compressor.experimental.metric.metric.mIOU.update"]], "mixedprecision (class in neural_compressor.experimental.mixed_precision)": [[254, "neural_compressor.experimental.mixed_precision.MixedPrecision"]], "neural_compressor.experimental.mixed_precision": [[254, "module-neural_compressor.experimental.mixed_precision"]], "precisions (neural_compressor.experimental.mixed_precision.mixedprecision property)": [[254, "neural_compressor.experimental.mixed_precision.MixedPrecision.precisions"]], "set_config_by_model() (neural_compressor.experimental.mixed_precision.mixedprecision method)": [[254, "neural_compressor.experimental.mixed_precision.MixedPrecision.set_config_by_model"]], "modelconversion (class in neural_compressor.experimental.model_conversion)": [[255, "neural_compressor.experimental.model_conversion.ModelConversion"]], "dataset() (neural_compressor.experimental.model_conversion.modelconversion method)": [[255, "neural_compressor.experimental.model_conversion.ModelConversion.dataset"]], "destination (neural_compressor.experimental.model_conversion.modelconversion property)": [[255, "neural_compressor.experimental.model_conversion.ModelConversion.destination"]], "eval_dataloader (neural_compressor.experimental.model_conversion.modelconversion property)": [[255, "neural_compressor.experimental.model_conversion.ModelConversion.eval_dataloader"]], "eval_func (neural_compressor.experimental.model_conversion.modelconversion property)": [[255, "neural_compressor.experimental.model_conversion.ModelConversion.eval_func"]], "metric (neural_compressor.experimental.model_conversion.modelconversion property)": [[255, "neural_compressor.experimental.model_conversion.ModelConversion.metric"]], "model (neural_compressor.experimental.model_conversion.modelconversion property)": [[255, "neural_compressor.experimental.model_conversion.ModelConversion.model"]], "neural_compressor.experimental.model_conversion": [[255, "module-neural_compressor.experimental.model_conversion"]], "postprocess (neural_compressor.experimental.model_conversion.modelconversion property)": [[255, "neural_compressor.experimental.model_conversion.ModelConversion.postprocess"]], "source (neural_compressor.experimental.model_conversion.modelconversion property)": [[255, "neural_compressor.experimental.model_conversion.ModelConversion.source"]], "basicnas (class in neural_compressor.experimental.nas.basic_nas)": [[256, "neural_compressor.experimental.nas.basic_nas.BasicNAS"]], "estimate() (neural_compressor.experimental.nas.basic_nas.basicnas method)": [[256, "neural_compressor.experimental.nas.basic_nas.BasicNAS.estimate"]], "execute() (neural_compressor.experimental.nas.basic_nas.basicnas method)": [[256, "neural_compressor.experimental.nas.basic_nas.BasicNAS.execute"]], "init_by_cfg() (neural_compressor.experimental.nas.basic_nas.basicnas method)": [[256, "neural_compressor.experimental.nas.basic_nas.BasicNAS.init_by_cfg"]], "neural_compressor.experimental.nas.basic_nas": [[256, "module-neural_compressor.experimental.nas.basic_nas"]], "pre_process() (neural_compressor.experimental.nas.basic_nas.basicnas method)": [[256, "neural_compressor.experimental.nas.basic_nas.BasicNAS.pre_process"]], "dynas (class in neural_compressor.experimental.nas.dynas)": [[257, "neural_compressor.experimental.nas.dynas.DyNAS"]], "create_acc_predictor() (neural_compressor.experimental.nas.dynas.dynas method)": [[257, "neural_compressor.experimental.nas.dynas.DyNAS.create_acc_predictor"]], "create_latency_predictor() (neural_compressor.experimental.nas.dynas.dynas method)": [[257, "neural_compressor.experimental.nas.dynas.DyNAS.create_latency_predictor"]], "create_macs_predictor() (neural_compressor.experimental.nas.dynas.dynas method)": [[257, "neural_compressor.experimental.nas.dynas.DyNAS.create_macs_predictor"]], "estimate() (neural_compressor.experimental.nas.dynas.dynas method)": [[257, "neural_compressor.experimental.nas.dynas.DyNAS.estimate"]], "init_cfg() (neural_compressor.experimental.nas.dynas.dynas method)": [[257, "neural_compressor.experimental.nas.dynas.DyNAS.init_cfg"]], "init_for_search() (neural_compressor.experimental.nas.dynas.dynas method)": [[257, "neural_compressor.experimental.nas.dynas.DyNAS.init_for_search"]], "neural_compressor.experimental.nas.dynas": [[257, "module-neural_compressor.experimental.nas.dynas"]], "search() (neural_compressor.experimental.nas.dynas.dynas method)": [[257, "neural_compressor.experimental.nas.dynas.DyNAS.search"]], "select_model_arch() (neural_compressor.experimental.nas.dynas.dynas method)": [[257, "neural_compressor.experimental.nas.dynas.DyNAS.select_model_arch"]], "parametermanager (class in neural_compressor.experimental.nas.dynast.dynas_manager)": [[258, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager"]], "transformerltencoding (class in neural_compressor.experimental.nas.dynast.dynas_manager)": [[258, "neural_compressor.experimental.nas.dynast.dynas_manager.TransformerLTEncoding"]], "create_training_set() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager static method)": [[258, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.create_training_set"]], "create_training_set() (neural_compressor.experimental.nas.dynast.dynas_manager.transformerltencoding method)": [[258, "neural_compressor.experimental.nas.dynast.dynas_manager.TransformerLTEncoding.create_training_set"]], "import_csv() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[258, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.import_csv"]], "import_csv() (neural_compressor.experimental.nas.dynast.dynas_manager.transformerltencoding method)": [[258, "neural_compressor.experimental.nas.dynast.dynas_manager.TransformerLTEncoding.import_csv"]], "neural_compressor.experimental.nas.dynast.dynas_manager": [[258, "module-neural_compressor.experimental.nas.dynast.dynas_manager"]], "onehot_generic() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[258, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.onehot_generic"]], "process_param_dict() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[258, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.process_param_dict"]], "random_sample() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[258, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.random_sample"]], "random_samples() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[258, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.random_samples"]], "set_seed() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[258, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.set_seed"]], "translate2param() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[258, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.translate2param"]], "translate2pymoo() (neural_compressor.experimental.nas.dynast.dynas_manager.parametermanager method)": [[258, "neural_compressor.experimental.nas.dynast.dynas_manager.ParameterManager.translate2pymoo"]], "predictor (class in neural_compressor.experimental.nas.dynast.dynas_predictor)": [[259, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor"]], "get_metrics() (neural_compressor.experimental.nas.dynast.dynas_predictor.predictor method)": [[259, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor.get_metrics"]], "get_parameters() (neural_compressor.experimental.nas.dynast.dynas_predictor.predictor method)": [[259, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor.get_parameters"]], "load() (neural_compressor.experimental.nas.dynast.dynas_predictor.predictor method)": [[259, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor.load"]], "neural_compressor.experimental.nas.dynast.dynas_predictor": [[259, "module-neural_compressor.experimental.nas.dynast.dynas_predictor"]], "predict() (neural_compressor.experimental.nas.dynast.dynas_predictor.predictor method)": [[259, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor.predict"]], "save() (neural_compressor.experimental.nas.dynast.dynas_predictor.predictor method)": [[259, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor.save"]], "train() (neural_compressor.experimental.nas.dynast.dynas_predictor.predictor method)": [[259, "neural_compressor.experimental.nas.dynast.dynas_predictor.Predictor.train"]], "problemmultiobjective (class in neural_compressor.experimental.nas.dynast.dynas_search)": [[260, "neural_compressor.experimental.nas.dynast.dynas_search.ProblemMultiObjective"]], "searchalgomanager (class in neural_compressor.experimental.nas.dynast.dynas_search)": [[260, "neural_compressor.experimental.nas.dynast.dynas_search.SearchAlgoManager"]], "configure_age() (neural_compressor.experimental.nas.dynast.dynas_search.searchalgomanager method)": [[260, "neural_compressor.experimental.nas.dynast.dynas_search.SearchAlgoManager.configure_age"]], "configure_nsga2() (neural_compressor.experimental.nas.dynast.dynas_search.searchalgomanager method)": [[260, "neural_compressor.experimental.nas.dynast.dynas_search.SearchAlgoManager.configure_nsga2"]], "neural_compressor.experimental.nas.dynast.dynas_search": [[260, "module-neural_compressor.experimental.nas.dynast.dynas_search"]], "run_search() (neural_compressor.experimental.nas.dynast.dynas_search.searchalgomanager method)": [[260, "neural_compressor.experimental.nas.dynast.dynas_search.SearchAlgoManager.run_search"]], "evaluationinterface (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[261, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterface"]], "evaluationinterfacemobilenetv3 (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[261, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceMobileNetV3"]], "evaluationinterfaceresnet50 (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[261, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceResNet50"]], "evaluationinterfacetransformerlt (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[261, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceTransformerLT"]], "ofarunner (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[261, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner"]], "runner (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[261, "neural_compressor.experimental.nas.dynast.dynas_utils.Runner"]], "torchvisionreference (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[261, "neural_compressor.experimental.nas.dynast.dynas_utils.TorchVisionReference"]], "transformerltrunner (class in neural_compressor.experimental.nas.dynast.dynas_utils)": [[261, "neural_compressor.experimental.nas.dynast.dynas_utils.TransformerLTRunner"]], "clear_csv() (neural_compressor.experimental.nas.dynast.dynas_utils.evaluationinterface method)": [[261, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterface.clear_csv"]], "clear_csv() (neural_compressor.experimental.nas.dynast.dynas_utils.evaluationinterfacetransformerlt method)": [[261, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceTransformerLT.clear_csv"]], "estimate_accuracy_top1() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[261, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.estimate_accuracy_top1"]], "estimate_latency() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[261, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.estimate_latency"]], "estimate_macs() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[261, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.estimate_macs"]], "eval_subnet() (neural_compressor.experimental.nas.dynast.dynas_utils.evaluationinterface method)": [[261, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterface.eval_subnet"]], "eval_subnet() (neural_compressor.experimental.nas.dynast.dynas_utils.evaluationinterfacemobilenetv3 method)": [[261, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceMobileNetV3.eval_subnet"]], "eval_subnet() (neural_compressor.experimental.nas.dynast.dynas_utils.evaluationinterfaceresnet50 method)": [[261, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceResNet50.eval_subnet"]], "eval_subnet() (neural_compressor.experimental.nas.dynast.dynas_utils.evaluationinterfacetransformerlt method)": [[261, "neural_compressor.experimental.nas.dynast.dynas_utils.EvaluationInterfaceTransformerLT.eval_subnet"]], "get_macs() (in module neural_compressor.experimental.nas.dynast.dynas_utils)": [[261, "neural_compressor.experimental.nas.dynast.dynas_utils.get_macs"]], "get_subnet() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[261, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.get_subnet"]], "get_torchvision_model() (in module neural_compressor.experimental.nas.dynast.dynas_utils)": [[261, "neural_compressor.experimental.nas.dynast.dynas_utils.get_torchvision_model"]], "measure_latency() (in module neural_compressor.experimental.nas.dynast.dynas_utils)": [[261, "neural_compressor.experimental.nas.dynast.dynas_utils.measure_latency"]], "measure_latency() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[261, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.measure_latency"]], "measure_latency() (neural_compressor.experimental.nas.dynast.dynas_utils.torchvisionreference method)": [[261, "neural_compressor.experimental.nas.dynast.dynas_utils.TorchVisionReference.measure_latency"]], "measure_latency() (neural_compressor.experimental.nas.dynast.dynas_utils.transformerltrunner method)": [[261, "neural_compressor.experimental.nas.dynast.dynas_utils.TransformerLTRunner.measure_latency"]], "neural_compressor.experimental.nas.dynast.dynas_utils": [[261, "module-neural_compressor.experimental.nas.dynast.dynas_utils"]], "validate_macs() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[261, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.validate_macs"]], "validate_macs() (neural_compressor.experimental.nas.dynast.dynas_utils.torchvisionreference method)": [[261, "neural_compressor.experimental.nas.dynast.dynas_utils.TorchVisionReference.validate_macs"]], "validate_macs() (neural_compressor.experimental.nas.dynast.dynas_utils.transformerltrunner method)": [[261, "neural_compressor.experimental.nas.dynast.dynas_utils.TransformerLTRunner.validate_macs"]], "validate_top1() (neural_compressor.experimental.nas.dynast.dynas_utils.ofarunner method)": [[261, "neural_compressor.experimental.nas.dynast.dynas_utils.OFARunner.validate_top1"]], "validate_top1() (neural_compressor.experimental.nas.dynast.dynas_utils.torchvisionreference method)": [[261, "neural_compressor.experimental.nas.dynast.dynas_utils.TorchVisionReference.validate_top1"]], "neural_compressor.experimental.nas.dynast": [[262, "module-neural_compressor.experimental.nas.dynast"]], "neural_compressor.experimental.nas.dynast.supernetwork": [[263, "module-neural_compressor.experimental.nas.dynast.supernetwork"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation": [[264, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation"]], "multiheadattentionsuper (class in neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork)": [[265, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork.MultiheadAttentionSuper"]], "forward() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork.multiheadattentionsuper method)": [[265, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork.MultiheadAttentionSuper.forward"]], "get_incremental_state() (in module neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork)": [[265, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork.get_incremental_state"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork": [[265, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork"]], "reorder_incremental_state() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork.multiheadattentionsuper method)": [[265, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork.MultiheadAttentionSuper.reorder_incremental_state"]], "set_incremental_state() (in module neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork)": [[265, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.modules_supernetwork.set_incremental_state"]], "compute_bleu() (in module neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface)": [[266, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface.compute_bleu"]], "compute_latency() (in module neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface)": [[266, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface.compute_latency"]], "compute_macs() (in module neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface)": [[266, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface.compute_macs"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface": [[266, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_interface"]], "transformerdecoder (class in neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork)": [[267, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoder"]], "transformerdecoderlayer (class in neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork)": [[267, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoderLayer"]], "transformerencoder (class in neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork)": [[267, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoder"]], "transformerencoderlayer (class in neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork)": [[267, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoderLayer"]], "transformersupernetwork (class in neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork)": [[267, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerSuperNetwork"]], "extract_features() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerdecoder method)": [[267, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoder.extract_features"]], "forward() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerdecoder method)": [[267, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoder.forward"]], "forward() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerdecoderlayer method)": [[267, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoderLayer.forward"]], "forward() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerencoder method)": [[267, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoder.forward"]], "forward() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerencoderlayer method)": [[267, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoderLayer.forward"]], "max_positions() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerdecoder method)": [[267, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoder.max_positions"]], "max_positions() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerencoder method)": [[267, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoder.max_positions"]], "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork": [[267, "module-neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork"]], "output_layer() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerdecoder method)": [[267, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoder.output_layer"]], "reorder_encoder_out() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerencoder method)": [[267, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoder.reorder_encoder_out"]], "upgrade_state_dict_named() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerdecoder method)": [[267, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerDecoder.upgrade_state_dict_named"]], "upgrade_state_dict_named() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerencoder method)": [[267, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoder.upgrade_state_dict_named"]], "upgrade_state_dict_named() (neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.transformerencoderlayer method)": [[267, "neural_compressor.experimental.nas.dynast.supernetwork.machine_translation.transformer_supernetwork.TransformerEncoderLayer.upgrade_state_dict_named"]], "basicnas (class in neural_compressor.experimental.nas)": [[268, "neural_compressor.experimental.nas.BasicNAS"]], "dynas (class in neural_compressor.experimental.nas)": [[268, "neural_compressor.experimental.nas.DyNAS"]], "nas (class in neural_compressor.experimental.nas)": [[268, "neural_compressor.experimental.nas.NAS"]], "create_acc_predictor() (neural_compressor.experimental.nas.dynas method)": [[268, "neural_compressor.experimental.nas.DyNAS.create_acc_predictor"]], "create_latency_predictor() (neural_compressor.experimental.nas.dynas method)": [[268, "neural_compressor.experimental.nas.DyNAS.create_latency_predictor"]], "create_macs_predictor() (neural_compressor.experimental.nas.dynas method)": [[268, "neural_compressor.experimental.nas.DyNAS.create_macs_predictor"]], "estimate() (neural_compressor.experimental.nas.basicnas method)": [[268, "neural_compressor.experimental.nas.BasicNAS.estimate"]], "estimate() (neural_compressor.experimental.nas.dynas method)": [[268, "neural_compressor.experimental.nas.DyNAS.estimate"]], "execute() (neural_compressor.experimental.nas.basicnas method)": [[268, "neural_compressor.experimental.nas.BasicNAS.execute"]], "init_by_cfg() (neural_compressor.experimental.nas.basicnas method)": [[268, "neural_compressor.experimental.nas.BasicNAS.init_by_cfg"]], "init_cfg() (neural_compressor.experimental.nas.dynas method)": [[268, "neural_compressor.experimental.nas.DyNAS.init_cfg"]], "init_for_search() (neural_compressor.experimental.nas.dynas method)": [[268, "neural_compressor.experimental.nas.DyNAS.init_for_search"]], "neural_compressor.experimental.nas": [[268, "module-neural_compressor.experimental.nas"]], "pre_process() (neural_compressor.experimental.nas.basicnas method)": [[268, "neural_compressor.experimental.nas.BasicNAS.pre_process"]], "search() (neural_compressor.experimental.nas.dynas method)": [[268, "neural_compressor.experimental.nas.DyNAS.search"]], "select_model_arch() (neural_compressor.experimental.nas.dynas method)": [[268, "neural_compressor.experimental.nas.DyNAS.select_model_arch"]], "nas (class in neural_compressor.experimental.nas.nas)": [[269, "neural_compressor.experimental.nas.nas.NAS"]], "nasbase (class in neural_compressor.experimental.nas.nas)": [[269, "neural_compressor.experimental.nas.nas.NASBase"]], "count_model_parameters() (neural_compressor.experimental.nas.nas.nasbase method)": [[269, "neural_compressor.experimental.nas.nas.NASBase.count_model_parameters"]], "dump_search_results() (neural_compressor.experimental.nas.nas.nasbase method)": [[269, "neural_compressor.experimental.nas.nas.NASBase.dump_search_results"]], "estimate() (neural_compressor.experimental.nas.nas.nasbase method)": [[269, "neural_compressor.experimental.nas.nas.NASBase.estimate"]], "find_best_model_archs() (neural_compressor.experimental.nas.nas.nasbase method)": [[269, "neural_compressor.experimental.nas.nas.NASBase.find_best_model_archs"]], "init_search_cfg() (neural_compressor.experimental.nas.nas.nasbase method)": [[269, "neural_compressor.experimental.nas.nas.NASBase.init_search_cfg"]], "load_search_results() (neural_compressor.experimental.nas.nas.nasbase method)": [[269, "neural_compressor.experimental.nas.nas.NASBase.load_search_results"]], "metrics_conversion() (neural_compressor.experimental.nas.nas.nasbase method)": [[269, "neural_compressor.experimental.nas.nas.NASBase.metrics_conversion"]], "model_builder (neural_compressor.experimental.nas.nas.nasbase property)": [[269, "neural_compressor.experimental.nas.nas.NASBase.model_builder"]], "neural_compressor.experimental.nas.nas": [[269, "module-neural_compressor.experimental.nas.nas"]], "params_vec2params_dict() (neural_compressor.experimental.nas.nas.nasbase method)": [[269, "neural_compressor.experimental.nas.nas.NASBase.params_vec2params_dict"]], "search() (neural_compressor.experimental.nas.nas.nasbase method)": [[269, "neural_compressor.experimental.nas.nas.NASBase.search"]], "search_algorithm (neural_compressor.experimental.nas.nas.nasbase property)": [[269, "neural_compressor.experimental.nas.nas.NASBase.search_algorithm"]], "search_space (neural_compressor.experimental.nas.nas.nasbase property)": [[269, "neural_compressor.experimental.nas.nas.NASBase.search_space"]], "select_model_arch() (neural_compressor.experimental.nas.nas.nasbase method)": [[269, "neural_compressor.experimental.nas.nas.NASBase.select_model_arch"]], "create_search_space_pool() (in module neural_compressor.experimental.nas.nas_utils)": [[270, "neural_compressor.experimental.nas.nas_utils.create_search_space_pool"]], "find_pareto_front() (in module neural_compressor.experimental.nas.nas_utils)": [[270, "neural_compressor.experimental.nas.nas_utils.find_pareto_front"]], "nas_registry() (in module neural_compressor.experimental.nas.nas_utils)": [[270, "neural_compressor.experimental.nas.nas_utils.nas_registry"]], "neural_compressor.experimental.nas.nas_utils": [[270, "module-neural_compressor.experimental.nas.nas_utils"]], "bayesianoptimizationsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[271, "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher"]], "gridsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[271, "neural_compressor.experimental.nas.search_algorithms.GridSearcher"]], "randomsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[271, "neural_compressor.experimental.nas.search_algorithms.RandomSearcher"]], "searcher (class in neural_compressor.experimental.nas.search_algorithms)": [[271, "neural_compressor.experimental.nas.search_algorithms.Searcher"]], "get_feedback() (neural_compressor.experimental.nas.search_algorithms.bayesianoptimizationsearcher method)": [[271, "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher.get_feedback"]], "get_feedback() (neural_compressor.experimental.nas.search_algorithms.searcher method)": [[271, "neural_compressor.experimental.nas.search_algorithms.Searcher.get_feedback"]], "indices2params_vec() (neural_compressor.experimental.nas.search_algorithms.bayesianoptimizationsearcher method)": [[271, "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher.indices2params_vec"]], "neural_compressor.experimental.nas.search_algorithms": [[271, "module-neural_compressor.experimental.nas.search_algorithms"]], "params_vec2params_dict() (neural_compressor.experimental.nas.search_algorithms.searcher method)": [[271, "neural_compressor.experimental.nas.search_algorithms.Searcher.params_vec2params_dict"]], "suggest() (neural_compressor.experimental.nas.search_algorithms.bayesianoptimizationsearcher method)": [[271, "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher.suggest"]], "suggest() (neural_compressor.experimental.nas.search_algorithms.gridsearcher method)": [[271, "neural_compressor.experimental.nas.search_algorithms.GridSearcher.suggest"]], "suggest() (neural_compressor.experimental.nas.search_algorithms.randomsearcher method)": [[271, "neural_compressor.experimental.nas.search_algorithms.RandomSearcher.suggest"]], "suggest() (neural_compressor.experimental.nas.search_algorithms.searcher method)": [[271, "neural_compressor.experimental.nas.search_algorithms.Searcher.suggest"]], "gradientsensitivitypruner (class in neural_compressor.experimental.pruner_legacy.gradient_sensitivity)": [[272, "neural_compressor.experimental.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner"]], "compute_mask() (neural_compressor.experimental.pruner_legacy.gradient_sensitivity.gradientsensitivitypruner method)": [[272, "neural_compressor.experimental.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner.compute_mask"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[272, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"]], "on_epoch_begin() (neural_compressor.experimental.pruner_legacy.gradient_sensitivity.gradientsensitivitypruner method)": [[272, "neural_compressor.experimental.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner.on_epoch_begin"]], "on_epoch_end() (neural_compressor.experimental.pruner_legacy.gradient_sensitivity.gradientsensitivitypruner method)": [[272, "neural_compressor.experimental.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner.on_epoch_end"]], "on_step_begin() (neural_compressor.experimental.pruner_legacy.gradient_sensitivity.gradientsensitivitypruner method)": [[272, "neural_compressor.experimental.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner.on_step_begin"]], "on_step_end() (neural_compressor.experimental.pruner_legacy.gradient_sensitivity.gradientsensitivitypruner method)": [[272, "neural_compressor.experimental.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner.on_step_end"]], "parse_weight_name() (neural_compressor.experimental.pruner_legacy.gradient_sensitivity.gradientsensitivitypruner method)": [[272, "neural_compressor.experimental.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner.parse_weight_name"]], "prune_by_importance() (neural_compressor.experimental.pruner_legacy.gradient_sensitivity.gradientsensitivitypruner method)": [[272, "neural_compressor.experimental.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner.prune_by_importance"]], "prune_weight() (neural_compressor.experimental.pruner_legacy.gradient_sensitivity.gradientsensitivitypruner method)": [[272, "neural_compressor.experimental.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner.prune_weight"]], "update_importance_abs() (neural_compressor.experimental.pruner_legacy.gradient_sensitivity.gradientsensitivitypruner method)": [[272, "neural_compressor.experimental.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner.update_importance_abs"]], "update_importance_elementwise() (neural_compressor.experimental.pruner_legacy.gradient_sensitivity.gradientsensitivitypruner method)": [[272, "neural_compressor.experimental.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner.update_importance_elementwise"]], "update_importance_weighted() (neural_compressor.experimental.pruner_legacy.gradient_sensitivity.gradientsensitivitypruner method)": [[272, "neural_compressor.experimental.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner.update_importance_weighted"]], "grouplassopruner (class in neural_compressor.experimental.pruner_legacy.group_lasso)": [[273, "neural_compressor.experimental.pruner_legacy.group_lasso.GroupLassoPruner"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[273, "module-neural_compressor.experimental.pruner_legacy.group_lasso"]], "on_before_optimizer_step() (neural_compressor.experimental.pruner_legacy.group_lasso.grouplassopruner method)": [[273, "neural_compressor.experimental.pruner_legacy.group_lasso.GroupLassoPruner.on_before_optimizer_step"]], "neural_compressor.experimental.pruner_legacy": [[274, "module-neural_compressor.experimental.pruner_legacy"]], "basicmagnitudepruner (class in neural_compressor.experimental.pruner_legacy.magnitude)": [[275, "neural_compressor.experimental.pruner_legacy.magnitude.BasicMagnitudePruner"]], "compute_mask() (neural_compressor.experimental.pruner_legacy.magnitude.basicmagnitudepruner method)": [[275, "neural_compressor.experimental.pruner_legacy.magnitude.BasicMagnitudePruner.compute_mask"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[275, "module-neural_compressor.experimental.pruner_legacy.magnitude"]], "on_epoch_begin() (neural_compressor.experimental.pruner_legacy.magnitude.basicmagnitudepruner method)": [[275, "neural_compressor.experimental.pruner_legacy.magnitude.BasicMagnitudePruner.on_epoch_begin"]], "on_epoch_end() (neural_compressor.experimental.pruner_legacy.magnitude.basicmagnitudepruner method)": [[275, "neural_compressor.experimental.pruner_legacy.magnitude.BasicMagnitudePruner.on_epoch_end"]], "on_step_begin() (neural_compressor.experimental.pruner_legacy.magnitude.basicmagnitudepruner method)": [[275, "neural_compressor.experimental.pruner_legacy.magnitude.BasicMagnitudePruner.on_step_begin"]], "on_step_end() (neural_compressor.experimental.pruner_legacy.magnitude.basicmagnitudepruner method)": [[275, "neural_compressor.experimental.pruner_legacy.magnitude.BasicMagnitudePruner.on_step_end"]], "patternlockpruner (class in neural_compressor.experimental.pruner_legacy.pattern_lock)": [[276, "neural_compressor.experimental.pruner_legacy.pattern_lock.PatternLockPruner"]], "compute_mask() (neural_compressor.experimental.pruner_legacy.pattern_lock.patternlockpruner method)": [[276, "neural_compressor.experimental.pruner_legacy.pattern_lock.PatternLockPruner.compute_mask"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[276, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"]], "on_epoch_begin() (neural_compressor.experimental.pruner_legacy.pattern_lock.patternlockpruner method)": [[276, "neural_compressor.experimental.pruner_legacy.pattern_lock.PatternLockPruner.on_epoch_begin"]], "on_epoch_end() (neural_compressor.experimental.pruner_legacy.pattern_lock.patternlockpruner method)": [[276, "neural_compressor.experimental.pruner_legacy.pattern_lock.PatternLockPruner.on_epoch_end"]], "on_step_begin() (neural_compressor.experimental.pruner_legacy.pattern_lock.patternlockpruner method)": [[276, "neural_compressor.experimental.pruner_legacy.pattern_lock.PatternLockPruner.on_step_begin"]], "on_step_end() (neural_compressor.experimental.pruner_legacy.pattern_lock.patternlockpruner method)": [[276, "neural_compressor.experimental.pruner_legacy.pattern_lock.PatternLockPruner.on_step_end"]], "update_weights() (neural_compressor.experimental.pruner_legacy.pattern_lock.patternlockpruner method)": [[276, "neural_compressor.experimental.pruner_legacy.pattern_lock.PatternLockPruner.update_weights"]], "pruner (class in neural_compressor.experimental.pruner_legacy.pruner)": [[277, "neural_compressor.experimental.pruner_legacy.pruner.Pruner"]], "neural_compressor.experimental.pruner_legacy.pruner": [[277, "module-neural_compressor.experimental.pruner_legacy.pruner"]], "on_before_optimizer_step() (neural_compressor.experimental.pruner_legacy.pruner.pruner method)": [[277, "neural_compressor.experimental.pruner_legacy.pruner.Pruner.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.experimental.pruner_legacy.pruner.pruner method)": [[277, "neural_compressor.experimental.pruner_legacy.pruner.Pruner.on_epoch_begin"]], "on_epoch_end() (neural_compressor.experimental.pruner_legacy.pruner.pruner method)": [[277, "neural_compressor.experimental.pruner_legacy.pruner.Pruner.on_epoch_end"]], "on_step_begin() (neural_compressor.experimental.pruner_legacy.pruner.pruner method)": [[277, "neural_compressor.experimental.pruner_legacy.pruner.Pruner.on_step_begin"]], "on_step_end() (neural_compressor.experimental.pruner_legacy.pruner.pruner method)": [[277, "neural_compressor.experimental.pruner_legacy.pruner.Pruner.on_step_end"]], "on_train_begin() (neural_compressor.experimental.pruner_legacy.pruner.pruner method)": [[277, "neural_compressor.experimental.pruner_legacy.pruner.Pruner.on_train_begin"]], "on_train_end() (neural_compressor.experimental.pruner_legacy.pruner.pruner method)": [[277, "neural_compressor.experimental.pruner_legacy.pruner.Pruner.on_train_end"]], "pruner_registry() (in module neural_compressor.experimental.pruner_legacy.pruner)": [[277, "neural_compressor.experimental.pruner_legacy.pruner.pruner_registry"]], "update_sparsity() (neural_compressor.experimental.pruner_legacy.pruner.pruner method)": [[277, "neural_compressor.experimental.pruner_legacy.pruner.Pruner.update_sparsity"]], "pruning (class in neural_compressor.experimental.pruning)": [[278, "neural_compressor.experimental.pruning.Pruning"]], "tfpruningcallback (class in neural_compressor.experimental.pruning)": [[278, "neural_compressor.experimental.pruning.TfPruningCallback"]], "conf (neural_compressor.experimental.pruning.pruning attribute)": [[278, "neural_compressor.experimental.pruning.Pruning.conf"]], "evaluation_distributed (neural_compressor.experimental.pruning.pruning property)": [[278, "neural_compressor.experimental.pruning.Pruning.evaluation_distributed"]], "execute() (neural_compressor.experimental.pruning.pruning method)": [[278, "neural_compressor.experimental.pruning.Pruning.execute"]], "generate_hooks() (neural_compressor.experimental.pruning.pruning method)": [[278, "neural_compressor.experimental.pruning.Pruning.generate_hooks"]], "generate_pruners() (neural_compressor.experimental.pruning.pruning method)": [[278, "neural_compressor.experimental.pruning.Pruning.generate_pruners"]], "get_sparsity_ratio() (neural_compressor.experimental.pruning.pruning method)": [[278, "neural_compressor.experimental.pruning.Pruning.get_sparsity_ratio"]], "neural_compressor.experimental.pruning": [[278, "module-neural_compressor.experimental.pruning"]], "on_after_compute_loss() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[278, "neural_compressor.experimental.pruning.TfPruningCallback.on_after_compute_loss"]], "on_batch_begin() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[278, "neural_compressor.experimental.pruning.TfPruningCallback.on_batch_begin"]], "on_batch_end() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[278, "neural_compressor.experimental.pruning.TfPruningCallback.on_batch_end"]], "on_epoch_begin() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[278, "neural_compressor.experimental.pruning.TfPruningCallback.on_epoch_begin"]], "on_epoch_end() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[278, "neural_compressor.experimental.pruning.TfPruningCallback.on_epoch_end"]], "on_step_begin() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[278, "neural_compressor.experimental.pruning.TfPruningCallback.on_step_begin"]], "on_step_end() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[278, "neural_compressor.experimental.pruning.TfPruningCallback.on_step_end"]], "on_train_begin() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[278, "neural_compressor.experimental.pruning.TfPruningCallback.on_train_begin"]], "on_train_end() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[278, "neural_compressor.experimental.pruning.TfPruningCallback.on_train_end"]], "post_epoch_end() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[278, "neural_compressor.experimental.pruning.TfPruningCallback.post_epoch_end"]], "pre_epoch_begin() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[278, "neural_compressor.experimental.pruning.TfPruningCallback.pre_epoch_begin"]], "pre_process() (neural_compressor.experimental.pruning.pruning method)": [[278, "neural_compressor.experimental.pruning.Pruning.pre_process"]], "prepare() (neural_compressor.experimental.pruning.pruning method)": [[278, "neural_compressor.experimental.pruning.Pruning.prepare"]], "pruners (neural_compressor.experimental.pruning.pruning attribute)": [[278, "neural_compressor.experimental.pruning.Pruning.pruners"]], "pruning_func (neural_compressor.experimental.pruning.pruning property)": [[278, "neural_compressor.experimental.pruning.Pruning.pruning_func"]], "train_distributed (neural_compressor.experimental.pruning.pruning property)": [[278, "neural_compressor.experimental.pruning.Pruning.train_distributed"]], "update_items_for_all_pruners() (neural_compressor.experimental.pruning.pruning method)": [[278, "neural_compressor.experimental.pruning.Pruning.update_items_for_all_pruners"]], "patterns (class in neural_compressor.experimental.pruning_recipes)": [[279, "neural_compressor.experimental.pruning_recipes.PATTERNS"]], "neural_compressor.experimental.pruning_recipes": [[279, "module-neural_compressor.experimental.pruning_recipes"]], "patterns (neural_compressor.experimental.pruning_recipes.patterns attribute)": [[279, "neural_compressor.experimental.pruning_recipes.PATTERNS.patterns"]], "support_pattern() (neural_compressor.experimental.pruning_recipes.patterns class method)": [[279, "neural_compressor.experimental.pruning_recipes.PATTERNS.support_pattern"]], "patterns (class in neural_compressor.experimental.pruning_recipes.patterns)": [[280, "neural_compressor.experimental.pruning_recipes.patterns.PATTERNS"]], "neural_compressor.experimental.pruning_recipes.patterns": [[280, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "patterns (neural_compressor.experimental.pruning_recipes.patterns.patterns attribute)": [[280, "neural_compressor.experimental.pruning_recipes.patterns.PATTERNS.patterns"]], "support_pattern() (neural_compressor.experimental.pruning_recipes.patterns.patterns class method)": [[280, "neural_compressor.experimental.pruning_recipes.patterns.PATTERNS.support_pattern"]], "patterns (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[281, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS"]], "patternbase (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[281, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase"]], "compute_sparsity() (neural_compressor.experimental.pruning_recipes.patterns.pattern.patternbase method)": [[281, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase.compute_sparsity"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[281, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "pattern_registry() (in module neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[281, "neural_compressor.experimental.pruning_recipes.patterns.pattern.pattern_registry"]], "patterns (neural_compressor.experimental.pruning_recipes.patterns.pattern.patterns attribute)": [[281, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS.patterns"]], "reduce() (neural_compressor.experimental.pruning_recipes.patterns.pattern.patternbase method)": [[281, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase.reduce"]], "reshape() (neural_compressor.experimental.pruning_recipes.patterns.pattern.patternbase method)": [[281, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase.reshape"]], "support_pattern() (neural_compressor.experimental.pruning_recipes.patterns.pattern.patterns class method)": [[281, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS.support_pattern"]], "tilepatternbase (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[282, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePatternBase"]], "tilepattern_1x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[282, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x1"]], "tilepattern_1x16 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[282, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x16"]], "tilepattern_1x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[282, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x2"]], "tilepattern_2x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[282, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_2x2"]], "tilepattern_4x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[282, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_4x1"]], "compute_sparsity() (neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.tilepatternbase method)": [[282, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePatternBase.compute_sparsity"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[282, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "repeat_mask() (neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.tilepatternbase method)": [[282, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePatternBase.repeat_mask"]], "pruning (class in neural_compressor.experimental.pruning_v2)": [[283, "neural_compressor.experimental.pruning_v2.Pruning"]], "tfpruningcallback (class in neural_compressor.experimental.pruning_v2)": [[283, "neural_compressor.experimental.pruning_v2.TfPruningCallback"]], "conf (neural_compressor.experimental.pruning_v2.pruning attribute)": [[283, "neural_compressor.experimental.pruning_v2.Pruning.conf"]], "evaluation_distributed (neural_compressor.experimental.pruning_v2.pruning property)": [[283, "neural_compressor.experimental.pruning_v2.Pruning.evaluation_distributed"]], "execute() (neural_compressor.experimental.pruning_v2.pruning method)": [[283, "neural_compressor.experimental.pruning_v2.Pruning.execute"]], "generate_hooks() (neural_compressor.experimental.pruning_v2.pruning method)": [[283, "neural_compressor.experimental.pruning_v2.Pruning.generate_hooks"]], "get_sparsity_ratio() (neural_compressor.experimental.pruning_v2.pruning method)": [[283, "neural_compressor.experimental.pruning_v2.Pruning.get_sparsity_ratio"]], "neural_compressor.experimental.pruning_v2": [[283, "module-neural_compressor.experimental.pruning_v2"]], "on_after_compute_loss() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[283, "neural_compressor.experimental.pruning_v2.TfPruningCallback.on_after_compute_loss"]], "on_batch_begin() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[283, "neural_compressor.experimental.pruning_v2.TfPruningCallback.on_batch_begin"]], "on_batch_end() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[283, "neural_compressor.experimental.pruning_v2.TfPruningCallback.on_batch_end"]], "on_epoch_begin() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[283, "neural_compressor.experimental.pruning_v2.TfPruningCallback.on_epoch_begin"]], "on_epoch_end() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[283, "neural_compressor.experimental.pruning_v2.TfPruningCallback.on_epoch_end"]], "on_step_begin() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[283, "neural_compressor.experimental.pruning_v2.TfPruningCallback.on_step_begin"]], "on_step_end() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[283, "neural_compressor.experimental.pruning_v2.TfPruningCallback.on_step_end"]], "on_train_begin() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[283, "neural_compressor.experimental.pruning_v2.TfPruningCallback.on_train_begin"]], "on_train_end() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[283, "neural_compressor.experimental.pruning_v2.TfPruningCallback.on_train_end"]], "post_epoch_end() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[283, "neural_compressor.experimental.pruning_v2.TfPruningCallback.post_epoch_end"]], "pre_epoch_begin() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[283, "neural_compressor.experimental.pruning_v2.TfPruningCallback.pre_epoch_begin"]], "pre_process() (neural_compressor.experimental.pruning_v2.pruning method)": [[283, "neural_compressor.experimental.pruning_v2.Pruning.pre_process"]], "prepare() (neural_compressor.experimental.pruning_v2.pruning method)": [[283, "neural_compressor.experimental.pruning_v2.Pruning.prepare"]], "pruners (neural_compressor.experimental.pruning_v2.pruning attribute)": [[283, "neural_compressor.experimental.pruning_v2.Pruning.pruners"]], "pruning_func (neural_compressor.experimental.pruning_v2.pruning property)": [[283, "neural_compressor.experimental.pruning_v2.Pruning.pruning_func"]], "train_distributed (neural_compressor.experimental.pruning_v2.pruning property)": [[283, "neural_compressor.experimental.pruning_v2.Pruning.train_distributed"]], "update_config() (neural_compressor.experimental.pruning_v2.pruning method)": [[283, "neural_compressor.experimental.pruning_v2.Pruning.update_config"]], "neural_compressor.experimental.pytorch_pruner": [[284, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[285, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "m (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[286, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.M"]], "n (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[286, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.N"]], "pattern (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[286, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern"]], "patternninm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[286, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM"]], "patternnxm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[286, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM"]], "block_size (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm attribute)": [[286, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.block_size"]], "get_block_size_dict() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[286, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_block_size_dict"]], "get_block_size_dict() (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm method)": [[286, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.get_block_size_dict"]], "get_mask_single() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[286, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_mask_single"]], "get_masks() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[286, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_masks"]], "get_masks_global() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[286, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_masks_global"]], "get_masks_global() (neural_compressor.experimental.pytorch_pruner.patterns.patternninm method)": [[286, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.get_masks_global"]], "get_masks_global() (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm method)": [[286, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.get_masks_global"]], "get_masks_local() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[286, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_masks_local"]], "get_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[286, "neural_compressor.experimental.pytorch_pruner.patterns.get_pattern"]], "get_pattern_lock_masks() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[286, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_pattern_lock_masks"]], "get_pattern_lock_masks() (neural_compressor.experimental.pytorch_pruner.patterns.patternninm method)": [[286, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.get_pattern_lock_masks"]], "get_pattern_lock_masks() (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm method)": [[286, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.get_pattern_lock_masks"]], "get_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[286, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_sparsity_ratio"]], "get_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.patterns.patternninm method)": [[286, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.get_sparsity_ratio"]], "get_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm method)": [[286, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.get_sparsity_ratio"]], "is_global (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[286, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.is_global"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[286, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "pattern (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[286, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.pattern"]], "register_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[286, "neural_compressor.experimental.pytorch_pruner.patterns.register_pattern"]], "check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[287, "neural_compressor.experimental.pytorch_pruner.prune_utils.check_config"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[287, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "parse_not_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[287, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_not_to_prune"]], "parse_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[287, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_to_prune"]], "process_and_check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[287, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_and_check_config"]], "process_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[287, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_config"]], "reset_non_value_to_default() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[287, "neural_compressor.experimental.pytorch_pruner.prune_utils.reset_non_value_to_default"]], "magnitudepruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[288, "neural_compressor.experimental.pytorch_pruner.pruner.MagnitudePruner"]], "patternlockpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[288, "neural_compressor.experimental.pytorch_pruner.pruner.PatternLockPruner"]], "pruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[288, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner"]], "snipmomentumpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[288, "neural_compressor.experimental.pytorch_pruner.pruner.SnipMomentumPruner"]], "snippruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[288, "neural_compressor.experimental.pytorch_pruner.pruner.SnipPruner"]], "check_is_pruned_step() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[288, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.check_is_pruned_step"]], "config (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[288, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.config"]], "current_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[288, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.current_sparsity_ratio"]], "end_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[288, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.end_step"]], "get_pruner() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[288, "neural_compressor.experimental.pytorch_pruner.pruner.get_pruner"]], "global_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[288, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.global_step"]], "mask_weights() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[288, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.mask_weights"]], "masks (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[288, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.masks"]], "max_sparsity_ratio_per_layer (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[288, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.max_sparsity_ratio_per_layer"]], "modules (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[288, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.modules"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[288, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "on_after_eval() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[288, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_after_eval"]], "on_after_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruner.patternlockpruner method)": [[288, "neural_compressor.experimental.pytorch_pruner.pruner.PatternLockPruner.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[288, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruner.snipmomentumpruner method)": [[288, "neural_compressor.experimental.pytorch_pruner.pruner.SnipMomentumPruner.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruner.snippruner method)": [[288, "neural_compressor.experimental.pytorch_pruner.pruner.SnipPruner.on_after_optimizer_step"]], "on_before_eval() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[288, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_before_eval"]], "on_before_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[288, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[288, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_epoch_begin"]], "on_epoch_end() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[288, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_epoch_end"]], "on_step_begin() (neural_compressor.experimental.pytorch_pruner.pruner.patternlockpruner method)": [[288, "neural_compressor.experimental.pytorch_pruner.pruner.PatternLockPruner.on_step_begin"]], "on_step_begin() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[288, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_step_begin"]], "on_step_end() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[288, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_step_end"]], "on_train_begin() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[288, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_train_begin"]], "on_train_end() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[288, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_train_end"]], "pattern (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[288, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.pattern"]], "register_pruners() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[288, "neural_compressor.experimental.pytorch_pruner.pruner.register_pruners"]], "scheduler (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[288, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scheduler"]], "scores (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[288, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scores"]], "start_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[288, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.start_step"]], "target_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[288, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.target_sparsity_ratio"]], "update_frequency_on_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[288, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.update_frequency_on_step"]], "update_scores() (neural_compressor.experimental.pytorch_pruner.pruner.magnitudepruner method)": [[288, "neural_compressor.experimental.pytorch_pruner.pruner.MagnitudePruner.update_scores"]], "update_scores() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[288, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.update_scores"]], "pruning (class in neural_compressor.experimental.pytorch_pruner.pruning)": [[289, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning"]], "config_file_path (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[289, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.config_file_path"]], "get_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[289, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.get_sparsity_ratio"]], "model (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[289, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.model"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[289, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "on_after_eval() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[289, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_after_eval"]], "on_after_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[289, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_after_optimizer_step"]], "on_before_eval() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[289, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_before_eval"]], "on_before_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[289, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[289, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_epoch_begin"]], "on_epoch_end() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[289, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_epoch_end"]], "on_step_begin() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[289, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_step_begin"]], "on_step_end() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[289, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_step_end"]], "on_train_begin() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[289, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_train_begin"]], "on_train_end() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[289, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_train_end"]], "prepare() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[289, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.prepare"]], "pruner_info (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[289, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruner_info"]], "pruners (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[289, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruners"]], "update_items_for_all_pruners() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[289, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.update_items_for_all_pruners"]], "iterativescheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[290, "neural_compressor.experimental.pytorch_pruner.scheduler.IterativeScheduler"]], "oneshotscheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[290, "neural_compressor.experimental.pytorch_pruner.scheduler.OneshotScheduler"]], "scheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[290, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler"]], "config (neural_compressor.experimental.pytorch_pruner.scheduler.scheduler attribute)": [[290, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler.config"]], "get_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[290, "neural_compressor.experimental.pytorch_pruner.scheduler.get_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[290, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "register_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[290, "neural_compressor.experimental.pytorch_pruner.scheduler.register_scheduler"]], "update_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.scheduler.iterativescheduler method)": [[290, "neural_compressor.experimental.pytorch_pruner.scheduler.IterativeScheduler.update_sparsity_ratio"]], "update_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.scheduler.oneshotscheduler method)": [[290, "neural_compressor.experimental.pytorch_pruner.scheduler.OneshotScheduler.update_sparsity_ratio"]], "update_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.scheduler.scheduler method)": [[290, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler.update_sparsity_ratio"]], "quantization (class in neural_compressor.experimental.quantization)": [[291, "neural_compressor.experimental.quantization.Quantization"]], "calib_dataloader (neural_compressor.experimental.quantization.quantization property)": [[291, "neural_compressor.experimental.quantization.Quantization.calib_dataloader"]], "dataset() (neural_compressor.experimental.quantization.quantization method)": [[291, "neural_compressor.experimental.quantization.Quantization.dataset"]], "distributed_execute() (neural_compressor.experimental.quantization.quantization method)": [[291, "neural_compressor.experimental.quantization.Quantization.distributed_execute"]], "execute() (neural_compressor.experimental.quantization.quantization method)": [[291, "neural_compressor.experimental.quantization.Quantization.execute"]], "metric (neural_compressor.experimental.quantization.quantization property)": [[291, "neural_compressor.experimental.quantization.Quantization.metric"]], "model (neural_compressor.experimental.quantization.quantization property)": [[291, "neural_compressor.experimental.quantization.Quantization.model"]], "neural_compressor.experimental.quantization": [[291, "module-neural_compressor.experimental.quantization"]], "objective (neural_compressor.experimental.quantization.quantization property)": [[291, "neural_compressor.experimental.quantization.Quantization.objective"]], "postprocess (neural_compressor.experimental.quantization.quantization property)": [[291, "neural_compressor.experimental.quantization.Quantization.postprocess"]], "pre_process() (neural_compressor.experimental.quantization.quantization method)": [[291, "neural_compressor.experimental.quantization.Quantization.pre_process"]], "q_func (neural_compressor.experimental.quantization.quantization property)": [[291, "neural_compressor.experimental.quantization.Quantization.q_func"]], "scheduler (class in neural_compressor.experimental.scheduler)": [[292, "neural_compressor.experimental.scheduler.Scheduler"]], "append() (neural_compressor.experimental.scheduler.scheduler method)": [[292, "neural_compressor.experimental.scheduler.Scheduler.append"]], "combine() (neural_compressor.experimental.scheduler.scheduler method)": [[292, "neural_compressor.experimental.scheduler.Scheduler.combine"]], "eval_func (neural_compressor.experimental.scheduler.scheduler property)": [[292, "neural_compressor.experimental.scheduler.Scheduler.eval_func"]], "model (neural_compressor.experimental.scheduler.scheduler property)": [[292, "neural_compressor.experimental.scheduler.Scheduler.model"]], "neural_compressor.experimental.scheduler": [[292, "module-neural_compressor.experimental.scheduler"]], "train_func (neural_compressor.experimental.scheduler.scheduler property)": [[292, "neural_compressor.experimental.scheduler.Scheduler.train_func"]], "benchmark (class in neural_compressor)": [[293, "neural_compressor.Benchmark"]], "distillationconfig (class in neural_compressor)": [[293, "neural_compressor.DistillationConfig"]], "mixedprecisionconfig (class in neural_compressor)": [[293, "neural_compressor.MixedPrecisionConfig"]], "posttrainingquantconfig (class in neural_compressor)": [[293, "neural_compressor.PostTrainingQuantConfig"]], "quantizationawaretrainingconfig (class in neural_compressor)": [[293, "neural_compressor.QuantizationAwareTrainingConfig"]], "weightpruningconfig (class in neural_compressor)": [[293, "neural_compressor.WeightPruningConfig"]], "approach (neural_compressor.posttrainingquantconfig property)": [[293, "neural_compressor.PostTrainingQuantConfig.approach"]], "approach (neural_compressor.quantizationawaretrainingconfig property)": [[293, "neural_compressor.QuantizationAwareTrainingConfig.approach"]], "b_dataloader (neural_compressor.benchmark property)": [[293, "neural_compressor.Benchmark.b_dataloader"]], "b_func (neural_compressor.benchmark property)": [[293, "neural_compressor.Benchmark.b_func"]], "config_instance() (neural_compressor.benchmark method)": [[293, "neural_compressor.Benchmark.config_instance"]], "criterion (neural_compressor.distillationconfig property)": [[293, "neural_compressor.DistillationConfig.criterion"]], "generate_prefix() (neural_compressor.benchmark method)": [[293, "neural_compressor.Benchmark.generate_prefix"]], "model (neural_compressor.benchmark property)": [[293, "neural_compressor.Benchmark.model"]], "neural_compressor": [[293, "module-neural_compressor"]], "optimizer (neural_compressor.distillationconfig property)": [[293, "neural_compressor.DistillationConfig.optimizer"]], "results (neural_compressor.benchmark property)": [[293, "neural_compressor.Benchmark.results"]], "run_instance() (neural_compressor.benchmark method)": [[293, "neural_compressor.Benchmark.run_instance"]], "set_random_seed() (in module neural_compressor)": [[293, "neural_compressor.set_random_seed"]], "set_tensorboard() (in module neural_compressor)": [[293, "neural_compressor.set_tensorboard"]], "set_workspace() (in module neural_compressor)": [[293, "neural_compressor.set_workspace"]], "summary_benchmark() (neural_compressor.benchmark method)": [[293, "neural_compressor.Benchmark.summary_benchmark"]], "teacher_model (neural_compressor.distillationconfig property)": [[293, "neural_compressor.DistillationConfig.teacher_model"]], "tuning_criterion (neural_compressor.posttrainingquantconfig property)": [[293, "neural_compressor.PostTrainingQuantConfig.tuning_criterion"]], "weight_compression (neural_compressor.weightpruningconfig property)": [[293, "neural_compressor.WeightPruningConfig.weight_compression"]], "bleu (class in neural_compressor.metric.bleu)": [[294, "neural_compressor.metric.bleu.BLEU"]], "unicoderegex (class in neural_compressor.metric.bleu)": [[294, "neural_compressor.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.metric.bleu)": [[294, "neural_compressor.metric.bleu.bleu_tokenize"]], "labels (neural_compressor.metric.bleu.bleu attribute)": [[294, "neural_compressor.metric.bleu.BLEU.labels"]], "neural_compressor.metric.bleu": [[294, "module-neural_compressor.metric.bleu"]], "nondigit_punct_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[294, "neural_compressor.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "predictions (neural_compressor.metric.bleu.bleu attribute)": [[294, "neural_compressor.metric.bleu.BLEU.predictions"]], "property_chars() (neural_compressor.metric.bleu.unicoderegex method)": [[294, "neural_compressor.metric.bleu.UnicodeRegex.property_chars"]], "punct_nondigit_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[294, "neural_compressor.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "reset() (neural_compressor.metric.bleu.bleu method)": [[294, "neural_compressor.metric.bleu.BLEU.reset"]], "result() (neural_compressor.metric.bleu.bleu method)": [[294, "neural_compressor.metric.bleu.BLEU.result"]], "symbol_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[294, "neural_compressor.metric.bleu.UnicodeRegex.symbol_re"]], "update() (neural_compressor.metric.bleu.bleu method)": [[294, "neural_compressor.metric.bleu.BLEU.update"]], "compute_bleu() (in module neural_compressor.metric.bleu_util)": [[295, "neural_compressor.metric.bleu_util.compute_bleu"]], "neural_compressor.metric.bleu_util": [[295, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[296, "module-neural_compressor.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.metric.coco_tools)": [[297, "neural_compressor.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.metric.coco_tools)": [[297, "neural_compressor.metric.coco_tools.COCOWrapper"]], "computemetrics() (neural_compressor.metric.coco_tools.cocoevalwrapper method)": [[297, "neural_compressor.metric.coco_tools.COCOEvalWrapper.ComputeMetrics"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.metric.coco_tools)": [[297, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.metric.coco_tools)": [[297, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.metric.coco_tools)": [[297, "neural_compressor.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "getagnosticmode() (neural_compressor.metric.coco_tools.cocoevalwrapper method)": [[297, "neural_compressor.metric.coco_tools.COCOEvalWrapper.GetAgnosticMode"]], "getcategory() (neural_compressor.metric.coco_tools.cocoevalwrapper method)": [[297, "neural_compressor.metric.coco_tools.COCOEvalWrapper.GetCategory"]], "getcategoryidlist() (neural_compressor.metric.coco_tools.cocoevalwrapper method)": [[297, "neural_compressor.metric.coco_tools.COCOEvalWrapper.GetCategoryIdList"]], "loadannotations() (neural_compressor.metric.coco_tools.cocowrapper method)": [[297, "neural_compressor.metric.coco_tools.COCOWrapper.LoadAnnotations"]], "accumulate() (neural_compressor.metric.coco_tools.cocoevalwrapper method)": [[297, "neural_compressor.metric.coco_tools.COCOEvalWrapper.accumulate"]], "dataset (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[297, "neural_compressor.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[297, "neural_compressor.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.metric.coco_tools": [[297, "module-neural_compressor.metric.coco_tools"]], "evaluate() (in module neural_compressor.metric.evaluate_squad)": [[298, "neural_compressor.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.metric.evaluate_squad)": [[298, "neural_compressor.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.metric.evaluate_squad)": [[298, "neural_compressor.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.evaluate_squad)": [[298, "neural_compressor.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.metric.evaluate_squad": [[298, "module-neural_compressor.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.metric.f1)": [[299, "neural_compressor.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.metric.f1)": [[299, "neural_compressor.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.f1)": [[299, "neural_compressor.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[299, "module-neural_compressor.metric.f1"]], "normalize_answer() (in module neural_compressor.metric.f1)": [[299, "neural_compressor.metric.f1.normalize_answer"]], "basemetric (class in neural_compressor.metric)": [[300, "neural_compressor.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.metric)": [[300, "neural_compressor.metric.COCOmAPv2"]], "generaltopk (class in neural_compressor.metric)": [[300, "neural_compressor.metric.GeneralTopK"]], "metrics (class in neural_compressor.metric)": [[300, "neural_compressor.metric.METRICS"]], "metric (class in neural_compressor.metric)": [[300, "neural_compressor.metric.Metric"]], "squadf1 (class in neural_compressor.metric)": [[300, "neural_compressor.metric.SquadF1"]], "tensorflowtopk (class in neural_compressor.metric)": [[300, "neural_compressor.metric.TensorflowTopK"]], "hvd (neural_compressor.metric.basemetric property)": [[300, "neural_compressor.metric.BaseMetric.hvd"]], "k (neural_compressor.metric.generaltopk attribute)": [[300, "neural_compressor.metric.GeneralTopK.k"]], "k (neural_compressor.metric.tensorflowtopk attribute)": [[300, "neural_compressor.metric.TensorflowTopK.k"]], "metric (neural_compressor.metric.basemetric property)": [[300, "neural_compressor.metric.BaseMetric.metric"]], "metric_registry() (in module neural_compressor.metric)": [[300, "neural_compressor.metric.metric_registry"]], "metrics (neural_compressor.metric.metrics attribute)": [[300, "neural_compressor.metric.METRICS.metrics"]], "neural_compressor.metric": [[300, "module-neural_compressor.metric"]], "num_correct (neural_compressor.metric.generaltopk attribute)": [[300, "neural_compressor.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.metric.tensorflowtopk attribute)": [[300, "neural_compressor.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.metric.generaltopk attribute)": [[300, "neural_compressor.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.metric.tensorflowtopk attribute)": [[300, "neural_compressor.metric.TensorflowTopK.num_sample"]], "register() (neural_compressor.metric.metrics method)": [[300, "neural_compressor.metric.METRICS.register"]], "reset() (neural_compressor.metric.basemetric method)": [[300, "neural_compressor.metric.BaseMetric.reset"]], "reset() (neural_compressor.metric.cocomapv2 method)": [[300, "neural_compressor.metric.COCOmAPv2.reset"]], "reset() (neural_compressor.metric.generaltopk method)": [[300, "neural_compressor.metric.GeneralTopK.reset"]], "reset() (neural_compressor.metric.squadf1 method)": [[300, "neural_compressor.metric.SquadF1.reset"]], "reset() (neural_compressor.metric.tensorflowtopk method)": [[300, "neural_compressor.metric.TensorflowTopK.reset"]], "result() (neural_compressor.metric.basemetric method)": [[300, "neural_compressor.metric.BaseMetric.result"]], "result() (neural_compressor.metric.cocomapv2 method)": [[300, "neural_compressor.metric.COCOmAPv2.result"]], "result() (neural_compressor.metric.generaltopk method)": [[300, "neural_compressor.metric.GeneralTopK.result"]], "result() (neural_compressor.metric.squadf1 method)": [[300, "neural_compressor.metric.SquadF1.result"]], "result() (neural_compressor.metric.tensorflowtopk method)": [[300, "neural_compressor.metric.TensorflowTopK.result"]], "update() (neural_compressor.metric.basemetric method)": [[300, "neural_compressor.metric.BaseMetric.update"]], "update() (neural_compressor.metric.cocomapv2 method)": [[300, "neural_compressor.metric.COCOmAPv2.update"]], "update() (neural_compressor.metric.generaltopk method)": [[300, "neural_compressor.metric.GeneralTopK.update"]], "update() (neural_compressor.metric.squadf1 method)": [[300, "neural_compressor.metric.SquadF1.update"]], "update() (neural_compressor.metric.tensorflowtopk method)": [[300, "neural_compressor.metric.TensorflowTopK.update"]], "accuracy (class in neural_compressor.metric.metric)": [[301, "neural_compressor.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.metric.metric)": [[301, "neural_compressor.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.metric.metric)": [[301, "neural_compressor.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.metric.metric)": [[301, "neural_compressor.metric.metric.F1"]], "generaltopk (class in neural_compressor.metric.metric)": [[301, "neural_compressor.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.metric.metric)": [[301, "neural_compressor.metric.metric.Loss"]], "mae (class in neural_compressor.metric.metric)": [[301, "neural_compressor.metric.metric.MAE"]], "metrics (class in neural_compressor.metric.metric)": [[301, "neural_compressor.metric.metric.METRICS"]], "mse (class in neural_compressor.metric.metric)": [[301, "neural_compressor.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.metric.metric)": [[301, "neural_compressor.metric.metric.MXNetMetrics"]], "metric (class in neural_compressor.metric.metric)": [[301, "neural_compressor.metric.metric.Metric"]], "onnxrtglue (class in neural_compressor.metric.metric)": [[301, "neural_compressor.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.metric.metric)": [[301, "neural_compressor.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.metric.metric)": [[301, "neural_compressor.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.metric.metric)": [[301, "neural_compressor.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.metric.metric)": [[301, "neural_compressor.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.metric.metric)": [[301, "neural_compressor.metric.metric.RMSE"]], "roc (class in neural_compressor.metric.metric)": [[301, "neural_compressor.metric.metric.ROC"]], "squadf1 (class in neural_compressor.metric.metric)": [[301, "neural_compressor.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.metric.metric)": [[301, "neural_compressor.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.metric.metric)": [[301, "neural_compressor.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.metric.metric)": [[301, "neural_compressor.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.metric.metric)": [[301, "neural_compressor.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.metric.metric)": [[301, "neural_compressor.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.metric.metric)": [[301, "neural_compressor.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.metric.metric)": [[301, "neural_compressor.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.metric.metric)": [[301, "neural_compressor.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.metric.metric.mae attribute)": [[301, "neural_compressor.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.metric.metric.mse attribute)": [[301, "neural_compressor.metric.metric.MSE.compare_label"]], "compute() (neural_compressor.metric.metric.pytorchloss method)": [[301, "neural_compressor.metric.metric.PyTorchLoss.compute"]], "hvd (neural_compressor.metric.metric.basemetric property)": [[301, "neural_compressor.metric.metric.BaseMetric.hvd"]], "k (neural_compressor.metric.metric.generaltopk attribute)": [[301, "neural_compressor.metric.metric.GeneralTopK.k"]], "k (neural_compressor.metric.metric.tensorflowtopk attribute)": [[301, "neural_compressor.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.metric.metric.accuracy attribute)": [[301, "neural_compressor.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.metric.metric.mae attribute)": [[301, "neural_compressor.metric.metric.MAE.label_list"]], "label_list (neural_compressor.metric.metric.mse attribute)": [[301, "neural_compressor.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.metric.metric)": [[301, "neural_compressor.metric.metric.mIOU"]], "metric (neural_compressor.metric.metric.basemetric property)": [[301, "neural_compressor.metric.metric.BaseMetric.metric"]], "metric_registry() (in module neural_compressor.metric.metric)": [[301, "neural_compressor.metric.metric.metric_registry"]], "metrics (neural_compressor.metric.metric.metrics attribute)": [[301, "neural_compressor.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.metric.metric.mxnetmetrics attribute)": [[301, "neural_compressor.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtitmetrics attribute)": [[301, "neural_compressor.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtqlmetrics attribute)": [[301, "neural_compressor.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.metric.metric.pytorchmetrics attribute)": [[301, "neural_compressor.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.metric.metric.tensorflowmetrics attribute)": [[301, "neural_compressor.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.metric.metric.rmse attribute)": [[301, "neural_compressor.metric.metric.RMSE.mse"]], "neural_compressor.metric.metric": [[301, "module-neural_compressor.metric.metric"]], "num_correct (neural_compressor.metric.metric.generaltopk attribute)": [[301, "neural_compressor.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.metric.metric.tensorflowtopk attribute)": [[301, "neural_compressor.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.metric.metric.generaltopk attribute)": [[301, "neural_compressor.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.metric.metric.tensorflowtopk attribute)": [[301, "neural_compressor.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.metric.metric.accuracy attribute)": [[301, "neural_compressor.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.metric.metric.mae attribute)": [[301, "neural_compressor.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.metric.metric.mse attribute)": [[301, "neural_compressor.metric.metric.MSE.pred_list"]], "register() (neural_compressor.metric.metric.metrics method)": [[301, "neural_compressor.metric.metric.METRICS.register"]], "reset() (neural_compressor.metric.metric.accuracy method)": [[301, "neural_compressor.metric.metric.Accuracy.reset"]], "reset() (neural_compressor.metric.metric.basemetric method)": [[301, "neural_compressor.metric.metric.BaseMetric.reset"]], "reset() (neural_compressor.metric.metric.cocomapv2 method)": [[301, "neural_compressor.metric.metric.COCOmAPv2.reset"]], "reset() (neural_compressor.metric.metric.f1 method)": [[301, "neural_compressor.metric.metric.F1.reset"]], "reset() (neural_compressor.metric.metric.generaltopk method)": [[301, "neural_compressor.metric.metric.GeneralTopK.reset"]], "reset() (neural_compressor.metric.metric.loss method)": [[301, "neural_compressor.metric.metric.Loss.reset"]], "reset() (neural_compressor.metric.metric.mae method)": [[301, "neural_compressor.metric.metric.MAE.reset"]], "reset() (neural_compressor.metric.metric.mse method)": [[301, "neural_compressor.metric.metric.MSE.reset"]], "reset() (neural_compressor.metric.metric.onnxrtglue method)": [[301, "neural_compressor.metric.metric.ONNXRTGLUE.reset"]], "reset() (neural_compressor.metric.metric.pytorchloss method)": [[301, "neural_compressor.metric.metric.PyTorchLoss.reset"]], "reset() (neural_compressor.metric.metric.rmse method)": [[301, "neural_compressor.metric.metric.RMSE.reset"]], "reset() (neural_compressor.metric.metric.roc method)": [[301, "neural_compressor.metric.metric.ROC.reset"]], "reset() (neural_compressor.metric.metric.squadf1 method)": [[301, "neural_compressor.metric.metric.SquadF1.reset"]], "reset() (neural_compressor.metric.metric.tensorflowmap method)": [[301, "neural_compressor.metric.metric.TensorflowMAP.reset"]], "reset() (neural_compressor.metric.metric.tensorflowtopk method)": [[301, "neural_compressor.metric.metric.TensorflowTopK.reset"]], "reset() (neural_compressor.metric.metric.wrapmxnetmetric method)": [[301, "neural_compressor.metric.metric.WrapMXNetMetric.reset"]], "reset() (neural_compressor.metric.metric.wraponnxrtmetric method)": [[301, "neural_compressor.metric.metric.WrapONNXRTMetric.reset"]], "reset() (neural_compressor.metric.metric.wrappytorchmetric method)": [[301, "neural_compressor.metric.metric.WrapPyTorchMetric.reset"]], "reset() (neural_compressor.metric.metric.miou method)": [[301, "neural_compressor.metric.metric.mIOU.reset"]], "result() (neural_compressor.metric.metric.accuracy method)": [[301, "neural_compressor.metric.metric.Accuracy.result"]], "result() (neural_compressor.metric.metric.basemetric method)": [[301, "neural_compressor.metric.metric.BaseMetric.result"]], "result() (neural_compressor.metric.metric.cocomapv2 method)": [[301, "neural_compressor.metric.metric.COCOmAPv2.result"]], "result() (neural_compressor.metric.metric.f1 method)": [[301, "neural_compressor.metric.metric.F1.result"]], "result() (neural_compressor.metric.metric.generaltopk method)": [[301, "neural_compressor.metric.metric.GeneralTopK.result"]], "result() (neural_compressor.metric.metric.loss method)": [[301, "neural_compressor.metric.metric.Loss.result"]], "result() (neural_compressor.metric.metric.mae method)": [[301, "neural_compressor.metric.metric.MAE.result"]], "result() (neural_compressor.metric.metric.mse method)": [[301, "neural_compressor.metric.metric.MSE.result"]], "result() (neural_compressor.metric.metric.onnxrtglue method)": [[301, "neural_compressor.metric.metric.ONNXRTGLUE.result"]], "result() (neural_compressor.metric.metric.rmse method)": [[301, "neural_compressor.metric.metric.RMSE.result"]], "result() (neural_compressor.metric.metric.roc method)": [[301, "neural_compressor.metric.metric.ROC.result"]], "result() (neural_compressor.metric.metric.squadf1 method)": [[301, "neural_compressor.metric.metric.SquadF1.result"]], "result() (neural_compressor.metric.metric.tensorflowmap method)": [[301, "neural_compressor.metric.metric.TensorflowMAP.result"]], "result() (neural_compressor.metric.metric.tensorflowtopk method)": [[301, "neural_compressor.metric.metric.TensorflowTopK.result"]], "result() (neural_compressor.metric.metric.wrapmxnetmetric method)": [[301, "neural_compressor.metric.metric.WrapMXNetMetric.result"]], "result() (neural_compressor.metric.metric.wraponnxrtmetric method)": [[301, "neural_compressor.metric.metric.WrapONNXRTMetric.result"]], "result() (neural_compressor.metric.metric.wrappytorchmetric method)": [[301, "neural_compressor.metric.metric.WrapPyTorchMetric.result"]], "result() (neural_compressor.metric.metric.miou method)": [[301, "neural_compressor.metric.metric.mIOU.result"]], "sample (neural_compressor.metric.metric.accuracy attribute)": [[301, "neural_compressor.metric.metric.Accuracy.sample"]], "sample (neural_compressor.metric.metric.loss attribute)": [[301, "neural_compressor.metric.metric.Loss.sample"]], "sum (neural_compressor.metric.metric.loss attribute)": [[301, "neural_compressor.metric.metric.Loss.sum"]], "update() (neural_compressor.metric.metric.accuracy method)": [[301, "neural_compressor.metric.metric.Accuracy.update"]], "update() (neural_compressor.metric.metric.basemetric method)": [[301, "neural_compressor.metric.metric.BaseMetric.update"]], "update() (neural_compressor.metric.metric.cocomapv2 method)": [[301, "neural_compressor.metric.metric.COCOmAPv2.update"]], "update() (neural_compressor.metric.metric.f1 method)": [[301, "neural_compressor.metric.metric.F1.update"]], "update() (neural_compressor.metric.metric.generaltopk method)": [[301, "neural_compressor.metric.metric.GeneralTopK.update"]], "update() (neural_compressor.metric.metric.loss method)": [[301, "neural_compressor.metric.metric.Loss.update"]], "update() (neural_compressor.metric.metric.mae method)": [[301, "neural_compressor.metric.metric.MAE.update"]], "update() (neural_compressor.metric.metric.mse method)": [[301, "neural_compressor.metric.metric.MSE.update"]], "update() (neural_compressor.metric.metric.onnxrtglue method)": [[301, "neural_compressor.metric.metric.ONNXRTGLUE.update"]], "update() (neural_compressor.metric.metric.pytorchloss method)": [[301, "neural_compressor.metric.metric.PyTorchLoss.update"]], "update() (neural_compressor.metric.metric.rmse method)": [[301, "neural_compressor.metric.metric.RMSE.update"]], "update() (neural_compressor.metric.metric.roc method)": [[301, "neural_compressor.metric.metric.ROC.update"]], "update() (neural_compressor.metric.metric.squadf1 method)": [[301, "neural_compressor.metric.metric.SquadF1.update"]], "update() (neural_compressor.metric.metric.tensorflowmap method)": [[301, "neural_compressor.metric.metric.TensorflowMAP.update"]], "update() (neural_compressor.metric.metric.tensorflowtopk method)": [[301, "neural_compressor.metric.metric.TensorflowTopK.update"]], "update() (neural_compressor.metric.metric.wrapmxnetmetric method)": [[301, "neural_compressor.metric.metric.WrapMXNetMetric.update"]], "update() (neural_compressor.metric.metric.wraponnxrtmetric method)": [[301, "neural_compressor.metric.metric.WrapONNXRTMetric.update"]], "update() (neural_compressor.metric.metric.wrappytorchmetric method)": [[301, "neural_compressor.metric.metric.WrapPyTorchMetric.update"]], "update() (neural_compressor.metric.metric.miou method)": [[301, "neural_compressor.metric.metric.mIOU.update"]], "mixedprecision (class in neural_compressor.mix_precision)": [[302, "neural_compressor.mix_precision.MixedPrecision"]], "eval_dataloader (neural_compressor.mix_precision.mixedprecision property)": [[302, "neural_compressor.mix_precision.MixedPrecision.eval_dataloader"]], "eval_func (neural_compressor.mix_precision.mixedprecision property)": [[302, "neural_compressor.mix_precision.MixedPrecision.eval_func"]], "execute() (neural_compressor.mix_precision.mixedprecision method)": [[302, "neural_compressor.mix_precision.MixedPrecision.execute"]], "fit() (in module neural_compressor.mix_precision)": [[302, "neural_compressor.mix_precision.fit"]], "metric (neural_compressor.mix_precision.mixedprecision property)": [[302, "neural_compressor.mix_precision.MixedPrecision.metric"]], "model (neural_compressor.mix_precision.mixedprecision property)": [[302, "neural_compressor.mix_precision.MixedPrecision.model"]], "neural_compressor.mix_precision": [[302, "module-neural_compressor.mix_precision"]], "pre_process() (neural_compressor.mix_precision.mixedprecision method)": [[302, "neural_compressor.mix_precision.MixedPrecision.pre_process"]], "precisions (neural_compressor.mix_precision.mixedprecision property)": [[302, "neural_compressor.mix_precision.MixedPrecision.precisions"]], "basemodel (class in neural_compressor.model.base_model)": [[303, "neural_compressor.model.base_model.BaseModel"]], "export() (neural_compressor.model.base_model.basemodel method)": [[303, "neural_compressor.model.base_model.BaseModel.export"]], "framework() (neural_compressor.model.base_model.basemodel method)": [[303, "neural_compressor.model.base_model.BaseModel.framework"]], "graph_info (neural_compressor.model.base_model.basemodel property)": [[303, "neural_compressor.model.base_model.BaseModel.graph_info"]], "model (neural_compressor.model.base_model.basemodel property)": [[303, "neural_compressor.model.base_model.BaseModel.model"]], "neural_compressor.model.base_model": [[303, "module-neural_compressor.model.base_model"]], "save() (neural_compressor.model.base_model.basemodel method)": [[303, "neural_compressor.model.base_model.BaseModel.save"]], "basemodel (class in neural_compressor.model)": [[304, "neural_compressor.model.BaseModel"]], "model (class in neural_compressor.model)": [[304, "neural_compressor.model.Model"]], "export() (neural_compressor.model.basemodel method)": [[304, "neural_compressor.model.BaseModel.export"]], "framework() (neural_compressor.model.basemodel method)": [[304, "neural_compressor.model.BaseModel.framework"]], "graph_info (neural_compressor.model.basemodel property)": [[304, "neural_compressor.model.BaseModel.graph_info"]], "model (neural_compressor.model.basemodel property)": [[304, "neural_compressor.model.BaseModel.model"]], "neural_compressor.model": [[304, "module-neural_compressor.model"]], "save() (neural_compressor.model.basemodel method)": [[304, "neural_compressor.model.BaseModel.save"]], "kerasmodel (class in neural_compressor.model.keras_model)": [[305, "neural_compressor.model.keras_model.KerasModel"]], "framework() (neural_compressor.model.keras_model.kerasmodel method)": [[305, "neural_compressor.model.keras_model.KerasModel.framework"]], "graph_info (neural_compressor.model.keras_model.kerasmodel property)": [[305, "neural_compressor.model.keras_model.KerasModel.graph_info"]], "model (neural_compressor.model.keras_model.kerasmodel property)": [[305, "neural_compressor.model.keras_model.KerasModel.model"]], "neural_compressor.model.keras_model": [[305, "module-neural_compressor.model.keras_model"]], "q_config (neural_compressor.model.keras_model.kerasmodel property)": [[305, "neural_compressor.model.keras_model.KerasModel.q_config"]], "save() (neural_compressor.model.keras_model.kerasmodel method)": [[305, "neural_compressor.model.keras_model.KerasModel.save"]], "model (class in neural_compressor.model.model)": [[306, "neural_compressor.model.model.Model"]], "get_model_fwk_name() (in module neural_compressor.model.model)": [[306, "neural_compressor.model.model.get_model_fwk_name"]], "neural_compressor.model.model": [[306, "module-neural_compressor.model.model"]], "mxnetmodel (class in neural_compressor.model.mxnet_model)": [[307, "neural_compressor.model.mxnet_model.MXNetModel"]], "framework() (neural_compressor.model.mxnet_model.mxnetmodel method)": [[307, "neural_compressor.model.mxnet_model.MXNetModel.framework"]], "model (neural_compressor.model.mxnet_model.mxnetmodel property)": [[307, "neural_compressor.model.mxnet_model.MXNetModel.model"]], "neural_compressor.model.mxnet_model": [[307, "module-neural_compressor.model.mxnet_model"]], "save() (neural_compressor.model.mxnet_model.mxnetmodel method)": [[307, "neural_compressor.model.mxnet_model.MXNetModel.save"]], "tfslimnetsfactory (class in neural_compressor.model.nets_factory)": [[308, "neural_compressor.model.nets_factory.TFSlimNetsFactory"]], "neural_compressor.model.nets_factory": [[308, "module-neural_compressor.model.nets_factory"]], "register() (neural_compressor.model.nets_factory.tfslimnetsfactory method)": [[308, "neural_compressor.model.nets_factory.TFSlimNetsFactory.register"]], "onnxmodel (class in neural_compressor.model.onnx_model)": [[309, "neural_compressor.model.onnx_model.ONNXModel"]], "add_initializer() (neural_compressor.model.onnx_model.onnxmodel method)": [[309, "neural_compressor.model.onnx_model.ONNXModel.add_initializer"]], "add_initializers() (neural_compressor.model.onnx_model.onnxmodel method)": [[309, "neural_compressor.model.onnx_model.ONNXModel.add_initializers"]], "add_node() (neural_compressor.model.onnx_model.onnxmodel method)": [[309, "neural_compressor.model.onnx_model.ONNXModel.add_node"]], "add_nodes() (neural_compressor.model.onnx_model.onnxmodel method)": [[309, "neural_compressor.model.onnx_model.ONNXModel.add_nodes"]], "add_tensors_to_outputs() (neural_compressor.model.onnx_model.onnxmodel method)": [[309, "neural_compressor.model.onnx_model.ONNXModel.add_tensors_to_outputs"]], "export() (neural_compressor.model.onnx_model.onnxmodel method)": [[309, "neural_compressor.model.onnx_model.ONNXModel.export"]], "find_node_by_name() (neural_compressor.model.onnx_model.onnxmodel method)": [[309, "neural_compressor.model.onnx_model.ONNXModel.find_node_by_name"]], "find_nodes_by_initializer() (neural_compressor.model.onnx_model.onnxmodel method)": [[309, "neural_compressor.model.onnx_model.ONNXModel.find_nodes_by_initializer"]], "framework() (neural_compressor.model.onnx_model.onnxmodel method)": [[309, "neural_compressor.model.onnx_model.ONNXModel.framework"]], "get_children() (neural_compressor.model.onnx_model.onnxmodel method)": [[309, "neural_compressor.model.onnx_model.ONNXModel.get_children"]], "get_initializer() (neural_compressor.model.onnx_model.onnxmodel method)": [[309, "neural_compressor.model.onnx_model.ONNXModel.get_initializer"]], "get_nodes_chain() (neural_compressor.model.onnx_model.onnxmodel method)": [[309, "neural_compressor.model.onnx_model.ONNXModel.get_nodes_chain"]], "get_parent() (neural_compressor.model.onnx_model.onnxmodel method)": [[309, "neural_compressor.model.onnx_model.ONNXModel.get_parent"]], "get_parents() (neural_compressor.model.onnx_model.onnxmodel method)": [[309, "neural_compressor.model.onnx_model.ONNXModel.get_parents"]], "get_scale_zero() (neural_compressor.model.onnx_model.onnxmodel method)": [[309, "neural_compressor.model.onnx_model.ONNXModel.get_scale_zero"]], "graph() (neural_compressor.model.onnx_model.onnxmodel method)": [[309, "neural_compressor.model.onnx_model.ONNXModel.graph"]], "graph_info (neural_compressor.model.onnx_model.onnxmodel property)": [[309, "neural_compressor.model.onnx_model.ONNXModel.graph_info"]], "initializer() (neural_compressor.model.onnx_model.onnxmodel method)": [[309, "neural_compressor.model.onnx_model.ONNXModel.initializer"]], "input() (neural_compressor.model.onnx_model.onnxmodel method)": [[309, "neural_compressor.model.onnx_model.ONNXModel.input"]], "input_name_to_nodes (neural_compressor.model.onnx_model.onnxmodel property)": [[309, "neural_compressor.model.onnx_model.ONNXModel.input_name_to_nodes"]], "ir_version() (neural_compressor.model.onnx_model.onnxmodel method)": [[309, "neural_compressor.model.onnx_model.ONNXModel.ir_version"]], "is_large_model (neural_compressor.model.onnx_model.onnxmodel property)": [[309, "neural_compressor.model.onnx_model.ONNXModel.is_large_model"]], "match_first_parent() (neural_compressor.model.onnx_model.onnxmodel method)": [[309, "neural_compressor.model.onnx_model.ONNXModel.match_first_parent"]], "match_parent() (neural_compressor.model.onnx_model.onnxmodel method)": [[309, "neural_compressor.model.onnx_model.ONNXModel.match_parent"]], "match_parent_path() (neural_compressor.model.onnx_model.onnxmodel method)": [[309, "neural_compressor.model.onnx_model.ONNXModel.match_parent_path"]], "model (neural_compressor.model.onnx_model.onnxmodel property)": [[309, "neural_compressor.model.onnx_model.ONNXModel.model"]], "model_path (neural_compressor.model.onnx_model.onnxmodel property)": [[309, "neural_compressor.model.onnx_model.ONNXModel.model_path"]], "neural_compressor.model.onnx_model": [[309, "module-neural_compressor.model.onnx_model"]], "nodes() (neural_compressor.model.onnx_model.onnxmodel method)": [[309, "neural_compressor.model.onnx_model.ONNXModel.nodes"]], "opset_import() (neural_compressor.model.onnx_model.onnxmodel method)": [[309, "neural_compressor.model.onnx_model.ONNXModel.opset_import"]], "output() (neural_compressor.model.onnx_model.onnxmodel method)": [[309, "neural_compressor.model.onnx_model.ONNXModel.output"]], "output_name_to_node (neural_compressor.model.onnx_model.onnxmodel property)": [[309, "neural_compressor.model.onnx_model.ONNXModel.output_name_to_node"]], "q_config (neural_compressor.model.onnx_model.onnxmodel property)": [[309, "neural_compressor.model.onnx_model.ONNXModel.q_config"]], "remove_initializer() (neural_compressor.model.onnx_model.onnxmodel method)": [[309, "neural_compressor.model.onnx_model.ONNXModel.remove_initializer"]], "remove_initializers() (neural_compressor.model.onnx_model.onnxmodel method)": [[309, "neural_compressor.model.onnx_model.ONNXModel.remove_initializers"]], "remove_node() (neural_compressor.model.onnx_model.onnxmodel method)": [[309, "neural_compressor.model.onnx_model.ONNXModel.remove_node"]], "remove_nodes() (neural_compressor.model.onnx_model.onnxmodel method)": [[309, "neural_compressor.model.onnx_model.ONNXModel.remove_nodes"]], "remove_tensors_from_outputs() (neural_compressor.model.onnx_model.onnxmodel method)": [[309, "neural_compressor.model.onnx_model.ONNXModel.remove_tensors_from_outputs"]], "remove_unused_constant() (neural_compressor.model.onnx_model.onnxmodel method)": [[309, "neural_compressor.model.onnx_model.ONNXModel.remove_unused_constant"]], "replace_input_of_all_nodes() (neural_compressor.model.onnx_model.onnxmodel method)": [[309, "neural_compressor.model.onnx_model.ONNXModel.replace_input_of_all_nodes"]], "replace_node_input() (neural_compressor.model.onnx_model.onnxmodel static method)": [[309, "neural_compressor.model.onnx_model.ONNXModel.replace_node_input"]], "replace_node_output() (neural_compressor.model.onnx_model.onnxmodel static method)": [[309, "neural_compressor.model.onnx_model.ONNXModel.replace_node_output"]], "replace_output_of_all_nodes() (neural_compressor.model.onnx_model.onnxmodel method)": [[309, "neural_compressor.model.onnx_model.ONNXModel.replace_output_of_all_nodes"]], "save() (neural_compressor.model.onnx_model.onnxmodel method)": [[309, "neural_compressor.model.onnx_model.ONNXModel.save"]], "save_model_to_file() (neural_compressor.model.onnx_model.onnxmodel method)": [[309, "neural_compressor.model.onnx_model.ONNXModel.save_model_to_file"]], "set_initializer() (neural_compressor.model.onnx_model.onnxmodel method)": [[309, "neural_compressor.model.onnx_model.ONNXModel.set_initializer"]], "topological_sort() (neural_compressor.model.onnx_model.onnxmodel method)": [[309, "neural_compressor.model.onnx_model.ONNXModel.topological_sort"]], "update() (neural_compressor.model.onnx_model.onnxmodel method)": [[309, "neural_compressor.model.onnx_model.ONNXModel.update"]], "tensorflowbasemodel (class in neural_compressor.model.tensorflow_model)": [[310, "neural_compressor.model.tensorflow_model.TensorflowBaseModel"]], "tensorflowcheckpointmodel (class in neural_compressor.model.tensorflow_model)": [[310, "neural_compressor.model.tensorflow_model.TensorflowCheckpointModel"]], "tensorflowmodel (class in neural_compressor.model.tensorflow_model)": [[310, "neural_compressor.model.tensorflow_model.TensorflowModel"]], "tensorflowqatmodel (class in neural_compressor.model.tensorflow_model)": [[310, "neural_compressor.model.tensorflow_model.TensorflowQATModel"]], "tensorflowsavedmodelmodel (class in neural_compressor.model.tensorflow_model)": [[310, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel"]], "build_saved_model() (neural_compressor.model.tensorflow_model.tensorflowsavedmodelmodel method)": [[310, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel.build_saved_model"]], "checkpoint_session() (in module neural_compressor.model.tensorflow_model)": [[310, "neural_compressor.model.tensorflow_model.checkpoint_session"]], "estimator_session() (in module neural_compressor.model.tensorflow_model)": [[310, "neural_compressor.model.tensorflow_model.estimator_session"]], "export() (neural_compressor.model.tensorflow_model.tensorflowbasemodel method)": [[310, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.export"]], "framework() (neural_compressor.model.tensorflow_model.tensorflowbasemodel method)": [[310, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.framework"]], "frozen_graph_def (neural_compressor.model.tensorflow_model.tensorflowqatmodel property)": [[310, "neural_compressor.model.tensorflow_model.TensorflowQATModel.frozen_graph_def"]], "frozen_pb_session() (in module neural_compressor.model.tensorflow_model)": [[310, "neural_compressor.model.tensorflow_model.frozen_pb_session"]], "get_all_weight_names() (neural_compressor.model.tensorflow_model.tensorflowsavedmodelmodel method)": [[310, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel.get_all_weight_names"]], "get_model_type() (in module neural_compressor.model.tensorflow_model)": [[310, "neural_compressor.model.tensorflow_model.get_model_type"]], "get_weight() (neural_compressor.model.tensorflow_model.tensorflowsavedmodelmodel method)": [[310, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel.get_weight"]], "graph (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[310, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.graph"]], "graph_def (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[310, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.graph_def"]], "graph_def (neural_compressor.model.tensorflow_model.tensorflowcheckpointmodel property)": [[310, "neural_compressor.model.tensorflow_model.TensorflowCheckpointModel.graph_def"]], "graph_def_session() (in module neural_compressor.model.tensorflow_model)": [[310, "neural_compressor.model.tensorflow_model.graph_def_session"]], "graph_info (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[310, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.graph_info"]], "graph_session() (in module neural_compressor.model.tensorflow_model)": [[310, "neural_compressor.model.tensorflow_model.graph_session"]], "input_node_names (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[310, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.input_node_names"]], "input_tensor (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[310, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.input_tensor"]], "input_tensor_names (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[310, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.input_tensor_names"]], "iter_op (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[310, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.iter_op"]], "keras_session() (in module neural_compressor.model.tensorflow_model)": [[310, "neural_compressor.model.tensorflow_model.keras_session"]], "load_saved_model() (in module neural_compressor.model.tensorflow_model)": [[310, "neural_compressor.model.tensorflow_model.load_saved_model"]], "model (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[310, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.model"]], "model (neural_compressor.model.tensorflow_model.tensorflowcheckpointmodel property)": [[310, "neural_compressor.model.tensorflow_model.TensorflowCheckpointModel.model"]], "model (neural_compressor.model.tensorflow_model.tensorflowqatmodel property)": [[310, "neural_compressor.model.tensorflow_model.TensorflowQATModel.model"]], "model (neural_compressor.model.tensorflow_model.tensorflowsavedmodelmodel property)": [[310, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel.model"]], "model_type (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[310, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.model_type"]], "name (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[310, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.name"]], "neural_compressor.model.tensorflow_model": [[310, "module-neural_compressor.model.tensorflow_model"]], "output_node_names (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[310, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.output_node_names"]], "output_tensor (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[310, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.output_tensor"]], "output_tensor_names (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[310, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.output_tensor_names"]], "q_config (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[310, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.q_config"]], "report_sparsity() (neural_compressor.model.tensorflow_model.tensorflowsavedmodelmodel method)": [[310, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel.report_sparsity"]], "save() (neural_compressor.model.tensorflow_model.tensorflowbasemodel method)": [[310, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.save"]], "save() (neural_compressor.model.tensorflow_model.tensorflowqatmodel method)": [[310, "neural_compressor.model.tensorflow_model.TensorflowQATModel.save"]], "save() (neural_compressor.model.tensorflow_model.tensorflowsavedmodelmodel method)": [[310, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel.save"]], "saved_model_session() (in module neural_compressor.model.tensorflow_model)": [[310, "neural_compressor.model.tensorflow_model.saved_model_session"]], "sess (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[310, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.sess"]], "slim_session() (in module neural_compressor.model.tensorflow_model)": [[310, "neural_compressor.model.tensorflow_model.slim_session"]], "update_weights() (neural_compressor.model.tensorflow_model.tensorflowsavedmodelmodel method)": [[310, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel.update_weights"]], "validate_and_inference_input_output() (in module neural_compressor.model.tensorflow_model)": [[310, "neural_compressor.model.tensorflow_model.validate_and_inference_input_output"]], "validate_graph_node() (in module neural_compressor.model.tensorflow_model)": [[310, "neural_compressor.model.tensorflow_model.validate_graph_node"]], "weights (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[310, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.weights"]], "workspace_path (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[310, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.workspace_path"]], "ipexmodel (class in neural_compressor.model.torch_model)": [[311, "neural_compressor.model.torch_model.IPEXModel"]], "pytorchbasemodel (class in neural_compressor.model.torch_model)": [[311, "neural_compressor.model.torch_model.PyTorchBaseModel"]], "pytorchfxmodel (class in neural_compressor.model.torch_model)": [[311, "neural_compressor.model.torch_model.PyTorchFXModel"]], "pytorchmodel (class in neural_compressor.model.torch_model)": [[311, "neural_compressor.model.torch_model.PyTorchModel"]], "export() (neural_compressor.model.torch_model.pytorchmodel method)": [[311, "neural_compressor.model.torch_model.PyTorchModel.export"]], "export_to_bf16_onnx() (neural_compressor.model.torch_model.pytorchmodel method)": [[311, "neural_compressor.model.torch_model.PyTorchModel.export_to_bf16_onnx"]], "export_to_fp32_onnx() (neural_compressor.model.torch_model.pytorchmodel method)": [[311, "neural_compressor.model.torch_model.PyTorchModel.export_to_fp32_onnx"]], "export_to_int8_onnx() (neural_compressor.model.torch_model.pytorchmodel method)": [[311, "neural_compressor.model.torch_model.PyTorchModel.export_to_int8_onnx"]], "export_to_jit() (neural_compressor.model.torch_model.pytorchmodel method)": [[311, "neural_compressor.model.torch_model.PyTorchModel.export_to_jit"]], "forward() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[311, "neural_compressor.model.torch_model.PyTorchBaseModel.forward"]], "fp32_model (neural_compressor.model.torch_model.pytorchbasemodel property)": [[311, "neural_compressor.model.torch_model.PyTorchBaseModel.fp32_model"]], "framework() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[311, "neural_compressor.model.torch_model.PyTorchBaseModel.framework"]], "generate_forward_pre_hook() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[311, "neural_compressor.model.torch_model.PyTorchBaseModel.generate_forward_pre_hook"]], "get_all_weight_names() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[311, "neural_compressor.model.torch_model.PyTorchBaseModel.get_all_weight_names"]], "get_gradient() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[311, "neural_compressor.model.torch_model.PyTorchBaseModel.get_gradient"]], "get_inputs() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[311, "neural_compressor.model.torch_model.PyTorchBaseModel.get_inputs"]], "get_weight() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[311, "neural_compressor.model.torch_model.PyTorchBaseModel.get_weight"]], "graph_info (neural_compressor.model.torch_model.pytorchmodel property)": [[311, "neural_compressor.model.torch_model.PyTorchModel.graph_info"]], "load_quantized_state_dict() (neural_compressor.model.torch_model.pytorchmodel method)": [[311, "neural_compressor.model.torch_model.PyTorchModel.load_quantized_state_dict"]], "model (neural_compressor.model.torch_model.pytorchbasemodel property)": [[311, "neural_compressor.model.torch_model.PyTorchBaseModel.model"]], "neural_compressor.model.torch_model": [[311, "module-neural_compressor.model.torch_model"]], "prune_weights_() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[311, "neural_compressor.model.torch_model.PyTorchBaseModel.prune_weights_"]], "quantized_state_dict() (neural_compressor.model.torch_model.pytorchmodel method)": [[311, "neural_compressor.model.torch_model.PyTorchModel.quantized_state_dict"]], "register_forward_pre_hook() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[311, "neural_compressor.model.torch_model.PyTorchBaseModel.register_forward_pre_hook"]], "remove_hooks() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[311, "neural_compressor.model.torch_model.PyTorchBaseModel.remove_hooks"]], "report_sparsity() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[311, "neural_compressor.model.torch_model.PyTorchBaseModel.report_sparsity"]], "save() (neural_compressor.model.torch_model.ipexmodel method)": [[311, "neural_compressor.model.torch_model.IPEXModel.save"]], "save() (neural_compressor.model.torch_model.pytorchmodel method)": [[311, "neural_compressor.model.torch_model.PyTorchModel.save"]], "update_gradient() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[311, "neural_compressor.model.torch_model.PyTorchBaseModel.update_gradient"]], "update_weights() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[311, "neural_compressor.model.torch_model.PyTorchBaseModel.update_weights"]], "workspace_path (neural_compressor.model.torch_model.ipexmodel property)": [[311, "neural_compressor.model.torch_model.IPEXModel.workspace_path"]], "workspace_path (neural_compressor.model.torch_model.pytorchmodel property)": [[311, "neural_compressor.model.torch_model.PyTorchModel.workspace_path"]], "accuracy (class in neural_compressor.objective)": [[312, "neural_compressor.objective.Accuracy"]], "footprint (class in neural_compressor.objective)": [[312, "neural_compressor.objective.Footprint"]], "modelsize (class in neural_compressor.objective)": [[312, "neural_compressor.objective.ModelSize"]], "multiobjective (class in neural_compressor.objective)": [[312, "neural_compressor.objective.MultiObjective"]], "objective (class in neural_compressor.objective)": [[312, "neural_compressor.objective.Objective"]], "performance (class in neural_compressor.objective)": [[312, "neural_compressor.objective.Performance"]], "accuracy_meet_req() (neural_compressor.objective.multiobjective method)": [[312, "neural_compressor.objective.MultiObjective.accuracy_meet_req"]], "accuracy_meets() (neural_compressor.objective.multiobjective method)": [[312, "neural_compressor.objective.MultiObjective.accuracy_meets"]], "accuracy_target (neural_compressor.objective.multiobjective property)": [[312, "neural_compressor.objective.MultiObjective.accuracy_target"]], "baseline (neural_compressor.objective.multiobjective property)": [[312, "neural_compressor.objective.MultiObjective.baseline"]], "best_result() (neural_compressor.objective.multiobjective method)": [[312, "neural_compressor.objective.MultiObjective.best_result"]], "compare() (neural_compressor.objective.multiobjective method)": [[312, "neural_compressor.objective.MultiObjective.compare"]], "end() (neural_compressor.objective.accuracy method)": [[312, "neural_compressor.objective.Accuracy.end"]], "end() (neural_compressor.objective.footprint method)": [[312, "neural_compressor.objective.Footprint.end"]], "end() (neural_compressor.objective.modelsize method)": [[312, "neural_compressor.objective.ModelSize.end"]], "end() (neural_compressor.objective.multiobjective method)": [[312, "neural_compressor.objective.MultiObjective.end"]], "end() (neural_compressor.objective.objective method)": [[312, "neural_compressor.objective.Objective.end"]], "end() (neural_compressor.objective.performance method)": [[312, "neural_compressor.objective.Performance.end"]], "evaluate() (neural_compressor.objective.multiobjective method)": [[312, "neural_compressor.objective.MultiObjective.evaluate"]], "model (neural_compressor.objective.objective property)": [[312, "neural_compressor.objective.Objective.model"]], "neural_compressor.objective": [[312, "module-neural_compressor.objective"]], "objective_custom_registry() (in module neural_compressor.objective)": [[312, "neural_compressor.objective.objective_custom_registry"]], "objective_registry() (in module neural_compressor.objective)": [[312, "neural_compressor.objective.objective_registry"]], "reset() (neural_compressor.objective.multiobjective method)": [[312, "neural_compressor.objective.MultiObjective.reset"]], "reset() (neural_compressor.objective.objective method)": [[312, "neural_compressor.objective.Objective.reset"]], "result() (neural_compressor.objective.multiobjective method)": [[312, "neural_compressor.objective.MultiObjective.result"]], "result() (neural_compressor.objective.objective method)": [[312, "neural_compressor.objective.Objective.result"]], "result_list() (neural_compressor.objective.objective method)": [[312, "neural_compressor.objective.Objective.result_list"]], "set_model() (neural_compressor.objective.multiobjective method)": [[312, "neural_compressor.objective.MultiObjective.set_model"]], "start() (neural_compressor.objective.accuracy method)": [[312, "neural_compressor.objective.Accuracy.start"]], "start() (neural_compressor.objective.footprint method)": [[312, "neural_compressor.objective.Footprint.start"]], "start() (neural_compressor.objective.modelsize method)": [[312, "neural_compressor.objective.ModelSize.start"]], "start() (neural_compressor.objective.multiobjective method)": [[312, "neural_compressor.objective.MultiObjective.start"]], "start() (neural_compressor.objective.objective method)": [[312, "neural_compressor.objective.Objective.start"]], "start() (neural_compressor.objective.performance method)": [[312, "neural_compressor.objective.Performance.start"]], "posttrainingquant (class in neural_compressor.quantization)": [[313, "neural_compressor.quantization.PostTrainingQuant"]], "calib_dataloader (neural_compressor.quantization.posttrainingquant property)": [[313, "neural_compressor.quantization.PostTrainingQuant.calib_dataloader"]], "calib_func (neural_compressor.quantization.posttrainingquant property)": [[313, "neural_compressor.quantization.PostTrainingQuant.calib_func"]], "eval_dataloader (neural_compressor.quantization.posttrainingquant property)": [[313, "neural_compressor.quantization.PostTrainingQuant.eval_dataloader"]], "eval_func (neural_compressor.quantization.posttrainingquant property)": [[313, "neural_compressor.quantization.PostTrainingQuant.eval_func"]], "execute() (neural_compressor.quantization.posttrainingquant method)": [[313, "neural_compressor.quantization.PostTrainingQuant.execute"]], "fit() (in module neural_compressor.quantization)": [[313, "neural_compressor.quantization.fit"]], "metric (neural_compressor.quantization.posttrainingquant property)": [[313, "neural_compressor.quantization.PostTrainingQuant.metric"]], "model (neural_compressor.quantization.posttrainingquant property)": [[313, "neural_compressor.quantization.PostTrainingQuant.model"]], "neural_compressor.quantization": [[313, "module-neural_compressor.quantization"]], "pre_proccess() (neural_compressor.quantization.posttrainingquant method)": [[313, "neural_compressor.quantization.PostTrainingQuant.pre_proccess"]], "automixedprecisiontunestrategy (class in neural_compressor.strategy.auto_mixed_precision)": [[314, "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[314, "module-neural_compressor.strategy.auto_mixed_precision"]], "next_tune_cfg() (neural_compressor.strategy.auto_mixed_precision.automixedprecisiontunestrategy method)": [[314, "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy.next_tune_cfg"]], "traverse() (neural_compressor.strategy.auto_mixed_precision.automixedprecisiontunestrategy method)": [[314, "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy.traverse"]], "basictunestrategy (class in neural_compressor.strategy.basic)": [[315, "neural_compressor.strategy.basic.BasicTuneStrategy"]], "distributed_next_tune_cfg_lst() (neural_compressor.strategy.basic.basictunestrategy method)": [[315, "neural_compressor.strategy.basic.BasicTuneStrategy.distributed_next_tune_cfg_lst"]], "neural_compressor.strategy.basic": [[315, "module-neural_compressor.strategy.basic"]], "next_tune_cfg() (neural_compressor.strategy.basic.basictunestrategy method)": [[315, "neural_compressor.strategy.basic.BasicTuneStrategy.next_tune_cfg"]], "bayesianoptimization (class in neural_compressor.strategy.bayesian)": [[316, "neural_compressor.strategy.bayesian.BayesianOptimization"]], "bayesiantunestrategy (class in neural_compressor.strategy.bayesian)": [[316, "neural_compressor.strategy.bayesian.BayesianTuneStrategy"]], "targetspace (class in neural_compressor.strategy.bayesian)": [[316, "neural_compressor.strategy.bayesian.TargetSpace"]], "acq_max() (in module neural_compressor.strategy.bayesian)": [[316, "neural_compressor.strategy.bayesian.acq_max"]], "array_to_params() (neural_compressor.strategy.bayesian.targetspace method)": [[316, "neural_compressor.strategy.bayesian.TargetSpace.array_to_params"]], "bounds (neural_compressor.strategy.bayesian.targetspace property)": [[316, "neural_compressor.strategy.bayesian.TargetSpace.bounds"]], "dim (neural_compressor.strategy.bayesian.targetspace property)": [[316, "neural_compressor.strategy.bayesian.TargetSpace.dim"]], "empty (neural_compressor.strategy.bayesian.targetspace property)": [[316, "neural_compressor.strategy.bayesian.TargetSpace.empty"]], "gen_next_params() (neural_compressor.strategy.bayesian.bayesianoptimization method)": [[316, "neural_compressor.strategy.bayesian.BayesianOptimization.gen_next_params"]], "get_target() (neural_compressor.strategy.bayesian.targetspace method)": [[316, "neural_compressor.strategy.bayesian.TargetSpace.get_target"]], "keys (neural_compressor.strategy.bayesian.targetspace property)": [[316, "neural_compressor.strategy.bayesian.TargetSpace.keys"]], "max (neural_compressor.strategy.bayesian.bayesianoptimization property)": [[316, "neural_compressor.strategy.bayesian.BayesianOptimization.max"]], "max() (neural_compressor.strategy.bayesian.targetspace method)": [[316, "neural_compressor.strategy.bayesian.TargetSpace.max"]], "neural_compressor.strategy.bayesian": [[316, "module-neural_compressor.strategy.bayesian"]], "next_tune_cfg() (neural_compressor.strategy.bayesian.bayesiantunestrategy method)": [[316, "neural_compressor.strategy.bayesian.BayesianTuneStrategy.next_tune_cfg"]], "params (neural_compressor.strategy.bayesian.targetspace property)": [[316, "neural_compressor.strategy.bayesian.TargetSpace.params"]], "params_to_array() (neural_compressor.strategy.bayesian.targetspace method)": [[316, "neural_compressor.strategy.bayesian.TargetSpace.params_to_array"]], "random_sample() (neural_compressor.strategy.bayesian.targetspace method)": [[316, "neural_compressor.strategy.bayesian.TargetSpace.random_sample"]], "register() (neural_compressor.strategy.bayesian.targetspace method)": [[316, "neural_compressor.strategy.bayesian.TargetSpace.register"]], "res (neural_compressor.strategy.bayesian.bayesianoptimization property)": [[316, "neural_compressor.strategy.bayesian.BayesianOptimization.res"]], "res() (neural_compressor.strategy.bayesian.targetspace method)": [[316, "neural_compressor.strategy.bayesian.TargetSpace.res"]], "space (neural_compressor.strategy.bayesian.bayesianoptimization property)": [[316, "neural_compressor.strategy.bayesian.BayesianOptimization.space"]], "suggest() (neural_compressor.strategy.bayesian.bayesianoptimization method)": [[316, "neural_compressor.strategy.bayesian.BayesianOptimization.suggest"]], "target (neural_compressor.strategy.bayesian.targetspace property)": [[316, "neural_compressor.strategy.bayesian.TargetSpace.target"]], "conservativetunestrategy (class in neural_compressor.strategy.conservative)": [[317, "neural_compressor.strategy.conservative.ConservativeTuneStrategy"]], "neural_compressor.strategy.conservative": [[317, "module-neural_compressor.strategy.conservative"]], "next_tune_cfg() (neural_compressor.strategy.conservative.conservativetunestrategy method)": [[317, "neural_compressor.strategy.conservative.ConservativeTuneStrategy.next_tune_cfg"]], "stop() (neural_compressor.strategy.conservative.conservativetunestrategy method)": [[317, "neural_compressor.strategy.conservative.ConservativeTuneStrategy.stop"]], "traverse() (neural_compressor.strategy.conservative.conservativetunestrategy method)": [[317, "neural_compressor.strategy.conservative.ConservativeTuneStrategy.traverse"]], "exhaustivetunestrategy (class in neural_compressor.strategy.exhaustive)": [[318, "neural_compressor.strategy.exhaustive.ExhaustiveTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[318, "module-neural_compressor.strategy.exhaustive"]], "next_tune_cfg() (neural_compressor.strategy.exhaustive.exhaustivetunestrategy method)": [[318, "neural_compressor.strategy.exhaustive.ExhaustiveTuneStrategy.next_tune_cfg"]], "hawq_v2tunestrategy (class in neural_compressor.strategy.hawq_v2)": [[319, "neural_compressor.strategy.hawq_v2.HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.hawq_v2": [[319, "module-neural_compressor.strategy.hawq_v2"]], "next_tune_cfg() (neural_compressor.strategy.hawq_v2.hawq_v2tunestrategy method)": [[319, "neural_compressor.strategy.hawq_v2.HAWQ_V2TuneStrategy.next_tune_cfg"]], "neural_compressor.strategy": [[320, "module-neural_compressor.strategy"]], "msetunestrategy (class in neural_compressor.strategy.mse)": [[321, "neural_compressor.strategy.mse.MSETuneStrategy"]], "mse_impact_lst() (neural_compressor.strategy.mse.msetunestrategy method)": [[321, "neural_compressor.strategy.mse.MSETuneStrategy.mse_impact_lst"]], "neural_compressor.strategy.mse": [[321, "module-neural_compressor.strategy.mse"]], "next_tune_cfg() (neural_compressor.strategy.mse.msetunestrategy method)": [[321, "neural_compressor.strategy.mse.MSETuneStrategy.next_tune_cfg"]], "mse_v2tunestrategy (class in neural_compressor.strategy.mse_v2)": [[322, "neural_compressor.strategy.mse_v2.MSE_V2TuneStrategy"]], "neural_compressor.strategy.mse_v2": [[322, "module-neural_compressor.strategy.mse_v2"]], "next_tune_cfg() (neural_compressor.strategy.mse_v2.mse_v2tunestrategy method)": [[322, "neural_compressor.strategy.mse_v2.MSE_V2TuneStrategy.next_tune_cfg"]], "randomtunestrategy (class in neural_compressor.strategy.random)": [[323, "neural_compressor.strategy.random.RandomTuneStrategy"]], "neural_compressor.strategy.random": [[323, "module-neural_compressor.strategy.random"]], "next_tune_cfg() (neural_compressor.strategy.random.randomtunestrategy method)": [[323, "neural_compressor.strategy.random.RandomTuneStrategy.next_tune_cfg"]], "tunestrategy (class in neural_compressor.strategy.strategy)": [[324, "neural_compressor.strategy.strategy.TuneStrategy"]], "apply_all_tuning_recipes() (neural_compressor.strategy.strategy.tunestrategy method)": [[324, "neural_compressor.strategy.strategy.TuneStrategy.apply_all_tuning_recipes"]], "apply_recipe_one_by_one() (neural_compressor.strategy.strategy.tunestrategy method)": [[324, "neural_compressor.strategy.strategy.TuneStrategy.apply_recipe_one_by_one"]], "deploy_config() (neural_compressor.strategy.strategy.tunestrategy method)": [[324, "neural_compressor.strategy.strategy.TuneStrategy.deploy_config"]], "distributed_next_tune_cfg_lst() (neural_compressor.strategy.strategy.tunestrategy method)": [[324, "neural_compressor.strategy.strategy.TuneStrategy.distributed_next_tune_cfg_lst"]], "distributed_traverse() (neural_compressor.strategy.strategy.tunestrategy method)": [[324, "neural_compressor.strategy.strategy.TuneStrategy.distributed_traverse"]], "evaluation_result (neural_compressor.strategy.strategy.tunestrategy property)": [[324, "neural_compressor.strategy.strategy.TuneStrategy.evaluation_result"]], "initial_best_acc() (neural_compressor.strategy.strategy.tunestrategy method)": [[324, "neural_compressor.strategy.strategy.TuneStrategy.initial_best_acc"]], "initial_tuning_cfg() (neural_compressor.strategy.strategy.tunestrategy method)": [[324, "neural_compressor.strategy.strategy.TuneStrategy.initial_tuning_cfg"]], "master_worker_handle() (neural_compressor.strategy.strategy.tunestrategy method)": [[324, "neural_compressor.strategy.strategy.TuneStrategy.master_worker_handle"]], "meet_acc_req() (neural_compressor.strategy.strategy.tunestrategy method)": [[324, "neural_compressor.strategy.strategy.TuneStrategy.meet_acc_req"]], "neural_compressor.strategy.strategy": [[324, "module-neural_compressor.strategy.strategy"]], "next_tune_cfg() (neural_compressor.strategy.strategy.tunestrategy method)": [[324, "neural_compressor.strategy.strategy.TuneStrategy.next_tune_cfg"]], "set_param_for_post_quantization_algos() (neural_compressor.strategy.strategy.tunestrategy method)": [[324, "neural_compressor.strategy.strategy.TuneStrategy.set_param_for_post_quantization_algos"]], "set_param_for_pre_quantization_algos() (neural_compressor.strategy.strategy.tunestrategy method)": [[324, "neural_compressor.strategy.strategy.TuneStrategy.set_param_for_pre_quantization_algos"]], "set_q_func() (neural_compressor.strategy.strategy.tunestrategy method)": [[324, "neural_compressor.strategy.strategy.TuneStrategy.set_q_func"]], "set_tuning_space() (neural_compressor.strategy.strategy.tunestrategy method)": [[324, "neural_compressor.strategy.strategy.TuneStrategy.set_tuning_space"]], "setup_resume() (neural_compressor.strategy.strategy.tunestrategy method)": [[324, "neural_compressor.strategy.strategy.TuneStrategy.setup_resume"]], "show_baseline_info() (neural_compressor.strategy.strategy.tunestrategy method)": [[324, "neural_compressor.strategy.strategy.TuneStrategy.show_baseline_info"]], "slave_worker_handle() (neural_compressor.strategy.strategy.tunestrategy method)": [[324, "neural_compressor.strategy.strategy.TuneStrategy.slave_worker_handle"]], "stop() (neural_compressor.strategy.strategy.tunestrategy method)": [[324, "neural_compressor.strategy.strategy.TuneStrategy.stop"]], "strategy_registry() (in module neural_compressor.strategy.strategy)": [[324, "neural_compressor.strategy.strategy.strategy_registry"]], "traverse() (neural_compressor.strategy.strategy.tunestrategy method)": [[324, "neural_compressor.strategy.strategy.TuneStrategy.traverse"]], "update_best_op_tuning_cfg() (neural_compressor.strategy.strategy.tunestrategy method)": [[324, "neural_compressor.strategy.strategy.TuneStrategy.update_best_op_tuning_cfg"]], "neural_compressor.strategy.utils.constant": [[325, "module-neural_compressor.strategy.utils.constant"]], "fallbacktuningsampler (class in neural_compressor.strategy.utils)": [[326, "neural_compressor.strategy.utils.FallbackTuningSampler"]], "optuningconfig (class in neural_compressor.strategy.utils)": [[326, "neural_compressor.strategy.utils.OpTuningConfig"]], "optypewisetuningsampler (class in neural_compressor.strategy.utils)": [[326, "neural_compressor.strategy.utils.OpTypeWiseTuningSampler"]], "opwisetuningsampler (class in neural_compressor.strategy.utils)": [[326, "neural_compressor.strategy.utils.OpWiseTuningSampler"]], "tuningitem (class in neural_compressor.strategy.utils)": [[326, "neural_compressor.strategy.utils.TuningItem"]], "tuningsampler (class in neural_compressor.strategy.utils)": [[326, "neural_compressor.strategy.utils.TuningSampler"]], "tuningspace (class in neural_compressor.strategy.utils)": [[326, "neural_compressor.strategy.utils.TuningSpace"]], "append() (neural_compressor.strategy.utils.tuningitem method)": [[326, "neural_compressor.strategy.utils.TuningItem.append"]], "from_state() (neural_compressor.strategy.utils.optuningconfig class method)": [[326, "neural_compressor.strategy.utils.OpTuningConfig.from_state"]], "get_default_config() (neural_compressor.strategy.utils.tuningspace method)": [[326, "neural_compressor.strategy.utils.TuningSpace.get_default_config"]], "get_default_full_path() (neural_compressor.strategy.utils.tuningspace method)": [[326, "neural_compressor.strategy.utils.TuningSpace.get_default_full_path"]], "get_details() (neural_compressor.strategy.utils.tuningitem method)": [[326, "neural_compressor.strategy.utils.TuningItem.get_details"]], "get_item_by_path() (neural_compressor.strategy.utils.tuningspace method)": [[326, "neural_compressor.strategy.utils.TuningSpace.get_item_by_path"]], "get_op_default_path_by_pattern() (neural_compressor.strategy.utils.tuningspace method)": [[326, "neural_compressor.strategy.utils.TuningSpace.get_op_default_path_by_pattern"]], "get_option_by_name() (neural_compressor.strategy.utils.tuningitem method)": [[326, "neural_compressor.strategy.utils.TuningItem.get_option_by_name"]], "get_options_name() (neural_compressor.strategy.utils.tuningitem method)": [[326, "neural_compressor.strategy.utils.TuningItem.get_options_name"]], "get_opwise_candidate() (neural_compressor.strategy.utils.opwisetuningsampler method)": [[326, "neural_compressor.strategy.utils.OpWiseTuningSampler.get_opwise_candidate"]], "get_state() (neural_compressor.strategy.utils.optuningconfig method)": [[326, "neural_compressor.strategy.utils.OpTuningConfig.get_state"]], "neural_compressor.strategy.utils": [[326, "module-neural_compressor.strategy.utils"]], "options (neural_compressor.strategy.utils.tuningitem property)": [[326, "neural_compressor.strategy.utils.TuningItem.options"]], "query_item_option() (neural_compressor.strategy.utils.tuningspace method)": [[326, "neural_compressor.strategy.utils.TuningSpace.query_item_option"]], "query_items_by_quant_mode() (neural_compressor.strategy.utils.tuningspace method)": [[326, "neural_compressor.strategy.utils.TuningSpace.query_items_by_quant_mode"]], "query_quant_mode_item_by_full_path() (neural_compressor.strategy.utils.tuningspace method)": [[326, "neural_compressor.strategy.utils.TuningSpace.query_quant_mode_item_by_full_path"]], "remove() (neural_compressor.strategy.utils.tuningitem method)": [[326, "neural_compressor.strategy.utils.TuningItem.remove"]], "fallbacktuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[327, "neural_compressor.strategy.utils.tuning_sampler.FallbackTuningSampler"]], "modelwisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[327, "neural_compressor.strategy.utils.tuning_sampler.ModelWiseTuningSampler"]], "optypewisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[327, "neural_compressor.strategy.utils.tuning_sampler.OpTypeWiseTuningSampler"]], "opwisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[327, "neural_compressor.strategy.utils.tuning_sampler.OpWiseTuningSampler"]], "smoothquantsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[327, "neural_compressor.strategy.utils.tuning_sampler.SmoothQuantSampler"]], "tuningorder (class in neural_compressor.strategy.utils.tuning_sampler)": [[327, "neural_compressor.strategy.utils.tuning_sampler.TuningOrder"]], "tuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[327, "neural_compressor.strategy.utils.tuning_sampler.TuningSampler"]], "tuningsamplerregistry (class in neural_compressor.strategy.utils.tuning_sampler)": [[327, "neural_compressor.strategy.utils.tuning_sampler.TuningSamplerRegistry"]], "get_opwise_candidate() (neural_compressor.strategy.utils.tuning_sampler.opwisetuningsampler method)": [[327, "neural_compressor.strategy.utils.tuning_sampler.OpWiseTuningSampler.get_opwise_candidate"]], "neural_compressor.strategy.utils.tuning_sampler": [[327, "module-neural_compressor.strategy.utils.tuning_sampler"]], "register() (neural_compressor.strategy.utils.tuning_sampler.tuningsamplerregistry class method)": [[327, "neural_compressor.strategy.utils.tuning_sampler.TuningSamplerRegistry.register"]], "tuningitem (class in neural_compressor.strategy.utils.tuning_space)": [[328, "neural_compressor.strategy.utils.tuning_space.TuningItem"]], "tuningspace (class in neural_compressor.strategy.utils.tuning_space)": [[328, "neural_compressor.strategy.utils.tuning_space.TuningSpace"]], "append() (neural_compressor.strategy.utils.tuning_space.tuningitem method)": [[328, "neural_compressor.strategy.utils.tuning_space.TuningItem.append"]], "get_default_config() (neural_compressor.strategy.utils.tuning_space.tuningspace method)": [[328, "neural_compressor.strategy.utils.tuning_space.TuningSpace.get_default_config"]], "get_default_full_path() (neural_compressor.strategy.utils.tuning_space.tuningspace method)": [[328, "neural_compressor.strategy.utils.tuning_space.TuningSpace.get_default_full_path"]], "get_details() (neural_compressor.strategy.utils.tuning_space.tuningitem method)": [[328, "neural_compressor.strategy.utils.tuning_space.TuningItem.get_details"]], "get_item_by_path() (neural_compressor.strategy.utils.tuning_space.tuningspace method)": [[328, "neural_compressor.strategy.utils.tuning_space.TuningSpace.get_item_by_path"]], "get_op_default_path_by_pattern() (neural_compressor.strategy.utils.tuning_space.tuningspace method)": [[328, "neural_compressor.strategy.utils.tuning_space.TuningSpace.get_op_default_path_by_pattern"]], "get_op_mode_by_query_order() (in module neural_compressor.strategy.utils.tuning_space)": [[328, "neural_compressor.strategy.utils.tuning_space.get_op_mode_by_query_order"]], "get_option_by_name() (neural_compressor.strategy.utils.tuning_space.tuningitem method)": [[328, "neural_compressor.strategy.utils.tuning_space.TuningItem.get_option_by_name"]], "get_options_name() (neural_compressor.strategy.utils.tuning_space.tuningitem method)": [[328, "neural_compressor.strategy.utils.tuning_space.TuningItem.get_options_name"]], "initial_tuning_cfg_with_quant_mode() (in module neural_compressor.strategy.utils.tuning_space)": [[328, "neural_compressor.strategy.utils.tuning_space.initial_tuning_cfg_with_quant_mode"]], "neural_compressor.strategy.utils.tuning_space": [[328, "module-neural_compressor.strategy.utils.tuning_space"]], "options (neural_compressor.strategy.utils.tuning_space.tuningitem property)": [[328, "neural_compressor.strategy.utils.tuning_space.TuningItem.options"]], "pattern_to_internal() (in module neural_compressor.strategy.utils.tuning_space)": [[328, "neural_compressor.strategy.utils.tuning_space.pattern_to_internal"]], "pattern_to_path() (in module neural_compressor.strategy.utils.tuning_space)": [[328, "neural_compressor.strategy.utils.tuning_space.pattern_to_path"]], "quant_mode_from_pattern() (in module neural_compressor.strategy.utils.tuning_space)": [[328, "neural_compressor.strategy.utils.tuning_space.quant_mode_from_pattern"]], "query_item_option() (neural_compressor.strategy.utils.tuning_space.tuningspace method)": [[328, "neural_compressor.strategy.utils.tuning_space.TuningSpace.query_item_option"]], "query_items_by_quant_mode() (neural_compressor.strategy.utils.tuning_space.tuningspace method)": [[328, "neural_compressor.strategy.utils.tuning_space.TuningSpace.query_items_by_quant_mode"]], "query_quant_mode_item_by_full_path() (neural_compressor.strategy.utils.tuning_space.tuningspace method)": [[328, "neural_compressor.strategy.utils.tuning_space.TuningSpace.query_quant_mode_item_by_full_path"]], "remove() (neural_compressor.strategy.utils.tuning_space.tuningitem method)": [[328, "neural_compressor.strategy.utils.tuning_space.TuningItem.remove"]], "optuningconfig (class in neural_compressor.strategy.utils.tuning_structs)": [[329, "neural_compressor.strategy.utils.tuning_structs.OpTuningConfig"]], "from_state() (neural_compressor.strategy.utils.tuning_structs.optuningconfig class method)": [[329, "neural_compressor.strategy.utils.tuning_structs.OpTuningConfig.from_state"]], "get_state() (neural_compressor.strategy.utils.tuning_structs.optuningconfig method)": [[329, "neural_compressor.strategy.utils.tuning_structs.OpTuningConfig.get_state"]], "neural_compressor.strategy.utils.tuning_structs": [[329, "module-neural_compressor.strategy.utils.tuning_structs"]], "ordereddefaultdict (class in neural_compressor.strategy.utils.utility)": [[330, "neural_compressor.strategy.utils.utility.OrderedDefaultDict"]], "extract_data_type() (in module neural_compressor.strategy.utils.utility)": [[330, "neural_compressor.strategy.utils.utility.extract_data_type"]], "get_adaptor_name() (in module neural_compressor.strategy.utils.utility)": [[330, "neural_compressor.strategy.utils.utility.get_adaptor_name"]], "neural_compressor.strategy.utils.utility": [[330, "module-neural_compressor.strategy.utils.utility"]], "reverted_data_type() (in module neural_compressor.strategy.utils.utility)": [[330, "neural_compressor.strategy.utils.utility.reverted_data_type"]], "callbacks (class in neural_compressor.training)": [[331, "neural_compressor.training.CallBacks"]], "compressionmanager (class in neural_compressor.training)": [[331, "neural_compressor.training.CompressionManager"]], "eval_dataloader (neural_compressor.training.compressionmanager property)": [[331, "neural_compressor.training.CompressionManager.eval_dataloader"]], "eval_func (neural_compressor.training.compressionmanager property)": [[331, "neural_compressor.training.CompressionManager.eval_func"]], "export() (neural_compressor.training.compressionmanager method)": [[331, "neural_compressor.training.CompressionManager.export"]], "fit() (in module neural_compressor.training)": [[331, "neural_compressor.training.fit"]], "fit() (neural_compressor.training.compressionmanager method)": [[331, "neural_compressor.training.CompressionManager.fit"]], "metric (neural_compressor.training.compressionmanager property)": [[331, "neural_compressor.training.CompressionManager.metric"]], "neural_compressor.training": [[331, "module-neural_compressor.training"]], "on_after_compute_loss() (neural_compressor.training.callbacks method)": [[331, "neural_compressor.training.CallBacks.on_after_compute_loss"]], "on_after_eval() (neural_compressor.training.callbacks method)": [[331, "neural_compressor.training.CallBacks.on_after_eval"]], "on_after_optimizer_step() (neural_compressor.training.callbacks method)": [[331, "neural_compressor.training.CallBacks.on_after_optimizer_step"]], "on_before_eval() (neural_compressor.training.callbacks method)": [[331, "neural_compressor.training.CallBacks.on_before_eval"]], "on_before_optimizer_step() (neural_compressor.training.callbacks method)": [[331, "neural_compressor.training.CallBacks.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.training.callbacks method)": [[331, "neural_compressor.training.CallBacks.on_epoch_begin"]], "on_epoch_end() (neural_compressor.training.callbacks method)": [[331, "neural_compressor.training.CallBacks.on_epoch_end"]], "on_step_begin() (neural_compressor.training.callbacks method)": [[331, "neural_compressor.training.CallBacks.on_step_begin"]], "on_step_end() (neural_compressor.training.callbacks method)": [[331, "neural_compressor.training.CallBacks.on_step_end"]], "on_train_begin() (neural_compressor.training.callbacks method)": [[331, "neural_compressor.training.CallBacks.on_train_begin"]], "on_train_end() (neural_compressor.training.callbacks method)": [[331, "neural_compressor.training.CallBacks.on_train_end"]], "prepare_compression() (in module neural_compressor.training)": [[331, "neural_compressor.training.prepare_compression"]], "save() (neural_compressor.training.compressionmanager method)": [[331, "neural_compressor.training.CompressionManager.save"]], "train_func (neural_compressor.training.compressionmanager property)": [[331, "neural_compressor.training.CompressionManager.train_func"]], "layerhistogramcollector (class in neural_compressor.utils.collect_layer_histogram)": [[332, "neural_compressor.utils.collect_layer_histogram.LayerHistogramCollector"]], "collect() (neural_compressor.utils.collect_layer_histogram.layerhistogramcollector method)": [[332, "neural_compressor.utils.collect_layer_histogram.LayerHistogramCollector.collect"]], "neural_compressor.utils.collect_layer_histogram": [[332, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[333, "module-neural_compressor.utils.constant"]], "create_dataloader() (in module neural_compressor.utils.create_obj_from_config)": [[334, "neural_compressor.utils.create_obj_from_config.create_dataloader"]], "create_dataset() (in module neural_compressor.utils.create_obj_from_config)": [[334, "neural_compressor.utils.create_obj_from_config.create_dataset"]], "create_eval_func() (in module neural_compressor.utils.create_obj_from_config)": [[334, "neural_compressor.utils.create_obj_from_config.create_eval_func"]], "create_train_func() (in module neural_compressor.utils.create_obj_from_config)": [[334, "neural_compressor.utils.create_obj_from_config.create_train_func"]], "get_algorithm() (in module neural_compressor.utils.create_obj_from_config)": [[334, "neural_compressor.utils.create_obj_from_config.get_algorithm"]], "get_func_from_config() (in module neural_compressor.utils.create_obj_from_config)": [[334, "neural_compressor.utils.create_obj_from_config.get_func_from_config"]], "get_metrics() (in module neural_compressor.utils.create_obj_from_config)": [[334, "neural_compressor.utils.create_obj_from_config.get_metrics"]], "get_postprocess() (in module neural_compressor.utils.create_obj_from_config)": [[334, "neural_compressor.utils.create_obj_from_config.get_postprocess"]], "get_preprocess() (in module neural_compressor.utils.create_obj_from_config)": [[334, "neural_compressor.utils.create_obj_from_config.get_preprocess"]], "neural_compressor.utils.create_obj_from_config": [[334, "module-neural_compressor.utils.create_obj_from_config"]], "layerhistogramcollector (class in neural_compressor.utils)": [[335, "neural_compressor.utils.LayerHistogramCollector"]], "collect() (neural_compressor.utils.layerhistogramcollector method)": [[335, "neural_compressor.utils.LayerHistogramCollector.collect"]], "debug() (in module neural_compressor.utils)": [[335, "neural_compressor.utils.debug"]], "error() (in module neural_compressor.utils)": [[335, "neural_compressor.utils.error"]], "fatal() (in module neural_compressor.utils)": [[335, "neural_compressor.utils.fatal"]], "info() (in module neural_compressor.utils)": [[335, "neural_compressor.utils.info"]], "log() (in module neural_compressor.utils)": [[335, "neural_compressor.utils.log"]], "neural_compressor.utils": [[335, "module-neural_compressor.utils"]], "set_random_seed() (in module neural_compressor.utils)": [[335, "neural_compressor.utils.set_random_seed"]], "warn() (in module neural_compressor.utils)": [[335, "neural_compressor.utils.warn"]], "warning() (in module neural_compressor.utils)": [[335, "neural_compressor.utils.warning"]], "kl_divergence (class in neural_compressor.utils.kl_divergence)": [[336, "neural_compressor.utils.kl_divergence.KL_Divergence"]], "expand_quantized_bins() (neural_compressor.utils.kl_divergence.kl_divergence method)": [[336, "neural_compressor.utils.kl_divergence.KL_Divergence.expand_quantized_bins"]], "get_threshold() (neural_compressor.utils.kl_divergence.kl_divergence method)": [[336, "neural_compressor.utils.kl_divergence.KL_Divergence.get_threshold"]], "neural_compressor.utils.kl_divergence": [[336, "module-neural_compressor.utils.kl_divergence"]], "safe_entropy() (neural_compressor.utils.kl_divergence.kl_divergence method)": [[336, "neural_compressor.utils.kl_divergence.KL_Divergence.safe_entropy"]], "optimizedmodel (class in neural_compressor.utils.load_huggingface)": [[337, "neural_compressor.utils.load_huggingface.OptimizedModel"]], "from_pretrained() (neural_compressor.utils.load_huggingface.optimizedmodel class method)": [[337, "neural_compressor.utils.load_huggingface.OptimizedModel.from_pretrained"]], "neural_compressor.utils.load_huggingface": [[337, "module-neural_compressor.utils.load_huggingface"]], "save_for_huggingface_upstream() (in module neural_compressor.utils.load_huggingface)": [[337, "neural_compressor.utils.load_huggingface.save_for_huggingface_upstream"]], "logger (class in neural_compressor.utils.logger)": [[338, "neural_compressor.utils.logger.Logger"]], "debug() (in module neural_compressor.utils.logger)": [[338, "neural_compressor.utils.logger.debug"]], "error() (in module neural_compressor.utils.logger)": [[338, "neural_compressor.utils.logger.error"]], "fatal() (in module neural_compressor.utils.logger)": [[338, "neural_compressor.utils.logger.fatal"]], "get_logger() (neural_compressor.utils.logger.logger method)": [[338, "neural_compressor.utils.logger.Logger.get_logger"]], "info() (in module neural_compressor.utils.logger)": [[338, "neural_compressor.utils.logger.info"]], "log() (in module neural_compressor.utils.logger)": [[338, "neural_compressor.utils.logger.log"]], "neural_compressor.utils.logger": [[338, "module-neural_compressor.utils.logger"]], "warn() (in module neural_compressor.utils.logger)": [[338, "neural_compressor.utils.logger.warn"]], "warning() (in module neural_compressor.utils.logger)": [[338, "neural_compressor.utils.logger.warning"]], "neural_compressor.utils.options": [[339, "module-neural_compressor.utils.options"]], "onnxrt (class in neural_compressor.utils.options)": [[339, "neural_compressor.utils.options.onnxrt"]], "load() (in module neural_compressor.utils.pytorch)": [[340, "neural_compressor.utils.pytorch.load"]], "neural_compressor.utils.pytorch": [[340, "module-neural_compressor.utils.pytorch"]], "captureoutputtofile (class in neural_compressor.utils.utility)": [[341, "neural_compressor.utils.utility.CaptureOutputToFile"]], "cpuinfo (class in neural_compressor.utils.utility)": [[341, "neural_compressor.utils.utility.CpuInfo"]], "dequantize() (in module neural_compressor.utils.utility)": [[341, "neural_compressor.utils.utility.Dequantize"]], "dequantizeweight() (in module neural_compressor.utils.utility)": [[341, "neural_compressor.utils.utility.DequantizeWeight"]], "global_state (class in neural_compressor.utils.utility)": [[341, "neural_compressor.utils.utility.GLOBAL_STATE"]], "lazyimport (class in neural_compressor.utils.utility)": [[341, "neural_compressor.utils.utility.LazyImport"]], "mode (class in neural_compressor.utils.utility)": [[341, "neural_compressor.utils.utility.MODE"]], "statistics (class in neural_compressor.utils.utility)": [[341, "neural_compressor.utils.utility.Statistics"]], "bf16 (neural_compressor.utils.utility.cpuinfo property)": [[341, "neural_compressor.utils.utility.CpuInfo.bf16"]], "combine_histogram() (in module neural_compressor.utils.utility)": [[341, "neural_compressor.utils.utility.combine_histogram"]], "compute_sparsity() (in module neural_compressor.utils.utility)": [[341, "neural_compressor.utils.utility.compute_sparsity"]], "cores_per_socket (neural_compressor.utils.utility.cpuinfo property)": [[341, "neural_compressor.utils.utility.CpuInfo.cores_per_socket"]], "dump_data_to_local() (in module neural_compressor.utils.utility)": [[341, "neural_compressor.utils.utility.dump_data_to_local"]], "dump_elapsed_time() (in module neural_compressor.utils.utility)": [[341, "neural_compressor.utils.utility.dump_elapsed_time"]], "equal_dicts() (in module neural_compressor.utils.utility)": [[341, "neural_compressor.utils.utility.equal_dicts"]], "fault_tolerant_file() (in module neural_compressor.utils.utility)": [[341, "neural_compressor.utils.utility.fault_tolerant_file"]], "get_all_fp32_data() (in module neural_compressor.utils.utility)": [[341, "neural_compressor.utils.utility.get_all_fp32_data"]], "get_number_of_sockets() (neural_compressor.utils.utility.cpuinfo method)": [[341, "neural_compressor.utils.utility.CpuInfo.get_number_of_sockets"]], "get_size() (in module neural_compressor.utils.utility)": [[341, "neural_compressor.utils.utility.get_size"]], "get_tensor_histogram() (in module neural_compressor.utils.utility)": [[341, "neural_compressor.utils.utility.get_tensor_histogram"]], "get_tuning_history() (in module neural_compressor.utils.utility)": [[341, "neural_compressor.utils.utility.get_tuning_history"]], "load_data_from_pkl() (in module neural_compressor.utils.utility)": [[341, "neural_compressor.utils.utility.load_data_from_pkl"]], "neural_compressor.utils.utility": [[341, "module-neural_compressor.utils.utility"]], "print_stat() (neural_compressor.utils.utility.statistics method)": [[341, "neural_compressor.utils.utility.Statistics.print_stat"]], "recover() (in module neural_compressor.utils.utility)": [[341, "neural_compressor.utils.utility.recover"]], "set_random_seed() (in module neural_compressor.utils.utility)": [[341, "neural_compressor.utils.utility.set_random_seed"]], "set_resume_from() (in module neural_compressor.utils.utility)": [[341, "neural_compressor.utils.utility.set_resume_from"]], "set_tensorboard() (in module neural_compressor.utils.utility)": [[341, "neural_compressor.utils.utility.set_tensorboard"]], "set_workspace() (in module neural_compressor.utils.utility)": [[341, "neural_compressor.utils.utility.set_workspace"]], "show_memory_info() (in module neural_compressor.utils.utility)": [[341, "neural_compressor.utils.utility.show_memory_info"]], "singleton() (in module neural_compressor.utils.utility)": [[341, "neural_compressor.utils.utility.singleton"]], "str2array() (in module neural_compressor.utils.utility)": [[341, "neural_compressor.utils.utility.str2array"]], "time_limit() (in module neural_compressor.utils.utility)": [[341, "neural_compressor.utils.utility.time_limit"]], "version1_eq_version2() (in module neural_compressor.utils.utility)": [[341, "neural_compressor.utils.utility.version1_eq_version2"]], "version1_gt_version2() (in module neural_compressor.utils.utility)": [[341, "neural_compressor.utils.utility.version1_gt_version2"]], "version1_gte_version2() (in module neural_compressor.utils.utility)": [[341, "neural_compressor.utils.utility.version1_gte_version2"]], "version1_lt_version2() (in module neural_compressor.utils.utility)": [[341, "neural_compressor.utils.utility.version1_lt_version2"]], "version1_lte_version2() (in module neural_compressor.utils.utility)": [[341, "neural_compressor.utils.utility.version1_lte_version2"]], "vnni (neural_compressor.utils.utility.cpuinfo property)": [[341, "neural_compressor.utils.utility.CpuInfo.vnni"]], "benchmark (class in neural_compressor.ux.components.benchmark.benchmark)": [[342, "neural_compressor.ux.components.benchmark.benchmark.Benchmark"]], "dataloaderinterface (class in neural_compressor.ux.components.benchmark.benchmark)": [[342, "neural_compressor.ux.components.benchmark.benchmark.DataloaderInterface"]], "config_filename (neural_compressor.ux.components.benchmark.benchmark.benchmark property)": [[342, "neural_compressor.ux.components.benchmark.benchmark.Benchmark.config_filename"]], "configuration_data (neural_compressor.ux.components.benchmark.benchmark.benchmark property)": [[342, "neural_compressor.ux.components.benchmark.benchmark.Benchmark.configuration_data"]], "execute() (neural_compressor.ux.components.benchmark.benchmark.benchmark method)": [[342, "neural_compressor.ux.components.benchmark.benchmark.Benchmark.execute"]], "generate_config() (neural_compressor.ux.components.benchmark.benchmark.benchmark method)": [[342, "neural_compressor.ux.components.benchmark.benchmark.Benchmark.generate_config"]], "neural_compressor.ux.components.benchmark.benchmark": [[342, "module-neural_compressor.ux.components.benchmark.benchmark"]], "workdir (neural_compressor.ux.components.benchmark.benchmark.benchmark property)": [[342, "neural_compressor.ux.components.benchmark.benchmark.Benchmark.workdir"]], "benchmark_model() (in module neural_compressor.ux.components.benchmark.benchmark_model)": [[343, "neural_compressor.ux.components.benchmark.benchmark_model.benchmark_model"]], "neural_compressor.ux.components.benchmark.benchmark_model": [[343, "module-neural_compressor.ux.components.benchmark.benchmark_model"]], "parse_args() (in module neural_compressor.ux.components.benchmark.benchmark_model)": [[343, "neural_compressor.ux.components.benchmark.benchmark_model.parse_args"]], "set_eager_execution() (in module neural_compressor.ux.components.benchmark.benchmark_model)": [[343, "neural_compressor.ux.components.benchmark.benchmark_model.set_eager_execution"]], "benchmark_result_update() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[344, "neural_compressor.ux.components.benchmark.execute_benchmark.benchmark_result_update"]], "benchmark_result_update_pytorch_script() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[344, "neural_compressor.ux.components.benchmark.execute_benchmark.benchmark_result_update_pytorch_script"]], "execute_benchmark() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[344, "neural_compressor.ux.components.benchmark.execute_benchmark.execute_benchmark"]], "execute_real_benchmark() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[344, "neural_compressor.ux.components.benchmark.execute_benchmark.execute_real_benchmark"]], "neural_compressor.ux.components.benchmark.execute_benchmark": [[344, "module-neural_compressor.ux.components.benchmark.execute_benchmark"]], "pytorch_script_bench_optimizations() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[344, "neural_compressor.ux.components.benchmark.execute_benchmark.pytorch_script_bench_optimizations"]], "pytorch_script_bench_original_model() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[344, "neural_compressor.ux.components.benchmark.execute_benchmark.pytorch_script_bench_original_model"]], "benchmarks (class in neural_compressor.ux.components.benchmark)": [[345, "neural_compressor.ux.components.benchmark.Benchmarks"]], "neural_compressor.ux.components.benchmark": [[345, "module-neural_compressor.ux.components.benchmark"]], "benchmarkconfiggenerator (class in neural_compressor.ux.components.config_generator.benchmark_config_generator)": [[346, "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.benchmark_config_generator.benchmarkconfiggenerator method)": [[346, "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator.generate"]], "generate_accuracy_config() (neural_compressor.ux.components.config_generator.benchmark_config_generator.benchmarkconfiggenerator method)": [[346, "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator.generate_accuracy_config"]], "generate_evaluation_config() (neural_compressor.ux.components.config_generator.benchmark_config_generator.benchmarkconfiggenerator method)": [[346, "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator.generate_evaluation_config"]], "generate_performance_config() (neural_compressor.ux.components.config_generator.benchmark_config_generator.benchmarkconfiggenerator method)": [[346, "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator.generate_performance_config"]], "neural_compressor.ux.components.config_generator.benchmark_config_generator": [[346, "module-neural_compressor.ux.components.config_generator.benchmark_config_generator"]], "configgenerator (class in neural_compressor.ux.components.config_generator.config_generator)": [[347, "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.config_generator.configgenerator method)": [[347, "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator.generate"]], "generate_dataloader_config() (neural_compressor.ux.components.config_generator.config_generator.configgenerator method)": [[347, "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator.generate_dataloader_config"]], "generate_model_config() (neural_compressor.ux.components.config_generator.config_generator.configgenerator method)": [[347, "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator.generate_model_config"]], "get_predefined_config_path() (neural_compressor.ux.components.config_generator.config_generator.configgenerator method)": [[347, "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator.get_predefined_config_path"]], "neural_compressor.ux.components.config_generator.config_generator": [[347, "module-neural_compressor.ux.components.config_generator.config_generator"]], "graphoptimizationconfiggenerator (class in neural_compressor.ux.components.config_generator.graph_optimization_config_generator)": [[348, "neural_compressor.ux.components.config_generator.graph_optimization_config_generator.GraphOptimizationConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.graph_optimization_config_generator.graphoptimizationconfiggenerator method)": [[348, "neural_compressor.ux.components.config_generator.graph_optimization_config_generator.GraphOptimizationConfigGenerator.generate"]], "generate_evaluation_config() (neural_compressor.ux.components.config_generator.graph_optimization_config_generator.graphoptimizationconfiggenerator method)": [[348, "neural_compressor.ux.components.config_generator.graph_optimization_config_generator.GraphOptimizationConfigGenerator.generate_evaluation_config"]], "generate_graph_optimization_config() (neural_compressor.ux.components.config_generator.graph_optimization_config_generator.graphoptimizationconfiggenerator method)": [[348, "neural_compressor.ux.components.config_generator.graph_optimization_config_generator.GraphOptimizationConfigGenerator.generate_graph_optimization_config"]], "neural_compressor.ux.components.config_generator.graph_optimization_config_generator": [[348, "module-neural_compressor.ux.components.config_generator.graph_optimization_config_generator"]], "neural_compressor.ux.components.config_generator": [[349, "module-neural_compressor.ux.components.config_generator"]], "mixedprecisionconfiggenerator (class in neural_compressor.ux.components.config_generator.mixed_precision_config_generator)": [[350, "neural_compressor.ux.components.config_generator.mixed_precision_config_generator.MixedPrecisionConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.mixed_precision_config_generator.mixedprecisionconfiggenerator method)": [[350, "neural_compressor.ux.components.config_generator.mixed_precision_config_generator.MixedPrecisionConfigGenerator.generate"]], "generate_evaluation_config() (neural_compressor.ux.components.config_generator.mixed_precision_config_generator.mixedprecisionconfiggenerator method)": [[350, "neural_compressor.ux.components.config_generator.mixed_precision_config_generator.MixedPrecisionConfigGenerator.generate_evaluation_config"]], "generate_mixed_precision_config() (neural_compressor.ux.components.config_generator.mixed_precision_config_generator.mixedprecisionconfiggenerator method)": [[350, "neural_compressor.ux.components.config_generator.mixed_precision_config_generator.MixedPrecisionConfigGenerator.generate_mixed_precision_config"]], "neural_compressor.ux.components.config_generator.mixed_precision_config_generator": [[350, "module-neural_compressor.ux.components.config_generator.mixed_precision_config_generator"]], "profilingconfiggenerator (class in neural_compressor.ux.components.config_generator.profiling_config_generator)": [[351, "neural_compressor.ux.components.config_generator.profiling_config_generator.ProfilingConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.profiling_config_generator.profilingconfiggenerator method)": [[351, "neural_compressor.ux.components.config_generator.profiling_config_generator.ProfilingConfigGenerator.generate"]], "neural_compressor.ux.components.config_generator.profiling_config_generator": [[351, "module-neural_compressor.ux.components.config_generator.profiling_config_generator"]], "pruningconfiggenerator (class in neural_compressor.ux.components.config_generator.pruning_config_generator)": [[352, "neural_compressor.ux.components.config_generator.pruning_config_generator.PruningConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.pruning_config_generator.pruningconfiggenerator method)": [[352, "neural_compressor.ux.components.config_generator.pruning_config_generator.PruningConfigGenerator.generate"]], "generate_evaluation_config() (neural_compressor.ux.components.config_generator.pruning_config_generator.pruningconfiggenerator method)": [[352, "neural_compressor.ux.components.config_generator.pruning_config_generator.PruningConfigGenerator.generate_evaluation_config"]], "generate_pruning_config() (neural_compressor.ux.components.config_generator.pruning_config_generator.pruningconfiggenerator method)": [[352, "neural_compressor.ux.components.config_generator.pruning_config_generator.PruningConfigGenerator.generate_pruning_config"]], "neural_compressor.ux.components.config_generator.pruning_config_generator": [[352, "module-neural_compressor.ux.components.config_generator.pruning_config_generator"]], "quantizationconfiggenerator (class in neural_compressor.ux.components.config_generator.quantization_config_generator)": [[353, "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.quantization_config_generator.quantizationconfiggenerator method)": [[353, "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator.generate"]], "generate_evaluation_config() (neural_compressor.ux.components.config_generator.quantization_config_generator.quantizationconfiggenerator method)": [[353, "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator.generate_evaluation_config"]], "generate_quantization_config() (neural_compressor.ux.components.config_generator.quantization_config_generator.quantizationconfiggenerator method)": [[353, "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator.generate_quantization_config"]], "generate_tuning_config() (neural_compressor.ux.components.config_generator.quantization_config_generator.quantizationconfiggenerator method)": [[353, "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator.generate_tuning_config"]], "neural_compressor.ux.components.config_generator.quantization_config_generator": [[353, "module-neural_compressor.ux.components.config_generator.quantization_config_generator"]], "configurationparser (class in neural_compressor.ux.components.configuration_wizard.configuration_parser)": [[354, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser"]], "get_param_type() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser method)": [[354, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.get_param_type"]], "neural_compressor.ux.components.configuration_wizard.configuration_parser": [[354, "module-neural_compressor.ux.components.configuration_wizard.configuration_parser"]], "normalize_string_list() (in module neural_compressor.ux.components.configuration_wizard.configuration_parser)": [[354, "neural_compressor.ux.components.configuration_wizard.configuration_parser.normalize_string_list"]], "parse() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser method)": [[354, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.parse"]], "parse_dataloader() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser method)": [[354, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.parse_dataloader"]], "parse_evaluation_data() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser method)": [[354, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.parse_evaluation_data"]], "parse_list_value() (in module neural_compressor.ux.components.configuration_wizard.configuration_parser)": [[354, "neural_compressor.ux.components.configuration_wizard.configuration_parser.parse_list_value"]], "parse_metric() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser method)": [[354, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.parse_metric"]], "parse_multidim_list() (in module neural_compressor.ux.components.configuration_wizard.configuration_parser)": [[354, "neural_compressor.ux.components.configuration_wizard.configuration_parser.parse_multidim_list"]], "parse_transforms() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser method)": [[354, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.parse_transforms"]], "parse_value() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser static method)": [[354, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.parse_value"]], "get_boundary_nodes() (in module neural_compressor.ux.components.configuration_wizard.get_boundary_nodes)": [[355, "neural_compressor.ux.components.configuration_wizard.get_boundary_nodes.get_boundary_nodes"]], "neural_compressor.ux.components.configuration_wizard.get_boundary_nodes": [[355, "module-neural_compressor.ux.components.configuration_wizard.get_boundary_nodes"]], "get_predefined_configuration() (in module neural_compressor.ux.components.configuration_wizard.get_configuration)": [[356, "neural_compressor.ux.components.configuration_wizard.get_configuration.get_predefined_configuration"]], "neural_compressor.ux.components.configuration_wizard.get_configuration": [[356, "module-neural_compressor.ux.components.configuration_wizard.get_configuration"]], "update_config_to_machine_specification() (in module neural_compressor.ux.components.configuration_wizard.get_configuration)": [[356, "neural_compressor.ux.components.configuration_wizard.get_configuration.update_config_to_machine_specification"]], "neural_compressor.ux.components.configuration_wizard": [[357, "module-neural_compressor.ux.components.configuration_wizard"]], "feeder (class in neural_compressor.ux.components.configuration_wizard.params_feeder)": [[358, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder"]], "feed() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[358, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.feed"]], "get_dataloaders() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[358, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_dataloaders"]], "get_domains() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[358, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_domains"]], "get_frameworks() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder static method)": [[358, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_frameworks"]], "get_metrics() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[358, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_metrics"]], "get_models() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[358, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_models"]], "get_objectives() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder static method)": [[358, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_objectives"]], "get_possible_values() (in module neural_compressor.ux.components.configuration_wizard.params_feeder)": [[358, "neural_compressor.ux.components.configuration_wizard.params_feeder.get_possible_values"]], "get_precisions() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[358, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_precisions"]], "get_quantization_approaches() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[358, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_quantization_approaches"]], "get_strategies() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder static method)": [[358, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_strategies"]], "get_transforms() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[358, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_transforms"]], "neural_compressor.ux.components.configuration_wizard.params_feeder": [[358, "module-neural_compressor.ux.components.configuration_wizard.params_feeder"]], "pruningconfigparser (class in neural_compressor.ux.components.configuration_wizard.pruning_config_parser)": [[359, "neural_compressor.ux.components.configuration_wizard.pruning_config_parser.PruningConfigParser"]], "generate_tree() (neural_compressor.ux.components.configuration_wizard.pruning_config_parser.pruningconfigparser method)": [[359, "neural_compressor.ux.components.configuration_wizard.pruning_config_parser.PruningConfigParser.generate_tree"]], "neural_compressor.ux.components.configuration_wizard.pruning_config_parser": [[359, "module-neural_compressor.ux.components.configuration_wizard.pruning_config_parser"]], "parse() (neural_compressor.ux.components.configuration_wizard.pruning_config_parser.pruningconfigparser method)": [[359, "neural_compressor.ux.components.configuration_wizard.pruning_config_parser.PruningConfigParser.parse"]], "parse_entry() (neural_compressor.ux.components.configuration_wizard.pruning_config_parser.pruningconfigparser method)": [[359, "neural_compressor.ux.components.configuration_wizard.pruning_config_parser.PruningConfigParser.parse_entry"]], "dbmanager (class in neural_compressor.ux.components.db_manager.db_manager)": [[360, "neural_compressor.ux.components.db_manager.db_manager.DBManager"]], "create_all() (neural_compressor.ux.components.db_manager.db_manager.dbmanager method)": [[360, "neural_compressor.ux.components.db_manager.db_manager.DBManager.create_all"]], "create_sqlalchemy_engine() (neural_compressor.ux.components.db_manager.db_manager.dbmanager method)": [[360, "neural_compressor.ux.components.db_manager.db_manager.DBManager.create_sqlalchemy_engine"]], "engine (neural_compressor.ux.components.db_manager.db_manager.dbmanager property)": [[360, "neural_compressor.ux.components.db_manager.db_manager.DBManager.engine"]], "initialize_database() (neural_compressor.ux.components.db_manager.db_manager.dbmanager method)": [[360, "neural_compressor.ux.components.db_manager.db_manager.DBManager.initialize_database"]], "neural_compressor.ux.components.db_manager.db_manager": [[360, "module-neural_compressor.ux.components.db_manager.db_manager"]], "benchmark (class in neural_compressor.ux.components.db_manager.db_models.benchmark)": [[361, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark"]], "add() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[361, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[361, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.build_info"]], "clean_status() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[361, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.clean_status"]], "delete_benchmark() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[361, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.delete_benchmark"]], "details() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[361, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.details"]], "list() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[361, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.list"]], "neural_compressor.ux.components.db_manager.db_models.benchmark": [[361, "module-neural_compressor.ux.components.db_manager.db_models.benchmark"]], "update_batch_size() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[361, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_batch_size"]], "update_config_path() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[361, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_config_path"]], "update_cores_per_instance() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[361, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_cores_per_instance"]], "update_dataset() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[361, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_dataset"]], "update_duration() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[361, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_duration"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[361, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_execution_command"]], "update_log_path() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[361, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_log_path"]], "update_mode() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[361, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_mode"]], "update_number_of_instance() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[361, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_number_of_instance"]], "update_status() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[361, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_status"]], "benchmarkresult (class in neural_compressor.ux.components.db_manager.db_models.benchmark_result)": [[362, "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult"]], "add() (neural_compressor.ux.components.db_manager.db_models.benchmark_result.benchmarkresult static method)": [[362, "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.benchmark_result.benchmarkresult static method)": [[362, "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult.build_info"]], "neural_compressor.ux.components.db_manager.db_models.benchmark_result": [[362, "module-neural_compressor.ux.components.db_manager.db_models.benchmark_result"]], "update_accuracy() (neural_compressor.ux.components.db_manager.db_models.benchmark_result.benchmarkresult static method)": [[362, "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult.update_accuracy"]], "update_performance() (neural_compressor.ux.components.db_manager.db_models.benchmark_result.benchmarkresult static method)": [[362, "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult.update_performance"]], "dataloader (class in neural_compressor.ux.components.db_manager.db_models.dataloader)": [[363, "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.dataloader)": [[363, "neural_compressor.ux.components.db_manager.db_models.dataloader.fill_dictionary"]], "list() (neural_compressor.ux.components.db_manager.db_models.dataloader.dataloader static method)": [[363, "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader.list"]], "list_by_framework() (neural_compressor.ux.components.db_manager.db_models.dataloader.dataloader static method)": [[363, "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader.list_by_framework"]], "neural_compressor.ux.components.db_manager.db_models.dataloader": [[363, "module-neural_compressor.ux.components.db_manager.db_models.dataloader"]], "query_to_list() (neural_compressor.ux.components.db_manager.db_models.dataloader.dataloader static method)": [[363, "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader.query_to_list"]], "update_params() (neural_compressor.ux.components.db_manager.db_models.dataloader.dataloader static method)": [[363, "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader.update_params"]], "dataset (class in neural_compressor.ux.components.db_manager.db_models.dataset)": [[364, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset"]], "add() (neural_compressor.ux.components.db_manager.db_models.dataset.dataset static method)": [[364, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.dataset.dataset static method)": [[364, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset.build_info"]], "delete_dataset() (neural_compressor.ux.components.db_manager.db_models.dataset.dataset static method)": [[364, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset.delete_dataset"]], "details() (neural_compressor.ux.components.db_manager.db_models.dataset.dataset static method)": [[364, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset.details"]], "list() (neural_compressor.ux.components.db_manager.db_models.dataset.dataset static method)": [[364, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset.list"]], "neural_compressor.ux.components.db_manager.db_models.dataset": [[364, "module-neural_compressor.ux.components.db_manager.db_models.dataset"]], "update_template_path() (neural_compressor.ux.components.db_manager.db_models.dataset.dataset static method)": [[364, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset.update_template_path"]], "domain (class in neural_compressor.ux.components.db_manager.db_models.domain)": [[365, "neural_compressor.ux.components.db_manager.db_models.domain.Domain"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.domain)": [[365, "neural_compressor.ux.components.db_manager.db_models.domain.fill_dictionary"]], "get_domain_id() (neural_compressor.ux.components.db_manager.db_models.domain.domain static method)": [[365, "neural_compressor.ux.components.db_manager.db_models.domain.Domain.get_domain_id"]], "list() (neural_compressor.ux.components.db_manager.db_models.domain.domain static method)": [[365, "neural_compressor.ux.components.db_manager.db_models.domain.Domain.list"]], "neural_compressor.ux.components.db_manager.db_models.domain": [[365, "module-neural_compressor.ux.components.db_manager.db_models.domain"]], "domainflavour (class in neural_compressor.ux.components.db_manager.db_models.domain_flavour)": [[366, "neural_compressor.ux.components.db_manager.db_models.domain_flavour.DomainFlavour"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.domain_flavour)": [[366, "neural_compressor.ux.components.db_manager.db_models.domain_flavour.fill_dictionary"]], "get_domain_flavour_id() (neural_compressor.ux.components.db_manager.db_models.domain_flavour.domainflavour static method)": [[366, "neural_compressor.ux.components.db_manager.db_models.domain_flavour.DomainFlavour.get_domain_flavour_id"]], "list() (neural_compressor.ux.components.db_manager.db_models.domain_flavour.domainflavour static method)": [[366, "neural_compressor.ux.components.db_manager.db_models.domain_flavour.DomainFlavour.list"]], "neural_compressor.ux.components.db_manager.db_models.domain_flavour": [[366, "module-neural_compressor.ux.components.db_manager.db_models.domain_flavour"]], "example (class in neural_compressor.ux.components.db_manager.db_models.example)": [[367, "neural_compressor.ux.components.db_manager.db_models.example.Example"]], "neural_compressor.ux.components.db_manager.db_models.example": [[367, "module-neural_compressor.ux.components.db_manager.db_models.example"]], "framework (class in neural_compressor.ux.components.db_manager.db_models.framework)": [[368, "neural_compressor.ux.components.db_manager.db_models.framework.Framework"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.framework)": [[368, "neural_compressor.ux.components.db_manager.db_models.framework.fill_dictionary"]], "get_framework_id() (neural_compressor.ux.components.db_manager.db_models.framework.framework static method)": [[368, "neural_compressor.ux.components.db_manager.db_models.framework.Framework.get_framework_id"]], "neural_compressor.ux.components.db_manager.db_models.framework": [[368, "module-neural_compressor.ux.components.db_manager.db_models.framework"]], "neural_compressor.ux.components.db_manager.db_models": [[369, "module-neural_compressor.ux.components.db_manager.db_models"]], "metric (class in neural_compressor.ux.components.db_manager.db_models.metric)": [[370, "neural_compressor.ux.components.db_manager.db_models.metric.Metric"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.metric)": [[370, "neural_compressor.ux.components.db_manager.db_models.metric.fill_dictionary"]], "list() (neural_compressor.ux.components.db_manager.db_models.metric.metric static method)": [[370, "neural_compressor.ux.components.db_manager.db_models.metric.Metric.list"]], "list_by_framework() (neural_compressor.ux.components.db_manager.db_models.metric.metric static method)": [[370, "neural_compressor.ux.components.db_manager.db_models.metric.Metric.list_by_framework"]], "neural_compressor.ux.components.db_manager.db_models.metric": [[370, "module-neural_compressor.ux.components.db_manager.db_models.metric"]], "query_to_list() (neural_compressor.ux.components.db_manager.db_models.metric.metric static method)": [[370, "neural_compressor.ux.components.db_manager.db_models.metric.Metric.query_to_list"]], "model (class in neural_compressor.ux.components.db_manager.db_models.model)": [[371, "neural_compressor.ux.components.db_manager.db_models.model.Model"]], "add() (neural_compressor.ux.components.db_manager.db_models.model.model static method)": [[371, "neural_compressor.ux.components.db_manager.db_models.model.Model.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.model.model static method)": [[371, "neural_compressor.ux.components.db_manager.db_models.model.Model.build_info"]], "delete_model() (neural_compressor.ux.components.db_manager.db_models.model.model static method)": [[371, "neural_compressor.ux.components.db_manager.db_models.model.Model.delete_model"]], "details() (neural_compressor.ux.components.db_manager.db_models.model.model static method)": [[371, "neural_compressor.ux.components.db_manager.db_models.model.Model.details"]], "list() (neural_compressor.ux.components.db_manager.db_models.model.model static method)": [[371, "neural_compressor.ux.components.db_manager.db_models.model.Model.list"]], "neural_compressor.ux.components.db_manager.db_models.model": [[371, "module-neural_compressor.ux.components.db_manager.db_models.model"]], "optimization (class in neural_compressor.ux.components.db_manager.db_models.optimization)": [[372, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization"]], "add() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[372, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[372, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.build_info"]], "clean_status() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[372, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.clean_status"]], "delete_optimization() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[372, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.delete_optimization"]], "details() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[372, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.details"]], "get_optimization_by_project_and_model() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[372, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.get_optimization_by_project_and_model"]], "get_pinned_benchmarks() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[372, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.get_pinned_benchmarks"]], "list() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[372, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.list"]], "neural_compressor.ux.components.db_manager.db_models.optimization": [[372, "module-neural_compressor.ux.components.db_manager.db_models.optimization"]], "pin_accuracy_benchmark() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[372, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.pin_accuracy_benchmark"]], "pin_performance_benchmark() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[372, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.pin_performance_benchmark"]], "unpin_benchmark() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[372, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.unpin_benchmark"]], "update_batch_size() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[372, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_batch_size"]], "update_config_path() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[372, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_config_path"]], "update_dataset() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[372, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_dataset"]], "update_duration() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[372, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_duration"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[372, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_execution_command"]], "update_log_path() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[372, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_log_path"]], "update_optimized_model() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[372, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_optimized_model"]], "update_precision() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[372, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_precision"]], "update_pruning_details() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[372, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_pruning_details"]], "update_sampling_size() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[372, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_sampling_size"]], "update_status() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[372, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_status"]], "update_tuning_details() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[372, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_tuning_details"]], "optimizationtype (class in neural_compressor.ux.components.db_manager.db_models.optimization_type)": [[373, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType"]], "add() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[373, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.add"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.optimization_type)": [[373, "neural_compressor.ux.components.db_manager.db_models.optimization_type.fill_dictionary"]], "get_optimization_type_by_id() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[373, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.get_optimization_type_by_id"]], "get_optimization_type_by_name() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[373, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.get_optimization_type_by_name"]], "get_optimization_type_for_precision() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[373, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.get_optimization_type_for_precision"]], "get_optimization_type_id() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[373, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.get_optimization_type_id"]], "list() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[373, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.list"]], "list_for_precision() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[373, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.list_for_precision"]], "neural_compressor.ux.components.db_manager.db_models.optimization_type": [[373, "module-neural_compressor.ux.components.db_manager.db_models.optimization_type"]], "precision (class in neural_compressor.ux.components.db_manager.db_models.precision)": [[374, "neural_compressor.ux.components.db_manager.db_models.precision.Precision"]], "add() (neural_compressor.ux.components.db_manager.db_models.precision.precision static method)": [[374, "neural_compressor.ux.components.db_manager.db_models.precision.Precision.add"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.precision)": [[374, "neural_compressor.ux.components.db_manager.db_models.precision.fill_dictionary"]], "get_precision_by_id() (neural_compressor.ux.components.db_manager.db_models.precision.precision static method)": [[374, "neural_compressor.ux.components.db_manager.db_models.precision.Precision.get_precision_by_id"]], "get_precision_by_name() (neural_compressor.ux.components.db_manager.db_models.precision.precision static method)": [[374, "neural_compressor.ux.components.db_manager.db_models.precision.Precision.get_precision_by_name"]], "get_precision_id() (neural_compressor.ux.components.db_manager.db_models.precision.precision static method)": [[374, "neural_compressor.ux.components.db_manager.db_models.precision.Precision.get_precision_id"]], "list() (neural_compressor.ux.components.db_manager.db_models.precision.precision static method)": [[374, "neural_compressor.ux.components.db_manager.db_models.precision.Precision.list"]], "neural_compressor.ux.components.db_manager.db_models.precision": [[374, "module-neural_compressor.ux.components.db_manager.db_models.precision"]], "profiling (class in neural_compressor.ux.components.db_manager.db_models.profiling)": [[375, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling"]], "add() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[375, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[375, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.build_info"]], "clean_status() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[375, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.clean_status"]], "delete_profiling() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[375, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.delete_profiling"]], "details() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[375, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.details"]], "list() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[375, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.list"]], "neural_compressor.ux.components.db_manager.db_models.profiling": [[375, "module-neural_compressor.ux.components.db_manager.db_models.profiling"]], "update_dataset() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[375, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.update_dataset"]], "update_duration() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[375, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.update_duration"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[375, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.update_execution_command"]], "update_log_path() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[375, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.update_log_path"]], "update_num_threads() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[375, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.update_num_threads"]], "update_status() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[375, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.update_status"]], "profilingresult (class in neural_compressor.ux.components.db_manager.db_models.profiling_result)": [[376, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult"]], "add() (neural_compressor.ux.components.db_manager.db_models.profiling_result.profilingresult static method)": [[376, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.profiling_result.profilingresult static method)": [[376, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult.build_info"]], "bulk_add() (neural_compressor.ux.components.db_manager.db_models.profiling_result.profilingresult static method)": [[376, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult.bulk_add"]], "delete_results() (neural_compressor.ux.components.db_manager.db_models.profiling_result.profilingresult static method)": [[376, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult.delete_results"]], "get_results() (neural_compressor.ux.components.db_manager.db_models.profiling_result.profilingresult static method)": [[376, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult.get_results"]], "neural_compressor.ux.components.db_manager.db_models.profiling_result": [[376, "module-neural_compressor.ux.components.db_manager.db_models.profiling_result"]], "project (class in neural_compressor.ux.components.db_manager.db_models.project)": [[377, "neural_compressor.ux.components.db_manager.db_models.project.Project"]], "create_project() (neural_compressor.ux.components.db_manager.db_models.project.project static method)": [[377, "neural_compressor.ux.components.db_manager.db_models.project.Project.create_project"]], "delete_project() (neural_compressor.ux.components.db_manager.db_models.project.project static method)": [[377, "neural_compressor.ux.components.db_manager.db_models.project.Project.delete_project"]], "get_model_by_name() (neural_compressor.ux.components.db_manager.db_models.project.project static method)": [[377, "neural_compressor.ux.components.db_manager.db_models.project.Project.get_model_by_name"]], "list_projects() (neural_compressor.ux.components.db_manager.db_models.project.project static method)": [[377, "neural_compressor.ux.components.db_manager.db_models.project.Project.list_projects"]], "neural_compressor.ux.components.db_manager.db_models.project": [[377, "module-neural_compressor.ux.components.db_manager.db_models.project"]], "project_details() (neural_compressor.ux.components.db_manager.db_models.project.project static method)": [[377, "neural_compressor.ux.components.db_manager.db_models.project.Project.project_details"]], "update_notes() (neural_compressor.ux.components.db_manager.db_models.project.project static method)": [[377, "neural_compressor.ux.components.db_manager.db_models.project.Project.update_notes"]], "pruningdetails (class in neural_compressor.ux.components.db_manager.db_models.pruning_details)": [[378, "neural_compressor.ux.components.db_manager.db_models.pruning_details.PruningDetails"]], "add() (neural_compressor.ux.components.db_manager.db_models.pruning_details.pruningdetails static method)": [[378, "neural_compressor.ux.components.db_manager.db_models.pruning_details.PruningDetails.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.pruning_details.pruningdetails static method)": [[378, "neural_compressor.ux.components.db_manager.db_models.pruning_details.PruningDetails.build_info"]], "delete_pruning_details() (neural_compressor.ux.components.db_manager.db_models.pruning_details.pruningdetails static method)": [[378, "neural_compressor.ux.components.db_manager.db_models.pruning_details.PruningDetails.delete_pruning_details"]], "neural_compressor.ux.components.db_manager.db_models.pruning_details": [[378, "module-neural_compressor.ux.components.db_manager.db_models.pruning_details"]], "update() (neural_compressor.ux.components.db_manager.db_models.pruning_details.pruningdetails static method)": [[378, "neural_compressor.ux.components.db_manager.db_models.pruning_details.PruningDetails.update"]], "transform (class in neural_compressor.ux.components.db_manager.db_models.transform)": [[379, "neural_compressor.ux.components.db_manager.db_models.transform.Transform"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.transform)": [[379, "neural_compressor.ux.components.db_manager.db_models.transform.fill_dictionary"]], "list() (neural_compressor.ux.components.db_manager.db_models.transform.transform static method)": [[379, "neural_compressor.ux.components.db_manager.db_models.transform.Transform.list"]], "list_by_domain() (neural_compressor.ux.components.db_manager.db_models.transform.transform static method)": [[379, "neural_compressor.ux.components.db_manager.db_models.transform.Transform.list_by_domain"]], "list_by_framework() (neural_compressor.ux.components.db_manager.db_models.transform.transform static method)": [[379, "neural_compressor.ux.components.db_manager.db_models.transform.Transform.list_by_framework"]], "neural_compressor.ux.components.db_manager.db_models.transform": [[379, "module-neural_compressor.ux.components.db_manager.db_models.transform"]], "query_to_list() (neural_compressor.ux.components.db_manager.db_models.transform.transform static method)": [[379, "neural_compressor.ux.components.db_manager.db_models.transform.Transform.query_to_list"]], "tuningdetails (class in neural_compressor.ux.components.db_manager.db_models.tuning_details)": [[380, "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails"]], "add() (neural_compressor.ux.components.db_manager.db_models.tuning_details.tuningdetails static method)": [[380, "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails.add"]], "delete_tuning_details() (neural_compressor.ux.components.db_manager.db_models.tuning_details.tuningdetails static method)": [[380, "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails.delete_tuning_details"]], "neural_compressor.ux.components.db_manager.db_models.tuning_details": [[380, "module-neural_compressor.ux.components.db_manager.db_models.tuning_details"]], "update() (neural_compressor.ux.components.db_manager.db_models.tuning_details.tuningdetails static method)": [[380, "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails.update"]], "update_tuning_history() (neural_compressor.ux.components.db_manager.db_models.tuning_details.tuningdetails static method)": [[380, "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails.update_tuning_history"]], "tuninghistory (class in neural_compressor.ux.components.db_manager.db_models.tuning_history)": [[381, "neural_compressor.ux.components.db_manager.db_models.tuning_history.TuningHistory"]], "add() (neural_compressor.ux.components.db_manager.db_models.tuning_history.tuninghistory static method)": [[381, "neural_compressor.ux.components.db_manager.db_models.tuning_history.TuningHistory.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.tuning_history.tuninghistory static method)": [[381, "neural_compressor.ux.components.db_manager.db_models.tuning_history.TuningHistory.build_info"]], "neural_compressor.ux.components.db_manager.db_models.tuning_history": [[381, "module-neural_compressor.ux.components.db_manager.db_models.tuning_history"]], "benchmarkapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface)": [[382, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface"]], "add_benchmark() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.add_benchmark"]], "add_result() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.add_result"]], "before_delete_benchmark_entry() (in module neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface)": [[382, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.before_delete_benchmark_entry"]], "clean_status() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.clean_status"]], "delete_benchmark() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.delete_benchmark"]], "edit_benchmark() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.edit_benchmark"]], "get_benchmark_details() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.get_benchmark_details"]], "list_benchmarks() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.list_benchmarks"]], "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface": [[382, "module-neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface"]], "parse_benchmark_data() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.parse_benchmark_data"]], "parse_benchmark_edit_data() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.parse_benchmark_edit_data"]], "update_benchmark_accuracy() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.update_benchmark_accuracy"]], "update_benchmark_duration() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.update_benchmark_duration"]], "update_benchmark_performance() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.update_benchmark_performance"]], "update_benchmark_status() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.update_benchmark_status"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.update_execution_command"]], "update_paths() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.update_paths"]], "datasetapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[383, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface"]], "add_dataset() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[383, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.add_dataset"]], "check_if_custom_metric_or_dataloader() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[383, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.check_if_custom_metric_or_dataloader"]], "dataloader_path() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[383, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.dataloader_path"]], "delete_dataset() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[383, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.delete_dataset"]], "generate_custom_template() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[383, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.generate_custom_template"]], "generate_template() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[383, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.generate_template"]], "get_dataset_details() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[383, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.get_dataset_details"]], "get_predefined_dataset() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[383, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.get_predefined_dataset"]], "initialize_associations() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[383, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.initialize_associations"]], "initialize_precision_optimization_types_association() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[383, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.initialize_precision_optimization_types_association"]], "list_datasets() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[383, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.list_datasets"]], "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface": [[383, "module-neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface"]], "parse_dataset_data() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[383, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.parse_dataset_data"]], "prepare_predefined_dataloader() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[383, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.prepare_predefined_dataloader"]], "prepare_predefined_transform() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[383, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.prepare_predefined_transform"]], "search_in_list_of_dict() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[383, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.search_in_list_of_dict"]], "search_in_list_of_dict_for_unique_value() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[383, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.search_in_list_of_dict_for_unique_value"]], "set_database_version() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[383, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.set_database_version"]], "set_template_path() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[383, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.set_template_path"]], "initialize_associations() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[384, "neural_compressor.ux.components.db_manager.db_operations.db_operations.initialize_associations"]], "initialize_precision_optimization_types_association() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[384, "neural_compressor.ux.components.db_manager.db_operations.db_operations.initialize_precision_optimization_types_association"]], "neural_compressor.ux.components.db_manager.db_operations.db_operations": [[384, "module-neural_compressor.ux.components.db_manager.db_operations.db_operations"]], "search_in_list_of_dict() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[384, "neural_compressor.ux.components.db_manager.db_operations.db_operations.search_in_list_of_dict"]], "search_in_list_of_dict_for_unique_value() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[384, "neural_compressor.ux.components.db_manager.db_operations.db_operations.search_in_list_of_dict_for_unique_value"]], "set_database_version() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[384, "neural_compressor.ux.components.db_manager.db_operations.db_operations.set_database_version"]], "diagnosisapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface)": [[385, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface"]], "generate_optimization() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[385, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.generate_optimization"]], "get_op_details() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[385, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.get_op_details"]], "get_op_list() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[385, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.get_op_list"]], "histogram() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[385, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.histogram"]], "model_wise_params() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[385, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.model_wise_params"]], "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface": [[385, "module-neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface"]], "parse_model_wise_config() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[385, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.parse_model_wise_config"]], "parse_op_wise_config() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[385, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.parse_op_wise_config"]], "parse_optimization_data() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[385, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.parse_optimization_data"]], "parse_wise_parameters() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[385, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.parse_wise_parameters"]], "set_op_wise_pattern_precision() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[385, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.set_op_wise_pattern_precision"]], "dictionariesapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface)": [[386, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface"]], "list_dataloaders() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_dataloaders"]], "list_dataloaders_by_framework() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_dataloaders_by_framework"]], "list_domain_flavours() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_domain_flavours"]], "list_domains() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_domains"]], "list_metrics() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_metrics"]], "list_metrics_by_framework() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_metrics_by_framework"]], "list_optimization_types() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_optimization_types"]], "list_optimization_types_for_precision() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_optimization_types_for_precision"]], "list_precisions() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_precisions"]], "list_transforms() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_transforms"]], "list_transforms_by_domain() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_transforms_by_domain"]], "list_transforms_by_framework() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_transforms_by_framework"]], "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface": [[386, "module-neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface"]], "examplesapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.examples_api_interface)": [[387, "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.ExamplesAPIInterface"]], "create_project() (neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.examplesapiinterface static method)": [[387, "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.ExamplesAPIInterface.create_project"]], "get_optimization_data() (neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.examplesapiinterface static method)": [[387, "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.ExamplesAPIInterface.get_optimization_data"]], "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface": [[387, "module-neural_compressor.ux.components.db_manager.db_operations.examples_api_interface"]], "benchmarkapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[388, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface"]], "datasetapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[388, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface"]], "diagnosisapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[388, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface"]], "dictionariesapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[388, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface"]], "examplesapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[388, "neural_compressor.ux.components.db_manager.db_operations.ExamplesAPIInterface"]], "modelapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[388, "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface"]], "optimizationapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[388, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface"]], "profilingapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[388, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface"]], "projectapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[388, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface"]], "add_benchmark() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.add_benchmark"]], "add_dataset() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.add_dataset"]], "add_dummy_dataset() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.add_dummy_dataset"]], "add_model() (neural_compressor.ux.components.db_manager.db_operations.modelapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface.add_model"]], "add_model() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.add_model"]], "add_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.add_optimization"]], "add_profiling() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.add_profiling"]], "add_pruning_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.add_pruning_optimization"]], "add_quantization_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.add_quantization_optimization"]], "add_result() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.add_result"]], "add_result() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.add_result"]], "add_standard_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.add_standard_optimization"]], "add_tuning_history() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.add_tuning_history"]], "bulk_add_results() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.bulk_add_results"]], "check_if_custom_metric_or_dataloader() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.check_if_custom_metric_or_dataloader"]], "clean_status() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.clean_status"]], "clean_status() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.clean_status"]], "clean_status() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.clean_status"]], "create_project() (neural_compressor.ux.components.db_manager.db_operations.examplesapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.ExamplesAPIInterface.create_project"]], "create_project() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.create_project"]], "dataloader_path() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.dataloader_path"]], "delete_benchmark() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.delete_benchmark"]], "delete_dataset() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.delete_dataset"]], "delete_model() (neural_compressor.ux.components.db_manager.db_operations.modelapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface.delete_model"]], "delete_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.delete_optimization"]], "delete_profiling() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.delete_profiling"]], "delete_project() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.delete_project"]], "edit_benchmark() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.edit_benchmark"]], "edit_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.edit_optimization"]], "edit_profiling() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.edit_profiling"]], "edit_pruning_details() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.edit_pruning_details"]], "edit_tuning_details() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.edit_tuning_details"]], "generate_custom_template() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.generate_custom_template"]], "generate_optimization() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.generate_optimization"]], "generate_template() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.generate_template"]], "get_benchmark_details() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.get_benchmark_details"]], "get_dataset_details() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.get_dataset_details"]], "get_model_details() (neural_compressor.ux.components.db_manager.db_operations.modelapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface.get_model_details"]], "get_op_details() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.get_op_details"]], "get_op_list() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.get_op_list"]], "get_optimization_data() (neural_compressor.ux.components.db_manager.db_operations.examplesapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.ExamplesAPIInterface.get_optimization_data"]], "get_optimization_details() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.get_optimization_details"]], "get_predefined_dataset() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.get_predefined_dataset"]], "get_profiling_details() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.get_profiling_details"]], "get_project_details() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.get_project_details"]], "get_pruning_details() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.get_pruning_details"]], "histogram() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.histogram"]], "list_benchmarks() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.list_benchmarks"]], "list_dataloaders() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_dataloaders"]], "list_dataloaders_by_framework() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_dataloaders_by_framework"]], "list_datasets() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.list_datasets"]], "list_domain_flavours() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_domain_flavours"]], "list_domains() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_domains"]], "list_metrics() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_metrics"]], "list_metrics_by_framework() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_metrics_by_framework"]], "list_models() (neural_compressor.ux.components.db_manager.db_operations.modelapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface.list_models"]], "list_optimization_types() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_optimization_types"]], "list_optimization_types_for_precision() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_optimization_types_for_precision"]], "list_optimizations() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.list_optimizations"]], "list_precisions() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_precisions"]], "list_profilings() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.list_profilings"]], "list_projects() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.list_projects"]], "list_transforms() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_transforms"]], "list_transforms_by_domain() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_transforms_by_domain"]], "list_transforms_by_framework() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_transforms_by_framework"]], "load_pruning_details_config() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.load_pruning_details_config"]], "model_wise_params() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.model_wise_params"]], "neural_compressor.ux.components.db_manager.db_operations": [[388, "module-neural_compressor.ux.components.db_manager.db_operations"]], "parse_benchmark_data() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.parse_benchmark_data"]], "parse_benchmark_edit_data() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.parse_benchmark_edit_data"]], "parse_dataset_data() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.parse_dataset_data"]], "parse_model_data() (neural_compressor.ux.components.db_manager.db_operations.modelapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface.parse_model_data"]], "parse_model_wise_config() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.parse_model_wise_config"]], "parse_op_wise_config() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.parse_op_wise_config"]], "parse_optimization_data() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.parse_optimization_data"]], "parse_optimization_data() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.parse_optimization_data"]], "parse_optimization_edit_data() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.parse_optimization_edit_data"]], "parse_profiling_data() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.parse_profiling_data"]], "parse_profiling_edit_data() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.parse_profiling_edit_data"]], "parse_profiling_result_data() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.parse_profiling_result_data"]], "parse_tuning_history() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.parse_tuning_history"]], "parse_wise_parameters() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.parse_wise_parameters"]], "pin_accuracy_benchmark() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.pin_accuracy_benchmark"]], "pin_performance_benchmark() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.pin_performance_benchmark"]], "prepare_predefined_dataloader() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.prepare_predefined_dataloader"]], "prepare_predefined_transform() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.prepare_predefined_transform"]], "set_op_wise_pattern_precision() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.set_op_wise_pattern_precision"]], "set_template_path() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.set_template_path"]], "update_benchmark_accuracy() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.update_benchmark_accuracy"]], "update_benchmark_duration() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.update_benchmark_duration"]], "update_benchmark_performance() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.update_benchmark_performance"]], "update_benchmark_status() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.update_benchmark_status"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.update_execution_command"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.update_execution_command"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.update_execution_command"]], "update_log_path() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.update_log_path"]], "update_optimization_duration() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.update_optimization_duration"]], "update_optimization_status() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.update_optimization_status"]], "update_optimized_model() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.update_optimized_model"]], "update_paths() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.update_paths"]], "update_paths() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.update_paths"]], "update_profiling_duration() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.update_profiling_duration"]], "update_profiling_status() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.update_profiling_status"]], "update_project_notes() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[388, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.update_project_notes"]], "modelapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.model_api_interface)": [[389, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface"]], "add_model() (neural_compressor.ux.components.db_manager.db_operations.model_api_interface.modelapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface.add_model"]], "delete_model() (neural_compressor.ux.components.db_manager.db_operations.model_api_interface.modelapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface.delete_model"]], "get_model_details() (neural_compressor.ux.components.db_manager.db_operations.model_api_interface.modelapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface.get_model_details"]], "list_models() (neural_compressor.ux.components.db_manager.db_operations.model_api_interface.modelapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface.list_models"]], "neural_compressor.ux.components.db_manager.db_operations.model_api_interface": [[389, "module-neural_compressor.ux.components.db_manager.db_operations.model_api_interface"]], "parse_model_data() (neural_compressor.ux.components.db_manager.db_operations.model_api_interface.modelapiinterface static method)": [[389, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface.parse_model_data"]], "optimizationapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface)": [[390, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface"]], "add_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[390, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.add_optimization"]], "add_pruning_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[390, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.add_pruning_optimization"]], "add_quantization_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[390, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.add_quantization_optimization"]], "add_standard_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[390, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.add_standard_optimization"]], "add_tuning_history() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[390, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.add_tuning_history"]], "clean_status() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[390, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.clean_status"]], "delete_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[390, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.delete_optimization"]], "edit_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[390, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.edit_optimization"]], "edit_pruning_details() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[390, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.edit_pruning_details"]], "edit_tuning_details() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[390, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.edit_tuning_details"]], "get_optimization_details() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[390, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.get_optimization_details"]], "get_pruning_details() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[390, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.get_pruning_details"]], "list_optimizations() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[390, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.list_optimizations"]], "load_pruning_details_config() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[390, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.load_pruning_details_config"]], "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface": [[390, "module-neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface"]], "parse_optimization_data() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[390, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.parse_optimization_data"]], "parse_optimization_edit_data() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[390, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.parse_optimization_edit_data"]], "parse_tuning_history() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[390, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.parse_tuning_history"]], "pin_accuracy_benchmark() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[390, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.pin_accuracy_benchmark"]], "pin_performance_benchmark() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[390, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.pin_performance_benchmark"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[390, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.update_execution_command"]], "update_optimization_duration() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[390, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.update_optimization_duration"]], "update_optimization_status() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[390, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.update_optimization_status"]], "update_optimized_model() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[390, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.update_optimized_model"]], "update_paths() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[390, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.update_paths"]], "profilingapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface)": [[391, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface"]], "add_profiling() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.add_profiling"]], "add_result() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.add_result"]], "bulk_add_results() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.bulk_add_results"]], "clean_status() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.clean_status"]], "delete_profiling() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.delete_profiling"]], "edit_profiling() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.edit_profiling"]], "get_profiling_details() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.get_profiling_details"]], "list_profilings() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.list_profilings"]], "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface": [[391, "module-neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface"]], "parse_profiling_data() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.parse_profiling_data"]], "parse_profiling_edit_data() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.parse_profiling_edit_data"]], "parse_profiling_result_data() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.parse_profiling_result_data"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.update_execution_command"]], "update_log_path() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.update_log_path"]], "update_profiling_duration() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.update_profiling_duration"]], "update_profiling_status() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[391, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.update_profiling_status"]], "projectapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.project_api_interface)": [[392, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface"]], "add_dummy_dataset() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[392, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.add_dummy_dataset"]], "add_model() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[392, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.add_model"]], "create_project() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[392, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.create_project"]], "delete_project() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[392, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.delete_project"]], "get_project_details() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[392, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.get_project_details"]], "list_projects() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[392, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.list_projects"]], "neural_compressor.ux.components.db_manager.db_operations.project_api_interface": [[392, "module-neural_compressor.ux.components.db_manager.db_operations.project_api_interface"]], "update_project_notes() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[392, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.update_project_notes"]], "dbmanager (class in neural_compressor.ux.components.db_manager)": [[393, "neural_compressor.ux.components.db_manager.DBManager"]], "create_all() (neural_compressor.ux.components.db_manager.dbmanager method)": [[393, "neural_compressor.ux.components.db_manager.DBManager.create_all"]], "create_sqlalchemy_engine() (neural_compressor.ux.components.db_manager.dbmanager method)": [[393, "neural_compressor.ux.components.db_manager.DBManager.create_sqlalchemy_engine"]], "engine (neural_compressor.ux.components.db_manager.dbmanager property)": [[393, "neural_compressor.ux.components.db_manager.DBManager.engine"]], "initialize_database() (neural_compressor.ux.components.db_manager.dbmanager method)": [[393, "neural_compressor.ux.components.db_manager.DBManager.initialize_database"]], "neural_compressor.ux.components.db_manager": [[393, "module-neural_compressor.ux.components.db_manager"]], "benchmarkaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[394, "neural_compressor.ux.components.db_manager.params_interfaces.BenchmarkAddParamsInterface"]], "benchmarkeditparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[394, "neural_compressor.ux.components.db_manager.params_interfaces.BenchmarkEditParamsInterface"]], "datasetaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[394, "neural_compressor.ux.components.db_manager.params_interfaces.DatasetAddParamsInterface"]], "diagnosisoptimizationparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[394, "neural_compressor.ux.components.db_manager.params_interfaces.DiagnosisOptimizationParamsInterface"]], "modeladdparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[394, "neural_compressor.ux.components.db_manager.params_interfaces.ModelAddParamsInterface"]], "optimizationaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[394, "neural_compressor.ux.components.db_manager.params_interfaces.OptimizationAddParamsInterface"]], "optimizationeditparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[394, "neural_compressor.ux.components.db_manager.params_interfaces.OptimizationEditParamsInterface"]], "profilingaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[394, "neural_compressor.ux.components.db_manager.params_interfaces.ProfilingAddParamsInterface"]], "profilingeditparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[394, "neural_compressor.ux.components.db_manager.params_interfaces.ProfilingEditParamsInterface"]], "profilingresultaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[394, "neural_compressor.ux.components.db_manager.params_interfaces.ProfilingResultAddParamsInterface"]], "tuninghistoryinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[394, "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryInterface"]], "tuninghistoryiteminterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[394, "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryItemInterface"]], "neural_compressor.ux.components.db_manager.params_interfaces": [[394, "module-neural_compressor.ux.components.db_manager.params_interfaces"]], "parse_nodes() (neural_compressor.ux.components.db_manager.params_interfaces.modeladdparamsinterface static method)": [[394, "neural_compressor.ux.components.db_manager.params_interfaces.ModelAddParamsInterface.parse_nodes"]], "serialize() (neural_compressor.ux.components.db_manager.params_interfaces.tuninghistoryinterface method)": [[394, "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryInterface.serialize"]], "serialize() (neural_compressor.ux.components.db_manager.params_interfaces.tuninghistoryiteminterface method)": [[394, "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryItemInterface.serialize"]], "get_framework_dataloaders_config() (in module neural_compressor.ux.components.db_manager.utils)": [[395, "neural_compressor.ux.components.db_manager.utils.get_framework_dataloaders_config"]], "get_framework_transforms_config() (in module neural_compressor.ux.components.db_manager.utils)": [[395, "neural_compressor.ux.components.db_manager.utils.get_framework_transforms_config"]], "neural_compressor.ux.components.db_manager.utils": [[395, "module-neural_compressor.ux.components.db_manager.utils"]], "update_dataloaders_params() (in module neural_compressor.ux.components.db_manager.utils)": [[395, "neural_compressor.ux.components.db_manager.utils.update_dataloaders_params"]], "diagnosis (class in neural_compressor.ux.components.diagnosis.diagnosis)": [[396, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis"]], "calculate_mse() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis method)": [[396, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.calculate_mse"]], "get_histogram_data() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis method)": [[396, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.get_histogram_data"]], "get_op_details() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis method)": [[396, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.get_op_details"]], "get_op_list() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis method)": [[396, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.get_op_list"]], "get_tensors_info() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis method)": [[396, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.get_tensors_info"]], "load_quantization_config() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis method)": [[396, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.load_quantization_config"]], "mse_metric_gap() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis static method)": [[396, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.mse_metric_gap"]], "neural_compressor.ux.components.diagnosis.diagnosis": [[396, "module-neural_compressor.ux.components.diagnosis.diagnosis"]], "diagnosisfactory (class in neural_compressor.ux.components.diagnosis.factory)": [[397, "neural_compressor.ux.components.diagnosis.factory.DiagnosisFactory"]], "get_diagnosis() (neural_compressor.ux.components.diagnosis.factory.diagnosisfactory static method)": [[397, "neural_compressor.ux.components.diagnosis.factory.DiagnosisFactory.get_diagnosis"]], "neural_compressor.ux.components.diagnosis.factory": [[397, "module-neural_compressor.ux.components.diagnosis.factory"]], "neural_compressor.ux.components.diagnosis": [[398, "module-neural_compressor.ux.components.diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis": [[399, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis"]], "onnxrtdiagnosis (class in neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis)": [[400, "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis.OnnxRtDiagnosis"]], "model (neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis.onnxrtdiagnosis property)": [[400, "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis.OnnxRtDiagnosis.model"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis": [[400, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis"]], "opactivation (class in neural_compressor.ux.components.diagnosis.op_details)": [[401, "neural_compressor.ux.components.diagnosis.op_details.OpActivation"]], "opdetails (class in neural_compressor.ux.components.diagnosis.op_details)": [[401, "neural_compressor.ux.components.diagnosis.op_details.OpDetails"]], "oppattern (class in neural_compressor.ux.components.diagnosis.op_details)": [[401, "neural_compressor.ux.components.diagnosis.op_details.OpPattern"]], "opweights (class in neural_compressor.ux.components.diagnosis.op_details)": [[401, "neural_compressor.ux.components.diagnosis.op_details.OpWeights"]], "neural_compressor.ux.components.diagnosis.op_details": [[401, "module-neural_compressor.ux.components.diagnosis.op_details"]], "serialize() (neural_compressor.ux.components.diagnosis.op_details.opdetails method)": [[401, "neural_compressor.ux.components.diagnosis.op_details.OpDetails.serialize"]], "opentry (class in neural_compressor.ux.components.diagnosis.op_entry)": [[402, "neural_compressor.ux.components.diagnosis.op_entry.OpEntry"]], "neural_compressor.ux.components.diagnosis.op_entry": [[402, "module-neural_compressor.ux.components.diagnosis.op_entry"]], "serialize() (neural_compressor.ux.components.diagnosis.op_entry.opentry method)": [[402, "neural_compressor.ux.components.diagnosis.op_entry.OpEntry.serialize"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis": [[403, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis"]], "tensorflowdiagnosis (class in neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis)": [[404, "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis.TensorflowDiagnosis"]], "model (neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis.tensorflowdiagnosis property)": [[404, "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis.TensorflowDiagnosis.model"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis": [[404, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis"]], "create_dir_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[405, "neural_compressor.ux.components.file_browser.file_browser.create_dir_entry"]], "create_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[405, "neural_compressor.ux.components.file_browser.file_browser.create_entry"]], "create_file_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[405, "neural_compressor.ux.components.file_browser.file_browser.create_file_entry"]], "filter_requested_entries() (in module neural_compressor.ux.components.file_browser.file_browser)": [[405, "neural_compressor.ux.components.file_browser.file_browser.filter_requested_entries"]], "get_directory_entries() (in module neural_compressor.ux.components.file_browser.file_browser)": [[405, "neural_compressor.ux.components.file_browser.file_browser.get_directory_entries"]], "get_filter_value() (in module neural_compressor.ux.components.file_browser.file_browser)": [[405, "neural_compressor.ux.components.file_browser.file_browser.get_filter_value"]], "get_non_hidden_directory_entries() (in module neural_compressor.ux.components.file_browser.file_browser)": [[405, "neural_compressor.ux.components.file_browser.file_browser.get_non_hidden_directory_entries"]], "get_requested_path() (in module neural_compressor.ux.components.file_browser.file_browser)": [[405, "neural_compressor.ux.components.file_browser.file_browser.get_requested_path"]], "get_setting_value() (in module neural_compressor.ux.components.file_browser.file_browser)": [[405, "neural_compressor.ux.components.file_browser.file_browser.get_setting_value"]], "is_dataset_or_directory_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[405, "neural_compressor.ux.components.file_browser.file_browser.is_dataset_or_directory_entry"]], "is_directory_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[405, "neural_compressor.ux.components.file_browser.file_browser.is_directory_entry"]], "is_model_or_directory_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[405, "neural_compressor.ux.components.file_browser.file_browser.is_model_or_directory_entry"]], "neural_compressor.ux.components.file_browser.file_browser": [[405, "module-neural_compressor.ux.components.file_browser.file_browser"]], "should_show_files() (in module neural_compressor.ux.components.file_browser.file_browser)": [[405, "neural_compressor.ux.components.file_browser.file_browser.should_show_files"]], "should_show_only_model_files() (in module neural_compressor.ux.components.file_browser.file_browser)": [[405, "neural_compressor.ux.components.file_browser.file_browser.should_show_only_model_files"]], "sort_entries() (in module neural_compressor.ux.components.file_browser.file_browser)": [[405, "neural_compressor.ux.components.file_browser.file_browser.sort_entries"]], "neural_compressor.ux.components.file_browser": [[406, "module-neural_compressor.ux.components.file_browser"]], "attribute (class in neural_compressor.ux.components.graph.attribute)": [[407, "neural_compressor.ux.components.graph.attribute.Attribute"]], "neural_compressor.ux.components.graph.attribute": [[407, "module-neural_compressor.ux.components.graph.attribute"]], "collapser (class in neural_compressor.ux.components.graph.collapser)": [[408, "neural_compressor.ux.components.graph.collapser.Collapser"]], "collapse() (neural_compressor.ux.components.graph.collapser.collapser method)": [[408, "neural_compressor.ux.components.graph.collapser.Collapser.collapse"]], "neural_compressor.ux.components.graph.collapser": [[408, "module-neural_compressor.ux.components.graph.collapser"]], "edge (class in neural_compressor.ux.components.graph.edge)": [[409, "neural_compressor.ux.components.graph.edge.Edge"]], "neural_compressor.ux.components.graph.edge": [[409, "module-neural_compressor.ux.components.graph.edge"]], "source (neural_compressor.ux.components.graph.edge.edge property)": [[409, "neural_compressor.ux.components.graph.edge.Edge.source"]], "target (neural_compressor.ux.components.graph.edge.edge property)": [[409, "neural_compressor.ux.components.graph.edge.Edge.target"]], "graph (class in neural_compressor.ux.components.graph.graph)": [[410, "neural_compressor.ux.components.graph.graph.Graph"]], "add_edge() (neural_compressor.ux.components.graph.graph.graph method)": [[410, "neural_compressor.ux.components.graph.graph.Graph.add_edge"]], "add_node() (neural_compressor.ux.components.graph.graph.graph method)": [[410, "neural_compressor.ux.components.graph.graph.Graph.add_node"]], "edges (neural_compressor.ux.components.graph.graph.graph property)": [[410, "neural_compressor.ux.components.graph.graph.Graph.edges"]], "get_node() (neural_compressor.ux.components.graph.graph.graph method)": [[410, "neural_compressor.ux.components.graph.graph.Graph.get_node"]], "get_target_nodes() (neural_compressor.ux.components.graph.graph.graph method)": [[410, "neural_compressor.ux.components.graph.graph.Graph.get_target_nodes"]], "highlight_pattern() (neural_compressor.ux.components.graph.graph.graph method)": [[410, "neural_compressor.ux.components.graph.graph.Graph.highlight_pattern"]], "neural_compressor.ux.components.graph.graph": [[410, "module-neural_compressor.ux.components.graph.graph"]], "nodes (neural_compressor.ux.components.graph.graph.graph property)": [[410, "neural_compressor.ux.components.graph.graph.Graph.nodes"]], "graphreader (class in neural_compressor.ux.components.graph.graph_reader)": [[411, "neural_compressor.ux.components.graph.graph_reader.GraphReader"]], "find_pattern_in_graph() (neural_compressor.ux.components.graph.graph_reader.graphreader method)": [[411, "neural_compressor.ux.components.graph.graph_reader.GraphReader.find_pattern_in_graph"]], "neural_compressor.ux.components.graph.graph_reader": [[411, "module-neural_compressor.ux.components.graph.graph_reader"]], "read() (neural_compressor.ux.components.graph.graph_reader.graphreader method)": [[411, "neural_compressor.ux.components.graph.graph_reader.GraphReader.read"]], "neural_compressor.ux.components.graph": [[412, "module-neural_compressor.ux.components.graph"]], "groupnode (class in neural_compressor.ux.components.graph.node)": [[413, "neural_compressor.ux.components.graph.node.GroupNode"]], "node (class in neural_compressor.ux.components.graph.node)": [[413, "neural_compressor.ux.components.graph.node.Node"]], "neural_compressor.ux.components.graph.node": [[413, "module-neural_compressor.ux.components.graph.node"]], "neural_compressor.ux.components.graph.reader": [[414, "module-neural_compressor.ux.components.graph.reader"]], "onnxrtreader (class in neural_compressor.ux.components.graph.reader.onnxrt_reader)": [[415, "neural_compressor.ux.components.graph.reader.onnxrt_reader.OnnxrtReader"]], "neural_compressor.ux.components.graph.reader.onnxrt_reader": [[415, "module-neural_compressor.ux.components.graph.reader.onnxrt_reader"]], "read() (neural_compressor.ux.components.graph.reader.onnxrt_reader.onnxrtreader method)": [[415, "neural_compressor.ux.components.graph.reader.onnxrt_reader.OnnxrtReader.read"]], "tensorflowreader (class in neural_compressor.ux.components.graph.reader.tensorflow_reader)": [[416, "neural_compressor.ux.components.graph.reader.tensorflow_reader.TensorflowReader"]], "neural_compressor.ux.components.graph.reader.tensorflow_reader": [[416, "module-neural_compressor.ux.components.graph.reader.tensorflow_reader"]], "read() (neural_compressor.ux.components.graph.reader.tensorflow_reader.tensorflowreader method)": [[416, "neural_compressor.ux.components.graph.reader.tensorflow_reader.TensorflowReader.read"]], "neural_compressor.ux.components": [[417, "module-neural_compressor.ux.components"]], "neural_compressor.ux.components.jobs_management": [[418, "module-neural_compressor.ux.components.jobs_management"]], "neural_compressor.ux.components.jobs_management.jobs_control_queue": [[419, "module-neural_compressor.ux.components.jobs_management.jobs_control_queue"]], "neural_compressor.ux.components.jobs_management.jobs_manager": [[420, "module-neural_compressor.ux.components.jobs_management.jobs_manager"]], "neural_compressor.ux.components.jobs_management.request": [[421, "module-neural_compressor.ux.components.jobs_management.request"]], "get_default_path() (in module neural_compressor.ux.components.manage_workspace)": [[422, "neural_compressor.ux.components.manage_workspace.get_default_path"]], "neural_compressor.ux.components.manage_workspace": [[422, "module-neural_compressor.ux.components.manage_workspace"]], "domain (class in neural_compressor.ux.components.model.domain)": [[423, "neural_compressor.ux.components.model.domain.Domain"]], "neural_compressor.ux.components.model.domain": [[423, "module-neural_compressor.ux.components.model.domain"]], "neural_compressor.ux.components.model": [[424, "module-neural_compressor.ux.components.model"]], "model (class in neural_compressor.ux.components.model.model)": [[425, "neural_compressor.ux.components.model.model.Model"]], "domain (neural_compressor.ux.components.model.model.model property)": [[425, "neural_compressor.ux.components.model.model.Model.domain"]], "ensure_supported_path() (neural_compressor.ux.components.model.model.model method)": [[425, "neural_compressor.ux.components.model.model.Model.ensure_supported_path"]], "get_framework_name() (neural_compressor.ux.components.model.model.model static method)": [[425, "neural_compressor.ux.components.model.model.Model.get_framework_name"]], "get_input_nodes() (neural_compressor.ux.components.model.model.model method)": [[425, "neural_compressor.ux.components.model.model.Model.get_input_nodes"]], "get_model_graph() (neural_compressor.ux.components.model.model.model method)": [[425, "neural_compressor.ux.components.model.model.Model.get_model_graph"]], "get_output_nodes() (neural_compressor.ux.components.model.model.model method)": [[425, "neural_compressor.ux.components.model.model.Model.get_output_nodes"]], "get_tensors_info() (neural_compressor.ux.components.model.model.model method)": [[425, "neural_compressor.ux.components.model.model.Model.get_tensors_info"]], "guard_requirements_installed() (neural_compressor.ux.components.model.model.model method)": [[425, "neural_compressor.ux.components.model.model.Model.guard_requirements_installed"]], "input_shape (neural_compressor.ux.components.model.model.model property)": [[425, "neural_compressor.ux.components.model.model.Model.input_shape"]], "neural_compressor.ux.components.model.model": [[425, "module-neural_compressor.ux.components.model.model"]], "shape_elements_order (neural_compressor.ux.components.model.model.model property)": [[425, "neural_compressor.ux.components.model.model.Model.shape_elements_order"]], "supports_graph (neural_compressor.ux.components.model.model.model property)": [[425, "neural_compressor.ux.components.model.model.Model.supports_graph"]], "supports_path() (neural_compressor.ux.components.model.model.model static method)": [[425, "neural_compressor.ux.components.model.model.Model.supports_path"]], "supports_profiling (neural_compressor.ux.components.model.model.model property)": [[425, "neural_compressor.ux.components.model.model.Model.supports_profiling"]], "supports_pruning (neural_compressor.ux.components.model.model.model property)": [[425, "neural_compressor.ux.components.model.model.Model.supports_pruning"]], "get_model_type() (in module neural_compressor.ux.components.model.model_type_getter)": [[426, "neural_compressor.ux.components.model.model_type_getter.get_model_type"]], "neural_compressor.ux.components.model.model_type_getter": [[426, "module-neural_compressor.ux.components.model.model_type_getter"]], "neural_compressor.ux.components.model.onnxrt": [[427, "module-neural_compressor.ux.components.model.onnxrt"]], "onnxrtmodel (class in neural_compressor.ux.components.model.onnxrt.model)": [[428, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel"]], "domain (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel property)": [[428, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.domain"]], "filtered_input_nodes (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel property)": [[428, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.filtered_input_nodes"]], "get_framework_name() (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel static method)": [[428, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.get_framework_name"]], "get_model_graph() (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel method)": [[428, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.get_model_graph"]], "guard_requirements_installed() (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel method)": [[428, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.guard_requirements_installed"]], "input_shape (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel property)": [[428, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.input_shape"]], "nc_model_instance (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel property)": [[428, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.nc_model_instance"]], "neural_compressor.ux.components.model.onnxrt.model": [[428, "module-neural_compressor.ux.components.model.onnxrt.model"]], "remove_number_of_samples_from_shape() (in module neural_compressor.ux.components.model.onnxrt.model)": [[428, "neural_compressor.ux.components.model.onnxrt.model.remove_number_of_samples_from_shape"]], "shape_elements_order (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel property)": [[428, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.shape_elements_order"]], "supports_path() (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel static method)": [[428, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.supports_path"]], "neural_compressor.ux.components.model.pytorch": [[429, "module-neural_compressor.ux.components.model.pytorch"]], "pytorchscriptmodel (class in neural_compressor.ux.components.model.pytorch.model)": [[430, "neural_compressor.ux.components.model.pytorch.model.PyTorchScriptModel"]], "get_framework_name() (neural_compressor.ux.components.model.pytorch.model.pytorchscriptmodel static method)": [[430, "neural_compressor.ux.components.model.pytorch.model.PyTorchScriptModel.get_framework_name"]], "guard_requirements_installed() (neural_compressor.ux.components.model.pytorch.model.pytorchscriptmodel method)": [[430, "neural_compressor.ux.components.model.pytorch.model.PyTorchScriptModel.guard_requirements_installed"]], "neural_compressor.ux.components.model.pytorch.model": [[430, "module-neural_compressor.ux.components.model.pytorch.model"]], "supports_path() (neural_compressor.ux.components.model.pytorch.model.pytorchscriptmodel static method)": [[430, "neural_compressor.ux.components.model.pytorch.model.PyTorchScriptModel.supports_path"]], "modelrepository (class in neural_compressor.ux.components.model.repository)": [[431, "neural_compressor.ux.components.model.repository.ModelRepository"]], "get_framework_from_path() (neural_compressor.ux.components.model.repository.modelrepository static method)": [[431, "neural_compressor.ux.components.model.repository.ModelRepository.get_framework_from_path"]], "get_frameworks() (neural_compressor.ux.components.model.repository.modelrepository method)": [[431, "neural_compressor.ux.components.model.repository.ModelRepository.get_frameworks"]], "get_model() (neural_compressor.ux.components.model.repository.modelrepository method)": [[431, "neural_compressor.ux.components.model.repository.ModelRepository.get_model"]], "get_supported_frameworks() (neural_compressor.ux.components.model.repository.modelrepository static method)": [[431, "neural_compressor.ux.components.model.repository.ModelRepository.get_supported_frameworks"]], "is_model_path() (neural_compressor.ux.components.model.repository.modelrepository static method)": [[431, "neural_compressor.ux.components.model.repository.ModelRepository.is_model_path"]], "neural_compressor.ux.components.model.repository": [[431, "module-neural_compressor.ux.components.model.repository"]], "shape (class in neural_compressor.ux.components.model.shape)": [[432, "neural_compressor.ux.components.model.shape.Shape"]], "neural_compressor.ux.components.model.shape": [[432, "module-neural_compressor.ux.components.model.shape"]], "serialize() (neural_compressor.ux.components.model.shape.shape method)": [[432, "neural_compressor.ux.components.model.shape.Shape.serialize"]], "frozenpbmodel (class in neural_compressor.ux.components.model.tensorflow.frozen_pb)": [[433, "neural_compressor.ux.components.model.tensorflow.frozen_pb.FrozenPbModel"]], "neural_compressor.ux.components.model.tensorflow.frozen_pb": [[433, "module-neural_compressor.ux.components.model.tensorflow.frozen_pb"]], "supports_path() (neural_compressor.ux.components.model.tensorflow.frozen_pb.frozenpbmodel static method)": [[433, "neural_compressor.ux.components.model.tensorflow.frozen_pb.FrozenPbModel.supports_path"]], "supports_profiling (neural_compressor.ux.components.model.tensorflow.frozen_pb.frozenpbmodel property)": [[433, "neural_compressor.ux.components.model.tensorflow.frozen_pb.FrozenPbModel.supports_profiling"]], "neural_compressor.ux.components.model.tensorflow": [[434, "module-neural_compressor.ux.components.model.tensorflow"]], "kerasmodel (class in neural_compressor.ux.components.model.tensorflow.keras)": [[435, "neural_compressor.ux.components.model.tensorflow.keras.KerasModel"]], "get_input_nodes() (neural_compressor.ux.components.model.tensorflow.keras.kerasmodel method)": [[435, "neural_compressor.ux.components.model.tensorflow.keras.KerasModel.get_input_nodes"]], "get_output_nodes() (neural_compressor.ux.components.model.tensorflow.keras.kerasmodel method)": [[435, "neural_compressor.ux.components.model.tensorflow.keras.KerasModel.get_output_nodes"]], "neural_compressor.ux.components.model.tensorflow.keras": [[435, "module-neural_compressor.ux.components.model.tensorflow.keras"]], "supports_path() (neural_compressor.ux.components.model.tensorflow.keras.kerasmodel static method)": [[435, "neural_compressor.ux.components.model.tensorflow.keras.KerasModel.supports_path"]], "metagraphmodel (class in neural_compressor.ux.components.model.tensorflow.meta_graph)": [[436, "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel"]], "get_input_nodes() (neural_compressor.ux.components.model.tensorflow.meta_graph.metagraphmodel method)": [[436, "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel.get_input_nodes"]], "get_model_graph() (neural_compressor.ux.components.model.tensorflow.meta_graph.metagraphmodel method)": [[436, "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel.get_model_graph"]], "get_output_nodes() (neural_compressor.ux.components.model.tensorflow.meta_graph.metagraphmodel method)": [[436, "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel.get_output_nodes"]], "neural_compressor.ux.components.model.tensorflow.meta_graph": [[436, "module-neural_compressor.ux.components.model.tensorflow.meta_graph"]], "supports_path() (neural_compressor.ux.components.model.tensorflow.meta_graph.metagraphmodel static method)": [[436, "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel.supports_path"]], "tensorflowmodel (class in neural_compressor.ux.components.model.tensorflow.model)": [[437, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel"]], "get_framework_name() (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel static method)": [[437, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.get_framework_name"]], "get_input_nodes() (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel method)": [[437, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.get_input_nodes"]], "get_model_graph() (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel method)": [[437, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.get_model_graph"]], "get_output_nodes() (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel method)": [[437, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.get_output_nodes"]], "guard_requirements_installed() (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel method)": [[437, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.guard_requirements_installed"]], "input_shape (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel property)": [[437, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.input_shape"]], "nc_model_instance (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel property)": [[437, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.nc_model_instance"]], "neural_compressor.ux.components.model.tensorflow.model": [[437, "module-neural_compressor.ux.components.model.tensorflow.model"]], "shape_elements_order (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel property)": [[437, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.shape_elements_order"]], "supports_pruning (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel property)": [[437, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.supports_pruning"]], "savedmodelmodel (class in neural_compressor.ux.components.model.tensorflow.saved_model)": [[438, "neural_compressor.ux.components.model.tensorflow.saved_model.SavedModelModel"]], "neural_compressor.ux.components.model.tensorflow.saved_model": [[438, "module-neural_compressor.ux.components.model.tensorflow.saved_model"]], "supports_path() (neural_compressor.ux.components.model.tensorflow.saved_model.savedmodelmodel static method)": [[438, "neural_compressor.ux.components.model.tensorflow.saved_model.SavedModelModel.supports_path"]], "get_input_shape() (in module neural_compressor.ux.components.model.tensorflow.utils)": [[439, "neural_compressor.ux.components.model.tensorflow.utils.get_input_shape"]], "neural_compressor.ux.components.model.tensorflow.utils": [[439, "module-neural_compressor.ux.components.model.tensorflow.utils"]], "download_config() (in module neural_compressor.ux.components.model_zoo.download_config)": [[440, "neural_compressor.ux.components.model_zoo.download_config.download_config"]], "neural_compressor.ux.components.model_zoo.download_config": [[440, "module-neural_compressor.ux.components.model_zoo.download_config"]], "download_model() (in module neural_compressor.ux.components.model_zoo.download_model)": [[441, "neural_compressor.ux.components.model_zoo.download_model.download_model"]], "neural_compressor.ux.components.model_zoo.download_model": [[441, "module-neural_compressor.ux.components.model_zoo.download_model"]], "downloader (class in neural_compressor.ux.components.model_zoo.downloader)": [[442, "neural_compressor.ux.components.model_zoo.downloader.Downloader"]], "download() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[442, "neural_compressor.ux.components.model_zoo.downloader.Downloader.download"]], "download_config() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[442, "neural_compressor.ux.components.model_zoo.downloader.Downloader.download_config"]], "download_file() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[442, "neural_compressor.ux.components.model_zoo.downloader.Downloader.download_file"]], "download_model() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[442, "neural_compressor.ux.components.model_zoo.downloader.Downloader.download_model"]], "download_yaml_config() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[442, "neural_compressor.ux.components.model_zoo.downloader.Downloader.download_yaml_config"]], "get_yaml_url() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[442, "neural_compressor.ux.components.model_zoo.downloader.Downloader.get_yaml_url"]], "neural_compressor.ux.components.model_zoo.downloader": [[442, "module-neural_compressor.ux.components.model_zoo.downloader"]], "unpack_archive() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[442, "neural_compressor.ux.components.model_zoo.downloader.Downloader.unpack_archive"]], "neural_compressor.ux.components.model_zoo": [[443, "module-neural_compressor.ux.components.model_zoo"]], "check_version() (in module neural_compressor.ux.components.model_zoo.list_models)": [[444, "neural_compressor.ux.components.model_zoo.list_models.check_version"]], "get_available_models() (in module neural_compressor.ux.components.model_zoo.list_models)": [[444, "neural_compressor.ux.components.model_zoo.list_models.get_available_models"]], "get_framework_module_name() (in module neural_compressor.ux.components.model_zoo.list_models)": [[444, "neural_compressor.ux.components.model_zoo.list_models.get_framework_module_name"]], "get_installed_frameworks() (in module neural_compressor.ux.components.model_zoo.list_models)": [[444, "neural_compressor.ux.components.model_zoo.list_models.get_installed_frameworks"]], "list_models() (in module neural_compressor.ux.components.model_zoo.list_models)": [[444, "neural_compressor.ux.components.model_zoo.list_models.list_models"]], "neural_compressor.ux.components.model_zoo.list_models": [[444, "module-neural_compressor.ux.components.model_zoo.list_models"]], "validate_model_list() (in module neural_compressor.ux.components.model_zoo.list_models)": [[444, "neural_compressor.ux.components.model_zoo.list_models.validate_model_list"]], "neural_compressor.ux.components.names_mapper": [[445, "module-neural_compressor.ux.components.names_mapper"]], "mappingdirection (class in neural_compressor.ux.components.names_mapper.names_mapper)": [[446, "neural_compressor.ux.components.names_mapper.names_mapper.MappingDirection"]], "namesmapper (class in neural_compressor.ux.components.names_mapper.names_mapper)": [[446, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper"]], "domain_flavour_mappings (neural_compressor.ux.components.names_mapper.names_mapper.namesmapper property)": [[446, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper.domain_flavour_mappings"]], "domain_mappings (neural_compressor.ux.components.names_mapper.names_mapper.namesmapper property)": [[446, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper.domain_mappings"]], "framework_mappings (neural_compressor.ux.components.names_mapper.names_mapper.namesmapper property)": [[446, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper.framework_mappings"]], "map_name() (neural_compressor.ux.components.names_mapper.names_mapper.namesmapper method)": [[446, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper.map_name"]], "neural_compressor.ux.components.names_mapper.names_mapper": [[446, "module-neural_compressor.ux.components.names_mapper.names_mapper"]], "precision_mappings (neural_compressor.ux.components.names_mapper.names_mapper.namesmapper property)": [[446, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper.precision_mappings"]], "check_if_collect_tuning_history() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[447, "neural_compressor.ux.components.optimization.execute_optimization.check_if_collect_tuning_history"]], "execute_optimization() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[447, "neural_compressor.ux.components.optimization.execute_optimization.execute_optimization"]], "execute_optimization_pytorch_script() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[447, "neural_compressor.ux.components.optimization.execute_optimization.execute_optimization_pytorch_script"]], "execute_optimization_regular() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[447, "neural_compressor.ux.components.optimization.execute_optimization.execute_optimization_regular"]], "neural_compressor.ux.components.optimization.execute_optimization": [[447, "module-neural_compressor.ux.components.optimization.execute_optimization"]], "parse_logs() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[447, "neural_compressor.ux.components.optimization.execute_optimization.parse_logs"]], "parse_model_data_to_bench_names() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[447, "neural_compressor.ux.components.optimization.execute_optimization.parse_model_data_to_bench_names"]], "optimizationfactory (class in neural_compressor.ux.components.optimization.factory)": [[448, "neural_compressor.ux.components.optimization.factory.OptimizationFactory"]], "get_optimization() (neural_compressor.ux.components.optimization.factory.optimizationfactory static method)": [[448, "neural_compressor.ux.components.optimization.factory.OptimizationFactory.get_optimization"]], "neural_compressor.ux.components.optimization.factory": [[448, "module-neural_compressor.ux.components.optimization.factory"]], "graphoptimization (class in neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization)": [[449, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization"]], "configuration_data (neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.graphoptimization property)": [[449, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization.configuration_data"]], "execute() (neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.graphoptimization method)": [[449, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization.execute"]], "generate_config() (neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.graphoptimization method)": [[449, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization.generate_config"]], "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization": [[449, "module-neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization"]], "optimization_script (neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.graphoptimization property)": [[449, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization.optimization_script"]], "parameters (neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.graphoptimization property)": [[449, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization.parameters"]], "neural_compressor.ux.components.optimization.graph_optimizer": [[450, "module-neural_compressor.ux.components.optimization.graph_optimizer"]], "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model": [[451, "module-neural_compressor.ux.components.optimization.graph_optimizer.optimize_model"]], "optimize_graph() (in module neural_compressor.ux.components.optimization.graph_optimizer.optimize_model)": [[451, "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model.optimize_graph"]], "optimize_graph_config() (in module neural_compressor.ux.components.optimization.graph_optimizer.optimize_model)": [[451, "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model.optimize_graph_config"]], "parse_args() (in module neural_compressor.ux.components.optimization.graph_optimizer.optimize_model)": [[451, "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model.parse_args"]], "set_eager_execution() (in module neural_compressor.ux.components.optimization.graph_optimizer.optimize_model)": [[451, "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model.set_eager_execution"]], "optimizations (class in neural_compressor.ux.components.optimization)": [[452, "neural_compressor.ux.components.optimization.Optimizations"]], "neural_compressor.ux.components.optimization": [[452, "module-neural_compressor.ux.components.optimization"]], "neural_compressor.ux.components.optimization.mixed_precision": [[453, "module-neural_compressor.ux.components.optimization.mixed_precision"]], "mixedprecision (class in neural_compressor.ux.components.optimization.mixed_precision.mixed_precision)": [[454, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision"]], "configuration_data (neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.mixedprecision property)": [[454, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision.configuration_data"]], "execute() (neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.mixedprecision method)": [[454, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision.execute"]], "generate_config() (neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.mixedprecision method)": [[454, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision.generate_config"]], "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision": [[454, "module-neural_compressor.ux.components.optimization.mixed_precision.mixed_precision"]], "optimization_script (neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.mixedprecision property)": [[454, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision.optimization_script"]], "parameters (neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.mixedprecision property)": [[454, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision.parameters"]], "neural_compressor.ux.components.optimization.mixed_precision.optimize_model": [[455, "module-neural_compressor.ux.components.optimization.mixed_precision.optimize_model"]], "optimize_graph() (in module neural_compressor.ux.components.optimization.mixed_precision.optimize_model)": [[455, "neural_compressor.ux.components.optimization.mixed_precision.optimize_model.optimize_graph"]], "optimize_graph_config() (in module neural_compressor.ux.components.optimization.mixed_precision.optimize_model)": [[455, "neural_compressor.ux.components.optimization.mixed_precision.optimize_model.optimize_graph_config"]], "parse_args() (in module neural_compressor.ux.components.optimization.mixed_precision.optimize_model)": [[455, "neural_compressor.ux.components.optimization.mixed_precision.optimize_model.parse_args"]], "set_eager_execution() (in module neural_compressor.ux.components.optimization.mixed_precision.optimize_model)": [[455, "neural_compressor.ux.components.optimization.mixed_precision.optimize_model.set_eager_execution"]], "neural_compressor.ux.components.optimization.neural_coder_optimization": [[456, "module-neural_compressor.ux.components.optimization.neural_coder_optimization"]], "neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model": [[457, "module-neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model"]], "optimize_pt_script() (in module neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model)": [[457, "neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model.optimize_pt_script"]], "dataloaderinterface (class in neural_compressor.ux.components.optimization.optimization)": [[458, "neural_compressor.ux.components.optimization.optimization.DataloaderInterface"]], "optimization (class in neural_compressor.ux.components.optimization.optimization)": [[458, "neural_compressor.ux.components.optimization.optimization.Optimization"]], "optimizationinterface (class in neural_compressor.ux.components.optimization.optimization)": [[458, "neural_compressor.ux.components.optimization.optimization.OptimizationInterface"]], "command (neural_compressor.ux.components.optimization.optimization.optimization property)": [[458, "neural_compressor.ux.components.optimization.optimization.Optimization.command"]], "config_filename (neural_compressor.ux.components.optimization.optimization.optimization property)": [[458, "neural_compressor.ux.components.optimization.optimization.Optimization.config_filename"]], "configuration_data (neural_compressor.ux.components.optimization.optimization.optimization property)": [[458, "neural_compressor.ux.components.optimization.optimization.Optimization.configuration_data"]], "execute() (neural_compressor.ux.components.optimization.optimization.optimization method)": [[458, "neural_compressor.ux.components.optimization.optimization.Optimization.execute"]], "generate_config() (neural_compressor.ux.components.optimization.optimization.optimization method)": [[458, "neural_compressor.ux.components.optimization.optimization.Optimization.generate_config"]], "neural_compressor.ux.components.optimization.optimization": [[458, "module-neural_compressor.ux.components.optimization.optimization"]], "optimization_script (neural_compressor.ux.components.optimization.optimization.optimization property)": [[458, "neural_compressor.ux.components.optimization.optimization.Optimization.optimization_script"]], "output_model_dir (neural_compressor.ux.components.optimization.optimization.optimization property)": [[458, "neural_compressor.ux.components.optimization.optimization.Optimization.output_model_dir"]], "output_model_name (neural_compressor.ux.components.optimization.optimization.optimization property)": [[458, "neural_compressor.ux.components.optimization.optimization.Optimization.output_model_name"]], "parameters (neural_compressor.ux.components.optimization.optimization.optimization property)": [[458, "neural_compressor.ux.components.optimization.optimization.Optimization.parameters"]], "workdir (neural_compressor.ux.components.optimization.optimization.optimization property)": [[458, "neural_compressor.ux.components.optimization.optimization.Optimization.workdir"]], "neural_compressor.ux.components.optimization.pruning": [[459, "module-neural_compressor.ux.components.optimization.pruning"]], "neural_compressor.ux.components.optimization.pruning.optimize_model": [[460, "module-neural_compressor.ux.components.optimization.pruning.optimize_model"]], "optimize_model() (in module neural_compressor.ux.components.optimization.pruning.optimize_model)": [[460, "neural_compressor.ux.components.optimization.pruning.optimize_model.optimize_model"]], "parse_args() (in module neural_compressor.ux.components.optimization.pruning.optimize_model)": [[460, "neural_compressor.ux.components.optimization.pruning.optimize_model.parse_args"]], "pruning (class in neural_compressor.ux.components.optimization.pruning.pruning)": [[461, "neural_compressor.ux.components.optimization.pruning.pruning.Pruning"]], "configuration_data (neural_compressor.ux.components.optimization.pruning.pruning.pruning property)": [[461, "neural_compressor.ux.components.optimization.pruning.pruning.Pruning.configuration_data"]], "execute() (neural_compressor.ux.components.optimization.pruning.pruning.pruning method)": [[461, "neural_compressor.ux.components.optimization.pruning.pruning.Pruning.execute"]], "generate_config() (neural_compressor.ux.components.optimization.pruning.pruning.pruning method)": [[461, "neural_compressor.ux.components.optimization.pruning.pruning.Pruning.generate_config"]], "neural_compressor.ux.components.optimization.pruning.pruning": [[461, "module-neural_compressor.ux.components.optimization.pruning.pruning"]], "optimization_script (neural_compressor.ux.components.optimization.pruning.pruning.pruning property)": [[461, "neural_compressor.ux.components.optimization.pruning.pruning.Pruning.optimization_script"]], "parameters (neural_compressor.ux.components.optimization.pruning.pruning.pruning property)": [[461, "neural_compressor.ux.components.optimization.pruning.pruning.Pruning.parameters"]], "neural_compressor.ux.components.optimization.tune": [[462, "module-neural_compressor.ux.components.optimization.tune"]], "neural_compressor.ux.components.optimization.tune.tune_model": [[463, "module-neural_compressor.ux.components.optimization.tune.tune_model"]], "parse_args() (in module neural_compressor.ux.components.optimization.tune.tune_model)": [[463, "neural_compressor.ux.components.optimization.tune.tune_model.parse_args"]], "set_eager_execution() (in module neural_compressor.ux.components.optimization.tune.tune_model)": [[463, "neural_compressor.ux.components.optimization.tune.tune_model.set_eager_execution"]], "tune_model() (in module neural_compressor.ux.components.optimization.tune.tune_model)": [[463, "neural_compressor.ux.components.optimization.tune.tune_model.tune_model"]], "accuracycriterion (class in neural_compressor.ux.components.optimization.tune.tuning)": [[464, "neural_compressor.ux.components.optimization.tune.tuning.AccuracyCriterion"]], "tuning (class in neural_compressor.ux.components.optimization.tune.tuning)": [[464, "neural_compressor.ux.components.optimization.tune.tuning.Tuning"]], "tuningdetails (class in neural_compressor.ux.components.optimization.tune.tuning)": [[464, "neural_compressor.ux.components.optimization.tune.tuning.TuningDetails"]], "configuration_data (neural_compressor.ux.components.optimization.tune.tuning.tuning property)": [[464, "neural_compressor.ux.components.optimization.tune.tuning.Tuning.configuration_data"]], "execute() (neural_compressor.ux.components.optimization.tune.tuning.tuning method)": [[464, "neural_compressor.ux.components.optimization.tune.tuning.Tuning.execute"]], "generate_config() (neural_compressor.ux.components.optimization.tune.tuning.tuning method)": [[464, "neural_compressor.ux.components.optimization.tune.tuning.Tuning.generate_config"]], "neural_compressor.ux.components.optimization.tune.tuning": [[464, "module-neural_compressor.ux.components.optimization.tune.tuning"]], "optimization_script (neural_compressor.ux.components.optimization.tune.tuning.tuning property)": [[464, "neural_compressor.ux.components.optimization.tune.tuning.Tuning.optimization_script"]], "parameters (neural_compressor.ux.components.optimization.tune.tuning.tuning property)": [[464, "neural_compressor.ux.components.optimization.tune.tuning.Tuning.parameters"]], "tuninghistory (class in neural_compressor.ux.components.optimization.tuning_history)": [[465, "neural_compressor.ux.components.optimization.tuning_history.TuningHistory"]], "watcher (class in neural_compressor.ux.components.optimization.tuning_history)": [[465, "neural_compressor.ux.components.optimization.tuning_history.Watcher"]], "history_file_modification_time() (neural_compressor.ux.components.optimization.tuning_history.watcher method)": [[465, "neural_compressor.ux.components.optimization.tuning_history.Watcher.history_file_modification_time"]], "neural_compressor.ux.components.optimization.tuning_history": [[465, "module-neural_compressor.ux.components.optimization.tuning_history"]], "send_history_snapshot() (neural_compressor.ux.components.optimization.tuning_history.tuninghistory static method)": [[465, "neural_compressor.ux.components.optimization.tuning_history.TuningHistory.send_history_snapshot"]], "stop() (neural_compressor.ux.components.optimization.tuning_history.watcher method)": [[465, "neural_compressor.ux.components.optimization.tuning_history.Watcher.stop"]], "tuning_history() (in module neural_compressor.ux.components.optimization.tuning_history)": [[465, "neural_compressor.ux.components.optimization.tuning_history.tuning_history"]], "tuning_history_path() (in module neural_compressor.ux.components.optimization.tuning_history)": [[465, "neural_compressor.ux.components.optimization.tuning_history.tuning_history_path"]], "was_history_file_changed() (neural_compressor.ux.components.optimization.tuning_history.watcher method)": [[465, "neural_compressor.ux.components.optimization.tuning_history.Watcher.was_history_file_changed"]], "execute_profiling() (in module neural_compressor.ux.components.profiling.execute_profiling)": [[466, "neural_compressor.ux.components.profiling.execute_profiling.execute_profiling"]], "execute_real_profiling() (in module neural_compressor.ux.components.profiling.execute_profiling)": [[466, "neural_compressor.ux.components.profiling.execute_profiling.execute_real_profiling"]], "neural_compressor.ux.components.profiling.execute_profiling": [[466, "module-neural_compressor.ux.components.profiling.execute_profiling"]], "profilerfactory (class in neural_compressor.ux.components.profiling.factory)": [[467, "neural_compressor.ux.components.profiling.factory.ProfilerFactory"]], "get_profiler() (neural_compressor.ux.components.profiling.factory.profilerfactory static method)": [[467, "neural_compressor.ux.components.profiling.factory.ProfilerFactory.get_profiler"]], "neural_compressor.ux.components.profiling.factory": [[467, "module-neural_compressor.ux.components.profiling.factory"]], "neural_compressor.ux.components.profiling": [[468, "module-neural_compressor.ux.components.profiling"]], "load_profiling_details() (in module neural_compressor.ux.components.profiling.profile_model)": [[469, "neural_compressor.ux.components.profiling.profile_model.load_profiling_details"]], "neural_compressor.ux.components.profiling.profile_model": [[469, "module-neural_compressor.ux.components.profiling.profile_model"]], "parse_args() (in module neural_compressor.ux.components.profiling.profile_model)": [[469, "neural_compressor.ux.components.profiling.profile_model.parse_args"]], "profiler (class in neural_compressor.ux.components.profiling.profiler)": [[470, "neural_compressor.ux.components.profiling.profiler.Profiler"]], "neural_compressor.ux.components.profiling.profiler": [[470, "module-neural_compressor.ux.components.profiling.profiler"]], "profile_model() (neural_compressor.ux.components.profiling.profiler.profiler method)": [[470, "neural_compressor.ux.components.profiling.profiler.Profiler.profile_model"]], "dataloaderinterface (class in neural_compressor.ux.components.profiling.profiling)": [[471, "neural_compressor.ux.components.profiling.profiling.DataloaderInterface"]], "profiling (class in neural_compressor.ux.components.profiling.profiling)": [[471, "neural_compressor.ux.components.profiling.profiling.Profiling"]], "config_filename (neural_compressor.ux.components.profiling.profiling.profiling property)": [[471, "neural_compressor.ux.components.profiling.profiling.Profiling.config_filename"]], "config_path (neural_compressor.ux.components.profiling.profiling.profiling property)": [[471, "neural_compressor.ux.components.profiling.profiling.Profiling.config_path"]], "execute() (neural_compressor.ux.components.profiling.profiling.profiling method)": [[471, "neural_compressor.ux.components.profiling.profiling.Profiling.execute"]], "generate_config() (neural_compressor.ux.components.profiling.profiling.profiling method)": [[471, "neural_compressor.ux.components.profiling.profiling.Profiling.generate_config"]], "neural_compressor.ux.components.profiling.profiling": [[471, "module-neural_compressor.ux.components.profiling.profiling"]], "profiling_data (neural_compressor.ux.components.profiling.profiling.profiling property)": [[471, "neural_compressor.ux.components.profiling.profiling.Profiling.profiling_data"]], "workdir (neural_compressor.ux.components.profiling.profiling.profiling property)": [[471, "neural_compressor.ux.components.profiling.profiling.Profiling.workdir"]], "profilerfactory (class in neural_compressor.ux.components.profiling.tensorflow_profiler.factory)": [[472, "neural_compressor.ux.components.profiling.tensorflow_profiler.factory.ProfilerFactory"]], "get_profiler() (neural_compressor.ux.components.profiling.tensorflow_profiler.factory.profilerfactory static method)": [[472, "neural_compressor.ux.components.profiling.tensorflow_profiler.factory.ProfilerFactory.get_profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.factory": [[472, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.factory"]], "neural_compressor.ux.components.profiling.tensorflow_profiler": [[473, "module-neural_compressor.ux.components.profiling.tensorflow_profiler"]], "profiler (class in neural_compressor.ux.components.profiling.tensorflow_profiler.profiler)": [[474, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler"]], "build_dataloader() (neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.profiler method)": [[474, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler.build_dataloader"]], "convert_nodes_to_list() (neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.profiler static method)": [[474, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler.convert_nodes_to_list"]], "create_tf_config() (neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.profiler method)": [[474, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler.create_tf_config"]], "get_node_by_name() (neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.profiler static method)": [[474, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler.get_node_by_name"]], "initialize_graph() (neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.profiler method)": [[474, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler.initialize_graph"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler": [[474, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.profiler"]], "profile_model() (neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.profiler method)": [[474, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler.profile_model"]], "delete_assign() (in module neural_compressor.ux.components.profiling.tensorflow_profiler.utils)": [[475, "neural_compressor.ux.components.profiling.tensorflow_profiler.utils.delete_assign"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.utils": [[475, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.utils"]], "main() (in module neural_compressor.ux.inc_bench)": [[476, "neural_compressor.ux.inc_bench.main"]], "neural_compressor.ux.inc_bench": [[476, "module-neural_compressor.ux.inc_bench"]], "prepare_environment() (in module neural_compressor.ux.inc_bench)": [[476, "neural_compressor.ux.inc_bench.prepare_environment"]], "neural_compressor.ux": [[477, "module-neural_compressor.ux"]], "domainflavours (class in neural_compressor.ux.utils.consts)": [[478, "neural_compressor.ux.utils.consts.DomainFlavours"]], "domains (class in neural_compressor.ux.utils.consts)": [[478, "neural_compressor.ux.utils.consts.Domains"]], "executionstatus (class in neural_compressor.ux.utils.consts)": [[478, "neural_compressor.ux.utils.consts.ExecutionStatus"]], "frameworks (class in neural_compressor.ux.utils.consts)": [[478, "neural_compressor.ux.utils.consts.Frameworks"]], "optimizationtypes (class in neural_compressor.ux.utils.consts)": [[478, "neural_compressor.ux.utils.consts.OptimizationTypes"]], "precisions (class in neural_compressor.ux.utils.consts)": [[478, "neural_compressor.ux.utils.consts.Precisions"]], "strategies (class in neural_compressor.ux.utils.consts)": [[478, "neural_compressor.ux.utils.consts.Strategies"]], "neural_compressor.ux.utils.consts": [[478, "module-neural_compressor.ux.utils.consts"]], "environment (class in neural_compressor.ux.utils.environment)": [[479, "neural_compressor.ux.utils.environment.Environment"]], "clean_workloads_wip_status() (neural_compressor.ux.utils.environment.environment static method)": [[479, "neural_compressor.ux.utils.environment.Environment.clean_workloads_wip_status"]], "ensure_workdir_exists_and_writeable() (neural_compressor.ux.utils.environment.environment static method)": [[479, "neural_compressor.ux.utils.environment.Environment.ensure_workdir_exists_and_writeable"]], "migrate_database() (neural_compressor.ux.utils.environment.environment static method)": [[479, "neural_compressor.ux.utils.environment.Environment.migrate_database"]], "neural_compressor.ux.utils.environment": [[479, "module-neural_compressor.ux.utils.environment"]], "accessdeniedexception": [[480, "neural_compressor.ux.utils.exceptions.AccessDeniedException"]], "clienterrorexception": [[480, "neural_compressor.ux.utils.exceptions.ClientErrorException"]], "internalexception": [[480, "neural_compressor.ux.utils.exceptions.InternalException"]], "notfoundexception": [[480, "neural_compressor.ux.utils.exceptions.NotFoundException"]], "neural_compressor.ux.utils.exceptions": [[480, "module-neural_compressor.ux.utils.exceptions"]], "executor (class in neural_compressor.ux.utils.executor)": [[481, "neural_compressor.ux.utils.executor.Executor"]], "additional_log_names (neural_compressor.ux.utils.executor.executor property)": [[481, "neural_compressor.ux.utils.executor.Executor.additional_log_names"]], "call() (neural_compressor.ux.utils.executor.executor method)": [[481, "neural_compressor.ux.utils.executor.Executor.call"]], "call_one() (neural_compressor.ux.utils.executor.executor method)": [[481, "neural_compressor.ux.utils.executor.Executor.call_one"]], "is_multi_commands() (neural_compressor.ux.utils.executor.executor static method)": [[481, "neural_compressor.ux.utils.executor.Executor.is_multi_commands"]], "log_name (neural_compressor.ux.utils.executor.executor property)": [[481, "neural_compressor.ux.utils.executor.Executor.log_name"]], "neural_compressor.ux.utils.executor": [[481, "module-neural_compressor.ux.utils.executor"]], "process_duration (neural_compressor.ux.utils.executor.executor property)": [[481, "neural_compressor.ux.utils.executor.Executor.process_duration"]], "refresh_workdir() (neural_compressor.ux.utils.executor.executor method)": [[481, "neural_compressor.ux.utils.executor.Executor.refresh_workdir"]], "request_id (neural_compressor.ux.utils.executor.executor property)": [[481, "neural_compressor.ux.utils.executor.Executor.request_id"]], "workdir (neural_compressor.ux.utils.executor.executor property)": [[481, "neural_compressor.ux.utils.executor.Executor.workdir"]], "expiringdict (class in neural_compressor.ux.utils.expiring_dict)": [[482, "neural_compressor.ux.utils.expiring_dict.ExpiringDict"]], "expiringdictitem (class in neural_compressor.ux.utils.expiring_dict)": [[482, "neural_compressor.ux.utils.expiring_dict.ExpiringDictItem"]], "is_expired() (neural_compressor.ux.utils.expiring_dict.expiringdictitem method)": [[482, "neural_compressor.ux.utils.expiring_dict.ExpiringDictItem.is_expired"]], "neural_compressor.ux.utils.expiring_dict": [[482, "module-neural_compressor.ux.utils.expiring_dict"]], "githubinfo (class in neural_compressor.ux.utils.github_info)": [[483, "neural_compressor.ux.utils.github_info.GithubInfo"]], "neural_compressor.ux.utils.github_info": [[483, "module-neural_compressor.ux.utils.github_info"]], "tag() (neural_compressor.ux.utils.github_info.githubinfo class method)": [[483, "neural_compressor.ux.utils.github_info.GithubInfo.tag"]], "hwinfo (class in neural_compressor.ux.utils.hw_info)": [[484, "neural_compressor.ux.utils.hw_info.HWInfo"]], "get_bios_version() (in module neural_compressor.ux.utils.hw_info)": [[484, "neural_compressor.ux.utils.hw_info.get_bios_version"]], "get_distribution() (in module neural_compressor.ux.utils.hw_info)": [[484, "neural_compressor.ux.utils.hw_info.get_distribution"]], "get_framework_dependency_info() (in module neural_compressor.ux.utils.hw_info)": [[484, "neural_compressor.ux.utils.hw_info.get_framework_dependency_info"]], "get_framework_info() (in module neural_compressor.ux.utils.hw_info)": [[484, "neural_compressor.ux.utils.hw_info.get_framework_info"]], "get_kernel_version() (in module neural_compressor.ux.utils.hw_info)": [[484, "neural_compressor.ux.utils.hw_info.get_kernel_version"]], "get_number_of_sockets() (in module neural_compressor.ux.utils.hw_info)": [[484, "neural_compressor.ux.utils.hw_info.get_number_of_sockets"]], "initialize() (neural_compressor.ux.utils.hw_info.hwinfo method)": [[484, "neural_compressor.ux.utils.hw_info.HWInfo.initialize"]], "is_turbo_boost_enabled() (in module neural_compressor.ux.utils.hw_info)": [[484, "neural_compressor.ux.utils.hw_info.is_turbo_boost_enabled"]], "neural_compressor.ux.utils.hw_info": [[484, "module-neural_compressor.ux.utils.hw_info"]], "serialize() (neural_compressor.ux.utils.hw_info.hwinfo method)": [[484, "neural_compressor.ux.utils.hw_info.HWInfo.serialize"]], "neural_compressor.ux.utils": [[485, "module-neural_compressor.ux.utils"]], "jsonserializer (class in neural_compressor.ux.utils.json_serializer)": [[486, "neural_compressor.ux.utils.json_serializer.JsonSerializer"]], "neural_compressor.ux.utils.json_serializer": [[486, "module-neural_compressor.ux.utils.json_serializer"]], "serialize() (neural_compressor.ux.utils.json_serializer.jsonserializer method)": [[486, "neural_compressor.ux.utils.json_serializer.JsonSerializer.serialize"]], "serialize_item() (neural_compressor.ux.utils.json_serializer.jsonserializer static method)": [[486, "neural_compressor.ux.utils.json_serializer.JsonSerializer.serialize_item"]], "change_log_level() (in module neural_compressor.ux.utils.logger)": [[487, "neural_compressor.ux.utils.logger.change_log_level"]], "neural_compressor.ux.utils.logger": [[487, "module-neural_compressor.ux.utils.logger"]], "accuracyparser (class in neural_compressor.ux.utils.parser)": [[488, "neural_compressor.ux.utils.parser.AccuracyParser"]], "benchmarkparserfactory (class in neural_compressor.ux.utils.parser)": [[488, "neural_compressor.ux.utils.parser.BenchmarkParserFactory"]], "optimizationparser (class in neural_compressor.ux.utils.parser)": [[488, "neural_compressor.ux.utils.parser.OptimizationParser"]], "parser (class in neural_compressor.ux.utils.parser)": [[488, "neural_compressor.ux.utils.parser.Parser"]], "performanceparser (class in neural_compressor.ux.utils.parser)": [[488, "neural_compressor.ux.utils.parser.PerformanceParser"]], "profilingparser (class in neural_compressor.ux.utils.parser)": [[488, "neural_compressor.ux.utils.parser.ProfilingParser"]], "get_parser() (neural_compressor.ux.utils.parser.benchmarkparserfactory static method)": [[488, "neural_compressor.ux.utils.parser.BenchmarkParserFactory.get_parser"]], "neural_compressor.ux.utils.parser": [[488, "module-neural_compressor.ux.utils.parser"]], "patterns (neural_compressor.ux.utils.parser.accuracyparser property)": [[488, "neural_compressor.ux.utils.parser.AccuracyParser.patterns"]], "patterns (neural_compressor.ux.utils.parser.optimizationparser property)": [[488, "neural_compressor.ux.utils.parser.OptimizationParser.patterns"]], "patterns (neural_compressor.ux.utils.parser.parser property)": [[488, "neural_compressor.ux.utils.parser.Parser.patterns"]], "patterns (neural_compressor.ux.utils.parser.performanceparser property)": [[488, "neural_compressor.ux.utils.parser.PerformanceParser.patterns"]], "patterns (neural_compressor.ux.utils.parser.profilingparser property)": [[488, "neural_compressor.ux.utils.parser.ProfilingParser.patterns"]], "process() (neural_compressor.ux.utils.parser.accuracyparser method)": [[488, "neural_compressor.ux.utils.parser.AccuracyParser.process"]], "process() (neural_compressor.ux.utils.parser.optimizationparser method)": [[488, "neural_compressor.ux.utils.parser.OptimizationParser.process"]], "process() (neural_compressor.ux.utils.parser.parser method)": [[488, "neural_compressor.ux.utils.parser.Parser.process"]], "process() (neural_compressor.ux.utils.parser.performanceparser method)": [[488, "neural_compressor.ux.utils.parser.PerformanceParser.process"]], "process() (neural_compressor.ux.utils.parser.profilingparser method)": [[488, "neural_compressor.ux.utils.parser.ProfilingParser.process"]], "summarize_partial() (neural_compressor.ux.utils.parser.performanceparser method)": [[488, "neural_compressor.ux.utils.parser.PerformanceParser.summarize_partial"]], "summarize_value() (neural_compressor.ux.utils.parser.performanceparser static method)": [[488, "neural_compressor.ux.utils.parser.PerformanceParser.summarize_value"]], "unify_time() (neural_compressor.ux.utils.parser.profilingparser static method)": [[488, "neural_compressor.ux.utils.parser.ProfilingParser.unify_time"]], "update_partial() (neural_compressor.ux.utils.parser.performanceparser static method)": [[488, "neural_compressor.ux.utils.parser.PerformanceParser.update_partial"]], "proc (class in neural_compressor.ux.utils.proc)": [[489, "neural_compressor.ux.utils.proc.Proc"]], "info (neural_compressor.ux.utils.proc.proc property)": [[489, "neural_compressor.ux.utils.proc.Proc.info"]], "info_path (neural_compressor.ux.utils.proc.proc property)": [[489, "neural_compressor.ux.utils.proc.Proc.info_path"]], "is_ok (neural_compressor.ux.utils.proc.proc property)": [[489, "neural_compressor.ux.utils.proc.Proc.is_ok"]], "neural_compressor.ux.utils.proc": [[489, "module-neural_compressor.ux.utils.proc"]], "output (neural_compressor.ux.utils.proc.proc property)": [[489, "neural_compressor.ux.utils.proc.Proc.output"]], "output_path (neural_compressor.ux.utils.proc.proc property)": [[489, "neural_compressor.ux.utils.proc.Proc.output_path"]], "remove_logs() (neural_compressor.ux.utils.proc.proc method)": [[489, "neural_compressor.ux.utils.proc.Proc.remove_logs"]], "run() (neural_compressor.ux.utils.proc.proc method)": [[489, "neural_compressor.ux.utils.proc.Proc.run"]], "tail (neural_compressor.ux.utils.proc.proc property)": [[489, "neural_compressor.ux.utils.proc.Proc.tail"]], "ncprocesses (class in neural_compressor.ux.utils.processes)": [[490, "neural_compressor.ux.utils.processes.NCProcesses"]], "is_ok (neural_compressor.ux.utils.processes.ncprocesses property)": [[490, "neural_compressor.ux.utils.processes.NCProcesses.is_ok"]], "neural_compressor.ux.utils.processes": [[490, "module-neural_compressor.ux.utils.processes"]], "remove_successful_logs() (neural_compressor.ux.utils.processes.ncprocesses method)": [[490, "neural_compressor.ux.utils.processes.NCProcesses.remove_successful_logs"]], "return_code_all() (neural_compressor.ux.utils.processes.ncprocesses method)": [[490, "neural_compressor.ux.utils.processes.NCProcesses.return_code_all"]], "singleton (class in neural_compressor.ux.utils.singleton)": [[491, "neural_compressor.ux.utils.singleton.Singleton"]], "neural_compressor.ux.utils.singleton": [[491, "module-neural_compressor.ux.utils.singleton"]], "get_status_update_function() (in module neural_compressor.ux.utils.status_updates)": [[492, "neural_compressor.ux.utils.status_updates.get_status_update_function"]], "neural_compressor.ux.utils.status_updates": [[492, "module-neural_compressor.ux.utils.status_updates"]], "neural_compressor.ux.utils.templates": [[493, "module-neural_compressor.ux.utils.templates"]], "metric (class in neural_compressor.ux.utils.templates.metric)": [[494, "neural_compressor.ux.utils.templates.metric.Metric"]], "acc_input_model (neural_compressor.ux.utils.templates.metric.metric property)": [[494, "neural_compressor.ux.utils.templates.metric.Metric.acc_input_model"]], "acc_optimized_model (neural_compressor.ux.utils.templates.metric.metric property)": [[494, "neural_compressor.ux.utils.templates.metric.Metric.acc_optimized_model"]], "accuracy (neural_compressor.ux.utils.templates.metric.metric property)": [[494, "neural_compressor.ux.utils.templates.metric.Metric.accuracy"]], "calculate_throughput() (neural_compressor.ux.utils.templates.metric.metric static method)": [[494, "neural_compressor.ux.utils.templates.metric.Metric.calculate_throughput"]], "insert_data() (neural_compressor.ux.utils.templates.metric.metric method)": [[494, "neural_compressor.ux.utils.templates.metric.Metric.insert_data"]], "latency (neural_compressor.ux.utils.templates.metric.metric property)": [[494, "neural_compressor.ux.utils.templates.metric.Metric.latency"]], "neural_compressor.ux.utils.templates.metric": [[494, "module-neural_compressor.ux.utils.templates.metric"]], "optimization_time (neural_compressor.ux.utils.templates.metric.metric property)": [[494, "neural_compressor.ux.utils.templates.metric.Metric.optimization_time"]], "path_optimized_model (neural_compressor.ux.utils.templates.metric.metric property)": [[494, "neural_compressor.ux.utils.templates.metric.Metric.path_optimized_model"]], "profiling_data (neural_compressor.ux.utils.templates.metric.metric property)": [[494, "neural_compressor.ux.utils.templates.metric.Metric.profiling_data"]], "size_input_model (neural_compressor.ux.utils.templates.metric.metric property)": [[494, "neural_compressor.ux.utils.templates.metric.Metric.size_input_model"]], "size_optimized_model (neural_compressor.ux.utils.templates.metric.metric property)": [[494, "neural_compressor.ux.utils.templates.metric.Metric.size_optimized_model"]], "throughput (neural_compressor.ux.utils.templates.metric.metric property)": [[494, "neural_compressor.ux.utils.templates.metric.Metric.throughput"]], "workdir (class in neural_compressor.ux.utils.templates.workdir)": [[495, "neural_compressor.ux.utils.templates.workdir.Workdir"]], "clean_logs() (neural_compressor.ux.utils.templates.workdir.workdir static method)": [[495, "neural_compressor.ux.utils.templates.workdir.Workdir.clean_logs"]], "clean_status() (neural_compressor.ux.utils.templates.workdir.workdir static method)": [[495, "neural_compressor.ux.utils.templates.workdir.Workdir.clean_status"]], "ensure_working_path_exists() (neural_compressor.ux.utils.templates.workdir.workdir method)": [[495, "neural_compressor.ux.utils.templates.workdir.Workdir.ensure_working_path_exists"]], "neural_compressor.ux.utils.templates.workdir": [[495, "module-neural_compressor.ux.utils.templates.workdir"]], "check_module() (in module neural_compressor.ux.utils.utils)": [[496, "neural_compressor.ux.utils.utils.check_module"]], "deprecated() (in module neural_compressor.ux.utils.utils)": [[496, "neural_compressor.ux.utils.utils.deprecated"]], "determine_ip() (in module neural_compressor.ux.utils.utils)": [[496, "neural_compressor.ux.utils.utils.determine_ip"]], "export_to_csv() (in module neural_compressor.ux.utils.utils)": [[496, "neural_compressor.ux.utils.utils.export_to_csv"]], "filter_transforms() (in module neural_compressor.ux.utils.utils)": [[496, "neural_compressor.ux.utils.utils.filter_transforms"]], "get_dataset_path() (in module neural_compressor.ux.utils.utils)": [[496, "neural_compressor.ux.utils.utils.get_dataset_path"]], "get_default_pruning_config_path() (in module neural_compressor.ux.utils.utils)": [[496, "neural_compressor.ux.utils.utils.get_default_pruning_config_path"]], "get_file_extension() (in module neural_compressor.ux.utils.utils)": [[496, "neural_compressor.ux.utils.utils.get_file_extension"]], "get_framework_from_path() (in module neural_compressor.ux.utils.utils)": [[496, "neural_compressor.ux.utils.utils.get_framework_from_path"]], "get_height_width_from_size() (in module neural_compressor.ux.utils.utils)": [[496, "neural_compressor.ux.utils.utils.get_height_width_from_size"]], "get_metrics_dict() (in module neural_compressor.ux.utils.utils)": [[496, "neural_compressor.ux.utils.utils.get_metrics_dict"]], "get_model_zoo_config_path() (in module neural_compressor.ux.utils.utils)": [[496, "neural_compressor.ux.utils.utils.get_model_zoo_config_path"]], "get_model_zoo_model_path() (in module neural_compressor.ux.utils.utils)": [[496, "neural_compressor.ux.utils.utils.get_model_zoo_model_path"]], "get_module_version() (in module neural_compressor.ux.utils.utils)": [[496, "neural_compressor.ux.utils.utils.get_module_version"]], "get_predefined_config_path() (in module neural_compressor.ux.utils.utils)": [[496, "neural_compressor.ux.utils.utils.get_predefined_config_path"]], "get_shape_from_transforms() (in module neural_compressor.ux.utils.utils)": [[496, "neural_compressor.ux.utils.utils.get_shape_from_transforms"]], "get_size() (in module neural_compressor.ux.utils.utils)": [[496, "neural_compressor.ux.utils.utils.get_size"]], "is_dataset_file() (in module neural_compressor.ux.utils.utils)": [[496, "neural_compressor.ux.utils.utils.is_dataset_file"]], "is_development_env() (in module neural_compressor.ux.utils.utils)": [[496, "neural_compressor.ux.utils.utils.is_development_env"]], "is_hidden() (in module neural_compressor.ux.utils.utils)": [[496, "neural_compressor.ux.utils.utils.is_hidden"]], "load_dataloader_config() (in module neural_compressor.ux.utils.utils)": [[496, "neural_compressor.ux.utils.utils.load_dataloader_config"]], "load_help_nc_params() (in module neural_compressor.ux.utils.utils)": [[496, "neural_compressor.ux.utils.utils.load_help_nc_params"]], "load_metrics_config() (in module neural_compressor.ux.utils.utils)": [[496, "neural_compressor.ux.utils.utils.load_metrics_config"]], "load_model_config() (in module neural_compressor.ux.utils.utils)": [[496, "neural_compressor.ux.utils.utils.load_model_config"]], "load_model_wise_params() (in module neural_compressor.ux.utils.utils)": [[496, "neural_compressor.ux.utils.utils.load_model_wise_params"]], "load_precisions_config() (in module neural_compressor.ux.utils.utils)": [[496, "neural_compressor.ux.utils.utils.load_precisions_config"]], "load_pruning_details_config() (in module neural_compressor.ux.utils.utils)": [[496, "neural_compressor.ux.utils.utils.load_pruning_details_config"]], "load_transforms_config() (in module neural_compressor.ux.utils.utils)": [[496, "neural_compressor.ux.utils.utils.load_transforms_config"]], "load_transforms_filter_config() (in module neural_compressor.ux.utils.utils)": [[496, "neural_compressor.ux.utils.utils.load_transforms_filter_config"]], "neural_compressor.ux.utils.utils": [[496, "module-neural_compressor.ux.utils.utils"]], "normalize_domain() (in module neural_compressor.ux.utils.utils)": [[496, "neural_compressor.ux.utils.utils.normalize_domain"]], "normalize_framework() (in module neural_compressor.ux.utils.utils)": [[496, "neural_compressor.ux.utils.utils.normalize_framework"]], "normalize_string() (in module neural_compressor.ux.utils.utils)": [[496, "neural_compressor.ux.utils.utils.normalize_string"]], "parse_bool_value() (in module neural_compressor.ux.utils.utils)": [[496, "neural_compressor.ux.utils.utils.parse_bool_value"]], "parse_to_float_list() (in module neural_compressor.ux.utils.utils)": [[496, "neural_compressor.ux.utils.utils.parse_to_float_list"]], "parse_to_string_list() (in module neural_compressor.ux.utils.utils)": [[496, "neural_compressor.ux.utils.utils.parse_to_string_list"]], "parse_version() (in module neural_compressor.ux.utils.utils)": [[496, "neural_compressor.ux.utils.utils.parse_version"]], "release_tag() (in module neural_compressor.ux.utils.utils)": [[496, "neural_compressor.ux.utils.utils.release_tag"]], "replace_with_values() (in module neural_compressor.ux.utils.utils)": [[496, "neural_compressor.ux.utils.utils.replace_with_values"]], "verify_file_path() (in module neural_compressor.ux.utils.utils)": [[496, "neural_compressor.ux.utils.utils.verify_file_path"]], "config (class in neural_compressor.ux.utils.workload.config)": [[497, "neural_compressor.ux.utils.workload.config.Config"]], "dump() (neural_compressor.ux.utils.workload.config.config method)": [[497, "neural_compressor.ux.utils.workload.config.Config.dump"]], "get_performance_configs() (neural_compressor.ux.utils.workload.config.config method)": [[497, "neural_compressor.ux.utils.workload.config.Config.get_performance_configs"]], "get_performance_cores_per_instance() (neural_compressor.ux.utils.workload.config.config method)": [[497, "neural_compressor.ux.utils.workload.config.Config.get_performance_cores_per_instance"]], "get_performance_num_of_instance() (neural_compressor.ux.utils.workload.config.config method)": [[497, "neural_compressor.ux.utils.workload.config.Config.get_performance_num_of_instance"]], "initialize() (neural_compressor.ux.utils.workload.config.config method)": [[497, "neural_compressor.ux.utils.workload.config.Config.initialize"]], "load() (neural_compressor.ux.utils.workload.config.config method)": [[497, "neural_compressor.ux.utils.workload.config.Config.load"]], "neural_compressor.ux.utils.workload.config": [[497, "module-neural_compressor.ux.utils.workload.config"]], "process_transform() (neural_compressor.ux.utils.workload.config.config static method)": [[497, "neural_compressor.ux.utils.workload.config.Config.process_transform"]], "remove_accuracy_metric() (neural_compressor.ux.utils.workload.config.config method)": [[497, "neural_compressor.ux.utils.workload.config.Config.remove_accuracy_metric"]], "remove_dataloader() (neural_compressor.ux.utils.workload.config.config method)": [[497, "neural_compressor.ux.utils.workload.config.Config.remove_dataloader"]], "set_accuracy_and_performance_batch_sizes() (neural_compressor.ux.utils.workload.config.config method)": [[497, "neural_compressor.ux.utils.workload.config.Config.set_accuracy_and_performance_batch_sizes"]], "set_accuracy_goal() (neural_compressor.ux.utils.workload.config.config method)": [[497, "neural_compressor.ux.utils.workload.config.Config.set_accuracy_goal"]], "set_accuracy_metric() (neural_compressor.ux.utils.workload.config.config method)": [[497, "neural_compressor.ux.utils.workload.config.Config.set_accuracy_metric"]], "set_evaluation_dataloader() (neural_compressor.ux.utils.workload.config.config method)": [[497, "neural_compressor.ux.utils.workload.config.Config.set_evaluation_dataloader"]], "set_evaluation_dataset_path() (neural_compressor.ux.utils.workload.config.config method)": [[497, "neural_compressor.ux.utils.workload.config.Config.set_evaluation_dataset_path"]], "set_inputs() (neural_compressor.ux.utils.workload.config.config method)": [[497, "neural_compressor.ux.utils.workload.config.Config.set_inputs"]], "set_optimization_precision() (neural_compressor.ux.utils.workload.config.config method)": [[497, "neural_compressor.ux.utils.workload.config.Config.set_optimization_precision"]], "set_outputs() (neural_compressor.ux.utils.workload.config.config method)": [[497, "neural_compressor.ux.utils.workload.config.Config.set_outputs"]], "set_performance_cores_per_instance() (neural_compressor.ux.utils.workload.config.config method)": [[497, "neural_compressor.ux.utils.workload.config.Config.set_performance_cores_per_instance"]], "set_performance_iterations() (neural_compressor.ux.utils.workload.config.config method)": [[497, "neural_compressor.ux.utils.workload.config.Config.set_performance_iterations"]], "set_performance_num_of_instance() (neural_compressor.ux.utils.workload.config.config method)": [[497, "neural_compressor.ux.utils.workload.config.Config.set_performance_num_of_instance"]], "set_performance_warmup() (neural_compressor.ux.utils.workload.config.config method)": [[497, "neural_compressor.ux.utils.workload.config.Config.set_performance_warmup"]], "set_quantization_approach() (neural_compressor.ux.utils.workload.config.config method)": [[497, "neural_compressor.ux.utils.workload.config.Config.set_quantization_approach"]], "set_quantization_batch_size() (neural_compressor.ux.utils.workload.config.config method)": [[497, "neural_compressor.ux.utils.workload.config.Config.set_quantization_batch_size"]], "set_quantization_dataloader() (neural_compressor.ux.utils.workload.config.config method)": [[497, "neural_compressor.ux.utils.workload.config.Config.set_quantization_dataloader"]], "set_quantization_dataset_path() (neural_compressor.ux.utils.workload.config.config method)": [[497, "neural_compressor.ux.utils.workload.config.Config.set_quantization_dataset_path"]], "set_quantization_sampling_size() (neural_compressor.ux.utils.workload.config.config method)": [[497, "neural_compressor.ux.utils.workload.config.Config.set_quantization_sampling_size"]], "set_transform() (neural_compressor.ux.utils.workload.config.config method)": [[497, "neural_compressor.ux.utils.workload.config.Config.set_transform"]], "set_workspace() (neural_compressor.ux.utils.workload.config.config method)": [[497, "neural_compressor.ux.utils.workload.config.Config.set_workspace"]], "dataloader (class in neural_compressor.ux.utils.workload.dataloader)": [[498, "neural_compressor.ux.utils.workload.dataloader.Dataloader"]], "dataset (class in neural_compressor.ux.utils.workload.dataloader)": [[498, "neural_compressor.ux.utils.workload.dataloader.Dataset"]], "filter (class in neural_compressor.ux.utils.workload.dataloader)": [[498, "neural_compressor.ux.utils.workload.dataloader.Filter"]], "labelbalance (class in neural_compressor.ux.utils.workload.dataloader)": [[498, "neural_compressor.ux.utils.workload.dataloader.LabelBalance"]], "transform (class in neural_compressor.ux.utils.workload.dataloader)": [[498, "neural_compressor.ux.utils.workload.dataloader.Transform"]], "is_dummy() (neural_compressor.ux.utils.workload.dataloader.dataset method)": [[498, "neural_compressor.ux.utils.workload.dataloader.Dataset.is_dummy"]], "neural_compressor.ux.utils.workload.dataloader": [[498, "module-neural_compressor.ux.utils.workload.dataloader"]], "serialize() (neural_compressor.ux.utils.workload.dataloader.dataloader method)": [[498, "neural_compressor.ux.utils.workload.dataloader.Dataloader.serialize"]], "serialize() (neural_compressor.ux.utils.workload.dataloader.dataset method)": [[498, "neural_compressor.ux.utils.workload.dataloader.Dataset.serialize"]], "serialize() (neural_compressor.ux.utils.workload.dataloader.transform method)": [[498, "neural_compressor.ux.utils.workload.dataloader.Transform.serialize"]], "set_dataset() (neural_compressor.ux.utils.workload.dataloader.dataloader method)": [[498, "neural_compressor.ux.utils.workload.dataloader.Dataloader.set_dataset"]], "set_transforms_from_list() (neural_compressor.ux.utils.workload.dataloader.dataloader method)": [[498, "neural_compressor.ux.utils.workload.dataloader.Dataloader.set_transforms_from_list"]], "accuracy (class in neural_compressor.ux.utils.workload.evaluation)": [[499, "neural_compressor.ux.utils.workload.evaluation.Accuracy"]], "configs (class in neural_compressor.ux.utils.workload.evaluation)": [[499, "neural_compressor.ux.utils.workload.evaluation.Configs"]], "evaluation (class in neural_compressor.ux.utils.workload.evaluation)": [[499, "neural_compressor.ux.utils.workload.evaluation.Evaluation"]], "metric (class in neural_compressor.ux.utils.workload.evaluation)": [[499, "neural_compressor.ux.utils.workload.evaluation.Metric"]], "performance (class in neural_compressor.ux.utils.workload.evaluation)": [[499, "neural_compressor.ux.utils.workload.evaluation.Performance"]], "postprocess (class in neural_compressor.ux.utils.workload.evaluation)": [[499, "neural_compressor.ux.utils.workload.evaluation.Postprocess"]], "postprocessschema (class in neural_compressor.ux.utils.workload.evaluation)": [[499, "neural_compressor.ux.utils.workload.evaluation.PostprocessSchema"]], "get_label_shift_value() (neural_compressor.ux.utils.workload.evaluation.postprocessschema static method)": [[499, "neural_compressor.ux.utils.workload.evaluation.PostprocessSchema.get_label_shift_value"]], "name (neural_compressor.ux.utils.workload.evaluation.metric property)": [[499, "neural_compressor.ux.utils.workload.evaluation.Metric.name"]], "neural_compressor.ux.utils.workload.evaluation": [[499, "module-neural_compressor.ux.utils.workload.evaluation"]], "param (neural_compressor.ux.utils.workload.evaluation.metric property)": [[499, "neural_compressor.ux.utils.workload.evaluation.Metric.param"]], "serialize() (neural_compressor.ux.utils.workload.evaluation.metric method)": [[499, "neural_compressor.ux.utils.workload.evaluation.Metric.serialize"]], "set_accuracy_postprocess_transforms() (neural_compressor.ux.utils.workload.evaluation.evaluation method)": [[499, "neural_compressor.ux.utils.workload.evaluation.Evaluation.set_accuracy_postprocess_transforms"]], "graphoptimization (class in neural_compressor.ux.utils.workload.graph_optimization)": [[500, "neural_compressor.ux.utils.workload.graph_optimization.GraphOptimization"]], "neural_compressor.ux.utils.workload.graph_optimization": [[500, "module-neural_compressor.ux.utils.workload.graph_optimization"]], "set_precisions() (neural_compressor.ux.utils.workload.graph_optimization.graphoptimization method)": [[500, "neural_compressor.ux.utils.workload.graph_optimization.GraphOptimization.set_precisions"]], "neural_compressor.ux.utils.workload": [[501, "module-neural_compressor.ux.utils.workload"]], "mixedprecision (class in neural_compressor.ux.utils.workload.mixed_precision)": [[502, "neural_compressor.ux.utils.workload.mixed_precision.MixedPrecision"]], "neural_compressor.ux.utils.workload.mixed_precision": [[502, "module-neural_compressor.ux.utils.workload.mixed_precision"]], "set_precisions() (neural_compressor.ux.utils.workload.mixed_precision.mixedprecision method)": [[502, "neural_compressor.ux.utils.workload.mixed_precision.MixedPrecision.set_precisions"]], "model (class in neural_compressor.ux.utils.workload.model)": [[503, "neural_compressor.ux.utils.workload.model.Model"]], "inputs (neural_compressor.ux.utils.workload.model.model property)": [[503, "neural_compressor.ux.utils.workload.model.Model.inputs"]], "neural_compressor.ux.utils.workload.model": [[503, "module-neural_compressor.ux.utils.workload.model"]], "outputs (neural_compressor.ux.utils.workload.model.model property)": [[503, "neural_compressor.ux.utils.workload.model.Model.outputs"]], "serialize() (neural_compressor.ux.utils.workload.model.model method)": [[503, "neural_compressor.ux.utils.workload.model.Model.serialize"]], "adamoptimizer (class in neural_compressor.ux.utils.workload.pruning)": [[504, "neural_compressor.ux.utils.workload.pruning.AdamOptimizer"]], "adamwoptimizer (class in neural_compressor.ux.utils.workload.pruning)": [[504, "neural_compressor.ux.utils.workload.pruning.AdamWOptimizer"]], "approach (class in neural_compressor.ux.utils.workload.pruning)": [[504, "neural_compressor.ux.utils.workload.pruning.Approach"]], "criterion (class in neural_compressor.ux.utils.workload.pruning)": [[504, "neural_compressor.ux.utils.workload.pruning.Criterion"]], "crossentropylosscriterion (class in neural_compressor.ux.utils.workload.pruning)": [[504, "neural_compressor.ux.utils.workload.pruning.CrossEntropyLossCriterion"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.ux.utils.workload.pruning)": [[504, "neural_compressor.ux.utils.workload.pruning.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationlosscriterion (class in neural_compressor.ux.utils.workload.pruning)": [[504, "neural_compressor.ux.utils.workload.pruning.KnowledgeDistillationLossCriterion"]], "optimizer (class in neural_compressor.ux.utils.workload.pruning)": [[504, "neural_compressor.ux.utils.workload.pruning.Optimizer"]], "pruning (class in neural_compressor.ux.utils.workload.pruning)": [[504, "neural_compressor.ux.utils.workload.pruning.Pruning"]], "sgdoptimizer (class in neural_compressor.ux.utils.workload.pruning)": [[504, "neural_compressor.ux.utils.workload.pruning.SGDOptimizer"]], "selfknowledgedistillationloss (class in neural_compressor.ux.utils.workload.pruning)": [[504, "neural_compressor.ux.utils.workload.pruning.SelfKnowledgeDistillationLoss"]], "sparsecategoricalcrossentropycriterion (class in neural_compressor.ux.utils.workload.pruning)": [[504, "neural_compressor.ux.utils.workload.pruning.SparseCategoricalCrossentropyCriterion"]], "train (class in neural_compressor.ux.utils.workload.pruning)": [[504, "neural_compressor.ux.utils.workload.pruning.Train"]], "weightcompressionapproach (class in neural_compressor.ux.utils.workload.pruning)": [[504, "neural_compressor.ux.utils.workload.pruning.WeightCompressionApproach"]], "initialize_pruners() (neural_compressor.ux.utils.workload.pruning.weightcompressionapproach static method)": [[504, "neural_compressor.ux.utils.workload.pruning.WeightCompressionApproach.initialize_pruners"]], "neural_compressor.ux.utils.workload.pruning": [[504, "module-neural_compressor.ux.utils.workload.pruning"]], "parse_dict_value_to_float() (in module neural_compressor.ux.utils.workload.pruning)": [[504, "neural_compressor.ux.utils.workload.pruning.parse_dict_value_to_float"]], "parse_dict_value_to_int() (in module neural_compressor.ux.utils.workload.pruning)": [[504, "neural_compressor.ux.utils.workload.pruning.parse_dict_value_to_int"]], "serialize() (neural_compressor.ux.utils.workload.pruning.train method)": [[504, "neural_compressor.ux.utils.workload.pruning.Train.serialize"]], "serialize() (neural_compressor.ux.utils.workload.pruning.weightcompressionapproach method)": [[504, "neural_compressor.ux.utils.workload.pruning.WeightCompressionApproach.serialize"]], "serialize_pruner() (neural_compressor.ux.utils.workload.pruning.weightcompressionapproach static method)": [[504, "neural_compressor.ux.utils.workload.pruning.WeightCompressionApproach.serialize_pruner"]], "set_postprocess_transforms() (neural_compressor.ux.utils.workload.pruning.train method)": [[504, "neural_compressor.ux.utils.workload.pruning.Train.set_postprocess_transforms"]], "advance (class in neural_compressor.ux.utils.workload.quantization)": [[505, "neural_compressor.ux.utils.workload.quantization.Advance"]], "calibration (class in neural_compressor.ux.utils.workload.quantization)": [[505, "neural_compressor.ux.utils.workload.quantization.Calibration"]], "quantization (class in neural_compressor.ux.utils.workload.quantization)": [[505, "neural_compressor.ux.utils.workload.quantization.Quantization"]], "wiseconfig (class in neural_compressor.ux.utils.workload.quantization)": [[505, "neural_compressor.ux.utils.workload.quantization.WiseConfig"]], "wiseconfigdetails (class in neural_compressor.ux.utils.workload.quantization)": [[505, "neural_compressor.ux.utils.workload.quantization.WiseConfigDetails"]], "neural_compressor.ux.utils.workload.quantization": [[505, "module-neural_compressor.ux.utils.workload.quantization"]], "acccriterion (class in neural_compressor.ux.utils.workload.tuning)": [[506, "neural_compressor.ux.utils.workload.tuning.AccCriterion"]], "diagnosis (class in neural_compressor.ux.utils.workload.tuning)": [[506, "neural_compressor.ux.utils.workload.tuning.Diagnosis"]], "exitpolicy (class in neural_compressor.ux.utils.workload.tuning)": [[506, "neural_compressor.ux.utils.workload.tuning.ExitPolicy"]], "multiobjectives (class in neural_compressor.ux.utils.workload.tuning)": [[506, "neural_compressor.ux.utils.workload.tuning.MultiObjectives"]], "strategy (class in neural_compressor.ux.utils.workload.tuning)": [[506, "neural_compressor.ux.utils.workload.tuning.Strategy"]], "tuning (class in neural_compressor.ux.utils.workload.tuning)": [[506, "neural_compressor.ux.utils.workload.tuning.Tuning"]], "workspace (class in neural_compressor.ux.utils.workload.tuning)": [[506, "neural_compressor.ux.utils.workload.tuning.Workspace"]], "neural_compressor.ux.utils.workload.tuning": [[506, "module-neural_compressor.ux.utils.workload.tuning"]], "objective (neural_compressor.ux.utils.workload.tuning.multiobjectives property)": [[506, "neural_compressor.ux.utils.workload.tuning.MultiObjectives.objective"]], "set_max_trials() (neural_compressor.ux.utils.workload.tuning.tuning method)": [[506, "neural_compressor.ux.utils.workload.tuning.Tuning.set_max_trials"]], "set_performance_only() (neural_compressor.ux.utils.workload.tuning.tuning method)": [[506, "neural_compressor.ux.utils.workload.tuning.Tuning.set_performance_only"]], "set_random_seed() (neural_compressor.ux.utils.workload.tuning.tuning method)": [[506, "neural_compressor.ux.utils.workload.tuning.Tuning.set_random_seed"]], "set_timeout() (neural_compressor.ux.utils.workload.tuning.tuning method)": [[506, "neural_compressor.ux.utils.workload.tuning.Tuning.set_timeout"]], "set_workspace() (neural_compressor.ux.utils.workload.tuning.tuning method)": [[506, "neural_compressor.ux.utils.workload.tuning.Tuning.set_workspace"]], "weight (neural_compressor.ux.utils.workload.tuning.multiobjectives property)": [[506, "neural_compressor.ux.utils.workload.tuning.MultiObjectives.weight"]], "float_representer() (in module neural_compressor.ux.utils.yaml_utils)": [[507, "neural_compressor.ux.utils.yaml_utils.float_representer"]], "neural_compressor.ux.utils.yaml_utils": [[507, "module-neural_compressor.ux.utils.yaml_utils"]], "pruner_representer() (in module neural_compressor.ux.utils.yaml_utils)": [[507, "neural_compressor.ux.utils.yaml_utils.pruner_representer"]], "message (class in neural_compressor.ux.web.communication)": [[508, "neural_compressor.ux.web.communication.Message"]], "messagequeue (class in neural_compressor.ux.web.communication)": [[508, "neural_compressor.ux.web.communication.MessageQueue"]], "request (class in neural_compressor.ux.web.communication)": [[508, "neural_compressor.ux.web.communication.Request"]], "response (class in neural_compressor.ux.web.communication)": [[508, "neural_compressor.ux.web.communication.Response"]], "create_simple_response() (in module neural_compressor.ux.web.communication)": [[508, "neural_compressor.ux.web.communication.create_simple_response"]], "data (neural_compressor.ux.web.communication.message property)": [[508, "neural_compressor.ux.web.communication.Message.data"]], "get() (neural_compressor.ux.web.communication.messagequeue method)": [[508, "neural_compressor.ux.web.communication.MessageQueue.get"]], "neural_compressor.ux.web.communication": [[508, "module-neural_compressor.ux.web.communication"]], "post_error() (neural_compressor.ux.web.communication.messagequeue method)": [[508, "neural_compressor.ux.web.communication.MessageQueue.post_error"]], "post_failure() (neural_compressor.ux.web.communication.messagequeue method)": [[508, "neural_compressor.ux.web.communication.MessageQueue.post_failure"]], "post_success() (neural_compressor.ux.web.communication.messagequeue method)": [[508, "neural_compressor.ux.web.communication.MessageQueue.post_success"]], "status (neural_compressor.ux.web.communication.message property)": [[508, "neural_compressor.ux.web.communication.Message.status"]], "subject (neural_compressor.ux.web.communication.message property)": [[508, "neural_compressor.ux.web.communication.Message.subject"]], "configuration (class in neural_compressor.ux.web.configuration)": [[509, "neural_compressor.ux.web.configuration.Configuration"]], "determine_gui_port() (neural_compressor.ux.web.configuration.configuration method)": [[509, "neural_compressor.ux.web.configuration.Configuration.determine_gui_port"]], "determine_log_level() (neural_compressor.ux.web.configuration.configuration method)": [[509, "neural_compressor.ux.web.configuration.Configuration.determine_log_level"]], "determine_server_port() (neural_compressor.ux.web.configuration.configuration method)": [[509, "neural_compressor.ux.web.configuration.Configuration.determine_server_port"]], "determine_url_prefix() (neural_compressor.ux.web.configuration.configuration static method)": [[509, "neural_compressor.ux.web.configuration.Configuration.determine_url_prefix"]], "determine_values_from_environment() (neural_compressor.ux.web.configuration.configuration method)": [[509, "neural_compressor.ux.web.configuration.Configuration.determine_values_from_environment"]], "dump_token_to_file() (neural_compressor.ux.web.configuration.configuration method)": [[509, "neural_compressor.ux.web.configuration.Configuration.dump_token_to_file"]], "get_command_line_args() (neural_compressor.ux.web.configuration.configuration method)": [[509, "neural_compressor.ux.web.configuration.Configuration.get_command_line_args"]], "get_url() (neural_compressor.ux.web.configuration.configuration method)": [[509, "neural_compressor.ux.web.configuration.Configuration.get_url"]], "global_config_directory (neural_compressor.ux.web.configuration.configuration property)": [[509, "neural_compressor.ux.web.configuration.Configuration.global_config_directory"]], "is_port_taken() (neural_compressor.ux.web.configuration.configuration method)": [[509, "neural_compressor.ux.web.configuration.Configuration.is_port_taken"]], "neural_compressor.ux.web.configuration": [[509, "module-neural_compressor.ux.web.configuration"]], "set_up() (neural_compressor.ux.web.configuration.configuration method)": [[509, "neural_compressor.ux.web.configuration.Configuration.set_up"]], "servicenotfoundexception (class in neural_compressor.ux.web.exceptions)": [[510, "neural_compressor.ux.web.exceptions.ServiceNotFoundException"]], "neural_compressor.ux.web.exceptions": [[510, "module-neural_compressor.ux.web.exceptions"]], "neural_compressor.ux.web": [[511, "module-neural_compressor.ux.web"]], "deferredroutingdefinition (class in neural_compressor.ux.web.router)": [[512, "neural_compressor.ux.web.router.DeferredRoutingDefinition"]], "deferredsubprocessroutingdefinition (class in neural_compressor.ux.web.router)": [[512, "neural_compressor.ux.web.router.DeferredSubprocessRoutingDefinition"]], "realtimeroutingdefinition (class in neural_compressor.ux.web.router)": [[512, "neural_compressor.ux.web.router.RealtimeRoutingDefinition"]], "router (class in neural_compressor.ux.web.router)": [[512, "neural_compressor.ux.web.router.Router"]], "routingdefinition (class in neural_compressor.ux.web.router)": [[512, "neural_compressor.ux.web.router.RoutingDefinition"]], "find_pattern_in_graph() (in module neural_compressor.ux.web.router)": [[512, "neural_compressor.ux.web.router.find_pattern_in_graph"]], "get_model_graph() (in module neural_compressor.ux.web.router)": [[512, "neural_compressor.ux.web.router.get_model_graph"]], "get_system_info() (in module neural_compressor.ux.web.router)": [[512, "neural_compressor.ux.web.router.get_system_info"]], "handle() (neural_compressor.ux.web.router.router method)": [[512, "neural_compressor.ux.web.router.Router.handle"]], "neural_compressor.ux.web.router": [[512, "module-neural_compressor.ux.web.router"]], "allow_api_call() (in module neural_compressor.ux.web.server)": [[513, "neural_compressor.ux.web.server.allow_api_call"]], "block_iframe() (in module neural_compressor.ux.web.server)": [[513, "neural_compressor.ux.web.server.block_iframe"]], "block_sniffing() (in module neural_compressor.ux.web.server)": [[513, "neural_compressor.ux.web.server.block_sniffing"]], "build_parameters() (in module neural_compressor.ux.web.server)": [[513, "neural_compressor.ux.web.server.build_parameters"]], "disable_cache() (in module neural_compressor.ux.web.server)": [[513, "neural_compressor.ux.web.server.disable_cache"]], "get_tls_args() (in module neural_compressor.ux.web.server)": [[513, "neural_compressor.ux.web.server.get_tls_args"]], "handle_api_call() (in module neural_compressor.ux.web.server)": [[513, "neural_compressor.ux.web.server.handle_api_call"]], "neural_compressor.ux.web.server": [[513, "module-neural_compressor.ux.web.server"]], "page_not_found() (in module neural_compressor.ux.web.server)": [[513, "neural_compressor.ux.web.server.page_not_found"]], "require_api_token() (in module neural_compressor.ux.web.server)": [[513, "neural_compressor.ux.web.server.require_api_token"]], "root() (in module neural_compressor.ux.web.server)": [[513, "neural_compressor.ux.web.server.root"]], "run_server() (in module neural_compressor.ux.web.server)": [[513, "neural_compressor.ux.web.server.run_server"]], "web_socket_publisher() (in module neural_compressor.ux.web.server)": [[513, "neural_compressor.ux.web.server.web_socket_publisher"]], "benchmarkservice (class in neural_compressor.ux.web.service.benchmark)": [[514, "neural_compressor.ux.web.service.benchmark.BenchmarkService"]], "neural_compressor.ux.web.service.benchmark": [[514, "module-neural_compressor.ux.web.service.benchmark"]], "historysnapshotparser (class in neural_compressor.ux.web.service.history_snapshot_parser)": [[515, "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser"]], "extract_accuracy() (neural_compressor.ux.web.service.history_snapshot_parser.historysnapshotparser method)": [[515, "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser.extract_accuracy"]], "extract_performance() (neural_compressor.ux.web.service.history_snapshot_parser.historysnapshotparser method)": [[515, "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser.extract_performance"]], "neural_compressor.ux.web.service.history_snapshot_parser": [[515, "module-neural_compressor.ux.web.service.history_snapshot_parser"]], "parse_history_item() (neural_compressor.ux.web.service.history_snapshot_parser.historysnapshotparser method)": [[515, "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser.parse_history_item"]], "parse_history_snapshot() (neural_compressor.ux.web.service.history_snapshot_parser.historysnapshotparser method)": [[515, "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser.parse_history_snapshot"]], "neural_compressor.ux.web.service": [[516, "module-neural_compressor.ux.web.service"]], "modelservice (class in neural_compressor.ux.web.service.model)": [[517, "neural_compressor.ux.web.service.model.ModelService"]], "get_model() (neural_compressor.ux.web.service.model.modelservice class method)": [[517, "neural_compressor.ux.web.service.model.ModelService.get_model"]], "neural_compressor.ux.web.service.model": [[517, "module-neural_compressor.ux.web.service.model"]], "optimizationservice (class in neural_compressor.ux.web.service.optimization)": [[518, "neural_compressor.ux.web.service.optimization.OptimizationService"]], "neural_compressor.ux.web.service.optimization": [[518, "module-neural_compressor.ux.web.service.optimization"]], "profilingservice (class in neural_compressor.ux.web.service.profiling)": [[519, "neural_compressor.ux.web.service.profiling.ProfilingService"]], "generate_csv() (neural_compressor.ux.web.service.profiling.profilingservice class method)": [[519, "neural_compressor.ux.web.service.profiling.ProfilingService.generate_csv"]], "neural_compressor.ux.web.service.profiling": [[519, "module-neural_compressor.ux.web.service.profiling"]], "requestdataprocessor (class in neural_compressor.ux.web.service.request_data_processor)": [[520, "neural_compressor.ux.web.service.request_data_processor.RequestDataProcessor"]], "get_string_value() (neural_compressor.ux.web.service.request_data_processor.requestdataprocessor static method)": [[520, "neural_compressor.ux.web.service.request_data_processor.RequestDataProcessor.get_string_value"]], "neural_compressor.ux.web.service.request_data_processor": [[520, "module-neural_compressor.ux.web.service.request_data_processor"]], "responsegenerator (class in neural_compressor.ux.web.service.response_generator)": [[521, "neural_compressor.ux.web.service.response_generator.ResponseGenerator"]], "add_refresh() (neural_compressor.ux.web.service.response_generator.responsegenerator static method)": [[521, "neural_compressor.ux.web.service.response_generator.ResponseGenerator.add_refresh"]], "from_exception() (neural_compressor.ux.web.service.response_generator.responsegenerator static method)": [[521, "neural_compressor.ux.web.service.response_generator.ResponseGenerator.from_exception"]], "get_status_code_for_exception() (neural_compressor.ux.web.service.response_generator.responsegenerator static method)": [[521, "neural_compressor.ux.web.service.response_generator.ResponseGenerator.get_status_code_for_exception"]], "neural_compressor.ux.web.service.response_generator": [[521, "module-neural_compressor.ux.web.service.response_generator"]], "serve_from_filesystem() (neural_compressor.ux.web.service.response_generator.responsegenerator static method)": [[521, "neural_compressor.ux.web.service.response_generator.ResponseGenerator.serve_from_filesystem"]], "workloadservice (class in neural_compressor.ux.web.service.workload)": [[522, "neural_compressor.ux.web.service.workload.WorkloadService"]], "get_code_template() (neural_compressor.ux.web.service.workload.workloadservice class method)": [[522, "neural_compressor.ux.web.service.workload.WorkloadService.get_code_template"]], "get_config() (neural_compressor.ux.web.service.workload.workloadservice class method)": [[522, "neural_compressor.ux.web.service.workload.WorkloadService.get_config"]], "get_output() (neural_compressor.ux.web.service.workload.workloadservice class method)": [[522, "neural_compressor.ux.web.service.workload.WorkloadService.get_output"]], "neural_compressor.ux.web.service.workload": [[522, "module-neural_compressor.ux.web.service.workload"]], "neural_compressor.version": [[523, "module-neural_compressor.version"]]}})