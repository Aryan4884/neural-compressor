Search.setIndex({"docnames": ["autoapi/block_mask/index", "autoapi/neural_compressor/adaptor/adaptor/index", "autoapi/neural_compressor/adaptor/index", "autoapi/neural_compressor/adaptor/keras/index", "autoapi/neural_compressor/adaptor/keras_utils/conv2d/index", "autoapi/neural_compressor/adaptor/keras_utils/dense/index", "autoapi/neural_compressor/adaptor/keras_utils/depthwise_conv2d/index", "autoapi/neural_compressor/adaptor/keras_utils/index", "autoapi/neural_compressor/adaptor/keras_utils/pool2d/index", "autoapi/neural_compressor/adaptor/keras_utils/quantizer/index", "autoapi/neural_compressor/adaptor/keras_utils/separable_conv2d/index", "autoapi/neural_compressor/adaptor/mxnet/index", "autoapi/neural_compressor/adaptor/mxnet_utils/index", "autoapi/neural_compressor/adaptor/mxnet_utils/util/index", "autoapi/neural_compressor/adaptor/onnxrt/index", "autoapi/neural_compressor/adaptor/ox_utils/calibration/index", "autoapi/neural_compressor/adaptor/ox_utils/calibrator/index", "autoapi/neural_compressor/adaptor/ox_utils/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/activation/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/argmax/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/attention/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/binary_op/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/concat/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/conv/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/direct_q8/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/embed_layernorm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gather/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gavgpool/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gemm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/lstm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/matmul/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/maxpool/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/norm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/ops/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/pad/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/pooling/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/reduce/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/resize/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/split/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/unary_op/index", "autoapi/neural_compressor/adaptor/ox_utils/quantizer/index", "autoapi/neural_compressor/adaptor/ox_utils/smooth_quant/index", "autoapi/neural_compressor/adaptor/ox_utils/util/index", "autoapi/neural_compressor/adaptor/pytorch/index", "autoapi/neural_compressor/adaptor/query/index", "autoapi/neural_compressor/adaptor/tensorflow/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter_without_calib/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/bf16_convert/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_add_to_biasadd/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_layout/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_leakyrelu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_nan_to_random/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_placeholder_to_const/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dequantize_cast_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dilated_contraction/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dummy_biasadd/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/expanddims_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fetch_weight_from_reshape/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_batch_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_constant/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_biasadd_add/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_column_wise_mul/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_conv_with_math/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_in/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_gelu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_layer_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_reshape_transpose/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/graph_cse_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/grappler_pass/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/insert_print_node/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/move_squeeze_after_relu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/pre_optimize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/remove_training_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/rename_batch_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/split_shared_input/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_equivalent_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_unused_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/switch_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/graph_base/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_fake_quant/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value_without_calib/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_requantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_requantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/meta_op_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_hostconst_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_quantized_op_cse/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/rnn_convert/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/scale_propagation/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_node/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_schema/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/tf2onnx_utils/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/insert_qdq_pattern/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/merge_duplicated_qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/share_qdq_y_pattern/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_util/index", "autoapi/neural_compressor/adaptor/tf_utils/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/fake_quantize/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_config/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_helper/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/optimize_layer/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_wrapper/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_concatv2/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_deconv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_in/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_matmul/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_pooling/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/optimize_qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_base/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_concatv2/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_for_intel_cpu/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_matmul/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_pooling/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph_common/index", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_calibration/index", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_scaler/index", "autoapi/neural_compressor/adaptor/tf_utils/tf2onnx_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/bias_correction/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/graph_transform_base/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/insert_logging/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/rerange_quantized_concat/index", "autoapi/neural_compressor/adaptor/tf_utils/util/index", "autoapi/neural_compressor/adaptor/torch_utils/bf16_convert/index", "autoapi/neural_compressor/adaptor/torch_utils/gptq/index", "autoapi/neural_compressor/adaptor/torch_utils/hawq_metric/index", "autoapi/neural_compressor/adaptor/torch_utils/index", "autoapi/neural_compressor/adaptor/torch_utils/mixed_precision/index", "autoapi/neural_compressor/adaptor/torch_utils/model_wrapper/index", "autoapi/neural_compressor/adaptor/torch_utils/pattern_detector/index", "autoapi/neural_compressor/adaptor/torch_utils/smooth_quant/index", "autoapi/neural_compressor/adaptor/torch_utils/symbolic_trace/index", "autoapi/neural_compressor/adaptor/torch_utils/teq/index", "autoapi/neural_compressor/adaptor/torch_utils/util/index", "autoapi/neural_compressor/adaptor/torch_utils/weight_only/index", "autoapi/neural_compressor/algorithm/algorithm/index", "autoapi/neural_compressor/algorithm/fast_bias_correction/index", "autoapi/neural_compressor/algorithm/index", "autoapi/neural_compressor/algorithm/smooth_quant/index", "autoapi/neural_compressor/algorithm/weight_correction/index", "autoapi/neural_compressor/benchmark/index", "autoapi/neural_compressor/compression/callbacks/index", "autoapi/neural_compressor/compression/distillation/criterions/index", "autoapi/neural_compressor/compression/distillation/index", "autoapi/neural_compressor/compression/index", "autoapi/neural_compressor/compression/pruner/criteria/index", "autoapi/neural_compressor/compression/pruner/index", "autoapi/neural_compressor/compression/pruner/model_slim/auto_slim/index", "autoapi/neural_compressor/compression/pruner/model_slim/index", "autoapi/neural_compressor/compression/pruner/model_slim/pattern_analyzer/index", "autoapi/neural_compressor/compression/pruner/model_slim/weight_slim/index", "autoapi/neural_compressor/compression/pruner/patterns/base/index", "autoapi/neural_compressor/compression/pruner/patterns/index", "autoapi/neural_compressor/compression/pruner/patterns/mha/index", "autoapi/neural_compressor/compression/pruner/patterns/ninm/index", "autoapi/neural_compressor/compression/pruner/patterns/nxm/index", "autoapi/neural_compressor/compression/pruner/pruners/base/index", "autoapi/neural_compressor/compression/pruner/pruners/basic/index", "autoapi/neural_compressor/compression/pruner/pruners/block_mask/index", "autoapi/neural_compressor/compression/pruner/pruners/index", "autoapi/neural_compressor/compression/pruner/pruners/mha/index", "autoapi/neural_compressor/compression/pruner/pruners/pattern_lock/index", "autoapi/neural_compressor/compression/pruner/pruners/progressive/index", "autoapi/neural_compressor/compression/pruner/pruners/retrain_free/index", "autoapi/neural_compressor/compression/pruner/regs/index", "autoapi/neural_compressor/compression/pruner/schedulers/index", "autoapi/neural_compressor/compression/pruner/tf_criteria/index", "autoapi/neural_compressor/compression/pruner/utils/index", "autoapi/neural_compressor/conf/config/index", "autoapi/neural_compressor/conf/dotdict/index", "autoapi/neural_compressor/conf/index", "autoapi/neural_compressor/conf/pythonic_config/index", "autoapi/neural_compressor/config/index", "autoapi/neural_compressor/contrib/index", "autoapi/neural_compressor/contrib/strategy/index", "autoapi/neural_compressor/contrib/strategy/sigopt/index", "autoapi/neural_compressor/contrib/strategy/tpe/index", "autoapi/neural_compressor/data/dataloaders/base_dataloader/index", "autoapi/neural_compressor/data/dataloaders/dataloader/index", "autoapi/neural_compressor/data/dataloaders/default_dataloader/index", "autoapi/neural_compressor/data/dataloaders/fetcher/index", "autoapi/neural_compressor/data/dataloaders/index", "autoapi/neural_compressor/data/dataloaders/mxnet_dataloader/index", "autoapi/neural_compressor/data/dataloaders/onnxrt_dataloader/index", "autoapi/neural_compressor/data/dataloaders/pytorch_dataloader/index", "autoapi/neural_compressor/data/dataloaders/sampler/index", "autoapi/neural_compressor/data/dataloaders/tensorflow_dataloader/index", "autoapi/neural_compressor/data/datasets/bert_dataset/index", "autoapi/neural_compressor/data/datasets/coco_dataset/index", "autoapi/neural_compressor/data/datasets/dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/data/datasets/index", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/data/filters/coco_filter/index", "autoapi/neural_compressor/data/filters/filter/index", "autoapi/neural_compressor/data/filters/index", "autoapi/neural_compressor/data/index", "autoapi/neural_compressor/data/transforms/coco_transform/index", "autoapi/neural_compressor/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/data/transforms/index", "autoapi/neural_compressor/data/transforms/postprocess/index", "autoapi/neural_compressor/data/transforms/tokenization/index", "autoapi/neural_compressor/data/transforms/transform/index", "autoapi/neural_compressor/experimental/benchmark/index", "autoapi/neural_compressor/experimental/common/criterion/index", "autoapi/neural_compressor/experimental/common/dataloader/index", "autoapi/neural_compressor/experimental/common/index", "autoapi/neural_compressor/experimental/common/metric/index", "autoapi/neural_compressor/experimental/common/model/index", "autoapi/neural_compressor/experimental/common/optimizer/index", "autoapi/neural_compressor/experimental/common/postprocess/index", "autoapi/neural_compressor/experimental/common/torch_utils/index", "autoapi/neural_compressor/experimental/component/index", "autoapi/neural_compressor/experimental/compression/index", "autoapi/neural_compressor/experimental/compression/pruning/index", "autoapi/neural_compressor/experimental/contrib/index", "autoapi/neural_compressor/experimental/contrib/strategy/index", "autoapi/neural_compressor/experimental/contrib/strategy/sigopt/index", "autoapi/neural_compressor/experimental/contrib/strategy/tpe/index", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index", "autoapi/neural_compressor/experimental/data/dataloaders/index", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/index", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index", "autoapi/neural_compressor/experimental/data/filters/filter/index", "autoapi/neural_compressor/experimental/data/filters/index", "autoapi/neural_compressor/experimental/data/index", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/experimental/data/transforms/index", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index", "autoapi/neural_compressor/experimental/data/transforms/transform/index", "autoapi/neural_compressor/experimental/distillation/index", "autoapi/neural_compressor/experimental/export/index", "autoapi/neural_compressor/experimental/export/qlinear2qdq/index", "autoapi/neural_compressor/experimental/export/tf2onnx/index", "autoapi/neural_compressor/experimental/export/torch2onnx/index", "autoapi/neural_compressor/experimental/graph_optimization/index", "autoapi/neural_compressor/experimental/index", "autoapi/neural_compressor/experimental/metric/bleu/index", "autoapi/neural_compressor/experimental/metric/bleu_util/index", "autoapi/neural_compressor/experimental/metric/coco_label_map/index", "autoapi/neural_compressor/experimental/metric/coco_tools/index", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index", "autoapi/neural_compressor/experimental/metric/f1/index", "autoapi/neural_compressor/experimental/metric/index", "autoapi/neural_compressor/experimental/metric/metric/index", "autoapi/neural_compressor/experimental/mixed_precision/index", "autoapi/neural_compressor/experimental/model_conversion/index", "autoapi/neural_compressor/experimental/nas/basic_nas/index", "autoapi/neural_compressor/experimental/nas/dynas/index", "autoapi/neural_compressor/experimental/nas/index", "autoapi/neural_compressor/experimental/nas/nas/index", "autoapi/neural_compressor/experimental/nas/nas_utils/index", "autoapi/neural_compressor/experimental/nas/search_algorithms/index", "autoapi/neural_compressor/experimental/pruner_legacy/gradient_sensitivity/index", "autoapi/neural_compressor/experimental/pruner_legacy/group_lasso/index", "autoapi/neural_compressor/experimental/pruner_legacy/index", "autoapi/neural_compressor/experimental/pruner_legacy/magnitude/index", "autoapi/neural_compressor/experimental/pruner_legacy/pattern_lock/index", "autoapi/neural_compressor/experimental/pruner_legacy/pruner/index", "autoapi/neural_compressor/experimental/pruning/index", "autoapi/neural_compressor/experimental/pruning_recipes/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index", "autoapi/neural_compressor/experimental/pruning_v2/index", "autoapi/neural_compressor/experimental/pytorch_pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index", "autoapi/neural_compressor/experimental/quantization/index", "autoapi/neural_compressor/experimental/scheduler/index", "autoapi/neural_compressor/experimental/strategy/auto_mixed_precision/index", "autoapi/neural_compressor/experimental/strategy/basic/index", "autoapi/neural_compressor/experimental/strategy/bayesian/index", "autoapi/neural_compressor/experimental/strategy/exhaustive/index", "autoapi/neural_compressor/experimental/strategy/index", "autoapi/neural_compressor/experimental/strategy/mse/index", "autoapi/neural_compressor/experimental/strategy/mse_v2/index", "autoapi/neural_compressor/experimental/strategy/random/index", "autoapi/neural_compressor/experimental/strategy/strategy/index", "autoapi/neural_compressor/experimental/strategy/utils/constant/index", "autoapi/neural_compressor/experimental/strategy/utils/index", "autoapi/neural_compressor/experimental/strategy/utils/tuning_sampler/index", "autoapi/neural_compressor/experimental/strategy/utils/tuning_space/index", "autoapi/neural_compressor/experimental/strategy/utils/tuning_structs/index", "autoapi/neural_compressor/experimental/strategy/utils/utility/index", "autoapi/neural_compressor/index", "autoapi/neural_compressor/metric/bleu/index", "autoapi/neural_compressor/metric/bleu_util/index", "autoapi/neural_compressor/metric/coco_label_map/index", "autoapi/neural_compressor/metric/coco_tools/index", "autoapi/neural_compressor/metric/evaluate_squad/index", "autoapi/neural_compressor/metric/f1/index", "autoapi/neural_compressor/metric/index", "autoapi/neural_compressor/metric/metric/index", "autoapi/neural_compressor/mix_precision/index", "autoapi/neural_compressor/model/base_model/index", "autoapi/neural_compressor/model/index", "autoapi/neural_compressor/model/keras_model/index", "autoapi/neural_compressor/model/model/index", "autoapi/neural_compressor/model/mxnet_model/index", "autoapi/neural_compressor/model/nets_factory/index", "autoapi/neural_compressor/model/onnx_model/index", "autoapi/neural_compressor/model/tensorflow_model/index", "autoapi/neural_compressor/model/torch_model/index", "autoapi/neural_compressor/objective/index", "autoapi/neural_compressor/profiling/index", "autoapi/neural_compressor/profiling/parser/factory/index", "autoapi/neural_compressor/profiling/parser/index", "autoapi/neural_compressor/profiling/parser/onnx_parser/factory/index", "autoapi/neural_compressor/profiling/parser/onnx_parser/index", "autoapi/neural_compressor/profiling/parser/onnx_parser/parser/index", "autoapi/neural_compressor/profiling/parser/parser/index", "autoapi/neural_compressor/profiling/parser/result/index", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/factory/index", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/index", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/parser/index", "autoapi/neural_compressor/profiling/profiler/factory/index", "autoapi/neural_compressor/profiling/profiler/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/factory/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/profiler/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/utils/index", "autoapi/neural_compressor/profiling/profiler/profiler/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/factory/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/profiler/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/utils/index", "autoapi/neural_compressor/quantization/index", "autoapi/neural_compressor/strategy/auto/index", "autoapi/neural_compressor/strategy/auto_mixed_precision/index", "autoapi/neural_compressor/strategy/basic/index", "autoapi/neural_compressor/strategy/bayesian/index", "autoapi/neural_compressor/strategy/conservative/index", "autoapi/neural_compressor/strategy/exhaustive/index", "autoapi/neural_compressor/strategy/hawq_v2/index", "autoapi/neural_compressor/strategy/index", "autoapi/neural_compressor/strategy/mse/index", "autoapi/neural_compressor/strategy/mse_v2/index", "autoapi/neural_compressor/strategy/random/index", "autoapi/neural_compressor/strategy/strategy/index", "autoapi/neural_compressor/strategy/utils/constant/index", "autoapi/neural_compressor/strategy/utils/index", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index", "autoapi/neural_compressor/strategy/utils/tuning_space/index", "autoapi/neural_compressor/strategy/utils/tuning_structs/index", "autoapi/neural_compressor/strategy/utils/utility/index", "autoapi/neural_compressor/template/api_doc_example/index", "autoapi/neural_compressor/template/index", "autoapi/neural_compressor/training/index", "autoapi/neural_compressor/utils/collect_layer_histogram/index", "autoapi/neural_compressor/utils/constant/index", "autoapi/neural_compressor/utils/create_obj_from_config/index", "autoapi/neural_compressor/utils/index", "autoapi/neural_compressor/utils/kl_divergence/index", "autoapi/neural_compressor/utils/load_huggingface/index", "autoapi/neural_compressor/utils/logger/index", "autoapi/neural_compressor/utils/neural_insights_utils/index", "autoapi/neural_compressor/utils/options/index", "autoapi/neural_compressor/utils/pytorch/index", "autoapi/neural_compressor/utils/utility/index", "autoapi/neural_compressor/utils/weights_details/index", "autoapi/neural_compressor/version/index", "docs/build_docs/source/index", "docs/source/CODE_OF_CONDUCT", "docs/source/CONTRIBUTING", "docs/source/FX", "docs/source/NAS", "docs/source/SECURITY", "docs/source/Welcome", "docs/source/adaptor", "docs/source/add_new_adaptor", "docs/source/add_new_data_type", "docs/source/api-doc/adaptor", "docs/source/api-doc/adaptor/onnxrt", "docs/source/api-doc/adaptor/torch_utils", "docs/source/api-doc/api_doc_example", "docs/source/api-doc/apis", "docs/source/api-doc/benchmark", "docs/source/api-doc/compression", "docs/source/api-doc/config", "docs/source/api-doc/mix_precision", "docs/source/api-doc/model", "docs/source/api-doc/objective", "docs/source/api-doc/quantization", "docs/source/api-doc/strategy", "docs/source/api-doc/training", "docs/source/benchmark", "docs/source/calibration", "docs/source/dataloader", "docs/source/dataset", "docs/source/design", "docs/source/diagnosis", "docs/source/distillation", "docs/source/distillation_quantization", "docs/source/distributed", "docs/source/examples_readme", "docs/source/export", "docs/source/faq", "docs/source/framework_yaml", "docs/source/get_started", "docs/source/incompatible_changes", "docs/source/infrastructure", "docs/source/installation_guide", "docs/source/legal_information", "docs/source/metric", "docs/source/migration", "docs/source/mixed_precision", "docs/source/model", "docs/source/neural_coder/README", "docs/source/neural_coder/docs/AWSSageMakerSupport", "docs/source/neural_coder/docs/BigDLNanoSupport", "docs/source/neural_coder/docs/IntelCPU_PerformanceSetting", "docs/source/neural_coder/docs/PythonAPI", "docs/source/neural_coder/docs/PythonLauncher", "docs/source/neural_coder/docs/Quantization", "docs/source/neural_coder/docs/SupportMatrix", "docs/source/neural_coder/docs/release_notes/v0.4", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/DEVELOP", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/README", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/RELEASE", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/DEVELOP", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/RELEASE", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/README", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/vsc-extension-quickstart", "docs/source/objective", "docs/source/orchestration", "docs/source/pruning", "docs/source/publication_list", "docs/source/pythonic_style", "docs/source/quantization", "docs/source/quantization_mixed_precision", "docs/source/quantization_weight_only", "docs/source/releases_info", "docs/source/sigopt_strategy", "docs/source/smooth_quant", "docs/source/tensorboard", "docs/source/transform", "docs/source/tuning_strategies", "docs/source/user_guide", "docs/source/user_yaml", "docs/source/validated_model_list", "index"], "filenames": ["autoapi/block_mask/index.rst", "autoapi/neural_compressor/adaptor/adaptor/index.rst", "autoapi/neural_compressor/adaptor/index.rst", "autoapi/neural_compressor/adaptor/keras/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/conv2d/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/dense/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/depthwise_conv2d/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/pool2d/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/quantizer/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/separable_conv2d/index.rst", "autoapi/neural_compressor/adaptor/mxnet/index.rst", "autoapi/neural_compressor/adaptor/mxnet_utils/index.rst", "autoapi/neural_compressor/adaptor/mxnet_utils/util/index.rst", "autoapi/neural_compressor/adaptor/onnxrt/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/calibration/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/calibrator/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/activation/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/argmax/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/attention/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/binary_op/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/concat/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/conv/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/direct_q8/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/embed_layernorm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gather/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gavgpool/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gemm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/lstm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/matmul/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/maxpool/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/norm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/ops/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/pad/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/pooling/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/reduce/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/resize/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/split/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/unary_op/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/quantizer/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/smooth_quant/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/util/index.rst", "autoapi/neural_compressor/adaptor/pytorch/index.rst", "autoapi/neural_compressor/adaptor/query/index.rst", "autoapi/neural_compressor/adaptor/tensorflow/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter_without_calib/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/bf16_convert/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_add_to_biasadd/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_layout/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_leakyrelu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_nan_to_random/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_placeholder_to_const/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dequantize_cast_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dilated_contraction/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dummy_biasadd/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/expanddims_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fetch_weight_from_reshape/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_batch_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_constant/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_biasadd_add/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_column_wise_mul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_conv_with_math/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_in/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_gelu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_layer_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_reshape_transpose/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/graph_cse_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/grappler_pass/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/insert_print_node/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/move_squeeze_after_relu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/pre_optimize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/remove_training_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/rename_batch_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/split_shared_input/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_equivalent_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_unused_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/switch_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/graph_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_fake_quant/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value_without_calib/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_requantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_requantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/meta_op_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_hostconst_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_quantized_op_cse/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/rnn_convert/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/scale_propagation/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_node/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_schema/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/tf2onnx_utils/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/insert_qdq_pattern/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/merge_duplicated_qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/share_qdq_y_pattern/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_util/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/fake_quantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_config/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_helper/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/optimize_layer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_wrapper/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_concatv2/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_deconv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_in/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_matmul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_pooling/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/optimize_qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_concatv2/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_for_intel_cpu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_matmul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_pooling/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph_common/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_calibration/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_scaler/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/tf2onnx_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/bias_correction/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/graph_transform_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/insert_logging/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/rerange_quantized_concat/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/util/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/bf16_convert/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/gptq/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/hawq_metric/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/mixed_precision/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/model_wrapper/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/pattern_detector/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/smooth_quant/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/symbolic_trace/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/teq/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/util/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/weight_only/index.rst", "autoapi/neural_compressor/algorithm/algorithm/index.rst", "autoapi/neural_compressor/algorithm/fast_bias_correction/index.rst", "autoapi/neural_compressor/algorithm/index.rst", "autoapi/neural_compressor/algorithm/smooth_quant/index.rst", "autoapi/neural_compressor/algorithm/weight_correction/index.rst", "autoapi/neural_compressor/benchmark/index.rst", "autoapi/neural_compressor/compression/callbacks/index.rst", "autoapi/neural_compressor/compression/distillation/criterions/index.rst", "autoapi/neural_compressor/compression/distillation/index.rst", "autoapi/neural_compressor/compression/index.rst", "autoapi/neural_compressor/compression/pruner/criteria/index.rst", "autoapi/neural_compressor/compression/pruner/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/auto_slim/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/pattern_analyzer/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/weight_slim/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/base/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/mha/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/ninm/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/nxm/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/base/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/basic/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/block_mask/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/mha/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/pattern_lock/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/progressive/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/retrain_free/index.rst", "autoapi/neural_compressor/compression/pruner/regs/index.rst", "autoapi/neural_compressor/compression/pruner/schedulers/index.rst", "autoapi/neural_compressor/compression/pruner/tf_criteria/index.rst", "autoapi/neural_compressor/compression/pruner/utils/index.rst", "autoapi/neural_compressor/conf/config/index.rst", "autoapi/neural_compressor/conf/dotdict/index.rst", "autoapi/neural_compressor/conf/index.rst", "autoapi/neural_compressor/conf/pythonic_config/index.rst", "autoapi/neural_compressor/config/index.rst", "autoapi/neural_compressor/contrib/index.rst", "autoapi/neural_compressor/contrib/strategy/index.rst", "autoapi/neural_compressor/contrib/strategy/sigopt/index.rst", "autoapi/neural_compressor/contrib/strategy/tpe/index.rst", "autoapi/neural_compressor/data/dataloaders/base_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/default_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/fetcher/index.rst", "autoapi/neural_compressor/data/dataloaders/index.rst", "autoapi/neural_compressor/data/dataloaders/mxnet_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/onnxrt_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/pytorch_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/sampler/index.rst", "autoapi/neural_compressor/data/dataloaders/tensorflow_dataloader/index.rst", "autoapi/neural_compressor/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/data/datasets/index.rst", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/data/filters/filter/index.rst", "autoapi/neural_compressor/data/filters/index.rst", "autoapi/neural_compressor/data/index.rst", "autoapi/neural_compressor/data/transforms/coco_transform/index.rst", "autoapi/neural_compressor/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/data/transforms/index.rst", "autoapi/neural_compressor/data/transforms/postprocess/index.rst", "autoapi/neural_compressor/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/benchmark/index.rst", "autoapi/neural_compressor/experimental/common/criterion/index.rst", "autoapi/neural_compressor/experimental/common/dataloader/index.rst", "autoapi/neural_compressor/experimental/common/index.rst", "autoapi/neural_compressor/experimental/common/metric/index.rst", "autoapi/neural_compressor/experimental/common/model/index.rst", "autoapi/neural_compressor/experimental/common/optimizer/index.rst", "autoapi/neural_compressor/experimental/common/postprocess/index.rst", "autoapi/neural_compressor/experimental/common/torch_utils/index.rst", "autoapi/neural_compressor/experimental/component/index.rst", "autoapi/neural_compressor/experimental/compression/index.rst", "autoapi/neural_compressor/experimental/compression/pruning/index.rst", "autoapi/neural_compressor/experimental/contrib/index.rst", "autoapi/neural_compressor/experimental/contrib/strategy/index.rst", "autoapi/neural_compressor/experimental/contrib/strategy/sigopt/index.rst", "autoapi/neural_compressor/experimental/contrib/strategy/tpe/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/index.rst", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/index.rst", "autoapi/neural_compressor/experimental/data/index.rst", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/experimental/data/transforms/index.rst", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/experimental/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/distillation/index.rst", "autoapi/neural_compressor/experimental/export/index.rst", "autoapi/neural_compressor/experimental/export/qlinear2qdq/index.rst", "autoapi/neural_compressor/experimental/export/tf2onnx/index.rst", "autoapi/neural_compressor/experimental/export/torch2onnx/index.rst", "autoapi/neural_compressor/experimental/graph_optimization/index.rst", "autoapi/neural_compressor/experimental/index.rst", "autoapi/neural_compressor/experimental/metric/bleu/index.rst", "autoapi/neural_compressor/experimental/metric/bleu_util/index.rst", "autoapi/neural_compressor/experimental/metric/coco_label_map/index.rst", "autoapi/neural_compressor/experimental/metric/coco_tools/index.rst", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/experimental/metric/f1/index.rst", "autoapi/neural_compressor/experimental/metric/index.rst", "autoapi/neural_compressor/experimental/metric/metric/index.rst", "autoapi/neural_compressor/experimental/mixed_precision/index.rst", "autoapi/neural_compressor/experimental/model_conversion/index.rst", "autoapi/neural_compressor/experimental/nas/basic_nas/index.rst", "autoapi/neural_compressor/experimental/nas/dynas/index.rst", "autoapi/neural_compressor/experimental/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas_utils/index.rst", "autoapi/neural_compressor/experimental/nas/search_algorithms/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/gradient_sensitivity/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/group_lasso/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/magnitude/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/pattern_lock/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/pruner/index.rst", "autoapi/neural_compressor/experimental/pruning/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_v2/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index.rst", "autoapi/neural_compressor/experimental/quantization/index.rst", "autoapi/neural_compressor/experimental/scheduler/index.rst", "autoapi/neural_compressor/experimental/strategy/auto_mixed_precision/index.rst", "autoapi/neural_compressor/experimental/strategy/basic/index.rst", "autoapi/neural_compressor/experimental/strategy/bayesian/index.rst", "autoapi/neural_compressor/experimental/strategy/exhaustive/index.rst", "autoapi/neural_compressor/experimental/strategy/index.rst", "autoapi/neural_compressor/experimental/strategy/mse/index.rst", "autoapi/neural_compressor/experimental/strategy/mse_v2/index.rst", "autoapi/neural_compressor/experimental/strategy/random/index.rst", "autoapi/neural_compressor/experimental/strategy/strategy/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/constant/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/tuning_sampler/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/tuning_space/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/tuning_structs/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/utility/index.rst", "autoapi/neural_compressor/index.rst", "autoapi/neural_compressor/metric/bleu/index.rst", "autoapi/neural_compressor/metric/bleu_util/index.rst", "autoapi/neural_compressor/metric/coco_label_map/index.rst", "autoapi/neural_compressor/metric/coco_tools/index.rst", "autoapi/neural_compressor/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/metric/f1/index.rst", "autoapi/neural_compressor/metric/index.rst", "autoapi/neural_compressor/metric/metric/index.rst", "autoapi/neural_compressor/mix_precision/index.rst", "autoapi/neural_compressor/model/base_model/index.rst", "autoapi/neural_compressor/model/index.rst", "autoapi/neural_compressor/model/keras_model/index.rst", "autoapi/neural_compressor/model/model/index.rst", "autoapi/neural_compressor/model/mxnet_model/index.rst", "autoapi/neural_compressor/model/nets_factory/index.rst", "autoapi/neural_compressor/model/onnx_model/index.rst", "autoapi/neural_compressor/model/tensorflow_model/index.rst", "autoapi/neural_compressor/model/torch_model/index.rst", "autoapi/neural_compressor/objective/index.rst", "autoapi/neural_compressor/profiling/index.rst", "autoapi/neural_compressor/profiling/parser/factory/index.rst", "autoapi/neural_compressor/profiling/parser/index.rst", "autoapi/neural_compressor/profiling/parser/onnx_parser/factory/index.rst", "autoapi/neural_compressor/profiling/parser/onnx_parser/index.rst", "autoapi/neural_compressor/profiling/parser/onnx_parser/parser/index.rst", "autoapi/neural_compressor/profiling/parser/parser/index.rst", "autoapi/neural_compressor/profiling/parser/result/index.rst", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/factory/index.rst", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/index.rst", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/parser/index.rst", "autoapi/neural_compressor/profiling/profiler/factory/index.rst", "autoapi/neural_compressor/profiling/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/factory/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/utils/index.rst", "autoapi/neural_compressor/profiling/profiler/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/factory/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/utils/index.rst", "autoapi/neural_compressor/quantization/index.rst", "autoapi/neural_compressor/strategy/auto/index.rst", "autoapi/neural_compressor/strategy/auto_mixed_precision/index.rst", "autoapi/neural_compressor/strategy/basic/index.rst", "autoapi/neural_compressor/strategy/bayesian/index.rst", "autoapi/neural_compressor/strategy/conservative/index.rst", "autoapi/neural_compressor/strategy/exhaustive/index.rst", "autoapi/neural_compressor/strategy/hawq_v2/index.rst", "autoapi/neural_compressor/strategy/index.rst", "autoapi/neural_compressor/strategy/mse/index.rst", "autoapi/neural_compressor/strategy/mse_v2/index.rst", "autoapi/neural_compressor/strategy/random/index.rst", "autoapi/neural_compressor/strategy/strategy/index.rst", "autoapi/neural_compressor/strategy/utils/constant/index.rst", "autoapi/neural_compressor/strategy/utils/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_space/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_structs/index.rst", "autoapi/neural_compressor/strategy/utils/utility/index.rst", "autoapi/neural_compressor/template/api_doc_example/index.rst", "autoapi/neural_compressor/template/index.rst", "autoapi/neural_compressor/training/index.rst", "autoapi/neural_compressor/utils/collect_layer_histogram/index.rst", "autoapi/neural_compressor/utils/constant/index.rst", "autoapi/neural_compressor/utils/create_obj_from_config/index.rst", "autoapi/neural_compressor/utils/index.rst", "autoapi/neural_compressor/utils/kl_divergence/index.rst", "autoapi/neural_compressor/utils/load_huggingface/index.rst", "autoapi/neural_compressor/utils/logger/index.rst", "autoapi/neural_compressor/utils/neural_insights_utils/index.rst", "autoapi/neural_compressor/utils/options/index.rst", "autoapi/neural_compressor/utils/pytorch/index.rst", "autoapi/neural_compressor/utils/utility/index.rst", "autoapi/neural_compressor/utils/weights_details/index.rst", "autoapi/neural_compressor/version/index.rst", "docs/build_docs/source/index.rst", "docs/source/CODE_OF_CONDUCT.md", "docs/source/CONTRIBUTING.md", "docs/source/FX.md", "docs/source/NAS.md", "docs/source/SECURITY.md", "docs/source/Welcome.md", "docs/source/adaptor.md", "docs/source/add_new_adaptor.md", "docs/source/add_new_data_type.md", "docs/source/api-doc/adaptor.rst", "docs/source/api-doc/adaptor/onnxrt.rst", "docs/source/api-doc/adaptor/torch_utils.rst", "docs/source/api-doc/api_doc_example.rst", "docs/source/api-doc/apis.rst", "docs/source/api-doc/benchmark.rst", "docs/source/api-doc/compression.rst", "docs/source/api-doc/config.rst", "docs/source/api-doc/mix_precision.rst", "docs/source/api-doc/model.rst", "docs/source/api-doc/objective.rst", "docs/source/api-doc/quantization.rst", "docs/source/api-doc/strategy.rst", "docs/source/api-doc/training.rst", "docs/source/benchmark.md", "docs/source/calibration.md", "docs/source/dataloader.md", "docs/source/dataset.md", "docs/source/design.md", "docs/source/diagnosis.md", "docs/source/distillation.md", "docs/source/distillation_quantization.md", "docs/source/distributed.md", "docs/source/examples_readme.md", "docs/source/export.md", "docs/source/faq.md", "docs/source/framework_yaml.md", "docs/source/get_started.md", "docs/source/incompatible_changes.md", "docs/source/infrastructure.md", "docs/source/installation_guide.md", "docs/source/legal_information.md", "docs/source/metric.md", "docs/source/migration.md", "docs/source/mixed_precision.md", "docs/source/model.md", "docs/source/neural_coder/README.md", "docs/source/neural_coder/docs/AWSSageMakerSupport.md", "docs/source/neural_coder/docs/BigDLNanoSupport.md", "docs/source/neural_coder/docs/IntelCPU_PerformanceSetting.md", "docs/source/neural_coder/docs/PythonAPI.md", "docs/source/neural_coder/docs/PythonLauncher.md", "docs/source/neural_coder/docs/Quantization.md", "docs/source/neural_coder/docs/SupportMatrix.md", "docs/source/neural_coder/docs/release_notes/v0.4.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/DEVELOP.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/README.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/RELEASE.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/DEVELOP.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/RELEASE.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/README.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/vsc-extension-quickstart.md", "docs/source/objective.md", "docs/source/orchestration.md", "docs/source/pruning.md", "docs/source/publication_list.md", "docs/source/pythonic_style.md", "docs/source/quantization.md", "docs/source/quantization_mixed_precision.md", "docs/source/quantization_weight_only.md", "docs/source/releases_info.md", "docs/source/sigopt_strategy.md", "docs/source/smooth_quant.md", "docs/source/tensorboard.md", "docs/source/transform.md", "docs/source/tuning_strategies.md", "docs/source/user_guide.md", "docs/source/user_yaml.md", "docs/source/validated_model_list.md", "index.rst"], "titles": ["<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">block_mask</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.adaptor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.dense</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.depthwise_conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.pool2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.separable_conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.onnxrt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.calibration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.calibrator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.activation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.argmax</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.attention</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.binary_op</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.concat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.direct_q8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.embed_layernorm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gather</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gavgpool</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gemm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.lstm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.maxpool</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.ops</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.pad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.reduce</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.resize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.split</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.unary_op</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.smooth_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.query</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tensorflow</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_converter_without_calib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph_common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.smooth_quant_calibration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.smooth_quant_scaler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.tf2onnx_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.bias_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.insert_logging</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.bf16_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.gptq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.hawq_metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.model_wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.pattern_detector</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.smooth_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.symbolic_trace</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.teq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.weight_only</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.algorithm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.fast_bias_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.smooth_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.weight_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.callbacks</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.distillation.criterions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.distillation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.criteria</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim.auto_slim</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim.pattern_analyzer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim.weight_slim</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.patterns.base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.patterns.mha</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.patterns.ninm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.patterns.nxm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.basic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.block_mask</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.mha</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.pattern_lock</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.progressive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners.retrain_free</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.regs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.schedulers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.tf_criteria</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.dotdict</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.pythonic_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy.sigopt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy.tpe</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.base_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.default_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.fetcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.mxnet_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.onnxrt_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.pytorch_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.tensorflow_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.bert_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.coco_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dummy_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dummy_dataset_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.imagenet_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.style_transfer_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters.coco_filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters.filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.coco_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.imagenet_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.postprocess</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.tokenization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.criterion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.postprocess</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.torch_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.component</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.compression</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.compression.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib.strategy.sigopt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib.strategy.tpe</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.base_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.default_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.fetcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.mxnet_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.onnxrt_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.pytorch_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.tensorflow_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.bert_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.coco_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dummy_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dummy_dataset_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.imagenet_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.style_transfer_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters.coco_filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters.filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.imagenet_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.tokenization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.distillation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.qlinear2qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.tf2onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.torch2onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.graph_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.bleu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.bleu_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.coco_label_map</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.coco_tools</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.evaluate_squad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.f1</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.model_conversion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.basic_nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.nas_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.search_algorithms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.gradient_sensitivity</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.group_lasso</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.magnitude</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.pattern_lock</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns.pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns.tile_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.prune_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.scheduler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.scheduler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.auto_mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.basic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.bayesian</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.exhaustive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.mse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.mse_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.tuning_sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.tuning_space</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.tuning_structs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.bleu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.bleu_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.coco_label_map</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.coco_tools</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.evaluate_squad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.f1</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.mix_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.base_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.keras_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.mxnet_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.nets_factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.onnx_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.tensorflow_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.torch_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.objective</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.onnx_parser.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.onnx_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.onnx_parser.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.result</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.tensorflow_parser.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.tensorflow_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.tensorflow_parser.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.onnxrt_profiler.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.onnxrt_profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.onnxrt_profiler.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.onnxrt_profiler.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.tensorflow_profiler.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.tensorflow_profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.tensorflow_profiler.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.tensorflow_profiler.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.auto</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.auto_mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.basic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.bayesian</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.conservative</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.exhaustive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.hawq_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.mse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.mse_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_space</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_structs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.template.api_doc_example</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.template</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.training</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.collect_layer_histogram</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.create_obj_from_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.kl_divergence</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.load_huggingface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.neural_insights_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.options</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.weights_details</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.version</span></code>", "Intel\u00ae Neural Compressor Documentation", "Contributor Covenant Code of Conduct", "Contribution Guidelines", "FX", "Neural Architecture Search", "Security Policy", "Intel\u00ae Neural Compressor", "Adaptor", "How to Add An Adaptor", "How to Support New Data Type, Like Int4, with a Few Line Changes", "Adaptor", "ONNX Runtime", "Torch Utils", "API Document Example", "APIs", "Benchmark", "Compression", "Config", "Mix Precision", "Model", "Objective", "Quantization", "Strategy", "Training", "Benchmarking", "Calibration Algorithms in Quantization", "DataLoader", "Dataset", "Design", "Diagnosis", "Distillation", "Distillation for Quantization", "Distributed Training and Inference (Evaluation)", "Examples", "Export", "Frequently Asked Questions", "Framework YAML Configuration Files", "Getting Started", "Incompatible changes between v1.2 and v1.1", "Infrastructure of Intel\u00ae Neural Compressor", "Installation", "Legal Information", "Metrics", "Code Migration from Intel Neural Compressor 1.X to Intel Neural Compressor 2.X", "Mixed Precision", "Model", "Neural Coder", "AWS Amazon SageMaker Support", "BigDL Nano Support", "Intel CPU Platforms: Best Performance Setting", "Neural Coder as Python API", "Python Launcher", "Neural Coder for Quantization", "Supported Optimization Features", "v0.4", "Changelog", "neural_compressor_ext_lab", "Intel\u00ae Neural Compressor as JupyterLab Extension", "Making a new release of neural_compressor_ext_lab", "Changelog", "neural_compressor_ext_lab_alibaba", "Making a new release of neural_compressor_ext_lab_alibaba", "Change Log", "Neural Coder", "Welcome to your VS Code Extension", "Objective", "Optimization Orchestration", "Pruning", "Full Publications/Events (70)", "Pythonic Style Access for Configurations", "Quantization", "Turn OFF Auto Mixed Precision during Quantization", "Weight Only Quantization", "Release", "SigOpt Strategy", "Smooth Quant", "TensorBoard", "Transform", "Tuning Strategies", "User Guide", "User YAML Configuration Files", "Validated Models", "Intel\u00ae Neural Compressor Documentation"], "terms": {"block": [0, 154, 159, 170, 180, 183, 188, 192, 309, 350, 392, 447, 473, 475, 480, 483, 486], "mask": [0, 176, 178, 181, 183, 187, 188, 212, 256, 282, 311, 335, 475, 489], "adaptor_registri": [1, 415], "cl": [1, 160, 167, 176, 181, 189, 190, 214, 221, 229, 231, 236, 258, 265, 271, 293, 300, 304, 309, 311, 313, 324, 339, 350, 385, 405], "sourc": [1, 3, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 108, 109, 112, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 170, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 244, 245, 246, 248, 249, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 268, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 282, 283, 284, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 298, 299, 300, 301, 304, 305, 306, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 327, 328, 329, 330, 331, 332, 333, 335, 336, 337, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 352, 354, 356, 357, 358, 359, 361, 362, 364, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 385, 388, 389, 390, 391, 392, 394, 395, 397, 399, 400, 401, 402, 403, 404, 405, 406, 407, 411, 414, 449, 451, 464, 466, 468, 469, 471, 476], "The": [1, 3, 11, 14, 16, 34, 52, 73, 112, 118, 120, 139, 147, 152, 158, 160, 165, 166, 167, 170, 174, 176, 178, 179, 181, 182, 183, 188, 189, 190, 191, 192, 193, 194, 196, 197, 200, 201, 202, 212, 213, 214, 215, 216, 220, 221, 229, 231, 234, 236, 239, 241, 244, 245, 246, 256, 257, 258, 259, 260, 264, 265, 271, 272, 277, 279, 280, 281, 283, 284, 286, 288, 289, 290, 292, 293, 295, 296, 298, 299, 300, 301, 304, 306, 309, 310, 311, 312, 313, 314, 316, 317, 318, 319, 321, 322, 323, 324, 328, 330, 332, 333, 334, 336, 337, 339, 340, 348, 350, 373, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 385, 389, 391, 392, 394, 395, 397, 399, 400, 404, 405, 406, 409, 411, 412, 415, 416, 417, 418, 420, 424, 427, 430, 432, 433, 434, 435, 437, 438, 440, 442, 444, 446, 447, 448, 450, 451, 452, 453, 456, 457, 459, 462, 464, 465, 466, 468, 469, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489], "decor": [1, 16, 34, 66, 67, 69, 147, 160, 176, 181, 190, 229, 236, 271, 286, 293, 300, 304, 309, 311, 313, 324, 327, 339, 350, 385, 388, 405, 411, 412, 415, 486], "us": [1, 13, 16, 34, 42, 43, 47, 48, 69, 102, 104, 115, 140, 150, 152, 158, 159, 165, 167, 170, 174, 176, 181, 185, 186, 190, 191, 194, 196, 197, 200, 201, 210, 211, 212, 213, 214, 215, 216, 219, 228, 229, 230, 231, 236, 244, 245, 254, 255, 256, 257, 258, 259, 260, 263, 270, 271, 275, 276, 277, 279, 280, 282, 286, 287, 288, 293, 300, 301, 304, 306, 309, 311, 312, 313, 314, 315, 318, 321, 324, 327, 328, 332, 333, 335, 339, 350, 367, 372, 373, 377, 380, 382, 385, 388, 389, 391, 392, 395, 396, 397, 398, 405, 409, 410, 411, 412, 415, 416, 432, 433, 435, 437, 438, 439, 440, 442, 444, 446, 448, 449, 451, 452, 453, 454, 455, 456, 458, 459, 462, 464, 466, 468, 469, 471, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 488, 489], "regist": [1, 16, 34, 160, 167, 170, 176, 177, 181, 184, 189, 190, 191, 214, 221, 229, 231, 236, 258, 265, 271, 286, 293, 300, 304, 309, 311, 313, 324, 327, 339, 350, 385, 388, 402, 412, 415, 435, 440, 450, 451, 472, 473, 483, 486], "all": [1, 13, 16, 34, 44, 62, 96, 149, 158, 159, 160, 162, 165, 166, 176, 184, 192, 196, 197, 202, 203, 210, 214, 221, 229, 230, 236, 239, 241, 246, 254, 258, 265, 271, 276, 279, 282, 284, 286, 293, 300, 304, 305, 309, 315, 324, 327, 332, 335, 337, 339, 341, 350, 385, 388, 391, 397, 405, 409, 414, 415, 416, 417, 434, 435, 440, 444, 448, 451, 454, 462, 465, 466, 469, 470, 471, 472, 474, 475, 476, 478, 479, 483, 485, 486], "subclass": [1, 16, 34, 160, 176, 181, 190, 207, 211, 214, 221, 229, 236, 251, 255, 258, 265, 271, 286, 293, 300, 304, 309, 311, 313, 324, 327, 339, 350, 385, 388, 415], "paramet": [1, 11, 13, 14, 16, 42, 43, 44, 66, 67, 69, 85, 104, 115, 131, 139, 140, 147, 148, 149, 150, 155, 156, 158, 159, 160, 165, 166, 167, 170, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 200, 201, 211, 212, 214, 221, 225, 229, 231, 236, 241, 244, 245, 255, 256, 258, 265, 268, 271, 272, 274, 275, 276, 277, 279, 280, 282, 283, 284, 286, 288, 289, 290, 292, 293, 294, 295, 296, 298, 299, 300, 301, 304, 306, 309, 310, 311, 312, 313, 314, 318, 324, 328, 330, 332, 333, 335, 336, 337, 339, 340, 344, 348, 350, 367, 372, 373, 377, 385, 389, 391, 392, 394, 397, 401, 402, 404, 405, 411, 416, 434, 435, 438, 440, 447, 450, 451, 465, 471, 472, 475, 478, 480, 482, 483, 485, 486, 488], "framework_specific_info": [1, 3, 11, 14, 44, 46, 415], "base": [1, 3, 11, 13, 14, 16, 34, 45, 46, 85, 104, 115, 119, 121, 131, 143, 150, 154, 158, 160, 166, 169, 170, 171, 177, 184, 189, 191, 197, 202, 205, 210, 212, 214, 221, 229, 239, 246, 249, 254, 256, 258, 265, 271, 286, 292, 294, 300, 301, 304, 306, 311, 321, 324, 328, 339, 341, 348, 349, 350, 382, 385, 389, 412, 414, 415, 416, 417, 435, 439, 440, 444, 451, 452, 459, 460, 462, 471, 475, 478, 480, 482, 484, 486, 489], "framework": [1, 3, 11, 13, 14, 44, 165, 167, 177, 181, 184, 188, 198, 199, 203, 204, 208, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 223, 226, 229, 231, 232, 236, 242, 243, 247, 248, 250, 252, 255, 256, 257, 258, 259, 260, 261, 262, 263, 265, 267, 269, 271, 277, 286, 287, 314, 322, 328, 339, 340, 341, 342, 344, 383, 389, 397, 414, 415, 417, 433, 437, 440, 441, 445, 446, 447, 448, 450, 451, 452, 475, 476, 478, 481, 484, 485, 486, 487, 488, 489], "layer": [1, 3, 11, 14, 45, 46, 115, 116, 117, 118, 120, 121, 149, 155, 159, 163, 167, 172, 174, 175, 176, 180, 185, 192, 196, 197, 231, 238, 309, 310, 395, 397, 405, 415, 416, 417, 439, 447, 475, 481], "mxnet_util": 2, "util": [2, 12, 17, 104, 109, 110, 138, 141, 148, 150, 151, 156, 169, 171, 196, 197, 238, 278, 280, 310, 320, 331, 333, 365, 370, 381, 416, 417, 418, 433, 440, 451, 454, 478, 486, 487], "ox_util": 2, "oper": [2, 17, 43, 103, 109, 139, 147, 174, 175, 180, 196, 197, 225, 268, 309, 367, 372, 411, 432, 434, 437, 442, 471, 478, 480, 483, 485, 486], "activ": [2, 17, 29, 140, 158, 159, 196, 197, 238, 328, 389, 391, 415, 416, 417, 433, 437, 439, 444, 451, 472, 477, 478, 480, 483, 484, 488], "argmax": [2, 17, 29], "attent": [2, 17, 29, 154, 172, 174, 185, 196, 197, 212, 256, 409, 438, 475], "binary_op": [2, 17, 29], "concat": [2, 17, 29, 146], "conv": [2, 17, 29, 57, 61, 65, 70, 71, 72, 91, 108, 163, 196, 197, 411, 416, 417, 451, 475, 477, 478, 486], "direct_q8": [2, 17, 29], "embed_layernorm": [2, 17, 29], "gather": [2, 13, 17, 29, 196, 197, 309], "gavgpool": [2, 17, 29], "gemm": [2, 17, 29, 196, 197], "lstm": [2, 17, 29], "matmul": [2, 17, 29, 51, 58, 64, 72, 93, 108, 127, 136, 180, 196, 197, 309, 444, 486], "maxpool": [2, 17, 29, 128, 137, 444], "norm": [2, 17, 29], "op": [2, 13, 17, 29, 44, 51, 56, 64, 65, 66, 67, 68, 69, 70, 71, 73, 77, 80, 84, 87, 90, 91, 92, 93, 95, 104, 106, 108, 122, 123, 124, 130, 132, 133, 134, 135, 140, 142, 145, 147, 148, 150, 156, 158, 163, 174, 196, 197, 276, 321, 328, 329, 367, 372, 378, 380, 382, 389, 390, 391, 399, 405, 415, 416, 417, 437, 444, 451, 452, 475, 478, 479, 481, 483, 484, 486, 488], "pad": [2, 17, 29, 70, 71, 212, 229, 256, 271, 435, 485], "pool": [2, 17, 29], "reduc": [2, 17, 29, 196, 197, 415, 433, 439, 451, 452, 471, 472, 475, 476, 478, 479, 480, 483, 486, 488], "resiz": [2, 17, 29, 212, 213, 225, 229, 256, 257, 268, 271, 435, 485], "split": [2, 17, 29, 43, 81, 159, 228, 229, 270, 271, 411, 480, 483, 485], "unary_op": [2, 17, 29], "calibr": [2, 11, 13, 14, 17, 48, 88, 89, 139, 158, 159, 165, 196, 197, 200, 201, 244, 245, 277, 314, 373, 399, 415, 417, 435, 446, 447, 478, 486, 487, 488], "quantiz": [2, 11, 13, 14, 16, 17, 42, 43, 47, 48, 87, 91, 93, 95, 98, 106, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 148, 149, 150, 152, 153, 155, 157, 158, 159, 163, 165, 166, 196, 197, 200, 201, 225, 232, 239, 244, 245, 268, 276, 277, 278, 288, 315, 321, 327, 331, 378, 380, 382, 391, 394, 395, 399, 404, 405, 415, 422, 434, 435, 440, 441, 444, 446, 447, 450, 453, 454, 459, 461, 462, 465, 474, 476, 481, 484, 485, 486, 487, 488], "smooth_quant": [2, 17, 162, 196, 197, 331, 478, 483], "tf_util": 2, "graph_rewrit": [2, 110], "bf16": [2, 56, 86, 110, 148, 196, 197, 328, 389, 415, 416, 444, 451, 456, 461, 465, 471, 479, 486, 489], "gener": [2, 13, 47, 48, 86, 110, 121, 147, 149, 158, 165, 174, 192, 200, 201, 202, 211, 214, 215, 216, 217, 229, 244, 245, 246, 255, 258, 259, 260, 261, 271, 279, 287, 318, 332, 340, 368, 373, 377, 392, 394, 411, 415, 417, 434, 438, 450, 451, 452, 454, 459, 464, 466, 468, 469, 471, 473, 475, 476, 478, 479, 480, 483, 484, 485, 486], "int8": [2, 18, 19, 43, 86, 110, 122, 123, 124, 130, 132, 133, 134, 135, 142, 147, 159, 164, 165, 196, 197, 225, 268, 274, 275, 276, 328, 330, 389, 391, 404, 405, 411, 414, 415, 416, 417, 432, 435, 439, 444, 451, 452, 456, 459, 461, 462, 465, 471, 476, 477, 478, 479, 481, 482, 483, 484, 485, 488], "onnx": [2, 14, 15, 16, 29, 41, 43, 86, 110, 141, 163, 196, 197, 208, 252, 274, 275, 276, 340, 347, 367, 403, 414, 415, 416, 418, 434, 437, 441, 442, 444, 445, 447, 452, 453, 456, 461, 462, 476, 477, 480, 481, 483, 486], "qdq": [2, 42, 86, 110, 111, 112, 141, 158, 159, 196, 197, 274, 275, 276, 415, 437, 442, 447, 461, 462, 478, 481, 483], "graph_bas": [2, 86, 110], "quantize_graph": [2, 110], "qat": [2, 110, 111, 156, 197, 288, 348, 439, 440, 447, 451, 478], "quantize_graph_bas": [2, 110, 111], "quantize_graph_bn": [2, 110, 111], "quantize_graph_concatv2": [2, 110, 111], "quantize_graph_conv": [2, 110, 111], "quantize_graph_for_intel_cpu": [2, 110, 111], "quantize_graph_matmul": [2, 110, 111], "quantize_graph_pool": [2, 110, 111], "transform_graph": [2, 110], "bias_correct": [2, 110, 144], "graph_transform_bas": [2, 110, 144], "insert_log": [2, 110, 144], "rerange_quantized_concat": [2, 110, 144], "graph_convert": [2, 110], "graph_converter_without_calib": [2, 110], "graph_util": [2, 110], "quantize_graph_common": [2, 110], "smooth_quant_calibr": [2, 110], "smooth_quant_scal": [2, 110], "tf2onnx_convert": [2, 110], "torch_util": [2, 233, 278, 331, 483], "bf16_convert": [2, 50, 86, 110, 151], "hawq_metr": [2, 151], "model_wrapp": [2, 15, 151], "pattern_detector": [2, 151], "symbolic_trac": [2, 151], "tensorflow": [2, 50, 52, 74, 75, 76, 86, 94, 100, 101, 102, 103, 104, 105, 109, 110, 111, 113, 116, 129, 139, 140, 141, 144, 147, 191, 196, 197, 211, 212, 213, 214, 217, 219, 221, 229, 231, 236, 255, 256, 257, 258, 261, 263, 265, 271, 275, 276, 277, 280, 282, 286, 287, 288, 314, 322, 333, 335, 339, 340, 348, 366, 367, 371, 372, 373, 383, 405, 412, 414, 415, 416, 433, 434, 437, 438, 439, 441, 444, 445, 447, 448, 451, 452, 453, 461, 462, 475, 476, 477, 482, 483, 486, 488], "kerasadaptor": 3, "kerasqueri": 3, "local_config_fil": [3, 11, 14, 46], "none": [3, 13, 14, 41, 43, 44, 46, 47, 48, 62, 88, 101, 103, 104, 109, 115, 141, 147, 149, 150, 152, 153, 155, 157, 158, 159, 165, 166, 167, 172, 174, 178, 192, 193, 194, 196, 197, 200, 201, 202, 204, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 225, 229, 230, 231, 232, 239, 241, 244, 245, 246, 248, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 263, 268, 271, 272, 275, 276, 277, 282, 286, 287, 288, 289, 292, 301, 306, 310, 314, 318, 321, 323, 324, 328, 335, 339, 340, 350, 366, 371, 372, 373, 374, 377, 378, 382, 384, 385, 389, 392, 394, 395, 397, 402, 404, 405, 415, 416, 434, 435, 450, 478, 484, 485, 486], "defin": [3, 11, 14, 45, 85, 150, 153, 174, 176, 181, 182, 183, 188, 189, 190, 196, 197, 200, 201, 244, 245, 289, 290, 292, 293, 294, 301, 306, 309, 310, 311, 313, 340, 373, 394, 404, 409, 412, 415, 416, 434, 435, 438, 439, 444, 447, 450, 451, 472, 474, 475, 478, 482, 483, 484, 486, 488], "queri": [3, 11, 13, 14, 46, 147, 158, 174, 185, 196, 197, 416, 417, 478], "interfac": [3, 11, 14, 45, 85, 112, 193, 277, 301, 306, 314, 315, 397, 447, 451, 462, 478, 481], "each": [3, 11, 14, 45, 140, 147, 150, 196, 197, 210, 214, 217, 225, 229, 254, 258, 261, 268, 271, 280, 282, 283, 284, 321, 333, 335, 336, 337, 382, 405, 410, 415, 416, 417, 435, 437, 438, 439, 444, 451, 456, 462, 465, 471, 473, 475, 482, 483, 484, 485, 486, 487], "adapt": [3, 11, 14, 45, 409, 414, 416, 435, 462, 476], "should": [3, 11, 14, 45, 53, 114, 115, 166, 172, 174, 185, 196, 197, 200, 201, 210, 212, 214, 229, 234, 244, 245, 254, 256, 258, 271, 276, 280, 333, 339, 340, 373, 392, 394, 405, 411, 412, 415, 416, 417, 435, 438, 440, 450, 451, 457, 466, 469, 471, 473, 475, 478, 485, 486, 488], "implement": [3, 11, 14, 45, 109, 142, 146, 200, 201, 207, 210, 211, 212, 214, 244, 245, 251, 254, 255, 256, 258, 279, 332, 340, 350, 373, 380, 394, 417, 434, 435, 450, 451, 462, 472, 475, 478, 481, 484, 486, 488], "inherit": [3, 11, 14, 45, 166, 167, 186, 187, 190, 196, 209, 229, 231, 239, 253, 271, 311, 313, 412, 415, 416, 435], "specif": [3, 11, 14, 42, 45, 103, 115, 159, 165, 192, 196, 197, 212, 213, 214, 215, 219, 221, 236, 256, 257, 258, 259, 263, 265, 288, 295, 296, 298, 299, 300, 339, 373, 402, 409, 412, 415, 416, 433, 434, 437, 438, 444, 446, 450, 451, 452, 453, 454, 458, 459, 461, 465, 471, 473, 475, 477, 486, 488], "backend": [3, 11, 14, 15, 41, 42, 45, 163, 196, 197, 198, 199, 203, 204, 208, 212, 213, 215, 216, 217, 218, 219, 223, 226, 229, 235, 236, 242, 243, 247, 248, 250, 252, 256, 257, 259, 260, 261, 262, 263, 267, 269, 271, 287, 322, 340, 341, 342, 344, 383, 411, 417, 437, 440, 446, 447, 451, 452, 460, 477, 485, 488], "own": [3, 11, 14, 45, 73, 210, 229, 254, 271, 350, 412, 416, 434, 435, 447, 450, 473, 480, 482, 487], "mxnetadaptor": 11, "do": [11, 14, 149, 166, 196, 197, 211, 212, 255, 256, 272, 276, 279, 282, 312, 332, 335, 404, 409, 416, 435, 440, 444, 447, 450, 451, 466, 469, 475, 479, 481, 483, 486], "inspect": [11, 14, 481, 484], "tensor": [11, 13, 14, 15, 16, 43, 69, 104, 147, 150, 158, 159, 170, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 197, 229, 271, 274, 276, 309, 311, 321, 348, 382, 405, 411, 417, 434, 435, 437, 475, 478, 481, 484, 485, 486], "dict": [11, 13, 14, 44, 115, 147, 148, 149, 150, 158, 159, 160, 165, 170, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 196, 197, 200, 201, 211, 230, 236, 244, 245, 255, 274, 276, 281, 282, 283, 284, 286, 289, 292, 293, 294, 301, 304, 306, 309, 310, 311, 312, 313, 318, 321, 327, 330, 334, 335, 336, 337, 339, 340, 348, 373, 388, 391, 392, 394, 395, 397, 404, 405, 411, 416, 442, 450, 475, 477, 478, 483, 484, 486], "configur": [11, 13, 14, 44, 117, 148, 158, 165, 192, 193, 196, 197, 200, 201, 203, 214, 217, 230, 235, 244, 245, 258, 261, 272, 276, 277, 288, 289, 290, 292, 301, 306, 310, 314, 315, 321, 339, 340, 350, 373, 382, 391, 394, 396, 397, 403, 404, 411, 412, 415, 416, 435, 437, 451, 458, 472, 473, 475, 478, 481, 485, 486, 489], "mxnetqueri": 11, "mxnet": [12, 13, 16, 197, 207, 211, 214, 217, 221, 229, 251, 255, 258, 261, 265, 271, 277, 286, 314, 339, 340, 345, 373, 414, 415, 416, 433, 434, 441, 444, 447, 448, 451, 452, 453, 477, 486, 488], "init": [12, 17, 42, 162, 168, 171, 173, 435, 450, 486], "optyp": [13, 196, 197, 274, 416], "enum": 13, "type": [13, 16, 42, 43, 44, 73, 95, 104, 115, 121, 131, 139, 147, 148, 149, 150, 158, 159, 160, 167, 174, 175, 176, 181, 189, 190, 192, 194, 196, 197, 210, 212, 214, 221, 229, 231, 236, 254, 256, 258, 265, 271, 276, 279, 280, 282, 286, 293, 300, 304, 309, 311, 313, 318, 324, 328, 330, 332, 333, 335, 339, 348, 350, 377, 378, 385, 389, 391, 392, 404, 405, 410, 415, 416, 435, 437, 440, 442, 444, 447, 451, 452, 472, 478, 482, 485, 486, 487, 488], "isiter": 13, "obj": [13, 104, 192, 211, 241, 255, 272, 277, 288, 289, 290, 292, 301, 306, 310, 314, 340, 350, 373, 394, 397, 405], "bool": [13, 42, 140, 147, 149, 156, 158, 159, 176, 196, 197, 212, 214, 225, 229, 256, 258, 268, 271, 276, 280, 286, 309, 327, 333, 339, 388, 392, 404, 405, 434, 435, 450, 477, 485], "check": [13, 66, 67, 104, 147, 158, 159, 192, 203, 214, 258, 274, 310, 404, 405, 410, 414, 437, 440, 448, 455, 457, 459, 466, 469, 470, 481], "whether": [13, 104, 115, 147, 149, 159, 176, 196, 197, 210, 212, 225, 229, 254, 256, 268, 271, 280, 282, 286, 309, 333, 335, 339, 397, 404, 405, 415, 435, 450, 478, 480, 483, 485], "object": [13, 42, 43, 44, 73, 85, 104, 115, 131, 148, 150, 156, 158, 165, 166, 170, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 200, 201, 202, 212, 213, 214, 229, 230, 232, 241, 244, 245, 246, 256, 257, 258, 271, 272, 277, 282, 290, 292, 295, 296, 298, 299, 300, 301, 306, 309, 310, 311, 312, 313, 314, 318, 331, 335, 339, 340, 348, 349, 367, 372, 373, 377, 391, 394, 397, 404, 405, 411, 412, 416, 422, 432, 434, 435, 443, 450, 451, 453, 474, 475, 477, 478, 485, 486, 487, 489], "i": [13, 43, 44, 47, 48, 52, 53, 56, 59, 63, 69, 81, 84, 104, 131, 142, 147, 149, 150, 152, 156, 158, 164, 165, 166, 170, 174, 175, 181, 186, 187, 188, 189, 191, 192, 196, 197, 200, 201, 202, 210, 211, 212, 213, 214, 215, 216, 219, 221, 225, 229, 230, 232, 236, 238, 239, 244, 245, 246, 254, 255, 256, 257, 258, 259, 260, 263, 265, 268, 271, 279, 282, 284, 286, 288, 293, 301, 306, 310, 311, 315, 322, 332, 335, 337, 339, 340, 350, 356, 357, 361, 373, 378, 383, 391, 392, 394, 404, 405, 409, 410, 411, 412, 415, 416, 417, 418, 420, 424, 427, 430, 432, 433, 434, 435, 437, 438, 439, 440, 442, 443, 444, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 462, 464, 465, 466, 468, 469, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 488, 489], "iter": [13, 15, 104, 139, 147, 159, 165, 175, 181, 188, 190, 196, 197, 200, 201, 205, 210, 214, 215, 232, 244, 245, 249, 254, 258, 259, 311, 313, 340, 373, 394, 397, 411, 412, 415, 432, 434, 435, 451, 475, 477, 478, 484, 486, 488], "return": [13, 16, 44, 52, 66, 67, 69, 73, 104, 115, 147, 148, 149, 150, 156, 158, 159, 160, 165, 167, 174, 176, 177, 181, 184, 189, 190, 192, 194, 200, 201, 214, 221, 225, 229, 230, 231, 236, 241, 244, 245, 258, 265, 268, 271, 276, 279, 280, 282, 283, 284, 286, 292, 293, 300, 304, 309, 310, 311, 313, 318, 324, 328, 330, 332, 333, 335, 336, 337, 339, 340, 344, 348, 350, 367, 372, 373, 377, 385, 389, 391, 392, 394, 397, 402, 404, 405, 411, 412, 416, 417, 434, 435, 440, 450, 453, 473, 475, 478, 483, 484, 486], "true": [13, 84, 112, 145, 147, 159, 165, 196, 197, 210, 212, 214, 215, 228, 229, 230, 254, 256, 258, 259, 270, 271, 276, 280, 286, 304, 327, 333, 339, 350, 373, 388, 392, 397, 404, 405, 416, 434, 435, 437, 440, 444, 450, 451, 454, 457, 458, 477, 478, 480, 483, 484, 485, 486, 488], "els": [13, 147, 159, 197, 210, 254, 350, 402, 459, 484], "fals": [13, 14, 15, 41, 42, 46, 47, 48, 70, 71, 88, 91, 98, 101, 102, 104, 112, 130, 135, 142, 145, 146, 147, 156, 158, 159, 165, 167, 196, 197, 202, 204, 207, 208, 209, 211, 212, 214, 225, 229, 230, 231, 232, 238, 246, 248, 251, 252, 253, 255, 256, 258, 268, 271, 282, 286, 335, 339, 350, 373, 392, 397, 405, 415, 416, 434, 435, 444, 450, 451, 464, 468, 477, 478, 483, 484, 485, 486, 488], "boolean": 13, "ensure_list": 13, "x": [13, 53, 73, 149, 175, 196, 197, 211, 229, 255, 271, 318, 377, 392, 433, 437, 440, 452, 453, 478, 483, 484, 485, 487], "ensur": [13, 229, 271, 318, 377, 440, 478, 485], "list": [13, 42, 43, 52, 104, 139, 147, 148, 149, 150, 154, 158, 165, 174, 175, 180, 185, 196, 197, 200, 201, 205, 212, 225, 229, 230, 244, 245, 249, 256, 268, 271, 275, 276, 279, 280, 282, 283, 284, 286, 293, 301, 306, 309, 312, 327, 332, 333, 335, 336, 337, 339, 340, 348, 356, 357, 361, 373, 388, 392, 394, 395, 405, 411, 414, 415, 435, 442, 444, 448, 451, 454, 459, 461, 464, 465, 468, 473, 475, 477, 478, 479, 483, 484, 486], "input": [13, 15, 42, 43, 44, 52, 59, 63, 66, 67, 69, 70, 71, 73, 81, 82, 84, 85, 104, 108, 109, 115, 121, 140, 147, 148, 153, 155, 156, 157, 158, 159, 163, 174, 175, 196, 197, 200, 201, 212, 213, 214, 216, 225, 228, 229, 234, 244, 245, 256, 257, 258, 260, 268, 270, 271, 274, 275, 276, 339, 340, 344, 348, 373, 394, 402, 404, 405, 412, 415, 416, 432, 433, 434, 435, 437, 438, 439, 440, 442, 444, 446, 450, 451, 452, 453, 454, 459, 475, 477, 478, 480, 483, 484, 485, 488], "check_mx_vers": 13, "version": [13, 52, 103, 153, 158, 174, 197, 275, 276, 331, 409, 411, 415, 444, 448, 449, 451, 464, 466, 468, 469, 476, 483, 486, 487], "str": [13, 42, 139, 148, 150, 154, 155, 156, 158, 159, 160, 167, 174, 196, 197, 212, 213, 214, 221, 225, 229, 231, 235, 236, 256, 257, 258, 265, 268, 271, 275, 276, 279, 280, 282, 284, 286, 293, 304, 327, 330, 332, 333, 335, 337, 339, 358, 366, 368, 371, 372, 388, 391, 392, 397, 402, 405, 406, 434, 435, 450, 477, 484, 485], "mx": 13, "__version__": 13, "combine_cap": 13, "current": [13, 69, 103, 155, 170, 174, 177, 181, 196, 197, 288, 295, 296, 298, 299, 300, 309, 311, 318, 322, 377, 383, 405, 411, 412, 415, 417, 433, 440, 444, 451, 454, 458, 471, 473, 475, 478, 483, 486], "new": [13, 16, 147, 155, 165, 202, 214, 229, 230, 246, 258, 271, 310, 350, 410, 416, 440, 451, 452, 465, 471, 472, 475, 476, 478, 480, 481, 482, 485, 487, 488], "combin": [13, 158, 196, 197, 200, 201, 225, 239, 244, 245, 268, 340, 373, 394, 405, 411, 415, 447, 451, 474, 476, 478, 479, 485, 486], "capabl": [13, 46, 328, 389, 416, 417, 432, 444, 451, 452, 462, 475, 477, 478, 486, 488], "contain": [13, 66, 67, 69, 73, 138, 147, 150, 158, 159, 165, 166, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 192, 196, 197, 200, 201, 212, 213, 214, 244, 245, 256, 257, 258, 272, 276, 277, 282, 283, 284, 288, 301, 304, 306, 309, 310, 311, 312, 313, 314, 335, 336, 337, 340, 373, 394, 397, 404, 433, 435, 438, 447, 450, 472, 475, 480, 484, 486, 487], "make_nc_model": 13, "target": [13, 42, 43, 101, 149, 174, 190, 192, 197, 310, 313, 318, 377, 435, 440, 451, 475, 484, 485, 486, 488], "sym_model": 13, "ctx": 13, "input_desc": 13, "convert": [13, 43, 47, 48, 49, 51, 52, 53, 54, 55, 65, 73, 85, 98, 99, 101, 102, 103, 104, 130, 135, 141, 148, 158, 174, 196, 197, 212, 225, 228, 229, 256, 268, 270, 271, 275, 282, 288, 310, 328, 335, 389, 392, 411, 416, 451, 452, 456, 478, 479, 483, 485, 486], "symbol": [13, 148, 156, 158, 279, 332, 340, 373, 411, 453], "model": [13, 15, 16, 29, 41, 42, 43, 44, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 115, 117, 139, 140, 141, 147, 148, 149, 150, 152, 154, 155, 156, 157, 158, 159, 163, 165, 166, 172, 174, 181, 182, 183, 186, 188, 190, 192, 196, 197, 200, 201, 208, 211, 212, 214, 229, 230, 233, 234, 241, 244, 245, 252, 255, 256, 258, 271, 272, 274, 275, 276, 277, 278, 286, 287, 288, 289, 292, 295, 296, 298, 299, 300, 301, 306, 310, 311, 312, 313, 314, 315, 318, 321, 323, 324, 331, 339, 340, 350, 366, 371, 372, 373, 374, 377, 378, 382, 384, 385, 391, 392, 394, 400, 402, 404, 405, 407, 411, 412, 414, 415, 417, 422, 432, 433, 434, 435, 437, 438, 439, 440, 441, 446, 447, 449, 450, 452, 454, 459, 461, 462, 465, 471, 473, 474, 476, 478, 481, 482, 484, 485, 486, 487, 488], "an": [13, 66, 67, 69, 104, 140, 142, 150, 158, 164, 181, 196, 197, 205, 210, 214, 229, 233, 238, 249, 254, 258, 271, 278, 279, 283, 284, 292, 293, 315, 331, 332, 336, 337, 340, 367, 372, 373, 392, 394, 405, 407, 409, 411, 412, 414, 415, 417, 433, 434, 435, 436, 437, 442, 450, 451, 452, 454, 458, 459, 462, 471, 473, 475, 476, 478, 482, 483, 484, 485, 486], "neural": [13, 150, 165, 166, 176, 177, 178, 179, 196, 197, 224, 225, 226, 229, 230, 233, 236, 239, 268, 269, 271, 273, 278, 285, 286, 288, 301, 306, 309, 312, 314, 315, 320, 326, 331, 338, 339, 340, 344, 351, 373, 380, 381, 387, 402, 407, 410, 415, 416, 417, 432, 433, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 449, 452, 453, 455, 456, 459, 461, 462, 464, 466, 468, 469, 470, 473, 474, 476, 478, 480, 481, 483, 484, 485, 486, 488, 489], "compressor": [13, 165, 166, 178, 179, 196, 197, 224, 225, 226, 229, 230, 233, 236, 239, 268, 269, 271, 273, 278, 285, 286, 288, 309, 312, 314, 315, 320, 326, 331, 338, 339, 340, 344, 351, 373, 381, 387, 402, 407, 410, 412, 415, 416, 417, 432, 433, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 449, 452, 453, 454, 455, 459, 461, 462, 464, 466, 468, 469, 470, 473, 474, 475, 476, 478, 480, 481, 483, 484, 485, 486, 487, 488, 489], "tupl": [13, 104, 147, 158, 197, 200, 201, 225, 229, 244, 245, 268, 271, 276, 327, 340, 373, 388, 394, 416, 435, 450, 451, 478, 485], "symnet": 13, "arg": [13, 52, 104, 212, 213, 214, 256, 257, 258, 309, 318, 377, 392, 400, 401, 435, 440, 451, 460, 478, 480, 483, 484, 485], "aux": 13, "data": [13, 42, 43, 54, 104, 139, 147, 150, 155, 158, 159, 163, 174, 196, 197, 200, 201, 230, 232, 244, 245, 276, 278, 318, 328, 330, 331, 340, 366, 371, 373, 377, 389, 391, 394, 397, 402, 405, 414, 415, 433, 434, 435, 440, 444, 445, 448, 450, 451, 452, 478, 479, 481, 482, 483, 484, 485, 486, 487], "descript": [13, 131, 392, 410, 411, 416, 417, 434, 483], "ncmodel": 13, "fuse": [13, 57, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 90, 91, 92, 93, 95, 130, 135, 156, 158, 163, 411, 483, 484], "suppli": 13, "get_framework_nam": 13, "get": [13, 42, 44, 66, 67, 69, 103, 104, 147, 149, 155, 158, 159, 165, 170, 172, 174, 177, 184, 189, 190, 191, 194, 197, 205, 229, 230, 236, 238, 249, 271, 276, 309, 311, 313, 321, 328, 330, 339, 348, 373, 382, 389, 391, 397, 405, 416, 433, 443, 447, 448, 451, 457, 476, 480, 483, 486, 487, 490], "name": [13, 43, 44, 52, 66, 67, 69, 103, 104, 109, 115, 139, 147, 148, 149, 150, 155, 156, 158, 159, 160, 165, 170, 174, 176, 181, 184, 185, 189, 190, 191, 194, 196, 197, 212, 213, 214, 217, 221, 227, 229, 230, 234, 237, 238, 256, 257, 258, 261, 265, 271, 274, 275, 276, 281, 286, 304, 309, 311, 313, 328, 330, 334, 339, 344, 348, 350, 373, 389, 391, 395, 397, 405, 411, 416, 417, 435, 437, 440, 442, 444, 449, 450, 451, 453, 457, 464, 468, 472, 475, 478, 481, 482, 484, 486, 488, 489], "context": [13, 405, 477, 480], "prepare_model_data": 13, "nc_model": [13, 301, 306], "data_x": 13, "prepar": [13, 158, 411, 414, 435, 440, 445, 478], "dataload": [13, 15, 42, 139, 140, 149, 150, 155, 158, 159, 165, 172, 174, 200, 201, 212, 223, 233, 244, 245, 256, 267, 272, 278, 301, 306, 315, 331, 366, 371, 373, 394, 397, 411, 414, 415, 416, 437, 438, 439, 440, 445, 446, 451, 452, 474, 478, 479, 483, 484, 485, 487, 488], "need": [13, 42, 104, 108, 155, 159, 165, 174, 197, 200, 201, 202, 210, 211, 214, 221, 229, 232, 234, 235, 244, 245, 246, 254, 255, 258, 265, 271, 276, 315, 321, 339, 340, 350, 373, 382, 394, 404, 405, 411, 415, 434, 435, 437, 438, 440, 447, 451, 454, 456, 457, 460, 464, 465, 466, 468, 469, 471, 472, 475, 477, 478, 479, 480, 481, 483, 485, 486, 488], "run": [13, 139, 147, 159, 165, 181, 192, 196, 197, 200, 201, 211, 228, 230, 244, 245, 255, 270, 310, 311, 318, 340, 373, 377, 394, 410, 415, 432, 440, 443, 444, 451, 454, 456, 458, 459, 460, 462, 464, 465, 466, 468, 469, 471, 476, 478, 481, 482, 484, 486, 488], "loader": [13, 139, 200, 201, 244, 245, 340, 373, 394, 400, 434, 478], "dataloaderwrap": 13, "prepare_model": 13, "create_data_exampl": 13, "creat": [13, 16, 104, 196, 197, 202, 212, 214, 232, 246, 256, 258, 282, 292, 293, 328, 335, 367, 372, 389, 391, 392, 397, 409, 412, 415, 435, 453, 464, 466, 468, 469, 472, 478, 482, 484, 486, 487], "exampl": [13, 150, 158, 159, 165, 174, 175, 196, 197, 212, 213, 214, 225, 229, 256, 257, 258, 268, 271, 282, 283, 284, 286, 312, 335, 336, 337, 339, 340, 350, 373, 391, 392, 394, 409, 410, 414, 416, 417, 422, 446, 447, 454, 457, 458, 459, 462, 479, 481, 485, 486, 487, 490], "prepare_dataload": 13, "io": 13, "ndarray_to_devic": 13, "ndarrai": [13, 42, 43, 66, 67, 69, 229, 271, 395, 443, 485], "devic": [13, 78, 88, 89, 90, 91, 92, 93, 96, 106, 130, 135, 146, 149, 159, 174, 175, 196, 197, 416, 434, 438, 451, 452, 454, 457, 462, 471, 477, 480], "is_model_quant": 13, "query_quantizable_nod": 13, "node": [13, 42, 43, 49, 52, 53, 54, 55, 59, 61, 63, 66, 67, 69, 73, 76, 79, 81, 82, 83, 97, 101, 102, 104, 109, 131, 139, 147, 174, 274, 276, 348, 372, 415, 416, 437, 440, 484, 486, 489], "given": [13, 16, 66, 67, 69, 103, 104, 115, 147, 158, 229, 271, 282, 335, 373, 412, 417, 475, 483, 485], "map": [13, 43, 104, 147, 197, 229, 271, 274, 276, 277, 281, 283, 284, 286, 301, 306, 311, 314, 334, 336, 337, 339, 435, 440, 450, 451, 464, 468, 475, 478, 480], "quantize_sym_model": 13, "qconfig": [13, 158, 480, 484], "accord": [13, 121, 158, 165, 196, 197, 212, 213, 214, 229, 256, 257, 258, 271, 321, 380, 382, 397, 412, 415, 435, 440, 475, 479, 483, 485, 486], "run_forward": 13, "b_filter": 13, "collector": [13, 150, 395], "pre_batch": 13, "post_batch": 13, "forward": [13, 414, 416, 451, 475, 477, 478, 480, 483, 484], "propag": [13, 99], "filter": [13, 212, 213, 214, 215, 216, 217, 219, 223, 256, 257, 258, 259, 260, 261, 263, 267, 278, 331, 405, 417, 435, 447, 475, 484], "which": [13, 42, 54, 82, 109, 149, 150, 155, 170, 174, 175, 177, 181, 182, 183, 185, 188, 190, 192, 196, 197, 212, 213, 214, 225, 230, 256, 257, 258, 268, 279, 284, 293, 295, 296, 298, 299, 300, 304, 309, 310, 311, 313, 318, 332, 337, 339, 344, 350, 373, 377, 405, 409, 411, 412, 415, 416, 417, 433, 434, 435, 437, 438, 440, 443, 444, 447, 450, 451, 452, 453, 455, 459, 462, 465, 471, 472, 474, 475, 477, 478, 479, 480, 481, 483, 484, 485, 486, 487, 488], "batch": [13, 158, 202, 204, 205, 210, 211, 232, 246, 248, 249, 254, 255, 394, 434, 438, 439, 451, 474, 475, 485, 486, 489], "infer": [13, 104, 159, 174, 277, 314, 348, 350, 373, 394, 415, 416, 433, 438, 439, 451, 452, 471, 473, 475, 476, 478, 480, 483, 484, 486], "collect": [13, 16, 43, 158, 227, 229, 232, 234, 235, 237, 271, 284, 286, 337, 339, 395, 405, 416, 478, 484, 486], "inform": [13, 150, 170, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 197, 200, 201, 232, 234, 235, 244, 245, 309, 311, 312, 313, 315, 339, 405, 409, 410, 413, 414, 415, 416, 417, 418, 420, 424, 427, 430, 433, 438, 444, 451, 453, 466, 469, 472, 475, 479, 481, 484, 488, 489, 490], "dure": [13, 139, 176, 180, 190, 196, 197, 309, 313, 350, 405, 416, 437, 451, 453, 473, 474, 475, 478, 483, 484, 488], "call": [13, 42, 155, 160, 174, 182, 183, 188, 282, 311, 335, 411, 412, 415, 434, 446, 460, 462, 472, 478, 483, 484, 485], "prior": [13, 87, 486], "after": [13, 77, 158, 172, 176, 181, 183, 188, 196, 197, 212, 225, 229, 232, 256, 268, 271, 311, 378, 392, 405, 412, 416, 435, 437, 438, 439, 442, 447, 450, 451, 464, 465, 468, 472, 473, 474, 475, 478, 479, 482, 483, 484, 485, 486], "count": [13, 412, 435, 480], "int": [13, 16, 42, 43, 104, 139, 147, 154, 158, 159, 172, 196, 197, 211, 212, 213, 225, 229, 255, 256, 257, 268, 271, 275, 276, 280, 282, 286, 293, 333, 335, 339, 358, 367, 372, 391, 392, 405, 434, 435, 450, 451, 477, 485], "make_symbol_block": 13, "gluon": [13, 340, 373, 453], "symbolblock": 13, "make_modul": 13, "parse_tune_config": 13, "tune_cfg": [13, 147, 148, 158, 415, 417, 486], "quantizable_nod": 13, "strategi": [13, 158, 188, 196, 197, 198, 214, 242, 258, 278, 331, 414, 415, 416, 417, 422, 433, 434, 440, 447, 451, 459, 471, 476, 477, 478, 479, 481, 487, 488], "config": [13, 114, 115, 117, 121, 158, 165, 170, 172, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 196, 200, 201, 212, 241, 244, 245, 256, 295, 296, 298, 299, 300, 301, 306, 309, 310, 311, 312, 313, 328, 329, 331, 340, 367, 372, 389, 390, 391, 392, 394, 397, 404, 405, 412, 414, 416, 417, 422, 432, 434, 437, 438, 439, 440, 442, 445, 447, 450, 451, 452, 453, 474, 475, 477, 478, 479, 480, 482, 484, 486], "tune": [13, 44, 165, 196, 197, 200, 201, 212, 214, 244, 245, 256, 258, 277, 314, 316, 317, 318, 319, 321, 322, 323, 324, 327, 328, 329, 330, 340, 350, 373, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 385, 388, 389, 390, 391, 394, 405, 415, 416, 433, 434, 435, 437, 440, 447, 449, 451, 452, 471, 473, 475, 476, 479, 480, 481, 482, 484, 488], "from": [13, 43, 44, 60, 66, 67, 69, 104, 147, 155, 158, 165, 166, 167, 170, 177, 178, 179, 180, 184, 186, 187, 188, 189, 190, 191, 192, 196, 197, 200, 201, 202, 205, 209, 212, 213, 214, 215, 216, 217, 219, 224, 225, 231, 232, 235, 244, 245, 246, 249, 253, 256, 257, 258, 259, 260, 261, 263, 268, 272, 274, 275, 276, 279, 282, 283, 284, 288, 293, 309, 310, 311, 313, 328, 330, 332, 335, 336, 337, 340, 348, 350, 373, 389, 391, 392, 394, 397, 404, 405, 409, 411, 412, 415, 417, 432, 434, 435, 437, 438, 439, 440, 441, 442, 443, 445, 447, 450, 452, 453, 454, 458, 459, 460, 462, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487], "distribute_calib_tensor": 13, "calib_tensor": 13, "calib_cfg": 13, "tensor_to_nod": 13, "distribut": [13, 16, 142, 164, 196, 197, 202, 204, 205, 207, 208, 209, 210, 211, 232, 246, 248, 249, 251, 252, 253, 254, 255, 399, 414, 416, 434, 438, 448, 466, 469, 476, 478, 480, 481, 483, 487, 489], "depend": [13, 200, 201, 230, 244, 245, 340, 373, 394, 410, 443, 444, 477, 478, 486], "algorithm": [13, 149, 158, 193, 279, 286, 294, 331, 332, 339, 397, 399, 412, 415, 416, 417, 438, 439, 444, 447, 460, 465, 475, 478, 480, 484, 488], "set": [13, 43, 56, 95, 104, 114, 147, 155, 158, 165, 192, 194, 196, 197, 200, 201, 202, 212, 214, 217, 229, 230, 235, 236, 244, 245, 246, 256, 258, 261, 271, 282, 288, 301, 306, 310, 315, 335, 339, 340, 348, 372, 373, 392, 394, 402, 405, 409, 412, 416, 432, 434, 435, 438, 440, 442, 444, 446, 447, 448, 450, 451, 452, 454, 456, 458, 472, 475, 477, 478, 482, 483, 486, 488], "kl": [13, 16, 196, 197, 395, 399, 416, 417, 433, 444, 451, 486, 488], "minmax": [13, 16, 416, 417, 433, 444, 478, 488], "calib_model": 13, "qsym_model": 13, "calib_data": 13, "calibdata": 13, "threshold": [13, 161, 395, 399, 450], "amp_convert": 13, "amp_cfg": 13, "support": [13, 42, 43, 96, 103, 155, 163, 167, 177, 184, 188, 196, 197, 200, 201, 211, 212, 214, 221, 225, 229, 231, 232, 233, 236, 241, 244, 245, 255, 256, 258, 265, 268, 271, 278, 286, 288, 293, 309, 311, 315, 322, 328, 331, 339, 340, 344, 350, 373, 383, 389, 392, 394, 397, 399, 405, 407, 414, 416, 451, 454, 459, 462, 465, 471, 476, 479, 482, 486, 487], "amp": [13, 454, 461], "wrap": [13, 104, 115, 167, 231, 282, 335, 411, 440, 466, 469], "dataiterload": 13, "data_it": [13, 174], "collectorbas": 13, "calibcollector": 13, "include_tensors_kl": 13, "include_tensors_minmax": 13, "num_bin": [13, 16, 395], "8001": [13, 395], "tensorcollector": 13, "include_nod": 13, "qtensor_to_tensor": 13, "build": [13, 42, 114, 160, 161, 163, 164, 185, 289, 292, 343, 345, 347, 348, 349, 415, 416, 417, 448, 453, 464, 466, 468, 469, 472, 476, 482, 486], "up": [13, 99, 185, 229, 271, 310, 440, 441, 444, 447, 462, 466, 469, 471, 476, 477, 478, 482, 485, 486, 488], "namecollector": 13, "cache_kl": 13, "cache_minmax": 13, "tensors_kl": 13, "tensors_minmax": 13, "onnxruntimeadaptor": 14, "rt": 14, "onnxrt_qlinearopsadaptor": [14, 415], "onnxrt_integeropsadaptor": 14, "onnxrt_qdqadaptor": 14, "onnxrtqueri": 14, "dynam": [14, 197, 202, 246, 276, 328, 389, 415, 434, 438, 442, 447, 451, 454, 459, 460, 461, 462, 465, 471, 476, 486, 489], "static": [14, 41, 42, 46, 155, 163, 174, 197, 276, 328, 373, 389, 415, 416, 417, 437, 442, 447, 451, 454, 459, 460, 461, 462, 465, 471, 483, 486, 489], "format": [14, 18, 43, 52, 147, 196, 197, 212, 213, 214, 256, 257, 258, 276, 282, 288, 328, 335, 389, 392, 416, 417, 435, 440, 442, 450, 451, 452, 453, 454, 478, 481], "onnxrtaug": 15, "dump_op_typ": 15, "black_nod": [15, 139], "white_nod": 15, "cpuexecutionprovid": [15, 41, 42, 452, 478], "reduce_rang": [15, 41, 42, 196, 197, 417, 477], "augment": 15, "dump": [15, 158, 165, 276, 405, 478, 481, 484], "calib_registri": 16, "calib_method": 16, "calibratorbas": 16, "minmaxcalibr": 16, "percentilecalibr": 16, "2048": [16, 405], "percentil": [16, 139, 159, 433], "99": [16, 483, 489], "999": [16, 488], "option": [16, 104, 159, 176, 196, 197, 200, 201, 212, 229, 244, 245, 256, 271, 275, 276, 282, 288, 309, 315, 328, 331, 335, 339, 340, 373, 389, 391, 392, 394, 398, 405, 416, 417, 434, 435, 444, 448, 451, 465, 475, 478, 480, 482, 485, 486, 488], "number": [16, 66, 67, 104, 139, 158, 159, 172, 178, 179, 196, 197, 210, 213, 225, 229, 254, 257, 268, 271, 283, 284, 286, 309, 318, 336, 337, 339, 367, 372, 377, 392, 397, 405, 432, 434, 435, 440, 450, 475, 478, 480, 482, 485, 486], "bin": [16, 405, 443], "histogram": [16, 395, 405, 484], "valu": [16, 43, 54, 66, 67, 69, 88, 89, 104, 142, 147, 158, 164, 165, 170, 174, 175, 185, 191, 192, 194, 196, 197, 200, 201, 212, 215, 216, 225, 229, 230, 244, 245, 256, 259, 260, 268, 271, 282, 286, 310, 318, 321, 328, 335, 339, 340, 373, 377, 382, 389, 391, 392, 394, 395, 397, 405, 411, 416, 417, 433, 435, 437, 444, 450, 451, 452, 457, 473, 475, 477, 478, 480, 481, 483, 485, 486, 488], "default": [16, 96, 147, 159, 192, 194, 196, 197, 200, 201, 204, 212, 213, 214, 225, 229, 244, 245, 248, 256, 257, 258, 268, 271, 275, 276, 279, 288, 310, 330, 332, 339, 348, 391, 397, 405, 411, 415, 434, 435, 444, 447, 448, 450, 451, 452, 459, 462, 464, 468, 473, 475, 477, 478, 479, 480, 482, 483, 485, 486, 488], "float": [16, 43, 139, 140, 150, 159, 176, 181, 189, 192, 196, 197, 212, 225, 256, 268, 280, 282, 283, 284, 311, 333, 335, 336, 337, 392, 402, 405, 435, 450, 477, 478, 483, 485], "A": [16, 53, 73, 74, 102, 115, 139, 140, 147, 158, 159, 166, 170, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 196, 197, 214, 229, 232, 234, 235, 241, 258, 271, 272, 279, 282, 283, 284, 286, 289, 292, 293, 294, 301, 304, 306, 309, 310, 311, 312, 313, 318, 332, 335, 336, 337, 339, 340, 344, 348, 377, 394, 405, 414, 416, 434, 435, 441, 444, 450, 451, 453, 464, 465, 468, 471, 475, 476, 478, 480, 483, 485, 486, 488], "between": [16, 42, 142, 164, 187, 196, 197, 229, 271, 283, 286, 336, 339, 367, 372, 405, 411, 415, 416, 417, 433, 437, 438, 447, 450, 451, 462, 478, 481, 482, 483, 485, 486], "0": [16, 43, 52, 89, 104, 147, 158, 159, 161, 163, 167, 170, 172, 196, 197, 202, 204, 207, 208, 209, 211, 212, 215, 216, 219, 225, 229, 231, 232, 246, 248, 251, 252, 253, 255, 256, 259, 260, 263, 268, 271, 276, 277, 286, 293, 301, 306, 314, 339, 350, 373, 378, 392, 411, 434, 435, 438, 440, 442, 443, 444, 448, 449, 450, 451, 452, 457, 459, 464, 468, 475, 477, 478, 480, 481, 482, 483, 484, 485, 486, 488], "100": [16, 165, 196, 197, 214, 258, 392, 432, 435, 440, 446, 451, 477, 478, 483, 485, 486, 488, 489], "klcalibr": 16, "128": [16, 158, 159, 212, 215, 216, 229, 256, 259, 260, 271, 435, 451, 478, 485], "num_quantized_bin": 16, "histogramcollector": 16, "collctor": 16, "smooth_distribut": 16, "p": [16, 472, 480], "ep": [16, 164, 452], "0001": [16, 196, 197, 438, 451, 477], "smooth": [16, 139, 140, 147, 155, 163, 196, 197, 327, 475], "discret": [16, 486], "mai": [16, 147, 295, 296, 298, 299, 300, 392, 409, 410, 416, 433, 437, 442, 443, 449, 452, 464, 468, 476, 478, 486], "have": [16, 73, 82, 140, 147, 175, 177, 184, 210, 232, 254, 279, 282, 309, 311, 332, 335, 339, 373, 391, 392, 409, 410, 416, 417, 434, 435, 437, 440, 444, 449, 450, 451, 452, 454, 471, 473, 475, 478, 480, 483, 486, 487], "been": [16, 177, 184, 279, 309, 311, 332, 410, 412, 417, 438, 451, 452, 471, 480, 483], "normal": [16, 33, 229, 271, 284, 337, 451, 473, 480, 483, 485], "1": [16, 42, 43, 53, 73, 88, 104, 108, 112, 145, 147, 153, 155, 158, 159, 161, 163, 164, 165, 167, 170, 182, 183, 185, 196, 197, 202, 204, 207, 208, 209, 211, 212, 213, 215, 216, 219, 220, 225, 229, 230, 231, 232, 246, 248, 251, 252, 253, 255, 256, 257, 259, 260, 263, 264, 268, 271, 277, 282, 283, 284, 286, 301, 306, 311, 314, 315, 335, 336, 337, 339, 350, 373, 391, 392, 397, 409, 411, 414, 415, 417, 433, 434, 435, 437, 438, 442, 444, 445, 448, 450, 452, 455, 457, 473, 474, 475, 477, 478, 480, 481, 482, 483, 484, 485, 486, 487, 488], "replac": [16, 155, 159, 284, 337, 440, 451, 462, 481], "zero": [16, 43, 149, 181, 192, 229, 271, 311, 405, 414, 475, 478, 483, 485, 486], "multipli": 16, "scale": [16, 43, 99, 140, 142, 149, 153, 155, 157, 158, 159, 163, 164, 225, 229, 268, 271, 478, 480, 482, 483, 485, 486], "factor": [16, 140, 480, 483, 489], "take": [16, 176, 197, 200, 201, 205, 229, 234, 244, 245, 249, 271, 309, 318, 339, 340, 373, 377, 394, 409, 411, 412, 434, 437, 438, 444, 451, 471, 475, 478, 479, 485, 486, 488], "correspond": [16, 150, 174, 185, 196, 197, 212, 256, 279, 282, 286, 332, 335, 339, 397, 405, 415, 444, 451, 475, 477, 478, 482, 483, 486], "amount": 16, "off": [16, 66, 67, 69, 410, 480], "non": [16, 310, 405, 411, 437, 486], "ref": [16, 147], "http": [16, 149, 150, 170, 178, 179, 188, 212, 214, 256, 258, 279, 280, 282, 283, 284, 309, 311, 312, 332, 333, 335, 336, 337, 339, 373, 411, 414, 435, 437, 445, 448, 449, 451, 460, 466, 469, 481], "hanj": 16, "c": [16, 73, 214, 258, 435, 443, 448, 480, 486], "illinoi": 16, "edu": [16, 214, 258, 435], "cs412": 16, "bk3": 16, "diverg": [16, 395, 399, 417, 433, 438, 486], "pdf": 16, "github": [16, 150, 178, 179, 212, 256, 279, 280, 283, 284, 309, 312, 332, 333, 336, 337, 339, 373, 410, 435, 437, 441, 448, 449, 451, 460, 466, 469, 481], "com": [16, 150, 178, 179, 212, 256, 279, 280, 283, 284, 309, 312, 332, 333, 336, 337, 339, 373, 409, 414, 435, 437, 445, 448, 449, 451, 454, 460, 481, 482, 489], "apach": [16, 449], "incub": 16, "blob": [16, 150, 178, 179, 279, 280, 283, 284, 309, 332, 333, 336, 337, 339, 373, 451, 460], "master": [16, 178, 179, 279, 280, 283, 284, 309, 312, 332, 333, 336, 337, 339, 373, 451, 486], "python": [16, 74, 147, 214, 233, 258, 278, 331, 392, 405, 407, 410, 411, 435, 437, 440, 443, 448, 451, 456, 462, 465, 471, 476, 485], "contrib": [16, 278, 331], "py": [16, 147, 150, 165, 181, 196, 197, 280, 282, 283, 284, 311, 333, 335, 336, 337, 392, 411, 415, 437, 440, 448, 451, 456, 458, 459, 460, 466, 469, 478, 481, 484], "microsoft": [16, 415], "onnxruntim": [16, 196, 197, 208, 214, 221, 252, 258, 265, 287, 367, 415, 433, 434, 447, 448, 452, 477], "main": [16, 149, 185, 236, 312, 411, 434, 437, 440, 451, 458, 460, 472, 475, 478, 480], "tool": [16, 147, 275, 405, 414, 415, 451, 464, 468, 475, 476, 478], "arrai": [16, 43, 147, 229, 271, 282, 293, 335, 405, 485], "small": [16, 66, 67, 68, 380, 412, 475, 480, 486, 489], "probabl": [16, 196, 197, 399, 480], "activationoper": 18, "onnx_quant": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40], "onnx_nod": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 86, 100, 110], "removableactivationoper": 18, "remov": [18, 43, 55, 56, 59, 73, 79, 82, 83, 84, 95, 97, 139, 172, 185, 284, 337, 409, 410, 451, 464, 468, 475, 484], "qactivationoper": 18, "children": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 34, 35, 36, 38, 39], "initi": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 34, 35, 36, 38, 39, 42, 43, 104, 115, 147, 167, 181, 200, 201, 209, 212, 231, 244, 245, 253, 256, 310, 311, 328, 373, 389, 394, 412, 417, 435, 450, 470, 475, 478, 483, 486], "qoper": [18, 34, 196, 197, 442], "float16activationoper": 18, "float16": [18, 21, 43, 435], "argmaxoper": 19, "qargmaxoper": 19, "attentionoper": 20, "qattentionoper": 20, "qattent": 20, "binari": [21, 147, 286, 339, 443, 450, 466, 469, 481], "binaryoper": 21, "qbinaryoper": 21, "qbinari": 21, "float16binaryoper": 21, "concatoper": 22, "qconcatoper": 22, "qconcat": 22, "convoper": 23, "qconvoper": 23, "qlinearconv": 23, "direct8bit": 24, "direct8bitoper": 24, "qdirectoper": 24, "qdirect": 24, "embedlayernorm": 25, "embedlayernormalizationoper": 25, "qembedlayernormalizationoper": 25, "qembedlayernorm": 25, "gatheroper": 26, "qgatheroper": 26, "qgather": 26, "globalaveragepool": 27, "globalaveragepooloper": 27, "qglobalaveragepooloper": 27, "qlinearglobalaveragepool": 27, "gemmoper": 28, "qgemmoper": 28, "qgemm": 28, "lstmoper": 30, "matmuloper": 31, "qmatmuloper": 31, "qlinearmatmul": 31, "fusedmatmuloper": 31, "fusedmatmul": 31, "maxpooloper": 32, "qmaxpooloper": 32, "qmaxpool": 32, "batchnormalizationoper": 33, "batchnorm": [33, 61, 66, 120, 411, 483], "normalizationoper": 33, "op_registri": 34, "op_typ": [34, 139, 147, 329, 390], "qop_registri": 34, "padoper": 35, "qpadoper": 35, "qpad": 35, "averagepool": 36, "pooloper": 36, "qpooloper": 36, "qlinearaveragepool": 36, "reduceoper": 37, "resizeoper": 38, "qresizeoper": 38, "qresiz": 38, "splitoper": 39, "qsplitoper": 39, "qsplit": 39, "unari": 40, "unaryoper": 40, "q_config": [41, 158, 276, 415], "mode": [41, 42, 43, 44, 109, 155, 221, 265, 282, 328, 335, 348, 389, 402, 405, 415, 416, 437, 447, 464, 468, 478, 479, 486], "quantization_param": 41, "op_types_to_quant": 41, "fallback_list": 41, "fp32": [41, 42, 78, 130, 135, 142, 158, 159, 164, 196, 197, 200, 201, 244, 245, 275, 276, 286, 321, 328, 339, 378, 382, 389, 397, 404, 405, 414, 415, 417, 437, 444, 445, 450, 451, 452, 461, 477, 478, 479, 481, 482, 483, 484, 486, 488, 489], "add_qdq_pair_to_weight": [41, 196, 197, 478], "optypes_to_exclude_output_qu": [41, 196, 197, 478], "dedicated_qdq_pair": [41, 196, 197, 478], "smoothquant": [42, 155, 158, 163, 414, 476, 480, 487], "onnxrt": [42, 43, 212, 214, 221, 229, 256, 258, 265, 271, 286, 339, 366, 403, 415, 437, 452, 478, 489], "get_quant_dequant_output": 42, "input_data": [42, 434], "output_data": 42, "loss": [42, 167, 196, 197, 231, 277, 286, 301, 306, 314, 339, 394, 433, 437, 438, 439, 440, 441, 450, 451, 452, 462, 474, 475, 478, 480, 483, 486, 488], "output": [42, 43, 52, 56, 58, 73, 97, 104, 109, 147, 158, 159, 174, 175, 180, 194, 196, 197, 200, 201, 234, 238, 244, 245, 275, 276, 279, 309, 332, 339, 340, 348, 373, 394, 400, 401, 405, 411, 415, 416, 438, 439, 440, 442, 444, 446, 450, 451, 453, 462, 471, 472, 474, 475, 477, 478, 480, 481, 483, 484, 485, 486, 488], "numpi": [42, 43, 66, 67, 69, 104, 147, 229, 271, 282, 293, 335, 443, 485], "7": [42, 159, 165, 196, 197, 350, 417, 432, 443, 444, 448, 451, 475, 478, 481, 483, 486, 489], "bit": [42, 158, 159, 196, 197, 391, 417, 433, 439, 452, 476, 478, 480, 483], "execut": [42, 43, 52, 149, 165, 181, 182, 183, 196, 197, 311, 315, 317, 372, 373, 374, 376, 394, 397, 404, 405, 437, 438, 439, 451, 452, 456, 457, 464, 465, 468, 471, 472, 474, 475, 478, 482, 486, 489], "provid": [42, 43, 101, 104, 109, 174, 200, 201, 229, 244, 245, 271, 277, 282, 301, 306, 314, 315, 335, 340, 373, 394, 398, 400, 412, 414, 415, 416, 417, 432, 434, 437, 439, 440, 441, 447, 448, 450, 451, 452, 453, 454, 458, 462, 465, 471, 472, 475, 477, 478, 484, 486, 487, 488, 489], "make_sub_graph": 42, "opset": [42, 101, 103, 104, 197, 275, 276, 442], "ir_vers": 42, "thi": [42, 44, 85, 109, 131, 138, 142, 146, 150, 158, 159, 164, 166, 172, 174, 176, 178, 179, 180, 181, 185, 186, 187, 188, 189, 190, 196, 197, 200, 201, 211, 212, 213, 214, 215, 216, 217, 219, 229, 232, 238, 239, 244, 245, 255, 256, 257, 258, 259, 260, 261, 263, 271, 279, 282, 283, 284, 286, 295, 296, 298, 299, 300, 301, 306, 309, 311, 313, 314, 315, 318, 321, 332, 335, 336, 337, 339, 340, 350, 373, 377, 382, 391, 392, 394, 404, 405, 409, 410, 411, 412, 415, 416, 417, 433, 434, 435, 438, 439, 440, 442, 443, 444, 447, 449, 450, 451, 452, 453, 454, 456, 457, 459, 460, 462, 464, 466, 468, 469, 470, 471, 472, 475, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487], "quant_dequant_data": 42, "qtype": [42, 43, 415], "3": [42, 147, 183, 197, 214, 229, 258, 271, 282, 335, 392, 411, 412, 414, 433, 434, 435, 438, 440, 442, 444, 445, 448, 450, 451, 452, 454, 458, 462, 464, 468, 473, 477, 478, 480, 481, 482, 483, 485, 486, 489], "scheme": [42, 43, 158, 159, 415, 416, 417, 434, 444, 462, 480, 486, 488], "sym": [42, 43, 159, 416, 417, 444, 478, 480, 488], "dequant": [42, 43, 56, 87, 90, 91, 92, 93, 95, 150, 158, 159, 405, 411, 416, 483, 484], "asym": [42, 43, 158, 159, 417, 444, 480, 488], "ortsmoothqu": 42, "fake": [42, 112, 153, 155, 159, 163, 391, 451, 478, 480, 483], "channel": [42, 43, 142, 155, 159, 163, 164, 172, 175, 180, 196, 197, 225, 229, 268, 271, 309, 415, 417, 447, 448, 454, 456, 461, 475, 480, 485, 489], "For": [42, 159, 163, 174, 175, 178, 179, 197, 214, 229, 258, 271, 283, 284, 286, 309, 312, 336, 337, 339, 340, 373, 409, 411, 413, 415, 417, 438, 439, 440, 442, 444, 447, 454, 456, 457, 459, 462, 475, 479, 483, 484, 486, 488, 489], "more": [42, 147, 155, 163, 178, 179, 229, 271, 309, 412, 413, 414, 416, 433, 435, 438, 440, 442, 445, 447, 448, 451, 452, 454, 462, 466, 469, 473, 474, 475, 479, 480, 483, 486, 487, 489], "detail": [42, 155, 163, 174, 229, 271, 405, 406, 409, 410, 414, 416, 417, 433, 438, 444, 445, 446, 450, 451, 452, 454, 462, 471, 475, 481, 482, 484, 486, 487], "pleas": [42, 149, 150, 155, 163, 170, 178, 179, 180, 188, 196, 197, 212, 213, 214, 217, 256, 257, 258, 261, 309, 311, 312, 339, 373, 392, 411, 412, 413, 414, 415, 432, 433, 435, 439, 440, 442, 448, 450, 452, 454, 455, 459, 462, 475, 478, 479, 481, 482, 483, 487], "refer": [42, 149, 150, 155, 163, 170, 178, 179, 180, 188, 192, 196, 197, 212, 256, 279, 280, 286, 309, 311, 312, 332, 333, 339, 373, 392, 411, 415, 416, 432, 434, 435, 437, 439, 440, 442, 446, 448, 449, 450, 451, 452, 454, 459, 462, 473, 477, 481, 485, 486], "accur": [42, 149, 155, 163, 480, 483], "effici": [42, 155, 163, 412, 433, 434, 438, 454, 474, 476, 480, 483, 486], "post": [42, 96, 97, 149, 155, 163, 188, 197, 200, 201, 244, 245, 373, 409, 414, 415, 416, 437, 439, 440, 442, 447, 448, 454, 460, 471, 475, 476, 480, 483, 484, 486], "train": [42, 55, 79, 149, 155, 163, 166, 182, 183, 186, 188, 196, 197, 200, 201, 212, 214, 229, 239, 244, 245, 256, 258, 271, 272, 288, 311, 331, 373, 397, 412, 415, 416, 422, 435, 437, 438, 439, 442, 447, 452, 454, 460, 471, 474, 475, 476, 480, 482, 483, 486, 488], "larg": [42, 155, 163, 414, 434, 438, 451, 475, 476, 480, 483, 489], "languag": [42, 155, 163, 279, 332, 409, 414, 442, 475, 476, 480, 483], "2": [42, 43, 52, 73, 104, 108, 155, 159, 161, 163, 165, 176, 182, 183, 196, 197, 213, 230, 257, 282, 284, 286, 311, 318, 335, 337, 339, 350, 377, 392, 411, 414, 415, 433, 434, 435, 437, 438, 444, 447, 448, 449, 450, 452, 473, 475, 476, 478, 480, 481, 482, 483, 485, 486, 487], "spiq": [42, 155, 163, 483], "free": [42, 155, 163, 188, 200, 201, 244, 245, 373, 409, 414, 460, 465, 473, 482, 483], "per": [42, 43, 155, 159, 163, 165, 196, 197, 230, 399, 415, 417, 434, 479, 480, 489], "we": [42, 43, 66, 67, 69, 73, 85, 142, 155, 163, 164, 165, 174, 178, 185, 196, 197, 211, 230, 232, 255, 279, 282, 332, 335, 380, 409, 411, 415, 416, 417, 434, 437, 440, 442, 444, 450, 451, 458, 459, 462, 466, 469, 471, 472, 473, 474, 475, 477, 478, 480, 481, 482, 483, 484, 486, 487], "onli": [42, 52, 62, 69, 85, 108, 114, 142, 155, 157, 159, 163, 164, 165, 177, 184, 196, 197, 212, 230, 232, 236, 256, 276, 288, 309, 311, 322, 373, 383, 391, 392, 405, 414, 415, 416, 417, 432, 433, 434, 437, 438, 440, 443, 444, 451, 452, 459, 472, 475, 476, 477, 478, 483, 484, 486, 487, 488], "inplac": [42, 155], "mean": [42, 155, 176, 185, 196, 197, 225, 229, 268, 271, 284, 286, 309, 321, 337, 339, 382, 411, 416, 417, 434, 437, 440, 444, 450, 451, 457, 475, 478, 483, 485, 486, 488], "weight": [42, 43, 59, 60, 121, 140, 142, 147, 150, 155, 157, 158, 159, 164, 170, 175, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 189, 191, 196, 197, 276, 309, 311, 328, 339, 373, 380, 389, 391, 405, 406, 414, 415, 416, 417, 433, 437, 439, 444, 446, 451, 473, 475, 477, 478, 483, 484, 486, 487, 488], "chang": [42, 95, 142, 155, 164, 182, 183, 185, 186, 188, 190, 196, 197, 311, 313, 380, 405, 410, 416, 434, 440, 443, 449, 451, 454, 464, 465, 468, 471, 475, 484, 485, 486], "you": [42, 155, 196, 197, 210, 212, 254, 256, 311, 339, 373, 410, 411, 416, 434, 435, 437, 440, 448, 449, 450, 452, 454, 456, 457, 459, 464, 468, 471, 472, 475, 478, 481, 482, 483, 484, 487], "can": [42, 142, 150, 155, 164, 174, 175, 176, 181, 190, 196, 197, 200, 201, 211, 214, 229, 230, 232, 244, 245, 255, 258, 271, 282, 284, 286, 309, 311, 313, 335, 337, 339, 340, 350, 373, 394, 405, 411, 412, 414, 415, 416, 417, 432, 434, 435, 437, 438, 439, 440, 442, 444, 447, 448, 450, 451, 452, 453, 454, 455, 456, 458, 459, 460, 462, 464, 465, 466, 468, 469, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 488, 489], "recov": [42, 155, 405, 415, 439, 483], "helper": [43, 44, 109, 115, 147, 158, 212, 213, 214, 228, 256, 257, 258, 270, 274, 275, 276, 348, 403], "dtype_to_nam": 43, "dtype_map": 43, "dtype": [43, 101, 104, 196, 197, 215, 216, 225, 229, 259, 260, 268, 271, 416, 417, 435, 437, 442, 444, 454, 477, 478, 483, 484, 485, 488], "its": [43, 59, 95, 147, 150, 174, 183, 186, 188, 197, 208, 214, 229, 252, 258, 271, 274, 280, 281, 311, 318, 333, 334, 377, 409, 435, 438, 449, 450, 452, 462, 464, 468, 471, 472, 475, 480, 482, 485, 486], "string": [43, 44, 115, 147, 149, 165, 167, 174, 176, 181, 189, 190, 192, 193, 196, 197, 214, 231, 236, 258, 272, 277, 279, 282, 288, 289, 290, 292, 293, 301, 306, 309, 310, 311, 312, 313, 314, 332, 335, 344, 348, 397, 402, 405, 450, 483, 485], "represent": [43, 409, 411, 433, 439, 475, 478], "quanttyp": [43, 391], "repres": [43, 176, 180, 181, 189, 192, 214, 219, 258, 263, 282, 284, 286, 335, 337, 339, 409, 417, 433, 435, 442, 475, 478, 486], "make_quant_nod": 43, "make": [43, 104, 142, 164, 176, 181, 190, 210, 254, 309, 311, 313, 405, 409, 410, 415, 416, 432, 434, 444, 450, 451, 459, 464, 468, 471, 478, 479, 480, 482, 483, 486], "quantizelinear": 43, "make_dquant_nod": 43, "axi": [43, 197], "dequantizelinear": 43, "is_b_transpos": 43, "wheter": 43, "inuput": 43, "b": [43, 73, 212, 256, 433, 435, 450, 475, 480, 483, 486], "transpos": [43, 72, 180, 225, 229, 271, 275, 309, 485], "split_shared_bia": 43, "share": [43, 81, 97, 108, 140, 159, 443, 444, 483, 486], "float_to_float16": 43, "float_to_bfloat16": 43, "bfloat16": [43, 452, 454, 462, 479], "cast_tensor": 43, "tensorproto": [43, 104], "remove_init_from_model_input": 43, "collate_pr": 43, "result": [43, 147, 150, 158, 225, 229, 268, 271, 279, 282, 283, 284, 286, 332, 335, 336, 337, 339, 353, 373, 380, 394, 404, 405, 409, 412, 414, 434, 437, 438, 440, 447, 449, 450, 451, 459, 460, 471, 472, 473, 475, 476, 478, 480, 482, 483, 484, 485, 486, 487, 489], "quantize_data_with_scale_zero": 43, "zero_point": 43, "point": [43, 225, 268, 283, 284, 293, 318, 336, 337, 377, 405, 450, 471, 478, 483, 485, 486], "To": [43, 282, 335, 350, 410, 416, 417, 435, 437, 440, 452, 455, 458, 464, 466, 468, 469, 477, 479, 480, 481, 483, 486, 488], "pack": [43, 60], "comput": [43, 104, 150, 158, 279, 280, 283, 284, 286, 332, 333, 336, 337, 339, 394, 405, 433, 434, 439, 442, 450, 451, 452, 454, 465, 475, 476, 478, 480, 483, 486], "linear": [43, 149, 153, 157, 163, 172, 174, 175, 180, 185, 192, 196, 197, 309, 411, 438, 442, 451, 475, 483, 486], "transform": [43, 49, 142, 144, 145, 146, 149, 153, 154, 157, 188, 212, 213, 214, 215, 216, 217, 219, 221, 223, 256, 257, 258, 259, 260, 261, 263, 265, 267, 278, 331, 411, 412, 414, 433, 435, 438, 439, 440, 441, 445, 451, 454, 459, 460, 461, 462, 475, 476, 479, 480, 483, 484, 486, 488, 489], "when": [43, 52, 63, 69, 147, 175, 181, 186, 192, 196, 197, 212, 213, 221, 229, 256, 257, 265, 271, 280, 310, 311, 333, 373, 394, 409, 412, 416, 434, 435, 451, 462, 464, 465, 468, 472, 475, 478, 480, 483, 485, 486], "uint8": [43, 159, 225, 268, 282, 330, 335, 391, 415, 435, 444, 477, 478, 485, 488], "rmin": [43, 478], "rmax": [43, 478], "m": [43, 150, 178, 179, 196, 197, 309, 438, 448, 454, 456, 459, 462, 466, 469, 475, 489], "where": [43, 196, 197, 282, 286, 335, 339, 391, 405, 417, 433, 437, 438, 464, 468, 472, 483, 484], "max": [43, 103, 142, 159, 164, 196, 197, 229, 271, 283, 284, 318, 336, 337, 377, 405, 414, 437, 448, 451, 475, 478, 483, 485, 486], "ab": [43, 149, 159, 170, 188, 311, 478, 483], "np": [43, 229, 271, 318, 377, 440, 485, 486], "calculate_scale_zp": 43, "quantize_rang": 43, "calcul": [43, 59, 158, 170, 178, 192, 197, 215, 216, 259, 260, 283, 284, 309, 311, 321, 336, 337, 382, 395, 405, 433, 435, 450, 451, 462, 473, 475, 478, 482, 483, 486, 488], "quantize_data": 43, "add": [43, 51, 63, 108, 118, 147, 192, 196, 197, 212, 214, 236, 256, 258, 310, 328, 389, 405, 410, 411, 417, 434, 435, 440, 442, 444, 450, 451, 466, 469, 482, 484, 486, 487], "necessari": [43, 409, 412, 416, 453, 472, 475, 482, 486], "intermedi": [43, 150, 167, 196, 197, 231, 411, 447, 478], "trasnform": 43, "full": [43, 212, 213, 214, 256, 257, 258, 405, 414, 433, 435, 437, 443, 449, 472, 475, 481], "equat": [43, 284, 286, 337, 339, 478, 483], "r": [43, 142, 164, 437, 448, 472, 478, 489], "": [43, 104, 142, 147, 164, 174, 175, 176, 180, 181, 182, 183, 186, 188, 193, 194, 196, 197, 211, 214, 228, 229, 230, 232, 234, 241, 255, 258, 270, 271, 284, 309, 311, 337, 339, 340, 344, 373, 402, 405, 409, 412, 416, 417, 437, 438, 440, 442, 444, 447, 451, 452, 459, 462, 464, 468, 471, 474, 475, 476, 477, 478, 480, 481, 482, 483, 486, 487, 488, 489], "q": [43, 106, 108, 130, 416, 480, 483], "z": [43, 433, 438, 483], "real": [43, 215, 232, 259, 416, 433, 440, 476, 478], "origin": [43, 155, 158, 174, 186, 192, 197, 212, 229, 230, 256, 271, 295, 296, 298, 299, 300, 310, 311, 330, 378, 391, 405, 410, 435, 459, 475, 478, 485, 486, 488], "quantize_data_per_channel": 43, "dequantize_data_with_scale_zero": 43, "tensor_valu": 43, "scale_valu": 43, "zo_valu": 43, "sacal": 43, "dequantize_data": 43, "valueinfo": 43, "tensor_nam": [43, 147], "new_dtyp": 43, "cast": [43, 56, 479, 485], "info": [43, 158, 159, 178, 179, 192, 227, 232, 237, 309, 344, 401, 405, 411, 437, 453], "quantizedvalu": 43, "new_quantized_nam": 43, "scale_nam": 43, "zero_point_nam": 43, "quantized_value_typ": 43, "quint8": 43, "linearli": 43, "intial": 43, "quantizediniti": 43, "quantized_data": 43, "quantizationmod": 43, "quantizedvaluetyp": 43, "quantformat": 43, "quantize_nparrai": 43, "arr": [43, 405], "low": [43, 200, 201, 215, 216, 244, 245, 259, 260, 277, 287, 314, 340, 415, 416, 432, 433, 435, 440, 451, 452, 476, 478, 480, 483, 486], "high": [43, 215, 216, 259, 260, 435, 437, 448, 476, 486], "attribute_to_kwarg": 43, "attribut": [43, 82, 103, 104, 147, 158, 174, 185, 194, 197, 405, 415, 434, 444, 446, 451, 477, 488], "kwarg": [43, 104, 121, 122, 123, 124, 125, 126, 127, 128, 131, 132, 133, 134, 136, 137, 159, 172, 196, 197, 214, 227, 229, 234, 237, 258, 271, 327, 329, 339, 340, 341, 343, 345, 347, 348, 349, 373, 388, 390, 392, 394, 400, 401, 404, 405, 434], "make_nod": 43, "find_by_nam": 43, "item_list": 43, "find": [43, 66, 67, 69, 104, 147, 286, 293, 318, 339, 377, 405, 415, 437, 457, 464, 468, 471, 472, 482, 484, 486], "item": [43, 192, 194, 196, 197, 228, 270, 310, 328, 389, 433, 440, 475, 483, 486], "trt_env_setup": 43, "environ": [43, 165, 230, 409, 432, 464, 468, 471, 486], "variabl": [43, 165, 189, 196, 197, 214, 230, 258, 318, 377, 391, 448, 475, 486], "tensorrt": [43, 433, 452, 478], "to_numpi": 43, "get_ops_recurs": 44, "prefix": [44, 147, 148, 156, 165, 454, 459, 484], "graph_info": 44, "templateadaptor": 44, "tampl": 44, "dictionari": [44, 66, 67, 69, 147, 148, 150, 158, 194, 196, 197, 228, 270, 282, 289, 292, 294, 335, 405], "yaml": [44, 192, 194, 197, 200, 201, 212, 214, 230, 244, 245, 256, 258, 272, 277, 288, 289, 290, 292, 301, 306, 314, 315, 404, 405, 415, 417, 446, 450, 451, 473, 477, 484, 485], "file": [44, 104, 147, 158, 162, 192, 193, 196, 197, 200, 201, 212, 213, 214, 217, 228, 229, 235, 238, 244, 245, 256, 257, 258, 261, 270, 271, 272, 277, 282, 288, 289, 290, 292, 301, 306, 310, 312, 314, 315, 335, 340, 350, 356, 357, 361, 373, 404, 405, 412, 415, 416, 417, 440, 443, 446, 449, 450, 451, 453, 457, 466, 469, 470, 471, 472, 473, 477, 478, 480, 484, 485], "pytorchadaptor": 44, "api": [44, 69, 74, 109, 149, 240, 277, 282, 314, 327, 328, 335, 339, 373, 388, 389, 392, 405, 410, 411, 418, 420, 424, 427, 430, 437, 442, 447, 451, 456, 460, 461, 462, 481, 482, 486, 490], "pytorch_ipexadaptor": 44, "intel": [44, 178, 179, 233, 236, 273, 278, 285, 286, 309, 312, 320, 326, 331, 338, 339, 351, 373, 381, 387, 407, 409, 410, 412, 413, 415, 416, 417, 433, 435, 436, 438, 439, 441, 442, 444, 445, 449, 452, 453, 454, 459, 461, 462, 473, 474, 475, 476, 478, 479, 481, 483, 484, 486, 487, 488], "extens": [44, 405, 412, 414, 415, 444, 447, 448, 451, 452, 453, 455, 460, 461, 462, 466, 469, 470, 475, 476, 478, 483, 486, 487, 488], "ipex": [44, 152, 158, 196, 197, 447, 451, 452, 456, 460, 461, 483], "pytorch_fxadaptor": 44, "fx": [44, 158, 196, 322, 383, 447, 452, 460, 461, 476, 478, 479], "graph": [44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 116, 129, 131, 135, 138, 141, 142, 144, 145, 146, 147, 174, 211, 255, 277, 341, 348, 372, 411, 415, 435, 438, 440, 446, 453, 454, 478, 479, 484], "pytorchweightonlyadaptor": 44, "querybackendcap": [45, 415, 416], "tensorflowadaptor": 46, "stock": [46, 460, 483], "spr": 46, "tensorflow_itexadaptor": 46, "itex": [46, 108, 196, 197, 275, 452, 478, 483], "tensorflowqueri": [46, 415], "performance_onli": [46, 47, 48, 106, 130, 135, 146, 196, 451], "itex_mod": [46, 47, 88, 106, 130, 135], "quant_mod": [46, 328, 389, 416, 417], "graphconvert": 47, "qt_config": 47, "recip": [47, 174, 196, 197, 277, 314, 451, 480, 483, 486], "int8_sequ": 47, "fp32_op": [47, 49, 106], "bf16_op": [47, 49, 106, 416, 479], "data_load": [47, 48, 415], "fake_qu": [47, 87, 106, 130, 135], "qdq_enabl": 47, "new_api": [47, 48, 70, 71, 76, 78, 91, 98, 130, 135, 142], "use_bf16": [47, 48, 196, 477], "without": [48, 89, 147, 186, 229, 271, 311, 330, 391, 409, 438, 440, 451, 462, 475, 476, 477, 486, 487], "graphconverterwithoutcalib": 48, "recover_config": 48, "rewrit": [49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 105, 106, 107, 108, 241], "bf16convert": [49, 479], "biasadd": [51, 58, 63, 65, 108, 444], "convertaddtobiasaddoptim": 51, "conv2d": [51, 58, 59, 60, 64, 65, 70, 124, 134, 142, 149, 416, 417, 437, 442, 444, 483, 484, 486], "addv2": [51, 68, 444], "layout": 52, "convertlayoutoptim": 52, "optim": [52, 73, 74, 78, 79, 115, 117, 174, 183, 188, 193, 196, 197, 233, 239, 241, 277, 278, 294, 314, 318, 331, 377, 394, 395, 402, 405, 412, 414, 432, 437, 438, 439, 440, 444, 445, 447, 448, 451, 453, 454, 456, 458, 459, 462, 465, 475, 476, 477, 478, 479, 482, 483, 484, 486, 488], "nchw": [52, 225], "nhwc": [52, 225], "It": [52, 166, 176, 200, 201, 238, 244, 245, 284, 286, 293, 309, 314, 321, 337, 339, 340, 373, 378, 382, 394, 415, 416, 417, 433, 437, 438, 451, 457, 460, 465, 471, 472, 475, 478, 481, 482, 486, 488], "exist": [52, 165, 194, 230, 348, 442, 450, 458, 486], "4": [52, 153, 158, 159, 165, 176, 185, 196, 197, 221, 224, 225, 229, 265, 268, 271, 279, 280, 282, 332, 333, 335, 391, 392, 409, 415, 417, 432, 440, 441, 444, 447, 448, 450, 451, 459, 475, 478, 480, 483, 485, 486, 489], "abov": [52, 415, 416, 417, 438, 475, 478, 483, 486], "graph_def": [52, 147, 275, 340, 348, 372, 373], "leakyrelu": [53, 483], "convertleakyreluoptim": 53, "below": [53, 65, 73, 196, 197, 315, 339, 373, 410, 411, 414, 415, 416, 417, 434, 437, 438, 440, 446, 450, 454, 456, 464, 465, 468, 471, 473, 474, 475, 477, 478, 480, 482, 483, 484, 486, 487], "subgraph": [53, 65, 104, 156, 486], "mul": [53, 64, 65, 68, 163, 442, 483], "maximum": [53, 176, 181, 196, 197, 212, 229, 256, 271, 280, 311, 318, 333, 377, 417, 433, 435, 437, 451, 475, 478, 485], "note": [53, 180, 282, 322, 335, 383, 412, 416, 417, 434, 437, 440, 442, 444, 448, 451, 456, 459, 464, 468, 471, 475, 478, 480, 483, 484, 486, 487, 488], "coeffici": [53, 475], "less": [53, 147, 196, 197, 405, 432, 438, 451, 475], "than": [53, 147, 212, 229, 256, 271, 405, 412, 414, 432, 435, 446, 473, 474, 475, 478, 480, 482, 485, 486], "convers": [53, 197, 288, 415, 416, 451, 452, 478, 479, 483], "valid": [53, 66, 67, 104, 181, 184, 192, 196, 197, 214, 258, 282, 310, 311, 335, 348, 410, 412, 414, 415, 435, 437, 438, 441, 444, 447, 449, 451, 462, 475, 478, 481], "nan": 54, "random": [54, 147, 196, 197, 225, 229, 268, 271, 278, 294, 318, 320, 331, 377, 381, 405, 410, 412, 451, 477, 485, 488], "convertnantorandom": 54, "const": [54, 55, 62, 63, 66, 67, 69, 81, 97], "consist": [54, 62, 410, 411, 483, 486], "placehold": [55, 210, 254], "convertplaceholdertoconst": 55, "rerewrit": 56, "dequantizecastoptim": 56, "b16": 56, "dilat": 57, "contract": 57, "dilatedcontract": 57, "spacetobatchnd": 57, "batchtospacend": 57, "pattern": [57, 58, 60, 77, 95, 106, 107, 108, 130, 135, 158, 169, 170, 171, 174, 175, 181, 182, 183, 184, 186, 188, 189, 193, 196, 197, 214, 258, 278, 299, 300, 302, 307, 311, 328, 331, 389, 415, 435, 444, 447, 451, 472, 474, 477, 483, 486, 489], "inject": [58, 451], "dummi": [58, 174, 215, 216, 259, 260, 286, 339, 414, 435, 445, 450, 451], "injectdummybiasaddoptim": 58, "fusion": [58, 60, 69, 77, 108, 125, 126, 127, 130, 131, 132, 136, 411, 415, 444], "expanddim": 59, "expanddimsoptim": 59, "next": [59, 205, 249, 392, 412, 416, 417, 434, 477, 480, 486], "featch": 60, "reshap": [60, 66, 67, 72, 483], "fetchweightfromreshapeoptim": 60, "handl": [60, 147, 155, 163, 401, 411, 413, 434, 483], "fold": [61, 62, 276, 444, 483], "foldbatchnormnodesoptim": 61, "graphfoldconstantoptim": 62, "sequenc": [62, 104, 175, 178, 179, 196, 197, 212, 228, 229, 256, 270, 271, 280, 284, 309, 333, 337, 415, 435, 444, 475, 480, 485], "self": [62, 174, 196, 197, 350, 415, 416, 434, 435, 447, 450, 482, 484, 486], "supported_op_typ": 62, "fusebiasaddandaddoptim": 63, "second": [63, 175, 196, 197, 212, 256, 378, 405, 437, 451, 464, 468, 472, 480, 483, 486, 488], "columnwis": 64, "fusecolumnwisemuloptim": 64, "depthwiseconv2dn": [64, 70, 124, 134, 444], "math": [65, 478], "fuseconvwithmathoptim": 65, "elimin": 65, "sub": [65, 158, 165, 174, 230, 412, 486], "realdiv": [65, 68], "decompos": [66, 67], "fusedecomposedbnoptim": 66, "input_graph_def": [66, 67, 69], "node_name_from_input": [66, 67, 69], "node_nam": [66, 67, 69, 147, 348, 358, 416], "strip": [66, 67, 69, 82, 83, 147, 484], "port": [66, 67, 69], "other": [66, 67, 69, 155, 163, 211, 255, 284, 337, 348, 409, 410, 411, 416, 417, 437, 444, 447, 449, 451, 453, 473, 475, 478, 483, 485, 486, 489], "underli": [66, 67, 69], "node_from_map": [66, 67, 69], "node_map": [66, 67, 69], "pull": [66, 67, 69], "def": [66, 67, 69, 200, 201, 244, 245, 373, 392, 394, 411, 415, 434, 435, 438, 439, 440, 450, 451, 478, 483, 484, 486], "entri": [66, 67, 69, 150, 236, 277, 315, 405, 449], "index": [66, 67, 69, 104, 165, 197, 205, 210, 214, 249, 254, 258, 293, 405, 435, 450, 472, 483], "everi": [66, 67, 69, 176, 179, 181, 196, 197, 309, 311, 415, 434, 459, 464, 468, 486], "identifi": [66, 67, 69, 282, 335, 348, 475], "want": [66, 67, 69, 174, 196, 197, 210, 212, 254, 256, 311, 378, 394, 411, 415, 434, 435, 440, 451, 459, 471, 472, 473, 482, 484, 486], "nodedef": [66, 67, 69], "rais": [66, 67, 69, 104, 177, 184, 192, 282, 309, 310, 311, 335, 340, 392, 414, 475, 476], "valueerror": [66, 67, 69, 282, 335, 392, 443], "If": [66, 67, 69, 73, 159, 165, 196, 197, 200, 201, 214, 229, 244, 245, 258, 271, 310, 340, 373, 392, 394, 410, 411, 416, 432, 434, 435, 440, 448, 449, 450, 451, 457, 465, 466, 469, 471, 473, 478, 482, 483, 484, 485, 486], "isn": [66, 67, 69], "t": [66, 67, 69, 142, 164, 176, 196, 197, 229, 232, 271, 284, 337, 411, 415, 437, 438, 440, 451, 452, 472, 475, 478, 486, 488], "present": [66, 67, 69, 437, 476, 483], "values_from_const": [66, 67, 69], "node_def": [66, 67, 69], "extract": [66, 67, 69, 147, 174, 214, 258, 330, 391, 435], "ha": [66, 67, 69, 73, 149, 180, 181, 230, 279, 309, 311, 332, 392, 410, 412, 415, 416, 417, 434, 442, 447, 451, 452, 457, 471, 475, 477, 478, 479, 482, 483, 486], "access": [66, 67, 69, 194, 197, 400, 405, 466, 469], "valid_reshape_input": [66, 67], "reshape_in0_ndef": [66, 67], "reshape_in1_ndef": [66, 67], "ar": [66, 67, 104, 158, 176, 181, 182, 183, 188, 196, 197, 212, 229, 256, 271, 282, 286, 293, 309, 310, 311, 315, 317, 318, 335, 339, 374, 376, 377, 391, 392, 397, 404, 405, 409, 410, 411, 412, 415, 416, 434, 435, 437, 438, 439, 440, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 457, 459, 462, 465, 471, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488], "bypass_reshap": [66, 67], "input_node_map": [66, 67], "input_nam": [66, 67, 101, 141, 197, 275, 276, 442], "get_const_dim_count": [66, 67], "dimens": [66, 67, 104, 204, 229, 248, 271, 435, 438, 485], "instancenorm": [67, 483], "fusedecomposedinoptim": 67, "gelu": 68, "fusegeluoptim": 68, "sqrt": [68, 437], "erf": 68, "samll": 69, "layernorm": [69, 483], "fuselayernormoptim": 69, "remap": 69, "smaller": [69, 229, 271, 438, 451, 475, 485], "case": [69, 73, 159, 165, 197, 211, 228, 229, 230, 255, 270, 271, 277, 301, 306, 314, 350, 417, 434, 438, 439, 440, 444, 446, 450, 455, 459, 471, 472, 473, 475, 476, 478, 480, 481, 485, 487, 488, 489], "fusedbatcnormv3": 69, "And": [69, 411, 432, 451, 457, 483], "further": [69, 197, 409, 452, 453, 454, 456, 465, 471, 478], "restrict": [69, 196, 197, 475, 482], "2d": [69, 483], "3d": [69, 476, 483], "kera": [69, 115, 174, 192, 197, 214, 221, 236, 258, 265, 343, 348, 416, 434, 440, 453, 461, 462], "fusepadwithconv2doptim": 70, "excluded_op_nam": [70, 71, 193, 196, 197, 451, 475], "cfg": [70, 71, 158, 193, 328, 389, 397, 416, 417], "itex_qdq_mod": [70, 71], "conv3d": [70, 124], "fusepadwithfp32conv2doptim": 71, "fusetransposereshapeoptim": 72, "cse": [73, 97], "graphcseoptim": 73, "introduc": [73, 410, 415, 416, 417, 444, 451, 478, 480, 481, 483, 487], "ident": [73, 79, 175, 409, 438], "three": [73, 192, 212, 256, 317, 374, 376, 411, 415, 416, 433, 448, 452, 465, 474, 478, 479, 482, 483, 484], "d": [73, 158, 438, 446, 472, 489], "those": [73, 321, 382, 405, 437, 438, 439, 446, 451, 452, 474, 475, 478, 486], "child": [73, 149, 484], "b1": 73, "c1c2": 73, "d1": [73, 405], "c1": 73, "c2": 73, "memori": [73, 277, 301, 306, 314, 350, 405, 433, 434, 439, 451, 452, 454, 473, 475, 478, 480, 483, 486, 489], "bound": [73, 165, 229, 271, 282, 318, 335, 377, 450, 485], "like": [73, 95, 97, 147, 174, 192, 197, 200, 201, 202, 214, 244, 245, 246, 258, 277, 286, 311, 314, 315, 339, 348, 373, 394, 410, 411, 412, 415, 416, 437, 438, 439, 447, 459, 474, 475, 478, 480, 481, 483, 486], "relu": [73, 77, 108, 411, 444, 483, 484], "relu6": [73, 444], "updat": [73, 158, 170, 176, 192, 311, 339, 373, 402, 443, 450, 451, 457, 462, 465, 475, 483, 486, 487], "graphdef": [73, 147, 348, 372, 453], "grappler": [74, 444], "grappleroptim": 74, "input_output_nam": 74, "opt_cfg": 74, "wrapper": [74, 101, 102, 103, 104, 121, 139, 148, 153, 157, 167, 211, 229, 231, 232, 234, 235, 241, 255, 271, 282, 286, 335, 339, 344, 348, 479], "leverag": [74, 412, 414, 438, 442, 454, 471, 474, 478, 480, 486], "built": [74, 198, 199, 203, 208, 212, 213, 218, 220, 222, 223, 225, 226, 229, 234, 236, 242, 243, 247, 250, 252, 256, 257, 262, 264, 266, 267, 268, 269, 271, 315, 339, 342, 350, 373, 394, 412, 415, 435, 440, 451, 464, 468, 473, 478, 485, 486, 488], "convert_add_to_biasadd": [75, 86, 110], "convert_layout": [75, 86, 110], "convert_leakyrelu": [75, 86, 110], "convert_nan_to_random": [75, 86, 110], "convert_placeholder_to_const": [75, 86, 110], "dequantize_cast_optim": [75, 86, 110], "dilated_contract": [75, 86, 110], "dummy_biasadd": [75, 86, 110], "expanddims_optim": [75, 86, 110], "fetch_weight_from_reshap": [75, 86, 110], "fold_batch_norm": [75, 86, 110], "fold_const": [75, 86, 110], "fuse_biasadd_add": [75, 86, 110], "fuse_column_wise_mul": [75, 86, 110], "fuse_conv_with_math": [75, 86, 110], "fuse_decomposed_bn": [75, 86, 110], "fuse_decomposed_in": [75, 86, 110], "fuse_gelu": [75, 86, 110], "fuse_layer_norm": [75, 86, 110], "fuse_pad_with_conv": [75, 86, 110], "fuse_pad_with_fp32_conv": [75, 86, 110], "fuse_reshape_transpos": [75, 86, 110], "graph_cse_optim": [75, 86, 110], "grappler_pass": [75, 86, 110], "insert_print_nod": [75, 86, 110], "move_squeeze_after_relu": [75, 86, 110], "pre_optim": [75, 86, 110], "remove_training_nod": [75, 86, 110], "rename_batch_norm": [75, 86, 110], "split_shared_input": [75, 86, 110], "strip_equivalent_nod": [75, 86, 110, 147], "strip_unused_nod": [75, 86, 110, 147], "switch_optim": [75, 86, 110], "insert": [76, 104, 106, 108, 112, 145, 155, 163, 411, 416, 434, 447, 451, 454, 475, 478, 479, 483, 484], "print": [76, 149, 150, 174, 286, 339, 392, 405, 440, 450, 451, 475, 483, 486], "insertprintminmaxnod": 76, "pre_node_nam": 76, "post_node_nam": 76, "pass": [76, 147, 165, 339, 373, 405, 411, 415, 432, 435, 438, 439, 440, 446, 450, 451, 472, 475, 477, 478, 479, 483, 488], "sampl": [76, 159, 196, 197, 205, 210, 212, 213, 214, 225, 229, 249, 254, 256, 257, 258, 268, 271, 286, 293, 318, 339, 377, 412, 434, 435, 441, 447, 472, 478, 485, 486, 488, 489], "move": [77, 411, 477, 480, 481], "squeez": [77, 411], "movesqueezeafterreluoptim": 77, "match": [77, 101, 174, 282, 283, 335, 336, 438, 472, 480], "pre": [78, 115, 174, 200, 201, 212, 244, 245, 256, 340, 373, 394, 435, 438, 439, 451, 459, 475, 476, 478, 480, 484, 486], "entranc": [78, 203], "preoptim": 78, "removetrainingnodesoptim": 79, "protected_nod": 79, "types_to_splic": 79, "checknumer": 79, "stopgradi": 79, "renam": [80, 481], "fusedbatchnorm": 80, "fusedbatchnormv2": 80, "renamebatchnormoptim": 80, "splitsharedinputoptim": 81, "equival": [82, 153, 157, 483], "stripequivalentnodesoptim": 82, "output_node_nam": [82, 83, 130, 131, 135, 147], "same": [82, 140, 147, 159, 188, 197, 212, 229, 256, 271, 282, 335, 405, 415, 417, 432, 434, 435, 438, 440, 444, 451, 455, 459, 464, 468, 475, 477, 478, 480, 483, 484, 485, 486], "unus": [83, 147], "stripunusednodesoptim": 83, "input_node_nam": [83, 130, 135, 147], "switch": [84, 454, 484], "switchoptim": 84, "condit": [84, 212, 213, 214, 229, 256, 257, 258, 271, 317, 374, 376, 435, 449, 485, 486], "graphrewriterbas": 85, "abstract": [85, 166, 229, 271, 272, 277, 314, 415, 417, 446], "freeze_fake_qu": [86, 94, 110], "freeze_valu": [86, 94, 110], "freeze_value_without_calib": [86, 94, 110], "fuse_conv_redundant_dequant": [86, 94, 110], "fuse_conv_requant": [86, 94, 110], "fuse_matmul_redundant_dequant": [86, 94, 110], "fuse_matmul_requant": [86, 94, 110], "meta_op_optim": [86, 94, 110], "post_hostconst_convert": [86, 94, 110], "post_quantized_op_cs": [86, 94, 110], "rnn_convert": [86, 94, 110], "scale_propag": [86, 94, 110], "onnx_graph": [86, 100, 110], "onnx_schema": [86, 100, 110], "tf2onnx_util": [86, 100, 110], "insert_qdq_pattern": [86, 105, 110], "merge_duplicated_qdq": [86, 105, 110], "share_qdq_y_pattern": [86, 105, 110], "freez": [87, 88, 89, 454, 475], "fakequ": 87, "freezefakequantopoptim": 87, "follow": [87, 109, 175, 214, 258, 279, 282, 332, 335, 409, 410, 411, 412, 415, 416, 417, 434, 435, 438, 439, 440, 444, 448, 449, 450, 451, 452, 453, 454, 455, 456, 464, 468, 474, 475, 477, 478, 483, 484, 486], "freezevaluetransform": 88, "max_min_data": [88, 89], "postfix": [88, 89], "tensor_data": [88, 405, 406], "th": [88, 89], "gpu": [88, 89, 96, 196, 197, 414, 432, 447, 451, 452, 456, 462, 471, 477, 478], "freezevaluewithoutcalibtransform": 89, "95": [89, 286, 339, 450, 483, 489], "quantizedconv": [90, 91], "quantizeddeconv": 90, "redund": [90, 92], "fuseconvredundantdequantizetransform": 90, "cpu": [90, 91, 92, 93, 196, 197, 405, 414, 416, 432, 433, 447, 451, 452, 454, 456, 462, 471, 476, 477, 478, 479, 484], "_quantizedconv": 90, "_quantizeddeconv": 90, "successor": [90, 91, 92, 93], "requant": [91, 93, 484], "fuseconvrequantizetransform": 91, "quantizedmatmul": [92, 93], "fusematmulredundantdequantizetransform": 92, "_quantizedmatmul": [92, 93], "fusematmulrequantizedequantizetransform": 93, "quantizedmatmulwithbiasanddequant": 93, "fusematmulrequantizetransform": 93, "fusematmulrequantizedequantizenewapitransform": 93, "fusematmulrequantizenewapitransform": 93, "newapi": 93, "meta": [95, 476], "metainfochangingmemopoptim": 95, "metaop": 95, "With": [95, 350, 411, 415, 417, 434, 451, 459, 464, 468, 472, 473, 475, 476, 482, 483, 486, 489], "better": [95, 196, 197, 200, 201, 244, 245, 293, 340, 373, 394, 439, 450, 452, 475, 476, 478, 480, 482, 486], "perform": [95, 139, 165, 189, 196, 197, 212, 224, 225, 230, 256, 268, 277, 301, 306, 314, 321, 339, 350, 373, 378, 382, 411, 412, 415, 416, 432, 435, 436, 437, 439, 441, 442, 447, 448, 450, 451, 452, 453, 454, 456, 460, 462, 465, 471, 473, 474, 475, 476, 477, 478, 479, 480, 483, 484, 486, 488, 489], "hostconst": 96, "posthostconstconvert": 96, "just": [96, 202, 227, 229, 232, 234, 235, 237, 246, 271, 350, 412, 451, 461, 465, 471, 474, 478, 483, 485, 486], "postcseoptim": 97, "duplic": [97, 107, 318, 377], "quantizev2": 97, "decreas": [97, 475], "size": [97, 159, 178, 179, 204, 205, 211, 214, 220, 225, 229, 248, 249, 255, 258, 264, 268, 271, 309, 350, 405, 409, 416, 434, 435, 440, 443, 451, 471, 472, 473, 475, 480, 483, 485, 488, 489], "rnn": 98, "quantizedrnnconvert": 98, "calibration_data": [98, 106], "rnn_detail": 98, "scalepropagationtransform": 99, "direct": [99, 180, 309, 475], "export": [100, 197, 278, 282, 331, 335, 414, 445, 457, 472, 484, 487], "onnxgraph": 101, "output_shap": 101, "extra_opset": 101, "output_nam": [101, 141, 197, 275, 276, 442], "is_subgraph": 101, "graph_nam": 101, "manipul": [101, 102], "onnxnod": 102, "skip_convers": 102, "schema": [103, 159], "onnxopschema": 103, "domain": [103, 104, 196, 197, 475, 486], "since_vers": 103, "get_schema": 103, "max_inclusive_opset_vers": 103, "within": [103, 182, 183, 188, 277, 282, 314, 335, 348, 367, 372, 409, 411, 417, 433, 452, 464, 468, 471, 476, 483, 486], "get_max_supported_opset_vers": 103, "packag": [103, 415, 443, 448, 471, 472, 476, 481, 486], "set_nam": 104, "find_opset": 104, "assert_error": 104, "bool_val": 104, "error_msg": 104, "error": [104, 150, 286, 321, 339, 382, 401, 437, 450, 455, 483, 486], "messag": [104, 145, 486], "map_numpy_to_onnx_dtyp": 104, "np_dtype": 104, "map_onnx_to_numpy_typ": 104, "onnx_typ": 104, "add_port_to_nam": 104, "nr": 104, "get_tensorflow_node_attr": 104, "pars": [104, 158, 212, 213, 225, 229, 256, 257, 268, 271, 356, 357, 361, 416, 417, 485], "get_tensorflow_tensor_shap": 104, "shape": [104, 147, 176, 215, 216, 225, 229, 259, 260, 268, 271, 282, 335, 414, 435, 444, 445, 451, 483, 485], "get_tensorflow_node_shape_attr": 104, "attr": [104, 147, 174], "map_tensorflow_dtyp": 104, "get_tensorflow_tensor_data": 104, "convert_tensorflow_tensor_to_onnx": 104, "read_tensorflow_node_attr": 104, "read": [104, 147, 217, 229, 261, 271, 310, 435, 479, 482], "infer_onnx_shape_dtyp": 104, "opset_vers": [104, 141, 197, 275, 276, 442], "input_shap": [104, 216, 260, 435], "input_dtyp": 104, "sometim": [104, 411, 437, 478], "so": [104, 229, 271, 391, 411, 415, 437, 443, 447, 452, 457, 459, 478, 479, 480, 483, 484, 485, 487], "make_onnx_shap": 104, "seqtyp": 104, "tensor_dtyp": 104, "around": 104, "signifi": 104, "make_onnx_inputs_output": 104, "elem_typ": 104, "text": [104, 228, 229, 270, 271, 279, 284, 312, 332, 337, 442, 449, 460, 475, 476, 480, 483, 485, 489], "datatyp": [104, 158, 479, 486, 489], "save_protobuf": 104, "path": [104, 147, 158, 174, 192, 193, 212, 213, 214, 229, 256, 257, 258, 271, 272, 275, 276, 277, 288, 289, 290, 292, 301, 306, 310, 312, 314, 315, 328, 340, 348, 372, 373, 389, 402, 405, 411, 412, 415, 435, 437, 440, 446, 450, 451, 452, 453, 457, 460, 471, 474, 485, 488], "as_text": 104, "save": [104, 192, 196, 197, 214, 241, 258, 275, 276, 315, 348, 373, 394, 395, 400, 405, 411, 415, 446, 451, 452, 453, 455, 459, 464, 468, 474, 478, 480, 483], "protobuf": 104, "is_onnx_domain": 104, "is_list_or_tupl": 104, "are_shapes_equ": 104, "src": [104, 472], "dest": 104, "equal": [104, 142, 147, 164, 392, 405, 475], "get_subgraphs_from_onnx": 104, "model_proto": 104, "over": [104, 214, 258, 286, 339, 416, 441, 445, 447, 450, 462, 471, 477, 483, 486], "df": 104, "initialize_name_count": 104, "avoid": [104, 159, 212, 256, 411, 480, 484], "conflict": [104, 443], "counter": 104, "make_nam": 104, "get_index_from_strided_slice_of_shap": 104, "outputs_to_valu": 104, "stride": [104, 229, 271, 485], "slice": 104, "compute_const_folding_using_tf": 104, "g": [104, 176, 196, 197, 438, 441, 445, 454, 459, 475, 480, 481, 483, 486], "const_node_valu": 104, "graph_output": 104, "constant": [104, 276, 278, 318, 320, 326, 331, 377, 381, 387, 398, 434, 444, 485], "tf": [104, 115, 147, 174, 192, 211, 212, 213, 214, 229, 255, 256, 257, 258, 271, 346, 348, 440, 453, 476, 479, 485], "generategraphwithqdqpattern": 106, "op_wise_config": [106, 130, 135, 416], "quantized_nod": 106, "dq": [106, 108, 130, 483], "pair": [106, 196, 197, 416, 434, 451, 452, 481], "befor": [106, 108, 149, 163, 176, 181, 183, 188, 190, 196, 197, 212, 256, 309, 311, 313, 410, 417, 434, 435, 438, 439, 440, 443, 444, 448, 451, 466, 469, 478, 482, 484, 486], "merg": [107, 204, 248, 328, 389, 466, 469, 484, 486], "mergeduplicatedqdqoptim": 107, "y": [108, 196, 197, 229, 271, 318, 377, 437, 443, 457, 483, 485], "shareqdqforitexypatternoptim": 108, "one": [108, 109, 114, 158, 159, 165, 176, 180, 185, 188, 190, 229, 239, 271, 279, 282, 286, 288, 309, 312, 313, 332, 335, 339, 412, 415, 433, 438, 439, 440, 444, 447, 448, 450, 451, 452, 454, 455, 459, 460, 462, 464, 465, 468, 471, 472, 473, 474, 475, 477, 478, 480, 481, 483, 485, 486], "enabl": [108, 150, 159, 181, 196, 197, 311, 416, 417, 440, 448, 452, 454, 456, 459, 460, 462, 475, 476, 486], "break": [108, 440, 451], "graphanalyz": 109, "extend_engin": 109, "analyz": [109, 174, 348, 482, 483, 484], "under": [109, 196, 197, 214, 258, 404, 412, 435, 449, 450, 451, 454, 459, 460, 471, 474, 475, 483, 484, 486], "singleton": [109, 405], "specifi": [109, 158, 165, 196, 197, 200, 201, 229, 230, 244, 245, 271, 277, 282, 286, 289, 292, 301, 306, 314, 315, 335, 339, 340, 373, 392, 394, 404, 405, 416, 417, 440, 444, 450, 451, 459, 473, 477, 485, 486, 488], "graphrewriterhelp": 109, "encapsul": [109, 200, 201, 244, 245, 340, 373, 394, 453], "quantize_lay": [110, 111, 113], "fake_quant": [110, 111, 113], "quantize_config": [110, 111, 113, 416], "quantize_help": [110, 111, 113], "quantize_wrapp": [110, 111, 113], "fuse_qdq_bn": [110, 111, 129], "fuse_qdq_concatv2": [110, 111, 129], "fuse_qdq_conv": [110, 111, 129], "fuse_qdq_deconv": [110, 111, 129], "fuse_qdq_in": [110, 111, 129], "fuse_qdq_matmul": [110, 111, 129], "fuse_qdq_pool": [110, 111, 129], "optimize_qdq": [110, 111, 129], "optimize_lay": [111, 113, 116], "quantize_layer_add": [111, 113, 116], "quantize_layer_bas": [111, 113, 116], "quantize_layer_bn": [111, 113, 116], "fakequantizebas": 112, "abc": [112, 284, 337, 415, 484, 486], "appli": [112, 125, 126, 127, 130, 132, 136, 153, 157, 166, 185, 187, 239, 280, 333, 409, 416, 417, 451, 454, 456, 462, 471, 474, 475, 478, 479, 482, 483, 486, 487, 488], "fakequant": 112, "per_channel": [112, 416, 417, 444, 478, 488], "num_bit": [112, 153, 158, 159, 483], "8": [112, 159, 196, 197, 228, 270, 411, 416, 433, 444, 448, 475, 476, 480, 483, 486, 489], "channel_axi": [112, 161, 164], "symmetr": [112, 417, 478, 485, 486], "narrow_rang": 112, "quantizeconfig": [114, 115], "custom": [114, 159, 165, 315, 339, 350, 404, 432, 438, 439, 454, 475, 476, 480, 482], "There": [114, 315, 317, 374, 376, 437, 438, 444, 447, 451, 454, 480, 483, 486, 488], "instanc": [114, 115, 165, 196, 197, 200, 201, 230, 244, 245, 283, 284, 286, 289, 292, 295, 296, 298, 299, 300, 318, 330, 336, 337, 339, 340, 373, 377, 391, 394, 402, 405, 409, 411, 415, 432, 451, 456, 462, 486, 488, 489], "global": [114, 176, 196, 197, 295, 296, 298, 299, 300, 309, 391, 405, 411, 451, 475, 477, 486], "class": [115, 158, 177, 184, 293, 340, 373, 411, 412, 416, 434, 435, 438, 450, 451, 462, 473, 474, 478, 481, 484, 486, 488], "init_quantize_config": 115, "quantize_recip": 115, "begin": [115, 182, 183, 188, 311, 434, 438, 439, 451, 475, 486], "process": [115, 139, 150, 165, 176, 181, 182, 183, 190, 192, 196, 197, 200, 201, 212, 213, 214, 225, 229, 230, 244, 245, 256, 257, 258, 268, 271, 309, 311, 313, 317, 318, 340, 373, 374, 376, 377, 394, 404, 405, 412, 415, 416, 417, 433, 434, 435, 438, 439, 440, 442, 451, 455, 474, 475, 478, 483, 484, 485, 488], "model_nam": [115, 196, 197], "special": [115, 174, 350, 411, 434, 450, 451, 473, 475, 487], "decid": [115, 196, 197, 280, 311, 333, 415, 416, 451, 478, 481, 486], "qat_clone_funct": 115, "leav": [115, 465], "quantizewrapp": [115, 121], "wrapped_lay": 115, "config_quantizable_lay": 117, "quantizelayeradd": 118, "quantizelay": 119, "quantizelayerbas": 119, "quantizelayerbatchnorm": 120, "quantizewrapperbas": 121, "fusedbatchnormv3": [122, 132], "fusenodestartwithfusedbatchnormv3": [122, 132], "_quantizedfusedbatchnorm": 122, "concatv2": [123, 133, 146, 444], "fusenodestartwithconcatv2": [123, 133], "quantizedconcatv2": [123, 133], "fusenodestartwithconv2d": [124, 134], "conv2dbackpropinput": 125, "conv3dbackpropinputv2": 125, "fusenodestartwithdeconv2d": 125, "fusedinstancenorm": 126, "fusenodestartwithfusedinstancenorm": 126, "batchmatmul": 127, "batchmatmulv2": 127, "fusenodestartwithmatmul": [127, 136], "avgpool": [128, 137, 444], "fusenodestartwithpool": [128, 137], "optimizeqdqgraph": 130, "input_graph": [130, 135, 142, 368, 372, 415], "op_wise_sequ": [130, 135], "quantizegraph": 131, "quantizegraphbas": 131, "quantizenodebas": 131, "quantizegraphforintel": 135, "common": [138, 197, 227, 278, 288, 292, 293, 294, 331, 397, 409, 435, 439, 440, 442, 446, 448, 451, 478, 483], "herlper": 138, "quantizegraphhelp": 138, "sever": [138, 190, 229, 271, 313, 412, 437, 438, 439, 447, 451, 452, 464, 468, 475, 477, 483, 485, 486, 488], "staticmethod": 138, "function": [138, 182, 183, 188, 196, 197, 200, 201, 213, 244, 245, 257, 289, 292, 301, 306, 411, 412, 415, 416, 417, 432, 434, 438, 439, 442, 446, 447, 448, 450, 451, 452, 462, 472, 475, 478, 481, 482, 483, 484, 486, 487], "smoothquantcalibr": 139, "dataset": [139, 140, 158, 200, 201, 202, 204, 205, 207, 208, 209, 210, 211, 223, 232, 244, 245, 246, 248, 249, 251, 252, 253, 254, 255, 267, 278, 282, 283, 284, 286, 315, 331, 335, 336, 337, 339, 340, 373, 394, 397, 412, 414, 415, 416, 434, 440, 445, 450, 451, 459, 475, 478, 481, 483, 486, 488, 489], "outlier": [139, 416, 433, 437, 480, 483], "ignor": [139, 405, 433, 435, 480, 483], "smoothquantscal": 140, "alpha": [140, 153, 163, 170, 189, 478], "scales_per_op": 140, "method": [140, 142, 158, 159, 189, 196, 197, 205, 210, 211, 212, 214, 221, 229, 232, 249, 254, 255, 256, 258, 265, 271, 292, 293, 294, 328, 389, 391, 397, 398, 400, 401, 411, 412, 414, 433, 434, 435, 437, 438, 439, 450, 451, 474, 475, 478, 479, 480, 483, 485, 486], "individu": [140, 176, 309, 367, 372, 409, 475, 483], "tensorflowqdqtoonnxqdqconvert": 141, "shape_overrid": 141, "inputs_as_nchw": [141, 275], "default_opset_vers": 141, "bia": [142, 196, 197, 484], "correct": [142, 164, 192, 196, 197, 282, 283, 284, 286, 310, 335, 336, 337, 339, 409, 454], "biascorrect": 142, "fp32_graph": 142, "weight_empir": 142, "Will": [142, 438, 447], "our": [142, 158, 196, 197, 412, 414, 442, 451, 472, 482, 487], "task": [142, 212, 219, 256, 263, 286, 339, 435, 438, 439, 442, 447, 450, 451, 475, 480, 483], "close": [142, 164, 433], "w_int8": [142, 164], "u": [142, 164, 414, 454], "w_fp32": [142, 164], "varianc": [142, 164, 437], "ratio": [142, 164, 176, 181, 192, 196, 197, 225, 229, 268, 271, 311, 435, 451, 475, 485, 489], "differ": [142, 160, 164, 167, 185, 196, 197, 205, 214, 229, 231, 249, 258, 271, 277, 286, 292, 294, 303, 314, 339, 350, 399, 409, 411, 412, 416, 434, 435, 437, 438, 440, 441, 446, 447, 450, 451, 453, 464, 468, 473, 475, 478, 483, 484, 485, 486], "wise": [142, 159, 164, 196, 197, 318, 321, 377, 378, 382, 416, 447, 475, 484, 486, 488], "minim": [142, 164, 318, 377, 416, 417, 433, 438, 441, 450, 451, 464, 468, 475, 478, 486], "round": [142, 159, 164, 478, 480, 483], "scale_c": [142, 164], "shift": [142, 164, 225, 268, 472, 485], "notic": [142, 164, 230, 449, 452, 481], "first": [142, 164, 175, 194, 196, 197, 212, 256, 282, 328, 335, 378, 389, 405, 411, 412, 415, 416, 417, 435, 437, 448, 452, 456, 465, 466, 469, 472, 477, 478, 479, 480, 482, 483, 484, 486, 488], "empir": [142, 164], "solut": [142, 164, 414, 415, 416, 443, 456, 460, 465, 476, 481, 483, 486, 487], "don": [142, 164, 176, 196, 197, 411, 475, 486], "min": [142, 159, 164, 405, 437, 475, 478, 483, 485, 486], "graphtransform": 143, "graphtransformbas": 143, "input_pb": [143, 145, 146], "log": [145, 165, 174, 356, 357, 361, 401, 411, 462, 482, 484, 486], "insertlog": 145, "node_name_list": 145, "show_nam": 145, "show_op": 145, "first_n": 145, "summar": [145, 438], "1024": [145, 214, 258, 457], "dump_fp32": 145, "rerang": 146, "rerangequantizedconcat": 146, "rerange_quant": 146, "version1_lt_version2": [147, 405], "version1": [147, 405], "version2": [147, 405], "version1_gt_version2": [147, 405], "greater": [147, 405, 475, 486], "version1_eq_version2": [147, 405], "version1_gte_version2": [147, 405], "version1_lte_version2": [147, 405], "disable_random": 147, "seed": [147, 196, 197, 294, 405, 451, 488], "disabl": [147, 196, 197, 409, 471, 479], "read_graph": 147, "in_graph": 147, "in_graph_is_binari": 147, "write_graph": 147, "out_graph_def": 147, "out_graph_fil": 147, "write": [147, 221, 265, 405, 440, 446, 451, 454, 484], "is_ckpt_format": 147, "model_path": [147, 437], "ckpt": [147, 340, 348, 373, 489], "folder": [147, 214, 219, 258, 263, 340, 373, 404, 435, 459, 464, 468, 480, 484], "is_saved_model_format": 147, "saved_model": [147, 288], "get_estimator_graph": 147, "estim": [147, 286, 339, 348, 486], "input_fn": [147, 348], "get_tensor_by_nam": 147, "try_cnt": 147, "consid": [147, 286, 339, 409, 433, 438, 472, 486], "import": [147, 165, 196, 197, 288, 340, 350, 373, 392, 394, 405, 411, 412, 414, 417, 432, 434, 435, 437, 438, 439, 440, 442, 445, 450, 451, 452, 453, 454, 458, 460, 473, 474, 475, 477, 478, 479, 481, 482, 483, 484, 485, 486, 487], "scope": [147, 416, 451], "onc": [147, 190, 236, 313, 317, 374, 376, 416, 417, 434, 471, 475, 476, 486, 489], "both": [147, 197, 409, 412, 415, 439, 451, 455, 475, 477, 478, 483, 486], "compat": [147, 348, 440, 453, 466, 469, 471, 481], "v1": [147, 224, 225, 268, 283, 284, 286, 336, 337, 339, 348, 440, 442, 443, 450, 453, 475, 481, 482, 489], "suffix": 147, "time": [147, 196, 197, 229, 271, 286, 318, 339, 350, 377, 405, 416, 434, 437, 440, 443, 451, 459, 461, 464, 468, 471, 472, 473, 475, 476, 478, 480, 482, 484, 485, 486], "got": [147, 416, 443, 484], "iterator_sess_run": 147, "sess": [147, 348], "iter_op": 147, "feed_dict": [147, 211, 255], "output_tensor": [147, 348], "measur": [147, 230, 340, 399, 412, 415, 432, 437, 438, 450, 451, 480, 484, 486, 489], "integr": [147, 167, 231, 415, 451, 472, 480], "session": [147, 211, 255, 348, 451, 484], "makeiter": 147, "feed": [147, 211, 255, 438, 475], "end": [147, 181, 182, 183, 188, 196, 197, 212, 228, 229, 256, 270, 271, 311, 317, 374, 376, 415, 416, 417, 438, 439, 444, 448, 451, 465, 473, 475, 484, 485, 486], "predict": [147, 229, 234, 271, 279, 283, 284, 286, 332, 336, 337, 339, 373, 412, 438, 450, 462, 480, 483, 484, 485], "pred": [147, 286, 339, 450], "collate_tf_pr": 147, "collat": [147, 158, 434], "tbe": 147, "get_input_output_node_nam": 147, "fix_ref_type_of_graph_def": 147, "fix": [147, 186, 188, 212, 256, 311, 410, 434, 435, 458, 475, 483, 486], "strip_unused_lib": 147, "offici": [147, 279, 283, 284, 332, 336, 337, 409, 483], "r1": 147, "15": [147, 444, 448], "branch": 147, "get_graph_def": 147, "auto_input_output": 147, "get_model_input_shap": 147, "inout": 147, "get_tensor_val_from_graph_nod": 147, "graph_node_name_map": 147, "kei": [147, 150, 155, 174, 185, 192, 194, 196, 197, 293, 310, 348, 392, 395, 397, 405, 414, 416, 476, 480, 484, 486], "val": [147, 192, 214, 217, 258, 261, 310, 437, 451], "tensor_v": 147, "int8_node_name_revers": 147, "revers": 147, "tf_diagnosis_help": 147, "fp32_model": [147, 150, 158, 276, 405, 415], "quan_model": 147, "save_path": [147, 275, 276, 415, 453], "diagnosi": [147, 196, 197, 451, 476, 481, 487], "generate_feed_dict": 147, "input_tensor": [147, 348], "get_weight_from_input_tensor": 147, "input_tensor_nam": [147, 348], "associ": [147, 282, 335], "quant": [147, 158, 159, 196, 197, 328, 389, 411, 451, 478], "search": [147, 149, 174, 188, 193, 200, 201, 244, 245, 277, 279, 289, 292, 293, 294, 314, 318, 332, 377, 414, 447, 450, 454, 455, 465, 476, 480, 484, 486, 487], "look": [147, 185, 414, 415, 417, 444, 450, 488], "sq_weight_tensor": 147, "sq_weights_nod": 147, "two": [147, 150, 165, 175, 180, 187, 190, 214, 219, 230, 258, 263, 282, 309, 313, 315, 322, 335, 383, 405, 411, 412, 434, 435, 438, 440, 442, 444, 451, 452, 478, 479, 480, 482, 486, 488], "torch": [148, 149, 150, 151, 153, 154, 155, 156, 158, 159, 163, 174, 175, 177, 185, 193, 196, 197, 241, 276, 340, 373, 404, 411, 414, 417, 418, 438, 440, 442, 451, 452, 453, 454, 459, 462, 478, 483, 484], "bf16modulewrapp": 148, "bf16modul": 148, "mix": [148, 152, 196, 197, 316, 328, 340, 375, 389, 414, 415, 422, 447, 454, 460, 461, 462, 487], "precis": [148, 152, 196, 197, 200, 201, 244, 245, 277, 284, 286, 287, 314, 316, 328, 337, 339, 340, 350, 375, 378, 389, 405, 414, 415, 416, 422, 432, 433, 439, 440, 444, 447, 454, 460, 461, 462, 476, 477, 478, 483, 486, 487], "mixed_precision_model": 148, "bf16_symbolic_trac": 148, "fx_sub_module_list": 148, "trace": [148, 150, 156, 158, 174, 196, 197, 276, 380, 411, 461, 486], "_description_": 148, "is_leaf": 149, "judg": 149, "nn": [149, 153, 155, 158, 159, 174, 175, 185, 196, 197, 241, 276, 340, 373, 404, 411, 438, 451, 453, 483, 484], "trace_gptq_target_block": 149, "module_typ": 149, "modulelist": 149, "stack": 149, "structur": [149, 175, 186, 187, 196, 197, 311, 329, 390, 447, 470, 472, 475, 478, 484, 487, 489], "critic": [149, 185, 409], "llm": [149, 480, 483], "gptq_related_block": 149, "embed": [149, 158, 433, 475], "transfrom": 149, "transformers_pr": 149, "todo": [149, 212, 215, 256, 259, 282, 328, 335, 389], "transformers_nam": 149, "find_lay": 149, "conv1d": [149, 417], "find_layers_nam": 149, "log_quantizable_layers_per_transform": 149, "transformer_block": 149, "maxq": 149, "gptquantiz": 149, "weight_config": [149, 157, 159], "compress": [149, 278, 301, 306, 331, 350, 394, 407, 414, 422, 438, 447, 451, 471, 473, 474, 475, 476, 478, 480, 483, 487, 489], "pretrain": [149, 400, 454, 460], "url": [149, 214, 258, 449], "arxiv": [149, 170, 188, 311, 433, 475, 480, 483], "org": [149, 170, 188, 282, 311, 335, 410, 411, 437, 448, 466, 469], "2210": [149, 480], "17323": [149, 480], "hessian": [150, 380, 486], "awar": [150, 159, 166, 197, 239, 288, 309, 380, 394, 414, 415, 416, 417, 433, 439, 440, 442, 447, 471, 474, 476, 480, 486], "node_collector": 150, "hook": [150, 166, 185, 238, 239, 301, 306, 397, 438, 439, 451, 475, 483, 484], "record": [150, 158, 159, 167, 212, 213, 214, 220, 231, 238, 256, 257, 258, 264, 405, 435, 482, 484, 486], "hessiantrac": 150, "q_model": [150, 197, 288, 373, 411, 414, 434, 435, 437, 440, 442, 445, 446, 450, 451, 453, 478, 479, 480], "criterion": [150, 166, 168, 169, 170, 176, 181, 182, 183, 185, 188, 191, 196, 197, 233, 236, 278, 331, 438, 439, 451, 475, 478, 486, 488], "yao": 150, "zhewei": 150, "et": [150, 433, 480, 483], "al": [150, 433, 480, 483], "pyhessian": 150, "network": [150, 170, 176, 177, 311, 380, 412, 433, 438, 439, 442, 451, 476, 478, 483, 486], "through": [150, 200, 201, 244, 245, 339, 340, 373, 414, 432, 444, 446, 447, 450, 457, 473, 474, 475, 477, 478, 483], "len": [150, 197, 229, 271, 435, 440, 485], "2020": 150, "ieee": [150, 452, 483], "intern": [150, 328, 389, 434, 435, 450, 475], "confer": [150, 475, 483], "big": [150, 437], "dong": 150, "zhen": 150, "hawq": [150, 380, 486], "v2": [150, 380, 434, 440, 442, 443, 448, 460, 481, 486, 487, 489], "advanc": [150, 196, 197, 409, 414, 416, 422, 478, 488], "system": [150, 165, 230, 405, 432, 457, 489], "33": [150, 489], "18518": 150, "18529": 150, "openvinotoolkit": 150, "nncf": 150, "develop": [150, 350, 410, 411, 448, 451, 452, 454, 460, 471, 475, 476, 479, 482], "hessian_trac": 150, "compare_weight": 150, "float_dict": 150, "ani": [150, 282, 284, 327, 335, 337, 367, 372, 388, 392, 402, 405, 409, 410, 414, 417, 440, 454, 459, 472, 475, 482], "quantized_dict": 150, "compar": [150, 286, 339, 405, 439, 450, 475, 478, 480, 482, 484, 486], "being": [150, 282, 335, 417], "wt_compare_dict": 150, "float_model": 150, "state_dict": [150, 440, 484], "qmodel": 150, "compute_error": 150, "state": [150, 175, 417, 457, 475], "weight_dict": 150, "hawq_top": 150, "enable_act": 150, "modul": [151, 177, 184, 291, 297, 307, 308, 411, 434, 438, 447, 450, 451, 453, 475, 477, 479, 484, 487], "ipex_mixed_precis": 152, "example_input": [152, 155, 157, 158, 159, 196, 197, 276, 442], "fakeaffinetensorquantfunct": 153, "affin": [153, 478], "teqlinearfakequ": 153, "orig_lay": 153, "group_siz": [153, 158, 159, 391, 480], "teqmullinear": 153, "input_scal": 153, "trainabl": [153, 157], "teq": 153, "detector": 154, "transformerbasedmodelblockpatterndetector": 154, "pattern_lst": 154, "block_pattern": 154, "detect": [154, 158, 174, 196, 197, 282, 286, 335, 339, 344, 411, 454, 461, 462, 475, 486], "ffn": [154, 185], "get_modul": 155, "set_modul": [155, 158], "new_modul": [155, 158], "torchsmoothqu": [155, 483], "q_func": [155, 200, 201, 244, 245, 318, 321, 323, 324, 374, 377, 378, 382, 384, 385, 415, 451, 486], "traced_model": [155, 156], "whose": [155, 163, 176, 310, 446, 483, 486], "could": [155, 163, 176, 200, 201, 214, 244, 245, 258, 315, 340, 373, 394, 409, 411, 439, 451, 474, 475, 478, 480, 483, 487], "absorb": [155, 159, 163], "later": [155, 163, 484], "graphtrac": 155, "trace_and_fuse_sub_graph": 156, "is_qat": 156, "tequant": 157, "get_embedding_contigu": 158, "contigu": 158, "is_fused_modul": 158, "_propagate_qconfig_help": 158, "collate_torch_pr": 158, "fetch": [158, 162, 205, 249, 416, 435], "collate_result": 158, "input2tupl": 158, "append_attr": 158, "fx_model": 158, "fx_white_list": 158, "append": [158, 315, 318, 377, 411, 439, 451, 474], "graphmodul": [158, 411, 479], "addit": [158, 197, 394, 416, 417, 438, 465, 481, 486], "dir": [158, 212, 256, 404, 435, 443, 446], "generate_activation_observ": 158, "observ": [158, 417, 482, 484, 486], "what": [158, 181, 210, 254, 339, 373, 394, 409, 476], "check_cfg_and_qconfig": 158, "op_infos_from_cfg": 158, "output_tensor_ids_op_nam": 158, "paser_cfg": 158, "ops_nam": 158, "get_quantizable_ops_from_cfg": 158, "input_tensor_ids_op_nam": 158, "update_sq_scal": 158, "ipex_config_path": 158, "smoothquant_scale_info": 158, "ipex_config": 158, "json": [158, 213, 229, 257, 271, 435, 453, 472, 480, 485], "temporari": [158, 405, 409], "auto_copi": 158, "fetch_modul": 158, "op_nam": [158, 193, 196, 197, 329, 390, 405, 406, 416, 451, 475, 484], "simple_infer": 158, "get_example_input": 158, "example_inp": 158, "get_fallback_ord": 158, "confidence_batch": [158, 486], "fallback": [158, 197, 321, 322, 380, 382, 383, 442, 452, 479, 486], "requantize_cfg": 158, "fall": 158, "back": [158, 229, 235, 271, 437, 471], "order": [158, 279, 280, 315, 318, 321, 330, 332, 333, 377, 382, 391, 411, 437, 450, 477, 483, 484, 486], "confid": 158, "ordered_op": 158, "get_mse_order_per_fp32": 158, "mse": [158, 159, 196, 197, 278, 286, 320, 331, 339, 373, 381, 405, 437, 450, 477, 480, 481], "influenc": [158, 475], "last": [158, 170, 192, 196, 197, 434, 452, 454, 456, 461, 465, 478, 483], "fallback_ord": 158, "get_mse_order_per_int8": 158, "get_torch_vers": 158, "match_datatype_pattern": 158, "calculate_quant_min_max": 158, "unsign": [158, 330, 391, 417], "qmin": 158, "qmax": 158, "get_depth": 158, "depth": [158, 438, 479], "get_dict_at_depth": 158, "target_depth": 158, "nest": [158, 194], "get_element_under_depth": 158, "ops_lst": 158, "get_op_type_by_nam": 158, "quantizable_op": 158, "collect_weight_info": 158, "fc": [158, 197], "rtn": [158, 480], "param": [158, 165, 202, 230, 236, 246, 286, 318, 339, 377, 405, 415, 453, 486], "configu": 158, "_type_": 158, "qdq_weight_asym": 159, "quantil": [159, 486], "return_int": 159, "clip": [159, 480, 483], "choos": [159, 214, 258, 447, 459, 476, 481, 483, 486, 488], "qdq_weight_sym": 159, "full_rang": 159, "rang": [159, 215, 216, 229, 259, 260, 271, 392, 394, 414, 415, 417, 433, 435, 437, 438, 439, 440, 451, 474, 475, 478, 480, 483, 485], "amax": 159, "qdq_weight_actor": 159, "quant_weight": 159, "group": [159, 189, 296, 447, 475, 480, 484, 485, 486, 489], "how": [159, 166, 170, 176, 182, 183, 188, 196, 197, 229, 271, 272, 309, 410, 411, 413, 415, 434, 435, 438, 439, 440, 446, 450, 451, 465, 466, 469, 470, 471, 475, 476, 478, 483, 485, 486, 487, 488], "mani": [159, 339, 373, 434, 448, 480, 486, 488], "element": [159, 178, 179, 192, 210, 254, 282, 309, 335, 405, 435, 447, 450, 475, 480, 483], "zp": [159, 483], "rtn_quantiz": 159, "32": [159, 172, 391, 440, 446, 483, 489], "sym_full_rang": 159, "nearst": 159, "num": [159, 405, 434], "configir": 159, "fc2": 159, "int32": [159, 435], "gptq_quantiz": 159, "get_module_input_output": 159, "module_hook_config": 159, "calib_func": [159, 373, 479], "help": [159, 238, 288, 453, 454, 460, 471, 480, 486, 487], "module_name_list": 159, "requir": [159, 196, 197, 203, 315, 348, 372, 411, 415, 416, 432, 433, 434, 437, 439, 440, 444, 451, 452, 453, 455, 465, 471, 475, 478, 480, 481, 482, 483, 484, 486, 488], "fc1": 159, "input_valu": 159, "output_valu": 159, "awq_quant": 159, "absorb_dict": 159, "n_sampl": 159, "auto_scal": [159, 480], "mse_rang": [159, 480], "n_block": [159, 480], "5": [159, 163, 167, 196, 197, 216, 225, 231, 260, 268, 286, 339, 373, 415, 435, 442, 444, 450, 451, 475, 477, 478, 480, 483, 485, 486, 488, 489], "awq": [159, 480], "absorb_lay": 159, "absorbed_lay": 159, "fc3": 159, "salient": [159, 475], "oom": 159, "teq_quant": 159, "algorithm_registri": 160, "algorithm_typ": 160, "locat": [160, 192, 229, 271, 440, 457, 464, 468, 471, 478, 481, 485, 488], "registr": [160, 214, 221, 229, 258, 265, 271, 304], "algorithmschedul": 160, "conf": [160, 165, 166, 197, 200, 201, 230, 244, 245, 288, 295, 296, 298, 299, 300, 301, 306, 318, 321, 323, 324, 328, 340, 350, 373, 374, 377, 378, 382, 384, 385, 389, 392, 394, 411, 412, 414, 417, 432, 438, 445, 446, 451, 452, 453, 474, 478, 479, 480, 482, 483, 486], "control": [160, 196, 197, 411, 451, 475, 486], "phase": [160, 412, 451, 475, 478, 479, 486], "fastbiascorrect": [161, 164], "fast_bias_correct": [162, 196, 197, 331, 478], "weight_correct": [162, 196, 197, 331, 478], "kernel": [163, 196, 197, 415, 416, 486], "futur": [163, 200, 201, 232, 244, 245, 447, 451, 462, 487], "weightcorrect": 164, "1e": [164, 483, 488], "05": [164, 197, 286, 339, 450, 483, 489], "evalu": [165, 166, 176, 196, 200, 201, 212, 230, 244, 245, 256, 272, 279, 282, 283, 284, 286, 288, 332, 335, 336, 337, 339, 340, 350, 373, 394, 397, 412, 415, 416, 435, 438, 439, 446, 447, 450, 451, 452, 454, 460, 462, 465, 471, 473, 475, 478, 482, 484, 486, 488], "set_env_var": [165, 230], "env_var": [165, 230], "overwrite_exist": [165, 230], "env": [165, 230, 443], "alreadi": [165, 214, 228, 230, 258, 270, 415, 435, 447, 466, 469, 486], "set_all_env_var": [165, 230], "physic": [165, 230, 409, 432], "core": [165, 196, 197, 230, 432, 449, 464, 468, 489], "get_architectur": [165, 230], "architectur": [165, 230, 289, 292, 414, 432, 438, 451, 475, 476, 480, 487], "get_threads_per_cor": [165, 230], "thread": [165, 196, 197, 230, 367, 372, 434], "get_thread": [165, 230], "get_physical_id": [165, 230], "socket": [165, 230, 405, 489], "get_core_id": [165, 230], "id": [165, 228, 230, 270, 279, 281, 282, 283, 284, 332, 334, 335, 336, 337, 450, 482, 486], "get_bounded_thread": [165, 230], "core_id": [165, 230], "bind": [165, 230], "run_inst": 165, "b_dataload": [165, 196, 197, 432, 451], "b_func": [165, 432], "benchmarkconfig": [165, 196, 197, 432, 437, 451], "accuraci": [165, 192, 196, 197, 200, 201, 244, 245, 272, 277, 286, 301, 306, 314, 339, 340, 350, 373, 378, 392, 394, 402, 411, 414, 416, 417, 433, 434, 435, 437, 439, 440, 441, 442, 450, 451, 462, 471, 473, 474, 475, 476, 477, 480, 481, 482, 483, 484, 487, 488, 489], "goal": [165, 272, 277, 301, 306, 314, 340, 373, 416, 434, 474, 478, 486], "prefer": [165, 277, 314, 373, 475, 480], "space": [165, 182, 183, 188, 196, 197, 200, 201, 244, 245, 277, 284, 289, 292, 293, 294, 314, 318, 321, 328, 337, 340, 373, 377, 382, 389, 409, 410, 412, 415, 416, 417, 475, 478, 488], "etc": [165, 166, 228, 270, 272, 277, 284, 301, 306, 314, 337, 340, 373, 404, 438, 447, 475, 482, 486], "user": [165, 174, 186, 192, 196, 197, 200, 201, 214, 217, 221, 229, 230, 236, 241, 244, 245, 258, 261, 265, 271, 277, 301, 306, 312, 314, 315, 339, 340, 350, 373, 378, 391, 394, 405, 411, 412, 414, 415, 416, 417, 422, 432, 434, 438, 439, 442, 444, 447, 450, 451, 452, 453, 454, 455, 456, 458, 459, 460, 462, 465, 471, 473, 474, 475, 476, 478, 479, 481, 483, 484, 485, 486, 490], "generate_prefix": 165, "core_list": 165, "command": [165, 230, 394, 437, 440, 454, 456, 459, 464, 468, 472], "numactl": [165, 443, 457, 465], "call_on": 165, "cmd": [165, 472], "log_fil": [165, 366, 371], "window": [165, 432, 471, 472], "config_inst": 165, "raw_cmd": 165, "multi": [165, 172, 174, 185, 282, 335, 339, 373, 412, 434, 435, 447, 451, 473, 475, 478, 486], "trigger": [165, 181, 311, 410], "raw": [165, 213, 217, 220, 257, 261, 264, 321, 382, 450, 486], "summary_benchmark": 165, "summari": [165, 394, 437, 466, 469, 484, 489], "profil": [165, 331], "benchmark_with_raw_cmd": 165, "commend": 165, "fit_with_raw_cmd": 165, "cores_per_inst": [165, 196, 197, 432, 451, 477], "num_of_inst": [165, 196, 197, 432, 451, 477], "test": [165, 196, 197, 229, 271, 410, 414, 437, 448, 489], "fit": [165, 176, 196, 197, 318, 340, 373, 377, 392, 394, 411, 414, 432, 434, 435, 437, 440, 445, 446, 450, 451, 452, 453, 475, 478, 479, 480], "pb": [165, 196, 197, 340, 348, 373, 414, 432, 440, 445, 451, 453, 484, 489], "eval_dataload": [165, 196, 197, 200, 201, 244, 245, 315, 318, 321, 323, 324, 340, 373, 374, 377, 378, 382, 384, 385, 394, 432, 446, 450, 451, 478, 486], "compon": [166, 272, 278, 315, 331, 411, 437, 440, 448, 449, 454, 471, 474], "quantizationawaretrainingcallback": 166, "pruningcallback": 166, "distillationcallback": 166, "basecallback": 166, "design": [166, 211, 234, 239, 255, 339, 378, 412, 414, 451, 459, 462, 475, 478, 487], "mainli": [166, 190, 239, 313, 451, 475, 478], "prune": [166, 170, 171, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 196, 197, 239, 240, 278, 295, 296, 298, 299, 300, 304, 306, 307, 309, 310, 311, 313, 315, 331, 405, 414, 440, 441, 444, 445, 447, 474, 476, 487, 488], "distil": [166, 169, 196, 197, 231, 238, 239, 278, 331, 414, 441, 445, 447, 474, 487, 488], "In": [166, 178, 179, 180, 185, 186, 187, 189, 197, 211, 239, 255, 282, 309, 311, 335, 350, 409, 411, 412, 414, 415, 416, 434, 435, 437, 438, 439, 440, 450, 451, 461, 464, 465, 468, 473, 474, 475, 478, 479, 480, 482, 483, 484, 485, 486, 487], "adaptor": [166, 196, 197, 330, 391, 397, 414, 417, 447, 479, 481, 483, 484, 487], "deriv": [166, 170, 178, 179, 180, 186, 187, 188, 189, 190, 191, 272, 309, 311, 313], "pipelin": [166, 272, 289, 290, 315, 439, 451, 474], "knowledg": [166, 167, 196, 197, 231, 272, 439, 441, 445, 447, 451, 453, 488], "transfer": [166, 219, 263, 272, 435, 438, 439, 451, 483], "teacher": [166, 196, 197, 272, 438, 439, 451, 489], "student": [166, 196, 197, 212, 238, 256, 272, 435, 438, 439, 489], "distillation_conf": [166, 193, 272], "_epoch_ran": [166, 272], "integ": [166, 180, 181, 196, 197, 272, 282, 286, 293, 309, 311, 335, 339, 392, 415, 417, 433, 478, 483, 486], "indic": [166, 196, 197, 205, 210, 212, 249, 254, 256, 272, 282, 293, 335, 411, 434, 443, 480, 484], "much": [166, 170, 196, 197, 229, 271, 272, 438, 465, 483, 485], "epoch": [166, 182, 183, 188, 272, 311, 394, 434, 438, 439, 440, 451, 474, 475, 488], "ran": [166, 272], "eval_frequ": [166, 272], "frequenc": [166, 181, 196, 197, 272, 311, 451, 475, 488], "term": [166, 182, 183, 188, 189, 272, 410, 433, 438, 449, 450, 473, 474, 486], "best_scor": [166, 272], "best": [166, 229, 271, 272, 277, 314, 321, 382, 409, 412, 448, 454, 460, 471, 473, 478, 480, 485, 486], "metric": [166, 196, 197, 200, 201, 233, 244, 245, 272, 277, 278, 293, 301, 306, 314, 315, 331, 340, 373, 394, 397, 412, 415, 416, 435, 437, 440, 451, 452, 478, 482, 484, 486, 487, 488, 489], "best_model": [166, 272, 480], "found": [166, 272, 414, 438, 452, 459, 483, 486, 489], "critet": [167, 231], "includ": [167, 170, 174, 176, 189, 191, 196, 197, 212, 214, 221, 229, 231, 256, 258, 265, 271, 277, 287, 309, 314, 392, 405, 409, 410, 415, 416, 417, 434, 435, 437, 448, 449, 450, 451, 454, 457, 460, 465, 475, 478, 479, 484, 486], "tensorflowknowledgedistillationloss": [167, 231], "pytorchknowledgedistillationloss": [167, 231, 451], "pytorchintermediatelayersknowledgedistillationloss": [167, 231], "tensorflowcriterion": [167, 231], "pytorchcriterion": [167, 231], "criterion_registri": [167, 231], "criterion_typ": [167, 231], "registry_criterion": [167, 231], "knowledgedistillationframework": [167, 231], "student_model": [167, 197, 231, 451], "teacher_model": [167, 196, 197, 231, 438, 439, 451], "knowledgedistillationloss": [167, 231, 451, 488], "temperatur": [167, 196, 197, 231, 451, 488], "loss_typ": [167, 196, 197, 231, 451, 488], "ce": [167, 196, 197, 231, 451, 488], "loss_weight": [167, 196, 197, 231, 451, 488], "pytorchknowledgedistillationlosswrapp": [167, 231], "param_dict": [167, 231, 236], "tensorflowknowledgedistillationlosswrapp": [167, 231], "tensorflowknowledgedistillationlossextern": [167, 231], "intermediatelayersknowledgedistillationloss": [167, 231], "layer_map": [167, 197, 231, 438], "add_origin_loss": [167, 197, 231], "pytorch": [167, 174, 177, 180, 181, 184, 196, 197, 211, 212, 214, 217, 221, 229, 231, 236, 238, 255, 256, 258, 261, 265, 271, 276, 277, 286, 287, 307, 309, 312, 314, 322, 331, 339, 340, 349, 373, 383, 398, 405, 411, 412, 414, 415, 416, 417, 433, 434, 438, 439, 441, 444, 447, 448, 451, 452, 453, 454, 456, 459, 460, 461, 462, 471, 475, 476, 477, 480, 481, 483, 486, 488], "pytorchintermediatelayersknowledgedistillationlosswrapp": [167, 231], "selfknowledgedistillationloss": [167, 231], "selfknowledg": [167, 231], "pytorchselfknowledgedistillationloss": [167, 231], "pytorchselfknowledgedistillationlosswrapp": [167, 231], "pruner": [169, 278, 295, 296, 297, 298, 299, 301, 306, 307, 309, 312, 331, 451, 475, 488], "model_slim": [169, 171, 185], "auto_slim": [169, 171, 173], "pattern_analyz": [169, 171, 173], "weight_slim": [169, 171, 173, 185], "mha": [169, 171, 177, 184], "ninm": [169, 171, 177], "nxm": [169, 171, 177, 187, 196, 197, 305, 309, 475], "basic": [169, 171, 174, 176, 184, 196, 197, 228, 270, 278, 289, 309, 320, 324, 327, 331, 381, 385, 388, 394, 447, 448, 451, 477, 482], "block_mask": [169, 171, 184], "pattern_lock": [169, 171, 184, 196, 197, 278, 297, 331], "progress": [169, 171, 184, 214, 258, 465, 471, 475, 478], "retrain_fre": [169, 170, 171, 184], "criteria": [169, 171, 196, 197, 277, 301, 306, 309, 311, 314, 411, 471, 483], "reg": [169, 171, 182, 183, 188], "schedul": [169, 171, 181, 182, 183, 188, 189, 196, 197, 278, 307, 311, 331, 451, 474], "tf_criteria": [169, 171], "callback": [169, 301, 306, 394, 397, 411, 451, 474, 475, 478], "register_criterion": [170, 191], "registri": [170, 176, 181, 189, 190, 191, 309, 311, 313, 412], "get_criterion": 170, "pruningcriterion": [170, 191], "about": [170, 191, 405, 409, 434, 451, 479, 486, 487, 489], "module_nam": [170, 181, 182, 183, 184, 186, 187, 188, 189, 191, 311, 405], "store": [170, 174, 181, 182, 183, 184, 185, 186, 187, 188, 189, 191, 196, 197, 214, 258, 304, 311, 446], "score": [170, 176, 181, 185, 191, 196, 197, 279, 280, 282, 283, 284, 286, 311, 332, 333, 335, 336, 337, 339, 380, 397, 411, 450, 473, 475, 482, 486], "magnitudecriterion": [170, 191], "magnitud": [170, 191, 196, 197, 278, 286, 297, 331, 339, 447, 475], "criterion_class": [170, 191], "determin": [170, 176, 181, 191, 196, 197, 399, 409, 411, 433, 475, 478, 483], "gradientcriterion": 170, "gradient": [170, 295, 447, 451, 475, 489], "absolut": [170, 196, 197, 286, 339, 450, 451, 475, 478, 486], "snipcriterion": 170, "snip": [170, 196, 197, 311, 447, 475, 489], "product": [170, 414, 447, 452, 454, 455, 471, 476, 478, 482, 486], "singl": [170, 190, 196, 197, 205, 212, 229, 249, 256, 271, 282, 311, 313, 335, 339, 373, 411, 435, 437, 448, 475], "shot": [170, 188, 190, 239, 311, 313, 412, 447, 451, 475, 476], "connect": [170, 311, 471, 475, 482], "sensit": [170, 295, 311, 447, 475], "1810": [170, 311], "02340": [170, 311], "snipmomentumcriterion": 170, "snip_momentum": [170, 196, 197, 451, 475], "momentum": [170, 311, 447, 451, 475, 488], "mechan": [170, 475, 482, 487], "preserv": [170, 433], "step": [170, 180, 181, 182, 183, 187, 188, 190, 196, 197, 309, 311, 313, 394, 416, 417, 437, 438, 439, 440, 451, 466, 469, 471, 474, 475, 477, 479, 480, 482, 483, 484, 486], "beta": 170, "snipmomentumblockcriterion": 170, "9": [170, 196, 197, 411, 448, 451, 475, 477, 483, 486, 488, 489], "snip_momentum_block": 170, "retrainfreecriterion": 170, "auto": [172, 174, 196, 197, 316, 331, 375, 381, 405, 411, 433, 454, 457, 459, 461, 462, 475, 478, 480], "slim": [172, 173, 174, 282, 335, 346, 348, 453, 475], "round_multipli": 172, "spars": [172, 186, 311, 435, 476], "automat": [172, 174, 175, 196, 197, 214, 217, 224, 225, 258, 261, 268, 277, 287, 314, 411, 414, 432, 435, 447, 451, 452, 454, 456, 459, 460, 462, 464, 465, 466, 468, 469, 471, 474, 475, 478, 483, 485, 486], "model_slim_ffn2": 172, "some": [172, 174, 196, 197, 212, 256, 310, 416, 417, 435, 437, 442, 448, 450, 451, 473, 475, 478, 479, 480, 483, 484, 486, 487, 489], "part": [172, 181, 309, 311, 411, 448, 452, 466, 469, 475, 483, 487], "perman": [172, 409, 475], "obtain": [172, 174, 183, 188, 189, 192, 310, 411, 416, 475, 482, 483, 486], "acceler": [172, 414, 438, 451, 454, 462, 471, 475, 476, 479, 480, 483, 486], "directli": [172, 196, 197, 211, 255, 282, 286, 310, 335, 339, 450, 451, 458, 475, 477, 478, 484], "sprase": 172, "multipl": [172, 196, 197, 198, 199, 203, 204, 212, 213, 215, 216, 217, 218, 219, 223, 226, 229, 236, 242, 243, 247, 248, 250, 256, 257, 259, 260, 261, 262, 263, 267, 269, 271, 287, 340, 341, 342, 344, 350, 432, 435, 442, 451, 474, 475, 482, 483, 486], "model_slim_mha": 172, "parse_auto_slim_config": 172, "ffn2_sparsiti": 172, "mha_spars": 172, "generate_ffn2_pruning_config": 172, "consecut": [172, 174, 175, 475], "generate_mha_pruning_config": 172, "head": [172, 174, 178, 185, 192, 475, 489], "get_attribut": 174, "level": [174, 378, 392, 401, 409, 483, 486], "descent": 174, "get_common_modul": 174, "layer1": [174, 196, 197, 451, 475, 478], "layer2": [174, 451, 475, 478], "nearest": [174, 229, 271, 480, 485], "father": 174, "print_iter": 174, "recipesearch": 174, "searcher": [174, 294], "root": [174, 212, 213, 214, 217, 256, 257, 258, 261, 286, 339, 435, 440, 450, 451, 488], "levelwis": 174, "wai": [174, 213, 214, 217, 257, 258, 261, 412, 417, 434, 435, 437, 450, 451, 454, 457, 472, 474, 475, 478, 480, 483, 486, 488], "huggingfac": [174, 185, 212, 256, 400, 435, 441, 445, 459, 460, 461, 462, 483, 489], "bert": [174, 197, 208, 211, 212, 229, 252, 255, 256, 271, 414, 435, 438, 450, 452, 459, 475, 485, 489], "recipe_sampl": 174, "bertattent": 174, "dens": [174, 190, 196, 197, 313, 475, 489], "infom": [174, 232], "searching_result": 174, "jitbasicsearch": 174, "placeholder_shap": 174, "placeholder_dtyp": 174, "By": [174, 196, 197, 279, 332, 416, 417, 450, 453, 464, 465, 468, 476, 486], "jit": [174, 196, 454, 456, 461, 483, 484], "script": [174, 279, 280, 283, 284, 332, 333, 336, 337, 440, 447, 454, 458, 461, 462, 465, 476], "them": [174, 212, 256, 411, 417, 434, 437, 442, 444, 446, 474, 475, 480, 486], "static_graph": 174, "flatten_static_graph": 174, "target_lay": 174, "linear2linearsearch": 174, "target_op_lut": 174, "lookup": 174, "tabl": [174, 185, 405, 417, 437, 442, 489], "code": [174, 200, 201, 230, 244, 245, 288, 312, 315, 373, 394, 411, 414, 415, 416, 417, 435, 438, 439, 440, 446, 447, 449, 450, 454, 456, 458, 459, 460, 462, 465, 471, 473, 474, 475, 476, 477, 478, 482, 483, 484, 485], "current_pattern": 174, "statu": [174, 402, 409, 434, 473, 475], "selfmhasearch": 174, "classifierheadsearch": 174, "final": [174, 181, 192, 311, 416, 451, 457, 473, 475, 478, 481, 486], "classifi": [174, 192, 212, 256, 286, 339, 435, 438], "classifierheadsearchertf": 174, "squeezer": 175, "postcompressionutil": 175, "librari": [175, 233, 278, 331, 367, 407, 410, 414, 448, 451, 452, 456, 465, 471, 476, 478], "relat": [175, 189, 272, 282, 301, 306, 309, 335, 391, 397, 417, 454, 475, 488], "linearcompress": 175, "root_linear": 175, "target_linear": 175, "also": [175, 211, 214, 229, 255, 258, 271, 279, 332, 339, 350, 373, 410, 412, 415, 416, 417, 434, 437, 441, 445, 447, 450, 451, 454, 459, 464, 465, 468, 471, 472, 473, 475, 476, 478, 479, 483, 486], "while": [175, 186, 192, 311, 318, 377, 415, 416, 435, 441, 447, 452, 454, 459, 471, 477, 478, 480, 483], "hidden": [175, 180, 309, 415], "layer_1": 175, "act_fn": 175, "layer_2": 175, "linearcompressioniter": 175, "linear_pattern": 175, "register_pattern": [176, 309], "sure": [176, 181, 190, 309, 311, 313, 432], "basepattern": [176, 178, 180], "unit": [176, 309, 410, 475], "e": [176, 196, 197, 409, 438, 441, 445, 454, 459, 460, 464, 468, 475, 480, 483, 486], "4x1": [176, 196, 197, 305, 451, 475, 489], "is_glob": [176, 309], "local": [176, 196, 197, 309, 405, 464, 468, 475, 482], "contrast": [176, 309, 485], "keep_mask_lay": 176, "invalid_lay": 176, "max_sparsity_ratio_per_op": [176, 181, 193, 196, 197, 451, 475], "sparsiti": [176, 178, 179, 181, 182, 183, 186, 188, 190, 192, 196, 197, 311, 313, 405, 414, 435, 447, 451, 487, 489], "reach": [176, 190, 196, 197, 313, 410, 414, 434, 475, 486], "min_sparsity_ratio_per_op": [176, 193, 196, 197, 451, 475], "minimum": [176, 196, 197, 417, 433, 437, 451, 462, 475, 486], "target_spars": [176, 193, 196, 197, 451, 475, 477, 488], "pytorchbasepattern": [176, 189], "kerasbasepattern": 176, "get_pattern": [177, 309], "assertionerror": [177, 184, 192, 309, 310, 311, 340], "patternmha": 178, "doc": [178, 179, 196, 197, 309, 327, 328, 339, 373, 388, 389, 392, 405, 450, 451, 466, 469], "md": [178, 179, 196, 197, 309, 339, 373, 416, 433, 440, 478], "n": [178, 179, 196, 197, 213, 229, 257, 271, 280, 309, 333, 392, 417, 435, 437, 438, 475, 478, 480, 483, 485], "pytorchpatternninm": 179, "out": [179, 196, 197, 212, 213, 214, 256, 257, 258, 277, 309, 314, 410, 411, 414, 435, 454, 459, 464, 465, 466, 468, 469, 471, 475, 477, 478, 480], "continu": [179, 282, 309, 335, 412, 451, 472, 475, 487], "pytorchpatternnxm": 180, "kept": [180, 309], "block_siz": [180, 309], "height": [180, 225, 229, 268, 271, 309, 440, 485, 488], "width": [180, 225, 229, 268, 271, 309, 433, 440, 475, 478, 485, 488], "vertic": [180, 229, 271, 309, 485], "becaus": [180, 185, 229, 271, 309, 411, 478, 483, 485, 486], "keraspatternnxm": 180, "register_prun": [181, 311], "baseprun": [181, 186, 188], "current_sparsity_ratio": [181, 311], "global_step": [181, 311], "total": [181, 229, 271, 286, 311, 339, 435, 437, 475, 485, 489], "start_step": [181, 193, 196, 197, 311, 451, 475, 477], "end_step": [181, 193, 196, 197, 311, 451, 475, 477], "pruning_frequ": [181, 193, 196, 197, 451, 475], "target_sparsity_ratio": [181, 311], "show": [181, 405, 409, 438, 440, 451, 457, 472, 483, 486, 487], "pytorchbaseprun": 181, "kerasbaseprun": 181, "pytorchbasicprun": 182, "arrang": [182, 183, 188, 213, 214, 217, 257, 258, 261, 435, 475], "proce": [182, 183, 188], "regul": [182, 183, 188], "kerasbasicprun": 182, "pytorchblockmaskprun": 183, "grad": [183, 188], "parse_valid_pruner_typ": 184, "get_prun": [184, 311], "cuurent": [184, 311], "pythonmultiheadattentionprun": 185, "mha_modul": 185, "partial": [185, 475, 478], "qkv": 185, "feedward": 185, "simultan": [185, 454, 474, 477], "qkv_name": 185, "query_layer_nam": 185, "key_layer_nam": 185, "value_layer_nam": 185, "ffn_name": 185, "attention_ffn_nam": 185, "mha_nam": 185, "keep": [185, 192, 310, 378, 411, 415, 470, 471, 481], "qkv_modul": 185, "ffn_modul": 185, "mha_compress": 185, "mhacompress": 185, "modifi": [185, 214, 241, 258, 372, 391, 411, 417, 440, 444, 475, 488], "linear_lay": 185, "independ": [185, 367, 372, 417], "length": [185, 196, 197, 212, 229, 256, 271, 282, 335, 414, 435, 450, 476, 478, 485], "4x": [185, 412, 478], "subsequ": [185, 416, 454, 471], "head_mask": 185, "mha_head_s": 185, "similar": [185, 451, 477, 483, 486, 488], "mha_scor": 185, "lock": [186, 299, 300, 447, 474, 475], "pytorchpatternlockprun": 186, "parent": [186, 187, 190, 305, 311, 313, 484], "pytorchprogressiveprun": 187, "basicprun": 187, "interpol": [187, 229, 271, 450, 475, 485], "fine": [187, 212, 256, 435, 457, 475, 476, 478], "grain": [187, 475, 476, 486], "improv": [187, 410, 433, 451, 454, 471, 472, 475, 476, 478, 479, 480, 486, 487, 489], "ad": [187, 212, 256, 279, 318, 332, 377, 416, 417, 437, 452, 454, 459, 462, 466, 469, 475, 484], "interv": [187, 475], "retrain": [188, 439, 475], "pytorchretrainfreeprun": 188, "pruner_class": 188, "rearrang": 188, "fast": [188, 196, 197, 414, 476], "retrainfreeprun": 188, "effect": [188, 415, 476], "2204": 188, "09656": 188, "regular": [189, 279, 310, 332], "register_reg": 189, "regulariz": 189, "get_reg_typ": 189, "get_reg": 189, "basereg": 189, "grouplasso": 189, "coeff": 189, "lasso": [189, 296, 447, 475], "select": [189, 197, 212, 256, 411, 412, 433, 447, 448, 471, 475, 478, 484, 486], "reg_term": 189, "coeffient": 189, "register_schedul": [190, 313], "get_schedul": [190, 313], "pruningschedul": 190, "gradual": [190, 313, 475], "oneshotschedul": [190, 313], "iterativeschedul": [190, 313], "get_tf_criterion": 191, "get_sparsity_ratio": 192, "elementwise_over_matmul_gemm_conv": 192, "elementwise_over_al": 192, "blockwise_over_matmul_gemm_conv": 192, "get_sparsity_ratio_tf": 192, "check_config": [192, 310], "prune_config": [192, 310], "everyth": [192, 310, 459], "reset_none_to_default": 192, "undefin": [192, 310], "update_param": 192, "process_weight_config": 192, "global_config": [192, 295, 296, 298, 299, 300], "local_config": [192, 196, 197, 295, 296, 298, 299, 300], "default_config": 192, "pruners_info": 192, "process_yaml_config": 192, "check_key_valid": 192, "template_config": 192, "user_config": 192, "process_and_check_config": [192, 310], "process_config": [192, 310], "parse_last_linear": 192, "often": [192, 434, 438, 474, 475], "act": [192, 210, 254, 409], "might": [192, 411, 486], "caus": [192, 416, 434, 455, 475, 480], "drop": [192, 282, 310, 335, 451, 452, 465, 475, 480, 489], "parse_last_linear_tf": 192, "parse_to_prun": [192, 310], "parse_to_prune_tf": 192, "generate_pruner_config": 192, "dotdict": [192, 193, 197, 350, 405], "prunerv2": 193, "pruning_typ": [193, 196, 197, 451, 475], "pruning_scop": [193, 196, 197, 451, 475], "sparsity_decay_typ": [193, 196, 197, 451, 475], "pruning_op_typ": [193, 196, 197, 451, 475], "reg_typ": 193, "criterion_reduce_typ": 193, "resume_from_pruned_checkpoint": 193, "similiar": 193, "cfg_fname": 193, "parser": 193, "quantization_conf": 193, "pruning_conf": 193, "graph_optimization_conf": [193, 277], "mixedprecision_conf": 193, "benchmark_conf": 193, "nasconfig": [193, 197, 290, 292, 412], "approach": [193, 196, 197, 289, 290, 292, 411, 412, 433, 435, 438, 447, 451, 459, 471, 476, 477, 480, 486, 488], "search_spac": [193, 197, 289, 292, 293, 294], "search_algorithm": [193, 197, 278, 291, 331, 412], "na": [193, 197, 278, 331, 344, 447, 489], "procedur": [193, 412, 475], "deep_get": [194, 350], "dot": [194, 452, 478], "eg": [194, 214, 258, 435, 477], "person": [194, 409, 476], "john": 194, "deep": [194, 414, 415, 416, 434, 447, 448, 451, 452, 454, 456, 459, 460, 462, 465, 471, 476, 478, 486, 487, 489], "deep_set": [194, 350], "sex": [194, 409], "male": 194, "instead": [194, 197, 211, 255, 405, 457, 459, 462, 475], "notat": [194, 197, 405], "pythonic_config": 195, "random_se": [196, 197, 318, 377, 451, 488], "1978": [196, 197], "workspac": [196, 197, 404, 405, 453], "default_workspac": [196, 197], "resume_from": [196, 197, 405], "tensorboard": [196, 197, 397, 405, 415, 451], "set_random_se": [196, 197, 405], "set_workspac": [196, 197, 405], "set_resume_from": [196, 197, 405], "set_tensorboard": [196, 197, 405], "directori": [196, 197, 213, 214, 257, 258, 348, 400, 402, 404, 405, 435, 440, 443, 464, 466, 468, 469, 484], "histori": [196, 197, 404, 405, 471, 486], "nc_workspac": [196, 197], "datetim": [196, 197], "now": [196, 197, 229, 271, 411, 412, 417, 435, 440, 462, 477, 485, 486], "strftime": [196, 197], "d_": [196, 197], "h": [196, 197, 229, 271, 440, 485], "resum": [196, 197, 200, 201, 244, 245, 323, 324, 374, 377, 378, 382, 384, 385], "wa": [196, 197, 415, 451, 476, 486], "flag": [196, 197, 280, 333, 437], "visual": [196, 197, 414, 462, 471, 482, 484, 486, 487], "displai": [196, 197, 327, 328, 388, 389, 405, 471], "2022": [196, 197, 414, 449, 480, 483, 489], "workspace_path": [196, 197], "accuracycriterion": [196, 197, 451, 486], "higher_is_bett": [196, 197, 339, 373, 486, 488], "rel": [196, 197, 350, 451, 477, 486, 488, 489], "tolerable_loss": [196, 197, 451, 486], "01": [196, 197, 451, 477, 480, 486, 488, 489], "higher": [196, 197, 200, 201, 244, 245, 293, 340, 373, 394, 411, 437, 438, 442, 450, 475, 478, 482], "accept": [196, 197, 392, 409, 432, 434], "accuracy_criterion": [196, 197, 350, 451, 473, 477, 486, 488], "avail": [196, 197, 344, 418, 420, 424, 427, 430, 441, 443, 445, 447, 464, 468, 475, 486, 489], "warmup": [196, 197, 432, 451, 477], "inter_num_of_thread": [196, 197, 367, 372, 451, 477], "intra_num_of_thread": [196, 197, 367, 372, 451, 477], "benchmark": [196, 197, 232, 278, 315, 331, 350, 405, 414, 422, 453, 454, 458, 462, 465, 471, 486, 487, 488, 489], "empti": [196, 197, 457], "onnxrt_trt_ep": [196, 197, 452, 478], "onnxrt_cuda_ep": [196, 197, 452, 478], "inter": [196, 197, 210, 214, 254, 258], "intra": [196, 197], "quantizationconfig": 196, "post_training_static_qu": [196, 435, 451, 477, 486], "calibration_sampling_s": [196, 197, 451], "op_type_dict": [196, 197, 417, 477, 478, 480, 486], "op_name_dict": [196, 197, 437, 451, 478, 486], "strategy_kwarg": [196, 197, 482, 486], "timeout": [196, 197, 451, 477, 486, 488], "max_trial": [196, 197, 451, 486], "quant_level": [196, 197, 486], "posttrainingquantconfig": [196, 197, 373, 411, 414, 417, 434, 437, 442, 445, 450, 451, 453, 478, 479, 480, 482, 483, 486], "quantizationawaretrainingconfig": [196, 197, 394, 411, 439, 442, 451, 478, 479, 486], "cv": [196, 197, 475], "object_detect": [196, 197, 282, 335], "nlp": [196, 197, 312, 459, 475, 478], "recommendation_system": [196, 197], "explicitli": [196, 197, 446, 475], "overrid": [196, 197, 405], "quantiztaion": [196, 197], "smooth_quant_arg": [196, 197, 478, 483], "gemm_to_matmul": [196, 197, 478], "graph_optimization_level": [196, 197, 477, 478], "disable_al": [196, 197, 477], "enable_bas": [196, 197], "enable_extend": [196, 197], "enable_al": [196, 197], "first_conv_or_matmul_quant": [196, 197, 478], "last_conv_or_matmul_quant": [196, 197, 478], "pre_post_process_quant": [196, 197, 478], "preprocess": [196, 197, 212, 229, 256, 271, 391, 397, 440, 485], "postprocess": [196, 197, 223, 226, 229, 233, 271, 278, 331, 339, 373, 397, 415, 451, 484, 485], "vaild": [196, 197], "dedic": [196, 197], "quant_format": [196, 197, 276, 442], "constraint": [196, 197, 277, 314, 451, 475, 482, 486, 488], "conv1": [196, 197, 478, 488], "tuning_strategi": [196, 197], "guarante": [196, 197, 451], "models": [196, 197, 350, 451, 473, 477], "footprint": [196, 197, 277, 301, 306, 314, 350, 439, 451, 473, 475, 477], "earli": [196, 197, 451, 478, 486, 488], "stop": [196, 197, 451, 486, 487, 488], "field": [196, 197, 214, 258, 282, 335, 411, 415, 417, 440, 451, 482, 486, 488], "exit": [196, 197, 317, 374, 376, 451, 488], "excluded_precis": [196, 197, 479], "exclud": [196, 197, 415, 433, 479], "conserv": [196, 197, 331, 381], "use_distributed_tun": 196, "weightpruningconfig": [196, 197, 241, 451, 474, 475], "pruning_config": [196, 197, 451], "98": [196, 197, 451, 475, 477, 489], "exp": [196, 197, 451, 475], "link": [196, 197, 212, 256, 339, 373, 433, 435, 442, 464, 468, 471, 489], "90": [196, 197, 488, 489], "magnitude_progress": [196, 197], "snip_progress": [196, 197], "snip_momentum_progress": [196, 197], "most": [196, 197, 286, 339, 437, 451, 452, 475, 478, 480, 483, 486, 489], "feasibl": [196, 197], "situat": [196, 197, 440, 475], "unstructur": [196, 197, 305, 447, 475, 489], "8x1": [196, 197], "channelx1": [196, 197, 475], "1xchannel": [196, 197, 475], "itrex": [196, 197], "start": [196, 197, 229, 271, 282, 335, 378, 448, 476, 485, 486, 487, 490], "togeth": [196, 197, 229, 271, 438, 448, 458, 476, 484, 485], "sort": [196, 197, 321, 382, 437, 486], "sinc": [196, 197, 277, 279, 301, 306, 314, 332, 438, 442, 448, 450, 465, 471, 474, 480, 481], "lead": [196, 197, 438, 451, 452, 475, 480, 483], "increas": [196, 197, 436, 447, 454, 471, 486], "cube": [196, 197, 475], "6": [196, 197, 414, 444, 478, 483, 486, 489], "update_config": [196, 197], "10": [196, 197, 214, 258, 318, 377, 414, 432, 435, 442, 448, 451, 475, 477, 485, 486, 489], "knowledgedistillationlossconfig": [196, 197, 438, 439, 451, 474], "hyperparamet": [196, 197, 327, 482, 483, 486], "entropi": [196, 197, 433, 486], "groundtruth": [196, 197, 282, 335], "label": [196, 197, 200, 201, 212, 214, 215, 216, 217, 220, 225, 229, 234, 244, 245, 256, 258, 259, 260, 261, 264, 268, 271, 279, 281, 286, 332, 334, 339, 340, 373, 394, 411, 434, 435, 437, 450, 451, 478, 485], "tpye": [196, 197], "sum": [196, 197, 286, 339, 437, 438], "distillationconfig": [196, 197, 394, 438, 439, 451, 474], "prepare_compress": [196, 197, 394, 411, 438, 439, 451, 474, 475, 478], "criterion_conf": [196, 197], "d_conf": [196, 197, 439, 451, 474], "compression_manag": [196, 197, 394, 411, 438, 439, 451, 474, 475, 478], "sgd": [196, 197, 236, 438, 451, 477, 488], "learning_r": [196, 197, 451, 477, 488], "callabl": [196, 197, 284, 337, 394, 434], "featur": [196, 197, 212, 213, 225, 229, 256, 257, 268, 271, 410, 414, 432, 434, 436, 438, 451, 452, 453, 454, 458, 459, 462, 471, 475, 476, 481, 485], "altern": [196, 197, 373], "distil_loss": [196, 197, 451], "crossentropyloss": [196, 197, 231, 438, 451], "lr": [196, 197, 438, 440, 451], "onnxrt_dnnl_ep": [197, 452, 478], "tuningcriterion": [197, 451, 473, 482, 486], "tuning_criterion": [197, 451, 473, 482, 486], "weight_onli": [197, 480], "ptq": [197, 373, 411, 437, 440, 447, 451, 478, 483, 484, 486], "tri": [197, 486], "meet": [197, 203, 315, 317, 374, 376, 411, 416, 473, 476, 477, 478, 480, 484, 486], "bayesian": [197, 278, 294, 320, 331, 381, 412, 477], "mse_v2": [197, 278, 320, 331, 381], "hawq_v2": [197, 331, 381], "exhaust": [197, 278, 294, 320, 331, 381, 477], "docstr": [197, 392], "copi": [197, 310, 405, 434], "deepcopi": 197, "model_origin": [197, 373, 479], "qat_op_name_dict": 197, "low_memory_usag": 197, "intermediatelayersknowledgedistillationlossconfig": [197, 438], "relationship": 197, "student_layer_nam": 197, "student_layer_output_process": 197, "teacher_layer_nam": 197, "teacher_layer_output_process": 197, "desir": [197, 225, 229, 268, 271, 416, 417, 485], "either": [197, 282, 335, 455, 459, 474, 477, 478], "serv": [197, 348], "numer": [197, 286, 339, 417, 452, 476, 478], "abbrevi": 197, "layer_nam": 197, "l1": 197, "selfknowledgedistillationlossconfig": [197, 438, 451], "student1_layer_name1": 197, "teacher_layer_name1": 197, "student2_layer_name1": 197, "student1_layer_name2": 197, "teacher_layer_name2": 197, "student2_layer_name2": 197, "soft": 197, "l2": [197, 475], "hard": [197, 434, 437], "resblock": 197, "deepst": 197, "02": [197, 483, 489], "mixedprecisionconfig": [197, 340, 392, 451, 452], "mixedprecis": [197, 287, 451], "fp16": [197, 328, 389, 478], "won": [197, 478], "work": [197, 277, 314, 413, 416, 434, 438, 466, 469, 475, 479, 480, 481, 483, 484], "mix_precis": [197, 331, 392, 451, 452], "converted_model": [197, 340, 451, 452], "exportconfig": 197, "14": [197, 275, 276, 442, 448, 483, 489], "dynamic_ax": [197, 276, 442], "qlinear": [197, 214, 221, 258, 265, 286, 339, 415, 461], "ax": [197, 276], "onnxqlinear2qdqconfig": 197, "onnxqlinear2qdq": 197, "torch2onnxconfig": [197, 442], "torch2onnx": [197, 273, 278, 331], "qdq_op_fp32_bia": 197, "qdq_op_int32_bia": 197, "qdq_op_fp32_bias_qdq": 197, "resnet50": [197, 414, 437, 440, 442, 452, 454, 458, 475, 478, 482, 489], "int8_onnx_config": [197, 442], "randn": [197, 442], "224": [197, 225, 268, 414, 435, 440, 442, 445, 451, 454, 485, 488], "batch_siz": [197, 202, 204, 207, 208, 209, 210, 211, 212, 213, 232, 246, 248, 251, 252, 253, 254, 255, 256, 257, 276, 412, 434, 435, 440, 442, 446, 451, 454, 478], "tf2onnxconfig": [197, 442], "tf2onnx": [197, 273, 278, 331], "keyword": 197, "argument": [197, 392, 412, 437, 480], "output_graph": 197, "42": [197, 294, 489], "dyna": [197, 278, 291, 331, 412, 447, 477], "sigopt": [198, 199, 242, 243, 278, 331, 476], "tpe": [198, 199, 242, 243, 278, 331], "sigopttunestrategi": [200, 244], "q_dataload": [200, 201, 244, 245, 318, 321, 323, 324, 374, 377, 378, 382, 384, 385, 446, 486], "eval_func": [200, 201, 244, 245, 315, 318, 321, 323, 324, 340, 373, 374, 377, 378, 382, 384, 385, 392, 394, 411, 434, 435, 437, 438, 439, 440, 451, 478, 479, 480, 486, 488], "eval_metr": [200, 201, 340, 373, 374, 377, 378, 382, 384, 385, 394, 450, 478], "q_hook": [200, 201, 244, 245, 318, 321, 323, 324, 374, 377, 378, 382, 384, 385], "hpo": [200, 244], "mandatori": [200, 201, 244, 245, 373, 451, 488], "yield": [200, 201, 210, 232, 244, 245, 254, 318, 340, 373, 377, 392, 394, 434, 478, 486], "_": [200, 201, 244, 245, 373, 411, 412, 415, 416, 433, 434, 437, 438, 440, 442, 444, 451, 452, 453, 454, 460, 464, 466, 468, 469, 473, 475, 478, 480, 481, 482, 483, 484, 486, 488], "well": [200, 201, 244, 245, 340, 373, 394, 412, 414, 435, 475, 478, 481, 483, 488], "taken": [200, 201, 244, 245, 340, 373, 394, 478], "reserv": [200, 201, 244, 245], "abl": [200, 201, 244, 245, 340, 373, 394, 462, 471, 478], "tuner": [200, 201, 244, 245, 277, 314, 340, 373, 394, 478], "scalar": [200, 201, 244, 245, 340, 373, 394, 450, 478], "pseudo": [200, 201, 244, 245, 373, 394, 484], "someth": [200, 201, 214, 244, 245, 258, 373, 394], "fefin": [201, 245], "tpetunestrategi": [201, 245], "basedatalod": [202, 246], "basedataload": [202, 207, 209, 246, 251, 253], "last_batch": [202, 204, 207, 208, 209, 211, 232, 246, 248, 251, 252, 253, 255], "rollov": [202, 204, 207, 208, 209, 211, 232, 246, 248, 251, 252, 253, 255, 434], "collate_fn": [202, 204, 205, 207, 208, 209, 211, 232, 246, 248, 249, 251, 252, 253, 255, 435], "sampler": [202, 204, 206, 207, 208, 209, 211, 232, 246, 248, 250, 251, 252, 253, 255, 267, 278, 327, 388, 434, 440], "batch_sampl": [202, 204, 207, 208, 209, 211, 232, 246, 248, 251, 252, 253, 255], "num_work": [202, 204, 207, 208, 209, 211, 232, 246, 248, 251, 252, 253, 255, 451, 478], "pin_memori": [202, 204, 207, 208, 209, 211, 232, 246, 248, 251, 252, 253, 255], "shuffl": [202, 204, 207, 208, 209, 211, 232, 246, 248, 251, 252, 253, 255, 434, 451, 478], "_generate_dataload": [202, 246], "check_dataload": 203, "default_col": [204, 248], "outer": [204, 248], "defaultdataload": [204, 211, 248, 255], "definit": [205, 210, 249, 254], "style": [205, 219, 249, 263, 392, 410, 435, 446], "drop_last": [205, 210, 249, 254], "iterablefetch": [205, 249], "indexfetch": [205, 249], "base_dataload": [206, 250, 267, 278], "default_dataload": [206, 250, 267, 278], "fetcher": [206, 250, 267, 278], "mxnet_dataload": [206, 250, 267, 278], "onnxrt_dataload": [206, 250, 267, 278, 366], "pytorch_dataload": [206, 250, 267, 278], "tensorflow_dataload": [206, 250, 267, 278, 371], "mxnetdataload": [207, 251], "onnxrtbertdataload": [208, 252], "varient": [208, 252], "onnxrtdataload": [208, 252, 366], "pytorchdataload": [209, 253], "data_sourc": [210, 254, 397], "__iter__": [210, 214, 254, 258, 434, 435, 451], "matter": [210, 254, 479], "iterablesampl": [210, 254], "squential": [210, 254], "your": [210, 212, 254, 256, 410, 434, 435, 437, 440, 449, 451, 454, 457, 458, 459, 464, 465, 466, 468, 469, 471, 475, 476, 482, 484, 486, 487], "clear": [210, 254, 415, 444, 450, 451], "iterabledataset": [210, 214, 254, 258], "try": [210, 254, 411, 437, 475, 478, 483, 486], "indexdataset": [210, 254], "__getitem__": [210, 214, 229, 254, 258, 271, 435, 451], "__len__": [210, 214, 254, 258, 435], "retriev": [210, 254], "sequentialsampl": [210, 254], "sequenti": [210, 254, 315, 317, 374, 376, 486], "batchsampl": [210, 254], "tfdatadataload": [211, 255], "tensorflow1": [211, 255], "coupl": [211, 255], "satisfi": [211, 255, 437, 448], "usag": [211, 255, 282, 288, 315, 335, 392, 416, 435, 440, 441, 454, 462, 473, 477, 485], "tf1": [211, 255, 453], "although": [211, 255, 482], "tensorflowbertdataload": [211, 255], "tensorflowmodelzoobertdataload": [211, 255], "zoo": [211, 229, 255, 271, 414, 441, 445, 489], "tensorflowdataload": [211, 255, 371], "pytorchbertdataset": [212, 256], "model_typ": [212, 256, 405, 435], "construct": [212, 215, 216, 219, 227, 232, 234, 235, 237, 256, 259, 260, 263, 339, 344, 348, 391, 397, 409, 416, 417, 435, 440, 475, 486], "tensordataset": [212, 256, 435], "repo": [212, 256, 408, 435, 441, 464, 466, 468, 469, 490], "easi": [212, 256, 314, 442, 451, 476, 478, 482], "load": [212, 228, 229, 256, 270, 271, 340, 348, 373, 404, 405, 416, 434, 464, 468, 472, 477, 478, 483], "squad": [212, 229, 256, 271, 283, 284, 286, 336, 337, 339, 435, 450, 475, 485, 489], "distilbert": [212, 256, 414, 435, 452, 476, 489], "xlnet": [212, 256, 435, 489], "xlm": [212, 256, 435, 489], "101": [212, 256, 286, 339, 450, 483, 489], "2043": [212, 256], "2001": [212, 256], "onnxrtbertdataset": [212, 256], "data_dir": [212, 256, 435], "model_name_or_path": [212, 256, 435, 451, 459, 460], "max_seq_length": [212, 229, 256, 271, 435, 485], "do_lower_cas": [212, 228, 229, 256, 270, 271, 435, 485], "mrpc": [212, 256, 286, 339, 435, 450, 459, 475, 486, 489], "dynamic_length": [212, 256, 435], "shortcut": [212, 256, 435], "token": [212, 223, 226, 229, 256, 267, 269, 271, 278, 279, 280, 331, 332, 333, 400, 435, 450, 451, 480, 482, 483, 485, 486], "longer": [212, 229, 256, 271, 435, 485], "truncat": [212, 229, 256, 271, 435, 485], "shorter": [212, 229, 256, 271, 435, 485], "lowercas": [212, 256, 435], "choic": [212, 256, 415, 435, 450, 483], "qqp": [212, 256, 435, 450, 489], "qnli": [212, 256, 435, 450, 489], "rte": [212, 256, 435, 450, 489], "st": [212, 256, 435, 450], "cola": [212, 256, 435, 450, 489], "mnli": [212, 256, 435, 450, 489], "wnli": [212, 256, 435, 450], "mobilebert": [212, 256, 435, 438, 489], "roberta": [212, 256, 435, 489], "uncas": [212, 229, 256, 271, 435, 485, 489], "load_and_cache_exampl": [212, 256], "cach": [212, 256, 443, 478, 480], "convert_examples_to_featur": [212, 229, 256, 271], "max_length": [212, 256], "label_list": [212, 256, 286, 339], "output_mod": [212, 256], "classif": [212, 229, 256, 271, 286, 312, 339, 438, 442, 450, 460, 475, 476], "pad_token": [212, 256], "pad_token_segment_id": [212, 256], "mask_padding_with_zero": [212, 256], "inputfeatur": [212, 229, 256, 271], "properti": [212, 256, 391, 449], "input_id": [212, 229, 256, 271, 451], "vocabulari": [212, 228, 229, 256, 270, 271, 485], "attention_mask": [212, 256, 451], "usual": [212, 256, 416, 437, 438, 474, 475, 478, 483], "NOT": [212, 256, 444], "token_type_id": [212, 256, 451], "segment": [212, 256, 280, 282, 333, 335], "portion": [212, 256], "problem": [212, 256, 286, 339, 450, 452, 472], "regress": [212, 256, 437], "seq_length": [212, 256], "tensorflowbertdataset": [212, 256], "label_fil": [212, 229, 256, 271, 435, 485], "tfrecord": [212, 213, 214, 256, 257, 258, 435], "guid": [212, 256, 411, 414, 435, 438, 448, 454, 462, 471, 490], "parsedecodebert": [212, 256], "tensorflowmodelzoobertdataset": [212, 213, 256, 257], "num_cor": [212, 213, 217, 256, 257, 261, 435], "28": [212, 213, 217, 256, 257, 261, 435, 489], "coco": [213, 220, 224, 257, 264, 282, 286, 335, 339, 450, 475], "parsedecodecoco": [213, 257], "cocorecorddataset": [213, 257], "interleav": [213, 257, 435], "parallel": [213, 257, 367, 372, 435, 451, 486], "cocoraw": [213, 257, 435], "img_dir": [213, 257, 435], "val2017": [213, 257, 435], "anno_dir": [213, 257, 435], "annot": [213, 257, 282, 335, 392, 416, 417, 435, 450, 475, 486], "instances_val2017": [213, 257, 435], "jpg": [213, 217, 219, 257, 261, 263, 435], "imag": [213, 214, 217, 219, 225, 229, 257, 258, 261, 263, 268, 271, 282, 335, 435, 440, 442, 475, 477, 483, 484, 485, 489], "coconpi": [213, 257, 435], "npy_dir": [213, 257, 435], "npy": [213, 257, 435], "tensorflowdataset": [214, 258], "pytorchdataset": [214, 258], "mxnetdataset": [214, 258], "onnxrtqldataset": [214, 258], "onnxrtitdataset": [214, 258], "IT": [214, 221, 258, 265, 476], "pytorchmxnetwrapdataset": [214, 258], "datafunc": [214, 258], "pytorchmxnetwrapfunct": [214, 229, 258, 271], "framework_dataset": [214, 258], "convent": [214, 258, 282, 335, 438], "imageclassifi": [214, 258], "tensorflow_itex": [214, 217, 219, 221, 258, 261, 263, 265, 434, 477], "onnxrt_qdq": [214, 221, 258, 265, 477], "onnxrt_qlinearop": [214, 221, 229, 258, 265, 271, 477], "onnxrt_integerop": [214, 221, 229, 258, 265, 271, 477], "pytorch_ipex": [214, 221, 258, 265, 451, 477, 488], "pytorch_fx": [214, 221, 258, 265, 451, 477], "dataset_registri": [214, 258], "dataset_typ": [214, 258], "dataset_format": [214, 258], "data_format": [214, 225, 258, 268], "raw_imag": [214, 258], "overwrit": [214, 258, 464, 468], "download_url": [214, 258], "filenam": [214, 258, 405, 435], "md5": [214, 258], "download": [214, 258, 435, 437, 448, 481], "address": [214, 258, 409, 452, 476], "gen_bar_updat": [214, 258], "bar": [214, 258, 471, 476], "check_integr": [214, 258], "fpath": [214, 258], "checksum": [214, 258], "calculate_md5": [214, 258], "chunk_siz": [214, 258], "cifar10": [214, 258, 435], "cifar100": [214, 258, 435], "databas": [214, 258], "otherwis": [214, 229, 258, 271, 405, 409, 416, 435, 466, 469, 477, 485], "www": [214, 258, 435, 489], "toronto": [214, 258, 435], "kriz": [214, 258, 435], "cifar": [214, 258, 435, 489], "tar": [214, 258, 435, 437, 466, 469], "gz": [214, 258, 435, 437, 466, 469], "manual": [214, 258, 435, 454, 460, 462, 465], "subset": [214, 217, 258, 261, 435], "internet": [214, 258, 435], "put": [214, 258, 435, 438], "again": [214, 258, 435, 479], "pytorchcifar10": [214, 258], "mxnetcifar10": [214, 258], "tensorflowcifar10": [214, 258], "pytorchcifar100": [214, 258], "mxnetcifar100": [214, 258], "tensorflowcifar100": [214, 258], "mnist": [214, 258, 435, 440], "nation": [214, 258, 409], "institut": [214, 258], "standard": [214, 229, 258, 271, 416, 437, 442, 450, 485, 486], "technologi": [214, 258, 451], "fashionmnist": [214, 258, 435], "npz": [214, 258, 435], "idx1": [214, 258, 435], "ubyt": [214, 258, 435], "idx3": [214, 258, 435], "t10k": [214, 258, 435], "pytorchmnist": [214, 258], "mxnetmnist": [214, 258], "tensorflowmnist": [214, 258], "pytorchfashionmnist": [214, 258], "mxnetfashionmnist": [214, 258], "tensorflowfashionmnist": [214, 258], "imagefold": [214, 258, 435, 440, 451], "expect": [214, 258, 409, 410, 443, 471, 478, 480, 486], "subfold": [214, 258], "belong": [214, 258, 344, 478], "class_1": [214, 258, 435], "xxx": [214, 258, 410, 435, 451], "png": [214, 258, 435], "xxy": [214, 258, 435], "xxz": [214, 258, 435], "class_n": [214, 258, 435], "123": [214, 258, 435, 485], "nsdf3": [214, 258, 435], "asd932_": [214, 258, 435], "categori": [214, 258, 281, 334, 432, 435, 461], "mxnetimagefold": [214, 258], "tensorflowtfrecorddataset": [214, 258], "tensorflowimagerecord": [214, 258], "imagenet": [214, 217, 225, 258, 261, 268, 412, 437, 451, 460, 475, 484, 485, 488, 489], "000": [214, 258, 414, 435], "001": [214, 258, 435, 440, 483, 488], "099": [214, 258, 435], "tensorflowvocrecord": [214, 258], "pascal": [214, 258], "voc": [214, 258, 286, 339], "2012": [214, 258], "00000": [214, 258], "00004": [214, 258], "00001": [214, 258], "00003": [214, 258], "dummydataset": [215, 216, 259, 260], "127": [215, 216, 259, 260, 435, 478, 483], "float32": [215, 216, 229, 259, 260, 271, 282, 335, 415, 432, 435, 451, 478, 483, 485], "stand_norm": [215, 216, 259, 260, 435], "dummy_v2": [216, 260, 435], "sparse_dummy_v2": [216, 260, 435], "label_shap": [216, 260, 435], "sparsedummydataset": [216, 260], "dense_shap": [216, 260, 435], "sparse_ratio": [216, 260, 435], "imagenetraw": [217, 261, 435], "data_path": [217, 261, 435], "image_list": [217, 261, 435], "img1": [217, 261, 435], "img2": [217, 261, 435], "imgx": [217, 261, 435], "val_map": [217, 261, 435], "txt": [217, 261, 435, 437, 448], "pytorchimagenetraw": [217, 261], "mxnetimagenetraw": [217, 261], "tensorflowimagenetraw": [217, 261], "inteltensorflow": [217, 219, 261, 263, 448], "tensorflowimagenetdataset": [217, 261], "onnxrtimagenetdataset": [217, 261], "bert_dataset": [218, 223, 262, 267, 278, 331], "coco_dataset": [218, 223, 262, 267, 278, 331], "dummy_dataset": [218, 223, 262, 267, 278, 331], "dummy_dataset_v2": [218, 223, 262, 267, 278, 331], "imagenet_dataset": [218, 223, 262, 267, 278, 331], "style_transfer_dataset": [218, 223, 262, 267, 278, 331], "styletransferdataset": [219, 263], "content_fold": [219, 263, 435], "style_fold": [219, 263, 435], "crop_ratio": [219, 263, 435], "resize_shap": [219, 263, 435], "256": [219, 225, 263, 268, 435, 440, 451, 485], "image_format": [219, 263, 435], "holder": [219, 263, 435], "labelbalancecocorecordfilt": [220, 264], "balanc": [220, 264, 480, 483], "labelbalancecocorawfilt": [220, 264], "tensorflowfilt": [221, 265], "onnxrtqlfilt": [221, 265], "onnxrtitfilt": [221, 265], "pytorchfilt": [221, 265], "mxnetfilt": [221, 265], "filter_registri": [221, 265], "filter_typ": [221, 265], "__call__": [221, 265], "coco_filt": [222, 223, 266, 267, 278, 331], "imagenet_transform": [223, 226, 267, 269, 278, 331], "parsedecodecocotransform": 224, "decod": [224, 225, 268, 279, 332, 450, 485], "quantizedinput": [225, 268, 485], "labelshift": [225, 268, 485], "label_shift": [225, 268, 485], "parsedecodeimagenet": [225, 268, 485], "proto": [225, 229, 268, 271, 485], "parsedecodeimagenettransform": [225, 268], "tensorflowtransposelastchannel": 225, "tensorflowshiftrescal": 225, "rescal": [225, 229, 271, 485], "tensorflowresizecropimagenettransform": [225, 268], "random_crop": [225, 268, 485], "resize_sid": [225, 268, 485], "resize_method": [225, 268], "bilinear": [225, 229, 268, 271, 485], "random_flip_left_right": [225, 268, 485], "mean_valu": [225, 268, 485], "channels_last": [225, 268, 454], "subpixel": [225, 268], "rgb": [225, 268], "seri": [225, 268, 414, 448, 451, 485], "applic": [225, 268, 417, 442, 454, 471, 476, 480, 483, 484, 485, 487], "crop": [225, 229, 268, 271, 435, 485], "flip": [225, 229, 268, 271, 485], "left": [225, 229, 268, 271, 465, 471, 483, 485], "right": [225, 268, 282, 335, 409, 411, 471, 483, 485], "std": [225, 229, 268, 271, 451, 485], "bilinearimagenettransform": [225, 268], "central_fract": [225, 268, 485], "875": [225, 268, 485], "fraction": [225, 268, 485], "onnxbilinearimagenettransform": [225, 268], "onnxresizecropimagenettransform": [225, 268], "std_valu": [225, 268], "229": [225, 268, 451], "225": [225, 268, 451], "resizewithaspectratio": [225, 268], "87": [225, 268, 489], "inter_pol": [225, 268], "cv2": [225, 268], "inter_area": [225, 268], "aspect": [225, 229, 268, 271, 485], "postprocess_cl": [227, 237, 451], "user_postprocess": [227, 237], "convert_to_unicod": [228, 270], "unicod": [228, 270], "assum": [228, 270, 282, 293, 335, 415, 444, 471], "utf": [228, 270], "load_vocab": [228, 270], "vocab_fil": [228, 229, 270, 271, 485], "convert_by_vocab": [228, 270], "vocab": [228, 270], "whitespace_token": [228, 270], "whitespac": [228, 270, 284, 337], "clean": [228, 270, 410, 451], "piec": [228, 270, 279, 332, 450, 480], "fulltoken": [228, 270], "tokenzi": [228, 270], "basictoken": [228, 270], "punctuat": [228, 270, 279, 284, 332, 337], "lower": [228, 229, 270, 271, 284, 337, 378, 439, 475, 476, 478, 483, 485, 486], "wordpiecetoken": [228, 270], "unk_token": [228, 270], "unk": [228, 270], "max_input_chars_per_word": [228, 270], "200": [228, 270, 411, 486], "wordpiec": [228, 229, 270, 271, 485], "concat_gener": [229, 271], "inc": [229, 271, 409, 414, 416, 454, 461, 471, 476, 477, 481, 486], "tensorflowtransform": [229, 271], "mxnettransform": [229, 271], "pytorchtransform": [229, 271], "onnxrtqltransform": [229, 271], "onnxrtittransform": [229, 271], "transform_registri": [229, 271], "transform_typ": [229, 271], "basetransform": [229, 271], "tensorflowwrapfunct": [229, 271], "transform_func": [229, 271], "pytorchmxnettransform": [229, 271], "get_torchvision_map": [229, 271], "torchvis": [229, 271, 441, 445, 454, 460], "composetransform": [229, 271], "transform_list": [229, 271, 485], "compos": [229, 271, 397, 485], "croptoboundingbox": [229, 271, 485], "offset_height": [229, 271, 485], "offset_width": [229, 271, 485], "target_height": [229, 271, 485], "target_width": [229, 271, 485], "box": [229, 271, 282, 286, 335, 339, 411, 450, 454, 465, 471, 484, 485, 486], "coordin": [229, 271, 318, 377, 485, 486], "top": [229, 271, 277, 286, 301, 306, 314, 339, 450, 471, 485], "corner": [229, 271, 415, 417, 485], "horizont": [229, 271, 485], "mxnetcroptoboundingbox": [229, 271], "onnxrtcroptoboundingbox": [229, 271], "tensorflowcroptoboundingbox": [229, 271], "resizewithratio": [229, 271, 485], "min_dim": [229, 271, 485], "800": [229, 271, 485], "max_dim": [229, 271, 485], "1365": [229, 271, 485], "constant_valu": [229, 271], "longest": [229, 271, 485], "side": [229, 271, 435, 465, 485], "doesn": [229, 271, 415, 440, 451, 452, 472, 488], "exce": [229, 271, 485], "tensorflowresizewithratio": [229, 271], "perm": [229, 271, 485], "permut": [229, 271, 485], "tensorflowtranspos": [229, 271], "mxnettranspos": [229, 271], "pytorchtranspos": [229, 271], "randomverticalflip": [229, 271, 485], "randomli": [229, 271, 294, 318, 377, 412, 483, 485, 486], "tensorflowrandomverticalflip": [229, 271], "randomhorizontalflip": [229, 271, 451, 485], "tensorflowrandomhorizontalflip": [229, 271], "toarrai": [229, 271, 485], "pil": [229, 271, 485], "casttftransform": [229, 271], "castonnxtransform": [229, 271], "castpytorchtransform": [229, 271], "centercroptftransform": [229, 271], "center": [229, 271, 413, 414, 448, 485, 486], "paddedcentercroptransform": [229, 271], "crop_pad": [229, 271], "resizetftransform": [229, 271], "bicub": [229, 271, 485], "resizepytorchtransform": [229, 271], "randomcroptftransform": [229, 271], "randomresizedcroppytorchtransform": [229, 271], "08": [229, 271, 485, 489], "randomresizedcropmxnettransform": [229, 271], "randomresizedcroptftransform": [229, 271], "normalizetftransform": [229, 271], "deviat": [229, 271, 437, 485], "broadcast": [229, 271, 440, 485], "rescalekeraspretraintransform": [229, 271], "rescaletftransform": [229, 271], "rescaletransform": [229, 271], "alignimagechanneltransform": [229, 271], "dim": [229, 271, 483, 485], "align": [229, 271, 409, 485], "w": [229, 271, 475, 483, 485], "must": [229, 271, 282, 335, 410, 411, 416, 432, 434, 448, 478, 485], "pytorchalignimagechannel": [229, 271], "tondarraytransform": [229, 271], "resizemxnettransform": [229, 271], "resizetransform": [229, 271], "cropresizetftransform": [229, 271], "boundari": [229, 271, 485], "area": [229, 271, 282, 335, 450, 485], "pytorchcropresizetransform": [229, 271], "mxnetcropresizetransform": [229, 271], "cropresizetransform": [229, 271], "centercroptransform": [229, 271], "mxnetnormalizetransform": [229, 271], "pytorchnormalizetransform": [229, 271], "normalizetransform": [229, 271], "randomcroptransform": [229, 271], "randomresizedcroptransform": [229, 271], "get_final_text": [229, 271], "pred_text": [229, 271], "orig_text": [229, 271], "project": [229, 271, 408, 409, 410, 476, 482, 486, 490], "squadexampl": [229, 271], "qas_id": [229, 271], "question_text": [229, 271], "doc_token": [229, 271], "orig_answer_text": [229, 271], "start_posit": [229, 271], "end_posit": [229, 271], "is_imposs": [229, 271], "simpl": [229, 271, 448, 451, 482, 483, 486], "answer": [229, 271, 283, 284, 336, 337, 409, 475, 485, 489], "posit": [229, 271, 409, 450, 454], "unique_id": [229, 271], "example_index": [229, 271], "doc_span_index": [229, 271], "token_to_orig_map": [229, 271], "token_is_max_context": [229, 271], "input_mask": [229, 271, 451], "segment_id": [229, 271, 451], "read_squad_exampl": [229, 271], "input_fil": [229, 271], "doc_strid": [229, 271, 485], "max_query_length": [229, 271, 485], "output_fn": [229, 271], "inputbatch": [229, 271], "collecttransform": [229, 271], "10833": [229, 271], "tfsquadv1posttransform": [229, 271], "n_best_siz": [229, 271, 485], "20": [229, 271, 483, 485, 488, 489], "384": [229, 271, 485], "64": [229, 271, 412, 483, 485, 489], "max_answer_length": [229, 271, 485], "30": [229, 271, 441, 445, 447, 483, 485, 489], "nbest_predict": [229, 271, 485], "question": [229, 271, 283, 284, 336, 337, 409, 410, 415, 448, 454, 475, 483, 485, 489], "anoth": [229, 271, 279, 288, 332, 405, 437, 438, 464, 468, 485, 486], "long": [229, 271, 443, 485], "document": [229, 271, 392, 410, 416, 417, 422, 440, 452, 456, 466, 469, 470, 481, 485, 487], "chunk": [229, 271, 485], "tfmodelzoocollecttransform": [229, 271], "tfsquadv1modelzooposttransform": [229, 271], "squadv1": [229, 271, 485], "see": [229, 271, 279, 332, 409, 411, 413, 449, 451, 464, 465, 468, 471, 472, 480, 483, 484, 486], "parsedecodevoctransform": [229, 271], "conf_fname_or_obj": [230, 239, 272, 277, 287, 288, 289, 290, 292, 301, 306, 314], "thei": [230, 392, 409, 438, 444, 451, 459, 473], "possibl": [230, 437, 474, 475, 479, 486], "unnecessari": [230, 451], "tensorflowcrossentropyloss": 231, "pytorchcrossentropyloss": 231, "tensorflowsparsecategoricalcrossentropi": 231, "sparsecategoricalcrossentropyloss": 231, "setter": 232, "calib_dataload": [232, 315, 373, 411, 414, 434, 435, 437, 445, 446, 450, 451, 478, 479], "reason": [232, 409, 416, 434, 480, 484, 486], "know": [232, 440, 481], "known": [232, 318, 377, 451, 484, 486], "open": [233, 278, 331, 397, 407, 409, 414, 442, 443, 451, 466, 469, 472, 476], "metric_cl": [234, 339, 373, 451], "user_metr": [234, 339, 373], "alwai": [234, 282, 335, 339, 373, 437, 450, 451], "recommend": [234, 339, 415, 435, 444, 462, 465, 470, 472, 475, 477, 486], "set_backend": 235, "tensorflowoptim": 236, "pytorchoptim": 236, "optimizer_registri": 236, "optimizer_typ": 236, "cross": [236, 286, 339, 446, 486], "tensorflowsgd": 236, "tensorflowadamw": 236, "tensorflow_addon": 236, "adamw": 236, "tensorflowadam": 236, "adam": [236, 488], "pytorchsgd": 236, "record_output": 238, "output_process": 238, "get_activ": 238, "f": [241, 438, 440, 478, 480, 483], "pickle_modul": 241, "pickle_protocol": 241, "_use_new_zipfile_seri": 241, "prepare_prun": [241, 475], "opt": [241, 414, 459, 483, 486], "tensorflowimagefold": 258, "qlinear2qdq": [273, 278, 331], "qlinearop": [274, 437, 447, 462, 478, 489], "check_model": 274, "modelproto": [274, 340, 453], "onnx_qlinear_to_qdq": 274, "input_name_to_nod": 274, "destin": [274, 288], "tf_to_fp32_onnx": 275, "tf_to_int8_onnx": 275, "int8_model": [275, 276, 415], "get_node_map": 276, "fp32_onnx_path": 276, "module_node_map": 276, "get_quantizable_onnx_op": 276, "quantize_nod": 276, "dynamic_quant_export": 276, "pt_fp32_model": 276, "pt_int8_model": 276, "weight_typ": 276, "s8": 276, "static_quant_export": 276, "_quantiz": 276, "torch_to_fp32_onnx": 276, "do_constant_fold": 276, "verbos": [276, 318, 377], "torch_to_int8_onnx": 276, "achiev": [277, 314, 442, 451, 474, 475, 476, 478, 484, 486], "across": [277, 287, 314, 340, 436, 451, 475, 483, 486], "variou": [277, 287, 314, 340, 417, 447, 454, 475, 477], "dl": [277, 287, 301, 306, 314, 340, 437, 446, 458, 471, 476, 489], "bring": [277, 314, 465, 483], "unifi": [277, 314, 415, 416, 417, 434, 446, 447, 450, 451, 453], "vari": [277, 301, 306, 314, 475, 483, 489], "roc": [277, 286, 301, 306, 314, 339], "flexibl": [277, 301, 306, 314, 438, 475], "via": [277, 301, 306, 314, 409, 440, 447, 451, 454, 471, 475], "popular": [278, 331, 407, 414, 415, 416, 433, 438, 441, 442, 445, 451, 475, 478, 480, 486, 487], "techniqu": [278, 331, 407, 414, 447, 451, 454, 474, 475, 476, 477, 478, 487, 488, 489], "bleu": [278, 280, 285, 331, 333, 338, 450, 475], "bleu_util": [278, 285, 331, 338], "coco_label_map": [278, 285, 331, 338], "coco_tool": [278, 285, 331, 338], "evaluate_squad": [278, 285, 331, 338], "f1": [278, 283, 285, 286, 331, 336, 338, 339, 440, 450, 451, 482, 489], "basic_na": [278, 291, 331], "nas_util": [278, 291, 331], "pruner_legaci": [278, 331], "gradient_sensit": [278, 297, 331], "group_lasso": [278, 297, 331], "pruning_recip": [278, 331], "tile_pattern": [278, 302, 303], "pytorch_prun": [278, 331], "logger": [278, 307, 331, 395, 398, 405], "prune_util": [278, 307, 331], "tuning_sampl": [278, 320, 326, 331, 381, 387], "tuning_spac": [278, 320, 326, 327, 329, 331, 381, 387, 388, 390], "tuning_struct": [278, 320, 326, 327, 328, 331, 381, 387, 388, 389], "auto_mixed_precis": [278, 320, 331, 381], "graph_optim": [278, 331], "mixed_precis": [278, 331, 340, 451], "model_convers": [278, 331], "pruning_v2": [278, 331], "unicoderegex": [279, 332], "hoc": [279, 332], "hack": [279, 332], "recogn": [279, 332, 486], "nondigit_punct_r": [279, 332], "compil": [279, 332, 451], "express": [279, 332, 409], "preced": [279, 332, 483], "digit": [279, 332, 405, 476], "punct_nondigit_r": [279, 332], "symbol_r": [279, 332], "bleu_token": [279, 332], "mose": [279, 332, 480], "smt": [279, 332], "mosesdecod": [279, 332], "mteval": [279, 332], "v14": [279, 332], "pl": [279, 332], "l954": [279, 332], "l983": [279, 332], "bilingu": [279, 332], "understudi": [279, 332], "qualiti": [279, 332], "machin": [279, 332, 442, 448, 457, 471, 476, 483, 484], "translat": [279, 280, 332, 333, 475, 486], "natur": [279, 332, 442], "approxim": [279, 280, 332, 333, 416, 450], "glue": [279, 286, 332, 339, 435, 450, 451, 460], "word": [279, 332, 450, 475, 480, 489], "ngram": [279, 332, 450], "breviti": [279, 280, 332, 333, 450], "penalti": [279, 280, 332, 333, 450], "doe": [279, 332, 391, 434, 435, 450, 451, 481, 485], "beam": [279, 332, 450], "tensor2tensor": [280, 333], "bleu_hook": [280, 333], "compute_bleu": [280, 333], "reference_corpu": [280, 333], "translation_corpu": [280, 333], "max_ord": [280, 333], "use_bp": [280, 333], "against": [280, 333], "gram": [280, 333], "bleu_scor": [280, 333], "third": [282, 335, 449], "parti": [282, 335, 449, 478], "pycocotool": [282, 335, 443, 448], "noth": [282, 335, 486], "thu": [282, 335, 451, 475, 478], "cannot": [282, 335, 411, 443, 484], "jonathanhuang": [282, 335], "image_id": [282, 335, 450], "encod": [282, 335, 485], "invok": [282, 335, 416], "groundtruth_dict": [282, 335], "exportgroundtruthtococo": [282, 335], "groundtruth_boxes_list": [282, 335], "groundtruth_classes_list": [282, 335], "max_num_class": [282, 335], "output_path": [282, 335], "detections_list": [282, 335], "exportdetectionstococo": [282, 335], "detection_boxes_list": [282, 335], "detection_scores_list": [282, 335], "detection_classes_list": [282, 335], "cocowrapp": [282, 335], "loadannot": [282, 335], "cocoevalwrapp": [282, 335], "agnostic_mod": [282, 335], "computemetr": [282, 335], "detection_typ": [282, 335], "bbox": [282, 335, 411, 450], "hold": [282, 318, 335, 377, 435], "iou_typ": [282, 335], "iou_thr": [282, 286, 335, 339, 450], "map_point": [282, 286, 335, 339, 450], "cocoev": [282, 335], "mscoco": [282, 335], "Then": [282, 335, 416, 437, 464, 466, 468, 469, 483, 486], "exportsingleimagegroundtruthtococo": [282, 335], "next_annotation_id": [282, 335], "category_id_set": [282, 335], "groundtruth_box": [282, 335], "groundtruth_class": [282, 335], "groundtruth_mask": [282, 335], "groundtruth_is_crowd": [282, 335], "ingest": [282, 335], "here": [282, 335, 392, 416, 435, 440, 441, 442, 444, 445, 450, 459, 466, 469, 471, 478, 481, 482, 489], "ones": [282, 335, 475], "exportsingleimagedetectionstococo": [282, 335], "uniqu": [282, 315, 335, 478], "assign": [282, 335, 405, 440, 477, 486], "num_gt_box": [282, 335], "num_detect": [282, 286, 335, 339, 450, 451, 488], "image_height": [282, 335], "image_width": [282, 335], "detection_mask": [282, 335], "crowd": [282, 335], "insid": [282, 335, 438, 439, 472, 475, 486], "exportsingleimagedetectionboxestococo": [282, 335], "detection_box": [282, 335, 451, 488], "detection_scor": [282, 335, 451, 488], "detection_class": [282, 335, 451, 488], "exporsingleimagedetectionboxestococo": [282, 335], "exportsingleimagedetectionmaskstococo": [282, 335], "allenai": [283, 284, 336, 337], "bi": [283, 284, 336, 337], "att": [283, 284, 336, 337], "flow": [283, 284, 336, 337, 411, 412, 451], "f1_score": [283, 284, 336, 337], "ground_truth": [283, 284, 336, 337], "ground": [283, 284, 336, 337], "truth": [283, 284, 336, 337], "metric_max_over_ground_truth": [283, 284, 336, 337], "metric_fn": [283, 284, 336, 337], "exact_match_scor": [283, 336], "exact": [283, 336], "averag": [283, 284, 286, 336, 337, 339, 450, 451, 486], "articl": [283, 284, 336, 337], "paragraph": [283, 284, 336, 337], "qa": [283, 284, 336, 337], "cantain": [283, 284, 336, 337], "normalize_answ": [284, 337], "extra": [284, 337, 451], "newlin": [284, 337, 405], "tab": [284, 337, 471, 484], "harmon": [284, 286, 337, 339], "recal": [284, 286, 337, 339], "answer_start": [284, 337], "177": [284, 337], "denver": [284, 337], "bronco": [284, 337], "nfl": [284, 337], "team": [284, 337, 409, 479], "afc": [284, 337], "super": [284, 337, 412], "bowl": [284, 337], "50": [284, 337, 412, 416, 483, 489], "56be4db0acb8001400a502ec": [284, 337], "form": [284, 337, 437, 438, 471], "percentag": [284, 337, 433, 488], "tensorflowmetr": [286, 339], "maintain": [286, 339, 409, 410, 414, 453, 454, 466, 469, 480, 481], "pytorchmetr": [286, 339], "mxnetmetr": [286, 339], "onnxrtqlmetr": [286, 339], "onnxrtitmetr": [286, 339], "metric_registri": [286, 339], "metric_typ": [286, 339], "decorator_metr": [286, 339], "basemetr": [286, 339, 373], "single_output": [286, 339], "hvd": [286, 339, 440], "wrappytorchmetr": [286, 339], "wrapmxnetmetr": [286, 339], "wraponnxrtmetr": [286, 339], "proport": [286, 339], "were": [286, 339, 457, 475], "pred_list": [286, 339], "pytorchloss": [286, 339], "mae": [286, 339, 450], "compare_label": [286, 339, 373, 450], "actual": [286, 339, 440, 483], "rmse": [286, 339, 450, 486], "squar": [286, 321, 339, 382, 437, 450, 483, 486], "tensorflowtopk": [286, 339], "k": [286, 339, 373, 450], "among": [286, 339, 465, 483], "outcom": [286, 339], "num_correct": [286, 339], "num_sampl": [286, 339], "generaltopk": [286, 339], "cocomapv2": [286, 339, 450], "anno_path": [286, 339, 450], "map_kei": [286, 339], "detectionboxes_precis": [286, 339], "output_index_map": [286, 339, 450], "tensorflowmap": [286, 339], "tensorflowcocomap": [286, 339], "tensorflowvocmap": [286, 339], "squadf1": [286, 339, 450], "miou": [286, 339], "num_class": [286, 339], "21": [286, 339, 459, 460, 476, 483, 489], "iou": [286, 339], "intersect": [286, 339, 415, 450], "union": [286, 339, 394, 450], "onnxrtglu": [286, 339], "dlrm": [286, 339], "modelconvers": 288, "typic": [288, 315, 412, 414, 439, 441, 445, 475, 489], "basicna": 289, "model_build": [289, 292], "conf_fnam": 289, "nasbas": [292, 412], "nas_registri": 293, "nas_method": 293, "create_search_space_pool": 293, "idx": [293, 435], "enumer": [293, 394, 415, 438, 439, 440, 451, 474, 475, 484], "find_pareto_front": 293, "pareto": [293, 412], "front": [293, 412], "n_point": 293, "n_metric": 293, "n_pareto_point": 293, "gridsearch": 294, "grid": [294, 412], "whole": [294, 417, 478, 489], "randomsearch": 294, "bayesianoptimizationsearch": 294, "gradientsensitivityprun": 295, "pytorchmodel": [295, 296, 298, 299, 300, 349], "overwritten": [295, 296, 298, 299, 300, 459], "grouplassoprun": 296, "legaci": 297, "basicmagnitudeprun": 298, "patternlockprun": [299, 311], "pruner_registri": 300, "clase": 300, "pruningconf": [301, 306], "tfpruningcallback": [301, 306], "input_model": [301, 306, 453, 484], "pure": [301, 306, 475], "pattern_registri": 304, "pattern_typ": 304, "patternbas": 304, "mask_shap": [304, 305], "is_contigu": 304, "tile": 305, "tilepatternbas": 305, "tilepattern_1x1": 305, "1x1": [305, 438, 451, 475], "tilepattern_2x2": 305, "2x2": [305, 483], "tilepattern_1x16": 305, "1x16": 305, "tilepattern_4x1": 305, "tilepattern_1x2": 305, "1x2": [305, 483], "patternnxm": 309, "patternninm": 309, "reset_non_value_to_default": 310, "obejct": 310, "parse_not_to_prun": 310, "update_frequency_on_step": [311, 477], "max_sparsity_ratio_per_lay": [311, 477], "magnitudeprun": 311, "snipprun": 311, "snipmomentumprun": 311, "moreoev": 311, "least": [312, 451, 475, 486], "templat": [312, 451, 475], "tree": [312, 328, 389], "huggingface_model": 312, "eager": [312, 372, 440, 447, 478, 479, 484], "config_file_path": 312, "pruner_info": 312, "quantconf": 314, "server": [315, 471], "seper": 315, "opt_model": [315, 451], "fulli": [315, 451, 478, 483], "train_func": [315, 394, 440, 451, 478], "automixedprecisiontunestrategi": [316, 375], "basictunestrategi": [317, 376], "stage": [317, 322, 374, 376, 383, 438, 475, 484, 486], "polici": [317, 321, 374, 376, 382, 409, 414, 488, 490], "bayesiantunestrategi": [318, 377], "acq_max": [318, 377], "ac": [318, 377], "gp": [318, 377], "y_max": [318, 377], "n_warmup": [318, 377], "10000": [318, 377, 475], "n_iter": [318, 377], "acquisit": [318, 377], "gaussian": [318, 377, 486], "relev": [318, 377, 416, 417], "limit": [318, 377, 405, 414, 437, 438, 480, 481, 484], "acq": [318, 377], "randomst": [318, 377], "scipi": [318, 377], "x_max": [318, 377], "targetspac": [318, 377], "pbound": [318, 377], "9527": [318, 377, 451, 488], "allow": [318, 377, 438, 440, 450, 451, 452, 477, 483, 486, 488], "bayesianoptim": [318, 377], "exhaustivetunestrategi": [319, 379], "msetunestrategi": [321, 382], "mse_v2tunestrategi": [322, 383], "revert": [322, 330, 383, 391, 486], "randomtunestrategi": [323, 384], "strategy_registri": [324, 385, 486], "tunestrategi": [324, 385, 486], "tuningsamplerregistri": [327, 388], "tuningsampl": [327, 388], "tuningord": [327, 388], "Not": [327, 328, 388, 389, 405, 412], "tuningspac": [327, 328, 388, 389], "tuning_order_lst": [327, 388], "initial_op_tuning_cfg": [327, 388], "modelwisetuningsampl": [327, 388], "tuning_items_prior": [327, 388], "op_dtype_dict": [327, 388], "optuningconfig": [327, 328, 329, 388, 389, 390], "optypewisetuningsampl": [327, 388], "opwisetuningsampl": [327, 388], "fallbacktuningsampl": [327, 388], "op_dtyp": [327, 388], "accumul": [327, 388, 486], "skip_first": [327, 388], "smoothquantsampl": 327, "tuningitem": [328, 389], "item_typ": [328, 389], "pattern_to_intern": [328, 389], "default_dtyp": [328, 389], "pattern_to_path": [328, 389], "quant_mode_from_pattern": [328, 389], "internal_pattern": [328, 389], "initial_tuning_cfg_with_quant_mod": [328, 389], "op_name_typ": [328, 389], "step1": [328, 389], "step2": [328, 389], "complet": [328, 389, 415, 416, 478, 486, 488, 489], "step3": [328, 389], "step4": [328, 389], "step5": [328, 389], "op_quant_mod": [329, 390], "ordereddefaultdict": [330, 391], "extract_data_typ": [330, 391], "data_typ": [330, 391], "sign": [330, 391, 410, 417, 433, 478, 482], "reverted_data_typ": [330, 391], "signed_flag": [330, 391], "get_adaptor_nam": [330, 391], "experiment": [331, 366, 371, 412, 435, 439, 440, 442, 451, 475, 477, 481, 485], "base_model": [331, 342], "keras_model": [331, 342], "mxnet_model": [331, 342], "nets_factori": [331, 342], "onnx_model": [331, 342, 366], "tensorflow_model": [331, 342, 371], "torch_model": [331, 342], "collect_layer_histogram": [331, 398], "create_obj_from_config": [331, 398], "kl_diverg": [331, 398], "load_huggingfac": [331, 398, 451], "neural_insights_util": [331, 398], "weights_detail": [331, 398], "sub_class": [339, 373], "register_customer_metr": 339, "tell": [339, 373, 477], "topk": [339, 373, 440, 450, 451, 478], "matrix": [339, 373, 414, 462, 487], "frozen": [340, 348, 373, 453], "savedmodel": [340, 348, 373, 489], "chould": 340, "onnx_ml_pb2": [340, 453], "hybirdblock": [340, 373], "paramt": [340, 394], "basemodel": 341, "plai": [341, 476, 480, 483], "role": [341, 480, 483], "kerasmodel": 343, "get_model_fwk_nam": 344, "fwk": 344, "mxnetmodel": 345, "net": 346, "factori": [346, 353, 355, 360, 363, 365, 370], "tfslimnetsfactori": 346, "onnxmodel": [347, 366], "get_model_typ": 348, "validate_graph_nod": 348, "validate_and_inference_input_output": 348, "output_tensor_nam": 348, "graph_sess": 348, "graph_def_sess": 348, "frozen_pb_sess": 348, "load_saved_model": 348, "saved_model_tag": 348, "signatur": 348, "saved_model_dir": 348, "tag": [348, 483, 484], "metagraphdef": 348, "keras_sess": 348, "slim_sess": 348, "checkpoint_sess": 348, "estimator_sess": 348, "saved_model_sess": 348, "tensorflowbasemodel": [348, 371], "tensorflowsavedmodelmodel": 348, "tensorflowqatmodel": 348, "tensorflowcheckpointmodel": 348, "checkpoint": [348, 404, 453], "tensorflowmodel": 348, "pytorchbasemodel": 349, "pytorchfxmodel": 349, "ipexmodel": 349, "driven": [350, 414, 451, 471, 473, 484], "objective_registri": 350, "objective_custom_registri": 350, "obj_cl": 350, "eural_compressor": 350, "objective_cl": 350, "user_object": 350, "__class__": 350, "__name__": 350, "objective_cfg": 350, "usr_cfg": 350, "user_obj_cfg": 350, "easili": [350, 415, 455, 459, 471, 473, 483], "peak": [350, 473], "multiobject": 350, "metric_criterion": 350, "metric_weight": 350, "obj_criterion": 350, "obj_weight": 350, "is_measur": 350, "parserfactori": 352, "onnxrtparserfactori": 354, "onnxprofilingpars": 356, "respons": [356, 357, 361, 478], "profilingpars": 357, "profilingresult": 358, "total_execution_tim": 358, "accelerator_execution_tim": 358, "cpu_execution_tim": 358, "op_run": 358, "op_defin": 358, "tensorflowparserfactori": 359, "tensorflowprofilingpars": 361, "profilerfactori": [362, 364, 369], "create_onnx_config": 367, "ort": 367, "sessionopt": 367, "delete_assign": 372, "create_tf_config": 372, "tf_modul": 372, "configproto": 372, "set_eager_execut": 372, "entir": [373, 394, 411, 416, 417, 433, 475, 483], "autotunestrategi": 374, "conservativetunestrategi": 378, "o0": [378, 486], "who": [378, 409], "hawq_v2tunestrategi": 380, "made": [380, 415, 478, 481, 486], "impact": [380, 481, 486], "tunestrategymeta": 385, "metaclass": 385, "lowerbitssampl": 388, "blockfallbacktuningsampl": 388, "op_block_lst": 388, "target_dtyp": 388, "quantopt": 391, "quant_typ": 391, "quant_opt": 391, "preprocess_user_cfg": 391, "op_user_cfg": 391, "op_user_cfg_modifi": 391, "build_slave_faker_model": 391, "slave": [391, 486], "virtual": [391, 476], "fun": 392, "attribute1": 392, "module_debug_level1": 392, "debug": [392, 401, 437, 464, 468, 472, 486, 487], "function1": 392, "param1": 392, "param2": 392, "parameter1": 392, "parameter2": 392, "o": [392, 448, 456, 483], "function2": 392, "pep": 392, "484": 392, "output_model": [392, 451, 484], "function3": 392, "section": [392, 417, 437, 438, 439, 471, 475, 477, 488], "restructuredtext": 392, "liter": 392, "attributeerror": 392, "except": [392, 405], "generator1": 392, "example_gener": 392, "exampleclass": 392, "param3": 392, "public": [392, 409, 466, 469], "attr1": 392, "attr2": 392, "attr5": 392, "api_doc_exampl": 393, "loop": [394, 411, 412, 416, 417, 444, 482, 486], "compressionmanag": 394, "uesd": 394, "deal": 394, "pruningconfig": 394, "orchestr": [394, 414, 447, 487], "on_train_begin": [394, 411, 438, 439, 451, 474, 475, 478], "train_loop": [394, 451, 474], "on_epoch_begin": [394, 397, 438, 439, 451, 474], "on_step_begin": [394, 397, 438, 439, 451, 474, 475], "on_after_compute_loss": [394, 438, 439, 451, 474], "backward": [394, 438, 439, 440, 451, 474, 475, 478, 481], "on_before_optimizer_step": [394, 438, 439, 451, 474, 475], "on_step_end": [394, 397, 438, 439, 451, 474], "on_epoch_end": [394, 397, 438, 439, 451, 474], "on_train_end": [394, 438, 439, 451, 474, 475, 478], "path_to_sav": 394, "manag": [394, 397, 451, 454, 455, 465], "top1": [394, 450, 475, 478, 489], "callbacks_list": 394, "layerhistogramcollector": 395, "layer_tensor": 395, "include_lay": 395, "get_func_from_config": 397, "func_dict": 397, "get_preprocess": 397, "get_metr": 397, "get_postprocess": 397, "get_algorithm": 397, "algo": 397, "create_dataset": 397, "cfg_preprocess": 397, "cfg_filter": 397, "create_dataload": 397, "dataloader_cfg": 397, "create_eval_func": 397, "postprocess_cfg": 397, "fp32_baselin": [397, 415], "baselin": [397, 482, 484], "create_train_func": 397, "train_cfg": 397, "Their": 397, "auxiliari": 398, "optimizedmodel": 400, "from_pretrain": [400, 451], "save_for_huggingface_upstream": [400, 451], "output_dir": [400, 451, 459, 460], "msg": 401, "fatal": 401, "warn": 401, "warin": 401, "alia": [401, 405, 456, 461], "insight": [402, 414, 437, 476, 481, 486, 487], "register_neural_insights_workload": 402, "workload_loc": [402, 405], "workload_mod": 402, "workload": [402, 405, 476], "uuid": 402, "update_neural_insights_workload": 402, "workload_uuid": 402, "update_neural_insights_workload_accuracy_data": 402, "baseline_accuraci": 402, "optimized_accuraci": 402, "is_int8_model": 404, "checkpoint_dir": 404, "history_cfg": 404, "best_configur": 404, "best_model_weight": 404, "pt": [404, 453, 476, 478, 479, 480], "snapshot": 404, "cfg_from_fil": 405, "yaml_fil": [405, 435, 440], "lazyimport": 405, "lazi": 405, "till": [405, 486], "decorat": 405, "time_limit": 405, "get_siz": 405, "seen": [405, 415], "recurs": 405, "compute_spars": 405, "fault_tolerant_fil": 405, "equal_dict": 405, "d2": 405, "compare_kei": 405, "ignore_kei": 405, "cpuinfo": 405, "dump_elapsed_tim": [405, 415], "customized_msg": 405, "elaps": 405, "combine_histogram": 405, "old_hist": 405, "old": [405, 451, 481], "get_tensor_histogram": 405, "get_all_fp32_data": 405, "get_tuning_histori": 405, "tuning_history_path": 405, "offlin": [405, 409, 451, 478, 483], "str2arrai": 405, "dequantize_weight": 405, "weight_tensor": 405, "min_filter_tensor": 405, "max_filter_tensor": 405, "scale_info": 405, "captureoutputtofil": 405, "tmp_file_path": 405, "stream": [405, 489], "sy": [405, 457], "stderr": 405, "captur": 405, "statist": [405, 406], "header": [405, 443], "field_nam": 405, "output_handl": 405, "printer": 405, "global_st": 405, "load_data_from_pkl": 405, "pkl": 405, "dump_data_to_loc": 405, "show_memory_info": 405, "hint": 405, "dump_class_attr": 405, "compare_object": 405, "obj1": 405, "obj2": 405, "ignore_attr": 405, "comparison": [405, 481, 484], "alias_param": 405, "param_nam": 405, "param_alia": 405, "alias": 405, "print_tabl": 405, "column_map": 405, "table_entri": 405, "titl": [405, 449, 472, 486], "insert_newlin": 405, "prettyt": 405, "column": [405, 483], "func": [405, 416, 478, 488], "handler": [405, 486], "row": [405, 437, 483], "decim": 405, "get_tensors_info": 405, "get_weights_detail": 405, "weightdetail": 405, "dump_tabl": 405, "filepath": 405, "file_typ": 405, "csv": [405, 412], "dump_table_to_csv": 405, "get_number_of_socket": 405, "platform": [405, 414, 447, 454, 462, 476, 478], "opentri": 405, "activation_min": 405, "activation_max": 405, "print_op_list": 405, "get_op_list": 405, "minmax_file_path": 405, "input_model_tensor": 405, "optimized_model_tensor": 405, "activation_min_max": 405, "calculate_ms": 405, "mse_metric_gap": 405, "fp32_tensor": 405, "dequantize_tensor": 405, "euclidean": [405, 438], "distanc": [405, 438], "weightsdetail": 406, "input_tensor_data": 406, "optimized_tensor_data": 406, "weightsstatist": 406, "welcom": [408, 409, 410, 414, 490], "interest": [409, 414, 484], "foster": 409, "particip": 409, "commun": 409, "harass": 409, "experi": [409, 454, 482, 483, 486], "everyon": 409, "regardless": 409, "ag": 409, "bodi": 409, "ethnic": 409, "characterist": 409, "gender": 409, "educ": 409, "socio": 409, "econom": 409, "appear": [409, 465, 471], "race": 409, "religion": 409, "sexual": 409, "orient": 409, "behavior": [409, 410, 415, 416, 417, 444, 453, 484, 486, 488], "contribut": [409, 414, 475], "inclus": 409, "Being": 409, "respect": [409, 444, 475, 483, 488], "viewpoint": 409, "gracefulli": 409, "focus": [409, 415], "empathi": 409, "toward": [409, 438], "member": [409, 415], "unaccept": 409, "imageri": 409, "unwelcom": 409, "troll": 409, "insult": 409, "derogatori": 409, "comment": [409, 416, 435, 450, 451, 480, 485], "polit": 409, "attack": 409, "privat": 409, "publish": [409, 449, 452, 472, 483], "electron": 409, "explicit": 409, "permiss": 409, "inappropri": 409, "profession": 409, "clarifi": 409, "appropri": [409, 433, 483], "fair": 409, "action": [409, 466, 469], "edit": 409, "reject": 409, "commit": [409, 410], "wiki": 409, "issu": [409, 410, 413, 448, 478, 484], "ban": 409, "temporarili": 409, "deem": 409, "threaten": 409, "offens": 409, "harm": 409, "mail": 409, "social": [409, 414, 476], "media": [409, 414, 476], "account": [409, 482, 486], "appoint": 409, "onlin": [409, 482], "event": [409, 484], "abus": 409, "report": [409, 410, 482], "contact": [409, 481, 482], "complaint": 409, "review": [409, 410], "investig": 409, "circumst": [409, 477], "oblig": 409, "confidenti": 409, "regard": [409, 479], "incid": 409, "separ": [409, 446, 449, 474, 477], "good": [409, 478, 486], "faith": 409, "face": [409, 414, 422, 454, 458, 476, 481, 489], "repercuss": 409, "leadership": 409, "faq": [409, 414], "page": [409, 410], "send": [410, 416], "view": [410, 414, 441, 462, 471, 481], "pylint": 410, "flake8": 410, "autopep8": 410, "cover": [410, 442, 446, 476], "would": [410, 451, 475, 478, 483], "adopt": [410, 454, 475, 476, 483], "certif": 410, "agre": 410, "j": [410, 414, 483, 489], "bug": 410, "jira": 410, "ticket": 410, "potenti": [410, 412, 437], "risk": 410, "pr": [410, 434, 450, 466, 469, 481], "reproduc": 410, "hardwar": [410, 414, 415, 438, 447, 451, 471, 475, 476, 477], "submit": [410, 476], "intend": 410, "safe": 410, "collabor": [410, 456, 462], "adher": 410, "toolkit": [411, 448, 454, 462, 476, 487], "tracer": 411, "resolv": [411, 413], "floatfunct": 411, "cat": [411, 442, 457], "done": [411, 438, 439, 455, 471, 475, 478], "10004": [411, 412, 415, 434, 438, 439, 444, 447, 452, 474, 477, 480, 488], "neural_compressor": [411, 412, 414, 417, 432, 434, 435, 437, 438, 439, 440, 442, 445, 446, 450, 451, 452, 453, 473, 474, 475, 477, 478, 479, 481, 482, 483, 485, 486, 488], "eval": [411, 434, 437, 454, 478, 484], "fail": [411, 434, 442], "conduct": [411, 451, 459, 471, 486, 487], "imper": 411, "therefor": [411, 451, 475, 478, 481, 483], "lot": [411, 483], "As": [411, 416, 434, 438, 450, 451, 465, 475, 480, 486], "failur": 411, "successfulli": [411, 440, 476], "suggest": [411, 482], "traceabl": 411, "proxi": 411, "tutori": [411, 462, 476, 487], "prototyp": 411, "html": [411, 414, 466, 469], "highlight": 411, "untrac": 411, "ssd": [411, 442, 489], "resnet34": [411, 489], "r34": 411, "bboxes_labels_scor": 411, "prob": 411, "45": [411, 483, 489], "max_output": 411, "zip": 411, "dbox": 411, "dlabel": 411, "dscore": 411, "decode_singl": 411, "autom": [412, 414, 454, 471, 472, 476, 483], "artifici": 412, "ann": 412, "par": 412, "outperform": 412, "hand": 412, "propos": [412, 415, 438, 452, 483], "lie": [412, 433], "predictor": 412, "shown": [412, 434, 437, 438, 450, 451, 465, 473, 474, 475, 483, 486], "figur": [412, 464, 465, 468], "popul": 412, "inner": 412, "evolutionari": 412, "cycl": 412, "until": [412, 416, 486], "conclud": 412, "met": [412, 444, 478, 484], "yet": [412, 466, 469, 472], "simplest": [412, 433, 457], "launcher": [412, 414, 438, 439, 462, 487], "agent": 412, "nsga2": 412, "supernet": 412, "ofa_mbv3_d234_e346_k357_w1": 412, "acc": [412, 475, 484, 489], "mac": [412, 472], "num_ev": 412, "250": [412, 475], "results_csv_path": 412, "search_result": 412, "dataset_path": 412, "ilsvrc2012": 412, "aim": [412, 414, 454, 475, 483, 486, 487], "mobilenetv3": 412, "lt": [412, 435, 489], "wmt": 412, "en": 412, "de": 412, "guidelin": [413, 414], "mainstream": [414, 487], "learn": [414, 415, 416, 434, 435, 442, 446, 447, 448, 451, 452, 454, 456, 459, 460, 462, 465, 466, 469, 471, 475, 476, 478, 483, 484, 486, 487], "runtim": [414, 415, 416, 418, 434, 437, 441, 444, 447, 452, 456, 461, 462, 477, 481], "workflow": [414, 416, 417, 437, 438, 442, 448, 452, 466, 469, 484, 487], "particular": [414, 475], "wide": [414, 441, 452, 475, 478, 489], "xeon": [414, 448, 449, 452, 476, 478, 479, 489], "scalabl": [414, 448, 452, 476, 478, 479], "processor": [414, 452, 476, 478, 479], "flex": [414, 448], "amd": [414, 447, 448, 489], "arm": [414, 447, 448, 489], "nvidia": [414, 433, 447, 448, 489], "bloom": [414, 483], "176b": [414, 483], "7b": [414, 483, 489], "stabl": [414, 448, 475, 476], "diffus": [414, 476], "gpt": [414, 475, 483, 489], "hub": [414, 441, 445, 462], "hug": [414, 476], "vision": [414, 442, 458, 483], "coder": [414, 447, 455, 456, 459, 462, 465, 476], "cloud": [414, 476], "marketplac": [414, 472, 476], "googl": [414, 452, 476], "amazon": [414, 454, 462], "web": [414, 484], "servic": [414, 471, 476], "azur": [414, 476], "softwar": [414, 449, 475, 476, 481], "alibaba": [414, 461, 468, 469, 476], "tencent": [414, 476], "taco": [414, 476], "ai": [414, 454, 476, 479, 487], "ecosystem": [414, 476], "lightn": [414, 461], "pip": [414, 437, 440, 443, 445, 448, 456, 459, 464, 466, 468, 469, 481], "wget": [414, 437, 443, 445], "storag": [414, 445, 450, 483], "googleapi": [414, 445], "v1_6": [414, 445], "mobilenet_v1_1": [414, 445], "0_224_frozen": [414, 445], "overview": [414, 486], "jupyterlab": [414, 454, 460, 462, 464, 468, 487], "studio": [414, 462, 471, 487], "topic": 414, "innov": [414, 462, 476], "onnxcommunitymeetup2023": [414, 476], "juli": [414, 476], "2023": [414, 480, 483, 489], "blog": [414, 476], "llama": [414, 476], "msft": [414, 476], "oliv": [414, 476], "friendli": [414, 444, 451, 476, 483, 487, 488], "toolchain": [414, 443, 476], "june": [414, 476], "neurip": [414, 476], "oct": [414, 476], "quala": [414, 476], "minilm": [414, 476, 489], "releas": [414, 448, 460, 462, 464, 468, 470, 490], "legal": [414, 490], "secur": [414, 476, 490], "idea": [414, 475, 483, 486], "feel": 414, "bridg": [415, 416, 447], "vanilla": [415, 416, 447], "abcadaptor": 415, "__init__": [415, 434, 435, 450, 486], "query_fw_cap": [415, 417], "query_fused_pattern": 415, "he": 415, "besid": [415, 438, 480], "describ": [415, 417, 437, 444, 484], "past": [415, 480], "mainten": 415, "difficult": [415, 483], "abil": [415, 416, 435, 444, 483], "modif": [415, 444, 459], "fragment": 415, "scenario": [415, 432, 438, 451, 475, 480], "granular": [415, 416, 417, 444, 447, 457, 478, 483, 488], "semant": [415, 444], "mla": [415, 452, 478], "becom": [415, 442, 475, 480], "explor": 415, "inspect_tensor": 415, "op_list": [415, 484], "iteration_list": 415, "inspect_typ": 415, "save_to_disk": 415, "quantization_cfg": 415, "set_tensor": 415, "tensor_dict": 415, "diagnosis_help": 415, "fw": 416, "outlin": [416, 417], "instruct": [416, 417, 438, 448, 452, 466, 469, 476, 477, 478], "extend": [416, 417], "accommod": [416, 417], "incorpor": [416, 417, 439, 486], "give": [416, 471, 486], "diagram": [416, 417, 437, 486], "illustr": [416, 417, 439, 486], "sequencediagram": [416, 417], "autonumb": [416, 417], "query_framework_cap": 416, "opwis": 416, "optypewis": 416, "travers": [416, 417, 486], "\u2776": 416, "\u2777": 416, "\u2778": 416, "\u2779": 416, "\u277a": 416, "\u277b": 416, "previou": [416, 417, 451, 475, 481, 483, 484, 486, 487], "\u277c": 416, "These": [416, 447], "chapter": 416, "confirm": 416, "chosen": [416, 433], "framework_yaml": 416, "int8_conv_config": 416, "node_op": 416, "optype_wise_": 416, "per_tensor": [416, 417, 444, 478, 488], "exmapl": 416, "tuning_cfg_to_fw": 416, "Its": [416, 433], "calib_iter": 416, "dispatch": [416, 447], "is_perchannel": 416, "is_asymmetr": 416, "weight_bit": 416, "convert_bf16": 416, "calib": 416, "larger": [416, 475, 480, 483], "somewhat": 416, "distort": 416, "line": [416, 440, 447, 454, 459, 460, 484], "At": [416, 486], "explain": [417, 437, 483], "let": [417, 444, 459, 475, 477, 488], "overal": [417, 488], "drive": 417, "uint4": 417, "asymmetr": [417, 478, 486], "kullback": [417, 438], "leibler": [417, 438], "pytorch_cpu": 417, "1_11_capabl": 417, "cap_s8_1_11": 417, "cap_s8_1_11_conv1d": 417, "per_channel_symmetr": 417, "addition": [417, 440, 486], "per_tensor_symmetr": 417, "One": [417, 435, 440, 447, 475, 476, 486], "due": [417, 442, 475, 478, 483, 484], "nativ": 417, "simul": 417, "with_arg": 417, "qscheme": 417, "torch_dtyp": 417, "quant_min": 417, "quant_max": 417, "linux": [432, 443, 465, 471], "x86_64": 432, "aarch64": 432, "prove": [433, 483], "benefici": 433, "uniform": 433, "\u03b2": 433, "\u03b1": 433, "fundament": [433, 451], "primari": [433, 486], "focu": [433, 486], "essenti": [433, 443], "remaind": 433, "enhanc": [433, 454, 476, 479], "resolut": 433, "extrem": 433, "still": [433, 451, 476, 478, 479], "retain": 433, "noteworthi": 433, "vanhouck": 433, "vincent": 433, "andrew": 433, "senior": 433, "mark": 433, "mao": 433, "speed": [433, 451, 462, 475, 476, 478, 486], "2011": 433, "szymon": 433, "migacz": 433, "2017": 433, "mckinstri": 433, "jeffrei": 433, "l": [433, 438, 484, 486], "discov": [433, 484], "preprint": [433, 475, 480, 483], "1809": 433, "04191": 433, "2018": 433, "encount": 434, "consum": 434, "previous": 434, "lack": [434, 443], "faster": [434, 436, 442, 476, 486, 489], "treat": 434, "Of": 434, "getitem": 434, "fn": 434, "evenli": 434, "divid": [434, 483, 486], "discard": 434, "throw": 434, "awai": 434, "draw": [434, 482, 486], "worker": [434, 451, 478], "subprocess": 434, "pin": [434, 464, 468], "reshuffl": 434, "manner": [434, 438, 453], "newdataload": 434, "customis": [434, 435, 450], "ensp": [435, 485], "imagerecord": [435, 440, 488], "image_nam": 435, "cocorecord": 435, "gt": [435, 483, 485], "int64": 435, "offer": 435, "style_transf": 435, "content": 435, "tfrecorddataset": 435, "labelbal": 435, "300": 435, "16": [435, 483, 489], "helloworld": [435, 452, 485], "aid": 436, "deploy": [436, 454, 471, 476, 483], "infrastructur": 436, "gap": [437, 453], "diagnos": 437, "gui": [437, 447, 475], "termin": [437, 464, 465, 468], "repeat": [437, 486], "durat": [437, 482], "git": [437, 443, 448], "clone": [437, 448, 464, 468], "cd": [437, 440, 448], "setup": [437, 444, 448, 466, 469, 475], "ilsvr2012": 437, "caff": 437, "berkeleyvis": 437, "caffe_ilsvrc12": 437, "xvzf": 437, "image_recognit": [437, 484], "resnet50_torchvis": 437, "ptq_static": 437, "resnet50_v1": [437, 440, 451], "dataset_loc": [437, 484], "label_path": 437, "quantiti": 437, "vec": 437, "mu": 437, "frac": [437, 483], "sigma": 437, "var": 437, "happen": 437, "dispers": 437, "trust": 437, "rule": [437, 454, 475], "v0": [437, 484], "cg": [437, 484], "conv0": [437, 484], "expens": [438, 451, 486], "deploi": [438, 451, 480, 486], "power": [438, 451, 465, 476], "mobil": [438, 451, 489], "produc": 438, "logit": 438, "softmax": 438, "kd": 438, "patient": 438, "compact": [438, 451, 457, 475], "agnost": 438, "resourc": [438, 486], "convolut": [438, 476], "ia": 438, "attach": [438, 451, 483], "shallow": 438, "deepest": 438, "deeper": 438, "paper": [438, 475, 480, 483], "10006": [438, 439], "student_output": [438, 439], "student_loss": [438, 439], "training_func_for_nc": [438, 439], "distil_loss_conf": 438, "accordingli": [438, 462], "promis": [439, 451, 475], "huge": [439, 475], "heavi": 439, "light": 439, "booster": 439, "degrad": [439, 475, 486], "novel": [439, 454, 465, 471], "place": [439, 448, 475, 484], "comb": 439, "distillation_criterion": [439, 451, 474], "q_conf": 439, "horovod": 440, "instal": [440, 443, 445, 454, 456, 459, 462, 466, 469, 471, 472, 490], "builtin": 440, "program": [440, 449, 454, 471], "enable_eager_execut": 440, "yaml_file_path": 440, "pre_process": 440, "simpli": [440, 453, 454, 456, 459, 471], "evaluation_result": 440, "evaluation_time_cost": 440, "partit": [440, 475], "distributedsampl": 440, "train_sampl": 440, "train_dataset": [440, 478], "num_replica": 440, "rank": 440, "train_load": 440, "train_kwarg": 440, "adadelta": 440, "distributedoptim": 440, "named_paramet": 440, "broadcast_paramet": 440, "root_rank": 440, "broadcast_optimizer_st": 440, "set_epoch": 440, "batch_idx": 440, "zero_grad": [440, 451, 475], "nll_loss": 440, "log_interv": 440, "0f": 440, "tloss": 440, "6f": 440, "dry_run": 440, "test_func": 440, "host": 440, "num_of_process": 440, "002": 440, "ssh": [440, 471], "prompt": 440, "readm": 440, "exactli": [440, 455], "recognit": [440, 442, 475, 484], "resizecropimagenet": [440, 485], "realiz": [440, 473, 479, 482], "tow": 440, "node1": 440, "node2": 440, "TO": [440, 456], "your_node1_nam": 440, "your_node2_nam": 440, "resnet50_fp32_pretrained_model": 440, "nc_resnet50_v1": 440, "resnet": [440, 489], "varieti": [441, 477, 486], "demonstr": [441, 454, 484], "10k": [441, 445], "speedup": [441, 447, 478], "2x": [441, 447], "vnni": [441, 447, 477, 478], "exchang": 442, "hope": 442, "inc_model": [442, 453], "fp32_onnx_config": 442, "verifi": 442, "vgg16": [442, 489], "mobilenet": [442, 482, 489], "rcnn": 442, "torchscript": [442, 483], "unsupport": [442, 451, 475], "add_relu": 442, "conv1d_relu": 442, "conv2d_relu": 442, "group_norm": 442, "hardswish": 442, "instance_norm": 442, "layer_norm": 442, "leaky_relu": 442, "sigmoid": 442, "bare": 443, "metal": 443, "sudo": [443, 457], "apt": [443, 448, 457, 465], "python3": 443, "dev": [443, 464, 468], "distutil": 443, "libgl1": 443, "mesa": 443, "glx": 443, "libglib2": 443, "ln": 443, "sf": 443, "usr": 443, "incompat": 443, "88": [443, 482, 489], "80": [443, 483, 484, 489], "pyobject": 443, "reinstal": 443, "importerror": 443, "libgl": 443, "No": [443, 451, 476], "yum": [443, 448], "opencv": [443, 465], "conda": [443, 448, 457, 465, 481], "13": [443, 448, 481, 483, 489], "pend": 443, "sqlalchemi": 443, "27": [443, 489], "alemb": 443, "forg": [443, 448], "quick": [444, 452, 487, 488], "dive": [444, 487], "unless": 444, "purpos": [444, 452, 471, 477, 478], "syntax": 444, "go": [444, 466, 469, 477, 485], "up1": 444, "up2": 444, "valid_mixed_precis": 444, "addn": 444, "grappler_optim": 444, "constfold": 444, "arithmet": 444, "debug_stripp": 444, "major": [446, 478, 483], "concept": [446, 482, 487], "rather": 446, "custom_metr": 446, "refin": [446, 475], "broad": [447, 460, 487], "420": 447, "geomean": 447, "snippet": 447, "upload": [447, 466, 469], "click": [447, 454, 455, 462, 465, 471, 476, 484], "button": [447, 465, 471], "qintegerop": [447, 478], "plan": 447, "oneapi": [448, 476, 487], "analyt": [448, 476, 487], "success": 448, "11": [448, 450, 452, 483, 486, 489], "frequent": 448, "ask": 448, "pypi": [448, 466, 469], "nightli": 448, "consolid": 448, "latest": [448, 476, 481], "eas": [448, 456, 476], "along": [448, 475], "streamlin": [448, 476], "scienc": 448, "websit": 448, "anaconda": 448, "suit": [448, 472, 484], "esri": 448, "formerli": 448, "skylak": 448, "cascad": 448, "lake": [448, 452, 476], "cooper": [448, 452, 476], "ic": [448, 476], "sapphir": 448, "rapid": 448, "hbm": 448, "arctic": 448, "sound": 448, "pont": 448, "vecchio": 448, "cento": [448, 489], "ubuntu": 448, "22": [448, 489], "04": [448, 489], "fortensorflow": 448, "forpytorch": 448, "12": 448, "tf_enable_onednn_opt": 448, "onednn": [448, 452, 478], "newer": 448, "copyright": 449, "subject": 449, "accompani": [449, 486], "research": [449, 483], "wish": 449, "bibtex": 449, "misc": 449, "author": 449, "feng": 449, "tian": 449, "hanwen": 449, "haihao": [449, 475], "shen": [449, 475], "suyu": 449, "chen": 449, "howpublish": 449, "year": 449, "logo": 449, "atom": 449, "phi": 449, "pentium": 449, "vtune": 449, "corpor": 449, "subsidiari": 449, "brand": 449, "claim": 449, "popularli": 450, "industri": [450, 476], "label_map": 450, "decis": 450, "ap": 450, "curv": 450, "turn": [450, 465], "target_boxes_num": 450, "str_label": 450, "int_label": 450, "inturn": 450, "cocomap": 450, "vocmap": 450, "categor": 450, "multiclass": 450, "multilabel": 450, "newmetr": 450, "reset": 450, "reflect": [450, 485], "new_metr": 450, "deliv": [451, 476, 481], "conveni": 451, "upgrad": 451, "veri": [451, 472, 478, 486, 487], "comprehens": [451, 487], "kind": 451, "resort": 451, "automodelforsequenceclassif": 451, "autotoken": 451, "val_dataset": [451, 478], "val_dataload": [451, 478], "ping_memori": [451, 478], "formul": 451, "effort": 451, "written": 451, "onnxrt_integ": [451, 488], "onnxrt_qlinear": [451, 488], "image_tensor": [451, 488], "post_training_dynamic_qu": [451, 477, 486], "1000": [451, 488], "2000": 451, "sampling_s": [451, 488], "model_wis": [451, 488], "op_dict": 451, "op_wis": [451, 484, 488], "sigopt_api_token": [451, 482, 486], "sigopt_project_id": [451, 482, 486], "sigopt_experiment_nam": [451, 482, 486], "demo": 451, "600": 451, "training_arg": 451, "emul": [451, 478], "trainer": [451, 462], "briefli": [451, 483], "maxim": [451, 475, 486], "pruning_func": 451, "num_train_epoch": [451, 475], "train_dataload": [451, 475, 478], "n_gpu": 451, "gradient_accumulation_step": 451, "clip_grad_norm_": 451, "max_grad_norm": 451, "rate": [451, 475, 478], "start_epoch": [451, 477, 488], "end_epoch": [451, 477, 488], "97": [451, 483, 489], "newli": [451, 475], "on_after_optimizer_step": [451, 475], "layer3": [451, 475], "lr_schedul": [451, 475], "weight_decai": [451, 488], "0004": 451, "nesterov": [451, 488], "randomresizedcrop": [451, 485], "totensor": [451, 485], "485": [451, 489], "456": [451, 489], "406": 451, "nepoch": 451, "cnt": 451, "loss_sum": 451, "iter_bar": 451, "tqdm": 451, "desc": 451, "teacher_logit": 451, "train_fun": 451, "training_func": 451, "recent": [451, 452], "growth": [451, 452, 475], "complex": [451, 452, 475], "significantli": [451, 452, 475, 486], "bandwidth": [451, 452, 480], "exit_polici": [451, 488], "determinist": 451, "arbitrari": [451, 474], "meaning": [451, 474], "reli": [451, 483], "prune_conf": 451, "quantization_aware_training_conf": 451, "aforement": 451, "inset": 451, "p_conf": [451, 474], "ssd_mobilenet_v1": 451, "benchmarkconf": 451, "half": [452, 462], "sixteen": 452, "launch": [452, 472], "3rd": [452, 476, 478, 479], "gen": [452, 476, 478, 479], "codenam": 452, "boost": [452, 455, 471, 475, 476], "x86": 452, "avx512": [452, 478], "vcvtne2ps2bf16": 452, "vcvtneps2bf16": 452, "vdpbf16p": 452, "fbgemm": [452, 478], "tensorrtexecutionprovid": [452, 478], "cudaexecutionprovid": [452, 478], "cuda": [452, 454, 456, 478], "dnnlexecutionprovid": [452, 478], "avx512_bf16": 452, "plu": 452, "resnet18": [452, 456, 489], "persist": 453, "brought": [453, 455, 462, 478], "tf2": 453, "h5": 453, "hybridblock": 453, "0000": 453, "saved_result": [453, 480], "simplifi": [454, 465, 471, 475, 476], "acquir": 454, "analysi": [454, 471, 475, 482], "heurist": [454, 471], "great": 454, "facilit": 454, "autocast": 454, "my_model": 454, "no_grad": 454, "memory_format": 454, "112": [454, 489], "rand": [454, 483], "plugin": [454, 472], "aw": [454, 462, 476, 489], "sagemak": [454, 462], "inlin": [454, 459, 462], "neural_cod": [454, 456, 458, 459, 460, 462], "bench": 454, "superbench": 454, "enjoi": [455, 459, 462], "rebuild": [455, 464, 468], "reload": [455, 472], "modern": [456, 480], "democrat": [456, 476], "programm": [456, 462, 471], "nano_bf16_channels_last": 456, "nano_bf16_ipex_channels_last": 456, "nano_bf16_ipex": 456, "nano_bf16": 456, "nano_fp32_channels_last": 456, "nano_fp32_ipex_channels_last": 456, "nano_fp32_ipex": 456, "nano_gpu_to_cpu": 456, "nano_int8": 456, "nano_jit_bf16_channels_last": 456, "nano_jit_bf16_ipex_channels_last": 456, "nano_jit_bf16_ipex": 456, "nano_jit_bf16": 456, "nano_jit_fp32_channels_last": 456, "nano_jit_fp32_ipex_channels_last": 456, "nano_jit_fp32_ipex": 456, "nano_jit_fp32": 456, "nano_onnxruntime_fp32": 456, "nano_onnxruntime_int8_qlinear": 456, "openvino": 456, "nano_openvino_fp32": 456, "nano_openvino_int8": 456, "bc": [457, 465], "conda_prefix": 457, "echo": 457, "tradit": [457, 475], "libjemalloc": 457, "libiomp5": 457, "home": 457, "lib": 457, "ld_preload": 457, "malloc_conf": 457, "oversize_threshold": 457, "background_thread": 457, "metadata_thp": 457, "dirty_decay_m": 457, "9000000000": 457, "muzzy_decay_m": 457, "kmp_affin": 457, "kmp_blocktim": 457, "dnnl_primitive_cache_capac": 457, "cpufreq": 457, "scaling_governor": 457, "powersav": 457, "tee": 457, "pytorch_jit_script": [458, 461], "pytorch_channels_last": [458, 461], "run_bench": 458, "patch": [458, 471], "patch_path": 458, "your_patch_path": 458, "sweep": 458, "sweep_object": 458, "bench_config": 458, "bench_featur": 458, "sai": 459, "run_glu": [459, 460], "requisit": 459, "task_nam": [459, 460], "do_ev": [459, 460], "remain": 459, "itself": 459, "run_glue_optim": 459, "static_ipex": 459, "auto_qu": 460, "v4": [460, 489], "albert": [460, 489], "sst2": 460, "alexnet": [460, 489], "pytorch_amp": 461, "optimize_for_infer": 461, "pytorch_jit_trac": 461, "pytorch_jit_script_ofi": 461, "pytorch_jit_trace_ofi": 461, "torchdynamo": 461, "pytorch_torchdynamo_jit_script": 461, "pytorch_torchdynamo_jit_trac": 461, "pytorch_torchdynamo_jit_script_ofi": 461, "pytorch_torchdynamo_jit_trace_ofi": 461, "pytorch_inc_bf16": 461, "pytorch_inc_static_quant_fx": 461, "pytorch_inc_static_quant_ipex": 461, "pytorch_inc_dynamic_qu": 461, "pytorch_ipex_fp32": 461, "pytorch_ipex_bf16": 461, "pytorch_ipex_int8_static_qu": 461, "pytorch_ipex_int8_dynamic_qu": 461, "blade": 461, "disc": 461, "pytorch_aliblad": 461, "pytorch_lightning_bf16_cpu": 461, "tensorflow_amp": 461, "keras_amp": 461, "tensorflow_inc": 461, "keras_inc": 461, "onnx_inc_static_quant_qlinear": 461, "onnx_inc_static_quant_qdq": 461, "onnx_inc_dynamic_qu": 461, "optimum": [461, 462], "pytorch_inc_huggingface_optimum_stat": 461, "pytorch_inc_huggingface_optimum_dynam": 461, "intel_extension_for_transform": 461, "bigdl": [461, 462], "nano": [461, 462], "nano_": 461, "inc_auto": 461, "delight": 462, "announc": 462, "v": [462, 471, 475, 486, 488], "500": 462, "jupyt": [462, 464, 465, 468], "isa": 462, "adjust": [462, 478, 483], "xpu": 462, "delta": 462, "acc_delta": 462, "int8_acc": 462, "fp32_acc": 462, "ext": [464, 466, 468, 469, 470], "lab": [464, 465, 466, 468, 469], "nodej": [464, 468], "jlpm": [464, 468], "yarn": [464, 468], "npm": [464, 465, 468], "lieu": [464, 468], "labextens": [464, 465, 468], "typescript": [464, 468], "watch": [464, 468], "immedi": [464, 468, 475], "refresh": [464, 468], "browser": [464, 468], "wait": [464, 468, 471], "rebuilt": [464, 468], "easier": [464, 468, 471, 476], "symlink": [464, 468], "down": 465, "finish": 465, "enter": [465, 471], "blank": 465, "cell": 465, "gain": [465, 474, 476], "mkl": 465, "jemalloc": 465, "pip3": 465, "headless": 465, "pyproject": [466, 469], "toml": [466, 469], "twine": [466, 469], "whl": [466, 469], "dist": [466, 469], "sdist": [466, 469], "bdist_wheel": [466, 469], "deprec": [466, 469, 481, 485], "frontend": [466, 469], "login": [466, 469, 482], "repositori": [466, 469], "cut": [466, 469], "fork": [466, 469], "admin_github_token": [466, 469], "pypi_token": [466, 469], "npm_token": [466, 469], "secret": [466, 469], "panel": [466, 469, 471], "draft": [466, 469], "changelog": [466, 469, 470], "pkg": [466, 469], "bot": [466, 469], "pick": [466, 469, 472], "feedstock": [466, 469], "hatch": 469, "notabl": 470, "vscode": [470, 472], "daili": 471, "advantag": [471, 475, 477, 486], "remot": 471, "re": [471, 480], "market": 471, "uninstal": 471, "fill": [471, 482, 485, 486], "upper": 471, "sidebar": 471, "hover": 471, "track": [471, 482], "argpars": 471, "pop": 471, "diff": 471, "manifest": 472, "declar": 472, "palett": 472, "registercommand": 472, "amodio": 472, "tsl": 472, "matcher": 472, "dbaeumer": 472, "eslint": 472, "press": 472, "f5": 472, "ctrl": 472, "hello": 472, "world": 472, "breakpoint": 472, "consol": 472, "relaunch": 472, "toolbar": 472, "node_modul": 472, "viewlet": 472, "dropdown": 472, "runner": 472, "startup": 472, "bundl": 472, "multi_object": 473, "benefit": 474, "instanti": 474, "neuron": 475, "art": 475, "grown": 475, "unpreced": 475, "increasingli": 475, "crucial": 475, "stand": [475, 486], "delet": 475, "commonli": 475, "shrink": 475, "contextu": 475, "howev": [475, 480, 483], "scene": 475, "haven": 475, "color": 475, "lowest": [475, 486], "formula": [475, 483], "emsp": 475, "downstream": 475, "finetun": [475, 489], "prone": 475, "co": 475, "discourag": 475, "push": [475, 480, 483], "penal": 475, "parameter": 475, "exemplifi": 475, "complement": 475, "fortieth": 475, "miss": [475, 478], "pruner2": 475, "mention": [475, 480], "readi": 475, "hesit": 475, "sst": [475, 489], "25": [475, 483, 489], "63": [475, 483, 489], "24": [475, 483, 486, 489], "35": [475, 489], "flan": 475, "t5": 475, "english": 475, "romanian": 475, "404": [475, 489], "381": 475, "yolov5": 475, "75": [475, 483, 489], "2x1": [475, 489], "801": 475, "7895": 475, "signific": [475, 476, 483], "reduct": [475, 488], "namhoon": 475, "lee": 475, "thalaiyasingam": 475, "ajanthan": 475, "philip": 475, "torr": 475, "2019": 475, "zafrir": 475, "ofir": 475, "ariel": 475, "larei": 475, "boudoukh": 475, "mosh": 475, "wasserblat": 475, "2111": 475, "05754": 475, "2021": 475, "medium": 476, "chatbot": 476, "netflix": 476, "apr": 476, "mlperf": [476, 489], "5x": 476, "heterogen": 476, "mar": 476, "busi": 476, "jan": 476, "amx": 476, "4th": [476, 478], "mleffici": 476, "dec": 476, "wechat": 476, "deepen": 476, "foundat": 476, "intellig": 476, "vmware": 476, "applianc": 476, "bitnami": 476, "nov": 476, "sota": 476, "few": [476, 486], "plug": 476, "twitter": 476, "linkedin": 476, "zone": 476, "land": 476, "gcp": 476, "pat": 476, "keynot": 476, "intelon": 476, "sep": 476, "chines": 476, "aug": 476, "purif": 476, "sacrif": 476, "jun": 476, "partner": 476, "feb": 476, "joint": 476, "bilibili": 476, "gestalt": 476, "ml": 476, "doubl": 476, "reconstruct": 476, "abound": 476, "lpot": [476, 481], "nextplatform": 476, "cern": 476, "gan": 476, "3dgan": 476, "iml": 476, "workshop": 476, "asplo": 476, "18": [476, 489], "highli": 476, "intelcaff": 476, "aris": 477, "henc": 477, "onnxrt_qoper": 477, "quant_aware_train": 477, "weight_compress": [477, 488], "initial_spars": [477, 488], "prune_typ": [477, 488], "basic_magnitud": [477, 488], "update_frequ": 477, "prune_domain": 477, "tile_pattern_1x1": 477, "invent": 478, "int4": 478, "cost": [478, 480], "On": [478, 489], "theoret": [478, 480], "zeropoint": 478, "255": [478, 483], "overflow": 478, "solv": [478, 481], "unseen": 478, "enough": 478, "peopl": 478, "mimic": 478, "fact": 478, "ultim": 478, "pain": 478, "lossi": 478, "chart": [478, 482, 484], "understand": [478, 484, 487], "philosophi": 478, "request": 478, "neither": 478, "nor": 478, "val_load": 478, "avg": 478, "themselv": 478, "ON": 479, "forc": 479, "postposttrainingquantconfig": 479, "bf16wrapper": 479, "retrac": 479, "preval": 480, "grow": 480, "demand": 480, "w8a8": 480, "trade": 480, "bottleneck": 480, "roughli": 480, "speak": 480, "capac": [480, 482], "flop": 480, "famou": 480, "approx": 480, "bmm": 480, "100x": 480, "straightforward": [480, 483], "excel": 480, "gptq": 480, "stai": [480, 483], "89": [480, 483, 489], "wip": 480, "gptq_arg": 480, "percdamp": 480, "awq_arg": 480, "xiao": [480, 483], "guangxuan": [480, 483], "2211": [480, 483], "10438": [480, 483], "wei": [480, 483], "xiui": [480, 483], "suppress": [480, 483], "2209": [480, 483], "13325": [480, 483], "lin": 480, "ji": 480, "2306": 480, "00978": 480, "frantar": 480, "elia": 480, "site": 481, "assist": 481, "sed": 481, "your_script": 481, "backbon": 482, "interact": 482, "sigopt_experiment_id": 482, "nc": [482, 486], "certain": 482, "suffici": 482, "ordinari": 482, "receiv": 482, "latenc": [482, 486], "8266": 482, "8372": 482, "2132": 482, "83": [482, 483, 489], "7495": 482, "8299": 482, "8294": 482, "85": [482, 483, 489], "0837": 482, "8291": 482, "4469": 482, "gigant": 483, "systemat": 483, "quantif": 483, "migrat": [483, 487], "difficulti": 483, "mathemat": 483, "allevi": 483, "coarsest": 483, "finer": [483, 486], "matric": 483, "similarli": 483, "finest": 483, "consumpt": 483, "why": [483, 484], "suppos": 483, "6839": 483, "4741": 483, "7451": 483, "9301": 483, "1742": 483, "6835": 483, "q_min": 483, "q_max": 483, "q_x": 483, "clamp_": 483, "round_": 483, "w_q": 483, "00296431384049356": 483, "59": [483, 489], "172": 483, "192": 483, "w_dq": 483, "1220": 483, "0500": 483, "1430": 483, "2570": 483, "1890": 483, "mseloss": 483, "1983354538679123": 483, "6848": 483, "4743": 483, "7440": 483, "9308": 483, "1749": 483, "385297635664756e": 483, "07": [483, 488, 489], "affect": 483, "quantize_per_channel": 483, "x_tmp": 483, "detach": 483, "keepdim": 483, "dequantize_per_channel": 483, "0029": [483, 489], "0036": 483, "162": [483, 489], "48": [483, 489], "72": [483, 489], "93": [483, 489], "207": 483, "139": 483, "6837": 483, "4734": 483, "1751": 483, "6821": 483, "637690492221736e": 483, "6376e": 483, "3852e": 483, "cdot": 483, "quantize_per_tensor_absmax": 483, "n_bit": 483, "div_": 483, "0806": 483, "7589": 483, "6038": 483, "3815": 483, "5040": 483, "7174": 483, "5444": 483, "5826": 483, "7772": 483, "5555": 483, "3740": 483, "3253": 483, "0698": 483, "1381": 483, "5972": 483, "0086": 483, "0737": 483, "8298": 483, "6883": 483, "2991": 483, "1601": 483, "6506": 483, "8246": 483, "3924": 483, "3845": 483, "8768": 483, "w_scale": 483, "x_q": 483, "x_scale": 483, "84": [483, 489], "120": 483, "0059755356051027775": 483, "119": 483, "57": [483, 489], "91": [483, 489], "006533813662827015": 483, "y_q": 483, "17509": 483, "7608": 483, "4055": 483, "16599": 483, "21020": 483, "10016": 483, "9860": 483, "22444": 483, "y_dq": 483, "6836": 483, "2970": 483, "1583": 483, "6481": 483, "8207": 483, "3911": 483, "3850": 483, "8763": 483, "though": 483, "simplic": 483, "middl": 483, "denot": 483, "fp1": 483, "fp2": 483, "subsect": [483, 488], "even": 483, "intuit": 483, "x1": [483, 486], "x2": [483, 486], "herebi": 483, "recalcul": 483, "sq": 483, "overhead": 483, "hardtanh": 483, "t5norm": 483, "llamanorm": 483, "groupnorm": 483, "lambada": 483, "sweet": 483, "spot": 483, "region": 483, "bigscienc": 483, "560m": 483, "65": [483, 489], "44": [483, 489], "66": [483, 489], "76": [483, 489], "1b7": 483, "71": [483, 489], "43": [483, 489], "67": [483, 489], "78": [483, 485, 489], "56": [483, 489], "58": [483, 489], "55": [483, 489], "3b": 483, "73": [483, 489], "69": [483, 489], "74": [483, 489], "7b1": 483, "77": [483, 489], "46": [483, 489], "17": [483, 489], "82": [483, 489], "52": [483, 489], "facebook": 483, "125m": 483, "41": [483, 489], "70": [483, 489], "94": [483, 485, 489], "79": [483, 484, 489], "60": [483, 489], "81": [483, 489], "26": [483, 489], "39": [483, 489], "68": [483, 485, 489], "eleutherai": [483, 489], "6b": [483, 489], "29": [483, 489], "96": [483, 489], "jason": 483, "emerg": 483, "transact": 483, "yvinec": 483, "edouard": 483, "proceed": 483, "cvf": 483, "winter": 483, "valuabl": 484, "instrument": 484, "writer": 484, "_pre_eval_hook": 484, "_post_eval_hook": 484, "submodul": 484, "whitelist": 484, "_recordingobserv": 484, "output_tensors_dict": 484, "current_it": 484, "get_tensor_valu": 484, "_observer_forward_hook": 484, "activation_post_process": 484, "_add_observer_": 484, "named_children": 484, "leaf": 484, "add_modul": 484, "register_forward_hook": 484, "dump_tim": 484, "summarywrit": 484, "_acc": 484, "tune_": 484, "add_graph": 484, "get_observer_dict": 484, "observer_dict": 484, "is_quant": 484, "add_histogram": 484, "shell": 484, "bind_al": 484, "logdir_spec": 484, "tune_0_acc0": 484, "tune_1": 484, "tune_1_acc0": 484, "four": 484, "baseline_acc_0": 484, "776": 484, "tune_1_acc_0": 484, "095": 484, "runs_v3": 484, "run_tuning_dump_tensor": 484, "sh": 484, "inceptionv3": 484, "skip": [484, 486], "bash": 484, "run_quant": 484, "topologi": 484, "inception_v3": 484, "inceptionv3_fp32_pretrained_model": 484, "nc_inceptionv3": 484, "inceptionv3_dump_tensor": 484, "poor": 484, "eightbit": 484, "disappear": 484, "centercrop": 485, "randomcrop": 485, "cropres": 485, "decodeimag": 485, "jpeg": 485, "encodejp": 485, "alignimagechannel": 485, "116": 485, "103": 485, "017": 485, "bilinearimagenet": [485, 488], "topilimag": 485, "padding_mod": 485, "border": 485, "pixel": 485, "edg": 485, "colorjitt": 485, "bright": 485, "satur": 485, "hue": 485, "jitter": 485, "tondarrai": 485, "quickli": [486, 487], "human": 486, "concret": 486, "aggress": 486, "classic": 486, "flowchart": 486, "htmllabel": 486, "td": 486, "classdef": 486, "itemstyl": 486, "cce5ff": 486, "stroke": 486, "99ccff": 486, "s1": 486, "s2": 486, "s3": 486, "s4": 486, "s5": 486, "s6": 486, "s7": 486, "nbsp": 486, "subgraphstyl": 486, "ffffff": 486, "attempt": 486, "post_training_auto_qu": 486, "trial": 486, "increment": 486, "ii": 486, "highest": 486, "spent": 486, "hawq_v2_loss": 486, "model_loss": 486, "black": 486, "come": 486, "compli": 486, "posterior": 486, "short": 486, "never": 486, "loglevel": 486, "endlessli": 486, "perspect": 486, "smbo": 486, "appl": 486, "surrog": 486, "densiti": 486, "parzen": 486, "greatest": 486, "hour": 486, "dai": 486, "next_tune_cfg": 486, "overridden": 486, "cluster": 486, "seamlessli": 486, "mpi": 486, "replic": 486, "replica": 486, "fed": 486, "synchron": 486, "mpirun": 486, "number_of_process": 486, "run_cmd": 486, "abctunestrategi": 486, "familiar": 487, "notebook": 487, "introduct": 487, "organ": 488, "logic": 488, "mobilenet_v1": 488, "hyper": 488, "40": [488, 489], "06": [488, 489], "beta_1": 488, "beta_2": 488, "epsilon": 488, "sparsecategoricalcrossentropi": 488, "sum_over_batch_s": 488, "from_logit": 488, "54": [488, 489], "19": [488, 489], "1x": 489, "platinum": 489, "8480": 489, "8ghz": 489, "ht": 489, "turbo": 489, "256gb": 489, "16x16gb": 489, "ddr5": 489, "4800": 489, "mt": 489, "bio": 489, "3a14": 489, "tel2p1": 489, "microcod": 489, "0x2b0001b0": 489, "gcc": 489, "20210514": 489, "red": 489, "hat": 489, "visit": 489, "1s4c14ins1bsthroughput": 489, "sec": 489, "2721": 489, "638": 489, "26x": 489, "23": 489, "31": 489, "2123": 489, "552": 489, "84x": 489, "resnet101": 489, "37": 489, "1477": 489, "432": 489, "42x": 489, "incept": 489, "3267": 489, "92": 489, "1266": 489, "03": 489, "58x": 489, "38": 489, "2399": 489, "1098": 489, "18x": 489, "v3": 489, "1593": 489, "508": 489, "13x": 489, "1032": 489, "249": 489, "14x": 489, "34": 489, "427": 489, "185": 489, "30x": 489, "5503": 489, "1791": 489, "62": 489, "07x": 489, "3639": 489, "1864": 489, "95x": 489, "47": 489, "1538": 489, "236": 489, "51x": 489, "vgg19": 489, "1368": 489, "196": 489, "resnetv2": 489, "1105": 489, "657": 489, "68x": 489, "716": 489, "49": 489, "369": 489, "94x": 489, "152": 489, "269": 489, "89x": 489, "densenet": 489, "121": 489, "617": 489, "498": 489, "24x": 489, "161": 489, "372": 489, "242": 489, "54x": 489, "169": 489, "496": 489, "411": 489, "21x": 489, "efficientnet": 489, "b0": 489, "748": 489, "709": 489, "05x": 489, "00": 489, "134": 489, "34x": 489, "1273": 489, "671": 489, "90x": 489, "136": 489, "53": 489, "1235": 489, "477": 489, "09": 489, "179": 489, "85x": 489, "cnn": 489, "79x": 489, "83x": 489, "156": 489, "67x": 489, "23x": 489, "173": 489, "00x": 489, "yolov3": 489, "211": 489, "41x": 489, "82x": 489, "61": 489, "49x": 489, "86": 489, "424": 489, "174": 489, "44x": 489, "29x": 489, "55612": 489, "43479": 489, "28x": 489, "1s56c1ins1bsthroughput": 489, "65x": 489, "gpt2": 489, "2716": 489, "569": 489, "77x": 489, "2683": 489, "476": 489, "64x": 489, "2349": 489, "1035": 489, "27x": 489, "930": 489, "763": 489, "262": 489, "91x": 489, "4003": 489, "1677": 489, "39x": 489, "2766": 489, "36": 489, "2643": 489, "1495": 489, "238": 489, "1372": 489, "199": 489, "88x": 489, "1457": 489, "630": 489, "31x": 489, "842": 489, "338": 489, "645": 489, "231": 489, "938": 489, "707": 489, "33x": 489, "1533": 489, "1258": 489, "22x": 489, "981": 489, "647": 489, "52x": 489, "850": 489, "444": 489, "37x": 489, "543": 489, "74x": 489, "93x": 489, "947": 489, "233": 489, "788": 489, "462": 489, "71x": 489, "15x": 489, "51958": 489, "39974": 489, "1631": 489, "662": 489, "46x": 489, "1162": 489, "330": 489, "968": 489, "334": 489, "resnest50": 489, "394": 489, "resnext101_32x8d": 489, "558": 489, "108": 489, "efficientnet_b0": 489, "703": 489, "656": 489, "efficientnet_b3": 489, "510": 489, "391": 489, "efficientnet_b7": 489, "150": 489, "55x": 489, "peleenet": 489, "857": 489, "585": 489, "yolo": 489, "160": 489, "66x": 489, "141": 489, "407": 489, "camembert": 489, "402": 489, "32x": 489, "343": 489, "804": 489, "352": 489, "17x": 489, "302": 489, "183": 489, "382": 489, "19x": 489, "35x": 489, "51": 489, "414": 489, "stsb": 489, "413": 489, "410": 489, "138": 489, "69x": 489, "385": 489, "76x": 489, "126": 489, "wikitext": 489, "reform": 489, "crime": 489, "punish": 489, "449": 489, "364": 489, "lvwerra": 489, "pegasu": 489, "samsum": 489, "openai": 489, "whisper": 489, "abeja": 489, "neox": 489, "japanes": 489, "1723": 489, "654": 489, "63x": 489, "1141": 489, "306": 489, "73x": 489, "106": 489, "1379": 489, "729": 489, "389": 489, "25x": 489, "1980": 489, "672": 489, "5032": 489, "1500": 489, "resnext101_32x16d_wsl": 489, "533": 489, "36x": 489, "556": 489, "149": 489, "1412": 489, "710": 489, "99x": 489, "1564": 489, "712": 489, "20x": 489, "1377": 489, "719": 489, "1446": 489, "06x": 489, "1579": 489, "747": 489, "11x": 489, "1508": 489, "749": 489, "01x": 489, "6950": 489, "4214": 489, "6881": 489, "4192": 489, "6563": 489, "3804": 489, "6631": 489, "3922": 489, "423": 489, "158": 489, "571": 489, "53x": 489, "598": 489, "163": 489, "594": 489, "164": 489, "62x": 489, "5473": 489, "2567": 489, "5455": 489, "2563": 489, "shufflenet": 489, "6818": 489, "3839": 489, "78x": 489, "5750": 489, "3861": 489, "googlenet": 489, "1783": 489, "1095": 489, "1755": 489, "1071": 489, "squeezenet": 489, "9918": 489, "5639": 489, "9423": 489, "5501": 489, "caffenet": 489, "3363": 489, "1015": 489, "3276": 489, "798": 489, "10x": 489, "2104": 489, "985": 489, "2054": 489, "745": 489, "zfnet": 489, "864": 489, "866": 489, "455": 489, "1802": 489, "1170": 489, "1813": 489, "1164": 489, "56x": 489, "2615": 489, "1349": 489, "2343": 489, "1322": 489, "499": 489, "1288": 489, "878": 489, "47x": 489, "1173": 489, "851": 489, "38x": 489, "1114": 489, "825": 489, "1056": 489, "792": 489, "669": 489, "140": 489, "110": 489, "yolov4": 489, "12x": 489, "duc": 489, "tini": 489, "1163": 489, "993": 489, "ultra": 489, "8501": 489, "1922": 489, "emot": 489, "ferplu": 489, "3552": 489, "3114": 489, "arcfac": 489, "246": 489, "399": 489, "226": 489, "392": 489, "223": 489, "integerop": 489, "474": 489, "222": 489, "557": 489, "963": 489, "529": 489, "603": 489, "398": 489, "187": 489, "96x": 489, "144": 489, "124": 489, "bidaf": 489, "2757": 489, "2279": 489, "lm": 489, "357": 489, "472": 489, "365": 489, "214": 489, "70x": 489, "489": 489, "212": 489, "213": 489, "61x": 489, "270": 489, "215": 489, "491": 489, "l12": 489, "h384": 489, "1051": 489, "583": 489, "80x": 489, "1076": 489, "589": 489, "896": 489, "396": 489, "753": 489, "274": 489, "210": 489, "271": 489, "l6": 489, "1124": 489, "2010": 489, "1127": 489, "401": 489, "494": 489, "electra": 489, "discrimin": 489, "1804": 489, "1154": 489, "1961": 489, "1158": 489, "mini": 489, "4986": 489, "3444": 489, "45x": 489, "5603": 489, "3320": 489, "bart": 489, "deberta": 489, "147": 489, "170": 489, "16x": 489, "spanbert": 489, "multilingu": 489, "159": 489, "distilgpt2": 489, "layoutlm": 489, "funsd": 489, "50x": 489, "layoutlmv3": 489, "fcn": 489, "taskdataset": 489, "accuracyspars": 489, "ratiospars": 489, "commentsbalancedor": 489, "unbalanc": 489, "answeringsquad": 489, "87f1": 489, "momentumunbalanc": 489, "momentumbalanc": 489, "90f1": 489, "59f1": 489, "23f1": 489, "classificationmrpc": 489, "52f1": 489, "26f1": 489, "classificationsst": 489, "61accuraci": 489, "recognitionimagenet": 489, "95top1": 489, "v5s6": 489, "detectioncoco": 489, "ap0": 489, "6ap0": 489, "393": 489, "584": 489, "34f1": 489, "lassounbalanc": 489, "classificationmnli": 489, "mm": 489, "allbalanc": 489, "32accuraci": 489, "sensitivitybalanc": 489, "classificationqqp": 489, "classificationqnli": 489, "54accuraci": 489, "em": 489, "mobilenetv2": 489, "7965": 489, "wideresnet40": 489, "9522": 489, "8178": 489, "0213": 489, "8235": 489, "027": 489, "5494": 489, "7153": 489, "5540": 489, "0046": 489, "5523": 489, "vgg": 489, "bn": 489, "7022": 489, "7415": 489, "7025": 489, "0003": 489, "6739": 489, "7399": 489, "6845": 489, "0106": 489, "blendcnn": 489, "7034": 489, "8382": 489, "bilstm": 489, "8314": 489, "9403": 489, "9048": 489, "0734": 489, "7323": 489, "8256": 489, "8084": 489, "8814": 489, "7442": 489, "8371": 489, "0119": 489, "0115": 489, "tinybert": 489, "8018": 489, "8044": 489, "8363": 489, "8411": 489, "8025": 489, "8074": 489, "0007": 489, "0030": 489, "8626": 489, "8213": 489, "9091": 489, "8782": 489, "8684": 489, "8259": 489, "0058": 489, "distilroberta": 489, "6057": 489, "6455": 489, "6187": 489, "0130": 489, "c6i": 489, "2xlarg": 489, "c6a": 489, "c6g": 489, "a100cuda": 489, "executionprovid": 489}, "objects": {"": [[0, 0, 0, "-", "block_mask"], [331, 0, 0, "-", "neural_compressor"]], "neural_compressor": [[2, 0, 0, "-", "adaptor"], [162, 0, 0, "-", "algorithm"], [165, 0, 0, "-", "benchmark"], [169, 0, 0, "-", "compression"], [195, 0, 0, "-", "conf"], [197, 0, 0, "-", "config"], [198, 0, 0, "-", "contrib"], [223, 0, 0, "-", "data"], [278, 0, 0, "-", "experimental"], [338, 0, 0, "-", "metric"], [340, 0, 0, "-", "mix_precision"], [342, 0, 0, "-", "model"], [350, 0, 0, "-", "objective"], [351, 0, 0, "-", "profiling"], [373, 0, 0, "-", "quantization"], [381, 0, 0, "-", "strategy"], [393, 0, 0, "-", "template"], [394, 0, 0, "-", "training"], [398, 0, 0, "-", "utils"], [407, 0, 0, "-", "version"]], "neural_compressor.adaptor": [[1, 0, 0, "-", "adaptor"], [3, 0, 0, "-", "keras"], [7, 0, 0, "-", "keras_utils"], [11, 0, 0, "-", "mxnet"], [12, 0, 0, "-", "mxnet_utils"], [14, 0, 0, "-", "onnxrt"], [17, 0, 0, "-", "ox_utils"], [44, 0, 0, "-", "pytorch"], [45, 0, 0, "-", "query"], [46, 0, 0, "-", "tensorflow"], [110, 0, 0, "-", "tf_utils"], [151, 0, 0, "-", "torch_utils"]], "neural_compressor.adaptor.adaptor": [[1, 1, 1, "", "Adaptor"], [1, 2, 1, "", "adaptor_registry"]], "neural_compressor.adaptor.keras": [[3, 1, 1, "", "KerasAdaptor"], [3, 1, 1, "", "KerasQuery"]], "neural_compressor.adaptor.keras_utils": [[4, 0, 0, "-", "conv2d"], [5, 0, 0, "-", "dense"], [6, 0, 0, "-", "depthwise_conv2d"], [8, 0, 0, "-", "pool2d"], [9, 0, 0, "-", "quantizer"], [10, 0, 0, "-", "separable_conv2d"]], "neural_compressor.adaptor.mxnet": [[11, 1, 1, "", "MXNetQuery"], [11, 1, 1, "", "MxNetAdaptor"]], "neural_compressor.adaptor.mxnet_utils": [[13, 0, 0, "-", "util"]], "neural_compressor.adaptor.mxnet_utils.util": [[13, 1, 1, "", "CalibCollector"], [13, 1, 1, "", "CalibData"], [13, 1, 1, "", "CollectorBase"], [13, 1, 1, "", "DataIterLoader"], [13, 1, 1, "", "DataLoaderWrap"], [13, 1, 1, "", "NameCollector"], [13, 1, 1, "", "OpType"], [13, 1, 1, "", "TensorCollector"], [13, 2, 1, "", "amp_convert"], [13, 2, 1, "", "calib_model"], [13, 2, 1, "", "check_mx_version"], [13, 2, 1, "", "combine_capabilities"], [13, 2, 1, "", "create_data_example"], [13, 2, 1, "", "distribute_calib_tensors"], [13, 2, 1, "", "ensure_list"], [13, 2, 1, "", "fuse"], [13, 2, 1, "", "get_framework_name"], [13, 2, 1, "", "is_model_quantized"], [13, 2, 1, "", "isiterable"], [13, 2, 1, "", "make_module"], [13, 2, 1, "", "make_nc_model"], [13, 2, 1, "", "make_symbol_block"], [13, 2, 1, "", "ndarray_to_device"], [13, 2, 1, "", "parse_tune_config"], [13, 2, 1, "", "prepare_dataloader"], [13, 2, 1, "", "prepare_model"], [13, 2, 1, "", "prepare_model_data"], [13, 2, 1, "", "quantize_sym_model"], [13, 2, 1, "", "query_quantizable_nodes"], [13, 2, 1, "", "run_forward"]], "neural_compressor.adaptor.onnxrt": [[14, 1, 1, "", "ONNXRTQuery"], [14, 1, 1, "", "ONNXRT_IntegerOpsAdaptor"], [14, 1, 1, "", "ONNXRT_QDQAdaptor"], [14, 1, 1, "", "ONNXRT_QLinearOpsAdaptor"], [14, 1, 1, "", "ONNXRUNTIMEAdaptor"]], "neural_compressor.adaptor.ox_utils": [[15, 0, 0, "-", "calibration"], [16, 0, 0, "-", "calibrator"], [29, 0, 0, "-", "operators"], [41, 0, 0, "-", "quantizer"], [42, 0, 0, "-", "smooth_quant"], [43, 0, 0, "-", "util"]], "neural_compressor.adaptor.ox_utils.calibration": [[15, 1, 1, "", "ONNXRTAugment"]], "neural_compressor.adaptor.ox_utils.calibrator": [[16, 1, 1, "", "CalibratorBase"], [16, 1, 1, "", "HistogramCollector"], [16, 1, 1, "", "KLCalibrator"], [16, 1, 1, "", "MinMaxCalibrator"], [16, 1, 1, "", "PercentileCalibrator"], [16, 2, 1, "", "calib_registry"], [16, 2, 1, "", "smooth_distribution"]], "neural_compressor.adaptor.ox_utils.operators": [[18, 0, 0, "-", "activation"], [19, 0, 0, "-", "argmax"], [20, 0, 0, "-", "attention"], [21, 0, 0, "-", "binary_op"], [22, 0, 0, "-", "concat"], [23, 0, 0, "-", "conv"], [24, 0, 0, "-", "direct_q8"], [25, 0, 0, "-", "embed_layernorm"], [26, 0, 0, "-", "gather"], [27, 0, 0, "-", "gavgpool"], [28, 0, 0, "-", "gemm"], [30, 0, 0, "-", "lstm"], [31, 0, 0, "-", "matmul"], [32, 0, 0, "-", "maxpool"], [33, 0, 0, "-", "norm"], [34, 0, 0, "-", "ops"], [35, 0, 0, "-", "pad"], [36, 0, 0, "-", "pooling"], [37, 0, 0, "-", "reduce"], [38, 0, 0, "-", "resize"], [39, 0, 0, "-", "split"], [40, 0, 0, "-", "unary_op"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[18, 1, 1, "", "ActivationOperator"], [18, 1, 1, "", "Float16ActivationOperator"], [18, 1, 1, "", "QActivationOperator"], [18, 1, 1, "", "RemovableActivationOperator"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[19, 1, 1, "", "ArgMaxOperator"], [19, 1, 1, "", "QArgMaxOperator"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[20, 1, 1, "", "AttentionOperator"], [20, 1, 1, "", "QAttentionOperator"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[21, 1, 1, "", "BinaryOperator"], [21, 1, 1, "", "Float16BinaryOperator"], [21, 1, 1, "", "QBinaryOperator"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[22, 1, 1, "", "ConcatOperator"], [22, 1, 1, "", "QConcatOperator"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[23, 1, 1, "", "ConvOperator"], [23, 1, 1, "", "QConvOperator"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[24, 1, 1, "", "Direct8BitOperator"], [24, 1, 1, "", "QDirectOperator"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[25, 1, 1, "", "EmbedLayerNormalizationOperator"], [25, 1, 1, "", "QEmbedLayerNormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[26, 1, 1, "", "GatherOperator"], [26, 1, 1, "", "QGatherOperator"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[27, 1, 1, "", "GlobalAveragePoolOperator"], [27, 1, 1, "", "QGlobalAveragePoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[28, 1, 1, "", "GemmOperator"], [28, 1, 1, "", "QGemmOperator"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[30, 1, 1, "", "LSTMOperator"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[31, 1, 1, "", "FusedMatMulOperator"], [31, 1, 1, "", "MatMulOperator"], [31, 1, 1, "", "QMatMulOperator"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[32, 1, 1, "", "MaxPoolOperator"], [32, 1, 1, "", "QMaxPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.norm": [[33, 1, 1, "", "BatchNormalizationOperator"], [33, 1, 1, "", "NormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[34, 1, 1, "", "Operator"], [34, 1, 1, "", "QOperator"], [34, 2, 1, "", "op_registry"], [34, 2, 1, "", "qop_registry"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[35, 1, 1, "", "PadOperator"], [35, 1, 1, "", "QPadOperator"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[36, 1, 1, "", "PoolOperator"], [36, 1, 1, "", "QPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.reduce": [[37, 1, 1, "", "ReduceOperator"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[38, 1, 1, "", "QResizeOperator"], [38, 1, 1, "", "ResizeOperator"]], "neural_compressor.adaptor.ox_utils.operators.split": [[39, 1, 1, "", "QSplitOperator"], [39, 1, 1, "", "SplitOperator"]], "neural_compressor.adaptor.ox_utils.operators.unary_op": [[40, 1, 1, "", "UnaryOperator"]], "neural_compressor.adaptor.ox_utils.quantizer": [[41, 1, 1, "", "Quantizer"]], "neural_compressor.adaptor.ox_utils.smooth_quant": [[42, 1, 1, "", "ORTSmoothQuant"], [42, 2, 1, "", "get_quant_dequant_output"], [42, 2, 1, "", "make_sub_graph"], [42, 2, 1, "", "quant_dequant_data"]], "neural_compressor.adaptor.ox_utils.util": [[43, 1, 1, "", "QuantFormat"], [43, 1, 1, "", "QuantType"], [43, 1, 1, "", "QuantizationMode"], [43, 1, 1, "", "QuantizedInitializer"], [43, 1, 1, "", "QuantizedValue"], [43, 1, 1, "", "QuantizedValueType"], [43, 1, 1, "", "ValueInfo"], [43, 2, 1, "", "attribute_to_kwarg"], [43, 2, 1, "", "calculate_scale_zp"], [43, 2, 1, "", "cast_tensor"], [43, 2, 1, "", "collate_preds"], [43, 2, 1, "", "dequantize_data"], [43, 2, 1, "", "dequantize_data_with_scale_zero"], [43, 2, 1, "", "dtype_to_name"], [43, 2, 1, "", "find_by_name"], [43, 2, 1, "", "float_to_bfloat16"], [43, 2, 1, "", "float_to_float16"], [43, 2, 1, "", "is_B_transposed"], [43, 2, 1, "", "make_dquant_node"], [43, 2, 1, "", "make_quant_node"], [43, 2, 1, "", "quantize_data"], [43, 2, 1, "", "quantize_data_per_channel"], [43, 2, 1, "", "quantize_data_with_scale_zero"], [43, 2, 1, "", "quantize_nparray"], [43, 2, 1, "", "remove_init_from_model_input"], [43, 2, 1, "", "split_shared_bias"], [43, 2, 1, "", "to_numpy"], [43, 2, 1, "", "trt_env_setup"]], "neural_compressor.adaptor.pytorch": [[44, 1, 1, "", "PyTorchAdaptor"], [44, 1, 1, "", "PyTorchWeightOnlyAdaptor"], [44, 1, 1, "", "PyTorch_FXAdaptor"], [44, 1, 1, "", "PyTorch_IPEXAdaptor"], [44, 1, 1, "", "TemplateAdaptor"], [44, 2, 1, "", "get_ops_recursively"]], "neural_compressor.adaptor.query": [[45, 1, 1, "", "QueryBackendCapability"]], "neural_compressor.adaptor.tensorflow": [[46, 1, 1, "", "TensorFlowAdaptor"], [46, 1, 1, "", "TensorflowQuery"], [46, 1, 1, "", "Tensorflow_ITEXAdaptor"]], "neural_compressor.adaptor.tf_utils": [[47, 0, 0, "-", "graph_converter"], [48, 0, 0, "-", "graph_converter_without_calib"], [86, 0, 0, "-", "graph_rewriter"], [109, 0, 0, "-", "graph_util"], [111, 0, 0, "-", "quantize_graph"], [138, 0, 0, "-", "quantize_graph_common"], [139, 0, 0, "-", "smooth_quant_calibration"], [140, 0, 0, "-", "smooth_quant_scaler"], [141, 0, 0, "-", "tf2onnx_converter"], [144, 0, 0, "-", "transform_graph"], [147, 0, 0, "-", "util"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[47, 1, 1, "", "GraphConverter"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[48, 1, 1, "", "GraphConverterWithoutCalib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[50, 0, 0, "-", "bf16"], [75, 0, 0, "-", "generic"], [85, 0, 0, "-", "graph_base"], [94, 0, 0, "-", "int8"], [100, 0, 0, "-", "onnx"], [105, 0, 0, "-", "qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[49, 0, 0, "-", "bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[49, 1, 1, "", "BF16Convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[51, 0, 0, "-", "convert_add_to_biasadd"], [52, 0, 0, "-", "convert_layout"], [53, 0, 0, "-", "convert_leakyrelu"], [54, 0, 0, "-", "convert_nan_to_random"], [55, 0, 0, "-", "convert_placeholder_to_const"], [56, 0, 0, "-", "dequantize_cast_optimizer"], [57, 0, 0, "-", "dilated_contraction"], [58, 0, 0, "-", "dummy_biasadd"], [59, 0, 0, "-", "expanddims_optimizer"], [60, 0, 0, "-", "fetch_weight_from_reshape"], [61, 0, 0, "-", "fold_batch_norm"], [62, 0, 0, "-", "fold_constant"], [63, 0, 0, "-", "fuse_biasadd_add"], [64, 0, 0, "-", "fuse_column_wise_mul"], [65, 0, 0, "-", "fuse_conv_with_math"], [66, 0, 0, "-", "fuse_decomposed_bn"], [67, 0, 0, "-", "fuse_decomposed_in"], [68, 0, 0, "-", "fuse_gelu"], [69, 0, 0, "-", "fuse_layer_norm"], [70, 0, 0, "-", "fuse_pad_with_conv"], [71, 0, 0, "-", "fuse_pad_with_fp32_conv"], [72, 0, 0, "-", "fuse_reshape_transpose"], [73, 0, 0, "-", "graph_cse_optimizer"], [74, 0, 0, "-", "grappler_pass"], [76, 0, 0, "-", "insert_print_node"], [77, 0, 0, "-", "move_squeeze_after_relu"], [78, 0, 0, "-", "pre_optimize"], [79, 0, 0, "-", "remove_training_nodes"], [80, 0, 0, "-", "rename_batch_norm"], [81, 0, 0, "-", "split_shared_input"], [82, 0, 0, "-", "strip_equivalent_nodes"], [83, 0, 0, "-", "strip_unused_nodes"], [84, 0, 0, "-", "switch_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[51, 1, 1, "", "ConvertAddToBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[52, 1, 1, "", "ConvertLayoutOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[53, 1, 1, "", "ConvertLeakyReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[54, 1, 1, "", "ConvertNanToRandom"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[55, 1, 1, "", "ConvertPlaceholderToConst"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[56, 1, 1, "", "DequantizeCastOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[57, 1, 1, "", "DilatedContraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[58, 1, 1, "", "InjectDummyBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[59, 1, 1, "", "ExpandDimsOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[60, 1, 1, "", "FetchWeightFromReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[61, 1, 1, "", "FoldBatchNormNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[62, 1, 1, "", "GraphFoldConstantOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[63, 1, 1, "", "FuseBiasAddAndAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[64, 1, 1, "", "FuseColumnWiseMulOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[65, 1, 1, "", "FuseConvWithMathOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[66, 1, 1, "", "FuseDecomposedBNOptimizer"], [66, 2, 1, "", "bypass_reshape"], [66, 2, 1, "", "get_const_dim_count"], [66, 2, 1, "", "node_from_map"], [66, 2, 1, "", "node_name_from_input"], [66, 2, 1, "", "valid_reshape_inputs"], [66, 2, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[67, 1, 1, "", "FuseDecomposedINOptimizer"], [67, 2, 1, "", "bypass_reshape"], [67, 2, 1, "", "get_const_dim_count"], [67, 2, 1, "", "node_from_map"], [67, 2, 1, "", "node_name_from_input"], [67, 2, 1, "", "valid_reshape_inputs"], [67, 2, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[68, 1, 1, "", "FuseGeluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[69, 1, 1, "", "FuseLayerNormOptimizer"], [69, 2, 1, "", "node_from_map"], [69, 2, 1, "", "node_name_from_input"], [69, 2, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[70, 1, 1, "", "FusePadWithConv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[71, 1, 1, "", "FusePadWithFP32Conv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[72, 1, 1, "", "FuseTransposeReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[73, 1, 1, "", "GraphCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[74, 1, 1, "", "GrapplerOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[76, 1, 1, "", "InsertPrintMinMaxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[77, 1, 1, "", "MoveSqueezeAfterReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[78, 1, 1, "", "PreOptimization"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[79, 1, 1, "", "RemoveTrainingNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[80, 1, 1, "", "RenameBatchNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[81, 1, 1, "", "SplitSharedInputOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[82, 1, 1, "", "StripEquivalentNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[83, 1, 1, "", "StripUnusedNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[84, 1, 1, "", "SwitchOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[85, 1, 1, "", "GraphRewriterBase"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[87, 0, 0, "-", "freeze_fake_quant"], [88, 0, 0, "-", "freeze_value"], [89, 0, 0, "-", "freeze_value_without_calib"], [90, 0, 0, "-", "fuse_conv_redundant_dequantize"], [91, 0, 0, "-", "fuse_conv_requantize"], [92, 0, 0, "-", "fuse_matmul_redundant_dequantize"], [93, 0, 0, "-", "fuse_matmul_requantize"], [95, 0, 0, "-", "meta_op_optimizer"], [96, 0, 0, "-", "post_hostconst_converter"], [97, 0, 0, "-", "post_quantized_op_cse"], [98, 0, 0, "-", "rnn_convert"], [99, 0, 0, "-", "scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[87, 1, 1, "", "FreezeFakeQuantOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[88, 1, 1, "", "FreezeValueTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[89, 1, 1, "", "FreezeValueWithoutCalibTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[90, 1, 1, "", "FuseConvRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[91, 1, 1, "", "FuseConvRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[92, 1, 1, "", "FuseMatMulRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[93, 1, 1, "", "FuseMatMulRequantizeDequantizeNewAPITransformer"], [93, 1, 1, "", "FuseMatMulRequantizeDequantizeTransformer"], [93, 1, 1, "", "FuseMatMulRequantizeNewAPITransformer"], [93, 1, 1, "", "FuseMatMulRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[95, 1, 1, "", "MetaInfoChangingMemOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[96, 1, 1, "", "PostHostConstConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[97, 1, 1, "", "PostCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[98, 1, 1, "", "QuantizedRNNConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[99, 1, 1, "", "ScaleProPagationTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[101, 0, 0, "-", "onnx_graph"], [102, 0, 0, "-", "onnx_node"], [103, 0, 0, "-", "onnx_schema"], [104, 0, 0, "-", "tf2onnx_utils"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[101, 1, 1, "", "OnnxGraph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[102, 1, 1, "", "OnnxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[103, 1, 1, "", "OnnxOpSchema"], [103, 2, 1, "", "get_max_supported_opset_version"], [103, 2, 1, "", "get_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[104, 1, 1, "", "SeqType"], [104, 2, 1, "", "add_port_to_name"], [104, 2, 1, "", "are_shapes_equal"], [104, 2, 1, "", "assert_error"], [104, 2, 1, "", "compute_const_folding_using_tf"], [104, 2, 1, "", "convert_tensorflow_tensor_to_onnx"], [104, 2, 1, "", "find_opset"], [104, 2, 1, "", "get_index_from_strided_slice_of_shape"], [104, 2, 1, "", "get_subgraphs_from_onnx"], [104, 2, 1, "", "get_tensorflow_node_attr"], [104, 2, 1, "", "get_tensorflow_node_shape_attr"], [104, 2, 1, "", "get_tensorflow_tensor_data"], [104, 2, 1, "", "get_tensorflow_tensor_shape"], [104, 2, 1, "", "infer_onnx_shape_dtype"], [104, 2, 1, "", "initialize_name_counter"], [104, 2, 1, "", "is_list_or_tuple"], [104, 2, 1, "", "is_onnx_domain"], [104, 2, 1, "", "make_onnx_inputs_outputs"], [104, 2, 1, "", "make_onnx_shape"], [104, 2, 1, "", "map_numpy_to_onnx_dtype"], [104, 2, 1, "", "map_onnx_to_numpy_type"], [104, 2, 1, "", "map_tensorflow_dtype"], [104, 2, 1, "", "read_tensorflow_node_attrs"], [104, 2, 1, "", "save_protobuf"], [104, 2, 1, "", "set_name"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[106, 0, 0, "-", "insert_qdq_pattern"], [107, 0, 0, "-", "merge_duplicated_qdq"], [108, 0, 0, "-", "share_qdq_y_pattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[106, 1, 1, "", "GenerateGraphWithQDQPattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[107, 1, 1, "", "MergeDuplicatedQDQOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[108, 1, 1, "", "ShareQDQForItexYPatternOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_util": [[109, 1, 1, "", "GraphAnalyzer"], [109, 1, 1, "", "GraphRewriterHelper"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[113, 0, 0, "-", "qat"], [129, 0, 0, "-", "qdq"], [131, 0, 0, "-", "quantize_graph_base"], [132, 0, 0, "-", "quantize_graph_bn"], [133, 0, 0, "-", "quantize_graph_concatv2"], [134, 0, 0, "-", "quantize_graph_conv"], [135, 0, 0, "-", "quantize_graph_for_intel_cpu"], [136, 0, 0, "-", "quantize_graph_matmul"], [137, 0, 0, "-", "quantize_graph_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[112, 0, 0, "-", "fake_quantize"], [114, 0, 0, "-", "quantize_config"], [115, 0, 0, "-", "quantize_helper"], [116, 0, 0, "-", "quantize_layers"], [121, 0, 0, "-", "quantize_wrapper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[112, 1, 1, "", "FakeQuantize"], [112, 1, 1, "", "FakeQuantizeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[114, 1, 1, "", "QuantizeConfig"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[115, 2, 1, "", "init_quantize_config"], [115, 2, 1, "", "qat_clone_function"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[117, 0, 0, "-", "optimize_layer"], [118, 0, 0, "-", "quantize_layer_add"], [119, 0, 0, "-", "quantize_layer_base"], [120, 0, 0, "-", "quantize_layer_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[117, 2, 1, "", "config_quantizable_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[118, 1, 1, "", "QuantizeLayerAdd"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[119, 1, 1, "", "QuantizeLayerBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[120, 1, 1, "", "QuantizeLayerBatchNormalization"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[121, 1, 1, "", "QuantizeWrapper"], [121, 1, 1, "", "QuantizeWrapperBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[122, 0, 0, "-", "fuse_qdq_bn"], [123, 0, 0, "-", "fuse_qdq_concatv2"], [124, 0, 0, "-", "fuse_qdq_conv"], [125, 0, 0, "-", "fuse_qdq_deconv"], [126, 0, 0, "-", "fuse_qdq_in"], [127, 0, 0, "-", "fuse_qdq_matmul"], [128, 0, 0, "-", "fuse_qdq_pooling"], [130, 0, 0, "-", "optimize_qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[122, 1, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[123, 1, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[124, 1, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[125, 1, 1, "", "FuseNodeStartWithDeconv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[126, 1, 1, "", "FuseNodeStartWithFusedInstanceNorm"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[127, 1, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[128, 1, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[130, 1, 1, "", "OptimizeQDQGraph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[131, 1, 1, "", "QuantizeGraphBase"], [131, 1, 1, "", "QuantizeNodeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[132, 1, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[133, 1, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[134, 1, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[135, 1, 1, "", "QuantizeGraphForIntel"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[136, 1, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[137, 1, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[138, 1, 1, "", "QuantizeGraphHelper"]], "neural_compressor.adaptor.tf_utils.smooth_quant_calibration": [[139, 1, 1, "", "SmoothQuantCalibration"]], "neural_compressor.adaptor.tf_utils.smooth_quant_scaler": [[140, 1, 1, "", "SmoothQuantScaler"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[141, 1, 1, "", "TensorflowQDQToOnnxQDQConverter"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[142, 0, 0, "-", "bias_correction"], [143, 0, 0, "-", "graph_transform_base"], [145, 0, 0, "-", "insert_logging"], [146, 0, 0, "-", "rerange_quantized_concat"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[142, 1, 1, "", "BiasCorrection"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[143, 1, 1, "", "GraphTransformBase"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[145, 1, 1, "", "InsertLogging"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[146, 1, 1, "", "RerangeQuantizedConcat"]], "neural_compressor.adaptor.tf_utils.util": [[147, 2, 1, "", "collate_tf_preds"], [147, 2, 1, "", "disable_random"], [147, 2, 1, "", "fix_ref_type_of_graph_def"], [147, 2, 1, "", "generate_feed_dict"], [147, 2, 1, "", "get_estimator_graph"], [147, 2, 1, "", "get_graph_def"], [147, 2, 1, "", "get_input_output_node_names"], [147, 2, 1, "", "get_model_input_shape"], [147, 2, 1, "", "get_tensor_by_name"], [147, 2, 1, "", "get_tensor_val_from_graph_node"], [147, 2, 1, "", "get_weight_from_input_tensor"], [147, 2, 1, "", "int8_node_name_reverse"], [147, 2, 1, "", "is_ckpt_format"], [147, 2, 1, "", "is_saved_model_format"], [147, 2, 1, "", "iterator_sess_run"], [147, 2, 1, "", "read_graph"], [147, 2, 1, "", "strip_equivalent_nodes"], [147, 2, 1, "", "strip_unused_nodes"], [147, 2, 1, "", "tf_diagnosis_helper"], [147, 2, 1, "", "version1_eq_version2"], [147, 2, 1, "", "version1_gt_version2"], [147, 2, 1, "", "version1_gte_version2"], [147, 2, 1, "", "version1_lt_version2"], [147, 2, 1, "", "version1_lte_version2"], [147, 2, 1, "", "write_graph"]], "neural_compressor.adaptor.torch_utils": [[148, 0, 0, "-", "bf16_convert"], [149, 0, 0, "-", "gptq"], [150, 0, 0, "-", "hawq_metric"], [152, 0, 0, "-", "mixed_precision"], [153, 0, 0, "-", "model_wrapper"], [154, 0, 0, "-", "pattern_detector"], [155, 0, 0, "-", "smooth_quant"], [156, 0, 0, "-", "symbolic_trace"], [157, 0, 0, "-", "teq"], [158, 0, 0, "-", "util"], [159, 0, 0, "-", "weight_only"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[148, 1, 1, "", "BF16ModuleWrapper"], [148, 2, 1, "", "Convert"], [148, 2, 1, "", "bf16_symbolic_trace"]], "neural_compressor.adaptor.torch_utils.gptq": [[149, 1, 1, "", "GPTQ"], [149, 1, 1, "", "GPTQuantizer"], [149, 2, 1, "", "find_layers"], [149, 2, 1, "", "find_layers_name"], [149, 2, 1, "", "is_leaf"], [149, 2, 1, "", "log_quantizable_layers_per_transformer"], [149, 2, 1, "", "quantize"], [149, 2, 1, "", "trace_gptq_target_blocks"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[150, 1, 1, "", "HessianTrace"], [150, 1, 1, "", "Node_collector"], [150, 2, 1, "", "compare_weights"], [150, 2, 1, "", "hawq_top"]], "neural_compressor.adaptor.torch_utils.mixed_precision": [[152, 2, 1, "", "ipex_mixed_precision"]], "neural_compressor.adaptor.torch_utils.model_wrapper": [[153, 1, 1, "", "FakeAffineTensorQuantFunction"], [153, 1, 1, "", "TEQLinearFakeQuant"], [153, 1, 1, "", "TEQMulLinear"]], "neural_compressor.adaptor.torch_utils.pattern_detector": [[154, 1, 1, "", "TransformerBasedModelBlockPatternDetector"]], "neural_compressor.adaptor.torch_utils.smooth_quant": [[155, 1, 1, "", "GraphTrace"], [155, 1, 1, "", "TorchSmoothQuant"], [155, 2, 1, "", "get_module"], [155, 2, 1, "", "set_module"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[156, 2, 1, "", "symbolic_trace"], [156, 2, 1, "", "trace_and_fuse_sub_graph"]], "neural_compressor.adaptor.torch_utils.teq": [[157, 1, 1, "", "TEQuantizer"]], "neural_compressor.adaptor.torch_utils.util": [[158, 2, 1, "", "append_attr"], [158, 2, 1, "", "auto_copy"], [158, 2, 1, "", "calculate_quant_min_max"], [158, 2, 1, "", "check_cfg_and_qconfig"], [158, 2, 1, "", "collate_torch_preds"], [158, 2, 1, "", "collect_weight_info"], [158, 2, 1, "", "fetch_module"], [158, 2, 1, "", "generate_activation_observer"], [158, 2, 1, "", "get_depth"], [158, 2, 1, "", "get_dict_at_depth"], [158, 2, 1, "", "get_element_under_depth"], [158, 2, 1, "", "get_embedding_contiguous"], [158, 2, 1, "", "get_example_input"], [158, 2, 1, "", "get_fallback_order"], [158, 2, 1, "", "get_mse_order_per_fp32"], [158, 2, 1, "", "get_mse_order_per_int8"], [158, 2, 1, "", "get_op_type_by_name"], [158, 2, 1, "", "get_quantizable_ops_from_cfgs"], [158, 2, 1, "", "get_torch_version"], [158, 2, 1, "", "input2tuple"], [158, 2, 1, "", "is_fused_module"], [158, 2, 1, "", "match_datatype_pattern"], [158, 2, 1, "", "paser_cfgs"], [158, 2, 1, "", "set_module"], [158, 2, 1, "", "simple_inference"], [158, 2, 1, "", "update_sq_scale"]], "neural_compressor.adaptor.torch_utils.weight_only": [[159, 2, 1, "", "awq_quantize"], [159, 2, 1, "", "get_module_input_output"], [159, 2, 1, "", "gptq_quantize"], [159, 2, 1, "", "qdq_weight_actor"], [159, 2, 1, "", "qdq_weight_asym"], [159, 2, 1, "", "qdq_weight_sym"], [159, 2, 1, "", "quant_weight"], [159, 2, 1, "", "rtn_quantize"], [159, 2, 1, "", "teq_quantize"]], "neural_compressor.algorithm": [[160, 0, 0, "-", "algorithm"], [161, 0, 0, "-", "fast_bias_correction"], [163, 0, 0, "-", "smooth_quant"], [164, 0, 0, "-", "weight_correction"]], "neural_compressor.algorithm.algorithm": [[160, 1, 1, "", "ALGORITHMS"], [160, 1, 1, "", "Algorithm"], [160, 1, 1, "", "AlgorithmScheduler"], [160, 2, 1, "", "algorithm_registry"]], "neural_compressor.algorithm.fast_bias_correction": [[161, 1, 1, "", "FastBiasCorrection"]], "neural_compressor.algorithm.smooth_quant": [[163, 1, 1, "", "SmoothQuant"]], "neural_compressor.algorithm.weight_correction": [[164, 1, 1, "", "WeightCorrection"]], "neural_compressor.benchmark": [[165, 2, 1, "", "benchmark_with_raw_cmd"], [165, 2, 1, "", "call_one"], [165, 2, 1, "", "config_instance"], [165, 2, 1, "", "fit"], [165, 2, 1, "", "generate_prefix"], [165, 2, 1, "", "get_architecture"], [165, 2, 1, "", "get_bounded_threads"], [165, 2, 1, "", "get_core_ids"], [165, 2, 1, "", "get_physical_ids"], [165, 2, 1, "", "get_threads"], [165, 2, 1, "", "get_threads_per_core"], [165, 2, 1, "", "profile"], [165, 2, 1, "", "run_instance"], [165, 2, 1, "", "set_all_env_var"], [165, 2, 1, "", "set_env_var"], [165, 2, 1, "", "summary_benchmark"]], "neural_compressor.compression": [[166, 0, 0, "-", "callbacks"], [168, 0, 0, "-", "distillation"], [171, 0, 0, "-", "pruner"]], "neural_compressor.compression.callbacks": [[166, 1, 1, "", "BaseCallbacks"], [166, 1, 1, "", "DistillationCallbacks"], [166, 1, 1, "", "PruningCallbacks"], [166, 1, 1, "", "QuantizationAwareTrainingCallbacks"]], "neural_compressor.compression.callbacks.DistillationCallbacks": [[166, 3, 1, "", "_epoch_ran"], [166, 3, 1, "", "best_model"], [166, 3, 1, "", "best_score"], [166, 3, 1, "", "eval_frequency"]], "neural_compressor.compression.distillation": [[167, 0, 0, "-", "criterions"]], "neural_compressor.compression.distillation.criterions": [[167, 1, 1, "", "Criterions"], [167, 1, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [167, 1, 1, "", "KnowledgeDistillationFramework"], [167, 1, 1, "", "KnowledgeDistillationLoss"], [167, 1, 1, "", "PyTorchCriterions"], [167, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLoss"], [167, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"], [167, 1, 1, "", "PyTorchKnowledgeDistillationLoss"], [167, 1, 1, "", "PyTorchKnowledgeDistillationLossWrapper"], [167, 1, 1, "", "PyTorchSelfKnowledgeDistillationLoss"], [167, 1, 1, "", "PyTorchSelfKnowledgeDistillationLossWrapper"], [167, 1, 1, "", "SelfKnowledgeDistillationLoss"], [167, 1, 1, "", "TensorflowCriterions"], [167, 1, 1, "", "TensorflowKnowledgeDistillationLoss"], [167, 1, 1, "", "TensorflowKnowledgeDistillationLossExternal"], [167, 1, 1, "", "TensorflowKnowledgeDistillationLossWrapper"], [167, 2, 1, "", "criterion_registry"]], "neural_compressor.compression.pruner": [[170, 0, 0, "-", "criteria"], [173, 0, 0, "-", "model_slim"], [177, 0, 0, "-", "patterns"], [184, 0, 0, "-", "pruners"], [189, 0, 0, "-", "regs"], [190, 0, 0, "-", "schedulers"], [191, 0, 0, "-", "tf_criteria"], [192, 0, 0, "-", "utils"]], "neural_compressor.compression.pruner.criteria": [[170, 1, 1, "", "GradientCriterion"], [170, 1, 1, "", "MagnitudeCriterion"], [170, 1, 1, "", "PruningCriterion"], [170, 1, 1, "", "RetrainFreeCriterion"], [170, 1, 1, "", "SnipCriterion"], [170, 1, 1, "", "SnipMomentumBlockCriterion"], [170, 1, 1, "", "SnipMomentumCriterion"], [170, 2, 1, "", "get_criterion"], [170, 2, 1, "", "register_criterion"]], "neural_compressor.compression.pruner.criteria.GradientCriterion": [[170, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.MagnitudeCriterion": [[170, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.PruningCriterion": [[170, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.RetrainFreeCriterion": [[170, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.SnipCriterion": [[170, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.SnipMomentumBlockCriterion": [[170, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion": [[170, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.model_slim": [[172, 0, 0, "-", "auto_slim"], [174, 0, 0, "-", "pattern_analyzer"], [175, 0, 0, "-", "weight_slim"]], "neural_compressor.compression.pruner.model_slim.auto_slim": [[172, 2, 1, "", "generate_ffn2_pruning_config"], [172, 2, 1, "", "generate_mha_pruning_config"], [172, 2, 1, "", "model_slim"], [172, 2, 1, "", "model_slim_ffn2"], [172, 2, 1, "", "model_slim_mha"], [172, 2, 1, "", "parse_auto_slim_config"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer": [[174, 1, 1, "", "ClassifierHeadSearcher"], [174, 1, 1, "", "ClassifierHeadSearcherTF"], [174, 1, 1, "", "JitBasicSearcher"], [174, 1, 1, "", "Linear2LinearSearcher"], [174, 1, 1, "", "RecipeSearcher"], [174, 1, 1, "", "SelfMHASearcher"], [174, 2, 1, "", "get_attributes"], [174, 2, 1, "", "get_common_module"], [174, 2, 1, "", "print_iterables"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher": [[174, 3, 1, "", "device"], [174, 3, 1, "", "flatten_static_graph"], [174, 3, 1, "", "model"], [174, 3, 1, "", "static_graph"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF": [[174, 3, 1, "", "device"], [174, 3, 1, "", "flatten_static_graph"], [174, 3, 1, "", "model"], [174, 3, 1, "", "static_graph"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher": [[174, 3, 1, "", "device"], [174, 3, 1, "", "flatten_static_graph"], [174, 3, 1, "", "model"], [174, 3, 1, "", "searching_results"], [174, 3, 1, "", "static_graph"], [174, 3, 1, "", "target_layers"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher": [[174, 3, 1, "", "current_pattern"], [174, 3, 1, "", "device"], [174, 3, 1, "", "flatten_static_graph"], [174, 3, 1, "", "model"], [174, 3, 1, "", "searching_results"], [174, 3, 1, "", "static_graph"], [174, 3, 1, "", "target_layers"], [174, 3, 1, "", "target_op_lut"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher": [[174, 3, 1, "", "model"], [174, 3, 1, "", "recipe"], [174, 3, 1, "", "searching_results"], [174, 3, 1, "", "targets"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher": [[174, 3, 1, "", "device"], [174, 3, 1, "", "flatten_static_graph"], [174, 3, 1, "", "model"], [174, 3, 1, "", "static_graph"]], "neural_compressor.compression.pruner.model_slim.weight_slim": [[175, 1, 1, "", "LinearCompression"], [175, 1, 1, "", "LinearCompressionIterator"], [175, 1, 1, "", "PostCompressionUtils"]], "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression": [[175, 3, 1, "", "device"], [175, 3, 1, "", "layer_1"], [175, 3, 1, "", "layer_2"]], "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompressionIterator": [[175, 3, 1, "", "linear_patterns"]], "neural_compressor.compression.pruner.patterns": [[176, 0, 0, "-", "base"], [177, 2, 1, "", "get_pattern"], [178, 0, 0, "-", "mha"], [179, 0, 0, "-", "ninm"], [180, 0, 0, "-", "nxm"]], "neural_compressor.compression.pruner.patterns.base": [[176, 1, 1, "", "BasePattern"], [176, 1, 1, "", "KerasBasePattern"], [176, 1, 1, "", "PytorchBasePattern"], [176, 2, 1, "", "register_pattern"]], "neural_compressor.compression.pruner.patterns.base.BasePattern": [[176, 3, 1, "", "config"], [176, 3, 1, "", "invalid_layers"], [176, 3, 1, "", "is_global"], [176, 3, 1, "", "keep_mask_layers"], [176, 3, 1, "", "max_sparsity_ratio_per_op"], [176, 3, 1, "", "min_sparsity_ratio_per_op"], [176, 3, 1, "", "modules"], [176, 3, 1, "", "pattern"], [176, 3, 1, "", "target_sparsity"]], "neural_compressor.compression.pruner.patterns.base.KerasBasePattern": [[176, 3, 1, "", "config"], [176, 3, 1, "", "invalid_layers"], [176, 3, 1, "", "is_global"], [176, 3, 1, "", "keep_mask_layers"], [176, 3, 1, "", "max_sparsity_ratio_per_op"], [176, 3, 1, "", "min_sparsity_ratio_per_op"], [176, 3, 1, "", "modules"], [176, 3, 1, "", "pattern"], [176, 3, 1, "", "target_sparsity"]], "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern": [[176, 3, 1, "", "config"], [176, 3, 1, "", "invalid_layers"], [176, 3, 1, "", "is_global"], [176, 3, 1, "", "keep_mask_layers"], [176, 3, 1, "", "max_sparsity_ratio_per_op"], [176, 3, 1, "", "min_sparsity_ratio_per_op"], [176, 3, 1, "", "modules"], [176, 3, 1, "", "pattern"], [176, 3, 1, "", "target_sparsity"]], "neural_compressor.compression.pruner.patterns.mha": [[178, 1, 1, "", "PatternMHA"]], "neural_compressor.compression.pruner.patterns.mha.PatternMHA": [[178, 3, 1, "", "M"], [178, 3, 1, "", "N"]], "neural_compressor.compression.pruner.patterns.ninm": [[179, 1, 1, "", "PytorchPatternNInM"]], "neural_compressor.compression.pruner.patterns.ninm.PytorchPatternNInM": [[179, 3, 1, "", "M"], [179, 3, 1, "", "N"]], "neural_compressor.compression.pruner.patterns.nxm": [[180, 1, 1, "", "KerasPatternNxM"], [180, 1, 1, "", "PytorchPatternNxM"]], "neural_compressor.compression.pruner.patterns.nxm.KerasPatternNxM": [[180, 3, 1, "", "block_size"]], "neural_compressor.compression.pruner.patterns.nxm.PytorchPatternNxM": [[180, 3, 1, "", "block_size"]], "neural_compressor.compression.pruner.pruners": [[181, 0, 0, "-", "base"], [182, 0, 0, "-", "basic"], [183, 0, 0, "-", "block_mask"], [184, 2, 1, "", "get_pruner"], [185, 0, 0, "-", "mha"], [184, 2, 1, "", "parse_valid_pruner_types"], [186, 0, 0, "-", "pattern_lock"], [187, 0, 0, "-", "progressive"], [188, 0, 0, "-", "retrain_free"]], "neural_compressor.compression.pruner.pruners.base": [[181, 1, 1, "", "BasePruner"], [181, 1, 1, "", "KerasBasePruner"], [181, 1, 1, "", "PytorchBasePruner"], [181, 2, 1, "", "register_pruner"]], "neural_compressor.compression.pruner.pruners.base.BasePruner": [[181, 3, 1, "", "config"], [181, 3, 1, "", "current_sparsity_ratio"], [181, 3, 1, "", "end_step"], [181, 3, 1, "", "global_step"], [181, 3, 1, "", "masks"], [181, 3, 1, "", "max_sparsity_ratio_per_op"], [181, 3, 1, "", "modules"], [181, 3, 1, "", "pattern"], [181, 3, 1, "", "pruning_frequency"], [181, 3, 1, "", "scheduler"], [181, 3, 1, "", "scores"], [181, 3, 1, "", "start_step"], [181, 3, 1, "", "target_sparsity_ratio"]], "neural_compressor.compression.pruner.pruners.base.KerasBasePruner": [[181, 3, 1, "", "config"], [181, 3, 1, "", "current_sparsity_ratio"], [181, 3, 1, "", "end_step"], [181, 3, 1, "", "global_step"], [181, 3, 1, "", "masks"], [181, 3, 1, "", "max_sparsity_ratio_per_op"], [181, 3, 1, "", "modules"], [181, 3, 1, "", "pattern"], [181, 3, 1, "", "pruning_frequency"], [181, 3, 1, "", "scheduler"], [181, 3, 1, "", "scores"], [181, 3, 1, "", "start_step"], [181, 3, 1, "", "target_sparsity_ratio"]], "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner": [[181, 3, 1, "", "config"], [181, 3, 1, "", "current_sparsity_ratio"], [181, 3, 1, "", "end_step"], [181, 3, 1, "", "global_step"], [181, 3, 1, "", "masks"], [181, 3, 1, "", "max_sparsity_ratio_per_op"], [181, 3, 1, "", "modules"], [181, 3, 1, "", "pattern"], [181, 3, 1, "", "pruning_frequency"], [181, 3, 1, "", "scheduler"], [181, 3, 1, "", "scores"], [181, 3, 1, "", "start_step"], [181, 3, 1, "", "target_sparsity_ratio"]], "neural_compressor.compression.pruner.pruners.basic": [[182, 1, 1, "", "KerasBasicPruner"], [182, 1, 1, "", "PytorchBasicPruner"]], "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner": [[182, 3, 1, "", "criterion"], [182, 3, 1, "", "pattern"], [182, 3, 1, "", "reg"], [182, 3, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner": [[182, 3, 1, "", "criterion"], [182, 3, 1, "", "pattern"], [182, 3, 1, "", "reg"], [182, 3, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruners.block_mask": [[183, 1, 1, "", "PytorchBlockMaskPruner"]], "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner": [[183, 3, 1, "", "criterion"], [183, 3, 1, "", "pattern"], [183, 3, 1, "", "reg"], [183, 3, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruners.mha": [[185, 1, 1, "", "PythonMultiheadAttentionPruner"]], "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner": [[185, 3, 1, "", "head_masks"], [185, 3, 1, "", "linear_layers"], [185, 3, 1, "", "mha_compressions"], [185, 3, 1, "", "mha_scores"]], "neural_compressor.compression.pruner.pruners.pattern_lock": [[186, 1, 1, "", "PytorchPatternLockPruner"]], "neural_compressor.compression.pruner.pruners.progressive": [[187, 1, 1, "", "PytorchProgressivePruner"]], "neural_compressor.compression.pruner.pruners.retrain_free": [[188, 1, 1, "", "PytorchRetrainFreePruner"]], "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner": [[188, 3, 1, "", "criterion"], [188, 3, 1, "", "pattern"], [188, 3, 1, "", "reg"], [188, 3, 1, "", "scheduler"]], "neural_compressor.compression.pruner.regs": [[189, 1, 1, "", "BaseReg"], [189, 1, 1, "", "GroupLasso"], [189, 2, 1, "", "get_reg"], [189, 2, 1, "", "get_reg_type"], [189, 2, 1, "", "register_reg"]], "neural_compressor.compression.pruner.regs.GroupLasso": [[189, 3, 1, "", "alpha"], [189, 3, 1, "", "reg_terms"]], "neural_compressor.compression.pruner.schedulers": [[190, 1, 1, "", "IterativeScheduler"], [190, 1, 1, "", "OneshotScheduler"], [190, 1, 1, "", "PruningScheduler"], [190, 2, 1, "", "get_scheduler"], [190, 2, 1, "", "register_scheduler"]], "neural_compressor.compression.pruner.schedulers.PruningScheduler": [[190, 3, 1, "", "config"]], "neural_compressor.compression.pruner.tf_criteria": [[191, 1, 1, "", "MagnitudeCriterion"], [191, 1, 1, "", "PruningCriterion"], [191, 2, 1, "", "get_tf_criterion"], [191, 2, 1, "", "register_criterion"]], "neural_compressor.compression.pruner.tf_criteria.MagnitudeCriterion": [[191, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.tf_criteria.PruningCriterion": [[191, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.utils": [[192, 2, 1, "", "check_config"], [192, 2, 1, "", "check_key_validity"], [192, 2, 1, "", "generate_pruner_config"], [192, 2, 1, "", "get_sparsity_ratio"], [192, 2, 1, "", "get_sparsity_ratio_tf"], [192, 2, 1, "", "parse_last_linear"], [192, 2, 1, "", "parse_last_linear_tf"], [192, 2, 1, "", "parse_to_prune"], [192, 2, 1, "", "parse_to_prune_tf"], [192, 2, 1, "", "process_and_check_config"], [192, 2, 1, "", "process_config"], [192, 2, 1, "", "process_weight_config"], [192, 2, 1, "", "process_yaml_config"], [192, 2, 1, "", "reset_none_to_default"], [192, 2, 1, "", "update_params"]], "neural_compressor.conf": [[193, 0, 0, "-", "config"], [194, 0, 0, "-", "dotdict"], [196, 0, 0, "-", "pythonic_config"]], "neural_compressor.conf.config": [[193, 1, 1, "", "Benchmark_Conf"], [193, 1, 1, "", "Conf"], [193, 1, 1, "", "Distillation_Conf"], [193, 1, 1, "", "Graph_Optimization_Conf"], [193, 1, 1, "", "MixedPrecision_Conf"], [193, 1, 1, "", "NASConfig"], [193, 1, 1, "", "PrunerV2"], [193, 1, 1, "", "Pruning_Conf"], [193, 1, 1, "", "Quantization_Conf"]], "neural_compressor.conf.dotdict": [[194, 1, 1, "", "DotDict"], [194, 2, 1, "", "deep_get"], [194, 2, 1, "", "deep_set"]], "neural_compressor.conf.pythonic_config": [[196, 1, 1, "", "AccuracyCriterion"], [196, 1, 1, "", "BenchmarkConfig"], [196, 1, 1, "", "DistillationConfig"], [196, 1, 1, "", "KnowledgeDistillationLossConfig"], [196, 1, 1, "", "Options"], [196, 1, 1, "", "QuantizationConfig"], [196, 1, 1, "", "WeightPruningConfig"]], "neural_compressor.config": [[197, 1, 1, "", "AccuracyCriterion"], [197, 1, 1, "", "BenchmarkConfig"], [197, 1, 1, "", "DistillationConfig"], [197, 1, 1, "", "DotDict"], [197, 1, 1, "", "ExportConfig"], [197, 1, 1, "", "IntermediateLayersKnowledgeDistillationLossConfig"], [197, 1, 1, "", "Keras"], [197, 1, 1, "", "KnowledgeDistillationLossConfig"], [197, 1, 1, "", "MXNet"], [197, 1, 1, "", "MixedPrecisionConfig"], [197, 1, 1, "", "NASConfig"], [197, 1, 1, "", "ONNX"], [197, 1, 1, "", "ONNXQlinear2QDQConfig"], [197, 1, 1, "", "Options"], [197, 1, 1, "", "PostTrainingQuantConfig"], [197, 1, 1, "", "PyTorch"], [197, 1, 1, "", "QuantizationAwareTrainingConfig"], [197, 1, 1, "", "SelfKnowledgeDistillationLossConfig"], [197, 1, 1, "", "TF2ONNXConfig"], [197, 1, 1, "", "TensorFlow"], [197, 1, 1, "", "Torch2ONNXConfig"], [197, 1, 1, "", "TuningCriterion"], [197, 1, 1, "", "WeightPruningConfig"]], "neural_compressor.contrib": [[199, 0, 0, "-", "strategy"]], "neural_compressor.contrib.strategy": [[200, 0, 0, "-", "sigopt"], [201, 0, 0, "-", "tpe"]], "neural_compressor.contrib.strategy.sigopt": [[200, 1, 1, "", "SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.tpe": [[201, 1, 1, "", "TpeTuneStrategy"]], "neural_compressor.data": [[206, 0, 0, "-", "dataloaders"], [218, 0, 0, "-", "datasets"], [222, 0, 0, "-", "filters"], [226, 0, 0, "-", "transforms"]], "neural_compressor.data.dataloaders": [[202, 0, 0, "-", "base_dataloader"], [203, 0, 0, "-", "dataloader"], [204, 0, 0, "-", "default_dataloader"], [205, 0, 0, "-", "fetcher"], [207, 0, 0, "-", "mxnet_dataloader"], [208, 0, 0, "-", "onnxrt_dataloader"], [209, 0, 0, "-", "pytorch_dataloader"], [210, 0, 0, "-", "sampler"], [211, 0, 0, "-", "tensorflow_dataloader"]], "neural_compressor.data.dataloaders.base_dataloader": [[202, 1, 1, "", "BaseDataLoader"]], "neural_compressor.data.dataloaders.dataloader": [[203, 1, 1, "", "DataLoader"], [203, 2, 1, "", "check_dataloader"]], "neural_compressor.data.dataloaders.default_dataloader": [[204, 1, 1, "", "DefaultDataLoader"], [204, 2, 1, "", "default_collate"]], "neural_compressor.data.dataloaders.fetcher": [[205, 1, 1, "", "Fetcher"], [205, 1, 1, "", "IndexFetcher"], [205, 1, 1, "", "IterableFetcher"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[207, 1, 1, "", "MXNetDataLoader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[208, 1, 1, "", "ONNXRTBertDataLoader"], [208, 1, 1, "", "ONNXRTDataLoader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[209, 1, 1, "", "PyTorchDataLoader"]], "neural_compressor.data.dataloaders.sampler": [[210, 1, 1, "", "BatchSampler"], [210, 1, 1, "", "IterableSampler"], [210, 1, 1, "", "Sampler"], [210, 1, 1, "", "SequentialSampler"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[211, 1, 1, "", "TFDataDataLoader"], [211, 1, 1, "", "TensorflowBertDataLoader"], [211, 1, 1, "", "TensorflowDataLoader"], [211, 1, 1, "", "TensorflowModelZooBertDataLoader"]], "neural_compressor.data.datasets": [[212, 0, 0, "-", "bert_dataset"], [213, 0, 0, "-", "coco_dataset"], [214, 0, 0, "-", "dataset"], [215, 0, 0, "-", "dummy_dataset"], [216, 0, 0, "-", "dummy_dataset_v2"], [217, 0, 0, "-", "imagenet_dataset"], [219, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.data.datasets.bert_dataset": [[212, 1, 1, "", "InputFeatures"], [212, 1, 1, "", "ONNXRTBertDataset"], [212, 1, 1, "", "ParseDecodeBert"], [212, 1, 1, "", "PytorchBertDataset"], [212, 1, 1, "", "TensorflowBertDataset"], [212, 1, 1, "", "TensorflowModelZooBertDataset"], [212, 2, 1, "", "convert_examples_to_features"], [212, 2, 1, "", "load_and_cache_examples"]], "neural_compressor.data.datasets.coco_dataset": [[213, 1, 1, "", "COCONpy"], [213, 1, 1, "", "COCORaw"], [213, 1, 1, "", "COCORecordDataset"], [213, 1, 1, "", "ParseDecodeCoco"]], "neural_compressor.data.datasets.dataset": [[214, 1, 1, "", "CIFAR10"], [214, 1, 1, "", "CIFAR100"], [214, 1, 1, "", "Dataset"], [214, 1, 1, "", "Datasets"], [214, 1, 1, "", "FashionMNIST"], [214, 1, 1, "", "ImageFolder"], [214, 1, 1, "", "IterableDataset"], [214, 1, 1, "", "MNIST"], [214, 1, 1, "", "MXNetCIFAR10"], [214, 1, 1, "", "MXNetCIFAR100"], [214, 1, 1, "", "MXNetDatasets"], [214, 1, 1, "", "MXNetFashionMNIST"], [214, 1, 1, "", "MXNetImageFolder"], [214, 1, 1, "", "MXNetMNIST"], [214, 1, 1, "", "ONNXRTITDatasets"], [214, 1, 1, "", "ONNXRTQLDatasets"], [214, 1, 1, "", "PyTorchDatasets"], [214, 1, 1, "", "PytorchCIFAR10"], [214, 1, 1, "", "PytorchCIFAR100"], [214, 1, 1, "", "PytorchFashionMNIST"], [214, 1, 1, "", "PytorchMNIST"], [214, 1, 1, "", "PytorchMxnetWrapDataset"], [214, 1, 1, "", "PytorchMxnetWrapFunction"], [214, 1, 1, "", "Tensorflow"], [214, 1, 1, "", "TensorflowCIFAR10"], [214, 1, 1, "", "TensorflowCIFAR100"], [214, 1, 1, "", "TensorflowDatasets"], [214, 1, 1, "", "TensorflowFashionMNIST"], [214, 1, 1, "", "TensorflowImageRecord"], [214, 1, 1, "", "TensorflowMNIST"], [214, 1, 1, "", "TensorflowTFRecordDataset"], [214, 1, 1, "", "TensorflowVOCRecord"], [214, 2, 1, "", "calculate_md5"], [214, 2, 1, "", "check_integrity"], [214, 2, 1, "", "dataset_registry"], [214, 2, 1, "", "download_url"], [214, 4, 1, "", "framework_datasets"], [214, 2, 1, "", "gen_bar_updater"]], "neural_compressor.data.datasets.dummy_dataset": [[215, 1, 1, "", "DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[216, 1, 1, "", "DummyDataset"], [216, 1, 1, "", "SparseDummyDataset"]], "neural_compressor.data.datasets.imagenet_dataset": [[217, 1, 1, "", "ImagenetRaw"], [217, 1, 1, "", "MXNetImagenetRaw"], [217, 1, 1, "", "ONNXRTImagenetDataset"], [217, 1, 1, "", "PytorchImagenetRaw"], [217, 1, 1, "", "TensorflowImagenetDataset"], [217, 1, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.data.datasets.style_transfer_dataset": [[219, 1, 1, "", "StyleTransferDataset"]], "neural_compressor.data.filters": [[220, 0, 0, "-", "coco_filter"], [221, 0, 0, "-", "filter"]], "neural_compressor.data.filters.coco_filter": [[220, 1, 1, "", "LabelBalanceCOCORawFilter"], [220, 1, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.filter": [[221, 1, 1, "", "FILTERS"], [221, 1, 1, "", "Filter"], [221, 1, 1, "", "MXNetFilters"], [221, 1, 1, "", "ONNXRTITFilters"], [221, 1, 1, "", "ONNXRTQLFilters"], [221, 1, 1, "", "PyTorchFilters"], [221, 1, 1, "", "TensorflowFilters"], [221, 2, 1, "", "filter_registry"]], "neural_compressor.data.transforms": [[224, 0, 0, "-", "coco_transform"], [225, 0, 0, "-", "imagenet_transform"], [227, 0, 0, "-", "postprocess"], [228, 0, 0, "-", "tokenization"], [229, 0, 0, "-", "transform"]], "neural_compressor.data.transforms.coco_transform": [[224, 1, 1, "", "ParseDecodeCocoTransform"]], "neural_compressor.data.transforms.imagenet_transform": [[225, 1, 1, "", "BilinearImagenetTransform"], [225, 1, 1, "", "LabelShift"], [225, 1, 1, "", "ONNXResizeCropImagenetTransform"], [225, 1, 1, "", "OnnxBilinearImagenetTransform"], [225, 1, 1, "", "ParseDecodeImagenet"], [225, 1, 1, "", "ParseDecodeImagenetTransform"], [225, 1, 1, "", "QuantizedInput"], [225, 1, 1, "", "ResizeWithAspectRatio"], [225, 1, 1, "", "TensorflowResizeCropImagenetTransform"], [225, 1, 1, "", "TensorflowShiftRescale"], [225, 1, 1, "", "TensorflowTransposeLastChannel"]], "neural_compressor.data.transforms.postprocess": [[227, 1, 1, "", "Postprocess"]], "neural_compressor.data.transforms.tokenization": [[228, 1, 1, "", "BasicTokenizer"], [228, 1, 1, "", "FullTokenizer"], [228, 1, 1, "", "WordpieceTokenizer"], [228, 2, 1, "", "convert_by_vocab"], [228, 2, 1, "", "convert_to_unicode"], [228, 2, 1, "", "load_vocab"], [228, 2, 1, "", "whitespace_tokenize"]], "neural_compressor.data.transforms.transform": [[229, 1, 1, "", "AlignImageChannelTransform"], [229, 1, 1, "", "BaseTransform"], [229, 1, 1, "", "CastONNXTransform"], [229, 1, 1, "", "CastPyTorchTransform"], [229, 1, 1, "", "CastTFTransform"], [229, 1, 1, "", "CenterCropTFTransform"], [229, 1, 1, "", "CenterCropTransform"], [229, 1, 1, "", "CollectTransform"], [229, 1, 1, "", "ComposeTransform"], [229, 1, 1, "", "CropResizeTFTransform"], [229, 1, 1, "", "CropResizeTransform"], [229, 1, 1, "", "CropToBoundingBox"], [229, 1, 1, "", "InputFeatures"], [229, 1, 1, "", "MXNetCropResizeTransform"], [229, 1, 1, "", "MXNetCropToBoundingBox"], [229, 1, 1, "", "MXNetNormalizeTransform"], [229, 1, 1, "", "MXNetTransforms"], [229, 1, 1, "", "MXNetTranspose"], [229, 1, 1, "", "NormalizeTFTransform"], [229, 1, 1, "", "NormalizeTransform"], [229, 1, 1, "", "ONNXRTCropToBoundingBox"], [229, 1, 1, "", "ONNXRTITTransforms"], [229, 1, 1, "", "ONNXRTQLTransforms"], [229, 1, 1, "", "PaddedCenterCropTransform"], [229, 1, 1, "", "ParseDecodeVocTransform"], [229, 1, 1, "", "PyTorchAlignImageChannel"], [229, 1, 1, "", "PyTorchCropResizeTransform"], [229, 1, 1, "", "PyTorchNormalizeTransform"], [229, 1, 1, "", "PyTorchTransforms"], [229, 1, 1, "", "PyTorchTranspose"], [229, 1, 1, "", "PytorchMxnetTransform"], [229, 1, 1, "", "PytorchMxnetWrapFunction"], [229, 1, 1, "", "RandomCropTFTransform"], [229, 1, 1, "", "RandomCropTransform"], [229, 1, 1, "", "RandomHorizontalFlip"], [229, 1, 1, "", "RandomResizedCropMXNetTransform"], [229, 1, 1, "", "RandomResizedCropPytorchTransform"], [229, 1, 1, "", "RandomResizedCropTFTransform"], [229, 1, 1, "", "RandomResizedCropTransform"], [229, 1, 1, "", "RandomVerticalFlip"], [229, 1, 1, "", "RescaleKerasPretrainTransform"], [229, 1, 1, "", "RescaleTFTransform"], [229, 1, 1, "", "RescaleTransform"], [229, 1, 1, "", "ResizeMXNetTransform"], [229, 1, 1, "", "ResizePytorchTransform"], [229, 1, 1, "", "ResizeTFTransform"], [229, 1, 1, "", "ResizeTransform"], [229, 1, 1, "", "ResizeWithRatio"], [229, 1, 1, "", "SquadExample"], [229, 1, 1, "", "TFModelZooCollectTransform"], [229, 1, 1, "", "TFSquadV1ModelZooPostTransform"], [229, 1, 1, "", "TFSquadV1PostTransform"], [229, 1, 1, "", "TRANSFORMS"], [229, 1, 1, "", "TensorflowCropToBoundingBox"], [229, 1, 1, "", "TensorflowRandomHorizontalFlip"], [229, 1, 1, "", "TensorflowRandomVerticalFlip"], [229, 1, 1, "", "TensorflowResizeWithRatio"], [229, 1, 1, "", "TensorflowTransform"], [229, 1, 1, "", "TensorflowTransforms"], [229, 1, 1, "", "TensorflowTranspose"], [229, 1, 1, "", "TensorflowWrapFunction"], [229, 1, 1, "", "ToArray"], [229, 1, 1, "", "ToNDArrayTransform"], [229, 1, 1, "", "Transforms"], [229, 1, 1, "", "Transpose"], [229, 2, 1, "", "convert_examples_to_features"], [229, 2, 1, "", "get_final_text"], [229, 2, 1, "", "get_torchvision_map"], [229, 2, 1, "", "read_squad_examples"], [229, 2, 1, "", "transform_registry"]], "neural_compressor.experimental": [[230, 0, 0, "-", "benchmark"], [233, 0, 0, "-", "common"], [239, 0, 0, "-", "component"], [240, 0, 0, "-", "compression"], [242, 0, 0, "-", "contrib"], [267, 0, 0, "-", "data"], [272, 0, 0, "-", "distillation"], [273, 0, 0, "-", "export"], [277, 0, 0, "-", "graph_optimization"], [285, 0, 0, "-", "metric"], [287, 0, 0, "-", "mixed_precision"], [288, 0, 0, "-", "model_conversion"], [291, 0, 0, "-", "nas"], [297, 0, 0, "-", "pruner_legacy"], [301, 0, 0, "-", "pruning"], [302, 0, 0, "-", "pruning_recipes"], [306, 0, 0, "-", "pruning_v2"], [307, 0, 0, "-", "pytorch_pruner"], [314, 0, 0, "-", "quantization"], [315, 0, 0, "-", "scheduler"], [320, 0, 0, "-", "strategy"]], "neural_compressor.experimental.benchmark": [[230, 1, 1, "", "Benchmark"], [230, 2, 1, "", "get_architecture"], [230, 2, 1, "", "get_bounded_threads"], [230, 2, 1, "", "get_core_ids"], [230, 2, 1, "", "get_physical_ids"], [230, 2, 1, "", "get_threads"], [230, 2, 1, "", "get_threads_per_core"], [230, 2, 1, "", "set_all_env_var"], [230, 2, 1, "", "set_env_var"]], "neural_compressor.experimental.common": [[231, 0, 0, "-", "criterion"], [232, 0, 0, "-", "dataloader"], [234, 0, 0, "-", "metric"], [235, 0, 0, "-", "model"], [236, 0, 0, "-", "optimizer"], [237, 0, 0, "-", "postprocess"], [238, 0, 0, "-", "torch_utils"]], "neural_compressor.experimental.common.criterion": [[231, 1, 1, "", "Criterions"], [231, 1, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [231, 1, 1, "", "KnowledgeDistillationFramework"], [231, 1, 1, "", "KnowledgeDistillationLoss"], [231, 1, 1, "", "PyTorchCriterions"], [231, 1, 1, "", "PyTorchCrossEntropyLoss"], [231, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLoss"], [231, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"], [231, 1, 1, "", "PyTorchKnowledgeDistillationLoss"], [231, 1, 1, "", "PyTorchKnowledgeDistillationLossWrapper"], [231, 1, 1, "", "PyTorchSelfKnowledgeDistillationLoss"], [231, 1, 1, "", "PyTorchSelfKnowledgeDistillationLossWrapper"], [231, 1, 1, "", "SelfKnowledgeDistillationLoss"], [231, 1, 1, "", "TensorFlowCrossEntropyLoss"], [231, 1, 1, "", "TensorFlowSparseCategoricalCrossentropy"], [231, 1, 1, "", "TensorflowCriterions"], [231, 1, 1, "", "TensorflowKnowledgeDistillationLoss"], [231, 1, 1, "", "TensorflowKnowledgeDistillationLossExternal"], [231, 1, 1, "", "TensorflowKnowledgeDistillationLossWrapper"], [231, 2, 1, "", "criterion_registry"]], "neural_compressor.experimental.common.dataloader": [[232, 1, 1, "", "DataLoader"]], "neural_compressor.experimental.common.metric": [[234, 1, 1, "", "Metric"]], "neural_compressor.experimental.common.model": [[235, 1, 1, "", "Model"], [235, 2, 1, "", "set_backend"]], "neural_compressor.experimental.common.optimizer": [[236, 1, 1, "", "Optimizers"], [236, 1, 1, "", "PyTorchOptimizers"], [236, 1, 1, "", "PyTorchSGD"], [236, 1, 1, "", "TensorFlowAdam"], [236, 1, 1, "", "TensorFlowAdamW"], [236, 1, 1, "", "TensorFlowSGD"], [236, 1, 1, "", "TensorflowOptimizers"], [236, 2, 1, "", "optimizer_registry"]], "neural_compressor.experimental.common.postprocess": [[237, 1, 1, "", "Postprocess"]], "neural_compressor.experimental.common.torch_utils": [[238, 2, 1, "", "get_activation"], [238, 2, 1, "", "record_output"]], "neural_compressor.experimental.component": [[239, 1, 1, "", "Component"]], "neural_compressor.experimental.compression": [[241, 0, 0, "-", "pruning"]], "neural_compressor.experimental.compression.pruning": [[241, 2, 1, "", "prepare_pruning"], [241, 2, 1, "", "save"]], "neural_compressor.experimental.contrib": [[243, 0, 0, "-", "strategy"]], "neural_compressor.experimental.contrib.strategy": [[244, 0, 0, "-", "sigopt"], [245, 0, 0, "-", "tpe"]], "neural_compressor.experimental.contrib.strategy.sigopt": [[244, 1, 1, "", "SigOptTuneStrategy"]], "neural_compressor.experimental.contrib.strategy.tpe": [[245, 1, 1, "", "TpeTuneStrategy"]], "neural_compressor.experimental.data": [[250, 0, 0, "-", "dataloaders"], [262, 0, 0, "-", "datasets"], [266, 0, 0, "-", "filters"], [269, 0, 0, "-", "transforms"]], "neural_compressor.experimental.data.dataloaders": [[246, 0, 0, "-", "base_dataloader"], [247, 0, 0, "-", "dataloader"], [248, 0, 0, "-", "default_dataloader"], [249, 0, 0, "-", "fetcher"], [251, 0, 0, "-", "mxnet_dataloader"], [252, 0, 0, "-", "onnxrt_dataloader"], [253, 0, 0, "-", "pytorch_dataloader"], [254, 0, 0, "-", "sampler"], [255, 0, 0, "-", "tensorflow_dataloader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[246, 1, 1, "", "BaseDataLoader"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[248, 1, 1, "", "DefaultDataLoader"], [248, 2, 1, "", "default_collate"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[249, 1, 1, "", "Fetcher"], [249, 1, 1, "", "IndexFetcher"], [249, 1, 1, "", "IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[251, 1, 1, "", "MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[252, 1, 1, "", "ONNXRTBertDataLoader"], [252, 1, 1, "", "ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[253, 1, 1, "", "PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[254, 1, 1, "", "BatchSampler"], [254, 1, 1, "", "IterableSampler"], [254, 1, 1, "", "Sampler"], [254, 1, 1, "", "SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[255, 1, 1, "", "TFDataDataLoader"], [255, 1, 1, "", "TensorflowBertDataLoader"], [255, 1, 1, "", "TensorflowDataLoader"], [255, 1, 1, "", "TensorflowModelZooBertDataLoader"]], "neural_compressor.experimental.data.datasets": [[256, 0, 0, "-", "bert_dataset"], [257, 0, 0, "-", "coco_dataset"], [258, 0, 0, "-", "dataset"], [259, 0, 0, "-", "dummy_dataset"], [260, 0, 0, "-", "dummy_dataset_v2"], [261, 0, 0, "-", "imagenet_dataset"], [263, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[256, 1, 1, "", "InputFeatures"], [256, 1, 1, "", "ONNXRTBertDataset"], [256, 1, 1, "", "ParseDecodeBert"], [256, 1, 1, "", "PytorchBertDataset"], [256, 1, 1, "", "TensorflowBertDataset"], [256, 1, 1, "", "TensorflowModelZooBertDataset"], [256, 2, 1, "", "convert_examples_to_features"], [256, 2, 1, "", "load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[257, 1, 1, "", "COCONpy"], [257, 1, 1, "", "COCORaw"], [257, 1, 1, "", "COCORecordDataset"], [257, 1, 1, "", "ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.dataset": [[258, 1, 1, "", "CIFAR10"], [258, 1, 1, "", "CIFAR100"], [258, 1, 1, "", "Dataset"], [258, 1, 1, "", "Datasets"], [258, 1, 1, "", "FashionMNIST"], [258, 1, 1, "", "ImageFolder"], [258, 1, 1, "", "IterableDataset"], [258, 1, 1, "", "MNIST"], [258, 1, 1, "", "MXNetCIFAR10"], [258, 1, 1, "", "MXNetCIFAR100"], [258, 1, 1, "", "MXNetDatasets"], [258, 1, 1, "", "MXNetFashionMNIST"], [258, 1, 1, "", "MXNetImageFolder"], [258, 1, 1, "", "MXNetMNIST"], [258, 1, 1, "", "ONNXRTITDatasets"], [258, 1, 1, "", "ONNXRTQLDatasets"], [258, 1, 1, "", "PyTorchDatasets"], [258, 1, 1, "", "PytorchCIFAR10"], [258, 1, 1, "", "PytorchCIFAR100"], [258, 1, 1, "", "PytorchFashionMNIST"], [258, 1, 1, "", "PytorchMNIST"], [258, 1, 1, "", "PytorchMxnetWrapDataset"], [258, 1, 1, "", "PytorchMxnetWrapFunction"], [258, 1, 1, "", "TensorflowCIFAR10"], [258, 1, 1, "", "TensorflowCIFAR100"], [258, 1, 1, "", "TensorflowDatasets"], [258, 1, 1, "", "TensorflowFashionMNIST"], [258, 1, 1, "", "TensorflowImageFolder"], [258, 1, 1, "", "TensorflowImageRecord"], [258, 1, 1, "", "TensorflowMNIST"], [258, 1, 1, "", "TensorflowTFRecordDataset"], [258, 1, 1, "", "TensorflowVOCRecord"], [258, 2, 1, "", "calculate_md5"], [258, 2, 1, "", "check_integrity"], [258, 2, 1, "", "dataset_registry"], [258, 2, 1, "", "download_url"], [258, 4, 1, "", "framework_datasets"], [258, 2, 1, "", "gen_bar_updater"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[259, 1, 1, "", "DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[260, 1, 1, "", "DummyDataset"], [260, 1, 1, "", "SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[261, 1, 1, "", "ImagenetRaw"], [261, 1, 1, "", "MXNetImagenetRaw"], [261, 1, 1, "", "ONNXRTImagenetDataset"], [261, 1, 1, "", "PytorchImagenetRaw"], [261, 1, 1, "", "TensorflowImagenetDataset"], [261, 1, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[263, 1, 1, "", "StyleTransferDataset"]], "neural_compressor.experimental.data.filters": [[264, 0, 0, "-", "coco_filter"], [265, 0, 0, "-", "filter"]], "neural_compressor.experimental.data.filters.coco_filter": [[264, 1, 1, "", "LabelBalanceCOCORawFilter"], [264, 1, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.filter": [[265, 1, 1, "", "FILTERS"], [265, 1, 1, "", "Filter"], [265, 1, 1, "", "MXNetFilters"], [265, 1, 1, "", "ONNXRTITFilters"], [265, 1, 1, "", "ONNXRTQLFilters"], [265, 1, 1, "", "PyTorchFilters"], [265, 1, 1, "", "TensorflowFilters"], [265, 2, 1, "", "filter_registry"]], "neural_compressor.experimental.data.transforms": [[268, 0, 0, "-", "imagenet_transform"], [270, 0, 0, "-", "tokenization"], [271, 0, 0, "-", "transform"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[268, 1, 1, "", "BilinearImagenetTransform"], [268, 1, 1, "", "LabelShift"], [268, 1, 1, "", "ONNXResizeCropImagenetTransform"], [268, 1, 1, "", "OnnxBilinearImagenetTransform"], [268, 1, 1, "", "ParseDecodeImagenet"], [268, 1, 1, "", "ParseDecodeImagenetTransform"], [268, 1, 1, "", "QuantizedInput"], [268, 1, 1, "", "ResizeWithAspectRatio"], [268, 1, 1, "", "TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental.data.transforms.tokenization": [[270, 1, 1, "", "BasicTokenizer"], [270, 1, 1, "", "FullTokenizer"], [270, 1, 1, "", "WordpieceTokenizer"], [270, 2, 1, "", "convert_by_vocab"], [270, 2, 1, "", "convert_to_unicode"], [270, 2, 1, "", "load_vocab"], [270, 2, 1, "", "whitespace_tokenize"]], "neural_compressor.experimental.data.transforms.transform": [[271, 1, 1, "", "AlignImageChannelTransform"], [271, 1, 1, "", "BaseTransform"], [271, 1, 1, "", "CastONNXTransform"], [271, 1, 1, "", "CastPyTorchTransform"], [271, 1, 1, "", "CastTFTransform"], [271, 1, 1, "", "CenterCropTFTransform"], [271, 1, 1, "", "CenterCropTransform"], [271, 1, 1, "", "CollectTransform"], [271, 1, 1, "", "ComposeTransform"], [271, 1, 1, "", "CropResizeTFTransform"], [271, 1, 1, "", "CropResizeTransform"], [271, 1, 1, "", "CropToBoundingBox"], [271, 1, 1, "", "InputFeatures"], [271, 1, 1, "", "MXNetCropResizeTransform"], [271, 1, 1, "", "MXNetCropToBoundingBox"], [271, 1, 1, "", "MXNetNormalizeTransform"], [271, 1, 1, "", "MXNetTransforms"], [271, 1, 1, "", "MXNetTranspose"], [271, 1, 1, "", "NormalizeTFTransform"], [271, 1, 1, "", "NormalizeTransform"], [271, 1, 1, "", "ONNXRTCropToBoundingBox"], [271, 1, 1, "", "ONNXRTITTransforms"], [271, 1, 1, "", "ONNXRTQLTransforms"], [271, 1, 1, "", "PaddedCenterCropTransform"], [271, 1, 1, "", "ParseDecodeVocTransform"], [271, 1, 1, "", "PyTorchAlignImageChannel"], [271, 1, 1, "", "PyTorchCropResizeTransform"], [271, 1, 1, "", "PyTorchNormalizeTransform"], [271, 1, 1, "", "PyTorchTransforms"], [271, 1, 1, "", "PyTorchTranspose"], [271, 1, 1, "", "PytorchMxnetTransform"], [271, 1, 1, "", "PytorchMxnetWrapFunction"], [271, 1, 1, "", "RandomCropTFTransform"], [271, 1, 1, "", "RandomCropTransform"], [271, 1, 1, "", "RandomHorizontalFlip"], [271, 1, 1, "", "RandomResizedCropMXNetTransform"], [271, 1, 1, "", "RandomResizedCropPytorchTransform"], [271, 1, 1, "", "RandomResizedCropTFTransform"], [271, 1, 1, "", "RandomResizedCropTransform"], [271, 1, 1, "", "RandomVerticalFlip"], [271, 1, 1, "", "RescaleKerasPretrainTransform"], [271, 1, 1, "", "RescaleTFTransform"], [271, 1, 1, "", "RescaleTransform"], [271, 1, 1, "", "ResizeMXNetTransform"], [271, 1, 1, "", "ResizePytorchTransform"], [271, 1, 1, "", "ResizeTFTransform"], [271, 1, 1, "", "ResizeTransform"], [271, 1, 1, "", "ResizeWithRatio"], [271, 1, 1, "", "SquadExample"], [271, 1, 1, "", "TFModelZooCollectTransform"], [271, 1, 1, "", "TFSquadV1ModelZooPostTransform"], [271, 1, 1, "", "TFSquadV1PostTransform"], [271, 1, 1, "", "TRANSFORMS"], [271, 1, 1, "", "TensorflowCropToBoundingBox"], [271, 1, 1, "", "TensorflowRandomHorizontalFlip"], [271, 1, 1, "", "TensorflowRandomVerticalFlip"], [271, 1, 1, "", "TensorflowResizeWithRatio"], [271, 1, 1, "", "TensorflowTransform"], [271, 1, 1, "", "TensorflowTransforms"], [271, 1, 1, "", "TensorflowTranspose"], [271, 1, 1, "", "TensorflowWrapFunction"], [271, 1, 1, "", "ToArray"], [271, 1, 1, "", "ToNDArrayTransform"], [271, 1, 1, "", "Transforms"], [271, 1, 1, "", "Transpose"], [271, 2, 1, "", "convert_examples_to_features"], [271, 2, 1, "", "get_final_text"], [271, 2, 1, "", "get_torchvision_map"], [271, 2, 1, "", "read_squad_examples"], [271, 2, 1, "", "transform_registry"]], "neural_compressor.experimental.distillation": [[272, 1, 1, "", "Distillation"]], "neural_compressor.experimental.distillation.Distillation": [[272, 3, 1, "", "_epoch_ran"], [272, 3, 1, "", "best_model"], [272, 3, 1, "", "best_score"], [272, 3, 1, "", "eval_frequency"]], "neural_compressor.experimental.export": [[274, 0, 0, "-", "qlinear2qdq"], [275, 0, 0, "-", "tf2onnx"], [276, 0, 0, "-", "torch2onnx"]], "neural_compressor.experimental.export.qlinear2qdq": [[274, 2, 1, "", "check_model"], [274, 2, 1, "", "onnx_qlinear_to_qdq"]], "neural_compressor.experimental.export.tf2onnx": [[275, 2, 1, "", "tf_to_fp32_onnx"], [275, 2, 1, "", "tf_to_int8_onnx"]], "neural_compressor.experimental.export.torch2onnx": [[276, 2, 1, "", "dynamic_quant_export"], [276, 2, 1, "", "get_node_mapping"], [276, 2, 1, "", "get_quantizable_onnx_ops"], [276, 2, 1, "", "static_quant_export"], [276, 2, 1, "", "torch_to_fp32_onnx"], [276, 2, 1, "", "torch_to_int8_onnx"]], "neural_compressor.experimental.graph_optimization": [[277, 1, 1, "", "Graph_Optimization"]], "neural_compressor.experimental.metric": [[279, 0, 0, "-", "bleu"], [280, 0, 0, "-", "bleu_util"], [281, 0, 0, "-", "coco_label_map"], [282, 0, 0, "-", "coco_tools"], [283, 0, 0, "-", "evaluate_squad"], [284, 0, 0, "-", "f1"], [286, 0, 0, "-", "metric"]], "neural_compressor.experimental.metric.bleu": [[279, 1, 1, "", "BLEU"], [279, 1, 1, "", "UnicodeRegex"], [279, 2, 1, "", "bleu_tokenize"]], "neural_compressor.experimental.metric.bleu.BLEU": [[279, 3, 1, "", "labels"], [279, 3, 1, "", "predictions"]], "neural_compressor.experimental.metric.bleu.UnicodeRegex": [[279, 3, 1, "", "nondigit_punct_re"], [279, 3, 1, "", "punct_nondigit_re"], [279, 3, 1, "", "symbol_re"]], "neural_compressor.experimental.metric.bleu_util": [[280, 2, 1, "", "compute_bleu"]], "neural_compressor.experimental.metric.coco_tools": [[282, 1, 1, "", "COCOEvalWrapper"], [282, 1, 1, "", "COCOWrapper"], [282, 2, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [282, 2, 1, "", "ExportSingleImageDetectionMasksToCoco"], [282, 2, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.experimental.metric.coco_tools.COCOWrapper": [[282, 3, 1, "", "dataset"], [282, 3, 1, "", "detection_type"]], "neural_compressor.experimental.metric.evaluate_squad": [[283, 2, 1, "", "evaluate"], [283, 2, 1, "", "exact_match_score"], [283, 2, 1, "", "f1_score"], [283, 2, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[284, 2, 1, "", "evaluate"], [284, 2, 1, "", "f1_score"], [284, 2, 1, "", "metric_max_over_ground_truths"], [284, 2, 1, "", "normalize_answer"]], "neural_compressor.experimental.metric.metric": [[286, 1, 1, "", "Accuracy"], [286, 1, 1, "", "BaseMetric"], [286, 1, 1, "", "COCOmAPv2"], [286, 1, 1, "", "F1"], [286, 1, 1, "", "GeneralTopK"], [286, 1, 1, "", "Loss"], [286, 1, 1, "", "MAE"], [286, 1, 1, "", "METRICS"], [286, 1, 1, "", "MSE"], [286, 1, 1, "", "MXNetMetrics"], [286, 1, 1, "", "ONNXRTGLUE"], [286, 1, 1, "", "ONNXRTITMetrics"], [286, 1, 1, "", "ONNXRTQLMetrics"], [286, 1, 1, "", "PyTorchLoss"], [286, 1, 1, "", "PyTorchMetrics"], [286, 1, 1, "", "RMSE"], [286, 1, 1, "", "ROC"], [286, 1, 1, "", "SquadF1"], [286, 1, 1, "", "TensorflowCOCOMAP"], [286, 1, 1, "", "TensorflowMAP"], [286, 1, 1, "", "TensorflowMetrics"], [286, 1, 1, "", "TensorflowTopK"], [286, 1, 1, "", "TensorflowVOCMAP"], [286, 1, 1, "", "WrapMXNetMetric"], [286, 1, 1, "", "WrapONNXRTMetric"], [286, 1, 1, "", "WrapPyTorchMetric"], [286, 1, 1, "", "mIOU"], [286, 2, 1, "", "metric_registry"]], "neural_compressor.experimental.metric.metric.Accuracy": [[286, 3, 1, "", "label_list"], [286, 3, 1, "", "pred_list"], [286, 3, 1, "", "sample"]], "neural_compressor.experimental.metric.metric.GeneralTopK": [[286, 3, 1, "", "k"], [286, 3, 1, "", "num_correct"], [286, 3, 1, "", "num_sample"]], "neural_compressor.experimental.metric.metric.Loss": [[286, 3, 1, "", "sample"], [286, 3, 1, "", "sum"]], "neural_compressor.experimental.metric.metric.MAE": [[286, 3, 1, "", "compare_label"], [286, 3, 1, "", "label_list"], [286, 3, 1, "", "pred_list"]], "neural_compressor.experimental.metric.metric.METRICS": [[286, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.MSE": [[286, 3, 1, "", "compare_label"], [286, 3, 1, "", "label_list"], [286, 3, 1, "", "pred_list"]], "neural_compressor.experimental.metric.metric.MXNetMetrics": [[286, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTITMetrics": [[286, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics": [[286, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.PyTorchMetrics": [[286, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.RMSE": [[286, 3, 1, "", "mse"]], "neural_compressor.experimental.metric.metric.TensorflowMetrics": [[286, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.TensorflowTopK": [[286, 3, 1, "", "k"], [286, 3, 1, "", "num_correct"], [286, 3, 1, "", "num_sample"]], "neural_compressor.experimental.mixed_precision": [[287, 1, 1, "", "MixedPrecision"]], "neural_compressor.experimental.model_conversion": [[288, 1, 1, "", "ModelConversion"]], "neural_compressor.experimental.nas": [[289, 0, 0, "-", "basic_nas"], [290, 0, 0, "-", "dynas"], [292, 0, 0, "-", "nas"], [293, 0, 0, "-", "nas_utils"], [294, 0, 0, "-", "search_algorithms"]], "neural_compressor.experimental.nas.basic_nas": [[289, 1, 1, "", "BasicNAS"]], "neural_compressor.experimental.nas.dynas": [[290, 1, 1, "", "DyNAS"]], "neural_compressor.experimental.nas.nas": [[292, 1, 1, "", "NAS"], [292, 1, 1, "", "NASBase"]], "neural_compressor.experimental.nas.nas_utils": [[293, 2, 1, "", "create_search_space_pool"], [293, 2, 1, "", "find_pareto_front"], [293, 2, 1, "", "nas_registry"]], "neural_compressor.experimental.nas.search_algorithms": [[294, 1, 1, "", "BayesianOptimizationSearcher"], [294, 1, 1, "", "GridSearcher"], [294, 1, 1, "", "RandomSearcher"], [294, 1, 1, "", "Searcher"]], "neural_compressor.experimental.pruner_legacy": [[295, 0, 0, "-", "gradient_sensitivity"], [296, 0, 0, "-", "group_lasso"], [298, 0, 0, "-", "magnitude"], [299, 0, 0, "-", "pattern_lock"], [300, 0, 0, "-", "pruner"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[295, 1, 1, "", "GradientSensitivityPruner"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[296, 1, 1, "", "GroupLassoPruner"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[298, 1, 1, "", "BasicMagnitudePruner"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[299, 1, 1, "", "PatternLockPruner"]], "neural_compressor.experimental.pruner_legacy.pruner": [[300, 1, 1, "", "Pruner"], [300, 2, 1, "", "pruner_registry"]], "neural_compressor.experimental.pruning": [[301, 1, 1, "", "Pruning"], [301, 1, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning.Pruning": [[301, 3, 1, "", "conf"], [301, 3, 1, "", "pruners"]], "neural_compressor.experimental.pruning_recipes": [[303, 0, 0, "-", "patterns"]], "neural_compressor.experimental.pruning_recipes.patterns": [[304, 0, 0, "-", "pattern"], [305, 0, 0, "-", "tile_pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[304, 1, 1, "", "PATTERNS"], [304, 1, 1, "", "PatternBase"], [304, 2, 1, "", "pattern_registry"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS": [[304, 3, 1, "", "patterns"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[305, 1, 1, "", "TilePatternBase"], [305, 1, 1, "", "TilePattern_1x1"], [305, 1, 1, "", "TilePattern_1x16"], [305, 1, 1, "", "TilePattern_1x2"], [305, 1, 1, "", "TilePattern_2x2"], [305, 1, 1, "", "TilePattern_4x1"]], "neural_compressor.experimental.pruning_v2": [[306, 1, 1, "", "Pruning"], [306, 1, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning_v2.Pruning": [[306, 3, 1, "", "conf"], [306, 3, 1, "", "pruners"]], "neural_compressor.experimental.pytorch_pruner": [[308, 0, 0, "-", "logger"], [309, 0, 0, "-", "patterns"], [310, 0, 0, "-", "prune_utils"], [311, 0, 0, "-", "pruner"], [312, 0, 0, "-", "pruning"], [313, 0, 0, "-", "scheduler"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[309, 1, 1, "", "Pattern"], [309, 1, 1, "", "PatternNInM"], [309, 1, 1, "", "PatternNxM"], [309, 2, 1, "", "get_pattern"], [309, 2, 1, "", "register_pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.Pattern": [[309, 3, 1, "", "is_global"], [309, 3, 1, "", "pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM": [[309, 3, 1, "", "M"], [309, 3, 1, "", "N"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM": [[309, 3, 1, "", "block_size"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[310, 2, 1, "", "check_config"], [310, 2, 1, "", "parse_not_to_prune"], [310, 2, 1, "", "parse_to_prune"], [310, 2, 1, "", "process_and_check_config"], [310, 2, 1, "", "process_config"], [310, 2, 1, "", "reset_non_value_to_default"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[311, 1, 1, "", "MagnitudePruner"], [311, 1, 1, "", "PatternLockPruner"], [311, 1, 1, "", "Pruner"], [311, 1, 1, "", "SnipMomentumPruner"], [311, 1, 1, "", "SnipPruner"], [311, 2, 1, "", "get_pruner"], [311, 2, 1, "", "register_pruners"]], "neural_compressor.experimental.pytorch_pruner.pruner.Pruner": [[311, 3, 1, "", "config"], [311, 3, 1, "", "current_sparsity_ratio"], [311, 3, 1, "", "end_step"], [311, 3, 1, "", "global_step"], [311, 3, 1, "", "masks"], [311, 3, 1, "", "max_sparsity_ratio_per_layer"], [311, 3, 1, "", "modules"], [311, 3, 1, "", "pattern"], [311, 3, 1, "", "scheduler"], [311, 3, 1, "", "scores"], [311, 3, 1, "", "start_step"], [311, 3, 1, "", "target_sparsity_ratio"], [311, 3, 1, "", "update_frequency_on_step"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[312, 1, 1, "", "Pruning"]], "neural_compressor.experimental.pytorch_pruner.pruning.Pruning": [[312, 3, 1, "", "config_file_path"], [312, 3, 1, "", "model"], [312, 3, 1, "", "pruner_info"], [312, 3, 1, "", "pruners"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[313, 1, 1, "", "IterativeScheduler"], [313, 1, 1, "", "OneshotScheduler"], [313, 1, 1, "", "Scheduler"], [313, 2, 1, "", "get_scheduler"], [313, 2, 1, "", "register_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler": [[313, 3, 1, "", "config"]], "neural_compressor.experimental.quantization": [[314, 1, 1, "", "Quantization"]], "neural_compressor.experimental.scheduler": [[315, 1, 1, "", "Scheduler"]], "neural_compressor.experimental.strategy": [[316, 0, 0, "-", "auto_mixed_precision"], [317, 0, 0, "-", "basic"], [318, 0, 0, "-", "bayesian"], [319, 0, 0, "-", "exhaustive"], [321, 0, 0, "-", "mse"], [322, 0, 0, "-", "mse_v2"], [323, 0, 0, "-", "random"], [324, 0, 0, "-", "strategy"], [326, 0, 0, "-", "utils"]], "neural_compressor.experimental.strategy.auto_mixed_precision": [[316, 1, 1, "", "AutoMixedPrecisionTuneStrategy"]], "neural_compressor.experimental.strategy.basic": [[317, 1, 1, "", "BasicTuneStrategy"]], "neural_compressor.experimental.strategy.bayesian": [[318, 1, 1, "", "BayesianOptimization"], [318, 1, 1, "", "BayesianTuneStrategy"], [318, 1, 1, "", "TargetSpace"], [318, 2, 1, "", "acq_max"]], "neural_compressor.experimental.strategy.exhaustive": [[319, 1, 1, "", "ExhaustiveTuneStrategy"]], "neural_compressor.experimental.strategy.mse": [[321, 1, 1, "", "MSETuneStrategy"]], "neural_compressor.experimental.strategy.mse_v2": [[322, 1, 1, "", "MSE_V2TuneStrategy"]], "neural_compressor.experimental.strategy.random": [[323, 1, 1, "", "RandomTuneStrategy"]], "neural_compressor.experimental.strategy.strategy": [[324, 1, 1, "", "TuneStrategy"], [324, 2, 1, "", "strategy_registry"]], "neural_compressor.experimental.strategy.utils": [[325, 0, 0, "-", "constant"], [327, 0, 0, "-", "tuning_sampler"], [328, 0, 0, "-", "tuning_space"], [329, 0, 0, "-", "tuning_structs"], [330, 0, 0, "-", "utility"]], "neural_compressor.experimental.strategy.utils.tuning_sampler": [[327, 1, 1, "", "FallbackTuningSampler"], [327, 1, 1, "", "ModelWiseTuningSampler"], [327, 1, 1, "", "OpTypeWiseTuningSampler"], [327, 1, 1, "", "OpWiseTuningSampler"], [327, 1, 1, "", "SmoothQuantSampler"], [327, 1, 1, "", "TuningOrder"], [327, 1, 1, "", "TuningSampler"], [327, 1, 1, "", "TuningSamplerRegistry"]], "neural_compressor.experimental.strategy.utils.tuning_space": [[328, 1, 1, "", "TuningItem"], [328, 1, 1, "", "TuningSpace"], [328, 2, 1, "", "initial_tuning_cfg_with_quant_mode"], [328, 2, 1, "", "pattern_to_internal"], [328, 2, 1, "", "pattern_to_path"], [328, 2, 1, "", "quant_mode_from_pattern"]], "neural_compressor.experimental.strategy.utils.tuning_structs": [[329, 1, 1, "", "OpTuningConfig"]], "neural_compressor.experimental.strategy.utils.utility": [[330, 1, 1, "", "OrderedDefaultDict"], [330, 2, 1, "", "extract_data_type"], [330, 2, 1, "", "get_adaptor_name"], [330, 2, 1, "", "reverted_data_type"]], "neural_compressor.metric": [[332, 0, 0, "-", "bleu"], [333, 0, 0, "-", "bleu_util"], [334, 0, 0, "-", "coco_label_map"], [335, 0, 0, "-", "coco_tools"], [336, 0, 0, "-", "evaluate_squad"], [337, 0, 0, "-", "f1"], [339, 0, 0, "-", "metric"]], "neural_compressor.metric.bleu": [[332, 1, 1, "", "BLEU"], [332, 1, 1, "", "UnicodeRegex"], [332, 2, 1, "", "bleu_tokenize"]], "neural_compressor.metric.bleu.BLEU": [[332, 3, 1, "", "labels"], [332, 3, 1, "", "predictions"]], "neural_compressor.metric.bleu.UnicodeRegex": [[332, 3, 1, "", "nondigit_punct_re"], [332, 3, 1, "", "punct_nondigit_re"], [332, 3, 1, "", "symbol_re"]], "neural_compressor.metric.bleu_util": [[333, 2, 1, "", "compute_bleu"]], "neural_compressor.metric.coco_tools": [[335, 1, 1, "", "COCOEvalWrapper"], [335, 1, 1, "", "COCOWrapper"], [335, 2, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [335, 2, 1, "", "ExportSingleImageDetectionMasksToCoco"], [335, 2, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.metric.coco_tools.COCOWrapper": [[335, 3, 1, "", "dataset"], [335, 3, 1, "", "detection_type"]], "neural_compressor.metric.evaluate_squad": [[336, 2, 1, "", "evaluate"], [336, 2, 1, "", "exact_match_score"], [336, 2, 1, "", "f1_score"], [336, 2, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[337, 2, 1, "", "evaluate"], [337, 2, 1, "", "f1_score"], [337, 2, 1, "", "metric_max_over_ground_truths"], [337, 2, 1, "", "normalize_answer"]], "neural_compressor.metric.metric": [[339, 1, 1, "", "Accuracy"], [339, 1, 1, "", "BaseMetric"], [339, 1, 1, "", "COCOmAPv2"], [339, 1, 1, "", "F1"], [339, 1, 1, "", "GeneralTopK"], [339, 1, 1, "", "Loss"], [339, 1, 1, "", "MAE"], [339, 1, 1, "", "METRICS"], [339, 1, 1, "", "MSE"], [339, 1, 1, "", "MXNetMetrics"], [339, 1, 1, "", "Metric"], [339, 1, 1, "", "ONNXRTGLUE"], [339, 1, 1, "", "ONNXRTITMetrics"], [339, 1, 1, "", "ONNXRTQLMetrics"], [339, 1, 1, "", "PyTorchLoss"], [339, 1, 1, "", "PyTorchMetrics"], [339, 1, 1, "", "RMSE"], [339, 1, 1, "", "ROC"], [339, 1, 1, "", "SquadF1"], [339, 1, 1, "", "TensorflowCOCOMAP"], [339, 1, 1, "", "TensorflowMAP"], [339, 1, 1, "", "TensorflowMetrics"], [339, 1, 1, "", "TensorflowTopK"], [339, 1, 1, "", "TensorflowVOCMAP"], [339, 1, 1, "", "WrapMXNetMetric"], [339, 1, 1, "", "WrapONNXRTMetric"], [339, 1, 1, "", "WrapPyTorchMetric"], [339, 1, 1, "", "mIOU"], [339, 2, 1, "", "metric_registry"], [339, 2, 1, "", "register_customer_metric"]], "neural_compressor.metric.metric.Accuracy": [[339, 3, 1, "", "label_list"], [339, 3, 1, "", "pred_list"], [339, 3, 1, "", "sample"]], "neural_compressor.metric.metric.GeneralTopK": [[339, 3, 1, "", "k"], [339, 3, 1, "", "num_correct"], [339, 3, 1, "", "num_sample"]], "neural_compressor.metric.metric.Loss": [[339, 3, 1, "", "sample"], [339, 3, 1, "", "sum"]], "neural_compressor.metric.metric.MAE": [[339, 3, 1, "", "compare_label"], [339, 3, 1, "", "label_list"], [339, 3, 1, "", "pred_list"]], "neural_compressor.metric.metric.METRICS": [[339, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.MSE": [[339, 3, 1, "", "compare_label"], [339, 3, 1, "", "label_list"], [339, 3, 1, "", "pred_list"]], "neural_compressor.metric.metric.MXNetMetrics": [[339, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTITMetrics": [[339, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTQLMetrics": [[339, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.PyTorchMetrics": [[339, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.RMSE": [[339, 3, 1, "", "mse"]], "neural_compressor.metric.metric.TensorflowMetrics": [[339, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.TensorflowTopK": [[339, 3, 1, "", "k"], [339, 3, 1, "", "num_correct"], [339, 3, 1, "", "num_sample"]], "neural_compressor.mix_precision": [[340, 2, 1, "", "fit"]], "neural_compressor.model": [[341, 0, 0, "-", "base_model"], [343, 0, 0, "-", "keras_model"], [344, 0, 0, "-", "model"], [345, 0, 0, "-", "mxnet_model"], [346, 0, 0, "-", "nets_factory"], [347, 0, 0, "-", "onnx_model"], [348, 0, 0, "-", "tensorflow_model"], [349, 0, 0, "-", "torch_model"]], "neural_compressor.model.base_model": [[341, 1, 1, "", "BaseModel"]], "neural_compressor.model.keras_model": [[343, 1, 1, "", "KerasModel"]], "neural_compressor.model.model": [[344, 1, 1, "", "Model"], [344, 2, 1, "", "get_model_fwk_name"]], "neural_compressor.model.mxnet_model": [[345, 1, 1, "", "MXNetModel"]], "neural_compressor.model.nets_factory": [[346, 1, 1, "", "TFSlimNetsFactory"]], "neural_compressor.model.onnx_model": [[347, 1, 1, "", "ONNXModel"]], "neural_compressor.model.tensorflow_model": [[348, 1, 1, "", "TensorflowBaseModel"], [348, 1, 1, "", "TensorflowCheckpointModel"], [348, 1, 1, "", "TensorflowModel"], [348, 1, 1, "", "TensorflowQATModel"], [348, 1, 1, "", "TensorflowSavedModelModel"], [348, 2, 1, "", "checkpoint_session"], [348, 2, 1, "", "estimator_session"], [348, 2, 1, "", "frozen_pb_session"], [348, 2, 1, "", "get_model_type"], [348, 2, 1, "", "graph_def_session"], [348, 2, 1, "", "graph_session"], [348, 2, 1, "", "keras_session"], [348, 2, 1, "", "load_saved_model"], [348, 2, 1, "", "saved_model_session"], [348, 2, 1, "", "slim_session"], [348, 2, 1, "", "validate_and_inference_input_output"], [348, 2, 1, "", "validate_graph_node"]], "neural_compressor.model.torch_model": [[349, 1, 1, "", "IPEXModel"], [349, 1, 1, "", "PyTorchBaseModel"], [349, 1, 1, "", "PyTorchFXModel"], [349, 1, 1, "", "PyTorchModel"]], "neural_compressor.objective": [[350, 1, 1, "", "Accuracy"], [350, 1, 1, "", "Footprint"], [350, 1, 1, "", "ModelSize"], [350, 1, 1, "", "MultiObjective"], [350, 1, 1, "", "Objective"], [350, 1, 1, "", "Performance"], [350, 2, 1, "", "objective_custom_registry"], [350, 2, 1, "", "objective_registry"]], "neural_compressor.profiling": [[353, 0, 0, "-", "parser"], [363, 0, 0, "-", "profiler"]], "neural_compressor.profiling.parser": [[352, 0, 0, "-", "factory"], [355, 0, 0, "-", "onnx_parser"], [357, 0, 0, "-", "parser"], [358, 0, 0, "-", "result"], [360, 0, 0, "-", "tensorflow_parser"]], "neural_compressor.profiling.parser.factory": [[352, 1, 1, "", "ParserFactory"]], "neural_compressor.profiling.parser.onnx_parser": [[354, 0, 0, "-", "factory"], [356, 0, 0, "-", "parser"]], "neural_compressor.profiling.parser.onnx_parser.factory": [[354, 1, 1, "", "OnnxrtParserFactory"]], "neural_compressor.profiling.parser.onnx_parser.parser": [[356, 1, 1, "", "OnnxProfilingParser"]], "neural_compressor.profiling.parser.parser": [[357, 1, 1, "", "ProfilingParser"]], "neural_compressor.profiling.parser.result": [[358, 1, 1, "", "ProfilingResult"]], "neural_compressor.profiling.parser.tensorflow_parser": [[359, 0, 0, "-", "factory"], [361, 0, 0, "-", "parser"]], "neural_compressor.profiling.parser.tensorflow_parser.factory": [[359, 1, 1, "", "TensorFlowParserFactory"]], "neural_compressor.profiling.parser.tensorflow_parser.parser": [[361, 1, 1, "", "TensorFlowProfilingParser"]], "neural_compressor.profiling.profiler": [[362, 0, 0, "-", "factory"], [365, 0, 0, "-", "onnxrt_profiler"], [368, 0, 0, "-", "profiler"], [370, 0, 0, "-", "tensorflow_profiler"]], "neural_compressor.profiling.profiler.factory": [[362, 1, 1, "", "ProfilerFactory"]], "neural_compressor.profiling.profiler.onnxrt_profiler": [[364, 0, 0, "-", "factory"], [366, 0, 0, "-", "profiler"], [367, 0, 0, "-", "utils"]], "neural_compressor.profiling.profiler.onnxrt_profiler.factory": [[364, 1, 1, "", "ProfilerFactory"]], "neural_compressor.profiling.profiler.onnxrt_profiler.profiler": [[366, 1, 1, "", "Profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.utils": [[367, 2, 1, "", "create_onnx_config"]], "neural_compressor.profiling.profiler.profiler": [[368, 1, 1, "", "Profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler": [[369, 0, 0, "-", "factory"], [371, 0, 0, "-", "profiler"], [372, 0, 0, "-", "utils"]], "neural_compressor.profiling.profiler.tensorflow_profiler.factory": [[369, 1, 1, "", "ProfilerFactory"]], "neural_compressor.profiling.profiler.tensorflow_profiler.profiler": [[371, 1, 1, "", "Profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.utils": [[372, 2, 1, "", "create_tf_config"], [372, 2, 1, "", "delete_assign"], [372, 2, 1, "", "set_eager_execution"]], "neural_compressor.quantization": [[373, 2, 1, "", "fit"]], "neural_compressor.strategy": [[374, 0, 0, "-", "auto"], [375, 0, 0, "-", "auto_mixed_precision"], [376, 0, 0, "-", "basic"], [377, 0, 0, "-", "bayesian"], [378, 0, 0, "-", "conservative"], [379, 0, 0, "-", "exhaustive"], [380, 0, 0, "-", "hawq_v2"], [382, 0, 0, "-", "mse"], [383, 0, 0, "-", "mse_v2"], [384, 0, 0, "-", "random"], [385, 0, 0, "-", "strategy"], [387, 0, 0, "-", "utils"]], "neural_compressor.strategy.auto": [[374, 1, 1, "", "AutoTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[375, 1, 1, "", "AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.basic": [[376, 1, 1, "", "BasicTuneStrategy"]], "neural_compressor.strategy.bayesian": [[377, 1, 1, "", "BayesianOptimization"], [377, 1, 1, "", "BayesianTuneStrategy"], [377, 1, 1, "", "TargetSpace"], [377, 2, 1, "", "acq_max"]], "neural_compressor.strategy.conservative": [[378, 1, 1, "", "ConservativeTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[379, 1, 1, "", "ExhaustiveTuneStrategy"]], "neural_compressor.strategy.hawq_v2": [[380, 1, 1, "", "HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.mse": [[382, 1, 1, "", "MSETuneStrategy"]], "neural_compressor.strategy.mse_v2": [[383, 1, 1, "", "MSE_V2TuneStrategy"]], "neural_compressor.strategy.random": [[384, 1, 1, "", "RandomTuneStrategy"]], "neural_compressor.strategy.strategy": [[385, 1, 1, "", "TuneStrategy"], [385, 1, 1, "", "TuneStrategyMeta"], [385, 2, 1, "", "strategy_registry"]], "neural_compressor.strategy.utils": [[386, 0, 0, "-", "constant"], [388, 0, 0, "-", "tuning_sampler"], [389, 0, 0, "-", "tuning_space"], [390, 0, 0, "-", "tuning_structs"], [391, 0, 0, "-", "utility"]], "neural_compressor.strategy.utils.tuning_sampler": [[388, 1, 1, "", "BlockFallbackTuningSampler"], [388, 1, 1, "", "FallbackTuningSampler"], [388, 1, 1, "", "LowerBitsSampler"], [388, 1, 1, "", "ModelWiseTuningSampler"], [388, 1, 1, "", "OpTypeWiseTuningSampler"], [388, 1, 1, "", "OpWiseTuningSampler"], [388, 1, 1, "", "TuningOrder"], [388, 1, 1, "", "TuningSampler"], [388, 1, 1, "", "TuningSamplerRegistry"]], "neural_compressor.strategy.utils.tuning_space": [[389, 1, 1, "", "TuningItem"], [389, 1, 1, "", "TuningSpace"], [389, 2, 1, "", "initial_tuning_cfg_with_quant_mode"], [389, 2, 1, "", "pattern_to_internal"], [389, 2, 1, "", "pattern_to_path"], [389, 2, 1, "", "quant_mode_from_pattern"]], "neural_compressor.strategy.utils.tuning_structs": [[390, 1, 1, "", "OpTuningConfig"]], "neural_compressor.strategy.utils.utility": [[391, 1, 1, "", "OrderedDefaultDict"], [391, 1, 1, "", "QuantOptions"], [391, 1, 1, "", "QuantType"], [391, 2, 1, "", "build_slave_faker_model"], [391, 2, 1, "", "extract_data_type"], [391, 2, 1, "", "get_adaptor_name"], [391, 2, 1, "", "preprocess_user_cfg"], [391, 2, 1, "", "reverted_data_type"]], "neural_compressor.template": [[392, 0, 0, "-", "api_doc_example"]], "neural_compressor.template.api_doc_example": [[392, 1, 1, "", "ExampleClass"], [392, 3, 1, "", "attribute1"], [392, 2, 1, "", "function1"], [392, 2, 1, "", "function2"], [392, 2, 1, "", "function3"], [392, 2, 1, "", "generator1"], [392, 4, 1, "", "module_debug_level1"]], "neural_compressor.template.api_doc_example.ExampleClass": [[392, 3, 1, "", "attr1"], [392, 3, 1, "", "attr2"], [392, 3, 1, "", "attr5"]], "neural_compressor.training": [[394, 1, 1, "", "CallBacks"], [394, 1, 1, "", "CompressionManager"], [394, 2, 1, "", "fit"], [394, 2, 1, "", "prepare_compression"]], "neural_compressor.utils": [[395, 0, 0, "-", "collect_layer_histogram"], [396, 0, 0, "-", "constant"], [397, 0, 0, "-", "create_obj_from_config"], [399, 0, 0, "-", "kl_divergence"], [400, 0, 0, "-", "load_huggingface"], [401, 0, 0, "-", "logger"], [402, 0, 0, "-", "neural_insights_utils"], [403, 0, 0, "-", "options"], [404, 0, 0, "-", "pytorch"], [405, 0, 0, "-", "utility"], [406, 0, 0, "-", "weights_details"]], "neural_compressor.utils.collect_layer_histogram": [[395, 1, 1, "", "LayerHistogramCollector"]], "neural_compressor.utils.create_obj_from_config": [[397, 2, 1, "", "create_dataloader"], [397, 2, 1, "", "create_dataset"], [397, 2, 1, "", "create_eval_func"], [397, 2, 1, "", "create_train_func"], [397, 2, 1, "", "get_algorithm"], [397, 2, 1, "", "get_func_from_config"], [397, 2, 1, "", "get_metrics"], [397, 2, 1, "", "get_postprocess"], [397, 2, 1, "", "get_preprocess"]], "neural_compressor.utils.kl_divergence": [[399, 1, 1, "", "KL_Divergence"]], "neural_compressor.utils.load_huggingface": [[400, 1, 1, "", "OptimizedModel"], [400, 2, 1, "", "save_for_huggingface_upstream"]], "neural_compressor.utils.logger": [[401, 1, 1, "", "Logger"], [401, 2, 1, "", "debug"], [401, 2, 1, "", "error"], [401, 2, 1, "", "fatal"], [401, 2, 1, "", "info"], [401, 2, 1, "", "log"], [401, 2, 1, "", "warn"], [401, 2, 1, "", "warning"]], "neural_compressor.utils.neural_insights_utils": [[402, 2, 1, "", "register_neural_insights_workload"], [402, 2, 1, "", "update_neural_insights_workload"], [402, 2, 1, "", "update_neural_insights_workload_accuracy_data"]], "neural_compressor.utils.options": [[403, 1, 1, "", "onnxrt"]], "neural_compressor.utils.pytorch": [[404, 2, 1, "", "is_int8_model"], [404, 2, 1, "", "load"]], "neural_compressor.utils.utility": [[405, 1, 1, "", "CaptureOutputToFile"], [405, 1, 1, "", "CpuInfo"], [405, 2, 1, "", "Dequantize"], [405, 1, 1, "", "DotDict"], [405, 1, 1, "", "GLOBAL_STATE"], [405, 1, 1, "", "LazyImport"], [405, 1, 1, "", "MODE"], [405, 1, 1, "", "OpEntry"], [405, 1, 1, "", "Statistics"], [405, 2, 1, "", "alias_param"], [405, 2, 1, "", "calculate_mse"], [405, 2, 1, "", "combine_histogram"], [405, 2, 1, "", "compare_objects"], [405, 2, 1, "", "compute_sparsity"], [405, 2, 1, "", "dequantize_weight"], [405, 2, 1, "", "dump_class_attrs"], [405, 2, 1, "", "dump_data_to_local"], [405, 2, 1, "", "dump_elapsed_time"], [405, 2, 1, "", "dump_table"], [405, 2, 1, "", "dump_table_to_csv"], [405, 2, 1, "", "equal_dicts"], [405, 2, 1, "", "fault_tolerant_file"], [405, 2, 1, "", "get_all_fp32_data"], [405, 2, 1, "", "get_number_of_sockets"], [405, 2, 1, "", "get_op_list"], [405, 2, 1, "", "get_size"], [405, 2, 1, "", "get_tensor_histogram"], [405, 2, 1, "", "get_tensors_info"], [405, 2, 1, "", "get_tuning_history"], [405, 2, 1, "", "get_weights_details"], [405, 2, 1, "", "load_data_from_pkl"], [405, 2, 1, "", "mse_metric_gap"], [405, 2, 1, "", "print_op_list"], [405, 2, 1, "", "print_table"], [405, 2, 1, "", "recover"], [405, 2, 1, "", "set_random_seed"], [405, 2, 1, "", "set_resume_from"], [405, 2, 1, "", "set_tensorboard"], [405, 2, 1, "", "set_workspace"], [405, 2, 1, "", "show_memory_info"], [405, 2, 1, "", "singleton"], [405, 2, 1, "", "str2array"], [405, 2, 1, "", "time_limit"], [405, 2, 1, "", "version1_eq_version2"], [405, 2, 1, "", "version1_gt_version2"], [405, 2, 1, "", "version1_gte_version2"], [405, 2, 1, "", "version1_lt_version2"], [405, 2, 1, "", "version1_lte_version2"]], "neural_compressor.utils.weights_details": [[406, 1, 1, "", "WeightsDetails"], [406, 1, 1, "", "WeightsStatistics"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:function", "3": "py:attribute", "4": "py:data"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "function", "Python function"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "data", "Python data"]}, "titleterms": {"block_mask": [0, 183], "neural_compressor": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407], "adaptor": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 415, 416, 418], "modul": [1, 3, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 108, 109, 112, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 170, 172, 174, 175, 176, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 224, 225, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 241, 244, 245, 246, 248, 249, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 268, 270, 271, 272, 274, 275, 276, 277, 279, 280, 282, 283, 284, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 298, 299, 300, 301, 304, 305, 306, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 327, 328, 329, 330, 332, 333, 335, 336, 337, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 352, 354, 356, 357, 358, 359, 361, 362, 364, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 385, 388, 389, 390, 391, 392, 394, 395, 397, 399, 400, 401, 402, 403, 404, 405, 406], "content": [1, 2, 3, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 108, 109, 112, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 170, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 244, 245, 246, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 327, 328, 329, 330, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 354, 356, 357, 358, 359, 361, 362, 364, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 388, 389, 390, 391, 392, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 414], "class": [1, 3, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 108, 109, 112, 114, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 148, 149, 150, 153, 154, 155, 157, 160, 161, 162, 163, 164, 166, 167, 170, 174, 175, 176, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 193, 194, 196, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 244, 245, 246, 248, 249, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 277, 278, 279, 282, 285, 286, 287, 288, 289, 290, 292, 294, 295, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 327, 328, 329, 330, 332, 335, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 354, 356, 357, 358, 359, 361, 362, 364, 366, 368, 369, 371, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 385, 388, 389, 390, 391, 392, 394, 395, 398, 399, 400, 401, 403, 405, 406, 415], "function": [1, 13, 16, 34, 42, 43, 44, 66, 67, 69, 103, 104, 115, 117, 147, 148, 149, 150, 152, 155, 156, 158, 159, 160, 162, 165, 167, 170, 172, 174, 176, 177, 181, 184, 189, 190, 191, 192, 194, 203, 204, 212, 214, 218, 221, 222, 223, 226, 228, 229, 230, 231, 233, 235, 236, 238, 241, 248, 256, 258, 262, 265, 266, 267, 269, 270, 271, 274, 275, 276, 279, 280, 282, 283, 284, 285, 286, 293, 300, 304, 309, 310, 311, 313, 318, 324, 328, 330, 332, 333, 335, 336, 337, 338, 339, 340, 344, 348, 350, 367, 372, 373, 377, 385, 389, 391, 392, 394, 397, 398, 400, 401, 402, 404, 405, 440], "subpackag": [2, 17, 86, 110, 111, 113, 169, 171, 198, 223, 242, 267, 278, 302, 320, 331, 381], "submodul": [2, 12, 17, 29, 50, 75, 86, 94, 100, 105, 110, 111, 113, 116, 129, 144, 151, 162, 168, 169, 171, 173, 177, 184, 195, 199, 206, 218, 222, 226, 233, 240, 243, 250, 262, 266, 269, 273, 278, 285, 291, 297, 303, 307, 320, 326, 331, 338, 342, 353, 355, 360, 363, 365, 370, 381, 387, 393, 398], "packag": [2, 29, 162, 177, 184, 206, 218, 222, 223, 226, 233, 250, 262, 266, 267, 269, 278, 285, 297, 302, 303, 320, 338, 342, 381, 398, 464, 466, 468, 469], "kera": 3, "keras_util": [4, 5, 6, 7, 8, 9, 10], "conv2d": 4, "dens": 5, "depthwise_conv2d": 6, "pool2d": 8, "quantiz": [9, 41, 314, 373, 411, 414, 416, 417, 429, 433, 437, 439, 442, 445, 448, 451, 452, 460, 471, 477, 478, 479, 480, 483, 489], "separable_conv2d": 10, "mxnet": [11, 435, 450, 478, 485], "mxnet_util": [12, 13], "util": [13, 43, 147, 158, 192, 325, 326, 327, 328, 329, 330, 367, 372, 386, 387, 388, 389, 390, 391, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 420], "onnxrt": [14, 435, 450, 485], "ox_util": [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43], "calibr": [15, 16, 416, 433], "oper": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 416, 417], "activ": 18, "argmax": 19, "attent": 20, "binary_op": 21, "concat": 22, "conv": 23, "direct_q8": 24, "embed_layernorm": 25, "gather": 26, "gavgpool": 27, "gemm": 28, "lstm": 30, "matmul": [31, 483], "maxpool": 32, "norm": 33, "op": [34, 442], "pad": 35, "pool": 36, "reduc": 37, "resiz": 38, "split": 39, "unary_op": 40, "smooth_quant": [42, 155, 163], "pytorch": [44, 404, 435, 440, 442, 450, 478, 479, 484, 485, 489], "queri": [45, 415], "tensorflow": [46, 435, 440, 442, 450, 478, 479, 484, 485, 489], "tf_util": [47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147], "graph_convert": 47, "graph_converter_without_calib": 48, "graph_rewrit": [49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108], "bf16": [49, 50, 452], "bf16_convert": [49, 148], "gener": [51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 416], "convert_add_to_biasadd": 51, "convert_layout": 52, "convert_leakyrelu": 53, "convert_nan_to_random": 54, "convert_placeholder_to_const": 55, "dequantize_cast_optim": 56, "dilated_contract": 57, "dummy_biasadd": 58, "expanddims_optim": 59, "fetch_weight_from_reshap": 60, "fold_batch_norm": 61, "fold_const": 62, "fuse_biasadd_add": 63, "fuse_column_wise_mul": 64, "fuse_conv_with_math": 65, "fuse_decomposed_bn": 66, "fuse_decomposed_in": 67, "fuse_gelu": 68, "fuse_layer_norm": 69, "fuse_pad_with_conv": 70, "fuse_pad_with_fp32_conv": 71, "fuse_reshape_transpos": 72, "graph_cse_optim": 73, "grappler_pass": 74, "insert_print_nod": 76, "move_squeeze_after_relu": 77, "pre_optim": 78, "remove_training_nod": 79, "rename_batch_norm": 80, "split_shared_input": 81, "strip_equivalent_nod": 82, "strip_unused_nod": 83, "switch_optim": 84, "graph_bas": 85, "int8": [87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 442, 489], "freeze_fake_qu": 87, "freeze_valu": 88, "freeze_value_without_calib": 89, "fuse_conv_redundant_dequant": 90, "fuse_conv_requant": 91, "fuse_matmul_redundant_dequant": 92, "fuse_matmul_requant": 93, "meta_op_optim": 95, "post_hostconst_convert": 96, "post_quantized_op_cs": 97, "rnn_convert": 98, "scale_propag": 99, "onnx": [100, 101, 102, 103, 104, 419, 448, 478, 489], "onnx_graph": 101, "onnx_nod": 102, "onnx_schema": 103, "tf2onnx_util": 104, "qdq": [105, 106, 107, 108, 122, 123, 124, 125, 126, 127, 128, 129, 130, 489], "insert_qdq_pattern": 106, "merge_duplicated_qdq": 107, "share_qdq_y_pattern": 108, "graph_util": 109, "quantize_graph": [111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137], "qat": [112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 489], "fake_quant": 112, "quantize_config": 114, "quantize_help": 115, "quantize_lay": [116, 117, 118, 119, 120], "optimize_lay": 117, "quantize_layer_add": 118, "quantize_layer_bas": 119, "quantize_layer_bn": 120, "quantize_wrapp": 121, "fuse_qdq_bn": 122, "fuse_qdq_concatv2": 123, "fuse_qdq_conv": 124, "fuse_qdq_deconv": 125, "fuse_qdq_in": 126, "fuse_qdq_matmul": 127, "fuse_qdq_pool": 128, "optimize_qdq": 130, "quantize_graph_bas": 131, "quantize_graph_bn": 132, "quantize_graph_concatv2": 133, "quantize_graph_conv": 134, "quantize_graph_for_intel_cpu": 135, "quantize_graph_matmul": 136, "quantize_graph_pool": 137, "quantize_graph_common": 138, "smooth_quant_calibr": 139, "smooth_quant_scal": 140, "tf2onnx_convert": 141, "transform_graph": [142, 143, 144, 145, 146], "bias_correct": 142, "graph_transform_bas": 143, "insert_log": 145, "rerange_quantized_concat": 146, "torch_util": [148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 238], "gptq": 149, "hawq_metr": 150, "mixed_precis": [152, 287], "model_wrapp": 153, "pattern_detector": 154, "symbolic_trac": 156, "teq": 157, "weight_onli": 159, "algorithm": [160, 161, 162, 163, 164, 433, 483, 486], "fast_bias_correct": 161, "weight_correct": 164, "benchmark": [165, 230, 423, 432, 437, 451, 477], "compress": [166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 240, 241, 424], "callback": 166, "distil": [167, 168, 272, 438, 439, 451, 477, 489], "criterion": [167, 231], "pruner": [170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 300, 311], "criteria": [170, 475, 486], "model_slim": [172, 173, 174, 175], "auto_slim": 172, "pattern_analyz": 174, "weight_slim": 175, "pattern": [176, 177, 178, 179, 180, 303, 304, 305, 309, 475], "base": [176, 181, 448, 487], "mha": [178, 185], "ninm": 179, "nxm": 180, "basic": [182, 317, 376, 412, 486], "pattern_lock": [186, 299], "progress": 187, "retrain_fre": 188, "reg": 189, "schedul": [190, 313, 315, 475], "tf_criteria": 191, "conf": [193, 194, 195, 196], "config": [193, 197, 425, 435, 473], "dotdict": 194, "pythonic_config": 196, "contrib": [198, 199, 200, 201, 242, 243, 244, 245], "strategi": [199, 200, 201, 243, 244, 245, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 430, 482, 486], "sigopt": [200, 244, 482, 486], "tpe": [201, 245, 486], "data": [202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 416, 417, 437, 441], "dataload": [202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 232, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 434, 435], "base_dataload": [202, 246], "default_dataload": [204, 248], "fetcher": [205, 249], "attribut": [206, 214, 223, 258, 267, 278, 302, 342, 392, 398, 409], "mxnet_dataload": [207, 251], "onnxrt_dataload": [208, 252], "pytorch_dataload": [209, 253], "sampler": [210, 254], "tensorflow_dataload": [211, 255], "dataset": [212, 213, 214, 215, 216, 217, 218, 219, 256, 257, 258, 259, 260, 261, 262, 263, 435, 437, 446], "bert_dataset": [212, 256], "coco_dataset": [213, 257], "dummy_dataset": [215, 259], "dummy_dataset_v2": [216, 260], "imagenet_dataset": [217, 261], "style_transfer_dataset": [219, 263], "filter": [220, 221, 222, 264, 265, 266], "coco_filt": [220, 264], "transform": [224, 225, 226, 227, 228, 229, 268, 269, 270, 271, 446, 485], "coco_transform": 224, "imagenet_transform": [225, 268], "postprocess": [227, 237], "token": [228, 270], "experiment": [230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330], "common": [231, 232, 233, 234, 235, 236, 237, 238, 411, 443], "metric": [234, 279, 280, 281, 282, 283, 284, 285, 286, 332, 333, 334, 335, 336, 337, 338, 339, 446, 450], "model": [235, 341, 342, 343, 344, 345, 346, 347, 348, 349, 416, 427, 442, 445, 448, 451, 453, 460, 475, 480, 483, 489], "optim": [236, 461, 471, 474, 487], "compon": 239, "prune": [241, 301, 312, 451, 475, 477, 489], "export": [273, 274, 275, 276, 442], "qlinear2qdq": 274, "tf2onnx": 275, "torch2onnx": 276, "graph_optim": 277, "bleu": [279, 332], "bleu_util": [280, 333], "coco_label_map": [281, 334], "coco_tool": [282, 335], "evaluate_squad": [283, 336], "f1": [284, 337], "model_convers": 288, "na": [289, 290, 291, 292, 293, 294, 412, 477], "basic_na": 289, "dyna": 290, "nas_util": 293, "search_algorithm": 294, "pruner_legaci": [295, 296, 297, 298, 299, 300], "gradient_sensit": 295, "group_lasso": 296, "magnitud": 298, "pruning_recip": [302, 303, 304, 305], "tile_pattern": 305, "pruning_v2": 306, "pytorch_prun": [307, 308, 309, 310, 311, 312, 313], "logger": [308, 401], "prune_util": 310, "auto_mixed_precis": [316, 375], "bayesian": [318, 377, 486], "exhaust": [319, 379, 486], "mse": [321, 382, 486], "mse_v2": [322, 383, 486], "random": [323, 384, 486], "constant": [325, 386, 396], "tuning_sampl": [327, 388], "tuning_spac": [328, 389], "tuning_struct": [329, 390], "mix_precis": 340, "base_model": 341, "keras_model": 343, "mxnet_model": 345, "nets_factori": 346, "onnx_model": 347, "tensorflow_model": 348, "torch_model": 349, "object": [350, 428, 473], "profil": [351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 437], "parser": [352, 353, 354, 355, 356, 357, 358, 359, 360, 361], "factori": [352, 354, 359, 362, 364, 369], "onnx_pars": [354, 355, 356], "result": 358, "tensorflow_pars": [359, 360, 361], "onnxrt_profil": [364, 365, 366, 367], "tensorflow_profil": [369, 370, 371, 372], "auto": [374, 465, 471, 479, 483, 486], "conserv": [378, 486], "hawq_v2": [380, 486], "templat": [392, 393, 410], "api_doc_exampl": 392, "train": [394, 411, 431, 440, 451, 478], "collect_layer_histogram": 395, "create_obj_from_config": 397, "kl_diverg": 399, "load_huggingfac": 400, "neural_insights_util": 402, "option": [403, 440, 459], "weights_detail": 406, "version": 407, "intel": [408, 414, 434, 437, 447, 448, 450, 451, 457, 465, 471, 489, 490], "neural": [408, 411, 412, 414, 434, 437, 447, 448, 450, 451, 454, 458, 460, 465, 471, 475, 482, 487, 490], "compressor": [408, 411, 414, 434, 437, 447, 448, 450, 451, 465, 471, 482, 490], "document": [408, 414, 421, 490], "section": [408, 490], "contributor": [409, 410], "coven": [409, 410], "code": [409, 410, 412, 451, 472, 480, 487], "conduct": [409, 410], "our": [409, 483], "pledg": 409, "standard": 409, "respons": 409, "scope": [409, 475], "enforc": 409, "contribut": [410, 464, 468], "guidelin": 410, "pull": 410, "request": [410, 452], "checklist": 410, "support": [410, 411, 412, 415, 417, 432, 433, 434, 435, 437, 438, 439, 440, 442, 444, 447, 448, 450, 452, 453, 455, 456, 460, 461, 473, 474, 475, 477, 478, 480, 483, 484, 485, 488], "fx": 411, "introduct": [411, 412, 415, 416, 417, 432, 433, 434, 435, 437, 438, 439, 440, 442, 444, 447, 450, 452, 453, 471, 473, 474, 475, 477, 478, 480, 482, 483, 484, 485, 486, 488], "mode": [411, 489], "matrix": [411, 412, 415, 432, 433, 434, 435, 437, 438, 439, 440, 442, 444, 447, 450, 452, 453, 456, 473, 474, 475, 477, 478, 480, 483, 484, 488], "get": [411, 412, 414, 415, 432, 434, 435, 437, 438, 439, 440, 444, 445, 450, 452, 454, 465, 472, 473, 474, 475, 477, 478, 484, 488], "start": [411, 412, 414, 415, 432, 434, 435, 437, 438, 439, 440, 444, 445, 450, 452, 454, 455, 459, 465, 473, 474, 475, 477, 478, 484, 488], "post": [411, 451, 478], "static": [411, 478], "dynam": [411, 412, 478], "awar": [411, 451, 478], "exampl": [411, 412, 415, 421, 432, 434, 435, 437, 438, 439, 440, 441, 442, 450, 451, 452, 453, 456, 460, 473, 474, 475, 478, 480, 483, 484, 489], "note": [411, 481], "detail": 411, "problem": 411, "architectur": [412, 436, 447, 448], "search": [412, 471], "api": [412, 414, 415, 416, 421, 422, 432, 434, 435, 438, 439, 440, 445, 446, 450, 452, 454, 458, 472, 473, 474, 475, 477, 487], "usag": [412, 460, 471, 484, 486], "1": [412, 440, 443, 446, 451, 471, 489], "python": [412, 414, 434, 445, 450, 454, 458, 459, 466, 469, 477, 487], "yaml": [412, 416, 435, 440, 444, 488], "2": [412, 440, 443, 446, 451, 471, 489], "onli": [412, 480], "advanc": [412, 487], "custom": [412, 434, 450, 486], "secur": [413, 440], "polici": [413, 486], "report": 413, "vulner": 413, "instal": [414, 437, 448, 455, 457, 464, 465, 468], "from": [414, 416, 448, 451], "pypi": [414, 460], "select": [414, 465], "public": [414, 476], "event": [414, 476], "addit": 414, "research": 414, "collabor": 414, "work": [415, 478], "flow": [415, 478], "background": [415, 471], "ad": 415, "new": [415, 417, 466, 469, 486], "backend": [415, 478], "capabl": [415, 480], "implement": [415, 416], "onnxrtadaptor": 415, "how": [416, 417, 437], "add": 416, "an": 416, "list": [416, 441, 485], "need": 416, "design": [416, 436, 486], "framework": [416, 434, 435, 442, 444, 453, 477, 480, 483], "query_fw_cap": 416, "accord": [416, 417], "tune_cfg": 416, "prepar": [416, 437, 482], "fp32": [416, 442], "graph": 416, "run": [416, 437, 472], "sampl": [416, 445], "iter": 416, "calcul": 416, "rang": 416, "type": [417, 475], "like": 417, "int4": 417, "few": 417, "line": 417, "chang": [417, 446, 470, 472, 481], "defin": [417, 440], "abil": 417, "specif": [417, 435], "invok": 417, "kernel": 417, "tune": [417, 478, 483, 486], "configur": [417, 440, 444, 477, 482, 488], "us": [417, 434, 450], "summari": 417, "runtim": [419, 448, 478, 489], "torch": [420, 489], "mix": [426, 451, 452, 479], "precis": [426, 451, 452, 479], "refer": [433, 475, 478, 480, 483], "build": [434, 443, 450], "file": [435, 444, 488], "user": [435, 440, 446, 477, 480, 487, 488], "workflow": 436, "diagnosi": 437, "featur": [437, 440, 444, 447, 460, 461, 465, 477, 478, 484, 488], "modifi": 437, "script": 437, "see": 437, "do": [437, 454], "paramet": 437, "descript": 437, "suggest": 437, "fallback": 437, "set": [437, 457, 471], "knowledg": [438, 489], "intermedi": 438, "layer": [438, 483], "self": 438, "distribut": [440, 460, 486], "infer": 440, "evalu": 440, "pure": 440, "horovodrun": 440, "execut": 440, "releas": [441, 466, 469, 481], "appendix": 442, "frequent": 443, "ask": 443, "question": 443, "issu": [443, 481], "3": [443, 455, 471], "4": [443, 462, 471, 476], "quick": [445, 459], "valid": [445, 448, 483, 489], "incompat": [446, 481], "between": 446, "v1": 446, "face": 446, "built": [446, 448, 450], "infrastructur": 447, "linux": 448, "prerequisit": 448, "binari": 448, "sourc": 448, "ai": 448, "kit": 448, "window": 448, "system": 448, "requir": [448, 464, 468], "hardwar": [448, 452, 489], "environ": [448, 457], "cpu": [448, 457, 489], "64": 448, "compat": 448, "processor": 448, "gpu": 448, "": [448, 472], "xe": 448, "multipl": [448, 473, 489], "vendor": 448, "through": [448, 489], "softwar": [448, 452], "legal": 449, "inform": 449, "licens": 449, "citat": 449, "trademark": 449, "migrat": 451, "x": 451, "orchestr": [451, 474], "fp16": 452, "dure": [452, 479], "accuraci": [452, 478, 486], "driven": 452, "coder": [454, 458, 460, 471, 487], "what": [454, 472], "we": 454, "offer": 454, "jupyt": [454, 455, 466, 469], "lab": [454, 455], "extens": [454, 464, 465, 468, 471, 472, 489], "launcher": [454, 459], "contact": 454, "aw": 455, "amazon": 455, "sagemak": 455, "For": 455, "studio": 455, "notebook": 455, "instanc": 455, "guid": [455, 487], "bigdl": 456, "nano": 456, "platform": [457, 482], "best": [457, 465], "perform": [457, 482], "mkl": 457, "openmp": 457, "jemalloc": 457, "numa": 457, "control": 457, "variabl": 457, "frequenc": 457, "govern": 457, "enabl": [458, 465, 471], "bench": 458, "superbench": 458, "argument": 459, "v0": 462, "highlight": 462, "other": 462, "changelog": [463, 467], "neural_compressor_ext_lab": [464, 466], "uninstal": [464, 468], "develop": [464, 468], "jupyterlab": 465, "Or": 465, "let": 465, "u": 465, "help": 465, "you": 465, "pre": 465, "requisit": 465, "make": [466, 469, 472], "manual": [466, 469], "npm": [466, 469], "autom": [466, 469], "publish": [466, 469], "conda": [466, 469], "forg": [466, 469], "neural_compressor_ext_lab_alibaba": [468, 469], "log": 470, "unreleas": 470, "vscode": 471, "open": 471, "icon": 471, "5": 471, "welcom": 472, "your": 472, "v": 472, "folder": 472, "setup": 472, "up": 472, "straight": 472, "awai": 472, "explor": 472, "test": 472, "go": 472, "further": 472, "singl": 473, "One": 474, "shot": 474, "network": 475, "sparsiti": 475, "decai": 475, "regular": 475, "spars": 475, "deploy": 475, "full": 476, "70": 476, "2023": 476, "17": 476, "2022": 476, "34": 476, "2021": 476, "15": [476, 489], "2018": 476, "2020": 476, "style": 477, "access": 477, "fundament": [478, 483], "scheme": 478, "ipex": 478, "approach": 478, "With": 478, "without": 478, "specifi": 478, "rule": 478, "recip": 478, "devic": 478, "turn": 479, "off": 479, "weight": 480, "known": 481, "benefit": 482, "comparison": 482, "differ": 482, "smooth": 483, "quant": 483, "per": 483, "tensor": 483, "channel": 483, "limit": 483, "smoothquant": 483, "enhanc": 483, "wise": 483, "alpha": 483, "engin": 483, "tensorboard": 484, "space": 486, "exit": 486, "process": 486, "overview": 487, "zero": 487, "topic": 487, "innov": 487, "product": 487, "12": 489, "0": 489, "ptq": 489}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"block_mask": [[0, "module-block_mask"]], "neural_compressor.adaptor.adaptor": [[1, "module-neural_compressor.adaptor.adaptor"]], "Module Contents": [[1, "module-contents"], [3, "module-contents"], [11, "module-contents"], [13, "module-contents"], [14, "module-contents"], [15, "module-contents"], [16, "module-contents"], [18, "module-contents"], [19, "module-contents"], [20, "module-contents"], [21, "module-contents"], [22, "module-contents"], [23, "module-contents"], [24, "module-contents"], [25, "module-contents"], [26, "module-contents"], [27, "module-contents"], [28, "module-contents"], [30, "module-contents"], [31, "module-contents"], [32, "module-contents"], [33, "module-contents"], [34, "module-contents"], [35, "module-contents"], [36, "module-contents"], [37, "module-contents"], [38, "module-contents"], [39, "module-contents"], [40, "module-contents"], [41, "module-contents"], [42, "module-contents"], [43, "module-contents"], [44, "module-contents"], [45, "module-contents"], [46, "module-contents"], [47, "module-contents"], [48, "module-contents"], [49, "module-contents"], [51, "module-contents"], [52, "module-contents"], [53, "module-contents"], [54, "module-contents"], [55, "module-contents"], [56, "module-contents"], [57, "module-contents"], [58, "module-contents"], [59, "module-contents"], [60, "module-contents"], [61, "module-contents"], [62, "module-contents"], [63, "module-contents"], [64, "module-contents"], [65, "module-contents"], [66, "module-contents"], [67, "module-contents"], [68, "module-contents"], [69, "module-contents"], [70, "module-contents"], [71, "module-contents"], [72, "module-contents"], [73, "module-contents"], [74, "module-contents"], [76, "module-contents"], [77, "module-contents"], [78, "module-contents"], [79, "module-contents"], [80, "module-contents"], [81, "module-contents"], [82, "module-contents"], [83, "module-contents"], [84, "module-contents"], [85, "module-contents"], [87, "module-contents"], [88, "module-contents"], [89, "module-contents"], [90, "module-contents"], [91, "module-contents"], [92, "module-contents"], [93, "module-contents"], [95, "module-contents"], [96, "module-contents"], [97, "module-contents"], [98, "module-contents"], [99, "module-contents"], [101, "module-contents"], [102, "module-contents"], [103, "module-contents"], [104, "module-contents"], [106, "module-contents"], [107, "module-contents"], [108, "module-contents"], [109, "module-contents"], [112, "module-contents"], [114, "module-contents"], [115, "module-contents"], [117, "module-contents"], [118, "module-contents"], [119, "module-contents"], [120, "module-contents"], [121, "module-contents"], [122, "module-contents"], [123, "module-contents"], [124, "module-contents"], [125, "module-contents"], [126, "module-contents"], [127, "module-contents"], [128, "module-contents"], [130, "module-contents"], [131, "module-contents"], [132, "module-contents"], [133, "module-contents"], [134, "module-contents"], [135, "module-contents"], [136, "module-contents"], [137, "module-contents"], [138, "module-contents"], [139, "module-contents"], [140, "module-contents"], [141, "module-contents"], [142, "module-contents"], [143, "module-contents"], [145, "module-contents"], [146, "module-contents"], [147, "module-contents"], [148, "module-contents"], [149, "module-contents"], [150, "module-contents"], [152, "module-contents"], [153, "module-contents"], [154, "module-contents"], [155, "module-contents"], [156, "module-contents"], [157, "module-contents"], [158, "module-contents"], [159, "module-contents"], [160, "module-contents"], [161, "module-contents"], [163, "module-contents"], [164, "module-contents"], [165, "module-contents"], [166, "module-contents"], [167, "module-contents"], [170, "module-contents"], [172, "module-contents"], [174, "module-contents"], [175, "module-contents"], [176, "module-contents"], [178, "module-contents"], [179, "module-contents"], [180, "module-contents"], [181, "module-contents"], [182, "module-contents"], [183, "module-contents"], [185, "module-contents"], [186, "module-contents"], [187, "module-contents"], [188, "module-contents"], [189, "module-contents"], [190, "module-contents"], [191, "module-contents"], [192, "module-contents"], [193, "module-contents"], [194, "module-contents"], [196, "module-contents"], [197, "module-contents"], [200, "module-contents"], [201, "module-contents"], [202, "module-contents"], [203, "module-contents"], [204, "module-contents"], [205, "module-contents"], [207, "module-contents"], [208, "module-contents"], [209, "module-contents"], [210, "module-contents"], [211, "module-contents"], [212, "module-contents"], [213, "module-contents"], [214, "module-contents"], [215, "module-contents"], [216, "module-contents"], [217, "module-contents"], [219, "module-contents"], [220, "module-contents"], [221, "module-contents"], [224, "module-contents"], [225, "module-contents"], [227, "module-contents"], [228, "module-contents"], [229, "module-contents"], [230, "module-contents"], [231, "module-contents"], [232, "module-contents"], [234, "module-contents"], [235, "module-contents"], [236, "module-contents"], [237, "module-contents"], [238, "module-contents"], [239, "module-contents"], [241, "module-contents"], [244, "module-contents"], [245, "module-contents"], [246, "module-contents"], [248, "module-contents"], [249, "module-contents"], [251, "module-contents"], [252, "module-contents"], [253, "module-contents"], [254, "module-contents"], [255, "module-contents"], [256, "module-contents"], [257, "module-contents"], [258, "module-contents"], [259, "module-contents"], [260, "module-contents"], [261, "module-contents"], [263, "module-contents"], [264, "module-contents"], [265, "module-contents"], [268, "module-contents"], [270, "module-contents"], [271, "module-contents"], [272, "module-contents"], [274, "module-contents"], [275, "module-contents"], [276, "module-contents"], [277, "module-contents"], [279, "module-contents"], [280, "module-contents"], [282, "module-contents"], [283, "module-contents"], [284, "module-contents"], [286, "module-contents"], [287, "module-contents"], [288, "module-contents"], [289, "module-contents"], [290, "module-contents"], [292, "module-contents"], [293, "module-contents"], [294, "module-contents"], [295, "module-contents"], [296, "module-contents"], [298, "module-contents"], [299, "module-contents"], [300, "module-contents"], [301, "module-contents"], [304, "module-contents"], [305, "module-contents"], [306, "module-contents"], [309, "module-contents"], [310, "module-contents"], [311, "module-contents"], [312, "module-contents"], [313, "module-contents"], [314, "module-contents"], [315, "module-contents"], [316, "module-contents"], [317, "module-contents"], [318, "module-contents"], [319, "module-contents"], [321, "module-contents"], [322, "module-contents"], [323, "module-contents"], [324, "module-contents"], [327, "module-contents"], [328, "module-contents"], [329, "module-contents"], [330, "module-contents"], [332, "module-contents"], [333, "module-contents"], [335, "module-contents"], [336, "module-contents"], [337, "module-contents"], [339, "module-contents"], [340, "module-contents"], [341, "module-contents"], [343, "module-contents"], [344, "module-contents"], [345, "module-contents"], [346, "module-contents"], [347, "module-contents"], [348, "module-contents"], [349, "module-contents"], [350, "module-contents"], [352, "module-contents"], [354, "module-contents"], [356, "module-contents"], [357, "module-contents"], [358, "module-contents"], [359, "module-contents"], [361, "module-contents"], [362, "module-contents"], [364, "module-contents"], [366, "module-contents"], [367, "module-contents"], [368, "module-contents"], [369, "module-contents"], [371, "module-contents"], [372, "module-contents"], [373, "module-contents"], [374, "module-contents"], [375, "module-contents"], [376, "module-contents"], [377, "module-contents"], [378, "module-contents"], [379, "module-contents"], [380, "module-contents"], [382, "module-contents"], [383, "module-contents"], [384, "module-contents"], [385, "module-contents"], [388, "module-contents"], [389, "module-contents"], [390, "module-contents"], [391, "module-contents"], [392, "module-contents"], [394, "module-contents"], [395, "module-contents"], [397, "module-contents"], [399, "module-contents"], [400, "module-contents"], [401, "module-contents"], [402, "module-contents"], [403, "module-contents"], [404, "module-contents"], [405, "module-contents"], [406, "module-contents"]], "Classes": [[1, "classes"], [3, "classes"], [11, "classes"], [13, "classes"], [14, "classes"], [15, "classes"], [16, "classes"], [18, "classes"], [19, "classes"], [20, "classes"], [21, "classes"], [22, "classes"], [23, "classes"], [24, "classes"], [25, "classes"], [26, "classes"], [27, "classes"], [28, "classes"], [30, "classes"], [31, "classes"], [32, "classes"], [33, "classes"], [34, "classes"], [35, "classes"], [36, "classes"], [37, "classes"], [38, "classes"], [39, "classes"], [40, "classes"], [41, "classes"], [42, "classes"], [43, "classes"], [44, "classes"], [45, "classes"], [46, "classes"], [47, "classes"], [48, "classes"], [49, "classes"], [51, "classes"], [52, "classes"], [53, "classes"], [54, "classes"], [55, "classes"], [56, "classes"], [57, "classes"], [58, "classes"], [59, "classes"], [60, "classes"], [61, "classes"], [62, "classes"], [63, "classes"], [64, "classes"], [65, "classes"], [66, "classes"], [67, "classes"], [68, "classes"], [69, "classes"], [70, "classes"], [71, "classes"], [72, "classes"], [73, "classes"], [74, "classes"], [76, "classes"], [77, "classes"], [78, "classes"], [79, "classes"], [80, "classes"], [81, "classes"], [82, "classes"], [83, "classes"], [84, "classes"], [85, "classes"], [87, "classes"], [88, "classes"], [89, "classes"], [90, "classes"], [91, "classes"], [92, "classes"], [93, "classes"], [95, "classes"], [96, "classes"], [97, "classes"], [98, "classes"], [99, "classes"], [101, "classes"], [102, "classes"], [103, "classes"], [104, "classes"], [106, "classes"], [107, "classes"], [108, "classes"], [109, "classes"], [112, "classes"], [114, "classes"], [118, "classes"], [119, "classes"], [120, "classes"], [121, "classes"], [122, "classes"], [123, "classes"], [124, "classes"], [125, "classes"], [126, "classes"], [127, "classes"], [128, "classes"], [130, "classes"], [131, "classes"], [132, "classes"], [133, "classes"], [134, "classes"], [135, "classes"], [136, "classes"], [137, "classes"], [138, "classes"], [139, "classes"], [140, "classes"], [141, "classes"], [142, "classes"], [143, "classes"], [145, "classes"], [146, "classes"], [148, "classes"], [149, "classes"], [150, "classes"], [153, "classes"], [154, "classes"], [155, "classes"], [157, "classes"], [160, "classes"], [161, "classes"], [162, "classes"], [163, "classes"], [164, "classes"], [166, "classes"], [167, "classes"], [170, "classes"], [174, "classes"], [175, "classes"], [176, "classes"], [178, "classes"], [179, "classes"], [180, "classes"], [181, "classes"], [182, "classes"], [183, "classes"], [185, "classes"], [186, "classes"], [187, "classes"], [188, "classes"], [189, "classes"], [190, "classes"], [191, "classes"], [193, "classes"], [194, "classes"], [196, "classes"], [197, "classes"], [200, "classes"], [201, "classes"], [202, "classes"], [203, "classes"], [204, "classes"], [205, "classes"], [206, "classes"], [207, "classes"], [208, "classes"], [209, "classes"], [210, "classes"], [211, "classes"], [212, "classes"], [213, "classes"], [214, "classes"], [215, "classes"], [216, "classes"], [217, "classes"], [218, "classes"], [219, "classes"], [220, "classes"], [221, "classes"], [222, "classes"], [223, "classes"], [224, "classes"], [225, "classes"], [226, "classes"], [227, "classes"], [228, "classes"], [229, "classes"], [230, "classes"], [231, "classes"], [232, "classes"], [233, "classes"], [234, "classes"], [235, "classes"], [236, "classes"], [237, "classes"], [239, "classes"], [244, "classes"], [245, "classes"], [246, "classes"], [248, "classes"], [249, "classes"], [251, "classes"], [252, "classes"], [253, "classes"], [254, "classes"], [255, "classes"], [256, "classes"], [257, "classes"], [258, "classes"], [259, "classes"], [260, "classes"], [261, "classes"], [262, "classes"], [263, "classes"], [264, "classes"], [265, "classes"], [266, "classes"], [267, "classes"], [268, "classes"], [269, "classes"], [270, "classes"], [271, "classes"], [272, "classes"], [277, "classes"], [278, "classes"], [279, "classes"], [282, "classes"], [285, "classes"], [286, "classes"], [287, "classes"], [288, "classes"], [289, "classes"], [290, "classes"], [292, "classes"], [294, "classes"], [295, "classes"], [296, "classes"], [298, "classes"], [299, "classes"], [300, "classes"], [301, "classes"], [302, "classes"], [303, "classes"], [304, "classes"], [305, "classes"], [306, "classes"], [309, "classes"], [311, "classes"], [312, "classes"], [313, "classes"], [314, "classes"], [315, "classes"], [316, "classes"], [317, "classes"], [318, "classes"], [319, "classes"], [321, "classes"], [322, "classes"], [323, "classes"], [324, "classes"], [327, "classes"], [328, "classes"], [329, "classes"], [330, "classes"], [332, "classes"], [335, "classes"], [338, "classes"], [339, "classes"], [341, "classes"], [342, "classes"], [343, "classes"], [344, "classes"], [345, "classes"], [346, "classes"], [347, "classes"], [348, "classes"], [349, "classes"], [350, "classes"], [352, "classes"], [354, "classes"], [356, "classes"], [357, "classes"], [358, "classes"], [359, "classes"], [361, "classes"], [362, "classes"], [364, "classes"], [366, "classes"], [368, "classes"], [369, "classes"], [371, "classes"], [374, "classes"], [375, "classes"], [376, "classes"], [377, "classes"], [378, "classes"], [379, "classes"], [380, "classes"], [382, "classes"], [383, "classes"], [384, "classes"], [385, "classes"], [388, "classes"], [389, "classes"], [390, "classes"], [391, "classes"], [392, "classes"], [394, "classes"], [395, "classes"], [398, "classes"], [399, "classes"], [400, "classes"], [401, "classes"], [403, "classes"], [405, "classes"], [406, "classes"]], "Functions": [[1, "functions"], [13, "functions"], [16, "functions"], [34, "functions"], [42, "functions"], [43, "functions"], [44, "functions"], [66, "functions"], [67, "functions"], [69, "functions"], [103, "functions"], [104, "functions"], [115, "functions"], [117, "functions"], [147, "functions"], [148, "functions"], [149, "functions"], [150, "functions"], [152, "functions"], [155, "functions"], [156, "functions"], [158, "functions"], [159, "functions"], [160, "functions"], [162, "functions"], [165, "functions"], [167, "functions"], [170, "functions"], [172, "functions"], [174, "functions"], [176, "functions"], [177, "functions"], [181, "functions"], [184, "functions"], [189, "functions"], [190, "functions"], [191, "functions"], [192, "functions"], [194, "functions"], [203, "functions"], [204, "functions"], [212, "functions"], [214, "functions"], [218, "functions"], [221, "functions"], [222, "functions"], [223, "functions"], [226, "functions"], [228, "functions"], [229, "functions"], [230, "functions"], [231, "functions"], [233, "functions"], [235, "functions"], [236, "functions"], [238, "functions"], [241, "functions"], [248, "functions"], [256, "functions"], [258, "functions"], [262, "functions"], [265, "functions"], [266, "functions"], [267, "functions"], [269, "functions"], [270, "functions"], [271, "functions"], [274, "functions"], [275, "functions"], [276, "functions"], [279, "functions"], [280, "functions"], [282, "functions"], [283, "functions"], [284, "functions"], [285, "functions"], [286, "functions"], [293, "functions"], [300, "functions"], [304, "functions"], [309, "functions"], [310, "functions"], [311, "functions"], [313, "functions"], [318, "functions"], [324, "functions"], [328, "functions"], [330, "functions"], [332, "functions"], [333, "functions"], [335, "functions"], [336, "functions"], [337, "functions"], [338, "functions"], [339, "functions"], [340, "functions"], [344, "functions"], [348, "functions"], [350, "functions"], [367, "functions"], [372, "functions"], [373, "functions"], [377, "functions"], [385, "functions"], [389, "functions"], [391, "functions"], [392, "functions"], [394, "functions"], [397, "functions"], [398, "functions"], [400, "functions"], [401, "functions"], [402, "functions"], [404, "functions"], [405, "functions"]], "neural_compressor.adaptor": [[2, "module-neural_compressor.adaptor"]], "Subpackages": [[2, "subpackages"], [17, "subpackages"], [86, "subpackages"], [110, "subpackages"], [111, "subpackages"], [113, "subpackages"], [169, "subpackages"], [171, "subpackages"], [198, "subpackages"], [223, "subpackages"], [242, "subpackages"], [267, "subpackages"], [278, "subpackages"], [302, "subpackages"], [320, "subpackages"], [331, "subpackages"], [381, "subpackages"]], "Submodules": [[2, "submodules"], [12, "submodules"], [17, "submodules"], [29, "submodules"], [50, "submodules"], [75, "submodules"], [86, "submodules"], [94, "submodules"], [100, "submodules"], [105, "submodules"], [110, "submodules"], [111, "submodules"], [113, "submodules"], [116, "submodules"], [129, "submodules"], [144, "submodules"], [151, "submodules"], [162, "submodules"], [168, "submodules"], [169, "submodules"], [171, "submodules"], [173, "submodules"], [177, "submodules"], [184, "submodules"], [195, "submodules"], [199, "submodules"], [206, "submodules"], [218, "submodules"], [222, "submodules"], [226, "submodules"], [233, "submodules"], [240, "submodules"], [243, "submodules"], [250, "submodules"], [262, "submodules"], [266, "submodules"], [269, "submodules"], [273, "submodules"], [278, "submodules"], [285, "submodules"], [291, "submodules"], [297, "submodules"], [303, "submodules"], [307, "submodules"], [320, "submodules"], [326, "submodules"], [331, "submodules"], [338, "submodules"], [342, "submodules"], [353, "submodules"], [355, "submodules"], [360, "submodules"], [363, "submodules"], [365, "submodules"], [370, "submodules"], [381, "submodules"], [387, "submodules"], [393, "submodules"], [398, "submodules"]], "Package Contents": [[2, "package-contents"], [29, "package-contents"], [162, "package-contents"], [177, "package-contents"], [184, "package-contents"], [206, "package-contents"], [218, "package-contents"], [222, "package-contents"], [223, "package-contents"], [226, "package-contents"], [233, "package-contents"], [250, "package-contents"], [262, "package-contents"], [266, "package-contents"], [267, "package-contents"], [269, "package-contents"], [278, "package-contents"], [285, "package-contents"], [297, "package-contents"], [302, "package-contents"], [303, "package-contents"], [320, "package-contents"], [338, "package-contents"], [342, "package-contents"], [381, "package-contents"], [398, "package-contents"]], "neural_compressor.adaptor.keras": [[3, "module-neural_compressor.adaptor.keras"]], "neural_compressor.adaptor.keras_utils.conv2d": [[4, "module-neural_compressor.adaptor.keras_utils.conv2d"]], "neural_compressor.adaptor.keras_utils.dense": [[5, "module-neural_compressor.adaptor.keras_utils.dense"]], "neural_compressor.adaptor.keras_utils.depthwise_conv2d": [[6, "module-neural_compressor.adaptor.keras_utils.depthwise_conv2d"]], "neural_compressor.adaptor.keras_utils": [[7, "module-neural_compressor.adaptor.keras_utils"]], "neural_compressor.adaptor.keras_utils.pool2d": [[8, "module-neural_compressor.adaptor.keras_utils.pool2d"]], "neural_compressor.adaptor.keras_utils.quantizer": [[9, "module-neural_compressor.adaptor.keras_utils.quantizer"]], "neural_compressor.adaptor.keras_utils.separable_conv2d": [[10, "module-neural_compressor.adaptor.keras_utils.separable_conv2d"]], "neural_compressor.adaptor.mxnet": [[11, "module-neural_compressor.adaptor.mxnet"]], "neural_compressor.adaptor.mxnet_utils": [[12, "module-neural_compressor.adaptor.mxnet_utils"]], "neural_compressor.adaptor.mxnet_utils.util": [[13, "module-neural_compressor.adaptor.mxnet_utils.util"]], "neural_compressor.adaptor.onnxrt": [[14, "module-neural_compressor.adaptor.onnxrt"]], "neural_compressor.adaptor.ox_utils.calibration": [[15, "module-neural_compressor.adaptor.ox_utils.calibration"]], "neural_compressor.adaptor.ox_utils.calibrator": [[16, "module-neural_compressor.adaptor.ox_utils.calibrator"]], "neural_compressor.adaptor.ox_utils": [[17, "module-neural_compressor.adaptor.ox_utils"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[18, "module-neural_compressor.adaptor.ox_utils.operators.activation"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[19, "module-neural_compressor.adaptor.ox_utils.operators.argmax"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[20, "module-neural_compressor.adaptor.ox_utils.operators.attention"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[21, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[22, "module-neural_compressor.adaptor.ox_utils.operators.concat"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[23, "module-neural_compressor.adaptor.ox_utils.operators.conv"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[24, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[25, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[26, "module-neural_compressor.adaptor.ox_utils.operators.gather"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[27, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[28, "module-neural_compressor.adaptor.ox_utils.operators.gemm"]], "neural_compressor.adaptor.ox_utils.operators": [[29, "module-neural_compressor.adaptor.ox_utils.operators"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[30, "module-neural_compressor.adaptor.ox_utils.operators.lstm"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[31, "module-neural_compressor.adaptor.ox_utils.operators.matmul"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[32, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"]], "neural_compressor.adaptor.ox_utils.operators.norm": [[33, "module-neural_compressor.adaptor.ox_utils.operators.norm"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[34, "module-neural_compressor.adaptor.ox_utils.operators.ops"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[35, "module-neural_compressor.adaptor.ox_utils.operators.pad"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[36, "module-neural_compressor.adaptor.ox_utils.operators.pooling"]], "neural_compressor.adaptor.ox_utils.operators.reduce": [[37, "module-neural_compressor.adaptor.ox_utils.operators.reduce"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[38, "module-neural_compressor.adaptor.ox_utils.operators.resize"]], "neural_compressor.adaptor.ox_utils.operators.split": [[39, "module-neural_compressor.adaptor.ox_utils.operators.split"]], "neural_compressor.adaptor.ox_utils.operators.unary_op": [[40, "module-neural_compressor.adaptor.ox_utils.operators.unary_op"]], "neural_compressor.adaptor.ox_utils.quantizer": [[41, "module-neural_compressor.adaptor.ox_utils.quantizer"]], "neural_compressor.adaptor.ox_utils.smooth_quant": [[42, "module-neural_compressor.adaptor.ox_utils.smooth_quant"]], "neural_compressor.adaptor.ox_utils.util": [[43, "module-neural_compressor.adaptor.ox_utils.util"]], "neural_compressor.adaptor.pytorch": [[44, "module-neural_compressor.adaptor.pytorch"]], "neural_compressor.adaptor.query": [[45, "module-neural_compressor.adaptor.query"]], "neural_compressor.adaptor.tensorflow": [[46, "module-neural_compressor.adaptor.tensorflow"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[47, "module-neural_compressor.adaptor.tf_utils.graph_converter"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[48, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[49, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "neural_compressor.adaptor.tf_utils.graph_util": [[109, "module-neural_compressor.adaptor.tf_utils.graph_util"]], "neural_compressor.adaptor.tf_utils": [[110, "module-neural_compressor.adaptor.tf_utils"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[111, "module-neural_compressor.adaptor.tf_utils.quantize_graph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[112, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[135, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[137, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[138, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"]], "neural_compressor.adaptor.tf_utils.smooth_quant_calibration": [[139, "module-neural_compressor.adaptor.tf_utils.smooth_quant_calibration"]], "neural_compressor.adaptor.tf_utils.smooth_quant_scaler": [[140, "module-neural_compressor.adaptor.tf_utils.smooth_quant_scaler"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[141, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[142, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[143, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[144, "module-neural_compressor.adaptor.tf_utils.transform_graph"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[145, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[146, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"]], "neural_compressor.adaptor.tf_utils.util": [[147, "module-neural_compressor.adaptor.tf_utils.util"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[148, "module-neural_compressor.adaptor.torch_utils.bf16_convert"]], "neural_compressor.adaptor.torch_utils.gptq": [[149, "module-neural_compressor.adaptor.torch_utils.gptq"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[150, "module-neural_compressor.adaptor.torch_utils.hawq_metric"]], "neural_compressor.adaptor.torch_utils": [[151, "module-neural_compressor.adaptor.torch_utils"]], "neural_compressor.adaptor.torch_utils.mixed_precision": [[152, "module-neural_compressor.adaptor.torch_utils.mixed_precision"]], "neural_compressor.adaptor.torch_utils.model_wrapper": [[153, "module-neural_compressor.adaptor.torch_utils.model_wrapper"]], "neural_compressor.adaptor.torch_utils.pattern_detector": [[154, "module-neural_compressor.adaptor.torch_utils.pattern_detector"]], "neural_compressor.adaptor.torch_utils.smooth_quant": [[155, "module-neural_compressor.adaptor.torch_utils.smooth_quant"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[156, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"]], "neural_compressor.adaptor.torch_utils.teq": [[157, "module-neural_compressor.adaptor.torch_utils.teq"]], "neural_compressor.adaptor.torch_utils.util": [[158, "module-neural_compressor.adaptor.torch_utils.util"]], "}": [[158, "id3"]], "neural_compressor.adaptor.torch_utils.weight_only": [[159, "module-neural_compressor.adaptor.torch_utils.weight_only"]], "neural_compressor.algorithm.algorithm": [[160, "module-neural_compressor.algorithm.algorithm"]], "neural_compressor.algorithm.fast_bias_correction": [[161, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm": [[162, "module-neural_compressor.algorithm"]], "neural_compressor.algorithm.smooth_quant": [[163, "module-neural_compressor.algorithm.smooth_quant"]], "neural_compressor.algorithm.weight_correction": [[164, "module-neural_compressor.algorithm.weight_correction"]], "neural_compressor.benchmark": [[165, "module-neural_compressor.benchmark"]], "neural_compressor.compression.callbacks": [[166, "module-neural_compressor.compression.callbacks"]], "neural_compressor.compression.distillation.criterions": [[167, "module-neural_compressor.compression.distillation.criterions"]], "neural_compressor.compression.distillation": [[168, "module-neural_compressor.compression.distillation"]], "neural_compressor.compression": [[169, "module-neural_compressor.compression"]], "neural_compressor.compression.pruner.criteria": [[170, "module-neural_compressor.compression.pruner.criteria"]], "neural_compressor.compression.pruner": [[171, "module-neural_compressor.compression.pruner"]], "neural_compressor.compression.pruner.model_slim.auto_slim": [[172, "module-neural_compressor.compression.pruner.model_slim.auto_slim"]], "neural_compressor.compression.pruner.model_slim": [[173, "module-neural_compressor.compression.pruner.model_slim"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer": [[174, "module-neural_compressor.compression.pruner.model_slim.pattern_analyzer"]], "neural_compressor.compression.pruner.model_slim.weight_slim": [[175, "module-neural_compressor.compression.pruner.model_slim.weight_slim"]], "neural_compressor.compression.pruner.patterns.base": [[176, "module-neural_compressor.compression.pruner.patterns.base"]], "neural_compressor.compression.pruner.patterns": [[177, "module-neural_compressor.compression.pruner.patterns"]], "neural_compressor.compression.pruner.patterns.mha": [[178, "module-neural_compressor.compression.pruner.patterns.mha"]], "neural_compressor.compression.pruner.patterns.ninm": [[179, "module-neural_compressor.compression.pruner.patterns.ninm"]], "neural_compressor.compression.pruner.patterns.nxm": [[180, "module-neural_compressor.compression.pruner.patterns.nxm"]], "neural_compressor.compression.pruner.pruners.base": [[181, "module-neural_compressor.compression.pruner.pruners.base"]], "neural_compressor.compression.pruner.pruners.basic": [[182, "module-neural_compressor.compression.pruner.pruners.basic"]], "neural_compressor.compression.pruner.pruners.block_mask": [[183, "module-neural_compressor.compression.pruner.pruners.block_mask"]], "neural_compressor.compression.pruner.pruners": [[184, "module-neural_compressor.compression.pruner.pruners"]], "neural_compressor.compression.pruner.pruners.mha": [[185, "module-neural_compressor.compression.pruner.pruners.mha"]], "neural_compressor.compression.pruner.pruners.pattern_lock": [[186, "module-neural_compressor.compression.pruner.pruners.pattern_lock"]], "neural_compressor.compression.pruner.pruners.progressive": [[187, "module-neural_compressor.compression.pruner.pruners.progressive"]], "neural_compressor.compression.pruner.pruners.retrain_free": [[188, "module-neural_compressor.compression.pruner.pruners.retrain_free"]], "neural_compressor.compression.pruner.regs": [[189, "module-neural_compressor.compression.pruner.regs"]], "neural_compressor.compression.pruner.schedulers": [[190, "module-neural_compressor.compression.pruner.schedulers"]], "neural_compressor.compression.pruner.tf_criteria": [[191, "module-neural_compressor.compression.pruner.tf_criteria"]], "neural_compressor.compression.pruner.utils": [[192, "module-neural_compressor.compression.pruner.utils"]], "neural_compressor.conf.config": [[193, "module-neural_compressor.conf.config"]], "neural_compressor.conf.dotdict": [[194, "module-neural_compressor.conf.dotdict"]], "neural_compressor.conf": [[195, "module-neural_compressor.conf"]], "neural_compressor.conf.pythonic_config": [[196, "module-neural_compressor.conf.pythonic_config"]], "neural_compressor.config": [[197, "module-neural_compressor.config"]], "neural_compressor.contrib": [[198, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[199, "module-neural_compressor.contrib.strategy"]], "neural_compressor.contrib.strategy.sigopt": [[200, "module-neural_compressor.contrib.strategy.sigopt"]], "neural_compressor.contrib.strategy.tpe": [[201, "module-neural_compressor.contrib.strategy.tpe"]], "neural_compressor.data.dataloaders.base_dataloader": [[202, "module-neural_compressor.data.dataloaders.base_dataloader"]], "neural_compressor.data.dataloaders.dataloader": [[203, "module-neural_compressor.data.dataloaders.dataloader"]], "neural_compressor.data.dataloaders.default_dataloader": [[204, "module-neural_compressor.data.dataloaders.default_dataloader"]], "neural_compressor.data.dataloaders.fetcher": [[205, "module-neural_compressor.data.dataloaders.fetcher"]], "neural_compressor.data.dataloaders": [[206, "module-neural_compressor.data.dataloaders"]], "Attributes": [[206, "attributes"], [214, "attributes"], [223, "attributes"], [258, "attributes"], [267, "attributes"], [278, "attributes"], [302, "attributes"], [342, "attributes"], [392, "attributes"], [398, "attributes"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[207, "module-neural_compressor.data.dataloaders.mxnet_dataloader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[208, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[209, "module-neural_compressor.data.dataloaders.pytorch_dataloader"]], "neural_compressor.data.dataloaders.sampler": [[210, "module-neural_compressor.data.dataloaders.sampler"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[211, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"]], "neural_compressor.data.datasets.bert_dataset": [[212, "module-neural_compressor.data.datasets.bert_dataset"]], "neural_compressor.data.datasets.coco_dataset": [[213, "module-neural_compressor.data.datasets.coco_dataset"]], "neural_compressor.data.datasets.dataset": [[214, "module-neural_compressor.data.datasets.dataset"]], "neural_compressor.data.datasets.dummy_dataset": [[215, "module-neural_compressor.data.datasets.dummy_dataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[216, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "neural_compressor.data.datasets.imagenet_dataset": [[217, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[218, "module-neural_compressor.data.datasets"]], "neural_compressor.data.datasets.style_transfer_dataset": [[219, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "neural_compressor.data.filters.coco_filter": [[220, "module-neural_compressor.data.filters.coco_filter"]], "neural_compressor.data.filters.filter": [[221, "module-neural_compressor.data.filters.filter"]], "neural_compressor.data.filters": [[222, "module-neural_compressor.data.filters"]], "neural_compressor.data": [[223, "module-neural_compressor.data"]], "neural_compressor.data.transforms.coco_transform": [[224, "module-neural_compressor.data.transforms.coco_transform"]], "neural_compressor.data.transforms.imagenet_transform": [[225, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[226, "module-neural_compressor.data.transforms"]], "neural_compressor.data.transforms.postprocess": [[227, "module-neural_compressor.data.transforms.postprocess"]], "neural_compressor.data.transforms.tokenization": [[228, "module-neural_compressor.data.transforms.tokenization"]], "neural_compressor.data.transforms.transform": [[229, "module-neural_compressor.data.transforms.transform"]], "neural_compressor.experimental.benchmark": [[230, "module-neural_compressor.experimental.benchmark"]], "neural_compressor.experimental.common.criterion": [[231, "module-neural_compressor.experimental.common.criterion"]], "neural_compressor.experimental.common.dataloader": [[232, "module-neural_compressor.experimental.common.dataloader"]], "neural_compressor.experimental.common": [[233, "module-neural_compressor.experimental.common"]], "neural_compressor.experimental.common.metric": [[234, "module-neural_compressor.experimental.common.metric"]], "neural_compressor.experimental.common.model": [[235, "module-neural_compressor.experimental.common.model"]], "neural_compressor.experimental.common.optimizer": [[236, "module-neural_compressor.experimental.common.optimizer"]], "neural_compressor.experimental.common.postprocess": [[237, "module-neural_compressor.experimental.common.postprocess"]], "neural_compressor.experimental.common.torch_utils": [[238, "module-neural_compressor.experimental.common.torch_utils"]], "neural_compressor.experimental.component": [[239, "module-neural_compressor.experimental.component"]], "neural_compressor.experimental.compression": [[240, "module-neural_compressor.experimental.compression"]], "neural_compressor.experimental.compression.pruning": [[241, "module-neural_compressor.experimental.compression.pruning"]], "neural_compressor.experimental.contrib": [[242, "module-neural_compressor.experimental.contrib"]], "neural_compressor.experimental.contrib.strategy": [[243, "module-neural_compressor.experimental.contrib.strategy"]], "neural_compressor.experimental.contrib.strategy.sigopt": [[244, "module-neural_compressor.experimental.contrib.strategy.sigopt"]], "neural_compressor.experimental.contrib.strategy.tpe": [[245, "module-neural_compressor.experimental.contrib.strategy.tpe"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[246, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[247, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[248, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[249, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[250, "module-neural_compressor.experimental.data.dataloaders"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[251, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[252, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[253, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[254, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[255, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[256, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[257, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "neural_compressor.experimental.data.datasets.dataset": [[258, "module-neural_compressor.experimental.data.datasets.dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[259, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[260, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[261, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "neural_compressor.experimental.data.datasets": [[262, "module-neural_compressor.experimental.data.datasets"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[263, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "neural_compressor.experimental.data.filters.coco_filter": [[264, "module-neural_compressor.experimental.data.filters.coco_filter"]], "neural_compressor.experimental.data.filters.filter": [[265, "module-neural_compressor.experimental.data.filters.filter"]], "neural_compressor.experimental.data.filters": [[266, "module-neural_compressor.experimental.data.filters"]], "neural_compressor.experimental.data": [[267, "module-neural_compressor.experimental.data"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[268, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "neural_compressor.experimental.data.transforms": [[269, "module-neural_compressor.experimental.data.transforms"]], "neural_compressor.experimental.data.transforms.tokenization": [[270, "module-neural_compressor.experimental.data.transforms.tokenization"]], "neural_compressor.experimental.data.transforms.transform": [[271, "module-neural_compressor.experimental.data.transforms.transform"]], "neural_compressor.experimental.distillation": [[272, "module-neural_compressor.experimental.distillation"]], "neural_compressor.experimental.export": [[273, "module-neural_compressor.experimental.export"]], "neural_compressor.experimental.export.qlinear2qdq": [[274, "module-neural_compressor.experimental.export.qlinear2qdq"]], "neural_compressor.experimental.export.tf2onnx": [[275, "module-neural_compressor.experimental.export.tf2onnx"]], "neural_compressor.experimental.export.torch2onnx": [[276, "module-neural_compressor.experimental.export.torch2onnx"]], "neural_compressor.experimental.graph_optimization": [[277, "module-neural_compressor.experimental.graph_optimization"]], "neural_compressor.experimental": [[278, "module-neural_compressor.experimental"]], "neural_compressor.experimental.metric.bleu": [[279, "module-neural_compressor.experimental.metric.bleu"]], "neural_compressor.experimental.metric.bleu_util": [[280, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[281, "module-neural_compressor.experimental.metric.coco_label_map"]], "neural_compressor.experimental.metric.coco_tools": [[282, "module-neural_compressor.experimental.metric.coco_tools"]], "neural_compressor.experimental.metric.evaluate_squad": [[283, "module-neural_compressor.experimental.metric.evaluate_squad"]], "neural_compressor.experimental.metric.f1": [[284, "module-neural_compressor.experimental.metric.f1"]], "neural_compressor.experimental.metric": [[285, "module-neural_compressor.experimental.metric"]], "neural_compressor.experimental.metric.metric": [[286, "module-neural_compressor.experimental.metric.metric"]], "neural_compressor.experimental.mixed_precision": [[287, "module-neural_compressor.experimental.mixed_precision"]], "neural_compressor.experimental.model_conversion": [[288, "module-neural_compressor.experimental.model_conversion"]], "neural_compressor.experimental.nas.basic_nas": [[289, "module-neural_compressor.experimental.nas.basic_nas"]], "neural_compressor.experimental.nas.dynas": [[290, "module-neural_compressor.experimental.nas.dynas"]], "neural_compressor.experimental.nas": [[291, "module-neural_compressor.experimental.nas"]], "neural_compressor.experimental.nas.nas": [[292, "module-neural_compressor.experimental.nas.nas"]], "neural_compressor.experimental.nas.nas_utils": [[293, "module-neural_compressor.experimental.nas.nas_utils"]], "neural_compressor.experimental.nas.search_algorithms": [[294, "module-neural_compressor.experimental.nas.search_algorithms"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[295, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[296, "module-neural_compressor.experimental.pruner_legacy.group_lasso"]], "neural_compressor.experimental.pruner_legacy": [[297, "module-neural_compressor.experimental.pruner_legacy"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[298, "module-neural_compressor.experimental.pruner_legacy.magnitude"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[299, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"]], "neural_compressor.experimental.pruner_legacy.pruner": [[300, "module-neural_compressor.experimental.pruner_legacy.pruner"]], "neural_compressor.experimental.pruning": [[301, "module-neural_compressor.experimental.pruning"]], "neural_compressor.experimental.pruning_recipes": [[302, "module-neural_compressor.experimental.pruning_recipes"]], "neural_compressor.experimental.pruning_recipes.patterns": [[303, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[304, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[305, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "neural_compressor.experimental.pruning_v2": [[306, "module-neural_compressor.experimental.pruning_v2"]], "neural_compressor.experimental.pytorch_pruner": [[307, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[308, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[309, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[310, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[311, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[312, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[313, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "neural_compressor.experimental.quantization": [[314, "module-neural_compressor.experimental.quantization"]], "neural_compressor.experimental.scheduler": [[315, "module-neural_compressor.experimental.scheduler"]], "neural_compressor.experimental.strategy.auto_mixed_precision": [[316, "module-neural_compressor.experimental.strategy.auto_mixed_precision"]], "neural_compressor.experimental.strategy.basic": [[317, "module-neural_compressor.experimental.strategy.basic"]], "neural_compressor.experimental.strategy.bayesian": [[318, "module-neural_compressor.experimental.strategy.bayesian"]], "neural_compressor.experimental.strategy.exhaustive": [[319, "module-neural_compressor.experimental.strategy.exhaustive"]], "neural_compressor.experimental.strategy": [[320, "module-neural_compressor.experimental.strategy"]], "neural_compressor.experimental.strategy.mse": [[321, "module-neural_compressor.experimental.strategy.mse"]], "neural_compressor.experimental.strategy.mse_v2": [[322, "module-neural_compressor.experimental.strategy.mse_v2"]], "neural_compressor.experimental.strategy.random": [[323, "module-neural_compressor.experimental.strategy.random"]], "neural_compressor.experimental.strategy.strategy": [[324, "module-neural_compressor.experimental.strategy.strategy"]], "neural_compressor.experimental.strategy.utils.constant": [[325, "module-neural_compressor.experimental.strategy.utils.constant"]], "neural_compressor.experimental.strategy.utils": [[326, "module-neural_compressor.experimental.strategy.utils"]], "neural_compressor.experimental.strategy.utils.tuning_sampler": [[327, "module-neural_compressor.experimental.strategy.utils.tuning_sampler"]], "neural_compressor.experimental.strategy.utils.tuning_space": [[328, "module-neural_compressor.experimental.strategy.utils.tuning_space"]], "neural_compressor.experimental.strategy.utils.tuning_structs": [[329, "module-neural_compressor.experimental.strategy.utils.tuning_structs"]], "neural_compressor.experimental.strategy.utils.utility": [[330, "module-neural_compressor.experimental.strategy.utils.utility"]], "neural_compressor": [[331, "module-neural_compressor"]], "neural_compressor.metric.bleu": [[332, "module-neural_compressor.metric.bleu"]], "neural_compressor.metric.bleu_util": [[333, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[334, "module-neural_compressor.metric.coco_label_map"]], "neural_compressor.metric.coco_tools": [[335, "module-neural_compressor.metric.coco_tools"]], "neural_compressor.metric.evaluate_squad": [[336, "module-neural_compressor.metric.evaluate_squad"]], "neural_compressor.metric.f1": [[337, "module-neural_compressor.metric.f1"]], "neural_compressor.metric": [[338, "module-neural_compressor.metric"]], "neural_compressor.metric.metric": [[339, "module-neural_compressor.metric.metric"]], "neural_compressor.mix_precision": [[340, "module-neural_compressor.mix_precision"]], "neural_compressor.model.base_model": [[341, "module-neural_compressor.model.base_model"]], "neural_compressor.model": [[342, "module-neural_compressor.model"]], "neural_compressor.model.keras_model": [[343, "module-neural_compressor.model.keras_model"]], "neural_compressor.model.model": [[344, "module-neural_compressor.model.model"]], "neural_compressor.model.mxnet_model": [[345, "module-neural_compressor.model.mxnet_model"]], "neural_compressor.model.nets_factory": [[346, "module-neural_compressor.model.nets_factory"]], "neural_compressor.model.onnx_model": [[347, "module-neural_compressor.model.onnx_model"]], "neural_compressor.model.tensorflow_model": [[348, "module-neural_compressor.model.tensorflow_model"]], "neural_compressor.model.torch_model": [[349, "module-neural_compressor.model.torch_model"]], "neural_compressor.objective": [[350, "module-neural_compressor.objective"]], "neural_compressor.profiling": [[351, "module-neural_compressor.profiling"]], "neural_compressor.profiling.parser.factory": [[352, "module-neural_compressor.profiling.parser.factory"]], "neural_compressor.profiling.parser": [[353, "module-neural_compressor.profiling.parser"]], "neural_compressor.profiling.parser.onnx_parser.factory": [[354, "module-neural_compressor.profiling.parser.onnx_parser.factory"]], "neural_compressor.profiling.parser.onnx_parser": [[355, "module-neural_compressor.profiling.parser.onnx_parser"]], "neural_compressor.profiling.parser.onnx_parser.parser": [[356, "module-neural_compressor.profiling.parser.onnx_parser.parser"]], "neural_compressor.profiling.parser.parser": [[357, "module-neural_compressor.profiling.parser.parser"]], "neural_compressor.profiling.parser.result": [[358, "module-neural_compressor.profiling.parser.result"]], "neural_compressor.profiling.parser.tensorflow_parser.factory": [[359, "module-neural_compressor.profiling.parser.tensorflow_parser.factory"]], "neural_compressor.profiling.parser.tensorflow_parser": [[360, "module-neural_compressor.profiling.parser.tensorflow_parser"]], "neural_compressor.profiling.parser.tensorflow_parser.parser": [[361, "module-neural_compressor.profiling.parser.tensorflow_parser.parser"]], "neural_compressor.profiling.profiler.factory": [[362, "module-neural_compressor.profiling.profiler.factory"]], "neural_compressor.profiling.profiler": [[363, "module-neural_compressor.profiling.profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.factory": [[364, "module-neural_compressor.profiling.profiler.onnxrt_profiler.factory"]], "neural_compressor.profiling.profiler.onnxrt_profiler": [[365, "module-neural_compressor.profiling.profiler.onnxrt_profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.profiler": [[366, "module-neural_compressor.profiling.profiler.onnxrt_profiler.profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.utils": [[367, "module-neural_compressor.profiling.profiler.onnxrt_profiler.utils"]], "neural_compressor.profiling.profiler.profiler": [[368, "module-neural_compressor.profiling.profiler.profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.factory": [[369, "module-neural_compressor.profiling.profiler.tensorflow_profiler.factory"]], "neural_compressor.profiling.profiler.tensorflow_profiler": [[370, "module-neural_compressor.profiling.profiler.tensorflow_profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.profiler": [[371, "module-neural_compressor.profiling.profiler.tensorflow_profiler.profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.utils": [[372, "module-neural_compressor.profiling.profiler.tensorflow_profiler.utils"]], "neural_compressor.quantization": [[373, "module-neural_compressor.quantization"]], "neural_compressor.strategy.auto": [[374, "module-neural_compressor.strategy.auto"]], "neural_compressor.strategy.auto_mixed_precision": [[375, "module-neural_compressor.strategy.auto_mixed_precision"]], "neural_compressor.strategy.basic": [[376, "module-neural_compressor.strategy.basic"]], "neural_compressor.strategy.bayesian": [[377, "module-neural_compressor.strategy.bayesian"]], "neural_compressor.strategy.conservative": [[378, "module-neural_compressor.strategy.conservative"]], "neural_compressor.strategy.exhaustive": [[379, "module-neural_compressor.strategy.exhaustive"]], "neural_compressor.strategy.hawq_v2": [[380, "module-neural_compressor.strategy.hawq_v2"]], "neural_compressor.strategy": [[381, "module-neural_compressor.strategy"]], "neural_compressor.strategy.mse": [[382, "module-neural_compressor.strategy.mse"]], "neural_compressor.strategy.mse_v2": [[383, "module-neural_compressor.strategy.mse_v2"]], "neural_compressor.strategy.random": [[384, "module-neural_compressor.strategy.random"]], "neural_compressor.strategy.strategy": [[385, "module-neural_compressor.strategy.strategy"]], "neural_compressor.strategy.utils.constant": [[386, "module-neural_compressor.strategy.utils.constant"]], "neural_compressor.strategy.utils": [[387, "module-neural_compressor.strategy.utils"]], "neural_compressor.strategy.utils.tuning_sampler": [[388, "module-neural_compressor.strategy.utils.tuning_sampler"]], "neural_compressor.strategy.utils.tuning_space": [[389, "module-neural_compressor.strategy.utils.tuning_space"]], "neural_compressor.strategy.utils.tuning_structs": [[390, "module-neural_compressor.strategy.utils.tuning_structs"]], "neural_compressor.strategy.utils.utility": [[391, "module-neural_compressor.strategy.utils.utility"]], "neural_compressor.template.api_doc_example": [[392, "module-neural_compressor.template.api_doc_example"]], "neural_compressor.template": [[393, "module-neural_compressor.template"]], "neural_compressor.training": [[394, "module-neural_compressor.training"]], "neural_compressor.utils.collect_layer_histogram": [[395, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[396, "module-neural_compressor.utils.constant"]], "neural_compressor.utils.create_obj_from_config": [[397, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils": [[398, "module-neural_compressor.utils"]], "neural_compressor.utils.kl_divergence": [[399, "module-neural_compressor.utils.kl_divergence"]], "neural_compressor.utils.load_huggingface": [[400, "module-neural_compressor.utils.load_huggingface"]], "neural_compressor.utils.logger": [[401, "module-neural_compressor.utils.logger"]], "neural_compressor.utils.neural_insights_utils": [[402, "module-neural_compressor.utils.neural_insights_utils"]], "neural_compressor.utils.options": [[403, "module-neural_compressor.utils.options"]], "neural_compressor.utils.pytorch": [[404, "module-neural_compressor.utils.pytorch"]], "neural_compressor.utils.utility": [[405, "module-neural_compressor.utils.utility"]], "neural_compressor.utils.weights_details": [[406, "module-neural_compressor.utils.weights_details"]], "neural_compressor.version": [[407, "module-neural_compressor.version"]], "Intel\u00ae Neural Compressor Documentation": [[408, "intel-neural-compressor-documentation"], [490, "intel-neural-compressor-documentation"]], "Sections": [[408, "sections"], [490, "sections"]], "Contributor Covenant Code of Conduct": [[409, "contributor-covenant-code-of-conduct"], [410, "contributor-covenant-code-of-conduct"]], "Our Pledge": [[409, "our-pledge"]], "Our Standards": [[409, "our-standards"]], "Our Responsibilities": [[409, "our-responsibilities"]], "Scope": [[409, "scope"]], "Enforcement": [[409, "enforcement"]], "Attribution": [[409, "attribution"]], "Contribution Guidelines": [[410, "contribution-guidelines"]], "Pull Request Checklist": [[410, "pull-request-checklist"]], "Pull Request Template": [[410, "pull-request-template"]], "Support": [[410, "support"]], "FX": [[411, "fx"]], "Introduction": [[411, "introduction"], [412, "introduction"], [415, "introduction"], [416, "introduction"], [417, "introduction"], [432, "introduction"], [433, "introduction"], [434, "introduction"], [435, "introduction"], [438, "introduction"], [439, "introduction"], [440, "introduction"], [442, "introduction"], [444, "introduction"], [447, "introduction"], [450, "introduction"], [452, "introduction"], [453, "introduction"], [473, "introduction"], [474, "introduction"], [475, "introduction"], [477, "introduction"], [480, "introduction"], [482, "introduction"], [483, "introduction"], [484, "introduction"], [485, "introduction"], [486, "introduction"], [488, "introduction"]], "FX Mode Support Matrix in Neural Compressor": [[411, "fx-mode-support-matrix-in-neural-compressor"]], "Get Started": [[411, "get-started"], [478, "get-started"]], "Post Training Static Quantization": [[411, "post-training-static-quantization"], [478, "post-training-static-quantization"]], "Post Training Dynamic Quantization": [[411, "post-training-dynamic-quantization"], [478, "post-training-dynamic-quantization"]], "Quantization-Aware Training": [[411, "quantization-aware-training"]], "Examples": [[411, "examples"], [412, "examples"], [432, "examples"], [434, "examples"], [435, "examples"], [438, "examples"], [439, "examples"], [440, "examples"], [441, "examples"], [442, "examples"], [451, "examples"], [452, "examples"], [453, "examples"], [474, "examples"], [475, "examples"], [478, "examples"], [480, "examples"], [484, "examples"]], "Note": [[411, "note"]], "Details": [[411, "details"]], "Common Problem": [[411, "common-problem"]], "Dynamic Quantization": [[411, "dynamic-quantization"]], "Static Quantization & Quantization Aware Training": [[411, "static-quantization-quantization-aware-training"]], "Neural Architecture Search": [[412, "neural-architecture-search"]], "Basic NAS": [[412, "basic-nas"]], "Dynamic NAS": [[412, "dynamic-nas"]], "NAS Support Matrix": [[412, "nas-support-matrix"]], "Get Started with NAS API": [[412, "get-started-with-nas-api"]], "Basic Usage": [[412, "basic-usage"]], "1. Python code + YAML": [[412, "python-code-yaml"]], "2. Python code only": [[412, "python-code-only"]], "Advanced Usage (Custom NAS)": [[412, "advanced-usage-custom-nas"]], "Security Policy": [[413, "security-policy"]], "Report a Vulnerability": [[413, "report-a-vulnerability"]], "Intel\u00ae Neural Compressor": [[414, "intel-neural-compressor"], [471, "intel-neural-compressor"]], "Installation": [[414, "installation"], [448, "installation"], [465, "installation"]], "Install from pypi": [[414, "install-from-pypi"]], "Getting Started": [[414, "getting-started"], [445, "getting-started"]], "Quantization with Python API": [[414, "quantization-with-python-api"], [445, "quantization-with-python-api"]], "Documentation": [[414, "documentation"]], "Selected Publications/Events": [[414, "selected-publications-events"]], "Additional Content": [[414, "additional-content"]], "Research Collaborations": [[414, "research-collaborations"]], "Adaptor": [[415, "adaptor"], [418, "adaptor"]], "Adaptor Support Matrix": [[415, "adaptor-support-matrix"]], "Working Flow": [[415, "working-flow"], [478, "working-flow"]], "Get Started with Adaptor API": [[415, "get-started-with-adaptor-api"]], "Query API": [[415, "query-api"]], "Background": [[415, "background"]], "Query API Introduction": [[415, "query-api-introduction"]], "Example of Adding a New Backend Support": [[415, "example-of-adding-a-new-backend-support"]], "Capability": [[415, "capability"]], "Implement ONNXRTAdaptor Class": [[415, "implement-onnxrtadaptor-class"]], "How to Add An Adaptor": [[416, "how-to-add-an-adaptor"]], "API List that Need to Implement": [[416, "api-list-that-need-to-implement"]], "Design the framework YAML": [[416, "design-the-framework-yaml"]], "Add query_fw_capability to Adaptor": [[416, "add-query-fw-capability-to-adaptor"]], "Add quantize API according to tune_cfg": [[416, "add-quantize-api-according-to-tune-cfg"]], "Prepare calibration model from fp32 graph": [[416, "prepare-calibration-model-from-fp32-graph"]], "Run sampling iterations of the fp32 graph to calibrate quantizable operators.": [[416, "run-sampling-iterations-of-the-fp32-graph-to-calibrate-quantizable-operators"]], "Calculate the data range and generate quantized model": [[416, "calculate-the-data-range-and-generate-quantized-model"]], "How to Support New Data Type, Like Int4, with a Few Line Changes": [[417, "how-to-support-new-data-type-like-int4-with-a-few-line-changes"]], "Define the Quantization Ability of the Specific Operator": [[417, "define-the-quantization-ability-of-the-specific-operator"]], "Invoke the Operator Kernel According to the Tuning Configuration": [[417, "invoke-the-operator-kernel-according-to-the-tuning-configuration"]], "Use the New Data Type": [[417, "use-the-new-data-type"]], "Summary": [[417, "summary"]], "ONNX Runtime": [[419, "onnx-runtime"]], "Torch Utils": [[420, "torch-utils"]], "API Document Example": [[421, "api-document-example"]], "APIs": [[422, "apis"]], "Benchmark": [[423, "benchmark"], [451, "benchmark"], [477, "benchmark"]], "Compression": [[424, "compression"]], "Config": [[425, "config"]], "Mix Precision": [[426, "mix-precision"], [451, "mix-precision"]], "Model": [[427, "model"], [453, "model"]], "Objective": [[428, "objective"], [473, "objective"]], "Quantization": [[429, "quantization"], [477, "quantization"], [478, "quantization"]], "Strategy": [[430, "strategy"]], "Training": [[431, "training"]], "Benchmarking": [[432, "benchmarking"]], "Benchmark Support Matrix": [[432, "benchmark-support-matrix"]], "Get Started with Benchmark API": [[432, "get-started-with-benchmark-api"]], "Calibration Algorithms in Quantization": [[433, "calibration-algorithms-in-quantization"]], "Calibration Algorithms": [[433, "calibration-algorithms"]], "Support Matrix": [[433, "support-matrix"], [456, "support-matrix"]], "Reference": [[433, "reference"], [475, "reference"], [478, "reference"], [480, "reference"], [483, "reference"]], "DataLoader": [[434, "dataloader"]], "Supported Framework Dataloader Matrix": [[434, "supported-framework-dataloader-matrix"]], "Get Started with DataLoader": [[434, "get-started-with-dataloader"]], "Use Intel\u00ae Neural Compressor DataLoader API": [[434, "use-intel-neural-compressor-dataloader-api"]], "Build Custom Dataloader with Python API": [[434, "build-custom-dataloader-with-python-api"]], "Dataset": [[435, "dataset"]], "Supported Framework Dataset Matrix": [[435, "supported-framework-dataset-matrix"]], "TensorFlow": [[435, "tensorflow"], [450, "tensorflow"], [485, "tensorflow"]], "PyTorch": [[435, "pytorch"], [450, "pytorch"], [479, "pytorch"]], "MXNet": [[435, "mxnet"], [450, "mxnet"], [485, "mxnet"]], "ONNXRT": [[435, "onnxrt"], [450, "onnxrt"], [485, "onnxrt"]], "Get start with Dataset API": [[435, "get-start-with-dataset-api"]], "Config dataloader in a yaml file": [[435, "config-dataloader-in-a-yaml-file"]], "User-specific dataset": [[435, "user-specific-dataset"]], "Design": [[436, "design"], [486, "design"], [486, "id1"], [486, "id3"], [486, "id5"], [486, "id7"], [486, "id9"], [486, "id11"], [486, "id13"], [486, "id15"], [486, "id17"], [486, "id19"], [486, "id21"]], "Architecture": [[436, "architecture"], [447, "architecture"]], "Workflow": [[436, "workflow"]], "Diagnosis": [[437, "diagnosis"]], "Diagnosis introduction": [[437, "diagnosis-introduction"]], "Supported feature matrix": [[437, "supported-feature-matrix"]], "Get started": [[437, "get-started"]], "Install Intel\u00ae Neural Compressor": [[437, "install-intel-neural-compressor"]], "Modify script": [[437, "modify-script"]], "Quantization diagnosis": [[437, "quantization-diagnosis"]], "Benchmark diagnosis": [[437, "benchmark-diagnosis"]], "Example": [[437, "example"], [450, "example"], [456, "example"], [460, "example"], [473, "example"], [483, "example"]], "Prepare dataset": [[437, "prepare-dataset"]], "Run quantization script": [[437, "run-quantization-script"]], "Run benchmark script": [[437, "run-benchmark-script"]], "See quantization data": [[437, "see-quantization-data"]], "How to do diagnosis": [[437, "how-to-do-diagnosis"]], "Parameter description": [[437, "parameter-description"]], "Diagnosis suggestions": [[437, "diagnosis-suggestions"]], "Fallback setting example": [[437, "fallback-setting-example"]], "See profiling data": [[437, "see-profiling-data"]], "Distillation": [[438, "distillation"], [451, "distillation"], [477, "distillation"]], "Knowledge Distillation": [[438, "knowledge-distillation"]], "Intermediate Layer Knowledge Distillation": [[438, "intermediate-layer-knowledge-distillation"]], "Self Distillation": [[438, "self-distillation"]], "Distillation Support Matrix": [[438, "distillation-support-matrix"]], "Get Started with Distillation API": [[438, "get-started-with-distillation-api"]], "Distillation for Quantization": [[439, "distillation-for-quantization"]], "Distillation for Quantization Support Matrix": [[439, "distillation-for-quantization-support-matrix"]], "Get Started with Distillation for Quantization API": [[439, "get-started-with-distillation-for-quantization-api"]], "Distributed Training and Inference (Evaluation)": [[440, "distributed-training-and-inference-evaluation"]], "Supported Feature Matrix": [[440, "supported-feature-matrix"], [444, "supported-feature-matrix"], [447, "supported-feature-matrix"], [477, "supported-feature-matrix"], [478, "supported-feature-matrix"], [484, "supported-feature-matrix"], [488, "supported-feature-matrix"]], "Get Started with Distributed Training and Inference API": [[440, "get-started-with-distributed-training-and-inference-api"]], "Option 1: Pure Yaml Configuration": [[440, "option-1-pure-yaml-configuration"]], "Option 2: User Defined Training Function": [[440, "option-2-user-defined-training-function"]], "Horovodrun Execution": [[440, "horovodrun-execution"]], "Security": [[440, "security"]], "PyTorch Examples:": [[440, "pytorch-examples"]], "TensorFlow Examples:": [[440, "tensorflow-examples"]], "Example List": [[441, "example-list"]], "Release Data": [[441, "release-data"]], "Export": [[442, "export"]], "Supported Framework Model Matrix": [[442, "supported-framework-model-matrix"], [453, "supported-framework-model-matrix"], [480, "supported-framework-model-matrix"]], "PyTorch Model": [[442, "pytorch-model"]], "FP32 Model Export": [[442, "fp32-model-export"], [442, "id1"]], "INT8 Model Export": [[442, "int8-model-export"], [442, "id2"]], "Tensorflow Model": [[442, "tensorflow-model"]], "Appendix": [[442, "appendix"]], "Supported quantized ops": [[442, "supported-quantized-ops"]], "Frequently Asked Questions": [[443, "frequently-asked-questions"]], "Common Build Issues": [[443, "common-build-issues"]], "Issue 1:": [[443, "issue-1"]], "Issue 2:": [[443, "issue-2"]], "Issue 3:": [[443, "issue-3"]], "Issue 4:": [[443, "issue-4"]], "Framework YAML Configuration Files": [[444, "framework-yaml-configuration-files"]], "Get started with Framework YAML Files": [[444, "get-started-with-framework-yaml-files"]], "Quick Samples": [[445, "quick-samples"]], "Validated Models": [[445, "validated-models"], [483, "validated-models"], [489, "validated-models"]], "Incompatible changes between v1.2 and v1.1": [[446, "incompatible-changes-between-v1-2-and-v1-1"]], "User-facing APIs": [[446, "user-facing-apis"]], "Built-in transform/dataset/metric APIs": [[446, "built-in-transform-dataset-metric-apis"]], "Infrastructure of Intel\u00ae Neural Compressor": [[447, "infrastructure-of-intel-neural-compressor"]], "Linux Installation": [[448, "linux-installation"]], "Prerequisites": [[448, "prerequisites"], [448, "id1"]], "Install from Binary": [[448, "install-from-binary"], [448, "id2"]], "Install from Source": [[448, "install-from-source"], [448, "id3"]], "Install from AI Kit": [[448, "install-from-ai-kit"]], "Windows Installation": [[448, "windows-installation"]], "System Requirements": [[448, "system-requirements"]], "Validated Hardware Environment": [[448, "validated-hardware-environment"]], "Intel\u00ae Neural Compressor supports CPUs based on Intel 64 architecture or compatible processors:": [[448, "intel-neural-compressor-supports-cpus-based-on-intel-64-architecture-or-compatible-processors"]], "Intel\u00ae Neural Compressor supports GPUs built on Intel\u2019s Xe architecture:": [[448, "intel-neural-compressor-supports-gpus-built-on-intel-s-xe-architecture"]], "Intel\u00ae Neural Compressor quantized ONNX models support multiple hardware vendors through ONNX Runtime:": [[448, "intel-neural-compressor-quantized-onnx-models-support-multiple-hardware-vendors-through-onnx-runtime"]], "Validated Software Environment": [[448, "validated-software-environment"]], "Legal Information": [[449, "legal-information"]], "License": [[449, "license"]], "Citation": [[449, "citation"]], "Trademarks": [[449, "trademarks"]], "Metrics": [[450, "metrics"]], "Supported Built-in Metric Matrix": [[450, "supported-built-in-metric-matrix"]], "Get Started with Metric": [[450, "get-started-with-metric"]], "Use Intel\u00ae Neural Compressor Metric API": [[450, "use-intel-neural-compressor-metric-api"]], "Build Custom Metric with Python API": [[450, "build-custom-metric-with-python-api"]], "Code Migration from Intel Neural Compressor 1.X to Intel Neural Compressor 2.X": [[451, "code-migration-from-intel-neural-compressor-1-x-to-intel-neural-compressor-2-x"]], "Model Quantization": [[451, "model-quantization"]], "Post-training Quantization": [[451, "post-training-quantization"]], "Quantization Aware Training": [[451, "quantization-aware-training"], [478, "quantization-aware-training"], [478, "id1"]], "Pruning": [[451, "pruning"], [475, "pruning"], [477, "pruning"]], "Orchestration": [[451, "orchestration"]], "Mixed Precision": [[452, "mixed-precision"]], "Mixed Precision Support Matrix": [[452, "mixed-precision-support-matrix"]], "Hardware and Software requests for BF16": [[452, "hardware-and-software-requests-for-bf16"]], "Hardware and Software requests for FP16": [[452, "hardware-and-software-requests-for-fp16"]], "During quantization mixed precision": [[452, "during-quantization-mixed-precision"]], "Accuracy-driven mixed precision": [[452, "accuracy-driven-mixed-precision"]], "Get Started with Mixed Precision API": [[452, "get-started-with-mixed-precision-api"]], "Neural Coder": [[454, "neural-coder"], [471, "neural-coder"], [471, "id1"]], "What do we offer?": [[454, "what-do-we-offer"]], "Getting Started!": [[454, "getting-started"], [465, "getting-started"]], "Jupyter Lab Extension": [[454, "jupyter-lab-extension"]], "Python Launcher": [[454, "python-launcher"], [459, "python-launcher"]], "Python API": [[454, "python-api"]], "Contact": [[454, "contact"]], "AWS Amazon SageMaker Support": [[455, "aws-amazon-sagemaker-support"]], "Start Jupyter Lab 3": [[455, "start-jupyter-lab-3"]], "For SageMaker Studio": [[455, "for-sagemaker-studio"]], "For SageMaker Notebook instance": [[455, "for-sagemaker-notebook-instance"]], "Installation Guide": [[455, "installation-guide"]], "BigDL Nano Support": [[456, "bigdl-nano-support"]], "Intel CPU Platforms: Best Performance Setting": [[457, "intel-cpu-platforms-best-performance-setting"]], "Install MKL, OpenMP and JEMALLOC": [[457, "install-mkl-openmp-and-jemalloc"]], "Install NUMA Controller": [[457, "install-numa-controller"]], "Environment Variables": [[457, "environment-variables"]], "Frequency Governers": [[457, "frequency-governers"]], "Neural Coder as Python API": [[458, "neural-coder-as-python-api"]], "Enable": [[458, "enable"]], "Bench": [[458, "bench"]], "SuperBench": [[458, "superbench"]], "Quick-Start": [[459, "quick-start"]], "Launcher Arguments (Optional)": [[459, "launcher-arguments-optional"]], "Neural Coder for Quantization": [[460, "neural-coder-for-quantization"]], "Features Supported": [[460, "features-supported"]], "Models Supported": [[460, "models-supported"]], "Usage": [[460, "usage"], [484, "usage"], [484, "id1"], [486, "usage"], [486, "id2"], [486, "id4"], [486, "id6"], [486, "id8"], [486, "id10"], [486, "id12"], [486, "id14"], [486, "id16"], [486, "id18"], [486, "id20"], [486, "id22"]], "PyPI distribution:": [[460, "pypi-distribution"]], "Supported Optimization Features": [[461, "supported-optimization-features"]], "v0.4": [[462, "v0-4"]], "Highlights": [[462, "highlights"]], "Others": [[462, "others"]], "Changelog": [[463, "changelog"], [467, "changelog"]], "neural_compressor_ext_lab": [[464, "neural-compressor-ext-lab"]], "Requirements": [[464, "requirements"], [468, "requirements"]], "Install": [[464, "install"], [468, "install"]], "Uninstall": [[464, "uninstall"], [468, "uninstall"]], "Contributing": [[464, "contributing"], [468, "contributing"]], "Development install": [[464, "development-install"], [468, "development-install"]], "Development uninstall": [[464, "development-uninstall"], [468, "development-uninstall"]], "Packaging the extension": [[464, "packaging-the-extension"], [468, "packaging-the-extension"]], "Intel\u00ae Neural Compressor as JupyterLab Extension": [[465, "intel-neural-compressor-as-jupyterlab-extension"]], "Auto-enable a feature": [[465, "auto-enable-a-feature"]], "Or let us help you auto-select the best feature": [[465, "or-let-us-help-you-auto-select-the-best-feature"]], "Pre-requisites": [[465, "pre-requisites"]], "Making a new release of neural_compressor_ext_lab": [[466, "making-a-new-release-of-neural-compressor-ext-lab"]], "Manual release": [[466, "manual-release"], [469, "manual-release"]], "Python package": [[466, "python-package"], [469, "python-package"]], "NPM package": [[466, "npm-package"], [469, "npm-package"]], "Automated releases with the Jupyter Releaser": [[466, "automated-releases-with-the-jupyter-releaser"], [469, "automated-releases-with-the-jupyter-releaser"]], "Publishing to conda-forge": [[466, "publishing-to-conda-forge"], [469, "publishing-to-conda-forge"]], "neural_compressor_ext_lab_alibaba": [[468, "neural-compressor-ext-lab-alibaba"]], "Making a new release of neural_compressor_ext_lab_alibaba": [[469, "making-a-new-release-of-neural-compressor-ext-lab-alibaba"]], "Change Log": [[470, "change-log"]], "[Unreleased]": [[470, "unreleased"]], "Background Introduction": [[471, "background-introduction"]], "Neural Coder Extension in VSCode": [[471, "neural-coder-extension-in-vscode"]], "Neural Coder Extension Usage": [[471, "neural-coder-extension-usage"]], "1. Open": [[471, "open"]], "2. Search": [[471, "search"]], "3. Setting": [[471, "setting"]], "4. Icon": [[471, "icon"]], "5. optimization (quantization)": [[471, "optimization-quantization"]], "5.1 Enable": [[471, "enable"]], "5.2 Auto": [[471, "auto"]], "Welcome to your VS Code Extension": [[472, "welcome-to-your-vs-code-extension"]], "What\u2019s in the folder": [[472, "what-s-in-the-folder"]], "Setup": [[472, "setup"]], "Get up and running straight away": [[472, "get-up-and-running-straight-away"]], "Make changes": [[472, "make-changes"]], "Explore the API": [[472, "explore-the-api"]], "Run tests": [[472, "run-tests"]], "Go further": [[472, "go-further"]], "Single Objective": [[473, "single-objective"]], "Multiple Objectives": [[473, "multiple-objectives"]], "Objective Support Matrix": [[473, "objective-support-matrix"]], "Get Started with Objective API": [[473, "get-started-with-objective-api"]], "Config Single Objective": [[473, "config-single-objective"]], "Config Multiple Objectives": [[473, "config-multiple-objectives"]], "Optimization Orchestration": [[474, "optimization-orchestration"]], "One-shot": [[474, "one-shot"]], "Orchestration Support Matrix": [[474, "orchestration-support-matrix"]], "Get Started with Orchestration API": [[474, "get-started-with-orchestration-api"]], "Neural Network Pruning": [[475, "neural-network-pruning"]], "Pruning Patterns": [[475, "pruning-patterns"]], "Pruning Criteria": [[475, "pruning-criteria"]], "Pruning Types": [[475, "pruning-types"]], "Pruning Schedules": [[475, "pruning-schedules"]], "Pruning Scope": [[475, "pruning-scope"]], "Sparsity Decay Types": [[475, "sparsity-decay-types"]], "Regularization": [[475, "regularization"]], "Pruning Support Matrix": [[475, "pruning-support-matrix"]], "Get Started with Pruning API": [[475, "get-started-with-pruning-api"]], "Sparse Model Deployment": [[475, "sparse-model-deployment"]], "Full Publications/Events (70)": [[476, "full-publications-events-70"]], "2023 (17)": [[476, "id1"]], "2022 (34)": [[476, "id2"]], "2021 (15)": [[476, "id3"]], "2018 - 2020 (4)": [[476, "id4"]], "Pythonic Style Access for Configurations": [[477, "pythonic-style-access-for-configurations"]], "Pythonic API for User Configurations": [[477, "pythonic-api-for-user-configurations"], [477, "id1"]], "Pythonic API for Framework Configurations": [[477, "pythonic-api-for-framework-configurations"], [477, "id2"]], "Get Started with Pythonic API for Configurations": [[477, "get-started-with-pythonic-api-for-configurations"]], "NAS": [[477, "nas"]], "Quantization Introduction": [[478, "quantization-introduction"]], "Quantization Fundamentals": [[478, "quantization-fundamentals"], [483, "quantization-fundamentals"]], "Quantization Support Matrix": [[478, "quantization-support-matrix"]], "Quantization Scheme in TensorFlow": [[478, "quantization-scheme-in-tensorflow"]], "Quantization Scheme in PyTorch": [[478, "quantization-scheme-in-pytorch"]], "Quantization Scheme in IPEX": [[478, "quantization-scheme-in-ipex"]], "Quantization Scheme in MXNet": [[478, "quantization-scheme-in-mxnet"]], "Quantization Scheme in ONNX Runtime": [[478, "quantization-scheme-in-onnx-runtime"]], "Quantization Approaches": [[478, "quantization-approaches"]], "With or Without Accuracy Aware Tuning": [[478, "with-or-without-accuracy-aware-tuning"]], "Post Training Quantization": [[478, "post-training-quantization"]], "Specify Quantization Rules": [[478, "specify-quantization-rules"]], "Specify Quantization Recipes": [[478, "specify-quantization-recipes"]], "Specify Quantization Backend and Device": [[478, "specify-quantization-backend-and-device"]], "Turn OFF Auto Mixed Precision during Quantization": [[479, "turn-off-auto-mixed-precision-during-quantization"]], "Tensorflow": [[479, "tensorflow"]], "Weight Only Quantization": [[480, "weight-only-quantization"]], "Quantization Capability:": [[480, "quantization-capability"]], "User code:": [[480, "user-code"]], "Release": [[481, "release"]], "Release Notes": [[481, "release-notes"]], "Known Issues": [[481, "known-issues"]], "Incompatible Changes": [[481, "incompatible-changes"]], "SigOpt Strategy": [[482, "sigopt-strategy"]], "Preparation": [[482, "preparation"]], "SigOpt Platform": [[482, "sigopt-platform"]], "Neural Compressor Configuration": [[482, "neural-compressor-configuration"]], "Performance": [[482, "performance"]], "Benefit of SigOpt Strategy": [[482, "benefit-of-sigopt-strategy"]], "Performance Comparison of Different Strategies": [[482, "performance-comparison-of-different-strategies"]], "Smooth Quant": [[483, "smooth-quant"]], "Per-tensor & Per-channel": [[483, "per-tensor-per-channel"]], "Per-tensor example": [[483, "per-tensor-example"]], "Per-channel example": [[483, "per-channel-example"]], "Matmul quantization example": [[483, "matmul-quantization-example"]], "Per-channel limitation": [[483, "per-channel-limitation"]], "SmoothQuant and Our Enhancement": [[483, "smoothquant-and-our-enhancement"]], "SmoothQuant": [[483, "smoothquant"]], "Our enhancement:": [[483, "our-enhancement"]], "Algorithm: Layer-wise Auto-tuning of $\\alpha$.": [[483, "algorithm-layer-wise-auto-tuning-of-alpha"]], "Engineering": [[483, "engineering"]], "Supported Framework Matrix": [[483, "supported-framework-matrix"]], "TensorBoard": [[484, "tensorboard"]], "Get Started with TensorBoard": [[484, "get-started-with-tensorboard"]], "PyTorch TensorBoard": [[484, "pytorch-tensorboard"]], "TensorFlow Tensorboard": [[484, "tensorflow-tensorboard"]], "PyTorch Examples": [[484, "pytorch-examples"]], "TensorFlow Examples": [[484, "tensorflow-examples"]], "Transform": [[485, "transform"]], "Transform Support List": [[485, "transform-support-list"]], "Pytorch": [[485, "pytorch"]], "Tuning Strategies": [[486, "tuning-strategies"]], "Strategy Design": [[486, "strategy-design"]], "Tuning Space": [[486, "tuning-space"]], "Exit Policy": [[486, "exit-policy"]], "Accuracy Criteria": [[486, "accuracy-criteria"]], "Tuning Process": [[486, "tuning-process"]], "Tuning Algorithms": [[486, "tuning-algorithms"]], "Auto": [[486, "auto"]], "Conservative Tuning": [[486, "conservative-tuning"]], "Basic": [[486, "basic"]], "MSE": [[486, "mse"]], "MSE_V2": [[486, "mse-v2"]], "HAWQ_V2": [[486, "hawq-v2"]], "Bayesian": [[486, "bayesian"]], "Exhaustive": [[486, "exhaustive"]], "Random": [[486, "random"]], "SigOpt": [[486, "sigopt"]], "TPE": [[486, "tpe"]], "Distributed Tuning": [[486, "distributed-tuning"]], "Customize a New Tuning Strategy": [[486, "customize-a-new-tuning-strategy"]], "User Guide": [[487, "user-guide"]], "Overview": [[487, "overview"]], "Python-based APIs": [[487, "python-based-apis"]], "Neural Coder (Zero-code Optimization)": [[487, "neural-coder-zero-code-optimization"]], "Advanced Topics": [[487, "advanced-topics"]], "Innovations for Productivity": [[487, "innovations-for-productivity"]], "User YAML Configuration Files": [[488, "user-yaml-configuration-files"]], "Get started with User YAML Files": [[488, "get-started-with-user-yaml-files"]], "Validated Quantization Examples": [[489, "validated-quantization-examples"]], "TensorFlow Models with Intel TensorFlow 2.12.0": [[489, "tensorflow-models-with-intel-tensorflow-2-12-0"]], "TensorFlow Models with Intel\u00ae Extension for TensorFlow* 1.2.0": [[489, "tensorflow-models-with-intel-extension-for-tensorflow-1-2-0"]], "PyTorch Models with Torch 2.0.1+cpu in PTQ Mode": [[489, "pytorch-models-with-torch-2-0-1-cpu-in-ptq-mode"]], "PyTorch Models with Torch 2.0.1+cpu in QAT Mode": [[489, "pytorch-models-with-torch-2-0-1-cpu-in-qat-mode"]], "PyTorch Models with Intel\u00ae Extension for PyTorch* 2.0.1+cpu": [[489, "pytorch-models-with-intel-extension-for-pytorch-2-0-1-cpu"]], "ONNX Models with ONNX Runtime 1.15.0": [[489, "onnx-models-with-onnx-runtime-1-15-0"]], "Validated Pruning Examples": [[489, "validated-pruning-examples"]], "Validated Knowledge Distillation Examples": [[489, "validated-knowledge-distillation-examples"]], "Validated ONNX QDQ INT8 Models on Multiple Hardware through ONNX Runtime": [[489, "validated-onnx-qdq-int8-models-on-multiple-hardware-through-onnx-runtime"]]}, "indexentries": {"block_mask": [[0, "module-block_mask"]], "module": [[0, "module-block_mask"], [1, "module-neural_compressor.adaptor.adaptor"], [2, "module-neural_compressor.adaptor"], [3, "module-neural_compressor.adaptor.keras"], [4, "module-neural_compressor.adaptor.keras_utils.conv2d"], [5, "module-neural_compressor.adaptor.keras_utils.dense"], [6, "module-neural_compressor.adaptor.keras_utils.depthwise_conv2d"], [7, "module-neural_compressor.adaptor.keras_utils"], [8, "module-neural_compressor.adaptor.keras_utils.pool2d"], [9, "module-neural_compressor.adaptor.keras_utils.quantizer"], [10, "module-neural_compressor.adaptor.keras_utils.separable_conv2d"], [11, "module-neural_compressor.adaptor.mxnet"], [12, "module-neural_compressor.adaptor.mxnet_utils"], [13, "module-neural_compressor.adaptor.mxnet_utils.util"], [14, "module-neural_compressor.adaptor.onnxrt"], [15, "module-neural_compressor.adaptor.ox_utils.calibration"], [16, "module-neural_compressor.adaptor.ox_utils.calibrator"], [17, "module-neural_compressor.adaptor.ox_utils"], [18, "module-neural_compressor.adaptor.ox_utils.operators.activation"], [19, "module-neural_compressor.adaptor.ox_utils.operators.argmax"], [20, "module-neural_compressor.adaptor.ox_utils.operators.attention"], [21, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"], [22, "module-neural_compressor.adaptor.ox_utils.operators.concat"], [23, "module-neural_compressor.adaptor.ox_utils.operators.conv"], [24, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"], [25, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"], [26, "module-neural_compressor.adaptor.ox_utils.operators.gather"], [27, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"], [28, "module-neural_compressor.adaptor.ox_utils.operators.gemm"], [29, "module-neural_compressor.adaptor.ox_utils.operators"], [30, "module-neural_compressor.adaptor.ox_utils.operators.lstm"], [31, "module-neural_compressor.adaptor.ox_utils.operators.matmul"], [32, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"], [33, "module-neural_compressor.adaptor.ox_utils.operators.norm"], [34, "module-neural_compressor.adaptor.ox_utils.operators.ops"], [35, "module-neural_compressor.adaptor.ox_utils.operators.pad"], [36, "module-neural_compressor.adaptor.ox_utils.operators.pooling"], [37, "module-neural_compressor.adaptor.ox_utils.operators.reduce"], [38, "module-neural_compressor.adaptor.ox_utils.operators.resize"], [39, "module-neural_compressor.adaptor.ox_utils.operators.split"], [40, "module-neural_compressor.adaptor.ox_utils.operators.unary_op"], [41, "module-neural_compressor.adaptor.ox_utils.quantizer"], [42, "module-neural_compressor.adaptor.ox_utils.smooth_quant"], [43, "module-neural_compressor.adaptor.ox_utils.util"], [44, "module-neural_compressor.adaptor.pytorch"], [45, "module-neural_compressor.adaptor.query"], [46, "module-neural_compressor.adaptor.tensorflow"], [47, "module-neural_compressor.adaptor.tf_utils.graph_converter"], [48, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"], [49, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"], [50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"], [51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"], [52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"], [53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"], [54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"], [55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"], [56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"], [57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"], [58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"], [59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"], [60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"], [61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"], [62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"], [63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"], [64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"], [65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"], [66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"], [67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"], [68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"], [69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"], [70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"], [71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"], [72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"], [73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"], [74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"], [75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"], [76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"], [77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"], [78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"], [79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"], [80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"], [81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"], [82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"], [83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"], [84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"], [85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"], [86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"], [87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"], [88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"], [89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"], [90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"], [91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"], [92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"], [93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"], [94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"], [95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"], [96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"], [97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"], [98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"], [99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"], [100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"], [101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"], [102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"], [103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"], [104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"], [105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"], [106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"], [107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"], [108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"], [109, "module-neural_compressor.adaptor.tf_utils.graph_util"], [110, "module-neural_compressor.adaptor.tf_utils"], [111, "module-neural_compressor.adaptor.tf_utils.quantize_graph"], [112, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"], [113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"], [114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"], [115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"], [116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"], [117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"], [118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"], [119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"], [120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"], [121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"], [122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"], [123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"], [124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"], [125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"], [126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"], [127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"], [128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"], [129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"], [130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"], [131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"], [132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"], [133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"], [134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"], [135, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"], [136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"], [137, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"], [138, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"], [139, "module-neural_compressor.adaptor.tf_utils.smooth_quant_calibration"], [140, "module-neural_compressor.adaptor.tf_utils.smooth_quant_scaler"], [141, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"], [142, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"], [143, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"], [144, "module-neural_compressor.adaptor.tf_utils.transform_graph"], [145, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"], [146, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"], [147, "module-neural_compressor.adaptor.tf_utils.util"], [148, "module-neural_compressor.adaptor.torch_utils.bf16_convert"], [149, "module-neural_compressor.adaptor.torch_utils.gptq"], [150, "module-neural_compressor.adaptor.torch_utils.hawq_metric"], [151, "module-neural_compressor.adaptor.torch_utils"], [152, "module-neural_compressor.adaptor.torch_utils.mixed_precision"], [153, "module-neural_compressor.adaptor.torch_utils.model_wrapper"], [154, "module-neural_compressor.adaptor.torch_utils.pattern_detector"], [155, "module-neural_compressor.adaptor.torch_utils.smooth_quant"], [156, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"], [157, "module-neural_compressor.adaptor.torch_utils.teq"], [158, "module-neural_compressor.adaptor.torch_utils.util"], [159, "module-neural_compressor.adaptor.torch_utils.weight_only"], [160, "module-neural_compressor.algorithm.algorithm"], [161, "module-neural_compressor.algorithm.fast_bias_correction"], [162, "module-neural_compressor.algorithm"], [163, "module-neural_compressor.algorithm.smooth_quant"], [164, "module-neural_compressor.algorithm.weight_correction"], [165, "module-neural_compressor.benchmark"], [166, "module-neural_compressor.compression.callbacks"], [167, "module-neural_compressor.compression.distillation.criterions"], [168, "module-neural_compressor.compression.distillation"], [169, "module-neural_compressor.compression"], [170, "module-neural_compressor.compression.pruner.criteria"], [171, "module-neural_compressor.compression.pruner"], [172, "module-neural_compressor.compression.pruner.model_slim.auto_slim"], [173, "module-neural_compressor.compression.pruner.model_slim"], [174, "module-neural_compressor.compression.pruner.model_slim.pattern_analyzer"], [175, "module-neural_compressor.compression.pruner.model_slim.weight_slim"], [176, "module-neural_compressor.compression.pruner.patterns.base"], [177, "module-neural_compressor.compression.pruner.patterns"], [178, "module-neural_compressor.compression.pruner.patterns.mha"], [179, "module-neural_compressor.compression.pruner.patterns.ninm"], [180, "module-neural_compressor.compression.pruner.patterns.nxm"], [181, "module-neural_compressor.compression.pruner.pruners.base"], [182, "module-neural_compressor.compression.pruner.pruners.basic"], [183, "module-neural_compressor.compression.pruner.pruners.block_mask"], [184, "module-neural_compressor.compression.pruner.pruners"], [185, "module-neural_compressor.compression.pruner.pruners.mha"], [186, "module-neural_compressor.compression.pruner.pruners.pattern_lock"], [187, "module-neural_compressor.compression.pruner.pruners.progressive"], [188, "module-neural_compressor.compression.pruner.pruners.retrain_free"], [189, "module-neural_compressor.compression.pruner.regs"], [190, "module-neural_compressor.compression.pruner.schedulers"], [191, "module-neural_compressor.compression.pruner.tf_criteria"], [192, "module-neural_compressor.compression.pruner.utils"], [193, "module-neural_compressor.conf.config"], [194, "module-neural_compressor.conf.dotdict"], [195, "module-neural_compressor.conf"], [196, "module-neural_compressor.conf.pythonic_config"], [197, "module-neural_compressor.config"], [198, "module-neural_compressor.contrib"], [199, "module-neural_compressor.contrib.strategy"], [200, "module-neural_compressor.contrib.strategy.sigopt"], [201, "module-neural_compressor.contrib.strategy.tpe"], [202, "module-neural_compressor.data.dataloaders.base_dataloader"], [203, "module-neural_compressor.data.dataloaders.dataloader"], [204, "module-neural_compressor.data.dataloaders.default_dataloader"], [205, "module-neural_compressor.data.dataloaders.fetcher"], [206, "module-neural_compressor.data.dataloaders"], [207, "module-neural_compressor.data.dataloaders.mxnet_dataloader"], [208, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"], [209, "module-neural_compressor.data.dataloaders.pytorch_dataloader"], [210, "module-neural_compressor.data.dataloaders.sampler"], [211, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"], [212, "module-neural_compressor.data.datasets.bert_dataset"], [213, "module-neural_compressor.data.datasets.coco_dataset"], [214, "module-neural_compressor.data.datasets.dataset"], [215, "module-neural_compressor.data.datasets.dummy_dataset"], [216, "module-neural_compressor.data.datasets.dummy_dataset_v2"], [217, "module-neural_compressor.data.datasets.imagenet_dataset"], [218, "module-neural_compressor.data.datasets"], [219, "module-neural_compressor.data.datasets.style_transfer_dataset"], [220, "module-neural_compressor.data.filters.coco_filter"], [221, "module-neural_compressor.data.filters.filter"], [222, "module-neural_compressor.data.filters"], [223, "module-neural_compressor.data"], [224, "module-neural_compressor.data.transforms.coco_transform"], [225, "module-neural_compressor.data.transforms.imagenet_transform"], [226, "module-neural_compressor.data.transforms"], [227, "module-neural_compressor.data.transforms.postprocess"], [228, "module-neural_compressor.data.transforms.tokenization"], [229, "module-neural_compressor.data.transforms.transform"], [230, "module-neural_compressor.experimental.benchmark"], [231, "module-neural_compressor.experimental.common.criterion"], [232, "module-neural_compressor.experimental.common.dataloader"], [233, "module-neural_compressor.experimental.common"], [234, "module-neural_compressor.experimental.common.metric"], [235, "module-neural_compressor.experimental.common.model"], [236, "module-neural_compressor.experimental.common.optimizer"], [237, "module-neural_compressor.experimental.common.postprocess"], [238, "module-neural_compressor.experimental.common.torch_utils"], [239, "module-neural_compressor.experimental.component"], [240, "module-neural_compressor.experimental.compression"], [241, "module-neural_compressor.experimental.compression.pruning"], [242, "module-neural_compressor.experimental.contrib"], [243, "module-neural_compressor.experimental.contrib.strategy"], [244, "module-neural_compressor.experimental.contrib.strategy.sigopt"], [245, "module-neural_compressor.experimental.contrib.strategy.tpe"], [246, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"], [247, "module-neural_compressor.experimental.data.dataloaders.dataloader"], [248, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"], [249, "module-neural_compressor.experimental.data.dataloaders.fetcher"], [250, "module-neural_compressor.experimental.data.dataloaders"], [251, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"], [252, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"], [253, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"], [254, "module-neural_compressor.experimental.data.dataloaders.sampler"], [255, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"], [256, "module-neural_compressor.experimental.data.datasets.bert_dataset"], [257, "module-neural_compressor.experimental.data.datasets.coco_dataset"], [258, "module-neural_compressor.experimental.data.datasets.dataset"], [259, "module-neural_compressor.experimental.data.datasets.dummy_dataset"], [260, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"], [261, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"], [262, "module-neural_compressor.experimental.data.datasets"], [263, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"], [264, "module-neural_compressor.experimental.data.filters.coco_filter"], [265, "module-neural_compressor.experimental.data.filters.filter"], [266, "module-neural_compressor.experimental.data.filters"], [267, "module-neural_compressor.experimental.data"], [268, "module-neural_compressor.experimental.data.transforms.imagenet_transform"], [269, "module-neural_compressor.experimental.data.transforms"], [270, "module-neural_compressor.experimental.data.transforms.tokenization"], [271, "module-neural_compressor.experimental.data.transforms.transform"], [272, "module-neural_compressor.experimental.distillation"], [273, "module-neural_compressor.experimental.export"], [274, "module-neural_compressor.experimental.export.qlinear2qdq"], [275, "module-neural_compressor.experimental.export.tf2onnx"], [276, "module-neural_compressor.experimental.export.torch2onnx"], [277, "module-neural_compressor.experimental.graph_optimization"], [278, "module-neural_compressor.experimental"], [279, "module-neural_compressor.experimental.metric.bleu"], [280, "module-neural_compressor.experimental.metric.bleu_util"], [281, "module-neural_compressor.experimental.metric.coco_label_map"], [282, "module-neural_compressor.experimental.metric.coco_tools"], [283, "module-neural_compressor.experimental.metric.evaluate_squad"], [284, "module-neural_compressor.experimental.metric.f1"], [285, "module-neural_compressor.experimental.metric"], [286, "module-neural_compressor.experimental.metric.metric"], [287, "module-neural_compressor.experimental.mixed_precision"], [288, "module-neural_compressor.experimental.model_conversion"], [289, "module-neural_compressor.experimental.nas.basic_nas"], [290, "module-neural_compressor.experimental.nas.dynas"], [291, "module-neural_compressor.experimental.nas"], [292, "module-neural_compressor.experimental.nas.nas"], [293, "module-neural_compressor.experimental.nas.nas_utils"], [294, "module-neural_compressor.experimental.nas.search_algorithms"], [295, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"], [296, "module-neural_compressor.experimental.pruner_legacy.group_lasso"], [297, "module-neural_compressor.experimental.pruner_legacy"], [298, "module-neural_compressor.experimental.pruner_legacy.magnitude"], [299, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"], [300, "module-neural_compressor.experimental.pruner_legacy.pruner"], [301, "module-neural_compressor.experimental.pruning"], [302, "module-neural_compressor.experimental.pruning_recipes"], [303, "module-neural_compressor.experimental.pruning_recipes.patterns"], [304, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"], [305, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"], [306, "module-neural_compressor.experimental.pruning_v2"], [307, "module-neural_compressor.experimental.pytorch_pruner"], [308, "module-neural_compressor.experimental.pytorch_pruner.logger"], [309, "module-neural_compressor.experimental.pytorch_pruner.patterns"], [310, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"], [311, "module-neural_compressor.experimental.pytorch_pruner.pruner"], [312, "module-neural_compressor.experimental.pytorch_pruner.pruning"], [313, "module-neural_compressor.experimental.pytorch_pruner.scheduler"], [314, "module-neural_compressor.experimental.quantization"], [315, "module-neural_compressor.experimental.scheduler"], [316, "module-neural_compressor.experimental.strategy.auto_mixed_precision"], [317, "module-neural_compressor.experimental.strategy.basic"], [318, "module-neural_compressor.experimental.strategy.bayesian"], [319, "module-neural_compressor.experimental.strategy.exhaustive"], [320, "module-neural_compressor.experimental.strategy"], [321, "module-neural_compressor.experimental.strategy.mse"], [322, "module-neural_compressor.experimental.strategy.mse_v2"], [323, "module-neural_compressor.experimental.strategy.random"], [324, "module-neural_compressor.experimental.strategy.strategy"], [325, "module-neural_compressor.experimental.strategy.utils.constant"], [326, "module-neural_compressor.experimental.strategy.utils"], [327, "module-neural_compressor.experimental.strategy.utils.tuning_sampler"], [328, "module-neural_compressor.experimental.strategy.utils.tuning_space"], [329, "module-neural_compressor.experimental.strategy.utils.tuning_structs"], [330, "module-neural_compressor.experimental.strategy.utils.utility"], [331, "module-neural_compressor"], [332, "module-neural_compressor.metric.bleu"], [333, "module-neural_compressor.metric.bleu_util"], [334, "module-neural_compressor.metric.coco_label_map"], [335, "module-neural_compressor.metric.coco_tools"], [336, "module-neural_compressor.metric.evaluate_squad"], [337, "module-neural_compressor.metric.f1"], [338, "module-neural_compressor.metric"], [339, "module-neural_compressor.metric.metric"], [340, "module-neural_compressor.mix_precision"], [341, "module-neural_compressor.model.base_model"], [342, "module-neural_compressor.model"], [343, "module-neural_compressor.model.keras_model"], [344, "module-neural_compressor.model.model"], [345, "module-neural_compressor.model.mxnet_model"], [346, "module-neural_compressor.model.nets_factory"], [347, "module-neural_compressor.model.onnx_model"], [348, "module-neural_compressor.model.tensorflow_model"], [349, "module-neural_compressor.model.torch_model"], [350, "module-neural_compressor.objective"], [351, "module-neural_compressor.profiling"], [352, "module-neural_compressor.profiling.parser.factory"], [353, "module-neural_compressor.profiling.parser"], [354, "module-neural_compressor.profiling.parser.onnx_parser.factory"], [355, "module-neural_compressor.profiling.parser.onnx_parser"], [356, "module-neural_compressor.profiling.parser.onnx_parser.parser"], [357, "module-neural_compressor.profiling.parser.parser"], [358, "module-neural_compressor.profiling.parser.result"], [359, "module-neural_compressor.profiling.parser.tensorflow_parser.factory"], [360, "module-neural_compressor.profiling.parser.tensorflow_parser"], [361, "module-neural_compressor.profiling.parser.tensorflow_parser.parser"], [362, "module-neural_compressor.profiling.profiler.factory"], [363, "module-neural_compressor.profiling.profiler"], [364, "module-neural_compressor.profiling.profiler.onnxrt_profiler.factory"], [365, "module-neural_compressor.profiling.profiler.onnxrt_profiler"], [366, "module-neural_compressor.profiling.profiler.onnxrt_profiler.profiler"], [367, "module-neural_compressor.profiling.profiler.onnxrt_profiler.utils"], [368, "module-neural_compressor.profiling.profiler.profiler"], [369, "module-neural_compressor.profiling.profiler.tensorflow_profiler.factory"], [370, "module-neural_compressor.profiling.profiler.tensorflow_profiler"], [371, "module-neural_compressor.profiling.profiler.tensorflow_profiler.profiler"], [372, "module-neural_compressor.profiling.profiler.tensorflow_profiler.utils"], [373, "module-neural_compressor.quantization"], [374, "module-neural_compressor.strategy.auto"], [375, "module-neural_compressor.strategy.auto_mixed_precision"], [376, "module-neural_compressor.strategy.basic"], [377, "module-neural_compressor.strategy.bayesian"], [378, "module-neural_compressor.strategy.conservative"], [379, "module-neural_compressor.strategy.exhaustive"], [380, "module-neural_compressor.strategy.hawq_v2"], [381, "module-neural_compressor.strategy"], [382, "module-neural_compressor.strategy.mse"], [383, "module-neural_compressor.strategy.mse_v2"], [384, "module-neural_compressor.strategy.random"], [385, "module-neural_compressor.strategy.strategy"], [386, "module-neural_compressor.strategy.utils.constant"], [387, "module-neural_compressor.strategy.utils"], [388, "module-neural_compressor.strategy.utils.tuning_sampler"], [389, "module-neural_compressor.strategy.utils.tuning_space"], [390, "module-neural_compressor.strategy.utils.tuning_structs"], [391, "module-neural_compressor.strategy.utils.utility"], [392, "module-neural_compressor.template.api_doc_example"], [393, "module-neural_compressor.template"], [394, "module-neural_compressor.training"], [395, "module-neural_compressor.utils.collect_layer_histogram"], [396, "module-neural_compressor.utils.constant"], [397, "module-neural_compressor.utils.create_obj_from_config"], [398, "module-neural_compressor.utils"], [399, "module-neural_compressor.utils.kl_divergence"], [400, "module-neural_compressor.utils.load_huggingface"], [401, "module-neural_compressor.utils.logger"], [402, "module-neural_compressor.utils.neural_insights_utils"], [403, "module-neural_compressor.utils.options"], [404, "module-neural_compressor.utils.pytorch"], [405, "module-neural_compressor.utils.utility"], [406, "module-neural_compressor.utils.weights_details"], [407, "module-neural_compressor.version"]], "adaptor (class in neural_compressor.adaptor.adaptor)": [[1, "neural_compressor.adaptor.adaptor.Adaptor"]], "adaptor_registry() (in module neural_compressor.adaptor.adaptor)": [[1, "neural_compressor.adaptor.adaptor.adaptor_registry"]], "neural_compressor.adaptor.adaptor": [[1, "module-neural_compressor.adaptor.adaptor"]], "neural_compressor.adaptor": [[2, "module-neural_compressor.adaptor"]], "kerasadaptor (class in neural_compressor.adaptor.keras)": [[3, "neural_compressor.adaptor.keras.KerasAdaptor"]], "kerasquery (class in neural_compressor.adaptor.keras)": [[3, "neural_compressor.adaptor.keras.KerasQuery"]], "neural_compressor.adaptor.keras": [[3, "module-neural_compressor.adaptor.keras"]], "neural_compressor.adaptor.keras_utils.conv2d": [[4, "module-neural_compressor.adaptor.keras_utils.conv2d"]], "neural_compressor.adaptor.keras_utils.dense": [[5, "module-neural_compressor.adaptor.keras_utils.dense"]], "neural_compressor.adaptor.keras_utils.depthwise_conv2d": [[6, "module-neural_compressor.adaptor.keras_utils.depthwise_conv2d"]], "neural_compressor.adaptor.keras_utils": [[7, "module-neural_compressor.adaptor.keras_utils"]], "neural_compressor.adaptor.keras_utils.pool2d": [[8, "module-neural_compressor.adaptor.keras_utils.pool2d"]], "neural_compressor.adaptor.keras_utils.quantizer": [[9, "module-neural_compressor.adaptor.keras_utils.quantizer"]], "neural_compressor.adaptor.keras_utils.separable_conv2d": [[10, "module-neural_compressor.adaptor.keras_utils.separable_conv2d"]], "mxnetquery (class in neural_compressor.adaptor.mxnet)": [[11, "neural_compressor.adaptor.mxnet.MXNetQuery"]], "mxnetadaptor (class in neural_compressor.adaptor.mxnet)": [[11, "neural_compressor.adaptor.mxnet.MxNetAdaptor"]], "neural_compressor.adaptor.mxnet": [[11, "module-neural_compressor.adaptor.mxnet"]], "neural_compressor.adaptor.mxnet_utils": [[12, "module-neural_compressor.adaptor.mxnet_utils"]], "calibcollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CalibCollector"]], "calibdata (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CalibData"]], "collectorbase (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CollectorBase"]], "dataiterloader (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.DataIterLoader"]], "dataloaderwrap (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.DataLoaderWrap"]], "namecollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.NameCollector"]], "optype (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.OpType"]], "tensorcollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.TensorCollector"]], "amp_convert() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.amp_convert"]], "calib_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.calib_model"]], "check_mx_version() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.check_mx_version"]], "combine_capabilities() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.combine_capabilities"]], "create_data_example() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.create_data_example"]], "distribute_calib_tensors() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.distribute_calib_tensors"]], "ensure_list() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.ensure_list"]], "fuse() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.fuse"]], "get_framework_name() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.get_framework_name"]], "is_model_quantized() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.is_model_quantized"]], "isiterable() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.isiterable"]], "make_module() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.make_module"]], "make_nc_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.make_nc_model"]], "make_symbol_block() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.make_symbol_block"]], "ndarray_to_device() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.ndarray_to_device"]], "neural_compressor.adaptor.mxnet_utils.util": [[13, "module-neural_compressor.adaptor.mxnet_utils.util"]], "parse_tune_config() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.parse_tune_config"]], "prepare_dataloader() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.prepare_dataloader"]], "prepare_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.prepare_model"]], "prepare_model_data() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.prepare_model_data"]], "quantize_sym_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.quantize_sym_model"]], "query_quantizable_nodes() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.query_quantizable_nodes"]], "run_forward() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.run_forward"]], "onnxrtquery (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRTQuery"]], "onnxrt_integeropsadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRT_IntegerOpsAdaptor"]], "onnxrt_qdqadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRT_QDQAdaptor"]], "onnxrt_qlinearopsadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRT_QLinearOpsAdaptor"]], "onnxruntimeadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor"]], "neural_compressor.adaptor.onnxrt": [[14, "module-neural_compressor.adaptor.onnxrt"]], "onnxrtaugment (class in neural_compressor.adaptor.ox_utils.calibration)": [[15, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment"]], "neural_compressor.adaptor.ox_utils.calibration": [[15, "module-neural_compressor.adaptor.ox_utils.calibration"]], "calibratorbase (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.CalibratorBase"]], "histogramcollector (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.HistogramCollector"]], "klcalibrator (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.KLCalibrator"]], "minmaxcalibrator (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.MinMaxCalibrator"]], "percentilecalibrator (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.PercentileCalibrator"]], "calib_registry() (in module neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.calib_registry"]], "neural_compressor.adaptor.ox_utils.calibrator": [[16, "module-neural_compressor.adaptor.ox_utils.calibrator"]], "smooth_distribution() (in module neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.smooth_distribution"]], "neural_compressor.adaptor.ox_utils": [[17, "module-neural_compressor.adaptor.ox_utils"]], "activationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[18, "neural_compressor.adaptor.ox_utils.operators.activation.ActivationOperator"]], "float16activationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[18, "neural_compressor.adaptor.ox_utils.operators.activation.Float16ActivationOperator"]], "qactivationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[18, "neural_compressor.adaptor.ox_utils.operators.activation.QActivationOperator"]], "removableactivationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[18, "neural_compressor.adaptor.ox_utils.operators.activation.RemovableActivationOperator"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[18, "module-neural_compressor.adaptor.ox_utils.operators.activation"]], "argmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.argmax)": [[19, "neural_compressor.adaptor.ox_utils.operators.argmax.ArgMaxOperator"]], "qargmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.argmax)": [[19, "neural_compressor.adaptor.ox_utils.operators.argmax.QArgMaxOperator"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[19, "module-neural_compressor.adaptor.ox_utils.operators.argmax"]], "attentionoperator (class in neural_compressor.adaptor.ox_utils.operators.attention)": [[20, "neural_compressor.adaptor.ox_utils.operators.attention.AttentionOperator"]], "qattentionoperator (class in neural_compressor.adaptor.ox_utils.operators.attention)": [[20, "neural_compressor.adaptor.ox_utils.operators.attention.QAttentionOperator"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[20, "module-neural_compressor.adaptor.ox_utils.operators.attention"]], "binaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[21, "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryOperator"]], "float16binaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[21, "neural_compressor.adaptor.ox_utils.operators.binary_op.Float16BinaryOperator"]], "qbinaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[21, "neural_compressor.adaptor.ox_utils.operators.binary_op.QBinaryOperator"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[21, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"]], "concatoperator (class in neural_compressor.adaptor.ox_utils.operators.concat)": [[22, "neural_compressor.adaptor.ox_utils.operators.concat.ConcatOperator"]], "qconcatoperator (class in neural_compressor.adaptor.ox_utils.operators.concat)": [[22, "neural_compressor.adaptor.ox_utils.operators.concat.QConcatOperator"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[22, "module-neural_compressor.adaptor.ox_utils.operators.concat"]], "convoperator (class in neural_compressor.adaptor.ox_utils.operators.conv)": [[23, "neural_compressor.adaptor.ox_utils.operators.conv.ConvOperator"]], "qconvoperator (class in neural_compressor.adaptor.ox_utils.operators.conv)": [[23, "neural_compressor.adaptor.ox_utils.operators.conv.QConvOperator"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[23, "module-neural_compressor.adaptor.ox_utils.operators.conv"]], "direct8bitoperator (class in neural_compressor.adaptor.ox_utils.operators.direct_q8)": [[24, "neural_compressor.adaptor.ox_utils.operators.direct_q8.Direct8BitOperator"]], "qdirectoperator (class in neural_compressor.adaptor.ox_utils.operators.direct_q8)": [[24, "neural_compressor.adaptor.ox_utils.operators.direct_q8.QDirectOperator"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[24, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"]], "embedlayernormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.embed_layernorm)": [[25, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.EmbedLayerNormalizationOperator"]], "qembedlayernormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.embed_layernorm)": [[25, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.QEmbedLayerNormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[25, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"]], "gatheroperator (class in neural_compressor.adaptor.ox_utils.operators.gather)": [[26, "neural_compressor.adaptor.ox_utils.operators.gather.GatherOperator"]], "qgatheroperator (class in neural_compressor.adaptor.ox_utils.operators.gather)": [[26, "neural_compressor.adaptor.ox_utils.operators.gather.QGatherOperator"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[26, "module-neural_compressor.adaptor.ox_utils.operators.gather"]], "globalaveragepooloperator (class in neural_compressor.adaptor.ox_utils.operators.gavgpool)": [[27, "neural_compressor.adaptor.ox_utils.operators.gavgpool.GlobalAveragePoolOperator"]], "qglobalaveragepooloperator (class in neural_compressor.adaptor.ox_utils.operators.gavgpool)": [[27, "neural_compressor.adaptor.ox_utils.operators.gavgpool.QGlobalAveragePoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[27, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"]], "gemmoperator (class in neural_compressor.adaptor.ox_utils.operators.gemm)": [[28, "neural_compressor.adaptor.ox_utils.operators.gemm.GemmOperator"]], "qgemmoperator (class in neural_compressor.adaptor.ox_utils.operators.gemm)": [[28, "neural_compressor.adaptor.ox_utils.operators.gemm.QGemmOperator"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[28, "module-neural_compressor.adaptor.ox_utils.operators.gemm"]], "neural_compressor.adaptor.ox_utils.operators": [[29, "module-neural_compressor.adaptor.ox_utils.operators"]], "lstmoperator (class in neural_compressor.adaptor.ox_utils.operators.lstm)": [[30, "neural_compressor.adaptor.ox_utils.operators.lstm.LSTMOperator"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[30, "module-neural_compressor.adaptor.ox_utils.operators.lstm"]], "fusedmatmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[31, "neural_compressor.adaptor.ox_utils.operators.matmul.FusedMatMulOperator"]], "matmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[31, "neural_compressor.adaptor.ox_utils.operators.matmul.MatMulOperator"]], "qmatmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[31, "neural_compressor.adaptor.ox_utils.operators.matmul.QMatMulOperator"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[31, "module-neural_compressor.adaptor.ox_utils.operators.matmul"]], "maxpooloperator (class in neural_compressor.adaptor.ox_utils.operators.maxpool)": [[32, "neural_compressor.adaptor.ox_utils.operators.maxpool.MaxPoolOperator"]], "qmaxpooloperator (class in neural_compressor.adaptor.ox_utils.operators.maxpool)": [[32, "neural_compressor.adaptor.ox_utils.operators.maxpool.QMaxPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[32, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"]], "batchnormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.norm)": [[33, "neural_compressor.adaptor.ox_utils.operators.norm.BatchNormalizationOperator"]], "normalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.norm)": [[33, "neural_compressor.adaptor.ox_utils.operators.norm.NormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.norm": [[33, "module-neural_compressor.adaptor.ox_utils.operators.norm"]], "operator (class in neural_compressor.adaptor.ox_utils.operators.ops)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.Operator"]], "qoperator (class in neural_compressor.adaptor.ox_utils.operators.ops)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.QOperator"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[34, "module-neural_compressor.adaptor.ox_utils.operators.ops"]], "op_registry() (in module neural_compressor.adaptor.ox_utils.operators.ops)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.op_registry"]], "qop_registry() (in module neural_compressor.adaptor.ox_utils.operators.ops)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.qop_registry"]], "padoperator (class in neural_compressor.adaptor.ox_utils.operators.pad)": [[35, "neural_compressor.adaptor.ox_utils.operators.pad.PadOperator"]], "qpadoperator (class in neural_compressor.adaptor.ox_utils.operators.pad)": [[35, "neural_compressor.adaptor.ox_utils.operators.pad.QPadOperator"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[35, "module-neural_compressor.adaptor.ox_utils.operators.pad"]], "pooloperator (class in neural_compressor.adaptor.ox_utils.operators.pooling)": [[36, "neural_compressor.adaptor.ox_utils.operators.pooling.PoolOperator"]], "qpooloperator (class in neural_compressor.adaptor.ox_utils.operators.pooling)": [[36, "neural_compressor.adaptor.ox_utils.operators.pooling.QPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[36, "module-neural_compressor.adaptor.ox_utils.operators.pooling"]], "reduceoperator (class in neural_compressor.adaptor.ox_utils.operators.reduce)": [[37, "neural_compressor.adaptor.ox_utils.operators.reduce.ReduceOperator"]], "neural_compressor.adaptor.ox_utils.operators.reduce": [[37, "module-neural_compressor.adaptor.ox_utils.operators.reduce"]], "qresizeoperator (class in neural_compressor.adaptor.ox_utils.operators.resize)": [[38, "neural_compressor.adaptor.ox_utils.operators.resize.QResizeOperator"]], "resizeoperator (class in neural_compressor.adaptor.ox_utils.operators.resize)": [[38, "neural_compressor.adaptor.ox_utils.operators.resize.ResizeOperator"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[38, "module-neural_compressor.adaptor.ox_utils.operators.resize"]], "qsplitoperator (class in neural_compressor.adaptor.ox_utils.operators.split)": [[39, "neural_compressor.adaptor.ox_utils.operators.split.QSplitOperator"]], "splitoperator (class in neural_compressor.adaptor.ox_utils.operators.split)": [[39, "neural_compressor.adaptor.ox_utils.operators.split.SplitOperator"]], "neural_compressor.adaptor.ox_utils.operators.split": [[39, "module-neural_compressor.adaptor.ox_utils.operators.split"]], "unaryoperator (class in neural_compressor.adaptor.ox_utils.operators.unary_op)": [[40, "neural_compressor.adaptor.ox_utils.operators.unary_op.UnaryOperator"]], "neural_compressor.adaptor.ox_utils.operators.unary_op": [[40, "module-neural_compressor.adaptor.ox_utils.operators.unary_op"]], "quantizer (class in neural_compressor.adaptor.ox_utils.quantizer)": [[41, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer"]], "neural_compressor.adaptor.ox_utils.quantizer": [[41, "module-neural_compressor.adaptor.ox_utils.quantizer"]], "ortsmoothquant (class in neural_compressor.adaptor.ox_utils.smooth_quant)": [[42, "neural_compressor.adaptor.ox_utils.smooth_quant.ORTSmoothQuant"]], "get_quant_dequant_output() (in module neural_compressor.adaptor.ox_utils.smooth_quant)": [[42, "neural_compressor.adaptor.ox_utils.smooth_quant.get_quant_dequant_output"]], "make_sub_graph() (in module neural_compressor.adaptor.ox_utils.smooth_quant)": [[42, "neural_compressor.adaptor.ox_utils.smooth_quant.make_sub_graph"]], "neural_compressor.adaptor.ox_utils.smooth_quant": [[42, "module-neural_compressor.adaptor.ox_utils.smooth_quant"]], "quant_dequant_data() (in module neural_compressor.adaptor.ox_utils.smooth_quant)": [[42, "neural_compressor.adaptor.ox_utils.smooth_quant.quant_dequant_data"]], "quantformat (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantFormat"]], "quanttype (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantType"]], "quantizationmode (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantizationMode"]], "quantizedinitializer (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantizedInitializer"]], "quantizedvalue (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantizedValue"]], "quantizedvaluetype (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantizedValueType"]], "valueinfo (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.ValueInfo"]], "attribute_to_kwarg() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.attribute_to_kwarg"]], "calculate_scale_zp() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.calculate_scale_zp"]], "cast_tensor() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.cast_tensor"]], "collate_preds() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.collate_preds"]], "dequantize_data() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.dequantize_data"]], "dequantize_data_with_scale_zero() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.dequantize_data_with_scale_zero"]], "dtype_to_name() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.dtype_to_name"]], "find_by_name() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.find_by_name"]], "float_to_bfloat16() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.float_to_bfloat16"]], "float_to_float16() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.float_to_float16"]], "is_b_transposed() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.is_B_transposed"]], "make_dquant_node() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.make_dquant_node"]], "make_quant_node() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.make_quant_node"]], "neural_compressor.adaptor.ox_utils.util": [[43, "module-neural_compressor.adaptor.ox_utils.util"]], "quantize_data() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.quantize_data"]], "quantize_data_per_channel() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.quantize_data_per_channel"]], "quantize_data_with_scale_zero() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.quantize_data_with_scale_zero"]], "quantize_nparray() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.quantize_nparray"]], "remove_init_from_model_input() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.remove_init_from_model_input"]], "split_shared_bias() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.split_shared_bias"]], "to_numpy() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.to_numpy"]], "trt_env_setup() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.trt_env_setup"]], "pytorchadaptor (class in neural_compressor.adaptor.pytorch)": [[44, "neural_compressor.adaptor.pytorch.PyTorchAdaptor"]], "pytorchweightonlyadaptor (class in neural_compressor.adaptor.pytorch)": [[44, "neural_compressor.adaptor.pytorch.PyTorchWeightOnlyAdaptor"]], "pytorch_fxadaptor (class in neural_compressor.adaptor.pytorch)": [[44, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor"]], "pytorch_ipexadaptor (class in neural_compressor.adaptor.pytorch)": [[44, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor"]], "templateadaptor (class in neural_compressor.adaptor.pytorch)": [[44, "neural_compressor.adaptor.pytorch.TemplateAdaptor"]], "get_ops_recursively() (in module neural_compressor.adaptor.pytorch)": [[44, "neural_compressor.adaptor.pytorch.get_ops_recursively"]], "neural_compressor.adaptor.pytorch": [[44, "module-neural_compressor.adaptor.pytorch"]], "querybackendcapability (class in neural_compressor.adaptor.query)": [[45, "neural_compressor.adaptor.query.QueryBackendCapability"]], "neural_compressor.adaptor.query": [[45, "module-neural_compressor.adaptor.query"]], "tensorflowadaptor (class in neural_compressor.adaptor.tensorflow)": [[46, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor"]], "tensorflowquery (class in neural_compressor.adaptor.tensorflow)": [[46, "neural_compressor.adaptor.tensorflow.TensorflowQuery"]], "tensorflow_itexadaptor (class in neural_compressor.adaptor.tensorflow)": [[46, "neural_compressor.adaptor.tensorflow.Tensorflow_ITEXAdaptor"]], "neural_compressor.adaptor.tensorflow": [[46, "module-neural_compressor.adaptor.tensorflow"]], "graphconverter (class in neural_compressor.adaptor.tf_utils.graph_converter)": [[47, "neural_compressor.adaptor.tf_utils.graph_converter.GraphConverter"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[47, "module-neural_compressor.adaptor.tf_utils.graph_converter"]], "graphconverterwithoutcalib (class in neural_compressor.adaptor.tf_utils.graph_converter_without_calib)": [[48, "neural_compressor.adaptor.tf_utils.graph_converter_without_calib.GraphConverterWithoutCalib"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[48, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"]], "bf16convert (class in neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert)": [[49, "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert.BF16Convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[49, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"]], "convertaddtobiasaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd)": [[51, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd.ConvertAddToBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"]], "convertlayoutoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout)": [[52, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout.ConvertLayoutOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"]], "convertleakyreluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu)": [[53, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu.ConvertLeakyReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"]], "convertnantorandom (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random)": [[54, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random.ConvertNanToRandom"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"]], "convertplaceholdertoconst (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const)": [[55, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"]], "dequantizecastoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer)": [[56, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer.DequantizeCastOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"]], "dilatedcontraction (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction)": [[57, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction.DilatedContraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"]], "injectdummybiasaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd)": [[58, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd.InjectDummyBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"]], "expanddimsoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer)": [[59, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer.ExpandDimsOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"]], "fetchweightfromreshapeoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape)": [[60, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape.FetchWeightFromReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "foldbatchnormnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm)": [[61, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"]], "graphfoldconstantoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant)": [[62, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"]], "fusebiasaddandaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add)": [[63, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add.FuseBiasAddAndAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"]], "fusecolumnwisemuloptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul)": [[64, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul.FuseColumnWiseMulOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"]], "fuseconvwithmathoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math)": [[65, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math.FuseConvWithMathOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"]], "fusedecomposedbnoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.FuseDecomposedBNOptimizer"]], "bypass_reshape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.bypass_reshape"]], "get_const_dim_count() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.get_const_dim_count"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_name_from_input"]], "valid_reshape_inputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.valid_reshape_inputs"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.values_from_const"]], "fusedecomposedinoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.FuseDecomposedINOptimizer"]], "bypass_reshape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.bypass_reshape"]], "get_const_dim_count() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.get_const_dim_count"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.node_name_from_input"]], "valid_reshape_inputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.valid_reshape_inputs"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.values_from_const"]], "fusegeluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu.FuseGeluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"]], "fuselayernormoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[69, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.FuseLayerNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[69, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[69, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.node_name_from_input"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[69, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.values_from_const"]], "fusepadwithconv2doptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv)": [[70, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv.FusePadWithConv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"]], "fusepadwithfp32conv2doptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv)": [[71, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.FusePadWithFP32Conv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "fusetransposereshapeoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose)": [[72, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose.FuseTransposeReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"]], "graphcseoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer)": [[73, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer.GraphCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"]], "grappleroptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass)": [[74, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass.GrapplerOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"]], "insertprintminmaxnode (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node)": [[76, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node.InsertPrintMinMaxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"]], "movesqueezeafterreluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu)": [[77, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu.MoveSqueezeAfterReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"]], "preoptimization (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize)": [[78, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.PreOptimization"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"]], "removetrainingnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes)": [[79, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes.RemoveTrainingNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"]], "renamebatchnormoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm)": [[80, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm.RenameBatchNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"]], "splitsharedinputoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input)": [[81, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input.SplitSharedInputOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"]], "stripequivalentnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes)": [[82, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes.StripEquivalentNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"]], "stripunusednodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes)": [[83, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes.StripUnusedNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"]], "switchoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer)": [[84, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer.SwitchOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"]], "graphrewriterbase (class in neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base)": [[85, "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base.GraphRewriterBase"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"]], "freezefakequantopoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant)": [[87, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant.FreezeFakeQuantOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"]], "freezevaluetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value)": [[88, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"]], "freezevaluewithoutcalibtransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib)": [[89, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"]], "fuseconvredundantdequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.FuseConvRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "fuseconvrequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize.FuseConvRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"]], "fusematmulredundantdequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize)": [[92, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.FuseMatMulRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "fusematmulrequantizedequantizenewapitransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[93, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeNewAPITransformer"]], "fusematmulrequantizedequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[93, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeTransformer"]], "fusematmulrequantizenewapitransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[93, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeNewAPITransformer"]], "fusematmulrequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[93, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"]], "metainfochangingmemopoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer)": [[95, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer.MetaInfoChangingMemOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"]], "posthostconstconverter (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter.PostHostConstConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"]], "postcseoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse.PostCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"]], "quantizedrnnconverter (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert.QuantizedRNNConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"]], "scalepropagationtransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation.ScaleProPagationTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"]], "onnxgraph (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"]], "onnxnode (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node)": [[102, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"]], "onnxopschema (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.OnnxOpSchema"]], "get_max_supported_opset_version() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.get_max_supported_opset_version"]], "get_schema() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.get_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"]], "seqtype (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.SeqType"]], "add_port_to_name() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.add_port_to_name"]], "are_shapes_equal() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.are_shapes_equal"]], "assert_error() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.assert_error"]], "compute_const_folding_using_tf() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.compute_const_folding_using_tf"]], "convert_tensorflow_tensor_to_onnx() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.convert_tensorflow_tensor_to_onnx"]], "find_opset() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.find_opset"]], "get_index_from_strided_slice_of_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_index_from_strided_slice_of_shape"]], "get_subgraphs_from_onnx() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_subgraphs_from_onnx"]], "get_tensorflow_node_attr() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_node_attr"]], "get_tensorflow_node_shape_attr() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_node_shape_attr"]], "get_tensorflow_tensor_data() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_tensor_data"]], "get_tensorflow_tensor_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_tensor_shape"]], "infer_onnx_shape_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.infer_onnx_shape_dtype"]], "initialize_name_counter() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.initialize_name_counter"]], "is_list_or_tuple() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.is_list_or_tuple"]], "is_onnx_domain() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.is_onnx_domain"]], "make_onnx_inputs_outputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.make_onnx_inputs_outputs"]], "make_onnx_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.make_onnx_shape"]], "map_numpy_to_onnx_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_numpy_to_onnx_dtype"]], "map_onnx_to_numpy_type() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_onnx_to_numpy_type"]], "map_tensorflow_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_tensorflow_dtype"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"]], "read_tensorflow_node_attrs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.read_tensorflow_node_attrs"]], "save_protobuf() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.save_protobuf"]], "set_name() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.set_name"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"]], "generategraphwithqdqpattern (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern)": [[106, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern.GenerateGraphWithQDQPattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"]], "mergeduplicatedqdqoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq)": [[107, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq.MergeDuplicatedQDQOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "shareqdqforitexypatternoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern)": [[108, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern.ShareQDQForItexYPatternOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "graphanalyzer (class in neural_compressor.adaptor.tf_utils.graph_util)": [[109, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer"]], "graphrewriterhelper (class in neural_compressor.adaptor.tf_utils.graph_util)": [[109, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper"]], "neural_compressor.adaptor.tf_utils.graph_util": [[109, "module-neural_compressor.adaptor.tf_utils.graph_util"]], "neural_compressor.adaptor.tf_utils": [[110, "module-neural_compressor.adaptor.tf_utils"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[111, "module-neural_compressor.adaptor.tf_utils.quantize_graph"]], "fakequantize (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize)": [[112, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantize"]], "fakequantizebase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize)": [[112, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantizeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[112, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"]], "quantizeconfig (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config)": [[114, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"]], "init_quantize_config() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper)": [[115, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper.init_quantize_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"]], "qat_clone_function() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper)": [[115, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper.qat_clone_function"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"]], "config_quantizable_layers() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer)": [[117, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer.config_quantizable_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "quantizelayeradd (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add)": [[118, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add.QuantizeLayerAdd"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "quantizelayerbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base)": [[119, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base.QuantizeLayerBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "quantizelayerbatchnormalization (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn)": [[120, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn.QuantizeLayerBatchNormalization"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "quantizewrapper (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper)": [[121, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapper"]], "quantizewrapperbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper)": [[121, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn)": [[122, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2)": [[123, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv)": [[124, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"]], "fusenodestartwithdeconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv)": [[125, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"]], "fusenodestartwithfusedinstancenorm (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in)": [[126, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"]], "fusenodestartwithmatmul (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul)": [[127, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"]], "fusenodestartwithpooling (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling)": [[128, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"]], "optimizeqdqgraph (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq)": [[130, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.OptimizeQDQGraph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"]], "quantizegraphbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base)": [[131, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase"]], "quantizenodebase (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base)": [[131, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn)": [[132, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2)": [[133, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv)": [[134, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"]], "quantizegraphforintel (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu)": [[135, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu.QuantizeGraphForIntel"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[135, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"]], "fusenodestartwithmatmul (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul)": [[136, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"]], "fusenodestartwithpooling (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling)": [[137, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[137, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"]], "quantizegraphhelper (class in neural_compressor.adaptor.tf_utils.quantize_graph_common)": [[138, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[138, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"]], "smoothquantcalibration (class in neural_compressor.adaptor.tf_utils.smooth_quant_calibration)": [[139, "neural_compressor.adaptor.tf_utils.smooth_quant_calibration.SmoothQuantCalibration"]], "neural_compressor.adaptor.tf_utils.smooth_quant_calibration": [[139, "module-neural_compressor.adaptor.tf_utils.smooth_quant_calibration"]], "smoothquantscaler (class in neural_compressor.adaptor.tf_utils.smooth_quant_scaler)": [[140, "neural_compressor.adaptor.tf_utils.smooth_quant_scaler.SmoothQuantScaler"]], "neural_compressor.adaptor.tf_utils.smooth_quant_scaler": [[140, "module-neural_compressor.adaptor.tf_utils.smooth_quant_scaler"]], "tensorflowqdqtoonnxqdqconverter (class in neural_compressor.adaptor.tf_utils.tf2onnx_converter)": [[141, "neural_compressor.adaptor.tf_utils.tf2onnx_converter.TensorflowQDQToOnnxQDQConverter"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[141, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"]], "biascorrection (class in neural_compressor.adaptor.tf_utils.transform_graph.bias_correction)": [[142, "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction.BiasCorrection"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[142, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"]], "graphtransformbase (class in neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base)": [[143, "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.GraphTransformBase"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[143, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[144, "module-neural_compressor.adaptor.tf_utils.transform_graph"]], "insertlogging (class in neural_compressor.adaptor.tf_utils.transform_graph.insert_logging)": [[145, "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging.InsertLogging"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[145, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"]], "rerangequantizedconcat (class in neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat)": [[146, "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat.RerangeQuantizedConcat"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[146, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"]], "collate_tf_preds() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.collate_tf_preds"]], "disable_random() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.disable_random"]], "fix_ref_type_of_graph_def() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.fix_ref_type_of_graph_def"]], "generate_feed_dict() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.generate_feed_dict"]], "get_estimator_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.get_estimator_graph"]], "get_graph_def() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.get_graph_def"]], "get_input_output_node_names() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.get_input_output_node_names"]], "get_model_input_shape() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.get_model_input_shape"]], "get_tensor_by_name() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.get_tensor_by_name"]], "get_tensor_val_from_graph_node() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.get_tensor_val_from_graph_node"]], "get_weight_from_input_tensor() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.get_weight_from_input_tensor"]], "int8_node_name_reverse() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.int8_node_name_reverse"]], "is_ckpt_format() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.is_ckpt_format"]], "is_saved_model_format() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.is_saved_model_format"]], "iterator_sess_run() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.iterator_sess_run"]], "neural_compressor.adaptor.tf_utils.util": [[147, "module-neural_compressor.adaptor.tf_utils.util"]], "read_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.read_graph"]], "strip_equivalent_nodes() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.strip_equivalent_nodes"]], "strip_unused_nodes() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.strip_unused_nodes"]], "tf_diagnosis_helper() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.tf_diagnosis_helper"]], "version1_eq_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.version1_eq_version2"]], "version1_gt_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.version1_gt_version2"]], "version1_gte_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.version1_gte_version2"]], "version1_lt_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.version1_lt_version2"]], "version1_lte_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.version1_lte_version2"]], "write_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.write_graph"]], "bf16modulewrapper (class in neural_compressor.adaptor.torch_utils.bf16_convert)": [[148, "neural_compressor.adaptor.torch_utils.bf16_convert.BF16ModuleWrapper"]], "convert() (in module neural_compressor.adaptor.torch_utils.bf16_convert)": [[148, "neural_compressor.adaptor.torch_utils.bf16_convert.Convert"]], "bf16_symbolic_trace() (in module neural_compressor.adaptor.torch_utils.bf16_convert)": [[148, "neural_compressor.adaptor.torch_utils.bf16_convert.bf16_symbolic_trace"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[148, "module-neural_compressor.adaptor.torch_utils.bf16_convert"]], "gptq (class in neural_compressor.adaptor.torch_utils.gptq)": [[149, "neural_compressor.adaptor.torch_utils.gptq.GPTQ"]], "gptquantizer (class in neural_compressor.adaptor.torch_utils.gptq)": [[149, "neural_compressor.adaptor.torch_utils.gptq.GPTQuantizer"]], "find_layers() (in module neural_compressor.adaptor.torch_utils.gptq)": [[149, "neural_compressor.adaptor.torch_utils.gptq.find_layers"]], "find_layers_name() (in module neural_compressor.adaptor.torch_utils.gptq)": [[149, "neural_compressor.adaptor.torch_utils.gptq.find_layers_name"]], "is_leaf() (in module neural_compressor.adaptor.torch_utils.gptq)": [[149, "neural_compressor.adaptor.torch_utils.gptq.is_leaf"]], "log_quantizable_layers_per_transformer() (in module neural_compressor.adaptor.torch_utils.gptq)": [[149, "neural_compressor.adaptor.torch_utils.gptq.log_quantizable_layers_per_transformer"]], "neural_compressor.adaptor.torch_utils.gptq": [[149, "module-neural_compressor.adaptor.torch_utils.gptq"]], "quantize() (in module neural_compressor.adaptor.torch_utils.gptq)": [[149, "neural_compressor.adaptor.torch_utils.gptq.quantize"]], "trace_gptq_target_blocks() (in module neural_compressor.adaptor.torch_utils.gptq)": [[149, "neural_compressor.adaptor.torch_utils.gptq.trace_gptq_target_blocks"]], "hessiantrace (class in neural_compressor.adaptor.torch_utils.hawq_metric)": [[150, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace"]], "node_collector (class in neural_compressor.adaptor.torch_utils.hawq_metric)": [[150, "neural_compressor.adaptor.torch_utils.hawq_metric.Node_collector"]], "compare_weights() (in module neural_compressor.adaptor.torch_utils.hawq_metric)": [[150, "neural_compressor.adaptor.torch_utils.hawq_metric.compare_weights"]], "hawq_top() (in module neural_compressor.adaptor.torch_utils.hawq_metric)": [[150, "neural_compressor.adaptor.torch_utils.hawq_metric.hawq_top"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[150, "module-neural_compressor.adaptor.torch_utils.hawq_metric"]], "neural_compressor.adaptor.torch_utils": [[151, "module-neural_compressor.adaptor.torch_utils"]], "ipex_mixed_precision() (in module neural_compressor.adaptor.torch_utils.mixed_precision)": [[152, "neural_compressor.adaptor.torch_utils.mixed_precision.ipex_mixed_precision"]], "neural_compressor.adaptor.torch_utils.mixed_precision": [[152, "module-neural_compressor.adaptor.torch_utils.mixed_precision"]], "fakeaffinetensorquantfunction (class in neural_compressor.adaptor.torch_utils.model_wrapper)": [[153, "neural_compressor.adaptor.torch_utils.model_wrapper.FakeAffineTensorQuantFunction"]], "teqlinearfakequant (class in neural_compressor.adaptor.torch_utils.model_wrapper)": [[153, "neural_compressor.adaptor.torch_utils.model_wrapper.TEQLinearFakeQuant"]], "teqmullinear (class in neural_compressor.adaptor.torch_utils.model_wrapper)": [[153, "neural_compressor.adaptor.torch_utils.model_wrapper.TEQMulLinear"]], "neural_compressor.adaptor.torch_utils.model_wrapper": [[153, "module-neural_compressor.adaptor.torch_utils.model_wrapper"]], "transformerbasedmodelblockpatterndetector (class in neural_compressor.adaptor.torch_utils.pattern_detector)": [[154, "neural_compressor.adaptor.torch_utils.pattern_detector.TransformerBasedModelBlockPatternDetector"]], "neural_compressor.adaptor.torch_utils.pattern_detector": [[154, "module-neural_compressor.adaptor.torch_utils.pattern_detector"]], "graphtrace (class in neural_compressor.adaptor.torch_utils.smooth_quant)": [[155, "neural_compressor.adaptor.torch_utils.smooth_quant.GraphTrace"]], "torchsmoothquant (class in neural_compressor.adaptor.torch_utils.smooth_quant)": [[155, "neural_compressor.adaptor.torch_utils.smooth_quant.TorchSmoothQuant"]], "get_module() (in module neural_compressor.adaptor.torch_utils.smooth_quant)": [[155, "neural_compressor.adaptor.torch_utils.smooth_quant.get_module"]], "neural_compressor.adaptor.torch_utils.smooth_quant": [[155, "module-neural_compressor.adaptor.torch_utils.smooth_quant"]], "set_module() (in module neural_compressor.adaptor.torch_utils.smooth_quant)": [[155, "neural_compressor.adaptor.torch_utils.smooth_quant.set_module"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[156, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"]], "symbolic_trace() (in module neural_compressor.adaptor.torch_utils.symbolic_trace)": [[156, "neural_compressor.adaptor.torch_utils.symbolic_trace.symbolic_trace"]], "trace_and_fuse_sub_graph() (in module neural_compressor.adaptor.torch_utils.symbolic_trace)": [[156, "neural_compressor.adaptor.torch_utils.symbolic_trace.trace_and_fuse_sub_graph"]], "tequantizer (class in neural_compressor.adaptor.torch_utils.teq)": [[157, "neural_compressor.adaptor.torch_utils.teq.TEQuantizer"]], "neural_compressor.adaptor.torch_utils.teq": [[157, "module-neural_compressor.adaptor.torch_utils.teq"]], "append_attr() (in module neural_compressor.adaptor.torch_utils.util)": [[158, "neural_compressor.adaptor.torch_utils.util.append_attr"]], "auto_copy() (in module neural_compressor.adaptor.torch_utils.util)": [[158, "neural_compressor.adaptor.torch_utils.util.auto_copy"]], "calculate_quant_min_max() (in module neural_compressor.adaptor.torch_utils.util)": [[158, "neural_compressor.adaptor.torch_utils.util.calculate_quant_min_max"]], "check_cfg_and_qconfig() (in module neural_compressor.adaptor.torch_utils.util)": [[158, "neural_compressor.adaptor.torch_utils.util.check_cfg_and_qconfig"]], "collate_torch_preds() (in module neural_compressor.adaptor.torch_utils.util)": [[158, "neural_compressor.adaptor.torch_utils.util.collate_torch_preds"]], "collect_weight_info() (in module neural_compressor.adaptor.torch_utils.util)": [[158, "neural_compressor.adaptor.torch_utils.util.collect_weight_info"]], "fetch_module() (in module neural_compressor.adaptor.torch_utils.util)": [[158, "neural_compressor.adaptor.torch_utils.util.fetch_module"]], "generate_activation_observer() (in module neural_compressor.adaptor.torch_utils.util)": [[158, "neural_compressor.adaptor.torch_utils.util.generate_activation_observer"]], "get_depth() (in module neural_compressor.adaptor.torch_utils.util)": [[158, "neural_compressor.adaptor.torch_utils.util.get_depth"]], "get_dict_at_depth() (in module neural_compressor.adaptor.torch_utils.util)": [[158, "neural_compressor.adaptor.torch_utils.util.get_dict_at_depth"]], "get_element_under_depth() (in module neural_compressor.adaptor.torch_utils.util)": [[158, "neural_compressor.adaptor.torch_utils.util.get_element_under_depth"]], "get_embedding_contiguous() (in module neural_compressor.adaptor.torch_utils.util)": [[158, "neural_compressor.adaptor.torch_utils.util.get_embedding_contiguous"]], "get_example_input() (in module neural_compressor.adaptor.torch_utils.util)": [[158, "neural_compressor.adaptor.torch_utils.util.get_example_input"]], "get_fallback_order() (in module neural_compressor.adaptor.torch_utils.util)": [[158, "neural_compressor.adaptor.torch_utils.util.get_fallback_order"]], "get_mse_order_per_fp32() (in module neural_compressor.adaptor.torch_utils.util)": [[158, "neural_compressor.adaptor.torch_utils.util.get_mse_order_per_fp32"]], "get_mse_order_per_int8() (in module neural_compressor.adaptor.torch_utils.util)": [[158, "neural_compressor.adaptor.torch_utils.util.get_mse_order_per_int8"]], "get_op_type_by_name() (in module neural_compressor.adaptor.torch_utils.util)": [[158, "neural_compressor.adaptor.torch_utils.util.get_op_type_by_name"]], "get_quantizable_ops_from_cfgs() (in module neural_compressor.adaptor.torch_utils.util)": [[158, "neural_compressor.adaptor.torch_utils.util.get_quantizable_ops_from_cfgs"]], "get_torch_version() (in module neural_compressor.adaptor.torch_utils.util)": [[158, "neural_compressor.adaptor.torch_utils.util.get_torch_version"]], "input2tuple() (in module neural_compressor.adaptor.torch_utils.util)": [[158, "neural_compressor.adaptor.torch_utils.util.input2tuple"]], "is_fused_module() (in module neural_compressor.adaptor.torch_utils.util)": [[158, "neural_compressor.adaptor.torch_utils.util.is_fused_module"]], "match_datatype_pattern() (in module neural_compressor.adaptor.torch_utils.util)": [[158, "neural_compressor.adaptor.torch_utils.util.match_datatype_pattern"]], "neural_compressor.adaptor.torch_utils.util": [[158, "module-neural_compressor.adaptor.torch_utils.util"]], "paser_cfgs() (in module neural_compressor.adaptor.torch_utils.util)": [[158, "neural_compressor.adaptor.torch_utils.util.paser_cfgs"]], "set_module() (in module neural_compressor.adaptor.torch_utils.util)": [[158, "neural_compressor.adaptor.torch_utils.util.set_module"]], "simple_inference() (in module neural_compressor.adaptor.torch_utils.util)": [[158, "neural_compressor.adaptor.torch_utils.util.simple_inference"]], "update_sq_scale() (in module neural_compressor.adaptor.torch_utils.util)": [[158, "neural_compressor.adaptor.torch_utils.util.update_sq_scale"]], "awq_quantize() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[159, "neural_compressor.adaptor.torch_utils.weight_only.awq_quantize"]], "get_module_input_output() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[159, "neural_compressor.adaptor.torch_utils.weight_only.get_module_input_output"]], "gptq_quantize() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[159, "neural_compressor.adaptor.torch_utils.weight_only.gptq_quantize"]], "neural_compressor.adaptor.torch_utils.weight_only": [[159, "module-neural_compressor.adaptor.torch_utils.weight_only"]], "qdq_weight_actor() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[159, "neural_compressor.adaptor.torch_utils.weight_only.qdq_weight_actor"]], "qdq_weight_asym() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[159, "neural_compressor.adaptor.torch_utils.weight_only.qdq_weight_asym"]], "qdq_weight_sym() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[159, "neural_compressor.adaptor.torch_utils.weight_only.qdq_weight_sym"]], "quant_weight() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[159, "neural_compressor.adaptor.torch_utils.weight_only.quant_weight"]], "rtn_quantize() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[159, "neural_compressor.adaptor.torch_utils.weight_only.rtn_quantize"]], "teq_quantize() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[159, "neural_compressor.adaptor.torch_utils.weight_only.teq_quantize"]], "algorithms (class in neural_compressor.algorithm.algorithm)": [[160, "neural_compressor.algorithm.algorithm.ALGORITHMS"]], "algorithm (class in neural_compressor.algorithm.algorithm)": [[160, "neural_compressor.algorithm.algorithm.Algorithm"]], "algorithmscheduler (class in neural_compressor.algorithm.algorithm)": [[160, "neural_compressor.algorithm.algorithm.AlgorithmScheduler"]], "algorithm_registry() (in module neural_compressor.algorithm.algorithm)": [[160, "neural_compressor.algorithm.algorithm.algorithm_registry"]], "neural_compressor.algorithm.algorithm": [[160, "module-neural_compressor.algorithm.algorithm"]], "fastbiascorrection (class in neural_compressor.algorithm.fast_bias_correction)": [[161, "neural_compressor.algorithm.fast_bias_correction.FastBiasCorrection"]], "neural_compressor.algorithm.fast_bias_correction": [[161, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm": [[162, "module-neural_compressor.algorithm"]], "smoothquant (class in neural_compressor.algorithm.smooth_quant)": [[163, "neural_compressor.algorithm.smooth_quant.SmoothQuant"]], "neural_compressor.algorithm.smooth_quant": [[163, "module-neural_compressor.algorithm.smooth_quant"]], "weightcorrection (class in neural_compressor.algorithm.weight_correction)": [[164, "neural_compressor.algorithm.weight_correction.WeightCorrection"]], "neural_compressor.algorithm.weight_correction": [[164, "module-neural_compressor.algorithm.weight_correction"]], "benchmark_with_raw_cmd() (in module neural_compressor.benchmark)": [[165, "neural_compressor.benchmark.benchmark_with_raw_cmd"]], "call_one() (in module neural_compressor.benchmark)": [[165, "neural_compressor.benchmark.call_one"]], "config_instance() (in module neural_compressor.benchmark)": [[165, "neural_compressor.benchmark.config_instance"]], "fit() (in module neural_compressor.benchmark)": [[165, "neural_compressor.benchmark.fit"]], "generate_prefix() (in module neural_compressor.benchmark)": [[165, "neural_compressor.benchmark.generate_prefix"]], "get_architecture() (in module neural_compressor.benchmark)": [[165, "neural_compressor.benchmark.get_architecture"]], "get_bounded_threads() (in module neural_compressor.benchmark)": [[165, "neural_compressor.benchmark.get_bounded_threads"]], "get_core_ids() (in module neural_compressor.benchmark)": [[165, "neural_compressor.benchmark.get_core_ids"]], "get_physical_ids() (in module neural_compressor.benchmark)": [[165, "neural_compressor.benchmark.get_physical_ids"]], "get_threads() (in module neural_compressor.benchmark)": [[165, "neural_compressor.benchmark.get_threads"]], "get_threads_per_core() (in module neural_compressor.benchmark)": [[165, "neural_compressor.benchmark.get_threads_per_core"]], "neural_compressor.benchmark": [[165, "module-neural_compressor.benchmark"]], "profile() (in module neural_compressor.benchmark)": [[165, "neural_compressor.benchmark.profile"]], "run_instance() (in module neural_compressor.benchmark)": [[165, "neural_compressor.benchmark.run_instance"]], "set_all_env_var() (in module neural_compressor.benchmark)": [[165, "neural_compressor.benchmark.set_all_env_var"]], "set_env_var() (in module neural_compressor.benchmark)": [[165, "neural_compressor.benchmark.set_env_var"]], "summary_benchmark() (in module neural_compressor.benchmark)": [[165, "neural_compressor.benchmark.summary_benchmark"]], "basecallbacks (class in neural_compressor.compression.callbacks)": [[166, "neural_compressor.compression.callbacks.BaseCallbacks"]], "distillationcallbacks (class in neural_compressor.compression.callbacks)": [[166, "neural_compressor.compression.callbacks.DistillationCallbacks"]], "pruningcallbacks (class in neural_compressor.compression.callbacks)": [[166, "neural_compressor.compression.callbacks.PruningCallbacks"]], "quantizationawaretrainingcallbacks (class in neural_compressor.compression.callbacks)": [[166, "neural_compressor.compression.callbacks.QuantizationAwareTrainingCallbacks"]], "_epoch_ran (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[166, "neural_compressor.compression.callbacks.DistillationCallbacks._epoch_ran"]], "best_model (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[166, "neural_compressor.compression.callbacks.DistillationCallbacks.best_model"]], "best_score (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[166, "neural_compressor.compression.callbacks.DistillationCallbacks.best_score"]], "eval_frequency (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[166, "neural_compressor.compression.callbacks.DistillationCallbacks.eval_frequency"]], "neural_compressor.compression.callbacks": [[166, "module-neural_compressor.compression.callbacks"]], "criterions (class in neural_compressor.compression.distillation.criterions)": [[167, "neural_compressor.compression.distillation.criterions.Criterions"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[167, "neural_compressor.compression.distillation.criterions.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationframework (class in neural_compressor.compression.distillation.criterions)": [[167, "neural_compressor.compression.distillation.criterions.KnowledgeDistillationFramework"]], "knowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[167, "neural_compressor.compression.distillation.criterions.KnowledgeDistillationLoss"]], "pytorchcriterions (class in neural_compressor.compression.distillation.criterions)": [[167, "neural_compressor.compression.distillation.criterions.PyTorchCriterions"]], "pytorchintermediatelayersknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[167, "neural_compressor.compression.distillation.criterions.PyTorchIntermediateLayersKnowledgeDistillationLoss"]], "pytorchintermediatelayersknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[167, "neural_compressor.compression.distillation.criterions.PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"]], "pytorchknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[167, "neural_compressor.compression.distillation.criterions.PyTorchKnowledgeDistillationLoss"]], "pytorchknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[167, "neural_compressor.compression.distillation.criterions.PyTorchKnowledgeDistillationLossWrapper"]], "pytorchselfknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[167, "neural_compressor.compression.distillation.criterions.PyTorchSelfKnowledgeDistillationLoss"]], "pytorchselfknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[167, "neural_compressor.compression.distillation.criterions.PyTorchSelfKnowledgeDistillationLossWrapper"]], "selfknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[167, "neural_compressor.compression.distillation.criterions.SelfKnowledgeDistillationLoss"]], "tensorflowcriterions (class in neural_compressor.compression.distillation.criterions)": [[167, "neural_compressor.compression.distillation.criterions.TensorflowCriterions"]], "tensorflowknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[167, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLoss"]], "tensorflowknowledgedistillationlossexternal (class in neural_compressor.compression.distillation.criterions)": [[167, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLossExternal"]], "tensorflowknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[167, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLossWrapper"]], "criterion_registry() (in module neural_compressor.compression.distillation.criterions)": [[167, "neural_compressor.compression.distillation.criterions.criterion_registry"]], "neural_compressor.compression.distillation.criterions": [[167, "module-neural_compressor.compression.distillation.criterions"]], "neural_compressor.compression.distillation": [[168, "module-neural_compressor.compression.distillation"]], "neural_compressor.compression": [[169, "module-neural_compressor.compression"]], "gradientcriterion (class in neural_compressor.compression.pruner.criteria)": [[170, "neural_compressor.compression.pruner.criteria.GradientCriterion"]], "magnitudecriterion (class in neural_compressor.compression.pruner.criteria)": [[170, "neural_compressor.compression.pruner.criteria.MagnitudeCriterion"]], "pruningcriterion (class in neural_compressor.compression.pruner.criteria)": [[170, "neural_compressor.compression.pruner.criteria.PruningCriterion"]], "retrainfreecriterion (class in neural_compressor.compression.pruner.criteria)": [[170, "neural_compressor.compression.pruner.criteria.RetrainFreeCriterion"]], "snipcriterion (class in neural_compressor.compression.pruner.criteria)": [[170, "neural_compressor.compression.pruner.criteria.SnipCriterion"]], "snipmomentumblockcriterion (class in neural_compressor.compression.pruner.criteria)": [[170, "neural_compressor.compression.pruner.criteria.SnipMomentumBlockCriterion"]], "snipmomentumcriterion (class in neural_compressor.compression.pruner.criteria)": [[170, "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion"]], "get_criterion() (in module neural_compressor.compression.pruner.criteria)": [[170, "neural_compressor.compression.pruner.criteria.get_criterion"]], "neural_compressor.compression.pruner.criteria": [[170, "module-neural_compressor.compression.pruner.criteria"]], "register_criterion() (in module neural_compressor.compression.pruner.criteria)": [[170, "neural_compressor.compression.pruner.criteria.register_criterion"]], "scores (neural_compressor.compression.pruner.criteria.gradientcriterion attribute)": [[170, "neural_compressor.compression.pruner.criteria.GradientCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.magnitudecriterion attribute)": [[170, "neural_compressor.compression.pruner.criteria.MagnitudeCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.pruningcriterion attribute)": [[170, "neural_compressor.compression.pruner.criteria.PruningCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.retrainfreecriterion attribute)": [[170, "neural_compressor.compression.pruner.criteria.RetrainFreeCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.snipcriterion attribute)": [[170, "neural_compressor.compression.pruner.criteria.SnipCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.snipmomentumblockcriterion attribute)": [[170, "neural_compressor.compression.pruner.criteria.SnipMomentumBlockCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.snipmomentumcriterion attribute)": [[170, "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion.scores"]], "neural_compressor.compression.pruner": [[171, "module-neural_compressor.compression.pruner"]], "generate_ffn2_pruning_config() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[172, "neural_compressor.compression.pruner.model_slim.auto_slim.generate_ffn2_pruning_config"]], "generate_mha_pruning_config() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[172, "neural_compressor.compression.pruner.model_slim.auto_slim.generate_mha_pruning_config"]], "model_slim() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[172, "neural_compressor.compression.pruner.model_slim.auto_slim.model_slim"]], "model_slim_ffn2() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[172, "neural_compressor.compression.pruner.model_slim.auto_slim.model_slim_ffn2"]], "model_slim_mha() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[172, "neural_compressor.compression.pruner.model_slim.auto_slim.model_slim_mha"]], "neural_compressor.compression.pruner.model_slim.auto_slim": [[172, "module-neural_compressor.compression.pruner.model_slim.auto_slim"]], "parse_auto_slim_config() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[172, "neural_compressor.compression.pruner.model_slim.auto_slim.parse_auto_slim_config"]], "neural_compressor.compression.pruner.model_slim": [[173, "module-neural_compressor.compression.pruner.model_slim"]], "classifierheadsearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[174, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher"]], "classifierheadsearchertf (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[174, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF"]], "jitbasicsearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[174, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher"]], "linear2linearsearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[174, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher"]], "recipesearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[174, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher"]], "selfmhasearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[174, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher"]], "current_pattern (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[174, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.current_pattern"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[174, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearchertf attribute)": [[174, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[174, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[174, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[174, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.device"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[174, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearchertf attribute)": [[174, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[174, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[174, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[174, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.flatten_static_graph"]], "get_attributes() (in module neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[174, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.get_attributes"]], "get_common_module() (in module neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[174, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.get_common_module"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[174, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearchertf attribute)": [[174, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[174, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[174, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[174, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[174, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.model"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer": [[174, "module-neural_compressor.compression.pruner.model_slim.pattern_analyzer"]], "print_iterables() (in module neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[174, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.print_iterables"]], "recipe (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[174, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.recipe"]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[174, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.searching_results"]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[174, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.searching_results"]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[174, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.searching_results"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[174, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearchertf attribute)": [[174, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[174, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[174, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[174, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.static_graph"]], "target_layers (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[174, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.target_layers"]], "target_layers (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[174, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.target_layers"]], "target_op_lut (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[174, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.target_op_lut"]], "targets (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[174, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.targets"]], "linearcompression (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[175, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression"]], "linearcompressioniterator (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[175, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompressionIterator"]], "postcompressionutils (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[175, "neural_compressor.compression.pruner.model_slim.weight_slim.PostCompressionUtils"]], "device (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompression attribute)": [[175, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression.device"]], "layer_1 (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompression attribute)": [[175, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression.layer_1"]], "layer_2 (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompression attribute)": [[175, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression.layer_2"]], "linear_patterns (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompressioniterator attribute)": [[175, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompressionIterator.linear_patterns"]], "neural_compressor.compression.pruner.model_slim.weight_slim": [[175, "module-neural_compressor.compression.pruner.model_slim.weight_slim"]], "basepattern (class in neural_compressor.compression.pruner.patterns.base)": [[176, "neural_compressor.compression.pruner.patterns.base.BasePattern"]], "kerasbasepattern (class in neural_compressor.compression.pruner.patterns.base)": [[176, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern"]], "pytorchbasepattern (class in neural_compressor.compression.pruner.patterns.base)": [[176, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern"]], "config (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[176, "neural_compressor.compression.pruner.patterns.base.BasePattern.config"]], "config (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[176, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.config"]], "config (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[176, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.config"]], "invalid_layers (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[176, "neural_compressor.compression.pruner.patterns.base.BasePattern.invalid_layers"]], "invalid_layers (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[176, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.invalid_layers"]], "invalid_layers (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[176, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.invalid_layers"]], "is_global (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[176, "neural_compressor.compression.pruner.patterns.base.BasePattern.is_global"]], "is_global (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[176, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.is_global"]], "is_global (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[176, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.is_global"]], "keep_mask_layers (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[176, "neural_compressor.compression.pruner.patterns.base.BasePattern.keep_mask_layers"]], "keep_mask_layers (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[176, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.keep_mask_layers"]], "keep_mask_layers (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[176, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.keep_mask_layers"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[176, "neural_compressor.compression.pruner.patterns.base.BasePattern.max_sparsity_ratio_per_op"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[176, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.max_sparsity_ratio_per_op"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[176, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.max_sparsity_ratio_per_op"]], "min_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[176, "neural_compressor.compression.pruner.patterns.base.BasePattern.min_sparsity_ratio_per_op"]], "min_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[176, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.min_sparsity_ratio_per_op"]], "min_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[176, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.min_sparsity_ratio_per_op"]], "modules (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[176, "neural_compressor.compression.pruner.patterns.base.BasePattern.modules"]], "modules (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[176, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.modules"]], "modules (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[176, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.modules"]], "neural_compressor.compression.pruner.patterns.base": [[176, "module-neural_compressor.compression.pruner.patterns.base"]], "pattern (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[176, "neural_compressor.compression.pruner.patterns.base.BasePattern.pattern"]], "pattern (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[176, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.pattern"]], "pattern (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[176, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.pattern"]], "register_pattern() (in module neural_compressor.compression.pruner.patterns.base)": [[176, "neural_compressor.compression.pruner.patterns.base.register_pattern"]], "target_sparsity (neural_compressor.compression.pruner.patterns.base.basepattern attribute)": [[176, "neural_compressor.compression.pruner.patterns.base.BasePattern.target_sparsity"]], "target_sparsity (neural_compressor.compression.pruner.patterns.base.kerasbasepattern attribute)": [[176, "neural_compressor.compression.pruner.patterns.base.KerasBasePattern.target_sparsity"]], "target_sparsity (neural_compressor.compression.pruner.patterns.base.pytorchbasepattern attribute)": [[176, "neural_compressor.compression.pruner.patterns.base.PytorchBasePattern.target_sparsity"]], "get_pattern() (in module neural_compressor.compression.pruner.patterns)": [[177, "neural_compressor.compression.pruner.patterns.get_pattern"]], "neural_compressor.compression.pruner.patterns": [[177, "module-neural_compressor.compression.pruner.patterns"]], "m (neural_compressor.compression.pruner.patterns.mha.patternmha attribute)": [[178, "neural_compressor.compression.pruner.patterns.mha.PatternMHA.M"]], "n (neural_compressor.compression.pruner.patterns.mha.patternmha attribute)": [[178, "neural_compressor.compression.pruner.patterns.mha.PatternMHA.N"]], "patternmha (class in neural_compressor.compression.pruner.patterns.mha)": [[178, "neural_compressor.compression.pruner.patterns.mha.PatternMHA"]], "neural_compressor.compression.pruner.patterns.mha": [[178, "module-neural_compressor.compression.pruner.patterns.mha"]], "m (neural_compressor.compression.pruner.patterns.ninm.pytorchpatternninm attribute)": [[179, "neural_compressor.compression.pruner.patterns.ninm.PytorchPatternNInM.M"]], "n (neural_compressor.compression.pruner.patterns.ninm.pytorchpatternninm attribute)": [[179, "neural_compressor.compression.pruner.patterns.ninm.PytorchPatternNInM.N"]], "pytorchpatternninm (class in neural_compressor.compression.pruner.patterns.ninm)": [[179, "neural_compressor.compression.pruner.patterns.ninm.PytorchPatternNInM"]], "neural_compressor.compression.pruner.patterns.ninm": [[179, "module-neural_compressor.compression.pruner.patterns.ninm"]], "keraspatternnxm (class in neural_compressor.compression.pruner.patterns.nxm)": [[180, "neural_compressor.compression.pruner.patterns.nxm.KerasPatternNxM"]], "pytorchpatternnxm (class in neural_compressor.compression.pruner.patterns.nxm)": [[180, "neural_compressor.compression.pruner.patterns.nxm.PytorchPatternNxM"]], "block_size (neural_compressor.compression.pruner.patterns.nxm.keraspatternnxm attribute)": [[180, "neural_compressor.compression.pruner.patterns.nxm.KerasPatternNxM.block_size"]], "block_size (neural_compressor.compression.pruner.patterns.nxm.pytorchpatternnxm attribute)": [[180, "neural_compressor.compression.pruner.patterns.nxm.PytorchPatternNxM.block_size"]], "neural_compressor.compression.pruner.patterns.nxm": [[180, "module-neural_compressor.compression.pruner.patterns.nxm"]], "basepruner (class in neural_compressor.compression.pruner.pruners.base)": [[181, "neural_compressor.compression.pruner.pruners.base.BasePruner"]], "kerasbasepruner (class in neural_compressor.compression.pruner.pruners.base)": [[181, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner"]], "pytorchbasepruner (class in neural_compressor.compression.pruner.pruners.base)": [[181, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner"]], "config (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[181, "neural_compressor.compression.pruner.pruners.base.BasePruner.config"]], "config (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[181, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.config"]], "config (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[181, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.config"]], "current_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[181, "neural_compressor.compression.pruner.pruners.base.BasePruner.current_sparsity_ratio"]], "current_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[181, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.current_sparsity_ratio"]], "current_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[181, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.current_sparsity_ratio"]], "end_step (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[181, "neural_compressor.compression.pruner.pruners.base.BasePruner.end_step"]], "end_step (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[181, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.end_step"]], "end_step (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[181, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.end_step"]], "global_step (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[181, "neural_compressor.compression.pruner.pruners.base.BasePruner.global_step"]], "global_step (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[181, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.global_step"]], "global_step (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[181, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.global_step"]], "masks (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[181, "neural_compressor.compression.pruner.pruners.base.BasePruner.masks"]], "masks (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[181, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.masks"]], "masks (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[181, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.masks"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[181, "neural_compressor.compression.pruner.pruners.base.BasePruner.max_sparsity_ratio_per_op"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[181, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.max_sparsity_ratio_per_op"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[181, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.max_sparsity_ratio_per_op"]], "modules (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[181, "neural_compressor.compression.pruner.pruners.base.BasePruner.modules"]], "modules (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[181, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.modules"]], "modules (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[181, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.modules"]], "neural_compressor.compression.pruner.pruners.base": [[181, "module-neural_compressor.compression.pruner.pruners.base"]], "pattern (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[181, "neural_compressor.compression.pruner.pruners.base.BasePruner.pattern"]], "pattern (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[181, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.pattern"]], "pattern (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[181, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.pattern"]], "pruning_frequency (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[181, "neural_compressor.compression.pruner.pruners.base.BasePruner.pruning_frequency"]], "pruning_frequency (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[181, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.pruning_frequency"]], "pruning_frequency (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[181, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.pruning_frequency"]], "register_pruner() (in module neural_compressor.compression.pruner.pruners.base)": [[181, "neural_compressor.compression.pruner.pruners.base.register_pruner"]], "scheduler (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[181, "neural_compressor.compression.pruner.pruners.base.BasePruner.scheduler"]], "scheduler (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[181, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.scheduler"]], "scheduler (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[181, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.scheduler"]], "scores (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[181, "neural_compressor.compression.pruner.pruners.base.BasePruner.scores"]], "scores (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[181, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.scores"]], "scores (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[181, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.scores"]], "start_step (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[181, "neural_compressor.compression.pruner.pruners.base.BasePruner.start_step"]], "start_step (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[181, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.start_step"]], "start_step (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[181, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.start_step"]], "target_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.basepruner attribute)": [[181, "neural_compressor.compression.pruner.pruners.base.BasePruner.target_sparsity_ratio"]], "target_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.kerasbasepruner attribute)": [[181, "neural_compressor.compression.pruner.pruners.base.KerasBasePruner.target_sparsity_ratio"]], "target_sparsity_ratio (neural_compressor.compression.pruner.pruners.base.pytorchbasepruner attribute)": [[181, "neural_compressor.compression.pruner.pruners.base.PytorchBasePruner.target_sparsity_ratio"]], "kerasbasicpruner (class in neural_compressor.compression.pruner.pruners.basic)": [[182, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner"]], "pytorchbasicpruner (class in neural_compressor.compression.pruner.pruners.basic)": [[182, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner"]], "criterion (neural_compressor.compression.pruner.pruners.basic.kerasbasicpruner attribute)": [[182, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner.criterion"]], "criterion (neural_compressor.compression.pruner.pruners.basic.pytorchbasicpruner attribute)": [[182, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner.criterion"]], "neural_compressor.compression.pruner.pruners.basic": [[182, "module-neural_compressor.compression.pruner.pruners.basic"]], "pattern (neural_compressor.compression.pruner.pruners.basic.kerasbasicpruner attribute)": [[182, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner.pattern"]], "pattern (neural_compressor.compression.pruner.pruners.basic.pytorchbasicpruner attribute)": [[182, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner.pattern"]], "reg (neural_compressor.compression.pruner.pruners.basic.kerasbasicpruner attribute)": [[182, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner.reg"]], "reg (neural_compressor.compression.pruner.pruners.basic.pytorchbasicpruner attribute)": [[182, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner.reg"]], "scheduler (neural_compressor.compression.pruner.pruners.basic.kerasbasicpruner attribute)": [[182, "neural_compressor.compression.pruner.pruners.basic.KerasBasicPruner.scheduler"]], "scheduler (neural_compressor.compression.pruner.pruners.basic.pytorchbasicpruner attribute)": [[182, "neural_compressor.compression.pruner.pruners.basic.PytorchBasicPruner.scheduler"]], "pytorchblockmaskpruner (class in neural_compressor.compression.pruner.pruners.block_mask)": [[183, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner"]], "criterion (neural_compressor.compression.pruner.pruners.block_mask.pytorchblockmaskpruner attribute)": [[183, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner.criterion"]], "neural_compressor.compression.pruner.pruners.block_mask": [[183, "module-neural_compressor.compression.pruner.pruners.block_mask"]], "pattern (neural_compressor.compression.pruner.pruners.block_mask.pytorchblockmaskpruner attribute)": [[183, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner.pattern"]], "reg (neural_compressor.compression.pruner.pruners.block_mask.pytorchblockmaskpruner attribute)": [[183, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner.reg"]], "scheduler (neural_compressor.compression.pruner.pruners.block_mask.pytorchblockmaskpruner attribute)": [[183, "neural_compressor.compression.pruner.pruners.block_mask.PytorchBlockMaskPruner.scheduler"]], "get_pruner() (in module neural_compressor.compression.pruner.pruners)": [[184, "neural_compressor.compression.pruner.pruners.get_pruner"]], "neural_compressor.compression.pruner.pruners": [[184, "module-neural_compressor.compression.pruner.pruners"]], "parse_valid_pruner_types() (in module neural_compressor.compression.pruner.pruners)": [[184, "neural_compressor.compression.pruner.pruners.parse_valid_pruner_types"]], "pythonmultiheadattentionpruner (class in neural_compressor.compression.pruner.pruners.mha)": [[185, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner"]], "head_masks (neural_compressor.compression.pruner.pruners.mha.pythonmultiheadattentionpruner attribute)": [[185, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner.head_masks"]], "linear_layers (neural_compressor.compression.pruner.pruners.mha.pythonmultiheadattentionpruner attribute)": [[185, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner.linear_layers"]], "mha_compressions (neural_compressor.compression.pruner.pruners.mha.pythonmultiheadattentionpruner attribute)": [[185, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner.mha_compressions"]], "mha_scores (neural_compressor.compression.pruner.pruners.mha.pythonmultiheadattentionpruner attribute)": [[185, "neural_compressor.compression.pruner.pruners.mha.PythonMultiheadAttentionPruner.mha_scores"]], "neural_compressor.compression.pruner.pruners.mha": [[185, "module-neural_compressor.compression.pruner.pruners.mha"]], "pytorchpatternlockpruner (class in neural_compressor.compression.pruner.pruners.pattern_lock)": [[186, "neural_compressor.compression.pruner.pruners.pattern_lock.PytorchPatternLockPruner"]], "neural_compressor.compression.pruner.pruners.pattern_lock": [[186, "module-neural_compressor.compression.pruner.pruners.pattern_lock"]], "pytorchprogressivepruner (class in neural_compressor.compression.pruner.pruners.progressive)": [[187, "neural_compressor.compression.pruner.pruners.progressive.PytorchProgressivePruner"]], "neural_compressor.compression.pruner.pruners.progressive": [[187, "module-neural_compressor.compression.pruner.pruners.progressive"]], "pytorchretrainfreepruner (class in neural_compressor.compression.pruner.pruners.retrain_free)": [[188, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner"]], "criterion (neural_compressor.compression.pruner.pruners.retrain_free.pytorchretrainfreepruner attribute)": [[188, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner.criterion"]], "neural_compressor.compression.pruner.pruners.retrain_free": [[188, "module-neural_compressor.compression.pruner.pruners.retrain_free"]], "pattern (neural_compressor.compression.pruner.pruners.retrain_free.pytorchretrainfreepruner attribute)": [[188, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner.pattern"]], "reg (neural_compressor.compression.pruner.pruners.retrain_free.pytorchretrainfreepruner attribute)": [[188, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner.reg"]], "scheduler (neural_compressor.compression.pruner.pruners.retrain_free.pytorchretrainfreepruner attribute)": [[188, "neural_compressor.compression.pruner.pruners.retrain_free.PytorchRetrainFreePruner.scheduler"]], "basereg (class in neural_compressor.compression.pruner.regs)": [[189, "neural_compressor.compression.pruner.regs.BaseReg"]], "grouplasso (class in neural_compressor.compression.pruner.regs)": [[189, "neural_compressor.compression.pruner.regs.GroupLasso"]], "alpha (neural_compressor.compression.pruner.regs.grouplasso attribute)": [[189, "neural_compressor.compression.pruner.regs.GroupLasso.alpha"]], "get_reg() (in module neural_compressor.compression.pruner.regs)": [[189, "neural_compressor.compression.pruner.regs.get_reg"]], "get_reg_type() (in module neural_compressor.compression.pruner.regs)": [[189, "neural_compressor.compression.pruner.regs.get_reg_type"]], "neural_compressor.compression.pruner.regs": [[189, "module-neural_compressor.compression.pruner.regs"]], "reg_terms (neural_compressor.compression.pruner.regs.grouplasso attribute)": [[189, "neural_compressor.compression.pruner.regs.GroupLasso.reg_terms"]], "register_reg() (in module neural_compressor.compression.pruner.regs)": [[189, "neural_compressor.compression.pruner.regs.register_reg"]], "iterativescheduler (class in neural_compressor.compression.pruner.schedulers)": [[190, "neural_compressor.compression.pruner.schedulers.IterativeScheduler"]], "oneshotscheduler (class in neural_compressor.compression.pruner.schedulers)": [[190, "neural_compressor.compression.pruner.schedulers.OneshotScheduler"]], "pruningscheduler (class in neural_compressor.compression.pruner.schedulers)": [[190, "neural_compressor.compression.pruner.schedulers.PruningScheduler"]], "config (neural_compressor.compression.pruner.schedulers.pruningscheduler attribute)": [[190, "neural_compressor.compression.pruner.schedulers.PruningScheduler.config"]], "get_scheduler() (in module neural_compressor.compression.pruner.schedulers)": [[190, "neural_compressor.compression.pruner.schedulers.get_scheduler"]], "neural_compressor.compression.pruner.schedulers": [[190, "module-neural_compressor.compression.pruner.schedulers"]], "register_scheduler() (in module neural_compressor.compression.pruner.schedulers)": [[190, "neural_compressor.compression.pruner.schedulers.register_scheduler"]], "magnitudecriterion (class in neural_compressor.compression.pruner.tf_criteria)": [[191, "neural_compressor.compression.pruner.tf_criteria.MagnitudeCriterion"]], "pruningcriterion (class in neural_compressor.compression.pruner.tf_criteria)": [[191, "neural_compressor.compression.pruner.tf_criteria.PruningCriterion"]], "get_tf_criterion() (in module neural_compressor.compression.pruner.tf_criteria)": [[191, "neural_compressor.compression.pruner.tf_criteria.get_tf_criterion"]], "neural_compressor.compression.pruner.tf_criteria": [[191, "module-neural_compressor.compression.pruner.tf_criteria"]], "register_criterion() (in module neural_compressor.compression.pruner.tf_criteria)": [[191, "neural_compressor.compression.pruner.tf_criteria.register_criterion"]], "scores (neural_compressor.compression.pruner.tf_criteria.magnitudecriterion attribute)": [[191, "neural_compressor.compression.pruner.tf_criteria.MagnitudeCriterion.scores"]], "scores (neural_compressor.compression.pruner.tf_criteria.pruningcriterion attribute)": [[191, "neural_compressor.compression.pruner.tf_criteria.PruningCriterion.scores"]], "check_config() (in module neural_compressor.compression.pruner.utils)": [[192, "neural_compressor.compression.pruner.utils.check_config"]], "check_key_validity() (in module neural_compressor.compression.pruner.utils)": [[192, "neural_compressor.compression.pruner.utils.check_key_validity"]], "generate_pruner_config() (in module neural_compressor.compression.pruner.utils)": [[192, "neural_compressor.compression.pruner.utils.generate_pruner_config"]], "get_sparsity_ratio() (in module neural_compressor.compression.pruner.utils)": [[192, "neural_compressor.compression.pruner.utils.get_sparsity_ratio"]], "get_sparsity_ratio_tf() (in module neural_compressor.compression.pruner.utils)": [[192, "neural_compressor.compression.pruner.utils.get_sparsity_ratio_tf"]], "neural_compressor.compression.pruner.utils": [[192, "module-neural_compressor.compression.pruner.utils"]], "parse_last_linear() (in module neural_compressor.compression.pruner.utils)": [[192, "neural_compressor.compression.pruner.utils.parse_last_linear"]], "parse_last_linear_tf() (in module neural_compressor.compression.pruner.utils)": [[192, "neural_compressor.compression.pruner.utils.parse_last_linear_tf"]], "parse_to_prune() (in module neural_compressor.compression.pruner.utils)": [[192, "neural_compressor.compression.pruner.utils.parse_to_prune"]], "parse_to_prune_tf() (in module neural_compressor.compression.pruner.utils)": [[192, "neural_compressor.compression.pruner.utils.parse_to_prune_tf"]], "process_and_check_config() (in module neural_compressor.compression.pruner.utils)": [[192, "neural_compressor.compression.pruner.utils.process_and_check_config"]], "process_config() (in module neural_compressor.compression.pruner.utils)": [[192, "neural_compressor.compression.pruner.utils.process_config"]], "process_weight_config() (in module neural_compressor.compression.pruner.utils)": [[192, "neural_compressor.compression.pruner.utils.process_weight_config"]], "process_yaml_config() (in module neural_compressor.compression.pruner.utils)": [[192, "neural_compressor.compression.pruner.utils.process_yaml_config"]], "reset_none_to_default() (in module neural_compressor.compression.pruner.utils)": [[192, "neural_compressor.compression.pruner.utils.reset_none_to_default"]], "update_params() (in module neural_compressor.compression.pruner.utils)": [[192, "neural_compressor.compression.pruner.utils.update_params"]], "benchmark_conf (class in neural_compressor.conf.config)": [[193, "neural_compressor.conf.config.Benchmark_Conf"]], "conf (class in neural_compressor.conf.config)": [[193, "neural_compressor.conf.config.Conf"]], "distillation_conf (class in neural_compressor.conf.config)": [[193, "neural_compressor.conf.config.Distillation_Conf"]], "graph_optimization_conf (class in neural_compressor.conf.config)": [[193, "neural_compressor.conf.config.Graph_Optimization_Conf"]], "mixedprecision_conf (class in neural_compressor.conf.config)": [[193, "neural_compressor.conf.config.MixedPrecision_Conf"]], "nasconfig (class in neural_compressor.conf.config)": [[193, "neural_compressor.conf.config.NASConfig"]], "prunerv2 (class in neural_compressor.conf.config)": [[193, "neural_compressor.conf.config.PrunerV2"]], "pruning_conf (class in neural_compressor.conf.config)": [[193, "neural_compressor.conf.config.Pruning_Conf"]], "quantization_conf (class in neural_compressor.conf.config)": [[193, "neural_compressor.conf.config.Quantization_Conf"]], "neural_compressor.conf.config": [[193, "module-neural_compressor.conf.config"]], "dotdict (class in neural_compressor.conf.dotdict)": [[194, "neural_compressor.conf.dotdict.DotDict"]], "deep_get() (in module neural_compressor.conf.dotdict)": [[194, "neural_compressor.conf.dotdict.deep_get"]], "deep_set() (in module neural_compressor.conf.dotdict)": [[194, "neural_compressor.conf.dotdict.deep_set"]], "neural_compressor.conf.dotdict": [[194, "module-neural_compressor.conf.dotdict"]], "neural_compressor.conf": [[195, "module-neural_compressor.conf"]], "accuracycriterion (class in neural_compressor.conf.pythonic_config)": [[196, "neural_compressor.conf.pythonic_config.AccuracyCriterion"]], "benchmarkconfig (class in neural_compressor.conf.pythonic_config)": [[196, "neural_compressor.conf.pythonic_config.BenchmarkConfig"]], "distillationconfig (class in neural_compressor.conf.pythonic_config)": [[196, "neural_compressor.conf.pythonic_config.DistillationConfig"]], "knowledgedistillationlossconfig (class in neural_compressor.conf.pythonic_config)": [[196, "neural_compressor.conf.pythonic_config.KnowledgeDistillationLossConfig"]], "options (class in neural_compressor.conf.pythonic_config)": [[196, "neural_compressor.conf.pythonic_config.Options"]], "quantizationconfig (class in neural_compressor.conf.pythonic_config)": [[196, "neural_compressor.conf.pythonic_config.QuantizationConfig"]], "weightpruningconfig (class in neural_compressor.conf.pythonic_config)": [[196, "neural_compressor.conf.pythonic_config.WeightPruningConfig"]], "neural_compressor.conf.pythonic_config": [[196, "module-neural_compressor.conf.pythonic_config"]], "accuracycriterion (class in neural_compressor.config)": [[197, "neural_compressor.config.AccuracyCriterion"]], "benchmarkconfig (class in neural_compressor.config)": [[197, "neural_compressor.config.BenchmarkConfig"]], "distillationconfig (class in neural_compressor.config)": [[197, "neural_compressor.config.DistillationConfig"]], "dotdict (class in neural_compressor.config)": [[197, "neural_compressor.config.DotDict"]], "exportconfig (class in neural_compressor.config)": [[197, "neural_compressor.config.ExportConfig"]], "intermediatelayersknowledgedistillationlossconfig (class in neural_compressor.config)": [[197, "neural_compressor.config.IntermediateLayersKnowledgeDistillationLossConfig"]], "keras (class in neural_compressor.config)": [[197, "neural_compressor.config.Keras"]], "knowledgedistillationlossconfig (class in neural_compressor.config)": [[197, "neural_compressor.config.KnowledgeDistillationLossConfig"]], "mxnet (class in neural_compressor.config)": [[197, "neural_compressor.config.MXNet"]], "mixedprecisionconfig (class in neural_compressor.config)": [[197, "neural_compressor.config.MixedPrecisionConfig"]], "nasconfig (class in neural_compressor.config)": [[197, "neural_compressor.config.NASConfig"]], "onnx (class in neural_compressor.config)": [[197, "neural_compressor.config.ONNX"]], "onnxqlinear2qdqconfig (class in neural_compressor.config)": [[197, "neural_compressor.config.ONNXQlinear2QDQConfig"]], "options (class in neural_compressor.config)": [[197, "neural_compressor.config.Options"]], "posttrainingquantconfig (class in neural_compressor.config)": [[197, "neural_compressor.config.PostTrainingQuantConfig"]], "pytorch (class in neural_compressor.config)": [[197, "neural_compressor.config.PyTorch"]], "quantizationawaretrainingconfig (class in neural_compressor.config)": [[197, "neural_compressor.config.QuantizationAwareTrainingConfig"]], "selfknowledgedistillationlossconfig (class in neural_compressor.config)": [[197, "neural_compressor.config.SelfKnowledgeDistillationLossConfig"]], "tf2onnxconfig (class in neural_compressor.config)": [[197, "neural_compressor.config.TF2ONNXConfig"]], "tensorflow (class in neural_compressor.config)": [[197, "neural_compressor.config.TensorFlow"]], "torch2onnxconfig (class in neural_compressor.config)": [[197, "neural_compressor.config.Torch2ONNXConfig"]], "tuningcriterion (class in neural_compressor.config)": [[197, "neural_compressor.config.TuningCriterion"]], "weightpruningconfig (class in neural_compressor.config)": [[197, "neural_compressor.config.WeightPruningConfig"]], "neural_compressor.config": [[197, "module-neural_compressor.config"]], "neural_compressor.contrib": [[198, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[199, "module-neural_compressor.contrib.strategy"]], "sigopttunestrategy (class in neural_compressor.contrib.strategy.sigopt)": [[200, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.sigopt": [[200, "module-neural_compressor.contrib.strategy.sigopt"]], "tpetunestrategy (class in neural_compressor.contrib.strategy.tpe)": [[201, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy"]], "neural_compressor.contrib.strategy.tpe": [[201, "module-neural_compressor.contrib.strategy.tpe"]], "basedataloader (class in neural_compressor.data.dataloaders.base_dataloader)": [[202, "neural_compressor.data.dataloaders.base_dataloader.BaseDataLoader"]], "neural_compressor.data.dataloaders.base_dataloader": [[202, "module-neural_compressor.data.dataloaders.base_dataloader"]], "dataloader (class in neural_compressor.data.dataloaders.dataloader)": [[203, "neural_compressor.data.dataloaders.dataloader.DataLoader"]], "check_dataloader() (in module neural_compressor.data.dataloaders.dataloader)": [[203, "neural_compressor.data.dataloaders.dataloader.check_dataloader"]], "neural_compressor.data.dataloaders.dataloader": [[203, "module-neural_compressor.data.dataloaders.dataloader"]], "defaultdataloader (class in neural_compressor.data.dataloaders.default_dataloader)": [[204, "neural_compressor.data.dataloaders.default_dataloader.DefaultDataLoader"]], "default_collate() (in module neural_compressor.data.dataloaders.default_dataloader)": [[204, "neural_compressor.data.dataloaders.default_dataloader.default_collate"]], "neural_compressor.data.dataloaders.default_dataloader": [[204, "module-neural_compressor.data.dataloaders.default_dataloader"]], "fetcher (class in neural_compressor.data.dataloaders.fetcher)": [[205, "neural_compressor.data.dataloaders.fetcher.Fetcher"]], "indexfetcher (class in neural_compressor.data.dataloaders.fetcher)": [[205, "neural_compressor.data.dataloaders.fetcher.IndexFetcher"]], "iterablefetcher (class in neural_compressor.data.dataloaders.fetcher)": [[205, "neural_compressor.data.dataloaders.fetcher.IterableFetcher"]], "neural_compressor.data.dataloaders.fetcher": [[205, "module-neural_compressor.data.dataloaders.fetcher"]], "neural_compressor.data.dataloaders": [[206, "module-neural_compressor.data.dataloaders"]], "mxnetdataloader (class in neural_compressor.data.dataloaders.mxnet_dataloader)": [[207, "neural_compressor.data.dataloaders.mxnet_dataloader.MXNetDataLoader"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[207, "module-neural_compressor.data.dataloaders.mxnet_dataloader"]], "onnxrtbertdataloader (class in neural_compressor.data.dataloaders.onnxrt_dataloader)": [[208, "neural_compressor.data.dataloaders.onnxrt_dataloader.ONNXRTBertDataLoader"]], "onnxrtdataloader (class in neural_compressor.data.dataloaders.onnxrt_dataloader)": [[208, "neural_compressor.data.dataloaders.onnxrt_dataloader.ONNXRTDataLoader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[208, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"]], "pytorchdataloader (class in neural_compressor.data.dataloaders.pytorch_dataloader)": [[209, "neural_compressor.data.dataloaders.pytorch_dataloader.PyTorchDataLoader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[209, "module-neural_compressor.data.dataloaders.pytorch_dataloader"]], "batchsampler (class in neural_compressor.data.dataloaders.sampler)": [[210, "neural_compressor.data.dataloaders.sampler.BatchSampler"]], "iterablesampler (class in neural_compressor.data.dataloaders.sampler)": [[210, "neural_compressor.data.dataloaders.sampler.IterableSampler"]], "sampler (class in neural_compressor.data.dataloaders.sampler)": [[210, "neural_compressor.data.dataloaders.sampler.Sampler"]], "sequentialsampler (class in neural_compressor.data.dataloaders.sampler)": [[210, "neural_compressor.data.dataloaders.sampler.SequentialSampler"]], "neural_compressor.data.dataloaders.sampler": [[210, "module-neural_compressor.data.dataloaders.sampler"]], "tfdatadataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[211, "neural_compressor.data.dataloaders.tensorflow_dataloader.TFDataDataLoader"]], "tensorflowbertdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[211, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowBertDataLoader"]], "tensorflowdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[211, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowDataLoader"]], "tensorflowmodelzoobertdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[211, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowModelZooBertDataLoader"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[211, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"]], "inputfeatures (class in neural_compressor.data.datasets.bert_dataset)": [[212, "neural_compressor.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[212, "neural_compressor.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.data.datasets.bert_dataset)": [[212, "neural_compressor.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[212, "neural_compressor.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[212, "neural_compressor.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[212, "neural_compressor.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.data.datasets.bert_dataset)": [[212, "neural_compressor.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.data.datasets.bert_dataset)": [[212, "neural_compressor.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.data.datasets.bert_dataset": [[212, "module-neural_compressor.data.datasets.bert_dataset"]], "coconpy (class in neural_compressor.data.datasets.coco_dataset)": [[213, "neural_compressor.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.data.datasets.coco_dataset)": [[213, "neural_compressor.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.data.datasets.coco_dataset)": [[213, "neural_compressor.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.data.datasets.coco_dataset)": [[213, "neural_compressor.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.data.datasets.coco_dataset": [[213, "module-neural_compressor.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.data.datasets.dataset)": [[214, "neural_compressor.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.data.datasets.dataset)": [[214, "neural_compressor.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.data.datasets.dataset)": [[214, "neural_compressor.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.data.datasets.dataset)": [[214, "neural_compressor.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.data.datasets.dataset)": [[214, "neural_compressor.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.data.datasets.dataset)": [[214, "neural_compressor.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.data.datasets.dataset)": [[214, "neural_compressor.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.data.datasets.dataset)": [[214, "neural_compressor.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.data.datasets.dataset)": [[214, "neural_compressor.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.data.datasets.dataset)": [[214, "neural_compressor.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.data.datasets.dataset)": [[214, "neural_compressor.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.data.datasets.dataset)": [[214, "neural_compressor.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.data.datasets.dataset)": [[214, "neural_compressor.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.data.datasets.dataset)": [[214, "neural_compressor.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.data.datasets.dataset)": [[214, "neural_compressor.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.data.datasets.dataset)": [[214, "neural_compressor.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.data.datasets.dataset)": [[214, "neural_compressor.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.data.datasets.dataset)": [[214, "neural_compressor.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.data.datasets.dataset)": [[214, "neural_compressor.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.data.datasets.dataset)": [[214, "neural_compressor.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.data.datasets.dataset)": [[214, "neural_compressor.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.data.datasets.dataset)": [[214, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.datasets.dataset)": [[214, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflow (class in neural_compressor.data.datasets.dataset)": [[214, "neural_compressor.data.datasets.dataset.Tensorflow"]], "tensorflowcifar10 (class in neural_compressor.data.datasets.dataset)": [[214, "neural_compressor.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.data.datasets.dataset)": [[214, "neural_compressor.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.data.datasets.dataset)": [[214, "neural_compressor.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.data.datasets.dataset)": [[214, "neural_compressor.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagerecord (class in neural_compressor.data.datasets.dataset)": [[214, "neural_compressor.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.data.datasets.dataset)": [[214, "neural_compressor.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.data.datasets.dataset)": [[214, "neural_compressor.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.data.datasets.dataset)": [[214, "neural_compressor.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.data.datasets.dataset)": [[214, "neural_compressor.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.data.datasets.dataset)": [[214, "neural_compressor.data.datasets.dataset.check_integrity"]], "dataset_registry() (in module neural_compressor.data.datasets.dataset)": [[214, "neural_compressor.data.datasets.dataset.dataset_registry"]], "download_url() (in module neural_compressor.data.datasets.dataset)": [[214, "neural_compressor.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.data.datasets.dataset)": [[214, "neural_compressor.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.data.datasets.dataset)": [[214, "neural_compressor.data.datasets.dataset.gen_bar_updater"]], "neural_compressor.data.datasets.dataset": [[214, "module-neural_compressor.data.datasets.dataset"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset)": [[215, "neural_compressor.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset": [[215, "module-neural_compressor.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[216, "neural_compressor.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[216, "neural_compressor.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[216, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[217, "neural_compressor.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[217, "neural_compressor.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[217, "neural_compressor.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[217, "neural_compressor.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[217, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[217, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.data.datasets.imagenet_dataset": [[217, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[218, "module-neural_compressor.data.datasets"]], "styletransferdataset (class in neural_compressor.data.datasets.style_transfer_dataset)": [[219, "neural_compressor.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.data.datasets.style_transfer_dataset": [[219, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.data.filters.coco_filter)": [[220, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.data.filters.coco_filter)": [[220, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.coco_filter": [[220, "module-neural_compressor.data.filters.coco_filter"]], "filters (class in neural_compressor.data.filters.filter)": [[221, "neural_compressor.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.data.filters.filter)": [[221, "neural_compressor.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.data.filters.filter)": [[221, "neural_compressor.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.data.filters.filter)": [[221, "neural_compressor.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.data.filters.filter)": [[221, "neural_compressor.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.data.filters.filter)": [[221, "neural_compressor.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.data.filters.filter)": [[221, "neural_compressor.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.data.filters.filter)": [[221, "neural_compressor.data.filters.filter.filter_registry"]], "neural_compressor.data.filters.filter": [[221, "module-neural_compressor.data.filters.filter"]], "neural_compressor.data.filters": [[222, "module-neural_compressor.data.filters"]], "neural_compressor.data": [[223, "module-neural_compressor.data"]], "parsedecodecocotransform (class in neural_compressor.data.transforms.coco_transform)": [[224, "neural_compressor.data.transforms.coco_transform.ParseDecodeCocoTransform"]], "neural_compressor.data.transforms.coco_transform": [[224, "module-neural_compressor.data.transforms.coco_transform"]], "bilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[225, "neural_compressor.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.data.transforms.imagenet_transform)": [[225, "neural_compressor.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[225, "neural_compressor.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[225, "neural_compressor.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.data.transforms.imagenet_transform)": [[225, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[225, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.data.transforms.imagenet_transform)": [[225, "neural_compressor.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.data.transforms.imagenet_transform)": [[225, "neural_compressor.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[225, "neural_compressor.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "tensorflowshiftrescale (class in neural_compressor.data.transforms.imagenet_transform)": [[225, "neural_compressor.data.transforms.imagenet_transform.TensorflowShiftRescale"]], "tensorflowtransposelastchannel (class in neural_compressor.data.transforms.imagenet_transform)": [[225, "neural_compressor.data.transforms.imagenet_transform.TensorflowTransposeLastChannel"]], "neural_compressor.data.transforms.imagenet_transform": [[225, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[226, "module-neural_compressor.data.transforms"]], "postprocess (class in neural_compressor.data.transforms.postprocess)": [[227, "neural_compressor.data.transforms.postprocess.Postprocess"]], "neural_compressor.data.transforms.postprocess": [[227, "module-neural_compressor.data.transforms.postprocess"]], "basictokenizer (class in neural_compressor.data.transforms.tokenization)": [[228, "neural_compressor.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.data.transforms.tokenization)": [[228, "neural_compressor.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.data.transforms.tokenization)": [[228, "neural_compressor.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.data.transforms.tokenization)": [[228, "neural_compressor.data.transforms.tokenization.convert_by_vocab"]], "convert_to_unicode() (in module neural_compressor.data.transforms.tokenization)": [[228, "neural_compressor.data.transforms.tokenization.convert_to_unicode"]], "load_vocab() (in module neural_compressor.data.transforms.tokenization)": [[228, "neural_compressor.data.transforms.tokenization.load_vocab"]], "neural_compressor.data.transforms.tokenization": [[228, "module-neural_compressor.data.transforms.tokenization"]], "whitespace_tokenize() (in module neural_compressor.data.transforms.tokenization)": [[228, "neural_compressor.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.data.transforms.transform)": [[229, "neural_compressor.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.data.transforms.transform)": [[229, "neural_compressor.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.data.transforms.transform)": [[229, "neural_compressor.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.data.transforms.transform)": [[229, "neural_compressor.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.data.transforms.transform)": [[229, "neural_compressor.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.data.transforms.transform)": [[229, "neural_compressor.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.data.transforms.transform)": [[229, "neural_compressor.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.data.transforms.transform)": [[229, "neural_compressor.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.data.transforms.transform)": [[229, "neural_compressor.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.data.transforms.transform)": [[229, "neural_compressor.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.data.transforms.transform)": [[229, "neural_compressor.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.data.transforms.transform)": [[229, "neural_compressor.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.data.transforms.transform)": [[229, "neural_compressor.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.data.transforms.transform)": [[229, "neural_compressor.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[229, "neural_compressor.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.data.transforms.transform)": [[229, "neural_compressor.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.data.transforms.transform)": [[229, "neural_compressor.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.data.transforms.transform)": [[229, "neural_compressor.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.data.transforms.transform)": [[229, "neural_compressor.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.data.transforms.transform)": [[229, "neural_compressor.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[229, "neural_compressor.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.data.transforms.transform)": [[229, "neural_compressor.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.data.transforms.transform)": [[229, "neural_compressor.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.data.transforms.transform)": [[229, "neural_compressor.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.data.transforms.transform)": [[229, "neural_compressor.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.data.transforms.transform)": [[229, "neural_compressor.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.data.transforms.transform)": [[229, "neural_compressor.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.data.transforms.transform)": [[229, "neural_compressor.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.data.transforms.transform)": [[229, "neural_compressor.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.data.transforms.transform)": [[229, "neural_compressor.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.data.transforms.transform)": [[229, "neural_compressor.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.transforms.transform)": [[229, "neural_compressor.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.data.transforms.transform)": [[229, "neural_compressor.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.data.transforms.transform)": [[229, "neural_compressor.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[229, "neural_compressor.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.data.transforms.transform)": [[229, "neural_compressor.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.data.transforms.transform)": [[229, "neural_compressor.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.data.transforms.transform)": [[229, "neural_compressor.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.data.transforms.transform)": [[229, "neural_compressor.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.data.transforms.transform)": [[229, "neural_compressor.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.data.transforms.transform)": [[229, "neural_compressor.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.data.transforms.transform)": [[229, "neural_compressor.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.data.transforms.transform)": [[229, "neural_compressor.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.data.transforms.transform)": [[229, "neural_compressor.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.data.transforms.transform)": [[229, "neural_compressor.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.data.transforms.transform)": [[229, "neural_compressor.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.data.transforms.transform)": [[229, "neural_compressor.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.data.transforms.transform)": [[229, "neural_compressor.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.data.transforms.transform)": [[229, "neural_compressor.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.data.transforms.transform)": [[229, "neural_compressor.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.data.transforms.transform)": [[229, "neural_compressor.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.data.transforms.transform)": [[229, "neural_compressor.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.data.transforms.transform)": [[229, "neural_compressor.data.transforms.transform.TRANSFORMS"], [229, "neural_compressor.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[229, "neural_compressor.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[229, "neural_compressor.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.data.transforms.transform)": [[229, "neural_compressor.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.data.transforms.transform)": [[229, "neural_compressor.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.data.transforms.transform)": [[229, "neural_compressor.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.data.transforms.transform)": [[229, "neural_compressor.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.data.transforms.transform)": [[229, "neural_compressor.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.data.transforms.transform)": [[229, "neural_compressor.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.data.transforms.transform)": [[229, "neural_compressor.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.data.transforms.transform)": [[229, "neural_compressor.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.data.transforms.transform)": [[229, "neural_compressor.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.data.transforms.transform)": [[229, "neural_compressor.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.data.transforms.transform)": [[229, "neural_compressor.data.transforms.transform.get_final_text"]], "get_torchvision_map() (in module neural_compressor.data.transforms.transform)": [[229, "neural_compressor.data.transforms.transform.get_torchvision_map"]], "neural_compressor.data.transforms.transform": [[229, "module-neural_compressor.data.transforms.transform"]], "read_squad_examples() (in module neural_compressor.data.transforms.transform)": [[229, "neural_compressor.data.transforms.transform.read_squad_examples"]], "transform_registry() (in module neural_compressor.data.transforms.transform)": [[229, "neural_compressor.data.transforms.transform.transform_registry"]], "benchmark (class in neural_compressor.experimental.benchmark)": [[230, "neural_compressor.experimental.benchmark.Benchmark"]], "get_architecture() (in module neural_compressor.experimental.benchmark)": [[230, "neural_compressor.experimental.benchmark.get_architecture"]], "get_bounded_threads() (in module neural_compressor.experimental.benchmark)": [[230, "neural_compressor.experimental.benchmark.get_bounded_threads"]], "get_core_ids() (in module neural_compressor.experimental.benchmark)": [[230, "neural_compressor.experimental.benchmark.get_core_ids"]], "get_physical_ids() (in module neural_compressor.experimental.benchmark)": [[230, "neural_compressor.experimental.benchmark.get_physical_ids"]], "get_threads() (in module neural_compressor.experimental.benchmark)": [[230, "neural_compressor.experimental.benchmark.get_threads"]], "get_threads_per_core() (in module neural_compressor.experimental.benchmark)": [[230, "neural_compressor.experimental.benchmark.get_threads_per_core"]], "neural_compressor.experimental.benchmark": [[230, "module-neural_compressor.experimental.benchmark"]], "set_all_env_var() (in module neural_compressor.experimental.benchmark)": [[230, "neural_compressor.experimental.benchmark.set_all_env_var"]], "set_env_var() (in module neural_compressor.experimental.benchmark)": [[230, "neural_compressor.experimental.benchmark.set_env_var"]], "criterions (class in neural_compressor.experimental.common.criterion)": [[231, "neural_compressor.experimental.common.criterion.Criterions"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[231, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationframework (class in neural_compressor.experimental.common.criterion)": [[231, "neural_compressor.experimental.common.criterion.KnowledgeDistillationFramework"]], "knowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[231, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss"]], "pytorchcriterions (class in neural_compressor.experimental.common.criterion)": [[231, "neural_compressor.experimental.common.criterion.PyTorchCriterions"]], "pytorchcrossentropyloss (class in neural_compressor.experimental.common.criterion)": [[231, "neural_compressor.experimental.common.criterion.PyTorchCrossEntropyLoss"]], "pytorchintermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[231, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss"]], "pytorchintermediatelayersknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[231, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"]], "pytorchknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[231, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss"]], "pytorchknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[231, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLossWrapper"]], "pytorchselfknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[231, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss"]], "pytorchselfknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[231, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLossWrapper"]], "selfknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[231, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss"]], "tensorflowcrossentropyloss (class in neural_compressor.experimental.common.criterion)": [[231, "neural_compressor.experimental.common.criterion.TensorFlowCrossEntropyLoss"]], "tensorflowsparsecategoricalcrossentropy (class in neural_compressor.experimental.common.criterion)": [[231, "neural_compressor.experimental.common.criterion.TensorFlowSparseCategoricalCrossentropy"]], "tensorflowcriterions (class in neural_compressor.experimental.common.criterion)": [[231, "neural_compressor.experimental.common.criterion.TensorflowCriterions"]], "tensorflowknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[231, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss"]], "tensorflowknowledgedistillationlossexternal (class in neural_compressor.experimental.common.criterion)": [[231, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal"]], "tensorflowknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[231, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossWrapper"]], "criterion_registry() (in module neural_compressor.experimental.common.criterion)": [[231, "neural_compressor.experimental.common.criterion.criterion_registry"]], "neural_compressor.experimental.common.criterion": [[231, "module-neural_compressor.experimental.common.criterion"]], "dataloader (class in neural_compressor.experimental.common.dataloader)": [[232, "neural_compressor.experimental.common.dataloader.DataLoader"]], "neural_compressor.experimental.common.dataloader": [[232, "module-neural_compressor.experimental.common.dataloader"]], "neural_compressor.experimental.common": [[233, "module-neural_compressor.experimental.common"]], "metric (class in neural_compressor.experimental.common.metric)": [[234, "neural_compressor.experimental.common.metric.Metric"]], "neural_compressor.experimental.common.metric": [[234, "module-neural_compressor.experimental.common.metric"]], "model (class in neural_compressor.experimental.common.model)": [[235, "neural_compressor.experimental.common.model.Model"]], "neural_compressor.experimental.common.model": [[235, "module-neural_compressor.experimental.common.model"]], "set_backend() (in module neural_compressor.experimental.common.model)": [[235, "neural_compressor.experimental.common.model.set_backend"]], "optimizers (class in neural_compressor.experimental.common.optimizer)": [[236, "neural_compressor.experimental.common.optimizer.Optimizers"]], "pytorchoptimizers (class in neural_compressor.experimental.common.optimizer)": [[236, "neural_compressor.experimental.common.optimizer.PyTorchOptimizers"]], "pytorchsgd (class in neural_compressor.experimental.common.optimizer)": [[236, "neural_compressor.experimental.common.optimizer.PyTorchSGD"]], "tensorflowadam (class in neural_compressor.experimental.common.optimizer)": [[236, "neural_compressor.experimental.common.optimizer.TensorFlowAdam"]], "tensorflowadamw (class in neural_compressor.experimental.common.optimizer)": [[236, "neural_compressor.experimental.common.optimizer.TensorFlowAdamW"]], "tensorflowsgd (class in neural_compressor.experimental.common.optimizer)": [[236, "neural_compressor.experimental.common.optimizer.TensorFlowSGD"]], "tensorflowoptimizers (class in neural_compressor.experimental.common.optimizer)": [[236, "neural_compressor.experimental.common.optimizer.TensorflowOptimizers"]], "neural_compressor.experimental.common.optimizer": [[236, "module-neural_compressor.experimental.common.optimizer"]], "optimizer_registry() (in module neural_compressor.experimental.common.optimizer)": [[236, "neural_compressor.experimental.common.optimizer.optimizer_registry"]], "postprocess (class in neural_compressor.experimental.common.postprocess)": [[237, "neural_compressor.experimental.common.postprocess.Postprocess"]], "neural_compressor.experimental.common.postprocess": [[237, "module-neural_compressor.experimental.common.postprocess"]], "get_activation() (in module neural_compressor.experimental.common.torch_utils)": [[238, "neural_compressor.experimental.common.torch_utils.get_activation"]], "neural_compressor.experimental.common.torch_utils": [[238, "module-neural_compressor.experimental.common.torch_utils"]], "record_output() (in module neural_compressor.experimental.common.torch_utils)": [[238, "neural_compressor.experimental.common.torch_utils.record_output"]], "component (class in neural_compressor.experimental.component)": [[239, "neural_compressor.experimental.component.Component"]], "neural_compressor.experimental.component": [[239, "module-neural_compressor.experimental.component"]], "neural_compressor.experimental.compression": [[240, "module-neural_compressor.experimental.compression"]], "neural_compressor.experimental.compression.pruning": [[241, "module-neural_compressor.experimental.compression.pruning"]], "prepare_pruning() (in module neural_compressor.experimental.compression.pruning)": [[241, "neural_compressor.experimental.compression.pruning.prepare_pruning"]], "save() (in module neural_compressor.experimental.compression.pruning)": [[241, "neural_compressor.experimental.compression.pruning.save"]], "neural_compressor.experimental.contrib": [[242, "module-neural_compressor.experimental.contrib"]], "neural_compressor.experimental.contrib.strategy": [[243, "module-neural_compressor.experimental.contrib.strategy"]], "sigopttunestrategy (class in neural_compressor.experimental.contrib.strategy.sigopt)": [[244, "neural_compressor.experimental.contrib.strategy.sigopt.SigOptTuneStrategy"]], "neural_compressor.experimental.contrib.strategy.sigopt": [[244, "module-neural_compressor.experimental.contrib.strategy.sigopt"]], "tpetunestrategy (class in neural_compressor.experimental.contrib.strategy.tpe)": [[245, "neural_compressor.experimental.contrib.strategy.tpe.TpeTuneStrategy"]], "neural_compressor.experimental.contrib.strategy.tpe": [[245, "module-neural_compressor.experimental.contrib.strategy.tpe"]], "basedataloader (class in neural_compressor.experimental.data.dataloaders.base_dataloader)": [[246, "neural_compressor.experimental.data.dataloaders.base_dataloader.BaseDataLoader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[246, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[247, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "defaultdataloader (class in neural_compressor.experimental.data.dataloaders.default_dataloader)": [[248, "neural_compressor.experimental.data.dataloaders.default_dataloader.DefaultDataLoader"]], "default_collate() (in module neural_compressor.experimental.data.dataloaders.default_dataloader)": [[248, "neural_compressor.experimental.data.dataloaders.default_dataloader.default_collate"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[248, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "fetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[249, "neural_compressor.experimental.data.dataloaders.fetcher.Fetcher"]], "indexfetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[249, "neural_compressor.experimental.data.dataloaders.fetcher.IndexFetcher"]], "iterablefetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[249, "neural_compressor.experimental.data.dataloaders.fetcher.IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[249, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[250, "module-neural_compressor.experimental.data.dataloaders"]], "mxnetdataloader (class in neural_compressor.experimental.data.dataloaders.mxnet_dataloader)": [[251, "neural_compressor.experimental.data.dataloaders.mxnet_dataloader.MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[251, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "onnxrtbertdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[252, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTBertDataLoader"]], "onnxrtdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[252, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[252, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "pytorchdataloader (class in neural_compressor.experimental.data.dataloaders.pytorch_dataloader)": [[253, "neural_compressor.experimental.data.dataloaders.pytorch_dataloader.PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[253, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "batchsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[254, "neural_compressor.experimental.data.dataloaders.sampler.BatchSampler"]], "iterablesampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[254, "neural_compressor.experimental.data.dataloaders.sampler.IterableSampler"]], "sampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[254, "neural_compressor.experimental.data.dataloaders.sampler.Sampler"]], "sequentialsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[254, "neural_compressor.experimental.data.dataloaders.sampler.SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.sampler": [[254, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "tfdatadataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[255, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TFDataDataLoader"]], "tensorflowbertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[255, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowBertDataLoader"]], "tensorflowdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[255, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowDataLoader"]], "tensorflowmodelzoobertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[255, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowModelZooBertDataLoader"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[255, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "inputfeatures (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[256, "neural_compressor.experimental.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[256, "neural_compressor.experimental.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[256, "neural_compressor.experimental.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[256, "neural_compressor.experimental.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[256, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[256, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[256, "neural_compressor.experimental.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[256, "neural_compressor.experimental.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[256, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "coconpy (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[257, "neural_compressor.experimental.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[257, "neural_compressor.experimental.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[257, "neural_compressor.experimental.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[257, "neural_compressor.experimental.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[257, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[258, "neural_compressor.experimental.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[258, "neural_compressor.experimental.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.experimental.data.datasets.dataset)": [[258, "neural_compressor.experimental.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.experimental.data.datasets.dataset)": [[258, "neural_compressor.experimental.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[258, "neural_compressor.experimental.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[258, "neural_compressor.experimental.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.experimental.data.datasets.dataset)": [[258, "neural_compressor.experimental.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.experimental.data.datasets.dataset)": [[258, "neural_compressor.experimental.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[258, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[258, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[258, "neural_compressor.experimental.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[258, "neural_compressor.experimental.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[258, "neural_compressor.experimental.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[258, "neural_compressor.experimental.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[258, "neural_compressor.experimental.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[258, "neural_compressor.experimental.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[258, "neural_compressor.experimental.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[258, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[258, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[258, "neural_compressor.experimental.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[258, "neural_compressor.experimental.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.experimental.data.datasets.dataset)": [[258, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.datasets.dataset)": [[258, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflowcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[258, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[258, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[258, "neural_compressor.experimental.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[258, "neural_compressor.experimental.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[258, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageFolder"]], "tensorflowimagerecord (class in neural_compressor.experimental.data.datasets.dataset)": [[258, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[258, "neural_compressor.experimental.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.experimental.data.datasets.dataset)": [[258, "neural_compressor.experimental.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.experimental.data.datasets.dataset)": [[258, "neural_compressor.experimental.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.experimental.data.datasets.dataset)": [[258, "neural_compressor.experimental.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.experimental.data.datasets.dataset)": [[258, "neural_compressor.experimental.data.datasets.dataset.check_integrity"]], "dataset_registry() (in module neural_compressor.experimental.data.datasets.dataset)": [[258, "neural_compressor.experimental.data.datasets.dataset.dataset_registry"]], "download_url() (in module neural_compressor.experimental.data.datasets.dataset)": [[258, "neural_compressor.experimental.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.experimental.data.datasets.dataset)": [[258, "neural_compressor.experimental.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.experimental.data.datasets.dataset)": [[258, "neural_compressor.experimental.data.datasets.dataset.gen_bar_updater"]], "neural_compressor.experimental.data.datasets.dataset": [[258, "module-neural_compressor.experimental.data.datasets.dataset"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset)": [[259, "neural_compressor.experimental.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[259, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[260, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[260, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[260, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[261, "neural_compressor.experimental.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[261, "neural_compressor.experimental.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[261, "neural_compressor.experimental.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[261, "neural_compressor.experimental.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[261, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[261, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[261, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "neural_compressor.experimental.data.datasets": [[262, "module-neural_compressor.experimental.data.datasets"]], "styletransferdataset (class in neural_compressor.experimental.data.datasets.style_transfer_dataset)": [[263, "neural_compressor.experimental.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[263, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[264, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[264, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.coco_filter": [[264, "module-neural_compressor.experimental.data.filters.coco_filter"]], "filters (class in neural_compressor.experimental.data.filters.filter)": [[265, "neural_compressor.experimental.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.experimental.data.filters.filter)": [[265, "neural_compressor.experimental.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.experimental.data.filters.filter)": [[265, "neural_compressor.experimental.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.experimental.data.filters.filter)": [[265, "neural_compressor.experimental.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.experimental.data.filters.filter)": [[265, "neural_compressor.experimental.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.experimental.data.filters.filter)": [[265, "neural_compressor.experimental.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.experimental.data.filters.filter)": [[265, "neural_compressor.experimental.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.experimental.data.filters.filter)": [[265, "neural_compressor.experimental.data.filters.filter.filter_registry"]], "neural_compressor.experimental.data.filters.filter": [[265, "module-neural_compressor.experimental.data.filters.filter"]], "neural_compressor.experimental.data.filters": [[266, "module-neural_compressor.experimental.data.filters"]], "neural_compressor.experimental.data": [[267, "module-neural_compressor.experimental.data"]], "bilinearimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[268, "neural_compressor.experimental.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[268, "neural_compressor.experimental.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[268, "neural_compressor.experimental.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[268, "neural_compressor.experimental.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[268, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[268, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[268, "neural_compressor.experimental.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[268, "neural_compressor.experimental.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[268, "neural_compressor.experimental.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[268, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "neural_compressor.experimental.data.transforms": [[269, "module-neural_compressor.experimental.data.transforms"]], "basictokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[270, "neural_compressor.experimental.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[270, "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[270, "neural_compressor.experimental.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[270, "neural_compressor.experimental.data.transforms.tokenization.convert_by_vocab"]], "convert_to_unicode() (in module neural_compressor.experimental.data.transforms.tokenization)": [[270, "neural_compressor.experimental.data.transforms.tokenization.convert_to_unicode"]], "load_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[270, "neural_compressor.experimental.data.transforms.tokenization.load_vocab"]], "neural_compressor.experimental.data.transforms.tokenization": [[270, "module-neural_compressor.experimental.data.transforms.tokenization"]], "whitespace_tokenize() (in module neural_compressor.experimental.data.transforms.tokenization)": [[270, "neural_compressor.experimental.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.experimental.data.transforms.transform)": [[271, "neural_compressor.experimental.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.experimental.data.transforms.transform)": [[271, "neural_compressor.experimental.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.experimental.data.transforms.transform)": [[271, "neural_compressor.experimental.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[271, "neural_compressor.experimental.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.experimental.data.transforms.transform)": [[271, "neural_compressor.experimental.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[271, "neural_compressor.experimental.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[271, "neural_compressor.experimental.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[271, "neural_compressor.experimental.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.experimental.data.transforms.transform)": [[271, "neural_compressor.experimental.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[271, "neural_compressor.experimental.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[271, "neural_compressor.experimental.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[271, "neural_compressor.experimental.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.experimental.data.transforms.transform)": [[271, "neural_compressor.experimental.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[271, "neural_compressor.experimental.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[271, "neural_compressor.experimental.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[271, "neural_compressor.experimental.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.experimental.data.transforms.transform)": [[271, "neural_compressor.experimental.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.experimental.data.transforms.transform)": [[271, "neural_compressor.experimental.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[271, "neural_compressor.experimental.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[271, "neural_compressor.experimental.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[271, "neural_compressor.experimental.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.experimental.data.transforms.transform)": [[271, "neural_compressor.experimental.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.experimental.data.transforms.transform)": [[271, "neural_compressor.experimental.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[271, "neural_compressor.experimental.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.experimental.data.transforms.transform)": [[271, "neural_compressor.experimental.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.experimental.data.transforms.transform)": [[271, "neural_compressor.experimental.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[271, "neural_compressor.experimental.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[271, "neural_compressor.experimental.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[271, "neural_compressor.experimental.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[271, "neural_compressor.experimental.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[271, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[271, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[271, "neural_compressor.experimental.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[271, "neural_compressor.experimental.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[271, "neural_compressor.experimental.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[271, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[271, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[271, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[271, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[271, "neural_compressor.experimental.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.experimental.data.transforms.transform)": [[271, "neural_compressor.experimental.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.experimental.data.transforms.transform)": [[271, "neural_compressor.experimental.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.experimental.data.transforms.transform)": [[271, "neural_compressor.experimental.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[271, "neural_compressor.experimental.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[271, "neural_compressor.experimental.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[271, "neural_compressor.experimental.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[271, "neural_compressor.experimental.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[271, "neural_compressor.experimental.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.experimental.data.transforms.transform)": [[271, "neural_compressor.experimental.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[271, "neural_compressor.experimental.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.experimental.data.transforms.transform)": [[271, "neural_compressor.experimental.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.experimental.data.transforms.transform)": [[271, "neural_compressor.experimental.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.experimental.data.transforms.transform)": [[271, "neural_compressor.experimental.data.transforms.transform.TRANSFORMS"], [271, "neural_compressor.experimental.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[271, "neural_compressor.experimental.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[271, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[271, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[271, "neural_compressor.experimental.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.experimental.data.transforms.transform)": [[271, "neural_compressor.experimental.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[271, "neural_compressor.experimental.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[271, "neural_compressor.experimental.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[271, "neural_compressor.experimental.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.experimental.data.transforms.transform)": [[271, "neural_compressor.experimental.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.experimental.data.transforms.transform)": [[271, "neural_compressor.experimental.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.experimental.data.transforms.transform)": [[271, "neural_compressor.experimental.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.transforms.transform)": [[271, "neural_compressor.experimental.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.experimental.data.transforms.transform)": [[271, "neural_compressor.experimental.data.transforms.transform.get_final_text"]], "get_torchvision_map() (in module neural_compressor.experimental.data.transforms.transform)": [[271, "neural_compressor.experimental.data.transforms.transform.get_torchvision_map"]], "neural_compressor.experimental.data.transforms.transform": [[271, "module-neural_compressor.experimental.data.transforms.transform"]], "read_squad_examples() (in module neural_compressor.experimental.data.transforms.transform)": [[271, "neural_compressor.experimental.data.transforms.transform.read_squad_examples"]], "transform_registry() (in module neural_compressor.experimental.data.transforms.transform)": [[271, "neural_compressor.experimental.data.transforms.transform.transform_registry"]], "distillation (class in neural_compressor.experimental.distillation)": [[272, "neural_compressor.experimental.distillation.Distillation"]], "_epoch_ran (neural_compressor.experimental.distillation.distillation attribute)": [[272, "neural_compressor.experimental.distillation.Distillation._epoch_ran"]], "best_model (neural_compressor.experimental.distillation.distillation attribute)": [[272, "neural_compressor.experimental.distillation.Distillation.best_model"]], "best_score (neural_compressor.experimental.distillation.distillation attribute)": [[272, "neural_compressor.experimental.distillation.Distillation.best_score"]], "eval_frequency (neural_compressor.experimental.distillation.distillation attribute)": [[272, "neural_compressor.experimental.distillation.Distillation.eval_frequency"]], "neural_compressor.experimental.distillation": [[272, "module-neural_compressor.experimental.distillation"]], "neural_compressor.experimental.export": [[273, "module-neural_compressor.experimental.export"]], "check_model() (in module neural_compressor.experimental.export.qlinear2qdq)": [[274, "neural_compressor.experimental.export.qlinear2qdq.check_model"]], "neural_compressor.experimental.export.qlinear2qdq": [[274, "module-neural_compressor.experimental.export.qlinear2qdq"]], "onnx_qlinear_to_qdq() (in module neural_compressor.experimental.export.qlinear2qdq)": [[274, "neural_compressor.experimental.export.qlinear2qdq.onnx_qlinear_to_qdq"]], "neural_compressor.experimental.export.tf2onnx": [[275, "module-neural_compressor.experimental.export.tf2onnx"]], "tf_to_fp32_onnx() (in module neural_compressor.experimental.export.tf2onnx)": [[275, "neural_compressor.experimental.export.tf2onnx.tf_to_fp32_onnx"]], "tf_to_int8_onnx() (in module neural_compressor.experimental.export.tf2onnx)": [[275, "neural_compressor.experimental.export.tf2onnx.tf_to_int8_onnx"]], "dynamic_quant_export() (in module neural_compressor.experimental.export.torch2onnx)": [[276, "neural_compressor.experimental.export.torch2onnx.dynamic_quant_export"]], "get_node_mapping() (in module neural_compressor.experimental.export.torch2onnx)": [[276, "neural_compressor.experimental.export.torch2onnx.get_node_mapping"]], "get_quantizable_onnx_ops() (in module neural_compressor.experimental.export.torch2onnx)": [[276, "neural_compressor.experimental.export.torch2onnx.get_quantizable_onnx_ops"]], "neural_compressor.experimental.export.torch2onnx": [[276, "module-neural_compressor.experimental.export.torch2onnx"]], "static_quant_export() (in module neural_compressor.experimental.export.torch2onnx)": [[276, "neural_compressor.experimental.export.torch2onnx.static_quant_export"]], "torch_to_fp32_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[276, "neural_compressor.experimental.export.torch2onnx.torch_to_fp32_onnx"]], "torch_to_int8_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[276, "neural_compressor.experimental.export.torch2onnx.torch_to_int8_onnx"]], "graph_optimization (class in neural_compressor.experimental.graph_optimization)": [[277, "neural_compressor.experimental.graph_optimization.Graph_Optimization"]], "neural_compressor.experimental.graph_optimization": [[277, "module-neural_compressor.experimental.graph_optimization"]], "neural_compressor.experimental": [[278, "module-neural_compressor.experimental"]], "bleu (class in neural_compressor.experimental.metric.bleu)": [[279, "neural_compressor.experimental.metric.bleu.BLEU"]], "unicoderegex (class in neural_compressor.experimental.metric.bleu)": [[279, "neural_compressor.experimental.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.experimental.metric.bleu)": [[279, "neural_compressor.experimental.metric.bleu.bleu_tokenize"]], "labels (neural_compressor.experimental.metric.bleu.bleu attribute)": [[279, "neural_compressor.experimental.metric.bleu.BLEU.labels"]], "neural_compressor.experimental.metric.bleu": [[279, "module-neural_compressor.experimental.metric.bleu"]], "nondigit_punct_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[279, "neural_compressor.experimental.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "predictions (neural_compressor.experimental.metric.bleu.bleu attribute)": [[279, "neural_compressor.experimental.metric.bleu.BLEU.predictions"]], "punct_nondigit_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[279, "neural_compressor.experimental.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "symbol_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[279, "neural_compressor.experimental.metric.bleu.UnicodeRegex.symbol_re"]], "compute_bleu() (in module neural_compressor.experimental.metric.bleu_util)": [[280, "neural_compressor.experimental.metric.bleu_util.compute_bleu"]], "neural_compressor.experimental.metric.bleu_util": [[280, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[281, "module-neural_compressor.experimental.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.experimental.metric.coco_tools)": [[282, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.experimental.metric.coco_tools)": [[282, "neural_compressor.experimental.metric.coco_tools.COCOWrapper"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.experimental.metric.coco_tools)": [[282, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.experimental.metric.coco_tools)": [[282, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.experimental.metric.coco_tools)": [[282, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "dataset (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[282, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[282, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.experimental.metric.coco_tools": [[282, "module-neural_compressor.experimental.metric.coco_tools"]], "evaluate() (in module neural_compressor.experimental.metric.evaluate_squad)": [[283, "neural_compressor.experimental.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[283, "neural_compressor.experimental.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[283, "neural_compressor.experimental.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.evaluate_squad)": [[283, "neural_compressor.experimental.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.evaluate_squad": [[283, "module-neural_compressor.experimental.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.experimental.metric.f1)": [[284, "neural_compressor.experimental.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.experimental.metric.f1)": [[284, "neural_compressor.experimental.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.f1)": [[284, "neural_compressor.experimental.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[284, "module-neural_compressor.experimental.metric.f1"]], "normalize_answer() (in module neural_compressor.experimental.metric.f1)": [[284, "neural_compressor.experimental.metric.f1.normalize_answer"]], "neural_compressor.experimental.metric": [[285, "module-neural_compressor.experimental.metric"]], "accuracy (class in neural_compressor.experimental.metric.metric)": [[286, "neural_compressor.experimental.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.experimental.metric.metric)": [[286, "neural_compressor.experimental.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.experimental.metric.metric)": [[286, "neural_compressor.experimental.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.experimental.metric.metric)": [[286, "neural_compressor.experimental.metric.metric.F1"]], "generaltopk (class in neural_compressor.experimental.metric.metric)": [[286, "neural_compressor.experimental.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.experimental.metric.metric)": [[286, "neural_compressor.experimental.metric.metric.Loss"]], "mae (class in neural_compressor.experimental.metric.metric)": [[286, "neural_compressor.experimental.metric.metric.MAE"]], "metrics (class in neural_compressor.experimental.metric.metric)": [[286, "neural_compressor.experimental.metric.metric.METRICS"]], "mse (class in neural_compressor.experimental.metric.metric)": [[286, "neural_compressor.experimental.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.experimental.metric.metric)": [[286, "neural_compressor.experimental.metric.metric.MXNetMetrics"]], "onnxrtglue (class in neural_compressor.experimental.metric.metric)": [[286, "neural_compressor.experimental.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.experimental.metric.metric)": [[286, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.experimental.metric.metric)": [[286, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.experimental.metric.metric)": [[286, "neural_compressor.experimental.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.experimental.metric.metric)": [[286, "neural_compressor.experimental.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.experimental.metric.metric)": [[286, "neural_compressor.experimental.metric.metric.RMSE"]], "roc (class in neural_compressor.experimental.metric.metric)": [[286, "neural_compressor.experimental.metric.metric.ROC"]], "squadf1 (class in neural_compressor.experimental.metric.metric)": [[286, "neural_compressor.experimental.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.experimental.metric.metric)": [[286, "neural_compressor.experimental.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.experimental.metric.metric)": [[286, "neural_compressor.experimental.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.experimental.metric.metric)": [[286, "neural_compressor.experimental.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.experimental.metric.metric)": [[286, "neural_compressor.experimental.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.experimental.metric.metric)": [[286, "neural_compressor.experimental.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.experimental.metric.metric)": [[286, "neural_compressor.experimental.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.experimental.metric.metric)": [[286, "neural_compressor.experimental.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.experimental.metric.metric)": [[286, "neural_compressor.experimental.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.experimental.metric.metric.mae attribute)": [[286, "neural_compressor.experimental.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.experimental.metric.metric.mse attribute)": [[286, "neural_compressor.experimental.metric.metric.MSE.compare_label"]], "k (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[286, "neural_compressor.experimental.metric.metric.GeneralTopK.k"]], "k (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[286, "neural_compressor.experimental.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[286, "neural_compressor.experimental.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mae attribute)": [[286, "neural_compressor.experimental.metric.metric.MAE.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mse attribute)": [[286, "neural_compressor.experimental.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.experimental.metric.metric)": [[286, "neural_compressor.experimental.metric.metric.mIOU"]], "metric_registry() (in module neural_compressor.experimental.metric.metric)": [[286, "neural_compressor.experimental.metric.metric.metric_registry"]], "metrics (neural_compressor.experimental.metric.metric.metrics attribute)": [[286, "neural_compressor.experimental.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.experimental.metric.metric.mxnetmetrics attribute)": [[286, "neural_compressor.experimental.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtitmetrics attribute)": [[286, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtqlmetrics attribute)": [[286, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.pytorchmetrics attribute)": [[286, "neural_compressor.experimental.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.tensorflowmetrics attribute)": [[286, "neural_compressor.experimental.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.experimental.metric.metric.rmse attribute)": [[286, "neural_compressor.experimental.metric.metric.RMSE.mse"]], "neural_compressor.experimental.metric.metric": [[286, "module-neural_compressor.experimental.metric.metric"]], "num_correct (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[286, "neural_compressor.experimental.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[286, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[286, "neural_compressor.experimental.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[286, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[286, "neural_compressor.experimental.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mae attribute)": [[286, "neural_compressor.experimental.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mse attribute)": [[286, "neural_compressor.experimental.metric.metric.MSE.pred_list"]], "sample (neural_compressor.experimental.metric.metric.accuracy attribute)": [[286, "neural_compressor.experimental.metric.metric.Accuracy.sample"]], "sample (neural_compressor.experimental.metric.metric.loss attribute)": [[286, "neural_compressor.experimental.metric.metric.Loss.sample"]], "sum (neural_compressor.experimental.metric.metric.loss attribute)": [[286, "neural_compressor.experimental.metric.metric.Loss.sum"]], "mixedprecision (class in neural_compressor.experimental.mixed_precision)": [[287, "neural_compressor.experimental.mixed_precision.MixedPrecision"]], "neural_compressor.experimental.mixed_precision": [[287, "module-neural_compressor.experimental.mixed_precision"]], "modelconversion (class in neural_compressor.experimental.model_conversion)": [[288, "neural_compressor.experimental.model_conversion.ModelConversion"]], "neural_compressor.experimental.model_conversion": [[288, "module-neural_compressor.experimental.model_conversion"]], "basicnas (class in neural_compressor.experimental.nas.basic_nas)": [[289, "neural_compressor.experimental.nas.basic_nas.BasicNAS"]], "neural_compressor.experimental.nas.basic_nas": [[289, "module-neural_compressor.experimental.nas.basic_nas"]], "dynas (class in neural_compressor.experimental.nas.dynas)": [[290, "neural_compressor.experimental.nas.dynas.DyNAS"]], "neural_compressor.experimental.nas.dynas": [[290, "module-neural_compressor.experimental.nas.dynas"]], "neural_compressor.experimental.nas": [[291, "module-neural_compressor.experimental.nas"]], "nas (class in neural_compressor.experimental.nas.nas)": [[292, "neural_compressor.experimental.nas.nas.NAS"]], "nasbase (class in neural_compressor.experimental.nas.nas)": [[292, "neural_compressor.experimental.nas.nas.NASBase"]], "neural_compressor.experimental.nas.nas": [[292, "module-neural_compressor.experimental.nas.nas"]], "create_search_space_pool() (in module neural_compressor.experimental.nas.nas_utils)": [[293, "neural_compressor.experimental.nas.nas_utils.create_search_space_pool"]], "find_pareto_front() (in module neural_compressor.experimental.nas.nas_utils)": [[293, "neural_compressor.experimental.nas.nas_utils.find_pareto_front"]], "nas_registry() (in module neural_compressor.experimental.nas.nas_utils)": [[293, "neural_compressor.experimental.nas.nas_utils.nas_registry"]], "neural_compressor.experimental.nas.nas_utils": [[293, "module-neural_compressor.experimental.nas.nas_utils"]], "bayesianoptimizationsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[294, "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher"]], "gridsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[294, "neural_compressor.experimental.nas.search_algorithms.GridSearcher"]], "randomsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[294, "neural_compressor.experimental.nas.search_algorithms.RandomSearcher"]], "searcher (class in neural_compressor.experimental.nas.search_algorithms)": [[294, "neural_compressor.experimental.nas.search_algorithms.Searcher"]], "neural_compressor.experimental.nas.search_algorithms": [[294, "module-neural_compressor.experimental.nas.search_algorithms"]], "gradientsensitivitypruner (class in neural_compressor.experimental.pruner_legacy.gradient_sensitivity)": [[295, "neural_compressor.experimental.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[295, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"]], "grouplassopruner (class in neural_compressor.experimental.pruner_legacy.group_lasso)": [[296, "neural_compressor.experimental.pruner_legacy.group_lasso.GroupLassoPruner"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[296, "module-neural_compressor.experimental.pruner_legacy.group_lasso"]], "neural_compressor.experimental.pruner_legacy": [[297, "module-neural_compressor.experimental.pruner_legacy"]], "basicmagnitudepruner (class in neural_compressor.experimental.pruner_legacy.magnitude)": [[298, "neural_compressor.experimental.pruner_legacy.magnitude.BasicMagnitudePruner"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[298, "module-neural_compressor.experimental.pruner_legacy.magnitude"]], "patternlockpruner (class in neural_compressor.experimental.pruner_legacy.pattern_lock)": [[299, "neural_compressor.experimental.pruner_legacy.pattern_lock.PatternLockPruner"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[299, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"]], "pruner (class in neural_compressor.experimental.pruner_legacy.pruner)": [[300, "neural_compressor.experimental.pruner_legacy.pruner.Pruner"]], "neural_compressor.experimental.pruner_legacy.pruner": [[300, "module-neural_compressor.experimental.pruner_legacy.pruner"]], "pruner_registry() (in module neural_compressor.experimental.pruner_legacy.pruner)": [[300, "neural_compressor.experimental.pruner_legacy.pruner.pruner_registry"]], "pruning (class in neural_compressor.experimental.pruning)": [[301, "neural_compressor.experimental.pruning.Pruning"]], "tfpruningcallback (class in neural_compressor.experimental.pruning)": [[301, "neural_compressor.experimental.pruning.TfPruningCallback"]], "conf (neural_compressor.experimental.pruning.pruning attribute)": [[301, "neural_compressor.experimental.pruning.Pruning.conf"]], "neural_compressor.experimental.pruning": [[301, "module-neural_compressor.experimental.pruning"]], "pruners (neural_compressor.experimental.pruning.pruning attribute)": [[301, "neural_compressor.experimental.pruning.Pruning.pruners"]], "neural_compressor.experimental.pruning_recipes": [[302, "module-neural_compressor.experimental.pruning_recipes"]], "neural_compressor.experimental.pruning_recipes.patterns": [[303, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "patterns (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[304, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS"]], "patternbase (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[304, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[304, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "pattern_registry() (in module neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[304, "neural_compressor.experimental.pruning_recipes.patterns.pattern.pattern_registry"]], "patterns (neural_compressor.experimental.pruning_recipes.patterns.pattern.patterns attribute)": [[304, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS.patterns"]], "tilepatternbase (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[305, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePatternBase"]], "tilepattern_1x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[305, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x1"]], "tilepattern_1x16 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[305, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x16"]], "tilepattern_1x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[305, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x2"]], "tilepattern_2x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[305, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_2x2"]], "tilepattern_4x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[305, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_4x1"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[305, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "pruning (class in neural_compressor.experimental.pruning_v2)": [[306, "neural_compressor.experimental.pruning_v2.Pruning"]], "tfpruningcallback (class in neural_compressor.experimental.pruning_v2)": [[306, "neural_compressor.experimental.pruning_v2.TfPruningCallback"]], "conf (neural_compressor.experimental.pruning_v2.pruning attribute)": [[306, "neural_compressor.experimental.pruning_v2.Pruning.conf"]], "neural_compressor.experimental.pruning_v2": [[306, "module-neural_compressor.experimental.pruning_v2"]], "pruners (neural_compressor.experimental.pruning_v2.pruning attribute)": [[306, "neural_compressor.experimental.pruning_v2.Pruning.pruners"]], "neural_compressor.experimental.pytorch_pruner": [[307, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[308, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "m (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[309, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.M"]], "n (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[309, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.N"]], "pattern (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[309, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern"]], "patternninm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[309, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM"]], "patternnxm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[309, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM"]], "block_size (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm attribute)": [[309, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.block_size"]], "get_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[309, "neural_compressor.experimental.pytorch_pruner.patterns.get_pattern"]], "is_global (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[309, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.is_global"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[309, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "pattern (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[309, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.pattern"]], "register_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[309, "neural_compressor.experimental.pytorch_pruner.patterns.register_pattern"]], "check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[310, "neural_compressor.experimental.pytorch_pruner.prune_utils.check_config"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[310, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "parse_not_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[310, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_not_to_prune"]], "parse_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[310, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_to_prune"]], "process_and_check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[310, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_and_check_config"]], "process_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[310, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_config"]], "reset_non_value_to_default() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[310, "neural_compressor.experimental.pytorch_pruner.prune_utils.reset_non_value_to_default"]], "magnitudepruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[311, "neural_compressor.experimental.pytorch_pruner.pruner.MagnitudePruner"]], "patternlockpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[311, "neural_compressor.experimental.pytorch_pruner.pruner.PatternLockPruner"]], "pruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[311, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner"]], "snipmomentumpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[311, "neural_compressor.experimental.pytorch_pruner.pruner.SnipMomentumPruner"]], "snippruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[311, "neural_compressor.experimental.pytorch_pruner.pruner.SnipPruner"]], "config (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[311, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.config"]], "current_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[311, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.current_sparsity_ratio"]], "end_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[311, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.end_step"]], "get_pruner() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[311, "neural_compressor.experimental.pytorch_pruner.pruner.get_pruner"]], "global_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[311, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.global_step"]], "masks (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[311, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.masks"]], "max_sparsity_ratio_per_layer (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[311, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.max_sparsity_ratio_per_layer"]], "modules (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[311, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.modules"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[311, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "pattern (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[311, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.pattern"]], "register_pruners() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[311, "neural_compressor.experimental.pytorch_pruner.pruner.register_pruners"]], "scheduler (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[311, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scheduler"]], "scores (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[311, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scores"]], "start_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[311, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.start_step"]], "target_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[311, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.target_sparsity_ratio"]], "update_frequency_on_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[311, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.update_frequency_on_step"]], "pruning (class in neural_compressor.experimental.pytorch_pruner.pruning)": [[312, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning"]], "config_file_path (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[312, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.config_file_path"]], "model (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[312, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.model"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[312, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "pruner_info (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[312, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruner_info"]], "pruners (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[312, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruners"]], "iterativescheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[313, "neural_compressor.experimental.pytorch_pruner.scheduler.IterativeScheduler"]], "oneshotscheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[313, "neural_compressor.experimental.pytorch_pruner.scheduler.OneshotScheduler"]], "scheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[313, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler"]], "config (neural_compressor.experimental.pytorch_pruner.scheduler.scheduler attribute)": [[313, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler.config"]], "get_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[313, "neural_compressor.experimental.pytorch_pruner.scheduler.get_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[313, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "register_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[313, "neural_compressor.experimental.pytorch_pruner.scheduler.register_scheduler"]], "quantization (class in neural_compressor.experimental.quantization)": [[314, "neural_compressor.experimental.quantization.Quantization"]], "neural_compressor.experimental.quantization": [[314, "module-neural_compressor.experimental.quantization"]], "scheduler (class in neural_compressor.experimental.scheduler)": [[315, "neural_compressor.experimental.scheduler.Scheduler"]], "neural_compressor.experimental.scheduler": [[315, "module-neural_compressor.experimental.scheduler"]], "automixedprecisiontunestrategy (class in neural_compressor.experimental.strategy.auto_mixed_precision)": [[316, "neural_compressor.experimental.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy"]], "neural_compressor.experimental.strategy.auto_mixed_precision": [[316, "module-neural_compressor.experimental.strategy.auto_mixed_precision"]], "basictunestrategy (class in neural_compressor.experimental.strategy.basic)": [[317, "neural_compressor.experimental.strategy.basic.BasicTuneStrategy"]], "neural_compressor.experimental.strategy.basic": [[317, "module-neural_compressor.experimental.strategy.basic"]], "bayesianoptimization (class in neural_compressor.experimental.strategy.bayesian)": [[318, "neural_compressor.experimental.strategy.bayesian.BayesianOptimization"]], "bayesiantunestrategy (class in neural_compressor.experimental.strategy.bayesian)": [[318, "neural_compressor.experimental.strategy.bayesian.BayesianTuneStrategy"]], "targetspace (class in neural_compressor.experimental.strategy.bayesian)": [[318, "neural_compressor.experimental.strategy.bayesian.TargetSpace"]], "acq_max() (in module neural_compressor.experimental.strategy.bayesian)": [[318, "neural_compressor.experimental.strategy.bayesian.acq_max"]], "neural_compressor.experimental.strategy.bayesian": [[318, "module-neural_compressor.experimental.strategy.bayesian"]], "exhaustivetunestrategy (class in neural_compressor.experimental.strategy.exhaustive)": [[319, "neural_compressor.experimental.strategy.exhaustive.ExhaustiveTuneStrategy"]], "neural_compressor.experimental.strategy.exhaustive": [[319, "module-neural_compressor.experimental.strategy.exhaustive"]], "neural_compressor.experimental.strategy": [[320, "module-neural_compressor.experimental.strategy"]], "msetunestrategy (class in neural_compressor.experimental.strategy.mse)": [[321, "neural_compressor.experimental.strategy.mse.MSETuneStrategy"]], "neural_compressor.experimental.strategy.mse": [[321, "module-neural_compressor.experimental.strategy.mse"]], "mse_v2tunestrategy (class in neural_compressor.experimental.strategy.mse_v2)": [[322, "neural_compressor.experimental.strategy.mse_v2.MSE_V2TuneStrategy"]], "neural_compressor.experimental.strategy.mse_v2": [[322, "module-neural_compressor.experimental.strategy.mse_v2"]], "randomtunestrategy (class in neural_compressor.experimental.strategy.random)": [[323, "neural_compressor.experimental.strategy.random.RandomTuneStrategy"]], "neural_compressor.experimental.strategy.random": [[323, "module-neural_compressor.experimental.strategy.random"]], "tunestrategy (class in neural_compressor.experimental.strategy.strategy)": [[324, "neural_compressor.experimental.strategy.strategy.TuneStrategy"]], "neural_compressor.experimental.strategy.strategy": [[324, "module-neural_compressor.experimental.strategy.strategy"]], "strategy_registry() (in module neural_compressor.experimental.strategy.strategy)": [[324, "neural_compressor.experimental.strategy.strategy.strategy_registry"]], "neural_compressor.experimental.strategy.utils.constant": [[325, "module-neural_compressor.experimental.strategy.utils.constant"]], "neural_compressor.experimental.strategy.utils": [[326, "module-neural_compressor.experimental.strategy.utils"]], "fallbacktuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[327, "neural_compressor.experimental.strategy.utils.tuning_sampler.FallbackTuningSampler"]], "modelwisetuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[327, "neural_compressor.experimental.strategy.utils.tuning_sampler.ModelWiseTuningSampler"]], "optypewisetuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[327, "neural_compressor.experimental.strategy.utils.tuning_sampler.OpTypeWiseTuningSampler"]], "opwisetuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[327, "neural_compressor.experimental.strategy.utils.tuning_sampler.OpWiseTuningSampler"]], "smoothquantsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[327, "neural_compressor.experimental.strategy.utils.tuning_sampler.SmoothQuantSampler"]], "tuningorder (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[327, "neural_compressor.experimental.strategy.utils.tuning_sampler.TuningOrder"]], "tuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[327, "neural_compressor.experimental.strategy.utils.tuning_sampler.TuningSampler"]], "tuningsamplerregistry (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[327, "neural_compressor.experimental.strategy.utils.tuning_sampler.TuningSamplerRegistry"]], "neural_compressor.experimental.strategy.utils.tuning_sampler": [[327, "module-neural_compressor.experimental.strategy.utils.tuning_sampler"]], "tuningitem (class in neural_compressor.experimental.strategy.utils.tuning_space)": [[328, "neural_compressor.experimental.strategy.utils.tuning_space.TuningItem"]], "tuningspace (class in neural_compressor.experimental.strategy.utils.tuning_space)": [[328, "neural_compressor.experimental.strategy.utils.tuning_space.TuningSpace"]], "initial_tuning_cfg_with_quant_mode() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[328, "neural_compressor.experimental.strategy.utils.tuning_space.initial_tuning_cfg_with_quant_mode"]], "neural_compressor.experimental.strategy.utils.tuning_space": [[328, "module-neural_compressor.experimental.strategy.utils.tuning_space"]], "pattern_to_internal() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[328, "neural_compressor.experimental.strategy.utils.tuning_space.pattern_to_internal"]], "pattern_to_path() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[328, "neural_compressor.experimental.strategy.utils.tuning_space.pattern_to_path"]], "quant_mode_from_pattern() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[328, "neural_compressor.experimental.strategy.utils.tuning_space.quant_mode_from_pattern"]], "optuningconfig (class in neural_compressor.experimental.strategy.utils.tuning_structs)": [[329, "neural_compressor.experimental.strategy.utils.tuning_structs.OpTuningConfig"]], "neural_compressor.experimental.strategy.utils.tuning_structs": [[329, "module-neural_compressor.experimental.strategy.utils.tuning_structs"]], "ordereddefaultdict (class in neural_compressor.experimental.strategy.utils.utility)": [[330, "neural_compressor.experimental.strategy.utils.utility.OrderedDefaultDict"]], "extract_data_type() (in module neural_compressor.experimental.strategy.utils.utility)": [[330, "neural_compressor.experimental.strategy.utils.utility.extract_data_type"]], "get_adaptor_name() (in module neural_compressor.experimental.strategy.utils.utility)": [[330, "neural_compressor.experimental.strategy.utils.utility.get_adaptor_name"]], "neural_compressor.experimental.strategy.utils.utility": [[330, "module-neural_compressor.experimental.strategy.utils.utility"]], "reverted_data_type() (in module neural_compressor.experimental.strategy.utils.utility)": [[330, "neural_compressor.experimental.strategy.utils.utility.reverted_data_type"]], "neural_compressor": [[331, "module-neural_compressor"]], "bleu (class in neural_compressor.metric.bleu)": [[332, "neural_compressor.metric.bleu.BLEU"]], "unicoderegex (class in neural_compressor.metric.bleu)": [[332, "neural_compressor.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.metric.bleu)": [[332, "neural_compressor.metric.bleu.bleu_tokenize"]], "labels (neural_compressor.metric.bleu.bleu attribute)": [[332, "neural_compressor.metric.bleu.BLEU.labels"]], "neural_compressor.metric.bleu": [[332, "module-neural_compressor.metric.bleu"]], "nondigit_punct_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[332, "neural_compressor.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "predictions (neural_compressor.metric.bleu.bleu attribute)": [[332, "neural_compressor.metric.bleu.BLEU.predictions"]], "punct_nondigit_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[332, "neural_compressor.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "symbol_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[332, "neural_compressor.metric.bleu.UnicodeRegex.symbol_re"]], "compute_bleu() (in module neural_compressor.metric.bleu_util)": [[333, "neural_compressor.metric.bleu_util.compute_bleu"]], "neural_compressor.metric.bleu_util": [[333, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[334, "module-neural_compressor.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.metric.coco_tools)": [[335, "neural_compressor.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.metric.coco_tools)": [[335, "neural_compressor.metric.coco_tools.COCOWrapper"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.metric.coco_tools)": [[335, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.metric.coco_tools)": [[335, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.metric.coco_tools)": [[335, "neural_compressor.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "dataset (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[335, "neural_compressor.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[335, "neural_compressor.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.metric.coco_tools": [[335, "module-neural_compressor.metric.coco_tools"]], "evaluate() (in module neural_compressor.metric.evaluate_squad)": [[336, "neural_compressor.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.metric.evaluate_squad)": [[336, "neural_compressor.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.metric.evaluate_squad)": [[336, "neural_compressor.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.evaluate_squad)": [[336, "neural_compressor.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.metric.evaluate_squad": [[336, "module-neural_compressor.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.metric.f1)": [[337, "neural_compressor.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.metric.f1)": [[337, "neural_compressor.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.f1)": [[337, "neural_compressor.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[337, "module-neural_compressor.metric.f1"]], "normalize_answer() (in module neural_compressor.metric.f1)": [[337, "neural_compressor.metric.f1.normalize_answer"]], "neural_compressor.metric": [[338, "module-neural_compressor.metric"]], "accuracy (class in neural_compressor.metric.metric)": [[339, "neural_compressor.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.metric.metric)": [[339, "neural_compressor.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.metric.metric)": [[339, "neural_compressor.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.metric.metric)": [[339, "neural_compressor.metric.metric.F1"]], "generaltopk (class in neural_compressor.metric.metric)": [[339, "neural_compressor.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.metric.metric)": [[339, "neural_compressor.metric.metric.Loss"]], "mae (class in neural_compressor.metric.metric)": [[339, "neural_compressor.metric.metric.MAE"]], "metrics (class in neural_compressor.metric.metric)": [[339, "neural_compressor.metric.metric.METRICS"]], "mse (class in neural_compressor.metric.metric)": [[339, "neural_compressor.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.metric.metric)": [[339, "neural_compressor.metric.metric.MXNetMetrics"]], "metric (class in neural_compressor.metric.metric)": [[339, "neural_compressor.metric.metric.Metric"]], "onnxrtglue (class in neural_compressor.metric.metric)": [[339, "neural_compressor.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.metric.metric)": [[339, "neural_compressor.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.metric.metric)": [[339, "neural_compressor.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.metric.metric)": [[339, "neural_compressor.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.metric.metric)": [[339, "neural_compressor.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.metric.metric)": [[339, "neural_compressor.metric.metric.RMSE"]], "roc (class in neural_compressor.metric.metric)": [[339, "neural_compressor.metric.metric.ROC"]], "squadf1 (class in neural_compressor.metric.metric)": [[339, "neural_compressor.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.metric.metric)": [[339, "neural_compressor.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.metric.metric)": [[339, "neural_compressor.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.metric.metric)": [[339, "neural_compressor.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.metric.metric)": [[339, "neural_compressor.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.metric.metric)": [[339, "neural_compressor.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.metric.metric)": [[339, "neural_compressor.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.metric.metric)": [[339, "neural_compressor.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.metric.metric)": [[339, "neural_compressor.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.metric.metric.mae attribute)": [[339, "neural_compressor.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.metric.metric.mse attribute)": [[339, "neural_compressor.metric.metric.MSE.compare_label"]], "k (neural_compressor.metric.metric.generaltopk attribute)": [[339, "neural_compressor.metric.metric.GeneralTopK.k"]], "k (neural_compressor.metric.metric.tensorflowtopk attribute)": [[339, "neural_compressor.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.metric.metric.accuracy attribute)": [[339, "neural_compressor.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.metric.metric.mae attribute)": [[339, "neural_compressor.metric.metric.MAE.label_list"]], "label_list (neural_compressor.metric.metric.mse attribute)": [[339, "neural_compressor.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.metric.metric)": [[339, "neural_compressor.metric.metric.mIOU"]], "metric_registry() (in module neural_compressor.metric.metric)": [[339, "neural_compressor.metric.metric.metric_registry"]], "metrics (neural_compressor.metric.metric.metrics attribute)": [[339, "neural_compressor.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.metric.metric.mxnetmetrics attribute)": [[339, "neural_compressor.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtitmetrics attribute)": [[339, "neural_compressor.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtqlmetrics attribute)": [[339, "neural_compressor.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.metric.metric.pytorchmetrics attribute)": [[339, "neural_compressor.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.metric.metric.tensorflowmetrics attribute)": [[339, "neural_compressor.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.metric.metric.rmse attribute)": [[339, "neural_compressor.metric.metric.RMSE.mse"]], "neural_compressor.metric.metric": [[339, "module-neural_compressor.metric.metric"]], "num_correct (neural_compressor.metric.metric.generaltopk attribute)": [[339, "neural_compressor.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.metric.metric.tensorflowtopk attribute)": [[339, "neural_compressor.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.metric.metric.generaltopk attribute)": [[339, "neural_compressor.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.metric.metric.tensorflowtopk attribute)": [[339, "neural_compressor.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.metric.metric.accuracy attribute)": [[339, "neural_compressor.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.metric.metric.mae attribute)": [[339, "neural_compressor.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.metric.metric.mse attribute)": [[339, "neural_compressor.metric.metric.MSE.pred_list"]], "register_customer_metric() (in module neural_compressor.metric.metric)": [[339, "neural_compressor.metric.metric.register_customer_metric"]], "sample (neural_compressor.metric.metric.accuracy attribute)": [[339, "neural_compressor.metric.metric.Accuracy.sample"]], "sample (neural_compressor.metric.metric.loss attribute)": [[339, "neural_compressor.metric.metric.Loss.sample"]], "sum (neural_compressor.metric.metric.loss attribute)": [[339, "neural_compressor.metric.metric.Loss.sum"]], "fit() (in module neural_compressor.mix_precision)": [[340, "neural_compressor.mix_precision.fit"]], "neural_compressor.mix_precision": [[340, "module-neural_compressor.mix_precision"]], "basemodel (class in neural_compressor.model.base_model)": [[341, "neural_compressor.model.base_model.BaseModel"]], "neural_compressor.model.base_model": [[341, "module-neural_compressor.model.base_model"]], "neural_compressor.model": [[342, "module-neural_compressor.model"]], "kerasmodel (class in neural_compressor.model.keras_model)": [[343, "neural_compressor.model.keras_model.KerasModel"]], "neural_compressor.model.keras_model": [[343, "module-neural_compressor.model.keras_model"]], "model (class in neural_compressor.model.model)": [[344, "neural_compressor.model.model.Model"]], "get_model_fwk_name() (in module neural_compressor.model.model)": [[344, "neural_compressor.model.model.get_model_fwk_name"]], "neural_compressor.model.model": [[344, "module-neural_compressor.model.model"]], "mxnetmodel (class in neural_compressor.model.mxnet_model)": [[345, "neural_compressor.model.mxnet_model.MXNetModel"]], "neural_compressor.model.mxnet_model": [[345, "module-neural_compressor.model.mxnet_model"]], "tfslimnetsfactory (class in neural_compressor.model.nets_factory)": [[346, "neural_compressor.model.nets_factory.TFSlimNetsFactory"]], "neural_compressor.model.nets_factory": [[346, "module-neural_compressor.model.nets_factory"]], "onnxmodel (class in neural_compressor.model.onnx_model)": [[347, "neural_compressor.model.onnx_model.ONNXModel"]], "neural_compressor.model.onnx_model": [[347, "module-neural_compressor.model.onnx_model"]], "tensorflowbasemodel (class in neural_compressor.model.tensorflow_model)": [[348, "neural_compressor.model.tensorflow_model.TensorflowBaseModel"]], "tensorflowcheckpointmodel (class in neural_compressor.model.tensorflow_model)": [[348, "neural_compressor.model.tensorflow_model.TensorflowCheckpointModel"]], "tensorflowmodel (class in neural_compressor.model.tensorflow_model)": [[348, "neural_compressor.model.tensorflow_model.TensorflowModel"]], "tensorflowqatmodel (class in neural_compressor.model.tensorflow_model)": [[348, "neural_compressor.model.tensorflow_model.TensorflowQATModel"]], "tensorflowsavedmodelmodel (class in neural_compressor.model.tensorflow_model)": [[348, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel"]], "checkpoint_session() (in module neural_compressor.model.tensorflow_model)": [[348, "neural_compressor.model.tensorflow_model.checkpoint_session"]], "estimator_session() (in module neural_compressor.model.tensorflow_model)": [[348, "neural_compressor.model.tensorflow_model.estimator_session"]], "frozen_pb_session() (in module neural_compressor.model.tensorflow_model)": [[348, "neural_compressor.model.tensorflow_model.frozen_pb_session"]], "get_model_type() (in module neural_compressor.model.tensorflow_model)": [[348, "neural_compressor.model.tensorflow_model.get_model_type"]], "graph_def_session() (in module neural_compressor.model.tensorflow_model)": [[348, "neural_compressor.model.tensorflow_model.graph_def_session"]], "graph_session() (in module neural_compressor.model.tensorflow_model)": [[348, "neural_compressor.model.tensorflow_model.graph_session"]], "keras_session() (in module neural_compressor.model.tensorflow_model)": [[348, "neural_compressor.model.tensorflow_model.keras_session"]], "load_saved_model() (in module neural_compressor.model.tensorflow_model)": [[348, "neural_compressor.model.tensorflow_model.load_saved_model"]], "neural_compressor.model.tensorflow_model": [[348, "module-neural_compressor.model.tensorflow_model"]], "saved_model_session() (in module neural_compressor.model.tensorflow_model)": [[348, "neural_compressor.model.tensorflow_model.saved_model_session"]], "slim_session() (in module neural_compressor.model.tensorflow_model)": [[348, "neural_compressor.model.tensorflow_model.slim_session"]], "validate_and_inference_input_output() (in module neural_compressor.model.tensorflow_model)": [[348, "neural_compressor.model.tensorflow_model.validate_and_inference_input_output"]], "validate_graph_node() (in module neural_compressor.model.tensorflow_model)": [[348, "neural_compressor.model.tensorflow_model.validate_graph_node"]], "ipexmodel (class in neural_compressor.model.torch_model)": [[349, "neural_compressor.model.torch_model.IPEXModel"]], "pytorchbasemodel (class in neural_compressor.model.torch_model)": [[349, "neural_compressor.model.torch_model.PyTorchBaseModel"]], "pytorchfxmodel (class in neural_compressor.model.torch_model)": [[349, "neural_compressor.model.torch_model.PyTorchFXModel"]], "pytorchmodel (class in neural_compressor.model.torch_model)": [[349, "neural_compressor.model.torch_model.PyTorchModel"]], "neural_compressor.model.torch_model": [[349, "module-neural_compressor.model.torch_model"]], "accuracy (class in neural_compressor.objective)": [[350, "neural_compressor.objective.Accuracy"]], "footprint (class in neural_compressor.objective)": [[350, "neural_compressor.objective.Footprint"]], "modelsize (class in neural_compressor.objective)": [[350, "neural_compressor.objective.ModelSize"]], "multiobjective (class in neural_compressor.objective)": [[350, "neural_compressor.objective.MultiObjective"]], "objective (class in neural_compressor.objective)": [[350, "neural_compressor.objective.Objective"]], "performance (class in neural_compressor.objective)": [[350, "neural_compressor.objective.Performance"]], "neural_compressor.objective": [[350, "module-neural_compressor.objective"]], "objective_custom_registry() (in module neural_compressor.objective)": [[350, "neural_compressor.objective.objective_custom_registry"]], "objective_registry() (in module neural_compressor.objective)": [[350, "neural_compressor.objective.objective_registry"]], "neural_compressor.profiling": [[351, "module-neural_compressor.profiling"]], "parserfactory (class in neural_compressor.profiling.parser.factory)": [[352, "neural_compressor.profiling.parser.factory.ParserFactory"]], "neural_compressor.profiling.parser.factory": [[352, "module-neural_compressor.profiling.parser.factory"]], "neural_compressor.profiling.parser": [[353, "module-neural_compressor.profiling.parser"]], "onnxrtparserfactory (class in neural_compressor.profiling.parser.onnx_parser.factory)": [[354, "neural_compressor.profiling.parser.onnx_parser.factory.OnnxrtParserFactory"]], "neural_compressor.profiling.parser.onnx_parser.factory": [[354, "module-neural_compressor.profiling.parser.onnx_parser.factory"]], "neural_compressor.profiling.parser.onnx_parser": [[355, "module-neural_compressor.profiling.parser.onnx_parser"]], "onnxprofilingparser (class in neural_compressor.profiling.parser.onnx_parser.parser)": [[356, "neural_compressor.profiling.parser.onnx_parser.parser.OnnxProfilingParser"]], "neural_compressor.profiling.parser.onnx_parser.parser": [[356, "module-neural_compressor.profiling.parser.onnx_parser.parser"]], "profilingparser (class in neural_compressor.profiling.parser.parser)": [[357, "neural_compressor.profiling.parser.parser.ProfilingParser"]], "neural_compressor.profiling.parser.parser": [[357, "module-neural_compressor.profiling.parser.parser"]], "profilingresult (class in neural_compressor.profiling.parser.result)": [[358, "neural_compressor.profiling.parser.result.ProfilingResult"]], "neural_compressor.profiling.parser.result": [[358, "module-neural_compressor.profiling.parser.result"]], "tensorflowparserfactory (class in neural_compressor.profiling.parser.tensorflow_parser.factory)": [[359, "neural_compressor.profiling.parser.tensorflow_parser.factory.TensorFlowParserFactory"]], "neural_compressor.profiling.parser.tensorflow_parser.factory": [[359, "module-neural_compressor.profiling.parser.tensorflow_parser.factory"]], "neural_compressor.profiling.parser.tensorflow_parser": [[360, "module-neural_compressor.profiling.parser.tensorflow_parser"]], "tensorflowprofilingparser (class in neural_compressor.profiling.parser.tensorflow_parser.parser)": [[361, "neural_compressor.profiling.parser.tensorflow_parser.parser.TensorFlowProfilingParser"]], "neural_compressor.profiling.parser.tensorflow_parser.parser": [[361, "module-neural_compressor.profiling.parser.tensorflow_parser.parser"]], "profilerfactory (class in neural_compressor.profiling.profiler.factory)": [[362, "neural_compressor.profiling.profiler.factory.ProfilerFactory"]], "neural_compressor.profiling.profiler.factory": [[362, "module-neural_compressor.profiling.profiler.factory"]], "neural_compressor.profiling.profiler": [[363, "module-neural_compressor.profiling.profiler"]], "profilerfactory (class in neural_compressor.profiling.profiler.onnxrt_profiler.factory)": [[364, "neural_compressor.profiling.profiler.onnxrt_profiler.factory.ProfilerFactory"]], "neural_compressor.profiling.profiler.onnxrt_profiler.factory": [[364, "module-neural_compressor.profiling.profiler.onnxrt_profiler.factory"]], "neural_compressor.profiling.profiler.onnxrt_profiler": [[365, "module-neural_compressor.profiling.profiler.onnxrt_profiler"]], "profiler (class in neural_compressor.profiling.profiler.onnxrt_profiler.profiler)": [[366, "neural_compressor.profiling.profiler.onnxrt_profiler.profiler.Profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.profiler": [[366, "module-neural_compressor.profiling.profiler.onnxrt_profiler.profiler"]], "create_onnx_config() (in module neural_compressor.profiling.profiler.onnxrt_profiler.utils)": [[367, "neural_compressor.profiling.profiler.onnxrt_profiler.utils.create_onnx_config"]], "neural_compressor.profiling.profiler.onnxrt_profiler.utils": [[367, "module-neural_compressor.profiling.profiler.onnxrt_profiler.utils"]], "profiler (class in neural_compressor.profiling.profiler.profiler)": [[368, "neural_compressor.profiling.profiler.profiler.Profiler"]], "neural_compressor.profiling.profiler.profiler": [[368, "module-neural_compressor.profiling.profiler.profiler"]], "profilerfactory (class in neural_compressor.profiling.profiler.tensorflow_profiler.factory)": [[369, "neural_compressor.profiling.profiler.tensorflow_profiler.factory.ProfilerFactory"]], "neural_compressor.profiling.profiler.tensorflow_profiler.factory": [[369, "module-neural_compressor.profiling.profiler.tensorflow_profiler.factory"]], "neural_compressor.profiling.profiler.tensorflow_profiler": [[370, "module-neural_compressor.profiling.profiler.tensorflow_profiler"]], "profiler (class in neural_compressor.profiling.profiler.tensorflow_profiler.profiler)": [[371, "neural_compressor.profiling.profiler.tensorflow_profiler.profiler.Profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.profiler": [[371, "module-neural_compressor.profiling.profiler.tensorflow_profiler.profiler"]], "create_tf_config() (in module neural_compressor.profiling.profiler.tensorflow_profiler.utils)": [[372, "neural_compressor.profiling.profiler.tensorflow_profiler.utils.create_tf_config"]], "delete_assign() (in module neural_compressor.profiling.profiler.tensorflow_profiler.utils)": [[372, "neural_compressor.profiling.profiler.tensorflow_profiler.utils.delete_assign"]], "neural_compressor.profiling.profiler.tensorflow_profiler.utils": [[372, "module-neural_compressor.profiling.profiler.tensorflow_profiler.utils"]], "set_eager_execution() (in module neural_compressor.profiling.profiler.tensorflow_profiler.utils)": [[372, "neural_compressor.profiling.profiler.tensorflow_profiler.utils.set_eager_execution"]], "fit() (in module neural_compressor.quantization)": [[373, "neural_compressor.quantization.fit"]], "neural_compressor.quantization": [[373, "module-neural_compressor.quantization"]], "autotunestrategy (class in neural_compressor.strategy.auto)": [[374, "neural_compressor.strategy.auto.AutoTuneStrategy"]], "neural_compressor.strategy.auto": [[374, "module-neural_compressor.strategy.auto"]], "automixedprecisiontunestrategy (class in neural_compressor.strategy.auto_mixed_precision)": [[375, "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[375, "module-neural_compressor.strategy.auto_mixed_precision"]], "basictunestrategy (class in neural_compressor.strategy.basic)": [[376, "neural_compressor.strategy.basic.BasicTuneStrategy"]], "neural_compressor.strategy.basic": [[376, "module-neural_compressor.strategy.basic"]], "bayesianoptimization (class in neural_compressor.strategy.bayesian)": [[377, "neural_compressor.strategy.bayesian.BayesianOptimization"]], "bayesiantunestrategy (class in neural_compressor.strategy.bayesian)": [[377, "neural_compressor.strategy.bayesian.BayesianTuneStrategy"]], "targetspace (class in neural_compressor.strategy.bayesian)": [[377, "neural_compressor.strategy.bayesian.TargetSpace"]], "acq_max() (in module neural_compressor.strategy.bayesian)": [[377, "neural_compressor.strategy.bayesian.acq_max"]], "neural_compressor.strategy.bayesian": [[377, "module-neural_compressor.strategy.bayesian"]], "conservativetunestrategy (class in neural_compressor.strategy.conservative)": [[378, "neural_compressor.strategy.conservative.ConservativeTuneStrategy"]], "neural_compressor.strategy.conservative": [[378, "module-neural_compressor.strategy.conservative"]], "exhaustivetunestrategy (class in neural_compressor.strategy.exhaustive)": [[379, "neural_compressor.strategy.exhaustive.ExhaustiveTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[379, "module-neural_compressor.strategy.exhaustive"]], "hawq_v2tunestrategy (class in neural_compressor.strategy.hawq_v2)": [[380, "neural_compressor.strategy.hawq_v2.HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.hawq_v2": [[380, "module-neural_compressor.strategy.hawq_v2"]], "neural_compressor.strategy": [[381, "module-neural_compressor.strategy"]], "msetunestrategy (class in neural_compressor.strategy.mse)": [[382, "neural_compressor.strategy.mse.MSETuneStrategy"]], "neural_compressor.strategy.mse": [[382, "module-neural_compressor.strategy.mse"]], "mse_v2tunestrategy (class in neural_compressor.strategy.mse_v2)": [[383, "neural_compressor.strategy.mse_v2.MSE_V2TuneStrategy"]], "neural_compressor.strategy.mse_v2": [[383, "module-neural_compressor.strategy.mse_v2"]], "randomtunestrategy (class in neural_compressor.strategy.random)": [[384, "neural_compressor.strategy.random.RandomTuneStrategy"]], "neural_compressor.strategy.random": [[384, "module-neural_compressor.strategy.random"]], "tunestrategy (class in neural_compressor.strategy.strategy)": [[385, "neural_compressor.strategy.strategy.TuneStrategy"]], "tunestrategymeta (class in neural_compressor.strategy.strategy)": [[385, "neural_compressor.strategy.strategy.TuneStrategyMeta"]], "neural_compressor.strategy.strategy": [[385, "module-neural_compressor.strategy.strategy"]], "strategy_registry() (in module neural_compressor.strategy.strategy)": [[385, "neural_compressor.strategy.strategy.strategy_registry"]], "neural_compressor.strategy.utils.constant": [[386, "module-neural_compressor.strategy.utils.constant"]], "neural_compressor.strategy.utils": [[387, "module-neural_compressor.strategy.utils"]], "blockfallbacktuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[388, "neural_compressor.strategy.utils.tuning_sampler.BlockFallbackTuningSampler"]], "fallbacktuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[388, "neural_compressor.strategy.utils.tuning_sampler.FallbackTuningSampler"]], "lowerbitssampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[388, "neural_compressor.strategy.utils.tuning_sampler.LowerBitsSampler"]], "modelwisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[388, "neural_compressor.strategy.utils.tuning_sampler.ModelWiseTuningSampler"]], "optypewisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[388, "neural_compressor.strategy.utils.tuning_sampler.OpTypeWiseTuningSampler"]], "opwisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[388, "neural_compressor.strategy.utils.tuning_sampler.OpWiseTuningSampler"]], "tuningorder (class in neural_compressor.strategy.utils.tuning_sampler)": [[388, "neural_compressor.strategy.utils.tuning_sampler.TuningOrder"]], "tuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[388, "neural_compressor.strategy.utils.tuning_sampler.TuningSampler"]], "tuningsamplerregistry (class in neural_compressor.strategy.utils.tuning_sampler)": [[388, "neural_compressor.strategy.utils.tuning_sampler.TuningSamplerRegistry"]], "neural_compressor.strategy.utils.tuning_sampler": [[388, "module-neural_compressor.strategy.utils.tuning_sampler"]], "tuningitem (class in neural_compressor.strategy.utils.tuning_space)": [[389, "neural_compressor.strategy.utils.tuning_space.TuningItem"]], "tuningspace (class in neural_compressor.strategy.utils.tuning_space)": [[389, "neural_compressor.strategy.utils.tuning_space.TuningSpace"]], "initial_tuning_cfg_with_quant_mode() (in module neural_compressor.strategy.utils.tuning_space)": [[389, "neural_compressor.strategy.utils.tuning_space.initial_tuning_cfg_with_quant_mode"]], "neural_compressor.strategy.utils.tuning_space": [[389, "module-neural_compressor.strategy.utils.tuning_space"]], "pattern_to_internal() (in module neural_compressor.strategy.utils.tuning_space)": [[389, "neural_compressor.strategy.utils.tuning_space.pattern_to_internal"]], "pattern_to_path() (in module neural_compressor.strategy.utils.tuning_space)": [[389, "neural_compressor.strategy.utils.tuning_space.pattern_to_path"]], "quant_mode_from_pattern() (in module neural_compressor.strategy.utils.tuning_space)": [[389, "neural_compressor.strategy.utils.tuning_space.quant_mode_from_pattern"]], "optuningconfig (class in neural_compressor.strategy.utils.tuning_structs)": [[390, "neural_compressor.strategy.utils.tuning_structs.OpTuningConfig"]], "neural_compressor.strategy.utils.tuning_structs": [[390, "module-neural_compressor.strategy.utils.tuning_structs"]], "ordereddefaultdict (class in neural_compressor.strategy.utils.utility)": [[391, "neural_compressor.strategy.utils.utility.OrderedDefaultDict"]], "quantoptions (class in neural_compressor.strategy.utils.utility)": [[391, "neural_compressor.strategy.utils.utility.QuantOptions"]], "quanttype (class in neural_compressor.strategy.utils.utility)": [[391, "neural_compressor.strategy.utils.utility.QuantType"]], "build_slave_faker_model() (in module neural_compressor.strategy.utils.utility)": [[391, "neural_compressor.strategy.utils.utility.build_slave_faker_model"]], "extract_data_type() (in module neural_compressor.strategy.utils.utility)": [[391, "neural_compressor.strategy.utils.utility.extract_data_type"]], "get_adaptor_name() (in module neural_compressor.strategy.utils.utility)": [[391, "neural_compressor.strategy.utils.utility.get_adaptor_name"]], "neural_compressor.strategy.utils.utility": [[391, "module-neural_compressor.strategy.utils.utility"]], "preprocess_user_cfg() (in module neural_compressor.strategy.utils.utility)": [[391, "neural_compressor.strategy.utils.utility.preprocess_user_cfg"]], "reverted_data_type() (in module neural_compressor.strategy.utils.utility)": [[391, "neural_compressor.strategy.utils.utility.reverted_data_type"]], "exampleclass (class in neural_compressor.template.api_doc_example)": [[392, "neural_compressor.template.api_doc_example.ExampleClass"]], "attr1 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[392, "neural_compressor.template.api_doc_example.ExampleClass.attr1"]], "attr2 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[392, "neural_compressor.template.api_doc_example.ExampleClass.attr2"]], "attr5 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[392, "neural_compressor.template.api_doc_example.ExampleClass.attr5"]], "attribute1 (in module neural_compressor.template.api_doc_example)": [[392, "neural_compressor.template.api_doc_example.attribute1"]], "function1() (in module neural_compressor.template.api_doc_example)": [[392, "neural_compressor.template.api_doc_example.function1"]], "function2() (in module neural_compressor.template.api_doc_example)": [[392, "neural_compressor.template.api_doc_example.function2"]], "function3() (in module neural_compressor.template.api_doc_example)": [[392, "neural_compressor.template.api_doc_example.function3"]], "generator1() (in module neural_compressor.template.api_doc_example)": [[392, "neural_compressor.template.api_doc_example.generator1"]], "module_debug_level1 (in module neural_compressor.template.api_doc_example)": [[392, "neural_compressor.template.api_doc_example.module_debug_level1"]], "neural_compressor.template.api_doc_example": [[392, "module-neural_compressor.template.api_doc_example"]], "neural_compressor.template": [[393, "module-neural_compressor.template"]], "callbacks (class in neural_compressor.training)": [[394, "neural_compressor.training.CallBacks"]], "compressionmanager (class in neural_compressor.training)": [[394, "neural_compressor.training.CompressionManager"]], "fit() (in module neural_compressor.training)": [[394, "neural_compressor.training.fit"]], "neural_compressor.training": [[394, "module-neural_compressor.training"]], "prepare_compression() (in module neural_compressor.training)": [[394, "neural_compressor.training.prepare_compression"]], "layerhistogramcollector (class in neural_compressor.utils.collect_layer_histogram)": [[395, "neural_compressor.utils.collect_layer_histogram.LayerHistogramCollector"]], "neural_compressor.utils.collect_layer_histogram": [[395, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[396, "module-neural_compressor.utils.constant"]], "create_dataloader() (in module neural_compressor.utils.create_obj_from_config)": [[397, "neural_compressor.utils.create_obj_from_config.create_dataloader"]], "create_dataset() (in module neural_compressor.utils.create_obj_from_config)": [[397, "neural_compressor.utils.create_obj_from_config.create_dataset"]], "create_eval_func() (in module neural_compressor.utils.create_obj_from_config)": [[397, "neural_compressor.utils.create_obj_from_config.create_eval_func"]], "create_train_func() (in module neural_compressor.utils.create_obj_from_config)": [[397, "neural_compressor.utils.create_obj_from_config.create_train_func"]], "get_algorithm() (in module neural_compressor.utils.create_obj_from_config)": [[397, "neural_compressor.utils.create_obj_from_config.get_algorithm"]], "get_func_from_config() (in module neural_compressor.utils.create_obj_from_config)": [[397, "neural_compressor.utils.create_obj_from_config.get_func_from_config"]], "get_metrics() (in module neural_compressor.utils.create_obj_from_config)": [[397, "neural_compressor.utils.create_obj_from_config.get_metrics"]], "get_postprocess() (in module neural_compressor.utils.create_obj_from_config)": [[397, "neural_compressor.utils.create_obj_from_config.get_postprocess"]], "get_preprocess() (in module neural_compressor.utils.create_obj_from_config)": [[397, "neural_compressor.utils.create_obj_from_config.get_preprocess"]], "neural_compressor.utils.create_obj_from_config": [[397, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils": [[398, "module-neural_compressor.utils"]], "kl_divergence (class in neural_compressor.utils.kl_divergence)": [[399, "neural_compressor.utils.kl_divergence.KL_Divergence"]], "neural_compressor.utils.kl_divergence": [[399, "module-neural_compressor.utils.kl_divergence"]], "optimizedmodel (class in neural_compressor.utils.load_huggingface)": [[400, "neural_compressor.utils.load_huggingface.OptimizedModel"]], "neural_compressor.utils.load_huggingface": [[400, "module-neural_compressor.utils.load_huggingface"]], "save_for_huggingface_upstream() (in module neural_compressor.utils.load_huggingface)": [[400, "neural_compressor.utils.load_huggingface.save_for_huggingface_upstream"]], "logger (class in neural_compressor.utils.logger)": [[401, "neural_compressor.utils.logger.Logger"]], "debug() (in module neural_compressor.utils.logger)": [[401, "neural_compressor.utils.logger.debug"]], "error() (in module neural_compressor.utils.logger)": [[401, "neural_compressor.utils.logger.error"]], "fatal() (in module neural_compressor.utils.logger)": [[401, "neural_compressor.utils.logger.fatal"]], "info() (in module neural_compressor.utils.logger)": [[401, "neural_compressor.utils.logger.info"]], "log() (in module neural_compressor.utils.logger)": [[401, "neural_compressor.utils.logger.log"]], "neural_compressor.utils.logger": [[401, "module-neural_compressor.utils.logger"]], "warn() (in module neural_compressor.utils.logger)": [[401, "neural_compressor.utils.logger.warn"]], "warning() (in module neural_compressor.utils.logger)": [[401, "neural_compressor.utils.logger.warning"]], "neural_compressor.utils.neural_insights_utils": [[402, "module-neural_compressor.utils.neural_insights_utils"]], "register_neural_insights_workload() (in module neural_compressor.utils.neural_insights_utils)": [[402, "neural_compressor.utils.neural_insights_utils.register_neural_insights_workload"]], "update_neural_insights_workload() (in module neural_compressor.utils.neural_insights_utils)": [[402, "neural_compressor.utils.neural_insights_utils.update_neural_insights_workload"]], "update_neural_insights_workload_accuracy_data() (in module neural_compressor.utils.neural_insights_utils)": [[402, "neural_compressor.utils.neural_insights_utils.update_neural_insights_workload_accuracy_data"]], "neural_compressor.utils.options": [[403, "module-neural_compressor.utils.options"]], "onnxrt (class in neural_compressor.utils.options)": [[403, "neural_compressor.utils.options.onnxrt"]], "is_int8_model() (in module neural_compressor.utils.pytorch)": [[404, "neural_compressor.utils.pytorch.is_int8_model"]], "load() (in module neural_compressor.utils.pytorch)": [[404, "neural_compressor.utils.pytorch.load"]], "neural_compressor.utils.pytorch": [[404, "module-neural_compressor.utils.pytorch"]], "captureoutputtofile (class in neural_compressor.utils.utility)": [[405, "neural_compressor.utils.utility.CaptureOutputToFile"]], "cpuinfo (class in neural_compressor.utils.utility)": [[405, "neural_compressor.utils.utility.CpuInfo"]], "dequantize() (in module neural_compressor.utils.utility)": [[405, "neural_compressor.utils.utility.Dequantize"]], "dotdict (class in neural_compressor.utils.utility)": [[405, "neural_compressor.utils.utility.DotDict"]], "global_state (class in neural_compressor.utils.utility)": [[405, "neural_compressor.utils.utility.GLOBAL_STATE"]], "lazyimport (class in neural_compressor.utils.utility)": [[405, "neural_compressor.utils.utility.LazyImport"]], "mode (class in neural_compressor.utils.utility)": [[405, "neural_compressor.utils.utility.MODE"]], "opentry (class in neural_compressor.utils.utility)": [[405, "neural_compressor.utils.utility.OpEntry"]], "statistics (class in neural_compressor.utils.utility)": [[405, "neural_compressor.utils.utility.Statistics"]], "alias_param() (in module neural_compressor.utils.utility)": [[405, "neural_compressor.utils.utility.alias_param"]], "calculate_mse() (in module neural_compressor.utils.utility)": [[405, "neural_compressor.utils.utility.calculate_mse"]], "combine_histogram() (in module neural_compressor.utils.utility)": [[405, "neural_compressor.utils.utility.combine_histogram"]], "compare_objects() (in module neural_compressor.utils.utility)": [[405, "neural_compressor.utils.utility.compare_objects"]], "compute_sparsity() (in module neural_compressor.utils.utility)": [[405, "neural_compressor.utils.utility.compute_sparsity"]], "dequantize_weight() (in module neural_compressor.utils.utility)": [[405, "neural_compressor.utils.utility.dequantize_weight"]], "dump_class_attrs() (in module neural_compressor.utils.utility)": [[405, "neural_compressor.utils.utility.dump_class_attrs"]], "dump_data_to_local() (in module neural_compressor.utils.utility)": [[405, "neural_compressor.utils.utility.dump_data_to_local"]], "dump_elapsed_time() (in module neural_compressor.utils.utility)": [[405, "neural_compressor.utils.utility.dump_elapsed_time"]], "dump_table() (in module neural_compressor.utils.utility)": [[405, "neural_compressor.utils.utility.dump_table"]], "dump_table_to_csv() (in module neural_compressor.utils.utility)": [[405, "neural_compressor.utils.utility.dump_table_to_csv"]], "equal_dicts() (in module neural_compressor.utils.utility)": [[405, "neural_compressor.utils.utility.equal_dicts"]], "fault_tolerant_file() (in module neural_compressor.utils.utility)": [[405, "neural_compressor.utils.utility.fault_tolerant_file"]], "get_all_fp32_data() (in module neural_compressor.utils.utility)": [[405, "neural_compressor.utils.utility.get_all_fp32_data"]], "get_number_of_sockets() (in module neural_compressor.utils.utility)": [[405, "neural_compressor.utils.utility.get_number_of_sockets"]], "get_op_list() (in module neural_compressor.utils.utility)": [[405, "neural_compressor.utils.utility.get_op_list"]], "get_size() (in module neural_compressor.utils.utility)": [[405, "neural_compressor.utils.utility.get_size"]], "get_tensor_histogram() (in module neural_compressor.utils.utility)": [[405, "neural_compressor.utils.utility.get_tensor_histogram"]], "get_tensors_info() (in module neural_compressor.utils.utility)": [[405, "neural_compressor.utils.utility.get_tensors_info"]], "get_tuning_history() (in module neural_compressor.utils.utility)": [[405, "neural_compressor.utils.utility.get_tuning_history"]], "get_weights_details() (in module neural_compressor.utils.utility)": [[405, "neural_compressor.utils.utility.get_weights_details"]], "load_data_from_pkl() (in module neural_compressor.utils.utility)": [[405, "neural_compressor.utils.utility.load_data_from_pkl"]], "mse_metric_gap() (in module neural_compressor.utils.utility)": [[405, "neural_compressor.utils.utility.mse_metric_gap"]], "neural_compressor.utils.utility": [[405, "module-neural_compressor.utils.utility"]], "print_op_list() (in module neural_compressor.utils.utility)": [[405, "neural_compressor.utils.utility.print_op_list"]], "print_table() (in module neural_compressor.utils.utility)": [[405, "neural_compressor.utils.utility.print_table"]], "recover() (in module neural_compressor.utils.utility)": [[405, "neural_compressor.utils.utility.recover"]], "set_random_seed() (in module neural_compressor.utils.utility)": [[405, "neural_compressor.utils.utility.set_random_seed"]], "set_resume_from() (in module neural_compressor.utils.utility)": [[405, "neural_compressor.utils.utility.set_resume_from"]], "set_tensorboard() (in module neural_compressor.utils.utility)": [[405, "neural_compressor.utils.utility.set_tensorboard"]], "set_workspace() (in module neural_compressor.utils.utility)": [[405, "neural_compressor.utils.utility.set_workspace"]], "show_memory_info() (in module neural_compressor.utils.utility)": [[405, "neural_compressor.utils.utility.show_memory_info"]], "singleton() (in module neural_compressor.utils.utility)": [[405, "neural_compressor.utils.utility.singleton"]], "str2array() (in module neural_compressor.utils.utility)": [[405, "neural_compressor.utils.utility.str2array"]], "time_limit() (in module neural_compressor.utils.utility)": [[405, "neural_compressor.utils.utility.time_limit"]], "version1_eq_version2() (in module neural_compressor.utils.utility)": [[405, "neural_compressor.utils.utility.version1_eq_version2"]], "version1_gt_version2() (in module neural_compressor.utils.utility)": [[405, "neural_compressor.utils.utility.version1_gt_version2"]], "version1_gte_version2() (in module neural_compressor.utils.utility)": [[405, "neural_compressor.utils.utility.version1_gte_version2"]], "version1_lt_version2() (in module neural_compressor.utils.utility)": [[405, "neural_compressor.utils.utility.version1_lt_version2"]], "version1_lte_version2() (in module neural_compressor.utils.utility)": [[405, "neural_compressor.utils.utility.version1_lte_version2"]], "weightsdetails (class in neural_compressor.utils.weights_details)": [[406, "neural_compressor.utils.weights_details.WeightsDetails"]], "weightsstatistics (class in neural_compressor.utils.weights_details)": [[406, "neural_compressor.utils.weights_details.WeightsStatistics"]], "neural_compressor.utils.weights_details": [[406, "module-neural_compressor.utils.weights_details"]], "neural_compressor.version": [[407, "module-neural_compressor.version"]]}})