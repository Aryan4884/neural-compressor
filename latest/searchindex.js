Search.setIndex({"docnames": ["autoapi/644ec953a7dc_pruning_support/index", "autoapi/6ece06672ed3_v1_14/index", "autoapi/6f0d0f71d92e_v1_13/index", "autoapi/9e89549a08c8_v1_11/index", "autoapi/block_mask/index", "autoapi/env/index", "autoapi/neural_compressor/adaptor/adaptor/index", "autoapi/neural_compressor/adaptor/index", "autoapi/neural_compressor/adaptor/keras/index", "autoapi/neural_compressor/adaptor/keras_utils/conv2d/index", "autoapi/neural_compressor/adaptor/keras_utils/dense/index", "autoapi/neural_compressor/adaptor/keras_utils/index", "autoapi/neural_compressor/adaptor/keras_utils/quantizer/index", "autoapi/neural_compressor/adaptor/mxnet/index", "autoapi/neural_compressor/adaptor/mxnet_utils/index", "autoapi/neural_compressor/adaptor/mxnet_utils/util/index", "autoapi/neural_compressor/adaptor/onnxrt/index", "autoapi/neural_compressor/adaptor/ox_utils/calibration/index", "autoapi/neural_compressor/adaptor/ox_utils/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/activation/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/argmax/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/attention/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/binary_op/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/concat/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/conv/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/direct_q8/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/embed_layernorm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gather/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gavgpool/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gemm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/lstm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/matmul/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/maxpool/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/ops/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/pad/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/pooling/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/resize/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/split/index", "autoapi/neural_compressor/adaptor/ox_utils/quantizer/index", "autoapi/neural_compressor/adaptor/ox_utils/util/index", "autoapi/neural_compressor/adaptor/pytorch/index", "autoapi/neural_compressor/adaptor/query/index", "autoapi/neural_compressor/adaptor/tensorflow/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter_without_calib/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/bf16_convert/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_add_to_biasadd/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_layout/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_leakyrelu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_nan_to_random/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_placeholder_to_const/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dequantize_cast_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dilated_contraction/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dummy_biasadd/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/expanddims_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fetch_weight_from_reshape/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_batch_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_constant/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_biasadd_add/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_column_wise_mul/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_conv_with_math/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_in/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_gelu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_layer_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_reshape_transpose/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/graph_cse_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/grappler_pass/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/insert_print_node/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/move_squeeze_after_relu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/pre_optimize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/remove_training_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/rename_batch_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/split_shared_input/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_equivalent_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_unused_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/switch_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/graph_base/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_fake_quant/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value_without_calib/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_requantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_requantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/meta_op_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_hostconst_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_quantized_op_cse/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/rnn_convert/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/scale_propagation/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_node/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_schema/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/tf2onnx_utils/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/insert_qdq_pattern/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/merge_duplicated_qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/share_qdq_y_pattern/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_util/index", "autoapi/neural_compressor/adaptor/tf_utils/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/fake_quantize/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_config/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_helper/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/optimize_layer/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_wrapper/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_concatv2/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_deconv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_in/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_matmul/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_pooling/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/optimize_qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_base/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_concatv2/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_for_intel_cpu/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_matmul/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_pooling/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph_common/index", "autoapi/neural_compressor/adaptor/tf_utils/tf2onnx_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/bias_correction/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/graph_transform_base/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/insert_logging/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/rerange_quantized_concat/index", "autoapi/neural_compressor/adaptor/tf_utils/util/index", "autoapi/neural_compressor/adaptor/torch_utils/bf16_convert/index", "autoapi/neural_compressor/adaptor/torch_utils/hawq_metric/index", "autoapi/neural_compressor/adaptor/torch_utils/index", "autoapi/neural_compressor/adaptor/torch_utils/smooth_quant/index", "autoapi/neural_compressor/adaptor/torch_utils/symbolic_trace/index", "autoapi/neural_compressor/adaptor/torch_utils/util/index", "autoapi/neural_compressor/algorithm/algorithm/index", "autoapi/neural_compressor/algorithm/fast_bias_correction/index", "autoapi/neural_compressor/algorithm/index", "autoapi/neural_compressor/algorithm/smooth_quant/index", "autoapi/neural_compressor/algorithm/weight_correction/index", "autoapi/neural_compressor/benchmark/index", "autoapi/neural_compressor/compression/callbacks/index", "autoapi/neural_compressor/compression/distillation/criterions/index", "autoapi/neural_compressor/compression/distillation/index", "autoapi/neural_compressor/compression/index", "autoapi/neural_compressor/compression/pruner/criteria/index", "autoapi/neural_compressor/compression/pruner/index", "autoapi/neural_compressor/compression/pruner/patterns/index", "autoapi/neural_compressor/compression/pruner/pruners/index", "autoapi/neural_compressor/compression/pruner/regs/index", "autoapi/neural_compressor/compression/pruner/schedulers/index", "autoapi/neural_compressor/compression/pruner/utils/index", "autoapi/neural_compressor/conf/config/index", "autoapi/neural_compressor/conf/dotdict/index", "autoapi/neural_compressor/conf/index", "autoapi/neural_compressor/conf/pythonic_config/index", "autoapi/neural_compressor/config/index", "autoapi/neural_compressor/contrib/index", "autoapi/neural_compressor/contrib/strategy/index", "autoapi/neural_compressor/contrib/strategy/sigopt/index", "autoapi/neural_compressor/contrib/strategy/tpe/index", "autoapi/neural_compressor/data/dataloaders/base_dataloader/index", "autoapi/neural_compressor/data/dataloaders/dataloader/index", "autoapi/neural_compressor/data/dataloaders/default_dataloader/index", "autoapi/neural_compressor/data/dataloaders/fetcher/index", "autoapi/neural_compressor/data/dataloaders/index", "autoapi/neural_compressor/data/dataloaders/mxnet_dataloader/index", "autoapi/neural_compressor/data/dataloaders/onnxrt_dataloader/index", "autoapi/neural_compressor/data/dataloaders/pytorch_dataloader/index", "autoapi/neural_compressor/data/dataloaders/sampler/index", "autoapi/neural_compressor/data/dataloaders/tensorflow_dataloader/index", "autoapi/neural_compressor/data/datasets/bert_dataset/index", "autoapi/neural_compressor/data/datasets/coco_dataset/index", "autoapi/neural_compressor/data/datasets/dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/data/datasets/index", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/data/filters/coco_filter/index", "autoapi/neural_compressor/data/filters/filter/index", "autoapi/neural_compressor/data/filters/index", "autoapi/neural_compressor/data/index", "autoapi/neural_compressor/data/transforms/coco_transform/index", "autoapi/neural_compressor/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/data/transforms/index", "autoapi/neural_compressor/data/transforms/postprocess/index", "autoapi/neural_compressor/data/transforms/tokenization/index", "autoapi/neural_compressor/data/transforms/transform/index", "autoapi/neural_compressor/experimental/benchmark/index", "autoapi/neural_compressor/experimental/common/criterion/index", "autoapi/neural_compressor/experimental/common/dataloader/index", "autoapi/neural_compressor/experimental/common/index", "autoapi/neural_compressor/experimental/common/metric/index", "autoapi/neural_compressor/experimental/common/model/index", "autoapi/neural_compressor/experimental/common/optimizer/index", "autoapi/neural_compressor/experimental/common/postprocess/index", "autoapi/neural_compressor/experimental/common/torch_utils/index", "autoapi/neural_compressor/experimental/component/index", "autoapi/neural_compressor/experimental/compression/index", "autoapi/neural_compressor/experimental/compression/pruning/index", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index", "autoapi/neural_compressor/experimental/data/dataloaders/index", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/index", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index", "autoapi/neural_compressor/experimental/data/filters/filter/index", "autoapi/neural_compressor/experimental/data/filters/index", "autoapi/neural_compressor/experimental/data/index", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/experimental/data/transforms/index", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index", "autoapi/neural_compressor/experimental/data/transforms/transform/index", "autoapi/neural_compressor/experimental/distillation/index", "autoapi/neural_compressor/experimental/export/index", "autoapi/neural_compressor/experimental/export/qlinear2qdq/index", "autoapi/neural_compressor/experimental/export/tf2onnx/index", "autoapi/neural_compressor/experimental/export/torch2onnx/index", "autoapi/neural_compressor/experimental/export/utils/index", "autoapi/neural_compressor/experimental/graph_optimization/index", "autoapi/neural_compressor/experimental/index", "autoapi/neural_compressor/experimental/metric/bleu/index", "autoapi/neural_compressor/experimental/metric/bleu_util/index", "autoapi/neural_compressor/experimental/metric/coco_label_map/index", "autoapi/neural_compressor/experimental/metric/coco_tools/index", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index", "autoapi/neural_compressor/experimental/metric/f1/index", "autoapi/neural_compressor/experimental/metric/index", "autoapi/neural_compressor/experimental/metric/metric/index", "autoapi/neural_compressor/experimental/mixed_precision/index", "autoapi/neural_compressor/experimental/model_conversion/index", "autoapi/neural_compressor/experimental/nas/basic_nas/index", "autoapi/neural_compressor/experimental/nas/dynas/index", "autoapi/neural_compressor/experimental/nas/index", "autoapi/neural_compressor/experimental/nas/nas/index", "autoapi/neural_compressor/experimental/nas/nas_utils/index", "autoapi/neural_compressor/experimental/nas/search_algorithms/index", "autoapi/neural_compressor/experimental/pruner_legacy/gradient_sensitivity/index", "autoapi/neural_compressor/experimental/pruner_legacy/group_lasso/index", "autoapi/neural_compressor/experimental/pruner_legacy/index", "autoapi/neural_compressor/experimental/pruner_legacy/magnitude/index", "autoapi/neural_compressor/experimental/pruner_legacy/pattern_lock/index", "autoapi/neural_compressor/experimental/pruner_legacy/pruner/index", "autoapi/neural_compressor/experimental/pruning/index", "autoapi/neural_compressor/experimental/pruning_recipes/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index", "autoapi/neural_compressor/experimental/pruning_v2/index", "autoapi/neural_compressor/experimental/pytorch_pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index", "autoapi/neural_compressor/experimental/quantization/index", "autoapi/neural_compressor/experimental/scheduler/index", "autoapi/neural_compressor/index", "autoapi/neural_compressor/metric/bleu/index", "autoapi/neural_compressor/metric/bleu_util/index", "autoapi/neural_compressor/metric/coco_label_map/index", "autoapi/neural_compressor/metric/coco_tools/index", "autoapi/neural_compressor/metric/evaluate_squad/index", "autoapi/neural_compressor/metric/f1/index", "autoapi/neural_compressor/metric/index", "autoapi/neural_compressor/metric/metric/index", "autoapi/neural_compressor/mix_precision/index", "autoapi/neural_compressor/model/base_model/index", "autoapi/neural_compressor/model/index", "autoapi/neural_compressor/model/keras_model/index", "autoapi/neural_compressor/model/model/index", "autoapi/neural_compressor/model/mxnet_model/index", "autoapi/neural_compressor/model/nets_factory/index", "autoapi/neural_compressor/model/onnx_model/index", "autoapi/neural_compressor/model/tensorflow_model/index", "autoapi/neural_compressor/model/torch_model/index", "autoapi/neural_compressor/objective/index", "autoapi/neural_compressor/quantization/index", "autoapi/neural_compressor/strategy/auto/index", "autoapi/neural_compressor/strategy/auto_mixed_precision/index", "autoapi/neural_compressor/strategy/basic/index", "autoapi/neural_compressor/strategy/bayesian/index", "autoapi/neural_compressor/strategy/conservative/index", "autoapi/neural_compressor/strategy/exhaustive/index", "autoapi/neural_compressor/strategy/hawq_v2/index", "autoapi/neural_compressor/strategy/index", "autoapi/neural_compressor/strategy/mse/index", "autoapi/neural_compressor/strategy/mse_v2/index", "autoapi/neural_compressor/strategy/random/index", "autoapi/neural_compressor/strategy/strategy/index", "autoapi/neural_compressor/strategy/utils/constant/index", "autoapi/neural_compressor/strategy/utils/index", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index", "autoapi/neural_compressor/strategy/utils/tuning_space/index", "autoapi/neural_compressor/strategy/utils/tuning_structs/index", "autoapi/neural_compressor/strategy/utils/utility/index", "autoapi/neural_compressor/training/index", "autoapi/neural_compressor/utils/collect_layer_histogram/index", "autoapi/neural_compressor/utils/constant/index", "autoapi/neural_compressor/utils/create_obj_from_config/index", "autoapi/neural_compressor/utils/index", "autoapi/neural_compressor/utils/kl_divergence/index", "autoapi/neural_compressor/utils/load_huggingface/index", "autoapi/neural_compressor/utils/logger/index", "autoapi/neural_compressor/utils/options/index", "autoapi/neural_compressor/utils/pytorch/index", "autoapi/neural_compressor/utils/utility/index", "autoapi/neural_compressor/ux/components/benchmark/benchmark/index", "autoapi/neural_compressor/ux/components/benchmark/benchmark_model/index", "autoapi/neural_compressor/ux/components/benchmark/execute_benchmark/index", "autoapi/neural_compressor/ux/components/benchmark/index", "autoapi/neural_compressor/ux/components/config_generator/benchmark_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/graph_optimization_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/mixed_precision_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/profiling_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/pruning_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/quantization_config_generator/index", "autoapi/neural_compressor/ux/components/configuration_wizard/configuration_parser/index", "autoapi/neural_compressor/ux/components/configuration_wizard/get_boundary_nodes/index", "autoapi/neural_compressor/ux/components/configuration_wizard/get_configuration/index", "autoapi/neural_compressor/ux/components/configuration_wizard/index", "autoapi/neural_compressor/ux/components/configuration_wizard/params_feeder/index", "autoapi/neural_compressor/ux/components/configuration_wizard/pruning_config_parser/index", "autoapi/neural_compressor/ux/components/db_manager/db_manager/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/benchmark/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/benchmark_result/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/dataloader/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/dataset/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/domain/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/domain_flavour/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/example/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/framework/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/metric/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/model/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/optimization/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/optimization_type/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/precision/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/profiling/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/profiling_result/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/project/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/pruning_details/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/transform/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/tuning_details/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/tuning_history/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/benchmark_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/dataset_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/db_operations/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/diagnosis_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/dictionaries_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/examples_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/model_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/optimization_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/profiling_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/project_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/index", "autoapi/neural_compressor/ux/components/db_manager/params_interfaces/index", "autoapi/neural_compressor/ux/components/db_manager/utils/index", "autoapi/neural_compressor/ux/components/diagnosis/diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/factory/index", "autoapi/neural_compressor/ux/components/diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/onnx_diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/onnx_diagnosis/onnxrt_diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/op_details/index", "autoapi/neural_compressor/ux/components/diagnosis/op_entry/index", "autoapi/neural_compressor/ux/components/diagnosis/tensorflow_diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/tensorflow_diagnosis/tensorflow_diagnosis/index", "autoapi/neural_compressor/ux/components/file_browser/file_browser/index", "autoapi/neural_compressor/ux/components/file_browser/index", "autoapi/neural_compressor/ux/components/graph/attribute/index", "autoapi/neural_compressor/ux/components/graph/collapser/index", "autoapi/neural_compressor/ux/components/graph/edge/index", "autoapi/neural_compressor/ux/components/graph/graph/index", "autoapi/neural_compressor/ux/components/graph/graph_reader/index", "autoapi/neural_compressor/ux/components/graph/index", "autoapi/neural_compressor/ux/components/graph/node/index", "autoapi/neural_compressor/ux/components/graph/reader/index", "autoapi/neural_compressor/ux/components/graph/reader/onnxrt_reader/index", "autoapi/neural_compressor/ux/components/graph/reader/tensorflow_reader/index", "autoapi/neural_compressor/ux/components/index", "autoapi/neural_compressor/ux/components/jobs_management/index", "autoapi/neural_compressor/ux/components/jobs_management/jobs_control_queue/index", "autoapi/neural_compressor/ux/components/jobs_management/jobs_manager/index", "autoapi/neural_compressor/ux/components/jobs_management/request/index", "autoapi/neural_compressor/ux/components/manage_workspace/index", "autoapi/neural_compressor/ux/components/model/domain/index", "autoapi/neural_compressor/ux/components/model/index", "autoapi/neural_compressor/ux/components/model/model/index", "autoapi/neural_compressor/ux/components/model/model_type_getter/index", "autoapi/neural_compressor/ux/components/model/onnxrt/index", "autoapi/neural_compressor/ux/components/model/onnxrt/model/index", "autoapi/neural_compressor/ux/components/model/pytorch/index", "autoapi/neural_compressor/ux/components/model/pytorch/model/index", "autoapi/neural_compressor/ux/components/model/repository/index", "autoapi/neural_compressor/ux/components/model/shape/index", "autoapi/neural_compressor/ux/components/model/tensorflow/frozen_pb/index", "autoapi/neural_compressor/ux/components/model/tensorflow/index", "autoapi/neural_compressor/ux/components/model/tensorflow/keras/index", "autoapi/neural_compressor/ux/components/model/tensorflow/meta_graph/index", "autoapi/neural_compressor/ux/components/model/tensorflow/model/index", "autoapi/neural_compressor/ux/components/model/tensorflow/saved_model/index", "autoapi/neural_compressor/ux/components/model/tensorflow/utils/index", "autoapi/neural_compressor/ux/components/model_zoo/download_config/index", "autoapi/neural_compressor/ux/components/model_zoo/download_model/index", "autoapi/neural_compressor/ux/components/model_zoo/downloader/index", "autoapi/neural_compressor/ux/components/model_zoo/index", "autoapi/neural_compressor/ux/components/model_zoo/list_models/index", "autoapi/neural_compressor/ux/components/names_mapper/index", "autoapi/neural_compressor/ux/components/names_mapper/names_mapper/index", "autoapi/neural_compressor/ux/components/optimization/execute_optimization/index", "autoapi/neural_compressor/ux/components/optimization/factory/index", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/graph_optimization/index", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/index", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/optimize_model/index", "autoapi/neural_compressor/ux/components/optimization/index", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/index", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/mixed_precision/index", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/optimize_model/index", "autoapi/neural_compressor/ux/components/optimization/neural_coder_optimization/index", "autoapi/neural_compressor/ux/components/optimization/neural_coder_optimization/optimize_model/index", "autoapi/neural_compressor/ux/components/optimization/optimization/index", "autoapi/neural_compressor/ux/components/optimization/pruning/index", "autoapi/neural_compressor/ux/components/optimization/pruning/optimize_model/index", "autoapi/neural_compressor/ux/components/optimization/pruning/pruning/index", "autoapi/neural_compressor/ux/components/optimization/tune/index", "autoapi/neural_compressor/ux/components/optimization/tune/tune_model/index", "autoapi/neural_compressor/ux/components/optimization/tune/tuning/index", "autoapi/neural_compressor/ux/components/optimization/tuning_history/index", "autoapi/neural_compressor/ux/components/profiling/execute_profiling/index", "autoapi/neural_compressor/ux/components/profiling/factory/index", "autoapi/neural_compressor/ux/components/profiling/index", "autoapi/neural_compressor/ux/components/profiling/profile_model/index", "autoapi/neural_compressor/ux/components/profiling/profiler/index", "autoapi/neural_compressor/ux/components/profiling/profiling/index", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/factory/index", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/index", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/profiler/index", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/utils/index", "autoapi/neural_compressor/ux/inc_bench/index", "autoapi/neural_compressor/ux/index", "autoapi/neural_compressor/ux/utils/consts/index", "autoapi/neural_compressor/ux/utils/environment/index", "autoapi/neural_compressor/ux/utils/exceptions/index", "autoapi/neural_compressor/ux/utils/executor/index", "autoapi/neural_compressor/ux/utils/expiring_dict/index", "autoapi/neural_compressor/ux/utils/github_info/index", "autoapi/neural_compressor/ux/utils/hw_info/index", "autoapi/neural_compressor/ux/utils/index", "autoapi/neural_compressor/ux/utils/json_serializer/index", "autoapi/neural_compressor/ux/utils/logger/index", "autoapi/neural_compressor/ux/utils/parser/index", "autoapi/neural_compressor/ux/utils/proc/index", "autoapi/neural_compressor/ux/utils/processes/index", "autoapi/neural_compressor/ux/utils/singleton/index", "autoapi/neural_compressor/ux/utils/status_updates/index", "autoapi/neural_compressor/ux/utils/templates/index", "autoapi/neural_compressor/ux/utils/templates/metric/index", "autoapi/neural_compressor/ux/utils/templates/workdir/index", "autoapi/neural_compressor/ux/utils/utils/index", "autoapi/neural_compressor/ux/utils/workload/config/index", "autoapi/neural_compressor/ux/utils/workload/dataloader/index", "autoapi/neural_compressor/ux/utils/workload/evaluation/index", "autoapi/neural_compressor/ux/utils/workload/graph_optimization/index", "autoapi/neural_compressor/ux/utils/workload/index", "autoapi/neural_compressor/ux/utils/workload/mixed_precision/index", "autoapi/neural_compressor/ux/utils/workload/model/index", "autoapi/neural_compressor/ux/utils/workload/pruning/index", "autoapi/neural_compressor/ux/utils/workload/quantization/index", "autoapi/neural_compressor/ux/utils/workload/tuning/index", "autoapi/neural_compressor/ux/utils/yaml_utils/index", "autoapi/neural_compressor/ux/web/communication/index", "autoapi/neural_compressor/ux/web/configuration/index", "autoapi/neural_compressor/ux/web/exceptions/index", "autoapi/neural_compressor/ux/web/index", "autoapi/neural_compressor/ux/web/router/index", "autoapi/neural_compressor/ux/web/server/index", "autoapi/neural_compressor/ux/web/service/benchmark/index", "autoapi/neural_compressor/ux/web/service/history_snapshot_parser/index", "autoapi/neural_compressor/ux/web/service/index", "autoapi/neural_compressor/ux/web/service/model/index", "autoapi/neural_compressor/ux/web/service/optimization/index", "autoapi/neural_compressor/ux/web/service/profiling/index", "autoapi/neural_compressor/ux/web/service/request_data_processor/index", "autoapi/neural_compressor/ux/web/service/response_generator/index", "autoapi/neural_compressor/ux/web/service/workload/index", "autoapi/neural_compressor/version/index", "docs/build_docs/source/index", "docs/source/CODE_OF_CONDUCT", "docs/source/CONTRIBUTING", "docs/source/FX", "docs/source/NAS", "docs/source/SECURITY", "docs/source/Welcome", "docs/source/adaptor", "docs/source/api-doc/adaptor", "docs/source/api-doc/adaptor/onnxrt", "docs/source/api-doc/adaptor/torch_utils", "docs/source/api-doc/adaptor/torch_utils/bf16_convert", "docs/source/api-doc/adaptor/torch_utils/hawq_metric", "docs/source/api-doc/adaptor/torch_utils/symbolic_trace", "docs/source/api-doc/adaptor/torch_utils/util", "docs/source/api-doc/algorithm", "docs/source/api-doc/apis", "docs/source/api-doc/basic_api", "docs/source/api-doc/basic_api/benchmark", "docs/source/api-doc/basic_api/config", "docs/source/api-doc/basic_api/mix_precision", "docs/source/api-doc/basic_api/objective", "docs/source/api-doc/basic_api/quantization", "docs/source/api-doc/basic_api/training", "docs/source/api-doc/common", "docs/source/api-doc/common/benchmark", "docs/source/api-doc/common/bleu", "docs/source/api-doc/common/criterion", "docs/source/api-doc/common/data", "docs/source/api-doc/common/data/dataloader", "docs/source/api-doc/common/data/datasets", "docs/source/api-doc/common/data/transforms", "docs/source/api-doc/common/metric", "docs/source/api-doc/common/model", "docs/source/api-doc/common/optimizer", "docs/source/api-doc/component", "docs/source/api-doc/component/Distillation", "docs/source/api-doc/component/MixedPrecision", "docs/source/api-doc/component/ModelConversion", "docs/source/api-doc/component/Nas", "docs/source/api-doc/component/Pruning", "docs/source/api-doc/component/Quantization", "docs/source/api-doc/component/Scheduler", "docs/source/api-doc/contrib", "docs/source/api-doc/model", "docs/source/api-doc/pythonic", "docs/source/api-doc/strategy", "docs/source/api-doc/strategy/strategy", "docs/source/api-doc/utils", "docs/source/bench", "docs/source/benchmark", "docs/source/dataloader", "docs/source/dataset", "docs/source/design", "docs/source/distillation", "docs/source/distillation_quantization", "docs/source/distributed", "docs/source/examples_readme", "docs/source/export", "docs/source/faq", "docs/source/framework_yaml", "docs/source/get_started", "docs/source/incompatible_changes", "docs/source/infrastructure", "docs/source/installation_guide", "docs/source/legal_information", "docs/source/metric", "docs/source/migration", "docs/source/mixed_precision", "docs/source/model", "docs/source/neural_coder/README", "docs/source/neural_coder/docs/AWSSageMakerSupport", "docs/source/neural_coder/docs/BigDLNanoSupport", "docs/source/neural_coder/docs/IntelCPU_PerformanceSetting", "docs/source/neural_coder/docs/PythonAPI", "docs/source/neural_coder/docs/PythonLauncher", "docs/source/neural_coder/docs/Quantization", "docs/source/neural_coder/docs/SupportMatrix", "docs/source/neural_coder/docs/release_notes/v0.4", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/DEVELOP", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/README", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/RELEASE", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/DEVELOP", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/RELEASE", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/README", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/vsc-extension-quickstart", "docs/source/objective", "docs/source/orchestration", "docs/source/platform_configuration", "docs/source/pruning", "docs/source/publication_list", "docs/source/pythonic_style", "docs/source/quantization", "docs/source/quantization_mixed_precision", "docs/source/releases_info", "docs/source/sigopt_strategy", "docs/source/tensorboard", "docs/source/transform", "docs/source/tuning_strategies", "docs/source/user_guide", "docs/source/user_yaml", "docs/source/validated_model_list", "index"], "filenames": ["autoapi/644ec953a7dc_pruning_support/index.rst", "autoapi/6ece06672ed3_v1_14/index.rst", "autoapi/6f0d0f71d92e_v1_13/index.rst", "autoapi/9e89549a08c8_v1_11/index.rst", "autoapi/block_mask/index.rst", "autoapi/env/index.rst", "autoapi/neural_compressor/adaptor/adaptor/index.rst", "autoapi/neural_compressor/adaptor/index.rst", "autoapi/neural_compressor/adaptor/keras/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/conv2d/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/dense/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/quantizer/index.rst", "autoapi/neural_compressor/adaptor/mxnet/index.rst", "autoapi/neural_compressor/adaptor/mxnet_utils/index.rst", "autoapi/neural_compressor/adaptor/mxnet_utils/util/index.rst", "autoapi/neural_compressor/adaptor/onnxrt/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/calibration/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/activation/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/argmax/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/attention/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/binary_op/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/concat/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/conv/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/direct_q8/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/embed_layernorm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gather/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gavgpool/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gemm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/lstm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/matmul/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/maxpool/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/ops/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/pad/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/pooling/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/resize/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/split/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/quantizer/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/util/index.rst", "autoapi/neural_compressor/adaptor/pytorch/index.rst", "autoapi/neural_compressor/adaptor/query/index.rst", "autoapi/neural_compressor/adaptor/tensorflow/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter_without_calib/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/bf16_convert/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_add_to_biasadd/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_layout/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_leakyrelu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_nan_to_random/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_placeholder_to_const/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dequantize_cast_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dilated_contraction/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dummy_biasadd/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/expanddims_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fetch_weight_from_reshape/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_batch_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_constant/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_biasadd_add/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_column_wise_mul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_conv_with_math/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_in/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_gelu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_layer_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_reshape_transpose/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/graph_cse_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/grappler_pass/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/insert_print_node/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/move_squeeze_after_relu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/pre_optimize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/remove_training_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/rename_batch_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/split_shared_input/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_equivalent_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_unused_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/switch_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/graph_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_fake_quant/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value_without_calib/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_requantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_requantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/meta_op_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_hostconst_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_quantized_op_cse/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/rnn_convert/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/scale_propagation/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_node/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_schema/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/tf2onnx_utils/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/insert_qdq_pattern/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/merge_duplicated_qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/share_qdq_y_pattern/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_util/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/fake_quantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_config/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_helper/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/optimize_layer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_wrapper/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_concatv2/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_deconv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_in/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_matmul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_pooling/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/optimize_qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_concatv2/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_for_intel_cpu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_matmul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_pooling/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph_common/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/tf2onnx_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/bias_correction/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/graph_transform_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/insert_logging/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/rerange_quantized_concat/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/util/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/bf16_convert/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/hawq_metric/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/smooth_quant/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/symbolic_trace/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/util/index.rst", "autoapi/neural_compressor/algorithm/algorithm/index.rst", "autoapi/neural_compressor/algorithm/fast_bias_correction/index.rst", "autoapi/neural_compressor/algorithm/index.rst", "autoapi/neural_compressor/algorithm/smooth_quant/index.rst", "autoapi/neural_compressor/algorithm/weight_correction/index.rst", "autoapi/neural_compressor/benchmark/index.rst", "autoapi/neural_compressor/compression/callbacks/index.rst", "autoapi/neural_compressor/compression/distillation/criterions/index.rst", "autoapi/neural_compressor/compression/distillation/index.rst", "autoapi/neural_compressor/compression/index.rst", "autoapi/neural_compressor/compression/pruner/criteria/index.rst", "autoapi/neural_compressor/compression/pruner/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/index.rst", "autoapi/neural_compressor/compression/pruner/regs/index.rst", "autoapi/neural_compressor/compression/pruner/schedulers/index.rst", "autoapi/neural_compressor/compression/pruner/utils/index.rst", "autoapi/neural_compressor/conf/config/index.rst", "autoapi/neural_compressor/conf/dotdict/index.rst", "autoapi/neural_compressor/conf/index.rst", "autoapi/neural_compressor/conf/pythonic_config/index.rst", "autoapi/neural_compressor/config/index.rst", "autoapi/neural_compressor/contrib/index.rst", "autoapi/neural_compressor/contrib/strategy/index.rst", "autoapi/neural_compressor/contrib/strategy/sigopt/index.rst", "autoapi/neural_compressor/contrib/strategy/tpe/index.rst", "autoapi/neural_compressor/data/dataloaders/base_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/default_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/fetcher/index.rst", "autoapi/neural_compressor/data/dataloaders/index.rst", "autoapi/neural_compressor/data/dataloaders/mxnet_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/onnxrt_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/pytorch_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/sampler/index.rst", "autoapi/neural_compressor/data/dataloaders/tensorflow_dataloader/index.rst", "autoapi/neural_compressor/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/data/datasets/index.rst", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/data/filters/filter/index.rst", "autoapi/neural_compressor/data/filters/index.rst", "autoapi/neural_compressor/data/index.rst", "autoapi/neural_compressor/data/transforms/coco_transform/index.rst", "autoapi/neural_compressor/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/data/transforms/index.rst", "autoapi/neural_compressor/data/transforms/postprocess/index.rst", "autoapi/neural_compressor/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/benchmark/index.rst", "autoapi/neural_compressor/experimental/common/criterion/index.rst", "autoapi/neural_compressor/experimental/common/dataloader/index.rst", "autoapi/neural_compressor/experimental/common/index.rst", "autoapi/neural_compressor/experimental/common/metric/index.rst", "autoapi/neural_compressor/experimental/common/model/index.rst", "autoapi/neural_compressor/experimental/common/optimizer/index.rst", "autoapi/neural_compressor/experimental/common/postprocess/index.rst", "autoapi/neural_compressor/experimental/common/torch_utils/index.rst", "autoapi/neural_compressor/experimental/component/index.rst", "autoapi/neural_compressor/experimental/compression/index.rst", "autoapi/neural_compressor/experimental/compression/pruning/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/index.rst", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/index.rst", "autoapi/neural_compressor/experimental/data/index.rst", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/experimental/data/transforms/index.rst", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/experimental/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/distillation/index.rst", "autoapi/neural_compressor/experimental/export/index.rst", "autoapi/neural_compressor/experimental/export/qlinear2qdq/index.rst", "autoapi/neural_compressor/experimental/export/tf2onnx/index.rst", "autoapi/neural_compressor/experimental/export/torch2onnx/index.rst", "autoapi/neural_compressor/experimental/export/utils/index.rst", "autoapi/neural_compressor/experimental/graph_optimization/index.rst", "autoapi/neural_compressor/experimental/index.rst", "autoapi/neural_compressor/experimental/metric/bleu/index.rst", "autoapi/neural_compressor/experimental/metric/bleu_util/index.rst", "autoapi/neural_compressor/experimental/metric/coco_label_map/index.rst", "autoapi/neural_compressor/experimental/metric/coco_tools/index.rst", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/experimental/metric/f1/index.rst", "autoapi/neural_compressor/experimental/metric/index.rst", "autoapi/neural_compressor/experimental/metric/metric/index.rst", "autoapi/neural_compressor/experimental/mixed_precision/index.rst", "autoapi/neural_compressor/experimental/model_conversion/index.rst", "autoapi/neural_compressor/experimental/nas/basic_nas/index.rst", "autoapi/neural_compressor/experimental/nas/dynas/index.rst", "autoapi/neural_compressor/experimental/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas_utils/index.rst", "autoapi/neural_compressor/experimental/nas/search_algorithms/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/gradient_sensitivity/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/group_lasso/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/magnitude/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/pattern_lock/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/pruner/index.rst", "autoapi/neural_compressor/experimental/pruning/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_v2/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index.rst", "autoapi/neural_compressor/experimental/quantization/index.rst", "autoapi/neural_compressor/experimental/scheduler/index.rst", "autoapi/neural_compressor/index.rst", "autoapi/neural_compressor/metric/bleu/index.rst", "autoapi/neural_compressor/metric/bleu_util/index.rst", "autoapi/neural_compressor/metric/coco_label_map/index.rst", "autoapi/neural_compressor/metric/coco_tools/index.rst", "autoapi/neural_compressor/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/metric/f1/index.rst", "autoapi/neural_compressor/metric/index.rst", "autoapi/neural_compressor/metric/metric/index.rst", "autoapi/neural_compressor/mix_precision/index.rst", "autoapi/neural_compressor/model/base_model/index.rst", "autoapi/neural_compressor/model/index.rst", "autoapi/neural_compressor/model/keras_model/index.rst", "autoapi/neural_compressor/model/model/index.rst", "autoapi/neural_compressor/model/mxnet_model/index.rst", "autoapi/neural_compressor/model/nets_factory/index.rst", "autoapi/neural_compressor/model/onnx_model/index.rst", "autoapi/neural_compressor/model/tensorflow_model/index.rst", "autoapi/neural_compressor/model/torch_model/index.rst", "autoapi/neural_compressor/objective/index.rst", "autoapi/neural_compressor/quantization/index.rst", "autoapi/neural_compressor/strategy/auto/index.rst", "autoapi/neural_compressor/strategy/auto_mixed_precision/index.rst", "autoapi/neural_compressor/strategy/basic/index.rst", "autoapi/neural_compressor/strategy/bayesian/index.rst", "autoapi/neural_compressor/strategy/conservative/index.rst", "autoapi/neural_compressor/strategy/exhaustive/index.rst", "autoapi/neural_compressor/strategy/hawq_v2/index.rst", "autoapi/neural_compressor/strategy/index.rst", "autoapi/neural_compressor/strategy/mse/index.rst", "autoapi/neural_compressor/strategy/mse_v2/index.rst", "autoapi/neural_compressor/strategy/random/index.rst", "autoapi/neural_compressor/strategy/strategy/index.rst", "autoapi/neural_compressor/strategy/utils/constant/index.rst", "autoapi/neural_compressor/strategy/utils/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_space/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_structs/index.rst", "autoapi/neural_compressor/strategy/utils/utility/index.rst", "autoapi/neural_compressor/training/index.rst", "autoapi/neural_compressor/utils/collect_layer_histogram/index.rst", "autoapi/neural_compressor/utils/constant/index.rst", "autoapi/neural_compressor/utils/create_obj_from_config/index.rst", "autoapi/neural_compressor/utils/index.rst", "autoapi/neural_compressor/utils/kl_divergence/index.rst", "autoapi/neural_compressor/utils/load_huggingface/index.rst", "autoapi/neural_compressor/utils/logger/index.rst", "autoapi/neural_compressor/utils/options/index.rst", "autoapi/neural_compressor/utils/pytorch/index.rst", "autoapi/neural_compressor/utils/utility/index.rst", "autoapi/neural_compressor/ux/components/benchmark/benchmark/index.rst", "autoapi/neural_compressor/ux/components/benchmark/benchmark_model/index.rst", "autoapi/neural_compressor/ux/components/benchmark/execute_benchmark/index.rst", "autoapi/neural_compressor/ux/components/benchmark/index.rst", "autoapi/neural_compressor/ux/components/config_generator/benchmark_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/graph_optimization_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/mixed_precision_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/profiling_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/pruning_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/quantization_config_generator/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/configuration_parser/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/get_boundary_nodes/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/get_configuration/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/params_feeder/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/pruning_config_parser/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_manager/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/benchmark/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/benchmark_result/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/dataloader/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/dataset/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/domain/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/domain_flavour/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/example/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/framework/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/metric/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/model/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/optimization/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/optimization_type/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/precision/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/profiling/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/profiling_result/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/project/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/pruning_details/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/transform/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/tuning_details/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/tuning_history/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/benchmark_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/dataset_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/db_operations/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/diagnosis_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/dictionaries_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/examples_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/model_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/optimization_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/profiling_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/project_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/index.rst", "autoapi/neural_compressor/ux/components/db_manager/params_interfaces/index.rst", "autoapi/neural_compressor/ux/components/db_manager/utils/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/factory/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/onnx_diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/onnx_diagnosis/onnxrt_diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/op_details/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/op_entry/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/tensorflow_diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/tensorflow_diagnosis/tensorflow_diagnosis/index.rst", "autoapi/neural_compressor/ux/components/file_browser/file_browser/index.rst", "autoapi/neural_compressor/ux/components/file_browser/index.rst", "autoapi/neural_compressor/ux/components/graph/attribute/index.rst", "autoapi/neural_compressor/ux/components/graph/collapser/index.rst", "autoapi/neural_compressor/ux/components/graph/edge/index.rst", "autoapi/neural_compressor/ux/components/graph/graph/index.rst", "autoapi/neural_compressor/ux/components/graph/graph_reader/index.rst", "autoapi/neural_compressor/ux/components/graph/index.rst", "autoapi/neural_compressor/ux/components/graph/node/index.rst", "autoapi/neural_compressor/ux/components/graph/reader/index.rst", "autoapi/neural_compressor/ux/components/graph/reader/onnxrt_reader/index.rst", "autoapi/neural_compressor/ux/components/graph/reader/tensorflow_reader/index.rst", "autoapi/neural_compressor/ux/components/index.rst", "autoapi/neural_compressor/ux/components/jobs_management/index.rst", "autoapi/neural_compressor/ux/components/jobs_management/jobs_control_queue/index.rst", "autoapi/neural_compressor/ux/components/jobs_management/jobs_manager/index.rst", "autoapi/neural_compressor/ux/components/jobs_management/request/index.rst", "autoapi/neural_compressor/ux/components/manage_workspace/index.rst", "autoapi/neural_compressor/ux/components/model/domain/index.rst", "autoapi/neural_compressor/ux/components/model/index.rst", "autoapi/neural_compressor/ux/components/model/model/index.rst", "autoapi/neural_compressor/ux/components/model/model_type_getter/index.rst", "autoapi/neural_compressor/ux/components/model/onnxrt/index.rst", "autoapi/neural_compressor/ux/components/model/onnxrt/model/index.rst", "autoapi/neural_compressor/ux/components/model/pytorch/index.rst", "autoapi/neural_compressor/ux/components/model/pytorch/model/index.rst", "autoapi/neural_compressor/ux/components/model/repository/index.rst", "autoapi/neural_compressor/ux/components/model/shape/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/frozen_pb/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/keras/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/meta_graph/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/model/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/saved_model/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/utils/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/download_config/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/download_model/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/downloader/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/list_models/index.rst", "autoapi/neural_compressor/ux/components/names_mapper/index.rst", "autoapi/neural_compressor/ux/components/names_mapper/names_mapper/index.rst", "autoapi/neural_compressor/ux/components/optimization/execute_optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/factory/index.rst", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/graph_optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/index.rst", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/optimize_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/index.rst", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/mixed_precision/index.rst", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/optimize_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/neural_coder_optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/neural_coder_optimization/optimize_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/pruning/index.rst", "autoapi/neural_compressor/ux/components/optimization/pruning/optimize_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/pruning/pruning/index.rst", "autoapi/neural_compressor/ux/components/optimization/tune/index.rst", "autoapi/neural_compressor/ux/components/optimization/tune/tune_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/tune/tuning/index.rst", "autoapi/neural_compressor/ux/components/optimization/tuning_history/index.rst", "autoapi/neural_compressor/ux/components/profiling/execute_profiling/index.rst", "autoapi/neural_compressor/ux/components/profiling/factory/index.rst", "autoapi/neural_compressor/ux/components/profiling/index.rst", "autoapi/neural_compressor/ux/components/profiling/profile_model/index.rst", "autoapi/neural_compressor/ux/components/profiling/profiler/index.rst", "autoapi/neural_compressor/ux/components/profiling/profiling/index.rst", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/factory/index.rst", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/index.rst", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/profiler/index.rst", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/utils/index.rst", "autoapi/neural_compressor/ux/inc_bench/index.rst", "autoapi/neural_compressor/ux/index.rst", "autoapi/neural_compressor/ux/utils/consts/index.rst", "autoapi/neural_compressor/ux/utils/environment/index.rst", "autoapi/neural_compressor/ux/utils/exceptions/index.rst", "autoapi/neural_compressor/ux/utils/executor/index.rst", "autoapi/neural_compressor/ux/utils/expiring_dict/index.rst", "autoapi/neural_compressor/ux/utils/github_info/index.rst", "autoapi/neural_compressor/ux/utils/hw_info/index.rst", "autoapi/neural_compressor/ux/utils/index.rst", "autoapi/neural_compressor/ux/utils/json_serializer/index.rst", "autoapi/neural_compressor/ux/utils/logger/index.rst", "autoapi/neural_compressor/ux/utils/parser/index.rst", "autoapi/neural_compressor/ux/utils/proc/index.rst", "autoapi/neural_compressor/ux/utils/processes/index.rst", "autoapi/neural_compressor/ux/utils/singleton/index.rst", "autoapi/neural_compressor/ux/utils/status_updates/index.rst", "autoapi/neural_compressor/ux/utils/templates/index.rst", "autoapi/neural_compressor/ux/utils/templates/metric/index.rst", "autoapi/neural_compressor/ux/utils/templates/workdir/index.rst", "autoapi/neural_compressor/ux/utils/utils/index.rst", "autoapi/neural_compressor/ux/utils/workload/config/index.rst", "autoapi/neural_compressor/ux/utils/workload/dataloader/index.rst", "autoapi/neural_compressor/ux/utils/workload/evaluation/index.rst", "autoapi/neural_compressor/ux/utils/workload/graph_optimization/index.rst", "autoapi/neural_compressor/ux/utils/workload/index.rst", "autoapi/neural_compressor/ux/utils/workload/mixed_precision/index.rst", "autoapi/neural_compressor/ux/utils/workload/model/index.rst", "autoapi/neural_compressor/ux/utils/workload/pruning/index.rst", "autoapi/neural_compressor/ux/utils/workload/quantization/index.rst", "autoapi/neural_compressor/ux/utils/workload/tuning/index.rst", "autoapi/neural_compressor/ux/utils/yaml_utils/index.rst", "autoapi/neural_compressor/ux/web/communication/index.rst", "autoapi/neural_compressor/ux/web/configuration/index.rst", "autoapi/neural_compressor/ux/web/exceptions/index.rst", "autoapi/neural_compressor/ux/web/index.rst", "autoapi/neural_compressor/ux/web/router/index.rst", "autoapi/neural_compressor/ux/web/server/index.rst", "autoapi/neural_compressor/ux/web/service/benchmark/index.rst", "autoapi/neural_compressor/ux/web/service/history_snapshot_parser/index.rst", "autoapi/neural_compressor/ux/web/service/index.rst", "autoapi/neural_compressor/ux/web/service/model/index.rst", "autoapi/neural_compressor/ux/web/service/optimization/index.rst", "autoapi/neural_compressor/ux/web/service/profiling/index.rst", "autoapi/neural_compressor/ux/web/service/request_data_processor/index.rst", "autoapi/neural_compressor/ux/web/service/response_generator/index.rst", "autoapi/neural_compressor/ux/web/service/workload/index.rst", "autoapi/neural_compressor/version/index.rst", "docs/build_docs/source/index.rst", "docs/source/CODE_OF_CONDUCT.md", "docs/source/CONTRIBUTING.md", "docs/source/FX.md", "docs/source/NAS.md", "docs/source/SECURITY.md", "docs/source/Welcome.md", "docs/source/adaptor.md", "docs/source/api-doc/adaptor.rst", "docs/source/api-doc/adaptor/onnxrt.rst", "docs/source/api-doc/adaptor/torch_utils.rst", "docs/source/api-doc/adaptor/torch_utils/bf16_convert.rst", "docs/source/api-doc/adaptor/torch_utils/hawq_metric.rst", "docs/source/api-doc/adaptor/torch_utils/symbolic_trace.rst", "docs/source/api-doc/adaptor/torch_utils/util.rst", "docs/source/api-doc/algorithm.rst", "docs/source/api-doc/apis.rst", "docs/source/api-doc/basic_api.rst", "docs/source/api-doc/basic_api/benchmark.rst", "docs/source/api-doc/basic_api/config.rst", "docs/source/api-doc/basic_api/mix_precision.rst", "docs/source/api-doc/basic_api/objective.rst", "docs/source/api-doc/basic_api/quantization.rst", "docs/source/api-doc/basic_api/training.rst", "docs/source/api-doc/common.rst", "docs/source/api-doc/common/benchmark.rst", "docs/source/api-doc/common/bleu.rst", "docs/source/api-doc/common/criterion.rst", "docs/source/api-doc/common/data.rst", "docs/source/api-doc/common/data/dataloader.rst", "docs/source/api-doc/common/data/datasets.rst", "docs/source/api-doc/common/data/transforms.rst", "docs/source/api-doc/common/metric.rst", "docs/source/api-doc/common/model.rst", "docs/source/api-doc/common/optimizer.rst", "docs/source/api-doc/component.rst", "docs/source/api-doc/component/Distillation.rst", "docs/source/api-doc/component/MixedPrecision.rst", "docs/source/api-doc/component/ModelConversion.rst", "docs/source/api-doc/component/Nas.rst", "docs/source/api-doc/component/Pruning.rst", "docs/source/api-doc/component/Quantization.rst", "docs/source/api-doc/component/Scheduler.rst", "docs/source/api-doc/contrib.rst", "docs/source/api-doc/model.rst", "docs/source/api-doc/pythonic.rst", "docs/source/api-doc/strategy.rst", "docs/source/api-doc/strategy/strategy.rst", "docs/source/api-doc/utils.rst", "docs/source/bench.md", "docs/source/benchmark.md", "docs/source/dataloader.md", "docs/source/dataset.md", "docs/source/design.md", "docs/source/distillation.md", "docs/source/distillation_quantization.md", "docs/source/distributed.md", "docs/source/examples_readme.md", "docs/source/export.md", "docs/source/faq.md", "docs/source/framework_yaml.md", "docs/source/get_started.md", "docs/source/incompatible_changes.md", "docs/source/infrastructure.md", "docs/source/installation_guide.md", "docs/source/legal_information.md", "docs/source/metric.md", "docs/source/migration.md", "docs/source/mixed_precision.md", "docs/source/model.md", "docs/source/neural_coder/README.md", "docs/source/neural_coder/docs/AWSSageMakerSupport.md", "docs/source/neural_coder/docs/BigDLNanoSupport.md", "docs/source/neural_coder/docs/IntelCPU_PerformanceSetting.md", "docs/source/neural_coder/docs/PythonAPI.md", "docs/source/neural_coder/docs/PythonLauncher.md", "docs/source/neural_coder/docs/Quantization.md", "docs/source/neural_coder/docs/SupportMatrix.md", "docs/source/neural_coder/docs/release_notes/v0.4.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/DEVELOP.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/README.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/RELEASE.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/DEVELOP.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/RELEASE.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/README.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/vsc-extension-quickstart.md", "docs/source/objective.md", "docs/source/orchestration.md", "docs/source/platform_configuration.md", "docs/source/pruning.md", "docs/source/publication_list.md", "docs/source/pythonic_style.md", "docs/source/quantization.md", "docs/source/quantization_mixed_precision.md", "docs/source/releases_info.md", "docs/source/sigopt_strategy.md", "docs/source/tensorboard.md", "docs/source/transform.md", "docs/source/tuning_strategies.md", "docs/source/user_guide.md", "docs/source/user_yaml.md", "docs/source/validated_model_list.md", "index.rst"], "titles": ["<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">644ec953a7dc_pruning_support</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">6ece06672ed3_v1_14</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">6f0d0f71d92e_v1_13</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">9e89549a08c8_v1_11</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">block_mask</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">env</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.adaptor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.dense</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.onnxrt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.calibration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.activation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.argmax</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.attention</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.binary_op</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.concat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.direct_q8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.embed_layernorm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gather</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gavgpool</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gemm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.lstm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.maxpool</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.ops</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.pad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.resize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.split</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.query</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tensorflow</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_converter_without_calib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph_common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.tf2onnx_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.bias_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.insert_logging</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.bf16_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.hawq_metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.smooth_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.symbolic_trace</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.algorithm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.fast_bias_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.smooth_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.weight_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.callbacks</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.distillation.criterions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.distillation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.criteria</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.regs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.schedulers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.dotdict</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.pythonic_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy.sigopt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy.tpe</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.base_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.default_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.fetcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.mxnet_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.onnxrt_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.pytorch_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.tensorflow_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.bert_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.coco_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dummy_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dummy_dataset_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.imagenet_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.style_transfer_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters.coco_filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters.filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.coco_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.imagenet_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.postprocess</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.tokenization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.criterion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.postprocess</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.torch_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.component</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.compression</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.compression.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.base_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.default_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.fetcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.mxnet_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.onnxrt_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.pytorch_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.tensorflow_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.bert_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.coco_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dummy_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dummy_dataset_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.imagenet_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.style_transfer_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters.coco_filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters.filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.imagenet_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.tokenization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.distillation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.qlinear2qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.tf2onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.torch2onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.graph_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.bleu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.bleu_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.coco_label_map</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.coco_tools</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.evaluate_squad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.f1</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.model_conversion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.basic_nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.nas_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.search_algorithms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.gradient_sensitivity</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.group_lasso</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.magnitude</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.pattern_lock</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns.pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns.tile_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.prune_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.scheduler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.scheduler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.bleu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.bleu_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.coco_label_map</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.coco_tools</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.evaluate_squad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.f1</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.mix_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.base_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.keras_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.mxnet_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.nets_factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.onnx_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.tensorflow_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.torch_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.objective</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.auto</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.auto_mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.basic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.bayesian</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.conservative</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.exhaustive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.hawq_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.mse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.mse_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_space</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_structs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.training</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.collect_layer_histogram</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.create_obj_from_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.kl_divergence</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.load_huggingface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.options</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.benchmark.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.benchmark.benchmark_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.benchmark.execute_benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.benchmark_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.graph_optimization_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.mixed_precision_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.profiling_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.pruning_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.quantization_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.configuration_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.get_boundary_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.get_configuration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.params_feeder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.pruning_config_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_manager</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.benchmark_result</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.domain</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.domain_flavour</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.example</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.framework</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.optimization_type</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.profiling_result</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.project</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.pruning_details</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.tuning_details</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.tuning_history</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.db_operations</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.examples_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.model_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.project_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.params_interfaces</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.onnx_diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.op_details</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.op_entry</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.tensorflow_diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.file_browser.file_browser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.file_browser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.attribute</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.collapser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.edge</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.graph_reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.reader.onnxrt_reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.reader.tensorflow_reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.jobs_management</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.jobs_management.jobs_control_queue</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.jobs_management.jobs_manager</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.jobs_management.request</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.manage_workspace</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.domain</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.model_type_getter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.onnxrt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.onnxrt.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.pytorch.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.repository</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.shape</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.frozen_pb</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.keras</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.meta_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.saved_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo.download_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo.download_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo.downloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo.list_models</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.names_mapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.names_mapper.names_mapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.execute_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.graph_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.graph_optimizer.optimize_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.mixed_precision.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.mixed_precision.optimize_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.neural_coder_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.pruning.optimize_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.pruning.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.tune</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.tune.tune_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.tune.tuning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.tuning_history</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.execute_profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.profile_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.tensorflow_profiler.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.tensorflow_profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.tensorflow_profiler.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.tensorflow_profiler.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.inc_bench</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.consts</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.environment</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.exceptions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.executor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.expiring_dict</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.github_info</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.hw_info</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.json_serializer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.proc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.processes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.singleton</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.status_updates</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.templates</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.templates.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.templates.workdir</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.evaluation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.graph_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.tuning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.yaml_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.communication</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.configuration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.exceptions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.router</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.server</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.history_snapshot_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.request_data_processor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.response_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.workload</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.version</span></code>", "Intel\u00ae Neural Compressor Documentation", "Contributor Covenant Code of Conduct", "Contribution Guidelines", "FX", "Neural Architecture Search", "Security Policy", "Intel\u00ae Neural Compressor", "Adaptor", "Adaptor", "ONNX Runtime", "Torch Utils", "Bf16 Convert", "Hawq Metric", "Symbolic Trace", "Util", "Algorithm", "APIs", "User facing APIs", "Benchmark", "Config", "Mix Precision", "Objective", "Quantization", "Training", "Common", "Benchmark", "BLEU", "Criterion", "Data", "Dataloader", "Datasets", "Transforms", "Metric", "Model", "Optimizer", "Component(experiemental API, deprecated in 2.0)", "Distillation", "MixedPrecision", "ModelConversion", "Neural architecture search (NAS)", "Pruning", "Quantization", "Scheduler", "Contrib", "Model", "Pythonic", "Strategy", "Strategies", "Utils", "Intel\u00ae Neural Compressor Bench", "Benchmarking", "DataLoader", "Dataset", "Design", "Distillation", "Distillation for Quantization", "Distributed Training and Inference (Evaluation)", "Examples", "Export", "Frequently Asked Questions", "Framework YAML Configuration Files", "Getting Started", "Incompatible changes between v1.2 and v1.1", "Infrastructure of Intel\u00ae Neural Compressor", "Installation", "Legal Information", "Metrics", "Code Migration from Intel Neural Compressor 1.X to Intel Neural Compressor 2.X", "Mixed Precision", "Model", "Neural Coder", "AWS Amazon SageMaker Support", "BigDL Nano Support", "Intel CPU Platforms: Best Performance Setting", "Neural Coder as Python API", "Python Launcher", "Neural Coder for Quantization", "Supported Optimization Features", "v0.4", "Changelog", "neural_compressor_ext_lab", "Intel\u00ae Neural Compressor as JupyterLab Extension", "Making a new release of neural_compressor_ext_lab", "Changelog", "neural_compressor_ext_lab_alibaba", "Making a new release of neural_compressor_ext_lab_alibaba", "Change Log", "Neural Coder", "Welcome to your VS Code Extension", "Objective", "Optimization Orchestration", "SYSTEM CONFIGURATION", "Pruning", "Full Publications/Events (56)", "Pythonic Style Access for Configurations", "Quantization", "Turn OFF Auto Mixed Precision during Quantization", "Release", "SigOpt Strategy", "TensorBoard", "Transform", "Tuning Strategies", "User Guide", "User YAML Configuration Files", "Validated Models", "Intel\u00ae Neural Compressor Documentation"], "terms": {"pruning_support": 0, "revis": [0, 1, 2, 3, 331], "id": [0, 1, 2, 3, 98, 154, 201, 203, 239, 249, 251, 252, 253, 254, 287, 289, 290, 291, 292, 318, 331, 355, 356, 358, 359, 360, 362, 365, 366, 367, 368, 369, 371, 372, 374, 375, 403, 404, 407, 475, 544, 584, 616, 619], "644ec953a7dc": 0, "6ece06672ed3": [0, 1], "creat": [0, 1, 2, 3, 5, 15, 43, 98, 101, 106, 118, 135, 155, 158, 175, 185, 187, 205, 206, 215, 225, 227, 241, 248, 252, 261, 262, 263, 285, 290, 295, 306, 310, 318, 320, 322, 323, 328, 354, 371, 381, 382, 386, 387, 468, 489, 502, 515, 519, 522, 525, 570, 587, 598, 600, 602, 603, 606, 613, 616, 617, 619], "date": [0, 1, 2, 3, 308, 459], "2022": [0, 1, 2, 3, 524, 583], "12": [0, 567, 579, 582, 622], "09": [0, 622], "17": [0, 622], "22": [0, 3, 480, 483, 622], "310141": 0, "v1": [1, 2, 3, 43, 142, 196, 197, 198, 199, 237, 253, 254, 256, 291, 292, 293, 294, 303, 574, 579, 584, 587, 610, 615, 616, 622], "14": [1, 2, 170, 242, 244, 245, 576, 622], "6f0d0f71d92e": [1, 2], "08": [1, 202, 240, 618, 622], "31": [1, 622], "07": [1, 2, 621, 622], "16": [1, 569, 570, 610, 622], "24": [1, 619, 622], "229939": 1, "update_dataload": 1, "db_session": [1, 355, 356, 357, 358, 359, 360, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 381, 382, 384, 386, 389], "sqlalchemi": [1, 354, 355, 356, 357, 358, 359, 360, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 381, 382, 384, 386, 387, 389, 577, 582], "orm": [1, 355, 356, 357, 358, 359, 360, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 381, 382, 384, 386, 389], "session": [1, 142, 184, 224, 303, 354, 355, 356, 357, 358, 359, 360, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 381, 382, 384, 386, 387, 389, 585, 617, 619], "updat": [1, 44, 58, 70, 98, 99, 106, 111, 118, 159, 161, 162, 164, 165, 245, 249, 255, 256, 265, 266, 268, 269, 270, 279, 281, 287, 293, 294, 302, 303, 304, 318, 338, 355, 356, 357, 358, 366, 369, 371, 372, 374, 376, 382, 384, 385, 386, 389, 459, 482, 486, 491, 494, 496, 500, 544, 567, 576, 577, 584, 585, 591, 596, 599, 609, 610, 619, 620], "dataload": [1, 6, 8, 13, 15, 16, 17, 41, 43, 144, 146, 148, 149, 151, 154, 155, 162, 173, 174, 185, 196, 203, 206, 212, 225, 236, 241, 248, 258, 270, 271, 276, 281, 284, 285, 286, 306, 325, 328, 336, 341, 348, 352, 363, 377, 380, 382, 387, 389, 411, 452, 465, 468, 471, 479, 490, 491, 495, 521, 524, 525, 546, 567, 572, 573, 574, 579, 580, 584, 585, 586, 608, 613, 614, 617, 618, 621], "exist": [1, 49, 99, 135, 154, 156, 167, 203, 204, 252, 262, 290, 303, 320, 322, 331, 356, 376, 382, 384, 385, 422, 473, 489, 490, 576, 584, 592, 610, 619], "databas": [1, 187, 191, 196, 227, 354, 355, 356, 357, 358, 359, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 382, 383, 384, 385, 386, 387, 459, 473, 489], "update_transform": 1, "transform": [1, 16, 40, 46, 58, 63, 64, 85, 86, 88, 127, 128, 132, 137, 138, 139, 140, 141, 146, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 225, 226, 227, 228, 229, 230, 232, 234, 235, 236, 248, 286, 348, 352, 358, 363, 377, 380, 382, 387, 389, 411, 490, 491, 492, 493, 498, 521, 522, 546, 569, 570, 572, 573, 574, 575, 579, 585, 588, 593, 594, 595, 596, 610, 611, 614, 617, 621, 622], "13": [2, 3, 306, 567, 582], "9e89549a08c8": [2, 3], "29": [2, 622], "41": [2, 622], "291905": 2, "11": [3, 480, 567, 582, 584, 586], "03": [3, 480, 622], "34": [3, 622], "52": [3, 622], "916541": 3, "block": [4, 63, 161, 165, 248, 271, 276, 279, 282, 305, 507, 581, 607, 610], "mask": [4, 161, 162, 164, 185, 225, 252, 265, 268, 269, 275, 279, 281, 283, 290, 304, 610, 622], "run_migrations_offlin": 5, "run": [5, 6, 8, 13, 15, 17, 41, 106, 142, 154, 162, 165, 170, 173, 174, 184, 201, 203, 224, 239, 248, 280, 281, 286, 295, 306, 310, 311, 318, 325, 437, 483, 505, 506, 507, 520, 525, 567, 568, 574, 577, 578, 585, 586, 588, 590, 592, 593, 594, 596, 598, 599, 600, 602, 603, 605, 610, 611, 613, 615, 616, 617, 619, 621], "migrat": [5, 473, 620], "offlin": [5, 335, 519, 585, 613], "mode": [5, 6, 8, 13, 16, 21, 39, 40, 41, 43, 106, 146, 162, 194, 203, 234, 248, 252, 290, 303, 318, 320, 322, 335, 355, 482, 525, 567, 581, 582, 598, 602, 613, 614, 619], "thi": [5, 8, 39, 41, 43, 52, 58, 63, 64, 77, 82, 98, 103, 106, 111, 118, 128, 135, 137, 141, 144, 148, 153, 155, 158, 161, 162, 163, 164, 173, 174, 184, 185, 186, 187, 188, 189, 190, 191, 192, 196, 199, 201, 202, 205, 206, 211, 212, 224, 225, 226, 227, 228, 229, 230, 232, 239, 240, 248, 249, 252, 253, 254, 256, 264, 265, 266, 268, 269, 270, 271, 276, 279, 281, 282, 283, 284, 285, 287, 290, 291, 292, 293, 294, 295, 305, 306, 310, 315, 325, 334, 335, 519, 520, 521, 522, 525, 544, 567, 569, 570, 572, 573, 574, 578, 581, 583, 584, 585, 586, 587, 588, 590, 591, 593, 594, 596, 598, 600, 602, 603, 604, 605, 606, 610, 613, 614, 615, 616, 617, 618, 619], "configur": [5, 6, 8, 13, 15, 16, 41, 42, 43, 98, 106, 114, 143, 148, 154, 155, 158, 161, 165, 166, 170, 173, 174, 176, 179, 187, 190, 196, 203, 208, 227, 230, 241, 242, 245, 247, 248, 252, 258, 259, 260, 261, 262, 271, 276, 280, 282, 284, 285, 286, 290, 295, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 320, 323, 325, 327, 328, 331, 333, 334, 336, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 355, 366, 377, 379, 382, 441, 443, 448, 452, 455, 458, 471, 473, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 505, 507, 521, 522, 525, 567, 570, 584, 585, 592, 606, 607, 610, 615, 618, 619, 622], "context": [5, 15, 335, 612], "just": [5, 93, 175, 196, 199, 200, 202, 205, 206, 207, 208, 210, 215, 240, 305, 522, 585, 595, 599, 605, 608, 613, 618, 619], "url": [5, 187, 227, 436, 503, 583], "an": [5, 15, 16, 39, 41, 58, 63, 64, 66, 98, 101, 111, 135, 137, 144, 148, 153, 161, 162, 164, 178, 183, 187, 191, 196, 199, 202, 206, 211, 212, 218, 223, 227, 231, 236, 240, 248, 249, 252, 253, 254, 261, 262, 263, 285, 286, 287, 290, 291, 292, 295, 302, 310, 399, 404, 480, 517, 519, 521, 522, 524, 525, 544, 569, 570, 571, 576, 584, 585, 586, 588, 592, 593, 596, 605, 607, 610, 611, 616, 617, 618, 619], "engin": [5, 354, 366, 387], "though": 5, "i": [5, 6, 8, 13, 15, 16, 17, 40, 41, 43, 44, 45, 49, 50, 53, 56, 58, 60, 63, 64, 66, 77, 78, 81, 87, 88, 89, 98, 99, 101, 103, 105, 106, 111, 118, 128, 135, 137, 138, 142, 144, 147, 148, 153, 154, 155, 158, 159, 161, 162, 163, 165, 170, 173, 174, 175, 183, 184, 185, 186, 187, 188, 189, 191, 192, 194, 195, 196, 198, 199, 202, 203, 205, 206, 209, 211, 212, 215, 223, 224, 225, 226, 227, 228, 229, 232, 234, 235, 236, 237, 240, 248, 249, 252, 254, 255, 256, 258, 263, 265, 271, 276, 280, 281, 282, 285, 286, 287, 290, 292, 293, 294, 295, 302, 305, 306, 310, 311, 316, 317, 318, 325, 334, 335, 354, 387, 399, 419, 422, 424, 425, 427, 429, 430, 431, 432, 438, 476, 478, 480, 482, 483, 488, 490, 492, 498, 503, 505, 519, 520, 521, 522, 525, 526, 528, 533, 534, 535, 542, 544, 546, 553, 561, 562, 563, 564, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 593, 594, 596, 598, 599, 600, 602, 603, 605, 606, 607, 608, 610, 612, 613, 614, 615, 616, 617, 618, 619, 621], "accept": [5, 305, 519, 567, 568], "here": [5, 64, 66, 118, 252, 259, 261, 290, 567, 570, 574, 575, 576, 578, 579, 584, 593, 600, 603, 605, 610, 613, 615, 616, 619], "well": [5, 173, 174, 295, 306, 325, 522, 524, 570, 610, 613, 615, 621], "By": [5, 249, 287, 544, 584, 587, 598, 599, 602, 619], "skip": [5, 63, 99, 305, 617, 619], "creation": [5, 351], "we": [5, 40, 63, 64, 66, 70, 82, 98, 106, 135, 137, 146, 152, 153, 154, 184, 203, 205, 206, 224, 249, 252, 259, 261, 287, 290, 312, 313, 331, 519, 521, 525, 544, 569, 574, 576, 578, 584, 585, 592, 593, 596, 600, 603, 605, 606, 607, 608, 610, 612, 613, 616, 617, 619, 620], "don": [5, 137, 153, 161, 480, 521, 567, 610, 619], "t": [5, 63, 64, 66, 106, 135, 137, 153, 161, 196, 199, 202, 205, 206, 240, 254, 285, 292, 480, 489, 521, 525, 567, 572, 574, 585, 606, 610, 619, 621], "even": [5, 58, 567, 610], "need": [5, 6, 8, 13, 15, 16, 40, 41, 58, 77, 82, 99, 101, 105, 106, 128, 135, 146, 154, 161, 173, 174, 175, 183, 184, 187, 191, 194, 195, 196, 199, 202, 205, 206, 207, 208, 215, 223, 224, 227, 234, 235, 236, 240, 241, 248, 255, 256, 271, 276, 285, 293, 294, 295, 301, 302, 305, 306, 315, 318, 325, 334, 335, 509, 521, 525, 567, 569, 570, 572, 574, 581, 585, 586, 588, 590, 591, 594, 598, 599, 600, 602, 603, 605, 606, 610, 612, 613, 614, 615, 618, 619, 621], "dbapi": 5, "avail": [5, 170, 299, 352, 357, 359, 360, 364, 367, 368, 373, 438, 526, 528, 533, 534, 535, 542, 546, 553, 561, 562, 563, 564, 566, 567, 575, 579, 581, 598, 602, 609, 610, 619], "call": [5, 15, 98, 118, 146, 149, 151, 155, 158, 162, 212, 248, 252, 265, 269, 270, 271, 276, 279, 281, 282, 290, 325, 354, 387, 475, 483, 484, 521, 522, 525, 567, 569, 580, 594, 596, 606, 610, 613, 617, 618], "execut": [5, 8, 13, 16, 40, 41, 43, 46, 48, 49, 51, 65, 69, 75, 78, 80, 84, 104, 140, 149, 151, 155, 162, 203, 212, 241, 248, 259, 260, 261, 271, 276, 281, 284, 285, 295, 306, 307, 309, 325, 328, 334, 335, 336, 337, 338, 355, 366, 369, 376, 382, 384, 385, 441, 443, 445, 448, 449, 452, 453, 454, 455, 457, 458, 460, 465, 468, 472, 475, 483, 484, 506, 567, 572, 573, 585, 586, 590, 591, 598, 599, 602, 605, 606, 608, 610, 613, 616, 619, 622], "emit": 5, "given": [5, 15, 16, 17, 39, 43, 63, 64, 66, 98, 100, 101, 111, 112, 142, 148, 161, 162, 170, 196, 199, 201, 202, 239, 240, 252, 290, 302, 303, 304, 306, 318, 331, 399, 405, 419, 422, 424, 425, 427, 429, 430, 432, 476, 490, 503, 522, 610, 618], "string": [5, 6, 8, 13, 39, 40, 41, 42, 43, 52, 59, 75, 98, 99, 106, 111, 112, 135, 138, 142, 156, 161, 162, 163, 164, 165, 166, 185, 187, 204, 209, 225, 227, 241, 245, 247, 248, 249, 252, 258, 259, 260, 261, 262, 263, 271, 276, 279, 280, 281, 282, 283, 284, 285, 287, 290, 299, 303, 304, 320, 322, 328, 335, 348, 468, 490, 514, 584, 618], "script": [5, 249, 250, 253, 254, 287, 288, 291, 292, 337, 338, 424, 441, 443, 445, 448, 449, 451, 452, 454, 455, 457, 458, 463, 574, 581, 588, 592, 595, 596, 599, 611], "output": [5, 17, 39, 40, 41, 43, 49, 53, 55, 56, 64, 66, 70, 81, 87, 89, 94, 98, 99, 101, 105, 106, 109, 118, 135, 142, 148, 156, 161, 162, 167, 170, 173, 174, 201, 204, 206, 207, 211, 239, 241, 242, 244, 245, 247, 248, 249, 252, 256, 279, 286, 287, 290, 293, 294, 295, 298, 302, 303, 306, 325, 326, 329, 331, 332, 335, 355, 366, 369, 376, 382, 384, 385, 419, 429, 430, 431, 445, 449, 452, 475, 483, 491, 497, 521, 525, 544, 567, 572, 573, 574, 576, 578, 580, 584, 585, 587, 596, 605, 606, 608, 610, 612, 613, 617, 618, 619, 621], "run_migrations_onlin": 5, "onlin": [5, 519, 524, 616], "In": [5, 52, 63, 64, 111, 155, 158, 161, 162, 163, 184, 212, 224, 248, 252, 279, 281, 290, 305, 316, 519, 521, 522, 524, 525, 567, 569, 570, 572, 573, 574, 584, 585, 595, 598, 599, 602, 607, 608, 610, 613, 614, 616, 617, 618, 619], "scenario": [5, 352, 525, 567, 568, 572, 585, 610], "associ": [5, 252, 290, 377, 378], "connect": [5, 159, 281, 366, 376, 377, 379, 380, 381, 382, 383, 384, 385, 386, 567, 605, 609, 610, 616], "adaptor_registri": [6, 525], "cl": [6, 41, 149, 151, 156, 161, 162, 163, 164, 187, 191, 194, 195, 196, 199, 202, 204, 209, 227, 231, 234, 235, 236, 238, 240, 263, 270, 274, 279, 281, 283, 305, 318, 335], "The": [6, 8, 13, 16, 17, 34, 40, 41, 43, 49, 64, 66, 70, 75, 87, 88, 89, 98, 106, 109, 111, 115, 117, 142, 144, 146, 148, 149, 151, 154, 155, 156, 158, 159, 161, 162, 163, 164, 165, 166, 167, 173, 174, 175, 185, 186, 187, 188, 189, 191, 193, 194, 195, 196, 199, 202, 204, 206, 207, 209, 212, 213, 214, 215, 225, 226, 227, 228, 229, 231, 233, 234, 235, 236, 238, 240, 241, 247, 248, 249, 250, 251, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 274, 276, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 302, 303, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 320, 322, 323, 324, 325, 326, 328, 329, 330, 331, 334, 335, 355, 356, 358, 361, 365, 366, 369, 370, 372, 374, 375, 382, 387, 390, 392, 393, 394, 395, 396, 397, 398, 411, 418, 419, 471, 519, 521, 522, 525, 526, 528, 533, 534, 535, 542, 544, 546, 553, 561, 562, 563, 564, 566, 567, 568, 569, 570, 572, 574, 576, 578, 580, 581, 582, 584, 585, 586, 587, 590, 591, 593, 596, 598, 599, 600, 602, 603, 605, 606, 607, 608, 610, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621], "decor": [6, 34, 63, 64, 66, 142, 149, 151, 161, 162, 164, 196, 199, 202, 209, 236, 238, 240, 255, 256, 263, 270, 274, 279, 281, 283, 293, 294, 305, 318, 321, 335, 485, 521, 522, 525, 619], "us": [6, 8, 13, 15, 16, 34, 40, 41, 43, 44, 45, 63, 64, 66, 98, 99, 101, 109, 111, 112, 118, 144, 148, 154, 155, 156, 158, 159, 161, 162, 164, 167, 173, 174, 183, 184, 185, 186, 187, 188, 189, 191, 192, 196, 199, 201, 202, 203, 204, 209, 223, 224, 225, 226, 227, 228, 229, 232, 236, 238, 239, 240, 241, 242, 244, 245, 247, 248, 249, 250, 252, 256, 257, 258, 259, 261, 263, 270, 271, 274, 276, 279, 281, 282, 283, 284, 285, 286, 287, 288, 290, 294, 295, 305, 306, 310, 312, 313, 315, 316, 317, 318, 321, 322, 326, 327, 328, 329, 330, 331, 335, 382, 387, 392, 393, 397, 399, 411, 418, 420, 445, 449, 473, 490, 492, 502, 503, 519, 520, 521, 522, 525, 544, 567, 568, 569, 570, 572, 573, 574, 576, 578, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 592, 593, 596, 598, 600, 602, 603, 605, 607, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 621, 622], "regist": [6, 34, 128, 149, 151, 155, 156, 158, 159, 161, 162, 163, 164, 187, 191, 194, 195, 196, 199, 202, 204, 209, 212, 227, 231, 234, 235, 236, 238, 240, 241, 248, 255, 256, 263, 264, 270, 271, 272, 273, 274, 276, 279, 281, 283, 293, 294, 301, 304, 305, 310, 318, 321, 522, 525, 570, 574, 584, 585, 606, 607, 619], "all": [6, 8, 15, 17, 34, 41, 43, 56, 59, 81, 93, 98, 118, 127, 132, 149, 151, 154, 155, 156, 158, 161, 162, 165, 175, 176, 179, 183, 187, 191, 194, 195, 196, 199, 202, 203, 204, 209, 212, 213, 214, 215, 223, 227, 231, 234, 235, 236, 238, 240, 245, 248, 249, 252, 254, 255, 256, 263, 270, 271, 272, 273, 274, 275, 276, 279, 282, 285, 287, 290, 292, 293, 294, 296, 297, 302, 305, 308, 309, 310, 311, 312, 318, 320, 321, 322, 328, 335, 339, 351, 354, 363, 380, 382, 387, 392, 393, 406, 408, 411, 412, 418, 419, 422, 424, 431, 437, 444, 446, 450, 451, 453, 456, 462, 467, 471, 480, 484, 507, 519, 524, 525, 567, 569, 570, 574, 578, 582, 585, 588, 596, 599, 600, 603, 604, 605, 606, 608, 609, 610, 611, 613, 614, 618, 619], "subclass": [6, 34, 149, 151, 161, 162, 164, 180, 184, 187, 191, 194, 195, 196, 199, 202, 209, 220, 224, 227, 231, 234, 235, 236, 238, 240, 255, 256, 263, 270, 272, 273, 274, 279, 281, 283, 293, 294, 305, 318, 321, 525], "paramet": [6, 8, 13, 15, 16, 17, 39, 40, 41, 43, 52, 53, 56, 57, 58, 59, 63, 64, 66, 70, 75, 81, 82, 85, 86, 98, 99, 101, 106, 109, 111, 112, 118, 128, 135, 136, 138, 142, 143, 144, 147, 148, 149, 151, 154, 155, 156, 158, 159, 161, 162, 163, 164, 165, 166, 167, 170, 173, 174, 175, 184, 185, 187, 191, 194, 195, 196, 198, 199, 201, 202, 203, 204, 209, 213, 214, 215, 224, 225, 227, 231, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 265, 266, 268, 269, 270, 271, 274, 276, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 299, 301, 302, 303, 304, 305, 306, 310, 315, 318, 320, 321, 322, 323, 324, 325, 328, 329, 331, 332, 334, 335, 348, 352, 357, 358, 377, 378, 379, 382, 388, 390, 399, 425, 443, 448, 452, 455, 458, 470, 475, 480, 482, 483, 489, 490, 492, 502, 503, 521, 544, 567, 569, 570, 572, 574, 581, 584, 585, 599, 605, 606, 610, 613, 616, 618, 619, 621], "framework_specific_info": [6, 8, 13, 16, 41, 43, 525], "base": [6, 8, 13, 15, 16, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 65, 67, 68, 69, 70, 71, 73, 74, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 100, 101, 103, 104, 105, 109, 112, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 137, 138, 140, 141, 143, 144, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 161, 162, 163, 164, 166, 167, 170, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 215, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 246, 248, 249, 252, 255, 256, 257, 259, 260, 261, 262, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 281, 283, 284, 285, 286, 287, 290, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 320, 321, 322, 324, 326, 329, 330, 331, 332, 335, 340, 341, 342, 344, 345, 346, 347, 350, 355, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 394, 395, 396, 398, 401, 403, 404, 407, 417, 419, 422, 424, 426, 427, 429, 430, 431, 432, 440, 443, 448, 452, 455, 458, 468, 472, 474, 476, 478, 482, 483, 484, 485, 488, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 503, 504, 506, 508, 512, 513, 522, 524, 525, 544, 570, 573, 574, 578, 585, 593, 594, 596, 605, 609, 610, 616, 617, 619, 620, 622], "object": [6, 8, 13, 15, 16, 34, 40, 41, 43, 53, 56, 57, 58, 59, 70, 75, 81, 82, 87, 88, 89, 90, 99, 100, 101, 106, 109, 112, 128, 135, 138, 143, 144, 147, 148, 149, 151, 154, 155, 156, 158, 159, 161, 162, 163, 164, 165, 166, 167, 170, 173, 174, 175, 176, 178, 179, 183, 185, 186, 187, 191, 194, 195, 196, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 214, 215, 218, 223, 225, 226, 227, 231, 234, 235, 236, 238, 239, 240, 241, 245, 247, 248, 249, 252, 255, 256, 257, 260, 261, 262, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 276, 279, 280, 281, 282, 283, 284, 285, 286, 287, 290, 293, 294, 295, 297, 299, 301, 302, 303, 304, 306, 310, 318, 325, 326, 328, 329, 330, 332, 334, 335, 352, 367, 368, 371, 374, 415, 480, 483, 490, 500, 502, 503, 507, 521, 522, 535, 544, 567, 568, 569, 570, 577, 584, 585, 587, 608, 610, 612, 613, 618, 619, 620, 622], "framework": [6, 8, 13, 15, 16, 41, 154, 156, 171, 172, 176, 177, 181, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 195, 196, 199, 202, 204, 205, 206, 209, 216, 217, 219, 221, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 238, 240, 247, 248, 255, 256, 257, 284, 285, 293, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 306, 316, 318, 320, 322, 328, 337, 352, 363, 380, 382, 387, 389, 391, 411, 419, 422, 424, 425, 431, 438, 440, 445, 449, 454, 457, 461, 472, 478, 490, 491, 524, 525, 567, 574, 575, 579, 580, 581, 582, 584, 585, 586, 610, 611, 613, 617, 618, 619, 620, 621], "layer": [6, 8, 13, 16, 40, 42, 43, 64, 66, 111, 112, 113, 114, 115, 117, 118, 146, 152, 156, 161, 165, 170, 204, 211, 248, 271, 276, 279, 280, 282, 326, 328, 329, 335, 502, 525, 573, 581, 610, 615], "abstract": [6, 13, 15, 42, 82, 109, 118, 155, 156, 158, 161, 164, 202, 204, 240, 241, 247, 248, 255, 256, 262, 264, 270, 274, 279, 283, 284, 293, 294, 296, 297, 298, 305, 306, 318, 341, 353, 419, 430, 431, 452, 464, 482, 506, 525, 580], "quantiz": [6, 7, 8, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 84, 88, 90, 92, 95, 103, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 141, 143, 144, 146, 148, 149, 151, 152, 154, 155, 158, 170, 173, 174, 198, 205, 206, 212, 237, 242, 245, 246, 247, 248, 258, 285, 286, 295, 304, 307, 309, 310, 311, 312, 313, 315, 316, 317, 318, 320, 321, 322, 325, 326, 329, 330, 331, 334, 335, 347, 352, 382, 384, 390, 471, 479, 491, 495, 525, 535, 553, 567, 569, 570, 574, 575, 576, 578, 580, 581, 584, 586, 587, 588, 593, 595, 596, 599, 608, 611, 615, 617, 618, 619, 620, 621], "tune_cfg": [6, 8, 13, 15, 16, 41, 43, 142, 143, 148, 174, 311, 318, 525, 619], "model": [6, 8, 13, 15, 16, 17, 30, 39, 40, 41, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 112, 114, 135, 136, 142, 143, 144, 146, 147, 148, 149, 151, 152, 154, 155, 156, 158, 161, 162, 164, 165, 170, 173, 174, 181, 184, 185, 187, 196, 199, 202, 203, 204, 206, 207, 212, 213, 214, 221, 224, 225, 227, 240, 241, 242, 243, 244, 245, 246, 247, 248, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 268, 269, 270, 271, 276, 279, 280, 281, 282, 283, 284, 285, 286, 293, 294, 295, 305, 306, 307, 310, 311, 313, 315, 316, 317, 318, 320, 322, 325, 331, 334, 335, 337, 338, 339, 341, 352, 355, 363, 366, 369, 371, 379, 380, 381, 382, 383, 384, 386, 387, 388, 390, 394, 398, 399, 404, 405, 406, 409, 410, 411, 435, 436, 438, 441, 444, 445, 446, 447, 449, 450, 451, 452, 456, 457, 462, 464, 467, 468, 471, 472, 479, 488, 490, 495, 505, 506, 510, 517, 521, 522, 524, 525, 534, 542, 568, 569, 570, 572, 573, 574, 575, 580, 581, 583, 584, 586, 588, 593, 595, 596, 599, 605, 607, 608, 609, 611, 613, 615, 616, 617, 618, 619, 620, 621], "q_func": [6, 8, 13, 16, 41, 43, 173, 174, 248, 284, 285, 307, 310, 311, 313, 315, 316, 317, 318, 525, 585, 619], "none": [6, 8, 13, 15, 16, 17, 39, 40, 41, 43, 44, 45, 59, 85, 98, 99, 100, 101, 106, 112, 118, 135, 136, 142, 144, 146, 148, 154, 155, 156, 158, 162, 165, 166, 167, 170, 173, 174, 175, 177, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 196, 198, 199, 202, 203, 204, 205, 206, 212, 214, 215, 217, 221, 223, 224, 225, 226, 227, 228, 229, 230, 232, 237, 240, 241, 242, 244, 245, 247, 248, 249, 252, 255, 256, 257, 258, 259, 261, 262, 270, 271, 275, 276, 280, 281, 284, 285, 286, 287, 290, 293, 294, 295, 300, 302, 303, 304, 305, 306, 307, 310, 311, 313, 315, 316, 317, 318, 320, 322, 325, 326, 328, 329, 334, 335, 336, 337, 338, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 354, 355, 356, 357, 358, 359, 360, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 381, 382, 385, 387, 388, 389, 390, 404, 419, 422, 424, 426, 429, 430, 431, 436, 438, 443, 445, 448, 449, 452, 454, 455, 457, 458, 459, 460, 461, 464, 465, 466, 468, 470, 473, 475, 476, 478, 481, 483, 484, 488, 489, 490, 491, 492, 493, 494, 496, 498, 499, 500, 502, 503, 507, 509, 515, 525, 544, 570, 584, 613, 617, 618, 619], "do": [6, 8, 13, 16, 19, 21, 22, 23, 24, 25, 26, 27, 29, 31, 32, 33, 34, 35, 36, 37, 38, 41, 44, 45, 73, 75, 103, 155, 158, 184, 185, 224, 225, 241, 242, 245, 248, 249, 252, 282, 285, 287, 290, 305, 311, 334, 519, 544, 567, 570, 574, 578, 581, 582, 584, 585, 600, 603, 610, 614, 615, 619], "calibr": [6, 7, 8, 13, 15, 16, 18, 40, 41, 44, 45, 73, 85, 86, 146, 148, 149, 151, 154, 173, 174, 247, 248, 284, 285, 295, 306, 330, 499, 525, 569, 570, 580, 581, 613, 619, 621], "quanit": [6, 13, 16], "post": [6, 13, 16, 93, 94, 146, 152, 170, 173, 174, 196, 199, 202, 212, 240, 245, 248, 285, 286, 306, 318, 502, 519, 524, 525, 573, 574, 581, 582, 588, 594, 605, 610, 611, 617, 619], "train": [6, 8, 13, 16, 41, 43, 52, 58, 75, 76, 118, 146, 152, 155, 158, 162, 170, 173, 174, 185, 187, 202, 212, 225, 227, 240, 241, 248, 258, 259, 261, 270, 271, 276, 281, 282, 284, 285, 286, 306, 318, 328, 498, 522, 524, 525, 535, 570, 572, 573, 576, 581, 586, 588, 594, 605, 608, 610, 611, 616, 619, 621], "dict": [6, 8, 13, 15, 16, 17, 40, 41, 43, 109, 111, 112, 118, 138, 142, 143, 144, 148, 149, 151, 154, 156, 159, 161, 162, 163, 164, 165, 167, 173, 174, 184, 187, 203, 204, 209, 224, 227, 242, 243, 245, 248, 251, 252, 253, 254, 256, 259, 261, 262, 263, 264, 271, 272, 273, 274, 276, 279, 280, 281, 282, 283, 289, 290, 291, 292, 294, 295, 296, 297, 302, 303, 304, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 328, 329, 334, 335, 336, 338, 341, 348, 349, 350, 352, 353, 355, 356, 357, 358, 359, 360, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 388, 389, 390, 395, 396, 399, 407, 416, 419, 426, 434, 435, 436, 438, 440, 441, 442, 443, 448, 452, 455, 458, 459, 460, 461, 463, 465, 466, 468, 475, 476, 478, 480, 482, 483, 486, 488, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 502, 503, 506, 507, 509, 511, 513, 514, 516, 521, 584, 610, 612, 617, 619], "chosen": [6, 8, 567], "tune": [6, 8, 13, 15, 16, 41, 43, 154, 155, 170, 173, 174, 185, 187, 225, 227, 247, 248, 284, 286, 295, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 335, 347, 366, 374, 375, 382, 384, 388, 411, 441, 446, 459, 471, 479, 491, 495, 525, 567, 569, 570, 574, 581, 583, 585, 586, 605, 607, 610, 611, 614, 615, 616, 617, 621], "load": [6, 8, 185, 187, 201, 202, 225, 227, 239, 240, 252, 262, 290, 295, 303, 304, 306, 334, 335, 382, 384, 463, 490, 491, 569, 598, 602, 606, 612, 613], "dataset": [6, 8, 13, 16, 41, 43, 148, 173, 174, 175, 177, 178, 181, 182, 183, 184, 196, 205, 206, 215, 217, 218, 221, 222, 223, 224, 236, 247, 248, 252, 253, 254, 256, 258, 284, 285, 286, 290, 291, 292, 293, 294, 295, 306, 325, 328, 355, 363, 366, 369, 377, 382, 386, 387, 388, 399, 411, 488, 490, 491, 492, 522, 524, 525, 546, 569, 574, 579, 584, 585, 593, 610, 613, 615, 619, 621, 622], "option": [6, 8, 13, 16, 17, 41, 43, 98, 101, 106, 135, 156, 161, 170, 173, 174, 175, 185, 196, 199, 202, 204, 215, 225, 240, 242, 244, 245, 248, 252, 258, 279, 285, 286, 290, 295, 303, 304, 306, 318, 320, 322, 325, 329, 331, 335, 480, 570, 578, 582, 585, 599, 616, 618, 619, 621], "awar": [6, 8, 13, 16, 41, 43, 144, 155, 158, 170, 212, 248, 258, 279, 284, 285, 286, 313, 318, 325, 525, 573, 574, 576, 581, 586, 605, 608, 619], "evalu": [6, 8, 13, 16, 41, 43, 154, 155, 158, 161, 162, 173, 174, 185, 203, 212, 225, 241, 247, 248, 249, 252, 253, 254, 255, 256, 258, 259, 261, 262, 271, 276, 281, 282, 285, 286, 287, 290, 291, 292, 293, 294, 295, 305, 306, 318, 325, 328, 340, 342, 344, 346, 347, 348, 471, 479, 491, 495, 522, 525, 544, 569, 570, 572, 573, 580, 581, 584, 585, 586, 588, 594, 596, 599, 605, 607, 610, 613, 616, 617, 619, 621], "postprocess": [6, 8, 13, 16, 41, 43, 196, 199, 202, 203, 206, 236, 238, 240, 247, 248, 258, 284, 285, 286, 328, 493, 498, 525, 585, 617, 618], "metric": [6, 8, 13, 16, 41, 43, 155, 158, 173, 174, 203, 206, 241, 247, 248, 258, 259, 261, 262, 263, 264, 271, 276, 284, 285, 286, 295, 305, 306, 325, 328, 348, 352, 358, 363, 377, 380, 382, 387, 411, 471, 479, 482, 487, 490, 491, 493, 509, 522, 525, 528, 542, 544, 567, 569, 570, 574, 585, 586, 616, 617, 619, 620, 621, 622], "measur": [6, 8, 13, 16, 41, 43, 142, 203, 295, 305, 330, 509, 522, 525, 568, 572, 584, 585, 617, 619], "iter": [6, 8, 13, 15, 16, 17, 41, 43, 101, 142, 149, 151, 154, 162, 164, 170, 173, 174, 178, 183, 187, 188, 191, 196, 205, 206, 218, 223, 227, 228, 231, 236, 262, 281, 283, 295, 303, 306, 325, 328, 355, 483, 491, 521, 522, 525, 568, 570, 585, 610, 612, 617, 619, 621], "1": [6, 8, 13, 16, 39, 40, 41, 43, 44, 50, 63, 70, 75, 85, 98, 99, 101, 105, 109, 111, 140, 142, 146, 148, 150, 152, 153, 154, 156, 158, 161, 162, 170, 175, 177, 181, 184, 185, 186, 188, 189, 191, 192, 193, 195, 196, 198, 199, 202, 203, 204, 205, 206, 215, 217, 221, 224, 225, 226, 228, 229, 232, 233, 237, 240, 247, 248, 252, 253, 254, 256, 271, 276, 279, 281, 284, 285, 286, 290, 291, 292, 293, 294, 305, 306, 308, 328, 338, 460, 468, 519, 521, 524, 525, 569, 570, 572, 576, 578, 579, 582, 584, 586, 589, 591, 607, 608, 609, 610, 612, 613, 615, 616, 617, 618, 619, 620, 621], "tensorboard": [6, 8, 13, 16, 41, 43, 170, 286, 325, 328, 335, 525, 585], "fals": [6, 8, 13, 15, 16, 17, 39, 41, 43, 44, 45, 59, 67, 68, 75, 85, 88, 95, 98, 99, 101, 106, 109, 120, 127, 132, 137, 140, 141, 142, 146, 147, 148, 154, 156, 161, 170, 174, 175, 177, 181, 184, 185, 187, 196, 198, 199, 202, 203, 204, 205, 206, 211, 215, 217, 221, 224, 225, 227, 237, 240, 252, 255, 256, 279, 286, 290, 293, 294, 302, 305, 318, 328, 331, 407, 426, 475, 478, 483, 484, 490, 509, 515, 525, 570, 578, 584, 585, 598, 602, 612, 613, 617, 618, 621], "valid": [6, 8, 13, 42, 43, 50, 55, 63, 64, 99, 100, 101, 106, 135, 161, 162, 165, 187, 191, 196, 227, 252, 280, 281, 290, 303, 438, 490, 507, 520, 522, 524, 525, 570, 572, 575, 578, 581, 583, 585, 596, 610, 613, 615], "gener": [6, 7, 8, 15, 43, 44, 45, 83, 85, 86, 103, 106, 107, 118, 135, 138, 142, 148, 154, 161, 165, 173, 174, 175, 184, 187, 188, 189, 190, 196, 199, 202, 203, 215, 224, 227, 228, 229, 230, 236, 238, 240, 245, 246, 248, 249, 257, 271, 279, 282, 285, 286, 287, 295, 304, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 325, 336, 337, 340, 341, 342, 343, 344, 345, 346, 347, 353, 377, 382, 388, 443, 448, 452, 455, 457, 458, 463, 464, 465, 474, 483, 515, 521, 525, 567, 569, 572, 584, 585, 586, 588, 593, 598, 600, 602, 603, 605, 607, 609, 610, 611, 613, 614, 617, 618, 619], "data": [6, 8, 13, 15, 16, 17, 40, 41, 43, 51, 75, 98, 99, 101, 106, 135, 142, 144, 146, 148, 152, 154, 156, 161, 173, 174, 203, 204, 205, 206, 242, 245, 246, 248, 279, 285, 286, 295, 302, 306, 310, 316, 322, 324, 325, 328, 335, 336, 338, 341, 348, 349, 350, 352, 376, 377, 379, 380, 381, 382, 383, 384, 385, 386, 388, 390, 399, 415, 416, 419, 422, 426, 431, 434, 435, 436, 438, 441, 443, 448, 452, 455, 458, 460, 465, 468, 475, 488, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 502, 506, 511, 513, 514, 516, 524, 525, 542, 567, 569, 570, 574, 578, 579, 582, 584, 585, 586, 613, 614, 615, 616, 617, 618, 619], "label": [6, 8, 43, 156, 173, 174, 185, 187, 188, 189, 190, 193, 195, 196, 198, 199, 202, 204, 206, 207, 225, 227, 228, 229, 230, 233, 237, 240, 249, 251, 255, 256, 287, 289, 293, 294, 295, 306, 325, 407, 521, 544, 569, 570, 584, 585, 618], "process": [6, 8, 13, 16, 41, 43, 112, 144, 154, 155, 158, 161, 162, 164, 165, 173, 174, 185, 186, 187, 191, 196, 198, 199, 202, 203, 212, 225, 226, 227, 236, 237, 238, 240, 241, 242, 245, 248, 259, 260, 261, 262, 270, 271, 276, 279, 281, 282, 283, 285, 286, 295, 306, 307, 309, 310, 318, 325, 334, 335, 351, 434, 435, 438, 471, 475, 479, 482, 483, 491, 522, 525, 567, 569, 570, 572, 573, 574, 576, 585, 589, 608, 610, 613, 617, 618, 621], "result": [6, 8, 13, 16, 40, 41, 43, 98, 142, 144, 148, 154, 156, 173, 196, 198, 199, 202, 203, 204, 237, 240, 248, 249, 252, 253, 254, 255, 256, 262, 286, 287, 290, 291, 292, 293, 294, 305, 309, 313, 318, 320, 322, 334, 336, 338, 355, 356, 369, 370, 372, 376, 382, 385, 388, 465, 506, 509, 519, 522, 524, 544, 567, 569, 572, 574, 581, 583, 584, 585, 593, 594, 605, 606, 607, 610, 611, 613, 616, 617, 618, 619, 620, 622], "from": [6, 8, 13, 15, 17, 40, 41, 43, 57, 63, 64, 65, 66, 98, 99, 101, 106, 109, 111, 118, 128, 135, 136, 138, 142, 148, 154, 155, 156, 158, 159, 161, 162, 163, 164, 165, 170, 173, 174, 175, 178, 182, 185, 186, 187, 188, 189, 190, 191, 192, 196, 197, 198, 199, 204, 205, 206, 208, 212, 215, 218, 222, 225, 226, 227, 228, 229, 230, 232, 237, 241, 243, 244, 245, 246, 248, 249, 252, 253, 254, 258, 263, 271, 276, 279, 280, 281, 282, 283, 285, 286, 287, 290, 291, 292, 295, 301, 302, 303, 305, 306, 310, 312, 317, 318, 320, 322, 323, 324, 328, 331, 334, 335, 353, 355, 358, 359, 360, 362, 365, 366, 367, 368, 369, 371, 372, 374, 376, 377, 379, 382, 383, 384, 385, 386, 388, 399, 404, 422, 425, 434, 435, 436, 438, 463, 468, 482, 483, 488, 490, 491, 492, 498, 507, 509, 514, 515, 519, 521, 522, 525, 544, 568, 569, 570, 572, 573, 574, 575, 576, 577, 579, 581, 584, 586, 587, 588, 592, 593, 594, 596, 606, 607, 608, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620], "depend": [6, 8, 15, 43, 58, 75, 173, 174, 203, 248, 259, 261, 262, 295, 306, 325, 520, 567, 577, 578, 612, 619], "categori": [6, 8, 43, 187, 227, 251, 252, 289, 290, 568, 570, 595], "default": [6, 8, 17, 41, 43, 93, 99, 106, 135, 142, 156, 165, 167, 170, 173, 174, 175, 177, 185, 186, 187, 191, 196, 198, 199, 202, 204, 212, 215, 217, 225, 226, 227, 237, 240, 242, 244, 245, 248, 249, 252, 255, 256, 258, 280, 286, 287, 290, 293, 294, 303, 304, 307, 320, 322, 324, 328, 331, 335, 357, 359, 360, 362, 364, 367, 368, 373, 395, 396, 399, 416, 426, 478, 480, 490, 492, 493, 497, 498, 521, 525, 544, 567, 570, 576, 578, 581, 582, 584, 585, 586, 593, 596, 598, 602, 607, 610, 612, 614, 616, 618, 619, 621], "precis": [6, 8, 13, 42, 43, 44, 45, 75, 143, 170, 173, 174, 247, 248, 252, 254, 256, 257, 284, 286, 290, 292, 293, 294, 295, 305, 306, 308, 309, 311, 318, 320, 322, 352, 363, 366, 367, 377, 378, 379, 380, 381, 382, 387, 411, 440, 445, 447, 448, 449, 472, 491, 494, 496, 524, 525, 535, 567, 568, 573, 574, 578, 581, 588, 594, 595, 596, 611, 612, 613, 619, 620], "benchmark": [6, 8, 13, 43, 170, 205, 206, 248, 285, 286, 305, 335, 356, 363, 366, 376, 382, 384, 387, 388, 411, 471, 472, 482, 488, 505, 510, 524, 535, 542, 587, 588, 592, 596, 599, 605, 619, 620, 621, 622], "int": [6, 8, 13, 15, 16, 40, 41, 43, 99, 101, 106, 135, 142, 144, 148, 161, 175, 184, 185, 186, 191, 196, 198, 199, 202, 215, 224, 225, 226, 237, 240, 242, 244, 245, 250, 252, 256, 263, 270, 286, 288, 290, 293, 294, 302, 305, 329, 335, 341, 354, 355, 356, 357, 358, 359, 360, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 377, 379, 381, 382, 383, 384, 385, 386, 387, 389, 433, 468, 475, 476, 478, 480, 481, 482, 483, 484, 490, 491, 493, 498, 500, 503, 515, 570, 584, 585, 612, 618], "control": [6, 8, 13, 43, 76, 149, 151, 382, 387, 521, 567, 585, 610, 619], "step": [6, 8, 13, 43, 44, 63, 64, 88, 103, 155, 159, 161, 162, 163, 164, 212, 248, 269, 270, 279, 281, 282, 283, 305, 325, 567, 572, 573, 574, 585, 600, 603, 605, 608, 610, 612, 614, 616, 617, 619], "mini": [6, 8, 13, 43, 622], "batch": [6, 8, 13, 15, 43, 58, 63, 111, 148, 155, 175, 177, 178, 183, 184, 196, 205, 206, 212, 215, 217, 218, 223, 224, 248, 271, 276, 316, 325, 355, 366, 488, 567, 569, 572, 573, 585, 608, 610, 618, 619, 622], "boolean": [6, 8, 13, 15, 43, 52, 162, 490], "inspect": [6, 8, 13, 16, 43, 567, 615, 617], "tensor": [6, 8, 13, 15, 16, 17, 39, 40, 41, 43, 66, 98, 99, 101, 106, 118, 128, 135, 142, 144, 148, 156, 159, 161, 162, 163, 164, 196, 199, 202, 204, 240, 242, 243, 245, 265, 274, 275, 279, 281, 283, 301, 302, 303, 304, 315, 335, 379, 382, 390, 419, 521, 570, 610, 613, 615, 617, 618, 619], "query_fw_cap": [6, 8, 13, 16, 41, 43, 525], "return": [6, 8, 13, 15, 16, 17, 40, 41, 43, 44, 45, 46, 49, 52, 53, 56, 57, 58, 59, 63, 64, 66, 70, 75, 77, 81, 85, 86, 87, 88, 89, 90, 98, 99, 101, 106, 109, 111, 112, 118, 128, 135, 138, 140, 142, 143, 144, 146, 147, 148, 149, 151, 154, 155, 156, 158, 161, 162, 163, 164, 165, 167, 173, 174, 175, 177, 184, 187, 191, 194, 195, 196, 198, 199, 201, 202, 203, 204, 209, 213, 214, 215, 217, 224, 227, 231, 234, 235, 236, 237, 238, 239, 240, 241, 245, 246, 248, 249, 250, 252, 253, 254, 255, 256, 258, 259, 260, 261, 262, 263, 264, 270, 271, 274, 276, 279, 280, 281, 282, 283, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 305, 306, 307, 309, 310, 311, 312, 313, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 328, 331, 334, 335, 355, 356, 358, 365, 366, 367, 368, 369, 371, 372, 374, 375, 399, 402, 403, 404, 405, 436, 475, 478, 480, 482, 483, 484, 490, 493, 502, 503, 506, 521, 522, 544, 570, 574, 584, 587, 607, 610, 613, 617, 619], "capabl": [6, 8, 13, 15, 16, 41, 42, 43, 318, 320, 322, 568, 578, 585, 586, 596, 612, 613, 619, 621], "queri": [6, 8, 13, 15, 16, 43, 106, 111, 118, 142, 311, 320, 322, 357, 364, 373, 376, 377, 379, 380, 381, 382, 383, 384, 385, 386, 613], "query_fused_pattern": [6, 525], "fuse": [6, 15, 41, 43, 44, 45, 50, 54, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 75, 87, 88, 89, 90, 92, 98, 127, 131, 132, 144, 147, 148, 152, 521, 617], "pattern": [6, 42, 43, 54, 55, 57, 58, 60, 63, 64, 66, 74, 75, 88, 92, 103, 104, 105, 106, 119, 120, 122, 123, 124, 125, 127, 129, 130, 131, 132, 133, 134, 158, 160, 162, 163, 166, 170, 187, 191, 196, 227, 248, 269, 270, 272, 277, 281, 286, 320, 322, 379, 382, 395, 404, 405, 482, 506, 525, 570, 578, 581, 585, 606, 608, 612, 622], "conv": [6, 7, 16, 17, 18, 30, 39, 44, 45, 54, 58, 62, 67, 68, 69, 88, 98, 105, 106, 121, 131, 152, 158, 161, 170, 286, 521, 585, 610, 612], "relu": [6, 70, 74, 75, 105, 119, 121, 123, 124, 129, 131, 133, 521, 578, 617], "bn": [6, 58, 75, 77, 119, 622], "inspect_tensor": [6, 8, 13, 16, 43, 525], "op_list": [6, 8, 13, 16, 43, 144, 315, 525, 617], "iteration_list": [6, 8, 13, 16, 43, 525], "inspect_typ": [6, 8, 13, 16, 43, 390, 525], "activ": [6, 7, 8, 13, 16, 17, 18, 30, 43, 106, 124, 144, 146, 148, 211, 242, 245, 320, 322, 395, 525, 567, 573, 578, 585, 606, 609, 612, 613, 617, 621], "save_to_disk": [6, 8, 13, 16, 43, 525], "strategi": [6, 8, 13, 15, 16, 41, 148, 155, 170, 171, 187, 227, 248, 284, 286, 295, 306, 352, 374, 472, 490, 500, 524, 525, 534, 574, 581, 585, 593, 605, 611, 612, 613, 614, 615, 620, 621], "dump": [6, 8, 13, 16, 17, 41, 43, 98, 106, 203, 242, 245, 248, 302, 335, 345, 459, 480, 491, 503, 613, 617], "info": [6, 8, 13, 16, 17, 40, 44, 100, 106, 148, 161, 165, 196, 199, 200, 205, 206, 210, 245, 279, 285, 298, 299, 302, 303, 304, 329, 332, 335, 355, 356, 358, 365, 366, 369, 370, 372, 375, 475, 478, 483, 490, 506, 521, 567, 576, 587], "feed": [6, 8, 142, 184, 224, 352, 572, 610], "list": [6, 8, 13, 15, 40, 41, 43, 49, 52, 75, 98, 99, 101, 106, 111, 118, 135, 142, 143, 144, 148, 149, 151, 154, 156, 161, 170, 173, 174, 178, 185, 196, 198, 199, 201, 202, 203, 204, 218, 225, 237, 239, 240, 242, 244, 245, 248, 249, 250, 252, 253, 254, 256, 263, 271, 276, 279, 282, 286, 287, 288, 290, 291, 292, 293, 294, 295, 298, 302, 303, 305, 306, 309, 311, 315, 318, 320, 321, 322, 325, 326, 329, 348, 350, 352, 353, 355, 357, 358, 359, 360, 362, 364, 365, 366, 367, 368, 369, 370, 371, 373, 375, 376, 377, 378, 379, 380, 382, 383, 384, 385, 386, 388, 389, 390, 399, 402, 404, 405, 407, 419, 422, 425, 426, 429, 430, 431, 433, 438, 441, 443, 445, 448, 449, 452, 455, 458, 468, 475, 480, 482, 483, 484, 488, 490, 491, 492, 493, 494, 496, 497, 498, 500, 502, 509, 521, 524, 525, 544, 570, 578, 582, 585, 588, 593, 595, 598, 599, 602, 607, 610, 612, 614, 617, 619], "op": [6, 7, 8, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 35, 36, 37, 38, 40, 41, 42, 43, 48, 50, 52, 53, 55, 56, 58, 61, 62, 63, 64, 65, 66, 67, 68, 70, 74, 75, 77, 81, 84, 87, 88, 89, 90, 92, 98, 99, 100, 101, 103, 105, 106, 119, 120, 121, 127, 129, 130, 131, 132, 134, 135, 137, 140, 142, 143, 144, 146, 147, 148, 152, 242, 245, 303, 308, 309, 311, 313, 315, 316, 320, 321, 322, 323, 330, 379, 382, 390, 395, 396, 404, 506, 525, 567, 578, 585, 586, 610, 613, 614, 615, 617, 619, 621], "name": [6, 8, 15, 39, 40, 41, 43, 49, 58, 59, 63, 64, 66, 75, 98, 99, 100, 101, 106, 111, 112, 128, 135, 138, 142, 143, 144, 147, 148, 149, 151, 154, 156, 159, 161, 162, 163, 164, 167, 170, 185, 186, 187, 190, 191, 194, 195, 196, 199, 200, 202, 203, 204, 206, 207, 209, 210, 211, 225, 226, 227, 230, 231, 234, 235, 236, 238, 240, 242, 243, 244, 245, 251, 252, 255, 256, 265, 271, 274, 276, 279, 281, 283, 285, 289, 290, 293, 294, 298, 299, 301, 302, 303, 304, 305, 320, 321, 322, 324, 326, 328, 329, 331, 335, 355, 359, 360, 362, 365, 366, 367, 368, 369, 371, 390, 399, 401, 419, 422, 424, 425, 431, 438, 439, 440, 441, 452, 468, 475, 478, 490, 492, 493, 514, 521, 567, 570, 574, 578, 583, 584, 585, 587, 591, 598, 602, 606, 609, 610, 615, 616, 617, 619, 621, 622], "fp32": [6, 8, 13, 39, 41, 42, 43, 44, 45, 75, 87, 89, 127, 132, 137, 144, 146, 148, 153, 170, 173, 174, 242, 244, 245, 256, 294, 303, 305, 309, 311, 315, 318, 320, 322, 328, 334, 335, 390, 524, 525, 567, 578, 579, 584, 585, 586, 595, 612, 613, 614, 615, 616, 617, 619, 621, 622], "contain": [6, 8, 13, 15, 16, 41, 52, 63, 64, 66, 70, 75, 98, 106, 109, 135, 142, 144, 154, 155, 158, 161, 162, 164, 165, 173, 174, 185, 186, 187, 191, 196, 225, 226, 227, 241, 242, 245, 247, 248, 252, 253, 254, 258, 271, 272, 273, 274, 276, 279, 280, 281, 282, 283, 284, 286, 290, 291, 292, 295, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 325, 328, 334, 339, 343, 351, 357, 359, 360, 362, 363, 364, 367, 368, 371, 373, 377, 382, 387, 392, 393, 397, 400, 406, 411, 412, 418, 437, 444, 446, 447, 450, 451, 453, 456, 462, 467, 471, 475, 483, 570, 572, 581, 584, 606, 610, 617, 619, 620], "str": [6, 8, 15, 16, 17, 106, 135, 136, 143, 144, 147, 148, 149, 151, 156, 161, 175, 185, 186, 187, 191, 194, 195, 196, 198, 199, 202, 204, 208, 209, 215, 225, 226, 227, 231, 234, 235, 236, 237, 238, 240, 242, 244, 245, 246, 249, 250, 252, 254, 255, 256, 263, 274, 286, 287, 288, 290, 292, 293, 294, 296, 297, 301, 302, 303, 304, 315, 320, 321, 324, 325, 328, 331, 335, 336, 337, 338, 341, 348, 349, 350, 352, 354, 355, 358, 359, 360, 362, 365, 366, 367, 368, 369, 370, 371, 374, 377, 378, 379, 381, 382, 387, 388, 389, 390, 395, 396, 399, 401, 402, 403, 404, 405, 407, 416, 417, 419, 420, 422, 424, 425, 426, 427, 429, 430, 431, 432, 434, 435, 436, 438, 440, 441, 443, 445, 448, 449, 452, 454, 455, 457, 458, 459, 460, 463, 464, 465, 468, 475, 477, 478, 480, 482, 483, 486, 488, 489, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 502, 503, 506, 507, 514, 515, 544, 570, 584, 612, 617, 618], "valu": [6, 8, 13, 16, 17, 40, 41, 43, 51, 52, 58, 63, 64, 66, 85, 86, 98, 99, 101, 106, 111, 135, 137, 138, 142, 146, 148, 153, 154, 156, 159, 161, 165, 167, 170, 173, 174, 185, 188, 189, 196, 198, 199, 202, 203, 204, 225, 228, 229, 237, 240, 248, 252, 256, 265, 268, 271, 276, 279, 280, 282, 290, 294, 295, 302, 304, 305, 306, 310, 315, 318, 320, 322, 325, 326, 328, 329, 335, 348, 350, 352, 357, 359, 360, 362, 364, 367, 368, 373, 377, 378, 399, 401, 440, 472, 475, 476, 480, 482, 488, 490, 493, 498, 500, 501, 503, 514, 521, 567, 570, 578, 584, 585, 591, 607, 610, 612, 613, 618, 619, 621], "ar": [6, 8, 17, 58, 63, 64, 70, 98, 101, 118, 128, 155, 161, 162, 170, 185, 196, 199, 202, 212, 225, 240, 248, 249, 252, 256, 263, 271, 276, 279, 280, 281, 282, 285, 286, 287, 290, 294, 302, 307, 308, 309, 310, 312, 328, 334, 335, 419, 422, 424, 431, 475, 484, 490, 519, 520, 521, 522, 525, 544, 567, 569, 570, 572, 573, 574, 575, 576, 578, 579, 580, 581, 582, 583, 584, 585, 586, 588, 591, 593, 596, 599, 605, 607, 608, 609, 610, 613, 614, 615, 616, 617, 618, 619, 621], "weight": [6, 8, 17, 39, 40, 43, 56, 57, 58, 75, 106, 118, 135, 137, 144, 146, 153, 159, 161, 162, 163, 164, 242, 245, 255, 256, 265, 266, 268, 269, 275, 279, 281, 283, 293, 294, 298, 303, 304, 313, 318, 320, 322, 335, 395, 500, 525, 567, 573, 576, 578, 580, 584, 585, 607, 610, 612, 613, 617, 619, 621], "bool": [6, 8, 15, 16, 17, 41, 58, 59, 75, 98, 106, 111, 135, 142, 144, 147, 148, 161, 174, 185, 187, 196, 198, 199, 202, 225, 227, 237, 240, 242, 245, 250, 252, 256, 279, 286, 288, 290, 294, 305, 318, 320, 321, 331, 334, 335, 365, 399, 404, 407, 419, 422, 424, 425, 426, 427, 429, 430, 431, 432, 436, 438, 441, 459, 475, 476, 478, 483, 484, 490, 492, 493, 503, 509, 515, 570, 584, 612, 618], "save": [6, 8, 13, 16, 40, 41, 43, 101, 106, 136, 165, 187, 191, 196, 214, 227, 231, 236, 242, 244, 245, 262, 285, 296, 297, 298, 300, 302, 303, 304, 305, 306, 311, 318, 325, 326, 329, 331, 335, 521, 525, 569, 580, 585, 586, 587, 589, 593, 598, 602, 608, 610, 613], "disk": [6, 8, 43], "memori": [6, 8, 70, 247, 248, 271, 276, 284, 305, 306, 335, 569, 573, 585, 586, 588, 607, 610, 613, 619], "numpi": [6, 8, 13, 16, 40, 43, 63, 64, 66, 98, 99, 101, 106, 142, 202, 240, 246, 252, 256, 263, 290, 294, 577, 618], "arrai": [6, 8, 13, 16, 39, 40, 43, 99, 106, 135, 142, 196, 199, 202, 240, 252, 256, 263, 290, 294, 302, 304, 310, 335, 618], "node0_nam": [6, 8, 43], "weight0_nam": [6, 8, 13, 16, 43], "bias0_nam": [6, 8, 13, 16, 43], "node1_nam": [6, 8, 43], "weight1_nam": [6, 8, 43], "bias1_nam": [6, 8, 43], "0": [6, 8, 15, 16, 39, 40, 41, 42, 49, 86, 98, 101, 106, 135, 142, 144, 146, 150, 152, 156, 158, 161, 164, 170, 175, 177, 181, 184, 185, 188, 189, 192, 196, 198, 199, 202, 204, 205, 206, 215, 217, 221, 224, 225, 228, 229, 232, 237, 240, 242, 245, 247, 248, 256, 263, 271, 276, 279, 284, 286, 293, 294, 305, 306, 311, 320, 322, 475, 483, 521, 567, 570, 572, 574, 576, 577, 578, 579, 582, 583, 584, 585, 586, 591, 593, 598, 602, 609, 610, 612, 613, 615, 616, 617, 618, 619, 621], "output0_nam": [6, 8, 43], "output1_nam": [6, 8, 43], "set_tensor": [6, 8, 13, 16, 43, 525], "tensor_dict": [6, 8, 13, 16, 43, 525], "set": [6, 8, 13, 15, 16, 17, 40, 41, 42, 53, 63, 64, 92, 98, 99, 101, 106, 111, 135, 142, 148, 149, 151, 154, 161, 162, 165, 167, 170, 173, 174, 175, 177, 185, 187, 190, 196, 202, 203, 208, 209, 215, 217, 225, 227, 230, 240, 241, 245, 247, 248, 252, 257, 258, 259, 261, 271, 276, 280, 285, 286, 290, 295, 303, 305, 306, 318, 320, 321, 322, 325, 329, 335, 337, 377, 378, 379, 382, 399, 445, 449, 457, 478, 482, 488, 489, 491, 492, 493, 498, 502, 503, 507, 519, 522, 567, 568, 570, 574, 578, 580, 581, 582, 584, 585, 586, 588, 590, 592, 606, 610, 612, 613, 616, 619, 621], "back": [6, 8, 13, 16, 43, 118, 148, 202, 208, 240, 266, 318, 605], "usual": [6, 8, 13, 16, 185, 225, 248, 271, 276, 572, 608, 613], "note": [6, 8, 13, 16, 50, 161, 248, 252, 271, 276, 282, 290, 316, 371, 382, 386, 522, 567, 574, 576, 578, 582, 585, 590, 593, 598, 602, 605, 610, 613, 617, 619, 620, 621], "float": [6, 8, 13, 16, 40, 41, 43, 106, 135, 144, 161, 162, 163, 164, 165, 185, 196, 198, 199, 225, 237, 248, 249, 250, 252, 253, 254, 270, 271, 276, 279, 281, 282, 283, 287, 288, 290, 291, 292, 298, 303, 304, 305, 310, 338, 356, 365, 374, 375, 390, 396, 451, 459, 475, 476, 480, 482, 488, 490, 491, 498, 500, 501, 509, 544, 570, 584, 612, 613, 618], "ha": [6, 8, 13, 16, 40, 58, 59, 63, 64, 66, 70, 75, 76, 88, 98, 99, 100, 106, 118, 135, 161, 162, 203, 248, 249, 279, 281, 287, 520, 522, 525, 544, 567, 569, 576, 581, 585, 586, 591, 605, 612, 613, 614, 616, 619], "respons": [6, 8, 13, 16, 478, 482, 489, 502, 506, 507, 511, 513, 515, 516, 613], "int8": [6, 7, 8, 13, 16, 19, 20, 40, 41, 42, 43, 44, 45, 83, 107, 119, 120, 121, 127, 129, 130, 131, 132, 137, 142, 144, 153, 154, 170, 198, 237, 242, 243, 244, 245, 303, 311, 320, 322, 324, 334, 390, 521, 525, 567, 568, 570, 573, 578, 585, 590, 593, 595, 596, 599, 605, 612, 613, 614, 615, 616, 617, 618, 621], "int32": [6, 8, 13, 16, 106, 242, 245, 570], "format": [6, 8, 13, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 43, 49, 63, 64, 99, 142, 185, 186, 187, 191, 196, 225, 226, 227, 231, 236, 242, 245, 248, 252, 258, 262, 290, 315, 320, 322, 441, 480, 498, 570, 574, 576, 584, 585, 586, 587, 588, 613], "someth": [6, 8, 13, 16, 173, 174, 187, 227, 306, 325], "like": [6, 8, 13, 16, 70, 75, 92, 94, 106, 135, 142, 161, 173, 174, 175, 187, 191, 196, 215, 227, 231, 236, 247, 248, 256, 281, 284, 285, 293, 294, 303, 306, 325, 520, 521, 522, 525, 567, 572, 573, 581, 593, 608, 610, 613, 615, 619], "quantize_input": [6, 8, 39, 43], "abl": [6, 8, 43, 77, 173, 174, 201, 239, 295, 306, 325, 596, 605, 610, 613], "take": [6, 8, 43, 98, 161, 173, 174, 178, 196, 199, 202, 206, 207, 218, 240, 279, 293, 294, 295, 306, 310, 325, 519, 521, 522, 567, 569, 572, 578, 585, 605, 610, 613, 614, 618, 619, 621], "input": [6, 8, 15, 16, 17, 39, 40, 41, 43, 49, 56, 58, 59, 60, 63, 64, 66, 67, 68, 70, 75, 76, 78, 79, 81, 82, 98, 99, 101, 105, 106, 111, 112, 118, 128, 135, 136, 138, 142, 143, 144, 146, 147, 148, 152, 155, 156, 161, 162, 170, 173, 174, 185, 186, 187, 189, 191, 196, 198, 199, 201, 202, 204, 206, 207, 212, 225, 226, 227, 229, 237, 239, 240, 241, 242, 243, 244, 245, 247, 248, 252, 257, 271, 276, 285, 286, 290, 293, 294, 295, 298, 299, 301, 302, 303, 304, 306, 325, 334, 335, 337, 348, 371, 376, 377, 379, 382, 383, 384, 385, 386, 419, 422, 429, 430, 431, 433, 445, 449, 454, 457, 463, 488, 491, 497, 522, 525, 567, 568, 569, 570, 572, 573, 574, 576, 578, 580, 584, 585, 587, 588, 593, 610, 612, 613, 617, 618, 621], "scale": [6, 8, 16, 17, 39, 40, 41, 43, 58, 63, 96, 137, 146, 152, 153, 196, 198, 199, 202, 237, 240, 245, 302, 576, 613, 616, 618, 619], "type": [6, 8, 13, 15, 16, 17, 40, 41, 42, 43, 53, 56, 57, 58, 59, 64, 66, 70, 75, 81, 87, 88, 89, 90, 92, 98, 99, 101, 106, 109, 111, 112, 118, 128, 135, 142, 143, 144, 146, 148, 149, 151, 156, 161, 162, 163, 164, 165, 167, 170, 174, 175, 183, 185, 187, 191, 194, 195, 196, 199, 202, 204, 209, 215, 223, 225, 227, 231, 234, 235, 236, 238, 240, 242, 245, 246, 248, 249, 250, 252, 255, 256, 258, 263, 270, 272, 273, 274, 279, 281, 283, 285, 287, 288, 290, 293, 294, 296, 297, 298, 302, 303, 304, 305, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 331, 334, 348, 353, 367, 368, 377, 378, 380, 382, 420, 475, 478, 480, 482, 485, 486, 520, 525, 544, 567, 570, 574, 578, 581, 585, 586, 606, 613, 616, 618, 619, 621], "path": [6, 8, 13, 16, 41, 43, 101, 106, 135, 136, 142, 165, 166, 185, 186, 187, 191, 196, 199, 202, 225, 226, 227, 240, 241, 242, 244, 245, 247, 248, 258, 259, 260, 261, 262, 271, 276, 280, 282, 284, 285, 295, 302, 303, 304, 306, 320, 322, 325, 331, 335, 336, 341, 355, 358, 365, 366, 369, 376, 377, 382, 384, 385, 399, 405, 416, 419, 422, 424, 425, 427, 429, 430, 431, 432, 436, 443, 448, 452, 455, 458, 459, 465, 475, 483, 488, 490, 491, 500, 515, 521, 522, 525, 567, 569, 570, 574, 580, 584, 585, 586, 587, 591, 594, 605, 608, 618, 621], "where": [6, 8, 13, 17, 40, 63, 118, 161, 252, 256, 262, 264, 279, 290, 293, 294, 572, 598, 602, 606, 610, 617], "convert": [6, 8, 15, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 48, 49, 50, 51, 52, 62, 70, 77, 82, 93, 95, 96, 98, 99, 100, 101, 127, 132, 136, 143, 148, 185, 196, 198, 199, 201, 202, 225, 237, 239, 240, 242, 244, 248, 252, 256, 258, 262, 264, 280, 290, 294, 296, 297, 308, 322, 325, 357, 364, 373, 468, 480, 521, 528, 585, 586, 590, 613, 614, 618], "sourc": [6, 8, 17, 43, 206, 248, 250, 258, 286, 288, 328, 403, 517, 521, 524, 583, 585, 598, 600, 602, 603, 605, 611], "destinatin": [6, 8], "anoth": [6, 8, 43, 98, 105, 106, 196, 199, 202, 240, 248, 249, 258, 287, 325, 335, 544, 572, 586, 598, 602, 618, 619], "destin": [6, 8, 17, 43, 242, 243, 248, 258], "mxnet_util": 7, "util": [7, 14, 18, 98, 101, 106, 107, 135, 136, 143, 144, 145, 147, 158, 160, 211, 242, 248, 250, 280, 286, 288, 314, 316, 340, 341, 342, 344, 346, 347, 350, 355, 366, 369, 372, 376, 377, 382, 384, 385, 387, 395, 396, 401, 403, 404, 407, 411, 417, 418, 426, 428, 452, 458, 462, 467, 471, 504, 526, 574, 585, 588, 613, 619, 620], "ox_util": 7, "oper": [7, 18, 40, 98, 100, 106, 142, 161, 196, 198, 199, 237, 279, 311, 502, 506, 521, 567, 568, 569, 576, 605, 613, 618, 619], "argmax": [7, 18, 30], "attent": [7, 18, 30, 185, 225, 519, 572], "binary_op": [7, 18, 30], "concat": [7, 18, 30, 141, 475], "direct_q8": [7, 18, 30], "embed_layernorm": [7, 18, 30], "gather": [7, 15, 17, 18, 30, 161, 279, 478], "gavgpool": [7, 18, 30], "gemm": [7, 18, 30, 610], "lstm": [7, 18, 30], "matmul": [7, 16, 17, 18, 30, 42, 48, 55, 61, 69, 75, 81, 90, 105, 106, 124, 133, 161, 245, 279, 576, 578], "maxpool": [7, 18, 30, 125, 134, 578], "pad": [7, 18, 30, 67, 68, 185, 196, 199, 202, 225, 240, 570, 618], "pool": [7, 18, 30, 134], "resiz": [7, 18, 30, 185, 186, 191, 196, 198, 199, 202, 225, 226, 237, 240, 569, 570, 618], "split": [7, 18, 30, 40, 75, 78, 135, 196, 199, 201, 202, 239, 240, 521, 618], "tf_util": 7, "graph_rewrit": [7, 107], "bf16": [7, 42, 43, 44, 45, 53, 77, 83, 87, 89, 107, 143, 170, 286, 309, 311, 320, 322, 335, 525, 528, 578, 585, 586, 590, 595, 599, 605, 614, 619], "onnx": [7, 16, 17, 30, 39, 40, 83, 107, 136, 152, 181, 221, 242, 243, 244, 245, 246, 295, 296, 297, 302, 303, 304, 325, 333, 338, 441, 524, 525, 526, 569, 575, 576, 578, 579, 581, 587, 590, 595, 596, 611, 612, 619], "qdq": [7, 19, 21, 22, 23, 24, 26, 28, 29, 32, 34, 36, 38, 39, 44, 83, 107, 108, 109, 136, 148, 170, 242, 243, 244, 245, 302, 525, 576, 581, 595, 596, 613], "graph_bas": [7, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 65, 67, 68, 69, 70, 71, 73, 74, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 103, 104, 105, 107], "quantize_graph": [7, 107], "qat": [7, 41, 107, 108, 147, 170, 245, 248, 258, 286, 303, 573, 574, 576, 581, 585, 613], "quantize_graph_bas": [7, 107, 108, 119, 120, 121, 122, 123, 124, 125, 127, 129, 130, 131, 132, 133, 134], "quantize_graph_bn": [7, 107, 108], "quantize_graph_concatv2": [7, 107, 108], "quantize_graph_conv": [7, 107, 108], "quantize_graph_for_intel_cpu": [7, 107, 108], "quantize_graph_matmul": [7, 107, 108], "quantize_graph_pool": [7, 107, 108], "transform_graph": [7, 107], "bias_correct": [7, 107, 139], "graph_transform_bas": [7, 107, 137, 139, 140, 141], "insert_log": [7, 107, 139], "rerange_quantized_concat": [7, 107, 139], "graph_convert": [7, 107], "graph_converter_without_calib": [7, 107], "graph_util": [7, 107], "quantize_graph_common": [7, 107], "tf2onnx_convert": [7, 107], "torch_util": [7, 206, 248, 286], "bf16_convert": [7, 44, 45, 47, 83, 107, 145], "hawq_metr": [7, 145], "symbolic_trac": [7, 145], "tensorflow": [7, 47, 49, 71, 72, 73, 77, 83, 91, 97, 98, 99, 100, 101, 102, 106, 107, 108, 110, 113, 118, 126, 136, 139, 142, 184, 185, 186, 187, 190, 191, 192, 194, 195, 196, 199, 202, 204, 209, 224, 225, 226, 227, 230, 231, 232, 234, 235, 236, 238, 240, 242, 244, 245, 246, 247, 248, 250, 252, 255, 256, 257, 258, 284, 288, 290, 293, 294, 295, 303, 306, 316, 335, 397, 398, 410, 411, 418, 467, 468, 469, 471, 522, 524, 525, 567, 569, 572, 573, 575, 576, 578, 579, 581, 582, 585, 587, 595, 596, 611, 612, 616, 619, 621], "kerasadaptor": 8, "specifi": [8, 13, 16, 17, 41, 42, 43, 75, 98, 106, 135, 154, 173, 174, 202, 203, 240, 247, 248, 252, 255, 256, 259, 261, 262, 265, 271, 276, 284, 285, 290, 293, 294, 295, 306, 320, 322, 325, 334, 335, 352, 355, 358, 365, 366, 367, 369, 370, 371, 376, 377, 379, 380, 382, 384, 385, 389, 390, 391, 404, 436, 440, 441, 442, 461, 466, 482, 486, 490, 503, 507, 567, 574, 578, 584, 585, 593, 607, 612, 613, 618, 619, 621], "function": [8, 13, 16, 39, 43, 58, 98, 106, 135, 146, 173, 174, 186, 212, 226, 247, 248, 259, 261, 262, 271, 276, 282, 285, 302, 326, 521, 522, 525, 567, 568, 569, 572, 573, 580, 581, 582, 584, 585, 586, 596, 606, 610, 613, 616, 617, 619, 620], "fp32_baselin": [8, 13, 16, 41, 43, 328, 525], "boolen": [8, 16, 41, 43], "onli": [8, 13, 16, 17, 40, 41, 43, 44, 45, 49, 58, 59, 63, 64, 66, 70, 82, 98, 105, 111, 130, 134, 137, 146, 152, 153, 154, 161, 162, 185, 203, 205, 206, 209, 225, 248, 258, 265, 279, 281, 302, 312, 316, 317, 318, 490, 500, 502, 503, 525, 568, 569, 574, 576, 578, 585, 586, 593, 606, 610, 612, 617, 619, 621], "compare_label": [8, 13, 16, 41, 43, 256, 294, 584], "pipelin": [8, 13, 16, 41, 43, 155, 158, 241, 248, 259, 260, 261, 282, 285, 573, 585, 608], "get_optype_wise_": [8, 43], "quantizable_op_detail": 8, "get": [8, 15, 16, 17, 40, 41, 42, 43, 63, 64, 66, 75, 98, 99, 100, 101, 106, 111, 118, 119, 120, 121, 122, 123, 124, 125, 127, 129, 131, 133, 135, 138, 142, 144, 148, 149, 151, 154, 155, 158, 159, 161, 162, 163, 164, 167, 170, 173, 175, 178, 196, 199, 202, 203, 209, 211, 212, 215, 218, 236, 238, 240, 245, 246, 247, 248, 257, 264, 271, 276, 279, 281, 283, 284, 285, 286, 295, 298, 302, 303, 304, 305, 306, 310, 315, 320, 322, 324, 325, 328, 330, 332, 335, 336, 341, 348, 349, 350, 352, 355, 358, 359, 360, 362, 365, 366, 367, 368, 369, 370, 371, 376, 377, 379, 381, 382, 383, 384, 385, 386, 389, 390, 391, 394, 398, 399, 404, 416, 419, 420, 422, 424, 425, 429, 430, 431, 433, 436, 438, 440, 441, 442, 443, 448, 452, 455, 458, 459, 461, 465, 466, 468, 470, 477, 478, 482, 486, 488, 490, 491, 493, 497, 500, 502, 503, 506, 507, 511, 513, 514, 515, 516, 567, 577, 581, 582, 585, 591, 619, 620, 623], "wise": [8, 17, 43, 137, 153, 161, 279, 309, 310, 311, 315, 320, 321, 379, 382, 490, 567, 581, 610, 617, 619, 621], "union": [8, 43, 256, 294, 325, 480, 584], "each": [8, 16, 17, 40, 41, 42, 43, 82, 106, 111, 138, 144, 161, 162, 183, 187, 190, 196, 198, 199, 202, 223, 227, 230, 237, 240, 250, 252, 253, 254, 281, 288, 290, 291, 292, 298, 302, 303, 304, 305, 309, 315, 520, 525, 567, 570, 572, 573, 578, 585, 586, 590, 596, 599, 605, 607, 610, 616, 617, 618, 619, 620], "kei": [8, 40, 41, 43, 106, 111, 135, 138, 142, 144, 161, 165, 167, 248, 252, 263, 271, 276, 280, 282, 290, 302, 303, 310, 318, 326, 328, 329, 335, 482, 498, 524, 567, 576, 617], "while": [8, 43, 99, 138, 162, 281, 310, 525, 567, 570, 575, 579, 581, 586, 588, 593, 605, 612, 613], "detail": [8, 43, 146, 152, 196, 199, 202, 240, 355, 358, 365, 366, 369, 371, 372, 374, 376, 377, 379, 382, 383, 384, 385, 386, 390, 395, 458, 463, 477, 490, 519, 520, 524, 578, 579, 580, 584, 585, 586, 588, 596, 605, 610, 615, 616, 617, 619, 620, 622], "mxnetadaptor": 13, "specif": [13, 16, 42, 98, 100, 111, 112, 154, 165, 185, 186, 187, 188, 191, 192, 194, 195, 196, 203, 209, 225, 226, 227, 228, 232, 234, 235, 236, 248, 249, 252, 258, 259, 261, 262, 265, 266, 268, 269, 270, 286, 287, 290, 304, 331, 366, 377, 378, 379, 382, 390, 405, 519, 522, 525, 567, 572, 578, 580, 584, 585, 586, 587, 588, 592, 593, 595, 599, 605, 607, 610, 612, 619, 621], "nc_model": [13, 15, 271, 276, 325], "config": [13, 15, 16, 17, 41, 42, 43, 109, 111, 112, 114, 118, 148, 154, 158, 159, 161, 162, 163, 164, 165, 173, 174, 185, 203, 212, 213, 214, 225, 247, 248, 262, 265, 266, 268, 269, 270, 271, 276, 279, 280, 281, 282, 283, 286, 295, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 320, 322, 323, 325, 328, 329, 334, 335, 336, 337, 340, 341, 342, 344, 346, 347, 350, 376, 382, 384, 385, 389, 390, 434, 436, 443, 445, 448, 449, 452, 454, 455, 457, 458, 465, 468, 471, 479, 490, 493, 494, 495, 496, 498, 500, 501, 503, 511, 513, 516, 522, 524, 535, 567, 568, 572, 573, 574, 576, 579, 581, 585, 586, 587, 608, 610, 612, 613, 614, 616, 617, 619], "unimpl": [13, 16], "yet": [13, 16, 43, 161, 522, 567, 600, 603, 606], "mxnetmodel": [13, 300], "data_x": [13, 15], "loader": [13, 15, 173, 174, 285, 295, 306, 325, 331], "acc": [13, 16, 256, 294, 305, 522, 617, 622], "level": [13, 170, 286, 311, 318, 329, 332, 481, 503, 519, 619], "modelwis": 13, "opwis": 13, "save_path": [13, 16, 43, 136, 142, 242, 244, 245, 296, 297, 302, 303, 304, 325, 525, 587], "quantization_cfg": [13, 16, 43, 525], "includ": [13, 44, 45, 156, 159, 161, 163, 164, 185, 187, 191, 194, 195, 196, 199, 202, 204, 225, 227, 231, 234, 235, 236, 238, 240, 247, 248, 252, 257, 279, 283, 284, 290, 295, 306, 312, 318, 320, 323, 519, 520, 525, 567, 570, 582, 583, 584, 585, 586, 588, 591, 594, 599, 610, 613, 614, 617, 619], "recover_tuned_model": [13, 43], "q_config": [13, 16, 17, 39, 42, 43, 242, 245, 298, 302, 303, 525], "recov": [13, 16, 43, 146, 335, 525, 573], "mxnet": [14, 15, 180, 184, 187, 190, 191, 194, 195, 196, 199, 202, 220, 224, 227, 230, 231, 234, 235, 236, 238, 240, 247, 248, 255, 256, 284, 293, 294, 295, 300, 306, 524, 525, 569, 575, 578, 581, 582, 585, 586, 587, 612, 619, 621], "init": [14, 18, 151, 156, 157, 160, 204, 318, 570, 584], "optyp": [15, 243], "enum": [15, 40, 335, 440, 472], "isiter": 15, "obj": [15, 101, 154, 165, 184, 214, 224, 241, 247, 248, 258, 259, 260, 261, 262, 271, 276, 280, 284, 285, 286, 295, 305, 306, 325, 328, 335], "check": [15, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 58, 59, 63, 64, 75, 98, 99, 100, 101, 106, 111, 118, 142, 148, 161, 162, 165, 170, 174, 187, 227, 243, 248, 258, 280, 285, 302, 305, 310, 318, 334, 335, 377, 382, 419, 422, 424, 425, 427, 429, 430, 431, 432, 438, 441, 459, 475, 476, 478, 483, 490, 492, 520, 524, 567, 574, 582, 589, 591, 593, 600, 603, 604, 615], "whether": [15, 16, 17, 41, 43, 98, 99, 101, 111, 112, 142, 161, 175, 183, 185, 196, 198, 199, 202, 215, 223, 225, 237, 240, 241, 248, 250, 252, 256, 271, 276, 279, 281, 288, 290, 294, 305, 318, 328, 331, 334, 335, 441, 525, 570, 584, 618], "true": [15, 16, 17, 39, 41, 43, 58, 59, 75, 81, 98, 99, 106, 109, 111, 140, 142, 144, 154, 161, 170, 174, 175, 183, 185, 187, 188, 196, 199, 201, 202, 203, 215, 223, 225, 227, 228, 239, 240, 242, 245, 250, 252, 256, 265, 274, 279, 288, 290, 294, 305, 318, 320, 321, 328, 334, 436, 475, 478, 483, 484, 490, 570, 574, 578, 584, 585, 588, 591, 592, 612, 613, 617, 618, 619, 621], "els": [15, 58, 59, 142, 183, 223, 305, 311, 318, 475, 490, 593, 617], "ensure_list": 15, "x": [15, 50, 63, 64, 66, 70, 143, 184, 196, 199, 202, 224, 240, 310, 574, 576, 586, 587, 610, 613, 617, 618, 620], "ensur": [15, 17, 196, 199, 202, 240, 282, 310, 354, 387, 419, 422, 424, 431, 473, 567, 574, 576, 613, 618], "check_mx_vers": 15, "version": [15, 39, 42, 43, 49, 100, 148, 173, 242, 244, 245, 286, 310, 331, 438, 473, 478, 490, 519, 521, 525, 567, 578, 582, 583, 585, 598, 600, 602, 603, 609, 611, 619, 620], "mx": 15, "__version__": 15, "combine_cap": 15, "current": [15, 39, 40, 42, 43, 58, 63, 64, 66, 70, 98, 100, 106, 111, 146, 159, 161, 162, 164, 248, 258, 265, 266, 268, 269, 270, 271, 276, 279, 281, 282, 283, 302, 310, 312, 315, 316, 318, 521, 522, 525, 567, 574, 578, 582, 584, 585, 588, 592, 605, 607, 610, 613, 619], "new": [15, 52, 98, 99, 103, 106, 128, 142, 154, 161, 164, 175, 187, 196, 199, 202, 203, 215, 227, 236, 238, 240, 279, 280, 283, 285, 305, 318, 321, 381, 382, 386, 502, 520, 574, 585, 586, 599, 605, 606, 610, 611, 613, 615, 616, 618, 620, 621], "combin": [15, 42, 148, 170, 173, 174, 196, 198, 199, 212, 237, 248, 285, 286, 295, 306, 325, 335, 521, 525, 581, 585, 608, 611, 614, 618, 619], "make_nc_model": 15, "target": [15, 40, 41, 85, 86, 98, 106, 135, 156, 161, 164, 165, 173, 204, 268, 270, 280, 283, 305, 308, 310, 403, 404, 570, 574, 585, 610, 617, 618, 619, 621], "sym_model": 15, "ctx": [15, 136], "input_desc": 15, "symbol": [15, 143, 147, 148, 249, 287, 295, 306, 521, 528, 587], "neural": [15, 41, 144, 154, 155, 161, 170, 196, 197, 198, 199, 202, 203, 206, 209, 212, 237, 238, 240, 242, 248, 255, 256, 258, 271, 276, 279, 282, 284, 285, 286, 293, 294, 295, 297, 299, 306, 313, 314, 320, 325, 331, 394, 398, 422, 431, 470, 477, 490, 517, 520, 525, 553, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 583, 584, 586, 587, 589, 590, 593, 595, 596, 598, 600, 602, 603, 604, 607, 608, 611, 613, 615, 617, 618, 619, 620, 621], "compressor": [15, 41, 154, 155, 161, 170, 196, 197, 198, 199, 202, 203, 206, 209, 212, 237, 238, 240, 242, 248, 255, 256, 258, 279, 282, 284, 285, 286, 293, 294, 295, 297, 299, 306, 314, 320, 325, 331, 394, 398, 422, 431, 470, 477, 490, 517, 520, 522, 525, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 583, 584, 586, 587, 588, 589, 593, 595, 596, 598, 600, 602, 603, 604, 607, 608, 610, 611, 613, 615, 617, 618, 619, 620, 621], "tupl": [15, 41, 43, 101, 106, 118, 148, 156, 161, 173, 174, 196, 198, 199, 202, 204, 237, 240, 242, 245, 252, 290, 295, 305, 306, 315, 320, 321, 322, 325, 405, 436, 490, 509, 570, 584, 585, 618], "symnet": 15, "arg": [15, 41, 49, 101, 185, 186, 187, 191, 196, 225, 226, 227, 247, 248, 258, 276, 279, 284, 285, 296, 297, 298, 301, 304, 310, 329, 331, 332, 340, 342, 344, 345, 346, 347, 357, 359, 360, 362, 364, 367, 368, 373, 475, 483, 503, 569, 570, 574, 585, 594, 613, 617, 618], "aux": 15, "descript": [15, 106, 128, 135, 245, 246, 252, 262, 290, 520, 521], "ncmodel": 15, "suppli": 15, "get_framework_nam": [15, 419, 422, 424, 431], "prepare_model_data": 15, "prepar": [15, 41, 148, 212, 241, 248, 271, 276, 282, 284, 377, 382, 470, 521, 524, 570, 574, 579, 613], "dataloaderwrap": 15, "prepare_model": 15, "create_data_exampl": 15, "exampl": [15, 41, 111, 144, 148, 154, 158, 170, 185, 186, 187, 191, 196, 198, 201, 202, 225, 226, 227, 237, 239, 240, 252, 253, 254, 256, 282, 286, 290, 291, 292, 294, 295, 305, 306, 325, 363, 381, 387, 411, 435, 436, 437, 438, 483, 490, 519, 520, 524, 567, 580, 581, 588, 591, 592, 593, 596, 614, 615, 618, 619, 620, 623], "prepare_dataload": 15, "io": [15, 524], "ndarray_to_devic": 15, "ndarrai": [15, 63, 64, 66, 98, 99, 106, 202, 240, 304, 310, 326, 329, 577, 618], "devic": [15, 75, 85, 86, 87, 88, 89, 90, 93, 103, 106, 127, 132, 135, 141, 144, 156, 170, 204, 286, 572, 585, 586, 588, 591, 596, 605, 610, 612], "is_model_quant": 15, "query_quantizable_nod": 15, "node": [15, 17, 23, 25, 34, 38, 39, 40, 43, 44, 45, 46, 49, 50, 51, 52, 56, 58, 59, 60, 63, 64, 66, 70, 73, 75, 76, 78, 79, 80, 94, 98, 99, 101, 105, 106, 128, 135, 136, 138, 142, 242, 243, 245, 296, 297, 298, 302, 303, 318, 388, 401, 402, 403, 404, 405, 406, 411, 419, 422, 429, 430, 431, 468, 469, 471, 525, 567, 574, 617, 619], "map": [15, 40, 43, 98, 101, 128, 138, 144, 161, 163, 202, 240, 242, 243, 245, 247, 248, 251, 252, 253, 254, 256, 271, 276, 279, 281, 284, 289, 290, 291, 292, 293, 294, 306, 440, 570, 574, 584, 585, 598, 602, 610, 613], "quantize_sym_model": 15, "qconfig": [15, 617], "accord": [15, 43, 98, 118, 154, 161, 164, 170, 173, 185, 186, 187, 191, 196, 199, 202, 225, 226, 227, 236, 238, 240, 248, 265, 268, 269, 270, 283, 284, 304, 308, 309, 310, 311, 313, 315, 318, 320, 322, 328, 489, 522, 525, 570, 574, 610, 614, 618, 619], "run_forward": 15, "b_filter": 15, "collector": [15, 144, 326, 329], "pre_batch": 15, "post_batch": 15, "forward": [15, 143, 156, 204, 304, 524, 585, 610, 612, 613, 617], "propag": [15, 96, 118, 266], "filter": [15, 185, 186, 187, 188, 189, 190, 191, 192, 196, 225, 226, 227, 228, 229, 230, 232, 236, 248, 286, 335, 358, 399, 422, 492, 569, 570, 581, 610, 617], "which": [15, 41, 43, 51, 63, 64, 76, 79, 105, 106, 111, 135, 144, 146, 159, 161, 162, 164, 173, 185, 186, 187, 191, 196, 198, 199, 203, 225, 226, 227, 237, 248, 249, 252, 254, 262, 263, 265, 266, 268, 269, 270, 271, 272, 273, 274, 279, 280, 281, 282, 283, 287, 290, 292, 299, 302, 305, 308, 310, 318, 331, 335, 488, 519, 521, 522, 525, 544, 567, 569, 570, 572, 574, 577, 578, 581, 584, 585, 586, 587, 589, 593, 596, 599, 605, 606, 608, 610, 612, 613, 614, 615, 617, 618, 619, 620, 621], "infer": [15, 17, 63, 64, 98, 101, 128, 135, 247, 248, 284, 303, 305, 306, 325, 524, 525, 572, 573, 585, 586, 605, 607, 610, 611, 613, 617, 619], "collect": [15, 40, 43, 196, 199, 200, 202, 205, 206, 207, 208, 210, 236, 238, 240, 249, 254, 255, 256, 287, 292, 293, 294, 320, 321, 322, 324, 326, 329, 335, 336, 441, 465, 476, 478, 490, 491, 576, 613, 617, 619], "inform": [15, 17, 40, 43, 99, 109, 144, 159, 161, 162, 163, 164, 165, 173, 174, 205, 206, 207, 208, 252, 279, 281, 282, 283, 285, 290, 293, 294, 302, 318, 352, 390, 419, 477, 478, 483, 484, 519, 520, 523, 524, 525, 526, 528, 533, 534, 535, 542, 546, 553, 561, 562, 563, 564, 566, 572, 576, 578, 585, 587, 600, 603, 606, 610, 614, 615, 617, 621, 622, 623], "dure": [15, 43, 58, 63, 64, 98, 118, 161, 164, 279, 283, 285, 305, 484, 585, 586, 587, 607, 608, 610, 613, 617, 621], "prior": [15, 84, 310, 619], "after": [15, 17, 40, 41, 53, 74, 148, 155, 158, 159, 161, 162, 163, 164, 185, 196, 198, 199, 202, 205, 206, 212, 225, 237, 240, 241, 242, 245, 248, 279, 281, 282, 283, 311, 325, 476, 522, 567, 569, 570, 572, 573, 576, 581, 584, 585, 598, 599, 602, 606, 607, 608, 610, 613, 614, 616, 617, 618, 619], "count": [15, 161, 262, 522, 570], "make_symbol_block": 15, "gluon": [15, 295, 306, 587], "symbolblock": 15, "make_modul": 15, "parse_tune_config": 15, "quantizable_nod": 15, "distribute_calib_tensor": 15, "calib_tensor": 15, "calib_cfg": 15, "tensor_to_nod": 15, "distribut": [15, 137, 153, 175, 177, 178, 181, 183, 184, 196, 205, 206, 215, 217, 218, 221, 223, 224, 241, 248, 271, 276, 284, 310, 318, 330, 478, 524, 572, 582, 600, 603, 611, 613, 615, 620, 622], "algorithm": [15, 148, 166, 201, 239, 249, 256, 259, 261, 262, 264, 286, 287, 294, 310, 320, 322, 328, 330, 522, 525, 544, 572, 573, 578, 581, 594, 599, 610, 613, 617, 621], "kl": [15, 326, 329, 330, 578, 585, 619, 621], "minmax": [15, 578, 621], "calib_model": 15, "qsym_model": 15, "calib_data": 15, "calibdata": 15, "threshold": [15, 17, 150, 161, 252, 279, 290, 326, 329, 330, 584], "amp_convert": 15, "amp_cfg": 15, "support": [15, 40, 41, 42, 43, 70, 77, 93, 100, 146, 152, 154, 155, 156, 158, 161, 162, 170, 173, 174, 175, 184, 185, 187, 191, 194, 195, 196, 198, 199, 202, 203, 204, 205, 206, 209, 212, 213, 214, 215, 224, 225, 227, 231, 234, 235, 236, 237, 238, 240, 248, 255, 256, 258, 263, 271, 272, 273, 274, 276, 279, 281, 285, 286, 293, 294, 295, 299, 305, 306, 316, 320, 322, 325, 328, 330, 352, 419, 422, 424, 425, 427, 429, 430, 431, 432, 438, 472, 480, 490, 517, 524, 567, 585, 588, 593, 596, 599, 605, 611, 614, 616, 619, 620], "amp": [15, 588, 595, 609], "wrap": [15, 101, 112, 118, 156, 204, 252, 290, 348, 521, 574, 600, 603], "dataiterload": 15, "data_it": 15, "collectorbas": 15, "collect_gluon": 15, "_": [15, 173, 174, 306, 521, 522, 525, 567, 572, 574, 578, 584, 585, 586, 587, 588, 594, 598, 600, 602, 603, 607, 610, 613, 615, 616, 617, 619, 621], "arr": [15, 40, 335], "api": [15, 16, 41, 43, 66, 71, 103, 106, 118, 128, 213, 247, 248, 252, 282, 284, 290, 306, 320, 321, 322, 335, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 506, 507, 520, 521, 526, 528, 533, 542, 546, 561, 562, 563, 564, 566, 576, 581, 585, 590, 594, 595, 596, 615, 616, 619, 620, 623], "collect_modul": 15, "m": [15, 40, 66, 144, 161, 279, 572, 582, 588, 590, 593, 596, 600, 603, 622], "b": [15, 40, 66, 70, 185, 225, 245, 570, 584, 610, 619], "o": [15, 66, 399, 582, 590, 609], "calibcollector": 15, "include_tensors_kl": 15, "include_tensors_minmax": 15, "num_bin": [15, 326, 329, 330], "8001": [15, 326, 329], "calc_kl_th_dict": 15, "quantized_dtyp": 15, "calcul": [15, 17, 40, 41, 43, 56, 144, 156, 159, 161, 163, 165, 174, 188, 189, 204, 228, 229, 248, 253, 254, 271, 275, 276, 279, 281, 282, 291, 292, 305, 315, 326, 329, 390, 482, 488, 570, 584, 585, 596, 607, 610, 613, 616, 619, 621], "tensorcollector": 15, "include_nod": 15, "qtensor_to_tensor": 15, "build": [15, 111, 118, 128, 149, 150, 151, 152, 153, 245, 246, 259, 261, 262, 298, 300, 302, 303, 304, 355, 356, 358, 369, 370, 372, 375, 399, 459, 468, 490, 507, 525, 567, 582, 587, 598, 600, 602, 603, 606, 611, 616, 619], "up": [15, 63, 64, 66, 96, 196, 199, 202, 240, 248, 271, 276, 280, 305, 376, 567, 574, 575, 578, 579, 581, 596, 600, 603, 605, 611, 612, 613, 616, 618, 619, 621], "preprocess": [15, 185, 196, 199, 202, 225, 236, 238, 240, 241, 248, 328, 574, 618], "namecollector": 15, "cache_kl": 15, "cache_minmax": 15, "tensors_kl": 15, "tensors_minmax": 15, "properti": [15, 98, 99, 100, 106, 118, 149, 151, 154, 155, 156, 158, 170, 175, 177, 185, 187, 196, 203, 204, 212, 215, 217, 225, 227, 241, 247, 248, 255, 256, 257, 258, 262, 271, 276, 284, 285, 286, 293, 294, 295, 296, 297, 298, 300, 302, 303, 304, 305, 306, 310, 318, 320, 322, 325, 335, 336, 354, 387, 394, 398, 403, 404, 407, 419, 422, 427, 431, 440, 443, 448, 452, 455, 458, 465, 475, 482, 483, 484, 488, 493, 497, 500, 502, 503, 583, 609], "min_max_dict": 15, "mix": [15, 43, 44, 45, 143, 295, 308, 322, 447, 448, 449, 496, 524, 525, 535, 581, 588, 594, 595, 596, 620], "max": [15, 16, 17, 40, 43, 100, 106, 137, 153, 170, 196, 199, 202, 240, 253, 254, 286, 291, 292, 310, 335, 500, 524, 567, 582, 585, 610, 613, 618, 619], "post_collect": 15, "2": [15, 40, 42, 43, 44, 49, 70, 75, 101, 105, 146, 150, 152, 154, 161, 162, 186, 203, 226, 252, 254, 256, 274, 275, 281, 290, 292, 293, 294, 305, 308, 310, 521, 525, 570, 572, 578, 579, 581, 582, 583, 584, 586, 607, 609, 610, 613, 615, 616, 618, 619, 620], "onnxruntimeadaptor": 16, "rt": 16, "smooth_quant": [16, 41, 151, 286], "alpha": [16, 40, 41, 146, 152, 159, 163, 318], "5": [16, 41, 75, 146, 152, 156, 170, 189, 198, 204, 229, 237, 252, 256, 290, 293, 294, 311, 525, 567, 570, 578, 584, 585, 609, 610, 612, 618, 619, 621, 622], "percentil": [16, 17, 41, 146], "99": [16, 146, 622], "999": [16, 146, 621, 622], "op_typ": [16, 17, 34, 41, 98, 146, 302, 311, 315, 318, 320, 322, 323], "linear": [16, 40, 146, 152, 158, 161, 170, 242, 245, 279, 286, 521, 572, 576, 585, 610], "scales_per_op": [16, 41, 146], "augment": [16, 17], "smooth": [16, 17, 40, 41, 146, 152, 318, 321, 610], "quant": [16, 41, 43, 146, 148, 318, 320, 322, 521, 585, 613], "model_wrapp": [16, 17], "origin_model": [16, 149, 151], "smoothquant": [16, 41, 146, 152, 524, 620], "fallback": [16, 41, 43, 148, 308, 309, 312, 313, 315, 316, 586, 614, 619], "spiq": [16, 41, 146, 152], "remov": [16, 17, 19, 39, 40, 41, 43, 52, 53, 56, 58, 70, 75, 76, 79, 80, 81, 92, 94, 98, 106, 111, 128, 135, 144, 155, 156, 204, 245, 254, 292, 302, 304, 320, 322, 355, 358, 365, 366, 369, 371, 372, 374, 376, 422, 483, 484, 491, 519, 520, 585, 598, 602, 610, 617], "outlier": [16, 17, 41], "whose": [16, 17, 40, 41, 56, 81, 146, 152, 161, 280, 580, 610, 619], "have": [16, 40, 41, 70, 79, 98, 99, 106, 142, 161, 162, 183, 201, 205, 206, 223, 239, 249, 252, 256, 279, 281, 287, 290, 294, 318, 320, 322, 519, 520, 544, 567, 569, 570, 574, 578, 583, 584, 585, 586, 588, 605, 607, 610, 613, 619], "individu": [16, 40, 41, 63, 64, 66, 161, 279, 519], "mainli": [16, 17, 41, 155, 158, 161, 164, 212, 248, 283, 585, 610, 613], "accuraci": [16, 41, 154, 155, 170, 173, 174, 203, 241, 247, 248, 256, 271, 276, 284, 286, 293, 294, 295, 305, 306, 308, 311, 316, 318, 325, 340, 356, 366, 376, 382, 384, 458, 482, 488, 491, 493, 509, 521, 524, 567, 569, 570, 573, 574, 575, 576, 579, 584, 585, 586, 596, 605, 607, 608, 610, 611, 612, 615, 616, 617, 621, 622], "same": [16, 40, 41, 43, 52, 63, 79, 136, 142, 146, 161, 185, 196, 199, 202, 225, 240, 252, 271, 276, 290, 311, 312, 315, 335, 525, 568, 569, 570, 572, 574, 578, 585, 589, 593, 598, 602, 609, 610, 612, 613, 617, 618, 619], "share": [16, 40, 41, 75, 78, 94, 105, 135, 136, 577, 578, 619], "perform": [16, 41, 58, 63, 64, 92, 154, 162, 163, 170, 185, 196, 197, 198, 199, 201, 203, 225, 237, 239, 247, 248, 259, 261, 262, 271, 276, 284, 286, 305, 306, 309, 311, 312, 315, 317, 340, 356, 366, 376, 382, 384, 473, 482, 491, 493, 500, 509, 521, 522, 524, 525, 567, 568, 569, 570, 571, 573, 575, 576, 579, 581, 582, 584, 585, 586, 587, 588, 590, 594, 596, 599, 605, 607, 608, 609, 610, 611, 612, 613, 614, 617, 619, 621, 622], "A": [16, 40, 41, 43, 50, 52, 63, 64, 66, 70, 71, 99, 106, 109, 111, 112, 118, 135, 142, 146, 148, 149, 151, 155, 158, 159, 161, 162, 163, 164, 165, 187, 191, 196, 201, 202, 205, 206, 207, 208, 214, 227, 231, 236, 239, 240, 241, 248, 249, 252, 253, 254, 256, 259, 261, 262, 263, 264, 271, 272, 273, 274, 276, 279, 280, 281, 282, 283, 287, 290, 291, 292, 293, 294, 295, 297, 299, 303, 307, 308, 309, 310, 312, 313, 315, 316, 317, 320, 323, 325, 570, 575, 578, 584, 585, 587, 598, 599, 602, 605, 610, 611, 618, 619, 621], "modifi": [16, 41, 52, 58, 63, 64, 66, 77, 158, 187, 213, 214, 227, 248, 271, 276, 282, 469, 521, 567, 574, 578, 621], "data_load": [16, 43, 44, 45, 525], "todo": [16, 40, 185, 188, 225, 228, 252, 290, 322, 488], "replac": [16, 63, 64, 81, 98, 106, 254, 292, 302, 311, 490, 574, 585, 596, 615], "input_graph": [16, 127, 128, 132, 135, 137, 337, 445, 449, 454, 457, 464, 525], "eval": [16, 155, 212, 248, 252, 258, 290, 306, 325, 521, 569, 588, 617], "func": [16, 98, 156, 204, 285, 304, 490, 507, 621], "onnxdataload": 16, "evalut": 16, "onnxtransform": 16, "onnxmetr": 16, "evaluaton": 16, "visualizaton": 16, "f1": [16, 248, 253, 255, 256, 286, 291, 293, 294, 574, 584, 585, 616, 622], "e": [16, 42, 66, 98, 161, 285, 480, 482, 507, 519, 572, 575, 579, 588, 593, 594, 598, 602, 610, 619], "g": [16, 42, 101, 161, 285, 482, 572, 575, 579, 588, 593, 610, 615, 619], "modelproto": [16, 98, 242, 243, 245, 295, 587], "onnxrt_qlinearopsadaptor": [16, 525], "onnxrt_integeropsadaptor": 16, "onnxrt_qdqadaptor": 16, "onnxrtaug": 17, "dump_op_typ": 17, "black_nod": 17, "white_nod": 17, "backend": [17, 42, 43, 152, 170, 171, 172, 176, 177, 181, 185, 186, 188, 189, 190, 191, 192, 196, 199, 202, 208, 209, 216, 217, 219, 221, 225, 226, 228, 229, 230, 231, 232, 236, 238, 240, 257, 286, 295, 296, 297, 299, 302, 316, 521, 574, 580, 581, 585, 586, 594, 612, 613, 618, 621], "cpuexecutionprovid": 17, "reduce_rang": [17, 39, 170, 286, 612], "augment_graph": 17, "activation_onli": 17, "weight_onli": 17, "add": [17, 39, 40, 48, 55, 60, 63, 64, 98, 105, 106, 111, 115, 121, 124, 142, 165, 185, 187, 209, 225, 227, 248, 249, 256, 271, 276, 280, 282, 285, 287, 293, 294, 302, 311, 320, 322, 348, 355, 356, 358, 365, 366, 367, 368, 369, 370, 372, 374, 375, 376, 377, 381, 382, 383, 384, 385, 386, 388, 404, 490, 515, 520, 521, 544, 567, 569, 570, 574, 576, 578, 584, 585, 586, 600, 603, 616, 617, 619], "quantization_candid": 17, "store": [17, 98, 159, 161, 162, 163, 164, 187, 227, 252, 272, 273, 274, 279, 281, 290, 310, 331, 580], "part": [17, 162, 241, 248, 252, 279, 281, 290, 521, 582, 586, 600, 603, 610, 620], "graph": [17, 41, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 108, 109, 110, 113, 126, 128, 132, 135, 136, 137, 139, 140, 141, 142, 184, 224, 245, 247, 286, 296, 297, 298, 302, 303, 304, 342, 344, 346, 411, 419, 422, 430, 431, 433, 443, 444, 445, 450, 451, 455, 468, 469, 471, 491, 494, 506, 521, 525, 570, 572, 574, 580, 584, 587, 588, 613, 614, 617], "get_intermediate_output": 17, "calib_mod": 17, "intermedi": [17, 40, 144, 156, 170, 204, 306, 521, 581, 610, 613], "dump_minmax": 17, "naiv": 17, "min": [17, 43, 106, 137, 153, 335, 567, 610, 613, 618, 619], "dump_calibr": 17, "min_max": 17, "param": [17, 42, 43, 63, 144, 146, 154, 173, 175, 203, 209, 215, 252, 255, 256, 290, 293, 294, 310, 357, 389, 490, 493, 525, 587, 619], "give": [17, 605, 619], "pair": [17, 39, 44, 103, 111, 569, 585, 586], "across": [17, 247, 248, 257, 284, 295, 306, 571, 585, 610, 619], "test": [17, 202, 240, 520, 524, 567, 582, 622], "first": [17, 43, 88, 103, 137, 153, 167, 185, 201, 225, 239, 241, 248, 252, 290, 308, 309, 311, 322, 399, 521, 522, 525, 567, 570, 576, 582, 586, 590, 599, 600, 603, 606, 612, 613, 614, 616, 617, 619, 621], "element": [17, 161, 165, 183, 223, 248, 252, 271, 276, 279, 282, 290, 335, 353, 570, 581, 584, 610], "minimum": [17, 161, 310, 585, 596, 610, 619], "second": [17, 60, 170, 185, 225, 286, 311, 335, 399, 482, 567, 585, 598, 602, 606, 619, 621], "maximum": [17, 50, 161, 162, 185, 196, 199, 202, 225, 240, 250, 279, 281, 288, 310, 570, 585, 610, 613, 618], "calculate_quantization_param": 17, "quantization_threshold": 17, "dictionari": [17, 41, 43, 63, 64, 66, 118, 143, 144, 148, 167, 170, 201, 239, 252, 259, 261, 262, 264, 286, 290, 302, 357, 359, 360, 362, 364, 367, 368, 373, 377, 378, 380], "should": [17, 39, 42, 43, 50, 70, 75, 111, 112, 138, 161, 162, 173, 174, 183, 185, 187, 191, 196, 199, 201, 202, 206, 207, 223, 225, 227, 231, 236, 239, 240, 245, 250, 255, 256, 281, 285, 288, 293, 294, 295, 306, 318, 325, 331, 335, 399, 480, 521, 522, 525, 567, 570, 574, 584, 585, 586, 591, 600, 603, 605, 607, 613, 618, 619, 621], "follow": [17, 64, 66, 75, 84, 87, 88, 89, 90, 106, 187, 191, 196, 227, 248, 249, 252, 271, 276, 287, 290, 308, 519, 520, 521, 522, 525, 534, 567, 569, 570, 572, 573, 574, 576, 578, 582, 583, 584, 585, 586, 587, 588, 589, 590, 598, 602, 608, 610, 612, 613, 617, 619], "param_nam": [17, 348], "dump_tensor": 17, "both": [17, 142, 144, 262, 264, 519, 522, 525, 573, 582, 585, 589, 610, 612, 613, 619], "calculate_scale_zeropoint": 17, "last_nod": 17, "next_nod": 17, "rmin": [17, 40, 613], "rmax": [17, 40, 613], "scheme": [17, 39, 40, 42, 148, 320, 322, 507, 525, 569, 578, 596, 619, 621], "qtype": [17, 40, 525], "quantize_rang": [17, 40], "zero": [17, 39, 40, 161, 162, 165, 196, 199, 202, 240, 248, 256, 271, 276, 279, 281, 282, 294, 335, 524, 610, 613, 618, 619, 620], "point": [17, 39, 40, 98, 198, 237, 253, 254, 263, 291, 292, 305, 310, 584, 605, 613, 618, 619], "calib_smooth": 17, "per": [17, 39, 40, 42, 43, 146, 152, 154, 161, 175, 184, 203, 215, 224, 252, 290, 330, 335, 355, 525, 567, 609, 614, 622], "channel": [17, 39, 40, 106, 137, 146, 152, 153, 161, 196, 198, 199, 202, 237, 240, 279, 419, 422, 431, 525, 581, 582, 588, 590, 595, 610, 618, 622], "shape_info": [17, 40], "shape": [17, 40, 98, 99, 101, 106, 118, 135, 142, 161, 188, 189, 196, 198, 199, 202, 228, 229, 237, 240, 252, 279, 290, 301, 411, 418, 419, 422, 431, 433, 471, 524, 567, 570, 578, 579, 585, 618], "max_vals_per_channel": [17, 40], "activationoper": 19, "onnx_quant": [19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38], "onnx_nod": [19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 83, 97, 107], "quantize_check": [19, 22, 23, 25, 27, 29, 33, 34, 35, 36, 37], "quantizaion": [19, 21, 22, 23, 24, 25, 26, 27, 29, 31, 32, 33, 34, 35, 36, 37, 38], "can": [19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 52, 137, 144, 146, 153, 154, 161, 162, 164, 173, 174, 184, 187, 196, 199, 202, 203, 205, 206, 224, 227, 240, 248, 252, 254, 256, 271, 276, 279, 281, 282, 283, 286, 290, 292, 294, 295, 305, 306, 325, 331, 441, 473, 480, 490, 521, 522, 524, 525, 567, 568, 569, 570, 572, 573, 574, 576, 578, 581, 582, 584, 585, 586, 587, 588, 589, 590, 592, 593, 594, 596, 598, 599, 600, 602, 603, 605, 606, 607, 608, 609, 610, 612, 613, 614, 616, 617, 618, 619, 621], "done": [19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 521, 572, 573, 589, 605, 610, 613], "convert_check": [19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38], "convert_format": [19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38], "convers": [19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 50, 77, 98, 99, 248, 258, 525, 585, 586, 613, 614], "qoper": [19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39], "removableactivationoper": 19, "qactivationoper": 19, "children": [19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 32, 33, 34, 35, 36, 37, 38, 302], "initi": [19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 101, 112, 142, 155, 156, 158, 162, 173, 174, 182, 185, 204, 212, 222, 225, 241, 248, 259, 260, 261, 262, 280, 281, 285, 302, 303, 306, 318, 322, 325, 354, 377, 378, 387, 436, 468, 470, 478, 491, 498, 522, 567, 569, 570, 584, 604, 610, 619], "argmaxoper": 20, "qargmaxoper": 20, "attentionoper": 21, "qattentionoper": 21, "qattent": 21, "binari": [22, 142, 256, 294, 577, 584, 600, 603], "binaryoper": 22, "qbinaryoper": 22, "qbinari": 22, "concatoper": 23, "cast": [23, 25, 34, 38, 39, 40, 53, 576, 614, 618], "qconcatoper": 23, "qconcat": 23, "convoper": 24, "qconvoper": 24, "qlinearconv": 24, "direct8bit": 25, "direct8bitoper": 25, "qdirectoper": 25, "qdirect": 25, "embedlayernorm": 26, "embedlayernormalizationoper": 26, "qembedlayernormalizationoper": 26, "qembedlayernorm": 26, "gatheroper": 27, "qgatheroper": 27, "qgather": 27, "globalaveragepool": 28, "globalaveragepooloper": 28, "qglobalaveragepooloper": 28, "qlinearglobalaveragepool": 28, "gemmoper": 29, "qgemmoper": 29, "qgemm": 29, "lstmoper": 31, "matmuloper": 32, "qmatmuloper": 32, "qlinearmatmul": 32, "maxpooloper": 33, "qmaxpooloper": 33, "qmaxpool": 33, "op_registri": 34, "qop_registri": 34, "padoper": 35, "qpadoper": 35, "qpad": 35, "averagepool": 36, "pooloper": 36, "qpooloper": 36, "qlinearaveragepool": 36, "resizeoper": 37, "qresizeoper": 37, "qresiz": 37, "splitoper": 38, "qsplitoper": 38, "qsplit": 38, "static": [39, 41, 43, 100, 106, 135, 146, 152, 170, 246, 285, 286, 302, 306, 320, 322, 348, 352, 355, 356, 357, 358, 359, 360, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 384, 385, 386, 388, 390, 391, 419, 422, 424, 425, 427, 429, 430, 431, 432, 442, 459, 461, 466, 468, 473, 475, 480, 482, 488, 489, 491, 493, 498, 503, 507, 514, 515, 525, 581, 585, 588, 593, 594, 595, 596, 599, 605, 619, 622], "quantization_param": 39, "op_types_to_quant": 39, "fallback_list": 39, "add_qdq_pair_to_weight": 39, "optypes_to_exclude_output_qu": 39, "dedicated_qdq_pair": 39, "check_opset_vers": 39, "opset": [39, 98, 100, 101, 242, 244, 245], "should_quant": 39, "quantize_model": 39, "merge_dedicated_qdq_pair": 39, "merg": [39, 104, 177, 217, 320, 322, 600, 603, 617, 619], "dedic": 39, "q": [39, 40, 44, 103, 105, 127], "dq": [39, 44, 103, 105, 127], "should_cast": 39, "insert_qdq": 39, "insert": [39, 40, 43, 44, 73, 98, 101, 103, 105, 106, 109, 128, 136, 140, 152, 242, 245, 521, 581, 585, 588, 610, 613, 614, 617], "should_convert": 39, "convert_qdq_to_operator_ori": 39, "remove_redundant_pair": 39, "redud": 39, "dtype_cast": 39, "cfg": [39, 43, 67, 68, 148, 166, 322, 328], "keep_io_typ": 39, "dtype": [39, 40, 44, 45, 98, 99, 101, 106, 135, 143, 170, 188, 189, 198, 202, 228, 229, 237, 240, 242, 245, 246, 570, 576, 578, 588, 612, 617, 618, 621], "quantize_output": 39, "initializer_use_weight_qtyp": 39, "direct_int8": 39, "indic": [39, 98, 155, 158, 161, 178, 183, 185, 218, 223, 225, 241, 248, 252, 263, 264, 290, 521, 567, 577, 617], "quantize_bias_tensor": 39, "bia": [39, 43, 106, 135, 137, 242, 245, 318, 617], "quantize_bia": 39, "bias_nam": [39, 245], "input_nam": [39, 63, 64, 98, 136, 170, 242, 244, 245, 304, 576], "weight_nam": [39, 265], "beta": [39, 63, 64, 66, 159], "input_scal": 39, "weight_scal": 39, "quantize_weights_per_channel": 39, "weight_qtyp": 39, "axi": [39, 40, 161], "quantize_weight_per_channel": 39, "channel_axi": [39, 109, 150, 153], "tensor_proto_to_arrai": 39, "tensorproto": [39, 40, 101], "get_bias_add_nod": 39, "last_output": 39, "quantized_bias_nam": 39, "handl": [39, 56, 57, 58, 142, 144, 146, 152, 248, 284, 318, 332, 480, 506, 507, 521, 523, 569], "ad": [39, 40, 118, 161, 162, 185, 225, 249, 287, 310, 355, 356, 358, 365, 366, 367, 368, 369, 372, 374, 375, 567, 586, 588, 593, 596, 600, 603, 610, 617], "reshap": [39, 57, 63, 64, 66, 69, 74, 161, 274], "nodeproto": [39, 245], "_type_": [39, 245, 301], "previou": [39, 43, 63, 75, 161, 262, 305, 309, 316, 567, 585, 610, 615, 617, 619, 620], "is_valid_quantize_weight": 39, "dequantize_tensor": [39, 144, 390], "value_nam": 39, "dequant": [39, 40, 53, 84, 87, 88, 89, 90, 92, 98, 121, 122, 124, 136, 144, 148, 335, 390, 521, 617], "helper": [40, 41, 43, 106, 112, 142, 144, 148, 185, 186, 187, 201, 225, 226, 227, 239, 243, 244, 245, 303, 333, 484], "onnxrt": [40, 185, 187, 194, 195, 196, 199, 202, 225, 227, 234, 235, 236, 238, 240, 255, 256, 293, 294, 333, 393, 394, 409, 411, 418, 471, 525, 586], "dtype_to_nam": 40, "dtype_map": 40, "its": [40, 43, 56, 92, 98, 106, 109, 118, 144, 161, 162, 181, 187, 196, 199, 201, 202, 221, 227, 239, 240, 242, 243, 250, 251, 255, 256, 281, 285, 288, 289, 293, 294, 310, 311, 315, 320, 322, 519, 567, 570, 572, 583, 584, 586, 596, 598, 602, 605, 606, 609, 610, 616, 618, 619], "represent": [40, 52, 355, 356, 358, 361, 365, 366, 369, 370, 372, 374, 375, 501, 519, 521, 573, 610, 613], "quanttyp": 40, "repres": [40, 161, 162, 163, 164, 165, 187, 192, 227, 232, 252, 254, 256, 290, 292, 294, 357, 359, 360, 362, 364, 367, 368, 371, 373, 488, 519, 570, 576, 613, 619], "make_quant_nod": 40, "make": [40, 64, 98, 101, 135, 136, 137, 153, 161, 162, 164, 183, 223, 279, 281, 283, 335, 354, 387, 419, 519, 520, 525, 567, 568, 569, 578, 584, 585, 593, 598, 602, 605, 613, 614, 616, 619], "quantizelinear": [40, 98, 576], "make_dquant_nod": 40, "dequantizelinear": [40, 98, 576], "is_b_transpos": 40, "wheter": 40, "inuput": 40, "transpos": [40, 69, 136, 161, 202, 240, 242, 244, 279, 618], "split_shared_bia": 40, "float_to_float16": 40, "float16": [40, 570], "float_to_bfloat16": 40, "bfloat16": [40, 586, 588, 596, 614], "cast_tensor": 40, "remove_init_from_model_input": 40, "collate_pr": 40, "quantize_data_with_scale_zero": 40, "zero_point": [40, 161, 245, 302], "To": [40, 161, 164, 252, 274, 279, 283, 290, 305, 480, 520, 567, 570, 574, 576, 586, 589, 592, 598, 600, 602, 603, 612, 614, 615, 619, 621], "pack": [40, 57], "comput": [40, 43, 58, 63, 64, 101, 118, 144, 148, 155, 212, 241, 248, 249, 250, 252, 253, 254, 256, 265, 268, 269, 287, 288, 290, 291, 292, 293, 294, 325, 335, 544, 573, 576, 584, 585, 586, 588, 599, 610, 613, 619], "when": [40, 49, 60, 63, 66, 99, 118, 142, 161, 162, 165, 170, 185, 186, 191, 194, 195, 196, 199, 202, 225, 226, 234, 235, 236, 240, 249, 250, 265, 279, 280, 281, 286, 287, 288, 302, 306, 318, 325, 488, 490, 503, 507, 519, 522, 544, 567, 569, 570, 585, 596, 598, 599, 602, 606, 610, 613, 618, 619], "uint8": [40, 170, 198, 237, 252, 290, 324, 525, 570, 578, 612, 613, 618, 621], "ab": [40, 159, 281, 613], "np": [40, 99, 106, 135, 196, 199, 202, 240, 310, 574, 618], "sym": [40, 578, 621], "asym": [40, 578, 621], "calculate_scale_zp": 40, "quantize_data": 40, "necessari": [40, 155, 158, 241, 248, 519, 522, 587, 606, 616, 619], "trasnform": 40, "full": [40, 43, 185, 186, 187, 191, 196, 203, 225, 226, 227, 248, 320, 322, 335, 524, 567, 570, 577, 579, 582, 583, 606, 610], "equat": [40, 254, 256, 292, 294, 613], "r": [40, 66, 137, 153, 567, 582, 606, 609, 613, 622], "": [40, 42, 43, 52, 58, 66, 75, 98, 99, 101, 106, 118, 135, 137, 138, 142, 153, 158, 161, 162, 166, 167, 170, 175, 184, 187, 201, 202, 203, 205, 206, 207, 213, 214, 215, 224, 227, 239, 240, 248, 254, 279, 281, 282, 286, 292, 293, 294, 295, 299, 306, 311, 318, 335, 388, 419, 475, 476, 519, 522, 572, 574, 578, 581, 585, 586, 593, 596, 598, 602, 605, 608, 609, 610, 611, 612, 613, 615, 616, 621], "z": [40, 572], "real": [40, 41, 188, 205, 206, 228, 574, 611, 613], "origin": [40, 41, 98, 138, 148, 149, 151, 161, 162, 165, 185, 202, 203, 225, 240, 248, 265, 266, 268, 269, 270, 271, 276, 279, 280, 281, 282, 311, 315, 324, 335, 338, 520, 570, 593, 610, 613, 618, 619, 621], "quantize_data_per_channel": 40, "dequantize_data_with_scale_zero": 40, "tensor_valu": 40, "scale_valu": 40, "zo_valu": 40, "sacal": 40, "dequantize_data": 40, "valueinfo": 40, "tensor_nam": [40, 142, 302, 303, 304], "new_dtyp": 40, "quantizedvalu": 40, "new_quantized_nam": 40, "scale_nam": 40, "zero_point_nam": 40, "quantized_value_typ": 40, "quint8": 40, "linearli": 40, "intial": 40, "quantizediniti": 40, "quantized_data": 40, "quantizationmod": 40, "quantizedvaluetyp": 40, "quantformat": [40, 245], "quantize_nparrai": 40, "low": [40, 42, 43, 173, 174, 188, 189, 228, 229, 247, 248, 257, 284, 295, 306, 525, 568, 570, 574, 585, 586, 611, 613, 619], "high": [40, 188, 189, 228, 229, 309, 570, 582, 611, 619], "attribute_to_kwarg": 40, "attribut": [40, 58, 79, 98, 99, 100, 101, 106, 118, 135, 148, 155, 167, 212, 284, 306, 325, 406, 407, 411, 471, 488, 525, 569, 578, 580, 585, 612, 621], "kwarg": [40, 41, 43, 98, 101, 118, 119, 120, 121, 122, 123, 124, 125, 128, 129, 131, 133, 134, 158, 170, 187, 196, 199, 200, 202, 206, 207, 210, 227, 240, 247, 248, 258, 271, 276, 282, 284, 285, 286, 293, 294, 295, 296, 297, 298, 300, 301, 302, 303, 304, 306, 320, 321, 323, 325, 329, 331, 332, 334, 335, 340, 342, 344, 345, 346, 347, 357, 359, 360, 362, 364, 367, 368, 373, 569], "make_nod": [40, 98], "find_by_nam": 40, "item_list": 40, "find": [40, 63, 64, 66, 98, 101, 142, 174, 256, 262, 263, 293, 294, 302, 310, 318, 335, 436, 506, 524, 525, 567, 591, 598, 602, 605, 606, 610, 616, 617, 619], "item": [40, 165, 167, 201, 239, 280, 318, 320, 322, 388, 476, 509, 574, 619], "get_smooth_scales_per_op": 40, "input_tensors_2_weight": 40, "input_tensors_2_weights_nod": 40, "one": [40, 43, 98, 105, 106, 111, 128, 148, 161, 164, 196, 199, 202, 203, 212, 240, 248, 249, 252, 255, 256, 258, 279, 282, 283, 287, 290, 293, 294, 309, 318, 484, 522, 525, 544, 567, 572, 573, 574, 578, 579, 581, 582, 584, 585, 586, 588, 589, 593, 594, 596, 598, 599, 602, 605, 606, 607, 608, 610, 612, 613, 615, 618, 619], "mul": [40, 50, 61, 62, 63, 65, 66, 75, 121, 124, 152, 576], "correspond": [40, 43, 118, 144, 162, 185, 225, 249, 252, 256, 279, 281, 285, 287, 290, 293, 294, 310, 318, 328, 525, 544, 578, 585, 610, 612, 613, 616, 619], "paper": [40, 146, 572, 610], "get_smooth_scales_per_input": 40, "insert_smooth_mul_op_per_input": 40, "inupt": 40, "new_init_tensor": 40, "new_added_mul_nod": 40, "adjust_weights_per_op": 40, "adjust": [40, 161, 596, 613], "adjustd": 40, "adjust_weights_per_input": 40, "insert_smooth_mul_op_per_op": 40, "befor": [40, 103, 105, 118, 152, 155, 159, 161, 162, 163, 164, 185, 212, 225, 241, 242, 245, 248, 270, 271, 276, 279, 281, 282, 283, 315, 325, 376, 520, 567, 570, 572, 573, 574, 577, 578, 582, 585, 600, 603, 610, 613, 616, 617, 619], "name_2_nod": 40, "trt_env_setup": 40, "environ": [40, 154, 203, 286, 438, 470, 471, 479, 503, 519, 567, 568, 598, 602, 605, 619], "variabl": [40, 118, 154, 163, 187, 203, 227, 248, 257, 295, 303, 310, 478, 503, 567, 582, 610, 619], "tensorrt": 40, "provid": [40, 63, 64, 98, 101, 106, 118, 173, 174, 196, 199, 202, 212, 236, 238, 240, 247, 248, 252, 271, 276, 284, 285, 290, 295, 306, 325, 329, 331, 399, 419, 425, 475, 484, 509, 522, 524, 525, 567, 568, 569, 573, 574, 575, 576, 581, 582, 585, 586, 587, 588, 592, 596, 599, 605, 606, 610, 612, 613, 617, 619, 620, 621, 622], "get_ops_recurs": 41, "prefix": [41, 142, 143, 147, 154, 203, 248, 249, 286, 287, 503, 588, 593, 617], "graph_info": [41, 43, 296, 297, 298, 302, 303, 304], "templateadaptor": 41, "tampl": 41, "yaml": [41, 42, 43, 154, 165, 167, 173, 174, 185, 187, 203, 212, 225, 227, 241, 247, 248, 258, 259, 260, 261, 262, 271, 276, 284, 285, 286, 295, 334, 335, 336, 340, 341, 342, 343, 344, 346, 347, 349, 350, 434, 436, 443, 448, 452, 455, 458, 490, 501, 525, 580, 584, 585, 607, 610, 612, 617, 618], "file": [41, 101, 106, 135, 142, 151, 165, 166, 173, 174, 185, 186, 187, 190, 191, 196, 199, 201, 202, 208, 211, 225, 226, 227, 230, 239, 240, 241, 245, 247, 248, 252, 258, 259, 260, 261, 262, 271, 276, 280, 282, 284, 285, 290, 295, 304, 305, 306, 331, 334, 335, 340, 341, 342, 343, 344, 345, 346, 347, 399, 436, 445, 449, 459, 475, 482, 483, 489, 490, 491, 503, 507, 511, 513, 515, 516, 522, 525, 567, 574, 577, 580, 583, 584, 585, 587, 591, 600, 603, 604, 605, 606, 607, 610, 612, 617, 618], "is_fused_modul": [41, 144, 148], "_propagate_qconfig_help": [41, 144, 148], "detect": [41, 144, 148, 252, 256, 290, 293, 294, 299, 419, 422, 431, 490, 521, 567, 588, 595, 596, 610], "calculate_hessian_trac": 41, "fp32_model": [41, 43, 142, 144, 148, 242, 245, 304, 315, 318, 335, 525], "q_model": [41, 144, 149, 151, 248, 258, 306, 318, 331, 521, 524, 569, 570, 574, 576, 579, 580, 584, 585, 587, 613, 614], "criterion": [41, 43, 144, 155, 157, 158, 159, 161, 162, 170, 206, 209, 241, 248, 286, 458, 498, 542, 572, 573, 576, 585, 610, 613, 619, 621], "enable_act": [41, 144], "hessian": [41, 144, 313, 619], "trace": [41, 143, 144, 147, 148, 242, 245, 306, 313, 521, 528, 595, 619], "loss": [41, 118, 155, 156, 170, 174, 204, 212, 247, 248, 256, 271, 276, 284, 286, 294, 305, 306, 325, 572, 573, 574, 575, 579, 584, 585, 586, 596, 608, 610, 613, 619, 621], "gradient": [41, 118, 159, 265, 266, 281, 304, 581, 585, 610, 622], "amap": 41, "enabl": [41, 43, 105, 144, 162, 170, 281, 286, 478, 567, 574, 582, 586, 588, 590, 593, 594, 596, 609, 610, 611, 619], "error": [41, 101, 144, 249, 256, 285, 287, 294, 315, 329, 332, 474, 502, 544, 584, 589, 619], "op_nam": [41, 148, 158, 166, 170, 286, 311, 315, 318, 320, 322, 323, 390, 395, 396, 404, 405, 585, 610, 617], "hessian_trac": [41, 144], "calib_it": [41, 146, 149, 151], "force_re_smooth": 41, "calib": 41, "now": [41, 146, 202, 240, 312, 488, 521, 522, 570, 574, 596, 612, 618, 619], "pytorchadaptor": 41, "objext": 41, "number": [41, 63, 64, 101, 144, 148, 149, 151, 161, 162, 164, 175, 183, 186, 191, 196, 198, 199, 202, 215, 223, 226, 237, 240, 253, 254, 256, 262, 265, 270, 279, 291, 292, 293, 294, 310, 328, 335, 422, 478, 488, 491, 567, 568, 570, 574, 584, 610, 613, 616, 618, 619], "summari": [41, 99, 154, 203, 248, 268, 286, 325, 567, 600, 603, 609, 617], "optimizer_tupl": [41, 43], "criterion_tupl": [41, 43], "hook": [41, 43, 144, 155, 156, 158, 173, 204, 211, 212, 241, 248, 271, 276, 304, 318, 328, 572, 573, 585, 610, 617], "optim": [41, 43, 44, 45, 49, 53, 56, 57, 59, 70, 71, 75, 76, 81, 84, 87, 88, 89, 90, 94, 98, 112, 114, 135, 136, 155, 158, 159, 162, 163, 166, 170, 206, 212, 213, 214, 241, 247, 248, 264, 270, 281, 282, 284, 286, 306, 310, 318, 325, 326, 329, 336, 338, 342, 344, 346, 363, 367, 368, 374, 376, 377, 378, 379, 380, 381, 382, 384, 385, 387, 388, 390, 391, 392, 393, 394, 397, 398, 411, 465, 471, 472, 482, 488, 491, 494, 498, 505, 510, 522, 524, 542, 568, 572, 573, 574, 578, 579, 581, 582, 585, 587, 588, 590, 592, 593, 596, 599, 609, 610, 611, 612, 613, 614, 616, 617, 619, 620, 621], "It": [41, 49, 58, 75, 98, 161, 173, 174, 211, 248, 254, 256, 263, 279, 284, 285, 292, 294, 295, 306, 310, 311, 312, 315, 318, 325, 331, 525, 567, 572, 585, 591, 594, 599, 605, 606, 610, 613, 616, 619, 621], "other": [41, 63, 64, 66, 98, 135, 146, 152, 184, 224, 254, 285, 292, 303, 331, 480, 484, 507, 519, 520, 521, 567, 578, 581, 582, 583, 585, 587, 607, 609, 610, 613, 618, 619, 622], "is_fused_child": 41, "_post_eval_hook": [41, 617], "is_fused_op": 41, "is_last_fused_child": 41, "last": [41, 43, 88, 148, 159, 161, 173, 175, 215, 279, 305, 318, 459, 567, 586, 588, 590, 595, 599, 613], "q_capabl": 41, "get_non_quant_modul": 41, "model_kwarg": 41, "non_quant_modul": 41, "custom": [41, 98, 111, 154, 285, 305, 334, 377, 382, 568, 572, 573, 588, 610, 616], "keyword": 41, "custom_non_quant_dict": 41, "pytorch_ipexadaptor": 41, "intel": [41, 161, 206, 209, 242, 248, 255, 256, 279, 282, 286, 293, 294, 314, 320, 331, 470, 483, 517, 519, 520, 522, 523, 525, 569, 570, 571, 572, 573, 575, 576, 578, 579, 583, 586, 587, 588, 593, 595, 596, 607, 608, 609, 610, 611, 613, 614, 615, 617, 619, 620, 621], "extens": [41, 285, 425, 490, 522, 524, 525, 578, 581, 582, 585, 586, 587, 589, 594, 595, 596, 600, 603, 604, 610, 611, 619, 620, 621], "ipex": [41, 148, 304, 581, 585, 590, 594, 595, 622], "unspport": 41, "best": [41, 98, 155, 158, 174, 196, 199, 202, 240, 241, 247, 248, 259, 260, 261, 262, 284, 305, 306, 309, 315, 318, 519, 522, 582, 588, 594, 605, 607, 613, 618, 619], "No": [41, 577, 585, 609, 611], "pytorch_fxadaptor": 41, "fx": [41, 148, 306, 316, 581, 594, 595, 611, 613, 614, 622], "prepare_sub_graph": 41, "sub_module_list": 41, "fx_op_cfg": 41, "is_qat": [41, 147], "example_input": [41, 148, 170, 242, 245, 576], "custom_config": 41, "method": [41, 98, 100, 106, 118, 135, 137, 148, 163, 178, 183, 184, 185, 187, 191, 194, 195, 196, 199, 202, 205, 206, 218, 223, 224, 225, 227, 231, 234, 235, 236, 238, 240, 248, 255, 256, 262, 263, 264, 274, 284, 293, 294, 296, 297, 320, 322, 328, 329, 331, 332, 475, 480, 484, 502, 521, 522, 524, 570, 572, 573, 584, 585, 608, 610, 613, 614, 618, 619], "sub": [41, 62, 63, 64, 82, 106, 154, 203, 245, 248, 286, 318, 522, 619], "recurs": [41, 98, 99, 320, 322, 335], "traceabl": [41, 521], "qconfigmap": 41, "prepare_fx": 41, "dir": [41, 148, 185, 225, 334, 570, 577, 580], "tupe": 41, "non": [41, 75, 118, 209, 280, 335, 521, 609, 610, 619], "convert_sub_graph": 41, "fuse_fx_model": 41, "approach": [41, 166, 170, 248, 259, 260, 261, 262, 286, 318, 352, 491, 498, 521, 522, 569, 570, 572, 581, 585, 593, 605, 611, 612, 619, 621], "graphmodul": [41, 148, 521, 614], "torch": [41, 143, 144, 145, 147, 148, 152, 156, 158, 161, 166, 170, 204, 213, 214, 242, 245, 256, 286, 294, 295, 304, 306, 331, 334, 521, 524, 526, 572, 574, 576, 585, 586, 587, 588, 593, 596, 613, 617], "fused_model": 41, "calculate_op_sensit": [41, 43], "output_op_nam": [41, 43], "confidence_batch": [41, 43, 148, 619], "requantize_cfg": [41, 43, 148], "inc": [41, 202, 240, 331, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 498, 519, 524, 588, 595, 605, 611, 612, 615], "switch": [41, 81, 588, 617], "stage": [41, 43, 88, 307, 308, 309, 316, 483, 572, 617, 619], "re": [41, 43, 310, 331, 582, 605], "sort": [41, 43, 98, 135, 302, 309, 315, 399, 619], "sensit": [41, 43, 159, 265, 281, 581, 610], "ops_lst": 41, "querybackendcap": [42, 43, 525], "defin": [42, 43, 82, 88, 98, 106, 135, 144, 156, 161, 162, 163, 164, 173, 174, 204, 248, 259, 260, 261, 262, 263, 264, 271, 276, 279, 280, 281, 282, 283, 295, 303, 306, 310, 325, 334, 413, 414, 415, 502, 519, 522, 525, 567, 569, 570, 572, 573, 578, 581, 584, 585, 606, 608, 610, 613, 616, 617, 619, 621], "interfac": [42, 82, 106, 109, 128, 138, 158, 166, 170, 247, 248, 271, 276, 284, 285, 286, 305, 318, 328, 330, 336, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 388, 452, 458, 465, 477, 581, 585, 596, 609, 613, 615], "adapt": [42, 519, 524, 570, 596, 611], "implement": [42, 43, 82, 106, 128, 137, 138, 141, 161, 162, 163, 164, 173, 174, 180, 183, 184, 185, 187, 191, 196, 220, 223, 224, 225, 227, 231, 236, 249, 255, 256, 274, 279, 283, 287, 293, 294, 295, 305, 306, 313, 318, 325, 544, 569, 570, 585, 596, 606, 610, 615, 617, 619, 621], "inherit": [42, 98, 155, 156, 162, 164, 182, 202, 204, 212, 222, 240, 248, 281, 283, 522, 525, 570], "own": [42, 70, 183, 202, 223, 240, 305, 522, 567, 569, 570, 581, 584, 607, 616, 620], "get_vers": [42, 43], "get_precis": [42, 352], "get_op_typ": [42, 43], "3": [42, 66, 75, 111, 142, 187, 191, 196, 199, 202, 227, 231, 236, 238, 240, 252, 290, 480, 521, 522, 524, 567, 569, 570, 572, 574, 576, 578, 579, 582, 584, 585, 586, 588, 592, 596, 598, 602, 607, 610, 612, 613, 616, 618, 619, 622], "conv2d": [42, 48, 55, 56, 57, 61, 62, 67, 68, 75, 121, 131, 137, 146, 578, 617, 619], "get_fuse_pattern": [42, 43], "fusion": [42, 54, 55, 57, 60, 63, 64, 65, 66, 69, 74, 90, 92, 98, 105, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 133, 134, 521, 525, 578], "everi": [42, 63, 64, 66, 98, 161, 162, 279, 281, 282, 525, 593, 598, 602, 610, 619], "set_quantization_config": 42, "organ": [42, 567, 621], "get_quantization_cap": [42, 43], "granular": [42, 525, 578, 581, 591, 610, 621], "etc": [42, 154, 155, 158, 201, 212, 239, 241, 247, 248, 254, 271, 276, 284, 286, 292, 295, 306, 334, 572, 581, 610, 616, 619], "get_mixed_precision_combin": [42, 43], "unsupported_precis": 42, "hardwar": [42, 478, 520, 524, 525, 572, 581, 585, 586, 605, 609, 610, 611, 612], "user": [42, 106, 136, 154, 155, 158, 162, 165, 173, 174, 187, 190, 194, 195, 196, 202, 203, 209, 212, 213, 214, 227, 230, 234, 235, 236, 240, 247, 248, 271, 276, 282, 284, 285, 286, 295, 305, 306, 311, 318, 325, 335, 474, 521, 522, 525, 534, 568, 572, 573, 576, 578, 581, 584, 585, 586, 587, 588, 589, 590, 592, 593, 594, 596, 599, 605, 607, 608, 610, 611, 613, 614, 615, 617, 618, 619, 623], "tensorflowadaptor": 43, "stock": [43, 594], "spr": 43, "graphdef": [43, 52, 53, 56, 57, 59, 63, 64, 66, 70, 75, 81, 87, 88, 89, 90, 106, 128, 135, 136, 142, 303, 468, 587], "could": [43, 63, 64, 146, 152, 161, 173, 174, 187, 227, 285, 295, 306, 318, 325, 519, 521, 573, 585, 608, 610, 613, 620], "graph_def": [43, 49, 106, 142, 242, 244, 295, 303, 306, 433, 468, 469], "frozen": [43, 52, 295, 303, 306, 427, 430, 567, 587], "pb": [43, 154, 170, 295, 303, 306, 427, 430, 441, 524, 568, 574, 579, 585, 587, 617, 622], "ckpt": [43, 142, 295, 303, 306, 622], "savedmodel": [43, 295, 303, 306, 622], "folder": [43, 142, 187, 192, 227, 232, 295, 306, 334, 570, 593, 598, 602, 617], "callback": [43, 158, 271, 276, 325, 326, 328, 329, 506, 521, 585, 608, 610, 613], "on_epoch_begin": [43, 155, 162, 212, 248, 265, 268, 269, 270, 271, 276, 281, 282, 325, 328, 572, 573, 585, 608, 610], "on_epoch_end": [43, 155, 162, 212, 248, 265, 268, 269, 270, 271, 276, 281, 282, 325, 328, 572, 573, 585, 608, 610], "larger": [43, 161], "better": [43, 92, 173, 174, 263, 295, 305, 306, 317, 325, 573, 584, 586, 610, 611, 613, 616, 619], "tf": [43, 101, 112, 118, 142, 184, 185, 186, 187, 191, 196, 199, 202, 224, 225, 226, 227, 240, 301, 303, 338, 567, 574, 587, 611, 614, 618], "compat": [43, 77, 142, 252, 290, 303, 574, 587, 600, 603, 605, 615], "definit": [43, 106, 178, 183, 218, 223, 404, 417, 426, 475, 506], "inspect_weight_and_bia": 43, "node_list": 43, "graph_node_name_map": [43, 142], "bias": 43, "fused_node_map": 43, "pattern_map": 43, "between": [43, 137, 144, 153, 156, 162, 196, 199, 202, 204, 240, 253, 255, 256, 291, 293, 294, 390, 502, 506, 521, 525, 572, 576, 581, 584, 585, 596, 613, 615, 616, 618, 619], "sequenc": [43, 59, 75, 101, 161, 185, 196, 199, 201, 202, 225, 239, 240, 249, 250, 254, 279, 287, 288, 292, 302, 525, 544, 570, 578, 610, 618], "val": [43, 98, 142, 165, 187, 190, 227, 230, 280, 585], "seq": 43, "fused_mapping_revers": 43, "fused_map": 43, "inspect_activ": 43, "local": [43, 161, 162, 279, 318, 331, 335, 350, 382, 387, 400, 420, 567, 598, 602, 610, 616], "actual": [43, 98, 256, 294, 305, 574], "4": [43, 49, 75, 154, 161, 170, 194, 195, 196, 197, 198, 199, 202, 234, 235, 236, 237, 238, 240, 249, 250, 252, 287, 288, 290, 311, 480, 519, 525, 544, 567, 568, 574, 575, 578, 579, 581, 582, 584, 585, 593, 609, 610, 618, 619, 622], "tensorflowbasemodel": [43, 303, 431], "start": [43, 162, 196, 199, 202, 240, 249, 252, 287, 290, 302, 305, 308, 311, 483, 503, 582, 618, 619, 620, 623], "quantizedv2": 43, "move": [43, 74, 521, 612, 615], "quantizedconv2d": 43, "qat_convert": 43, "quantize_recip": [43, 111, 112], "kera": [43, 66, 112, 118, 209, 298, 303, 411, 418, 428, 574, 587, 595, 596, 622], "expect": [43, 98, 118, 187, 227, 310, 338, 460, 483, 519, 520, 577, 605, 613, 619], "sequenti": [43, 183, 223, 285, 307, 309, 312, 619], "decid": [43, 111, 112, 170, 250, 281, 286, 288, 399, 525, 585, 615, 619], "fake": [43, 109, 146, 152, 585, 613], "converted_model": [43, 170, 286, 295, 585, 586], "diagnosis_help": [43, 525], "quan_model": [43, 142], "diagnosi": [43, 142, 286, 379, 382, 388, 411, 471, 500, 506, 585], "get_output_op_nam": 43, "qmodel": [43, 144], "oupur": 43, "mse": [43, 148, 170, 256, 286, 294, 314, 390, 396, 567, 584, 612, 615], "backup": 43, "fallen": 43, "denot": 43, "tensorflow_itexadaptor": 43, "itex": [43, 105, 242, 244], "tensorflowqueri": [43, 525], "local_config_fil": 43, "performance_onli": [43, 44, 45, 103, 127, 132, 141, 500, 585], "itex_mod": [43, 44, 75, 85, 103, 127, 132], "quant_mod": [43, 318, 320, 322], "infom": [43, 205, 206, 245], "compos": [43, 135, 196, 199, 202, 240, 328, 618], "describ": [43, 63, 64, 525, 567, 578, 617], "get_op_types_by_precis": 43, "get_bf16_pattern": 43, "get_eightbit_pattern": 43, "qdq_enabl": [43, 44], "eightbit": [43, 617], "generate_internal_pattern": 43, "translat": [43, 249, 250, 287, 288, 544, 610, 619], "intern": [43, 98, 99, 106, 144, 320, 322, 474, 569, 570, 610], "express": [43, 249, 287, 519], "graphconvert": 44, "qt_config": 44, "recip": [44, 111, 170, 242, 245, 247, 248, 284, 286, 306, 318, 576, 585, 619], "int8_sequ": 44, "fp32_op": [44, 46, 103, 106], "bf16_op": [44, 46, 103, 106, 614], "fake_qu": [44, 84, 103, 127, 132], "new_api": [44, 45, 67, 68, 73, 75, 88, 95, 127, 132, 137], "use_bf16": [44, 45, 612], "fp32_frozen_graph": 44, "requantizeop": [44, 45], "so": [44, 45, 101, 118, 196, 199, 202, 240, 281, 325, 331, 521, 525, 577, 581, 584, 591, 593, 613, 614, 617, 618, 620], "self": [44, 59, 88, 158, 170, 248, 252, 271, 281, 286, 290, 305, 310, 318, 503, 525, 567, 569, 570, 581, 584, 616, 617, 619], "empti": [44, 98, 111, 252, 290, 310, 591], "without": [44, 45, 86, 98, 106, 142, 162, 202, 240, 252, 281, 290, 324, 490, 519, 567, 569, 572, 574, 584, 585, 596, 610, 611, 612, 613, 619, 620], "bf16_node": [44, 45], "quantize_with_qdq_pattern": 44, "newapi": [44, 90], "graphconverterwithoutcalib": 45, "recover_config": 45, "convert_without_calib": 45, "quantize_without_calib": 45, "rewrit": [46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 102, 103, 104, 105, 214], "bf16convert": [46, 614], "graphrewriterbas": [46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 65, 67, 68, 69, 70, 71, 73, 74, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 103, 104, 105], "do_transform": [46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 76, 77, 78, 79, 80, 81, 82, 84, 85, 87, 88, 89, 90, 92, 93, 94, 95, 96, 103, 104, 105, 120, 127, 128, 132, 137, 138, 140, 141], "biasadd": [48, 55, 60, 62, 75, 105, 121, 122, 124, 131, 133, 578], "convertaddtobiasaddoptim": 48, "addv2": [48, 64, 65, 66, 121, 124, 578], "layout": 49, "convertlayoutoptim": 49, "nchw": [49, 136], "nhwc": [49, 63, 64, 99, 136], "abov": [49, 98, 252, 290, 525, 610], "leakyrelu": [50, 119, 121, 123, 124, 129], "convertleakyreluoptim": 50, "below": [50, 62, 63, 64, 70, 75, 285, 309, 311, 316, 520, 521, 524, 525, 567, 569, 572, 574, 580, 584, 588, 590, 598, 599, 602, 605, 607, 608, 610, 612, 613, 616, 617, 619, 620], "subgraph": [50, 58, 62, 63, 64, 66, 98, 101, 147, 576], "coeffici": [50, 610], "less": [50, 75, 142, 335, 568, 572, 585, 610], "than": [50, 58, 142, 185, 196, 199, 202, 225, 240, 252, 290, 305, 335, 522, 524, 568, 570, 580, 584, 607, 608, 610, 613, 616, 618, 619], "small": [50, 63, 64, 65, 252, 290, 313, 522, 567, 610, 619], "nan": 51, "random": [51, 135, 142, 170, 196, 198, 199, 202, 237, 240, 264, 286, 310, 314, 329, 335, 500, 520, 522, 585, 612, 618, 621], "convertnantorandom": 51, "const": [51, 52, 59, 60, 63, 64, 66, 78, 81, 93, 94, 98, 99, 106, 286, 355, 366, 369, 376, 382, 384, 385, 389, 471, 479, 489], "consist": [51, 59, 520, 521, 567, 576, 619], "placehold": [52, 98, 183, 223], "convertplaceholdertoconst": 52, "renam": [52, 77, 98, 615], "placeholderwithdefault": 52, "constant": [52, 58, 75, 98, 99, 101, 106, 135, 242, 245, 286, 302, 310, 314, 320, 329, 472, 569, 578, 618], "help": [52, 98, 211, 258, 302, 352, 490, 587, 588, 594, 605, 619, 620], "simplifi": [52, 588, 599, 605], "input_graph_def": [52, 53, 56, 57, 59, 63, 64, 66, 70, 81, 106, 135], "nodes_to_convert": 52, "strtobool": 52, "val_str": 52, "equival": [52, 79], "rerewrit": 53, "dequantizecastoptim": 53, "b16": 53, "redund": [53, 87, 89, 128], "dilat": 54, "contract": 54, "dilatedcontract": 54, "spacetobatchnd": 54, "batchtospacend": 54, "inject": [55, 585], "dummi": [55, 188, 189, 228, 229, 246, 256, 294, 382, 386, 492, 524, 567, 570, 579, 584, 585], "injectdummybiasaddoptim": 55, "miss": [55, 98, 348, 610, 613], "behind": 55, "them": [55, 58, 106, 185, 225, 521, 569, 576, 578, 580, 608, 610, 619], "expanddim": 56, "expanddimsoptim": 56, "next": [56, 164, 178, 218, 246, 262, 283, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 522, 567, 612, 619], "featch": 57, "fetchweightfromreshapeoptim": 57, "fetch": [57, 148, 151, 178, 218, 252, 290, 570], "fold": [58, 59, 63, 64, 75, 242, 245, 578], "batchnorm": [58, 63, 117, 521], "foldbatchnormnodesoptim": 58, "scale_after_norm": 58, "batchnormwithglobalnorm": 58, "nodedef": [58, 63, 64, 66, 106, 135, 138, 468], "normal": [58, 63, 64, 66, 196, 199, 202, 240, 254, 292, 490, 585, 607, 618], "convolut": [58, 63, 64, 572, 610, 611], "multipl": [58, 63, 64, 111, 162, 171, 172, 176, 177, 185, 186, 188, 189, 190, 191, 192, 196, 199, 202, 209, 216, 217, 219, 225, 226, 228, 229, 230, 231, 232, 236, 238, 240, 257, 265, 281, 295, 296, 297, 299, 305, 309, 318, 475, 568, 570, 576, 585, 608, 610, 616, 619], "dynam": [58, 106, 175, 215, 242, 245, 285, 320, 322, 343, 525, 569, 572, 581, 585, 588, 593, 594, 595, 596, 599, 605, 611, 619, 622], "onc": [58, 106, 142, 146, 164, 209, 283, 307, 309, 567, 569, 605, 610, 611, 619, 622], "final": [58, 98, 161, 162, 281, 482, 585, 591, 607, 610, 613, 615, 619], "becom": [58, 525, 576], "That": [58, 567], "mean": [58, 63, 64, 66, 146, 161, 175, 196, 198, 199, 202, 215, 237, 240, 252, 254, 256, 279, 290, 292, 293, 294, 302, 305, 315, 521, 569, 574, 578, 584, 585, 591, 610, 613, 618, 619, 621], "opportun": [58, 63, 64], "reduc": [58, 63, 64, 161, 274, 525, 573, 585, 586, 605, 606, 611, 613, 614, 619, 621], "down": [58, 599], "addit": [58, 64, 66, 148, 173, 325, 475, 567, 572, 599, 615], "rather": [58, 580], "more": [58, 98, 135, 136, 142, 146, 152, 161, 173, 196, 199, 202, 240, 252, 279, 290, 318, 522, 523, 524, 567, 570, 572, 574, 579, 581, 582, 584, 585, 586, 588, 596, 600, 603, 607, 608, 610, 614, 619, 620, 622], "expens": [58, 572, 585, 619], "bake": 58, "identifi": [58, 63, 64, 66, 252, 290, 303, 331], "typic": [58, 111, 118, 248, 258, 285, 522, 524, 573, 575, 579, 610], "simpler": 58, "form": [58, 63, 64, 66, 77, 252, 254, 290, 292, 382, 384, 483, 567, 572, 605], "spot": 58, "fusedbatchnorm": [58, 63, 77], "fusedbatchnormv3": [58, 119, 129], "_fusedbatchnormex": 58, "extend": [58, 63, 64], "futur": [58, 152, 173, 174, 205, 206, 581, 585, 596, 620], "newer": [58, 63, 64, 582], "style": [58, 178, 192, 218, 232, 520, 570, 580], "rais": [58, 63, 64, 66, 77, 101, 106, 156, 161, 162, 165, 204, 249, 252, 255, 256, 279, 280, 281, 287, 290, 293, 294, 295, 310, 490, 503, 524, 544, 610], "valueerror": [58, 63, 64, 66, 77, 106, 249, 252, 256, 287, 290, 294, 544, 577], "If": [58, 63, 64, 66, 70, 77, 99, 106, 154, 173, 174, 187, 196, 199, 202, 227, 240, 252, 279, 280, 281, 290, 295, 306, 308, 325, 520, 521, 567, 568, 570, 574, 576, 582, 583, 584, 585, 586, 591, 599, 600, 603, 605, 607, 613, 616, 617, 618, 619], "badli": [58, 63, 64, 66, 77], "duplic": [58, 63, 64, 66, 94, 104, 136, 310], "graphfoldconstantoptim": 59, "supported_op_typ": 59, "check_all_fold": 59, "been": [59, 161, 162, 201, 239, 249, 279, 281, 287, 520, 522, 544, 567, 572, 585, 586, 605], "complet": [59, 320, 322, 525, 567, 619, 621, 622], "check_const_input": 59, "node_nam": [59, 63, 64, 66, 75, 98, 106, 128, 135, 138, 142, 245, 302, 303, 370, 468], "fusebiasaddandaddoptim": 60, "columnwis": 61, "fusecolumnwisemuloptim": 61, "depthwiseconv2dn": [61, 67, 68, 121, 131, 578], "math": [62, 613], "fuseconvwithmathoptim": 62, "elimin": 62, "realdiv": [62, 65], "decompos": [63, 64], "fusedecomposedbnoptim": 63, "some": [63, 64, 111, 173, 185, 212, 225, 248, 280, 318, 490, 567, 570, 582, 584, 585, 586, 607, 610, 613, 614, 617, 619], "normalizatin": [63, 64], "via": [63, 64, 118, 247, 248, 271, 276, 284, 507, 519, 574, 581, 585, 588, 605, 610], "group": [63, 64, 163, 266, 407, 581, 610, 617, 618, 619, 622], "instead": [63, 64, 167, 184, 224, 335, 591, 593, 596, 610], "singl": [63, 64, 121, 122, 128, 130, 131, 159, 164, 178, 185, 201, 202, 218, 225, 239, 240, 252, 281, 283, 290, 310, 371, 388, 407, 475, 509, 521, 570, 582, 610], "made": [63, 64, 66, 313, 525, 613, 615, 619], "those": [63, 64, 70, 315, 335, 572, 573, 580, 585, 608, 610, 613, 619], "further": [63, 64, 66, 519, 586, 587, 588, 590, 599, 605], "recogn": [63, 64, 249, 287], "seen": [63, 64, 335, 525], "also": [63, 64, 161, 184, 187, 191, 196, 202, 224, 227, 231, 236, 240, 249, 287, 305, 306, 316, 317, 520, 522, 525, 544, 567, 569, 575, 579, 581, 584, 585, 588, 593, 598, 599, 602, 605, 606, 607, 610, 613, 614, 619], "attempt": [63, 64, 331], "multipli": 63, "rsqrt": [63, 64], "varianc": [63, 137, 153], "epsilon": [63, 621], "gamma": [63, 64, 66], "OR": 63, "mul_0": 63, "appli": [63, 71, 85, 86, 90, 92, 94, 95, 96, 109, 119, 120, 121, 122, 123, 124, 127, 129, 130, 131, 132, 133, 137, 141, 155, 158, 161, 162, 212, 248, 250, 268, 279, 281, 288, 318, 519, 567, 585, 588, 590, 596, 605, 608, 610, 613, 614, 616, 619, 620, 621], "mul_1": 63, "insid": [63, 252, 290, 572, 573, 606, 610, 619], "end": [63, 98, 106, 142, 155, 158, 162, 185, 196, 199, 201, 202, 212, 225, 239, 240, 248, 265, 269, 270, 281, 282, 305, 307, 309, 325, 525, 572, 573, 578, 582, 585, 599, 607, 610, 617, 618, 619], "mul_3": 63, "batchnorma": 63, "node_name_from_input": [63, 64, 66, 106, 135, 138], "strip": [63, 64, 66, 75, 79, 80, 142, 617], "off": [63, 64, 66, 520], "port": [63, 64, 66, 135, 503, 507, 567], "underli": [63, 64, 66], "node_from_map": [63, 64, 66], "node_map": [63, 64, 66], "pull": [63, 64, 66, 483], "def": [63, 64, 66, 128, 170, 173, 174, 295, 306, 325, 521, 525, 569, 570, 572, 573, 574, 584, 585, 613, 617, 619], "entri": [63, 64, 66, 128, 144, 146, 209, 247, 285, 353, 396, 399, 482, 490, 583], "index": [63, 64, 66, 98, 101, 111, 118, 154, 178, 183, 187, 191, 196, 203, 218, 223, 227, 231, 236, 248, 263, 286, 302, 305, 335, 507, 570, 584, 606], "want": [63, 64, 66, 98, 106, 155, 183, 185, 223, 225, 281, 311, 325, 521, 525, 567, 570, 574, 582, 584, 585, 586, 593, 605, 606, 607, 616, 617, 619], "isn": [63, 64, 66, 106], "present": [63, 64, 66, 567, 611], "values_from_const": [63, 64, 66, 106], "node_def": [63, 64, 66, 106], "extract": [63, 64, 66, 106, 187, 227, 324, 490, 509, 570], "access": [63, 64, 66, 106, 118, 167, 331, 335, 474, 490, 503, 507, 567, 600, 603], "valid_reshape_input": [63, 64], "reshape_in0_ndef": [63, 64], "reshape_in1_ndef": [63, 64], "bypass_reshap": [63, 64], "input_node_map": [63, 64], "get_const_dim_count": [63, 64], "dimens": [63, 64, 101, 161, 177, 196, 199, 202, 217, 240, 275, 310, 570, 572, 610, 618], "instancenorm": 64, "fusedecomposedinoptim": 64, "instanc": [64, 109, 111, 112, 118, 149, 151, 154, 173, 174, 185, 203, 225, 248, 253, 254, 256, 259, 261, 262, 265, 266, 268, 269, 270, 286, 291, 292, 294, 295, 306, 310, 318, 324, 325, 355, 394, 398, 422, 431, 498, 519, 521, 525, 567, 568, 585, 590, 596, 621, 622], "search": [64, 66, 75, 98, 166, 173, 174, 247, 248, 249, 259, 260, 261, 262, 263, 264, 284, 287, 306, 310, 312, 313, 317, 377, 378, 405, 524, 544, 553, 567, 579, 581, 584, 588, 589, 599, 611, 617, 619, 620], "contraint": [64, 66], "ani": [64, 66, 98, 118, 135, 144, 241, 248, 252, 254, 290, 292, 318, 320, 321, 331, 337, 338, 340, 342, 344, 345, 346, 347, 348, 349, 350, 352, 353, 355, 356, 358, 365, 366, 367, 368, 369, 370, 372, 375, 377, 378, 388, 390, 395, 396, 399, 401, 407, 416, 419, 422, 426, 429, 430, 431, 433, 436, 438, 441, 445, 449, 451, 454, 457, 460, 463, 468, 469, 475, 476, 478, 480, 482, 483, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 502, 506, 507, 514, 515, 519, 520, 524, 567, 569, 574, 588, 593, 606, 616], "clang": 64, "x____________": 64, "mean1": 64, "fusedop": [64, 66], "_mklfusedinstancenorm": 64, "_mkllayernorm": [64, 66], "squareddiff": 64, "mean0": 64, "mul1": 64, "constx": 64, "mul2": 64, "mul0": 64, "gelu": [65, 124], "fusegeluoptim": 65, "sqrt": 65, "erf": 65, "samll": 66, "layernorm": 66, "fuselayernormoptim": 66, "remap": 66, "smaller": [66, 196, 199, 202, 240, 572, 585, 610, 618], "case": [66, 70, 154, 184, 196, 199, 201, 202, 203, 224, 239, 240, 247, 248, 256, 271, 276, 284, 285, 294, 305, 306, 480, 484, 490, 567, 569, 572, 573, 574, 578, 580, 584, 589, 593, 605, 606, 607, 610, 611, 613, 615, 618, 620, 621, 622], "fusedbatcnormv3": 66, "And": [66, 212, 248, 521, 568, 585, 591], "restrict": [66, 610, 616], "2d": 66, "3d": [66, 611], "fill": [66, 357, 359, 360, 362, 364, 367, 368, 373, 567, 605, 616, 618], "f": [66, 214, 572, 574, 613], "u": [66, 98, 137, 153, 524, 588], "d": [66, 70, 572, 580, 606, 622], "c": [66, 70, 187, 227, 567, 570, 577, 582, 619], "h": [66, 202, 240, 574, 618], "n": [66, 161, 186, 196, 199, 202, 226, 240, 250, 279, 288, 478, 570, 572, 610, 618], "v": [66, 596, 605, 621], "fusepadwithconv2doptim": 67, "excluded_op_nam": [67, 68, 158, 166, 170, 286, 585, 610], "itex_qdq_mod": [67, 68], "conv3d": [67, 68, 121], "fusepadwithfp32conv2doptim": 68, "fusetransposereshapeoptim": 69, "cse": [70, 94], "graphcseoptim": 70, "introduc": [70, 520, 525, 576, 578, 585, 610, 613, 615, 619, 620], "ident": [70, 75, 76, 106, 135, 161, 279, 519, 572], "three": [70, 165, 185, 225, 248, 271, 276, 282, 307, 309, 521, 525, 567, 569, 576, 582, 586, 599, 608, 613, 614, 616, 617, 619], "child": [70, 99, 617], "b1": 70, "c1c2": 70, "d1": [70, 335], "c1": 70, "c2": 70, "bound": [70, 154, 202, 203, 240, 248, 252, 286, 290, 310, 584, 618], "relu6": [70, 121, 124, 578], "multi": [70, 75, 154, 203, 248, 252, 286, 290, 305, 316, 348, 522, 569, 570, 581, 585, 607, 619], "elim": [70, 75], "grappler": [71, 578], "grappleroptim": 71, "input_output_nam": 71, "opt_cfg": 71, "python": [71, 118, 142, 187, 206, 227, 248, 252, 286, 290, 335, 438, 517, 520, 521, 567, 570, 574, 577, 582, 585, 590, 596, 599, 605, 611, 618, 620], "wrapper": [71, 98, 99, 100, 101, 118, 143, 156, 158, 184, 196, 199, 202, 204, 205, 206, 207, 208, 213, 214, 224, 236, 238, 240, 252, 256, 290, 293, 294, 297, 299, 303, 507, 515, 614], "leverag": [71, 522, 524, 572, 576, 588, 605, 608, 613, 619], "built": [71, 118, 171, 172, 176, 181, 185, 186, 191, 193, 195, 196, 198, 199, 202, 206, 207, 209, 216, 219, 221, 225, 226, 231, 233, 235, 236, 237, 238, 240, 285, 293, 294, 297, 301, 305, 306, 325, 522, 525, 570, 574, 585, 598, 602, 607, 618, 619, 621], "convert_add_to_biasadd": [72, 83, 107], "convert_layout": [72, 83, 107], "convert_leakyrelu": [72, 83, 107], "convert_nan_to_random": [72, 83, 107], "convert_placeholder_to_const": [72, 83, 107], "dequantize_cast_optim": [72, 83, 107], "dilated_contract": [72, 83, 107], "dummy_biasadd": [72, 83, 107], "expanddims_optim": [72, 83, 107], "fetch_weight_from_reshap": [72, 83, 107], "fold_batch_norm": [72, 83, 107], "fold_const": [72, 83, 107], "fuse_biasadd_add": [72, 83, 107], "fuse_column_wise_mul": [72, 83, 107], "fuse_conv_with_math": [72, 83, 107], "fuse_decomposed_bn": [72, 83, 107], "fuse_decomposed_in": [72, 83, 107], "fuse_gelu": [72, 83, 107], "fuse_layer_norm": [72, 83, 107], "fuse_pad_with_conv": [72, 83, 107], "fuse_pad_with_fp32_conv": [72, 83, 107], "fuse_reshape_transpos": [72, 83, 107], "graph_cse_optim": [72, 83, 107], "grappler_pass": [72, 83, 107], "insert_print_nod": [72, 83, 107], "move_squeeze_after_relu": [72, 83, 107], "pre_optim": [72, 83, 107], "remove_training_nod": [72, 83, 107, 135], "rename_batch_norm": [72, 83, 107], "split_shared_input": [72, 83, 107, 135], "strip_equivalent_nod": [72, 83, 107, 142], "strip_unused_nod": [72, 83, 107, 142], "switch_optim": [72, 83, 107], "print": [73, 144, 256, 294, 335, 567, 574, 584, 585, 610, 619], "insertprintminmaxnod": 73, "pre_node_nam": 73, "post_node_nam": 73, "pass": [73, 75, 77, 98, 142, 154, 201, 239, 248, 271, 276, 282, 285, 335, 433, 489, 502, 503, 521, 525, 568, 570, 572, 573, 574, 576, 580, 584, 585, 606, 610, 612, 613, 614, 621], "sampl": [73, 106, 144, 175, 178, 183, 185, 186, 187, 191, 196, 198, 199, 202, 215, 218, 223, 225, 226, 227, 231, 236, 237, 240, 255, 256, 263, 293, 294, 310, 366, 422, 491, 522, 524, 570, 575, 581, 606, 613, 618, 619, 621, 622], "squeez": [74, 521], "movesqueezeafterreluoptim": 74, "match": [74, 75, 98, 106, 118, 201, 239, 252, 253, 290, 291, 302, 572, 606], "pre": [75, 112, 136, 173, 174, 185, 225, 295, 304, 306, 318, 325, 570, 572, 573, 585, 586, 593, 610, 611, 613, 617, 619], "entranc": [75, 176, 179, 196], "preoptim": 75, "get_excluded_node_nam": 75, "exclud": [75, 302, 525, 586, 614], "get_optimized_model": 75, "possibl": [75, 203, 248, 308, 309, 312, 352, 419, 567, 608, 610, 614, 619], "useless": 75, "6": [75, 567, 578, 610, 613, 619, 622], "common": [75, 135, 161, 200, 248, 258, 262, 263, 264, 279, 285, 286, 328, 483, 484, 490, 519, 570, 573, 574, 576, 580, 582, 585, 613], "7": [75, 135, 154, 170, 305, 568, 577, 578, 582, 585, 610, 613, 615, 619, 622], "get_matched_nod": 75, "illustr": [75, 573], "matched_node_a_nam": 75, "has_positive_input": [75, 106], "posit": [75, 106, 161, 202, 240, 519, 567, 584, 588], "neg": [75, 106], "removetrainingnodesoptim": 76, "protected_nod": [76, 135], "types_to_splic": [76, 135], "checknumer": [76, 135], "stopgradi": 76, "tranin": 76, "edg": [76, 302, 404, 406, 411, 471, 618], "fusedbatchnormv2": 77, "renamebatchnormoptim": 77, "due": [77, 610, 613, 617], "histor": 77, "reason": [77, 205, 206, 312, 519, 569, 617, 619], "As": [77, 252, 290, 317, 521, 567, 569, 572, 585, 599, 610, 619], "latter": [77, 111], "former": 77, "chang": [77, 92, 137, 146, 153, 162, 164, 281, 283, 310, 313, 335, 350, 356, 459, 481, 488, 520, 569, 574, 577, 583, 584, 585, 588, 598, 599, 602, 605, 610, 617, 618, 619], "platform": [77, 98, 335, 478, 524, 581, 588, 596, 611, 613, 622], "vnni_bf16": 77, "amx": [77, 524, 611], "instruct": [77, 567, 572, 582, 586, 600, 603, 611, 612, 613], "splitsharedinputoptim": 78, "stripequivalentnodesoptim": 79, "output_node_nam": [79, 80, 127, 128, 132, 135, 142, 298, 303], "unus": [80, 98, 142, 302], "stripunusednodesoptim": 80, "input_node_nam": [80, 127, 132, 135, 142, 298, 303], "switchoptim": 81, "condit": [81, 185, 186, 187, 191, 196, 199, 202, 225, 226, 227, 240, 307, 309, 570, 583, 618, 619], "enter": [81, 599, 605], "freeze_fake_qu": [83, 91, 107], "freeze_valu": [83, 91, 107], "freeze_value_without_calib": [83, 91, 107], "fuse_conv_redundant_dequant": [83, 91, 107], "fuse_conv_requant": [83, 91, 107], "fuse_matmul_redundant_dequant": [83, 91, 107], "fuse_matmul_requant": [83, 91, 107], "meta_op_optim": [83, 91, 107], "post_hostconst_convert": [83, 91, 107], "post_quantized_op_cs": [83, 91, 107], "rnn_convert": [83, 91, 107], "scale_propag": [83, 91, 107], "onnx_graph": [83, 97, 107], "onnx_schema": [83, 97, 107], "tf2onnx_util": [83, 97, 107], "insert_qdq_pattern": [83, 102, 107], "merge_duplicated_qdq": [83, 102, 107], "share_qdq_y_pattern": [83, 102, 107], "freez": [84, 85, 86, 588, 610], "fakequ": 84, "freezefakequantopoptim": 84, "freezevaluetransform": 85, "max_min_data": [85, 86], "postfix": [85, 86], "tensor_data": [85, 335], "th": [85, 86], "gpu": [85, 86, 93, 106, 135, 524, 568, 581, 585, 586, 590, 596, 605, 612, 613], "generate_output_graph": [85, 86], "max_name_valu": [85, 86], "freeze_max": [85, 86], "freeze_min": [85, 86], "generate_output_graph_rang": [85, 86], "freezevaluewithoutcalibtransform": 86, "95": [86, 252, 256, 290, 293, 294, 584, 622], "do_transformation_without_calib": 86, "quantizedconv": [87, 88], "quantizeddeconv": 87, "fuseconvredundantdequantizetransform": 87, "cpu": [87, 88, 89, 90, 106, 135, 170, 286, 335, 524, 568, 581, 585, 586, 588, 590, 596, 605, 609, 611, 612, 614, 617], "_quantizedconv": 87, "_quantizeddeconv": 87, "successor": [87, 88, 89, 90], "requant": [88, 90, 617], "fuseconvrequantizetransform": 88, "two": [88, 106, 144, 154, 161, 162, 164, 187, 191, 192, 196, 203, 227, 231, 232, 236, 252, 279, 283, 285, 290, 316, 318, 335, 521, 522, 567, 570, 572, 574, 576, 578, 584, 585, 586, 610, 613, 614, 616, 619, 621], "fuse_pattern": 88, "sum_pattern": 88, "quantizedmatmul": [89, 90], "fusematmulredundantdequantizetransform": 89, "_quantizedmatmul": [89, 90], "fusematmulrequantizedequantizetransform": 90, "quantizedmatmulwithbiasanddequant": 90, "fusematmulrequantizetransform": 90, "fusematmulrequantizedequantizenewapitransform": 90, "fusematmulrequantizenewapitransform": 90, "meta": [92, 187, 227, 611], "metainfochangingmemopoptim": 92, "metaop": 92, "With": [92, 154, 286, 305, 521, 525, 569, 585, 593, 598, 602, 606, 607, 610, 611, 613, 616, 619, 622], "quantizev2": [92, 94, 98, 121, 122, 124, 128, 136], "hostconst": 93, "posthostconstconvert": 93, "postcseoptim": 94, "decreas": [94, 610], "size": [94, 106, 146, 161, 175, 177, 178, 184, 187, 191, 193, 195, 196, 198, 199, 202, 215, 217, 218, 224, 227, 231, 233, 236, 237, 240, 252, 279, 290, 302, 305, 335, 355, 365, 366, 488, 490, 491, 519, 567, 569, 570, 574, 577, 585, 605, 606, 607, 610, 618, 621, 622], "rnn": [95, 106], "quantizedrnnconvert": 95, "calibration_data": [95, 103], "rnn_detail": 95, "scalepropagationtransform": 96, "direct": [96, 161, 279, 440, 610], "algrothim": 96, "export": [97, 170, 248, 252, 286, 290, 296, 297, 302, 303, 304, 325, 490, 524, 591, 606, 617, 620], "onnxgraph": 98, "output_shap": [98, 99, 118], "extra_opset": 98, "output_nam": [98, 128, 136, 170, 242, 244, 245, 576], "is_subgraph": 98, "graph_nam": 98, "manipul": [98, 99], "extra": [98, 254, 292, 585], "set_config": 98, "field": [98, 106, 135, 170, 187, 227, 252, 285, 286, 290, 521, 525, 567, 574, 585, 616, 619, 621], "is_target": 98, "make_const": 98, "np_val": 98, "skip_convers": [98, 99], "raw": [98, 99, 154, 186, 190, 193, 226, 230, 233, 286, 315, 579, 584, 619], "must": [98, 202, 240, 252, 256, 290, 294, 520, 521, 567, 568, 569, 582, 618], "uniqu": [98, 252, 285, 290, 310, 377, 378, 613], "would": [98, 106, 161, 520, 585, 586, 610, 613], "raw_data": 98, "attr": [98, 99, 100, 101, 106, 135, 142], "output_count": 98, "op_name_scop": 98, "domain": [98, 99, 100, 101, 161, 170, 286, 352, 360, 363, 380, 382, 387, 411, 418, 419, 422, 440, 471, 472, 474, 490, 502, 507, 567, 610, 619], "onnx_domain": 98, "infer_shape_dtyp": 98, "branch": [98, 142, 331, 567], "append_nod": 98, "remove_nod": [98, 106, 302], "safe_remove_nod": 98, "to_delet": 98, "delet": [98, 331, 370, 376, 377, 382, 383, 384, 385, 386, 610], "third": [98, 252, 290, 567, 583], "parti": [98, 252, 290, 583, 613], "consum": [98, 569], "reset_nod": 98, "reset": [98, 144, 149, 151, 249, 255, 256, 287, 293, 294, 305, 503, 544, 584], "create_new_graph_with_same_config": 98, "clean": [98, 156, 201, 204, 239, 355, 366, 369, 376, 377, 382, 384, 385, 386, 473, 489, 520, 585], "is_empty_input": 98, "mai": [98, 106, 135, 142, 265, 266, 268, 269, 270, 305, 519, 520, 567, 569, 577, 583, 586, 598, 602, 609, 611, 613, 619], "place": [98, 304, 573, 582, 610, 617], "argument": [98, 248, 271, 276, 282, 285, 337, 445, 449, 454, 457, 463, 475, 483, 503, 522], "update_node_shape_dtyp": 98, "overrid": [98, 173, 212, 248, 284, 318, 331, 335, 480], "try": [98, 183, 223, 307, 419, 422, 431, 503, 521, 576, 610, 613], "update_proto": [98, 99], "protobuf": [98, 99, 101], "out": [98, 135, 144, 161, 185, 186, 187, 191, 196, 225, 226, 227, 247, 248, 279, 284, 302, 306, 520, 521, 524, 570, 588, 593, 598, 599, 600, 602, 603, 605, 610, 612, 613], "structur": [98, 99, 106, 162, 281, 323, 415, 581, 604, 606, 610, 613, 617, 620, 622], "get_nod": [98, 404], "get_node_by_output": 98, "search_in_parent_graph": 98, "go": [98, 311, 578, 600, 603, 612, 618], "through": [98, 144, 173, 174, 201, 239, 295, 306, 311, 524, 568, 578, 580, 581, 584, 591, 607, 608, 610, 612], "nest": [98, 99, 167], "parent": [98, 106, 162, 164, 275, 281, 283, 302, 617], "get_node_by_output_in_current_graph": 98, "get_node_by_nam": [98, 468], "set_node_by_nam": 98, "is_const": [98, 99], "get_tensor_valu": [98, 99, 617], "as_list": [98, 99], "get_dtyp": 98, "set_dtyp": 98, "copy_dtyp": 98, "src_name": 98, "dst_name": 98, "copi": [98, 135, 170, 280, 286, 335], "get_shap": 98, "get_rank": 98, "len": [98, 144, 170, 196, 199, 202, 240, 310, 570, 574, 618], "set_shap": 98, "copy_shap": 98, "add_graph_output": 98, "topological_sort": [98, 302], "topolog": [98, 302], "make_graph": 98, "doc": [98, 161, 279, 320, 321, 322, 335, 584, 585, 600, 603], "graphproto": [98, 99], "text": [98, 101, 196, 199, 201, 202, 239, 240, 249, 254, 282, 287, 292, 544, 576, 583, 594, 610, 611, 618, 622], "make_model": 98, "graph_doc": 98, "tfqdq_to_onnxqdq": 98, "make_onnx_graph_io": 98, "tensor_value_info": 98, "dump_graph": [98, 106], "debug": [98, 329, 332, 392, 393, 397, 567, 598, 602, 606, 619], "dump_node_statist": 98, "include_attr": 98, "include_subgraph": 98, "counter": [98, 101], "within": [98, 100, 162, 247, 248, 252, 284, 290, 303, 306, 310, 519, 521, 586, 598, 602, 605, 611], "remove_input": 98, "to_be_remov": 98, "input_index": [98, 302], "effici": [98, 146, 152, 522, 569, 572, 588, 608, 611, 619], "otherwis": [98, 99, 174, 187, 196, 199, 202, 227, 240, 318, 519, 570, 600, 603, 612, 618], "look": [98, 524, 525, 578, 584, 621], "old_input": 98, "insert_new_node_on_input": 98, "scalar": [98, 99, 173, 174, 295, 306, 325, 584, 613], "wa": [98, 135, 174, 459, 525, 567, 585, 611, 619], "add_graph_input": 98, "order": [98, 148, 249, 250, 285, 287, 288, 309, 310, 311, 315, 316, 322, 324, 419, 422, 431, 492, 521, 544, 584, 610, 612, 617, 619], "matter": [98, 183, 223, 614], "assum": [98, 201, 239, 252, 263, 290, 525, 578, 605], "main": [98, 146, 173, 209, 282, 318, 470, 507, 521, 574, 579, 585, 592, 594, 606, 610, 613], "insert_node_on_output": 98, "produc": [98, 572], "goe": 98, "insert_new_node_on_output": 98, "find_output_consum": 98, "replace_all_input": 98, "new_input": 98, "_output_to_consum": 98, "determin": [98, 159, 161, 162, 330, 503, 519, 521, 610], "impact": [98, 309, 312, 313, 315, 316, 615, 619], "replace_input": 98, "extract_sub_graph_nod": 98, "outputs_nam": 98, "input_check": 98, "remove_unused_input": 98, "output_id": 98, "delete_unused_nod": 98, "safe_to_remove_nod": 98, "safe": [98, 118, 330, 490, 520], "convert_qdq_nod": 98, "q_node": 98, "dq_node": 98, "delete_qdq_nod": 98, "optimize_conv_add_fus": 98, "apply_onnx_fus": 98, "onnxnod": 99, "data_format": [99, 187, 191, 196, 198, 199, 227, 231, 236, 237], "output_dtyp": 99, "get_value_attr": 99, "get_onnx_attr": 99, "child_nam": 99, "is_nhwc": 99, "is_scalar": 99, "is_graph_input": 99, "is_graph_input_default_const": 99, "is_whil": 99, "get_attr": 99, "get_attr_valu": 99, "get_attr_int": 99, "get_attr_str": 99, "encod": [99, 252, 290, 618], "utf": [99, 201, 239], "8": [99, 109, 158, 170, 201, 239, 286, 480, 521, 578, 582, 610, 611, 619, 622], "set_attr": 99, "set_attr_onnx": 99, "need_skip": 99, "possibli": 99, "scalar_to_dim1": 99, "set_tensor_valu": 99, "new_val": 99, "get_body_graph": 99, "bodi": [99, 519], "set_body_graph_as_attr": 99, "attr_nam": 99, "get_implicit_input": 99, "implicit": 99, "being": [99, 144, 252, 285, 290, 407], "schema": 100, "onnxopschema": 100, "since_vers": 100, "from_onnx_schema": 100, "construct": [100, 185, 188, 189, 192, 196, 199, 200, 205, 206, 207, 208, 210, 225, 228, 229, 232, 293, 294, 297, 299, 303, 328, 519, 570, 574, 610, 619], "has_attribut": 100, "get_schema": 100, "max_inclusive_opset_vers": 100, "get_max_supported_opset_vers": 100, "packag": [100, 310, 343, 351, 357, 359, 360, 362, 363, 364, 367, 368, 371, 373, 392, 393, 397, 400, 406, 408, 411, 412, 418, 437, 439, 444, 447, 450, 451, 453, 456, 462, 467, 471, 505, 525, 567, 577, 582, 605, 606, 611, 615, 619], "set_nam": 101, "find_opset": 101, "assert_error": 101, "bool_val": 101, "error_msg": 101, "messag": [101, 140, 490, 502, 507, 619], "map_numpy_to_onnx_dtyp": 101, "np_dtype": 101, "map_onnx_to_numpy_typ": 101, "onnx_typ": 101, "add_port_to_nam": 101, "nr": 101, "get_tensorflow_node_attr": 101, "pars": [101, 135, 138, 148, 185, 186, 198, 202, 225, 226, 237, 240, 265, 337, 348, 353, 376, 377, 379, 382, 383, 384, 385, 388, 441, 445, 449, 454, 457, 463, 482, 490, 498, 509, 618], "get_tensorflow_tensor_shap": 101, "get_tensorflow_node_shape_attr": 101, "map_tensorflow_dtyp": 101, "get_tensorflow_tensor_data": 101, "convert_tensorflow_tensor_to_onnx": 101, "read_tensorflow_node_attr": 101, "read": [101, 142, 187, 190, 202, 227, 230, 240, 248, 271, 276, 280, 282, 405, 409, 410, 570, 614, 616], "infer_onnx_shape_dtyp": 101, "opset_vers": [101, 136, 170, 242, 244, 245, 576], "input_shap": [101, 118, 189, 229, 301, 419, 422, 431, 569, 570], "input_dtyp": 101, "sometim": [101, 106, 135, 521, 610, 613], "make_onnx_shap": 101, "seqtyp": 101, "tensor_dtyp": 101, "around": 101, "signifi": 101, "make_onnx_inputs_output": 101, "elem_typ": 101, "datatyp": [101, 106, 135, 170, 312, 614, 619], "save_protobuf": 101, "as_text": 101, "is_onnx_domain": 101, "is_list_or_tupl": 101, "are_shapes_equ": 101, "src": [101, 170, 606], "dest": 101, "equal": [101, 137, 142, 153, 335, 584, 610], "get_subgraphs_from_onnx": 101, "model_proto": 101, "over": [101, 187, 191, 196, 227, 231, 236, 252, 256, 290, 294, 302, 310, 575, 579, 581, 584, 596, 605, 612, 619], "df": [101, 298, 303, 304], "initialize_name_count": 101, "avoid": [101, 185, 225, 303, 521, 617], "conflict": [101, 577], "make_nam": 101, "get_index_from_strided_slice_of_shap": 101, "outputs_to_valu": 101, "stride": [101, 196, 199, 202, 240, 265, 618], "slice": 101, "compute_const_folding_using_tf": 101, "const_node_valu": 101, "graph_output": 101, "generategraphwithqdqpattern": 103, "op_wise_config": [103, 127, 132, 320, 321], "quantized_nod": 103, "quantizaiton": 103, "mergeduplicatedqdqoptim": 104, "y": [105, 202, 240, 310, 577, 591, 618], "shareqdqforitexypatternoptim": 105, "break": [105, 574, 585], "graphanalyz": 106, "extend_engin": 106, "analyz": [106, 135, 303, 610, 616, 617], "under": [106, 118, 187, 227, 334, 522, 567, 570, 583, 584, 585, 588, 593, 594, 605, 608, 610, 613, 617, 619], "singleton": [106, 286, 335, 471, 479], "getter": [106, 155, 158, 212, 241, 248, 262, 271, 276, 284, 285, 304, 306, 325, 420], "_graph": 106, "retrun": 106, "get_graph_input_output": 106, "doesn": [106, 196, 199, 202, 240, 285, 489, 525, 574, 585, 606, 621], "know": [106, 205, 206, 241, 248, 271, 276, 476, 574, 615], "clearli": 106, "similar": [106, 585, 612, 619, 621], "featur": [106, 144, 156, 170, 185, 186, 198, 202, 204, 225, 226, 237, 240, 286, 520, 524, 568, 569, 571, 572, 585, 586, 587, 588, 592, 593, 596, 605, 610, 611, 615, 618], "summarize_graph": 106, "py": [106, 142, 144, 162, 250, 252, 253, 254, 281, 288, 290, 291, 292, 506, 521, 525, 567, 574, 582, 585, 590, 592, 593, 594, 600, 603, 613, 615, 617], "writtern": 106, "googl": [106, 524, 586, 611], "query_fusion_pattern_nod": 106, "public": [106, 519, 600, 603], "aggreg": [106, 484], "statu": [106, 355, 366, 369, 374, 376, 382, 384, 385, 473, 486, 502, 515, 519, 569, 607], "pleas": [106, 144, 146, 152, 159, 161, 185, 186, 187, 190, 191, 196, 225, 226, 227, 230, 248, 271, 276, 279, 281, 282, 521, 522, 523, 524, 525, 567, 568, 570, 573, 574, 582, 584, 586, 588, 589, 593, 596, 610, 614, 615, 616, 619, 620], "_search_pattern": 106, "remove_node_with_single_input_output": 106, "rebuild": [106, 589, 598, 602], "except": [106, 286, 335, 471, 479, 480, 490, 505, 515], "fail": [106, 484, 521], "replace_const_nod": 106, "new_const_nod": 106, "target_nod": 106, "old_constant_node_nam": 106, "replace_al": 106, "outdat": 106, "replace_constant_graph_with_constant_nod": 106, "new_nod": 106, "old_end_node_nam": 106, "replace_single_nod": 106, "old_output_node_nam": 106, "old_output_nam": [106, 302], "old_input_node_nam": 106, "old_input_nam": [106, 302], "top": [106, 202, 240, 247, 248, 256, 271, 276, 284, 293, 294, 306, 584, 605, 618], "bottom": [106, 567], "replace_nod": 106, "old_node_nam": 106, "output_nodes_nam": 106, "node_name_detail": 106, "add_nod": [106, 302, 404], "start_node_nam": 106, "end_node_nam": 106, "get_frame_info": 106, "frame": 106, "ordereddict": [106, 318, 324, 377, 382, 491], "parent_frame_detail": 106, "parse_graph": 106, "outputnod": 106, "graphrewriterhelp": 106, "encapsul": [106, 173, 174, 295, 306, 325, 587], "compare_node_attr": 106, "node_a": 106, "node_b": 106, "compar": [106, 144, 256, 294, 305, 318, 567, 573, 584, 613, 616, 617, 619], "create_nod": [106, 135], "create_constant_nod": [106, 135], "set_attr_dtyp": [106, 135], "set_attr_tensor": [106, 135], "set_attr_type_list": [106, 135], "set_attr_string_list": [106, 135], "set_attr_str": [106, 135], "set_attr_int_list": 106, "set_attr_int": [106, 135], "set_attr_float": [106, 135], "set_attr_bool": [106, 135], "generate_int32_bias_for_conv": 106, "bias_tensor": 106, "channel_s": 106, "max_input": 106, "min_input": 106, "max_filter_tensor": [106, 335], "min_filter_tensor": [106, 335], "activation_rang": 106, "weights_rang": 106, "127": [106, 188, 189, 228, 229, 570, 613], "rang": [106, 188, 189, 202, 228, 229, 240, 252, 290, 325, 524, 525, 570, 572, 573, 574, 585, 608, 610, 613, 618], "int32_bia": 106, "generate_int32_bias_for_matmul": 106, "weights_tensor": 106, "input_rang": 106, "max_filter_valu": 106, "min_filter_valu": 106, "gen_valid_sampling_log": 106, "log_path": 106, "log": [106, 140, 203, 248, 271, 276, 329, 332, 338, 355, 366, 369, 376, 382, 384, 385, 441, 475, 481, 482, 483, 484, 489, 503, 521, 567, 596, 616, 617, 619], "analysis_rnn_model": 106, "quantize_lay": [107, 108, 110], "fake_quant": [107, 108, 110], "quantize_config": [107, 108, 110], "quantize_help": [107, 108, 110], "quantize_wrapp": [107, 108, 110], "fuse_qdq_bn": [107, 108, 126], "fuse_qdq_concatv2": [107, 108, 126], "fuse_qdq_conv": [107, 108, 126], "fuse_qdq_deconv": [107, 108, 126], "fuse_qdq_in": [107, 108, 126], "fuse_qdq_matmul": [107, 108, 126], "fuse_qdq_pool": [107, 108, 126], "optimize_qdq": [107, 108, 126], "optimize_lay": [108, 110, 113], "quantize_layer_add": [108, 110, 113], "quantize_layer_bas": [108, 110, 113, 115, 117], "quantize_layer_bn": [108, 110, 113], "fakequantizebas": 109, "abc": [109, 254, 292, 419, 482, 525, 617, 619], "get_config": [109, 118, 516], "serial": [109, 185, 225, 388, 395, 396, 426, 478, 480, 492, 493, 497, 498], "fakequant": 109, "classmethod": [109, 118, 149, 151, 272, 273, 274, 320, 321, 323, 331, 477, 511, 513, 516], "from_config": [109, 118], "instanti": [109, 331, 608], "requir": [109, 118, 212, 248, 252, 285, 290, 303, 305, 308, 311, 318, 337, 339, 348, 351, 406, 412, 419, 422, 424, 431, 437, 444, 445, 446, 447, 449, 450, 451, 453, 456, 457, 462, 467, 471, 521, 525, 567, 568, 569, 573, 574, 578, 585, 586, 587, 589, 599, 605, 609, 610, 613, 615, 616, 617, 619, 621], "per_channel": [109, 135, 578, 621], "num_bit": 109, "symmetr": [109, 613, 618, 619], "narrow_rang": 109, "quantizeconfig": [111, 112, 118], "There": [111, 256, 285, 294, 307, 309, 567, 572, 578, 581, 584, 585, 586, 588, 619, 621], "global": [111, 158, 161, 162, 170, 265, 266, 268, 269, 270, 279, 286, 335, 503, 521, 585, 610, 612, 619], "add_quantize_recip": 111, "layer_nam": [111, 161, 279], "For": [111, 152, 161, 187, 201, 202, 212, 227, 239, 240, 248, 252, 253, 254, 256, 279, 282, 290, 291, 292, 294, 295, 306, 311, 318, 480, 519, 521, 523, 525, 567, 573, 574, 576, 578, 581, 588, 590, 591, 593, 596, 610, 614, 617, 619, 621, 622], "conv5_block3_3_conv": 111, "flase": 111, "conv5_block3_3_add": 111, "query_lay": 111, "layer_recip": 111, "remove_lay": 111, "get_quantize_recip": 111, "is_empti": 111, "clear_quantize_recip": 111, "clear": [111, 183, 223, 249, 255, 256, 287, 293, 294, 525, 544, 578, 584, 585], "class": [112, 148, 263, 413, 414, 521, 522, 569, 570, 572, 584, 585, 596, 607, 608, 615, 617, 619, 621], "init_quantize_config": 112, "begin": [112, 155, 159, 162, 212, 248, 265, 269, 270, 271, 276, 281, 282, 325, 572, 573, 585, 610, 619], "model_nam": [112, 365, 371, 490], "special": [112, 305, 521, 569, 584, 585, 607, 610, 620], "qat_clone_funct": 112, "leav": [112, 599], "quantizewrapp": [112, 118], "wrapped_lay": 112, "config_quantizable_lay": 114, "quantizelayeradd": 115, "quantizelayerbas": [115, 116, 117], "quantizelay": 116, "quantizelayerbatchnorm": 117, "quantizewrapperbas": 118, "trainabl": 118, "sublay": 118, "trainable_weight": 118, "track": [118, 318, 605, 616], "descent": 118, "non_trainable_weight": 118, "thei": [118, 154, 161, 203, 248, 286, 331, 519, 572, 578, 584, 585, 586, 593, 607, 610], "manual": [118, 187, 227, 570, 588, 594, 596, 599], "add_loss": 118, "regular": [118, 163, 249, 280, 287], "eager": [118, 282, 337, 445, 449, 457, 574, 581, 613, 614, 617, 622], "gradienttap": 118, "tensorshap": 118, "compute_output_shap": 118, "caus": [118, 589, 610], "state": [118, 144, 255, 256, 293, 294, 304, 320, 323, 591, 610], "happen": 118, "later": [118, 146, 152, 617], "integ": [118, 155, 158, 161, 162, 164, 241, 248, 252, 256, 263, 279, 281, 283, 290, 294, 525, 613, 619], "query_input_index": 118, "design": [118, 155, 158, 184, 206, 207, 212, 224, 248, 284, 293, 294, 295, 306, 311, 522, 524, 585, 593, 596, 610, 613, 620], "logic": [118, 173, 174, 318, 502, 621], "live": 118, "output_obj": 118, "fusenodestartwithfusedbatchnormv3": [119, 129], "quantizenodebas": [119, 120, 121, 122, 123, 124, 125, 128, 129, 130, 131, 133, 134], "_quantizedfusedbatchnorm": 119, "apply_newly_bn_relu_fus": [119, 129], "match_node_nam": [119, 121, 122, 123, 124, 129, 131, 133], "apply_newly_bn_leakyrelu_fus": [119, 129], "get_longest_fus": [119, 120, 121, 122, 123, 124, 125, 128, 129, 130, 131, 133, 134], "longest": [119, 120, 121, 122, 123, 124, 125, 129, 131, 133, 196, 199, 201, 202, 239, 240, 618], "apply_the_transform": [119, 120, 121, 122, 123, 124, 125, 128, 129, 130, 131, 133, 134], "concatv2": [120, 130, 141, 578], "fusenodestartwithconcatv2": [120, 130], "quantizedconcatv2": [120, 130], "fusenodestartwithconv2d": [121, 131], "apply_conv3d_add_addn_relu_fus": 121, "addn": [121, 131, 578], "apply_conv3d_add_addn_fus": 121, "apply_conv3d_add_relu_fus": 121, "apply_conv3d_add_fus": 121, "apply_conv3d_single_fus": 121, "apply_newly_conv_biasadd_relu_fus": 121, "elu": [121, 124], "sigmoid": [121, 124], "apply_newly_conv_biasadd_fus": 121, "apply_newly_conv_single_fus": 121, "apply_newly_conv_biasadd_addn_relu_fus": 121, "apply_conv_biasadd_hardswish_fus": 121, "hardswish": 121, "apply_newly_conv_biasadd_swishf32_fus": 121, "swishf32": 121, "swish_f32": 121, "apply_newly_conv_biasadd_addn_fus": 121, "patter": 121, "conv2dbackpropinput": 122, "conv3dbackpropinputv2": 122, "fusenodestartwithdeconv2d": 122, "apply_single_deconv2d_fus": 122, "apply_deconv2d_biasadd_fus": 122, "apply_single_deconv3d_fus": 122, "apply_deconv3d_biasadd_fus": 122, "fusedinstancenorm": 123, "fusenodestartwithfusedinstancenorm": 123, "apply_newly_in_relu_fus": 123, "batchmatmul": 124, "batchmatmulv2": 124, "fusenodestartwithmatmul": [124, 133], "apply_matmul_biasadd_relu_fus": [124, 133], "tanh": 124, "apply_matmul_biasadd_fus": [124, 133], "apply_batchmatmulv2_fus": 124, "apply_batchmatmulv2_mul_add_fus": 124, "avgpool": [125, 134, 578], "fusenodestartwithpool": [125, 134], "optimizeqdqgraph": 127, "op_wise_sequ": [127, 132], "quantizegraphbas": [127, 128, 132], "get_quantized_nod": 127, "quantizegraph": 128, "register_transform": 128, "virtual": [128, 138, 611], "deriv": [128, 155, 158, 159, 161, 162, 163, 164, 212, 241, 248, 279, 281, 283], "remove_dead_nod": 128, "longer": [128, 185, 196, 199, 202, 225, 240, 570, 618], "eightbitize_single_input_tensor_nod": 128, "original_nod": 128, "add_op_funct": 128, "add_output_graph_nod": 128, "output_nod": [128, 365], "remove_redundant_quant": 128, "old_graph": 128, "create_nodes_map": 128, "apply_conv_single_fus": 131, "apply_conv_biasadd_relu_fus": 131, "apply_conv_biasadd_fus": 131, "apply_conv_biasadd_addn_relu_fus": 131, "quantizegraphforintel": 132, "itself": [134, 296, 297, 298, 300, 302, 303, 593], "herlper": 135, "quantizegraphhelp": 135, "sever": [135, 164, 196, 199, 202, 240, 283, 522, 567, 572, 573, 581, 585, 586, 598, 602, 610, 612, 618, 619, 621], "staticmethod": 135, "get_sorted_graph": 135, "reorder": 135, "easier": [135, 136, 567, 598, 602, 605, 611], "in_graph": [135, 142], "ouput": 135, "prune": [135, 155, 158, 159, 160, 161, 162, 163, 164, 165, 170, 212, 213, 248, 265, 266, 268, 269, 270, 272, 273, 274, 276, 277, 279, 280, 281, 283, 285, 286, 304, 325, 335, 346, 353, 366, 372, 382, 384, 411, 419, 431, 446, 471, 479, 490, 495, 524, 553, 574, 575, 578, 579, 581, 608, 611, 613, 620, 621], "aren": 135, "uncondition": 135, "copy_attr": 135, "attr_valu": 135, "unique_node_name_from_input": 135, "ensure_tensor_name_has_port": 135, "sure": [135, 161, 162, 164, 279, 281, 283, 419, 567, 568], "explicit": [135, 519], "generate_quantized_weight_nod": 135, "host_op_typ": 135, "input_nod": [135, 365], "weight_bit": 135, "enter_nod": 135, "tensorflowqdqtoonnxqdqconvert": 136, "shape_overrid": 136, "inputs_as_nchw": [136, 242, 244], "default_opset_vers": 136, "duplicate_tf_quantizev2_nod": 136, "tf_graph_optim": 136, "transpose_input": 136, "request": [136, 399, 411, 412, 413, 434, 435, 438, 459, 471, 475, 502, 504, 506, 507, 511, 513, 514, 516, 567, 613], "correct": [137, 153, 165, 252, 253, 254, 256, 280, 290, 291, 292, 293, 294, 318, 440, 519, 567, 588], "biascorrect": 137, "fp32_graph": 137, "weight_empir": 137, "graphtransformbas": [137, 138, 140, 141], "Will": [137, 503, 572, 581], "our": [137, 522, 524, 576, 585, 606, 610, 616, 620], "task": [137, 185, 192, 225, 232, 256, 293, 294, 318, 570, 572, 573, 576, 581, 584, 585, 610], "close": [137, 153], "w_int8": [137, 153], "w_fp32": [137, 153], "ratio": [137, 153, 161, 162, 164, 165, 196, 198, 199, 202, 237, 240, 248, 268, 271, 276, 279, 281, 282, 283, 570, 585, 610, 618, 622], "differ": [137, 146, 149, 151, 153, 156, 161, 178, 187, 202, 204, 218, 227, 240, 247, 248, 249, 255, 256, 261, 262, 264, 273, 279, 284, 285, 287, 293, 294, 305, 306, 307, 330, 519, 521, 522, 544, 567, 569, 570, 572, 574, 575, 576, 580, 581, 584, 585, 587, 598, 602, 607, 610, 613, 617, 618, 619], "minim": [137, 153, 310, 572, 575, 579, 584, 585, 598, 602, 610, 613, 619], "round": [137, 153, 613], "scale_c": [137, 153], "shift": [137, 153, 196, 198, 199, 237, 606, 618], "notic": [137, 153, 203, 248, 583, 615], "empir": [137, 153], "solut": [137, 153, 524, 525, 577, 590, 594, 599, 611, 619], "graphtransform": 138, "input_pb": [138, 140, 141], "parse_input_pb": 138, "pbdef": 138, "generate_input_map": 138, "get_node_name_from_input": 138, "insertlog": 140, "node_name_list": 140, "show_nam": 140, "show_op": 140, "first_n": 140, "summar": [140, 572], "1024": [140, 187, 227, 591], "dump_fp32": 140, "rerang": 141, "rerangequantizedconcat": 141, "rerange_quant": 141, "version1_lt_version2": [142, 335], "version1": [142, 335], "version2": [142, 335], "version1_gt_version2": [142, 335], "greater": [142, 335], "version1_eq_version2": [142, 335], "version1_gte_version2": [142, 335], "version1_lte_version2": [142, 335], "disable_random": 142, "seed": [142, 170, 264, 286, 329, 335, 500, 585, 621], "disabl": [142, 478, 507, 519, 605, 614], "read_graph": 142, "in_graph_is_binari": 142, "write_graph": 142, "out_graph_def": 142, "out_graph_fil": 142, "write": [142, 194, 195, 196, 234, 235, 236, 252, 290, 335, 574, 580, 585, 588, 617], "is_ckpt_format": 142, "model_path": [142, 302, 405, 420, 425, 490], "is_saved_model_format": 142, "saved_model": [142, 248, 258, 303, 411, 418, 428], "get_estimator_graph": 142, "estim": [142, 144, 256, 259, 261, 262, 294, 303, 619], "input_fn": [142, 303], "get_tensor_by_nam": 142, "try_cnt": 142, "consid": [142, 256, 293, 294, 317, 519, 572, 606, 619], "import": [142, 154, 158, 170, 248, 258, 265, 286, 295, 305, 306, 325, 335, 521, 522, 524, 568, 569, 570, 572, 573, 574, 576, 579, 584, 585, 586, 587, 588, 592, 594, 607, 608, 610, 612, 613, 614, 615, 616, 617, 618, 619], "scope": [142, 155, 212, 248, 301, 585], "suffix": 142, "time": [142, 170, 196, 199, 202, 240, 256, 286, 293, 294, 305, 310, 335, 476, 482, 483, 488, 503, 574, 577, 585, 593, 595, 598, 602, 605, 606, 607, 610, 611, 613, 616, 617, 618, 619], "got": [142, 577, 617], "iterator_sess_run": 142, "sess": [142, 303], "iter_op": [142, 303], "feed_dict": [142, 184, 224], "output_tensor": [142, 303], "integr": [142, 156, 204, 525, 567, 585, 606], "makeiter": 142, "predict": [142, 196, 199, 202, 206, 207, 240, 249, 253, 254, 255, 256, 287, 291, 292, 293, 294, 522, 544, 572, 584, 596, 617, 618], "pred": [142, 255, 256, 293, 294, 584], "collate_tf_pr": 142, "collat": [142, 148], "tbe": 142, "get_input_output_node_nam": 142, "fix_ref_type_of_graph_def": 142, "fix": [142, 162, 185, 225, 281, 520, 570, 592, 610, 619], "ref": 142, "tool": [142, 242, 244, 335, 524, 525, 585, 598, 602, 610, 611, 613], "strip_unused_lib": 142, "offici": [142, 249, 253, 254, 287, 291, 292, 519, 567, 584], "r1": 142, "15": [142, 578, 622], "get_graph_def": 142, "auto_input_output": 142, "get_model_input_shap": 142, "inout": 142, "get_tensor_val_from_graph_nod": 142, "tensor_v": 142, "int8_node_name_revers": 142, "revers": [142, 567], "tf_diagnosis_help": 142, "generate_feed_dict": 142, "input_tensor": [142, 303, 304], "bf16modulewrapp": 143, "nn": [143, 144, 148, 156, 158, 170, 204, 213, 214, 242, 245, 286, 295, 306, 331, 334, 521, 572, 576, 585, 587, 617], "bf16modul": 143, "mixed_precision_model": 143, "bf16_symbolic_trac": 143, "fx_sub_module_list": 143, "_description_": 143, "node_collector": 144, "record": [144, 148, 156, 185, 186, 187, 191, 193, 195, 196, 204, 211, 225, 226, 227, 233, 305, 309, 570, 616, 617, 619], "hook_fn_act": 144, "inp": 144, "outp": 144, "hessiantrac": 144, "refer": [144, 146, 152, 159, 161, 165, 185, 225, 248, 249, 250, 255, 256, 271, 276, 279, 281, 282, 287, 288, 293, 294, 521, 525, 544, 568, 569, 570, 573, 574, 580, 582, 583, 584, 585, 586, 588, 593, 596, 607, 612, 615, 618, 619], "yao": 144, "zhewei": 144, "et": 144, "al": 144, "pyhessian": 144, "network": [144, 159, 161, 281, 313, 522, 567, 572, 573, 576, 585, 609, 611, 613, 619], "2020": 144, "ieee": [144, 586], "confer": [144, 610], "big": 144, "dong": 144, "zhen": 144, "hawq": [144, 313, 528, 619], "v2": [144, 313, 574, 582, 594, 615, 619, 622], "advanc": [144, 499, 519, 524, 613, 620, 621], "system": [144, 154, 203, 331, 335, 478, 505, 506, 568, 591, 610], "33": [144, 622], "18518": 144, "18529": 144, "http": [144, 159, 161, 185, 187, 225, 227, 249, 250, 252, 253, 254, 279, 281, 282, 287, 288, 290, 291, 292, 515, 521, 524, 567, 570, 579, 582, 583, 585, 594, 600, 603, 615], "github": [144, 161, 185, 225, 249, 250, 253, 254, 279, 282, 287, 288, 291, 292, 434, 436, 477, 520, 524, 567, 570, 575, 579, 582, 583, 585, 594, 600, 603, 615], "com": [144, 161, 185, 225, 249, 250, 253, 254, 279, 282, 287, 288, 291, 292, 483, 519, 524, 567, 570, 579, 582, 583, 585, 588, 594, 615, 616, 622], "openvinotoolkit": 144, "nncf": 144, "blob": [144, 161, 249, 250, 253, 254, 279, 287, 288, 291, 292, 585, 594], "develop": [144, 305, 490, 520, 521, 582, 585, 586, 588, 594, 605, 611, 613, 614, 616], "mse_metric_gap": [144, 390], "fp32_tensor": [144, 390], "euclidean": [144, 390, 572], "distanc": [144, 390, 572], "get_fused_map": 144, "weight_to_op": 144, "get_devic": 144, "register_act_grad_hook": 144, "append": [144, 148, 149, 151, 170, 285, 302, 310, 320, 322, 521, 573, 585, 608], "reset_act_gradient_and_hook": 144, "get_param": [144, 202, 240], "get_vthv_weight": 144, "num_sampl": [144, 256, 293, 294], "vthv": 144, "get_weight_trac": 144, "op_name_to_trac": 144, "get_act_trac": 144, "res_dict": 144, "get_act_gap": 144, "gap": [144, 576, 587], "get_avg_trac": 144, "averag": [144, 252, 253, 254, 256, 290, 291, 292, 293, 294, 584, 585, 619], "compare_weight": 144, "float_dict": 144, "quantized_dict": 144, "usag": [144, 184, 224, 248, 252, 258, 285, 290, 305, 490, 567, 570, 574, 575, 584, 588, 596, 607, 612, 618], "wt_compare_dict": 144, "float_model": 144, "state_dict": [144, 574, 617], "compute_error": 144, "weight_dict": 144, "hawq_top": 144, "modul": [145, 158, 213, 242, 248, 261, 267, 277, 278, 479, 487, 495, 521, 567, 569, 572, 576, 581, 584, 585, 587, 610, 612, 614, 617, 620], "torchsmoothqu": 146, "traced_model": [146, 147], "accur": [146, 152], "larg": [146, 152, 252, 290, 524, 569, 572, 585, 610, 622], "languag": [146, 152, 249, 287, 519, 544, 576, 610, 611], "free": [146, 152, 173, 174, 306, 318, 519, 524, 584, 594, 599, 607, 616], "absorb": [146, 152], "inplac": 146, "you": [146, 183, 185, 223, 225, 252, 281, 290, 520, 521, 567, 570, 574, 576, 582, 583, 584, 588, 590, 591, 593, 598, 602, 605, 606, 610, 615, 616, 617, 620], "convtranspose2d": 146, "100": [146, 154, 170, 187, 191, 196, 227, 252, 286, 290, 568, 570, 574, 580, 585, 612, 613, 618, 619, 621, 622], "balanc": [146, 193, 195, 196, 233, 609], "difficulti": 146, "Not": [146, 154, 155, 203, 212, 248, 271, 276, 286, 306, 320, 321, 322, 325, 335, 474, 522], "architectur": [146, 154, 203, 259, 260, 261, 262, 264, 524, 553, 567, 568, 572, 585, 610, 611, 620], "orig": 146, "benefit": [146, 608, 610], "graphtrac": 146, "trace_and_fuse_sub_graph": 147, "get_embedding_contigu": 148, "embed": 148, "contigu": [148, 610], "collate_torch_pr": 148, "collate_result": 148, "input2tupl": 148, "append_attr": 148, "fx_model": 148, "fx_white_list": 148, "generate_activation_observ": 148, "observ": [148, 616, 617, 619], "what": [148, 154, 162, 183, 223, 286, 325, 519, 567], "check_cfg_and_qconfig": 148, "op_infos_from_cfg": 148, "output_tensor_ids_op_nam": 148, "paser_cfg": 148, "ops_nam": 148, "get_quantizable_ops_from_cfg": 148, "input_tensor_ids_op_nam": 148, "auto_copi": 148, "fetch_modul": 148, "set_modul": 148, "new_modul": 148, "simple_infer": 148, "get_example_input": 148, "example_inp": 148, "get_fallback_ord": 148, "fall": 148, "confid": 148, "ordered_op": 148, "get_mse_order_per_fp32": 148, "influenc": [148, 610], "fallback_ord": 148, "get_mse_order_per_int8": 148, "get_torch_vers": 148, "algorithm_registri": [149, 151], "algorithm_typ": [149, 151], "locat": [149, 151, 202, 240, 574, 591, 598, 602, 605, 613, 615, 618, 621], "registr": [149, 151, 187, 191, 194, 195, 196, 199, 202, 209, 227, 231, 234, 235, 236, 238, 240, 274], "support_algorithm": [149, 151], "algorithmschedul": [149, 151], "conf": [149, 151, 154, 155, 158, 170, 173, 174, 203, 248, 257, 258, 265, 266, 268, 269, 270, 271, 276, 285, 286, 295, 296, 297, 302, 303, 304, 305, 306, 307, 310, 311, 313, 315, 316, 317, 318, 320, 322, 325, 498, 501, 521, 522, 524, 568, 572, 579, 580, 585, 586, 587, 608, 613, 614, 616, 619], "phase": [149, 151, 162, 285, 522, 585, 610, 613, 614, 619], "adaptor": [149, 151, 212, 248, 324, 328, 524, 534, 581, 614, 615, 617, 620], "append_algorithm": [149, 151], "reset_exec_algorithm": [149, 151], "fastbiascorrect": [150, 153], "fast_bias_correct": [151, 286], "weight_correct": [151, 286], "kernel": [152, 478, 525, 609, 610, 619], "weightcorrect": 153, "ep": [153, 586], "1e": [153, 621], "05": [153, 252, 256, 290, 293, 294, 483, 584, 622], "set_env_var": [154, 203], "env_var": [154, 203], "overwrite_exist": [154, 203], "env": [154, 203, 475, 483, 577], "alreadi": [154, 187, 201, 203, 227, 239, 476, 503, 525, 567, 570, 581, 600, 603, 619], "set_all_env_var": [154, 203], "physic": [154, 203, 519, 568], "core": [154, 203, 248, 286, 335, 355, 567, 568, 583, 598, 602, 609, 622], "get_architectur": [154, 203], "get_threads_per_cor": [154, 203], "thread": [154, 203, 248, 506, 567, 569, 609], "get_thread": [154, 203], "get_physical_id": [154, 203], "socket": [154, 203, 335, 478, 507, 609, 622], "get_core_id": [154, 203], "get_bounded_thread": [154, 203], "core_id": [154, 203], "bind": [154, 203], "benchmarkconfig": [154, 170, 286, 568, 585], "goal": [154, 174, 241, 247, 248, 270, 271, 276, 284, 286, 295, 305, 306, 318, 491, 569, 608, 613, 619], "b_dataload": [154, 170, 203, 248, 286, 568, 585], "b_func": [154, 203, 248, 286, 568], "summary_benchmark": [154, 203, 248, 286], "config_inst": [154, 203, 248, 286], "raw_cmd": [154, 286], "command": [154, 203, 248, 286, 325, 355, 366, 369, 376, 382, 384, 385, 452, 475, 483, 503, 567, 574, 588, 590, 593, 598, 602, 606], "trigger": [154, 162, 203, 248, 281, 286, 520], "generate_prefix": [154, 203, 248, 286], "core_list": [154, 203, 248, 286], "numactl": [154, 203, 248, 286, 577, 591, 599], "run_inst": [154, 203, 248, 286], "fit": [154, 161, 170, 286, 295, 306, 310, 325, 521, 524, 568, 569, 570, 574, 579, 580, 584, 585, 586, 587, 610, 613, 614], "prefer": [154, 247, 248, 284, 295, 306, 610], "space": [154, 162, 173, 174, 247, 248, 254, 259, 261, 262, 263, 264, 284, 292, 295, 305, 306, 307, 308, 310, 312, 313, 315, 317, 318, 320, 322, 490, 519, 520, 522, 525, 610, 613, 621], "cores_per_inst": [154, 170, 355, 491, 568, 585, 612], "num_of_inst": [154, 170, 491, 568, 585, 612], "eval_dataload": [154, 155, 170, 173, 174, 212, 247, 248, 258, 285, 295, 306, 307, 310, 311, 313, 315, 316, 317, 318, 325, 524, 568, 579, 580, 585, 619], "compon": [155, 158, 241, 248, 259, 261, 271, 276, 284, 285, 286, 471, 506, 509, 521, 574, 582, 583, 588, 605, 608, 609], "quantizationawaretrainingcallback": [155, 158, 325], "pruningcallback": [155, 158, 325], "distillationcallback": [155, 158], "basecallback": [155, 158], "distil": [155, 158, 170, 204, 211, 212, 248, 286, 325, 524, 553, 575, 579, 581, 608, 620, 621], "train_func": [155, 212, 248, 285, 306, 325, 574, 585, 613], "eval_func": [155, 173, 174, 212, 247, 248, 258, 285, 295, 305, 306, 307, 310, 311, 313, 315, 316, 317, 318, 325, 521, 569, 570, 572, 573, 574, 585, 614, 619, 621], "on_train_begin": [155, 162, 212, 248, 270, 271, 276, 281, 282, 325, 521, 572, 573, 585, 608, 610, 613], "Be": [155, 158, 212, 248, 252, 265, 269, 270, 290, 325], "on_train_end": [155, 158, 162, 212, 248, 270, 271, 276, 281, 282, 325, 572, 573, 585, 608, 610, 613], "epoch": [155, 158, 162, 212, 241, 248, 265, 268, 269, 270, 271, 276, 281, 282, 325, 572, 573, 574, 585, 608, 610, 621], "on_step_begin": [155, 159, 162, 212, 248, 265, 268, 269, 270, 271, 276, 281, 282, 325, 328, 572, 573, 585, 608, 610], "batch_id": [155, 212, 248, 265, 268, 269, 270, 325], "on_after_compute_loss": [155, 212, 248, 271, 276, 325, 572, 573, 585, 608], "student_output": [155, 156, 204, 212, 248, 325, 572, 573], "student_loss": [155, 156, 204, 212, 248, 325, 572, 573], "teacher_output": [155, 156, 204, 212, 241, 248, 325], "on_before_optimizer_step": [155, 159, 162, 163, 212, 248, 266, 270, 281, 282, 325, 572, 573, 585, 608, 610], "on_after_optimizer_step": [155, 159, 162, 163, 212, 248, 281, 282, 325, 585, 610], "on_before_ev": [155, 162, 212, 248, 281, 282, 325], "on_after_ev": [155, 162, 212, 248, 281, 282, 325], "on_step_end": [155, 162, 212, 248, 265, 268, 269, 270, 271, 276, 281, 282, 325, 328, 572, 573, 585, 608, 610], "register_hook": [155, 212, 248], "input_arg": [155, 212, 248], "input_kwarg": [155, 212, 248], "reserv": [155, 173, 174, 212, 248, 265, 285], "pre_process": [155, 212, 241, 248, 259, 261, 271, 276, 284, 295, 574], "routinu": [155, 248, 284, 295, 306], "remove_hook": [155, 304], "generate_hook": [155, 158, 241, 248, 271, 276], "knowledg": [155, 156, 158, 170, 204, 241, 248, 573, 575, 579, 581, 585, 587, 621], "transfer": [155, 158, 192, 232, 241, 248, 570, 572, 573, 585], "teacher": [155, 156, 158, 170, 204, 241, 248, 286, 572, 573, 585, 622], "student": [155, 156, 158, 185, 204, 211, 225, 241, 248, 570, 572, 573, 622], "distillation_conf": [155, 158, 166, 241, 248], "_epoch_ran": [155, 158, 241, 248], "how": [155, 158, 159, 161, 162, 196, 199, 202, 240, 241, 248, 279, 520, 521, 523, 525, 567, 569, 570, 572, 573, 574, 580, 585, 599, 600, 603, 604, 605, 610, 613, 618, 619, 620, 621], "much": [155, 158, 159, 196, 199, 202, 240, 241, 248, 572, 599, 610, 618], "ran": [155, 158, 241, 248], "eval_frequ": [155, 158, 241, 248], "frequenc": [155, 158, 162, 241, 248, 281, 585, 609, 610, 621], "term": [155, 158, 162, 163, 241, 248, 520, 572, 583, 584, 607, 608, 619], "best_scor": [155, 158, 241, 248], "best_model": [155, 158, 241, 248], "found": [155, 158, 241, 248, 259, 260, 261, 262, 302, 310, 316, 474, 490, 507, 524, 567, 586, 593, 619], "teacher_model": [155, 156, 158, 170, 204, 241, 248, 286, 572, 573, 585], "student_model": [155, 156, 158, 204, 241, 248, 585], "train_cfg": [155, 158, 241, 248, 328], "init_train_cfg": [155, 158, 241, 248], "create_criterion": [155, 158, 241, 248], "critet": [156, 204], "tensorflowknowledgedistillationloss": [156, 204], "pytorchknowledgedistillationloss": [156, 204, 585], "pytorchintermediatelayersknowledgedistillationloss": [156, 204], "tensorflowcriterion": [156, 204], "pytorchcriterion": [156, 204], "criterion_cl": [156, 204], "criterion_registri": [156, 204], "criterion_typ": [156, 204], "registry_criterion": [156, 204], "knowledgedistillationframework": [156, 204], "knowledgedistillationloss": [156, 204, 585, 621], "temperatur": [156, 170, 204, 585, 621], "loss_typ": [156, 170, 204, 585, 621], "ce": [156, 170, 204, 585, 621], "loss_weight": [156, 170, 204, 585, 621], "teacher_model_forward": [156, 204], "notimplementederror": [156, 204, 255, 256, 293, 294], "teacher_student_loss_c": [156, 204], "student_targets_loss_c": [156, 204], "groud": [156, 204], "truth": [156, 204, 253, 254, 291, 292], "loss_cal": [156, 204], "loss_cal_sloss": [156, 204], "softcrossentropi": [156, 204], "logit": [156, 204, 572], "ground": [156, 204, 253, 254, 291, 292], "kullbackleiblerdiverg": [156, 204], "pytorchknowledgedistillationlosswrapp": [156, 204], "param_dict": [156, 204, 209], "tensorflowknowledgedistillationlosswrapp": [156, 204], "tensorflowknowledgedistillationlossextern": [156, 204], "intermediatelayersknowledgedistillationloss": [156, 204, 498], "layer_map": [156, 170, 204], "add_origin_loss": [156, 170, 204], "init_loss_func": [156, 204], "init_feature_match": [156, 204], "student_featur": [156, 204], "teacher_featur": [156, 204], "matcher": [156, 204, 606], "clear_featur": [156, 204], "pytorch": [156, 161, 184, 185, 187, 190, 191, 194, 195, 196, 199, 202, 204, 209, 211, 224, 225, 227, 230, 231, 234, 235, 236, 238, 240, 242, 245, 246, 247, 248, 255, 256, 257, 277, 279, 282, 284, 286, 293, 294, 295, 304, 306, 316, 329, 331, 335, 338, 411, 418, 441, 451, 471, 521, 522, 524, 525, 569, 572, 573, 575, 576, 578, 581, 582, 585, 587, 588, 590, 593, 594, 595, 596, 605, 610, 611, 612, 615, 619, 621], "register_hooks_for_model": [156, 204], "attributeerror": [156, 204], "remove_all_hook": [156, 204], "pytorch_linear_feature_match": [156, 204], "pytorchintermediatelayersknowledgedistillationlosswrapp": [156, 204], "selfknowledgedistillationloss": [156, 204, 498], "selfknowledg": [156, 204], "pytorchselfknowledgedistillationloss": [156, 204], "l2diverg": [156, 204], "feature1": [156, 204], "feature2": [156, 204], "pytorchselfknowledgedistillationlosswrapp": [156, 204], "pruner": [158, 248, 265, 266, 267, 268, 269, 271, 276, 277, 279, 282, 286, 498, 501, 585, 610, 621], "criteria": [158, 160, 247, 248, 271, 276, 279, 281, 284, 306, 316, 521, 605], "reg": [158, 160, 162], "schedul": [158, 160, 162, 163, 248, 268, 277, 281, 286, 318, 553, 585, 608], "prepare_prun": [158, 213, 214], "opt": [158, 213, 214, 593], "weightpruningconfig": [158, 170, 213, 214, 286, 585, 608, 610], "pruning_config": [158, 170, 286, 585, 610], "target_spars": [158, 161, 166, 170, 286, 585, 610, 612, 621], "9": [158, 170, 286, 521, 582, 585, 610, 612, 619, 621], "pruning_typ": [158, 166, 170, 286, 585, 610], "snip_momentum": [158, 159, 170, 286, 585, 610], "4x1": [158, 161, 170, 275, 286, 585, 610, 622], "start_step": [158, 162, 166, 170, 281, 286, 585, 610, 612], "end_step": [158, 162, 166, 170, 281, 286, 585, 610, 612], "pruning_scop": [158, 166, 170, 286, 585, 610], "pruning_frequ": [158, 162, 166, 170, 286, 585, 610], "min_sparsity_ratio_per_op": [158, 161, 166, 170, 286, 585, 610], "max_sparsity_ratio_per_op": [158, 161, 162, 166, 170, 286, 585, 610], "98": [158, 170, 286, 585, 610, 612, 622], "sparsity_decay_typ": [158, 166, 170, 286, 585, 610], "exp": [158, 170, 286, 585, 610], "pruning_op_typ": [158, 166, 170, 286, 585, 610], "similiar": [158, 166, 170, 286], "local_config": [158, 165, 170, 265, 266, 268, 269, 270, 286], "update_config": [158, 170, 276, 286], "10": [158, 170, 187, 227, 252, 286, 290, 310, 468, 524, 567, 568, 570, 582, 585, 610, 612, 618, 619, 622], "weight_compress": [158, 170, 286, 612, 621], "register_criterion": 159, "registri": [159, 161, 162, 163, 164, 279, 281, 283, 522], "get_criterion": 159, "pruningcriterion": 159, "about": [159, 302, 390, 419, 475, 477, 478, 483, 484, 519, 567, 569, 585, 614, 620, 622], "module_nam": [159, 162, 163, 164, 281, 283, 335, 490], "score": [159, 161, 162, 163, 249, 250, 252, 253, 254, 256, 279, 281, 287, 288, 290, 291, 292, 293, 294, 309, 313, 316, 328, 521, 544, 584, 607, 610, 616, 619], "magnitudecriterion": 159, "magnitud": [159, 248, 256, 266, 267, 286, 294, 581, 610], "criterion_class": 159, "gradientcriterion": 159, "absolut": [159, 170, 256, 265, 268, 294, 483, 584, 585, 609, 610, 613, 619], "snipcriterion": 159, "snip": [159, 281, 581, 610, 622], "product": [159, 581, 586, 588, 589, 605, 609, 611, 613, 616, 619], "shot": [159, 164, 212, 248, 281, 283, 522, 581, 585, 610, 611], "arxiv": [159, 281, 610], "org": [159, 252, 281, 290, 520, 521, 567, 582, 600, 603], "1810": [159, 281], "02340": [159, 281], "snipmomentumcriterion": 159, "momentum": [159, 281, 581, 585, 610, 621], "mechan": [159, 616, 620], "preserv": 159, "register_pattern": [161, 279], "get_pattern": [161, 279], "assertionerror": [161, 162, 165, 279, 280, 281, 295], "basepattern": [161, 163], "basic": [161, 170, 201, 239, 259, 261, 279, 286, 314, 318, 320, 321, 325, 581, 582, 585, 612, 616], "unit": [161, 279, 482, 490, 520], "is_glob": [161, 279], "contrast": [161, 279, 618], "keep_mask_lay": 161, "invalid_lay": 161, "sparsiti": [161, 162, 164, 165, 248, 268, 269, 270, 271, 275, 276, 279, 281, 282, 283, 298, 303, 304, 335, 524, 570, 581, 585, 620, 622], "reach": [161, 164, 174, 279, 283, 305, 318, 520, 524, 569, 610, 619], "reduce_tensor": 161, "dim": [161, 202, 240, 274, 310, 618], "along": [161, 483, 582], "get_mask": [161, 279], "target_sparsity_ratio": [161, 162, 279, 281], "pre_mask": [161, 279], "unprun": 161, "get_masks_glob": [161, 279], "get_masks_loc": [161, 279], "get_single_mask_per_target_ratio": 161, "exact_sparsity_ratio": [161, 279], "get_block_size_dict": [161, 279], "get_sparsity_ratio": [161, 165, 248, 271, 276, 279, 282], "return_dict": 161, "zero_cnt": 161, "total_cnt": 161, "get_pattern_lock_mask": [161, 279], "obtain": [161, 163, 164, 165, 279, 280, 283, 521, 576, 610, 616, 619], "lock": [161, 269, 270, 279, 581, 608, 610], "check_layer_valid": 161, "block_siz": [161, 279], "get_reduced_masks_from_data": 161, "update_residual_cnt": 161, "left": [161, 196, 198, 199, 202, 237, 240, 567, 599, 605, 618], "get_sparsity_ratio_each_lay": 161, "sparsity_ratio": 161, "total": [161, 162, 164, 196, 199, 202, 240, 256, 281, 283, 293, 294, 298, 303, 304, 305, 570, 610, 618], "cnt": [161, 585], "sparsityinfo": 161, "adjust_ratio": 161, "key_new_spars": 161, "max_sparsity_ratio": 161, "min_sparsity_ratio": 161, "final_target_sparsity_ratio": 161, "examin": [161, 610], "propos": [161, 262, 522, 525, 572, 586, 610], "adjust_sparsity_ratio": 161, "patternnxm": [161, 279], "nxm": [161, 162, 275, 279, 610], "kept": [161, 279], "height": [161, 196, 198, 199, 202, 237, 240, 279, 574, 610, 618, 621], "width": [161, 196, 198, 199, 202, 237, 240, 279, 574, 610, 613, 618, 621], "vertic": [161, 202, 240, 279, 618], "becaus": [161, 196, 199, 202, 240, 252, 279, 290, 521, 610, 613, 618, 619], "hidden": [161, 279, 490, 525, 610], "calul": [161, 279], "ration": [161, 279], "block_size_1": [161, 279], "block_size_2": [161, 279], "block_wis": 161, "get_sparsity_ratio_progress": 161, "reshape_orig_to_pattern": 161, "s1": 161, "s2": 161, "reshape_reduced_to_orig": 161, "orig_shap": 161, "permut": [161, 202, 240, 618], "reduce_scor": 161, "recalcul": [161, 245], "get_mask_per_threshold": 161, "cur_target_sparsity_ratio": 161, "keep_exact_sparsity_ratio": 161, "togeth": [161, 196, 199, 202, 240, 279, 285, 572, 582, 592, 611, 617, 618], "keep_pre_mask": [161, 279], "remain": [161, 593], "unchang": [161, 279], "count_new_masked_cnt": 161, "new_added_mask": 161, "update_new_added_mask": 161, "cur_mask": 161, "procedur": [161, 166, 522], "bacaus": 161, "update_progressive_mask": 161, "progressive_step": 161, "progressive_config": 161, "progress": [161, 162, 164, 187, 227, 283, 599, 605, 610], "update_progressive_masks_linear": 161, "update_progressive_masks_scor": 161, "update_progressive_masks_loc": 161, "update_progressive_masks_glob": 161, "patternninm": [161, 279], "continu": [161, 252, 279, 290, 311, 522, 585, 606, 610], "master": [161, 249, 250, 253, 254, 279, 282, 287, 288, 291, 292, 318, 585, 619], "md": [161, 279, 574], "get_least_ninm_mask_from_data": 161, "least": [161, 256, 282, 294, 484, 585, 610, 619], "elementwis": [161, 265], "sparisti": 161, "get_ele_mask_per_threshold": 161, "least_ninm_mask": 161, "least_m_in_m_mask": 161, "register_prun": [162, 281], "parse_valid_pruner_typ": 162, "get_prun": [162, 281], "cuurent": [162, 281], "baseprun": 162, "current_sparsity_ratio": [162, 281], "global_step": [162, 281], "show": [162, 335, 519, 567, 572, 574, 585, 591, 606, 610, 619, 620], "mask_weight": [162, 281], "formal": [162, 281], "mask_weights_gener": 162, "input_mask": [162, 202, 240, 585], "local_step": [162, 281, 282], "update_mask": 162, "check_is_pruned_step": [162, 281], "basicprun": 162, "arrang": [162, 186, 187, 190, 191, 196, 226, 227, 230, 570, 610], "proce": 162, "regul": 162, "set_global_step": 162, "patternlockprun": [162, 269, 281], "spars": [162, 248, 271, 276, 281, 570, 611], "progressiveprun": 162, "interpol": [162, 196, 199, 202, 240, 584, 610, 618], "fine": [162, 185, 225, 570, 591, 610, 611, 613], "grain": [162, 611], "improv": [162, 310, 520, 585, 588, 605, 606, 610, 613, 614, 619, 622], "interv": [162, 610], "check_progressive_valid": 162, "check_is_pruned_progressive_step": 162, "update_masks_progress": 162, "print_progressive_spars": 162, "register_reg": 163, "regulariz": 163, "get_reg_typ": 163, "get_reg": 163, "basereg": 163, "grouplasso": 163, "coeff": 163, "lasso": [163, 266, 581, 610], "select": [163, 185, 225, 260, 261, 316, 521, 522, 567, 581, 582, 605, 610, 613, 617, 619], "reg_term": 163, "coeffient": 163, "relat": [163, 241, 248, 252, 271, 276, 279, 290, 328, 418, 421, 423, 428, 508, 511, 512, 513, 516, 588, 610, 621], "register_schedul": [164, 283], "get_schedul": [164, 283], "pruningschedul": 164, "dens": [164, 248, 271, 276, 283, 610, 622], "gradual": [164, 283, 610], "update_sparsity_ratio": [164, 283], "target_ratio": [164, 283], "current_prune_step": [164, 283], "total_prune_step": [164, 283], "init_ratio": 164, "oneshotschedul": [164, 283], "iterativeschedul": [164, 283], "init_sparsity_ratio": 164, "elementwise_over_matmul_gemm_conv": [165, 248, 271, 276, 282], "elementwise_over_al": [165, 248, 271, 276, 282], "blockwise_over_matmul_gemm_conv": [165, 248, 271, 276, 282], "check_config": [165, 280], "prune_config": [165, 280], "everyth": [165, 280, 593], "reset_none_to_default": 165, "undefin": [165, 280], "update_param": [165, 357], "process_weight_config": 165, "global_config": [165, 265, 266, 268, 269, 270], "default_config": 165, "pruners_info": 165, "process_yaml_config": 165, "check_key_valid": 165, "template_config": 165, "user_config": 165, "process_and_check_config": [165, 280], "process_config": [165, 280], "parse_to_prun": [165, 280], "keep": [165, 279, 280, 311, 521, 525, 604, 605, 615, 619], "generate_pruner_config": 165, "dotdict": [165, 166, 305], "prunerv2": 166, "reg_typ": 166, "criterion_reduce_typ": 166, "resume_from_pruned_checkpoint": 166, "cfg_fname": 166, "parser": [166, 286, 348, 353, 471, 475, 479, 509], "quantization_conf": 166, "pruning_conf": 166, "graph_optimization_conf": [166, 247, 248], "mixedprecision_conf": 166, "benchmark_conf": 166, "nasconfig": [166, 248, 260, 261, 262, 522], "search_spac": [166, 259, 261, 262, 263, 264], "search_algorithm": [166, 248, 261, 262, 286, 522], "na": [166, 248, 286, 299, 553, 581], "deep_get": [167, 305], "dot": [167, 490, 586, 613], "eg": [167, 187, 191, 196, 227, 231, 236, 570, 612], "person": [167, 519, 611], "john": 167, "deep": [167, 524, 525, 569, 581, 582, 585, 586, 588, 590, 593, 594, 596, 599, 605, 611, 613, 619, 620, 622], "deep_set": [167, 305], "sex": [167, 519], "male": 167, "notat": 167, "check_valu": 170, "supported_typ": 170, "supported_valu": 170, "_datatyp": 170, "random_se": [170, 310, 325, 374, 500, 585, 621], "1978": 170, "workspac": [170, 286, 303, 304, 325, 334, 335, 376, 377, 382, 384, 385, 386, 416, 489, 491, 500, 587], "default_workspac": 170, "resume_from": [170, 335], "warmup": [170, 491, 568, 585, 612], "inter_num_of_thread": [170, 585, 612], "intra_num_of_thread": [170, 585, 612], "accuracycriterion": [170, 458, 585, 619], "higher_is_bett": [170, 584, 619, 621], "rel": [170, 305, 585, 612, 619, 621, 622], "tolerable_loss": [170, 585, 619], "01": [170, 585, 609, 612, 619, 621, 622], "accuracy_criterion": [170, 286, 305, 585, 607, 612, 619, 621], "tuningcriterion": [170, 286, 585, 607, 616, 619], "strategy_kwarg": [170, 616, 619], "timeout": [170, 174, 286, 318, 500, 585, 612, 619, 621], "max_trial": [170, 286, 500, 585, 619], "tuning_criterion": [170, 286, 585, 607, 616, 619], "earli": [170, 286, 585, 613, 619, 621], "stop": [170, 174, 286, 302, 318, 459, 483, 585, 619, 620, 621], "exit": [170, 286, 307, 309, 567, 585, 586, 621], "see": [170, 196, 199, 202, 240, 249, 252, 287, 290, 519, 521, 523, 567, 583, 585, 598, 599, 602, 605, 606, 617, 619, 622], "concret": [170, 173, 318, 619], "posttrainingquantconfig": [170, 286, 306, 521, 524, 569, 579, 585, 587, 613, 614, 616, 619], "auto": [170, 286, 308, 314, 335, 521, 588, 591, 593, 595, 596, 610], "quant_format": [170, 242, 245, 286, 576], "calibration_sampling_s": [170, 286, 585], "op_type_dict": [170, 286, 612, 619], "op_name_dict": [170, 286, 585, 619], "excluded_precis": [170, 286, 614], "quant_level": [170, 286, 619], "use_distributed_tun": [170, 286, 619], "_basequantizationconfig": [170, 286], "quantizationawaretrainingconfig": [170, 286, 306, 325, 521, 573, 585, 613, 614, 619], "deepcopi": [170, 286], "model_origin": [170, 286, 306, 614], "qat_op_name_dict": [170, 286], "compression_manag": [170, 286, 325, 521, 572, 573, 585, 608, 610, 613], "prepare_compress": [170, 286, 325, 521, 572, 573, 585, 608, 610, 613], "knowledgedistillationlossconfig": [170, 573, 585, 608], "distillationconfig": [170, 286, 325, 572, 573, 585, 608], "comb": [170, 573], "distillation_criterion": [170, 573, 585, 608], "d_conf": [170, 573, 585, 608], "q_conf": [170, 573], "intermediatelayersknowledgedistillationlossconfig": 170, "selfknowledgedistillationlossconfig": [170, 286, 572, 585], "distil_loss": [170, 286, 572, 585], "crossentropyloss": [170, 204, 286, 572, 585], "sgd": [170, 209, 286, 572, 585, 612, 621], "lr": [170, 286, 572, 574, 585], "0001": [170, 286, 572, 585, 612], "learning_r": [170, 286, 585, 612, 621], "callabl": [170, 254, 286, 292, 325, 486, 490, 506, 507], "altern": [170, 286], "mixedprecisionconfig": [170, 286, 295, 585, 586], "mixedprecis": [170, 248, 257, 286, 295, 344, 448, 496, 553, 585], "mix_precis": [170, 286, 585, 586], "exportconfig": 170, "dynamic_ax": [170, 242, 245, 576], "onnxqlinear2qdqconfig": 170, "onnxqlinear2qdq": 170, "torch2onnxconfig": [170, 576], "qdq_op_fp32_bia": [170, 242, 245, 576], "torch2onnx": [170, 242, 248, 286], "tf2onnxconfig": 170, "tf2onnx": [170, 242, 248, 286], "sigopt": [171, 172, 286, 611], "tpe": [171, 172, 286], "sigopttunestrategi": 173, "q_dataload": [173, 174, 307, 310, 311, 313, 315, 316, 317, 318, 580, 619], "q_hook": [173, 174, 307, 310, 311, 313, 315, 316, 317, 318], "tunestrategi": [173, 174, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 619], "hpo": 173, "mandatori": [173, 174, 306, 585, 621], "yield": [173, 174, 183, 205, 206, 223, 295, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 325, 569, 613, 619], "taken": [173, 174, 295, 306, 325], "tuner": [173, 174, 247, 248, 284, 295, 306, 325], "higher": [173, 174, 263, 295, 306, 308, 325, 521, 572, 576, 584, 610, 613, 616, 619], "pseudo": [173, 174, 306, 325, 617], "code": [173, 174, 203, 248, 258, 282, 285, 306, 325, 377, 382, 400, 418, 483, 484, 515, 516, 521, 524, 525, 567, 569, 570, 572, 573, 574, 580, 581, 583, 584, 588, 590, 592, 593, 594, 596, 599, 605, 607, 608, 610, 611, 612, 613, 616, 617, 618, 620], "resum": [173, 174, 307, 313, 316, 317, 318, 325, 331], "params_to_tune_config": 173, "next_tune_cfg": [173, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 619], "travers": [173, 174, 307, 308, 309, 312, 318, 619], "get_acc_target": 173, "base_acc": 173, "ceiterion": 173, "constraint": [173, 247, 248, 284, 302, 306, 585, 616, 619, 621], "create_exp": 173, "acc_target": 173, "experi": [173, 519, 588, 616, 619], "fefin": 174, "tpetunestrategi": 174, "add_loss_to_tuned_history_and_find_best": 174, "tuning_history_list": 174, "histori": [174, 310, 318, 334, 335, 375, 382, 384, 388, 441, 459, 509, 605, 619], "object_evalu": 174, "alredi": 174, "calculate_loss": 174, "acc_diff": 174, "lat_diff": 174, "trials_count": [174, 318], "either": [174, 252, 290, 318, 589, 593, 608, 612, 613], "met": [174, 318, 522, 578, 586, 613, 617], "basedatalod": [175, 215], "basedataload": [175, 177, 180, 181, 182, 184, 196, 215, 217, 220, 221, 222, 224], "batch_siz": [175, 177, 181, 183, 184, 185, 186, 191, 196, 205, 206, 215, 217, 221, 223, 224, 225, 226, 242, 245, 341, 355, 366, 468, 491, 522, 569, 570, 574, 576, 580, 585, 588, 613], "last_batch": [175, 177, 181, 184, 196, 205, 206, 215, 217, 221, 224], "rollov": [175, 177, 181, 184, 196, 205, 206, 215, 217, 221, 224], "collate_fn": [175, 177, 178, 181, 184, 196, 205, 206, 215, 217, 218, 221, 224, 570], "sampler": [175, 177, 179, 181, 184, 196, 205, 206, 215, 217, 219, 221, 224, 236, 248, 320, 321, 574], "batch_sampl": [175, 177, 181, 184, 196, 205, 206, 215, 217, 221, 224], "num_work": [175, 177, 181, 184, 196, 205, 206, 215, 217, 221, 224, 585, 613], "pin_memori": [175, 177, 181, 184, 196, 205, 206, 215, 217, 221, 224], "shuffl": [175, 177, 181, 184, 196, 205, 206, 215, 217, 221, 224, 585, 613], "_generate_dataload": [175, 215], "drop": [175, 215, 252, 280, 290, 585, 586, 599, 610, 622], "incomplet": [175, 215, 320, 322, 331], "discard": [175, 215], "default_col": [177, 217], "outer": [177, 217], "defaultdataload": [177, 181, 184, 196, 217, 221, 224], "base_dataload": [177, 179, 180, 181, 182, 184, 196, 217, 219, 220, 221, 222, 224, 236, 248], "drop_last": [178, 183, 218, 223], "iterablefetch": [178, 218], "indexfetch": [178, 218], "default_dataload": [179, 181, 184, 219, 221, 224, 236, 248], "fetcher": [179, 219, 236, 248], "mxnet_dataload": [179, 219, 236, 248], "onnxrt_dataload": [179, 219, 236, 248], "pytorch_dataload": [179, 219, 236, 248], "tensorflow_dataload": [179, 219, 236, 248, 468], "mxnetdataload": [180, 220], "onnxruntim": [181, 187, 191, 194, 195, 196, 221, 227, 231, 234, 235, 236, 248, 257, 295, 394, 398, 525, 579, 581, 582, 586, 612], "onnxrtbertdataload": [181, 221], "bert": [181, 184, 185, 196, 199, 202, 221, 224, 225, 240, 524, 570, 572, 584, 593, 618, 622], "varient": [181, 221], "onnxrtdataload": [181, 221], "pytorchdataload": [182, 222], "data_sourc": [183, 223, 328], "__iter__": [183, 187, 191, 196, 223, 227, 231, 236, 569, 570, 585], "iterablesampl": [183, 223], "squential": [183, 223], "your": [183, 185, 223, 225, 252, 290, 520, 567, 570, 574, 576, 582, 583, 585, 588, 591, 592, 593, 598, 599, 600, 602, 603, 605, 610, 616, 617, 619], "iterabledataset": [183, 186, 187, 189, 190, 191, 196, 223, 226, 227, 229, 230, 231, 236], "indexdataset": [183, 223], "__getitem__": [183, 187, 191, 196, 199, 202, 223, 227, 231, 236, 238, 240, 570, 585], "__len__": [183, 187, 191, 196, 223, 227, 231, 236, 570], "inter": [183, 187, 191, 196, 223, 227, 231, 236], "retriev": [183, 223, 484], "act": [183, 223, 519], "sequentialsampl": [183, 223], "batchsampl": [183, 223], "tfdatadataload": [184, 224], "tensorflow1": [184, 224], "coupl": [184, 224], "satisfi": [184, 224, 582], "tf1": [184, 224, 587], "although": [184, 224, 616], "tensorflowbertdataload": [184, 224], "tensorflowmodelzoobertdataload": [184, 224], "zoo": [184, 202, 224, 240, 524, 575, 579, 622], "tensorflowdataload": [184, 224, 468], "directli": [184, 224, 252, 256, 280, 290, 294, 318, 576, 584, 585, 592, 610, 612, 613, 617], "pytorchbertdataset": [185, 225], "model_typ": [185, 225, 303, 390, 420, 570], "tensordataset": [185, 225, 570], "repo": [185, 225, 518, 570, 575, 598, 600, 602, 603, 623], "link": [185, 225, 567, 570, 598, 602, 605], "huggingfac": [185, 225, 331, 570, 575, 579, 593, 594, 595, 596], "easi": [185, 225, 248, 284, 567, 569, 576, 585, 611, 613, 616], "classifi": [185, 225, 256, 293, 294, 311, 570, 572, 610], "squad": [185, 196, 199, 202, 225, 240, 253, 254, 256, 291, 292, 293, 294, 570, 584, 610, 618, 622], "distilbert": [185, 225, 524, 570, 611, 622], "xlnet": [185, 225, 570], "xlm": [185, 225, 570, 622], "101": [185, 225, 256, 293, 294, 584, 622], "2043": [185, 225], "2001": [185, 225], "onnxrtbertdataset": [185, 225], "data_dir": [185, 225, 570], "model_name_or_path": [185, 225, 331, 570, 585, 593, 594], "max_seq_length": [185, 196, 199, 202, 225, 240, 570, 618], "128": [185, 188, 189, 196, 199, 202, 225, 228, 229, 240, 570, 585, 613, 618], "do_lower_cas": [185, 196, 199, 201, 202, 225, 239, 240, 570, 618], "mrpc": [185, 225, 256, 294, 570, 584, 593, 610, 619, 622], "dynamic_length": [185, 225, 570], "shortcut": [185, 225, 570], "length": [185, 196, 199, 202, 225, 240, 249, 252, 287, 290, 524, 544, 570, 584, 611, 613, 618], "token": [185, 196, 199, 202, 225, 236, 238, 240, 248, 249, 250, 286, 287, 288, 331, 503, 507, 544, 567, 570, 584, 585, 616, 618, 619], "truncat": [185, 196, 199, 202, 225, 240, 570, 618], "shorter": [185, 196, 199, 202, 225, 240, 570, 618], "lowercas": [185, 225, 570], "choic": [185, 225, 525, 567, 570, 584], "qqp": [185, 225, 570, 584, 622], "qnli": [185, 225, 570, 584, 622], "rte": [185, 225, 570, 584, 622], "st": [185, 225, 570, 584], "cola": [185, 225, 570, 584, 622], "mnli": [185, 225, 570, 584, 622], "wnli": [185, 225, 570, 584, 622], "mobilebert": [185, 225, 570, 572, 622], "roberta": [185, 225, 570, 622], "uncas": [185, 196, 199, 202, 225, 240, 570, 618, 622], "load_and_cache_exampl": [185, 225], "cach": [185, 225, 249, 287, 331, 420, 489, 507, 544, 577, 613], "convert_examples_to_featur": [185, 202, 225, 240], "max_length": [185, 225], "label_list": [185, 225, 256, 294], "output_mod": [185, 225], "classif": [185, 202, 225, 240, 256, 282, 293, 294, 572, 576, 579, 584, 594, 610, 611], "pad_token": [185, 225], "pad_token_segment_id": [185, 225], "mask_padding_with_zero": [185, 225], "inputfeatur": [185, 202, 225, 240], "input_id": [185, 202, 225, 240, 585], "vocabulari": [185, 196, 199, 201, 202, 225, 239, 240, 618], "attention_mask": [185, 225, 585], "NOT": [185, 225, 578, 582], "token_type_id": [185, 225, 585], "segment": [185, 225, 250, 252, 288, 290], "portion": [185, 225], "problem": [185, 225, 256, 294, 584, 586, 606], "regress": [185, 225], "seq_length": [185, 225], "to_json_str": [185, 225], "json": [185, 186, 196, 199, 202, 225, 226, 240, 345, 463, 465, 473, 480, 490, 570, 587, 606, 618], "tensorflowbertdataset": [185, 225], "root": [185, 186, 187, 190, 191, 196, 225, 226, 227, 230, 256, 294, 296, 297, 298, 300, 302, 303, 304, 325, 507, 569, 570, 574, 584, 585, 621], "label_fil": [185, 196, 199, 202, 225, 240, 570, 618], "tfrecord": [185, 186, 187, 191, 196, 225, 226, 227, 231, 236, 570], "guid": [185, 225, 521, 524, 570, 572, 582, 588, 596, 605, 623], "parsedecodebert": [185, 225], "tensorflowmodelzoobertdataset": [185, 186, 225, 226], "num_cor": [185, 186, 190, 191, 196, 225, 226, 230, 570], "28": [185, 186, 190, 191, 196, 225, 226, 230, 570, 622], "coco": [186, 191, 193, 195, 196, 197, 199, 226, 233, 252, 256, 290, 294, 584, 610], "parsedecodecoco": [186, 226], "cocorecorddataset": [186, 191, 196, 226], "directori": [186, 187, 191, 196, 226, 227, 303, 331, 334, 335, 399, 452, 473, 490, 503, 570, 574, 577, 598, 600, 602, 603, 617], "interleav": [186, 191, 196, 226, 570], "parallel": [186, 191, 196, 226, 570, 585, 619], "cocoraw": [186, 226, 569, 570], "img_dir": [186, 226, 570], "val2017": [186, 226, 570], "anno_dir": [186, 226, 570], "annot": [186, 226, 252, 290, 570, 584, 610], "instances_val2017": [186, 226, 570], "wai": [186, 187, 190, 191, 196, 226, 227, 230, 490, 522, 567, 569, 570, 584, 585, 588, 591, 606, 608, 610, 613, 619, 621], "jpg": [186, 190, 192, 226, 230, 232, 570], "imag": [186, 187, 190, 192, 196, 198, 199, 202, 226, 227, 230, 232, 237, 240, 252, 290, 488, 567, 570, 574, 576, 610, 612, 617, 618, 622], "coconpi": [186, 226, 570], "npy_dir": [186, 226, 570], "npy": [186, 226, 570], "tensorflowdataset": [187, 227], "pytorchdataset": [187, 227], "mxnetdataset": [187, 227], "onnxrtqldataset": [187, 227], "qlinear": [187, 194, 227, 234, 256, 294, 302, 525, 576, 595, 622], "onnxrtitdataset": [187, 227], "IT": [187, 194, 227, 234, 611], "pytorchmxnetwrapdataset": [187, 227], "datafunc": [187, 227], "pytorchmxnetwrapfunct": [187, 202, 227, 240], "framework_dataset": [187, 227], "convent": [187, 227, 252, 290, 572], "imageclassifi": [187, 227], "choos": [187, 227, 317, 567, 581, 582, 593, 615, 619, 621], "tensorflow_itex": [187, 190, 191, 192, 194, 195, 196, 227, 230, 231, 232, 234, 235, 236, 612], "onnxrt_qdq": [187, 191, 194, 195, 196, 227, 231, 234, 235, 236, 612], "onnxrt_qlinearop": [187, 191, 194, 195, 196, 202, 227, 231, 234, 235, 236, 240, 612], "onnxrt_integerop": [187, 191, 194, 195, 196, 202, 227, 231, 234, 235, 236, 240, 612], "pytorch_ipex": [187, 191, 194, 195, 196, 227, 231, 234, 235, 236, 585, 612, 621], "pytorch_fx": [187, 191, 194, 195, 196, 227, 231, 234, 235, 236, 585, 612], "dataset_registri": [187, 191, 196, 227, 231, 236], "dataset_typ": [187, 191, 196, 227, 231, 236, 247, 248, 258, 284, 358], "dataset_format": [187, 191, 196, 227, 231, 236], "raw_imag": [187, 191, 196, 227, 231, 236], "overwrit": [187, 191, 196, 227, 231, 236, 598, 602], "download_url": [187, 227], "filenam": [187, 227, 335, 336, 436, 452, 459, 465, 475, 483, 490, 570], "md5": [187, 227], "download": [187, 227, 331, 411, 434, 435, 437, 438, 471, 567, 570, 582, 615], "address": [187, 227, 507, 519, 567, 586, 611], "gen_bar_updat": [187, 227], "bar": [187, 227, 567, 605], "check_integr": [187, 227], "fpath": [187, 227], "checksum": [187, 227], "calculate_md5": [187, 227], "chunk_siz": [187, 227], "cifar10": [187, 227, 570], "cifar100": [187, 227, 570], "automat": [187, 190, 196, 197, 198, 199, 227, 230, 237, 247, 248, 257, 284, 295, 306, 521, 524, 567, 568, 570, 581, 585, 586, 588, 590, 593, 594, 596, 598, 599, 600, 602, 603, 605, 608, 610, 618, 619], "www": [187, 227, 570, 622], "toronto": [187, 227, 570], "edu": [187, 227, 570], "kriz": [187, 227, 570], "cifar": [187, 227, 570, 622], "tar": [187, 227, 570, 600, 603], "gz": [187, 227, 570, 600, 603], "subset": [187, 190, 227, 230, 570], "internet": [187, 227, 567, 570], "put": [187, 227, 570, 572, 610], "again": [187, 227, 570, 614], "load_meta": [187, 227], "pytorchcifar10": [187, 227], "mxnetcifar10": [187, 227], "tensorflowcifar10": [187, 227], "pytorchcifar100": [187, 227], "mxnetcifar100": [187, 227], "tensorflowcifar100": [187, 227], "mnist": [187, 227, 570, 574], "nation": [187, 227, 519], "institut": [187, 227], "standard": [187, 196, 199, 202, 227, 240, 331, 576, 584, 618, 619], "technologi": [187, 227, 585, 609], "fashionmnist": [187, 227, 570], "npz": [187, 227, 570], "idx1": [187, 227, 570], "ubyt": [187, 227, 570], "idx3": [187, 227, 570], "t10k": [187, 227, 570], "class_to_idx": [187, 227], "read_data": [187, 227], "pytorchmnist": [187, 227], "mxnetmnist": [187, 227], "tensorflowmnist": [187, 227], "pytorchfashionmnist": [187, 227], "mxnetfashionmnist": [187, 227], "tensorflowfashionmnist": [187, 227], "imagefold": [187, 227, 570, 574, 585], "subfold": [187, 227], "belong": [187, 227, 245, 299, 613], "class_1": [187, 227, 570], "xxx": [187, 227, 520, 570, 585], "png": [187, 227, 570], "xxy": [187, 227, 570], "xxz": [187, 227, 570], "class_n": [187, 227, 570], "123": [187, 227, 570, 618], "nsdf3": [187, 227, 570], "asd932_": [187, 227, 570], "mxnetimagefold": [187, 227], "tensorflowtfrecorddataset": [187, 227], "tensorflowimagerecord": [187, 191, 196, 227], "imagenet": [187, 190, 191, 196, 198, 199, 227, 230, 237, 522, 567, 585, 594, 610, 617, 618, 621, 622], "000": [187, 191, 196, 227, 524, 570], "001": [187, 191, 196, 227, 570, 574, 621], "099": [187, 191, 196, 227, 570], "tensorflowvocrecord": [187, 227], "pascal": [187, 227], "voc": [187, 227, 256, 294], "2012": [187, 227], "00000": [187, 227], "00004": [187, 227], "00001": [187, 227], "00003": [187, 227], "dummydataset": [188, 189, 228, 229], "float32": [188, 189, 202, 228, 229, 240, 252, 290, 488, 525, 568, 570, 585, 613, 618], "stand_norm": [188, 189, 228, 229, 570], "dummy_v2": [189, 229, 569, 570], "sparse_dummy_v2": [189, 229, 570], "label_shap": [189, 229, 570], "sparsedummydataset": [189, 229], "dense_shap": [189, 229, 570], "sparse_ratio": [189, 229, 570], "imagenetraw": [190, 230, 570], "data_path": [190, 230, 570], "image_list": [190, 230, 570], "img1": [190, 230, 570], "img2": [190, 230, 570], "imgx": [190, 230, 570], "val_map": [190, 230, 570], "txt": [190, 230, 483, 567, 570, 582], "pytorchimagenetraw": [190, 230], "mxnetimagenetraw": [190, 230], "tensorflowimagenetraw": [190, 230], "inteltensorflow": [190, 192, 230, 232, 582], "tensorflowimagenetdataset": [190, 230], "onnxrtimagenetdataset": [190, 230], "bert_dataset": [191, 196, 231, 236, 248, 286], "coco_dataset": [191, 196, 231, 236, 248, 286], "dummy_dataset": [191, 196, 231, 236, 248, 286], "dummy_dataset_v2": [191, 196, 231, 236, 248, 286], "imagenet_dataset": [191, 196, 231, 236, 248, 286], "style_transfer_dataset": [191, 196, 231, 236, 248, 286], "styletransferdataset": [192, 232], "content_fold": [192, 232, 570], "style_fold": [192, 232, 570], "crop_ratio": [192, 232, 570], "resize_shap": [192, 232, 570], "256": [192, 196, 198, 199, 232, 237, 570, 574, 585, 618], "image_format": [192, 232, 570], "holder": [192, 232, 570], "labelbalancecocorecordfilt": [193, 195, 196, 233], "labelbalancecocorawfilt": [193, 233], "tensorflowfilt": [194, 234], "onnxrtqlfilt": [194, 234], "onnxrtitfilt": [194, 234], "pytorchfilt": [194, 234], "mxnetfilt": [194, 234], "filter_registri": [194, 195, 196, 234, 235, 236], "filter_typ": [194, 195, 196, 234, 235, 236], "__call__": [194, 195, 196, 234, 235, 236], "coco_filt": [195, 196, 235, 236, 248, 286], "imagenet_transform": [196, 199, 236, 238, 248, 286], "transform_cl": [196, 199, 202, 236, 238, 240], "basetransform": [196, 197, 198, 199, 202, 236, 237, 238, 240], "composetransform": [196, 199, 202, 240], "transform_list": [196, 199, 202, 240, 618], "transform_registri": [196, 199, 202, 236, 238, 240], "transform_typ": [196, 199, 202, 236, 238, 240], "postprocess_cl": [196, 199, 200, 206, 210, 585], "user_postprocess": [196, 199, 200, 206, 210], "labelshift": [196, 198, 199, 237, 493, 618], "label_shift": [196, 198, 199, 237, 618], "bilinearimagenettransform": [196, 198, 199, 237], "central_fract": [196, 198, 199, 237, 618], "875": [196, 198, 199, 237, 618], "mean_valu": [196, 198, 199, 237, 618], "seri": [196, 198, 199, 237, 524, 582, 585, 618], "applic": [196, 198, 199, 237, 474, 503, 505, 507, 567, 576, 588, 605, 611, 617, 618], "fraction": [196, 198, 199, 237, 618], "crop": [196, 198, 199, 202, 237, 240, 570, 618], "std": [196, 198, 199, 202, 237, 240, 585, 618], "tensorflowresizecropimagenettransform": [196, 198, 199, 237], "random_crop": [196, 198, 199, 237, 618], "resize_sid": [196, 198, 199, 237, 618], "resize_method": [196, 198, 199, 237], "bilinear": [196, 198, 199, 202, 237, 240, 618], "random_flip_left_right": [196, 198, 199, 237, 618], "channels_last": [196, 198, 199, 237, 588], "subpixel": [196, 198, 199, 237], "rgb": [196, 198, 199, 237], "desir": [196, 198, 199, 202, 237, 240, 618], "flip": [196, 198, 199, 202, 237, 240, 618], "right": [196, 198, 199, 237, 252, 290, 488, 519, 521, 567, 605, 618], "tfsquadv1posttransform": [196, 199, 202, 240], "vocab_fil": [196, 199, 201, 202, 239, 240, 618], "n_best_siz": [196, 199, 202, 240, 618], "20": [196, 199, 202, 240, 582, 609, 618, 621, 622], "384": [196, 199, 202, 240, 618], "max_query_length": [196, 199, 202, 240, 618], "64": [196, 199, 202, 240, 522, 618, 622], "max_answer_length": [196, 199, 202, 240, 618], "30": [196, 199, 202, 240, 575, 579, 581, 618, 622], "doc_strid": [196, 199, 202, 240, 618], "nbest_predict": [196, 199, 202, 240, 618], "wordpiec": [196, 199, 201, 202, 239, 240, 618], "question": [196, 199, 202, 240, 253, 254, 291, 292, 519, 520, 525, 582, 588, 610, 618, 622], "answer": [196, 199, 202, 240, 253, 254, 291, 292, 519, 610, 618, 622], "lower": [196, 199, 201, 202, 239, 240, 254, 292, 311, 490, 573, 610, 611, 613, 618, 619], "long": [196, 199, 202, 240, 577, 618], "document": [196, 199, 202, 240, 520, 574, 586, 590, 600, 603, 604, 615, 618], "chunk": [196, 199, 202, 240, 618], "process_result": [196, 199, 202, 240], "get_postprocess_result": [196, 199, 202, 240], "tfsquadv1modelzooposttransform": [196, 199, 202, 240], "squadv1": [196, 199, 202, 240, 618], "tensorflowresizewithratio": [196, 199, 202, 240], "min_dim": [196, 199, 202, 240, 618], "800": [196, 199, 202, 240, 618], "max_dim": [196, 199, 202, 240, 618], "1365": [196, 199, 202, 240, 618, 622], "constant_valu": [196, 199, 202, 240], "aspect": [196, 198, 199, 202, 237, 240, 618], "side": [196, 199, 202, 240, 567, 570, 599, 618], "exce": [196, 199, 202, 240, 618], "resizetftransform": [196, 199, 202, 240], "nearest": [196, 199, 202, 240, 618], "bicub": [196, 199, 202, 240, 618], "rescaletftransform": [196, 199, 202, 240], "normalizetftransform": [196, 199, 202, 240], "rescal": [196, 199, 202, 240, 618], "deviat": [196, 199, 202, 240, 618], "broadcast": [196, 199, 202, 240, 574, 618], "parsedecodecocotransform": [196, 197, 199], "decod": [196, 197, 198, 199, 237, 249, 287, 544, 584, 618], "quantizedinput": [198, 237, 618], "parsedecodeimagenet": [198, 237, 618], "proto": [198, 202, 237, 240, 618], "parsedecodeimagenettransform": [198, 237], "onnxbilinearimagenettransform": [198, 237], "onnxresizecropimagenettransform": [198, 237], "std_valu": [198, 237], "229": [198, 237, 585, 622], "224": [198, 237, 524, 569, 570, 574, 576, 579, 585, 588, 618, 621, 622], "225": [198, 237, 585, 622], "resizewithaspectratio": [198, 237], "87": [198, 237, 622], "inter_pol": [198, 237], "cv2": [198, 237], "inter_area": [198, 237], "convert_to_unicod": [201, 239], "unicod": [201, 239, 249, 287], "load_vocab": [201, 239], "convert_by_vocab": [201, 239], "vocab": [201, 239], "whitespace_token": [201, 239], "whitespac": [201, 239, 254, 292], "piec": [201, 239, 249, 287, 544, 576, 584], "fulltoken": [201, 239], "tokenzi": [201, 239], "convert_tokens_to_id": [201, 239], "convert_ids_to_token": [201, 239], "basictoken": [201, 239], "punctuat": [201, 239, 249, 254, 287, 292], "wordpiecetoken": [201, 239], "unk_token": [201, 239], "unk": [201, 239], "max_input_chars_per_word": [201, 239], "200": [201, 239, 521, 619], "word": [201, 239, 249, 287, 544, 584, 610], "greedi": [201, 239], "unaff": [201, 239], "un": [201, 239], "aff": [201, 239], "separ": [201, 239, 506, 519, 567, 580, 583, 608, 612], "concat_gener": [202, 240], "tensorflowtransform": [202, 240], "mxnettransform": [202, 240], "pytorchtransform": [202, 240], "onnxrtqltransform": [202, 240], "onnxrtittransform": [202, 240], "tensorflowwrapfunct": [202, 240], "transform_func": [202, 240], "pytorchmxnettransform": [202, 240], "get_torchvision_map": [202, 240], "torchvis": [202, 240, 567, 575, 579, 588, 594], "croptoboundingbox": [202, 240, 618], "offset_height": [202, 240, 618], "offset_width": [202, 240, 618], "target_height": [202, 240, 618], "target_width": [202, 240, 618], "box": [202, 240, 252, 256, 290, 293, 294, 310, 521, 567, 584, 588, 599, 605, 617, 618, 619], "coordin": [202, 240, 310, 618, 619], "corner": [202, 240, 525, 618], "horizont": [202, 240, 618], "mxnetcroptoboundingbox": [202, 240], "onnxrtcroptoboundingbox": [202, 240], "tensorflowcroptoboundingbox": [202, 240], "resizewithratio": [202, 240, 618], "perm": [202, 240, 618], "tensorflowtranspos": [202, 240], "mxnettranspos": [202, 240], "pytorchtranspos": [202, 240], "randomverticalflip": [202, 240, 618], "randomli": [202, 240, 264, 310, 317, 522, 618, 619], "tensorflowrandomverticalflip": [202, 240], "randomhorizontalflip": [202, 240, 585, 618], "tensorflowrandomhorizontalflip": [202, 240], "toarrai": [202, 240, 618], "pil": [202, 240, 618], "casttftransform": [202, 240], "castonnxtransform": [202, 240], "castpytorchtransform": [202, 240], "centercroptftransform": [202, 240], "center": [202, 240, 523, 524, 582, 618, 619], "paddedcentercroptransform": [202, 240], "crop_pad": [202, 240], "resizepytorchtransform": [202, 240], "randomcroptftransform": [202, 240], "randomresizedcroppytorchtransform": [202, 240], "randomresizedcropmxnettransform": [202, 240], "randomresizedcroptftransform": [202, 240], "pramet": [202, 240], "rescalekeraspretraintransform": [202, 240], "rescaletransform": [202, 240], "alignimagechanneltransform": [202, 240], "align": [202, 240, 282, 519, 618], "w": [202, 240, 610, 618], "pytorchalignimagechannel": [202, 240], "tondarraytransform": [202, 240], "resizemxnettransform": [202, 240], "resizetransform": [202, 240], "cropresizetftransform": [202, 240], "boundari": [202, 240, 388, 618], "area": [202, 240, 252, 290, 584, 618], "pytorchcropresizetransform": [202, 240], "mxnetcropresizetransform": [202, 240], "cropresizetransform": [202, 240], "centercroptransform": [202, 240], "mxnetnormalizetransform": [202, 240], "pytorchnormalizetransform": [202, 240], "normalizetransform": [202, 240], "randomcroptransform": [202, 240], "randomresizedcroptransform": [202, 240], "get_final_text": [202, 240], "pred_text": [202, 240], "orig_text": [202, 240], "project": [202, 240, 355, 358, 363, 365, 366, 369, 376, 377, 381, 382, 383, 384, 385, 386, 387, 411, 518, 519, 520, 611, 616, 619, 623], "squadexampl": [202, 240], "qas_id": [202, 240], "question_text": [202, 240], "doc_token": [202, 240], "orig_answer_text": [202, 240], "start_posit": [202, 240], "end_posit": [202, 240], "is_imposs": [202, 240], "simpl": [202, 240, 567, 582, 585, 616, 619], "unique_id": [202, 240], "example_index": [202, 240], "doc_span_index": [202, 240], "token_to_orig_map": [202, 240], "token_is_max_context": [202, 240], "segment_id": [202, 240, 585], "read_squad_exampl": [202, 240], "input_fil": [202, 240], "output_fn": [202, 240], "inputbatch": [202, 240], "collecttransform": [202, 240], "10833": [202, 240], "tfmodelzoocollecttransform": [202, 240], "parsedecodevoctransform": [202, 240], "conf_fname_or_obj": [203, 212, 241, 247, 248, 257, 258, 259, 260, 261, 262, 271, 276, 284, 285], "unnecessari": [203, 248, 585], "call_on": [203, 248, 475], "cmd": [203, 248, 483, 606], "log_fil": [203, 248], "window": [203, 248, 568, 605, 606], "tensorflowcrossentropyloss": 204, "pytorchcrossentropyloss": 204, "tensorflowsparsecategoricalcrossentropi": 204, "sparsecategoricalcrossentropyloss": 204, "setter": [205, 206], "calib_dataload": [205, 206, 248, 284, 285, 306, 521, 524, 569, 570, 579, 580, 584, 585, 613, 614], "known": [205, 206, 310, 576, 585, 610, 617, 619], "open": [206, 248, 286, 328, 483, 517, 519, 524, 567, 576, 577, 585, 600, 603, 606, 611], "librari": [206, 248, 286, 517, 520, 524, 582, 585, 590, 599, 605, 611, 613], "metric_cl": [206, 207, 255, 256, 293, 294, 585], "user_metr": [206, 207, 293, 294], "alwai": [206, 207, 252, 290, 293, 294, 584, 585], "recommend": [206, 207, 293, 294, 525, 570, 576, 578, 596, 599, 604, 606, 610, 612, 619], "set_backend": 208, "tensorflowoptim": 209, "pytorchoptim": 209, "optimizer_cl": 209, "allow": [209, 302, 310, 331, 507, 567, 572, 574, 584, 585, 586, 612, 619, 621], "optimizer_registri": 209, "optimizer_typ": 209, "cross": [209, 255, 256, 293, 294, 580, 619], "tensorflowsgd": 209, "tensorflowadamw": 209, "tensorflow_addon": 209, "adamw": 209, "tensorflowadam": 209, "adam": [209, 621], "pytorchsgd": 209, "record_output": 211, "output_process": 211, "get_activ": 211, "train_dataload": [212, 248, 585, 610], "prepare_qat": [212, 248], "compress": [212, 248, 271, 276, 286, 305, 325, 517, 524, 572, 581, 585, 605, 607, 608, 610, 611, 613, 620], "post_process": [212, 248], "pre_epoch_begin": [212, 248, 271, 276], "post_epoch_end": [212, 248, 271, 276], "on_batch_begin": [212, 248, 271, 276], "on_post_grad": [212, 248], "on_batch_end": [212, 248, 271, 276], "pickle_modul": 214, "pickle_protocol": 214, "_use_new_zipfile_seri": 214, "tensorflowimagefold": 227, "evaluation_distribut": [241, 248, 271, 276], "train_distribut": [241, 248, 271, 276], "on_post_forward": [241, 248], "deprec": [241, 248, 490, 600, 603, 618], "create_optim": [241, 248], "disil": [241, 248], "qlinear2qdq": [242, 248, 286], "torch_to_fp32_onnx": [242, 245], "do_constant_fold": [242, 245], "verbos": [242, 245, 310], "int8_model": [242, 244, 245, 525], "ax": [242, 245], "torch_to_int8_onnx": [242, 245], "u8s8": [242, 245], "optionl": [242, 245], "qdq_op_int32_bia": [242, 245, 576], "qdq_op_fp32_bias_qdq": [242, 245, 576], "onnx_qlinear_to_qdq": [242, 243], "input_name_to_nod": [242, 243, 302], "qlinearop": [242, 243, 581, 596, 613], "tf_to_fp32_onnx": [242, 244], "tf_to_int8_onnx": [242, 244], "check_model": 243, "update_weight_bia": 245, "fp32_onnx_path": [245, 246], "wegiht": 245, "set_data_typ": 245, "weight_typ": 245, "activation_typ": 245, "get_node_map": 245, "module_node_map": 245, "get_quantizable_onnx_op": 245, "quantize_nod": 245, "build_scale_map": 245, "int8_scale_info": 245, "scale_zp_dict": 245, "set_scale_info": 245, "int8_onnx_model": 245, "int8_onnx_path": 245, "recalculate_bia": 245, "remove_nodes_by_nam": 245, "sub_graph_with_int32_bia": 245, "a_info": 245, "b_info": 245, "qdq_fp32_bia": 245, "excut": 245, "qdq_int32_bia": 245, "qdq_fp32_bias_qdq": 245, "onnx2numpy_dtyp": 246, "onnx_node_typ": 246, "dummydataread": 246, "ortq": 246, "dataread": 246, "get_next": 246, "achiev": [247, 248, 284, 306, 576, 584, 585, 608, 610, 611, 613, 617, 619], "variou": [247, 248, 257, 284, 295, 306, 581, 588, 612], "dl": [247, 248, 257, 271, 276, 284, 295, 306, 580, 592, 605, 611], "bring": [247, 248, 284, 306, 599, 613], "unifi": [247, 248, 284, 306, 482, 525, 569, 580, 581, 585, 587], "work": [247, 248, 271, 276, 284, 306, 523, 569, 572, 600, 603, 610, 614, 615, 617], "sinc": [247, 248, 249, 271, 276, 284, 287, 306, 331, 459, 544, 572, 576, 582, 584, 599, 605, 608], "vari": [247, 248, 271, 276, 284, 306, 609, 622], "roc": [247, 248, 256, 271, 276, 284, 294, 306], "footprint": [247, 248, 271, 276, 284, 305, 306, 573, 585, 607, 610, 612], "flexibl": [247, 248, 271, 276, 284, 572, 610], "set_config_by_model": [247, 248, 257], "model_obj": [247, 248, 257], "popular": [248, 286, 517, 524, 525, 572, 575, 576, 579, 585, 610, 613, 619, 620], "techniqu": [248, 286, 517, 524, 581, 585, 588, 608, 610, 612, 613, 620, 621], "bleu": [248, 250, 255, 286, 288, 293, 584], "bleu_util": [248, 255, 286, 293], "coco_label_map": [248, 255, 286, 293], "coco_tool": [248, 255, 286, 293], "evaluate_squad": [248, 255, 286, 293], "basic_na": [248, 261, 286], "dyna": [248, 261, 286, 522, 581, 612], "nas_util": [248, 261, 286], "pruner_legaci": [248, 286], "gradient_sensit": [248, 267, 286], "group_lasso": [248, 267, 286], "pattern_lock": [248, 267, 286], "pruning_recip": [248, 286], "tile_pattern": [248, 272, 273], "pytorch_prun": [248, 286], "logger": [248, 277, 286, 326, 329, 335, 471, 475, 479], "prune_util": [248, 277, 286], "graph_optim": [248, 257, 286, 342, 411, 446, 450, 451, 471, 479, 495], "mixed_precis": [248, 286, 344, 411, 446, 471, 479, 495, 585], "model_convers": [248, 286], "pruning_v2": [248, 286], "quantconf": [248, 284, 295], "qfunc": [248, 284], "distributed_execut": [248, 284], "pruningconf": [248, 271, 276], "pruning_func": [248, 271, 276, 585], "update_items_for_all_prun": [248, 271, 282], "howev": [248, 271, 276, 282, 576, 610], "still": [248, 271, 276, 282, 585, 613, 614], "analys": [248, 271, 276, 282], "generate_prun": [248, 271, 276], "flow": [248, 253, 254, 271, 276, 291, 292, 521, 522, 585], "graphoptim": [248, 257, 342, 443, 494], "privat": [248, 257, 295, 519], "member": [248, 257, 295, 490, 519, 525], "modelconvers": [248, 258, 553], "unicoderegex": [249, 287], "hoc": [249, 287], "hack": [249, 287], "nondigit_punct_r": [249, 287], "compil": [249, 287, 585, 609], "preced": [249, 287], "digit": [249, 287, 611], "punct_nondigit_r": [249, 287], "symbol_r": [249, 287], "property_char": [249, 287], "join": [249, 287], "bleu_token": [249, 287], "mose": [249, 287], "smt": [249, 287], "mosesdecod": [249, 287], "mteval": [249, 287], "v14": [249, 287], "pl": [249, 287], "l954": [249, 287], "l983": [249, 287], "bilingu": [249, 287, 544], "understudi": [249, 287, 544], "qualiti": [249, 287, 544], "machin": [249, 287, 350, 544, 567, 576, 582, 591, 605, 611, 617], "natur": [249, 287, 544, 576], "approxim": [249, 250, 287, 288, 544, 584], "glue": [249, 256, 287, 294, 544, 570, 584, 585, 594], "ngram": [249, 287, 544, 584], "breviti": [249, 250, 287, 288, 544, 584], "penalti": [249, 250, 287, 288, 544, 584], "doe": [249, 252, 287, 290, 308, 316, 544, 570, 584, 585, 615, 618], "beam": [249, 287, 544, 584], "occur": [249, 287, 544], "bleu_scor": [249, 250, 287, 288, 544], "tensor2tensor": [250, 288], "bleu_hook": [250, 288], "compute_bleu": [250, 288], "reference_corpu": [250, 288], "translation_corpu": [250, 288], "max_ord": [250, 288], "use_bp": [250, 288], "against": [250, 288], "gram": [250, 288], "flag": [250, 288, 325, 500], "pycocotool": [252, 290, 577, 582], "object_detect": [252, 290], "noth": [252, 290, 483, 619], "thu": [252, 290, 585, 610, 613], "cannot": [252, 290, 478, 521, 576, 577, 586, 617], "slim": [252, 290, 301, 303, 587, 610], "jonathanhuang": [252, 290], "image_id": [252, 290, 584], "groundtruth": [252, 290], "invok": [252, 290], "groundtruth_dict": [252, 290], "exportgroundtruthtococo": [252, 290], "groundtruth_boxes_list": [252, 290], "groundtruth_classes_list": [252, 290], "max_num_class": [252, 290], "output_path": [252, 290, 302, 483], "detections_list": [252, 290], "exportdetectionstococo": [252, 290], "detection_boxes_list": [252, 290], "detection_scores_list": [252, 290], "detection_classes_list": [252, 290], "cocowrapp": [252, 290], "loadannot": [252, 290], "cocoevalwrapp": [252, 290], "agnostic_mod": [252, 290], "computemetr": [252, 290], "detection_typ": [252, 290], "bbox": [252, 290, 521, 584], "hold": [252, 290, 302, 310, 570], "datastructur": [252, 290], "mscoco": [252, 290], "replic": [252, 290, 619], "behavior": [252, 290, 519, 520, 525, 578, 587, 617, 621], "extern": [252, 290, 302, 567], "storag": [252, 290, 524, 579, 584], "category_id": [252, 290], "iou_typ": [252, 290], "iou_thr": [252, 256, 290, 293, 294, 584], "map_point": [252, 256, 290, 293, 294, 584], "cocoev": [252, 290], "Then": [252, 290, 318, 567, 598, 600, 602, 603, 619], "getcategori": [252, 290], "getagnosticmod": [252, 290], "agnost": [252, 290, 572], "getcategoryidlist": [252, 290], "accumul": [252, 290, 309, 320, 321, 619], "p": [252, 290, 567, 606], "include_metrics_per_categori": [252, 290], "all_metrics_per_categori": [252, 290], "summeri": [252, 290], "per_category_ap": [252, 290], "care": [252, 290], "hand": [252, 290, 522, 567], "pollut": [252, 290], "mldash": [252, 290], "summary_metr": [252, 290], "iou": [252, 256, 290, 294], "increment": [252, 290, 309, 619], "50iou": [252, 290], "50": [252, 254, 290, 292, 522, 622], "75iou": [252, 290], "75": [252, 290, 622], "32": [252, 290, 574, 580, 609, 610, 622], "pixel": [252, 290, 618], "medium": [252, 290, 611], "96": [252, 290, 622], "10000": [252, 290, 310], "recal": [252, 254, 256, 290, 292, 294], "bycategori": [252, 290], "supercategori": [252, 290], "backward": [252, 290, 325, 572, 573, 574, 585, 608, 610, 613, 615], "performancebycategori": [252, 290], "regardless": [252, 290, 519], "category_stat": [252, 290], "exportsingleimagegroundtruthtococo": [252, 290], "next_annotation_id": [252, 290], "category_id_set": [252, 290], "groundtruth_box": [252, 290], "groundtruth_class": [252, 290], "groundtruth_mask": [252, 290], "groundtruth_is_crowd": [252, 290], "ingest": [252, 290], "ones": [252, 290, 610], "exportsingleimagedetectionstococo": [252, 290], "assign": [252, 290, 318, 335, 376, 377, 382, 383, 384, 385, 567, 574, 612], "num_gt_box": [252, 290], "num_detect": [252, 256, 290, 293, 294, 584, 585, 621], "image_height": [252, 290], "image_width": [252, 290], "detection_mask": [252, 290], "crowd": [252, 290], "exportsingleimagedetectionboxestococo": [252, 290], "detection_box": [252, 290, 585, 621], "detection_scor": [252, 290, 585, 621], "detection_class": [252, 290, 585, 621], "exporsingleimagedetectionboxestococo": [252, 290], "exportsingleimagedetectionmaskstococo": [252, 290], "allenai": [253, 254, 291, 292], "bi": [253, 254, 291, 292], "att": [253, 254, 291, 292], "f1_score": [253, 254, 291, 292], "ground_truth": [253, 254, 291, 292], "metric_max_over_ground_truth": [253, 254, 291, 292], "metric_fn": [253, 254, 291, 292], "exact_match_scor": [253, 291], "exact": [253, 291], "articl": [253, 254, 291, 292], "paragraph": [253, 254, 291, 292], "qa": [253, 254, 291, 292], "cantain": [253, 254, 291, 292], "normalize_answ": [254, 292], "newlin": [254, 292], "tab": [254, 292, 379, 382, 388, 506, 605, 617], "harmon": [254, 256, 292, 294], "answer_start": [254, 292], "177": [254, 292], "denver": [254, 292], "bronco": [254, 292], "nfl": [254, 292], "team": [254, 292, 519, 614], "afc": [254, 292], "super": [254, 292, 522], "bowl": [254, 292], "56be4db0acb8001400a502ec": [254, 292], "percentag": [254, 292, 621], "basemetr": [255, 256, 293, 294], "single_output": [255, 256, 293, 294], "hvd": [255, 256, 293, 294, 574], "sample_weight": [255, 256, 293, 294], "metric_registri": [255, 256, 293, 294], "metric_typ": [255, 256, 293, 294], "decorator_metr": [255, 256, 293, 294], "tensorflowmetr": [256, 294], "maintain": [256, 294, 519, 520, 524, 587, 588, 600, 603, 610, 615], "pytorchmetr": [256, 294], "mxnetmetr": [256, 294], "onnxrtqlmetr": [256, 294], "onnxrtitmetr": [256, 294], "wrappytorchmetr": [256, 294], "wrapmxnetmetr": [256, 294], "wraponnxrtmetr": [256, 294], "proport": [256, 294], "were": [256, 293, 294, 591, 610], "pred_list": [256, 294], "pytorchloss": [256, 294], "sum": [256, 294, 572], "mae": [256, 294, 584], "numer": [256, 294, 586, 611, 613], "rmse": [256, 294, 584, 619], "squar": [256, 294, 315, 584, 619], "tensorflowtopk": [256, 293, 294], "k": [256, 293, 294, 584, 610], "among": [256, 293, 294, 599], "most": [256, 293, 294, 310, 567, 585, 586, 610, 613, 619], "outcom": [256, 293, 294], "num_correct": [256, 293, 294], "generaltopk": [256, 293, 294], "cocomapv2": [256, 293, 294, 584], "anno_path": [256, 293, 294, 584], "map_kei": [256, 293, 294], "detectionboxes_precis": [256, 293, 294], "output_index_map": [256, 293, 294, 584], "tensorflowmap": [256, 294], "tensorflowcocomap": [256, 294], "tensorflowvocmap": [256, 294], "squadf1": [256, 293, 294, 584], "miou": [256, 294], "num_class": [256, 294], "21": [256, 294, 593, 594, 611, 622], "intersect": [256, 294, 525, 584], "hist": [256, 294, 330], "onnxrtglu": [256, 294], "dlrm": [256, 294], "basicna": [259, 261], "model_build": [259, 261, 262], "nasbas": [259, 260, 261, 262, 522], "conf_fnam": [259, 261], "init_by_cfg": [259, 261], "select_model_arch": [260, 261, 262], "init_cfg": [260, 261], "builder": [262, 303], "res_save_path": 262, "count_model_paramet": 262, "load_search_result": 262, "dump_search_result": 262, "params_vec2params_dict": [262, 264], "paras_vec": 262, "vector": [262, 264], "find_best_model_arch": 262, "lie": [262, 522], "pareto": [262, 263, 522], "front": [262, 263, 522], "metrics_convers": 262, "init_search_cfg": 262, "nas_registri": 263, "nas_method": 263, "create_search_space_pool": 263, "idx": [263, 302, 570], "enumer": [263, 325, 339, 440, 446, 472, 525, 572, 573, 574, 585, 608, 610, 617], "find_pareto_front": 263, "n_point": 263, "n_metric": 263, "n_pareto_point": 263, "searcher": 264, "suggest": [264, 310, 521, 616], "get_feedback": 264, "feedback": 264, "para_vec": 264, "gridsearch": 264, "grid": [264, 522], "whole": [264, 505, 567, 613], "exhaust": [264, 286, 314, 317, 612], "randomsearch": 264, "42": [264, 609, 622], "bayesianoptimizationsearch": 264, "bayesian": [264, 286, 312, 314, 522, 612], "indices2params_vec": 264, "gradientsensitivityprun": 265, "pytorchmodel": [265, 266, 268, 269, 270, 304], "overwritten": [265, 266, 268, 269, 270, 593], "elementwise_prun": 265, "parse_weight_nam": 265, "weight_name_pattern": 265, "compute_mask": [265, 268, 269], "prune_weight": 265, "update_importance_elementwis": 265, "update_importance_ab": 265, "update_importance_weight": 265, "prune_by_import": 265, "num_inst": 265, "grouplassoprun": 266, "basicmagnitudeprun": [266, 268], "legaci": 267, "accordingli": [268, 285, 596], "update_weight": [269, 303, 304], "pruner_registri": 270, "clase": 270, "update_spars": 270, "tfpruningcallback": [271, 276], "input_model": [271, 276, 587, 617], "pure": [271, 276, 586, 610], "s_output": [271, 276], "s_loss": [271, 276], "t_output": [271, 276], "support_pattern": [272, 273, 274], "pattern_registri": 274, "pattern_typ": 274, "patternbas": [274, 275], "mask_shap": [274, 275], "is_contigu": 274, "compute_spars": [274, 275, 335], "abs_sum": 274, "abs_max": 274, "tile": 275, "tilepatternbas": 275, "matrix": [275, 524, 596, 620], "repeat_mask": 275, "ori_shap": 275, "repeat": [275, 619], "tilepattern_1x1": 275, "1x1": [275, 572, 585, 610], "unstructur": [275, 581, 610, 622], "tilepattern_2x2": 275, "2x2": 275, "tilepattern_1x16": 275, "1x16": 275, "tilepattern_4x1": 275, "tilepattern_1x2": 275, "1x2": 275, "max_sparsity_ratio_per_lay": [279, 281, 612], "get_mask_singl": 279, "reset_non_value_to_default": 280, "obejct": 280, "parse_not_to_prun": 280, "update_frequency_on_step": [281, 612], "judg": 281, "Or": 281, "simpli": [281, 574, 587, 588, 590, 593, 605], "update_scor": 281, "magnitudeprun": 281, "snipprun": 281, "snipmomentumprun": 281, "moreoev": 281, "templat": [282, 286, 358, 377, 382, 471, 479, 516, 567, 585, 610], "tree": [282, 320, 322, 353, 382, 384], "nlp": [282, 593, 610, 613], "huggingface_model": 282, "config_file_path": 282, "pruner_info": 282, "old": [282, 335, 585, 615], "aggressive_ratio": 283, "aggress": 283, "server": [285, 286, 411, 418, 470, 471, 478, 479, 487, 490, 501, 503, 505, 567, 605], "seper": 285, "opt_model": [285, 585], "fulli": [285, 585, 613], "meet": [285, 305, 307, 308, 309, 311, 316, 318, 521, 576, 607, 611, 612, 613, 617, 619], "saniti": 285, "illeg": 285, "sync": 285, "contrib": 286, "experiment": [286, 468, 522, 544, 570, 573, 574, 576, 585, 610, 612, 615, 618], "base_model": [286, 297, 298, 300, 302, 303, 304], "keras_model": [286, 297], "mxnet_model": [286, 297], "nets_factori": [286, 297], "onnx_model": [286, 297, 422], "tensorflow_model": [286, 297], "torch_model": [286, 297], "tuning_sampl": [286, 314, 320], "tuning_spac": [286, 314, 320, 321, 323], "tuning_struct": [286, 314, 320, 321, 322], "auto_mixed_precis": [286, 314], "conserv": [286, 314], "hawq_v2": [286, 314], "mse_v2": [286, 314], "collect_layer_histogram": [286, 329], "create_obj_from_config": [286, 329], "kl_diverg": [286, 329], "load_huggingfac": [286, 329, 585], "ux": 286, "config_gener": [286, 411, 471], "configuration_wizard": [286, 411, 471], "db_manag": [286, 411, 471, 509], "file_brows": [286, 411, 471], "jobs_manag": [286, 411, 471], "model_zoo": [286, 411, 471], "names_mapp": [286, 411, 471], "profil": [286, 345, 363, 370, 372, 382, 385, 387, 388, 411, 419, 427, 471, 472, 482, 488, 505, 510], "manage_workspac": [286, 411, 471], "workload": [286, 340, 341, 342, 344, 346, 347, 350, 372, 377, 382, 442, 459, 466, 471, 473, 479, 489, 490, 505, 508, 510, 511, 512, 513, 611], "executor": [286, 338, 471, 479], "expiring_dict": [286, 471, 479], "github_info": [286, 471, 479], "hw_info": [286, 471, 479], "json_seri": [286, 341, 395, 396, 401, 403, 404, 407, 417, 426, 452, 458, 471, 478, 479, 488, 491, 492, 493, 494, 496, 497, 498, 499, 500], "proc": [286, 471, 479], "status_upd": [286, 471, 479], "yaml_util": [286, 471, 479], "web": [286, 470, 471, 524, 567, 617], "servic": [286, 471, 504, 505, 524, 605, 609], "commun": [286, 318, 471, 505, 506, 507, 519, 567], "router": [286, 471, 505], "inc_bench": [286, 471, 567, 579], "set_random_se": [286, 329, 335, 500], "set_tensorboard": [286, 335], "set_workspac": [286, 306, 335, 491, 500], "output_model": [295, 569, 585, 617], "eval_metr": [295, 306, 325], "chould": 295, "onnx_ml_pb2": [295, 587], "hybirdblock": [295, 306], "paramt": [295, 306, 325], "basemodel": [296, 297, 298, 300, 302, 303, 304], "plai": [296, 297, 610, 611], "role": [296, 297, 610], "node_typ": [296, 297], "kerasmodel": [298, 429], "get_all_weight_nam": [298, 303, 304], "report_spars": [298, 303, 304], "datafram": [298, 303, 304], "total_spars": [298, 303, 304], "get_model_fwk_nam": 299, "fwk": 299, "net": 301, "factori": [301, 392, 411, 446, 462, 467, 471, 482, 486], "tfslimnetsfactori": 301, "model_func": 301, "arg_scop": 301, "onnxmodel": [302, 422], "is_large_model": 302, "2gb": 302, "ort": 302, "output_name_to_nod": 302, "ir_vers": 302, "opset_import": 302, "nodes_to_remov": 302, "nodes_to_add": 302, "add_initi": 302, "get_initi": 302, "remove_initi": 302, "init_to_remov": 302, "set_initi": 302, "get_sibl": 302, "sibl": 302, "get_children": 302, "get_par": 302, "find_node_by_nam": 302, "new_nodes_list": 302, "find_nodes_by_initi": 302, "get_scale_zero": 302, "save_model_to_fil": 302, "use_external_data_format": 302, "replace_node_input": 302, "new_input_nam": 302, "replace_input_of_all_nod": 302, "white_optyp": 302, "black_optyp": 302, "replace_node_output": 302, "new_output_nam": 302, "replace_output_of_all_nod": 302, "remove_unused_const": 302, "enable_subgraph": 302, "get_nodes_chain": 302, "start_nod": 302, "stop_nod": 302, "result_chain": 302, "chain": 302, "add_tensors_to_output": 302, "remove_tensors_from_output": 302, "match_first_par": 302, "parent_op_typ": 302, "match_par": 302, "return_indic": 302, "match_parent_path": 302, "parent_input_index": 302, "get_model_typ": [303, 420], "validate_graph_nod": 303, "validate_and_inference_input_output": 303, "input_tensor_nam": 303, "output_tensor_nam": 303, "graph_sess": 303, "graph_def_sess": 303, "frozen_pb_sess": 303, "load_saved_model": 303, "saved_model_tag": 303, "serv": [303, 507, 515], "signatur": 303, "saved_model_dir": 303, "tag": [303, 331, 477, 490, 617], "metagraphdef": 303, "keras_sess": 303, "slim_sess": 303, "checkpoint_sess": 303, "estimator_sess": 303, "saved_model_sess": 303, "renturn": 303, "workspace_path": [303, 304, 475, 490], "tensorflowsavedmodelmodel": 303, "new_tensor": [303, 304], "get_weight": [303, 304], "wight": 303, "build_saved_model": 303, "savedmodelbuild": 303, "protocol": 303, "buffer": 303, "asset": 303, "tensorflowqatmodel": 303, "frozen_graph_def": 303, "tensorflowcheckpointmodel": 303, "checkpoint": [303, 334, 587], "issu": [303, 519, 520, 523, 567, 582, 613, 617], "tensorflowmodel": [303, 398, 427, 429, 430, 431, 432], "pytorchbasemodel": 304, "register_forward_pre_hook": 304, "generate_forward_pre_hook": 304, "update_gradi": 304, "grad_nam": 304, "new_grad": 304, "grad": 304, "prune_weights_": 304, "get_input": 304, "get_gradi": 304, "quantized_state_dict": 304, "load_quantized_state_dict": 304, "stat_dict": 304, "pytorchfxmodel": 304, "ipexmodel": 304, "driven": [305, 524, 585, 586, 605, 607, 617], "objective_registri": 305, "objective_custom_registri": 305, "obj_cl": 305, "eural_compressor": 305, "objective_cl": 305, "user_object": 305, "__class__": 305, "__name__": 305, "objective_cfg": 305, "usr_cfg": 305, "user_obj_cfg": 305, "easili": [305, 525, 589, 593, 605, 607, 610], "sart": 305, "mani": [305, 308, 309, 582, 619, 621], "warm": 305, "result_list": 305, "loop": [305, 325, 521, 522, 578, 616, 619], "durat": [305, 318, 355, 366, 369, 376, 382, 384, 385, 475, 616], "peak": [305, 607], "alloc": 305, "models": [305, 585, 607, 612], "multiobject": [305, 500], "metric_criterion": 305, "metric_weight": 305, "obj_criterion": 305, "obj_weight": 305, "is_measur": 305, "baselin": [305, 318, 328, 616, 617], "accuracy_target": 305, "accuracy_meet": 305, "verifi": [305, 576], "accuracy_meet_req": 305, "last_result": 305, "check_result": 305, "set_model": 305, "best_result": 305, "tune_data": 305, "acc1": 305, "obj1": 305, "obj2": 305, "acc2": 305, "posttrainingqu": 306, "calib_func": [306, 614], "pre_proccess": 306, "entir": [306, 325, 521, 610], "ptq": [306, 521, 574, 581, 585, 613, 617, 619], "autotunestrategi": 307, "polici": [307, 309, 315, 519, 524, 609, 621, 623], "sequential_travers": 307, "tune_config": [307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318], "automixedprecisiontunestrategi": 308, "rule": [308, 588, 610], "tri": [308, 309, 503, 619], "basictunestrategi": [309, 318], "distributed_next_tune_cfg_lst": [309, 318], "comm": [309, 318], "One": [309, 567, 570, 574, 581, 610, 611, 619], "tuning_config_list": 309, "ii": [309, 619], "bayesiantunestrategi": 310, "come": [310, 524, 619, 620], "discret": [310, 619], "gaussian": [310, 619], "posterior": [310, 619], "black": [310, 619], "maxim": [310, 585, 610, 619], "acq_max": 310, "ac": 310, "gp": 310, "y_max": 310, "n_warmup": 310, "n_iter": 310, "acquisit": 310, "relev": 310, "limit": [310, 335, 524, 572, 610, 617], "acq": 310, "randomst": 310, "scipi": 310, "x_max": 310, "targetspac": 310, "pbound": 310, "9527": [310, 585, 621], "params_to_arrai": 310, "array_to_param": 310, "amort": 310, "keyerror": 310, "get_target": 310, "random_sampl": 310, "num": [310, 335, 584], "_kei": 310, "bayesianoptim": 310, "promis": [310, 573, 585, 610], "gen_next_param": 310, "conservativetunestrategi": 311, "o0": [311, 619], "who": [311, 519, 619], "quantifi": 311, "quant_queu": 311, "prioriti": [311, 619], "fp16": [311, 320, 322, 586, 613], "exhaustivetunestrategi": 312, "perspect": [312, 619], "hawq_v2tunestrategi": 313, "msetunestrategi": 315, "mse_impact_lst": 315, "best_qmodel": 315, "current_best_model": 315, "ordered_op_name_typ": 315, "mse_v2tunestrategi": 316, "revert": [316, 324, 619], "highest": [316, 619], "lowest": [316, 610, 619], "until": [316, 318, 522, 619], "randomtunestrategi": 317, "strategy_registri": [318, 619], "evaluation_result": [318, 574], "meet_acc_req": 318, "eval_r": 318, "master_worker_handl": 318, "worker": [318, 585, 613], "manag": [318, 325, 328, 354, 387, 389, 412, 473, 489, 579, 585, 588, 589, 599], "send": [318, 459, 502, 507, 520], "wait": [318, 502, 598, 602, 605], "receiv": [318, 331, 616], "sender": 318, "mpi": [318, 619], "slave_worker_handl": 318, "slave": [318, 619], "tune_cfg_lst": 318, "distributed_travers": 318, "apply_all_tuning_recip": 318, "tunabl": 318, "apply_recipe_one_by_on": 318, "set_param_for_pre_quantization_algo": 318, "algo_schedul": 318, "algo": [318, 328], "set_param_for_post_quantization_algo": 318, "pre_optimized_model": 318, "initial_tuning_cfg": 318, "quant_mode_wise_item": 318, "initial_op_tuning_cfg": [318, 320, 321], "op_item_dtype_dict": 318, "show_baseline_info": 318, "displai": [318, 320, 321, 322, 335, 406, 419, 605], "initial_best_acc": 318, "set_tuning_spac": 318, "setup_resum": 318, "set_q_func": 318, "update_best_op_tuning_cfg": 318, "op_tuning_cfg": 318, "deploy_config": 318, "deploy": [318, 571, 588, 605], "tuningsampl": [320, 321], "tuningspac": [320, 321, 322], "tuning_order_lst": [320, 321], "tuningord": [320, 321], "opwisetuningsampl": [320, 321], "tuning_items_prior": [320, 321], "op_dtype_dict": [320, 321], "get_opwise_candid": [320, 321], "optypewisetuningsampl": [320, 321], "optuningconfig": [320, 321, 322, 323], "fallbacktuningsampl": [320, 321], "op_dtyp": [320, 321], "skip_first": [320, 321], "op_quant_mod": [320, 323], "get_stat": [320, 323], "from_stat": [320, 323], "tuningitem": [320, 322], "item_typ": [320, 322], "get_options_nam": [320, 322], "get_option_by_nam": [320, 322], "option_nam": [320, 322], "get_detail": [320, 322], "depth": [320, 322, 572, 614], "query_item_opt": [320, 322], "op_name_typ": [320, 322], "method_nam": [320, 322], "method_v": [320, 322], "get_default_config": [320, 322], "op_tuning_config": [320, 322], "get_item_by_path": [320, 322], "get_default_full_path": [320, 322], "op_path": [320, 322], "new_path": [320, 322], "query_quant_mode_item_by_full_path": [320, 322], "query_items_by_quant_mod": [320, 322], "get_op_default_path_by_pattern": [320, 322], "tuningsamplerregistri": 321, "modelwisetuningsampl": 321, "smoothquantsampl": 321, "hyperparamet": [321, 616, 619], "get_op_mode_by_query_ord": 322, "query_ord": 322, "pattern_to_intern": 322, "default_dtyp": 322, "pattern_to_path": 322, "quant_mode_from_pattern": 322, "internal_pattern": 322, "initial_tuning_cfg_with_quant_mod": 322, "step1": 322, "step2": 322, "step3": 322, "step4": 322, "step5": 322, "ordereddefaultdict": 324, "extract_data_typ": 324, "data_typ": 324, "sign": [324, 520, 567, 613, 616], "unsign": 324, "reverted_data_typ": 324, "signed_flag": 324, "get_adaptor_nam": 324, "compressionmanag": 325, "callbacks_list": 325, "uesd": 325, "deal": 325, "Such": 325, "distillationcallbback": 325, "train_loop": [325, 585, 608], "path_to_sav": 325, "orchestr": [325, 524, 581, 620], "pruningconfig": 325, "layerhistogramcollector": [326, 329], "histogram": [326, 329, 335, 379, 382, 390, 617], "layer_tensor": [326, 329], "include_lay": [326, 329], "diverg": [326, 329, 330, 572, 619], "get_func_from_config": 328, "func_dict": 328, "get_preprocess": 328, "get_metr": [328, 352], "get_postprocess": 328, "get_algorithm": 328, "create_dataset": 328, "cfg_preprocess": 328, "cfg_filter": 328, "create_dataload": 328, "dataloader_cfg": 328, "create_eval_func": 328, "postprocess_cfg": 328, "create_train_func": 328, "Their": 328, "auxiliari": 329, "msg": [329, 332], "warn": [329, 332, 567], "warin": [329, 332], "alia": [329, 332, 590, 595], "fatal": [329, 332], "probabl": 330, "expand_quantized_bin": 330, "quantized_bin": 330, "reference_bin": 330, "expand": 330, "bin": [330, 335, 577], "safe_entropi": 330, "reference_distr_p": 330, "p_sum": 330, "candidate_distr_q": 330, "q_sum": 330, "entropi": [330, 619], "get_threshold": 330, "hist_edg": 330, "min_val": 330, "max_val": 330, "quantized_typ": 330, "num_quantized_bin": 330, "255": [330, 613], "pretrain": [331, 588, 594], "optimizedmodel": 331, "from_pretrain": [331, 585], "repositori": [331, 411, 416, 418, 471, 477, 600, 603], "hug": [331, 524, 611], "face": [331, 519, 524, 534, 588, 592, 611, 615], "hub": [331, 483, 524, 575, 579, 596], "host": [331, 574], "cache_dir": 331, "force_download": 331, "forc": [331, 614], "resume_download": 331, "commit": [331, 519, 520], "git": [331, 567, 577, 582], "artifact": 331, "co": [331, 610], "save_for_huggingface_upstream": [331, 585], "output_dir": [331, 483, 585, 593, 594], "get_logg": 332, "is_int8_model": 334, "checkpoint_dir": 334, "history_cfg": 334, "best_configur": 334, "best_model_weight": 334, "pt": [334, 587, 611, 614], "snapshot": [334, 388, 509], "cfg_from_fil": 335, "yaml_fil": [335, 570, 574, 584], "lazyimport": 335, "lazi": 335, "till": [335, 619], "decorat": 335, "time_limit": 335, "get_siz": [335, 490], "fault_tolerant_fil": 335, "temporari": [335, 519], "equal_dict": 335, "d2": 335, "compare_kei": 335, "ignore_kei": 335, "ignor": [335, 570], "cpuinfo": 335, "vnni": [335, 575, 579, 581, 612, 613], "cores_per_socket": 335, "get_number_of_socket": [335, 478], "dump_elapsed_tim": [335, 525], "customized_msg": 335, "elaps": 335, "combine_histogram": 335, "old_hist": 335, "get_tensor_histogram": 335, "2048": 335, "get_all_fp32_data": 335, "get_tuning_histori": 335, "tuning_history_path": [335, 459], "str2arrai": 335, "dequantizeweight": 335, "weight_tensor": 335, "scale_info": 335, "captureoutputtofil": 335, "tmp_file_path": 335, "stream": 335, "sy": [335, 591], "stderr": 335, "captur": 335, "statist": 335, "header": [335, 436, 515, 577], "field_nam": 335, "output_handl": 335, "printer": 335, "print_stat": 335, "global_st": 335, "load_data_from_pkl": 335, "pkl": 335, "dump_data_to_loc": 335, "set_resume_from": 335, "show_memory_info": 335, "hint": 335, "project_data": [336, 442, 443, 448, 452, 455, 458, 465], "benchmark_data": 336, "workdir": [336, 452, 465, 471, 475, 479, 487], "config_filenam": [336, 452, 465], "configuration_data": [336, 443, 448, 452, 455, 458], "generate_config": [336, 443, 448, 452, 455, 458, 465], "dataloaderinterfac": [336, 452, 465], "dataloader_data": [336, 348, 377, 382, 452, 465], "parse_arg": [337, 445, 449, 454, 457, 463], "benchmark_mod": [337, 482], "set_eager_execut": [337, 445, 449, 457], "request_id": [338, 441, 459, 460, 475, 483], "asd": [338, 460], "benchmark_id": [338, 355, 356, 366], "benchmark_result_upd": 338, "benchmark_result_update_pytorch_script": 338, "neural_coder_perform": 338, "neural_coder_tim": 338, "pytorch_script_bench_optim": 338, "command_line_of_script": 338, "pytorch_script_bench_original_model": 338, "execute_real_benchmark": 338, "project_detail": [338, 371, 441, 460], "benchmark_detail": 338, "benchmark_model": [339, 411, 471], "execute_benchmark": [339, 411, 471], "benchmarkconfiggener": 340, "configgener": [340, 341, 342, 344, 345, 346, 347], "generate_evaluation_config": [340, 342, 344, 346, 347], "generate_accuracy_config": 340, "generate_performance_config": 340, "workload_directori": 341, "configuration_path": 341, "jsonseri": [341, 395, 396, 401, 403, 404, 407, 417, 426, 452, 458, 478, 480, 488, 491, 492, 493, 494, 496, 497, 498, 499, 500], "get_predefined_config_path": [341, 490], "predefin": [341, 377, 381, 382, 490], "generate_model_config": 341, "generate_dataloader_config": 341, "graphoptimizationconfiggener": 342, "generate_graph_optimization_config": 342, "benchmark_config_gener": [343, 411, 471], "graph_optimization_config_gener": [343, 411, 471], "mixed_precision_config_gener": [343, 411, 471], "profiling_config_gener": [343, 411, 471], "pruning_config_gener": [343, 411, 471], "quantization_config_gener": [343, 411, 471], "mixedprecisionconfiggener": 344, "generate_mixed_precision_config": 344, "profilingconfiggener": 345, "pruningconfiggener": 346, "generate_pruning_config": 346, "quantizationconfiggener": 347, "generate_tuning_config": 347, "generate_quantization_config": 347, "configurationpars": 348, "input_data": [348, 353, 569], "parse_evaluation_data": 348, "evaluation_data": 348, "parse_transform": 348, "transforms_data": [348, 377, 382], "parse_dataload": 348, "parse_metr": 348, "metric_data": 348, "get_param_typ": 348, "param_group": 348, "parse_valu": 348, "required_typ": 348, "parse_list_valu": 348, "parse_multidim_list": 348, "dimension": 348, "normalize_string_list": 348, "string_list": 348, "bracket": 348, "get_predefined_configur": 350, "update_config_to_machine_specif": 350, "configuration_pars": [351, 411, 471], "get_boundary_nod": [351, 411, 471], "get_configur": [351, 411, 471], "params_feed": [351, 411, 471], "pruning_config_pars": [351, 411, 471], "feeder": 352, "get_framework": [352, 425], "get_domain": 352, "get_model": [352, 425, 511], "get_dataload": 352, "get_transform": 352, "get_object": 352, "get_strategi": 352, "get_quantization_approach": 352, "get_possible_valu": 352, "pruningconfigpars": 353, "generate_tre": 353, "parse_entri": 353, "bench": [354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 441, 470, 588], "dbmanag": [354, 387], "database_loc": [354, 387], "log_level": [354, 387, 481], "initialize_databas": [354, 387], "create_sqlalchemy_engin": [354, 387], "create_al": [354, 387], "tabl": [354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 372, 373, 374, 375, 377, 378, 387], "project_id": [355, 358, 365, 366, 369, 371, 377, 381, 382], "model_id": [355, 365, 366, 369], "dataset_id": [355, 358, 366, 369, 377, 381, 382], "warmup_iter": 355, "number_of_inst": 355, "execution_command": [355, 366, 369], "benchark": 355, "delete_benchmark": [355, 376, 382], "benchmark_nam": 355, "update_statu": [355, 366, 369], "execution_statu": [355, 366, 369], "executionstatu": [355, 366, 369, 376, 382, 384, 385, 472, 489], "update_dur": [355, 366, 369], "update_execution_command": [355, 366, 369, 376, 382, 384, 385], "update_log_path": [355, 366, 369, 382, 385], "update_config_path": [355, 366], "update_dataset": [355, 366, 369], "update_batch_s": [355, 366], "update_mod": 355, "update_cores_per_inst": 355, "update_number_of_inst": 355, "clean_statu": [355, 366, 369, 376, 382, 384, 385, 489], "status_to_clean": [355, 366, 369, 376, 382, 384, 385, 489], "build_info": [355, 356, 358, 365, 366, 369, 370, 372, 375], "benchmark_result": [355, 363, 387, 411], "benchmarkresult": [355, 356], "update_accuraci": 356, "update_perform": 356, "list_by_framework": [357, 364, 373], "framework_id": [357, 364, 365, 373, 389], "query_to_list": [357, 364, 373], "dataloaders_queri": 357, "dataloader_id": 357, "fill_dictionari": [357, 359, 360, 362, 364, 367, 368, 373], "dataset_nam": [358, 377, 382], "template_path": 358, "delete_dataset": [358, 377, 382], "update_template_path": 358, "get_domain_id": 359, "domain_nam": 359, "domainflavour": [360, 472], "db": [360, 367, 368, 388, 389], "get_domain_flavour_id": 360, "domain_flavour_nam": 360, "flavour": [360, 380, 382, 440, 472], "get_framework_id": 362, "framework_nam": [362, 438, 478], "domain_flavour": [363, 387, 411, 417, 490], "optimization_typ": [363, 366, 387, 411], "profiling_result": [363, 369, 387, 411], "pruning_detail": [363, 366, 387, 411], "tuning_detail": [363, 366, 387, 411], "tuning_histori": [363, 366, 382, 384, 387, 411, 446, 471], "metrics_queri": 364, "precision_id": [365, 366, 367, 368], "domain_id": [365, 373], "domain_flavour_id": 365, "supports_profil": [365, 419, 427], "supports_graph": [365, 419], "supports_prun": [365, 419, 431], "delete_model": [365, 382, 383], "optimization_type_id": 366, "sampling_s": [366, 491, 585, 621], "tuning_details_id": [366, 374], "pruning_details_id": [366, 372], "diagnosis_config": 366, "delete_optim": [366, 382, 384], "optimization_id": [366, 367, 382, 384, 441], "optimization_nam": [366, 367, 381, 382], "update_optimized_model": [366, 382, 384], "optimized_model_id": 366, "update_sampling_s": 366, "update_precis": 366, "update_tuning_detail": 366, "update_pruning_detail": 366, "pin_accuracy_benchmark": [366, 382, 384], "pin": [366, 382, 384, 598, 602], "pin_performance_benchmark": [366, 382, 384], "get_optimization_by_project_and_model": 366, "unpin_benchmark": 366, "db_connect": 366, "unpin": 366, "optimizationtyp": [366, 367, 472], "tuningdetail": [366, 374, 458], "tuninghistori": [366, 375, 459], "pruningdetail": [366, 372], "optimized_model": 366, "get_pinned_benchmark": 366, "list_for_precis": 367, "precision_nam": [367, 368], "get_optimization_type_for_precis": 367, "get_optimization_type_id": 367, "get_optimization_type_by_nam": 367, "get_optimization_type_by_id": 367, "get_precision_id": 368, "get_precision_by_nam": 368, "get_precision_by_id": 368, "num_thread": 369, "delete_profil": [369, 382, 385], "profiling_id": [369, 370, 382, 385, 460], "profiling_nam": 369, "update_num_thread": 369, "profilingresult": [369, 370], "total_execution_tim": 370, "accelerator_execution_tim": 370, "cpu_execution_tim": 370, "op_run": 370, "op_defin": 370, "get_result": 370, "bulk_add": 370, "params_interfac": [370, 376, 377, 379, 381, 382, 383, 384, 385, 387, 411, 471, 509], "profilingresultaddparamsinterfac": [370, 382, 385, 388], "bulk": [370, 382, 385], "delete_result": 370, "create_project": [371, 381, 382, 386], "delete_project": [371, 382, 386], "project_nam": [371, 377, 382], "get_model_by_nam": 371, "list_project": [371, 382, 386], "update_not": 371, "pruning_details_data": 372, "delete_pruning_detail": 372, "list_by_domain": 373, "transforms_queri": 373, "accuracy_criterion_typ": 374, "accuracy_criterion_threshold": 374, "exit_polici": [374, 585, 621], "tuning_details_data": 374, "delete_tuning_detail": 374, "update_tuning_histori": 374, "tuning_history_id": 374, "minimal_accuraci": 375, "baseline_accuraci": 375, "baseline_perform": 375, "last_tune_accuraci": 375, "last_tune_perform": 375, "best_tune_accuraci": 375, "best_tune_perform": 375, "benchmarkapiinterfac": [376, 382], "get_benchmark_detail": [376, 382], "list_benchmark": [376, 382], "update_benchmark_accuraci": [376, 382], "update_benchmark_perform": [376, 382], "update_benchmark_statu": [376, 382], "update_benchmark_dur": [376, 382], "update_path": [376, 382, 384], "add_benchmark": [376, 382], "add_result": [376, 382, 385], "edit_benchmark": [376, 382], "edit": [376, 382, 384, 385, 388, 519], "parse_benchmark_data": [376, 382], "benchmarkaddparamsinterfac": [376, 382, 388], "parse_benchmark_edit_data": [376, 382], "benchmarkeditparamsinterfac": [376, 382, 388], "before_delete_benchmark_entri": 376, "mapper": [376, 439, 440], "sqlite3": 376, "db_model": [376, 387, 411, 471], "datasetapiinterfac": [377, 382], "get_dataset_detail": [377, 382], "list_dataset": [377, 382], "add_dataset": [377, 382], "set_template_path": [377, 382], "parsed_dataset_data": [377, 382], "datasetaddparamsinterfac": [377, 382, 388], "check_if_custom_metric_or_dataload": [377, 382], "dataset_data": [377, 382, 442, 443, 448, 452, 455, 458, 492], "generate_custom_templ": [377, 382], "dataloader_path": [377, 382], "generate_templ": [377, 382], "template_typ": [377, 382], "parse_dataset_data": [377, 382], "get_predefined_dataset": [377, 382], "prepare_predefined_dataload": [377, 382], "prepare_predefined_transform": [377, 382], "set_database_vers": [377, 378], "version_num": [377, 378], "alembic_vers": [377, 378], "initialize_associ": [377, 378], "initialize_precision_optimization_types_associ": [377, 378], "search_in_list_of_dict_for_unique_valu": [377, 378], "list_of_dict": [377, 378], "search_in_list_of_dict": [377, 378], "diagnosisapiinterfac": [379, 382], "get_op_list": [379, 382, 390], "get_op_detail": [379, 382, 390], "generate_optim": [379, 382], "model_wise_param": [379, 382], "parse_optimization_data": [379, 382, 384], "diagnosisoptimizationparamsinterfac": [379, 382, 388], "parse_op_wise_config": [379, 382], "op_wise_param": [379, 382], "parse_wise_paramet": [379, 382], "params_per_typ": [379, 382], "set_op_wise_pattern_precis": [379, 382], "parse_model_wise_config": [379, 382], "dictionariesapiinterfac": [380, 382], "dictonari": [380, 382], "list_domain": [380, 382], "list_domain_flavour": [380, 382], "list_optimization_typ": [380, 382], "list_optimization_types_for_precis": [380, 382], "list_precis": [380, 382], "list_dataload": [380, 382], "list_dataloaders_by_framework": [380, 382], "list_transform": [380, 382], "list_transforms_by_framework": [380, 382], "list_transforms_by_domain": [380, 382], "list_metr": [380, 382], "list_metrics_by_framework": [380, 382], "examplesapiinterfac": [381, 382], "get_optimization_data": [381, 382], "optimizationaddparamsinterfac": [381, 382, 384, 388], "benchmark_api_interfac": [382, 387, 411], "dataset_api_interfac": [382, 387, 411], "diagnosis_api_interfac": [382, 387, 411], "dictionaries_api_interfac": [382, 387, 411], "examples_api_interfac": [382, 387, 411], "model_api_interfac": [382, 387, 411], "optimization_api_interfac": [382, 387, 411], "profiling_api_interfac": [382, 387, 411], "project_api_interfac": [382, 387, 411], "modelapiinterfac": [382, 383], "add_model": [382, 383, 386], "get_model_detail": [382, 383], "list_model": [382, 383, 411, 437, 471], "parse_model_data": [382, 383], "modeladdparamsinterfac": [382, 383, 388], "optimizationapiinterfac": [382, 384], "get_optimization_detail": [382, 384], "list_optim": [382, 384], "update_optimization_statu": [382, 384], "update_optimization_dur": [382, 384], "add_optim": [382, 384], "add_quantization_optim": [382, 384], "optimization_data": [382, 384, 442, 443, 448, 452, 455, 458], "add_pruning_optim": [382, 384], "add_standard_optim": [382, 384], "edit_optim": [382, 384], "get_pruning_detail": [382, 384], "gat": [382, 384], "edit_tuning_detail": [382, 384], "parsed_optimization_data": [382, 384], "optimizationeditparamsinterfac": [382, 384, 388], "edit_pruning_detail": [382, 384], "pruning_data": [382, 384], "add_tuning_histori": [382, 384], "parse_tuning_histori": [382, 384], "tuninghistoryinterfac": [382, 384, 388, 509], "parse_optimization_edit_data": [382, 384], "load_pruning_details_config": [382, 384, 490], "profilingapiinterfac": [382, 385], "get_profiling_detail": [382, 385], "list_profil": [382, 385], "update_profiling_statu": [382, 385], "update_profiling_dur": [382, 385], "add_profil": [382, 385], "edit_profil": [382, 385], "bulk_add_result": [382, 385], "parse_profiling_data": [382, 385], "profilingaddparamsinterfac": [382, 385, 388], "parse_profiling_result_data": [382, 385], "parse_profiling_edit_data": [382, 385], "profilingeditparamsinterfac": [382, 385, 388], "projectapiinterfac": [382, 386], "get_project_detail": [382, 386], "add_dummy_dataset": [382, 386], "update_project_not": [382, 386], "db_oper": [387, 411, 471], "parse_nod": 388, "tuninghistoryiteminterfac": [388, 509], "update_dataloaders_param": 389, "dataloaders_to_upd": 389, "framework_dataloaders_config": 389, "get_framework_dataloaders_config": 389, "get_framework_transforms_config": 389, "get_tensors_info": [390, 419], "load_quantization_config": 390, "calculate_ms": 390, "input_model_tensor": 390, "optimized_model_tensor": 390, "op_detail": [390, 392, 411, 471], "opdetail": [390, 395], "get_histogram_data": 390, "draw": [390, 616, 619], "diagnosisfactori": 391, "get_diagnosi": 391, "onnx_diagnosi": [392, 411, 471], "onnxrt_diagnosi": [392, 393, 411], "tensorflow_diagnosi": [392, 411, 471], "op_entri": [392, 411, 471], "onnxrtdiagnosi": 394, "onnxrtmodel": [394, 422], "serialization_typ": [395, 396, 426, 478, 480, 492, 493, 497, 498], "oppattern": 395, "pattern_data": 395, "opweight": 395, "weights_data": 395, "opactiv": 395, "op_activ": 395, "opentri": 396, "activation_min": 396, "activation_max": 396, "tensorflowdiagnosi": 398, "browser": [399, 567, 598, 602], "get_directory_entri": 399, "get_requested_path": 399, "get_non_hidden_directory_entri": 399, "create_dir_entri": 399, "direntri": 399, "create_file_entri": 399, "create_entri": 399, "is_directori": 399, "sort_entri": 399, "should_show_fil": 399, "should_show_only_model_fil": 399, "get_setting_valu": 399, "get_filter_valu": 399, "filter_requested_entri": 399, "filter_nam": 399, "is_directory_entri": 399, "is_model_or_directory_entri": 399, "shown": [399, 522, 567, 569, 572, 584, 585, 599, 607, 608, 619], "is_dataset_or_directory_entri": 399, "brows": 400, "filesystem": [400, 490, 515], "attribute_typ": 401, "expanded_group": [402, 405], "add_edg": 404, "source_id": 404, "target_id": 404, "highlight_pattern": 404, "highlight": [404, 407, 521, 567], "get_target_nod": 404, "reader": [405, 406, 411, 471], "graphread": 405, "find_pattern_in_graph": [405, 506], "onnxrt_read": [406, 408, 411], "tensorflow_read": [406, 408, 411], "collaps": [406, 411, 471, 567], "graph_read": [406, 411, 471], "groupnod": 407, "group_nam": 407, "onnxrtread": 409, "tensorflowread": 410, "jobs_control_queu": [411, 412, 471], "frozen_pb": [411, 418, 428], "meta_graph": [411, 418, 428], "model_type_gett": [411, 418, 471], "download_config": [411, 436, 437, 471], "download_model": [411, 436, 437, 471], "optimize_model": [411, 444, 446, 447, 450, 453], "neural_coder_optim": [411, 446, 471], "tune_model": [411, 446, 456], "execute_optim": [411, 446, 471], "tensorflow_profil": [411, 462, 471], "execute_profil": [411, 462, 471], "profile_model": [411, 462, 464, 468, 471], "job": [412, 486], "_jobscontrolqueu": 413, "queu": 413, "jobsmanag": 413, "_jobsmmanag": 414, "_job": 414, "get_default_path": 416, "shape_elements_ord": [419, 422, 431, 490], "get_input_nod": [419, 429, 430, 431], "get_output_nod": [419, 429, 430, 431], "ensure_supported_path": 419, "get_model_graph": [419, 422, 430, 431, 506], "supports_path": [419, 422, 424, 427, 429, 430, 432], "guard_requirements_instal": [419, 422, 424, 431], "instal": [419, 422, 424, 431, 438, 574, 577, 579, 588, 590, 593, 596, 600, 603, 605, 606, 609, 623], "nc_model_inst": [422, 431], "filtered_input_nod": 422, "remove_number_of_samples_from_shap": 422, "pytorchscriptmodel": 424, "modelrepositori": 425, "get_framework_from_path": [425, 490], "get_supported_framework": 425, "is_model_path": 425, "trust": [426, 567], "frozenpbmodel": 427, "metagraphmodel": 430, "metagraph": 430, "savedmodelmodel": 432, "get_input_shap": 433, "fix_dynamic_shap": 433, "resourc": [436, 572, 610, 619], "download_yaml_config": 436, "model_info": 436, "download_fil": 436, "download_path": 436, "report_progress": 436, "unpack_arch": 436, "archive_path": 436, "unpack": 436, "archiv": [436, 490], "get_yaml_url": 436, "model_src_dir": 436, "yaml_relative_loc": 436, "get_available_model": 438, "check_vers": 438, "framework_vers": 438, "supported_vers": 438, "validate_model_list": 438, "model_list": 438, "get_framework_module_nam": 438, "get_installed_framework": 438, "mappingdirect": 440, "namesmapp": 440, "framework_map": 440, "domain_map": 440, "domain_flavour_map": 440, "precision_map": 440, "map_nam": 440, "parameter_typ": 440, "execute_optimization_pytorch_script": 441, "execute_optimization_regular": 441, "parse_model_data_to_bench_nam": 441, "parse_log": 441, "optimization_detail": 441, "check_if_collect_tuning_histori": 441, "optimizationfactori": 442, "get_optim": 442, "optimization_script": [443, 448, 452, 455, 458], "optimize_graph": [445, 449], "output_graph": [445, 449, 454, 457], "optimize_graph_config": [445, 449], "optimize_pt_script": 451, "output_model_nam": 452, "output_model_dir": 452, "optimizationinterfac": 452, "optimization_workdir": 459, "watcher": 459, "process_succeed": 459, "signal": [459, 490], "was_history_file_chang": 459, "history_file_modification_tim": 459, "modif": [459, 525, 569, 578, 593], "send_history_snapshot": 459, "execute_real_profil": 460, "profiling_detail": 460, "profilerfactori": [461, 466], "get_profil": [461, 466], "profiling_data": [461, 465, 466, 468, 488], "load_profiling_detail": 463, "json_path": 463, "config_path": 465, "initialize_graph": 468, "tf_modul": 468, "create_tf_config": 468, "num_warmup": 468, "convert_nodes_to_list": 468, "build_dataload": 468, "delete_assign": 469, "wsgi": 470, "prepare_environ": 470, "app": [471, 505], "history_snapshot_pars": [471, 505, 510], "request_data_processor": [471, 505, 510], "response_gener": [471, 505, 510, 511, 513, 516], "status": [472, 484, 489], "ensure_workdir_exists_and_writ": 473, "clean_workloads_wip_statu": 473, "wip": [473, 622], "workloads_list": 473, "migrate_databas": 473, "latest": [473, 483, 582, 611, 615], "alemb": [473, 577, 582], "notfoundexcept": [474, 503, 504], "accessdeniedexcept": 474, "deni": 474, "clienterrorexcept": 474, "internalexcept": 474, "subject": [475, 502, 583], "send_respons": 475, "log_nam": 475, "additional_log_nam": [475, 483], "shell": [475, 483, 617], "process_dur": 475, "cwd": [475, 483], "universal_newlin": [475, 483], "startupinfo": [475, 483], "creationflag": [475, 483], "ignore_exit_cod": [475, 483], "pid": [475, 483], "env_arg": 475, "ncprocess": [475, 484], "refresh_workdir": 475, "is_multi_command": 475, "expir": 476, "expiringdictitem": 476, "expires_at": 476, "is_expir": 476, "expiringdict": 476, "initial_valu": 476, "ttl": 476, "120": 476, "userdict": 476, "githubinfo": 477, "releas": [477, 490, 524, 582, 594, 596, 598, 602, 604, 623], "hw": 478, "hwinfo": 478, "get_distribut": 478, "distibut": 478, "get_bios_vers": 478, "bio": [478, 609], "is_turbo_boost_en": 478, "turbo": [478, 609], "boost": [478, 586, 589, 605, 611], "get_kernel_vers": 478, "get_framework_info": 478, "get_framework_dependency_info": 478, "subdepend": 478, "serializ": 480, "serialize_item": 480, "datetim": 480, "throw": 480, "typeerror": 480, "2016": 480, "84913": 480, "04": [480, 582, 609, 622], "08t11": 480, "084913": 480, "change_log_level": 481, "line": [482, 483, 503, 567, 574, 581, 588, 593, 594, 610, 617], "optimizationpars": 482, "performancepars": 482, "update_parti": 482, "partial": [482, 610, 613], "parsed_result": 482, "summarize_parti": 482, "summarize_valu": 482, "accuracypars": 482, "benchmarkparserfactori": 482, "get_pars": 482, "profilingpars": 482, "unify_tim": 482, "string_valu": 482, "micro": 482, "125": [482, 622], "6m": 482, "microsecond": 482, "docker": 483, "aibt_tensorflow": 483, "cento": [483, 582], "7_3_mkldnn_tensorflow": 483, "111224": 483, "pull_imag": 483, "0c750a01": 483, "90e0": 483, "4aa8": 483, "99fe": 483, "a194d55a2046": 483, "time_start": 483, "2018": 483, "17t14": 483, "47": [483, 622], "352502": 483, "time_stop": 483, "25": [483, 622], "110410": 483, "info_path": 483, "runtim": [483, 524, 525, 526, 569, 575, 578, 581, 590, 595, 596, 612], "tail": 483, "is_ok": [483, 484], "subprocess": [483, 506], "popen": 483, "remove_log": 483, "properli": 484, "rtype": 484, "return_code_al": 484, "remove_successful_log": 484, "success": [484, 502, 582], "get_status_update_funct": 486, "job_typ": 486, "sent": 488, "latenc": [488, 616, 619], "throughput": 488, "acc_input_model": 488, "acc_optimized_model": 488, "size_input_model": 488, "size_optimized_model": 488, "path_optimized_model": 488, "optimization_tim": 488, "insert_data": 488, "calculate_throughput": 488, "1000": [488, 585, 621], "readi": [488, 610], "ensure_working_path_exist": 489, "clean_log": 489, "workdir_path": 489, "clean_cache_fil": 489, "is_hidden": 490, "get_dataset_path": 490, "get_file_extens": 490, "lead": [490, 572, 585, 586, 610], "is_dataset_fil": 490, "normalize_domain": 490, "underscor": 490, "normalize_framework": 490, "normalize_str": 490, "string_to_norm": 490, "get_model_zoo_config_path": 490, "model_dict": 490, "get_model_zoo_model_path": 490, "check_modul": 490, "get_module_vers": 490, "mb": 490, "add_unit": 490, "load_model_config": 490, "load_dataloader_config": 490, "load_transforms_config": 490, "load_transforms_filter_config": 490, "meaning": [490, 585, 608], "load_precisions_config": 490, "get_default_pruning_config_path": 490, "load_model_wise_param": 490, "load_metrics_config": 490, "get_metrics_dict": 490, "load_help_nc_param": 490, "replace_with_valu": 490, "file_path": 490, "verify_file_path": 490, "determine_ip": 490, "ip": 490, "is_development_env": 490, "nc_mode": 490, "filter_transform": 490, "parse_bool_valu": 490, "release_tag": 490, "get_shape_from_transform": 490, "get_height_width_from_s": 490, "parse_to_string_list": 490, "parse_to_float_list": 490, "export_to_csv": 490, "csv": [490, 522, 567], "parse_vers": 490, "string_vers": 490, "are_archive_filenames_valid": 490, "malici": 490, "safe_extract_arch": 490, "zipfil": 490, "tarfil": 490, "destination_dir": 490, "remove_dataload": 491, "datalad": 491, "remove_accuracy_metr": 491, "set_evaluation_dataload": 491, "udpat": 491, "set_evaluation_dataset_path": 491, "dataset_path": [491, 522], "get_performance_config": 491, "set_performance_cores_per_inst": 491, "get_performance_cores_per_inst": 491, "set_performance_num_of_inst": 491, "get_performance_num_of_inst": 491, "set_accuracy_and_performance_batch_s": 491, "set_quantization_dataload": 491, "set_quantization_dataset_path": 491, "set_quantization_batch_s": 491, "set_accuracy_go": 491, "accuracy_go": 491, "set_accuracy_metr": 491, "set_transform": 491, "process_transform": 491, "set_quantization_approach": 491, "set_input": 491, "set_output": 491, "set_quantization_sampling_s": 491, "set_performance_warmup": 491, "set_performance_iter": 491, "set_optimization_precis": 491, "yaml_path": 491, "is_dummi": 492, "labelbal": [492, 569, 570], "set_transforms_from_list": 492, "transforms_list": 492, "set_dataset": 492, "postprocessschema": 493, "get_label_shift_valu": 493, "set_accuracy_postprocess_transform": 493, "set_precis": [494, 496], "sgdoptim": 498, "adamwoptim": 498, "adamoptim": 498, "crossentropylosscriterion": 498, "sparsecategoricalcrossentropycriterion": 498, "knowledgedistillationlosscriterion": 498, "set_postprocess_transform": 498, "weightcompressionapproach": 498, "initialize_prun": 498, "pruner_dict_list": 498, "serialize_prun": 498, "parse_dict_value_to_float": 498, "parse_dict_value_to_int": 498, "wiseconfigdetail": 499, "wiseconfig": 499, "acccriterion": 500, "exitpolici": 500, "set_timeout": 500, "set_max_tri": 500, "trial": [500, 619], "set_performance_onli": 500, "float_represent": 501, "dumper": 501, "pruner_represent": 501, "outsid": 502, "create_simple_respons": 502, "gui": [502, 503, 507, 524, 567, 581, 582, 610, 620], "messagequeu": 502, "queue": [502, 507], "post_failur": 502, "failur": [502, 521], "post_success": 502, "post_error": 502, "global_config_directori": 503, "set_up": 503, "determine_values_from_environ": 503, "get_command_line_arg": 503, "determine_server_port": 503, "max_ports_tri": 503, "port_default": 503, "determine_gui_port": 503, "client": [503, 567], "server_port": 503, "unless": [503, 578], "is_port_taken": 503, "determine_log_level": 503, "determine_url_prefix": 503, "get_url": 503, "dump_token_to_fil": 503, "servicenotfoundexcept": 504, "unknown": 504, "connector": 506, "routingdefinit": 506, "rout": 506, "realtimeroutingdefinit": 506, "realtim": 506, "deferredroutingdefinit": 506, "deferredsubprocessroutingdefinit": 506, "spawn": 506, "get_system_info": 506, "endpoint": 507, "run_serv": 507, "webserv": 507, "get_tls_arg": 507, "tl": [507, 567], "block_ifram": 507, "werkzeug": [507, 515], "ifram": 507, "csp": 507, "block_snif": 507, "mime": 507, "snif": 507, "require_api_token": 507, "author": [507, 583], "j": [507, 520, 524, 622], "handle_api_cal": 507, "subpath": 507, "allow_api_cal": 507, "page_not_found": 507, "disable_cach": 507, "build_paramet": 507, "flask": [507, 567], "web_socket_publish": 507, "web_socket": 507, "flask_socketio": 507, "socketio": [507, 567], "benchmarkservic": 508, "workloadservic": [508, 512, 513, 516], "historysnapshotpars": 509, "history_snapshot": 509, "provide_perform": 509, "parse_history_snapshot": 509, "parse_history_item": 509, "history_item": 509, "extract_accuraci": 509, "extract_perform": 509, "modelservic": 511, "optimizationservic": 512, "profilingservic": 513, "generate_csv": 513, "processor": [514, 524, 586, 609, 611, 613, 614, 622], "requestdataprocessor": 514, "get_string_valu": 514, "responsegener": 515, "serve_from_filesystem": 515, "mimetyp": 515, "as_attach": 515, "add_refresh": 515, "refresh_tim": 515, "refresh": [515, 598, 602], "from_except": 515, "get_status_code_for_except": 515, "get_code_templ": 516, "get_output": 516, "welcom": [518, 519, 520, 524, 623], "interest": [519, 524, 617], "foster": 519, "particip": 519, "harass": 519, "everyon": 519, "ag": 519, "ethnic": 519, "characterist": 519, "gender": 519, "educ": 519, "socio": 519, "econom": 519, "appear": [519, 567, 599, 605], "race": 519, "religion": 519, "sexual": 519, "orient": 519, "contribut": [519, 524], "inclus": 519, "Being": 519, "respect": [519, 578, 610, 621], "viewpoint": 519, "gracefulli": 519, "critic": 519, "focus": [519, 525], "empathi": 519, "toward": [519, 572], "unaccept": 519, "imageri": 519, "unwelcom": 519, "troll": 519, "insult": 519, "derogatori": 519, "comment": [519, 570, 584, 585, 618], "polit": 519, "attack": 519, "publish": [519, 583, 586, 606], "electron": 519, "permiss": 519, "inappropri": 519, "profession": 519, "clarifi": 519, "appropri": 519, "fair": 519, "action": [519, 600, 603], "reject": 519, "wiki": 519, "ban": 519, "temporarili": 519, "perman": [519, 610], "deem": 519, "threaten": 519, "offens": 519, "harm": 519, "mail": 519, "social": [519, 524, 611], "media": [519, 524, 611], "account": [519, 616, 619], "appoint": 519, "event": [519, 617], "abus": 519, "report": [519, 520, 567, 616], "contact": [519, 615, 616], "complaint": 519, "review": [519, 520], "investig": 519, "circumst": [519, 612], "oblig": 519, "confidenti": [519, 567], "regard": [519, 614], "incid": 519, "good": [519, 613, 619], "faith": 519, "repercuss": 519, "leadership": 519, "faq": [519, 524], "page": [519, 520, 524], "view": [520, 524, 567, 575, 596, 605, 615], "pylint": 520, "flake8": 520, "autopep8": 520, "cover": [520, 576, 580, 611], "adopt": [520, 588, 610], "certif": [520, 567], "agre": 520, "bug": 520, "jira": 520, "ticket": 520, "potenti": [520, 522], "risk": 520, "pr": [520, 584, 600, 603, 615], "reproduc": 520, "submit": [520, 611], "intend": 520, "collabor": [520, 590, 596], "adher": 520, "toolkit": [521, 524, 582, 588, 596, 611, 620], "tracer": 521, "resolv": [521, 523], "floatfunct": 521, "cat": [521, 591], "10004": [521, 522, 525, 569, 572, 573, 576, 578, 581, 586, 608, 612, 621], "neural_compressor": [521, 522, 524, 544, 568, 569, 570, 572, 573, 574, 576, 579, 580, 584, 585, 586, 587, 607, 608, 610, 612, 613, 614, 615, 616, 618, 619, 621], "conduct": [521, 585, 593, 605, 620], "imper": 521, "therefor": [521, 585, 610, 613, 615], "lot": 521, "might": [521, 567, 619], "successfulli": [521, 574, 611], "proxi": 521, "tutori": [521, 596, 611, 620], "prototyp": 521, "html": [521, 524, 600, 603], "untrac": 521, "ssd": [521, 622], "resnet34": [521, 622], "r34": 521, "bboxes_labels_scor": 521, "prob": 521, "45": [521, 622], "max_output": 521, "zip": 521, "dbox": 521, "dlabel": 521, "dscore": 521, "decode_singl": 521, "autom": [522, 588, 605, 606], "artifici": 522, "ann": 522, "par": 522, "outperform": 522, "predictor": 522, "4x": [522, 613], "figur": [522, 598, 599, 602, 610], "popul": 522, "inner": 522, "evolutionari": 522, "cycl": 522, "conclud": 522, "simplest": [522, 591], "launcher": [522, 524, 572, 573, 596, 610, 620], "agent": 522, "nsga2": 522, "supernet": 522, "ofa_mbv3_d234_e346_k357_w1": 522, "mac": [522, 606], "num_ev": 522, "250": 522, "results_csv_path": 522, "search_result": 522, "ilsvrc2012": 522, "aim": [522, 524, 588, 610, 619, 620], "mobilenetv3": 522, "lt": [522, 570, 609, 622], "wmt": 522, "en": 522, "de": 522, "guidelin": [523, 524], "mainstream": [524, 620], "learn": [524, 525, 569, 570, 576, 580, 581, 582, 585, 586, 588, 590, 593, 594, 596, 599, 600, 603, 605, 610, 611, 613, 617, 619, 620], "showcas": 524, "broad": [524, 581, 594, 620], "wide": [524, 575, 586, 613, 622], "xeon": [524, 582, 583, 586, 609, 611, 613, 614, 622], "scalabl": [524, 582, 586, 609, 611, 613, 614, 622], "flex": [524, 582], "amd": [524, 581, 582, 622], "arm": [524, 581, 582, 622], "nvidia": [524, 581, 582, 610, 613, 622], "stabl": [524, 567, 582, 611], "diffus": [524, 611, 622], "gpt": [524, 622], "resnet50": [524, 574, 579, 588, 592, 610, 613, 616, 622], "vision": [524, 576, 579, 592], "coder": [524, 581, 589, 590, 593, 596, 599, 611, 620], "workflow": [524, 572, 582, 586, 600, 603, 617, 620], "cloud": [524, 611], "marketplac": [524, 606, 611], "amazon": [524, 588, 596], "azur": [524, 611], "softwar": [524, 583, 586, 609, 610, 611, 615], "alibaba": [524, 595, 602, 603, 611], "tencent": [524, 611], "taco": 524, "ai": [524, 588, 611, 614, 620], "ecosystem": [524, 611], "lightn": [524, 595], "visit": [524, 622], "websit": [524, 582], "pip": [524, 567, 574, 577, 579, 582, 590, 593, 598, 600, 602, 603, 615], "wget": [524, 577, 579], "googleapi": [524, 579], "v1_6": [524, 579], "mobilenet_v1_1": [524, 579], "0_224_frozen": [524, 579], "quick": [524, 578, 620, 621], "overview": [524, 620], "notebook": [524, 620], "oneapi": [524, 582, 611, 620], "analyt": [524, 582, 611, 620], "jupyterlab": [524, 588, 594, 596, 598, 602, 620], "visual": [524, 596, 605, 616, 617, 619, 620], "studio": [524, 596, 605, 620], "topic": [524, 620], "soon": [524, 620], "busi": [524, 611], "jan": [524, 611], "2023": [524, 622], "blog": [524, 611], "enhanc": [524, 588, 611, 614], "4th": [524, 611], "gen": [524, 586, 611, 614], "neurip": [524, 611], "fast": [524, 611], "oct": [524, 611], "quala": [524, 611], "minilm": [524, 611, 622], "legal": [524, 623], "secur": [524, 609, 611, 623], "idea": [524, 610, 619], "feel": 524, "bridg": [525, 581], "vanilla": [525, 581], "abcadaptor": 525, "__init__": [525, 569, 570, 584, 619], "he": 525, "besid": [525, 572], "past": 525, "effect": [525, 610], "mainten": 525, "difficult": 525, "abil": [525, 570, 578], "fragment": 525, "semant": [525, 578], "microsoft": 525, "mla": [525, 613], "explor": 525, "nightli": [567, 582], "pypi": [567, 582, 600, 603], "conda": [567, 577, 582, 591, 599, 615], "forg": [567, 577, 582], "clone": [567, 582, 598, 602], "cd": [567, 574, 582], "setup": [567, 578, 582, 600, 603, 610], "ui": 567, "5000": 567, "338174d13706855fc6924cec7b3a8ae8": 567, "listen": 567, "firewal": 567, "8080": 567, "tf_enable_onednn_opt": [567, 582], "cert": 567, "path_to_cert": 567, "crt": 567, "path_to_private_kei": 567, "encrypt": 567, "insecur": 567, "expos": 567, "forfeit": 567, "threat": 567, "button": [567, 581, 599, 605], "click": [567, 579, 581, 588, 589, 596, 599, 605, 611, 617], "pop": [567, 605], "recognit": [567, 574, 576, 610, 617], "few": [567, 611, 619], "finish": [567, 599], "synthet": 567, "plu": 567, "icon": 567, "section": [567, 572, 573, 605, 610, 612, 621], "unfold": 567, "On": [567, 613], "panel": [567, 600, 603, 605], "navig": 567, "trash": 567, "visibl": 567, "cursor": 567, "prompt": [567, 574], "confirm": 567, "pencil": 567, "light": [567, 573], "blue": 567, "color": 567, "row": [567, 610], "arrow": 567, "checkbox": 567, "column": [567, 610], "chart": [567, 613, 616, 617], "offer": [567, 570], "conveni": [567, 585], "variat": 567, "yellow": 567, "remind": 567, "ofa": 567, "fvcore": 567, "autograd": 567, "pymoo": 567, "numba": 567, "pictur": 567, "ilsvrc": 567, "hour": [567, 619], "dialog": 567, "cryptographi": 567, "linux": [568, 577, 599, 605], "x86_64": 568, "aarch64": 568, "often": [569, 572, 608, 610], "encount": 569, "previous": 569, "lack": [569, 577], "faster": [569, 571, 611, 619, 622], "hard": 569, "treat": 569, "manner": [569, 572, 587], "post_training_static_qu": [569, 570, 585, 612, 619], "300": [569, 570], "customis": [569, 570], "ensp": [570, 584, 618], "imagerecord": [570, 574, 621], "image_nam": 570, "cocorecord": 570, "gt": [570, 576, 618], "int64": 570, "style_transf": 570, "content": 570, "tfrecorddataset": 570, "helloworld": [570, 618], "aid": 571, "increas": [571, 581, 588, 605, 619], "infrastructur": 571, "deploi": [572, 585, 619], "power": [572, 585, 599, 609], "mobil": [572, 585, 622], "softmax": 572, "l": [572, 617, 619], "kd": 572, "kullback": 572, "leibler": 572, "patient": 572, "compact": [572, 585, 591, 610], "ia": 572, "attach": [572, 585], "shallow": 572, "deepest": 572, "deeper": 572, "acceler": [572, 585, 588, 596, 605, 610, 611, 614, 619], "10006": [572, 573], "training_func_for_nc": [572, 573], "huge": 573, "bit": [573, 586, 611, 613], "heavi": 573, "booster": 573, "degrad": 573, "retrain": [573, 610], "incorpor": [573, 619], "novel": [573, 588, 599, 605], "horovod": 574, "builtin": 574, "program": [574, 583, 586, 588, 605], "addition": [574, 619], "enable_eager_execut": 574, "yaml_file_path": 574, "evaluation_time_cost": 574, "partit": 574, "distributedsampl": 574, "train_sampl": 574, "train_dataset": 574, "num_replica": 574, "rank": 574, "train_load": 574, "train_kwarg": 574, "adadelta": 574, "distributedoptim": 574, "named_paramet": 574, "broadcast_paramet": 574, "root_rank": 574, "broadcast_optimizer_st": 574, "set_epoch": 574, "batch_idx": 574, "zero_grad": [574, 585, 610], "nll_loss": 574, "log_interv": 574, "0f": 574, "tloss": 574, "6f": 574, "dry_run": 574, "test_func": 574, "num_of_process": 574, "002": 574, "ssh": [574, 605], "readm": 574, "exactli": [574, 589], "resnet50_v1": [574, 585], "topk": [574, 584, 585], "resizecropimagenet": [574, 618], "realiz": [574, 584, 607, 614, 616], "tow": 574, "situat": 574, "node1": 574, "node2": 574, "TO": [574, 590], "your_node1_nam": 574, "your_node2_nam": 574, "resnet50_fp32_pretrained_model": 574, "nc_resnet50_v1": 574, "resnet": [574, 579, 622], "varieti": [575, 612, 619], "demonstr": [575, 588, 610, 617], "10k": [575, 579], "speedup": [575, 579, 581, 613], "2x": [575, 579, 581, 609], "exchang": 576, "hope": 576, "briefli": [576, 585, 610], "matur": 576, "major": [576, 580, 613], "reus": 576, "inc_model": [576, 587], "fp32_onnx_config": 576, "randn": 576, "int8_onnx_config": 576, "matmulintegertofloat": 576, "matmulinteg": 576, "toolchain": 577, "bare": 577, "metal": 577, "sudo": [577, 591], "apt": [577, 582, 591, 599], "python3": 577, "dev": [577, 598, 602], "distutil": 577, "essenti": 577, "libgl1": 577, "mesa": 577, "glx": 577, "libglib2": 577, "ln": 577, "sf": 577, "usr": 577, "incompat": 577, "88": [577, 616, 622], "80": [577, 617, 622], "pyobject": 577, "reinstal": 577, "importerror": 577, "libgl": 577, "yum": [577, 582], "opencv": [577, 599], "pend": 577, "27": [577, 582, 622], "friendli": [578, 585, 621], "dive": [578, 620], "purpos": [578, 586, 605, 612], "let": [578, 593, 612, 621], "syntax": 578, "up1": 578, "up2": 578, "valid_mixed_precis": 578, "per_tensor": [578, 621], "grappler_optim": 578, "constfold": 578, "arithmet": 578, "debug_stripp": 578, "jupyt": [579, 596, 598, 599, 602], "lab": [579, 598, 599, 600, 602, 603], "concept": [580, 616, 620], "custom_metr": 580, "explicitli": 580, "refin": [580, 610], "These": 581, "420": 581, "geomean": 581, "snippet": 581, "upload": [581, 600, 603], "dispatch": 581, "qintegerop": [581, 613], "plan": 581, "uninstal": [582, 605], "frequent": 582, "ask": 582, "consolid": 582, "eas": [582, 590, 611], "streamlin": 582, "scienc": 582, "anaconda": 582, "suit": [582, 606, 617], "esri": 582, "formerli": 582, "skylak": 582, "cascad": 582, "lake": [582, 586, 611], "cooper": [582, 586, 611], "ic": [582, 610, 611], "sapphir": 582, "rapid": 582, "hbm": 582, "arctic": 582, "sound": 582, "pont": 582, "vecchio": 582, "ubuntu": [582, 609], "fortensorflow": 582, "forpytorch": 582, "onednn": [582, 613], "apach": 583, "copyright": 583, "accompani": 583, "research": 583, "wish": 583, "bibtex": 583, "misc": 583, "feng": 583, "tian": 583, "hanwen": 583, "haihao": [583, 610], "shen": [583, 610], "suyu": 583, "chen": 583, "titl": [583, 606], "howpublish": 583, "year": 583, "logo": [583, 609], "atom": 583, "phi": 583, "pentium": 583, "vtune": 583, "corpor": [583, 609], "subsidiari": [583, 609], "brand": [583, 609], "claim": [583, 609], "popularli": 584, "industri": [584, 611], "label_map": 584, "decis": 584, "ap": 584, "curv": 584, "turn": [584, 599], "target_boxes_num": 584, "str_label": 584, "int_label": 584, "inturn": 584, "cocomap": 584, "vocmap": 584, "categor": 584, "multiclass": 584, "multilabel": 584, "multi_metr": 584, "newmetr": 584, "reflect": [584, 609, 618], "deliv": [585, 611], "upgrad": 585, "veri": [585, 606, 613, 619], "speed": [585, 596, 610, 611, 613, 619], "fundament": 585, "comprehens": [585, 620], "kind": 585, "resort": 585, "automodelforsequenceclassif": 585, "autotoken": 585, "val_dataset": [585, 613], "val_dataload": [585, 613], "ping_memori": [585, 613], "formul": 585, "effort": 585, "written": 585, "onnxrt_integ": [585, 621], "onnxrt_qlinear": [585, 621], "unsupport": 585, "image_tensor": [585, 621], "post_training_dynamic_qu": [585, 612, 619], "2000": 585, "model_wis": [585, 621], "op_dict": 585, "op_wis": [585, 617, 621], "sigopt_api_token": [585, 616, 619], "sigopt_project_id": [585, 616, 619], "sigopt_experiment_nam": [585, 616, 619], "demo": 585, "600": [585, 622], "training_arg": 585, "emul": [585, 613], "trainer": [585, 596], "num_train_epoch": [585, 610], "n_gpu": 585, "gradient_accumulation_step": 585, "clip_grad_norm_": 585, "max_grad_norm": 585, "rate": [585, 610, 613], "start_epoch": [585, 612, 621], "end_epoch": [585, 612, 621], "97": [585, 622], "newli": [585, 610], "layer1": [585, 610], "layer3": [585, 610], "layer2": [585, 610], "lr_schedul": [585, 610], "weight_decai": [585, 621], "0004": 585, "nesterov": [585, 621], "randomresizedcrop": [585, 618], "totensor": [585, 618], "485": 585, "456": 585, "406": 585, "nepoch": 585, "loss_sum": 585, "iter_bar": 585, "tqdm": 585, "desc": 585, "teacher_logit": 585, "train_fun": 585, "training_func": 585, "recent": [585, 586], "growth": [585, 586, 610], "complex": [585, 586, 610], "significantli": [585, 586, 610, 619], "bandwidth": [585, 586], "guarante": 585, "determinist": 585, "arbitrari": [585, 608], "reli": 585, "prune_conf": 585, "quantization_aware_training_conf": 585, "aforement": 585, "inset": 585, "p_conf": [585, 608], "ssd_mobilenet_v1": 585, "lpot": [585, 611, 615], "benchmarkconf": 585, "half": [586, 596], "sixteen": 586, "launch": [586, 606], "3rd": [586, 611, 613, 614], "codenam": 586, "x86": 586, "avx512": [586, 613], "vcvtne2ps2bf16": 586, "vcvtneps2bf16": 586, "vdpbf16p": 586, "onnxrt_cuda_ep": 586, "consequ": 586, "avx512_bf16": 586, "cuda": [586, 588, 590], "persist": 587, "brought": [587, 589, 596, 613], "tf2": 587, "h5": 587, "hybridblock": 587, "0000": 587, "saved_result": 587, "subsequ": [588, 605], "acquir": 588, "analysi": [588, 605, 616], "heurist": [588, 605], "great": 588, "facilit": 588, "autocast": 588, "jit": [588, 590, 595, 617], "simultan": [588, 608, 612], "my_model": 588, "no_grad": 588, "memory_format": 588, "112": [588, 622], "rand": 588, "plugin": [588, 606], "aw": [588, 596, 611, 622], "sagemak": [588, 596], "inlin": [588, 593, 596], "neural_cod": [588, 590, 592, 593, 594, 596], "superbench": 588, "enjoi": [589, 593, 596], "reload": [589, 606], "modern": 590, "democrat": [590, 611], "programm": [590, 596, 605], "nano_bf16_channels_last": 590, "resnet18": [590, 622], "nano_bf16_ipex_channels_last": 590, "nano_bf16_ipex": 590, "nano_bf16": 590, "nano_fp32_channels_last": 590, "nano_fp32_ipex_channels_last": 590, "nano_fp32_ipex": 590, "nano_gpu_to_cpu": 590, "nano_int8": 590, "nano_jit_bf16_channels_last": 590, "nano_jit_bf16_ipex_channels_last": 590, "nano_jit_bf16_ipex": 590, "nano_jit_bf16": 590, "nano_jit_fp32_channels_last": 590, "nano_jit_fp32_ipex_channels_last": 590, "nano_jit_fp32_ipex": 590, "nano_jit_fp32": 590, "nano_onnxruntime_fp32": 590, "nano_onnxruntime_int8_qlinear": 590, "openvino": 590, "nano_openvino_fp32": 590, "nano_openvino_int8": 590, "bc": [591, 599], "conda_prefix": 591, "echo": 591, "tradit": [591, 610], "libjemalloc": 591, "libiomp5": 591, "home": 591, "lib": 591, "ld_preload": 591, "malloc_conf": 591, "oversize_threshold": 591, "background_thread": 591, "metadata_thp": 591, "dirty_decay_m": 591, "9000000000": 591, "muzzy_decay_m": 591, "kmp_affin": 591, "kmp_blocktim": 591, "dnnl_primitive_cache_capac": 591, "cpufreq": 591, "scaling_governor": 591, "powersav": 591, "tee": 591, "pytorch_jit_script": [592, 595], "pytorch_channels_last": [592, 595], "run_bench": 592, "patch": [592, 605], "patch_path": 592, "your_patch_path": 592, "sweep": 592, "sweep_object": 592, "bench_config": 592, "bench_featur": 592, "sai": 593, "run_glu": [593, 594], "requisit": 593, "task_nam": [593, 594], "do_ev": [593, 594], "run_glue_optim": 593, "static_ipex": 593, "auto_qu": 594, "v4": [594, 622], "albert": [594, 622], "sst2": 594, "alexnet": [594, 622], "pytorch_amp": 595, "optimize_for_infer": 595, "pytorch_jit_trac": 595, "pytorch_jit_script_ofi": 595, "pytorch_jit_trace_ofi": 595, "torchdynamo": 595, "pytorch_torchdynamo_jit_script": 595, "pytorch_torchdynamo_jit_trac": 595, "pytorch_torchdynamo_jit_script_ofi": 595, "pytorch_torchdynamo_jit_trace_ofi": 595, "pytorch_inc_bf16": 595, "pytorch_inc_static_quant_fx": 595, "pytorch_inc_static_quant_ipex": 595, "pytorch_inc_dynamic_qu": 595, "pytorch_ipex_fp32": 595, "pytorch_ipex_bf16": 595, "pytorch_ipex_int8_static_qu": 595, "pytorch_ipex_int8_dynamic_qu": 595, "blade": 595, "disc": 595, "pytorch_aliblad": 595, "pytorch_lightning_bf16_cpu": 595, "tensorflow_amp": 595, "keras_amp": 595, "tensorflow_inc": 595, "keras_inc": 595, "onnx_inc_static_quant_qlinear": 595, "onnx_inc_static_quant_qdq": 595, "onnx_inc_dynamic_qu": 595, "optimum": [595, 596], "pytorch_inc_huggingface_optimum_stat": 595, "pytorch_inc_huggingface_optimum_dynam": 595, "intel_extension_for_transform": 595, "bigdl": [595, 596], "nano": [595, 596], "nano_": 595, "inc_auto": 595, "delight": 596, "announc": 596, "500": 596, "innov": [596, 611, 620], "isa": 596, "xpu": 596, "delta": 596, "acc_delta": 596, "int8_acc": 596, "fp32_acc": 596, "ext": [598, 600, 602, 603, 604], "nodej": [598, 602], "jlpm": [598, 602], "yarn": [598, 602], "npm": [598, 599, 602], "lieu": [598, 602], "labextens": [598, 599, 602], "typescript": [598, 602], "watch": [598, 602], "termin": [598, 599, 602], "immedi": [598, 602, 610], "rebuilt": [598, 602], "symlink": [598, 602], "blank": 599, "cell": 599, "gain": [599, 608, 611], "mkl": 599, "jemalloc": 599, "pip3": 599, "headless": 599, "pyproject": [600, 603], "toml": [600, 603], "twine": [600, 603], "whl": [600, 603], "dist": [600, 603], "sdist": [600, 603], "bdist_wheel": [600, 603], "frontend": [600, 603], "login": [600, 603, 616], "cut": [600, 603], "fork": [600, 603], "admin_github_token": [600, 603], "pypi_token": [600, 603], "npm_token": [600, 603], "secret": [600, 603], "draft": [600, 603], "changelog": [600, 603, 604], "pkg": [600, 603], "bot": [600, 603], "pick": [600, 603, 606], "feedstock": [600, 603], "hatch": 603, "notabl": 604, "vscode": [604, 606], "daili": 605, "advantag": [605, 610, 612], "remot": 605, "market": 605, "upper": 605, "sidebar": 605, "hover": 605, "argpars": 605, "diff": 605, "manifest": 606, "declar": 606, "palett": 606, "registercommand": 606, "amodio": 606, "tsl": 606, "dbaeumer": 606, "eslint": 606, "press": 606, "f5": 606, "ctrl": [606, 622], "hello": 606, "world": 606, "breakpoint": 606, "consol": 606, "relaunch": 606, "toolbar": 606, "node_modul": 606, "viewlet": 606, "dropdown": 606, "runner": 606, "startup": 606, "bundl": 606, "multi_object": 607, "platinum": [609, 622], "8358": 609, "manufactur": 609, "m50cyp2sbstd": 609, "se5c620": 609, "86b": 609, "0005": 609, "2202160810": 609, "microcod": 609, "0xd000332": 609, "irq": 609, "60ghz": 609, "6chz": 609, "perf": 609, "512gb": 609, "16x32gb": 609, "ddr4": 609, "3200": 609, "mt": 609, "nic": 609, "1x": 609, "ethernet": 609, "100mb": 609, "i350": 609, "gigabit": 609, "drive": 609, "intel_ssdsckkb48": 609, "447": 609, "1g": 609, "factor": [609, 622], "publicli": 609, "degre": 609, "mark": 609, "trademark": 609, "art": 610, "increasingli": 610, "crucial": 610, "salient": 610, "nonzero": 610, "irregular": 610, "anywher": 610, "2in4": 610, "amper": 610, "oc": 610, "kh": 610, "kw": 610, "shrink": 610, "channelx1": 610, "1xchannel": 610, "particular": 610, "head": 610, "fastform": 610, "formula": 610, "emsp": 610, "downstream": 610, "cube": 610, "discourag": 610, "push": 610, "penal": 610, "l2": 610, "parameter": 610, "exemplifi": 610, "complement": 610, "pruner1": 610, "pruner2": 610, "snip_momentum_progress": 610, "mention": 610, "cv": 610, "hesit": 610, "sst": [610, 622], "flan": 610, "t5": 610, "english": 610, "romanian": 610, "yolov5": 610, "signific": [610, 611, 613], "reduct": [610, 621], "namhoon": 610, "lee": 610, "thalaiyasingam": 610, "ajanthan": 610, "philip": 610, "torr": 610, "2019": 610, "zafrir": 610, "ofir": 610, "ariel": 610, "larei": 610, "boudoukh": 610, "mosh": 610, "wasserblat": 610, "preprint": 610, "2111": 610, "05754": 610, "2021": 610, "mleffici": 611, "dec": 611, "wechat": 611, "deepen": 611, "foundat": 611, "intellig": 611, "vmware": 611, "applianc": 611, "bitnami": 611, "nov": 611, "sota": 611, "plug": 611, "twitter": 611, "linkedin": 611, "zone": 611, "land": 611, "gcp": 611, "pat": 611, "keynot": 611, "intelon": 611, "sep": 611, "chines": 611, "aug": 611, "purif": 611, "sacrif": 611, "jun": 611, "partner": 611, "apr": 611, "feb": 611, "joint": 611, "msft": 611, "bilibili": 611, "gestalt": 611, "ml": 611, "doubl": 611, "mlperf": [611, 622], "reconstruct": 611, "abound": 611, "mar": 611, "nextplatform": 611, "cern": 611, "gan": 611, "3dgan": 611, "iml": 611, "workshop": 611, "asplo": 611, "18": [611, 622], "highli": 611, "intelcaff": 611, "aris": 612, "tell": 612, "henc": 612, "onnxrt_qoper": 612, "quant_aware_train": 612, "initial_spars": [612, 621], "prune_typ": [612, 621], "basic_magnitud": [612, 621], "update_frequ": 612, "prune_domain": 612, "tile_pattern_1x1": 612, "graph_optimization_level": 612, "disable_al": 612, "invent": 613, "int4": 613, "cost": 613, "theoret": 613, "affin": 613, "zeropoint": 613, "asymmetr": [613, 619], "overflow": 613, "solv": [613, 615], "fbgemm": 613, "unseen": 613, "enough": 613, "peopl": 613, "mimic": 613, "fact": 613, "ultim": 613, "pain": 613, "lossi": 613, "understand": [613, 617, 620], "philosophi": 613, "val_load": 613, "top1": [613, 622], "avg": 613, "ON": 614, "postposttrainingquantconfig": 614, "bf16wrapper": 614, "retrac": 614, "site": 615, "assist": 615, "comparison": [615, 617], "sed": 615, "your_script": 615, "backbon": 616, "interact": 616, "sigopt_experiment_id": 616, "nc": [616, 619], "certain": 616, "suffici": 616, "ordinari": 616, "capac": 616, "mobilenet": [616, 622], "8266": 616, "8372": 616, "2132": 616, "83": [616, 622], "7495": 616, "8299": 616, "8294": 616, "85": [616, 622], "0837": 616, "8291": 616, "4469": 616, "discov": 617, "why": 617, "valuabl": 617, "instrument": 617, "writer": 617, "_pre_eval_hook": 617, "submodul": 617, "whitelist": 617, "_recordingobserv": 617, "output_tensors_dict": 617, "current_it": 617, "_observer_forward_hook": 617, "activation_post_process": 617, "_add_observer_": 617, "named_children": 617, "leaf": 617, "add_modul": 617, "register_forward_hook": 617, "dump_tim": 617, "summarywrit": 617, "_acc": 617, "tune_": 617, "add_graph": 617, "get_observer_dict": 617, "observer_dict": 617, "is_quant": 617, "add_histogram": 617, "bind_al": 617, "logdir_spec": 617, "tune_0_acc0": 617, "tune_1": 617, "tune_1_acc0": 617, "79": [617, 622], "four": 617, "baseline_acc_0": 617, "776": 617, "tune_1_acc_0": 617, "095": 617, "runs_v3": 617, "image_recognit": 617, "run_tuning_dump_tensor": 617, "sh": 617, "inceptionv3": 617, "v0": 617, "cg": 617, "conv0": 617, "bash": 617, "run_tun": 617, "topologi": 617, "inception_v3": 617, "dataset_loc": 617, "inceptionv3_fp32_pretrained_model": 617, "nc_inceptionv3": 617, "inceptionv3_dump_tensor": 617, "poor": 617, "disappear": 617, "centercrop": 618, "randomcrop": 618, "cropres": 618, "decodeimag": 618, "jpeg": 618, "encodejp": 618, "alignimagechannel": 618, "68": [618, 622], "116": 618, "78": [618, 622], "103": 618, "94": [618, 622], "017": 618, "bilinearimagenet": [618, 621], "topilimag": 618, "padding_mod": 618, "border": 618, "colorjitt": 618, "bright": 618, "satur": 618, "hue": 618, "jitter": 618, "tondarrai": 618, "quickli": [619, 620], "human": 619, "post_training_auto_qu": 619, "iii": 619, "classic": 619, "primari": 619, "spent": 619, "hawq_v2_loss": 619, "model_loss": 619, "compli": 619, "focu": 619, "short": 619, "never": 619, "loglevel": 619, "endlessli": 619, "smbo": 619, "appl": 619, "surrog": 619, "divid": 619, "quantil": 619, "x1": 619, "x2": 619, "densiti": 619, "parzen": 619, "greatest": 619, "dai": 619, "overridden": 619, "cluster": 619, "seamlessli": 619, "replica": 619, "fed": 619, "handler": 619, "synchron": 619, "abctunestrategi": 619, "familiar": 620, "mobilenet_v1": 621, "subsect": 621, "conv1": 621, "hyper": 621, "40": [621, 622], "06": [621, 622], "beta_1": 621, "beta_2": 621, "sparsecategoricalcrossentropi": 621, "sum_over_batch_s": 621, "from_logit": 621, "54": [621, 622], "19": [621, 622], "90": [621, 622], "overal": 621, "8380": 622, "performancethroughput": 622, "sec": 622, "86": 622, "00": 622, "170": 622, "44": 622, "93": 622, "69": 622, "82x": 622, "92": 622, "63": 622, "39": 622, "85x": 622, "61": 622, "83x": 622, "densenet": 622, "121": 622, "73": 622, "72": 622, "89": 622, "274": 622, "148": 622, "161": 622, "76": 622, "132": 622, "35": 622, "39x": 622, "169": 622, "74": 622, "38": 622, "65": 622, "36": 622, "191": 622, "118": 622, "61x": 622, "cnn": 622, "incept": 622, "37": 622, "81": 622, "55": 622, "84x": 622, "resnet101": 622, "57": 622, "21x": 622, "43": 622, "70x": 622, "26": 622, "59": 622, "51": 622, "70": 622, "14x": 622, "139": 622, "955": 622, "328": 622, "91x": 622, "709": 622, "282": 622, "51x": 622, "v3": 622, "71": 622, "337": 622, "160": 622, "11x": 622, "77": 622, "438": 622, "204": 622, "223": 622, "02": 622, "105": 622, "12x": 622, "10x": 622, "1347": 622, "439": 622, "07x": 622, "56": 622, "1192": 622, "492": 622, "42x": 622, "91": 622, "412": 622, "376": 622, "662": 622, "397": 622, "66x": 622, "299": 622, "23": 622, "154": 622, "67": 622, "93x": 622, "476": 622, "227": 622, "fashion": 622, "2734": 622, "1299": 622, "498": 622, "178": 622, "79x": 622, "46": 622, "427": 622, "173": 622, "47x": 622, "resnetv2": 622, "194": 622, "146": 622, "33x": 622, "48": 622, "237": 622, "187": 622, "27x": 622, "152": 622, "155": 622, "38x": 622, "302": 622, "215": 622, "40x": 622, "346": 622, "312": 622, "277": 622, "60x": 622, "273": 622, "31x": 622, "66": 622, "18x": 622, "82": 622, "53x": 622, "24x": 622, "vgg16": 622, "219": 622, "vgg19": 622, "193": 622, "11506": 622, "9665": 622, "19x": 622, "xception": 622, "262": 622, "137": 622, "58": 622, "barthez": 622, "143": 622, "02x": 622, "84": 622, "20x": 622, "209": 622, "08x": 622, "221": 622, "stsb": 622, "218": 622, "16x": 622, "62": 622, "57x": 622, "55x": 622, "56x": 622, "53": 622, "89x": 622, "blendcnn": 622, "4885": 622, "60": 622, "3715": 622, "camembert": 622, "206": 622, "09x": 622, "deberta": 622, "366": 622, "197": 622, "399": 622, "flaubert": 622, "592": 622, "385": 622, "54x": 622, "wikitext": 622, "hubert": 622, "446": 622, "181": 622, "46x": 622, "layoutlm": 622, "longform": 622, "49": 622, "mbart": 622, "625": 622, "451": 622, "lvwerra": 622, "pegasu": 622, "samsum": 622, "peleenet": 622, "402": 622, "29x": 622, "pokemon": 622, "275": 622, "334": 622, "48x": 622, "reform": 622, "crime": 622, "punish": 622, "162": 622, "153": 622, "06x": 622, "657": 622, "327": 622, "01x": 622, "812": 622, "344": 622, "36x": 622, "360": 622, "23x": 622, "resnext101": 622, "32x8d": 622, "182": 622, "207": 622, "squeezebert": 622, "195": 622, "150": 622, "30x": 622, "75x": 622, "transfo": 622, "xl": 622, "41x": 622, "wave2vec2": 622, "22x": 622, "102": 622, "00x": 622, "115": 622, "17x": 622, "yolo": 622, "232": 622, "28x": 622, "664": 622, "329": 622, "832": 622, "338": 622, "433": 622, "164": 622, "63x": 622, "836": 622, "1396": 622, "463": 622, "90x": 622, "159": 622, "32x": 622, "968": 622, "473": 622, "05x": 622, "958": 622, "477": 622, "arcfac": 622, "126": 622, "78x": 622, "298": 622, "124": 622, "624": 622, "254": 622, "45x": 622, "caffenet": 622, "1432": 622, "540": 622, "65x": 622, "1460": 622, "357": 622, "265": 622, "35x": 622, "86x": 622, "524": 622, "duc": 622, "efficientnet": 622, "1211": 622, "758": 622, "856": 622, "762": 622, "emot": 622, "ferplu": 622, "925": 622, "694": 622, "fcn": 622, "25x": 622, "googlenet": 622, "771": 622, "571": 622, "763": 622, "579": 622, "hf": 622, "156": 622, "multilingu": 622, "99x": 622, "199": 622, "104": 622, "73x": 622, "449": 622, "74x": 622, "l12": 622, "h384": 622, "466": 622, "247": 622, "88x": 622, "l6": 622, "523": 622, "354": 622, "183": 622, "107": 622, "spanbert": 622, "208": 622, "795": 622, "780": 622, "591": 622, "515": 622, "15x": 622, "2370": 622, "1526": 622, "2216": 622, "1506": 622, "2078": 622, "1028": 622, "1762": 622, "76x": 622, "mobilenetv2": 622, "2615": 622, "1645": 622, "59x": 622, "2461": 622, "1674": 622, "766": 622, "431": 622, "77x": 622, "575": 622, "430": 622, "34x": 622, "747": 622, "564": 622, "594": 622, "590": 622, "643": 622, "253": 622, "shufflenet": 622, "2354": 622, "1461": 622, "1850": 622, "1368": 622, "squeezenet": 622, "2484": 622, "1912": 622, "2526": 622, "1911": 622, "710": 622, "549": 622, "622": 622, "497": 622, "652": 622, "507": 622, "573": 622, "470": 622, "527": 622, "396": 622, "68x": 622, "tini": 622, "647": 622, "514": 622, "26x": 622, "ultrafac": 622, "314": 622, "50x": 622, "304": 622, "316": 622, "315": 622, "119": 622, "zfnet": 622, "462": 622, "268": 622, "72x": 622, "465": 622, "62x": 622, "436": 622, "270": 622, "429": 622, "92x": 622, "94x": 622, "331": 622, "242": 622, "37x": 622, "98x": 622, "taskdataset": 622, "accuracyspars": 622, "ratiospars": 622, "commentsbalanc": 622, "unbalanc": 622, "answeringsquad": 622, "87f1": 622, "momentumunbalanc": 622, "momentumbalanc": 622, "90f1": 622, "59f1": 622, "23f1": 622, "classificationmrpc": 622, "52f1": 622, "26f1": 622, "classificationsst": 622, "61accuraci": 622, "recognitionimagenet": 622, "95top1": 622, "2x1": 622, "v5s6": 622, "detectioncoco": 622, "ap0": 622, "404": 622, "6ap0": 622, "393": 622, "584": 622, "34f1": 622, "lassounbalanc": 622, "classificationmnli": 622, "mm": 622, "allbalanc": 622, "32accuraci": 622, "sensitivitybalanc": 622, "classificationqqp": 622, "classificationqnli": 622, "54accuraci": 622, "em": 622, "7965": 622, "wideresnet40": 622, "9522": 622, "8178": 622, "0213": 622, "8235": 622, "027": 622, "5494": 622, "7153": 622, "5540": 622, "0046": 622, "5523": 622, "0029": 622, "vgg": 622, "7022": 622, "7415": 622, "7025": 622, "0003": 622, "6739": 622, "7399": 622, "6845": 622, "0106": 622, "7034": 622, "8382": 622, "bilstm": 622, "8314": 622, "9403": 622, "9048": 622, "0734": 622, "7323": 622, "8256": 622, "8084": 622, "8814": 622, "7442": 622, "8371": 622, "0119": 622, "0115": 622, "tinybert": 622, "8018": 622, "8044": 622, "8363": 622, "8411": 622, "8025": 622, "8074": 622, "0007": 622, "0030": 622, "8626": 622, "8213": 622, "9091": 622, "8782": 622, "8684": 622, "8259": 622, "0058": 622, "distilroberta": 622, "6057": 622, "6455": 622, "6187": 622, "0130": 622, "c6i": 622, "2xlarg": 622, "c6a": 622, "c6g": 622, "a100cuda": 622}, "objects": {"": [[0, 0, 0, "-", "644ec953a7dc_pruning_support"], [1, 0, 0, "-", "6ece06672ed3_v1_14"], [2, 0, 0, "-", "6f0d0f71d92e_v1_13"], [3, 0, 0, "-", "9e89549a08c8_v1_11"], [4, 0, 0, "-", "block_mask"], [5, 0, 0, "-", "env"], [286, 0, 0, "-", "neural_compressor"]], "6ece06672ed3_v1_14": [[1, 1, 1, "ece06672ed3_v1_14.update_dataloaders", "update_dataloaders"], [1, 1, 1, "ece06672ed3_v1_14.update_transformations", "update_transformations"]], "env": [[5, 1, 1, "", "run_migrations_offline"], [5, 1, 1, "", "run_migrations_online"]], "neural_compressor": [[286, 2, 1, "", "Benchmark"], [286, 2, 1, "", "DistillationConfig"], [286, 2, 1, "", "MixedPrecisionConfig"], [286, 2, 1, "", "PostTrainingQuantConfig"], [286, 2, 1, "", "QuantizationAwareTrainingConfig"], [286, 2, 1, "", "WeightPruningConfig"], [7, 0, 0, "-", "adaptor"], [151, 0, 0, "-", "algorithm"], [154, 0, 0, "-", "benchmark"], [158, 0, 0, "-", "compression"], [168, 0, 0, "-", "conf"], [170, 0, 0, "-", "config"], [171, 0, 0, "-", "contrib"], [196, 0, 0, "-", "data"], [248, 0, 0, "-", "experimental"], [293, 0, 0, "-", "metric"], [295, 0, 0, "-", "mix_precision"], [297, 0, 0, "-", "model"], [305, 0, 0, "-", "objective"], [306, 0, 0, "-", "quantization"], [286, 1, 1, "", "set_random_seed"], [286, 1, 1, "", "set_tensorboard"], [286, 1, 1, "", "set_workspace"], [314, 0, 0, "-", "strategy"], [325, 0, 0, "-", "training"], [329, 0, 0, "-", "utils"], [471, 0, 0, "-", "ux"], [517, 0, 0, "-", "version"]], "neural_compressor.Benchmark": [[286, 3, 1, "", "b_dataloader"], [286, 3, 1, "", "b_func"], [286, 4, 1, "", "config_instance"], [286, 4, 1, "", "generate_prefix"], [286, 3, 1, "", "model"], [286, 3, 1, "", "results"], [286, 4, 1, "", "run_instance"], [286, 4, 1, "", "summary_benchmark"]], "neural_compressor.DistillationConfig": [[286, 3, 1, "", "criterion"], [286, 3, 1, "", "optimizer"], [286, 3, 1, "", "teacher_model"]], "neural_compressor.MixedPrecisionConfig": [[286, 3, 1, "", "precision"]], "neural_compressor.PostTrainingQuantConfig": [[286, 3, 1, "", "approach"], [286, 3, 1, "", "tuning_criterion"]], "neural_compressor.QuantizationAwareTrainingConfig": [[286, 3, 1, "", "approach"]], "neural_compressor.WeightPruningConfig": [[286, 3, 1, "", "weight_compression"]], "neural_compressor.adaptor": [[6, 0, 0, "-", "adaptor"], [8, 0, 0, "-", "keras"], [11, 0, 0, "-", "keras_utils"], [13, 0, 0, "-", "mxnet"], [14, 0, 0, "-", "mxnet_utils"], [16, 0, 0, "-", "onnxrt"], [18, 0, 0, "-", "ox_utils"], [41, 0, 0, "-", "pytorch"], [42, 0, 0, "-", "query"], [43, 0, 0, "-", "tensorflow"], [107, 0, 0, "-", "tf_utils"], [145, 0, 0, "-", "torch_utils"]], "neural_compressor.adaptor.adaptor": [[6, 2, 1, "", "Adaptor"], [6, 1, 1, "", "adaptor_registry"]], "neural_compressor.adaptor.adaptor.Adaptor": [[6, 4, 1, "", "convert"], [6, 4, 1, "", "evaluate"], [6, 4, 1, "", "inspect_tensor"], [6, 4, 1, "", "quantize"], [6, 4, 1, "", "quantize_input"], [6, 4, 1, "", "query_fused_patterns"], [6, 4, 1, "", "query_fw_capability"], [6, 4, 1, "", "save"], [6, 4, 1, "", "set_tensor"]], "neural_compressor.adaptor.keras": [[8, 2, 1, "", "KerasAdaptor"]], "neural_compressor.adaptor.keras.KerasAdaptor": [[8, 4, 1, "", "convert"], [8, 4, 1, "", "evaluate"], [8, 4, 1, "", "get_optype_wise_ability"], [8, 4, 1, "", "inspect_tensor"], [8, 4, 1, "", "quantize"], [8, 4, 1, "", "quantize_input"], [8, 4, 1, "", "query_fw_capability"], [8, 4, 1, "", "save"], [8, 4, 1, "", "set_tensor"]], "neural_compressor.adaptor.keras_utils": [[9, 0, 0, "-", "conv2d"], [10, 0, 0, "-", "dense"], [12, 0, 0, "-", "quantizer"]], "neural_compressor.adaptor.mxnet": [[13, 2, 1, "", "MxNetAdaptor"]], "neural_compressor.adaptor.mxnet.MxNetAdaptor": [[13, 4, 1, "", "evaluate"], [13, 4, 1, "", "inspect_tensor"], [13, 4, 1, "", "quantize"], [13, 4, 1, "", "query_fw_capability"], [13, 4, 1, "", "recover_tuned_model"], [13, 4, 1, "", "save"], [13, 4, 1, "", "set_tensor"]], "neural_compressor.adaptor.mxnet_utils": [[15, 0, 0, "-", "util"]], "neural_compressor.adaptor.mxnet_utils.util": [[15, 2, 1, "", "CalibCollector"], [15, 2, 1, "", "CalibData"], [15, 2, 1, "", "CollectorBase"], [15, 2, 1, "", "DataIterLoader"], [15, 2, 1, "", "DataLoaderWrap"], [15, 2, 1, "", "NameCollector"], [15, 2, 1, "", "OpType"], [15, 2, 1, "", "TensorCollector"], [15, 1, 1, "", "amp_convert"], [15, 1, 1, "", "calib_model"], [15, 1, 1, "", "check_mx_version"], [15, 1, 1, "", "combine_capabilities"], [15, 1, 1, "", "create_data_example"], [15, 1, 1, "", "distribute_calib_tensors"], [15, 1, 1, "", "ensure_list"], [15, 1, 1, "", "fuse"], [15, 1, 1, "", "get_framework_name"], [15, 1, 1, "", "is_model_quantized"], [15, 1, 1, "", "isiterable"], [15, 1, 1, "", "make_module"], [15, 1, 1, "", "make_nc_model"], [15, 1, 1, "", "make_symbol_block"], [15, 1, 1, "", "ndarray_to_device"], [15, 1, 1, "", "parse_tune_config"], [15, 1, 1, "", "prepare_dataloader"], [15, 1, 1, "", "prepare_model"], [15, 1, 1, "", "prepare_model_data"], [15, 1, 1, "", "quantize_sym_model"], [15, 1, 1, "", "query_quantizable_nodes"], [15, 1, 1, "", "run_forward"]], "neural_compressor.adaptor.mxnet_utils.util.CalibCollector": [[15, 4, 1, "", "calc_kl_th_dict"], [15, 4, 1, "", "collect_gluon"]], "neural_compressor.adaptor.mxnet_utils.util.CalibData": [[15, 3, 1, "", "min_max_dict"], [15, 4, 1, "", "post_collect"]], "neural_compressor.adaptor.mxnet_utils.util.CollectorBase": [[15, 4, 1, "", "collect_gluon"], [15, 4, 1, "", "collect_module"], [15, 4, 1, "", "post_batch"], [15, 4, 1, "", "pre_batch"]], "neural_compressor.adaptor.mxnet_utils.util.NameCollector": [[15, 4, 1, "", "collect_gluon"]], "neural_compressor.adaptor.mxnet_utils.util.TensorCollector": [[15, 4, 1, "", "collect_gluon"], [15, 4, 1, "", "pre_batch"]], "neural_compressor.adaptor.onnxrt": [[16, 2, 1, "", "ONNXRT_IntegerOpsAdaptor"], [16, 2, 1, "", "ONNXRT_QDQAdaptor"], [16, 2, 1, "", "ONNXRT_QLinearOpsAdaptor"], [16, 2, 1, "", "ONNXRUNTIMEAdaptor"]], "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor": [[16, 4, 1, "", "evaluate"], [16, 4, 1, "", "inspect_tensor"], [16, 4, 1, "", "quantize"], [16, 4, 1, "", "query_fw_capability"], [16, 4, 1, "", "recover"], [16, 4, 1, "", "save"], [16, 4, 1, "", "set_tensor"], [16, 4, 1, "", "smooth_quant"]], "neural_compressor.adaptor.ox_utils": [[17, 0, 0, "-", "calibration"], [30, 0, 0, "-", "operators"], [39, 0, 0, "-", "quantizer"], [40, 0, 0, "-", "util"]], "neural_compressor.adaptor.ox_utils.calibration": [[17, 2, 1, "", "ONNXRTAugment"]], "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment": [[17, 4, 1, "", "augment_graph"], [17, 4, 1, "", "calculate_quantization_params"], [17, 4, 1, "", "calculate_scale_zeropoint"], [17, 4, 1, "", "calib_smooth"], [17, 4, 1, "", "dump_calibration"], [17, 4, 1, "", "dump_minmax"], [17, 4, 1, "", "dump_tensor"], [17, 4, 1, "", "get_intermediate_outputs"]], "neural_compressor.adaptor.ox_utils.operators": [[19, 0, 0, "-", "activation"], [20, 0, 0, "-", "argmax"], [21, 0, 0, "-", "attention"], [22, 0, 0, "-", "binary_op"], [23, 0, 0, "-", "concat"], [24, 0, 0, "-", "conv"], [25, 0, 0, "-", "direct_q8"], [26, 0, 0, "-", "embed_layernorm"], [27, 0, 0, "-", "gather"], [28, 0, 0, "-", "gavgpool"], [29, 0, 0, "-", "gemm"], [31, 0, 0, "-", "lstm"], [32, 0, 0, "-", "matmul"], [33, 0, 0, "-", "maxpool"], [34, 0, 0, "-", "ops"], [35, 0, 0, "-", "pad"], [36, 0, 0, "-", "pooling"], [37, 0, 0, "-", "resize"], [38, 0, 0, "-", "split"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[19, 2, 1, "", "ActivationOperator"], [19, 2, 1, "", "QActivationOperator"], [19, 2, 1, "", "RemovableActivationOperator"]], "neural_compressor.adaptor.ox_utils.operators.activation.ActivationOperator": [[19, 4, 1, "", "convert"], [19, 4, 1, "", "convert_check"], [19, 4, 1, "", "quantize"], [19, 4, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.activation.QActivationOperator": [[19, 4, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.activation.RemovableActivationOperator": [[19, 4, 1, "", "quantize"], [19, 4, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[20, 2, 1, "", "ArgMaxOperator"], [20, 2, 1, "", "QArgMaxOperator"]], "neural_compressor.adaptor.ox_utils.operators.argmax.ArgMaxOperator": [[20, 4, 1, "", "convert"], [20, 4, 1, "", "convert_check"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[21, 2, 1, "", "AttentionOperator"], [21, 2, 1, "", "QAttentionOperator"]], "neural_compressor.adaptor.ox_utils.operators.attention.AttentionOperator": [[21, 4, 1, "", "convert"], [21, 4, 1, "", "convert_check"], [21, 4, 1, "", "quantize"]], "neural_compressor.adaptor.ox_utils.operators.attention.QAttentionOperator": [[21, 4, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[22, 2, 1, "", "BinaryOperator"], [22, 2, 1, "", "QBinaryOperator"]], "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryOperator": [[22, 4, 1, "", "convert"], [22, 4, 1, "", "convert_check"], [22, 4, 1, "", "quantize"], [22, 4, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.binary_op.QBinaryOperator": [[22, 4, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[23, 2, 1, "", "ConcatOperator"], [23, 2, 1, "", "QConcatOperator"]], "neural_compressor.adaptor.ox_utils.operators.concat.ConcatOperator": [[23, 4, 1, "", "cast"], [23, 4, 1, "", "convert"], [23, 4, 1, "", "convert_check"], [23, 4, 1, "", "quantize"], [23, 4, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.concat.QConcatOperator": [[23, 4, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[24, 2, 1, "", "ConvOperator"], [24, 2, 1, "", "QConvOperator"]], "neural_compressor.adaptor.ox_utils.operators.conv.ConvOperator": [[24, 4, 1, "", "convert"], [24, 4, 1, "", "convert_check"], [24, 4, 1, "", "quantize"]], "neural_compressor.adaptor.ox_utils.operators.conv.QConvOperator": [[24, 4, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[25, 2, 1, "", "Direct8BitOperator"], [25, 2, 1, "", "QDirectOperator"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8.Direct8BitOperator": [[25, 4, 1, "", "cast"], [25, 4, 1, "", "convert"], [25, 4, 1, "", "convert_check"], [25, 4, 1, "", "quantize"], [25, 4, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[26, 2, 1, "", "EmbedLayerNormalizationOperator"], [26, 2, 1, "", "QEmbedLayerNormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.EmbedLayerNormalizationOperator": [[26, 4, 1, "", "convert"], [26, 4, 1, "", "convert_check"], [26, 4, 1, "", "quantize"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.QEmbedLayerNormalizationOperator": [[26, 4, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[27, 2, 1, "", "GatherOperator"], [27, 2, 1, "", "QGatherOperator"]], "neural_compressor.adaptor.ox_utils.operators.gather.GatherOperator": [[27, 4, 1, "", "convert"], [27, 4, 1, "", "convert_check"], [27, 4, 1, "", "quantize"], [27, 4, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[28, 2, 1, "", "GlobalAveragePoolOperator"], [28, 2, 1, "", "QGlobalAveragePoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool.GlobalAveragePoolOperator": [[28, 4, 1, "", "convert"], [28, 4, 1, "", "convert_check"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool.QGlobalAveragePoolOperator": [[28, 4, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[29, 2, 1, "", "GemmOperator"], [29, 2, 1, "", "QGemmOperator"]], "neural_compressor.adaptor.ox_utils.operators.gemm.GemmOperator": [[29, 4, 1, "", "convert"], [29, 4, 1, "", "convert_check"], [29, 4, 1, "", "quantize"], [29, 4, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.gemm.QGemmOperator": [[29, 4, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[31, 2, 1, "", "LSTMOperator"]], "neural_compressor.adaptor.ox_utils.operators.lstm.LSTMOperator": [[31, 4, 1, "", "convert"], [31, 4, 1, "", "convert_check"], [31, 4, 1, "", "quantize"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[32, 2, 1, "", "MatMulOperator"], [32, 2, 1, "", "QMatMulOperator"]], "neural_compressor.adaptor.ox_utils.operators.matmul.MatMulOperator": [[32, 4, 1, "", "convert"], [32, 4, 1, "", "convert_check"], [32, 4, 1, "", "quantize"]], "neural_compressor.adaptor.ox_utils.operators.matmul.QMatMulOperator": [[32, 4, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[33, 2, 1, "", "MaxPoolOperator"], [33, 2, 1, "", "QMaxPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.maxpool.MaxPoolOperator": [[33, 4, 1, "", "convert"], [33, 4, 1, "", "convert_check"], [33, 4, 1, "", "quantize"], [33, 4, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[34, 2, 1, "", "Operator"], [34, 2, 1, "", "QOperator"], [34, 1, 1, "", "op_registry"], [34, 1, 1, "", "qop_registry"]], "neural_compressor.adaptor.ox_utils.operators.ops.Operator": [[34, 4, 1, "", "cast"], [34, 4, 1, "", "convert"], [34, 4, 1, "", "convert_check"], [34, 4, 1, "", "quantize"], [34, 4, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.ops.QOperator": [[34, 4, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[35, 2, 1, "", "PadOperator"], [35, 2, 1, "", "QPadOperator"]], "neural_compressor.adaptor.ox_utils.operators.pad.PadOperator": [[35, 4, 1, "", "convert"], [35, 4, 1, "", "convert_check"], [35, 4, 1, "", "quantize"], [35, 4, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[36, 2, 1, "", "PoolOperator"], [36, 2, 1, "", "QPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.pooling.PoolOperator": [[36, 4, 1, "", "convert"], [36, 4, 1, "", "convert_check"], [36, 4, 1, "", "quantize"], [36, 4, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.pooling.QPoolOperator": [[36, 4, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[37, 2, 1, "", "QResizeOperator"], [37, 2, 1, "", "ResizeOperator"]], "neural_compressor.adaptor.ox_utils.operators.resize.ResizeOperator": [[37, 4, 1, "", "convert"], [37, 4, 1, "", "convert_check"], [37, 4, 1, "", "quantize"], [37, 4, 1, "", "quantize_check"]], "neural_compressor.adaptor.ox_utils.operators.split": [[38, 2, 1, "", "QSplitOperator"], [38, 2, 1, "", "SplitOperator"]], "neural_compressor.adaptor.ox_utils.operators.split.QSplitOperator": [[38, 4, 1, "", "convert"]], "neural_compressor.adaptor.ox_utils.operators.split.SplitOperator": [[38, 4, 1, "", "cast"], [38, 4, 1, "", "convert"], [38, 4, 1, "", "convert_check"], [38, 4, 1, "", "quantize"]], "neural_compressor.adaptor.ox_utils.quantizer": [[39, 2, 1, "", "Quantizer"]], "neural_compressor.adaptor.ox_utils.quantizer.Quantizer": [[39, 4, 1, "", "check_opset_version"], [39, 4, 1, "", "convert_qdq_to_operator_oriented"], [39, 4, 1, "", "dequantize_tensor"], [39, 4, 1, "", "dtype_cast"], [39, 4, 1, "", "get_bias_add_nodes"], [39, 4, 1, "", "insert_qdq"], [39, 4, 1, "", "is_valid_quantize_weight"], [39, 4, 1, "", "merge_dedicated_qdq_pair"], [39, 4, 1, "", "quantize_bias"], [39, 4, 1, "", "quantize_bias_tensor"], [39, 4, 1, "", "quantize_inputs"], [39, 4, 1, "", "quantize_model"], [39, 4, 1, "", "quantize_outputs"], [39, 4, 1, "", "quantize_weight_per_channel"], [39, 4, 1, "", "quantize_weights_per_channel"], [39, 4, 1, "", "remove_redundant_pairs"], [39, 4, 1, "", "should_cast"], [39, 4, 1, "", "should_convert"], [39, 4, 1, "", "should_quantize"], [39, 4, 1, "", "tensor_proto_to_array"]], "neural_compressor.adaptor.ox_utils.util": [[40, 2, 1, "", "QuantFormat"], [40, 2, 1, "", "QuantType"], [40, 2, 1, "", "QuantizationMode"], [40, 2, 1, "", "QuantizedInitializer"], [40, 2, 1, "", "QuantizedValue"], [40, 2, 1, "", "QuantizedValueType"], [40, 2, 1, "", "ValueInfo"], [40, 1, 1, "", "adjust_weights_per_input"], [40, 1, 1, "", "adjust_weights_per_op"], [40, 1, 1, "", "attribute_to_kwarg"], [40, 1, 1, "", "calculate_scale_zp"], [40, 1, 1, "", "cast_tensor"], [40, 1, 1, "", "collate_preds"], [40, 1, 1, "", "dequantize_data"], [40, 1, 1, "", "dequantize_data_with_scale_zero"], [40, 1, 1, "", "dtype_to_name"], [40, 1, 1, "", "find_by_name"], [40, 1, 1, "", "float_to_bfloat16"], [40, 1, 1, "", "float_to_float16"], [40, 1, 1, "", "get_smooth_scales_per_input"], [40, 1, 1, "", "get_smooth_scales_per_op"], [40, 1, 1, "", "insert_smooth_mul_op_per_input"], [40, 1, 1, "", "insert_smooth_mul_op_per_op"], [40, 1, 1, "", "is_B_transposed"], [40, 1, 1, "", "make_dquant_node"], [40, 1, 1, "", "make_quant_node"], [40, 1, 1, "", "quantize_data"], [40, 1, 1, "", "quantize_data_per_channel"], [40, 1, 1, "", "quantize_data_with_scale_zero"], [40, 1, 1, "", "quantize_nparray"], [40, 1, 1, "", "remove_init_from_model_input"], [40, 1, 1, "", "split_shared_bias"], [40, 1, 1, "", "trt_env_setup"]], "neural_compressor.adaptor.pytorch": [[41, 2, 1, "", "PyTorchAdaptor"], [41, 2, 1, "", "PyTorch_FXAdaptor"], [41, 2, 1, "", "PyTorch_IPEXAdaptor"], [41, 2, 1, "", "TemplateAdaptor"], [41, 1, 1, "", "get_ops_recursively"]], "neural_compressor.adaptor.pytorch.PyTorchAdaptor": [[41, 4, 1, "", "evaluate"], [41, 4, 1, "", "get_non_quant_modules"], [41, 4, 1, "", "is_fused_child"], [41, 4, 1, "", "is_fused_op"], [41, 4, 1, "", "is_last_fused_child"], [41, 4, 1, "", "quantize"], [41, 4, 1, "", "query_fw_capability"], [41, 4, 1, "", "train"]], "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor": [[41, 4, 1, "", "calculate_op_sensitivity"], [41, 4, 1, "", "convert_sub_graph"], [41, 4, 1, "", "evaluate"], [41, 4, 1, "", "fuse_fx_model"], [41, 4, 1, "", "prepare_sub_graph"], [41, 4, 1, "", "quantize"], [41, 4, 1, "", "query_fw_capability"], [41, 4, 1, "", "train"]], "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor": [[41, 4, 1, "", "evaluate"], [41, 4, 1, "", "quantize"], [41, 4, 1, "", "query_fw_capability"], [41, 4, 1, "", "save"]], "neural_compressor.adaptor.pytorch.TemplateAdaptor": [[41, 4, 1, "", "calculate_hessian_trace"], [41, 4, 1, "", "is_fused_module"], [41, 4, 1, "", "smooth_quant"]], "neural_compressor.adaptor.query": [[42, 2, 1, "", "QueryBackendCapability"]], "neural_compressor.adaptor.query.QueryBackendCapability": [[42, 4, 1, "", "get_fuse_patterns"], [42, 4, 1, "", "get_mixed_precision_combination"], [42, 4, 1, "", "get_op_types"], [42, 4, 1, "", "get_precisions"], [42, 4, 1, "", "get_quantization_capability"], [42, 4, 1, "", "get_version"], [42, 4, 1, "", "set_quantization_config"]], "neural_compressor.adaptor.tensorflow": [[43, 2, 1, "", "TensorFlowAdaptor"], [43, 2, 1, "", "TensorflowQuery"], [43, 2, 1, "", "Tensorflow_ITEXAdaptor"]], "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor": [[43, 4, 1, "", "calculate_op_sensitivity"], [43, 4, 1, "", "convert"], [43, 4, 1, "", "diagnosis_helper"], [43, 4, 1, "", "evaluate"], [43, 4, 1, "", "fused_node_mapping"], [43, 4, 1, "", "get_optype_wise_ability"], [43, 4, 1, "", "get_output_op_names"], [43, 4, 1, "", "inspect_activation"], [43, 4, 1, "", "inspect_tensor"], [43, 4, 1, "", "inspect_weight_and_bias"], [43, 4, 1, "", "qat_convert"], [43, 4, 1, "", "quantize"], [43, 4, 1, "", "quantize_input"], [43, 4, 1, "", "query_fw_capability"], [43, 4, 1, "", "recover_tuned_model"], [43, 4, 1, "", "save"], [43, 4, 1, "", "set_tensor"], [43, 4, 1, "", "train"]], "neural_compressor.adaptor.tensorflow.TensorflowQuery": [[43, 4, 1, "", "generate_internal_patterns"], [43, 4, 1, "", "get_bf16_patterns"], [43, 4, 1, "", "get_eightbit_patterns"], [43, 4, 1, "", "get_fuse_patterns"], [43, 4, 1, "", "get_mixed_precision_combination"], [43, 4, 1, "", "get_op_types"], [43, 4, 1, "", "get_op_types_by_precision"], [43, 4, 1, "", "get_quantization_capability"], [43, 4, 1, "", "get_version"]], "neural_compressor.adaptor.tensorflow.Tensorflow_ITEXAdaptor": [[43, 4, 1, "", "quantize"]], "neural_compressor.adaptor.tf_utils": [[44, 0, 0, "-", "graph_converter"], [45, 0, 0, "-", "graph_converter_without_calib"], [83, 0, 0, "-", "graph_rewriter"], [106, 0, 0, "-", "graph_util"], [108, 0, 0, "-", "quantize_graph"], [135, 0, 0, "-", "quantize_graph_common"], [136, 0, 0, "-", "tf2onnx_converter"], [139, 0, 0, "-", "transform_graph"], [142, 0, 0, "-", "util"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[44, 2, 1, "", "GraphConverter"]], "neural_compressor.adaptor.tf_utils.graph_converter.GraphConverter": [[44, 4, 1, "", "bf16_convert"], [44, 4, 1, "", "convert"], [44, 4, 1, "", "quantize"], [44, 4, 1, "", "quantize_with_qdq_pattern"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[45, 2, 1, "", "GraphConverterWithoutCalib"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib.GraphConverterWithoutCalib": [[45, 4, 1, "", "bf16_convert"], [45, 4, 1, "", "convert_without_calib"], [45, 4, 1, "", "quantize_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[47, 0, 0, "-", "bf16"], [72, 0, 0, "-", "generic"], [82, 0, 0, "-", "graph_base"], [91, 0, 0, "-", "int8"], [97, 0, 0, "-", "onnx"], [102, 0, 0, "-", "qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[46, 0, 0, "-", "bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[46, 2, 1, "", "BF16Convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert.BF16Convert": [[46, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[48, 0, 0, "-", "convert_add_to_biasadd"], [49, 0, 0, "-", "convert_layout"], [50, 0, 0, "-", "convert_leakyrelu"], [51, 0, 0, "-", "convert_nan_to_random"], [52, 0, 0, "-", "convert_placeholder_to_const"], [53, 0, 0, "-", "dequantize_cast_optimizer"], [54, 0, 0, "-", "dilated_contraction"], [55, 0, 0, "-", "dummy_biasadd"], [56, 0, 0, "-", "expanddims_optimizer"], [57, 0, 0, "-", "fetch_weight_from_reshape"], [58, 0, 0, "-", "fold_batch_norm"], [59, 0, 0, "-", "fold_constant"], [60, 0, 0, "-", "fuse_biasadd_add"], [61, 0, 0, "-", "fuse_column_wise_mul"], [62, 0, 0, "-", "fuse_conv_with_math"], [63, 0, 0, "-", "fuse_decomposed_bn"], [64, 0, 0, "-", "fuse_decomposed_in"], [65, 0, 0, "-", "fuse_gelu"], [66, 0, 0, "-", "fuse_layer_norm"], [67, 0, 0, "-", "fuse_pad_with_conv"], [68, 0, 0, "-", "fuse_pad_with_fp32_conv"], [69, 0, 0, "-", "fuse_reshape_transpose"], [70, 0, 0, "-", "graph_cse_optimizer"], [71, 0, 0, "-", "grappler_pass"], [73, 0, 0, "-", "insert_print_node"], [74, 0, 0, "-", "move_squeeze_after_relu"], [75, 0, 0, "-", "pre_optimize"], [76, 0, 0, "-", "remove_training_nodes"], [77, 0, 0, "-", "rename_batch_norm"], [78, 0, 0, "-", "split_shared_input"], [79, 0, 0, "-", "strip_equivalent_nodes"], [80, 0, 0, "-", "strip_unused_nodes"], [81, 0, 0, "-", "switch_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[48, 2, 1, "", "ConvertAddToBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd.ConvertAddToBiasAddOptimizer": [[48, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[49, 2, 1, "", "ConvertLayoutOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout.ConvertLayoutOptimizer": [[49, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[50, 2, 1, "", "ConvertLeakyReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu.ConvertLeakyReluOptimizer": [[50, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[51, 2, 1, "", "ConvertNanToRandom"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random.ConvertNanToRandom": [[51, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[52, 2, 1, "", "ConvertPlaceholderToConst"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst": [[52, 4, 1, "", "do_transformation"], [52, 4, 1, "", "strtobool"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[53, 2, 1, "", "DequantizeCastOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer.DequantizeCastOptimizer": [[53, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[54, 2, 1, "", "DilatedContraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction.DilatedContraction": [[54, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[55, 2, 1, "", "InjectDummyBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd.InjectDummyBiasAddOptimizer": [[55, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[56, 2, 1, "", "ExpandDimsOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer.ExpandDimsOptimizer": [[56, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[57, 2, 1, "", "FetchWeightFromReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape.FetchWeightFromReshapeOptimizer": [[57, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[58, 2, 1, "", "FoldBatchNormNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer": [[58, 4, 1, "", "do_transformation"], [58, 4, 1, "", "scale_after_normalization"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[59, 2, 1, "", "GraphFoldConstantOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer": [[59, 4, 1, "", "check_all_folded"], [59, 4, 1, "", "check_const_inputs"], [59, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[60, 2, 1, "", "FuseBiasAddAndAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add.FuseBiasAddAndAddOptimizer": [[60, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[61, 2, 1, "", "FuseColumnWiseMulOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul.FuseColumnWiseMulOptimizer": [[61, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[62, 2, 1, "", "FuseConvWithMathOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math.FuseConvWithMathOptimizer": [[62, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[63, 2, 1, "", "FuseDecomposedBNOptimizer"], [63, 1, 1, "", "bypass_reshape"], [63, 1, 1, "", "get_const_dim_count"], [63, 1, 1, "", "node_from_map"], [63, 1, 1, "", "node_name_from_input"], [63, 1, 1, "", "valid_reshape_inputs"], [63, 1, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.FuseDecomposedBNOptimizer": [[63, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[64, 2, 1, "", "FuseDecomposedINOptimizer"], [64, 1, 1, "", "bypass_reshape"], [64, 1, 1, "", "get_const_dim_count"], [64, 1, 1, "", "node_from_map"], [64, 1, 1, "", "node_name_from_input"], [64, 1, 1, "", "valid_reshape_inputs"], [64, 1, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.FuseDecomposedINOptimizer": [[64, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[65, 2, 1, "", "FuseGeluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu.FuseGeluOptimizer": [[65, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[66, 2, 1, "", "FuseLayerNormOptimizer"], [66, 1, 1, "", "node_from_map"], [66, 1, 1, "", "node_name_from_input"], [66, 1, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.FuseLayerNormOptimizer": [[66, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[67, 2, 1, "", "FusePadWithConv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv.FusePadWithConv2DOptimizer": [[67, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[68, 2, 1, "", "FusePadWithFP32Conv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.FusePadWithFP32Conv2DOptimizer": [[68, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[69, 2, 1, "", "FuseTransposeReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose.FuseTransposeReshapeOptimizer": [[69, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[70, 2, 1, "", "GraphCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer.GraphCseOptimizer": [[70, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[71, 2, 1, "", "GrapplerOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass.GrapplerOptimizer": [[71, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[73, 2, 1, "", "InsertPrintMinMaxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node.InsertPrintMinMaxNode": [[73, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[74, 2, 1, "", "MoveSqueezeAfterReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu.MoveSqueezeAfterReluOptimizer": [[74, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[75, 2, 1, "", "PreOptimization"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.PreOptimization": [[75, 4, 1, "", "get_excluded_node_names"], [75, 4, 1, "", "get_matched_nodes"], [75, 4, 1, "", "get_optimized_model"], [75, 4, 1, "", "has_positive_input"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[76, 2, 1, "", "RemoveTrainingNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes.RemoveTrainingNodesOptimizer": [[76, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[77, 2, 1, "", "RenameBatchNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm.RenameBatchNormOptimizer": [[77, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[78, 2, 1, "", "SplitSharedInputOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input.SplitSharedInputOptimizer": [[78, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[79, 2, 1, "", "StripEquivalentNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes.StripEquivalentNodesOptimizer": [[79, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[80, 2, 1, "", "StripUnusedNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes.StripUnusedNodesOptimizer": [[80, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[81, 2, 1, "", "SwitchOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer.SwitchOptimizer": [[81, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[82, 2, 1, "", "GraphRewriterBase"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base.GraphRewriterBase": [[82, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[84, 0, 0, "-", "freeze_fake_quant"], [85, 0, 0, "-", "freeze_value"], [86, 0, 0, "-", "freeze_value_without_calib"], [87, 0, 0, "-", "fuse_conv_redundant_dequantize"], [88, 0, 0, "-", "fuse_conv_requantize"], [89, 0, 0, "-", "fuse_matmul_redundant_dequantize"], [90, 0, 0, "-", "fuse_matmul_requantize"], [92, 0, 0, "-", "meta_op_optimizer"], [93, 0, 0, "-", "post_hostconst_converter"], [94, 0, 0, "-", "post_quantized_op_cse"], [95, 0, 0, "-", "rnn_convert"], [96, 0, 0, "-", "scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[84, 2, 1, "", "FreezeFakeQuantOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant.FreezeFakeQuantOpOptimizer": [[84, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[85, 2, 1, "", "FreezeValueTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer": [[85, 4, 1, "", "do_transformation"], [85, 4, 1, "", "generate_output_graph"], [85, 4, 1, "", "generate_output_graph_ranges"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[86, 2, 1, "", "FreezeValueWithoutCalibTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer": [[86, 4, 1, "", "do_transformation_without_calib"], [86, 4, 1, "", "generate_output_graph"], [86, 4, 1, "", "generate_output_graph_ranges"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[87, 2, 1, "", "FuseConvRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.FuseConvRedundantDequantizeTransformer": [[87, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[88, 2, 1, "", "FuseConvRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize.FuseConvRequantizeTransformer": [[88, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[89, 2, 1, "", "FuseMatMulRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.FuseMatMulRedundantDequantizeTransformer": [[89, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[90, 2, 1, "", "FuseMatMulRequantizeDequantizeNewAPITransformer"], [90, 2, 1, "", "FuseMatMulRequantizeDequantizeTransformer"], [90, 2, 1, "", "FuseMatMulRequantizeNewAPITransformer"], [90, 2, 1, "", "FuseMatMulRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeNewAPITransformer": [[90, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeTransformer": [[90, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeNewAPITransformer": [[90, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeTransformer": [[90, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[92, 2, 1, "", "MetaInfoChangingMemOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer.MetaInfoChangingMemOpOptimizer": [[92, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[93, 2, 1, "", "PostHostConstConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter.PostHostConstConverter": [[93, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[94, 2, 1, "", "PostCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse.PostCseOptimizer": [[94, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[95, 2, 1, "", "QuantizedRNNConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert.QuantizedRNNConverter": [[95, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[96, 2, 1, "", "ScaleProPagationTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation.ScaleProPagationTransformer": [[96, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[98, 0, 0, "-", "onnx_graph"], [99, 0, 0, "-", "onnx_node"], [100, 0, 0, "-", "onnx_schema"], [101, 0, 0, "-", "tf2onnx_utils"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[98, 2, 1, "", "OnnxGraph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph": [[98, 4, 1, "", "add_graph_input"], [98, 4, 1, "", "add_graph_output"], [98, 4, 1, "", "append_node"], [98, 4, 1, "", "apply_onnx_fusion"], [98, 4, 1, "", "convert_qdq_nodes"], [98, 4, 1, "", "copy_dtype"], [98, 4, 1, "", "copy_shape"], [98, 4, 1, "", "create_new_graph_with_same_config"], [98, 4, 1, "", "delete_qdq_nodes"], [98, 4, 1, "", "delete_unused_nodes"], [98, 4, 1, "", "dump_graph"], [98, 4, 1, "", "dump_node_statistics"], [98, 3, 1, "", "extra_opset"], [98, 4, 1, "", "extract_sub_graph_nodes"], [98, 4, 1, "", "find_output_consumers"], [98, 4, 1, "", "get_dtype"], [98, 4, 1, "", "get_node_by_name"], [98, 4, 1, "", "get_node_by_output"], [98, 4, 1, "", "get_node_by_output_in_current_graph"], [98, 4, 1, "", "get_nodes"], [98, 4, 1, "", "get_rank"], [98, 4, 1, "", "get_shape"], [98, 4, 1, "", "get_tensor_value"], [98, 3, 1, "", "input_names"], [98, 4, 1, "", "insert_new_node_on_input"], [98, 4, 1, "", "insert_new_node_on_output"], [98, 4, 1, "", "insert_node_on_output"], [98, 4, 1, "", "is_const"], [98, 4, 1, "", "is_empty_input"], [98, 4, 1, "", "is_target"], [98, 4, 1, "", "make_const"], [98, 4, 1, "", "make_graph"], [98, 4, 1, "", "make_model"], [98, 4, 1, "", "make_node"], [98, 4, 1, "", "make_onnx_graph_io"], [98, 3, 1, "", "opset"], [98, 4, 1, "", "optimize_conv_add_fusion"], [98, 4, 1, "", "remove_input"], [98, 4, 1, "", "remove_node"], [98, 4, 1, "", "replace_all_inputs"], [98, 4, 1, "", "replace_input"], [98, 4, 1, "", "replace_inputs"], [98, 4, 1, "", "reset_nodes"], [98, 4, 1, "", "safe_remove_nodes"], [98, 4, 1, "", "safe_to_remove_nodes"], [98, 4, 1, "", "set_config"], [98, 4, 1, "", "set_dtype"], [98, 4, 1, "", "set_node_by_name"], [98, 4, 1, "", "set_shape"], [98, 4, 1, "", "topological_sort"], [98, 4, 1, "", "update_node_shape_dtype"], [98, 4, 1, "", "update_proto"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[99, 2, 1, "", "OnnxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode": [[99, 3, 1, "", "attr"], [99, 4, 1, "", "child_name"], [99, 3, 1, "", "data_format"], [99, 3, 1, "", "domain"], [99, 4, 1, "", "get_attr"], [99, 4, 1, "", "get_attr_int"], [99, 4, 1, "", "get_attr_str"], [99, 4, 1, "", "get_attr_value"], [99, 4, 1, "", "get_body_graphs"], [99, 4, 1, "", "get_implicit_inputs"], [99, 4, 1, "", "get_onnx_attrs"], [99, 4, 1, "", "get_tensor_value"], [99, 4, 1, "", "get_value_attr"], [99, 3, 1, "", "input"], [99, 3, 1, "", "inputs"], [99, 4, 1, "", "is_const"], [99, 4, 1, "", "is_graph_input"], [99, 4, 1, "", "is_graph_input_default_const"], [99, 4, 1, "", "is_nhwc"], [99, 4, 1, "", "is_scalar"], [99, 4, 1, "", "is_while"], [99, 3, 1, "", "name"], [99, 4, 1, "", "need_skip"], [99, 3, 1, "", "op"], [99, 3, 1, "", "output"], [99, 3, 1, "", "output_dtypes"], [99, 3, 1, "", "output_shapes"], [99, 4, 1, "", "scalar_to_dim1"], [99, 4, 1, "", "set_attr"], [99, 4, 1, "", "set_attr_onnx"], [99, 4, 1, "", "set_body_graph_as_attr"], [99, 4, 1, "", "set_tensor_value"], [99, 3, 1, "", "skip_conversion"], [99, 3, 1, "", "summary"], [99, 3, 1, "", "type"], [99, 4, 1, "", "update_proto"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[100, 2, 1, "", "OnnxOpSchema"], [100, 1, 1, "", "get_max_supported_opset_version"], [100, 1, 1, "", "get_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.OnnxOpSchema": [[100, 3, 1, "", "attributes"], [100, 3, 1, "", "domain"], [100, 4, 1, "", "from_onnx_schema"], [100, 4, 1, "", "has_attribute"], [100, 3, 1, "", "name"], [100, 3, 1, "", "since_version"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[101, 2, 1, "", "SeqType"], [101, 1, 1, "", "add_port_to_name"], [101, 1, 1, "", "are_shapes_equal"], [101, 1, 1, "", "assert_error"], [101, 1, 1, "", "compute_const_folding_using_tf"], [101, 1, 1, "", "convert_tensorflow_tensor_to_onnx"], [101, 1, 1, "", "find_opset"], [101, 1, 1, "", "get_index_from_strided_slice_of_shape"], [101, 1, 1, "", "get_subgraphs_from_onnx"], [101, 1, 1, "", "get_tensorflow_node_attr"], [101, 1, 1, "", "get_tensorflow_node_shape_attr"], [101, 1, 1, "", "get_tensorflow_tensor_data"], [101, 1, 1, "", "get_tensorflow_tensor_shape"], [101, 1, 1, "", "infer_onnx_shape_dtype"], [101, 1, 1, "", "initialize_name_counter"], [101, 1, 1, "", "is_list_or_tuple"], [101, 1, 1, "", "is_onnx_domain"], [101, 1, 1, "", "make_onnx_inputs_outputs"], [101, 1, 1, "", "make_onnx_shape"], [101, 1, 1, "", "map_numpy_to_onnx_dtype"], [101, 1, 1, "", "map_onnx_to_numpy_type"], [101, 1, 1, "", "map_tensorflow_dtype"], [101, 1, 1, "", "read_tensorflow_node_attrs"], [101, 1, 1, "", "save_protobuf"], [101, 1, 1, "", "set_name"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[103, 0, 0, "-", "insert_qdq_pattern"], [104, 0, 0, "-", "merge_duplicated_qdq"], [105, 0, 0, "-", "share_qdq_y_pattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[103, 2, 1, "", "GenerateGraphWithQDQPattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern.GenerateGraphWithQDQPattern": [[103, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[104, 2, 1, "", "MergeDuplicatedQDQOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq.MergeDuplicatedQDQOptimizer": [[104, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[105, 2, 1, "", "ShareQDQForItexYPatternOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern.ShareQDQForItexYPatternOptimizer": [[105, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_util": [[106, 2, 1, "", "GraphAnalyzer"], [106, 2, 1, "", "GraphRewriterHelper"]], "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer": [[106, 4, 1, "", "add_node"], [106, 4, 1, "", "dump_graph"], [106, 4, 1, "", "get_frame_info"], [106, 4, 1, "", "get_graph_input_output"], [106, 3, 1, "", "graph"], [106, 4, 1, "", "has_positive_input"], [106, 4, 1, "", "parse_graph"], [106, 4, 1, "", "query_fusion_pattern_nodes"], [106, 4, 1, "", "remove_node"], [106, 4, 1, "", "remove_node_with_single_input_output"], [106, 4, 1, "", "replace_const_node"], [106, 4, 1, "", "replace_constant_graph_with_constant_node"], [106, 4, 1, "", "replace_node"], [106, 4, 1, "", "replace_single_node"]], "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper": [[106, 4, 1, "", "analysis_rnn_model"], [106, 4, 1, "", "compare_node_attr"], [106, 4, 1, "", "create_constant_node"], [106, 4, 1, "", "create_node"], [106, 4, 1, "", "gen_valid_sampling_log"], [106, 4, 1, "", "generate_int32_bias_for_conv"], [106, 4, 1, "", "generate_int32_bias_for_matmul"], [106, 4, 1, "", "node_name_from_input"], [106, 4, 1, "", "set_attr_bool"], [106, 4, 1, "", "set_attr_dtype"], [106, 4, 1, "", "set_attr_float"], [106, 4, 1, "", "set_attr_int"], [106, 4, 1, "", "set_attr_int_list"], [106, 4, 1, "", "set_attr_string"], [106, 4, 1, "", "set_attr_string_list"], [106, 4, 1, "", "set_attr_tensor"], [106, 4, 1, "", "set_attr_type_list"], [106, 4, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[110, 0, 0, "-", "qat"], [126, 0, 0, "-", "qdq"], [128, 0, 0, "-", "quantize_graph_base"], [129, 0, 0, "-", "quantize_graph_bn"], [130, 0, 0, "-", "quantize_graph_concatv2"], [131, 0, 0, "-", "quantize_graph_conv"], [132, 0, 0, "-", "quantize_graph_for_intel_cpu"], [133, 0, 0, "-", "quantize_graph_matmul"], [134, 0, 0, "-", "quantize_graph_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[109, 0, 0, "-", "fake_quantize"], [111, 0, 0, "-", "quantize_config"], [112, 0, 0, "-", "quantize_helper"], [113, 0, 0, "-", "quantize_layers"], [118, 0, 0, "-", "quantize_wrapper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[109, 2, 1, "", "FakeQuantize"], [109, 2, 1, "", "FakeQuantizeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantize": [[109, 4, 1, "", "get_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantizeBase": [[109, 4, 1, "", "from_config"], [109, 4, 1, "", "get_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[111, 2, 1, "", "QuantizeConfig"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig": [[111, 4, 1, "", "add_quantize_recipe"], [111, 4, 1, "", "clear_quantize_recipe"], [111, 4, 1, "", "get_quantize_recipe"], [111, 4, 1, "", "is_empty"], [111, 4, 1, "", "query_layer"], [111, 4, 1, "", "remove_layer"], [111, 4, 1, "", "remove_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[112, 1, 1, "", "init_quantize_config"], [112, 1, 1, "", "qat_clone_function"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[114, 0, 0, "-", "optimize_layer"], [115, 0, 0, "-", "quantize_layer_add"], [116, 0, 0, "-", "quantize_layer_base"], [117, 0, 0, "-", "quantize_layer_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[114, 1, 1, "", "config_quantizable_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[115, 2, 1, "", "QuantizeLayerAdd"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[116, 2, 1, "", "QuantizeLayerBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[117, 2, 1, "", "QuantizeLayerBatchNormalization"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[118, 2, 1, "", "QuantizeWrapper"], [118, 2, 1, "", "QuantizeWrapperBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapper": [[118, 4, 1, "", "build"], [118, 4, 1, "", "call"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase": [[118, 4, 1, "", "build"], [118, 4, 1, "", "call"], [118, 4, 1, "", "compute_output_shape"], [118, 4, 1, "", "from_config"], [118, 4, 1, "", "get_config"], [118, 3, 1, "", "losses"], [118, 3, 1, "", "non_trainable_weights"], [118, 4, 1, "", "query_input_index"], [118, 3, 1, "", "trainable"], [118, 3, 1, "", "trainable_weights"], [118, 3, 1, "", "updates"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[119, 0, 0, "-", "fuse_qdq_bn"], [120, 0, 0, "-", "fuse_qdq_concatv2"], [121, 0, 0, "-", "fuse_qdq_conv"], [122, 0, 0, "-", "fuse_qdq_deconv"], [123, 0, 0, "-", "fuse_qdq_in"], [124, 0, 0, "-", "fuse_qdq_matmul"], [125, 0, 0, "-", "fuse_qdq_pooling"], [127, 0, 0, "-", "optimize_qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[119, 2, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3": [[119, 4, 1, "", "apply_newly_bn_leakyrelu_fusion"], [119, 4, 1, "", "apply_newly_bn_relu_fusion"], [119, 4, 1, "", "apply_the_transform"], [119, 4, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[120, 2, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2": [[120, 4, 1, "", "apply_the_transform"], [120, 4, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[121, 2, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d": [[121, 4, 1, "", "apply_conv3d_add_addn_fusion"], [121, 4, 1, "", "apply_conv3d_add_addn_relu_fusion"], [121, 4, 1, "", "apply_conv3d_add_fusion"], [121, 4, 1, "", "apply_conv3d_add_relu_fusion"], [121, 4, 1, "", "apply_conv3d_single_fusion"], [121, 4, 1, "", "apply_conv_biasadd_hardswish_fusion"], [121, 4, 1, "", "apply_newly_conv_biasadd_addn_fusion"], [121, 4, 1, "", "apply_newly_conv_biasadd_addn_relu_fusion"], [121, 4, 1, "", "apply_newly_conv_biasadd_fusion"], [121, 4, 1, "", "apply_newly_conv_biasadd_relu_fusion"], [121, 4, 1, "", "apply_newly_conv_biasadd_swishf32_fusion"], [121, 4, 1, "", "apply_newly_conv_single_fusion"], [121, 4, 1, "", "apply_the_transform"], [121, 4, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[122, 2, 1, "", "FuseNodeStartWithDeconv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d": [[122, 4, 1, "", "apply_deconv2d_biasadd_fusion"], [122, 4, 1, "", "apply_deconv3d_biasadd_fusion"], [122, 4, 1, "", "apply_single_deconv2d_fusion"], [122, 4, 1, "", "apply_single_deconv3d_fusion"], [122, 4, 1, "", "apply_the_transform"], [122, 4, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[123, 2, 1, "", "FuseNodeStartWithFusedInstanceNorm"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm": [[123, 4, 1, "", "apply_newly_in_relu_fusion"], [123, 4, 1, "", "apply_the_transform"], [123, 4, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[124, 2, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul": [[124, 4, 1, "", "apply_batchmatmulv2_fusion"], [124, 4, 1, "", "apply_batchmatmulv2_mul_add_fusion"], [124, 4, 1, "", "apply_matmul_biasadd_fusion"], [124, 4, 1, "", "apply_matmul_biasadd_relu_fusion"], [124, 4, 1, "", "apply_the_transform"], [124, 4, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[125, 2, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling": [[125, 4, 1, "", "apply_the_transform"], [125, 4, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[127, 2, 1, "", "OptimizeQDQGraph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.OptimizeQDQGraph": [[127, 4, 1, "", "do_transform"], [127, 4, 1, "", "get_quantized_nodes"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[128, 2, 1, "", "QuantizeGraphBase"], [128, 2, 1, "", "QuantizeNodeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase": [[128, 4, 1, "", "do_transform"], [128, 4, 1, "", "register_transformer"], [128, 4, 1, "", "remove_dead_nodes"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase": [[128, 4, 1, "", "add_output_graph_node"], [128, 4, 1, "", "apply_the_transform"], [128, 4, 1, "", "create_nodes_map"], [128, 4, 1, "", "eightbitize_single_input_tensor_node"], [128, 4, 1, "", "get_longest_fuse"], [128, 4, 1, "", "remove_redundant_quantization"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[129, 2, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3": [[129, 4, 1, "", "apply_newly_bn_leakyrelu_fusion"], [129, 4, 1, "", "apply_newly_bn_relu_fusion"], [129, 4, 1, "", "apply_the_transform"], [129, 4, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[130, 2, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2": [[130, 4, 1, "", "apply_the_transform"], [130, 4, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[131, 2, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d": [[131, 4, 1, "", "apply_conv_biasadd_addn_relu_fusion"], [131, 4, 1, "", "apply_conv_biasadd_fusion"], [131, 4, 1, "", "apply_conv_biasadd_relu_fusion"], [131, 4, 1, "", "apply_conv_single_fusion"], [131, 4, 1, "", "apply_the_transform"], [131, 4, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[132, 2, 1, "", "QuantizeGraphForIntel"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu.QuantizeGraphForIntel": [[132, 4, 1, "", "do_transform"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[133, 2, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul": [[133, 4, 1, "", "apply_matmul_biasadd_fusion"], [133, 4, 1, "", "apply_matmul_biasadd_relu_fusion"], [133, 4, 1, "", "apply_the_transform"], [133, 4, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[134, 2, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling": [[134, 4, 1, "", "apply_the_transform"], [134, 4, 1, "", "get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[135, 2, 1, "", "QuantizeGraphHelper"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper": [[135, 4, 1, "", "copy_attr"], [135, 4, 1, "", "create_constant_node"], [135, 4, 1, "", "create_node"], [135, 4, 1, "", "ensure_tensor_name_has_port"], [135, 4, 1, "", "generate_quantized_weight_node"], [135, 4, 1, "", "get_sorted_graph"], [135, 4, 1, "", "node_name_from_input"], [135, 4, 1, "", "remove_training_nodes"], [135, 4, 1, "", "set_attr_bool"], [135, 4, 1, "", "set_attr_dtype"], [135, 4, 1, "", "set_attr_float"], [135, 4, 1, "", "set_attr_int"], [135, 4, 1, "", "set_attr_string"], [135, 4, 1, "", "set_attr_string_list"], [135, 4, 1, "", "set_attr_tensor"], [135, 4, 1, "", "set_attr_type_list"], [135, 4, 1, "", "split_shared_inputs"], [135, 4, 1, "", "unique_node_name_from_input"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[136, 2, 1, "", "TensorflowQDQToOnnxQDQConverter"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter.TensorflowQDQToOnnxQDQConverter": [[136, 4, 1, "", "convert"], [136, 4, 1, "", "duplicate_tf_quantizev2_nodes"], [136, 4, 1, "", "tf_graph_optimize"], [136, 4, 1, "", "transpose_inputs"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[137, 0, 0, "-", "bias_correction"], [138, 0, 0, "-", "graph_transform_base"], [140, 0, 0, "-", "insert_logging"], [141, 0, 0, "-", "rerange_quantized_concat"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[137, 2, 1, "", "BiasCorrection"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction.BiasCorrection": [[137, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[138, 2, 1, "", "GraphTransformBase"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.GraphTransformBase": [[138, 4, 1, "", "do_transformation"], [138, 4, 1, "", "generate_input_map"], [138, 4, 1, "", "get_node_name_from_input"], [138, 4, 1, "", "node_name_from_input"], [138, 4, 1, "", "parse_input_pb"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[140, 2, 1, "", "InsertLogging"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging.InsertLogging": [[140, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[141, 2, 1, "", "RerangeQuantizedConcat"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat.RerangeQuantizedConcat": [[141, 4, 1, "", "do_transformation"]], "neural_compressor.adaptor.tf_utils.util": [[142, 1, 1, "", "collate_tf_preds"], [142, 1, 1, "", "disable_random"], [142, 1, 1, "", "fix_ref_type_of_graph_def"], [142, 1, 1, "", "generate_feed_dict"], [142, 1, 1, "", "get_estimator_graph"], [142, 1, 1, "", "get_graph_def"], [142, 1, 1, "", "get_input_output_node_names"], [142, 1, 1, "", "get_model_input_shape"], [142, 1, 1, "", "get_tensor_by_name"], [142, 1, 1, "", "get_tensor_val_from_graph_node"], [142, 1, 1, "", "int8_node_name_reverse"], [142, 1, 1, "", "is_ckpt_format"], [142, 1, 1, "", "is_saved_model_format"], [142, 1, 1, "", "iterator_sess_run"], [142, 1, 1, "", "read_graph"], [142, 1, 1, "", "strip_equivalent_nodes"], [142, 1, 1, "", "strip_unused_nodes"], [142, 1, 1, "", "tf_diagnosis_helper"], [142, 1, 1, "", "version1_eq_version2"], [142, 1, 1, "", "version1_gt_version2"], [142, 1, 1, "", "version1_gte_version2"], [142, 1, 1, "", "version1_lt_version2"], [142, 1, 1, "", "version1_lte_version2"], [142, 1, 1, "", "write_graph"]], "neural_compressor.adaptor.torch_utils": [[143, 0, 0, "-", "bf16_convert"], [144, 0, 0, "-", "hawq_metric"], [146, 0, 0, "-", "smooth_quant"], [147, 0, 0, "-", "symbolic_trace"], [148, 0, 0, "-", "util"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[143, 2, 1, "", "BF16ModuleWrapper"], [143, 1, 1, "", "Convert"], [143, 1, 1, "", "bf16_symbolic_trace"]], "neural_compressor.adaptor.torch_utils.bf16_convert.BF16ModuleWrapper": [[143, 4, 1, "", "forward"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[144, 2, 1, "", "HessianTrace"], [144, 2, 1, "", "Node_collector"], [144, 1, 1, "", "compare_weights"], [144, 1, 1, "", "hawq_top"]], "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace": [[144, 4, 1, "", "get_act_gap"], [144, 4, 1, "", "get_act_traces"], [144, 4, 1, "", "get_avg_traces"], [144, 4, 1, "", "get_device"], [144, 4, 1, "", "get_fused_mapping"], [144, 4, 1, "", "get_params"], [144, 4, 1, "", "get_vtHv_weight"], [144, 4, 1, "", "get_weight_traces"], [144, 4, 1, "", "is_fused_module"], [144, 4, 1, "", "mse_metric_gap"], [144, 4, 1, "", "register_act_grad_hooks"], [144, 4, 1, "", "reset_act_gradient_and_hooks"]], "neural_compressor.adaptor.torch_utils.hawq_metric.Node_collector": [[144, 4, 1, "", "hook_fn_act"], [144, 4, 1, "", "remove"]], "neural_compressor.adaptor.torch_utils.smooth_quant": [[146, 2, 1, "", "GraphTrace"], [146, 2, 1, "", "TorchSmoothQuant"]], "neural_compressor.adaptor.torch_utils.smooth_quant.TorchSmoothQuant": [[146, 4, 1, "", "recover"], [146, 4, 1, "", "transform"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[147, 1, 1, "", "symbolic_trace"], [147, 1, 1, "", "trace_and_fuse_sub_graph"]], "neural_compressor.adaptor.torch_utils.util": [[148, 1, 1, "", "append_attr"], [148, 1, 1, "", "auto_copy"], [148, 1, 1, "", "check_cfg_and_qconfig"], [148, 1, 1, "", "collate_torch_preds"], [148, 1, 1, "", "fetch_module"], [148, 1, 1, "", "generate_activation_observer"], [148, 1, 1, "", "get_embedding_contiguous"], [148, 1, 1, "", "get_example_input"], [148, 1, 1, "", "get_fallback_order"], [148, 1, 1, "", "get_mse_order_per_fp32"], [148, 1, 1, "", "get_mse_order_per_int8"], [148, 1, 1, "", "get_quantizable_ops_from_cfgs"], [148, 1, 1, "", "get_torch_version"], [148, 1, 1, "", "input2tuple"], [148, 1, 1, "", "is_fused_module"], [148, 1, 1, "", "paser_cfgs"], [148, 1, 1, "", "set_module"], [148, 1, 1, "", "simple_inference"]], "neural_compressor.algorithm": [[151, 2, 1, "", "ALGORITHMS"], [151, 2, 1, "", "Algorithm"], [151, 2, 1, "", "AlgorithmScheduler"], [149, 0, 0, "-", "algorithm"], [151, 1, 1, "", "algorithm_registry"], [150, 0, 0, "-", "fast_bias_correction"], [152, 0, 0, "-", "smooth_quant"], [153, 0, 0, "-", "weight_correction"]], "neural_compressor.algorithm.ALGORITHMS": [[151, 4, 1, "", "support_algorithms"]], "neural_compressor.algorithm.AlgorithmScheduler": [[151, 3, 1, "", "adaptor"], [151, 4, 1, "", "append_algorithm"], [151, 3, 1, "", "calib_iter"], [151, 3, 1, "", "dataloader"], [151, 3, 1, "", "origin_model"], [151, 3, 1, "", "q_model"], [151, 4, 1, "", "reset_exec_algorithms"]], "neural_compressor.algorithm.algorithm": [[149, 2, 1, "", "ALGORITHMS"], [149, 2, 1, "", "Algorithm"], [149, 2, 1, "", "AlgorithmScheduler"], [149, 1, 1, "", "algorithm_registry"]], "neural_compressor.algorithm.algorithm.ALGORITHMS": [[149, 4, 1, "", "support_algorithms"]], "neural_compressor.algorithm.algorithm.AlgorithmScheduler": [[149, 3, 1, "", "adaptor"], [149, 4, 1, "", "append_algorithm"], [149, 3, 1, "", "calib_iter"], [149, 3, 1, "", "dataloader"], [149, 3, 1, "", "origin_model"], [149, 3, 1, "", "q_model"], [149, 4, 1, "", "reset_exec_algorithms"]], "neural_compressor.algorithm.fast_bias_correction": [[150, 2, 1, "", "FastBiasCorrection"]], "neural_compressor.algorithm.smooth_quant": [[152, 2, 1, "", "SmoothQuant"]], "neural_compressor.algorithm.weight_correction": [[153, 2, 1, "", "WeightCorrection"]], "neural_compressor.benchmark": [[154, 2, 1, "", "Benchmark"], [154, 1, 1, "", "fit"], [154, 1, 1, "", "get_architecture"], [154, 1, 1, "", "get_bounded_threads"], [154, 1, 1, "", "get_core_ids"], [154, 1, 1, "", "get_physical_ids"], [154, 1, 1, "", "get_threads"], [154, 1, 1, "", "get_threads_per_core"], [154, 1, 1, "", "set_all_env_var"], [154, 1, 1, "", "set_env_var"]], "neural_compressor.benchmark.Benchmark": [[154, 3, 1, "", "b_dataloader"], [154, 3, 1, "", "b_func"], [154, 4, 1, "", "config_instance"], [154, 4, 1, "", "generate_prefix"], [154, 3, 1, "", "model"], [154, 3, 1, "", "results"], [154, 4, 1, "", "run_instance"], [154, 4, 1, "", "summary_benchmark"]], "neural_compressor.compression": [[158, 2, 1, "", "DistillationCallbacks"], [158, 2, 1, "", "PruningCallbacks"], [158, 2, 1, "", "QuantizationAwareTrainingCallbacks"], [158, 2, 1, "", "WeightPruningConfig"], [155, 0, 0, "-", "callbacks"], [157, 0, 0, "-", "distillation"], [158, 1, 1, "", "prepare_pruning"], [160, 0, 0, "-", "pruner"]], "neural_compressor.compression.DistillationCallbacks": [[158, 5, 1, "", "_epoch_ran"], [158, 5, 1, "", "best_model"], [158, 5, 1, "", "best_score"], [158, 4, 1, "", "create_criterion"], [158, 3, 1, "", "criterion"], [158, 5, 1, "", "eval_frequency"], [158, 4, 1, "", "generate_hooks"], [158, 4, 1, "", "init_train_cfg"], [158, 3, 1, "", "student_model"], [158, 3, 1, "", "teacher_model"], [158, 3, 1, "", "train_cfg"]], "neural_compressor.compression.PruningCallbacks": [[158, 4, 1, "", "generate_hooks"], [158, 4, 1, "", "on_train_end"]], "neural_compressor.compression.WeightPruningConfig": [[158, 3, 1, "", "weight_compression"]], "neural_compressor.compression.callbacks": [[155, 2, 1, "", "BaseCallbacks"], [155, 2, 1, "", "DistillationCallbacks"], [155, 2, 1, "", "PruningCallbacks"], [155, 2, 1, "", "QuantizationAwareTrainingCallbacks"]], "neural_compressor.compression.callbacks.BaseCallbacks": [[155, 3, 1, "", "eval_dataloader"], [155, 3, 1, "", "eval_func"], [155, 4, 1, "", "execute"], [155, 3, 1, "", "metric"], [155, 3, 1, "", "model"], [155, 4, 1, "", "on_after_compute_loss"], [155, 4, 1, "", "on_after_eval"], [155, 4, 1, "", "on_after_optimizer_step"], [155, 4, 1, "", "on_before_eval"], [155, 4, 1, "", "on_before_optimizer_step"], [155, 4, 1, "", "on_epoch_begin"], [155, 4, 1, "", "on_epoch_end"], [155, 4, 1, "", "on_step_begin"], [155, 4, 1, "", "on_step_end"], [155, 4, 1, "", "on_train_begin"], [155, 4, 1, "", "on_train_end"], [155, 4, 1, "", "pre_process"], [155, 4, 1, "", "register_hook"], [155, 4, 1, "", "remove_hook"], [155, 3, 1, "", "train_func"]], "neural_compressor.compression.callbacks.DistillationCallbacks": [[155, 5, 1, "", "_epoch_ran"], [155, 5, 1, "", "best_model"], [155, 5, 1, "", "best_score"], [155, 4, 1, "", "create_criterion"], [155, 3, 1, "", "criterion"], [155, 5, 1, "", "eval_frequency"], [155, 4, 1, "", "generate_hooks"], [155, 4, 1, "", "init_train_cfg"], [155, 3, 1, "", "student_model"], [155, 3, 1, "", "teacher_model"], [155, 3, 1, "", "train_cfg"]], "neural_compressor.compression.callbacks.PruningCallbacks": [[155, 4, 1, "", "generate_hooks"], [155, 4, 1, "", "on_train_end"]], "neural_compressor.compression.distillation": [[156, 0, 0, "-", "criterions"]], "neural_compressor.compression.distillation.criterions": [[156, 2, 1, "", "Criterions"], [156, 2, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [156, 2, 1, "", "KnowledgeDistillationFramework"], [156, 2, 1, "", "KnowledgeDistillationLoss"], [156, 2, 1, "", "PyTorchCriterions"], [156, 2, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLoss"], [156, 2, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"], [156, 2, 1, "", "PyTorchKnowledgeDistillationLoss"], [156, 2, 1, "", "PyTorchKnowledgeDistillationLossWrapper"], [156, 2, 1, "", "PyTorchSelfKnowledgeDistillationLoss"], [156, 2, 1, "", "PyTorchSelfKnowledgeDistillationLossWrapper"], [156, 2, 1, "", "SelfKnowledgeDistillationLoss"], [156, 2, 1, "", "TensorflowCriterions"], [156, 2, 1, "", "TensorflowKnowledgeDistillationLoss"], [156, 2, 1, "", "TensorflowKnowledgeDistillationLossExternal"], [156, 2, 1, "", "TensorflowKnowledgeDistillationLossWrapper"], [156, 1, 1, "", "criterion_registry"]], "neural_compressor.compression.distillation.criterions.Criterions": [[156, 4, 1, "", "register"]], "neural_compressor.compression.distillation.criterions.IntermediateLayersKnowledgeDistillationLoss": [[156, 4, 1, "", "clear_features"], [156, 4, 1, "", "init_feature_matcher"], [156, 4, 1, "", "init_loss_funcs"], [156, 4, 1, "", "loss_cal"], [156, 4, 1, "", "loss_cal_sloss"], [156, 4, 1, "", "teacher_model_forward"]], "neural_compressor.compression.distillation.criterions.KnowledgeDistillationFramework": [[156, 3, 1, "", "student_model"], [156, 3, 1, "", "teacher_model"]], "neural_compressor.compression.distillation.criterions.KnowledgeDistillationLoss": [[156, 4, 1, "", "loss_cal"], [156, 4, 1, "", "loss_cal_sloss"], [156, 4, 1, "", "student_targets_loss_cal"], [156, 4, 1, "", "teacher_model_forward"], [156, 4, 1, "", "teacher_student_loss_cal"]], "neural_compressor.compression.distillation.criterions.PyTorchIntermediateLayersKnowledgeDistillationLoss": [[156, 4, 1, "", "init_feature_matcher"], [156, 4, 1, "", "init_loss_funcs"], [156, 4, 1, "", "loss_cal"], [156, 4, 1, "", "loss_cal_sloss"], [156, 4, 1, "", "register_hooks_for_models"], [156, 4, 1, "", "remove_all_hooks"], [156, 4, 1, "", "teacher_model_forward"]], "neural_compressor.compression.distillation.criterions.PyTorchKnowledgeDistillationLoss": [[156, 4, 1, "", "KullbackLeiblerDivergence"], [156, 4, 1, "", "SoftCrossEntropy"], [156, 4, 1, "", "student_targets_loss_cal"], [156, 4, 1, "", "teacher_model_forward"], [156, 4, 1, "", "teacher_student_loss_cal"]], "neural_compressor.compression.distillation.criterions.PyTorchSelfKnowledgeDistillationLoss": [[156, 4, 1, "", "KullbackLeiblerDivergence"], [156, 4, 1, "", "L2Divergence"], [156, 4, 1, "", "SoftCrossEntropy"], [156, 4, 1, "", "init_loss_funcs"], [156, 4, 1, "", "loss_cal"], [156, 4, 1, "", "teacher_model_forward"]], "neural_compressor.compression.distillation.criterions.SelfKnowledgeDistillationLoss": [[156, 4, 1, "", "init_loss_funcs"], [156, 4, 1, "", "loss_cal"], [156, 4, 1, "", "loss_cal_sloss"], [156, 4, 1, "", "teacher_model_forward"]], "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLoss": [[156, 4, 1, "", "SoftCrossEntropy"], [156, 4, 1, "", "student_targets_loss_cal"], [156, 4, 1, "", "teacher_model_forward"], [156, 4, 1, "", "teacher_student_loss_cal"]], "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLossExternal": [[156, 4, 1, "", "student_targets_loss_cal"], [156, 4, 1, "", "teacher_model_forward"], [156, 4, 1, "", "teacher_student_loss_cal"]], "neural_compressor.compression.pruner": [[159, 0, 0, "-", "criteria"], [161, 0, 0, "-", "patterns"], [162, 0, 0, "-", "pruners"], [163, 0, 0, "-", "regs"], [164, 0, 0, "-", "schedulers"], [165, 0, 0, "-", "utils"]], "neural_compressor.compression.pruner.criteria": [[159, 2, 1, "", "GradientCriterion"], [159, 2, 1, "", "MagnitudeCriterion"], [159, 2, 1, "", "PruningCriterion"], [159, 2, 1, "", "SnipCriterion"], [159, 2, 1, "", "SnipMomentumCriterion"], [159, 1, 1, "", "get_criterion"], [159, 1, 1, "", "register_criterion"]], "neural_compressor.compression.pruner.criteria.GradientCriterion": [[159, 4, 1, "", "on_before_optimizer_step"], [159, 5, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.MagnitudeCriterion": [[159, 4, 1, "", "on_step_begin"], [159, 5, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.PruningCriterion": [[159, 4, 1, "", "on_after_optimizer_step"], [159, 4, 1, "", "on_before_optimizer_step"], [159, 4, 1, "", "on_step_begin"], [159, 5, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.SnipCriterion": [[159, 4, 1, "", "on_before_optimizer_step"], [159, 5, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion": [[159, 4, 1, "", "on_before_optimizer_step"], [159, 5, 1, "", "scores"]], "neural_compressor.compression.pruner.patterns": [[161, 2, 1, "", "BasePattern"], [161, 2, 1, "", "PatternNInM"], [161, 2, 1, "", "PatternNxM"], [161, 1, 1, "", "get_pattern"], [161, 1, 1, "", "register_pattern"]], "neural_compressor.compression.pruner.patterns.BasePattern": [[161, 4, 1, "", "adjust_ratio"], [161, 4, 1, "", "check_layer_validity"], [161, 5, 1, "", "config"], [161, 4, 1, "", "get_block_size_dict"], [161, 4, 1, "", "get_masks"], [161, 4, 1, "", "get_masks_global"], [161, 4, 1, "", "get_masks_local"], [161, 4, 1, "", "get_pattern_lock_masks"], [161, 4, 1, "", "get_reduced_masks_from_data"], [161, 4, 1, "", "get_single_mask_per_target_ratio"], [161, 4, 1, "", "get_sparsity_ratio"], [161, 4, 1, "", "get_sparsity_ratio_each_layer"], [161, 5, 1, "", "invalid_layers"], [161, 5, 1, "", "is_global"], [161, 5, 1, "", "keep_mask_layers"], [161, 5, 1, "", "max_sparsity_ratio_per_op"], [161, 5, 1, "", "min_sparsity_ratio_per_op"], [161, 5, 1, "", "modules"], [161, 5, 1, "", "pattern"], [161, 4, 1, "", "reduce_tensor"], [161, 5, 1, "", "target_sparsity"], [161, 4, 1, "", "update_residual_cnt"]], "neural_compressor.compression.pruner.patterns.PatternNInM": [[161, 5, 1, "", "M"], [161, 5, 1, "", "N"], [161, 4, 1, "", "check_layer_validity"], [161, 4, 1, "", "get_ele_mask_per_threshold"], [161, 4, 1, "", "get_least_ninm_mask_from_data"], [161, 4, 1, "", "get_masks_global"], [161, 4, 1, "", "get_pattern_lock_masks"], [161, 4, 1, "", "get_reduced_masks_from_data"], [161, 4, 1, "", "get_sparsity_ratio"], [161, 4, 1, "", "reduce_scores"], [161, 4, 1, "", "reshape_orig_to_pattern"], [161, 4, 1, "", "reshape_reduced_to_orig"]], "neural_compressor.compression.pruner.patterns.PatternNxM": [[161, 5, 1, "", "block_size"], [161, 4, 1, "", "check_layer_validity"], [161, 4, 1, "", "count_new_masked_cnts"], [161, 4, 1, "", "get_block_size_dict"], [161, 4, 1, "", "get_mask_per_threshold"], [161, 4, 1, "", "get_masks_global"], [161, 4, 1, "", "get_pattern_lock_masks"], [161, 4, 1, "", "get_reduced_masks_from_data"], [161, 4, 1, "", "get_sparsity_ratio"], [161, 4, 1, "", "get_sparsity_ratio_progressive"], [161, 4, 1, "", "reduce_scores"], [161, 4, 1, "", "reshape_orig_to_pattern"], [161, 4, 1, "", "reshape_reduced_to_orig"], [161, 4, 1, "", "update_new_added_masks"], [161, 4, 1, "", "update_progressive_masks"], [161, 4, 1, "", "update_progressive_masks_global"], [161, 4, 1, "", "update_progressive_masks_linear"], [161, 4, 1, "", "update_progressive_masks_local"], [161, 4, 1, "", "update_progressive_masks_scores"]], "neural_compressor.compression.pruner.pruners": [[162, 2, 1, "", "BasePruner"], [162, 2, 1, "", "BasicPruner"], [162, 2, 1, "", "PatternLockPruner"], [162, 2, 1, "", "ProgressivePruner"], [162, 1, 1, "", "get_pruner"], [162, 1, 1, "", "parse_valid_pruner_types"], [162, 1, 1, "", "register_pruner"]], "neural_compressor.compression.pruner.pruners.BasePruner": [[162, 4, 1, "", "check_is_pruned_step"], [162, 5, 1, "", "config"], [162, 5, 1, "", "current_sparsity_ratio"], [162, 5, 1, "", "end_step"], [162, 5, 1, "", "global_step"], [162, 4, 1, "", "mask_weights"], [162, 4, 1, "", "mask_weights_general"], [162, 5, 1, "", "masks"], [162, 5, 1, "", "max_sparsity_ratio_per_op"], [162, 5, 1, "", "modules"], [162, 4, 1, "", "on_after_eval"], [162, 4, 1, "", "on_after_optimizer_step"], [162, 4, 1, "", "on_before_eval"], [162, 4, 1, "", "on_before_optimizer_step"], [162, 4, 1, "", "on_epoch_begin"], [162, 4, 1, "", "on_epoch_end"], [162, 4, 1, "", "on_step_begin"], [162, 4, 1, "", "on_step_end"], [162, 4, 1, "", "on_train_begin"], [162, 4, 1, "", "on_train_end"], [162, 5, 1, "", "pattern"], [162, 5, 1, "", "pruning_frequency"], [162, 5, 1, "", "scheduler"], [162, 5, 1, "", "scores"], [162, 5, 1, "", "start_step"], [162, 5, 1, "", "target_sparsity_ratio"], [162, 4, 1, "", "update_masks"]], "neural_compressor.compression.pruner.pruners.BasicPruner": [[162, 5, 1, "", "criterion"], [162, 4, 1, "", "on_after_optimizer_step"], [162, 4, 1, "", "on_before_optimizer_step"], [162, 5, 1, "", "pattern"], [162, 5, 1, "", "reg"], [162, 5, 1, "", "scheduler"], [162, 4, 1, "", "set_global_step"], [162, 4, 1, "", "update_masks"]], "neural_compressor.compression.pruner.pruners.PatternLockPruner": [[162, 4, 1, "", "on_after_optimizer_step"], [162, 4, 1, "", "update_masks"]], "neural_compressor.compression.pruner.pruners.ProgressivePruner": [[162, 4, 1, "", "check_is_pruned_progressive_step"], [162, 4, 1, "", "check_progressive_validity"], [162, 4, 1, "", "on_after_optimizer_step"], [162, 4, 1, "", "on_before_optimizer_step"], [162, 4, 1, "", "on_step_begin"], [162, 4, 1, "", "print_progressive_sparsity"], [162, 4, 1, "", "update_masks_progressive"]], "neural_compressor.compression.pruner.regs": [[163, 2, 1, "", "BaseReg"], [163, 2, 1, "", "GroupLasso"], [163, 1, 1, "", "get_reg"], [163, 1, 1, "", "get_reg_type"], [163, 1, 1, "", "register_reg"]], "neural_compressor.compression.pruner.regs.BaseReg": [[163, 4, 1, "", "on_after_optimizer_step"], [163, 4, 1, "", "on_before_optimizer_step"]], "neural_compressor.compression.pruner.regs.GroupLasso": [[163, 5, 1, "", "alpha"], [163, 4, 1, "", "on_after_optimizer_step"], [163, 4, 1, "", "on_before_optimizer_step"], [163, 5, 1, "", "reg_terms"]], "neural_compressor.compression.pruner.schedulers": [[164, 2, 1, "", "IterativeScheduler"], [164, 2, 1, "", "OneshotScheduler"], [164, 2, 1, "", "PruningScheduler"], [164, 1, 1, "", "get_scheduler"], [164, 1, 1, "", "register_scheduler"]], "neural_compressor.compression.pruner.schedulers.IterativeScheduler": [[164, 4, 1, "", "update_sparsity_ratio"]], "neural_compressor.compression.pruner.schedulers.OneshotScheduler": [[164, 4, 1, "", "update_sparsity_ratio"]], "neural_compressor.compression.pruner.schedulers.PruningScheduler": [[164, 5, 1, "", "config"], [164, 4, 1, "", "update_sparsity_ratio"]], "neural_compressor.compression.pruner.utils": [[165, 1, 1, "", "check_config"], [165, 1, 1, "", "check_key_validity"], [165, 1, 1, "", "generate_pruner_config"], [165, 1, 1, "", "get_sparsity_ratio"], [165, 1, 1, "", "parse_to_prune"], [165, 1, 1, "", "process_and_check_config"], [165, 1, 1, "", "process_config"], [165, 1, 1, "", "process_weight_config"], [165, 1, 1, "", "process_yaml_config"], [165, 1, 1, "", "reset_none_to_default"], [165, 1, 1, "", "update_params"]], "neural_compressor.conf": [[166, 0, 0, "-", "config"], [167, 0, 0, "-", "dotdict"], [169, 0, 0, "-", "pythonic_config"]], "neural_compressor.conf.config": [[166, 2, 1, "", "Benchmark_Conf"], [166, 2, 1, "", "Conf"], [166, 2, 1, "", "Distillation_Conf"], [166, 2, 1, "", "Graph_Optimization_Conf"], [166, 2, 1, "", "MixedPrecision_Conf"], [166, 2, 1, "", "NASConfig"], [166, 2, 1, "", "PrunerV2"], [166, 2, 1, "", "Pruning_Conf"], [166, 2, 1, "", "Quantization_Conf"]], "neural_compressor.conf.dotdict": [[167, 2, 1, "", "DotDict"], [167, 1, 1, "", "deep_get"], [167, 1, 1, "", "deep_set"]], "neural_compressor.config": [[170, 2, 1, "", "AccuracyCriterion"], [170, 2, 1, "", "BenchmarkConfig"], [170, 2, 1, "", "DistillationConfig"], [170, 2, 1, "", "ExportConfig"], [170, 2, 1, "", "IntermediateLayersKnowledgeDistillationLossConfig"], [170, 2, 1, "", "KnowledgeDistillationLossConfig"], [170, 2, 1, "", "MixedPrecisionConfig"], [170, 2, 1, "", "ONNXQlinear2QDQConfig"], [170, 2, 1, "", "Options"], [170, 2, 1, "", "PostTrainingQuantConfig"], [170, 2, 1, "", "QuantizationAwareTrainingConfig"], [170, 2, 1, "", "SelfKnowledgeDistillationLossConfig"], [170, 2, 1, "", "TF2ONNXConfig"], [170, 2, 1, "", "Torch2ONNXConfig"], [170, 2, 1, "", "TuningCriterion"], [170, 2, 1, "", "WeightPruningConfig"], [170, 1, 1, "", "check_value"]], "neural_compressor.config.AccuracyCriterion": [[170, 3, 1, "", "absolute"], [170, 3, 1, "", "criterion"], [170, 3, 1, "", "higher_is_better"], [170, 3, 1, "", "relative"], [170, 3, 1, "", "tolerable_loss"]], "neural_compressor.config.BenchmarkConfig": [[170, 3, 1, "", "backend"], [170, 3, 1, "", "cores_per_instance"], [170, 3, 1, "", "inputs"], [170, 3, 1, "", "inter_num_of_threads"], [170, 3, 1, "", "intra_num_of_threads"], [170, 3, 1, "", "iteration"], [170, 3, 1, "", "num_of_instance"], [170, 3, 1, "", "outputs"], [170, 3, 1, "", "warmup"]], "neural_compressor.config.DistillationConfig": [[170, 3, 1, "", "criterion"], [170, 3, 1, "", "optimizer"], [170, 3, 1, "", "teacher_model"]], "neural_compressor.config.ExportConfig": [[170, 3, 1, "", "dtype"], [170, 3, 1, "", "dynamic_axes"], [170, 3, 1, "", "example_inputs"], [170, 3, 1, "", "input_names"], [170, 3, 1, "", "opset_version"], [170, 3, 1, "", "output_names"], [170, 3, 1, "", "quant_format"]], "neural_compressor.config.MixedPrecisionConfig": [[170, 3, 1, "", "precision"]], "neural_compressor.config.Options": [[170, 3, 1, "", "random_seed"], [170, 3, 1, "", "resume_from"], [170, 3, 1, "", "tensorboard"], [170, 3, 1, "", "workspace"]], "neural_compressor.config.PostTrainingQuantConfig": [[170, 3, 1, "", "approach"], [170, 3, 1, "", "tuning_criterion"]], "neural_compressor.config.QuantizationAwareTrainingConfig": [[170, 3, 1, "", "approach"]], "neural_compressor.config.TuningCriterion": [[170, 3, 1, "", "max_trials"], [170, 3, 1, "", "objective"], [170, 3, 1, "", "strategy"], [170, 3, 1, "", "strategy_kwargs"], [170, 3, 1, "", "timeout"]], "neural_compressor.config.WeightPruningConfig": [[170, 3, 1, "", "weight_compression"]], "neural_compressor.contrib": [[172, 0, 0, "-", "strategy"]], "neural_compressor.contrib.strategy": [[173, 0, 0, "-", "sigopt"], [174, 0, 0, "-", "tpe"]], "neural_compressor.contrib.strategy.sigopt": [[173, 2, 1, "", "SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy": [[173, 4, 1, "", "create_exp"], [173, 4, 1, "", "get_acc_target"], [173, 4, 1, "", "next_tune_cfg"], [173, 4, 1, "", "params_to_tune_configs"], [173, 4, 1, "", "traverse"]], "neural_compressor.contrib.strategy.tpe": [[174, 2, 1, "", "TpeTuneStrategy"]], "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy": [[174, 4, 1, "", "add_loss_to_tuned_history_and_find_best"], [174, 4, 1, "", "calculate_loss"], [174, 4, 1, "", "object_evaluation"], [174, 4, 1, "", "stop"], [174, 4, 1, "", "traverse"]], "neural_compressor.data": [[196, 2, 1, "", "BaseTransform"], [196, 2, 1, "", "BilinearImagenetTransform"], [196, 2, 1, "", "COCORecordDataset"], [196, 2, 1, "", "ComposeTransform"], [196, 2, 1, "", "DataLoader"], [196, 2, 1, "", "Dataset"], [196, 2, 1, "", "Datasets"], [196, 2, 1, "", "DefaultDataLoader"], [196, 2, 1, "", "FILTERS"], [196, 2, 1, "", "Filter"], [196, 2, 1, "", "IterableDataset"], [196, 2, 1, "", "LabelBalanceCOCORecordFilter"], [196, 2, 1, "", "LabelShift"], [196, 2, 1, "", "NormalizeTFTransform"], [196, 2, 1, "", "ParseDecodeCocoTransform"], [196, 2, 1, "", "Postprocess"], [196, 2, 1, "", "RescaleTFTransform"], [196, 2, 1, "", "ResizeTFTransform"], [196, 2, 1, "", "TFSquadV1ModelZooPostTransform"], [196, 2, 1, "", "TFSquadV1PostTransform"], [196, 2, 1, "", "TRANSFORMS"], [196, 2, 1, "", "TensorflowImageRecord"], [196, 2, 1, "", "TensorflowResizeCropImagenetTransform"], [196, 2, 1, "", "TensorflowResizeWithRatio"], [179, 0, 0, "-", "dataloaders"], [196, 1, 1, "", "dataset_registry"], [191, 0, 0, "-", "datasets"], [196, 1, 1, "", "filter_registry"], [195, 0, 0, "-", "filters"], [196, 1, 1, "", "transform_registry"], [199, 0, 0, "-", "transforms"]], "neural_compressor.data.DefaultDataLoader": [[196, 4, 1, "", "batch"], [196, 3, 1, "", "dataloader"]], "neural_compressor.data.TFSquadV1PostTransform": [[196, 4, 1, "", "get_postprocess_result"], [196, 4, 1, "", "process_result"]], "neural_compressor.data.TRANSFORMS": [[196, 4, 1, "", "register"]], "neural_compressor.data.dataloaders": [[179, 2, 1, "", "DataLoader"], [175, 0, 0, "-", "base_dataloader"], [176, 0, 0, "-", "dataloader"], [177, 0, 0, "-", "default_dataloader"], [178, 0, 0, "-", "fetcher"], [180, 0, 0, "-", "mxnet_dataloader"], [181, 0, 0, "-", "onnxrt_dataloader"], [182, 0, 0, "-", "pytorch_dataloader"], [183, 0, 0, "-", "sampler"], [184, 0, 0, "-", "tensorflow_dataloader"]], "neural_compressor.data.dataloaders.base_dataloader": [[175, 2, 1, "", "BaseDataLoader"]], "neural_compressor.data.dataloaders.base_dataloader.BaseDataLoader": [[175, 4, 1, "", "batch"], [175, 3, 1, "", "batch_size"]], "neural_compressor.data.dataloaders.dataloader": [[176, 2, 1, "", "DataLoader"]], "neural_compressor.data.dataloaders.default_dataloader": [[177, 2, 1, "", "DefaultDataLoader"], [177, 1, 1, "", "default_collate"]], "neural_compressor.data.dataloaders.default_dataloader.DefaultDataLoader": [[177, 4, 1, "", "batch"], [177, 3, 1, "", "dataloader"]], "neural_compressor.data.dataloaders.fetcher": [[178, 2, 1, "", "Fetcher"], [178, 2, 1, "", "IndexFetcher"], [178, 2, 1, "", "IterableFetcher"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[180, 2, 1, "", "MXNetDataLoader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[181, 2, 1, "", "ONNXRTBertDataLoader"], [181, 2, 1, "", "ONNXRTDataLoader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[182, 2, 1, "", "PyTorchDataLoader"]], "neural_compressor.data.dataloaders.sampler": [[183, 2, 1, "", "BatchSampler"], [183, 2, 1, "", "IterableSampler"], [183, 2, 1, "", "Sampler"], [183, 2, 1, "", "SequentialSampler"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[184, 2, 1, "", "TFDataDataLoader"], [184, 2, 1, "", "TensorflowBertDataLoader"], [184, 2, 1, "", "TensorflowDataLoader"], [184, 2, 1, "", "TensorflowModelZooBertDataLoader"]], "neural_compressor.data.dataloaders.tensorflow_dataloader.TFDataDataLoader": [[184, 4, 1, "", "batch"]], "neural_compressor.data.datasets": [[191, 2, 1, "", "COCORecordDataset"], [191, 2, 1, "", "Dataset"], [191, 2, 1, "", "Datasets"], [191, 2, 1, "", "IterableDataset"], [191, 2, 1, "", "TensorflowImageRecord"], [185, 0, 0, "-", "bert_dataset"], [186, 0, 0, "-", "coco_dataset"], [187, 0, 0, "-", "dataset"], [191, 1, 1, "", "dataset_registry"], [188, 0, 0, "-", "dummy_dataset"], [189, 0, 0, "-", "dummy_dataset_v2"], [190, 0, 0, "-", "imagenet_dataset"], [192, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.data.datasets.bert_dataset": [[185, 2, 1, "", "InputFeatures"], [185, 2, 1, "", "ONNXRTBertDataset"], [185, 2, 1, "", "ParseDecodeBert"], [185, 2, 1, "", "PytorchBertDataset"], [185, 2, 1, "", "TensorflowBertDataset"], [185, 2, 1, "", "TensorflowModelZooBertDataset"], [185, 1, 1, "", "convert_examples_to_features"], [185, 1, 1, "", "load_and_cache_examples"]], "neural_compressor.data.datasets.bert_dataset.InputFeatures": [[185, 4, 1, "", "to_json_string"]], "neural_compressor.data.datasets.coco_dataset": [[186, 2, 1, "", "COCONpy"], [186, 2, 1, "", "COCORaw"], [186, 2, 1, "", "COCORecordDataset"], [186, 2, 1, "", "ParseDecodeCoco"]], "neural_compressor.data.datasets.dataset": [[187, 2, 1, "", "CIFAR10"], [187, 2, 1, "", "CIFAR100"], [187, 2, 1, "", "Dataset"], [187, 2, 1, "", "Datasets"], [187, 2, 1, "", "FashionMNIST"], [187, 2, 1, "", "ImageFolder"], [187, 2, 1, "", "IterableDataset"], [187, 2, 1, "", "MNIST"], [187, 2, 1, "", "MXNetCIFAR10"], [187, 2, 1, "", "MXNetCIFAR100"], [187, 2, 1, "", "MXNetDatasets"], [187, 2, 1, "", "MXNetFashionMNIST"], [187, 2, 1, "", "MXNetImageFolder"], [187, 2, 1, "", "MXNetMNIST"], [187, 2, 1, "", "ONNXRTITDatasets"], [187, 2, 1, "", "ONNXRTQLDatasets"], [187, 2, 1, "", "PyTorchDatasets"], [187, 2, 1, "", "PytorchCIFAR10"], [187, 2, 1, "", "PytorchCIFAR100"], [187, 2, 1, "", "PytorchFashionMNIST"], [187, 2, 1, "", "PytorchMNIST"], [187, 2, 1, "", "PytorchMxnetWrapDataset"], [187, 2, 1, "", "PytorchMxnetWrapFunction"], [187, 2, 1, "", "Tensorflow"], [187, 2, 1, "", "TensorflowCIFAR10"], [187, 2, 1, "", "TensorflowCIFAR100"], [187, 2, 1, "", "TensorflowDatasets"], [187, 2, 1, "", "TensorflowFashionMNIST"], [187, 2, 1, "", "TensorflowImageRecord"], [187, 2, 1, "", "TensorflowMNIST"], [187, 2, 1, "", "TensorflowTFRecordDataset"], [187, 2, 1, "", "TensorflowVOCRecord"], [187, 1, 1, "", "calculate_md5"], [187, 1, 1, "", "check_integrity"], [187, 1, 1, "", "dataset_registry"], [187, 1, 1, "", "download_url"], [187, 6, 1, "", "framework_datasets"], [187, 1, 1, "", "gen_bar_updater"]], "neural_compressor.data.datasets.dataset.CIFAR10": [[187, 4, 1, "", "download"], [187, 4, 1, "", "load_meta"]], "neural_compressor.data.datasets.dataset.FashionMNIST": [[187, 4, 1, "", "read_data"]], "neural_compressor.data.datasets.dataset.MNIST": [[187, 3, 1, "", "class_to_idx"], [187, 4, 1, "", "download"], [187, 4, 1, "", "read_data"]], "neural_compressor.data.datasets.dummy_dataset": [[188, 2, 1, "", "DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[189, 2, 1, "", "DummyDataset"], [189, 2, 1, "", "SparseDummyDataset"]], "neural_compressor.data.datasets.imagenet_dataset": [[190, 2, 1, "", "ImagenetRaw"], [190, 2, 1, "", "MXNetImagenetRaw"], [190, 2, 1, "", "ONNXRTImagenetDataset"], [190, 2, 1, "", "PytorchImagenetRaw"], [190, 2, 1, "", "TensorflowImagenetDataset"], [190, 2, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.data.datasets.style_transfer_dataset": [[192, 2, 1, "", "StyleTransferDataset"]], "neural_compressor.data.filters": [[195, 2, 1, "", "FILTERS"], [195, 2, 1, "", "Filter"], [195, 2, 1, "", "LabelBalanceCOCORecordFilter"], [193, 0, 0, "-", "coco_filter"], [194, 0, 0, "-", "filter"], [195, 1, 1, "", "filter_registry"]], "neural_compressor.data.filters.coco_filter": [[193, 2, 1, "", "LabelBalanceCOCORawFilter"], [193, 2, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.filter": [[194, 2, 1, "", "FILTERS"], [194, 2, 1, "", "Filter"], [194, 2, 1, "", "MXNetFilters"], [194, 2, 1, "", "ONNXRTITFilters"], [194, 2, 1, "", "ONNXRTQLFilters"], [194, 2, 1, "", "PyTorchFilters"], [194, 2, 1, "", "TensorflowFilters"], [194, 1, 1, "", "filter_registry"]], "neural_compressor.data.transforms": [[199, 2, 1, "", "BaseTransform"], [199, 2, 1, "", "BilinearImagenetTransform"], [199, 2, 1, "", "ComposeTransform"], [199, 2, 1, "", "LabelShift"], [199, 2, 1, "", "NormalizeTFTransform"], [199, 2, 1, "", "ParseDecodeCocoTransform"], [199, 2, 1, "", "Postprocess"], [199, 2, 1, "", "RescaleTFTransform"], [199, 2, 1, "", "ResizeTFTransform"], [199, 2, 1, "", "TFSquadV1ModelZooPostTransform"], [199, 2, 1, "", "TFSquadV1PostTransform"], [199, 2, 1, "", "TRANSFORMS"], [199, 2, 1, "", "TensorflowResizeCropImagenetTransform"], [199, 2, 1, "", "TensorflowResizeWithRatio"], [197, 0, 0, "-", "coco_transform"], [198, 0, 0, "-", "imagenet_transform"], [200, 0, 0, "-", "postprocess"], [201, 0, 0, "-", "tokenization"], [202, 0, 0, "-", "transform"], [199, 1, 1, "", "transform_registry"]], "neural_compressor.data.transforms.TFSquadV1PostTransform": [[199, 4, 1, "", "get_postprocess_result"], [199, 4, 1, "", "process_result"]], "neural_compressor.data.transforms.TRANSFORMS": [[199, 4, 1, "", "register"]], "neural_compressor.data.transforms.coco_transform": [[197, 2, 1, "", "ParseDecodeCocoTransform"]], "neural_compressor.data.transforms.imagenet_transform": [[198, 2, 1, "", "BilinearImagenetTransform"], [198, 2, 1, "", "LabelShift"], [198, 2, 1, "", "ONNXResizeCropImagenetTransform"], [198, 2, 1, "", "OnnxBilinearImagenetTransform"], [198, 2, 1, "", "ParseDecodeImagenet"], [198, 2, 1, "", "ParseDecodeImagenetTransform"], [198, 2, 1, "", "QuantizedInput"], [198, 2, 1, "", "ResizeWithAspectRatio"], [198, 2, 1, "", "TensorflowResizeCropImagenetTransform"]], "neural_compressor.data.transforms.postprocess": [[200, 2, 1, "", "Postprocess"]], "neural_compressor.data.transforms.tokenization": [[201, 2, 1, "", "BasicTokenizer"], [201, 2, 1, "", "FullTokenizer"], [201, 2, 1, "", "WordpieceTokenizer"], [201, 1, 1, "", "convert_by_vocab"], [201, 1, 1, "", "convert_to_unicode"], [201, 1, 1, "", "load_vocab"], [201, 1, 1, "", "whitespace_tokenize"]], "neural_compressor.data.transforms.tokenization.BasicTokenizer": [[201, 4, 1, "", "tokenize"]], "neural_compressor.data.transforms.tokenization.FullTokenizer": [[201, 4, 1, "", "convert_ids_to_tokens"], [201, 4, 1, "", "convert_tokens_to_ids"], [201, 4, 1, "", "tokenize"]], "neural_compressor.data.transforms.tokenization.WordpieceTokenizer": [[201, 4, 1, "", "tokenize"]], "neural_compressor.data.transforms.transform": [[202, 2, 1, "", "AlignImageChannelTransform"], [202, 2, 1, "", "BaseTransform"], [202, 2, 1, "", "CastONNXTransform"], [202, 2, 1, "", "CastPyTorchTransform"], [202, 2, 1, "", "CastTFTransform"], [202, 2, 1, "", "CenterCropTFTransform"], [202, 2, 1, "", "CenterCropTransform"], [202, 2, 1, "", "CollectTransform"], [202, 2, 1, "", "ComposeTransform"], [202, 2, 1, "", "CropResizeTFTransform"], [202, 2, 1, "", "CropResizeTransform"], [202, 2, 1, "", "CropToBoundingBox"], [202, 2, 1, "", "InputFeatures"], [202, 2, 1, "", "MXNetCropResizeTransform"], [202, 2, 1, "", "MXNetCropToBoundingBox"], [202, 2, 1, "", "MXNetNormalizeTransform"], [202, 2, 1, "", "MXNetTransforms"], [202, 2, 1, "", "MXNetTranspose"], [202, 2, 1, "", "NormalizeTFTransform"], [202, 2, 1, "", "NormalizeTransform"], [202, 2, 1, "", "ONNXRTCropToBoundingBox"], [202, 2, 1, "", "ONNXRTITTransforms"], [202, 2, 1, "", "ONNXRTQLTransforms"], [202, 2, 1, "", "PaddedCenterCropTransform"], [202, 2, 1, "", "ParseDecodeVocTransform"], [202, 2, 1, "", "PyTorchAlignImageChannel"], [202, 2, 1, "", "PyTorchCropResizeTransform"], [202, 2, 1, "", "PyTorchNormalizeTransform"], [202, 2, 1, "", "PyTorchTransforms"], [202, 2, 1, "", "PyTorchTranspose"], [202, 2, 1, "", "PytorchMxnetTransform"], [202, 2, 1, "", "PytorchMxnetWrapFunction"], [202, 2, 1, "", "RandomCropTFTransform"], [202, 2, 1, "", "RandomCropTransform"], [202, 2, 1, "", "RandomHorizontalFlip"], [202, 2, 1, "", "RandomResizedCropMXNetTransform"], [202, 2, 1, "", "RandomResizedCropPytorchTransform"], [202, 2, 1, "", "RandomResizedCropTFTransform"], [202, 2, 1, "", "RandomResizedCropTransform"], [202, 2, 1, "", "RandomVerticalFlip"], [202, 2, 1, "", "RescaleKerasPretrainTransform"], [202, 2, 1, "", "RescaleTFTransform"], [202, 2, 1, "", "RescaleTransform"], [202, 2, 1, "", "ResizeMXNetTransform"], [202, 2, 1, "", "ResizePytorchTransform"], [202, 2, 1, "", "ResizeTFTransform"], [202, 2, 1, "", "ResizeTransform"], [202, 2, 1, "", "ResizeWithRatio"], [202, 2, 1, "", "SquadExample"], [202, 2, 1, "", "TFModelZooCollectTransform"], [202, 2, 1, "", "TFSquadV1ModelZooPostTransform"], [202, 2, 1, "", "TFSquadV1PostTransform"], [202, 2, 1, "", "TRANSFORMS"], [202, 2, 1, "", "TensorflowCropToBoundingBox"], [202, 2, 1, "", "TensorflowRandomHorizontalFlip"], [202, 2, 1, "", "TensorflowRandomVerticalFlip"], [202, 2, 1, "", "TensorflowResizeWithRatio"], [202, 2, 1, "", "TensorflowTransform"], [202, 2, 1, "", "TensorflowTransforms"], [202, 2, 1, "", "TensorflowTranspose"], [202, 2, 1, "", "TensorflowWrapFunction"], [202, 2, 1, "", "ToArray"], [202, 2, 1, "", "ToNDArrayTransform"], [202, 2, 1, "", "Transforms"], [202, 2, 1, "", "Transpose"], [202, 1, 1, "", "convert_examples_to_features"], [202, 1, 1, "", "get_final_text"], [202, 1, 1, "", "get_torchvision_map"], [202, 1, 1, "", "read_squad_examples"], [202, 1, 1, "", "transform_registry"]], "neural_compressor.data.transforms.transform.RandomResizedCropTFTransform": [[202, 4, 1, "", "get_params"]], "neural_compressor.data.transforms.transform.RandomResizedCropTransform": [[202, 4, 1, "", "get_params"]], "neural_compressor.data.transforms.transform.TFSquadV1PostTransform": [[202, 4, 1, "", "get_postprocess_result"], [202, 4, 1, "", "process_result"]], "neural_compressor.data.transforms.transform.TRANSFORMS": [[202, 4, 1, "", "register"]], "neural_compressor.experimental": [[248, 2, 1, "", "Benchmark"], [248, 2, 1, "", "Component"], [248, 2, 1, "", "Distillation"], [248, 2, 1, "", "Graph_Optimization"], [248, 2, 1, "", "MixedPrecision"], [248, 2, 1, "", "ModelConversion"], [248, 2, 1, "", "NAS"], [248, 2, 1, "", "Pruning"], [248, 2, 1, "", "Quantization"], [203, 0, 0, "-", "benchmark"], [206, 0, 0, "-", "common"], [212, 0, 0, "-", "component"], [213, 0, 0, "-", "compression"], [236, 0, 0, "-", "data"], [241, 0, 0, "-", "distillation"], [242, 0, 0, "-", "export"], [247, 0, 0, "-", "graph_optimization"], [255, 0, 0, "-", "metric"], [257, 0, 0, "-", "mixed_precision"], [258, 0, 0, "-", "model_conversion"], [261, 0, 0, "-", "nas"], [267, 0, 0, "-", "pruner_legacy"], [271, 0, 0, "-", "pruning"], [272, 0, 0, "-", "pruning_recipes"], [276, 0, 0, "-", "pruning_v2"], [277, 0, 0, "-", "pytorch_pruner"], [284, 0, 0, "-", "quantization"], [285, 0, 0, "-", "scheduler"]], "neural_compressor.experimental.Benchmark": [[248, 3, 1, "", "b_dataloader"], [248, 3, 1, "", "b_func"], [248, 4, 1, "", "call_one"], [248, 4, 1, "", "config_instance"], [248, 4, 1, "", "generate_prefix"], [248, 3, 1, "", "metric"], [248, 3, 1, "", "model"], [248, 3, 1, "", "postprocess"], [248, 3, 1, "", "results"], [248, 4, 1, "", "run_instance"], [248, 4, 1, "", "summary_benchmark"]], "neural_compressor.experimental.Component": [[248, 3, 1, "", "eval_dataloader"], [248, 3, 1, "", "eval_func"], [248, 4, 1, "", "execute"], [248, 3, 1, "", "model"], [248, 4, 1, "", "on_after_compute_loss"], [248, 4, 1, "", "on_after_eval"], [248, 4, 1, "", "on_after_optimizer_step"], [248, 4, 1, "", "on_batch_begin"], [248, 4, 1, "", "on_batch_end"], [248, 4, 1, "", "on_before_eval"], [248, 4, 1, "", "on_before_optimizer_step"], [248, 4, 1, "", "on_epoch_begin"], [248, 4, 1, "", "on_epoch_end"], [248, 4, 1, "", "on_post_grad"], [248, 4, 1, "", "on_step_begin"], [248, 4, 1, "", "on_step_end"], [248, 4, 1, "", "on_train_begin"], [248, 4, 1, "", "on_train_end"], [248, 4, 1, "", "post_epoch_end"], [248, 4, 1, "", "post_process"], [248, 4, 1, "", "pre_epoch_begin"], [248, 4, 1, "", "pre_process"], [248, 4, 1, "", "prepare"], [248, 4, 1, "", "prepare_qat"], [248, 4, 1, "", "register_hook"], [248, 3, 1, "", "train_dataloader"], [248, 3, 1, "", "train_func"]], "neural_compressor.experimental.Distillation": [[248, 5, 1, "", "_epoch_ran"], [248, 5, 1, "", "best_model"], [248, 5, 1, "", "best_score"], [248, 4, 1, "", "create_criterion"], [248, 4, 1, "", "create_optimizer"], [248, 3, 1, "", "criterion"], [248, 5, 1, "", "eval_frequency"], [248, 3, 1, "", "evaluation_distributed"], [248, 4, 1, "", "execute"], [248, 4, 1, "", "generate_hooks"], [248, 4, 1, "", "init_train_cfg"], [248, 4, 1, "", "on_post_forward"], [248, 3, 1, "", "optimizer"], [248, 4, 1, "", "pre_process"], [248, 4, 1, "", "prepare"], [248, 3, 1, "", "student_model"], [248, 3, 1, "", "teacher_model"], [248, 3, 1, "", "train_cfg"], [248, 3, 1, "", "train_distributed"]], "neural_compressor.experimental.Graph_Optimization": [[248, 4, 1, "", "dataset"], [248, 3, 1, "", "eval_dataloader"], [248, 3, 1, "", "eval_func"], [248, 3, 1, "", "input"], [248, 3, 1, "", "metric"], [248, 3, 1, "", "model"], [248, 3, 1, "", "output"], [248, 3, 1, "", "postprocess"], [248, 3, 1, "", "precisions"], [248, 4, 1, "", "set_config_by_model"]], "neural_compressor.experimental.MixedPrecision": [[248, 3, 1, "", "precisions"], [248, 4, 1, "", "set_config_by_model"]], "neural_compressor.experimental.ModelConversion": [[248, 4, 1, "", "dataset"], [248, 3, 1, "", "destination"], [248, 3, 1, "", "eval_dataloader"], [248, 3, 1, "", "eval_func"], [248, 3, 1, "", "metric"], [248, 3, 1, "", "model"], [248, 3, 1, "", "postprocess"], [248, 3, 1, "", "source"]], "neural_compressor.experimental.Pruning": [[248, 5, 1, "", "conf"], [248, 3, 1, "", "evaluation_distributed"], [248, 4, 1, "", "execute"], [248, 4, 1, "", "generate_hooks"], [248, 4, 1, "", "generate_pruners"], [248, 4, 1, "", "get_sparsity_ratio"], [248, 4, 1, "", "pre_process"], [248, 4, 1, "", "prepare"], [248, 5, 1, "", "pruners"], [248, 3, 1, "", "pruning_func"], [248, 3, 1, "", "train_distributed"], [248, 4, 1, "", "update_items_for_all_pruners"]], "neural_compressor.experimental.Quantization": [[248, 3, 1, "", "calib_dataloader"], [248, 4, 1, "", "dataset"], [248, 4, 1, "", "distributed_execute"], [248, 4, 1, "", "execute"], [248, 3, 1, "", "metric"], [248, 3, 1, "", "model"], [248, 3, 1, "", "objective"], [248, 3, 1, "", "postprocess"], [248, 4, 1, "", "pre_process"], [248, 3, 1, "", "q_func"]], "neural_compressor.experimental.benchmark": [[203, 2, 1, "", "Benchmark"], [203, 1, 1, "", "get_architecture"], [203, 1, 1, "", "get_bounded_threads"], [203, 1, 1, "", "get_core_ids"], [203, 1, 1, "", "get_physical_ids"], [203, 1, 1, "", "get_threads"], [203, 1, 1, "", "get_threads_per_core"], [203, 1, 1, "", "set_all_env_var"], [203, 1, 1, "", "set_env_var"]], "neural_compressor.experimental.benchmark.Benchmark": [[203, 3, 1, "", "b_dataloader"], [203, 3, 1, "", "b_func"], [203, 4, 1, "", "call_one"], [203, 4, 1, "", "config_instance"], [203, 4, 1, "", "generate_prefix"], [203, 3, 1, "", "metric"], [203, 3, 1, "", "model"], [203, 3, 1, "", "postprocess"], [203, 3, 1, "", "results"], [203, 4, 1, "", "run_instance"], [203, 4, 1, "", "summary_benchmark"]], "neural_compressor.experimental.common": [[206, 2, 1, "", "DataLoader"], [206, 2, 1, "", "Metric"], [206, 2, 1, "", "Model"], [206, 2, 1, "", "Postprocess"], [204, 0, 0, "-", "criterion"], [205, 0, 0, "-", "dataloader"], [207, 0, 0, "-", "metric"], [208, 0, 0, "-", "model"], [209, 0, 0, "-", "optimizer"], [210, 0, 0, "-", "postprocess"], [211, 0, 0, "-", "torch_utils"]], "neural_compressor.experimental.common.criterion": [[204, 2, 1, "", "Criterions"], [204, 2, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [204, 2, 1, "", "KnowledgeDistillationFramework"], [204, 2, 1, "", "KnowledgeDistillationLoss"], [204, 2, 1, "", "PyTorchCriterions"], [204, 2, 1, "", "PyTorchCrossEntropyLoss"], [204, 2, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLoss"], [204, 2, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"], [204, 2, 1, "", "PyTorchKnowledgeDistillationLoss"], [204, 2, 1, "", "PyTorchKnowledgeDistillationLossWrapper"], [204, 2, 1, "", "PyTorchSelfKnowledgeDistillationLoss"], [204, 2, 1, "", "PyTorchSelfKnowledgeDistillationLossWrapper"], [204, 2, 1, "", "SelfKnowledgeDistillationLoss"], [204, 2, 1, "", "TensorFlowCrossEntropyLoss"], [204, 2, 1, "", "TensorFlowSparseCategoricalCrossentropy"], [204, 2, 1, "", "TensorflowCriterions"], [204, 2, 1, "", "TensorflowKnowledgeDistillationLoss"], [204, 2, 1, "", "TensorflowKnowledgeDistillationLossExternal"], [204, 2, 1, "", "TensorflowKnowledgeDistillationLossWrapper"], [204, 1, 1, "", "criterion_registry"]], "neural_compressor.experimental.common.criterion.Criterions": [[204, 4, 1, "", "register"]], "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss": [[204, 4, 1, "", "clear_features"], [204, 4, 1, "", "init_feature_matcher"], [204, 4, 1, "", "init_loss_funcs"], [204, 4, 1, "", "loss_cal"], [204, 4, 1, "", "loss_cal_sloss"], [204, 4, 1, "", "teacher_model_forward"]], "neural_compressor.experimental.common.criterion.KnowledgeDistillationFramework": [[204, 3, 1, "", "student_model"], [204, 3, 1, "", "teacher_model"]], "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss": [[204, 4, 1, "", "loss_cal"], [204, 4, 1, "", "loss_cal_sloss"], [204, 4, 1, "", "student_targets_loss_cal"], [204, 4, 1, "", "teacher_model_forward"], [204, 4, 1, "", "teacher_student_loss_cal"]], "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss": [[204, 4, 1, "", "init_feature_matcher"], [204, 4, 1, "", "init_loss_funcs"], [204, 4, 1, "", "loss_cal"], [204, 4, 1, "", "loss_cal_sloss"], [204, 4, 1, "", "register_hooks_for_models"], [204, 4, 1, "", "remove_all_hooks"], [204, 4, 1, "", "teacher_model_forward"]], "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss": [[204, 4, 1, "", "KullbackLeiblerDivergence"], [204, 4, 1, "", "SoftCrossEntropy"], [204, 4, 1, "", "student_targets_loss_cal"], [204, 4, 1, "", "teacher_model_forward"], [204, 4, 1, "", "teacher_student_loss_cal"]], "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss": [[204, 4, 1, "", "KullbackLeiblerDivergence"], [204, 4, 1, "", "L2Divergence"], [204, 4, 1, "", "SoftCrossEntropy"], [204, 4, 1, "", "init_loss_funcs"], [204, 4, 1, "", "loss_cal"], [204, 4, 1, "", "teacher_model_forward"]], "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss": [[204, 4, 1, "", "init_loss_funcs"], [204, 4, 1, "", "loss_cal"], [204, 4, 1, "", "loss_cal_sloss"], [204, 4, 1, "", "teacher_model_forward"]], "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss": [[204, 4, 1, "", "SoftCrossEntropy"], [204, 4, 1, "", "student_targets_loss_cal"], [204, 4, 1, "", "teacher_model_forward"], [204, 4, 1, "", "teacher_student_loss_cal"]], "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal": [[204, 4, 1, "", "student_targets_loss_cal"], [204, 4, 1, "", "teacher_model_forward"], [204, 4, 1, "", "teacher_student_loss_cal"]], "neural_compressor.experimental.common.dataloader": [[205, 2, 1, "", "DataLoader"]], "neural_compressor.experimental.common.metric": [[207, 2, 1, "", "Metric"]], "neural_compressor.experimental.common.model": [[208, 2, 1, "", "Model"], [208, 1, 1, "", "set_backend"]], "neural_compressor.experimental.common.optimizer": [[209, 2, 1, "", "Optimizers"], [209, 2, 1, "", "PyTorchOptimizers"], [209, 2, 1, "", "PyTorchSGD"], [209, 2, 1, "", "TensorFlowAdam"], [209, 2, 1, "", "TensorFlowAdamW"], [209, 2, 1, "", "TensorFlowSGD"], [209, 2, 1, "", "TensorflowOptimizers"], [209, 1, 1, "", "optimizer_registry"]], "neural_compressor.experimental.common.optimizer.Optimizers": [[209, 4, 1, "", "register"]], "neural_compressor.experimental.common.postprocess": [[210, 2, 1, "", "Postprocess"]], "neural_compressor.experimental.common.torch_utils": [[211, 1, 1, "", "get_activation"], [211, 1, 1, "", "record_output"]], "neural_compressor.experimental.component": [[212, 2, 1, "", "Component"]], "neural_compressor.experimental.component.Component": [[212, 3, 1, "", "eval_dataloader"], [212, 3, 1, "", "eval_func"], [212, 4, 1, "", "execute"], [212, 3, 1, "", "model"], [212, 4, 1, "", "on_after_compute_loss"], [212, 4, 1, "", "on_after_eval"], [212, 4, 1, "", "on_after_optimizer_step"], [212, 4, 1, "", "on_batch_begin"], [212, 4, 1, "", "on_batch_end"], [212, 4, 1, "", "on_before_eval"], [212, 4, 1, "", "on_before_optimizer_step"], [212, 4, 1, "", "on_epoch_begin"], [212, 4, 1, "", "on_epoch_end"], [212, 4, 1, "", "on_post_grad"], [212, 4, 1, "", "on_step_begin"], [212, 4, 1, "", "on_step_end"], [212, 4, 1, "", "on_train_begin"], [212, 4, 1, "", "on_train_end"], [212, 4, 1, "", "post_epoch_end"], [212, 4, 1, "", "post_process"], [212, 4, 1, "", "pre_epoch_begin"], [212, 4, 1, "", "pre_process"], [212, 4, 1, "", "prepare"], [212, 4, 1, "", "prepare_qat"], [212, 4, 1, "", "register_hook"], [212, 3, 1, "", "train_dataloader"], [212, 3, 1, "", "train_func"]], "neural_compressor.experimental.compression": [[213, 1, 1, "", "prepare_pruning"], [214, 0, 0, "-", "pruning"]], "neural_compressor.experimental.compression.pruning": [[214, 1, 1, "", "prepare_pruning"], [214, 1, 1, "", "save"]], "neural_compressor.experimental.data": [[236, 2, 1, "", "BaseTransform"], [236, 2, 1, "", "Dataset"], [236, 2, 1, "", "Datasets"], [236, 2, 1, "", "FILTERS"], [236, 2, 1, "", "Filter"], [236, 2, 1, "", "IterableDataset"], [236, 2, 1, "", "TRANSFORMS"], [219, 0, 0, "-", "dataloaders"], [236, 1, 1, "", "dataset_registry"], [231, 0, 0, "-", "datasets"], [236, 1, 1, "", "filter_registry"], [235, 0, 0, "-", "filters"], [236, 1, 1, "", "transform_registry"], [238, 0, 0, "-", "transforms"]], "neural_compressor.experimental.data.TRANSFORMS": [[236, 4, 1, "", "register"]], "neural_compressor.experimental.data.dataloaders": [[215, 0, 0, "-", "base_dataloader"], [216, 0, 0, "-", "dataloader"], [217, 0, 0, "-", "default_dataloader"], [218, 0, 0, "-", "fetcher"], [220, 0, 0, "-", "mxnet_dataloader"], [221, 0, 0, "-", "onnxrt_dataloader"], [222, 0, 0, "-", "pytorch_dataloader"], [223, 0, 0, "-", "sampler"], [224, 0, 0, "-", "tensorflow_dataloader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[215, 2, 1, "", "BaseDataLoader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader.BaseDataLoader": [[215, 4, 1, "", "batch"], [215, 3, 1, "", "batch_size"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[217, 2, 1, "", "DefaultDataLoader"], [217, 1, 1, "", "default_collate"]], "neural_compressor.experimental.data.dataloaders.default_dataloader.DefaultDataLoader": [[217, 4, 1, "", "batch"], [217, 3, 1, "", "dataloader"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[218, 2, 1, "", "Fetcher"], [218, 2, 1, "", "IndexFetcher"], [218, 2, 1, "", "IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[220, 2, 1, "", "MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[221, 2, 1, "", "ONNXRTBertDataLoader"], [221, 2, 1, "", "ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[222, 2, 1, "", "PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[223, 2, 1, "", "BatchSampler"], [223, 2, 1, "", "IterableSampler"], [223, 2, 1, "", "Sampler"], [223, 2, 1, "", "SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[224, 2, 1, "", "TFDataDataLoader"], [224, 2, 1, "", "TensorflowBertDataLoader"], [224, 2, 1, "", "TensorflowDataLoader"], [224, 2, 1, "", "TensorflowModelZooBertDataLoader"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TFDataDataLoader": [[224, 4, 1, "", "batch"]], "neural_compressor.experimental.data.datasets": [[231, 2, 1, "", "Dataset"], [231, 2, 1, "", "Datasets"], [231, 2, 1, "", "IterableDataset"], [225, 0, 0, "-", "bert_dataset"], [226, 0, 0, "-", "coco_dataset"], [227, 0, 0, "-", "dataset"], [231, 1, 1, "", "dataset_registry"], [228, 0, 0, "-", "dummy_dataset"], [229, 0, 0, "-", "dummy_dataset_v2"], [230, 0, 0, "-", "imagenet_dataset"], [232, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[225, 2, 1, "", "InputFeatures"], [225, 2, 1, "", "ONNXRTBertDataset"], [225, 2, 1, "", "ParseDecodeBert"], [225, 2, 1, "", "PytorchBertDataset"], [225, 2, 1, "", "TensorflowBertDataset"], [225, 2, 1, "", "TensorflowModelZooBertDataset"], [225, 1, 1, "", "convert_examples_to_features"], [225, 1, 1, "", "load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.bert_dataset.InputFeatures": [[225, 4, 1, "", "to_json_string"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[226, 2, 1, "", "COCONpy"], [226, 2, 1, "", "COCORaw"], [226, 2, 1, "", "COCORecordDataset"], [226, 2, 1, "", "ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.dataset": [[227, 2, 1, "", "CIFAR10"], [227, 2, 1, "", "CIFAR100"], [227, 2, 1, "", "Dataset"], [227, 2, 1, "", "Datasets"], [227, 2, 1, "", "FashionMNIST"], [227, 2, 1, "", "ImageFolder"], [227, 2, 1, "", "IterableDataset"], [227, 2, 1, "", "MNIST"], [227, 2, 1, "", "MXNetCIFAR10"], [227, 2, 1, "", "MXNetCIFAR100"], [227, 2, 1, "", "MXNetDatasets"], [227, 2, 1, "", "MXNetFashionMNIST"], [227, 2, 1, "", "MXNetImageFolder"], [227, 2, 1, "", "MXNetMNIST"], [227, 2, 1, "", "ONNXRTITDatasets"], [227, 2, 1, "", "ONNXRTQLDatasets"], [227, 2, 1, "", "PyTorchDatasets"], [227, 2, 1, "", "PytorchCIFAR10"], [227, 2, 1, "", "PytorchCIFAR100"], [227, 2, 1, "", "PytorchFashionMNIST"], [227, 2, 1, "", "PytorchMNIST"], [227, 2, 1, "", "PytorchMxnetWrapDataset"], [227, 2, 1, "", "PytorchMxnetWrapFunction"], [227, 2, 1, "", "TensorflowCIFAR10"], [227, 2, 1, "", "TensorflowCIFAR100"], [227, 2, 1, "", "TensorflowDatasets"], [227, 2, 1, "", "TensorflowFashionMNIST"], [227, 2, 1, "", "TensorflowImageFolder"], [227, 2, 1, "", "TensorflowImageRecord"], [227, 2, 1, "", "TensorflowMNIST"], [227, 2, 1, "", "TensorflowTFRecordDataset"], [227, 2, 1, "", "TensorflowVOCRecord"], [227, 1, 1, "", "calculate_md5"], [227, 1, 1, "", "check_integrity"], [227, 1, 1, "", "dataset_registry"], [227, 1, 1, "", "download_url"], [227, 6, 1, "", "framework_datasets"], [227, 1, 1, "", "gen_bar_updater"]], "neural_compressor.experimental.data.datasets.dataset.CIFAR10": [[227, 4, 1, "", "download"], [227, 4, 1, "", "load_meta"]], "neural_compressor.experimental.data.datasets.dataset.FashionMNIST": [[227, 4, 1, "", "read_data"]], "neural_compressor.experimental.data.datasets.dataset.MNIST": [[227, 3, 1, "", "class_to_idx"], [227, 4, 1, "", "download"], [227, 4, 1, "", "read_data"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[228, 2, 1, "", "DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[229, 2, 1, "", "DummyDataset"], [229, 2, 1, "", "SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[230, 2, 1, "", "ImagenetRaw"], [230, 2, 1, "", "MXNetImagenetRaw"], [230, 2, 1, "", "ONNXRTImagenetDataset"], [230, 2, 1, "", "PytorchImagenetRaw"], [230, 2, 1, "", "TensorflowImagenetDataset"], [230, 2, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[232, 2, 1, "", "StyleTransferDataset"]], "neural_compressor.experimental.data.filters": [[235, 2, 1, "", "FILTERS"], [235, 2, 1, "", "Filter"], [233, 0, 0, "-", "coco_filter"], [234, 0, 0, "-", "filter"], [235, 1, 1, "", "filter_registry"]], "neural_compressor.experimental.data.filters.coco_filter": [[233, 2, 1, "", "LabelBalanceCOCORawFilter"], [233, 2, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.filter": [[234, 2, 1, "", "FILTERS"], [234, 2, 1, "", "Filter"], [234, 2, 1, "", "MXNetFilters"], [234, 2, 1, "", "ONNXRTITFilters"], [234, 2, 1, "", "ONNXRTQLFilters"], [234, 2, 1, "", "PyTorchFilters"], [234, 2, 1, "", "TensorflowFilters"], [234, 1, 1, "", "filter_registry"]], "neural_compressor.experimental.data.transforms": [[238, 2, 1, "", "BaseTransform"], [238, 2, 1, "", "TRANSFORMS"], [237, 0, 0, "-", "imagenet_transform"], [239, 0, 0, "-", "tokenization"], [240, 0, 0, "-", "transform"], [238, 1, 1, "", "transform_registry"]], "neural_compressor.experimental.data.transforms.TRANSFORMS": [[238, 4, 1, "", "register"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[237, 2, 1, "", "BilinearImagenetTransform"], [237, 2, 1, "", "LabelShift"], [237, 2, 1, "", "ONNXResizeCropImagenetTransform"], [237, 2, 1, "", "OnnxBilinearImagenetTransform"], [237, 2, 1, "", "ParseDecodeImagenet"], [237, 2, 1, "", "ParseDecodeImagenetTransform"], [237, 2, 1, "", "QuantizedInput"], [237, 2, 1, "", "ResizeWithAspectRatio"], [237, 2, 1, "", "TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental.data.transforms.tokenization": [[239, 2, 1, "", "BasicTokenizer"], [239, 2, 1, "", "FullTokenizer"], [239, 2, 1, "", "WordpieceTokenizer"], [239, 1, 1, "", "convert_by_vocab"], [239, 1, 1, "", "convert_to_unicode"], [239, 1, 1, "", "load_vocab"], [239, 1, 1, "", "whitespace_tokenize"]], "neural_compressor.experimental.data.transforms.tokenization.BasicTokenizer": [[239, 4, 1, "", "tokenize"]], "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer": [[239, 4, 1, "", "convert_ids_to_tokens"], [239, 4, 1, "", "convert_tokens_to_ids"], [239, 4, 1, "", "tokenize"]], "neural_compressor.experimental.data.transforms.tokenization.WordpieceTokenizer": [[239, 4, 1, "", "tokenize"]], "neural_compressor.experimental.data.transforms.transform": [[240, 2, 1, "", "AlignImageChannelTransform"], [240, 2, 1, "", "BaseTransform"], [240, 2, 1, "", "CastONNXTransform"], [240, 2, 1, "", "CastPyTorchTransform"], [240, 2, 1, "", "CastTFTransform"], [240, 2, 1, "", "CenterCropTFTransform"], [240, 2, 1, "", "CenterCropTransform"], [240, 2, 1, "", "CollectTransform"], [240, 2, 1, "", "ComposeTransform"], [240, 2, 1, "", "CropResizeTFTransform"], [240, 2, 1, "", "CropResizeTransform"], [240, 2, 1, "", "CropToBoundingBox"], [240, 2, 1, "", "InputFeatures"], [240, 2, 1, "", "MXNetCropResizeTransform"], [240, 2, 1, "", "MXNetCropToBoundingBox"], [240, 2, 1, "", "MXNetNormalizeTransform"], [240, 2, 1, "", "MXNetTransforms"], [240, 2, 1, "", "MXNetTranspose"], [240, 2, 1, "", "NormalizeTFTransform"], [240, 2, 1, "", "NormalizeTransform"], [240, 2, 1, "", "ONNXRTCropToBoundingBox"], [240, 2, 1, "", "ONNXRTITTransforms"], [240, 2, 1, "", "ONNXRTQLTransforms"], [240, 2, 1, "", "PaddedCenterCropTransform"], [240, 2, 1, "", "ParseDecodeVocTransform"], [240, 2, 1, "", "PyTorchAlignImageChannel"], [240, 2, 1, "", "PyTorchCropResizeTransform"], [240, 2, 1, "", "PyTorchNormalizeTransform"], [240, 2, 1, "", "PyTorchTransforms"], [240, 2, 1, "", "PyTorchTranspose"], [240, 2, 1, "", "PytorchMxnetTransform"], [240, 2, 1, "", "PytorchMxnetWrapFunction"], [240, 2, 1, "", "RandomCropTFTransform"], [240, 2, 1, "", "RandomCropTransform"], [240, 2, 1, "", "RandomHorizontalFlip"], [240, 2, 1, "", "RandomResizedCropMXNetTransform"], [240, 2, 1, "", "RandomResizedCropPytorchTransform"], [240, 2, 1, "", "RandomResizedCropTFTransform"], [240, 2, 1, "", "RandomResizedCropTransform"], [240, 2, 1, "", "RandomVerticalFlip"], [240, 2, 1, "", "RescaleKerasPretrainTransform"], [240, 2, 1, "", "RescaleTFTransform"], [240, 2, 1, "", "RescaleTransform"], [240, 2, 1, "", "ResizeMXNetTransform"], [240, 2, 1, "", "ResizePytorchTransform"], [240, 2, 1, "", "ResizeTFTransform"], [240, 2, 1, "", "ResizeTransform"], [240, 2, 1, "", "ResizeWithRatio"], [240, 2, 1, "", "SquadExample"], [240, 2, 1, "", "TFModelZooCollectTransform"], [240, 2, 1, "", "TFSquadV1ModelZooPostTransform"], [240, 2, 1, "", "TFSquadV1PostTransform"], [240, 2, 1, "", "TRANSFORMS"], [240, 2, 1, "", "TensorflowCropToBoundingBox"], [240, 2, 1, "", "TensorflowRandomHorizontalFlip"], [240, 2, 1, "", "TensorflowRandomVerticalFlip"], [240, 2, 1, "", "TensorflowResizeWithRatio"], [240, 2, 1, "", "TensorflowTransform"], [240, 2, 1, "", "TensorflowTransforms"], [240, 2, 1, "", "TensorflowTranspose"], [240, 2, 1, "", "TensorflowWrapFunction"], [240, 2, 1, "", "ToArray"], [240, 2, 1, "", "ToNDArrayTransform"], [240, 2, 1, "", "Transforms"], [240, 2, 1, "", "Transpose"], [240, 1, 1, "", "convert_examples_to_features"], [240, 1, 1, "", "get_final_text"], [240, 1, 1, "", "get_torchvision_map"], [240, 1, 1, "", "read_squad_examples"], [240, 1, 1, "", "transform_registry"]], "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTFTransform": [[240, 4, 1, "", "get_params"]], "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTransform": [[240, 4, 1, "", "get_params"]], "neural_compressor.experimental.data.transforms.transform.TFSquadV1PostTransform": [[240, 4, 1, "", "get_postprocess_result"], [240, 4, 1, "", "process_result"]], "neural_compressor.experimental.data.transforms.transform.TRANSFORMS": [[240, 4, 1, "", "register"]], "neural_compressor.experimental.distillation": [[241, 2, 1, "", "Distillation"]], "neural_compressor.experimental.distillation.Distillation": [[241, 5, 1, "", "_epoch_ran"], [241, 5, 1, "", "best_model"], [241, 5, 1, "", "best_score"], [241, 4, 1, "", "create_criterion"], [241, 4, 1, "", "create_optimizer"], [241, 3, 1, "", "criterion"], [241, 5, 1, "", "eval_frequency"], [241, 3, 1, "", "evaluation_distributed"], [241, 4, 1, "", "execute"], [241, 4, 1, "", "generate_hooks"], [241, 4, 1, "", "init_train_cfg"], [241, 4, 1, "", "on_post_forward"], [241, 3, 1, "", "optimizer"], [241, 4, 1, "", "pre_process"], [241, 4, 1, "", "prepare"], [241, 3, 1, "", "student_model"], [241, 3, 1, "", "teacher_model"], [241, 3, 1, "", "train_cfg"], [241, 3, 1, "", "train_distributed"]], "neural_compressor.experimental.export": [[242, 1, 1, "", "onnx_qlinear_to_qdq"], [243, 0, 0, "-", "qlinear2qdq"], [244, 0, 0, "-", "tf2onnx"], [242, 1, 1, "", "tf_to_fp32_onnx"], [242, 1, 1, "", "tf_to_int8_onnx"], [245, 0, 0, "-", "torch2onnx"], [242, 1, 1, "", "torch_to_fp32_onnx"], [242, 1, 1, "", "torch_to_int8_onnx"], [246, 0, 0, "-", "utils"]], "neural_compressor.experimental.export.qlinear2qdq": [[243, 1, 1, "", "check_model"], [243, 1, 1, "", "onnx_qlinear_to_qdq"]], "neural_compressor.experimental.export.tf2onnx": [[244, 1, 1, "", "tf_to_fp32_onnx"], [244, 1, 1, "", "tf_to_int8_onnx"]], "neural_compressor.experimental.export.torch2onnx": [[245, 1, 1, "", "build_scale_mapping"], [245, 1, 1, "", "get_node_mapping"], [245, 1, 1, "", "get_quantizable_onnx_ops"], [245, 1, 1, "", "qdq_fp32_bias"], [245, 1, 1, "", "qdq_fp32_bias_qdq"], [245, 1, 1, "", "qdq_int32_bias"], [245, 1, 1, "", "recalculate_bias"], [245, 1, 1, "", "remove_nodes_by_name"], [245, 1, 1, "", "set_data_type"], [245, 1, 1, "", "set_scale_info"], [245, 1, 1, "", "sub_graph_with_int32_bias"], [245, 1, 1, "", "torch_to_fp32_onnx"], [245, 1, 1, "", "torch_to_int8_onnx"], [245, 1, 1, "", "update_weight_bias"]], "neural_compressor.experimental.export.utils": [[246, 2, 1, "", "DummyDataReader"], [246, 1, 1, "", "ONNX2Numpy_dtype"]], "neural_compressor.experimental.export.utils.DummyDataReader": [[246, 4, 1, "", "get_next"]], "neural_compressor.experimental.graph_optimization": [[247, 2, 1, "", "Graph_Optimization"]], "neural_compressor.experimental.graph_optimization.Graph_Optimization": [[247, 4, 1, "", "dataset"], [247, 3, 1, "", "eval_dataloader"], [247, 3, 1, "", "eval_func"], [247, 3, 1, "", "input"], [247, 3, 1, "", "metric"], [247, 3, 1, "", "model"], [247, 3, 1, "", "output"], [247, 3, 1, "", "postprocess"], [247, 3, 1, "", "precisions"], [247, 4, 1, "", "set_config_by_model"]], "neural_compressor.experimental.metric": [[255, 2, 1, "", "BaseMetric"], [255, 2, 1, "", "METRICS"], [544, 0, 0, "-", "bleu"], [250, 0, 0, "-", "bleu_util"], [251, 0, 0, "-", "coco_label_map"], [252, 0, 0, "-", "coco_tools"], [253, 0, 0, "-", "evaluate_squad"], [254, 0, 0, "-", "f1"], [256, 0, 0, "-", "metric"], [255, 1, 1, "", "metric_registry"]], "neural_compressor.experimental.metric.BaseMetric": [[255, 3, 1, "", "hvd"], [255, 3, 1, "", "metric"], [255, 4, 1, "", "reset"], [255, 4, 1, "", "result"], [255, 4, 1, "", "update"]], "neural_compressor.experimental.metric.METRICS": [[255, 5, 1, "", "metrics"], [255, 4, 1, "", "register"]], "neural_compressor.experimental.metric.bleu": [[544, 2, 1, "", "BLEU"], [249, 2, 1, "", "UnicodeRegex"], [249, 1, 1, "", "bleu_tokenize"]], "neural_compressor.experimental.metric.bleu.BLEU": [[544, 5, 1, "", "labels"], [544, 5, 1, "", "predictions"], [544, 4, 1, "", "reset"], [544, 4, 1, "", "result"], [544, 4, 1, "", "update"]], "neural_compressor.experimental.metric.bleu.UnicodeRegex": [[249, 5, 1, "", "nondigit_punct_re"], [249, 4, 1, "", "property_chars"], [249, 5, 1, "", "punct_nondigit_re"], [249, 5, 1, "", "symbol_re"]], "neural_compressor.experimental.metric.bleu_util": [[250, 1, 1, "", "compute_bleu"]], "neural_compressor.experimental.metric.coco_tools": [[252, 2, 1, "", "COCOEvalWrapper"], [252, 2, 1, "", "COCOWrapper"], [252, 1, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [252, 1, 1, "", "ExportSingleImageDetectionMasksToCoco"], [252, 1, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper": [[252, 4, 1, "", "ComputeMetrics"], [252, 4, 1, "", "GetAgnosticMode"], [252, 4, 1, "", "GetCategory"], [252, 4, 1, "", "GetCategoryIdList"], [252, 4, 1, "", "accumulate"]], "neural_compressor.experimental.metric.coco_tools.COCOWrapper": [[252, 4, 1, "", "LoadAnnotations"], [252, 5, 1, "", "dataset"], [252, 5, 1, "", "detection_type"]], "neural_compressor.experimental.metric.evaluate_squad": [[253, 1, 1, "", "evaluate"], [253, 1, 1, "", "exact_match_score"], [253, 1, 1, "", "f1_score"], [253, 1, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[254, 1, 1, "", "evaluate"], [254, 1, 1, "", "f1_score"], [254, 1, 1, "", "metric_max_over_ground_truths"], [254, 1, 1, "", "normalize_answer"]], "neural_compressor.experimental.metric.metric": [[256, 2, 1, "", "Accuracy"], [256, 2, 1, "", "BaseMetric"], [256, 2, 1, "", "COCOmAPv2"], [256, 2, 1, "", "F1"], [256, 2, 1, "", "GeneralTopK"], [256, 2, 1, "", "Loss"], [256, 2, 1, "", "MAE"], [256, 2, 1, "", "METRICS"], [256, 2, 1, "", "MSE"], [256, 2, 1, "", "MXNetMetrics"], [256, 2, 1, "", "ONNXRTGLUE"], [256, 2, 1, "", "ONNXRTITMetrics"], [256, 2, 1, "", "ONNXRTQLMetrics"], [256, 2, 1, "", "PyTorchLoss"], [256, 2, 1, "", "PyTorchMetrics"], [256, 2, 1, "", "RMSE"], [256, 2, 1, "", "ROC"], [256, 2, 1, "", "SquadF1"], [256, 2, 1, "", "TensorflowCOCOMAP"], [256, 2, 1, "", "TensorflowMAP"], [256, 2, 1, "", "TensorflowMetrics"], [256, 2, 1, "", "TensorflowTopK"], [256, 2, 1, "", "TensorflowVOCMAP"], [256, 2, 1, "", "WrapMXNetMetric"], [256, 2, 1, "", "WrapONNXRTMetric"], [256, 2, 1, "", "WrapPyTorchMetric"], [256, 2, 1, "", "mIOU"], [256, 1, 1, "", "metric_registry"]], "neural_compressor.experimental.metric.metric.Accuracy": [[256, 5, 1, "", "label_list"], [256, 5, 1, "", "pred_list"], [256, 4, 1, "", "reset"], [256, 4, 1, "", "result"], [256, 5, 1, "", "sample"], [256, 4, 1, "", "update"]], "neural_compressor.experimental.metric.metric.BaseMetric": [[256, 3, 1, "", "hvd"], [256, 3, 1, "", "metric"], [256, 4, 1, "", "reset"], [256, 4, 1, "", "result"], [256, 4, 1, "", "update"]], "neural_compressor.experimental.metric.metric.COCOmAPv2": [[256, 4, 1, "", "reset"], [256, 4, 1, "", "result"], [256, 4, 1, "", "update"]], "neural_compressor.experimental.metric.metric.F1": [[256, 4, 1, "", "reset"], [256, 4, 1, "", "result"], [256, 4, 1, "", "update"]], "neural_compressor.experimental.metric.metric.GeneralTopK": [[256, 5, 1, "", "k"], [256, 5, 1, "", "num_correct"], [256, 5, 1, "", "num_sample"], [256, 4, 1, "", "reset"], [256, 4, 1, "", "result"], [256, 4, 1, "", "update"]], "neural_compressor.experimental.metric.metric.Loss": [[256, 4, 1, "", "reset"], [256, 4, 1, "", "result"], [256, 5, 1, "", "sample"], [256, 5, 1, "", "sum"], [256, 4, 1, "", "update"]], "neural_compressor.experimental.metric.metric.MAE": [[256, 5, 1, "", "compare_label"], [256, 5, 1, "", "label_list"], [256, 5, 1, "", "pred_list"], [256, 4, 1, "", "reset"], [256, 4, 1, "", "result"], [256, 4, 1, "", "update"]], "neural_compressor.experimental.metric.metric.METRICS": [[256, 5, 1, "", "metrics"], [256, 4, 1, "", "register"]], "neural_compressor.experimental.metric.metric.MSE": [[256, 5, 1, "", "compare_label"], [256, 5, 1, "", "label_list"], [256, 5, 1, "", "pred_list"], [256, 4, 1, "", "reset"], [256, 4, 1, "", "result"], [256, 4, 1, "", "update"]], "neural_compressor.experimental.metric.metric.MXNetMetrics": [[256, 5, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTGLUE": [[256, 4, 1, "", "reset"], [256, 4, 1, "", "result"], [256, 4, 1, "", "update"]], "neural_compressor.experimental.metric.metric.ONNXRTITMetrics": [[256, 5, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics": [[256, 5, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.PyTorchLoss": [[256, 4, 1, "", "compute"], [256, 4, 1, "", "reset"], [256, 4, 1, "", "update"]], "neural_compressor.experimental.metric.metric.PyTorchMetrics": [[256, 5, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.RMSE": [[256, 5, 1, "", "mse"], [256, 4, 1, "", "reset"], [256, 4, 1, "", "result"], [256, 4, 1, "", "update"]], "neural_compressor.experimental.metric.metric.ROC": [[256, 4, 1, "", "reset"], [256, 4, 1, "", "result"], [256, 4, 1, "", "update"]], "neural_compressor.experimental.metric.metric.SquadF1": [[256, 4, 1, "", "reset"], [256, 4, 1, "", "result"], [256, 4, 1, "", "update"]], "neural_compressor.experimental.metric.metric.TensorflowMAP": [[256, 4, 1, "", "reset"], [256, 4, 1, "", "result"], [256, 4, 1, "", "update"]], "neural_compressor.experimental.metric.metric.TensorflowMetrics": [[256, 5, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.TensorflowTopK": [[256, 5, 1, "", "k"], [256, 5, 1, "", "num_correct"], [256, 5, 1, "", "num_sample"], [256, 4, 1, "", "reset"], [256, 4, 1, "", "result"], [256, 4, 1, "", "update"]], "neural_compressor.experimental.metric.metric.WrapMXNetMetric": [[256, 4, 1, "", "reset"], [256, 4, 1, "", "result"], [256, 4, 1, "", "update"]], "neural_compressor.experimental.metric.metric.WrapONNXRTMetric": [[256, 4, 1, "", "reset"], [256, 4, 1, "", "result"], [256, 4, 1, "", "update"]], "neural_compressor.experimental.metric.metric.WrapPyTorchMetric": [[256, 4, 1, "", "reset"], [256, 4, 1, "", "result"], [256, 4, 1, "", "update"]], "neural_compressor.experimental.metric.metric.mIOU": [[256, 4, 1, "", "reset"], [256, 4, 1, "", "result"], [256, 4, 1, "", "update"]], "neural_compressor.experimental.mixed_precision": [[257, 2, 1, "", "MixedPrecision"]], "neural_compressor.experimental.mixed_precision.MixedPrecision": [[257, 3, 1, "", "precisions"], [257, 4, 1, "", "set_config_by_model"]], "neural_compressor.experimental.model_conversion": [[258, 2, 1, "", "ModelConversion"]], "neural_compressor.experimental.model_conversion.ModelConversion": [[258, 4, 1, "", "dataset"], [258, 3, 1, "", "destination"], [258, 3, 1, "", "eval_dataloader"], [258, 3, 1, "", "eval_func"], [258, 3, 1, "", "metric"], [258, 3, 1, "", "model"], [258, 3, 1, "", "postprocess"], [258, 3, 1, "", "source"]], "neural_compressor.experimental.nas": [[261, 2, 1, "", "BasicNAS"], [261, 2, 1, "", "DyNAS"], [261, 2, 1, "", "NAS"], [259, 0, 0, "-", "basic_nas"], [260, 0, 0, "-", "dynas"], [262, 0, 0, "-", "nas"], [263, 0, 0, "-", "nas_utils"], [264, 0, 0, "-", "search_algorithms"]], "neural_compressor.experimental.nas.BasicNAS": [[261, 4, 1, "", "estimate"], [261, 4, 1, "", "execute"], [261, 4, 1, "", "init_by_cfg"], [261, 4, 1, "", "pre_process"]], "neural_compressor.experimental.nas.DyNAS": [[261, 4, 1, "", "init_cfg"], [261, 4, 1, "", "search"], [261, 4, 1, "", "select_model_arch"]], "neural_compressor.experimental.nas.basic_nas": [[259, 2, 1, "", "BasicNAS"]], "neural_compressor.experimental.nas.basic_nas.BasicNAS": [[259, 4, 1, "", "estimate"], [259, 4, 1, "", "execute"], [259, 4, 1, "", "init_by_cfg"], [259, 4, 1, "", "pre_process"]], "neural_compressor.experimental.nas.dynas": [[260, 2, 1, "", "DyNAS"]], "neural_compressor.experimental.nas.dynas.DyNAS": [[260, 4, 1, "", "init_cfg"], [260, 4, 1, "", "search"], [260, 4, 1, "", "select_model_arch"]], "neural_compressor.experimental.nas.nas": [[262, 2, 1, "", "NAS"], [262, 2, 1, "", "NASBase"]], "neural_compressor.experimental.nas.nas.NASBase": [[262, 4, 1, "", "count_model_parameters"], [262, 4, 1, "", "dump_search_results"], [262, 4, 1, "", "estimate"], [262, 4, 1, "", "find_best_model_archs"], [262, 4, 1, "", "init_search_cfg"], [262, 4, 1, "", "load_search_results"], [262, 4, 1, "", "metrics_conversion"], [262, 3, 1, "", "model_builder"], [262, 4, 1, "", "params_vec2params_dict"], [262, 4, 1, "", "search"], [262, 3, 1, "", "search_algorithm"], [262, 3, 1, "", "search_space"], [262, 4, 1, "", "select_model_arch"]], "neural_compressor.experimental.nas.nas_utils": [[263, 1, 1, "", "create_search_space_pool"], [263, 1, 1, "", "find_pareto_front"], [263, 1, 1, "", "nas_registry"]], "neural_compressor.experimental.nas.search_algorithms": [[264, 2, 1, "", "BayesianOptimizationSearcher"], [264, 2, 1, "", "GridSearcher"], [264, 2, 1, "", "RandomSearcher"], [264, 2, 1, "", "Searcher"]], "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher": [[264, 4, 1, "", "get_feedback"], [264, 4, 1, "", "indices2params_vec"], [264, 4, 1, "", "suggest"]], "neural_compressor.experimental.nas.search_algorithms.GridSearcher": [[264, 4, 1, "", "suggest"]], "neural_compressor.experimental.nas.search_algorithms.RandomSearcher": [[264, 4, 1, "", "suggest"]], "neural_compressor.experimental.nas.search_algorithms.Searcher": [[264, 4, 1, "", "get_feedback"], [264, 4, 1, "", "params_vec2params_dict"], [264, 4, 1, "", "suggest"]], "neural_compressor.experimental.pruner_legacy": [[265, 0, 0, "-", "gradient_sensitivity"], [266, 0, 0, "-", "group_lasso"], [268, 0, 0, "-", "magnitude"], [269, 0, 0, "-", "pattern_lock"], [270, 0, 0, "-", "pruner"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[265, 2, 1, "", "GradientSensitivityPruner"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner": [[265, 4, 1, "", "compute_mask"], [265, 4, 1, "", "on_epoch_begin"], [265, 4, 1, "", "on_epoch_end"], [265, 4, 1, "", "on_step_begin"], [265, 4, 1, "", "on_step_end"], [265, 4, 1, "", "parse_weight_name"], [265, 4, 1, "", "prune_by_importance"], [265, 4, 1, "", "prune_weight"], [265, 4, 1, "", "update_importance_abs"], [265, 4, 1, "", "update_importance_elementwise"], [265, 4, 1, "", "update_importance_weighted"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[266, 2, 1, "", "GroupLassoPruner"]], "neural_compressor.experimental.pruner_legacy.group_lasso.GroupLassoPruner": [[266, 4, 1, "", "on_before_optimizer_step"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[268, 2, 1, "", "BasicMagnitudePruner"]], "neural_compressor.experimental.pruner_legacy.magnitude.BasicMagnitudePruner": [[268, 4, 1, "", "compute_mask"], [268, 4, 1, "", "on_epoch_begin"], [268, 4, 1, "", "on_epoch_end"], [268, 4, 1, "", "on_step_begin"], [268, 4, 1, "", "on_step_end"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[269, 2, 1, "", "PatternLockPruner"]], "neural_compressor.experimental.pruner_legacy.pattern_lock.PatternLockPruner": [[269, 4, 1, "", "compute_mask"], [269, 4, 1, "", "on_epoch_begin"], [269, 4, 1, "", "on_epoch_end"], [269, 4, 1, "", "on_step_begin"], [269, 4, 1, "", "on_step_end"], [269, 4, 1, "", "update_weights"]], "neural_compressor.experimental.pruner_legacy.pruner": [[270, 2, 1, "", "Pruner"], [270, 1, 1, "", "pruner_registry"]], "neural_compressor.experimental.pruner_legacy.pruner.Pruner": [[270, 4, 1, "", "on_before_optimizer_step"], [270, 4, 1, "", "on_epoch_begin"], [270, 4, 1, "", "on_epoch_end"], [270, 4, 1, "", "on_step_begin"], [270, 4, 1, "", "on_step_end"], [270, 4, 1, "", "on_train_begin"], [270, 4, 1, "", "on_train_end"], [270, 4, 1, "", "update_sparsity"]], "neural_compressor.experimental.pruning": [[271, 2, 1, "", "Pruning"], [271, 2, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning.Pruning": [[271, 5, 1, "", "conf"], [271, 3, 1, "", "evaluation_distributed"], [271, 4, 1, "", "execute"], [271, 4, 1, "", "generate_hooks"], [271, 4, 1, "", "generate_pruners"], [271, 4, 1, "", "get_sparsity_ratio"], [271, 4, 1, "", "pre_process"], [271, 4, 1, "", "prepare"], [271, 5, 1, "", "pruners"], [271, 3, 1, "", "pruning_func"], [271, 3, 1, "", "train_distributed"], [271, 4, 1, "", "update_items_for_all_pruners"]], "neural_compressor.experimental.pruning.TfPruningCallback": [[271, 4, 1, "", "on_after_compute_loss"], [271, 4, 1, "", "on_batch_begin"], [271, 4, 1, "", "on_batch_end"], [271, 4, 1, "", "on_epoch_begin"], [271, 4, 1, "", "on_epoch_end"], [271, 4, 1, "", "on_step_begin"], [271, 4, 1, "", "on_step_end"], [271, 4, 1, "", "on_train_begin"], [271, 4, 1, "", "on_train_end"], [271, 4, 1, "", "post_epoch_end"], [271, 4, 1, "", "pre_epoch_begin"]], "neural_compressor.experimental.pruning_recipes": [[272, 2, 1, "", "PATTERNS"], [273, 0, 0, "-", "patterns"]], "neural_compressor.experimental.pruning_recipes.PATTERNS": [[272, 5, 1, "", "patterns"], [272, 4, 1, "", "support_pattern"]], "neural_compressor.experimental.pruning_recipes.patterns": [[273, 2, 1, "", "PATTERNS"], [274, 0, 0, "-", "pattern"], [275, 0, 0, "-", "tile_pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.PATTERNS": [[273, 5, 1, "", "patterns"], [273, 4, 1, "", "support_pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[274, 2, 1, "", "PATTERNS"], [274, 2, 1, "", "PatternBase"], [274, 1, 1, "", "pattern_registry"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS": [[274, 5, 1, "", "patterns"], [274, 4, 1, "", "support_pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase": [[274, 4, 1, "", "compute_sparsity"], [274, 4, 1, "", "reduce"], [274, 4, 1, "", "reshape"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[275, 2, 1, "", "TilePatternBase"], [275, 2, 1, "", "TilePattern_1x1"], [275, 2, 1, "", "TilePattern_1x16"], [275, 2, 1, "", "TilePattern_1x2"], [275, 2, 1, "", "TilePattern_2x2"], [275, 2, 1, "", "TilePattern_4x1"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePatternBase": [[275, 4, 1, "", "compute_sparsity"], [275, 4, 1, "", "repeat_mask"]], "neural_compressor.experimental.pruning_v2": [[276, 2, 1, "", "Pruning"], [276, 2, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning_v2.Pruning": [[276, 5, 1, "", "conf"], [276, 3, 1, "", "evaluation_distributed"], [276, 4, 1, "", "execute"], [276, 4, 1, "", "generate_hooks"], [276, 4, 1, "", "get_sparsity_ratio"], [276, 4, 1, "", "pre_process"], [276, 4, 1, "", "prepare"], [276, 5, 1, "", "pruners"], [276, 3, 1, "", "pruning_func"], [276, 3, 1, "", "train_distributed"], [276, 4, 1, "", "update_config"]], "neural_compressor.experimental.pruning_v2.TfPruningCallback": [[276, 4, 1, "", "on_after_compute_loss"], [276, 4, 1, "", "on_batch_begin"], [276, 4, 1, "", "on_batch_end"], [276, 4, 1, "", "on_epoch_begin"], [276, 4, 1, "", "on_epoch_end"], [276, 4, 1, "", "on_step_begin"], [276, 4, 1, "", "on_step_end"], [276, 4, 1, "", "on_train_begin"], [276, 4, 1, "", "on_train_end"], [276, 4, 1, "", "post_epoch_end"], [276, 4, 1, "", "pre_epoch_begin"]], "neural_compressor.experimental.pytorch_pruner": [[278, 0, 0, "-", "logger"], [279, 0, 0, "-", "patterns"], [280, 0, 0, "-", "prune_utils"], [281, 0, 0, "-", "pruner"], [282, 0, 0, "-", "pruning"], [283, 0, 0, "-", "scheduler"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[279, 2, 1, "", "Pattern"], [279, 2, 1, "", "PatternNInM"], [279, 2, 1, "", "PatternNxM"], [279, 1, 1, "", "get_pattern"], [279, 1, 1, "", "register_pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.Pattern": [[279, 4, 1, "", "get_block_size_dict"], [279, 4, 1, "", "get_mask_single"], [279, 4, 1, "", "get_masks"], [279, 4, 1, "", "get_masks_global"], [279, 4, 1, "", "get_masks_local"], [279, 4, 1, "", "get_pattern_lock_masks"], [279, 4, 1, "", "get_sparsity_ratio"], [279, 5, 1, "", "is_global"], [279, 5, 1, "", "pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM": [[279, 5, 1, "", "M"], [279, 5, 1, "", "N"], [279, 4, 1, "", "get_masks_global"], [279, 4, 1, "", "get_pattern_lock_masks"], [279, 4, 1, "", "get_sparsity_ratio"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM": [[279, 5, 1, "", "block_size"], [279, 4, 1, "", "get_block_size_dict"], [279, 4, 1, "", "get_masks_global"], [279, 4, 1, "", "get_pattern_lock_masks"], [279, 4, 1, "", "get_sparsity_ratio"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[280, 1, 1, "", "check_config"], [280, 1, 1, "", "parse_not_to_prune"], [280, 1, 1, "", "parse_to_prune"], [280, 1, 1, "", "process_and_check_config"], [280, 1, 1, "", "process_config"], [280, 1, 1, "", "reset_non_value_to_default"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[281, 2, 1, "", "MagnitudePruner"], [281, 2, 1, "", "PatternLockPruner"], [281, 2, 1, "", "Pruner"], [281, 2, 1, "", "SnipMomentumPruner"], [281, 2, 1, "", "SnipPruner"], [281, 1, 1, "", "get_pruner"], [281, 1, 1, "", "register_pruners"]], "neural_compressor.experimental.pytorch_pruner.pruner.MagnitudePruner": [[281, 4, 1, "", "update_scores"]], "neural_compressor.experimental.pytorch_pruner.pruner.PatternLockPruner": [[281, 4, 1, "", "on_after_optimizer_step"], [281, 4, 1, "", "on_step_begin"]], "neural_compressor.experimental.pytorch_pruner.pruner.Pruner": [[281, 4, 1, "", "check_is_pruned_step"], [281, 5, 1, "", "config"], [281, 5, 1, "", "current_sparsity_ratio"], [281, 5, 1, "", "end_step"], [281, 5, 1, "", "global_step"], [281, 4, 1, "", "mask_weights"], [281, 5, 1, "", "masks"], [281, 5, 1, "", "max_sparsity_ratio_per_layer"], [281, 5, 1, "", "modules"], [281, 4, 1, "", "on_after_eval"], [281, 4, 1, "", "on_after_optimizer_step"], [281, 4, 1, "", "on_before_eval"], [281, 4, 1, "", "on_before_optimizer_step"], [281, 4, 1, "", "on_epoch_begin"], [281, 4, 1, "", "on_epoch_end"], [281, 4, 1, "", "on_step_begin"], [281, 4, 1, "", "on_step_end"], [281, 4, 1, "", "on_train_begin"], [281, 4, 1, "", "on_train_end"], [281, 5, 1, "", "pattern"], [281, 5, 1, "", "scheduler"], [281, 5, 1, "", "scores"], [281, 5, 1, "", "start_step"], [281, 5, 1, "", "target_sparsity_ratio"], [281, 5, 1, "", "update_frequency_on_step"], [281, 4, 1, "", "update_scores"]], "neural_compressor.experimental.pytorch_pruner.pruner.SnipMomentumPruner": [[281, 4, 1, "", "on_after_optimizer_step"]], "neural_compressor.experimental.pytorch_pruner.pruner.SnipPruner": [[281, 4, 1, "", "on_after_optimizer_step"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[282, 2, 1, "", "Pruning"]], "neural_compressor.experimental.pytorch_pruner.pruning.Pruning": [[282, 5, 1, "", "config_file_path"], [282, 4, 1, "", "get_sparsity_ratio"], [282, 5, 1, "", "model"], [282, 4, 1, "", "on_after_eval"], [282, 4, 1, "", "on_after_optimizer_step"], [282, 4, 1, "", "on_before_eval"], [282, 4, 1, "", "on_before_optimizer_step"], [282, 4, 1, "", "on_epoch_begin"], [282, 4, 1, "", "on_epoch_end"], [282, 4, 1, "", "on_step_begin"], [282, 4, 1, "", "on_step_end"], [282, 4, 1, "", "on_train_begin"], [282, 4, 1, "", "on_train_end"], [282, 4, 1, "", "prepare"], [282, 5, 1, "", "pruner_info"], [282, 5, 1, "", "pruners"], [282, 4, 1, "", "update_items_for_all_pruners"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[283, 2, 1, "", "IterativeScheduler"], [283, 2, 1, "", "OneshotScheduler"], [283, 2, 1, "", "Scheduler"], [283, 1, 1, "", "get_scheduler"], [283, 1, 1, "", "register_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler.IterativeScheduler": [[283, 4, 1, "", "update_sparsity_ratio"]], "neural_compressor.experimental.pytorch_pruner.scheduler.OneshotScheduler": [[283, 4, 1, "", "update_sparsity_ratio"]], "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler": [[283, 5, 1, "", "config"], [283, 4, 1, "", "update_sparsity_ratio"]], "neural_compressor.experimental.quantization": [[284, 2, 1, "", "Quantization"]], "neural_compressor.experimental.quantization.Quantization": [[284, 3, 1, "", "calib_dataloader"], [284, 4, 1, "", "dataset"], [284, 4, 1, "", "distributed_execute"], [284, 4, 1, "", "execute"], [284, 3, 1, "", "metric"], [284, 3, 1, "", "model"], [284, 3, 1, "", "objective"], [284, 3, 1, "", "postprocess"], [284, 4, 1, "", "pre_process"], [284, 3, 1, "", "q_func"]], "neural_compressor.experimental.scheduler": [[285, 2, 1, "", "Scheduler"]], "neural_compressor.experimental.scheduler.Scheduler": [[285, 4, 1, "", "append"], [285, 4, 1, "", "combine"], [285, 3, 1, "", "eval_func"], [285, 3, 1, "", "model"], [285, 3, 1, "", "train_func"]], "neural_compressor.metric": [[293, 2, 1, "", "BaseMetric"], [293, 2, 1, "", "COCOmAPv2"], [293, 2, 1, "", "GeneralTopK"], [293, 2, 1, "", "METRICS"], [293, 2, 1, "", "Metric"], [293, 2, 1, "", "SquadF1"], [293, 2, 1, "", "TensorflowTopK"], [287, 0, 0, "-", "bleu"], [288, 0, 0, "-", "bleu_util"], [289, 0, 0, "-", "coco_label_map"], [290, 0, 0, "-", "coco_tools"], [291, 0, 0, "-", "evaluate_squad"], [292, 0, 0, "-", "f1"], [294, 0, 0, "-", "metric"], [293, 1, 1, "", "metric_registry"]], "neural_compressor.metric.BaseMetric": [[293, 3, 1, "", "hvd"], [293, 3, 1, "", "metric"], [293, 4, 1, "", "reset"], [293, 4, 1, "", "result"], [293, 4, 1, "", "update"]], "neural_compressor.metric.COCOmAPv2": [[293, 4, 1, "", "reset"], [293, 4, 1, "", "result"], [293, 4, 1, "", "update"]], "neural_compressor.metric.GeneralTopK": [[293, 5, 1, "", "k"], [293, 5, 1, "", "num_correct"], [293, 5, 1, "", "num_sample"], [293, 4, 1, "", "reset"], [293, 4, 1, "", "result"], [293, 4, 1, "", "update"]], "neural_compressor.metric.METRICS": [[293, 5, 1, "", "metrics"], [293, 4, 1, "", "register"]], "neural_compressor.metric.SquadF1": [[293, 4, 1, "", "reset"], [293, 4, 1, "", "result"], [293, 4, 1, "", "update"]], "neural_compressor.metric.TensorflowTopK": [[293, 5, 1, "", "k"], [293, 5, 1, "", "num_correct"], [293, 5, 1, "", "num_sample"], [293, 4, 1, "", "reset"], [293, 4, 1, "", "result"], [293, 4, 1, "", "update"]], "neural_compressor.metric.bleu": [[287, 2, 1, "", "BLEU"], [287, 2, 1, "", "UnicodeRegex"], [287, 1, 1, "", "bleu_tokenize"]], "neural_compressor.metric.bleu.BLEU": [[287, 5, 1, "", "labels"], [287, 5, 1, "", "predictions"], [287, 4, 1, "", "reset"], [287, 4, 1, "", "result"], [287, 4, 1, "", "update"]], "neural_compressor.metric.bleu.UnicodeRegex": [[287, 5, 1, "", "nondigit_punct_re"], [287, 4, 1, "", "property_chars"], [287, 5, 1, "", "punct_nondigit_re"], [287, 5, 1, "", "symbol_re"]], "neural_compressor.metric.bleu_util": [[288, 1, 1, "", "compute_bleu"]], "neural_compressor.metric.coco_tools": [[290, 2, 1, "", "COCOEvalWrapper"], [290, 2, 1, "", "COCOWrapper"], [290, 1, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [290, 1, 1, "", "ExportSingleImageDetectionMasksToCoco"], [290, 1, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.metric.coco_tools.COCOEvalWrapper": [[290, 4, 1, "", "ComputeMetrics"], [290, 4, 1, "", "GetAgnosticMode"], [290, 4, 1, "", "GetCategory"], [290, 4, 1, "", "GetCategoryIdList"], [290, 4, 1, "", "accumulate"]], "neural_compressor.metric.coco_tools.COCOWrapper": [[290, 4, 1, "", "LoadAnnotations"], [290, 5, 1, "", "dataset"], [290, 5, 1, "", "detection_type"]], "neural_compressor.metric.evaluate_squad": [[291, 1, 1, "", "evaluate"], [291, 1, 1, "", "exact_match_score"], [291, 1, 1, "", "f1_score"], [291, 1, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[292, 1, 1, "", "evaluate"], [292, 1, 1, "", "f1_score"], [292, 1, 1, "", "metric_max_over_ground_truths"], [292, 1, 1, "", "normalize_answer"]], "neural_compressor.metric.metric": [[294, 2, 1, "", "Accuracy"], [294, 2, 1, "", "BaseMetric"], [294, 2, 1, "", "COCOmAPv2"], [294, 2, 1, "", "F1"], [294, 2, 1, "", "GeneralTopK"], [294, 2, 1, "", "Loss"], [294, 2, 1, "", "MAE"], [294, 2, 1, "", "METRICS"], [294, 2, 1, "", "MSE"], [294, 2, 1, "", "MXNetMetrics"], [294, 2, 1, "", "Metric"], [294, 2, 1, "", "ONNXRTGLUE"], [294, 2, 1, "", "ONNXRTITMetrics"], [294, 2, 1, "", "ONNXRTQLMetrics"], [294, 2, 1, "", "PyTorchLoss"], [294, 2, 1, "", "PyTorchMetrics"], [294, 2, 1, "", "RMSE"], [294, 2, 1, "", "ROC"], [294, 2, 1, "", "SquadF1"], [294, 2, 1, "", "TensorflowCOCOMAP"], [294, 2, 1, "", "TensorflowMAP"], [294, 2, 1, "", "TensorflowMetrics"], [294, 2, 1, "", "TensorflowTopK"], [294, 2, 1, "", "TensorflowVOCMAP"], [294, 2, 1, "", "WrapMXNetMetric"], [294, 2, 1, "", "WrapONNXRTMetric"], [294, 2, 1, "", "WrapPyTorchMetric"], [294, 2, 1, "", "mIOU"], [294, 1, 1, "", "metric_registry"]], "neural_compressor.metric.metric.Accuracy": [[294, 5, 1, "", "label_list"], [294, 5, 1, "", "pred_list"], [294, 4, 1, "", "reset"], [294, 4, 1, "", "result"], [294, 5, 1, "", "sample"], [294, 4, 1, "", "update"]], "neural_compressor.metric.metric.BaseMetric": [[294, 3, 1, "", "hvd"], [294, 3, 1, "", "metric"], [294, 4, 1, "", "reset"], [294, 4, 1, "", "result"], [294, 4, 1, "", "update"]], "neural_compressor.metric.metric.COCOmAPv2": [[294, 4, 1, "", "reset"], [294, 4, 1, "", "result"], [294, 4, 1, "", "update"]], "neural_compressor.metric.metric.F1": [[294, 4, 1, "", "reset"], [294, 4, 1, "", "result"], [294, 4, 1, "", "update"]], "neural_compressor.metric.metric.GeneralTopK": [[294, 5, 1, "", "k"], [294, 5, 1, "", "num_correct"], [294, 5, 1, "", "num_sample"], [294, 4, 1, "", "reset"], [294, 4, 1, "", "result"], [294, 4, 1, "", "update"]], "neural_compressor.metric.metric.Loss": [[294, 4, 1, "", "reset"], [294, 4, 1, "", "result"], [294, 5, 1, "", "sample"], [294, 5, 1, "", "sum"], [294, 4, 1, "", "update"]], "neural_compressor.metric.metric.MAE": [[294, 5, 1, "", "compare_label"], [294, 5, 1, "", "label_list"], [294, 5, 1, "", "pred_list"], [294, 4, 1, "", "reset"], [294, 4, 1, "", "result"], [294, 4, 1, "", "update"]], "neural_compressor.metric.metric.METRICS": [[294, 5, 1, "", "metrics"], [294, 4, 1, "", "register"]], "neural_compressor.metric.metric.MSE": [[294, 5, 1, "", "compare_label"], [294, 5, 1, "", "label_list"], [294, 5, 1, "", "pred_list"], [294, 4, 1, "", "reset"], [294, 4, 1, "", "result"], [294, 4, 1, "", "update"]], "neural_compressor.metric.metric.MXNetMetrics": [[294, 5, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTGLUE": [[294, 4, 1, "", "reset"], [294, 4, 1, "", "result"], [294, 4, 1, "", "update"]], "neural_compressor.metric.metric.ONNXRTITMetrics": [[294, 5, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTQLMetrics": [[294, 5, 1, "", "metrics"]], "neural_compressor.metric.metric.PyTorchLoss": [[294, 4, 1, "", "compute"], [294, 4, 1, "", "reset"], [294, 4, 1, "", "update"]], "neural_compressor.metric.metric.PyTorchMetrics": [[294, 5, 1, "", "metrics"]], "neural_compressor.metric.metric.RMSE": [[294, 5, 1, "", "mse"], [294, 4, 1, "", "reset"], [294, 4, 1, "", "result"], [294, 4, 1, "", "update"]], "neural_compressor.metric.metric.ROC": [[294, 4, 1, "", "reset"], [294, 4, 1, "", "result"], [294, 4, 1, "", "update"]], "neural_compressor.metric.metric.SquadF1": [[294, 4, 1, "", "reset"], [294, 4, 1, "", "result"], [294, 4, 1, "", "update"]], "neural_compressor.metric.metric.TensorflowMAP": [[294, 4, 1, "", "reset"], [294, 4, 1, "", "result"], [294, 4, 1, "", "update"]], "neural_compressor.metric.metric.TensorflowMetrics": [[294, 5, 1, "", "metrics"]], "neural_compressor.metric.metric.TensorflowTopK": [[294, 5, 1, "", "k"], [294, 5, 1, "", "num_correct"], [294, 5, 1, "", "num_sample"], [294, 4, 1, "", "reset"], [294, 4, 1, "", "result"], [294, 4, 1, "", "update"]], "neural_compressor.metric.metric.WrapMXNetMetric": [[294, 4, 1, "", "reset"], [294, 4, 1, "", "result"], [294, 4, 1, "", "update"]], "neural_compressor.metric.metric.WrapONNXRTMetric": [[294, 4, 1, "", "reset"], [294, 4, 1, "", "result"], [294, 4, 1, "", "update"]], "neural_compressor.metric.metric.WrapPyTorchMetric": [[294, 4, 1, "", "reset"], [294, 4, 1, "", "result"], [294, 4, 1, "", "update"]], "neural_compressor.metric.metric.mIOU": [[294, 4, 1, "", "reset"], [294, 4, 1, "", "result"], [294, 4, 1, "", "update"]], "neural_compressor.mix_precision": [[295, 2, 1, "", "MixedPrecision"], [295, 1, 1, "", "fit"]], "neural_compressor.mix_precision.MixedPrecision": [[295, 3, 1, "", "eval_dataloader"], [295, 3, 1, "", "eval_func"], [295, 4, 1, "", "execute"], [295, 3, 1, "", "metric"], [295, 3, 1, "", "model"], [295, 4, 1, "", "pre_process"], [295, 3, 1, "", "precisions"]], "neural_compressor.model": [[297, 2, 1, "", "BaseModel"], [297, 2, 1, "", "Model"], [296, 0, 0, "-", "base_model"], [298, 0, 0, "-", "keras_model"], [299, 0, 0, "-", "model"], [300, 0, 0, "-", "mxnet_model"], [301, 0, 0, "-", "nets_factory"], [302, 0, 0, "-", "onnx_model"], [303, 0, 0, "-", "tensorflow_model"], [304, 0, 0, "-", "torch_model"]], "neural_compressor.model.BaseModel": [[297, 4, 1, "", "export"], [297, 4, 1, "", "framework"], [297, 3, 1, "", "graph_info"], [297, 3, 1, "", "model"], [297, 4, 1, "", "save"]], "neural_compressor.model.base_model": [[296, 2, 1, "", "BaseModel"]], "neural_compressor.model.base_model.BaseModel": [[296, 4, 1, "", "export"], [296, 4, 1, "", "framework"], [296, 3, 1, "", "graph_info"], [296, 3, 1, "", "model"], [296, 4, 1, "", "save"]], "neural_compressor.model.keras_model": [[298, 2, 1, "", "KerasModel"]], "neural_compressor.model.keras_model.KerasModel": [[298, 4, 1, "", "framework"], [298, 4, 1, "", "get_all_weight_names"], [298, 3, 1, "", "graph_info"], [298, 3, 1, "", "input_node_names"], [298, 3, 1, "", "model"], [298, 3, 1, "", "output_node_names"], [298, 3, 1, "", "q_config"], [298, 4, 1, "", "report_sparsity"], [298, 4, 1, "", "save"]], "neural_compressor.model.model": [[299, 2, 1, "", "Model"], [299, 1, 1, "", "get_model_fwk_name"]], "neural_compressor.model.mxnet_model": [[300, 2, 1, "", "MXNetModel"]], "neural_compressor.model.mxnet_model.MXNetModel": [[300, 4, 1, "", "framework"], [300, 3, 1, "", "model"], [300, 4, 1, "", "save"]], "neural_compressor.model.nets_factory": [[301, 2, 1, "", "TFSlimNetsFactory"]], "neural_compressor.model.nets_factory.TFSlimNetsFactory": [[301, 4, 1, "", "register"]], "neural_compressor.model.onnx_model": [[302, 2, 1, "", "ONNXModel"]], "neural_compressor.model.onnx_model.ONNXModel": [[302, 4, 1, "", "add_initializer"], [302, 4, 1, "", "add_initializers"], [302, 4, 1, "", "add_node"], [302, 4, 1, "", "add_nodes"], [302, 4, 1, "", "add_tensors_to_outputs"], [302, 4, 1, "", "export"], [302, 4, 1, "", "find_node_by_name"], [302, 4, 1, "", "find_nodes_by_initializer"], [302, 4, 1, "", "framework"], [302, 4, 1, "", "get_children"], [302, 4, 1, "", "get_initializer"], [302, 4, 1, "", "get_nodes_chain"], [302, 4, 1, "", "get_parent"], [302, 4, 1, "", "get_parents"], [302, 4, 1, "", "get_scale_zero"], [302, 4, 1, "", "get_siblings"], [302, 4, 1, "", "graph"], [302, 3, 1, "", "graph_info"], [302, 4, 1, "", "initializer"], [302, 4, 1, "", "input"], [302, 3, 1, "", "input_name_to_nodes"], [302, 4, 1, "", "ir_version"], [302, 3, 1, "", "is_large_model"], [302, 4, 1, "", "match_first_parent"], [302, 4, 1, "", "match_parent"], [302, 4, 1, "", "match_parent_path"], [302, 3, 1, "", "model"], [302, 3, 1, "", "model_path"], [302, 4, 1, "", "nodes"], [302, 4, 1, "", "opset_import"], [302, 4, 1, "", "output"], [302, 3, 1, "", "output_name_to_node"], [302, 3, 1, "", "q_config"], [302, 4, 1, "", "remove_initializer"], [302, 4, 1, "", "remove_initializers"], [302, 4, 1, "", "remove_node"], [302, 4, 1, "", "remove_nodes"], [302, 4, 1, "", "remove_tensors_from_outputs"], [302, 4, 1, "", "remove_unused_constant"], [302, 4, 1, "", "replace_input_of_all_nodes"], [302, 4, 1, "", "replace_node_input"], [302, 4, 1, "", "replace_node_output"], [302, 4, 1, "", "replace_output_of_all_nodes"], [302, 4, 1, "", "save"], [302, 4, 1, "", "save_model_to_file"], [302, 4, 1, "", "set_initializer"], [302, 4, 1, "", "topological_sort"], [302, 4, 1, "", "update"]], "neural_compressor.model.tensorflow_model": [[303, 2, 1, "", "TensorflowBaseModel"], [303, 2, 1, "", "TensorflowCheckpointModel"], [303, 2, 1, "", "TensorflowModel"], [303, 2, 1, "", "TensorflowQATModel"], [303, 2, 1, "", "TensorflowSavedModelModel"], [303, 1, 1, "", "checkpoint_session"], [303, 1, 1, "", "estimator_session"], [303, 1, 1, "", "frozen_pb_session"], [303, 1, 1, "", "get_model_type"], [303, 1, 1, "", "graph_def_session"], [303, 1, 1, "", "graph_session"], [303, 1, 1, "", "keras_session"], [303, 1, 1, "", "load_saved_model"], [303, 1, 1, "", "saved_model_session"], [303, 1, 1, "", "slim_session"], [303, 1, 1, "", "validate_and_inference_input_output"], [303, 1, 1, "", "validate_graph_node"]], "neural_compressor.model.tensorflow_model.TensorflowBaseModel": [[303, 4, 1, "", "export"], [303, 4, 1, "", "framework"], [303, 3, 1, "", "graph"], [303, 3, 1, "", "graph_def"], [303, 3, 1, "", "graph_info"], [303, 3, 1, "", "input_node_names"], [303, 3, 1, "", "input_tensor"], [303, 3, 1, "", "input_tensor_names"], [303, 3, 1, "", "iter_op"], [303, 3, 1, "", "model"], [303, 3, 1, "", "model_type"], [303, 3, 1, "", "name"], [303, 3, 1, "", "output_node_names"], [303, 3, 1, "", "output_tensor"], [303, 3, 1, "", "output_tensor_names"], [303, 3, 1, "", "q_config"], [303, 4, 1, "", "save"], [303, 3, 1, "", "sess"], [303, 3, 1, "", "weights"], [303, 3, 1, "", "workspace_path"]], "neural_compressor.model.tensorflow_model.TensorflowCheckpointModel": [[303, 3, 1, "", "graph_def"], [303, 3, 1, "", "model"]], "neural_compressor.model.tensorflow_model.TensorflowQATModel": [[303, 3, 1, "", "frozen_graph_def"], [303, 3, 1, "", "model"], [303, 4, 1, "", "save"]], "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel": [[303, 4, 1, "", "build_saved_model"], [303, 4, 1, "", "get_all_weight_names"], [303, 4, 1, "", "get_weight"], [303, 3, 1, "", "model"], [303, 4, 1, "", "report_sparsity"], [303, 4, 1, "", "save"], [303, 4, 1, "", "update_weights"]], "neural_compressor.model.torch_model": [[304, 2, 1, "", "IPEXModel"], [304, 2, 1, "", "PyTorchBaseModel"], [304, 2, 1, "", "PyTorchFXModel"], [304, 2, 1, "", "PyTorchModel"]], "neural_compressor.model.torch_model.IPEXModel": [[304, 4, 1, "", "save"], [304, 3, 1, "", "workspace_path"]], "neural_compressor.model.torch_model.PyTorchBaseModel": [[304, 4, 1, "", "forward"], [304, 3, 1, "", "fp32_model"], [304, 4, 1, "", "framework"], [304, 4, 1, "", "generate_forward_pre_hook"], [304, 4, 1, "", "get_all_weight_names"], [304, 4, 1, "", "get_gradient"], [304, 4, 1, "", "get_inputs"], [304, 4, 1, "", "get_weight"], [304, 3, 1, "", "model"], [304, 4, 1, "", "prune_weights_"], [304, 4, 1, "", "register_forward_pre_hook"], [304, 4, 1, "", "remove_hooks"], [304, 4, 1, "", "report_sparsity"], [304, 4, 1, "", "update_gradient"], [304, 4, 1, "", "update_weights"]], "neural_compressor.model.torch_model.PyTorchModel": [[304, 4, 1, "", "export"], [304, 3, 1, "", "graph_info"], [304, 4, 1, "", "load_quantized_state_dict"], [304, 4, 1, "", "quantized_state_dict"], [304, 4, 1, "", "save"], [304, 3, 1, "", "workspace_path"]], "neural_compressor.objective": [[305, 2, 1, "", "Accuracy"], [305, 2, 1, "", "Footprint"], [305, 2, 1, "", "ModelSize"], [305, 2, 1, "", "MultiObjective"], [305, 2, 1, "", "Objective"], [305, 2, 1, "", "Performance"], [305, 1, 1, "", "objective_custom_registry"], [305, 1, 1, "", "objective_registry"]], "neural_compressor.objective.Accuracy": [[305, 4, 1, "", "end"], [305, 4, 1, "", "start"]], "neural_compressor.objective.Footprint": [[305, 4, 1, "", "end"], [305, 4, 1, "", "start"]], "neural_compressor.objective.ModelSize": [[305, 4, 1, "", "end"], [305, 4, 1, "", "start"]], "neural_compressor.objective.MultiObjective": [[305, 4, 1, "", "accuracy_meet_req"], [305, 4, 1, "", "accuracy_meets"], [305, 3, 1, "", "accuracy_target"], [305, 3, 1, "", "baseline"], [305, 4, 1, "", "best_result"], [305, 4, 1, "", "compare"], [305, 4, 1, "", "end"], [305, 4, 1, "", "evaluate"], [305, 4, 1, "", "reset"], [305, 4, 1, "", "result"], [305, 4, 1, "", "set_model"], [305, 4, 1, "", "start"]], "neural_compressor.objective.Objective": [[305, 4, 1, "", "end"], [305, 3, 1, "", "model"], [305, 4, 1, "", "reset"], [305, 4, 1, "", "result"], [305, 4, 1, "", "result_list"], [305, 4, 1, "", "start"]], "neural_compressor.objective.Performance": [[305, 4, 1, "", "end"], [305, 4, 1, "", "start"]], "neural_compressor.quantization": [[306, 2, 1, "", "PostTrainingQuant"], [306, 1, 1, "", "fit"]], "neural_compressor.quantization.PostTrainingQuant": [[306, 3, 1, "", "calib_dataloader"], [306, 3, 1, "", "calib_func"], [306, 3, 1, "", "eval_dataloader"], [306, 3, 1, "", "eval_func"], [306, 4, 1, "", "execute"], [306, 3, 1, "", "metric"], [306, 3, 1, "", "model"], [306, 4, 1, "", "pre_proccess"]], "neural_compressor.strategy": [[307, 0, 0, "-", "auto"], [308, 0, 0, "-", "auto_mixed_precision"], [309, 0, 0, "-", "basic"], [310, 0, 0, "-", "bayesian"], [311, 0, 0, "-", "conservative"], [312, 0, 0, "-", "exhaustive"], [313, 0, 0, "-", "hawq_v2"], [315, 0, 0, "-", "mse"], [316, 0, 0, "-", "mse_v2"], [317, 0, 0, "-", "random"], [318, 0, 0, "-", "strategy"], [320, 0, 0, "-", "utils"]], "neural_compressor.strategy.auto": [[307, 2, 1, "", "AutoTuneStrategy"]], "neural_compressor.strategy.auto.AutoTuneStrategy": [[307, 4, 1, "", "next_tune_cfg"], [307, 4, 1, "", "sequential_traverse"], [307, 4, 1, "", "traverse"]], "neural_compressor.strategy.auto_mixed_precision": [[308, 2, 1, "", "AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy": [[308, 4, 1, "", "next_tune_cfg"], [308, 4, 1, "", "traverse"]], "neural_compressor.strategy.basic": [[309, 2, 1, "", "BasicTuneStrategy"]], "neural_compressor.strategy.basic.BasicTuneStrategy": [[309, 4, 1, "", "distributed_next_tune_cfg_lst"], [309, 4, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.bayesian": [[310, 2, 1, "", "BayesianOptimization"], [310, 2, 1, "", "BayesianTuneStrategy"], [310, 2, 1, "", "TargetSpace"], [310, 1, 1, "", "acq_max"]], "neural_compressor.strategy.bayesian.BayesianOptimization": [[310, 4, 1, "", "gen_next_params"], [310, 3, 1, "", "max"], [310, 3, 1, "", "res"], [310, 3, 1, "", "space"], [310, 4, 1, "", "suggest"]], "neural_compressor.strategy.bayesian.BayesianTuneStrategy": [[310, 4, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.bayesian.TargetSpace": [[310, 4, 1, "", "array_to_params"], [310, 3, 1, "", "bounds"], [310, 3, 1, "", "dim"], [310, 3, 1, "", "empty"], [310, 4, 1, "", "get_target"], [310, 3, 1, "", "keys"], [310, 4, 1, "", "max"], [310, 3, 1, "", "params"], [310, 4, 1, "", "params_to_array"], [310, 4, 1, "", "random_sample"], [310, 4, 1, "", "register"], [310, 4, 1, "", "res"], [310, 3, 1, "", "target"]], "neural_compressor.strategy.conservative": [[311, 2, 1, "", "ConservativeTuneStrategy"]], "neural_compressor.strategy.conservative.ConservativeTuneStrategy": [[311, 4, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.exhaustive": [[312, 2, 1, "", "ExhaustiveTuneStrategy"]], "neural_compressor.strategy.exhaustive.ExhaustiveTuneStrategy": [[312, 4, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.hawq_v2": [[313, 2, 1, "", "HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.hawq_v2.HAWQ_V2TuneStrategy": [[313, 4, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.mse": [[315, 2, 1, "", "MSETuneStrategy"]], "neural_compressor.strategy.mse.MSETuneStrategy": [[315, 4, 1, "", "mse_impact_lst"], [315, 4, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.mse_v2": [[316, 2, 1, "", "MSE_V2TuneStrategy"]], "neural_compressor.strategy.mse_v2.MSE_V2TuneStrategy": [[316, 4, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.random": [[317, 2, 1, "", "RandomTuneStrategy"]], "neural_compressor.strategy.random.RandomTuneStrategy": [[317, 4, 1, "", "next_tune_cfg"]], "neural_compressor.strategy.strategy": [[318, 2, 1, "", "TuneStrategy"], [318, 1, 1, "", "strategy_registry"]], "neural_compressor.strategy.strategy.TuneStrategy": [[318, 4, 1, "", "apply_all_tuning_recipes"], [318, 4, 1, "", "apply_recipe_one_by_one"], [318, 4, 1, "", "deploy_config"], [318, 4, 1, "", "distributed_next_tune_cfg_lst"], [318, 4, 1, "", "distributed_traverse"], [318, 3, 1, "", "evaluation_result"], [318, 4, 1, "", "initial_best_acc"], [318, 4, 1, "", "initial_tuning_cfg"], [318, 4, 1, "", "master_worker_handle"], [318, 4, 1, "", "meet_acc_req"], [318, 4, 1, "", "next_tune_cfg"], [318, 4, 1, "", "set_param_for_post_quantization_algos"], [318, 4, 1, "", "set_param_for_pre_quantization_algos"], [318, 4, 1, "", "set_q_func"], [318, 4, 1, "", "set_tuning_space"], [318, 4, 1, "", "setup_resume"], [318, 4, 1, "", "show_baseline_info"], [318, 4, 1, "", "slave_worker_handle"], [318, 4, 1, "", "stop"], [318, 4, 1, "", "traverse"], [318, 4, 1, "", "update_best_op_tuning_cfg"]], "neural_compressor.strategy.utils": [[320, 2, 1, "", "FallbackTuningSampler"], [320, 2, 1, "", "OpTuningConfig"], [320, 2, 1, "", "OpTypeWiseTuningSampler"], [320, 2, 1, "", "OpWiseTuningSampler"], [320, 2, 1, "", "TuningItem"], [320, 2, 1, "", "TuningSampler"], [320, 2, 1, "", "TuningSpace"], [319, 0, 0, "-", "constant"], [321, 0, 0, "-", "tuning_sampler"], [322, 0, 0, "-", "tuning_space"], [323, 0, 0, "-", "tuning_structs"], [324, 0, 0, "-", "utility"]], "neural_compressor.strategy.utils.OpTuningConfig": [[320, 4, 1, "", "from_state"], [320, 4, 1, "", "get_state"]], "neural_compressor.strategy.utils.OpWiseTuningSampler": [[320, 4, 1, "", "get_opwise_candidate"]], "neural_compressor.strategy.utils.TuningItem": [[320, 4, 1, "", "append"], [320, 4, 1, "", "get_details"], [320, 4, 1, "", "get_option_by_name"], [320, 4, 1, "", "get_options_name"], [320, 3, 1, "", "options"], [320, 4, 1, "", "remove"]], "neural_compressor.strategy.utils.TuningSpace": [[320, 4, 1, "", "get_default_config"], [320, 4, 1, "", "get_default_full_path"], [320, 4, 1, "", "get_item_by_path"], [320, 4, 1, "", "get_op_default_path_by_pattern"], [320, 4, 1, "", "query_item_option"], [320, 4, 1, "", "query_items_by_quant_mode"], [320, 4, 1, "", "query_quant_mode_item_by_full_path"]], "neural_compressor.strategy.utils.tuning_sampler": [[321, 2, 1, "", "FallbackTuningSampler"], [321, 2, 1, "", "ModelWiseTuningSampler"], [321, 2, 1, "", "OpTypeWiseTuningSampler"], [321, 2, 1, "", "OpWiseTuningSampler"], [321, 2, 1, "", "SmoothQuantSampler"], [321, 2, 1, "", "TuningOrder"], [321, 2, 1, "", "TuningSampler"], [321, 2, 1, "", "TuningSamplerRegistry"]], "neural_compressor.strategy.utils.tuning_sampler.OpWiseTuningSampler": [[321, 4, 1, "", "get_opwise_candidate"]], "neural_compressor.strategy.utils.tuning_sampler.TuningSamplerRegistry": [[321, 4, 1, "", "register"]], "neural_compressor.strategy.utils.tuning_space": [[322, 2, 1, "", "TuningItem"], [322, 2, 1, "", "TuningSpace"], [322, 1, 1, "", "get_op_mode_by_query_order"], [322, 1, 1, "", "initial_tuning_cfg_with_quant_mode"], [322, 1, 1, "", "pattern_to_internal"], [322, 1, 1, "", "pattern_to_path"], [322, 1, 1, "", "quant_mode_from_pattern"]], "neural_compressor.strategy.utils.tuning_space.TuningItem": [[322, 4, 1, "", "append"], [322, 4, 1, "", "get_details"], [322, 4, 1, "", "get_option_by_name"], [322, 4, 1, "", "get_options_name"], [322, 3, 1, "", "options"], [322, 4, 1, "", "remove"]], "neural_compressor.strategy.utils.tuning_space.TuningSpace": [[322, 4, 1, "", "get_default_config"], [322, 4, 1, "", "get_default_full_path"], [322, 4, 1, "", "get_item_by_path"], [322, 4, 1, "", "get_op_default_path_by_pattern"], [322, 4, 1, "", "query_item_option"], [322, 4, 1, "", "query_items_by_quant_mode"], [322, 4, 1, "", "query_quant_mode_item_by_full_path"]], "neural_compressor.strategy.utils.tuning_structs": [[323, 2, 1, "", "OpTuningConfig"]], "neural_compressor.strategy.utils.tuning_structs.OpTuningConfig": [[323, 4, 1, "", "from_state"], [323, 4, 1, "", "get_state"]], "neural_compressor.strategy.utils.utility": [[324, 2, 1, "", "OrderedDefaultDict"], [324, 1, 1, "", "extract_data_type"], [324, 1, 1, "", "get_adaptor_name"], [324, 1, 1, "", "reverted_data_type"]], "neural_compressor.training": [[325, 2, 1, "", "CallBacks"], [325, 2, 1, "", "CompressionManager"], [325, 1, 1, "", "fit"], [325, 1, 1, "", "prepare_compression"]], "neural_compressor.training.CallBacks": [[325, 4, 1, "", "on_after_compute_loss"], [325, 4, 1, "", "on_after_eval"], [325, 4, 1, "", "on_after_optimizer_step"], [325, 4, 1, "", "on_before_eval"], [325, 4, 1, "", "on_before_optimizer_step"], [325, 4, 1, "", "on_epoch_begin"], [325, 4, 1, "", "on_epoch_end"], [325, 4, 1, "", "on_step_begin"], [325, 4, 1, "", "on_step_end"], [325, 4, 1, "", "on_train_begin"], [325, 4, 1, "", "on_train_end"]], "neural_compressor.training.CompressionManager": [[325, 3, 1, "", "eval_dataloader"], [325, 3, 1, "", "eval_func"], [325, 4, 1, "", "export"], [325, 4, 1, "", "fit"], [325, 3, 1, "", "metric"], [325, 4, 1, "", "save"], [325, 3, 1, "", "train_func"]], "neural_compressor.utils": [[329, 2, 1, "", "LayerHistogramCollector"], [326, 0, 0, "-", "collect_layer_histogram"], [327, 0, 0, "-", "constant"], [328, 0, 0, "-", "create_obj_from_config"], [329, 1, 1, "", "debug"], [329, 1, 1, "", "error"], [329, 1, 1, "", "fatal"], [329, 1, 1, "", "info"], [330, 0, 0, "-", "kl_divergence"], [331, 0, 0, "-", "load_huggingface"], [329, 1, 1, "", "log"], [332, 0, 0, "-", "logger"], [333, 0, 0, "-", "options"], [334, 0, 0, "-", "pytorch"], [329, 1, 1, "", "set_random_seed"], [335, 0, 0, "-", "utility"], [329, 1, 1, "", "warn"], [329, 1, 1, "", "warning"]], "neural_compressor.utils.LayerHistogramCollector": [[329, 4, 1, "", "collect"]], "neural_compressor.utils.collect_layer_histogram": [[326, 2, 1, "", "LayerHistogramCollector"]], "neural_compressor.utils.collect_layer_histogram.LayerHistogramCollector": [[326, 4, 1, "", "collect"]], "neural_compressor.utils.create_obj_from_config": [[328, 1, 1, "", "create_dataloader"], [328, 1, 1, "", "create_dataset"], [328, 1, 1, "", "create_eval_func"], [328, 1, 1, "", "create_train_func"], [328, 1, 1, "", "get_algorithm"], [328, 1, 1, "", "get_func_from_config"], [328, 1, 1, "", "get_metrics"], [328, 1, 1, "", "get_postprocess"], [328, 1, 1, "", "get_preprocess"]], "neural_compressor.utils.kl_divergence": [[330, 2, 1, "", "KL_Divergence"]], "neural_compressor.utils.kl_divergence.KL_Divergence": [[330, 4, 1, "", "expand_quantized_bins"], [330, 4, 1, "", "get_threshold"], [330, 4, 1, "", "safe_entropy"]], "neural_compressor.utils.load_huggingface": [[331, 2, 1, "", "OptimizedModel"], [331, 1, 1, "", "save_for_huggingface_upstream"]], "neural_compressor.utils.load_huggingface.OptimizedModel": [[331, 4, 1, "", "from_pretrained"]], "neural_compressor.utils.logger": [[332, 2, 1, "", "Logger"], [332, 1, 1, "", "debug"], [332, 1, 1, "", "error"], [332, 1, 1, "", "fatal"], [332, 1, 1, "", "info"], [332, 1, 1, "", "log"], [332, 1, 1, "", "warn"], [332, 1, 1, "", "warning"]], "neural_compressor.utils.logger.Logger": [[332, 4, 1, "", "get_logger"]], "neural_compressor.utils.options": [[333, 2, 1, "", "onnxrt"]], "neural_compressor.utils.pytorch": [[334, 1, 1, "", "is_int8_model"], [334, 1, 1, "", "load"]], "neural_compressor.utils.utility": [[335, 2, 1, "", "CaptureOutputToFile"], [335, 2, 1, "", "CpuInfo"], [335, 1, 1, "", "Dequantize"], [335, 1, 1, "", "DequantizeWeight"], [335, 2, 1, "", "GLOBAL_STATE"], [335, 2, 1, "", "LazyImport"], [335, 2, 1, "", "MODE"], [335, 2, 1, "", "Statistics"], [335, 1, 1, "", "combine_histogram"], [335, 1, 1, "", "compute_sparsity"], [335, 1, 1, "", "dump_data_to_local"], [335, 1, 1, "", "dump_elapsed_time"], [335, 1, 1, "", "equal_dicts"], [335, 1, 1, "", "fault_tolerant_file"], [335, 1, 1, "", "get_all_fp32_data"], [335, 1, 1, "", "get_size"], [335, 1, 1, "", "get_tensor_histogram"], [335, 1, 1, "", "get_tuning_history"], [335, 1, 1, "", "load_data_from_pkl"], [335, 1, 1, "", "recover"], [335, 1, 1, "", "set_random_seed"], [335, 1, 1, "", "set_resume_from"], [335, 1, 1, "", "set_tensorboard"], [335, 1, 1, "", "set_workspace"], [335, 1, 1, "", "show_memory_info"], [335, 1, 1, "", "singleton"], [335, 1, 1, "", "str2array"], [335, 1, 1, "", "time_limit"], [335, 1, 1, "", "version1_eq_version2"], [335, 1, 1, "", "version1_gt_version2"], [335, 1, 1, "", "version1_gte_version2"], [335, 1, 1, "", "version1_lt_version2"], [335, 1, 1, "", "version1_lte_version2"]], "neural_compressor.utils.utility.CpuInfo": [[335, 3, 1, "", "bf16"], [335, 3, 1, "", "cores_per_socket"], [335, 4, 1, "", "get_number_of_sockets"], [335, 3, 1, "", "vnni"]], "neural_compressor.utils.utility.Statistics": [[335, 4, 1, "", "print_stat"]], "neural_compressor.ux": [[411, 0, 0, "-", "components"], [470, 0, 0, "-", "inc_bench"], [479, 0, 0, "-", "utils"], [505, 0, 0, "-", "web"]], "neural_compressor.ux.components": [[339, 0, 0, "-", "benchmark"], [343, 0, 0, "-", "config_generator"], [351, 0, 0, "-", "configuration_wizard"], [387, 0, 0, "-", "db_manager"], [392, 0, 0, "-", "diagnosis"], [400, 0, 0, "-", "file_browser"], [406, 0, 0, "-", "graph"], [412, 0, 0, "-", "jobs_management"], [416, 0, 0, "-", "manage_workspace"], [418, 0, 0, "-", "model"], [437, 0, 0, "-", "model_zoo"], [439, 0, 0, "-", "names_mapper"], [446, 0, 0, "-", "optimization"], [462, 0, 0, "-", "profiling"]], "neural_compressor.ux.components.benchmark": [[339, 2, 1, "", "Benchmarks"], [336, 0, 0, "-", "benchmark"], [337, 0, 0, "-", "benchmark_model"], [338, 0, 0, "-", "execute_benchmark"]], "neural_compressor.ux.components.benchmark.benchmark": [[336, 2, 1, "", "Benchmark"], [336, 2, 1, "", "DataloaderInterface"]], "neural_compressor.ux.components.benchmark.benchmark.Benchmark": [[336, 3, 1, "", "config_filename"], [336, 3, 1, "", "configuration_data"], [336, 4, 1, "", "execute"], [336, 4, 1, "", "generate_config"], [336, 3, 1, "", "workdir"]], "neural_compressor.ux.components.benchmark.benchmark_model": [[337, 1, 1, "", "benchmark_model"], [337, 1, 1, "", "parse_args"], [337, 1, 1, "", "set_eager_execution"]], "neural_compressor.ux.components.benchmark.execute_benchmark": [[338, 1, 1, "", "benchmark_result_update"], [338, 1, 1, "", "benchmark_result_update_pytorch_script"], [338, 1, 1, "", "execute_benchmark"], [338, 1, 1, "", "execute_real_benchmark"], [338, 1, 1, "", "pytorch_script_bench_optimizations"], [338, 1, 1, "", "pytorch_script_bench_original_model"]], "neural_compressor.ux.components.config_generator": [[340, 0, 0, "-", "benchmark_config_generator"], [341, 0, 0, "-", "config_generator"], [342, 0, 0, "-", "graph_optimization_config_generator"], [344, 0, 0, "-", "mixed_precision_config_generator"], [345, 0, 0, "-", "profiling_config_generator"], [346, 0, 0, "-", "pruning_config_generator"], [347, 0, 0, "-", "quantization_config_generator"]], "neural_compressor.ux.components.config_generator.benchmark_config_generator": [[340, 2, 1, "", "BenchmarkConfigGenerator"]], "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator": [[340, 4, 1, "", "generate"], [340, 4, 1, "", "generate_accuracy_config"], [340, 4, 1, "", "generate_evaluation_config"], [340, 4, 1, "", "generate_performance_config"]], "neural_compressor.ux.components.config_generator.config_generator": [[341, 2, 1, "", "ConfigGenerator"]], "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator": [[341, 4, 1, "", "generate"], [341, 4, 1, "", "generate_dataloader_config"], [341, 4, 1, "", "generate_model_config"], [341, 4, 1, "", "get_predefined_config_path"]], "neural_compressor.ux.components.config_generator.graph_optimization_config_generator": [[342, 2, 1, "", "GraphOptimizationConfigGenerator"]], "neural_compressor.ux.components.config_generator.graph_optimization_config_generator.GraphOptimizationConfigGenerator": [[342, 4, 1, "", "generate"], [342, 4, 1, "", "generate_evaluation_config"], [342, 4, 1, "", "generate_graph_optimization_config"]], "neural_compressor.ux.components.config_generator.mixed_precision_config_generator": [[344, 2, 1, "", "MixedPrecisionConfigGenerator"]], "neural_compressor.ux.components.config_generator.mixed_precision_config_generator.MixedPrecisionConfigGenerator": [[344, 4, 1, "", "generate"], [344, 4, 1, "", "generate_evaluation_config"], [344, 4, 1, "", "generate_mixed_precision_config"]], "neural_compressor.ux.components.config_generator.profiling_config_generator": [[345, 2, 1, "", "ProfilingConfigGenerator"]], "neural_compressor.ux.components.config_generator.profiling_config_generator.ProfilingConfigGenerator": [[345, 4, 1, "", "generate"]], "neural_compressor.ux.components.config_generator.pruning_config_generator": [[346, 2, 1, "", "PruningConfigGenerator"]], "neural_compressor.ux.components.config_generator.pruning_config_generator.PruningConfigGenerator": [[346, 4, 1, "", "generate"], [346, 4, 1, "", "generate_evaluation_config"], [346, 4, 1, "", "generate_pruning_config"]], "neural_compressor.ux.components.config_generator.quantization_config_generator": [[347, 2, 1, "", "QuantizationConfigGenerator"]], "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator": [[347, 4, 1, "", "generate"], [347, 4, 1, "", "generate_evaluation_config"], [347, 4, 1, "", "generate_quantization_config"], [347, 4, 1, "", "generate_tuning_config"]], "neural_compressor.ux.components.configuration_wizard": [[348, 0, 0, "-", "configuration_parser"], [349, 0, 0, "-", "get_boundary_nodes"], [350, 0, 0, "-", "get_configuration"], [352, 0, 0, "-", "params_feeder"], [353, 0, 0, "-", "pruning_config_parser"]], "neural_compressor.ux.components.configuration_wizard.configuration_parser": [[348, 2, 1, "", "ConfigurationParser"], [348, 1, 1, "", "normalize_string_list"], [348, 1, 1, "", "parse_list_value"], [348, 1, 1, "", "parse_multidim_list"]], "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser": [[348, 4, 1, "", "get_param_type"], [348, 4, 1, "", "parse"], [348, 4, 1, "", "parse_dataloader"], [348, 4, 1, "", "parse_evaluation_data"], [348, 4, 1, "", "parse_metric"], [348, 4, 1, "", "parse_transforms"], [348, 4, 1, "", "parse_value"]], "neural_compressor.ux.components.configuration_wizard.get_boundary_nodes": [[349, 1, 1, "", "get_boundary_nodes"]], "neural_compressor.ux.components.configuration_wizard.get_configuration": [[350, 1, 1, "", "get_predefined_configuration"], [350, 1, 1, "", "update_config_to_machine_specification"]], "neural_compressor.ux.components.configuration_wizard.params_feeder": [[352, 2, 1, "", "Feeder"], [352, 1, 1, "", "get_possible_values"]], "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder": [[352, 4, 1, "", "feed"], [352, 4, 1, "", "get_dataloaders"], [352, 4, 1, "", "get_domains"], [352, 4, 1, "", "get_frameworks"], [352, 4, 1, "", "get_metrics"], [352, 4, 1, "", "get_models"], [352, 4, 1, "", "get_objectives"], [352, 4, 1, "", "get_precisions"], [352, 4, 1, "", "get_quantization_approaches"], [352, 4, 1, "", "get_strategies"], [352, 4, 1, "", "get_transforms"]], "neural_compressor.ux.components.configuration_wizard.pruning_config_parser": [[353, 2, 1, "", "PruningConfigParser"]], "neural_compressor.ux.components.configuration_wizard.pruning_config_parser.PruningConfigParser": [[353, 4, 1, "", "generate_tree"], [353, 4, 1, "", "parse"], [353, 4, 1, "", "parse_entry"]], "neural_compressor.ux.components.db_manager": [[387, 2, 1, "", "DBManager"], [354, 0, 0, "-", "db_manager"], [363, 0, 0, "-", "db_models"], [382, 0, 0, "-", "db_operations"], [388, 0, 0, "-", "params_interfaces"], [389, 0, 0, "-", "utils"]], "neural_compressor.ux.components.db_manager.DBManager": [[387, 4, 1, "", "create_all"], [387, 4, 1, "", "create_sqlalchemy_engine"], [387, 3, 1, "", "engine"], [387, 4, 1, "", "initialize_database"]], "neural_compressor.ux.components.db_manager.db_manager": [[354, 2, 1, "", "DBManager"]], "neural_compressor.ux.components.db_manager.db_manager.DBManager": [[354, 4, 1, "", "create_all"], [354, 4, 1, "", "create_sqlalchemy_engine"], [354, 3, 1, "", "engine"], [354, 4, 1, "", "initialize_database"]], "neural_compressor.ux.components.db_manager.db_models": [[355, 0, 0, "-", "benchmark"], [356, 0, 0, "-", "benchmark_result"], [357, 0, 0, "-", "dataloader"], [358, 0, 0, "-", "dataset"], [359, 0, 0, "-", "domain"], [360, 0, 0, "-", "domain_flavour"], [361, 0, 0, "-", "example"], [362, 0, 0, "-", "framework"], [364, 0, 0, "-", "metric"], [365, 0, 0, "-", "model"], [366, 0, 0, "-", "optimization"], [367, 0, 0, "-", "optimization_type"], [368, 0, 0, "-", "precision"], [369, 0, 0, "-", "profiling"], [370, 0, 0, "-", "profiling_result"], [371, 0, 0, "-", "project"], [372, 0, 0, "-", "pruning_details"], [373, 0, 0, "-", "transform"], [374, 0, 0, "-", "tuning_details"], [375, 0, 0, "-", "tuning_history"]], "neural_compressor.ux.components.db_manager.db_models.benchmark": [[355, 2, 1, "", "Benchmark"]], "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark": [[355, 4, 1, "", "add"], [355, 4, 1, "", "build_info"], [355, 4, 1, "", "clean_status"], [355, 4, 1, "", "delete_benchmark"], [355, 4, 1, "", "details"], [355, 4, 1, "", "list"], [355, 4, 1, "", "update_batch_size"], [355, 4, 1, "", "update_config_path"], [355, 4, 1, "", "update_cores_per_instance"], [355, 4, 1, "", "update_dataset"], [355, 4, 1, "", "update_duration"], [355, 4, 1, "", "update_execution_command"], [355, 4, 1, "", "update_log_path"], [355, 4, 1, "", "update_mode"], [355, 4, 1, "", "update_number_of_instance"], [355, 4, 1, "", "update_status"]], "neural_compressor.ux.components.db_manager.db_models.benchmark_result": [[356, 2, 1, "", "BenchmarkResult"]], "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult": [[356, 4, 1, "", "add"], [356, 4, 1, "", "build_info"], [356, 4, 1, "", "update_accuracy"], [356, 4, 1, "", "update_performance"]], "neural_compressor.ux.components.db_manager.db_models.dataloader": [[357, 2, 1, "", "Dataloader"], [357, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader": [[357, 4, 1, "", "list"], [357, 4, 1, "", "list_by_framework"], [357, 4, 1, "", "query_to_list"], [357, 4, 1, "", "update_params"]], "neural_compressor.ux.components.db_manager.db_models.dataset": [[358, 2, 1, "", "Dataset"]], "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset": [[358, 4, 1, "", "add"], [358, 4, 1, "", "build_info"], [358, 4, 1, "", "delete_dataset"], [358, 4, 1, "", "details"], [358, 4, 1, "", "list"], [358, 4, 1, "", "update_template_path"]], "neural_compressor.ux.components.db_manager.db_models.domain": [[359, 2, 1, "", "Domain"], [359, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.domain.Domain": [[359, 4, 1, "", "get_domain_id"], [359, 4, 1, "", "list"]], "neural_compressor.ux.components.db_manager.db_models.domain_flavour": [[360, 2, 1, "", "DomainFlavour"], [360, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.domain_flavour.DomainFlavour": [[360, 4, 1, "", "get_domain_flavour_id"], [360, 4, 1, "", "list"]], "neural_compressor.ux.components.db_manager.db_models.example": [[361, 2, 1, "", "Example"]], "neural_compressor.ux.components.db_manager.db_models.framework": [[362, 2, 1, "", "Framework"], [362, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.framework.Framework": [[362, 4, 1, "", "get_framework_id"]], "neural_compressor.ux.components.db_manager.db_models.metric": [[364, 2, 1, "", "Metric"], [364, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.metric.Metric": [[364, 4, 1, "", "list"], [364, 4, 1, "", "list_by_framework"], [364, 4, 1, "", "query_to_list"]], "neural_compressor.ux.components.db_manager.db_models.model": [[365, 2, 1, "", "Model"]], "neural_compressor.ux.components.db_manager.db_models.model.Model": [[365, 4, 1, "", "add"], [365, 4, 1, "", "build_info"], [365, 4, 1, "", "delete_model"], [365, 4, 1, "", "details"], [365, 4, 1, "", "list"]], "neural_compressor.ux.components.db_manager.db_models.optimization": [[366, 2, 1, "", "Optimization"]], "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization": [[366, 4, 1, "", "add"], [366, 4, 1, "", "build_info"], [366, 4, 1, "", "clean_status"], [366, 4, 1, "", "delete_optimization"], [366, 4, 1, "", "details"], [366, 4, 1, "", "get_optimization_by_project_and_model"], [366, 4, 1, "", "get_pinned_benchmarks"], [366, 4, 1, "", "list"], [366, 4, 1, "", "pin_accuracy_benchmark"], [366, 4, 1, "", "pin_performance_benchmark"], [366, 4, 1, "", "unpin_benchmark"], [366, 4, 1, "", "update_batch_size"], [366, 4, 1, "", "update_config_path"], [366, 4, 1, "", "update_dataset"], [366, 4, 1, "", "update_duration"], [366, 4, 1, "", "update_execution_command"], [366, 4, 1, "", "update_log_path"], [366, 4, 1, "", "update_optimized_model"], [366, 4, 1, "", "update_precision"], [366, 4, 1, "", "update_pruning_details"], [366, 4, 1, "", "update_sampling_size"], [366, 4, 1, "", "update_status"], [366, 4, 1, "", "update_tuning_details"]], "neural_compressor.ux.components.db_manager.db_models.optimization_type": [[367, 2, 1, "", "OptimizationType"], [367, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType": [[367, 4, 1, "", "add"], [367, 4, 1, "", "get_optimization_type_by_id"], [367, 4, 1, "", "get_optimization_type_by_name"], [367, 4, 1, "", "get_optimization_type_for_precision"], [367, 4, 1, "", "get_optimization_type_id"], [367, 4, 1, "", "list"], [367, 4, 1, "", "list_for_precision"]], "neural_compressor.ux.components.db_manager.db_models.precision": [[368, 2, 1, "", "Precision"], [368, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.precision.Precision": [[368, 4, 1, "", "add"], [368, 4, 1, "", "get_precision_by_id"], [368, 4, 1, "", "get_precision_by_name"], [368, 4, 1, "", "get_precision_id"], [368, 4, 1, "", "list"]], "neural_compressor.ux.components.db_manager.db_models.profiling": [[369, 2, 1, "", "Profiling"]], "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling": [[369, 4, 1, "", "add"], [369, 4, 1, "", "build_info"], [369, 4, 1, "", "clean_status"], [369, 4, 1, "", "delete_profiling"], [369, 4, 1, "", "details"], [369, 4, 1, "", "list"], [369, 4, 1, "", "update_dataset"], [369, 4, 1, "", "update_duration"], [369, 4, 1, "", "update_execution_command"], [369, 4, 1, "", "update_log_path"], [369, 4, 1, "", "update_num_threads"], [369, 4, 1, "", "update_status"]], "neural_compressor.ux.components.db_manager.db_models.profiling_result": [[370, 2, 1, "", "ProfilingResult"]], "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult": [[370, 4, 1, "", "add"], [370, 4, 1, "", "build_info"], [370, 4, 1, "", "bulk_add"], [370, 4, 1, "", "delete_results"], [370, 4, 1, "", "get_results"]], "neural_compressor.ux.components.db_manager.db_models.project": [[371, 2, 1, "", "Project"]], "neural_compressor.ux.components.db_manager.db_models.project.Project": [[371, 4, 1, "", "create_project"], [371, 4, 1, "", "delete_project"], [371, 4, 1, "", "get_model_by_name"], [371, 4, 1, "", "list_projects"], [371, 4, 1, "", "project_details"], [371, 4, 1, "", "update_notes"]], "neural_compressor.ux.components.db_manager.db_models.pruning_details": [[372, 2, 1, "", "PruningDetails"]], "neural_compressor.ux.components.db_manager.db_models.pruning_details.PruningDetails": [[372, 4, 1, "", "add"], [372, 4, 1, "", "build_info"], [372, 4, 1, "", "delete_pruning_details"], [372, 4, 1, "", "update"]], "neural_compressor.ux.components.db_manager.db_models.transform": [[373, 2, 1, "", "Transform"], [373, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.transform.Transform": [[373, 4, 1, "", "list"], [373, 4, 1, "", "list_by_domain"], [373, 4, 1, "", "list_by_framework"], [373, 4, 1, "", "query_to_list"]], "neural_compressor.ux.components.db_manager.db_models.tuning_details": [[374, 2, 1, "", "TuningDetails"]], "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails": [[374, 4, 1, "", "add"], [374, 4, 1, "", "delete_tuning_details"], [374, 4, 1, "", "update"], [374, 4, 1, "", "update_tuning_history"]], "neural_compressor.ux.components.db_manager.db_models.tuning_history": [[375, 2, 1, "", "TuningHistory"]], "neural_compressor.ux.components.db_manager.db_models.tuning_history.TuningHistory": [[375, 4, 1, "", "add"], [375, 4, 1, "", "build_info"]], "neural_compressor.ux.components.db_manager.db_operations": [[382, 2, 1, "", "BenchmarkAPIInterface"], [382, 2, 1, "", "DatasetAPIInterface"], [382, 2, 1, "", "DiagnosisAPIInterface"], [382, 2, 1, "", "DictionariesAPIInterface"], [382, 2, 1, "", "ExamplesAPIInterface"], [382, 2, 1, "", "ModelAPIInterface"], [382, 2, 1, "", "OptimizationAPIInterface"], [382, 2, 1, "", "ProfilingAPIInterface"], [382, 2, 1, "", "ProjectAPIInterface"], [376, 0, 0, "-", "benchmark_api_interface"], [377, 0, 0, "-", "dataset_api_interface"], [378, 0, 0, "-", "db_operations"], [379, 0, 0, "-", "diagnosis_api_interface"], [380, 0, 0, "-", "dictionaries_api_interface"], [381, 0, 0, "-", "examples_api_interface"], [383, 0, 0, "-", "model_api_interface"], [384, 0, 0, "-", "optimization_api_interface"], [385, 0, 0, "-", "profiling_api_interface"], [386, 0, 0, "-", "project_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface": [[382, 4, 1, "", "add_benchmark"], [382, 4, 1, "", "add_result"], [382, 4, 1, "", "clean_status"], [382, 4, 1, "", "delete_benchmark"], [382, 4, 1, "", "edit_benchmark"], [382, 4, 1, "", "get_benchmark_details"], [382, 4, 1, "", "list_benchmarks"], [382, 4, 1, "", "parse_benchmark_data"], [382, 4, 1, "", "parse_benchmark_edit_data"], [382, 4, 1, "", "update_benchmark_accuracy"], [382, 4, 1, "", "update_benchmark_duration"], [382, 4, 1, "", "update_benchmark_performance"], [382, 4, 1, "", "update_benchmark_status"], [382, 4, 1, "", "update_execution_command"], [382, 4, 1, "", "update_paths"]], "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface": [[382, 4, 1, "", "add_dataset"], [382, 4, 1, "", "check_if_custom_metric_or_dataloader"], [382, 4, 1, "", "dataloader_path"], [382, 4, 1, "", "delete_dataset"], [382, 4, 1, "", "generate_custom_template"], [382, 4, 1, "", "generate_template"], [382, 4, 1, "", "get_dataset_details"], [382, 4, 1, "", "get_predefined_dataset"], [382, 4, 1, "", "list_datasets"], [382, 4, 1, "", "parse_dataset_data"], [382, 4, 1, "", "prepare_predefined_dataloader"], [382, 4, 1, "", "prepare_predefined_transform"], [382, 4, 1, "", "set_template_path"]], "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface": [[382, 4, 1, "", "generate_optimization"], [382, 4, 1, "", "get_op_details"], [382, 4, 1, "", "get_op_list"], [382, 4, 1, "", "histogram"], [382, 4, 1, "", "model_wise_params"], [382, 4, 1, "", "parse_model_wise_config"], [382, 4, 1, "", "parse_op_wise_config"], [382, 4, 1, "", "parse_optimization_data"], [382, 4, 1, "", "parse_wise_parameters"], [382, 4, 1, "", "set_op_wise_pattern_precision"]], "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface": [[382, 4, 1, "", "list_dataloaders"], [382, 4, 1, "", "list_dataloaders_by_framework"], [382, 4, 1, "", "list_domain_flavours"], [382, 4, 1, "", "list_domains"], [382, 4, 1, "", "list_metrics"], [382, 4, 1, "", "list_metrics_by_framework"], [382, 4, 1, "", "list_optimization_types"], [382, 4, 1, "", "list_optimization_types_for_precision"], [382, 4, 1, "", "list_precisions"], [382, 4, 1, "", "list_transforms"], [382, 4, 1, "", "list_transforms_by_domain"], [382, 4, 1, "", "list_transforms_by_framework"]], "neural_compressor.ux.components.db_manager.db_operations.ExamplesAPIInterface": [[382, 4, 1, "", "create_project"], [382, 4, 1, "", "get_optimization_data"]], "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface": [[382, 4, 1, "", "add_model"], [382, 4, 1, "", "delete_model"], [382, 4, 1, "", "get_model_details"], [382, 4, 1, "", "list_models"], [382, 4, 1, "", "parse_model_data"]], "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface": [[382, 4, 1, "", "add_optimization"], [382, 4, 1, "", "add_pruning_optimization"], [382, 4, 1, "", "add_quantization_optimization"], [382, 4, 1, "", "add_standard_optimization"], [382, 4, 1, "", "add_tuning_history"], [382, 4, 1, "", "clean_status"], [382, 4, 1, "", "delete_optimization"], [382, 4, 1, "", "edit_optimization"], [382, 4, 1, "", "edit_pruning_details"], [382, 4, 1, "", "edit_tuning_details"], [382, 4, 1, "", "get_optimization_details"], [382, 4, 1, "", "get_pruning_details"], [382, 4, 1, "", "list_optimizations"], [382, 4, 1, "", "load_pruning_details_config"], [382, 4, 1, "", "parse_optimization_data"], [382, 4, 1, "", "parse_optimization_edit_data"], [382, 4, 1, "", "parse_tuning_history"], [382, 4, 1, "", "pin_accuracy_benchmark"], [382, 4, 1, "", "pin_performance_benchmark"], [382, 4, 1, "", "update_execution_command"], [382, 4, 1, "", "update_optimization_duration"], [382, 4, 1, "", "update_optimization_status"], [382, 4, 1, "", "update_optimized_model"], [382, 4, 1, "", "update_paths"]], "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface": [[382, 4, 1, "", "add_profiling"], [382, 4, 1, "", "add_result"], [382, 4, 1, "", "bulk_add_results"], [382, 4, 1, "", "clean_status"], [382, 4, 1, "", "delete_profiling"], [382, 4, 1, "", "edit_profiling"], [382, 4, 1, "", "get_profiling_details"], [382, 4, 1, "", "list_profilings"], [382, 4, 1, "", "parse_profiling_data"], [382, 4, 1, "", "parse_profiling_edit_data"], [382, 4, 1, "", "parse_profiling_result_data"], [382, 4, 1, "", "update_execution_command"], [382, 4, 1, "", "update_log_path"], [382, 4, 1, "", "update_profiling_duration"], [382, 4, 1, "", "update_profiling_status"]], "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface": [[382, 4, 1, "", "add_dummy_dataset"], [382, 4, 1, "", "add_model"], [382, 4, 1, "", "create_project"], [382, 4, 1, "", "delete_project"], [382, 4, 1, "", "get_project_details"], [382, 4, 1, "", "list_projects"], [382, 4, 1, "", "update_project_notes"]], "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface": [[376, 2, 1, "", "BenchmarkAPIInterface"], [376, 1, 1, "", "before_delete_benchmark_entry"]], "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface": [[376, 4, 1, "", "add_benchmark"], [376, 4, 1, "", "add_result"], [376, 4, 1, "", "clean_status"], [376, 4, 1, "", "delete_benchmark"], [376, 4, 1, "", "edit_benchmark"], [376, 4, 1, "", "get_benchmark_details"], [376, 4, 1, "", "list_benchmarks"], [376, 4, 1, "", "parse_benchmark_data"], [376, 4, 1, "", "parse_benchmark_edit_data"], [376, 4, 1, "", "update_benchmark_accuracy"], [376, 4, 1, "", "update_benchmark_duration"], [376, 4, 1, "", "update_benchmark_performance"], [376, 4, 1, "", "update_benchmark_status"], [376, 4, 1, "", "update_execution_command"], [376, 4, 1, "", "update_paths"]], "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface": [[377, 2, 1, "", "DatasetAPIInterface"], [377, 1, 1, "", "initialize_associations"], [377, 1, 1, "", "initialize_precision_optimization_types_association"], [377, 1, 1, "", "search_in_list_of_dict"], [377, 1, 1, "", "search_in_list_of_dict_for_unique_value"], [377, 1, 1, "", "set_database_version"]], "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface": [[377, 4, 1, "", "add_dataset"], [377, 4, 1, "", "check_if_custom_metric_or_dataloader"], [377, 4, 1, "", "dataloader_path"], [377, 4, 1, "", "delete_dataset"], [377, 4, 1, "", "generate_custom_template"], [377, 4, 1, "", "generate_template"], [377, 4, 1, "", "get_dataset_details"], [377, 4, 1, "", "get_predefined_dataset"], [377, 4, 1, "", "list_datasets"], [377, 4, 1, "", "parse_dataset_data"], [377, 4, 1, "", "prepare_predefined_dataloader"], [377, 4, 1, "", "prepare_predefined_transform"], [377, 4, 1, "", "set_template_path"]], "neural_compressor.ux.components.db_manager.db_operations.db_operations": [[378, 1, 1, "", "initialize_associations"], [378, 1, 1, "", "initialize_precision_optimization_types_association"], [378, 1, 1, "", "search_in_list_of_dict"], [378, 1, 1, "", "search_in_list_of_dict_for_unique_value"], [378, 1, 1, "", "set_database_version"]], "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface": [[379, 2, 1, "", "DiagnosisAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface": [[379, 4, 1, "", "generate_optimization"], [379, 4, 1, "", "get_op_details"], [379, 4, 1, "", "get_op_list"], [379, 4, 1, "", "histogram"], [379, 4, 1, "", "model_wise_params"], [379, 4, 1, "", "parse_model_wise_config"], [379, 4, 1, "", "parse_op_wise_config"], [379, 4, 1, "", "parse_optimization_data"], [379, 4, 1, "", "parse_wise_parameters"], [379, 4, 1, "", "set_op_wise_pattern_precision"]], "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface": [[380, 2, 1, "", "DictionariesAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface": [[380, 4, 1, "", "list_dataloaders"], [380, 4, 1, "", "list_dataloaders_by_framework"], [380, 4, 1, "", "list_domain_flavours"], [380, 4, 1, "", "list_domains"], [380, 4, 1, "", "list_metrics"], [380, 4, 1, "", "list_metrics_by_framework"], [380, 4, 1, "", "list_optimization_types"], [380, 4, 1, "", "list_optimization_types_for_precision"], [380, 4, 1, "", "list_precisions"], [380, 4, 1, "", "list_transforms"], [380, 4, 1, "", "list_transforms_by_domain"], [380, 4, 1, "", "list_transforms_by_framework"]], "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface": [[381, 2, 1, "", "ExamplesAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.ExamplesAPIInterface": [[381, 4, 1, "", "create_project"], [381, 4, 1, "", "get_optimization_data"]], "neural_compressor.ux.components.db_manager.db_operations.model_api_interface": [[383, 2, 1, "", "ModelAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface": [[383, 4, 1, "", "add_model"], [383, 4, 1, "", "delete_model"], [383, 4, 1, "", "get_model_details"], [383, 4, 1, "", "list_models"], [383, 4, 1, "", "parse_model_data"]], "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface": [[384, 2, 1, "", "OptimizationAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface": [[384, 4, 1, "", "add_optimization"], [384, 4, 1, "", "add_pruning_optimization"], [384, 4, 1, "", "add_quantization_optimization"], [384, 4, 1, "", "add_standard_optimization"], [384, 4, 1, "", "add_tuning_history"], [384, 4, 1, "", "clean_status"], [384, 4, 1, "", "delete_optimization"], [384, 4, 1, "", "edit_optimization"], [384, 4, 1, "", "edit_pruning_details"], [384, 4, 1, "", "edit_tuning_details"], [384, 4, 1, "", "get_optimization_details"], [384, 4, 1, "", "get_pruning_details"], [384, 4, 1, "", "list_optimizations"], [384, 4, 1, "", "load_pruning_details_config"], [384, 4, 1, "", "parse_optimization_data"], [384, 4, 1, "", "parse_optimization_edit_data"], [384, 4, 1, "", "parse_tuning_history"], [384, 4, 1, "", "pin_accuracy_benchmark"], [384, 4, 1, "", "pin_performance_benchmark"], [384, 4, 1, "", "update_execution_command"], [384, 4, 1, "", "update_optimization_duration"], [384, 4, 1, "", "update_optimization_status"], [384, 4, 1, "", "update_optimized_model"], [384, 4, 1, "", "update_paths"]], "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface": [[385, 2, 1, "", "ProfilingAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface": [[385, 4, 1, "", "add_profiling"], [385, 4, 1, "", "add_result"], [385, 4, 1, "", "bulk_add_results"], [385, 4, 1, "", "clean_status"], [385, 4, 1, "", "delete_profiling"], [385, 4, 1, "", "edit_profiling"], [385, 4, 1, "", "get_profiling_details"], [385, 4, 1, "", "list_profilings"], [385, 4, 1, "", "parse_profiling_data"], [385, 4, 1, "", "parse_profiling_edit_data"], [385, 4, 1, "", "parse_profiling_result_data"], [385, 4, 1, "", "update_execution_command"], [385, 4, 1, "", "update_log_path"], [385, 4, 1, "", "update_profiling_duration"], [385, 4, 1, "", "update_profiling_status"]], "neural_compressor.ux.components.db_manager.db_operations.project_api_interface": [[386, 2, 1, "", "ProjectAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface": [[386, 4, 1, "", "add_dummy_dataset"], [386, 4, 1, "", "add_model"], [386, 4, 1, "", "create_project"], [386, 4, 1, "", "delete_project"], [386, 4, 1, "", "get_project_details"], [386, 4, 1, "", "list_projects"], [386, 4, 1, "", "update_project_notes"]], "neural_compressor.ux.components.db_manager.params_interfaces": [[388, 2, 1, "", "BenchmarkAddParamsInterface"], [388, 2, 1, "", "BenchmarkEditParamsInterface"], [388, 2, 1, "", "DatasetAddParamsInterface"], [388, 2, 1, "", "DiagnosisOptimizationParamsInterface"], [388, 2, 1, "", "ModelAddParamsInterface"], [388, 2, 1, "", "OptimizationAddParamsInterface"], [388, 2, 1, "", "OptimizationEditParamsInterface"], [388, 2, 1, "", "ProfilingAddParamsInterface"], [388, 2, 1, "", "ProfilingEditParamsInterface"], [388, 2, 1, "", "ProfilingResultAddParamsInterface"], [388, 2, 1, "", "TuningHistoryInterface"], [388, 2, 1, "", "TuningHistoryItemInterface"]], "neural_compressor.ux.components.db_manager.params_interfaces.ModelAddParamsInterface": [[388, 4, 1, "", "parse_nodes"]], "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryInterface": [[388, 4, 1, "", "serialize"]], "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryItemInterface": [[388, 4, 1, "", "serialize"]], "neural_compressor.ux.components.db_manager.utils": [[389, 1, 1, "", "get_framework_dataloaders_config"], [389, 1, 1, "", "get_framework_transforms_config"], [389, 1, 1, "", "update_dataloaders_params"]], "neural_compressor.ux.components.diagnosis": [[390, 0, 0, "-", "diagnosis"], [391, 0, 0, "-", "factory"], [393, 0, 0, "-", "onnx_diagnosis"], [395, 0, 0, "-", "op_details"], [396, 0, 0, "-", "op_entry"], [397, 0, 0, "-", "tensorflow_diagnosis"]], "neural_compressor.ux.components.diagnosis.diagnosis": [[390, 2, 1, "", "Diagnosis"]], "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis": [[390, 4, 1, "", "calculate_mse"], [390, 4, 1, "", "get_histogram_data"], [390, 4, 1, "", "get_op_details"], [390, 4, 1, "", "get_op_list"], [390, 4, 1, "", "get_tensors_info"], [390, 4, 1, "", "load_quantization_config"], [390, 4, 1, "", "mse_metric_gap"]], "neural_compressor.ux.components.diagnosis.factory": [[391, 2, 1, "", "DiagnosisFactory"]], "neural_compressor.ux.components.diagnosis.factory.DiagnosisFactory": [[391, 4, 1, "", "get_diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis": [[394, 0, 0, "-", "onnxrt_diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis": [[394, 2, 1, "", "OnnxRtDiagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis.OnnxRtDiagnosis": [[394, 3, 1, "", "model"]], "neural_compressor.ux.components.diagnosis.op_details": [[395, 2, 1, "", "OpActivation"], [395, 2, 1, "", "OpDetails"], [395, 2, 1, "", "OpPattern"], [395, 2, 1, "", "OpWeights"]], "neural_compressor.ux.components.diagnosis.op_details.OpDetails": [[395, 4, 1, "", "serialize"]], "neural_compressor.ux.components.diagnosis.op_entry": [[396, 2, 1, "", "OpEntry"]], "neural_compressor.ux.components.diagnosis.op_entry.OpEntry": [[396, 4, 1, "", "serialize"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis": [[398, 0, 0, "-", "tensorflow_diagnosis"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis": [[398, 2, 1, "", "TensorflowDiagnosis"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis.TensorflowDiagnosis": [[398, 3, 1, "", "model"]], "neural_compressor.ux.components.file_browser": [[399, 0, 0, "-", "file_browser"]], "neural_compressor.ux.components.file_browser.file_browser": [[399, 1, 1, "", "create_dir_entry"], [399, 1, 1, "", "create_entry"], [399, 1, 1, "", "create_file_entry"], [399, 1, 1, "", "filter_requested_entries"], [399, 1, 1, "", "get_directory_entries"], [399, 1, 1, "", "get_filter_value"], [399, 1, 1, "", "get_non_hidden_directory_entries"], [399, 1, 1, "", "get_requested_path"], [399, 1, 1, "", "get_setting_value"], [399, 1, 1, "", "is_dataset_or_directory_entry"], [399, 1, 1, "", "is_directory_entry"], [399, 1, 1, "", "is_model_or_directory_entry"], [399, 1, 1, "", "should_show_files"], [399, 1, 1, "", "should_show_only_model_files"], [399, 1, 1, "", "sort_entries"]], "neural_compressor.ux.components.graph": [[401, 0, 0, "-", "attribute"], [402, 0, 0, "-", "collapser"], [403, 0, 0, "-", "edge"], [404, 0, 0, "-", "graph"], [405, 0, 0, "-", "graph_reader"], [407, 0, 0, "-", "node"], [408, 0, 0, "-", "reader"]], "neural_compressor.ux.components.graph.attribute": [[401, 2, 1, "", "Attribute"]], "neural_compressor.ux.components.graph.collapser": [[402, 2, 1, "", "Collapser"]], "neural_compressor.ux.components.graph.collapser.Collapser": [[402, 4, 1, "", "collapse"]], "neural_compressor.ux.components.graph.edge": [[403, 2, 1, "", "Edge"]], "neural_compressor.ux.components.graph.edge.Edge": [[403, 3, 1, "", "source"], [403, 3, 1, "", "target"]], "neural_compressor.ux.components.graph.graph": [[404, 2, 1, "", "Graph"]], "neural_compressor.ux.components.graph.graph.Graph": [[404, 4, 1, "", "add_edge"], [404, 4, 1, "", "add_node"], [404, 3, 1, "", "edges"], [404, 4, 1, "", "get_node"], [404, 4, 1, "", "get_target_nodes"], [404, 4, 1, "", "highlight_pattern"], [404, 3, 1, "", "nodes"]], "neural_compressor.ux.components.graph.graph_reader": [[405, 2, 1, "", "GraphReader"]], "neural_compressor.ux.components.graph.graph_reader.GraphReader": [[405, 4, 1, "", "find_pattern_in_graph"], [405, 4, 1, "", "read"]], "neural_compressor.ux.components.graph.node": [[407, 2, 1, "", "GroupNode"], [407, 2, 1, "", "Node"]], "neural_compressor.ux.components.graph.reader": [[409, 0, 0, "-", "onnxrt_reader"], [410, 0, 0, "-", "tensorflow_reader"]], "neural_compressor.ux.components.graph.reader.onnxrt_reader": [[409, 2, 1, "", "OnnxrtReader"]], "neural_compressor.ux.components.graph.reader.onnxrt_reader.OnnxrtReader": [[409, 4, 1, "", "read"]], "neural_compressor.ux.components.graph.reader.tensorflow_reader": [[410, 2, 1, "", "TensorflowReader"]], "neural_compressor.ux.components.graph.reader.tensorflow_reader.TensorflowReader": [[410, 4, 1, "", "read"]], "neural_compressor.ux.components.jobs_management": [[413, 0, 0, "-", "jobs_control_queue"], [414, 0, 0, "-", "jobs_manager"], [415, 0, 0, "-", "request"]], "neural_compressor.ux.components.manage_workspace": [[416, 1, 1, "", "get_default_path"]], "neural_compressor.ux.components.model": [[417, 0, 0, "-", "domain"], [419, 0, 0, "-", "model"], [420, 0, 0, "-", "model_type_getter"], [421, 0, 0, "-", "onnxrt"], [423, 0, 0, "-", "pytorch"], [425, 0, 0, "-", "repository"], [426, 0, 0, "-", "shape"], [428, 0, 0, "-", "tensorflow"]], "neural_compressor.ux.components.model.domain": [[417, 2, 1, "", "Domain"]], "neural_compressor.ux.components.model.model": [[419, 2, 1, "", "Model"]], "neural_compressor.ux.components.model.model.Model": [[419, 3, 1, "", "domain"], [419, 4, 1, "", "ensure_supported_path"], [419, 4, 1, "", "get_framework_name"], [419, 4, 1, "", "get_input_nodes"], [419, 4, 1, "", "get_model_graph"], [419, 4, 1, "", "get_output_nodes"], [419, 4, 1, "", "get_tensors_info"], [419, 4, 1, "", "guard_requirements_installed"], [419, 3, 1, "", "input_shape"], [419, 3, 1, "", "shape_elements_order"], [419, 3, 1, "", "supports_graph"], [419, 4, 1, "", "supports_path"], [419, 3, 1, "", "supports_profiling"], [419, 3, 1, "", "supports_pruning"]], "neural_compressor.ux.components.model.model_type_getter": [[420, 1, 1, "", "get_model_type"]], "neural_compressor.ux.components.model.onnxrt": [[422, 0, 0, "-", "model"]], "neural_compressor.ux.components.model.onnxrt.model": [[422, 2, 1, "", "OnnxrtModel"], [422, 1, 1, "", "remove_number_of_samples_from_shape"]], "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel": [[422, 3, 1, "", "domain"], [422, 3, 1, "", "filtered_input_nodes"], [422, 4, 1, "", "get_framework_name"], [422, 4, 1, "", "get_model_graph"], [422, 4, 1, "", "guard_requirements_installed"], [422, 3, 1, "", "input_shape"], [422, 3, 1, "", "nc_model_instance"], [422, 3, 1, "", "shape_elements_order"], [422, 4, 1, "", "supports_path"]], "neural_compressor.ux.components.model.pytorch": [[424, 0, 0, "-", "model"]], "neural_compressor.ux.components.model.pytorch.model": [[424, 2, 1, "", "PyTorchScriptModel"]], "neural_compressor.ux.components.model.pytorch.model.PyTorchScriptModel": [[424, 4, 1, "", "get_framework_name"], [424, 4, 1, "", "guard_requirements_installed"], [424, 4, 1, "", "supports_path"]], "neural_compressor.ux.components.model.repository": [[425, 2, 1, "", "ModelRepository"]], "neural_compressor.ux.components.model.repository.ModelRepository": [[425, 4, 1, "", "get_framework_from_path"], [425, 4, 1, "", "get_frameworks"], [425, 4, 1, "", "get_model"], [425, 4, 1, "", "get_supported_frameworks"], [425, 4, 1, "", "is_model_path"]], "neural_compressor.ux.components.model.shape": [[426, 2, 1, "", "Shape"]], "neural_compressor.ux.components.model.shape.Shape": [[426, 4, 1, "", "serialize"]], "neural_compressor.ux.components.model.tensorflow": [[427, 0, 0, "-", "frozen_pb"], [429, 0, 0, "-", "keras"], [430, 0, 0, "-", "meta_graph"], [431, 0, 0, "-", "model"], [432, 0, 0, "-", "saved_model"], [433, 0, 0, "-", "utils"]], "neural_compressor.ux.components.model.tensorflow.frozen_pb": [[427, 2, 1, "", "FrozenPbModel"]], "neural_compressor.ux.components.model.tensorflow.frozen_pb.FrozenPbModel": [[427, 4, 1, "", "supports_path"], [427, 3, 1, "", "supports_profiling"]], "neural_compressor.ux.components.model.tensorflow.keras": [[429, 2, 1, "", "KerasModel"]], "neural_compressor.ux.components.model.tensorflow.keras.KerasModel": [[429, 4, 1, "", "get_input_nodes"], [429, 4, 1, "", "get_output_nodes"], [429, 4, 1, "", "supports_path"]], "neural_compressor.ux.components.model.tensorflow.meta_graph": [[430, 2, 1, "", "MetaGraphModel"]], "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel": [[430, 4, 1, "", "get_input_nodes"], [430, 4, 1, "", "get_model_graph"], [430, 4, 1, "", "get_output_nodes"], [430, 4, 1, "", "supports_path"]], "neural_compressor.ux.components.model.tensorflow.model": [[431, 2, 1, "", "TensorflowModel"]], "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel": [[431, 4, 1, "", "get_framework_name"], [431, 4, 1, "", "get_input_nodes"], [431, 4, 1, "", "get_model_graph"], [431, 4, 1, "", "get_output_nodes"], [431, 4, 1, "", "guard_requirements_installed"], [431, 3, 1, "", "input_shape"], [431, 3, 1, "", "nc_model_instance"], [431, 3, 1, "", "shape_elements_order"], [431, 3, 1, "", "supports_pruning"]], "neural_compressor.ux.components.model.tensorflow.saved_model": [[432, 2, 1, "", "SavedModelModel"]], "neural_compressor.ux.components.model.tensorflow.saved_model.SavedModelModel": [[432, 4, 1, "", "supports_path"]], "neural_compressor.ux.components.model.tensorflow.utils": [[433, 1, 1, "", "get_input_shape"]], "neural_compressor.ux.components.model_zoo": [[434, 0, 0, "-", "download_config"], [435, 0, 0, "-", "download_model"], [436, 0, 0, "-", "downloader"], [438, 0, 0, "-", "list_models"]], "neural_compressor.ux.components.model_zoo.download_config": [[434, 1, 1, "", "download_config"]], "neural_compressor.ux.components.model_zoo.download_model": [[435, 1, 1, "", "download_model"]], "neural_compressor.ux.components.model_zoo.downloader": [[436, 2, 1, "", "Downloader"]], "neural_compressor.ux.components.model_zoo.downloader.Downloader": [[436, 4, 1, "", "download"], [436, 4, 1, "", "download_config"], [436, 4, 1, "", "download_file"], [436, 4, 1, "", "download_model"], [436, 4, 1, "", "download_yaml_config"], [436, 4, 1, "", "get_yaml_url"], [436, 4, 1, "", "unpack_archive"]], "neural_compressor.ux.components.model_zoo.list_models": [[438, 1, 1, "", "check_version"], [438, 1, 1, "", "get_available_models"], [438, 1, 1, "", "get_framework_module_name"], [438, 1, 1, "", "get_installed_frameworks"], [438, 1, 1, "", "list_models"], [438, 1, 1, "", "validate_model_list"]], "neural_compressor.ux.components.names_mapper": [[440, 0, 0, "-", "names_mapper"]], "neural_compressor.ux.components.names_mapper.names_mapper": [[440, 2, 1, "", "MappingDirection"], [440, 2, 1, "", "NamesMapper"]], "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper": [[440, 3, 1, "", "domain_flavour_mappings"], [440, 3, 1, "", "domain_mappings"], [440, 3, 1, "", "framework_mappings"], [440, 4, 1, "", "map_name"], [440, 3, 1, "", "precision_mappings"]], "neural_compressor.ux.components.optimization": [[446, 2, 1, "", "Optimizations"], [441, 0, 0, "-", "execute_optimization"], [442, 0, 0, "-", "factory"], [444, 0, 0, "-", "graph_optimizer"], [447, 0, 0, "-", "mixed_precision"], [450, 0, 0, "-", "neural_coder_optimization"], [452, 0, 0, "-", "optimization"], [453, 0, 0, "-", "pruning"], [456, 0, 0, "-", "tune"], [459, 0, 0, "-", "tuning_history"]], "neural_compressor.ux.components.optimization.execute_optimization": [[441, 1, 1, "", "check_if_collect_tuning_history"], [441, 1, 1, "", "execute_optimization"], [441, 1, 1, "", "execute_optimization_pytorch_script"], [441, 1, 1, "", "execute_optimization_regular"], [441, 1, 1, "", "parse_logs"], [441, 1, 1, "", "parse_model_data_to_bench_names"]], "neural_compressor.ux.components.optimization.factory": [[442, 2, 1, "", "OptimizationFactory"]], "neural_compressor.ux.components.optimization.factory.OptimizationFactory": [[442, 4, 1, "", "get_optimization"]], "neural_compressor.ux.components.optimization.graph_optimizer": [[443, 0, 0, "-", "graph_optimization"], [445, 0, 0, "-", "optimize_model"]], "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization": [[443, 2, 1, "", "GraphOptimization"]], "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization": [[443, 3, 1, "", "configuration_data"], [443, 4, 1, "", "execute"], [443, 4, 1, "", "generate_config"], [443, 3, 1, "", "optimization_script"], [443, 3, 1, "", "parameters"]], "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model": [[445, 1, 1, "", "optimize_graph"], [445, 1, 1, "", "optimize_graph_config"], [445, 1, 1, "", "parse_args"], [445, 1, 1, "", "set_eager_execution"]], "neural_compressor.ux.components.optimization.mixed_precision": [[448, 0, 0, "-", "mixed_precision"], [449, 0, 0, "-", "optimize_model"]], "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision": [[448, 2, 1, "", "MixedPrecision"]], "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision": [[448, 3, 1, "", "configuration_data"], [448, 4, 1, "", "execute"], [448, 4, 1, "", "generate_config"], [448, 3, 1, "", "optimization_script"], [448, 3, 1, "", "parameters"]], "neural_compressor.ux.components.optimization.mixed_precision.optimize_model": [[449, 1, 1, "", "optimize_graph"], [449, 1, 1, "", "optimize_graph_config"], [449, 1, 1, "", "parse_args"], [449, 1, 1, "", "set_eager_execution"]], "neural_compressor.ux.components.optimization.neural_coder_optimization": [[451, 0, 0, "-", "optimize_model"]], "neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model": [[451, 1, 1, "", "optimize_pt_script"]], "neural_compressor.ux.components.optimization.optimization": [[452, 2, 1, "", "DataloaderInterface"], [452, 2, 1, "", "Optimization"], [452, 2, 1, "", "OptimizationInterface"]], "neural_compressor.ux.components.optimization.optimization.Optimization": [[452, 3, 1, "", "command"], [452, 3, 1, "", "config_filename"], [452, 3, 1, "", "configuration_data"], [452, 4, 1, "", "execute"], [452, 4, 1, "", "generate_config"], [452, 3, 1, "", "optimization_script"], [452, 3, 1, "", "output_model_dir"], [452, 3, 1, "", "output_model_name"], [452, 3, 1, "", "parameters"], [452, 3, 1, "", "workdir"]], "neural_compressor.ux.components.optimization.pruning": [[454, 0, 0, "-", "optimize_model"], [455, 0, 0, "-", "pruning"]], "neural_compressor.ux.components.optimization.pruning.optimize_model": [[454, 1, 1, "", "optimize_model"], [454, 1, 1, "", "parse_args"]], "neural_compressor.ux.components.optimization.pruning.pruning": [[455, 2, 1, "", "Pruning"]], "neural_compressor.ux.components.optimization.pruning.pruning.Pruning": [[455, 3, 1, "", "configuration_data"], [455, 4, 1, "", "execute"], [455, 4, 1, "", "generate_config"], [455, 3, 1, "", "optimization_script"], [455, 3, 1, "", "parameters"]], "neural_compressor.ux.components.optimization.tune": [[457, 0, 0, "-", "tune_model"], [458, 0, 0, "-", "tuning"]], "neural_compressor.ux.components.optimization.tune.tune_model": [[457, 1, 1, "", "parse_args"], [457, 1, 1, "", "set_eager_execution"], [457, 1, 1, "", "tune_model"]], "neural_compressor.ux.components.optimization.tune.tuning": [[458, 2, 1, "", "AccuracyCriterion"], [458, 2, 1, "", "Tuning"], [458, 2, 1, "", "TuningDetails"]], "neural_compressor.ux.components.optimization.tune.tuning.Tuning": [[458, 3, 1, "", "configuration_data"], [458, 4, 1, "", "execute"], [458, 4, 1, "", "generate_config"], [458, 3, 1, "", "optimization_script"], [458, 3, 1, "", "parameters"]], "neural_compressor.ux.components.optimization.tuning_history": [[459, 2, 1, "", "TuningHistory"], [459, 2, 1, "", "Watcher"], [459, 1, 1, "", "tuning_history"], [459, 1, 1, "", "tuning_history_path"]], "neural_compressor.ux.components.optimization.tuning_history.TuningHistory": [[459, 4, 1, "", "send_history_snapshot"]], "neural_compressor.ux.components.optimization.tuning_history.Watcher": [[459, 4, 1, "", "history_file_modification_time"], [459, 4, 1, "", "stop"], [459, 4, 1, "", "was_history_file_changed"]], "neural_compressor.ux.components.profiling": [[460, 0, 0, "-", "execute_profiling"], [461, 0, 0, "-", "factory"], [463, 0, 0, "-", "profile_model"], [464, 0, 0, "-", "profiler"], [465, 0, 0, "-", "profiling"], [467, 0, 0, "-", "tensorflow_profiler"]], "neural_compressor.ux.components.profiling.execute_profiling": [[460, 1, 1, "", "execute_profiling"], [460, 1, 1, "", "execute_real_profiling"]], "neural_compressor.ux.components.profiling.factory": [[461, 2, 1, "", "ProfilerFactory"]], "neural_compressor.ux.components.profiling.factory.ProfilerFactory": [[461, 4, 1, "", "get_profiler"]], "neural_compressor.ux.components.profiling.profile_model": [[463, 1, 1, "", "load_profiling_details"], [463, 1, 1, "", "parse_args"]], "neural_compressor.ux.components.profiling.profiler": [[464, 2, 1, "", "Profiler"]], "neural_compressor.ux.components.profiling.profiler.Profiler": [[464, 4, 1, "", "profile_model"]], "neural_compressor.ux.components.profiling.profiling": [[465, 2, 1, "", "DataloaderInterface"], [465, 2, 1, "", "Profiling"]], "neural_compressor.ux.components.profiling.profiling.Profiling": [[465, 3, 1, "", "config_filename"], [465, 3, 1, "", "config_path"], [465, 4, 1, "", "execute"], [465, 4, 1, "", "generate_config"], [465, 3, 1, "", "profiling_data"], [465, 3, 1, "", "workdir"]], "neural_compressor.ux.components.profiling.tensorflow_profiler": [[466, 0, 0, "-", "factory"], [468, 0, 0, "-", "profiler"], [469, 0, 0, "-", "utils"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.factory": [[466, 2, 1, "", "ProfilerFactory"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.factory.ProfilerFactory": [[466, 4, 1, "", "get_profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler": [[468, 2, 1, "", "Profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler": [[468, 4, 1, "", "build_dataloader"], [468, 4, 1, "", "convert_nodes_to_list"], [468, 4, 1, "", "create_tf_config"], [468, 4, 1, "", "get_node_by_name"], [468, 4, 1, "", "initialize_graph"], [468, 4, 1, "", "profile_model"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.utils": [[469, 1, 1, "", "delete_assign"]], "neural_compressor.ux.inc_bench": [[470, 1, 1, "", "main"], [470, 1, 1, "", "prepare_environment"]], "neural_compressor.ux.utils": [[472, 0, 0, "-", "consts"], [473, 0, 0, "-", "environment"], [474, 0, 0, "-", "exceptions"], [475, 0, 0, "-", "executor"], [476, 0, 0, "-", "expiring_dict"], [477, 0, 0, "-", "github_info"], [478, 0, 0, "-", "hw_info"], [480, 0, 0, "-", "json_serializer"], [481, 0, 0, "-", "logger"], [482, 0, 0, "-", "parser"], [483, 0, 0, "-", "proc"], [484, 0, 0, "-", "processes"], [485, 0, 0, "-", "singleton"], [486, 0, 0, "-", "status_updates"], [487, 0, 0, "-", "templates"], [490, 0, 0, "-", "utils"], [495, 0, 0, "-", "workload"], [501, 0, 0, "-", "yaml_utils"]], "neural_compressor.ux.utils.consts": [[472, 2, 1, "", "DomainFlavours"], [472, 2, 1, "", "Domains"], [472, 2, 1, "", "ExecutionStatus"], [472, 2, 1, "", "Frameworks"], [472, 2, 1, "", "OptimizationTypes"], [472, 2, 1, "", "Precisions"], [472, 2, 1, "", "Strategies"]], "neural_compressor.ux.utils.environment": [[473, 2, 1, "", "Environment"]], "neural_compressor.ux.utils.environment.Environment": [[473, 4, 1, "", "clean_workloads_wip_status"], [473, 4, 1, "", "ensure_workdir_exists_and_writeable"], [473, 4, 1, "", "migrate_database"]], "neural_compressor.ux.utils.exceptions": [[474, 7, 1, "", "AccessDeniedException"], [474, 7, 1, "", "ClientErrorException"], [474, 7, 1, "", "InternalException"], [474, 7, 1, "", "NotFoundException"]], "neural_compressor.ux.utils.executor": [[475, 2, 1, "", "Executor"]], "neural_compressor.ux.utils.executor.Executor": [[475, 3, 1, "", "additional_log_names"], [475, 4, 1, "", "call"], [475, 4, 1, "", "call_one"], [475, 4, 1, "", "is_multi_commands"], [475, 3, 1, "", "log_name"], [475, 3, 1, "", "process_duration"], [475, 4, 1, "", "refresh_workdir"], [475, 3, 1, "", "request_id"], [475, 3, 1, "", "workdir"]], "neural_compressor.ux.utils.expiring_dict": [[476, 2, 1, "", "ExpiringDict"], [476, 2, 1, "", "ExpiringDictItem"]], "neural_compressor.ux.utils.expiring_dict.ExpiringDictItem": [[476, 4, 1, "", "is_expired"]], "neural_compressor.ux.utils.github_info": [[477, 2, 1, "", "GithubInfo"]], "neural_compressor.ux.utils.github_info.GithubInfo": [[477, 4, 1, "", "tag"]], "neural_compressor.ux.utils.hw_info": [[478, 2, 1, "", "HWInfo"], [478, 1, 1, "", "get_bios_version"], [478, 1, 1, "", "get_distribution"], [478, 1, 1, "", "get_framework_dependency_info"], [478, 1, 1, "", "get_framework_info"], [478, 1, 1, "", "get_kernel_version"], [478, 1, 1, "", "get_number_of_sockets"], [478, 1, 1, "", "is_turbo_boost_enabled"]], "neural_compressor.ux.utils.hw_info.HWInfo": [[478, 4, 1, "", "initialize"], [478, 4, 1, "", "serialize"]], "neural_compressor.ux.utils.json_serializer": [[480, 2, 1, "", "JsonSerializer"]], "neural_compressor.ux.utils.json_serializer.JsonSerializer": [[480, 4, 1, "", "serialize"], [480, 4, 1, "", "serialize_item"]], "neural_compressor.ux.utils.logger": [[481, 1, 1, "", "change_log_level"]], "neural_compressor.ux.utils.parser": [[482, 2, 1, "", "AccuracyParser"], [482, 2, 1, "", "BenchmarkParserFactory"], [482, 2, 1, "", "OptimizationParser"], [482, 2, 1, "", "Parser"], [482, 2, 1, "", "PerformanceParser"], [482, 2, 1, "", "ProfilingParser"]], "neural_compressor.ux.utils.parser.AccuracyParser": [[482, 3, 1, "", "patterns"], [482, 4, 1, "", "process"]], "neural_compressor.ux.utils.parser.BenchmarkParserFactory": [[482, 4, 1, "", "get_parser"]], "neural_compressor.ux.utils.parser.OptimizationParser": [[482, 3, 1, "", "patterns"], [482, 4, 1, "", "process"]], "neural_compressor.ux.utils.parser.Parser": [[482, 3, 1, "", "patterns"], [482, 4, 1, "", "process"]], "neural_compressor.ux.utils.parser.PerformanceParser": [[482, 3, 1, "", "patterns"], [482, 4, 1, "", "process"], [482, 4, 1, "", "summarize_partial"], [482, 4, 1, "", "summarize_value"], [482, 4, 1, "", "update_partial"]], "neural_compressor.ux.utils.parser.ProfilingParser": [[482, 3, 1, "", "patterns"], [482, 4, 1, "", "process"], [482, 4, 1, "", "unify_time"]], "neural_compressor.ux.utils.proc": [[483, 2, 1, "", "Proc"]], "neural_compressor.ux.utils.proc.Proc": [[483, 3, 1, "", "info"], [483, 3, 1, "", "info_path"], [483, 3, 1, "", "is_ok"], [483, 3, 1, "", "output"], [483, 3, 1, "", "output_path"], [483, 4, 1, "", "remove_logs"], [483, 4, 1, "", "run"], [483, 3, 1, "", "tail"]], "neural_compressor.ux.utils.processes": [[484, 2, 1, "", "NCProcesses"]], "neural_compressor.ux.utils.processes.NCProcesses": [[484, 3, 1, "", "is_ok"], [484, 4, 1, "", "remove_successful_logs"], [484, 4, 1, "", "return_code_all"]], "neural_compressor.ux.utils.singleton": [[485, 2, 1, "", "Singleton"]], "neural_compressor.ux.utils.status_updates": [[486, 1, 1, "", "get_status_update_function"]], "neural_compressor.ux.utils.templates": [[488, 0, 0, "-", "metric"], [489, 0, 0, "-", "workdir"]], "neural_compressor.ux.utils.templates.metric": [[488, 2, 1, "", "Metric"]], "neural_compressor.ux.utils.templates.metric.Metric": [[488, 3, 1, "", "acc_input_model"], [488, 3, 1, "", "acc_optimized_model"], [488, 3, 1, "", "accuracy"], [488, 4, 1, "", "calculate_throughput"], [488, 4, 1, "", "insert_data"], [488, 3, 1, "", "latency"], [488, 3, 1, "", "optimization_time"], [488, 3, 1, "", "path_optimized_model"], [488, 3, 1, "", "profiling_data"], [488, 3, 1, "", "size_input_model"], [488, 3, 1, "", "size_optimized_model"], [488, 3, 1, "", "throughput"]], "neural_compressor.ux.utils.templates.workdir": [[489, 2, 1, "", "Workdir"]], "neural_compressor.ux.utils.templates.workdir.Workdir": [[489, 4, 1, "", "clean_cache_files"], [489, 4, 1, "", "clean_logs"], [489, 4, 1, "", "clean_status"], [489, 4, 1, "", "ensure_working_path_exists"]], "neural_compressor.ux.utils.utils": [[490, 1, 1, "", "are_archive_filenames_valid"], [490, 1, 1, "", "check_module"], [490, 1, 1, "", "deprecated"], [490, 1, 1, "", "determine_ip"], [490, 1, 1, "", "export_to_csv"], [490, 1, 1, "", "filter_transforms"], [490, 1, 1, "", "get_dataset_path"], [490, 1, 1, "", "get_default_pruning_config_path"], [490, 1, 1, "", "get_file_extension"], [490, 1, 1, "", "get_framework_from_path"], [490, 1, 1, "", "get_height_width_from_size"], [490, 1, 1, "", "get_metrics_dict"], [490, 1, 1, "", "get_model_zoo_config_path"], [490, 1, 1, "", "get_model_zoo_model_path"], [490, 1, 1, "", "get_module_version"], [490, 1, 1, "", "get_predefined_config_path"], [490, 1, 1, "", "get_shape_from_transforms"], [490, 1, 1, "", "get_size"], [490, 1, 1, "", "is_dataset_file"], [490, 1, 1, "", "is_development_env"], [490, 1, 1, "", "is_hidden"], [490, 1, 1, "", "load_dataloader_config"], [490, 1, 1, "", "load_help_nc_params"], [490, 1, 1, "", "load_metrics_config"], [490, 1, 1, "", "load_model_config"], [490, 1, 1, "", "load_model_wise_params"], [490, 1, 1, "", "load_precisions_config"], [490, 1, 1, "", "load_pruning_details_config"], [490, 1, 1, "", "load_transforms_config"], [490, 1, 1, "", "load_transforms_filter_config"], [490, 1, 1, "", "normalize_domain"], [490, 1, 1, "", "normalize_framework"], [490, 1, 1, "", "normalize_string"], [490, 1, 1, "", "parse_bool_value"], [490, 1, 1, "", "parse_to_float_list"], [490, 1, 1, "", "parse_to_string_list"], [490, 1, 1, "", "parse_version"], [490, 1, 1, "", "release_tag"], [490, 1, 1, "", "replace_with_values"], [490, 1, 1, "", "safe_extract_archive"], [490, 1, 1, "", "verify_file_path"]], "neural_compressor.ux.utils.workload": [[491, 0, 0, "-", "config"], [492, 0, 0, "-", "dataloader"], [493, 0, 0, "-", "evaluation"], [494, 0, 0, "-", "graph_optimization"], [496, 0, 0, "-", "mixed_precision"], [497, 0, 0, "-", "model"], [498, 0, 0, "-", "pruning"], [499, 0, 0, "-", "quantization"], [500, 0, 0, "-", "tuning"]], "neural_compressor.ux.utils.workload.config": [[491, 2, 1, "", "Config"]], "neural_compressor.ux.utils.workload.config.Config": [[491, 4, 1, "", "dump"], [491, 4, 1, "", "get_performance_configs"], [491, 4, 1, "", "get_performance_cores_per_instance"], [491, 4, 1, "", "get_performance_num_of_instance"], [491, 4, 1, "", "initialize"], [491, 4, 1, "", "load"], [491, 4, 1, "", "process_transform"], [491, 4, 1, "", "remove_accuracy_metric"], [491, 4, 1, "", "remove_dataloader"], [491, 4, 1, "", "set_accuracy_and_performance_batch_sizes"], [491, 4, 1, "", "set_accuracy_goal"], [491, 4, 1, "", "set_accuracy_metric"], [491, 4, 1, "", "set_evaluation_dataloader"], [491, 4, 1, "", "set_evaluation_dataset_path"], [491, 4, 1, "", "set_inputs"], [491, 4, 1, "", "set_optimization_precision"], [491, 4, 1, "", "set_outputs"], [491, 4, 1, "", "set_performance_cores_per_instance"], [491, 4, 1, "", "set_performance_iterations"], [491, 4, 1, "", "set_performance_num_of_instance"], [491, 4, 1, "", "set_performance_warmup"], [491, 4, 1, "", "set_quantization_approach"], [491, 4, 1, "", "set_quantization_batch_size"], [491, 4, 1, "", "set_quantization_dataloader"], [491, 4, 1, "", "set_quantization_dataset_path"], [491, 4, 1, "", "set_quantization_sampling_size"], [491, 4, 1, "", "set_transform"], [491, 4, 1, "", "set_workspace"]], "neural_compressor.ux.utils.workload.dataloader": [[492, 2, 1, "", "Dataloader"], [492, 2, 1, "", "Dataset"], [492, 2, 1, "", "Filter"], [492, 2, 1, "", "LabelBalance"], [492, 2, 1, "", "Transform"]], "neural_compressor.ux.utils.workload.dataloader.Dataloader": [[492, 4, 1, "", "serialize"], [492, 4, 1, "", "set_dataset"], [492, 4, 1, "", "set_transforms_from_list"]], "neural_compressor.ux.utils.workload.dataloader.Dataset": [[492, 4, 1, "", "is_dummy"], [492, 4, 1, "", "serialize"]], "neural_compressor.ux.utils.workload.dataloader.Transform": [[492, 4, 1, "", "serialize"]], "neural_compressor.ux.utils.workload.evaluation": [[493, 2, 1, "", "Accuracy"], [493, 2, 1, "", "Configs"], [493, 2, 1, "", "Evaluation"], [493, 2, 1, "", "Metric"], [493, 2, 1, "", "Performance"], [493, 2, 1, "", "Postprocess"], [493, 2, 1, "", "PostprocessSchema"]], "neural_compressor.ux.utils.workload.evaluation.Evaluation": [[493, 4, 1, "", "set_accuracy_postprocess_transforms"]], "neural_compressor.ux.utils.workload.evaluation.Metric": [[493, 3, 1, "", "name"], [493, 3, 1, "", "param"], [493, 4, 1, "", "serialize"]], "neural_compressor.ux.utils.workload.evaluation.PostprocessSchema": [[493, 4, 1, "", "get_label_shift_value"]], "neural_compressor.ux.utils.workload.graph_optimization": [[494, 2, 1, "", "GraphOptimization"]], "neural_compressor.ux.utils.workload.graph_optimization.GraphOptimization": [[494, 4, 1, "", "set_precisions"]], "neural_compressor.ux.utils.workload.mixed_precision": [[496, 2, 1, "", "MixedPrecision"]], "neural_compressor.ux.utils.workload.mixed_precision.MixedPrecision": [[496, 4, 1, "", "set_precisions"]], "neural_compressor.ux.utils.workload.model": [[497, 2, 1, "", "Model"]], "neural_compressor.ux.utils.workload.model.Model": [[497, 3, 1, "", "inputs"], [497, 3, 1, "", "outputs"], [497, 4, 1, "", "serialize"]], "neural_compressor.ux.utils.workload.pruning": [[498, 2, 1, "", "AdamOptimizer"], [498, 2, 1, "", "AdamWOptimizer"], [498, 2, 1, "", "Approach"], [498, 2, 1, "", "Criterion"], [498, 2, 1, "", "CrossEntropyLossCriterion"], [498, 2, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [498, 2, 1, "", "KnowledgeDistillationLossCriterion"], [498, 2, 1, "", "Optimizer"], [498, 2, 1, "", "Pruning"], [498, 2, 1, "", "SGDOptimizer"], [498, 2, 1, "", "SelfKnowledgeDistillationLoss"], [498, 2, 1, "", "SparseCategoricalCrossentropyCriterion"], [498, 2, 1, "", "Train"], [498, 2, 1, "", "WeightCompressionApproach"], [498, 1, 1, "", "parse_dict_value_to_float"], [498, 1, 1, "", "parse_dict_value_to_int"]], "neural_compressor.ux.utils.workload.pruning.Train": [[498, 4, 1, "", "serialize"], [498, 4, 1, "", "set_postprocess_transforms"]], "neural_compressor.ux.utils.workload.pruning.WeightCompressionApproach": [[498, 4, 1, "", "initialize_pruners"], [498, 4, 1, "", "serialize"], [498, 4, 1, "", "serialize_pruner"]], "neural_compressor.ux.utils.workload.quantization": [[499, 2, 1, "", "Advance"], [499, 2, 1, "", "Calibration"], [499, 2, 1, "", "Quantization"], [499, 2, 1, "", "WiseConfig"], [499, 2, 1, "", "WiseConfigDetails"]], "neural_compressor.ux.utils.workload.tuning": [[500, 2, 1, "", "AccCriterion"], [500, 2, 1, "", "Diagnosis"], [500, 2, 1, "", "ExitPolicy"], [500, 2, 1, "", "MultiObjectives"], [500, 2, 1, "", "Strategy"], [500, 2, 1, "", "Tuning"], [500, 2, 1, "", "Workspace"]], "neural_compressor.ux.utils.workload.tuning.MultiObjectives": [[500, 3, 1, "", "objective"], [500, 3, 1, "", "weight"]], "neural_compressor.ux.utils.workload.tuning.Tuning": [[500, 4, 1, "", "set_max_trials"], [500, 4, 1, "", "set_performance_only"], [500, 4, 1, "", "set_random_seed"], [500, 4, 1, "", "set_timeout"], [500, 4, 1, "", "set_workspace"]], "neural_compressor.ux.utils.yaml_utils": [[501, 1, 1, "", "float_representer"], [501, 1, 1, "", "pruner_representer"]], "neural_compressor.ux.web": [[502, 0, 0, "-", "communication"], [503, 0, 0, "-", "configuration"], [504, 0, 0, "-", "exceptions"], [506, 0, 0, "-", "router"], [507, 0, 0, "-", "server"], [510, 0, 0, "-", "service"]], "neural_compressor.ux.web.communication": [[502, 2, 1, "", "Message"], [502, 2, 1, "", "MessageQueue"], [502, 2, 1, "", "Request"], [502, 2, 1, "", "Response"], [502, 1, 1, "", "create_simple_response"]], "neural_compressor.ux.web.communication.Message": [[502, 3, 1, "", "data"], [502, 3, 1, "", "status"], [502, 3, 1, "", "subject"]], "neural_compressor.ux.web.communication.MessageQueue": [[502, 4, 1, "", "get"], [502, 4, 1, "", "post_error"], [502, 4, 1, "", "post_failure"], [502, 4, 1, "", "post_success"]], "neural_compressor.ux.web.configuration": [[503, 2, 1, "", "Configuration"]], "neural_compressor.ux.web.configuration.Configuration": [[503, 4, 1, "", "determine_gui_port"], [503, 4, 1, "", "determine_log_level"], [503, 4, 1, "", "determine_server_port"], [503, 4, 1, "", "determine_url_prefix"], [503, 4, 1, "", "determine_values_from_environment"], [503, 4, 1, "", "dump_token_to_file"], [503, 4, 1, "", "get_command_line_args"], [503, 4, 1, "", "get_url"], [503, 3, 1, "", "global_config_directory"], [503, 4, 1, "", "is_port_taken"], [503, 4, 1, "", "set_up"]], "neural_compressor.ux.web.exceptions": [[504, 7, 1, "", "ServiceNotFoundException"]], "neural_compressor.ux.web.router": [[506, 2, 1, "", "DeferredRoutingDefinition"], [506, 2, 1, "", "DeferredSubprocessRoutingDefinition"], [506, 2, 1, "", "RealtimeRoutingDefinition"], [506, 2, 1, "", "Router"], [506, 2, 1, "", "RoutingDefinition"], [506, 1, 1, "", "find_pattern_in_graph"], [506, 1, 1, "", "get_model_graph"], [506, 1, 1, "", "get_system_info"]], "neural_compressor.ux.web.router.Router": [[506, 4, 1, "", "handle"]], "neural_compressor.ux.web.server": [[507, 1, 1, "", "allow_api_call"], [507, 1, 1, "", "block_iframe"], [507, 1, 1, "", "block_sniffing"], [507, 1, 1, "", "build_parameters"], [507, 1, 1, "", "disable_cache"], [507, 1, 1, "", "get_tls_args"], [507, 1, 1, "", "handle_api_call"], [507, 1, 1, "", "page_not_found"], [507, 1, 1, "", "require_api_token"], [507, 1, 1, "", "root"], [507, 1, 1, "", "run_server"], [507, 1, 1, "", "web_socket_publisher"]], "neural_compressor.ux.web.service": [[508, 0, 0, "-", "benchmark"], [509, 0, 0, "-", "history_snapshot_parser"], [511, 0, 0, "-", "model"], [512, 0, 0, "-", "optimization"], [513, 0, 0, "-", "profiling"], [514, 0, 0, "-", "request_data_processor"], [515, 0, 0, "-", "response_generator"], [516, 0, 0, "-", "workload"]], "neural_compressor.ux.web.service.benchmark": [[508, 2, 1, "", "BenchmarkService"]], "neural_compressor.ux.web.service.history_snapshot_parser": [[509, 2, 1, "", "HistorySnapshotParser"]], "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser": [[509, 4, 1, "", "extract_accuracy"], [509, 4, 1, "", "extract_performance"], [509, 4, 1, "", "parse_history_item"], [509, 4, 1, "", "parse_history_snapshot"]], "neural_compressor.ux.web.service.model": [[511, 2, 1, "", "ModelService"]], "neural_compressor.ux.web.service.model.ModelService": [[511, 4, 1, "", "get_model"]], "neural_compressor.ux.web.service.optimization": [[512, 2, 1, "", "OptimizationService"]], "neural_compressor.ux.web.service.profiling": [[513, 2, 1, "", "ProfilingService"]], "neural_compressor.ux.web.service.profiling.ProfilingService": [[513, 4, 1, "", "generate_csv"]], "neural_compressor.ux.web.service.request_data_processor": [[514, 2, 1, "", "RequestDataProcessor"]], "neural_compressor.ux.web.service.request_data_processor.RequestDataProcessor": [[514, 4, 1, "", "get_string_value"]], "neural_compressor.ux.web.service.response_generator": [[515, 2, 1, "", "ResponseGenerator"]], "neural_compressor.ux.web.service.response_generator.ResponseGenerator": [[515, 4, 1, "", "add_refresh"], [515, 4, 1, "", "from_exception"], [515, 4, 1, "", "get_status_code_for_exception"], [515, 4, 1, "", "serve_from_filesystem"]], "neural_compressor.ux.web.service.workload": [[516, 2, 1, "", "WorkloadService"]], "neural_compressor.ux.web.service.workload.WorkloadService": [[516, 4, 1, "", "get_code_template"], [516, 4, 1, "", "get_config"], [516, 4, 1, "", "get_output"]]}, "objtypes": {"0": "py:module", "1": "py:function", "2": "py:class", "3": "py:property", "4": "py:method", "5": "py:attribute", "6": "py:data", "7": "py:exception"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "function", "Python function"], "2": ["py", "class", "Python class"], "3": ["py", "property", "Python property"], "4": ["py", "method", "Python method"], "5": ["py", "attribute", "Python attribute"], "6": ["py", "data", "Python data"], "7": ["py", "exception", "Python exception"]}, "titleterms": {"644ec953a7dc_pruning_support": 0, "6ece06672ed3_v1_14": 1, "modul": [1, 5, 6, 8, 13, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 159, 161, 162, 163, 164, 165, 166, 167, 170, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 197, 198, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 214, 215, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 237, 239, 240, 241, 243, 244, 245, 246, 247, 249, 250, 252, 253, 254, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 268, 269, 270, 271, 274, 275, 276, 279, 280, 281, 282, 283, 284, 285, 287, 288, 290, 291, 292, 294, 295, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 321, 322, 323, 324, 325, 326, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 383, 384, 385, 386, 388, 389, 390, 391, 394, 395, 396, 398, 399, 401, 402, 403, 404, 405, 407, 409, 410, 416, 417, 419, 420, 422, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 438, 440, 441, 442, 443, 445, 448, 449, 451, 452, 454, 455, 457, 458, 459, 460, 461, 463, 464, 465, 466, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 502, 503, 504, 506, 507, 508, 509, 511, 512, 513, 514, 515, 516, 544], "content": [1, 5, 6, 7, 8, 13, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 161, 162, 163, 164, 165, 166, 167, 170, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 394, 395, 396, 398, 399, 401, 402, 403, 404, 405, 407, 409, 410, 416, 417, 419, 420, 422, 424, 425, 426, 427, 429, 430, 431, 432, 433, 434, 435, 436, 438, 440, 441, 442, 443, 445, 446, 448, 449, 451, 452, 454, 455, 457, 458, 459, 460, 461, 463, 464, 465, 466, 468, 469, 470, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500, 501, 502, 503, 504, 506, 507, 508, 509, 511, 512, 513, 514, 515, 516, 524, 544, 557, 567], "function": [1, 5, 6, 15, 34, 40, 41, 63, 64, 66, 100, 101, 112, 114, 142, 143, 144, 147, 148, 149, 151, 154, 156, 158, 159, 161, 162, 163, 164, 165, 167, 170, 177, 185, 187, 191, 194, 195, 196, 199, 201, 202, 203, 204, 206, 208, 209, 211, 213, 214, 217, 225, 227, 231, 234, 235, 236, 238, 239, 240, 242, 243, 244, 245, 246, 249, 250, 252, 253, 254, 255, 256, 263, 270, 274, 279, 280, 281, 283, 286, 287, 288, 290, 291, 292, 293, 294, 295, 299, 303, 305, 306, 310, 318, 322, 324, 325, 328, 329, 331, 332, 334, 335, 337, 338, 348, 349, 350, 352, 357, 359, 360, 362, 364, 367, 368, 373, 376, 377, 378, 389, 399, 416, 420, 422, 433, 434, 435, 438, 441, 445, 449, 451, 454, 457, 459, 460, 463, 469, 470, 478, 481, 486, 490, 498, 501, 502, 506, 507, 574], "6f0d0f71d92e_v1_13": 2, "9e89549a08c8_v1_11": 3, "block_mask": 4, "env": 5, "neural_compressor": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517], "adaptor": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 525, 526], "class": [6, 8, 13, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 111, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 143, 144, 146, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 161, 162, 163, 164, 166, 167, 170, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 215, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 246, 247, 248, 249, 252, 255, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 281, 282, 283, 284, 285, 286, 287, 290, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 329, 330, 331, 332, 333, 335, 336, 339, 340, 341, 342, 344, 345, 346, 347, 348, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 390, 391, 394, 395, 396, 398, 401, 402, 403, 404, 405, 407, 409, 410, 417, 419, 422, 424, 425, 426, 427, 429, 430, 431, 432, 436, 440, 442, 443, 446, 448, 452, 455, 458, 459, 461, 464, 465, 466, 468, 472, 473, 475, 476, 477, 478, 480, 482, 483, 484, 485, 488, 489, 491, 492, 493, 494, 496, 497, 498, 499, 500, 502, 503, 506, 508, 509, 511, 512, 513, 514, 515, 516, 525, 544, 557], "subpackag": [7, 18, 83, 107, 108, 110, 158, 171, 196, 236, 248, 272, 286, 314, 387, 392, 406, 411, 418, 446, 462, 471, 479, 505], "submodul": [7, 14, 18, 30, 47, 72, 83, 91, 97, 102, 107, 108, 110, 113, 126, 139, 145, 151, 157, 158, 160, 172, 179, 191, 195, 199, 206, 213, 219, 231, 235, 238, 242, 248, 255, 261, 267, 273, 277, 286, 293, 297, 314, 320, 329, 339, 343, 351, 363, 382, 387, 392, 393, 397, 400, 406, 408, 411, 412, 418, 421, 423, 428, 437, 439, 444, 446, 447, 450, 453, 456, 462, 467, 471, 479, 487, 495, 505, 510], "packag": [7, 30, 151, 158, 179, 191, 195, 196, 199, 206, 213, 219, 231, 235, 236, 238, 242, 248, 255, 261, 267, 272, 273, 286, 293, 297, 314, 320, 329, 339, 382, 387, 446, 557, 598, 600, 602, 603], "kera": [8, 429], "keras_util": [9, 10, 11, 12], "conv2d": 9, "dens": 10, "quantiz": [12, 39, 284, 306, 499, 521, 524, 540, 559, 573, 579, 582, 585, 594, 605, 612, 613, 614, 622], "mxnet": [13, 570, 584, 613, 618, 622], "mxnet_util": [14, 15], "util": [15, 40, 142, 148, 165, 246, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 389, 433, 469, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 528, 532, 566], "onnxrt": [16, 421, 422, 570, 584, 618], "ox_util": [17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40], "calibr": 17, "oper": [19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38], "activ": 19, "argmax": 20, "attent": 21, "binary_op": 22, "concat": 23, "conv": 24, "direct_q8": 25, "embed_layernorm": 26, "gather": 27, "gavgpool": 28, "gemm": 29, "lstm": 31, "matmul": 32, "maxpool": 33, "op": 34, "pad": 35, "pool": 36, "resiz": 37, "split": 38, "pytorch": [41, 334, 423, 424, 570, 574, 584, 586, 613, 614, 617, 618, 622], "queri": [42, 525], "tensorflow": [43, 427, 428, 429, 430, 431, 432, 433, 570, 574, 584, 586, 613, 614, 617, 618, 622], "tf_util": [44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142], "graph_convert": 44, "graph_converter_without_calib": 45, "graph_rewrit": [46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105], "bf16": [46, 47, 529], "bf16_convert": [46, 143], "gener": [48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81], "convert_add_to_biasadd": 48, "convert_layout": 49, "convert_leakyrelu": 50, "convert_nan_to_random": 51, "convert_placeholder_to_const": 52, "dequantize_cast_optim": 53, "dilated_contract": 54, "dummy_biasadd": 55, "expanddims_optim": 56, "fetch_weight_from_reshap": 57, "fold_batch_norm": 58, "fold_const": 59, "fuse_biasadd_add": 60, "fuse_column_wise_mul": 61, "fuse_conv_with_math": 62, "fuse_decomposed_bn": 63, "fuse_decomposed_in": 64, "fuse_gelu": 65, "fuse_layer_norm": 66, "fuse_pad_with_conv": 67, "fuse_pad_with_fp32_conv": 68, "fuse_reshape_transpos": 69, "graph_cse_optim": 70, "grappler_pass": 71, "insert_print_nod": 73, "move_squeeze_after_relu": 74, "pre_optim": 75, "remove_training_nod": 76, "rename_batch_norm": 77, "split_shared_input": 78, "strip_equivalent_nod": 79, "strip_unused_nod": 80, "switch_optim": 81, "graph_bas": 82, "int8": [84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 576, 622], "freeze_fake_qu": 84, "freeze_valu": 85, "freeze_value_without_calib": 86, "fuse_conv_redundant_dequant": 87, "fuse_conv_requant": 88, "fuse_matmul_redundant_dequant": 89, "fuse_matmul_requant": 90, "meta_op_optim": 92, "post_hostconst_convert": 93, "post_quantized_op_cs": 94, "rnn_convert": 95, "scale_propag": 96, "onnx": [97, 98, 99, 100, 101, 527, 582, 586, 613, 622], "onnx_graph": 98, "onnx_nod": 99, "onnx_schema": 100, "tf2onnx_util": 101, "qdq": [102, 103, 104, 105, 119, 120, 121, 122, 123, 124, 125, 126, 127, 622], "insert_qdq_pattern": 103, "merge_duplicated_qdq": 104, "share_qdq_y_pattern": 105, "graph_util": 106, "quantize_graph": [108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134], "qat": [109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 622], "fake_quant": 109, "quantize_config": 111, "quantize_help": 112, "quantize_lay": [113, 114, 115, 116, 117], "optimize_lay": 114, "quantize_layer_add": 115, "quantize_layer_bas": 116, "quantize_layer_bn": 117, "quantize_wrapp": 118, "fuse_qdq_bn": 119, "fuse_qdq_concatv2": 120, "fuse_qdq_conv": 121, "fuse_qdq_deconv": 122, "fuse_qdq_in": 123, "fuse_qdq_matmul": 124, "fuse_qdq_pool": 125, "optimize_qdq": 127, "quantize_graph_bas": 128, "quantize_graph_bn": 129, "quantize_graph_concatv2": 130, "quantize_graph_conv": 131, "quantize_graph_for_intel_cpu": 132, "quantize_graph_matmul": 133, "quantize_graph_pool": 134, "quantize_graph_common": 135, "tf2onnx_convert": 136, "transform_graph": [137, 138, 139, 140, 141], "bias_correct": 137, "graph_transform_bas": 138, "insert_log": 140, "rerange_quantized_concat": 141, "torch_util": [143, 144, 145, 146, 147, 148, 211], "hawq_metr": 144, "smooth_quant": [146, 152], "symbolic_trac": 147, "algorithm": [149, 150, 151, 152, 153, 533, 619], "fast_bias_correct": 150, "weight_correct": 153, "benchmark": [154, 203, 336, 337, 338, 339, 355, 508, 536, 543, 567, 568, 585, 612], "compress": [155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 213, 214], "callback": 155, "distil": [156, 157, 241, 554, 572, 573, 585, 612, 622], "criterion": [156, 204, 545], "pruner": [159, 160, 161, 162, 163, 164, 165, 270, 281], "criteria": [159, 610, 619], "pattern": [161, 273, 274, 275, 279, 610], "reg": 163, "schedul": [164, 283, 285, 560, 610], "conf": [166, 167, 168, 169], "config": [166, 170, 491, 537, 569, 570, 607], "dotdict": 167, "pythonic_config": 169, "contrib": [171, 172, 173, 174, 561], "strategi": [172, 173, 174, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 564, 565, 616, 619], "sigopt": [173, 616, 619], "tpe": [174, 619], "data": [175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 546, 575], "dataload": [175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 205, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 357, 492, 547, 569, 570], "base_dataload": [175, 215], "default_dataload": [177, 217], "fetcher": [178, 218], "attribut": [179, 187, 196, 227, 236, 248, 272, 297, 329, 401, 519], "mxnet_dataload": [180, 220], "onnxrt_dataload": [181, 221], "pytorch_dataload": [182, 222], "sampler": [183, 223], "tensorflow_dataload": [184, 224], "dataset": [185, 186, 187, 188, 189, 190, 191, 192, 225, 226, 227, 228, 229, 230, 231, 232, 358, 548, 567, 570, 580], "bert_dataset": [185, 225], "coco_dataset": [186, 226], "dummy_dataset": [188, 228], "dummy_dataset_v2": [189, 229], "imagenet_dataset": [190, 230], "style_transfer_dataset": [192, 232], "filter": [193, 194, 195, 233, 234, 235], "coco_filt": [193, 233], "transform": [197, 198, 199, 200, 201, 202, 237, 238, 239, 240, 373, 549, 580, 618], "coco_transform": 197, "imagenet_transform": [198, 237], "postprocess": [200, 210], "token": [201, 239], "experiment": [203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285], "common": [204, 205, 206, 207, 208, 209, 210, 211, 521, 542, 577], "metric": [207, 249, 250, 251, 252, 253, 254, 255, 256, 287, 288, 289, 290, 291, 292, 293, 294, 364, 488, 530, 550, 580, 584], "model": [208, 296, 297, 298, 299, 300, 301, 302, 303, 304, 365, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 497, 511, 551, 562, 567, 576, 579, 582, 585, 587, 594, 610, 622], "optim": [209, 366, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 512, 552, 567, 595, 605, 608], "compon": [212, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 553], "prune": [214, 271, 282, 453, 454, 455, 498, 558, 567, 585, 610, 612, 622], "export": [242, 243, 244, 245, 246, 576], "qlinear2qdq": 243, "tf2onnx": 244, "torch2onnx": 245, "graph_optim": [247, 443, 444, 445, 494], "bleu": [249, 287, 544], "bleu_util": [250, 288], "coco_label_map": [251, 289], "coco_tool": [252, 290], "evaluate_squad": [253, 291], "f1": [254, 292], "mixed_precis": [257, 447, 448, 449, 496], "model_convers": 258, "na": [259, 260, 261, 262, 263, 264, 522, 557, 567, 612], "basic_na": 259, "dyna": 260, "nas_util": 263, "search_algorithm": 264, "pruner_legaci": [265, 266, 267, 268, 269, 270], "gradient_sensit": 265, "group_lasso": 266, "magnitud": 268, "pattern_lock": 269, "pruning_recip": [272, 273, 274, 275], "tile_pattern": 275, "pruning_v2": 276, "pytorch_prun": [277, 278, 279, 280, 281, 282, 283], "logger": [278, 332, 481], "prune_util": 280, "mix_precis": 295, "base_model": 296, "keras_model": 298, "mxnet_model": 300, "nets_factori": 301, "onnx_model": 302, "tensorflow_model": 303, "torch_model": 304, "object": [305, 539, 607], "auto": [307, 599, 605, 614], "auto_mixed_precis": 308, "basic": [309, 522, 619], "bayesian": [310, 619], "conserv": [311, 619], "exhaust": [312, 619], "hawq_v2": [313, 619], "mse": [315, 619], "mse_v2": [316, 619], "random": [317, 619], "constant": [319, 327], "tuning_sampl": 321, "tuning_spac": 322, "tuning_struct": 323, "train": [325, 521, 541, 574, 585, 613], "collect_layer_histogram": 326, "create_obj_from_config": 328, "kl_diverg": 330, "load_huggingfac": 331, "option": [333, 567, 574, 593], "ux": [336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516], "benchmark_model": 337, "execute_benchmark": 338, "config_gener": [340, 341, 342, 343, 344, 345, 346, 347], "benchmark_config_gener": 340, "graph_optimization_config_gener": 342, "mixed_precision_config_gener": 344, "profiling_config_gener": 345, "pruning_config_gener": 346, "quantization_config_gener": 347, "configuration_wizard": [348, 349, 350, 351, 352, 353], "configuration_pars": 348, "get_boundary_nod": 349, "get_configur": 350, "params_feed": 352, "pruning_config_pars": 353, "db_manag": [354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389], "db_model": [355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375], "benchmark_result": 356, "domain": [359, 417], "domain_flavour": 360, "exampl": [361, 521, 522, 525, 568, 569, 570, 572, 573, 574, 575, 576, 585, 586, 587, 590, 594, 607, 608, 610, 613, 617, 622], "framework": [362, 569, 570, 576, 578, 587, 612], "optimization_typ": 367, "precis": [368, 538, 585, 586, 614], "profil": [369, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 513, 567], "profiling_result": 370, "project": [371, 567], "pruning_detail": 372, "tuning_detail": 374, "tuning_histori": [375, 459], "db_oper": [376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386], "benchmark_api_interfac": 376, "dataset_api_interfac": 377, "diagnosis_api_interfac": 379, "dictionaries_api_interfac": 380, "examples_api_interfac": 381, "model_api_interfac": 383, "optimization_api_interfac": 384, "profiling_api_interfac": 385, "project_api_interfac": 386, "params_interfac": 388, "diagnosi": [390, 391, 392, 393, 394, 395, 396, 397, 398, 567], "factori": [391, 442, 461, 466], "onnx_diagnosi": [393, 394], "onnxrt_diagnosi": 394, "op_detail": 395, "op_entri": 396, "tensorflow_diagnosi": [397, 398], "file_brows": [399, 400], "graph": [401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 567], "collaps": 402, "edg": 403, "graph_read": 405, "node": 407, "reader": [408, 409, 410], "onnxrt_read": 409, "tensorflow_read": 410, "jobs_manag": [412, 413, 414, 415], "jobs_control_queu": 413, "request": [415, 520], "manage_workspac": 416, "model_type_gett": 420, "repositori": 425, "shape": 426, "frozen_pb": 427, "meta_graph": 430, "saved_model": 432, "model_zoo": [434, 435, 436, 437, 438], "download_config": 434, "download_model": 435, "download": 436, "list_model": 438, "names_mapp": [439, 440], "execute_optim": 441, "optimize_model": [445, 449, 451, 454], "neural_coder_optim": [450, 451], "tune": [456, 457, 458, 500, 613, 619], "tune_model": 457, "execute_profil": 460, "profile_model": 463, "tensorflow_profil": [466, 467, 468, 469], "inc_bench": 470, "const": 472, "environ": [473, 582, 591], "except": [474, 504], "executor": 475, "expiring_dict": 476, "github_info": 477, "hw_info": 478, "json_seri": 480, "parser": 482, "proc": 483, "process": [484, 619], "singleton": 485, "status_upd": 486, "templat": [487, 488, 489, 520], "workdir": 489, "workload": [491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 516], "evalu": [493, 574], "yaml_util": 501, "web": [502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516], "commun": 502, "configur": [503, 574, 578, 609, 612, 616, 621], "router": 506, "server": 507, "servic": [508, 509, 510, 511, 512, 513, 514, 515, 516], "history_snapshot_pars": 509, "request_data_processor": 514, "response_gener": 515, "version": 517, "intel": [518, 524, 567, 581, 582, 585, 591, 599, 605, 622, 623], "neural": [518, 521, 522, 524, 557, 567, 581, 582, 585, 588, 592, 594, 599, 605, 610, 616, 623], "compressor": [518, 521, 524, 567, 581, 582, 585, 599, 605, 616, 623], "document": [518, 524, 620, 623], "section": [518, 623], "contributor": [519, 520], "coven": [519, 520], "code": [519, 520, 522, 585, 606], "conduct": [519, 520], "our": 519, "pledg": 519, "standard": 519, "respons": 519, "scope": [519, 610], "enforc": 519, "contribut": [520, 598, 602], "guidelin": 520, "pull": 520, "checklist": 520, "support": [520, 521, 522, 525, 568, 569, 570, 572, 573, 574, 576, 578, 581, 582, 584, 586, 587, 589, 590, 594, 595, 607, 608, 610, 612, 613, 617, 618, 621], "fx": 521, "introduct": [521, 522, 525, 567, 568, 569, 570, 572, 573, 574, 576, 578, 581, 584, 586, 587, 605, 607, 608, 610, 612, 613, 616, 617, 618, 619, 621], "mode": [521, 622], "matrix": [521, 522, 525, 568, 569, 570, 572, 573, 574, 576, 578, 581, 584, 586, 587, 590, 607, 608, 610, 612, 613, 617, 621], "get": [521, 522, 524, 525, 568, 569, 570, 572, 573, 574, 578, 579, 584, 586, 588, 599, 606, 607, 608, 610, 612, 613, 617, 621], "start": [521, 522, 524, 525, 567, 568, 569, 570, 572, 573, 574, 578, 579, 584, 586, 588, 589, 593, 599, 607, 608, 610, 612, 613, 617, 621], "post": [521, 585, 613], "static": [521, 613], "dynam": [521, 522, 613], "awar": [521, 585, 613], "note": [521, 615], "detail": [521, 567], "problem": 521, "architectur": [522, 557, 571, 581, 582], "search": [522, 557, 605], "api": [522, 524, 525, 534, 535, 553, 568, 569, 570, 572, 573, 574, 579, 580, 584, 586, 588, 592, 606, 607, 608, 610, 612], "usag": [522, 594, 605, 617, 619], "1": [522, 567, 574, 577, 580, 585, 605, 622], "python": [522, 524, 563, 579, 584, 588, 592, 593, 600, 603, 612], "yaml": [522, 569, 570, 574, 578, 621], "2": [522, 553, 567, 574, 577, 580, 585, 605, 622], "onli": 522, "advanc": 522, "custom": [522, 567, 584, 619], "secur": [523, 567, 574], "polici": [523, 619], "report": 523, "vulner": 523, "instal": [524, 567, 582, 589, 591, 598, 599, 602], "from": [524, 567, 582, 585], "pypi": [524, 594], "select": [524, 599], "public": [524, 611], "event": [524, 611], "addit": 524, "research": 524, "collabor": 524, "work": [525, 613], "flow": [525, 613], "background": [525, 605], "ad": 525, "new": [525, 567, 600, 603, 619], "backend": 525, "capabl": 525, "implement": 525, "onnxrtadaptor": 525, "runtim": [527, 582, 586, 613, 622], "torch": [528, 622], "convert": 529, "hawq": 530, "symbol": 531, "trace": 531, "user": [535, 569, 570, 574, 580, 612, 620, 621], "face": [535, 580], "mix": [538, 585, 586, 614], "basedataload": 547, "experiement": 553, "deprec": 553, "0": [553, 622], "mixedprecis": 555, "modelconvers": 556, "bench": [567, 592], "tabl": 567, "binari": [567, 582], "sourc": [567, 582], "home": 567, "screen": 567, "creat": [567, 569], "predefin": 567, "displai": 567, "list": [567, 575, 618], "remov": 567, "develop": [567, 598, 602], "tab": 567, "wizard": 567, "edit": 567, "entri": 567, "inform": [567, 583], "demo": 567, "system": [567, 582, 609], "file": [569, 570, 578, 621], "specif": [569, 570], "design": [571, 619], "workflow": 571, "knowledg": [572, 622], "intermedi": 572, "layer": 572, "self": 572, "distribut": [574, 594, 619], "infer": 574, "featur": [574, 578, 581, 594, 595, 599, 612, 613, 617, 621], "pure": 574, "defin": 574, "horovodrun": 574, "execut": 574, "releas": [575, 600, 603, 615], "fp32": 576, "appendix": 576, "frequent": 577, "ask": 577, "question": 577, "build": [577, 584], "issu": [577, 615], "3": [577, 589, 605, 611], "4": [577, 596, 605, 611], "quick": [579, 593], "sampl": 579, "jupyterlab": [579, 599], "extens": [579, 588, 598, 599, 602, 605, 606, 622], "gui": 579, "valid": [579, 582, 622], "incompat": [580, 615], "chang": [580, 604, 606, 615], "between": 580, "v1": 580, "built": [580, 582, 584], "infrastructur": 581, "linux": 582, "prerequisit": 582, "ai": 582, "kit": 582, "window": 582, "requir": [582, 598, 602], "hardwar": [582, 622], "cpu": [582, 591, 622], "base": 582, "64": 582, "compat": 582, "processor": 582, "gpu": 582, "": [582, 606], "xe": 582, "multipl": [582, 607, 622], "vendor": 582, "through": [582, 622], "softwar": 582, "legal": 583, "licens": 583, "citat": 583, "trademark": 583, "singl": [584, 607], "multi": 584, "migrat": 585, "x": 585, "orchestr": [585, 608], "coder": [588, 592, 594, 605], "what": [588, 606], "do": 588, "we": 588, "offer": 588, "jupyt": [588, 589, 600, 603], "lab": [588, 589], "launcher": [588, 593], "contact": 588, "aw": 589, "amazon": 589, "sagemak": 589, "For": 589, "studio": 589, "notebook": 589, "instanc": 589, "guid": [589, 620], "bigdl": 590, "nano": 590, "platform": [591, 616], "best": [591, 599], "perform": [591, 616], "set": [591, 605], "mkl": 591, "openmp": 591, "jemalloc": 591, "numa": 591, "control": 591, "variabl": 591, "frequenc": 591, "govern": 591, "enabl": [592, 599, 605], "superbench": 592, "argument": 593, "v0": 596, "highlight": 596, "other": 596, "changelog": [597, 601], "neural_compressor_ext_lab": [598, 600], "uninstal": [598, 602], "Or": 599, "let": 599, "u": 599, "help": 599, "you": 599, "pre": 599, "requisit": 599, "make": [600, 603, 606], "manual": [600, 603], "npm": [600, 603], "autom": [600, 603], "publish": [600, 603], "conda": [600, 603], "forg": [600, 603], "neural_compressor_ext_lab_alibaba": [602, 603], "log": 604, "unreleas": 604, "vscode": 605, "open": 605, "icon": 605, "5": 605, "welcom": 606, "your": 606, "v": 606, "folder": 606, "setup": 606, "up": 606, "run": 606, "straight": 606, "awai": 606, "explor": 606, "test": 606, "go": 606, "further": 606, "One": 608, "shot": 608, "network": 610, "type": 610, "sparsiti": 610, "decai": 610, "regular": 610, "spars": 610, "deploy": 610, "refer": [610, 613], "full": 611, "56": 611, "2023": 611, "2022": 611, "34": 611, "2021": 611, "15": 611, "2018": 611, "2020": 611, "style": 612, "access": 612, "fundament": 613, "scheme": 613, "ipex": 613, "approach": 613, "accuraci": [613, 619], "turn": 614, "off": 614, "dure": 614, "known": 615, "prepar": 616, "benefit": 616, "comparison": 616, "differ": 616, "tensorboard": 617, "space": 619, "exit": 619, "11": 622, "13": 622, "ptq": 622, "9": 622}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"644ec953a7dc_pruning_support": [[0, "module-644ec953a7dc_pruning_support"]], "6ece06672ed3_v1_14": [[1, "module-6ece06672ed3_v1_14"]], "Module Contents": [[1, "module-contents"], [5, "module-contents"], [6, "module-contents"], [8, "module-contents"], [13, "module-contents"], [15, "module-contents"], [16, "module-contents"], [17, "module-contents"], [19, "module-contents"], [20, "module-contents"], [21, "module-contents"], [22, "module-contents"], [23, "module-contents"], [24, "module-contents"], [25, "module-contents"], [26, "module-contents"], [27, "module-contents"], [28, "module-contents"], [29, "module-contents"], [31, "module-contents"], [32, "module-contents"], [33, "module-contents"], [34, "module-contents"], [35, "module-contents"], [36, "module-contents"], [37, "module-contents"], [38, "module-contents"], [39, "module-contents"], [40, "module-contents"], [41, "module-contents"], [42, "module-contents"], [43, "module-contents"], [44, "module-contents"], [45, "module-contents"], [46, "module-contents"], [48, "module-contents"], [49, "module-contents"], [50, "module-contents"], [51, "module-contents"], [52, "module-contents"], [53, "module-contents"], [54, "module-contents"], [55, "module-contents"], [56, "module-contents"], [57, "module-contents"], [58, "module-contents"], [59, "module-contents"], [60, "module-contents"], [61, "module-contents"], [62, "module-contents"], [63, "module-contents"], [64, "module-contents"], [65, "module-contents"], [66, "module-contents"], [67, "module-contents"], [68, "module-contents"], [69, "module-contents"], [70, "module-contents"], [71, "module-contents"], [73, "module-contents"], [74, "module-contents"], [75, "module-contents"], [76, "module-contents"], [77, "module-contents"], [78, "module-contents"], [79, "module-contents"], [80, "module-contents"], [81, "module-contents"], [82, "module-contents"], [84, "module-contents"], [85, "module-contents"], [86, "module-contents"], [87, "module-contents"], [88, "module-contents"], [89, "module-contents"], [90, "module-contents"], [92, "module-contents"], [93, "module-contents"], [94, "module-contents"], [95, "module-contents"], [96, "module-contents"], [98, "module-contents"], [99, "module-contents"], [100, "module-contents"], [101, "module-contents"], [103, "module-contents"], [104, "module-contents"], [105, "module-contents"], [106, "module-contents"], [109, "module-contents"], [111, "module-contents"], [112, "module-contents"], [114, "module-contents"], [115, "module-contents"], [116, "module-contents"], [117, "module-contents"], [118, "module-contents"], [119, "module-contents"], [120, "module-contents"], [121, "module-contents"], [122, "module-contents"], [123, "module-contents"], [124, "module-contents"], [125, "module-contents"], [127, "module-contents"], [128, "module-contents"], [129, "module-contents"], [130, "module-contents"], [131, "module-contents"], [132, "module-contents"], [133, "module-contents"], [134, "module-contents"], [135, "module-contents"], [136, "module-contents"], [137, "module-contents"], [138, "module-contents"], [140, "module-contents"], [141, "module-contents"], [142, "module-contents"], [143, "module-contents"], [144, "module-contents"], [146, "module-contents"], [147, "module-contents"], [148, "module-contents"], [149, "module-contents"], [150, "module-contents"], [152, "module-contents"], [153, "module-contents"], [154, "module-contents"], [155, "module-contents"], [156, "module-contents"], [159, "module-contents"], [161, "module-contents"], [162, "module-contents"], [163, "module-contents"], [164, "module-contents"], [165, "module-contents"], [166, "module-contents"], [167, "module-contents"], [170, "module-contents"], [173, "module-contents"], [174, "module-contents"], [175, "module-contents"], [176, "module-contents"], [177, "module-contents"], [178, "module-contents"], [180, "module-contents"], [181, "module-contents"], [182, "module-contents"], [183, "module-contents"], [184, "module-contents"], [185, "module-contents"], [186, "module-contents"], [187, "module-contents"], [188, "module-contents"], [189, "module-contents"], [190, "module-contents"], [192, "module-contents"], [193, "module-contents"], [194, "module-contents"], [197, "module-contents"], [198, "module-contents"], [200, "module-contents"], [201, "module-contents"], [202, "module-contents"], [203, "module-contents"], [204, "module-contents"], [205, "module-contents"], [207, "module-contents"], [208, "module-contents"], [209, "module-contents"], [210, "module-contents"], [211, "module-contents"], [212, "module-contents"], [214, "module-contents"], [215, "module-contents"], [217, "module-contents"], [218, "module-contents"], [220, "module-contents"], [221, "module-contents"], [222, "module-contents"], [223, "module-contents"], [224, "module-contents"], [225, "module-contents"], [226, "module-contents"], [227, "module-contents"], [228, "module-contents"], [229, "module-contents"], [230, "module-contents"], [232, "module-contents"], [233, "module-contents"], [234, "module-contents"], [237, "module-contents"], [239, "module-contents"], [240, "module-contents"], [241, "module-contents"], [243, "module-contents"], [244, "module-contents"], [245, "module-contents"], [246, "module-contents"], [247, "module-contents"], [249, "module-contents"], [250, "module-contents"], [252, "module-contents"], [253, "module-contents"], [254, "module-contents"], [256, "module-contents"], [257, "module-contents"], [258, "module-contents"], [259, "module-contents"], [260, "module-contents"], [262, "module-contents"], [263, "module-contents"], [264, "module-contents"], [265, "module-contents"], [266, "module-contents"], [268, "module-contents"], [269, "module-contents"], [270, "module-contents"], [271, "module-contents"], [274, "module-contents"], [275, "module-contents"], [276, "module-contents"], [279, "module-contents"], [280, "module-contents"], [281, "module-contents"], [282, "module-contents"], [283, "module-contents"], [284, "module-contents"], [285, "module-contents"], [287, "module-contents"], [288, "module-contents"], [290, "module-contents"], [291, "module-contents"], [292, "module-contents"], [294, "module-contents"], [295, "module-contents"], [296, "module-contents"], [298, "module-contents"], [299, "module-contents"], [300, "module-contents"], [301, "module-contents"], [302, "module-contents"], [303, "module-contents"], [304, "module-contents"], [305, "module-contents"], [306, "module-contents"], [307, "module-contents"], [308, "module-contents"], [309, "module-contents"], [310, "module-contents"], [311, "module-contents"], [312, "module-contents"], [313, "module-contents"], [315, "module-contents"], [316, "module-contents"], [317, "module-contents"], [318, "module-contents"], [321, "module-contents"], [322, "module-contents"], [323, "module-contents"], [324, "module-contents"], [325, "module-contents"], [326, "module-contents"], [328, "module-contents"], [330, "module-contents"], [331, "module-contents"], [332, "module-contents"], [333, "module-contents"], [334, "module-contents"], [335, "module-contents"], [336, "module-contents"], [337, "module-contents"], [338, "module-contents"], [340, "module-contents"], [341, "module-contents"], [342, "module-contents"], [344, "module-contents"], [345, "module-contents"], [346, "module-contents"], [347, "module-contents"], [348, "module-contents"], [349, "module-contents"], [350, "module-contents"], [352, "module-contents"], [353, "module-contents"], [354, "module-contents"], [355, "module-contents"], [356, "module-contents"], [357, "module-contents"], [358, "module-contents"], [359, "module-contents"], [360, "module-contents"], [361, "module-contents"], [362, "module-contents"], [364, "module-contents"], [365, "module-contents"], [366, "module-contents"], [367, "module-contents"], [368, "module-contents"], [369, "module-contents"], [370, "module-contents"], [371, "module-contents"], [372, "module-contents"], [373, "module-contents"], [374, "module-contents"], [375, "module-contents"], [376, "module-contents"], [377, "module-contents"], [378, "module-contents"], [379, "module-contents"], [380, "module-contents"], [381, "module-contents"], [383, "module-contents"], [384, "module-contents"], [385, "module-contents"], [386, "module-contents"], [388, "module-contents"], [389, "module-contents"], [390, "module-contents"], [391, "module-contents"], [394, "module-contents"], [395, "module-contents"], [396, "module-contents"], [398, "module-contents"], [399, "module-contents"], [401, "module-contents"], [402, "module-contents"], [403, "module-contents"], [404, "module-contents"], [405, "module-contents"], [407, "module-contents"], [409, "module-contents"], [410, "module-contents"], [416, "module-contents"], [417, "module-contents"], [419, "module-contents"], [420, "module-contents"], [422, "module-contents"], [424, "module-contents"], [425, "module-contents"], [426, "module-contents"], [427, "module-contents"], [429, "module-contents"], [430, "module-contents"], [431, "module-contents"], [432, "module-contents"], [433, "module-contents"], [434, "module-contents"], [435, "module-contents"], [436, "module-contents"], [438, "module-contents"], [440, "module-contents"], [441, "module-contents"], [442, "module-contents"], [443, "module-contents"], [445, "module-contents"], [448, "module-contents"], [449, "module-contents"], [451, "module-contents"], [452, "module-contents"], [454, "module-contents"], [455, "module-contents"], [457, "module-contents"], [458, "module-contents"], [459, "module-contents"], [460, "module-contents"], [461, "module-contents"], [463, "module-contents"], [464, "module-contents"], [465, "module-contents"], [466, "module-contents"], [468, "module-contents"], [469, "module-contents"], [470, "module-contents"], [472, "module-contents"], [473, "module-contents"], [474, "module-contents"], [475, "module-contents"], [476, "module-contents"], [477, "module-contents"], [478, "module-contents"], [480, "module-contents"], [481, "module-contents"], [482, "module-contents"], [483, "module-contents"], [484, "module-contents"], [485, "module-contents"], [486, "module-contents"], [488, "module-contents"], [489, "module-contents"], [490, "module-contents"], [491, "module-contents"], [492, "module-contents"], [493, "module-contents"], [494, "module-contents"], [496, "module-contents"], [497, "module-contents"], [498, "module-contents"], [499, "module-contents"], [500, "module-contents"], [501, "module-contents"], [502, "module-contents"], [503, "module-contents"], [504, "module-contents"], [506, "module-contents"], [507, "module-contents"], [508, "module-contents"], [509, "module-contents"], [511, "module-contents"], [512, "module-contents"], [513, "module-contents"], [514, "module-contents"], [515, "module-contents"], [516, "module-contents"], [544, "module-contents"]], "Functions": [[1, "functions"], [5, "functions"], [6, "functions"], [15, "functions"], [34, "functions"], [40, "functions"], [41, "functions"], [63, "functions"], [64, "functions"], [66, "functions"], [100, "functions"], [101, "functions"], [112, "functions"], [114, "functions"], [142, "functions"], [143, "functions"], [144, "functions"], [147, "functions"], [148, "functions"], [149, "functions"], [151, "functions"], [154, "functions"], [156, "functions"], [158, "functions"], [159, "functions"], [161, "functions"], [162, "functions"], [163, "functions"], [164, "functions"], [165, "functions"], [167, "functions"], [170, "functions"], [177, "functions"], [185, "functions"], [187, "functions"], [191, "functions"], [194, "functions"], [195, "functions"], [196, "functions"], [199, "functions"], [201, "functions"], [202, "functions"], [203, "functions"], [204, "functions"], [206, "functions"], [208, "functions"], [209, "functions"], [211, "functions"], [213, "functions"], [214, "functions"], [217, "functions"], [225, "functions"], [227, "functions"], [231, "functions"], [234, "functions"], [235, "functions"], [236, "functions"], [238, "functions"], [239, "functions"], [240, "functions"], [242, "functions"], [243, "functions"], [244, "functions"], [245, "functions"], [246, "functions"], [249, "functions"], [250, "functions"], [252, "functions"], [253, "functions"], [254, "functions"], [255, "functions"], [256, "functions"], [263, "functions"], [270, "functions"], [274, "functions"], [279, "functions"], [280, "functions"], [281, "functions"], [283, "functions"], [286, "functions"], [287, "functions"], [288, "functions"], [290, "functions"], [291, "functions"], [292, "functions"], [293, "functions"], [294, "functions"], [295, "functions"], [299, "functions"], [303, "functions"], [305, "functions"], [306, "functions"], [310, "functions"], [318, "functions"], [322, "functions"], [324, "functions"], [325, "functions"], [328, "functions"], [329, "functions"], [331, "functions"], [332, "functions"], [334, "functions"], [335, "functions"], [337, "functions"], [338, "functions"], [348, "functions"], [349, "functions"], [350, "functions"], [352, "functions"], [357, "functions"], [359, "functions"], [360, "functions"], [362, "functions"], [364, "functions"], [367, "functions"], [368, "functions"], [373, "functions"], [376, "functions"], [377, "functions"], [378, "functions"], [389, "functions"], [399, "functions"], [416, "functions"], [420, "functions"], [422, "functions"], [433, "functions"], [434, "functions"], [435, "functions"], [438, "functions"], [441, "functions"], [445, "functions"], [449, "functions"], [451, "functions"], [454, "functions"], [457, "functions"], [459, "functions"], [460, "functions"], [463, "functions"], [469, "functions"], [470, "functions"], [478, "functions"], [481, "functions"], [486, "functions"], [490, "functions"], [498, "functions"], [501, "functions"], [502, "functions"], [506, "functions"], [507, "functions"]], "6f0d0f71d92e_v1_13": [[2, "module-6f0d0f71d92e_v1_13"]], "9e89549a08c8_v1_11": [[3, "module-9e89549a08c8_v1_11"]], "block_mask": [[4, "module-block_mask"]], "env": [[5, "module-env"]], "neural_compressor.adaptor.adaptor": [[6, "module-neural_compressor.adaptor.adaptor"]], "Classes": [[6, "classes"], [8, "classes"], [13, "classes"], [15, "classes"], [16, "classes"], [17, "classes"], [19, "classes"], [20, "classes"], [21, "classes"], [22, "classes"], [23, "classes"], [24, "classes"], [25, "classes"], [26, "classes"], [27, "classes"], [28, "classes"], [29, "classes"], [31, "classes"], [32, "classes"], [33, "classes"], [34, "classes"], [35, "classes"], [36, "classes"], [37, "classes"], [38, "classes"], [39, "classes"], [40, "classes"], [41, "classes"], [42, "classes"], [43, "classes"], [44, "classes"], [45, "classes"], [46, "classes"], [48, "classes"], [49, "classes"], [50, "classes"], [51, "classes"], [52, "classes"], [53, "classes"], [54, "classes"], [55, "classes"], [56, "classes"], [57, "classes"], [58, "classes"], [59, "classes"], [60, "classes"], [61, "classes"], [62, "classes"], [63, "classes"], [64, "classes"], [65, "classes"], [66, "classes"], [67, "classes"], [68, "classes"], [69, "classes"], [70, "classes"], [71, "classes"], [73, "classes"], [74, "classes"], [75, "classes"], [76, "classes"], [77, "classes"], [78, "classes"], [79, "classes"], [80, "classes"], [81, "classes"], [82, "classes"], [84, "classes"], [85, "classes"], [86, "classes"], [87, "classes"], [88, "classes"], [89, "classes"], [90, "classes"], [92, "classes"], [93, "classes"], [94, "classes"], [95, "classes"], [96, "classes"], [98, "classes"], [99, "classes"], [100, "classes"], [101, "classes"], [103, "classes"], [104, "classes"], [105, "classes"], [106, "classes"], [109, "classes"], [111, "classes"], [115, "classes"], [116, "classes"], [117, "classes"], [118, "classes"], [119, "classes"], [120, "classes"], [121, "classes"], [122, "classes"], [123, "classes"], [124, "classes"], [125, "classes"], [127, "classes"], [128, "classes"], [129, "classes"], [130, "classes"], [131, "classes"], [132, "classes"], [133, "classes"], [134, "classes"], [135, "classes"], [136, "classes"], [137, "classes"], [138, "classes"], [140, "classes"], [141, "classes"], [143, "classes"], [144, "classes"], [146, "classes"], [149, "classes"], [150, "classes"], [151, "classes"], [152, "classes"], [153, "classes"], [154, "classes"], [155, "classes"], [156, "classes"], [158, "classes"], [159, "classes"], [161, "classes"], [162, "classes"], [163, "classes"], [164, "classes"], [166, "classes"], [167, "classes"], [170, "classes"], [173, "classes"], [174, "classes"], [175, "classes"], [176, "classes"], [177, "classes"], [178, "classes"], [179, "classes"], [180, "classes"], [181, "classes"], [182, "classes"], [183, "classes"], [184, "classes"], [185, "classes"], [186, "classes"], [187, "classes"], [188, "classes"], [189, "classes"], [190, "classes"], [191, "classes"], [192, "classes"], [193, "classes"], [194, "classes"], [195, "classes"], [196, "classes"], [197, "classes"], [198, "classes"], [199, "classes"], [200, "classes"], [201, "classes"], [202, "classes"], [203, "classes"], [204, "classes"], [205, "classes"], [206, "classes"], [207, "classes"], [208, "classes"], [209, "classes"], [210, "classes"], [212, "classes"], [215, "classes"], [217, "classes"], [218, "classes"], [220, "classes"], [221, "classes"], [222, "classes"], [223, "classes"], [224, "classes"], [225, "classes"], [226, "classes"], [227, "classes"], [228, "classes"], [229, "classes"], [230, "classes"], [231, "classes"], [232, "classes"], [233, "classes"], [234, "classes"], [235, "classes"], [236, "classes"], [237, "classes"], [238, "classes"], [239, "classes"], [240, "classes"], [241, "classes"], [246, "classes"], [247, "classes"], [248, "classes"], [249, "classes"], [252, "classes"], [255, "classes"], [256, "classes"], [257, "classes"], [258, "classes"], [259, "classes"], [260, "classes"], [261, "classes"], [262, "classes"], [264, "classes"], [265, "classes"], [266, "classes"], [268, "classes"], [269, "classes"], [270, "classes"], [271, "classes"], [272, "classes"], [273, "classes"], [274, "classes"], [275, "classes"], [276, "classes"], [279, "classes"], [281, "classes"], [282, "classes"], [283, "classes"], [284, "classes"], [285, "classes"], [286, "classes"], [287, "classes"], [290, "classes"], [293, "classes"], [294, "classes"], [295, "classes"], [296, "classes"], [297, "classes"], [298, "classes"], [299, "classes"], [300, "classes"], [301, "classes"], [302, "classes"], [303, "classes"], [304, "classes"], [305, "classes"], [306, "classes"], [307, "classes"], [308, "classes"], [309, "classes"], [310, "classes"], [311, "classes"], [312, "classes"], [313, "classes"], [315, "classes"], [316, "classes"], [317, "classes"], [318, "classes"], [320, "classes"], [321, "classes"], [322, "classes"], [323, "classes"], [324, "classes"], [325, "classes"], [326, "classes"], [329, "classes"], [330, "classes"], [331, "classes"], [332, "classes"], [333, "classes"], [335, "classes"], [336, "classes"], [339, "classes"], [340, "classes"], [341, "classes"], [342, "classes"], [344, "classes"], [345, "classes"], [346, "classes"], [347, "classes"], [348, "classes"], [352, "classes"], [353, "classes"], [354, "classes"], [355, "classes"], [356, "classes"], [357, "classes"], [358, "classes"], [359, "classes"], [360, "classes"], [361, "classes"], [362, "classes"], [364, "classes"], [365, "classes"], [366, "classes"], [367, "classes"], [368, "classes"], [369, "classes"], [370, "classes"], [371, "classes"], [372, "classes"], [373, "classes"], [374, "classes"], [375, "classes"], [376, "classes"], [377, "classes"], [379, "classes"], [380, "classes"], [381, "classes"], [382, "classes"], [383, "classes"], [384, "classes"], [385, "classes"], [386, "classes"], [387, "classes"], [388, "classes"], [390, "classes"], [391, "classes"], [394, "classes"], [395, "classes"], [396, "classes"], [398, "classes"], [401, "classes"], [402, "classes"], [403, "classes"], [404, "classes"], [405, "classes"], [407, "classes"], [409, "classes"], [410, "classes"], [417, "classes"], [419, "classes"], [422, "classes"], [424, "classes"], [425, "classes"], [426, "classes"], [427, "classes"], [429, "classes"], [430, "classes"], [431, "classes"], [432, "classes"], [436, "classes"], [440, "classes"], [442, "classes"], [443, "classes"], [446, "classes"], [448, "classes"], [452, "classes"], [455, "classes"], [458, "classes"], [459, "classes"], [461, "classes"], [464, "classes"], [465, "classes"], [466, "classes"], [468, "classes"], [472, "classes"], [473, "classes"], [475, "classes"], [476, "classes"], [477, "classes"], [478, "classes"], [480, "classes"], [482, "classes"], [483, "classes"], [484, "classes"], [485, "classes"], [488, "classes"], [489, "classes"], [491, "classes"], [492, "classes"], [493, "classes"], [494, "classes"], [496, "classes"], [497, "classes"], [498, "classes"], [499, "classes"], [500, "classes"], [502, "classes"], [503, "classes"], [506, "classes"], [508, "classes"], [509, "classes"], [511, "classes"], [512, "classes"], [513, "classes"], [514, "classes"], [515, "classes"], [516, "classes"], [544, "classes"], [557, "classes"]], "neural_compressor.adaptor": [[7, "module-neural_compressor.adaptor"]], "Subpackages": [[7, "subpackages"], [18, "subpackages"], [83, "subpackages"], [107, "subpackages"], [108, "subpackages"], [110, "subpackages"], [158, "subpackages"], [171, "subpackages"], [196, "subpackages"], [236, "subpackages"], [248, "subpackages"], [272, "subpackages"], [286, "subpackages"], [314, "subpackages"], [387, "subpackages"], [392, "subpackages"], [406, "subpackages"], [411, "subpackages"], [418, "subpackages"], [446, "subpackages"], [462, "subpackages"], [471, "subpackages"], [479, "subpackages"], [505, "subpackages"]], "Submodules": [[7, "submodules"], [14, "submodules"], [18, "submodules"], [30, "submodules"], [47, "submodules"], [72, "submodules"], [83, "submodules"], [91, "submodules"], [97, "submodules"], [102, "submodules"], [107, "submodules"], [108, "submodules"], [110, "submodules"], [113, "submodules"], [126, "submodules"], [139, "submodules"], [145, "submodules"], [151, "submodules"], [157, "submodules"], [158, "submodules"], [160, "submodules"], [172, "submodules"], [179, "submodules"], [191, "submodules"], [195, "submodules"], [199, "submodules"], [206, "submodules"], [213, "submodules"], [219, "submodules"], [231, "submodules"], [235, "submodules"], [238, "submodules"], [242, "submodules"], [248, "submodules"], [255, "submodules"], [261, "submodules"], [267, "submodules"], [273, "submodules"], [277, "submodules"], [286, "submodules"], [293, "submodules"], [297, "submodules"], [314, "submodules"], [320, "submodules"], [329, "submodules"], [339, "submodules"], [343, "submodules"], [351, "submodules"], [363, "submodules"], [382, "submodules"], [387, "submodules"], [392, "submodules"], [393, "submodules"], [397, "submodules"], [400, "submodules"], [406, "submodules"], [408, "submodules"], [411, "submodules"], [412, "submodules"], [418, "submodules"], [421, "submodules"], [423, "submodules"], [428, "submodules"], [437, "submodules"], [439, "submodules"], [444, "submodules"], [446, "submodules"], [447, "submodules"], [450, "submodules"], [453, "submodules"], [456, "submodules"], [462, "submodules"], [467, "submodules"], [471, "submodules"], [479, "submodules"], [487, "submodules"], [495, "submodules"], [505, "submodules"], [510, "submodules"]], "Package Contents": [[7, "package-contents"], [30, "package-contents"], [151, "package-contents"], [158, "package-contents"], [179, "package-contents"], [191, "package-contents"], [195, "package-contents"], [196, "package-contents"], [199, "package-contents"], [206, "package-contents"], [213, "package-contents"], [219, "package-contents"], [231, "package-contents"], [235, "package-contents"], [236, "package-contents"], [238, "package-contents"], [242, "package-contents"], [248, "package-contents"], [255, "package-contents"], [261, "package-contents"], [267, "package-contents"], [272, "package-contents"], [273, "package-contents"], [286, "package-contents"], [293, "package-contents"], [297, "package-contents"], [314, "package-contents"], [320, "package-contents"], [329, "package-contents"], [339, "package-contents"], [382, "package-contents"], [387, "package-contents"], [446, "package-contents"], [557, "package-contents"]], "neural_compressor.adaptor.keras": [[8, "module-neural_compressor.adaptor.keras"]], "neural_compressor.adaptor.keras_utils.conv2d": [[9, "module-neural_compressor.adaptor.keras_utils.conv2d"]], "neural_compressor.adaptor.keras_utils.dense": [[10, "module-neural_compressor.adaptor.keras_utils.dense"]], "neural_compressor.adaptor.keras_utils": [[11, "module-neural_compressor.adaptor.keras_utils"]], "neural_compressor.adaptor.keras_utils.quantizer": [[12, "module-neural_compressor.adaptor.keras_utils.quantizer"]], "neural_compressor.adaptor.mxnet": [[13, "module-neural_compressor.adaptor.mxnet"]], "neural_compressor.adaptor.mxnet_utils": [[14, "module-neural_compressor.adaptor.mxnet_utils"]], "neural_compressor.adaptor.mxnet_utils.util": [[15, "module-neural_compressor.adaptor.mxnet_utils.util"]], "neural_compressor.adaptor.onnxrt": [[16, "module-neural_compressor.adaptor.onnxrt"]], "neural_compressor.adaptor.ox_utils.calibration": [[17, "module-neural_compressor.adaptor.ox_utils.calibration"]], "neural_compressor.adaptor.ox_utils": [[18, "module-neural_compressor.adaptor.ox_utils"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[19, "module-neural_compressor.adaptor.ox_utils.operators.activation"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[20, "module-neural_compressor.adaptor.ox_utils.operators.argmax"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[21, "module-neural_compressor.adaptor.ox_utils.operators.attention"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[22, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[23, "module-neural_compressor.adaptor.ox_utils.operators.concat"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[24, "module-neural_compressor.adaptor.ox_utils.operators.conv"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[25, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[26, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[27, "module-neural_compressor.adaptor.ox_utils.operators.gather"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[28, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[29, "module-neural_compressor.adaptor.ox_utils.operators.gemm"]], "neural_compressor.adaptor.ox_utils.operators": [[30, "module-neural_compressor.adaptor.ox_utils.operators"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[31, "module-neural_compressor.adaptor.ox_utils.operators.lstm"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[32, "module-neural_compressor.adaptor.ox_utils.operators.matmul"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[33, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[34, "module-neural_compressor.adaptor.ox_utils.operators.ops"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[35, "module-neural_compressor.adaptor.ox_utils.operators.pad"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[36, "module-neural_compressor.adaptor.ox_utils.operators.pooling"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[37, "module-neural_compressor.adaptor.ox_utils.operators.resize"]], "neural_compressor.adaptor.ox_utils.operators.split": [[38, "module-neural_compressor.adaptor.ox_utils.operators.split"]], "neural_compressor.adaptor.ox_utils.quantizer": [[39, "module-neural_compressor.adaptor.ox_utils.quantizer"]], "neural_compressor.adaptor.ox_utils.util": [[40, "module-neural_compressor.adaptor.ox_utils.util"]], "neural_compressor.adaptor.pytorch": [[41, "module-neural_compressor.adaptor.pytorch"]], "neural_compressor.adaptor.query": [[42, "module-neural_compressor.adaptor.query"]], "neural_compressor.adaptor.tensorflow": [[43, "module-neural_compressor.adaptor.tensorflow"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[44, "module-neural_compressor.adaptor.tf_utils.graph_converter"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[45, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[46, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[47, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[48, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[49, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "neural_compressor.adaptor.tf_utils.graph_util": [[106, "module-neural_compressor.adaptor.tf_utils.graph_util"]], "neural_compressor.adaptor.tf_utils": [[107, "module-neural_compressor.adaptor.tf_utils"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[108, "module-neural_compressor.adaptor.tf_utils.quantize_graph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[109, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[110, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[111, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[112, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[135, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[136, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[137, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[138, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[139, "module-neural_compressor.adaptor.tf_utils.transform_graph"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[140, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[141, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"]], "neural_compressor.adaptor.tf_utils.util": [[142, "module-neural_compressor.adaptor.tf_utils.util"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[143, "module-neural_compressor.adaptor.torch_utils.bf16_convert"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[144, "module-neural_compressor.adaptor.torch_utils.hawq_metric"]], "neural_compressor.adaptor.torch_utils": [[145, "module-neural_compressor.adaptor.torch_utils"]], "neural_compressor.adaptor.torch_utils.smooth_quant": [[146, "module-neural_compressor.adaptor.torch_utils.smooth_quant"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[147, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"]], "neural_compressor.adaptor.torch_utils.util": [[148, "module-neural_compressor.adaptor.torch_utils.util"]], "neural_compressor.algorithm.algorithm": [[149, "module-neural_compressor.algorithm.algorithm"]], "neural_compressor.algorithm.fast_bias_correction": [[150, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm": [[151, "module-neural_compressor.algorithm"]], "neural_compressor.algorithm.smooth_quant": [[152, "module-neural_compressor.algorithm.smooth_quant"]], "neural_compressor.algorithm.weight_correction": [[153, "module-neural_compressor.algorithm.weight_correction"]], "neural_compressor.benchmark": [[154, "module-neural_compressor.benchmark"]], "neural_compressor.compression.callbacks": [[155, "module-neural_compressor.compression.callbacks"]], "neural_compressor.compression.distillation.criterions": [[156, "module-neural_compressor.compression.distillation.criterions"]], "neural_compressor.compression.distillation": [[157, "module-neural_compressor.compression.distillation"]], "neural_compressor.compression": [[158, "module-neural_compressor.compression"]], "neural_compressor.compression.pruner.criteria": [[159, "module-neural_compressor.compression.pruner.criteria"]], "neural_compressor.compression.pruner": [[160, "module-neural_compressor.compression.pruner"]], "neural_compressor.compression.pruner.patterns": [[161, "module-neural_compressor.compression.pruner.patterns"]], "neural_compressor.compression.pruner.pruners": [[162, "module-neural_compressor.compression.pruner.pruners"]], "neural_compressor.compression.pruner.regs": [[163, "module-neural_compressor.compression.pruner.regs"]], "neural_compressor.compression.pruner.schedulers": [[164, "module-neural_compressor.compression.pruner.schedulers"]], "neural_compressor.compression.pruner.utils": [[165, "module-neural_compressor.compression.pruner.utils"]], "neural_compressor.conf.config": [[166, "module-neural_compressor.conf.config"]], "neural_compressor.conf.dotdict": [[167, "module-neural_compressor.conf.dotdict"]], "neural_compressor.conf": [[168, "module-neural_compressor.conf"]], "neural_compressor.conf.pythonic_config": [[169, "module-neural_compressor.conf.pythonic_config"]], "neural_compressor.config": [[170, "module-neural_compressor.config"]], "neural_compressor.contrib": [[171, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[172, "module-neural_compressor.contrib.strategy"]], "neural_compressor.contrib.strategy.sigopt": [[173, "module-neural_compressor.contrib.strategy.sigopt"]], "neural_compressor.contrib.strategy.tpe": [[174, "module-neural_compressor.contrib.strategy.tpe"]], "neural_compressor.data.dataloaders.base_dataloader": [[175, "module-neural_compressor.data.dataloaders.base_dataloader"]], "neural_compressor.data.dataloaders.dataloader": [[176, "module-neural_compressor.data.dataloaders.dataloader"]], "neural_compressor.data.dataloaders.default_dataloader": [[177, "module-neural_compressor.data.dataloaders.default_dataloader"]], "neural_compressor.data.dataloaders.fetcher": [[178, "module-neural_compressor.data.dataloaders.fetcher"]], "neural_compressor.data.dataloaders": [[179, "module-neural_compressor.data.dataloaders"]], "Attributes": [[179, "attributes"], [187, "attributes"], [196, "attributes"], [227, "attributes"], [236, "attributes"], [248, "attributes"], [272, "attributes"], [297, "attributes"], [329, "attributes"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[180, "module-neural_compressor.data.dataloaders.mxnet_dataloader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[181, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[182, "module-neural_compressor.data.dataloaders.pytorch_dataloader"]], "neural_compressor.data.dataloaders.sampler": [[183, "module-neural_compressor.data.dataloaders.sampler"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[184, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"]], "neural_compressor.data.datasets.bert_dataset": [[185, "module-neural_compressor.data.datasets.bert_dataset"]], "neural_compressor.data.datasets.coco_dataset": [[186, "module-neural_compressor.data.datasets.coco_dataset"]], "neural_compressor.data.datasets.dataset": [[187, "module-neural_compressor.data.datasets.dataset"]], "neural_compressor.data.datasets.dummy_dataset": [[188, "module-neural_compressor.data.datasets.dummy_dataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[189, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "neural_compressor.data.datasets.imagenet_dataset": [[190, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[191, "module-neural_compressor.data.datasets"]], "neural_compressor.data.datasets.style_transfer_dataset": [[192, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "neural_compressor.data.filters.coco_filter": [[193, "module-neural_compressor.data.filters.coco_filter"]], "neural_compressor.data.filters.filter": [[194, "module-neural_compressor.data.filters.filter"]], "neural_compressor.data.filters": [[195, "module-neural_compressor.data.filters"]], "neural_compressor.data": [[196, "module-neural_compressor.data"]], "neural_compressor.data.transforms.coco_transform": [[197, "module-neural_compressor.data.transforms.coco_transform"]], "neural_compressor.data.transforms.imagenet_transform": [[198, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[199, "module-neural_compressor.data.transforms"]], "neural_compressor.data.transforms.postprocess": [[200, "module-neural_compressor.data.transforms.postprocess"]], "neural_compressor.data.transforms.tokenization": [[201, "module-neural_compressor.data.transforms.tokenization"]], "neural_compressor.data.transforms.transform": [[202, "module-neural_compressor.data.transforms.transform"]], "neural_compressor.experimental.benchmark": [[203, "module-neural_compressor.experimental.benchmark"]], "neural_compressor.experimental.common.criterion": [[204, "module-neural_compressor.experimental.common.criterion"]], "neural_compressor.experimental.common.dataloader": [[205, "module-neural_compressor.experimental.common.dataloader"]], "neural_compressor.experimental.common": [[206, "module-neural_compressor.experimental.common"]], "neural_compressor.experimental.common.metric": [[207, "module-neural_compressor.experimental.common.metric"]], "neural_compressor.experimental.common.model": [[208, "module-neural_compressor.experimental.common.model"]], "neural_compressor.experimental.common.optimizer": [[209, "module-neural_compressor.experimental.common.optimizer"]], "neural_compressor.experimental.common.postprocess": [[210, "module-neural_compressor.experimental.common.postprocess"]], "neural_compressor.experimental.common.torch_utils": [[211, "module-neural_compressor.experimental.common.torch_utils"]], "neural_compressor.experimental.component": [[212, "module-neural_compressor.experimental.component"]], "neural_compressor.experimental.compression": [[213, "module-neural_compressor.experimental.compression"]], "neural_compressor.experimental.compression.pruning": [[214, "module-neural_compressor.experimental.compression.pruning"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[215, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[216, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[217, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[218, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[219, "module-neural_compressor.experimental.data.dataloaders"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[220, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[221, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[222, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[223, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[224, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[225, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[226, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "neural_compressor.experimental.data.datasets.dataset": [[227, "module-neural_compressor.experimental.data.datasets.dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[228, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[229, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[230, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "neural_compressor.experimental.data.datasets": [[231, "module-neural_compressor.experimental.data.datasets"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[232, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "neural_compressor.experimental.data.filters.coco_filter": [[233, "module-neural_compressor.experimental.data.filters.coco_filter"]], "neural_compressor.experimental.data.filters.filter": [[234, "module-neural_compressor.experimental.data.filters.filter"]], "neural_compressor.experimental.data.filters": [[235, "module-neural_compressor.experimental.data.filters"]], "neural_compressor.experimental.data": [[236, "module-neural_compressor.experimental.data"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[237, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "neural_compressor.experimental.data.transforms": [[238, "module-neural_compressor.experimental.data.transforms"]], "neural_compressor.experimental.data.transforms.tokenization": [[239, "module-neural_compressor.experimental.data.transforms.tokenization"]], "neural_compressor.experimental.data.transforms.transform": [[240, "module-neural_compressor.experimental.data.transforms.transform"]], "neural_compressor.experimental.distillation": [[241, "module-neural_compressor.experimental.distillation"]], "neural_compressor.experimental.export": [[242, "module-neural_compressor.experimental.export"]], "neural_compressor.experimental.export.qlinear2qdq": [[243, "module-neural_compressor.experimental.export.qlinear2qdq"]], "neural_compressor.experimental.export.tf2onnx": [[244, "module-neural_compressor.experimental.export.tf2onnx"]], "neural_compressor.experimental.export.torch2onnx": [[245, "module-neural_compressor.experimental.export.torch2onnx"]], "neural_compressor.experimental.export.utils": [[246, "module-neural_compressor.experimental.export.utils"]], "neural_compressor.experimental.graph_optimization": [[247, "module-neural_compressor.experimental.graph_optimization"]], "neural_compressor.experimental": [[248, "module-neural_compressor.experimental"]], "neural_compressor.experimental.metric.bleu": [[249, "module-neural_compressor.experimental.metric.bleu"]], "neural_compressor.experimental.metric.bleu_util": [[250, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[251, "module-neural_compressor.experimental.metric.coco_label_map"]], "neural_compressor.experimental.metric.coco_tools": [[252, "module-neural_compressor.experimental.metric.coco_tools"]], "neural_compressor.experimental.metric.evaluate_squad": [[253, "module-neural_compressor.experimental.metric.evaluate_squad"]], "neural_compressor.experimental.metric.f1": [[254, "module-neural_compressor.experimental.metric.f1"]], "neural_compressor.experimental.metric": [[255, "module-neural_compressor.experimental.metric"]], "neural_compressor.experimental.metric.metric": [[256, "module-neural_compressor.experimental.metric.metric"]], "neural_compressor.experimental.mixed_precision": [[257, "module-neural_compressor.experimental.mixed_precision"]], "neural_compressor.experimental.model_conversion": [[258, "module-neural_compressor.experimental.model_conversion"]], "neural_compressor.experimental.nas.basic_nas": [[259, "module-neural_compressor.experimental.nas.basic_nas"]], "neural_compressor.experimental.nas.dynas": [[260, "module-neural_compressor.experimental.nas.dynas"]], "neural_compressor.experimental.nas": [[261, "module-neural_compressor.experimental.nas"]], "neural_compressor.experimental.nas.nas": [[262, "module-neural_compressor.experimental.nas.nas"]], "neural_compressor.experimental.nas.nas_utils": [[263, "module-neural_compressor.experimental.nas.nas_utils"]], "neural_compressor.experimental.nas.search_algorithms": [[264, "module-neural_compressor.experimental.nas.search_algorithms"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[265, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[266, "module-neural_compressor.experimental.pruner_legacy.group_lasso"]], "neural_compressor.experimental.pruner_legacy": [[267, "module-neural_compressor.experimental.pruner_legacy"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[268, "module-neural_compressor.experimental.pruner_legacy.magnitude"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[269, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"]], "neural_compressor.experimental.pruner_legacy.pruner": [[270, "module-neural_compressor.experimental.pruner_legacy.pruner"]], "neural_compressor.experimental.pruning": [[271, "module-neural_compressor.experimental.pruning"]], "neural_compressor.experimental.pruning_recipes": [[272, "module-neural_compressor.experimental.pruning_recipes"]], "neural_compressor.experimental.pruning_recipes.patterns": [[273, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[274, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[275, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "neural_compressor.experimental.pruning_v2": [[276, "module-neural_compressor.experimental.pruning_v2"]], "neural_compressor.experimental.pytorch_pruner": [[277, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[278, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[279, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[280, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[281, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[282, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[283, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "neural_compressor.experimental.quantization": [[284, "module-neural_compressor.experimental.quantization"]], "neural_compressor.experimental.scheduler": [[285, "module-neural_compressor.experimental.scheduler"]], "neural_compressor": [[286, "module-neural_compressor"]], "neural_compressor.metric.bleu": [[287, "module-neural_compressor.metric.bleu"]], "neural_compressor.metric.bleu_util": [[288, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[289, "module-neural_compressor.metric.coco_label_map"]], "neural_compressor.metric.coco_tools": [[290, "module-neural_compressor.metric.coco_tools"]], "neural_compressor.metric.evaluate_squad": [[291, "module-neural_compressor.metric.evaluate_squad"]], "neural_compressor.metric.f1": [[292, "module-neural_compressor.metric.f1"]], "neural_compressor.metric": [[293, "module-neural_compressor.metric"]], "neural_compressor.metric.metric": [[294, "module-neural_compressor.metric.metric"]], "neural_compressor.mix_precision": [[295, "module-neural_compressor.mix_precision"]], "neural_compressor.model.base_model": [[296, "module-neural_compressor.model.base_model"]], "neural_compressor.model": [[297, "module-neural_compressor.model"]], "neural_compressor.model.keras_model": [[298, "module-neural_compressor.model.keras_model"]], "neural_compressor.model.model": [[299, "module-neural_compressor.model.model"]], "neural_compressor.model.mxnet_model": [[300, "module-neural_compressor.model.mxnet_model"]], "neural_compressor.model.nets_factory": [[301, "module-neural_compressor.model.nets_factory"]], "neural_compressor.model.onnx_model": [[302, "module-neural_compressor.model.onnx_model"]], "neural_compressor.model.tensorflow_model": [[303, "module-neural_compressor.model.tensorflow_model"]], "neural_compressor.model.torch_model": [[304, "module-neural_compressor.model.torch_model"]], "neural_compressor.objective": [[305, "module-neural_compressor.objective"]], "neural_compressor.quantization": [[306, "module-neural_compressor.quantization"]], "neural_compressor.strategy.auto": [[307, "module-neural_compressor.strategy.auto"]], "neural_compressor.strategy.auto_mixed_precision": [[308, "module-neural_compressor.strategy.auto_mixed_precision"]], "neural_compressor.strategy.basic": [[309, "module-neural_compressor.strategy.basic"]], "neural_compressor.strategy.bayesian": [[310, "module-neural_compressor.strategy.bayesian"]], "neural_compressor.strategy.conservative": [[311, "module-neural_compressor.strategy.conservative"]], "neural_compressor.strategy.exhaustive": [[312, "module-neural_compressor.strategy.exhaustive"]], "neural_compressor.strategy.hawq_v2": [[313, "module-neural_compressor.strategy.hawq_v2"]], "neural_compressor.strategy": [[314, "module-neural_compressor.strategy"]], "neural_compressor.strategy.mse": [[315, "module-neural_compressor.strategy.mse"]], "neural_compressor.strategy.mse_v2": [[316, "module-neural_compressor.strategy.mse_v2"]], "neural_compressor.strategy.random": [[317, "module-neural_compressor.strategy.random"]], "neural_compressor.strategy.strategy": [[318, "module-neural_compressor.strategy.strategy"]], "neural_compressor.strategy.utils.constant": [[319, "module-neural_compressor.strategy.utils.constant"]], "neural_compressor.strategy.utils": [[320, "module-neural_compressor.strategy.utils"]], "neural_compressor.strategy.utils.tuning_sampler": [[321, "module-neural_compressor.strategy.utils.tuning_sampler"]], "neural_compressor.strategy.utils.tuning_space": [[322, "module-neural_compressor.strategy.utils.tuning_space"]], "neural_compressor.strategy.utils.tuning_structs": [[323, "module-neural_compressor.strategy.utils.tuning_structs"]], "neural_compressor.strategy.utils.utility": [[324, "module-neural_compressor.strategy.utils.utility"]], "neural_compressor.training": [[325, "module-neural_compressor.training"]], "neural_compressor.utils.collect_layer_histogram": [[326, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[327, "module-neural_compressor.utils.constant"]], "neural_compressor.utils.create_obj_from_config": [[328, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils": [[329, "module-neural_compressor.utils"]], "neural_compressor.utils.kl_divergence": [[330, "module-neural_compressor.utils.kl_divergence"]], "neural_compressor.utils.load_huggingface": [[331, "module-neural_compressor.utils.load_huggingface"]], "neural_compressor.utils.logger": [[332, "module-neural_compressor.utils.logger"]], "neural_compressor.utils.options": [[333, "module-neural_compressor.utils.options"]], "neural_compressor.utils.pytorch": [[334, "module-neural_compressor.utils.pytorch"]], "neural_compressor.utils.utility": [[335, "module-neural_compressor.utils.utility"]], "neural_compressor.ux.components.benchmark.benchmark": [[336, "module-neural_compressor.ux.components.benchmark.benchmark"]], "neural_compressor.ux.components.benchmark.benchmark_model": [[337, "module-neural_compressor.ux.components.benchmark.benchmark_model"]], "neural_compressor.ux.components.benchmark.execute_benchmark": [[338, "module-neural_compressor.ux.components.benchmark.execute_benchmark"]], "neural_compressor.ux.components.benchmark": [[339, "module-neural_compressor.ux.components.benchmark"]], "neural_compressor.ux.components.config_generator.benchmark_config_generator": [[340, "module-neural_compressor.ux.components.config_generator.benchmark_config_generator"]], "neural_compressor.ux.components.config_generator.config_generator": [[341, "module-neural_compressor.ux.components.config_generator.config_generator"]], "neural_compressor.ux.components.config_generator.graph_optimization_config_generator": [[342, "module-neural_compressor.ux.components.config_generator.graph_optimization_config_generator"]], "neural_compressor.ux.components.config_generator": [[343, "module-neural_compressor.ux.components.config_generator"]], "neural_compressor.ux.components.config_generator.mixed_precision_config_generator": [[344, "module-neural_compressor.ux.components.config_generator.mixed_precision_config_generator"]], "neural_compressor.ux.components.config_generator.profiling_config_generator": [[345, "module-neural_compressor.ux.components.config_generator.profiling_config_generator"]], "neural_compressor.ux.components.config_generator.pruning_config_generator": [[346, "module-neural_compressor.ux.components.config_generator.pruning_config_generator"]], "neural_compressor.ux.components.config_generator.quantization_config_generator": [[347, "module-neural_compressor.ux.components.config_generator.quantization_config_generator"]], "neural_compressor.ux.components.configuration_wizard.configuration_parser": [[348, "module-neural_compressor.ux.components.configuration_wizard.configuration_parser"]], "neural_compressor.ux.components.configuration_wizard.get_boundary_nodes": [[349, "module-neural_compressor.ux.components.configuration_wizard.get_boundary_nodes"]], "neural_compressor.ux.components.configuration_wizard.get_configuration": [[350, "module-neural_compressor.ux.components.configuration_wizard.get_configuration"]], "neural_compressor.ux.components.configuration_wizard": [[351, "module-neural_compressor.ux.components.configuration_wizard"]], "neural_compressor.ux.components.configuration_wizard.params_feeder": [[352, "module-neural_compressor.ux.components.configuration_wizard.params_feeder"]], "neural_compressor.ux.components.configuration_wizard.pruning_config_parser": [[353, "module-neural_compressor.ux.components.configuration_wizard.pruning_config_parser"]], "neural_compressor.ux.components.db_manager.db_manager": [[354, "module-neural_compressor.ux.components.db_manager.db_manager"]], "neural_compressor.ux.components.db_manager.db_models.benchmark": [[355, "module-neural_compressor.ux.components.db_manager.db_models.benchmark"]], "neural_compressor.ux.components.db_manager.db_models.benchmark_result": [[356, "module-neural_compressor.ux.components.db_manager.db_models.benchmark_result"]], "neural_compressor.ux.components.db_manager.db_models.dataloader": [[357, "module-neural_compressor.ux.components.db_manager.db_models.dataloader"]], "neural_compressor.ux.components.db_manager.db_models.dataset": [[358, "module-neural_compressor.ux.components.db_manager.db_models.dataset"]], "neural_compressor.ux.components.db_manager.db_models.domain": [[359, "module-neural_compressor.ux.components.db_manager.db_models.domain"]], "neural_compressor.ux.components.db_manager.db_models.domain_flavour": [[360, "module-neural_compressor.ux.components.db_manager.db_models.domain_flavour"]], "neural_compressor.ux.components.db_manager.db_models.example": [[361, "module-neural_compressor.ux.components.db_manager.db_models.example"]], "neural_compressor.ux.components.db_manager.db_models.framework": [[362, "module-neural_compressor.ux.components.db_manager.db_models.framework"]], "neural_compressor.ux.components.db_manager.db_models": [[363, "module-neural_compressor.ux.components.db_manager.db_models"]], "neural_compressor.ux.components.db_manager.db_models.metric": [[364, "module-neural_compressor.ux.components.db_manager.db_models.metric"]], "neural_compressor.ux.components.db_manager.db_models.model": [[365, "module-neural_compressor.ux.components.db_manager.db_models.model"]], "neural_compressor.ux.components.db_manager.db_models.optimization": [[366, "module-neural_compressor.ux.components.db_manager.db_models.optimization"]], "neural_compressor.ux.components.db_manager.db_models.optimization_type": [[367, "module-neural_compressor.ux.components.db_manager.db_models.optimization_type"]], "neural_compressor.ux.components.db_manager.db_models.precision": [[368, "module-neural_compressor.ux.components.db_manager.db_models.precision"]], "neural_compressor.ux.components.db_manager.db_models.profiling": [[369, "module-neural_compressor.ux.components.db_manager.db_models.profiling"]], "neural_compressor.ux.components.db_manager.db_models.profiling_result": [[370, "module-neural_compressor.ux.components.db_manager.db_models.profiling_result"]], "neural_compressor.ux.components.db_manager.db_models.project": [[371, "module-neural_compressor.ux.components.db_manager.db_models.project"]], "neural_compressor.ux.components.db_manager.db_models.pruning_details": [[372, "module-neural_compressor.ux.components.db_manager.db_models.pruning_details"]], "neural_compressor.ux.components.db_manager.db_models.transform": [[373, "module-neural_compressor.ux.components.db_manager.db_models.transform"]], "neural_compressor.ux.components.db_manager.db_models.tuning_details": [[374, "module-neural_compressor.ux.components.db_manager.db_models.tuning_details"]], "neural_compressor.ux.components.db_manager.db_models.tuning_history": [[375, "module-neural_compressor.ux.components.db_manager.db_models.tuning_history"]], "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface": [[376, "module-neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface": [[377, "module-neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.db_operations": [[378, "module-neural_compressor.ux.components.db_manager.db_operations.db_operations"]], "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface": [[379, "module-neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface": [[380, "module-neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface": [[381, "module-neural_compressor.ux.components.db_manager.db_operations.examples_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations": [[382, "module-neural_compressor.ux.components.db_manager.db_operations"]], "neural_compressor.ux.components.db_manager.db_operations.model_api_interface": [[383, "module-neural_compressor.ux.components.db_manager.db_operations.model_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface": [[384, "module-neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface": [[385, "module-neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.project_api_interface": [[386, "module-neural_compressor.ux.components.db_manager.db_operations.project_api_interface"]], "neural_compressor.ux.components.db_manager": [[387, "module-neural_compressor.ux.components.db_manager"]], "neural_compressor.ux.components.db_manager.params_interfaces": [[388, "module-neural_compressor.ux.components.db_manager.params_interfaces"]], "neural_compressor.ux.components.db_manager.utils": [[389, "module-neural_compressor.ux.components.db_manager.utils"]], "neural_compressor.ux.components.diagnosis.diagnosis": [[390, "module-neural_compressor.ux.components.diagnosis.diagnosis"]], "neural_compressor.ux.components.diagnosis.factory": [[391, "module-neural_compressor.ux.components.diagnosis.factory"]], "neural_compressor.ux.components.diagnosis": [[392, "module-neural_compressor.ux.components.diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis": [[393, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis": [[394, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis"]], "neural_compressor.ux.components.diagnosis.op_details": [[395, "module-neural_compressor.ux.components.diagnosis.op_details"]], "neural_compressor.ux.components.diagnosis.op_entry": [[396, "module-neural_compressor.ux.components.diagnosis.op_entry"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis": [[397, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis": [[398, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis"]], "neural_compressor.ux.components.file_browser.file_browser": [[399, "module-neural_compressor.ux.components.file_browser.file_browser"]], "neural_compressor.ux.components.file_browser": [[400, "module-neural_compressor.ux.components.file_browser"]], "neural_compressor.ux.components.graph.attribute": [[401, "module-neural_compressor.ux.components.graph.attribute"]], "neural_compressor.ux.components.graph.collapser": [[402, "module-neural_compressor.ux.components.graph.collapser"]], "neural_compressor.ux.components.graph.edge": [[403, "module-neural_compressor.ux.components.graph.edge"]], "neural_compressor.ux.components.graph.graph": [[404, "module-neural_compressor.ux.components.graph.graph"]], "neural_compressor.ux.components.graph.graph_reader": [[405, "module-neural_compressor.ux.components.graph.graph_reader"]], "neural_compressor.ux.components.graph": [[406, "module-neural_compressor.ux.components.graph"]], "neural_compressor.ux.components.graph.node": [[407, "module-neural_compressor.ux.components.graph.node"]], "neural_compressor.ux.components.graph.reader": [[408, "module-neural_compressor.ux.components.graph.reader"]], "neural_compressor.ux.components.graph.reader.onnxrt_reader": [[409, "module-neural_compressor.ux.components.graph.reader.onnxrt_reader"]], "neural_compressor.ux.components.graph.reader.tensorflow_reader": [[410, "module-neural_compressor.ux.components.graph.reader.tensorflow_reader"]], "neural_compressor.ux.components": [[411, "module-neural_compressor.ux.components"]], "neural_compressor.ux.components.jobs_management": [[412, "module-neural_compressor.ux.components.jobs_management"]], "neural_compressor.ux.components.jobs_management.jobs_control_queue": [[413, "module-neural_compressor.ux.components.jobs_management.jobs_control_queue"]], "neural_compressor.ux.components.jobs_management.jobs_manager": [[414, "module-neural_compressor.ux.components.jobs_management.jobs_manager"]], "neural_compressor.ux.components.jobs_management.request": [[415, "module-neural_compressor.ux.components.jobs_management.request"]], "neural_compressor.ux.components.manage_workspace": [[416, "module-neural_compressor.ux.components.manage_workspace"]], "neural_compressor.ux.components.model.domain": [[417, "module-neural_compressor.ux.components.model.domain"]], "neural_compressor.ux.components.model": [[418, "module-neural_compressor.ux.components.model"]], "neural_compressor.ux.components.model.model": [[419, "module-neural_compressor.ux.components.model.model"]], "neural_compressor.ux.components.model.model_type_getter": [[420, "module-neural_compressor.ux.components.model.model_type_getter"]], "neural_compressor.ux.components.model.onnxrt": [[421, "module-neural_compressor.ux.components.model.onnxrt"]], "neural_compressor.ux.components.model.onnxrt.model": [[422, "module-neural_compressor.ux.components.model.onnxrt.model"]], "neural_compressor.ux.components.model.pytorch": [[423, "module-neural_compressor.ux.components.model.pytorch"]], "neural_compressor.ux.components.model.pytorch.model": [[424, "module-neural_compressor.ux.components.model.pytorch.model"]], "neural_compressor.ux.components.model.repository": [[425, "module-neural_compressor.ux.components.model.repository"]], "neural_compressor.ux.components.model.shape": [[426, "module-neural_compressor.ux.components.model.shape"]], "neural_compressor.ux.components.model.tensorflow.frozen_pb": [[427, "module-neural_compressor.ux.components.model.tensorflow.frozen_pb"]], "neural_compressor.ux.components.model.tensorflow": [[428, "module-neural_compressor.ux.components.model.tensorflow"]], "neural_compressor.ux.components.model.tensorflow.keras": [[429, "module-neural_compressor.ux.components.model.tensorflow.keras"]], "neural_compressor.ux.components.model.tensorflow.meta_graph": [[430, "module-neural_compressor.ux.components.model.tensorflow.meta_graph"]], "neural_compressor.ux.components.model.tensorflow.model": [[431, "module-neural_compressor.ux.components.model.tensorflow.model"]], "neural_compressor.ux.components.model.tensorflow.saved_model": [[432, "module-neural_compressor.ux.components.model.tensorflow.saved_model"]], "neural_compressor.ux.components.model.tensorflow.utils": [[433, "module-neural_compressor.ux.components.model.tensorflow.utils"]], "neural_compressor.ux.components.model_zoo.download_config": [[434, "module-neural_compressor.ux.components.model_zoo.download_config"]], "neural_compressor.ux.components.model_zoo.download_model": [[435, "module-neural_compressor.ux.components.model_zoo.download_model"]], "neural_compressor.ux.components.model_zoo.downloader": [[436, "module-neural_compressor.ux.components.model_zoo.downloader"]], "neural_compressor.ux.components.model_zoo": [[437, "module-neural_compressor.ux.components.model_zoo"]], "neural_compressor.ux.components.model_zoo.list_models": [[438, "module-neural_compressor.ux.components.model_zoo.list_models"]], "neural_compressor.ux.components.names_mapper": [[439, "module-neural_compressor.ux.components.names_mapper"]], "neural_compressor.ux.components.names_mapper.names_mapper": [[440, "module-neural_compressor.ux.components.names_mapper.names_mapper"]], "neural_compressor.ux.components.optimization.execute_optimization": [[441, "module-neural_compressor.ux.components.optimization.execute_optimization"]], "neural_compressor.ux.components.optimization.factory": [[442, "module-neural_compressor.ux.components.optimization.factory"]], "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization": [[443, "module-neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization"]], "neural_compressor.ux.components.optimization.graph_optimizer": [[444, "module-neural_compressor.ux.components.optimization.graph_optimizer"]], "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model": [[445, "module-neural_compressor.ux.components.optimization.graph_optimizer.optimize_model"]], "neural_compressor.ux.components.optimization": [[446, "module-neural_compressor.ux.components.optimization"]], "neural_compressor.ux.components.optimization.mixed_precision": [[447, "module-neural_compressor.ux.components.optimization.mixed_precision"]], "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision": [[448, "module-neural_compressor.ux.components.optimization.mixed_precision.mixed_precision"]], "neural_compressor.ux.components.optimization.mixed_precision.optimize_model": [[449, "module-neural_compressor.ux.components.optimization.mixed_precision.optimize_model"]], "neural_compressor.ux.components.optimization.neural_coder_optimization": [[450, "module-neural_compressor.ux.components.optimization.neural_coder_optimization"]], "neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model": [[451, "module-neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model"]], "neural_compressor.ux.components.optimization.optimization": [[452, "module-neural_compressor.ux.components.optimization.optimization"]], "neural_compressor.ux.components.optimization.pruning": [[453, "module-neural_compressor.ux.components.optimization.pruning"]], "neural_compressor.ux.components.optimization.pruning.optimize_model": [[454, "module-neural_compressor.ux.components.optimization.pruning.optimize_model"]], "neural_compressor.ux.components.optimization.pruning.pruning": [[455, "module-neural_compressor.ux.components.optimization.pruning.pruning"]], "neural_compressor.ux.components.optimization.tune": [[456, "module-neural_compressor.ux.components.optimization.tune"]], "neural_compressor.ux.components.optimization.tune.tune_model": [[457, "module-neural_compressor.ux.components.optimization.tune.tune_model"]], "neural_compressor.ux.components.optimization.tune.tuning": [[458, "module-neural_compressor.ux.components.optimization.tune.tuning"]], "neural_compressor.ux.components.optimization.tuning_history": [[459, "module-neural_compressor.ux.components.optimization.tuning_history"]], "neural_compressor.ux.components.profiling.execute_profiling": [[460, "module-neural_compressor.ux.components.profiling.execute_profiling"]], "neural_compressor.ux.components.profiling.factory": [[461, "module-neural_compressor.ux.components.profiling.factory"]], "neural_compressor.ux.components.profiling": [[462, "module-neural_compressor.ux.components.profiling"]], "neural_compressor.ux.components.profiling.profile_model": [[463, "module-neural_compressor.ux.components.profiling.profile_model"]], "neural_compressor.ux.components.profiling.profiler": [[464, "module-neural_compressor.ux.components.profiling.profiler"]], "neural_compressor.ux.components.profiling.profiling": [[465, "module-neural_compressor.ux.components.profiling.profiling"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.factory": [[466, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.factory"]], "neural_compressor.ux.components.profiling.tensorflow_profiler": [[467, "module-neural_compressor.ux.components.profiling.tensorflow_profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler": [[468, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.utils": [[469, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.utils"]], "neural_compressor.ux.inc_bench": [[470, "module-neural_compressor.ux.inc_bench"]], "neural_compressor.ux": [[471, "module-neural_compressor.ux"]], "neural_compressor.ux.utils.consts": [[472, "module-neural_compressor.ux.utils.consts"]], "neural_compressor.ux.utils.environment": [[473, "module-neural_compressor.ux.utils.environment"]], "neural_compressor.ux.utils.exceptions": [[474, "module-neural_compressor.ux.utils.exceptions"]], "neural_compressor.ux.utils.executor": [[475, "module-neural_compressor.ux.utils.executor"]], "neural_compressor.ux.utils.expiring_dict": [[476, "module-neural_compressor.ux.utils.expiring_dict"]], "neural_compressor.ux.utils.github_info": [[477, "module-neural_compressor.ux.utils.github_info"]], "neural_compressor.ux.utils.hw_info": [[478, "module-neural_compressor.ux.utils.hw_info"]], "neural_compressor.ux.utils": [[479, "module-neural_compressor.ux.utils"]], "neural_compressor.ux.utils.json_serializer": [[480, "module-neural_compressor.ux.utils.json_serializer"]], "neural_compressor.ux.utils.logger": [[481, "module-neural_compressor.ux.utils.logger"]], "neural_compressor.ux.utils.parser": [[482, "module-neural_compressor.ux.utils.parser"]], "neural_compressor.ux.utils.proc": [[483, "module-neural_compressor.ux.utils.proc"]], "neural_compressor.ux.utils.processes": [[484, "module-neural_compressor.ux.utils.processes"]], "neural_compressor.ux.utils.singleton": [[485, "module-neural_compressor.ux.utils.singleton"]], "neural_compressor.ux.utils.status_updates": [[486, "module-neural_compressor.ux.utils.status_updates"]], "neural_compressor.ux.utils.templates": [[487, "module-neural_compressor.ux.utils.templates"]], "neural_compressor.ux.utils.templates.metric": [[488, "module-neural_compressor.ux.utils.templates.metric"]], "neural_compressor.ux.utils.templates.workdir": [[489, "module-neural_compressor.ux.utils.templates.workdir"]], "neural_compressor.ux.utils.utils": [[490, "module-neural_compressor.ux.utils.utils"]], "neural_compressor.ux.utils.workload.config": [[491, "module-neural_compressor.ux.utils.workload.config"]], "neural_compressor.ux.utils.workload.dataloader": [[492, "module-neural_compressor.ux.utils.workload.dataloader"]], "neural_compressor.ux.utils.workload.evaluation": [[493, "module-neural_compressor.ux.utils.workload.evaluation"]], "neural_compressor.ux.utils.workload.graph_optimization": [[494, "module-neural_compressor.ux.utils.workload.graph_optimization"]], "neural_compressor.ux.utils.workload": [[495, "module-neural_compressor.ux.utils.workload"]], "neural_compressor.ux.utils.workload.mixed_precision": [[496, "module-neural_compressor.ux.utils.workload.mixed_precision"]], "neural_compressor.ux.utils.workload.model": [[497, "module-neural_compressor.ux.utils.workload.model"]], "neural_compressor.ux.utils.workload.pruning": [[498, "module-neural_compressor.ux.utils.workload.pruning"]], "neural_compressor.ux.utils.workload.quantization": [[499, "module-neural_compressor.ux.utils.workload.quantization"]], "neural_compressor.ux.utils.workload.tuning": [[500, "module-neural_compressor.ux.utils.workload.tuning"]], "neural_compressor.ux.utils.yaml_utils": [[501, "module-neural_compressor.ux.utils.yaml_utils"]], "neural_compressor.ux.web.communication": [[502, "module-neural_compressor.ux.web.communication"]], "neural_compressor.ux.web.configuration": [[503, "module-neural_compressor.ux.web.configuration"]], "neural_compressor.ux.web.exceptions": [[504, "module-neural_compressor.ux.web.exceptions"]], "neural_compressor.ux.web": [[505, "module-neural_compressor.ux.web"]], "neural_compressor.ux.web.router": [[506, "module-neural_compressor.ux.web.router"]], "neural_compressor.ux.web.server": [[507, "module-neural_compressor.ux.web.server"]], "neural_compressor.ux.web.service.benchmark": [[508, "module-neural_compressor.ux.web.service.benchmark"]], "neural_compressor.ux.web.service.history_snapshot_parser": [[509, "module-neural_compressor.ux.web.service.history_snapshot_parser"]], "neural_compressor.ux.web.service": [[510, "module-neural_compressor.ux.web.service"]], "neural_compressor.ux.web.service.model": [[511, "module-neural_compressor.ux.web.service.model"]], "neural_compressor.ux.web.service.optimization": [[512, "module-neural_compressor.ux.web.service.optimization"]], "neural_compressor.ux.web.service.profiling": [[513, "module-neural_compressor.ux.web.service.profiling"]], "neural_compressor.ux.web.service.request_data_processor": [[514, "module-neural_compressor.ux.web.service.request_data_processor"]], "neural_compressor.ux.web.service.response_generator": [[515, "module-neural_compressor.ux.web.service.response_generator"]], "neural_compressor.ux.web.service.workload": [[516, "module-neural_compressor.ux.web.service.workload"]], "neural_compressor.version": [[517, "module-neural_compressor.version"]], "Intel\u00ae Neural Compressor Documentation": [[518, "intel-neural-compressor-documentation"], [623, "intel-neural-compressor-documentation"]], "Sections": [[518, "sections"], [623, "sections"]], "Contributor Covenant Code of Conduct": [[519, "contributor-covenant-code-of-conduct"], [520, "contributor-covenant-code-of-conduct"]], "Our Pledge": [[519, "our-pledge"]], "Our Standards": [[519, "our-standards"]], "Our Responsibilities": [[519, "our-responsibilities"]], "Scope": [[519, "scope"]], "Enforcement": [[519, "enforcement"]], "Attribution": [[519, "attribution"]], "Contribution Guidelines": [[520, "contribution-guidelines"]], "Pull Request Checklist": [[520, "pull-request-checklist"]], "Pull Request Template": [[520, "pull-request-template"]], "Support": [[520, "support"]], "FX": [[521, "fx"]], "Introduction": [[521, "introduction"], [522, "introduction"], [525, "introduction"], [567, "introduction"], [568, "introduction"], [569, "introduction"], [570, "introduction"], [572, "introduction"], [573, "introduction"], [574, "introduction"], [576, "introduction"], [578, "introduction"], [581, "introduction"], [584, "introduction"], [586, "introduction"], [587, "introduction"], [607, "introduction"], [608, "introduction"], [610, "introduction"], [612, "introduction"], [616, "introduction"], [617, "introduction"], [618, "introduction"], [619, "introduction"], [621, "introduction"]], "FX Mode Support Matrix in Neural Compressor": [[521, "fx-mode-support-matrix-in-neural-compressor"]], "Get Start": [[521, "get-start"]], "Post Training Static Quantization": [[521, "post-training-static-quantization"], [613, "post-training-static-quantization"]], "Post Training Dynamic Quantization": [[521, "post-training-dynamic-quantization"], [613, "post-training-dynamic-quantization"]], "Quantization-Aware Training": [[521, "quantization-aware-training"]], "Examples": [[521, "examples"], [522, "examples"], [568, "examples"], [569, "examples"], [570, "examples"], [572, "examples"], [573, "examples"], [574, "examples"], [575, "examples"], [576, "examples"], [585, "examples"], [586, "examples"], [587, "examples"], [608, "examples"], [610, "examples"], [613, "examples"], [617, "examples"]], "Note": [[521, "note"]], "Details": [[521, "details"]], "Common Problem": [[521, "common-problem"]], "Dynamic Quantization": [[521, "dynamic-quantization"]], "Static Quantization & Quantization Aware Training": [[521, "static-quantization-quantization-aware-training"]], "Neural Architecture Search": [[522, "neural-architecture-search"]], "Basic NAS": [[522, "basic-nas"]], "Dynamic NAS": [[522, "dynamic-nas"]], "NAS Support Matrix": [[522, "nas-support-matrix"]], "Get Started with NAS API": [[522, "get-started-with-nas-api"]], "Basic Usage": [[522, "basic-usage"]], "1. Python code + YAML": [[522, "python-code-yaml"]], "2. Python code only": [[522, "python-code-only"]], "Advanced Usage (Custom NAS)": [[522, "advanced-usage-custom-nas"]], "Security Policy": [[523, "security-policy"]], "Report a Vulnerability": [[523, "report-a-vulnerability"]], "Intel\u00ae Neural Compressor": [[524, "intel-neural-compressor"], [605, "intel-neural-compressor"]], "Installation": [[524, "installation"], [582, "installation"], [599, "installation"]], "Install from pypi": [[524, "install-from-pypi"]], "Getting Started": [[524, "getting-started"], [579, "getting-started"]], "Quantization with Python API": [[524, "quantization-with-python-api"], [579, "quantization-with-python-api"]], "Documentation": [[524, "documentation"], [620, "documentation"]], "Selected Publications/Events": [[524, "selected-publications-events"]], "Additional Content": [[524, "additional-content"]], "Research Collaborations": [[524, "research-collaborations"]], "Adaptor": [[525, "adaptor"], [526, "adaptor"]], "Adaptor Support Matrix": [[525, "adaptor-support-matrix"]], "Working Flow": [[525, "working-flow"], [613, "working-flow"]], "Get Start with Adaptor API": [[525, "get-start-with-adaptor-api"]], "Query API": [[525, "query-api"]], "Background": [[525, "background"]], "Query API Introduction": [[525, "query-api-introduction"]], "Example of Adding a New Backend Support": [[525, "example-of-adding-a-new-backend-support"]], "Capability": [[525, "capability"]], "Implement ONNXRTAdaptor Class": [[525, "implement-onnxrtadaptor-class"]], "ONNX Runtime": [[527, "onnx-runtime"], [586, "onnx-runtime"], [586, "id1"]], "Torch Utils": [[528, "torch-utils"]], "Bf16 Convert": [[529, "bf16-convert"]], "Hawq Metric": [[530, "hawq-metric"]], "Symbolic Trace": [[531, "symbolic-trace"]], "Util": [[532, "util"]], "Algorithm": [[533, "algorithm"]], "APIs": [[534, "apis"]], "User facing APIs": [[535, "user-facing-apis"]], "Benchmark": [[536, "benchmark"], [543, "benchmark"], [585, "benchmark"], [612, "benchmark"]], "Config": [[537, "config"]], "Mix Precision": [[538, "mix-precision"], [585, "mix-precision"]], "Objective": [[539, "objective"], [607, "objective"]], "Quantization": [[540, "quantization"], [559, "quantization"], [612, "quantization"], [613, "quantization"]], "Training": [[541, "training"]], "Common": [[542, "common"]], "BLEU": [[544, "module-neural_compressor.experimental.metric.bleu"]], "Criterion": [[545, "criterion"]], "Data": [[546, "data"]], "Dataloader": [[547, "dataloader"]], "BaseDataLoader": [[547, "basedataloader"]], "dataloaders": [[547, "dataloaders"]], "Datasets": [[548, "datasets"]], "Transforms": [[549, "transforms"]], "Metric": [[550, "metric"]], "Model": [[551, "model"], [562, "model"], [587, "model"]], "Optimizer": [[552, "optimizer"]], "Component(experiemental API, deprecated in 2.0)": [[553, "component-experiemental-api-deprecated-in-2-0"]], "Distillation": [[554, "distillation"], [572, "distillation"], [585, "distillation"], [612, "distillation"]], "MixedPrecision": [[555, "mixedprecision"]], "ModelConversion": [[556, "modelconversion"]], "Neural architecture search (NAS)": [[557, "neural-architecture-search-nas"]], "Pruning": [[558, "pruning"], [567, "pruning"], [585, "pruning"], [610, "pruning"], [612, "pruning"]], "Scheduler": [[560, "scheduler"]], "Contrib": [[561, "contrib"]], "Pythonic": [[563, "pythonic"]], "Strategy": [[564, "strategy"]], "Strategies": [[565, "strategies"]], "Utils": [[566, "utils"]], "Intel\u00ae Neural Compressor Bench": [[567, "intel-neural-compressor-bench"]], "Table of Contents": [[567, "table-of-contents"]], "Install Intel\u00ae Neural Compressor with Bench": [[567, "install-intel-neural-compressor-with-bench"]], "Option 1: Install from Binary": [[567, "option-1-install-from-binary"]], "Option 2: Install from Source": [[567, "option-2-install-from-source"]], "Start the Intel\u00ae Neural Compressor Bench": [[567, "start-the-intel-neural-compressor-bench"]], "Home Screen": [[567, "home-screen"]], "Create New Project": [[567, "create-new-project"]], "Predefined Model": [[567, "predefined-model"]], "Custom Model": [[567, "custom-model"]], "Display Model Graph": [[567, "display-model-graph"]], "Project List": [[567, "project-list"]], "Remove Project": [[567, "remove-project"]], "Develop Project": [[567, "develop-project"]], "Optimization Tab": [[567, "optimization-tab"]], "Optimization Table": [[567, "optimization-table"]], "Optimization Wizard": [[567, "optimization-wizard"]], "Editing Optimization Entries": [[567, "editing-optimization-entries"]], "Optimization Details": [[567, "optimization-details"]], "Benchmark Tab": [[567, "benchmark-tab"]], "Benchmark Table": [[567, "benchmark-table"]], "Benchmark Wizard": [[567, "benchmark-wizard"]], "Editing Benchmark Entries": [[567, "editing-benchmark-entries"]], "Benchmark Details": [[567, "benchmark-details"]], "Profiling Tab": [[567, "profiling-tab"]], "Profiling Table": [[567, "profiling-table"]], "Profiling Wizard": [[567, "profiling-wizard"]], "Editing Profiling Entries": [[567, "editing-profiling-entries"]], "Profiling Details": [[567, "profiling-details"]], "Diagnosis Tab": [[567, "diagnosis-tab"]], "Dataset Tab": [[567, "dataset-tab"]], "Dataset List": [[567, "dataset-list"]], "Dataset Wizard": [[567, "dataset-wizard"]], "Dataset Details": [[567, "dataset-details"]], "Custom Dataset": [[567, "custom-dataset"]], "Project Information": [[567, "project-information"]], "NAS demo": [[567, "nas-demo"]], "System Information": [[567, "system-information"]], "Security": [[567, "security"], [574, "security"]], "Benchmarking": [[568, "benchmarking"]], "Benchmark Support Matrix": [[568, "benchmark-support-matrix"]], "Get Started with Benchmark API": [[568, "get-started-with-benchmark-api"]], "DataLoader": [[569, "dataloader"]], "Supported Framework Dataloader Matrix": [[569, "supported-framework-dataloader-matrix"]], "Get Start with Dataloader API": [[569, "get-start-with-dataloader-api"]], "Config Dataloader in a Yaml File": [[569, "config-dataloader-in-a-yaml-file"]], "Create a User-specific Dataloader": [[569, "create-a-user-specific-dataloader"]], "Dataset": [[570, "dataset"]], "Supported Framework Dataset Matrix": [[570, "supported-framework-dataset-matrix"]], "TensorFlow": [[570, "tensorflow"], [584, "tensorflow"], [586, "tensorflow"], [618, "tensorflow"]], "PyTorch": [[570, "pytorch"], [584, "pytorch"], [586, "pytorch"], [614, "pytorch"]], "MXNet": [[570, "mxnet"], [584, "mxnet"], [618, "mxnet"]], "ONNXRT": [[570, "onnxrt"], [584, "onnxrt"], [618, "onnxrt"]], "Get start with Dataset API": [[570, "get-start-with-dataset-api"]], "Config dataloader in a yaml file": [[570, "config-dataloader-in-a-yaml-file"]], "User-specific dataset": [[570, "user-specific-dataset"]], "Design": [[571, "design"], [619, "design"], [619, "id1"], [619, "id3"], [619, "id5"], [619, "id7"], [619, "id9"], [619, "id11"], [619, "id13"], [619, "id15"], [619, "id17"], [619, "id19"]], "Architecture": [[571, "architecture"], [581, "architecture"]], "Workflow": [[571, "workflow"]], "Knowledge Distillation": [[572, "knowledge-distillation"]], "Intermediate Layer Knowledge Distillation": [[572, "intermediate-layer-knowledge-distillation"]], "Self Distillation": [[572, "self-distillation"]], "Distillation Support Matrix": [[572, "distillation-support-matrix"]], "Get Started with Distillation API": [[572, "get-started-with-distillation-api"]], "Distillation for Quantization": [[573, "distillation-for-quantization"]], "Distillation for Quantization Support Matrix": [[573, "distillation-for-quantization-support-matrix"]], "Get Started with Distillation for Quantization API": [[573, "get-started-with-distillation-for-quantization-api"]], "Distributed Training and Inference (Evaluation)": [[574, "distributed-training-and-inference-evaluation"]], "Supported Feature Matrix": [[574, "supported-feature-matrix"], [578, "supported-feature-matrix"], [581, "supported-feature-matrix"], [612, "supported-feature-matrix"], [613, "supported-feature-matrix"], [617, "supported-feature-matrix"], [621, "supported-feature-matrix"]], "Get Started with Distributed Training and Inference API": [[574, "get-started-with-distributed-training-and-inference-api"]], "Option 1: Pure Yaml Configuration": [[574, "option-1-pure-yaml-configuration"]], "Option 2: User Defined Training Function": [[574, "option-2-user-defined-training-function"]], "Horovodrun Execution": [[574, "horovodrun-execution"]], "PyTorch Examples:": [[574, "pytorch-examples"]], "TensorFlow Examples:": [[574, "tensorflow-examples"]], "Example List": [[575, "example-list"]], "Release Data": [[575, "release-data"]], "Export": [[576, "export"]], "Supported Framework Model Matrix": [[576, "supported-framework-model-matrix"], [587, "supported-framework-model-matrix"]], "FP32 Model Export": [[576, "fp32-model-export"]], "INT8 Model Export": [[576, "int8-model-export"]], "Appendix": [[576, "appendix"]], "Frequently Asked Questions": [[577, "frequently-asked-questions"]], "Common Build Issues": [[577, "common-build-issues"]], "Issue 1:": [[577, "issue-1"]], "Issue 2:": [[577, "issue-2"]], "Issue 3:": [[577, "issue-3"]], "Issue 4:": [[577, "issue-4"]], "Framework YAML Configuration Files": [[578, "framework-yaml-configuration-files"]], "Get started with Framework YAML Files": [[578, "get-started-with-framework-yaml-files"]], "Quick Samples": [[579, "quick-samples"]], "Quantization with JupyterLab Extension": [[579, "quantization-with-jupyterlab-extension"]], "Quantization with GUI": [[579, "quantization-with-gui"]], "Validated Models": [[579, "validated-models"], [622, "validated-models"]], "Incompatible changes between v1.2 and v1.1": [[580, "incompatible-changes-between-v1-2-and-v1-1"]], "User-facing APIs": [[580, "user-facing-apis"]], "Built-in transform/dataset/metric APIs": [[580, "built-in-transform-dataset-metric-apis"]], "Infrastructure of Intel\u00ae Neural Compressor": [[581, "infrastructure-of-intel-neural-compressor"]], "Linux Installation": [[582, "linux-installation"]], "Prerequisites": [[582, "prerequisites"], [582, "id1"]], "Install from Binary": [[582, "install-from-binary"], [582, "id2"]], "Install from Source": [[582, "install-from-source"], [582, "id3"]], "Install from AI Kit": [[582, "install-from-ai-kit"]], "Windows Installation": [[582, "windows-installation"]], "System Requirements": [[582, "system-requirements"]], "Validated Hardware Environment": [[582, "validated-hardware-environment"]], "Intel\u00ae Neural Compressor supports CPUs based on Intel 64 architecture or compatible processors:": [[582, "intel-neural-compressor-supports-cpus-based-on-intel-64-architecture-or-compatible-processors"]], "Intel\u00ae Neural Compressor supports GPUs built on Intel\u2019s Xe architecture:": [[582, "intel-neural-compressor-supports-gpus-built-on-intel-s-xe-architecture"]], "Intel\u00ae Neural Compressor quantized ONNX models support multiple hardware vendors through ONNX Runtime:": [[582, "intel-neural-compressor-quantized-onnx-models-support-multiple-hardware-vendors-through-onnx-runtime"]], "Validated Software Environment": [[582, "validated-software-environment"]], "Legal Information": [[583, "legal-information"]], "License": [[583, "license"]], "Citation": [[583, "citation"]], "Trademarks": [[583, "trademarks"]], "Metrics": [[584, "metrics"]], "Supported Built-in Metric Matrix": [[584, "supported-built-in-metric-matrix"]], "Get Start with Metrics": [[584, "get-start-with-metrics"]], "Support Single-metric and Multi-metrics": [[584, "support-single-metric-and-multi-metrics"]], "Build Custom Metric with Python API": [[584, "build-custom-metric-with-python-api"]], "Code Migration from Intel Neural Compressor 1.X to Intel Neural Compressor 2.X": [[585, "code-migration-from-intel-neural-compressor-1-x-to-intel-neural-compressor-2-x"]], "Model Quantization": [[585, "model-quantization"]], "Post-training Quantization": [[585, "post-training-quantization"]], "Quantization Aware Training": [[585, "quantization-aware-training"], [613, "quantization-aware-training"]], "Orchestration": [[585, "orchestration"]], "Mixed Precision": [[586, "mixed-precision"]], "Mixed Precision Support Matrix": [[586, "mixed-precision-support-matrix"]], "Get Started with Mixed Precision API": [[586, "get-started-with-mixed-precision-api"]], "Neural Coder": [[588, "neural-coder"], [605, "neural-coder"], [605, "id1"]], "What do we offer?": [[588, "what-do-we-offer"]], "Getting Started!": [[588, "getting-started"], [599, "getting-started"]], "Jupyter Lab Extension": [[588, "jupyter-lab-extension"]], "Python Launcher": [[588, "python-launcher"], [593, "python-launcher"]], "Python API": [[588, "python-api"]], "Contact": [[588, "contact"]], "AWS Amazon SageMaker Support": [[589, "aws-amazon-sagemaker-support"]], "Start Jupyter Lab 3": [[589, "start-jupyter-lab-3"]], "For SageMaker Studio": [[589, "for-sagemaker-studio"]], "For SageMaker Notebook instance": [[589, "for-sagemaker-notebook-instance"]], "Installation Guide": [[589, "installation-guide"]], "BigDL Nano Support": [[590, "bigdl-nano-support"]], "Example": [[590, "example"], [594, "example"], [607, "example"]], "Support Matrix": [[590, "support-matrix"]], "Intel CPU Platforms: Best Performance Setting": [[591, "intel-cpu-platforms-best-performance-setting"]], "Install MKL, OpenMP and JEMALLOC": [[591, "install-mkl-openmp-and-jemalloc"]], "Install NUMA Controller": [[591, "install-numa-controller"]], "Environment Variables": [[591, "environment-variables"]], "Frequency Governers": [[591, "frequency-governers"]], "Neural Coder as Python API": [[592, "neural-coder-as-python-api"]], "Enable": [[592, "enable"]], "Bench": [[592, "bench"]], "SuperBench": [[592, "superbench"]], "Quick-Start": [[593, "quick-start"]], "Launcher Arguments (Optional)": [[593, "launcher-arguments-optional"]], "Neural Coder for Quantization": [[594, "neural-coder-for-quantization"]], "Features Supported": [[594, "features-supported"]], "Models Supported": [[594, "models-supported"]], "Usage": [[594, "usage"], [617, "usage"], [617, "id1"], [619, "usage"], [619, "id2"], [619, "id4"], [619, "id6"], [619, "id8"], [619, "id10"], [619, "id12"], [619, "id14"], [619, "id16"], [619, "id18"], [619, "id20"]], "PyPI distribution:": [[594, "pypi-distribution"]], "Supported Optimization Features": [[595, "supported-optimization-features"]], "v0.4": [[596, "v0-4"]], "Highlights": [[596, "highlights"]], "Others": [[596, "others"]], "Changelog": [[597, "changelog"], [601, "changelog"]], "neural_compressor_ext_lab": [[598, "neural-compressor-ext-lab"]], "Requirements": [[598, "requirements"], [602, "requirements"]], "Install": [[598, "install"], [602, "install"]], "Uninstall": [[598, "uninstall"], [602, "uninstall"]], "Contributing": [[598, "contributing"], [602, "contributing"]], "Development install": [[598, "development-install"], [602, "development-install"]], "Development uninstall": [[598, "development-uninstall"], [602, "development-uninstall"]], "Packaging the extension": [[598, "packaging-the-extension"], [602, "packaging-the-extension"]], "Intel\u00ae Neural Compressor as JupyterLab Extension": [[599, "intel-neural-compressor-as-jupyterlab-extension"]], "Auto-enable a feature": [[599, "auto-enable-a-feature"]], "Or let us help you auto-select the best feature": [[599, "or-let-us-help-you-auto-select-the-best-feature"]], "Pre-requisites": [[599, "pre-requisites"]], "Making a new release of neural_compressor_ext_lab": [[600, "making-a-new-release-of-neural-compressor-ext-lab"]], "Manual release": [[600, "manual-release"], [603, "manual-release"]], "Python package": [[600, "python-package"], [603, "python-package"]], "NPM package": [[600, "npm-package"], [603, "npm-package"]], "Automated releases with the Jupyter Releaser": [[600, "automated-releases-with-the-jupyter-releaser"], [603, "automated-releases-with-the-jupyter-releaser"]], "Publishing to conda-forge": [[600, "publishing-to-conda-forge"], [603, "publishing-to-conda-forge"]], "neural_compressor_ext_lab_alibaba": [[602, "neural-compressor-ext-lab-alibaba"]], "Making a new release of neural_compressor_ext_lab_alibaba": [[603, "making-a-new-release-of-neural-compressor-ext-lab-alibaba"]], "Change Log": [[604, "change-log"]], "[Unreleased]": [[604, "unreleased"]], "Background Introduction": [[605, "background-introduction"]], "Neural Coder Extension in VSCode": [[605, "neural-coder-extension-in-vscode"]], "Neural Coder Extension Usage": [[605, "neural-coder-extension-usage"]], "1. Open": [[605, "open"]], "2. Search": [[605, "search"]], "3. Setting": [[605, "setting"]], "4. Icon": [[605, "icon"]], "5. optimization (quantization)": [[605, "optimization-quantization"]], "5.1 Enable": [[605, "enable"]], "5.2 Auto": [[605, "auto"]], "Welcome to your VS Code Extension": [[606, "welcome-to-your-vs-code-extension"]], "What\u2019s in the folder": [[606, "what-s-in-the-folder"]], "Setup": [[606, "setup"]], "Get up and running straight away": [[606, "get-up-and-running-straight-away"]], "Make changes": [[606, "make-changes"]], "Explore the API": [[606, "explore-the-api"]], "Run tests": [[606, "run-tests"]], "Go further": [[606, "go-further"]], "Single Objective": [[607, "single-objective"]], "Multiple Objectives": [[607, "multiple-objectives"]], "Objective Support Matrix": [[607, "objective-support-matrix"]], "Get Started with Objective API": [[607, "get-started-with-objective-api"]], "Config Single Objective": [[607, "config-single-objective"]], "Config Multiple Objectives": [[607, "config-multiple-objectives"]], "Optimization Orchestration": [[608, "optimization-orchestration"]], "One-shot": [[608, "one-shot"]], "Orchestration Support Matrix": [[608, "orchestration-support-matrix"]], "Get Started with Orchestration API": [[608, "get-started-with-orchestration-api"]], "SYSTEM CONFIGURATION": [[609, "system-configuration"]], "Neural Network Pruning": [[610, "neural-network-pruning"]], "Pruning Patterns": [[610, "pruning-patterns"]], "Pruning Criteria": [[610, "pruning-criteria"]], "Pruning Schedule": [[610, "pruning-schedule"]], "Pruning Types": [[610, "pruning-types"]], "Pruning Scope": [[610, "pruning-scope"]], "Sparsity Decay Types": [[610, "sparsity-decay-types"]], "Regularization": [[610, "regularization"]], "Pruning Support Matrix": [[610, "pruning-support-matrix"]], "Get Started with Pruning API": [[610, "get-started-with-pruning-api"]], "Sparse Model Deployment": [[610, "sparse-model-deployment"]], "Reference": [[610, "reference"], [613, "reference"]], "Full Publications/Events (56)": [[611, "full-publications-events-56"]], "2023 (3)": [[611, "id1"]], "2022 (34)": [[611, "id2"]], "2021 (15)": [[611, "id3"]], "2018 - 2020 (4)": [[611, "id4"]], "Pythonic Style Access for Configurations": [[612, "pythonic-style-access-for-configurations"]], "Pythonic API for User Configurations": [[612, "pythonic-api-for-user-configurations"], [612, "id1"]], "Pythonic API for Framework Configurations": [[612, "pythonic-api-for-framework-configurations"], [612, "id2"]], "Get Started with Pythonic API for Configurations": [[612, "get-started-with-pythonic-api-for-configurations"]], "NAS": [[612, "nas"]], "Quantization Introduction": [[613, "quantization-introduction"]], "Quantization Fundamentals": [[613, "quantization-fundamentals"]], "Quantization Support Matrix": [[613, "quantization-support-matrix"]], "Quantization Scheme in TensorFlow": [[613, "quantization-scheme-in-tensorflow"]], "Quantization Scheme in PyTorch": [[613, "quantization-scheme-in-pytorch"]], "Quantization Scheme in IPEX": [[613, "quantization-scheme-in-ipex"]], "Quantization Scheme in MXNet": [[613, "quantization-scheme-in-mxnet"]], "Quantization Scheme in ONNX Runtime": [[613, "quantization-scheme-in-onnx-runtime"]], "Quantization Approaches": [[613, "quantization-approaches"]], "Accuracy Aware Tuning": [[613, "accuracy-aware-tuning"]], "Get Started": [[613, "get-started"]], "Turn OFF Auto Mixed Precision during Quantization": [[614, "turn-off-auto-mixed-precision-during-quantization"]], "Tensorflow": [[614, "tensorflow"]], "Release": [[615, "release"]], "Release Notes": [[615, "release-notes"]], "Known Issues": [[615, "known-issues"]], "Incompatible Changes": [[615, "incompatible-changes"]], "SigOpt Strategy": [[616, "sigopt-strategy"]], "Preparation": [[616, "preparation"]], "SigOpt Platform": [[616, "sigopt-platform"]], "Neural Compressor Configuration": [[616, "neural-compressor-configuration"]], "Performance": [[616, "performance"]], "Benefit of SigOpt Strategy": [[616, "benefit-of-sigopt-strategy"]], "Performance Comparison of Different Strategies": [[616, "performance-comparison-of-different-strategies"]], "TensorBoard": [[617, "tensorboard"]], "Get Started with TensorBoard": [[617, "get-started-with-tensorboard"]], "PyTorch TensorBoard": [[617, "pytorch-tensorboard"]], "TensorFlow Tensorboard": [[617, "tensorflow-tensorboard"]], "PyTorch Examples": [[617, "pytorch-examples"]], "TensorFlow Examples": [[617, "tensorflow-examples"]], "Transform": [[618, "transform"]], "Transform Support List": [[618, "transform-support-list"]], "Pytorch": [[618, "pytorch"]], "Tuning Strategies": [[619, "tuning-strategies"]], "Strategy Design": [[619, "strategy-design"]], "Tuning Space": [[619, "tuning-space"]], "Exit Policy": [[619, "exit-policy"]], "Accuracy Criteria": [[619, "accuracy-criteria"]], "Tuning Process": [[619, "tuning-process"]], "Tuning Algorithms": [[619, "tuning-algorithms"]], "Conservative Tuning": [[619, "conservative-tuning"]], "Basic": [[619, "basic"]], "MSE": [[619, "mse"]], "MSE_V2": [[619, "mse-v2"]], "HAWQ_V2": [[619, "hawq-v2"]], "Bayesian": [[619, "bayesian"]], "Exhaustive": [[619, "exhaustive"]], "Random": [[619, "random"]], "SigOpt": [[619, "sigopt"]], "TPE": [[619, "tpe"]], "Distributed Tuning": [[619, "distributed-tuning"]], "Customize a New Tuning Strategy": [[619, "customize-a-new-tuning-strategy"]], "User Guide": [[620, "user-guide"]], "User YAML Configuration Files": [[621, "user-yaml-configuration-files"]], "Get started with User YAML Files": [[621, "get-started-with-user-yaml-files"]], "Validated Quantization Examples": [[622, "validated-quantization-examples"]], "TensorFlow Models with Intel TensorFlow 2.11.0": [[622, "tensorflow-models-with-intel-tensorflow-2-11-0"]], "PyTorch Models with Torch 1.13.0+cpu in PTQ Mode": [[622, "pytorch-models-with-torch-1-13-0-cpu-in-ptq-mode"]], "PyTorch Models with Torch 1.13.0+cpu in QAT Mode": [[622, "pytorch-models-with-torch-1-13-0-cpu-in-qat-mode"]], "PyTorch Models with Torch and Intel\u00ae Extension for PyTorch* 1.13.0+cpu": [[622, "pytorch-models-with-torch-and-intel-extension-for-pytorch-1-13-0-cpu"]], "ONNX Models with ONNX Runtime 1.13.1": [[622, "onnx-models-with-onnx-runtime-1-13-1"]], "MXNet Models with MXNet 1.9.1": [[622, "mxnet-models-with-mxnet-1-9-1"]], "Validated Pruning Examples": [[622, "validated-pruning-examples"]], "Validated Knowledge Distillation Examples": [[622, "validated-knowledge-distillation-examples"]], "Validated ONNX QDQ INT8 Models on Multiple Hardware through ONNX Runtime": [[622, "validated-onnx-qdq-int8-models-on-multiple-hardware-through-onnx-runtime"]]}, "indexentries": {"644ec953a7dc_pruning_support": [[0, "module-644ec953a7dc_pruning_support"]], "module": [[0, "module-644ec953a7dc_pruning_support"], [1, "module-6ece06672ed3_v1_14"], [2, "module-6f0d0f71d92e_v1_13"], [3, "module-9e89549a08c8_v1_11"], [4, "module-block_mask"], [5, "module-env"], [6, "module-neural_compressor.adaptor.adaptor"], [7, "module-neural_compressor.adaptor"], [8, "module-neural_compressor.adaptor.keras"], [9, "module-neural_compressor.adaptor.keras_utils.conv2d"], [10, "module-neural_compressor.adaptor.keras_utils.dense"], [11, "module-neural_compressor.adaptor.keras_utils"], [12, "module-neural_compressor.adaptor.keras_utils.quantizer"], [13, "module-neural_compressor.adaptor.mxnet"], [14, "module-neural_compressor.adaptor.mxnet_utils"], [15, "module-neural_compressor.adaptor.mxnet_utils.util"], [16, "module-neural_compressor.adaptor.onnxrt"], [17, "module-neural_compressor.adaptor.ox_utils.calibration"], [18, "module-neural_compressor.adaptor.ox_utils"], [19, "module-neural_compressor.adaptor.ox_utils.operators.activation"], [20, "module-neural_compressor.adaptor.ox_utils.operators.argmax"], [21, "module-neural_compressor.adaptor.ox_utils.operators.attention"], [22, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"], [23, "module-neural_compressor.adaptor.ox_utils.operators.concat"], [24, "module-neural_compressor.adaptor.ox_utils.operators.conv"], [25, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"], [26, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"], [27, "module-neural_compressor.adaptor.ox_utils.operators.gather"], [28, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"], [29, "module-neural_compressor.adaptor.ox_utils.operators.gemm"], [30, "module-neural_compressor.adaptor.ox_utils.operators"], [31, "module-neural_compressor.adaptor.ox_utils.operators.lstm"], [32, "module-neural_compressor.adaptor.ox_utils.operators.matmul"], [33, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"], [34, "module-neural_compressor.adaptor.ox_utils.operators.ops"], [35, "module-neural_compressor.adaptor.ox_utils.operators.pad"], [36, "module-neural_compressor.adaptor.ox_utils.operators.pooling"], [37, "module-neural_compressor.adaptor.ox_utils.operators.resize"], [38, "module-neural_compressor.adaptor.ox_utils.operators.split"], [39, "module-neural_compressor.adaptor.ox_utils.quantizer"], [40, "module-neural_compressor.adaptor.ox_utils.util"], [41, "module-neural_compressor.adaptor.pytorch"], [42, "module-neural_compressor.adaptor.query"], [43, "module-neural_compressor.adaptor.tensorflow"], [44, "module-neural_compressor.adaptor.tf_utils.graph_converter"], [45, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"], [46, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"], [47, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"], [48, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"], [49, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"], [50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"], [51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"], [52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"], [53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"], [54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"], [55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"], [56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"], [57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"], [58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"], [59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"], [60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"], [61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"], [62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"], [63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"], [64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"], [65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"], [66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"], [67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"], [68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"], [69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"], [70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"], [71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"], [72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"], [73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"], [74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"], [75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"], [76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"], [77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"], [78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"], [79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"], [80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"], [81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"], [82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"], [83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"], [84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"], [85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"], [86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"], [87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"], [88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"], [89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"], [90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"], [91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"], [92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"], [93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"], [94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"], [95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"], [96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"], [97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"], [98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"], [99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"], [100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"], [101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"], [102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"], [103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"], [104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"], [105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"], [106, "module-neural_compressor.adaptor.tf_utils.graph_util"], [107, "module-neural_compressor.adaptor.tf_utils"], [108, "module-neural_compressor.adaptor.tf_utils.quantize_graph"], [109, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"], [110, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"], [111, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"], [112, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"], [113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"], [114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"], [115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"], [116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"], [117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"], [118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"], [119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"], [120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"], [121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"], [122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"], [123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"], [124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"], [125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"], [126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"], [127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"], [128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"], [129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"], [130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"], [131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"], [132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"], [133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"], [134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"], [135, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"], [136, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"], [137, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"], [138, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"], [139, "module-neural_compressor.adaptor.tf_utils.transform_graph"], [140, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"], [141, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"], [142, "module-neural_compressor.adaptor.tf_utils.util"], [143, "module-neural_compressor.adaptor.torch_utils.bf16_convert"], [144, "module-neural_compressor.adaptor.torch_utils.hawq_metric"], [145, "module-neural_compressor.adaptor.torch_utils"], [146, "module-neural_compressor.adaptor.torch_utils.smooth_quant"], [147, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"], [148, "module-neural_compressor.adaptor.torch_utils.util"], [149, "module-neural_compressor.algorithm.algorithm"], [150, "module-neural_compressor.algorithm.fast_bias_correction"], [151, "module-neural_compressor.algorithm"], [152, "module-neural_compressor.algorithm.smooth_quant"], [153, "module-neural_compressor.algorithm.weight_correction"], [154, "module-neural_compressor.benchmark"], [155, "module-neural_compressor.compression.callbacks"], [156, "module-neural_compressor.compression.distillation.criterions"], [157, "module-neural_compressor.compression.distillation"], [158, "module-neural_compressor.compression"], [159, "module-neural_compressor.compression.pruner.criteria"], [160, "module-neural_compressor.compression.pruner"], [161, "module-neural_compressor.compression.pruner.patterns"], [162, "module-neural_compressor.compression.pruner.pruners"], [163, "module-neural_compressor.compression.pruner.regs"], [164, "module-neural_compressor.compression.pruner.schedulers"], [165, "module-neural_compressor.compression.pruner.utils"], [166, "module-neural_compressor.conf.config"], [167, "module-neural_compressor.conf.dotdict"], [168, "module-neural_compressor.conf"], [169, "module-neural_compressor.conf.pythonic_config"], [170, "module-neural_compressor.config"], [171, "module-neural_compressor.contrib"], [172, "module-neural_compressor.contrib.strategy"], [173, "module-neural_compressor.contrib.strategy.sigopt"], [174, "module-neural_compressor.contrib.strategy.tpe"], [175, "module-neural_compressor.data.dataloaders.base_dataloader"], [176, "module-neural_compressor.data.dataloaders.dataloader"], [177, "module-neural_compressor.data.dataloaders.default_dataloader"], [178, "module-neural_compressor.data.dataloaders.fetcher"], [179, "module-neural_compressor.data.dataloaders"], [180, "module-neural_compressor.data.dataloaders.mxnet_dataloader"], [181, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"], [182, "module-neural_compressor.data.dataloaders.pytorch_dataloader"], [183, "module-neural_compressor.data.dataloaders.sampler"], [184, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"], [185, "module-neural_compressor.data.datasets.bert_dataset"], [186, "module-neural_compressor.data.datasets.coco_dataset"], [187, "module-neural_compressor.data.datasets.dataset"], [188, "module-neural_compressor.data.datasets.dummy_dataset"], [189, "module-neural_compressor.data.datasets.dummy_dataset_v2"], [190, "module-neural_compressor.data.datasets.imagenet_dataset"], [191, "module-neural_compressor.data.datasets"], [192, "module-neural_compressor.data.datasets.style_transfer_dataset"], [193, "module-neural_compressor.data.filters.coco_filter"], [194, "module-neural_compressor.data.filters.filter"], [195, "module-neural_compressor.data.filters"], [196, "module-neural_compressor.data"], [197, "module-neural_compressor.data.transforms.coco_transform"], [198, "module-neural_compressor.data.transforms.imagenet_transform"], [199, "module-neural_compressor.data.transforms"], [200, "module-neural_compressor.data.transforms.postprocess"], [201, "module-neural_compressor.data.transforms.tokenization"], [202, "module-neural_compressor.data.transforms.transform"], [203, "module-neural_compressor.experimental.benchmark"], [204, "module-neural_compressor.experimental.common.criterion"], [205, "module-neural_compressor.experimental.common.dataloader"], [206, "module-neural_compressor.experimental.common"], [207, "module-neural_compressor.experimental.common.metric"], [208, "module-neural_compressor.experimental.common.model"], [209, "module-neural_compressor.experimental.common.optimizer"], [210, "module-neural_compressor.experimental.common.postprocess"], [211, "module-neural_compressor.experimental.common.torch_utils"], [212, "module-neural_compressor.experimental.component"], [213, "module-neural_compressor.experimental.compression"], [214, "module-neural_compressor.experimental.compression.pruning"], [215, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"], [216, "module-neural_compressor.experimental.data.dataloaders.dataloader"], [217, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"], [218, "module-neural_compressor.experimental.data.dataloaders.fetcher"], [219, "module-neural_compressor.experimental.data.dataloaders"], [220, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"], [221, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"], [222, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"], [223, "module-neural_compressor.experimental.data.dataloaders.sampler"], [224, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"], [225, "module-neural_compressor.experimental.data.datasets.bert_dataset"], [226, "module-neural_compressor.experimental.data.datasets.coco_dataset"], [227, "module-neural_compressor.experimental.data.datasets.dataset"], [228, "module-neural_compressor.experimental.data.datasets.dummy_dataset"], [229, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"], [230, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"], [231, "module-neural_compressor.experimental.data.datasets"], [232, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"], [233, "module-neural_compressor.experimental.data.filters.coco_filter"], [234, "module-neural_compressor.experimental.data.filters.filter"], [235, "module-neural_compressor.experimental.data.filters"], [236, "module-neural_compressor.experimental.data"], [237, "module-neural_compressor.experimental.data.transforms.imagenet_transform"], [238, "module-neural_compressor.experimental.data.transforms"], [239, "module-neural_compressor.experimental.data.transforms.tokenization"], [240, "module-neural_compressor.experimental.data.transforms.transform"], [241, "module-neural_compressor.experimental.distillation"], [242, "module-neural_compressor.experimental.export"], [243, "module-neural_compressor.experimental.export.qlinear2qdq"], [244, "module-neural_compressor.experimental.export.tf2onnx"], [245, "module-neural_compressor.experimental.export.torch2onnx"], [246, "module-neural_compressor.experimental.export.utils"], [247, "module-neural_compressor.experimental.graph_optimization"], [248, "module-neural_compressor.experimental"], [249, "module-neural_compressor.experimental.metric.bleu"], [250, "module-neural_compressor.experimental.metric.bleu_util"], [251, "module-neural_compressor.experimental.metric.coco_label_map"], [252, "module-neural_compressor.experimental.metric.coco_tools"], [253, "module-neural_compressor.experimental.metric.evaluate_squad"], [254, "module-neural_compressor.experimental.metric.f1"], [255, "module-neural_compressor.experimental.metric"], [256, "module-neural_compressor.experimental.metric.metric"], [257, "module-neural_compressor.experimental.mixed_precision"], [258, "module-neural_compressor.experimental.model_conversion"], [259, "module-neural_compressor.experimental.nas.basic_nas"], [260, "module-neural_compressor.experimental.nas.dynas"], [261, "module-neural_compressor.experimental.nas"], [262, "module-neural_compressor.experimental.nas.nas"], [263, "module-neural_compressor.experimental.nas.nas_utils"], [264, "module-neural_compressor.experimental.nas.search_algorithms"], [265, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"], [266, "module-neural_compressor.experimental.pruner_legacy.group_lasso"], [267, "module-neural_compressor.experimental.pruner_legacy"], [268, "module-neural_compressor.experimental.pruner_legacy.magnitude"], [269, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"], [270, "module-neural_compressor.experimental.pruner_legacy.pruner"], [271, "module-neural_compressor.experimental.pruning"], [272, "module-neural_compressor.experimental.pruning_recipes"], [273, "module-neural_compressor.experimental.pruning_recipes.patterns"], [274, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"], [275, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"], [276, "module-neural_compressor.experimental.pruning_v2"], [277, "module-neural_compressor.experimental.pytorch_pruner"], [278, "module-neural_compressor.experimental.pytorch_pruner.logger"], [279, "module-neural_compressor.experimental.pytorch_pruner.patterns"], [280, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"], [281, "module-neural_compressor.experimental.pytorch_pruner.pruner"], [282, "module-neural_compressor.experimental.pytorch_pruner.pruning"], [283, "module-neural_compressor.experimental.pytorch_pruner.scheduler"], [284, "module-neural_compressor.experimental.quantization"], [285, "module-neural_compressor.experimental.scheduler"], [286, "module-neural_compressor"], [287, "module-neural_compressor.metric.bleu"], [288, "module-neural_compressor.metric.bleu_util"], [289, "module-neural_compressor.metric.coco_label_map"], [290, "module-neural_compressor.metric.coco_tools"], [291, "module-neural_compressor.metric.evaluate_squad"], [292, "module-neural_compressor.metric.f1"], [293, "module-neural_compressor.metric"], [294, "module-neural_compressor.metric.metric"], [295, "module-neural_compressor.mix_precision"], [296, "module-neural_compressor.model.base_model"], [297, "module-neural_compressor.model"], [298, "module-neural_compressor.model.keras_model"], [299, "module-neural_compressor.model.model"], [300, "module-neural_compressor.model.mxnet_model"], [301, "module-neural_compressor.model.nets_factory"], [302, "module-neural_compressor.model.onnx_model"], [303, "module-neural_compressor.model.tensorflow_model"], [304, "module-neural_compressor.model.torch_model"], [305, "module-neural_compressor.objective"], [306, "module-neural_compressor.quantization"], [307, "module-neural_compressor.strategy.auto"], [308, "module-neural_compressor.strategy.auto_mixed_precision"], [309, "module-neural_compressor.strategy.basic"], [310, "module-neural_compressor.strategy.bayesian"], [311, "module-neural_compressor.strategy.conservative"], [312, "module-neural_compressor.strategy.exhaustive"], [313, "module-neural_compressor.strategy.hawq_v2"], [314, "module-neural_compressor.strategy"], [315, "module-neural_compressor.strategy.mse"], [316, "module-neural_compressor.strategy.mse_v2"], [317, "module-neural_compressor.strategy.random"], [318, "module-neural_compressor.strategy.strategy"], [319, "module-neural_compressor.strategy.utils.constant"], [320, "module-neural_compressor.strategy.utils"], [321, "module-neural_compressor.strategy.utils.tuning_sampler"], [322, "module-neural_compressor.strategy.utils.tuning_space"], [323, "module-neural_compressor.strategy.utils.tuning_structs"], [324, "module-neural_compressor.strategy.utils.utility"], [325, "module-neural_compressor.training"], [326, "module-neural_compressor.utils.collect_layer_histogram"], [327, "module-neural_compressor.utils.constant"], [328, "module-neural_compressor.utils.create_obj_from_config"], [329, "module-neural_compressor.utils"], [330, "module-neural_compressor.utils.kl_divergence"], [331, "module-neural_compressor.utils.load_huggingface"], [332, "module-neural_compressor.utils.logger"], [333, "module-neural_compressor.utils.options"], [334, "module-neural_compressor.utils.pytorch"], [335, "module-neural_compressor.utils.utility"], [336, "module-neural_compressor.ux.components.benchmark.benchmark"], [337, "module-neural_compressor.ux.components.benchmark.benchmark_model"], [338, "module-neural_compressor.ux.components.benchmark.execute_benchmark"], [339, "module-neural_compressor.ux.components.benchmark"], [340, "module-neural_compressor.ux.components.config_generator.benchmark_config_generator"], [341, "module-neural_compressor.ux.components.config_generator.config_generator"], [342, "module-neural_compressor.ux.components.config_generator.graph_optimization_config_generator"], [343, "module-neural_compressor.ux.components.config_generator"], [344, "module-neural_compressor.ux.components.config_generator.mixed_precision_config_generator"], [345, "module-neural_compressor.ux.components.config_generator.profiling_config_generator"], [346, "module-neural_compressor.ux.components.config_generator.pruning_config_generator"], [347, "module-neural_compressor.ux.components.config_generator.quantization_config_generator"], [348, "module-neural_compressor.ux.components.configuration_wizard.configuration_parser"], [349, "module-neural_compressor.ux.components.configuration_wizard.get_boundary_nodes"], [350, "module-neural_compressor.ux.components.configuration_wizard.get_configuration"], [351, "module-neural_compressor.ux.components.configuration_wizard"], [352, "module-neural_compressor.ux.components.configuration_wizard.params_feeder"], [353, "module-neural_compressor.ux.components.configuration_wizard.pruning_config_parser"], [354, "module-neural_compressor.ux.components.db_manager.db_manager"], [355, "module-neural_compressor.ux.components.db_manager.db_models.benchmark"], [356, "module-neural_compressor.ux.components.db_manager.db_models.benchmark_result"], [357, "module-neural_compressor.ux.components.db_manager.db_models.dataloader"], [358, "module-neural_compressor.ux.components.db_manager.db_models.dataset"], [359, "module-neural_compressor.ux.components.db_manager.db_models.domain"], [360, "module-neural_compressor.ux.components.db_manager.db_models.domain_flavour"], [361, "module-neural_compressor.ux.components.db_manager.db_models.example"], [362, "module-neural_compressor.ux.components.db_manager.db_models.framework"], [363, "module-neural_compressor.ux.components.db_manager.db_models"], [364, "module-neural_compressor.ux.components.db_manager.db_models.metric"], [365, "module-neural_compressor.ux.components.db_manager.db_models.model"], [366, "module-neural_compressor.ux.components.db_manager.db_models.optimization"], [367, "module-neural_compressor.ux.components.db_manager.db_models.optimization_type"], [368, "module-neural_compressor.ux.components.db_manager.db_models.precision"], [369, "module-neural_compressor.ux.components.db_manager.db_models.profiling"], [370, "module-neural_compressor.ux.components.db_manager.db_models.profiling_result"], [371, "module-neural_compressor.ux.components.db_manager.db_models.project"], [372, "module-neural_compressor.ux.components.db_manager.db_models.pruning_details"], [373, "module-neural_compressor.ux.components.db_manager.db_models.transform"], [374, "module-neural_compressor.ux.components.db_manager.db_models.tuning_details"], [375, "module-neural_compressor.ux.components.db_manager.db_models.tuning_history"], [376, "module-neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface"], [377, "module-neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface"], [378, "module-neural_compressor.ux.components.db_manager.db_operations.db_operations"], [379, "module-neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface"], [380, "module-neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface"], [381, "module-neural_compressor.ux.components.db_manager.db_operations.examples_api_interface"], [382, "module-neural_compressor.ux.components.db_manager.db_operations"], [383, "module-neural_compressor.ux.components.db_manager.db_operations.model_api_interface"], [384, "module-neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface"], [385, "module-neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface"], [386, "module-neural_compressor.ux.components.db_manager.db_operations.project_api_interface"], [387, "module-neural_compressor.ux.components.db_manager"], [388, "module-neural_compressor.ux.components.db_manager.params_interfaces"], [389, "module-neural_compressor.ux.components.db_manager.utils"], [390, "module-neural_compressor.ux.components.diagnosis.diagnosis"], [391, "module-neural_compressor.ux.components.diagnosis.factory"], [392, "module-neural_compressor.ux.components.diagnosis"], [393, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis"], [394, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis"], [395, "module-neural_compressor.ux.components.diagnosis.op_details"], [396, "module-neural_compressor.ux.components.diagnosis.op_entry"], [397, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis"], [398, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis"], [399, "module-neural_compressor.ux.components.file_browser.file_browser"], [400, "module-neural_compressor.ux.components.file_browser"], [401, "module-neural_compressor.ux.components.graph.attribute"], [402, "module-neural_compressor.ux.components.graph.collapser"], [403, "module-neural_compressor.ux.components.graph.edge"], [404, "module-neural_compressor.ux.components.graph.graph"], [405, "module-neural_compressor.ux.components.graph.graph_reader"], [406, "module-neural_compressor.ux.components.graph"], [407, "module-neural_compressor.ux.components.graph.node"], [408, "module-neural_compressor.ux.components.graph.reader"], [409, "module-neural_compressor.ux.components.graph.reader.onnxrt_reader"], [410, "module-neural_compressor.ux.components.graph.reader.tensorflow_reader"], [411, "module-neural_compressor.ux.components"], [412, "module-neural_compressor.ux.components.jobs_management"], [413, "module-neural_compressor.ux.components.jobs_management.jobs_control_queue"], [414, "module-neural_compressor.ux.components.jobs_management.jobs_manager"], [415, "module-neural_compressor.ux.components.jobs_management.request"], [416, "module-neural_compressor.ux.components.manage_workspace"], [417, "module-neural_compressor.ux.components.model.domain"], [418, "module-neural_compressor.ux.components.model"], [419, "module-neural_compressor.ux.components.model.model"], [420, "module-neural_compressor.ux.components.model.model_type_getter"], [421, "module-neural_compressor.ux.components.model.onnxrt"], [422, "module-neural_compressor.ux.components.model.onnxrt.model"], [423, "module-neural_compressor.ux.components.model.pytorch"], [424, "module-neural_compressor.ux.components.model.pytorch.model"], [425, "module-neural_compressor.ux.components.model.repository"], [426, "module-neural_compressor.ux.components.model.shape"], [427, "module-neural_compressor.ux.components.model.tensorflow.frozen_pb"], [428, "module-neural_compressor.ux.components.model.tensorflow"], [429, "module-neural_compressor.ux.components.model.tensorflow.keras"], [430, "module-neural_compressor.ux.components.model.tensorflow.meta_graph"], [431, "module-neural_compressor.ux.components.model.tensorflow.model"], [432, "module-neural_compressor.ux.components.model.tensorflow.saved_model"], [433, "module-neural_compressor.ux.components.model.tensorflow.utils"], [434, "module-neural_compressor.ux.components.model_zoo.download_config"], [435, "module-neural_compressor.ux.components.model_zoo.download_model"], [436, "module-neural_compressor.ux.components.model_zoo.downloader"], [437, "module-neural_compressor.ux.components.model_zoo"], [438, "module-neural_compressor.ux.components.model_zoo.list_models"], [439, "module-neural_compressor.ux.components.names_mapper"], [440, "module-neural_compressor.ux.components.names_mapper.names_mapper"], [441, "module-neural_compressor.ux.components.optimization.execute_optimization"], [442, "module-neural_compressor.ux.components.optimization.factory"], [443, "module-neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization"], [444, "module-neural_compressor.ux.components.optimization.graph_optimizer"], [445, "module-neural_compressor.ux.components.optimization.graph_optimizer.optimize_model"], [446, "module-neural_compressor.ux.components.optimization"], [447, "module-neural_compressor.ux.components.optimization.mixed_precision"], [448, "module-neural_compressor.ux.components.optimization.mixed_precision.mixed_precision"], [449, "module-neural_compressor.ux.components.optimization.mixed_precision.optimize_model"], [450, "module-neural_compressor.ux.components.optimization.neural_coder_optimization"], [451, "module-neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model"], [452, "module-neural_compressor.ux.components.optimization.optimization"], [453, "module-neural_compressor.ux.components.optimization.pruning"], [454, "module-neural_compressor.ux.components.optimization.pruning.optimize_model"], [455, "module-neural_compressor.ux.components.optimization.pruning.pruning"], [456, "module-neural_compressor.ux.components.optimization.tune"], [457, "module-neural_compressor.ux.components.optimization.tune.tune_model"], [458, "module-neural_compressor.ux.components.optimization.tune.tuning"], [459, "module-neural_compressor.ux.components.optimization.tuning_history"], [460, "module-neural_compressor.ux.components.profiling.execute_profiling"], [461, "module-neural_compressor.ux.components.profiling.factory"], [462, "module-neural_compressor.ux.components.profiling"], [463, "module-neural_compressor.ux.components.profiling.profile_model"], [464, "module-neural_compressor.ux.components.profiling.profiler"], [465, "module-neural_compressor.ux.components.profiling.profiling"], [466, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.factory"], [467, "module-neural_compressor.ux.components.profiling.tensorflow_profiler"], [468, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.profiler"], [469, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.utils"], [470, "module-neural_compressor.ux.inc_bench"], [471, "module-neural_compressor.ux"], [472, "module-neural_compressor.ux.utils.consts"], [473, "module-neural_compressor.ux.utils.environment"], [474, "module-neural_compressor.ux.utils.exceptions"], [475, "module-neural_compressor.ux.utils.executor"], [476, "module-neural_compressor.ux.utils.expiring_dict"], [477, "module-neural_compressor.ux.utils.github_info"], [478, "module-neural_compressor.ux.utils.hw_info"], [479, "module-neural_compressor.ux.utils"], [480, "module-neural_compressor.ux.utils.json_serializer"], [481, "module-neural_compressor.ux.utils.logger"], [482, "module-neural_compressor.ux.utils.parser"], [483, "module-neural_compressor.ux.utils.proc"], [484, "module-neural_compressor.ux.utils.processes"], [485, "module-neural_compressor.ux.utils.singleton"], [486, "module-neural_compressor.ux.utils.status_updates"], [487, "module-neural_compressor.ux.utils.templates"], [488, "module-neural_compressor.ux.utils.templates.metric"], [489, "module-neural_compressor.ux.utils.templates.workdir"], [490, "module-neural_compressor.ux.utils.utils"], [491, "module-neural_compressor.ux.utils.workload.config"], [492, "module-neural_compressor.ux.utils.workload.dataloader"], [493, "module-neural_compressor.ux.utils.workload.evaluation"], [494, "module-neural_compressor.ux.utils.workload.graph_optimization"], [495, "module-neural_compressor.ux.utils.workload"], [496, "module-neural_compressor.ux.utils.workload.mixed_precision"], [497, "module-neural_compressor.ux.utils.workload.model"], [498, "module-neural_compressor.ux.utils.workload.pruning"], [499, "module-neural_compressor.ux.utils.workload.quantization"], [500, "module-neural_compressor.ux.utils.workload.tuning"], [501, "module-neural_compressor.ux.utils.yaml_utils"], [502, "module-neural_compressor.ux.web.communication"], [503, "module-neural_compressor.ux.web.configuration"], [504, "module-neural_compressor.ux.web.exceptions"], [505, "module-neural_compressor.ux.web"], [506, "module-neural_compressor.ux.web.router"], [507, "module-neural_compressor.ux.web.server"], [508, "module-neural_compressor.ux.web.service.benchmark"], [509, "module-neural_compressor.ux.web.service.history_snapshot_parser"], [510, "module-neural_compressor.ux.web.service"], [511, "module-neural_compressor.ux.web.service.model"], [512, "module-neural_compressor.ux.web.service.optimization"], [513, "module-neural_compressor.ux.web.service.profiling"], [514, "module-neural_compressor.ux.web.service.request_data_processor"], [515, "module-neural_compressor.ux.web.service.response_generator"], [516, "module-neural_compressor.ux.web.service.workload"], [517, "module-neural_compressor.version"], [544, "module-neural_compressor.experimental.metric.bleu"]], "6ece06672ed3_v1_14": [[1, "module-6ece06672ed3_v1_14"]], "update_dataloaders() (in module 6ece06672ed3_v1_14)": [[1, "ece06672ed3_v1_14.update_dataloaders"]], "update_transformations() (in module 6ece06672ed3_v1_14)": [[1, "ece06672ed3_v1_14.update_transformations"]], "6f0d0f71d92e_v1_13": [[2, "module-6f0d0f71d92e_v1_13"]], "9e89549a08c8_v1_11": [[3, "module-9e89549a08c8_v1_11"]], "block_mask": [[4, "module-block_mask"]], "env": [[5, "module-env"]], "run_migrations_offline() (in module env)": [[5, "env.run_migrations_offline"]], "run_migrations_online() (in module env)": [[5, "env.run_migrations_online"]], "adaptor (class in neural_compressor.adaptor.adaptor)": [[6, "neural_compressor.adaptor.adaptor.Adaptor"]], "adaptor_registry() (in module neural_compressor.adaptor.adaptor)": [[6, "neural_compressor.adaptor.adaptor.adaptor_registry"]], "convert() (neural_compressor.adaptor.adaptor.adaptor method)": [[6, "neural_compressor.adaptor.adaptor.Adaptor.convert"]], "evaluate() (neural_compressor.adaptor.adaptor.adaptor method)": [[6, "neural_compressor.adaptor.adaptor.Adaptor.evaluate"]], "inspect_tensor() (neural_compressor.adaptor.adaptor.adaptor method)": [[6, "neural_compressor.adaptor.adaptor.Adaptor.inspect_tensor"]], "neural_compressor.adaptor.adaptor": [[6, "module-neural_compressor.adaptor.adaptor"]], "quantize() (neural_compressor.adaptor.adaptor.adaptor method)": [[6, "neural_compressor.adaptor.adaptor.Adaptor.quantize"]], "quantize_input() (neural_compressor.adaptor.adaptor.adaptor method)": [[6, "neural_compressor.adaptor.adaptor.Adaptor.quantize_input"]], "query_fused_patterns() (neural_compressor.adaptor.adaptor.adaptor method)": [[6, "neural_compressor.adaptor.adaptor.Adaptor.query_fused_patterns"]], "query_fw_capability() (neural_compressor.adaptor.adaptor.adaptor method)": [[6, "neural_compressor.adaptor.adaptor.Adaptor.query_fw_capability"]], "save() (neural_compressor.adaptor.adaptor.adaptor method)": [[6, "neural_compressor.adaptor.adaptor.Adaptor.save"]], "set_tensor() (neural_compressor.adaptor.adaptor.adaptor method)": [[6, "neural_compressor.adaptor.adaptor.Adaptor.set_tensor"]], "neural_compressor.adaptor": [[7, "module-neural_compressor.adaptor"]], "kerasadaptor (class in neural_compressor.adaptor.keras)": [[8, "neural_compressor.adaptor.keras.KerasAdaptor"]], "convert() (neural_compressor.adaptor.keras.kerasadaptor method)": [[8, "neural_compressor.adaptor.keras.KerasAdaptor.convert"]], "evaluate() (neural_compressor.adaptor.keras.kerasadaptor method)": [[8, "neural_compressor.adaptor.keras.KerasAdaptor.evaluate"]], "get_optype_wise_ability() (neural_compressor.adaptor.keras.kerasadaptor method)": [[8, "neural_compressor.adaptor.keras.KerasAdaptor.get_optype_wise_ability"]], "inspect_tensor() (neural_compressor.adaptor.keras.kerasadaptor method)": [[8, "neural_compressor.adaptor.keras.KerasAdaptor.inspect_tensor"]], "neural_compressor.adaptor.keras": [[8, "module-neural_compressor.adaptor.keras"]], "quantize() (neural_compressor.adaptor.keras.kerasadaptor method)": [[8, "neural_compressor.adaptor.keras.KerasAdaptor.quantize"]], "quantize_input() (neural_compressor.adaptor.keras.kerasadaptor method)": [[8, "neural_compressor.adaptor.keras.KerasAdaptor.quantize_input"]], "query_fw_capability() (neural_compressor.adaptor.keras.kerasadaptor method)": [[8, "neural_compressor.adaptor.keras.KerasAdaptor.query_fw_capability"]], "save() (neural_compressor.adaptor.keras.kerasadaptor method)": [[8, "neural_compressor.adaptor.keras.KerasAdaptor.save"]], "set_tensor() (neural_compressor.adaptor.keras.kerasadaptor method)": [[8, "neural_compressor.adaptor.keras.KerasAdaptor.set_tensor"]], "neural_compressor.adaptor.keras_utils.conv2d": [[9, "module-neural_compressor.adaptor.keras_utils.conv2d"]], "neural_compressor.adaptor.keras_utils.dense": [[10, "module-neural_compressor.adaptor.keras_utils.dense"]], "neural_compressor.adaptor.keras_utils": [[11, "module-neural_compressor.adaptor.keras_utils"]], "neural_compressor.adaptor.keras_utils.quantizer": [[12, "module-neural_compressor.adaptor.keras_utils.quantizer"]], "mxnetadaptor (class in neural_compressor.adaptor.mxnet)": [[13, "neural_compressor.adaptor.mxnet.MxNetAdaptor"]], "evaluate() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[13, "neural_compressor.adaptor.mxnet.MxNetAdaptor.evaluate"]], "inspect_tensor() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[13, "neural_compressor.adaptor.mxnet.MxNetAdaptor.inspect_tensor"]], "neural_compressor.adaptor.mxnet": [[13, "module-neural_compressor.adaptor.mxnet"]], "quantize() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[13, "neural_compressor.adaptor.mxnet.MxNetAdaptor.quantize"]], "query_fw_capability() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[13, "neural_compressor.adaptor.mxnet.MxNetAdaptor.query_fw_capability"]], "recover_tuned_model() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[13, "neural_compressor.adaptor.mxnet.MxNetAdaptor.recover_tuned_model"]], "save() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[13, "neural_compressor.adaptor.mxnet.MxNetAdaptor.save"]], "set_tensor() (neural_compressor.adaptor.mxnet.mxnetadaptor method)": [[13, "neural_compressor.adaptor.mxnet.MxNetAdaptor.set_tensor"]], "neural_compressor.adaptor.mxnet_utils": [[14, "module-neural_compressor.adaptor.mxnet_utils"]], "calibcollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[15, "neural_compressor.adaptor.mxnet_utils.util.CalibCollector"]], "calibdata (class in neural_compressor.adaptor.mxnet_utils.util)": [[15, "neural_compressor.adaptor.mxnet_utils.util.CalibData"]], "collectorbase (class in neural_compressor.adaptor.mxnet_utils.util)": [[15, "neural_compressor.adaptor.mxnet_utils.util.CollectorBase"]], "dataiterloader (class in neural_compressor.adaptor.mxnet_utils.util)": [[15, "neural_compressor.adaptor.mxnet_utils.util.DataIterLoader"]], "dataloaderwrap (class in neural_compressor.adaptor.mxnet_utils.util)": [[15, "neural_compressor.adaptor.mxnet_utils.util.DataLoaderWrap"]], "namecollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[15, "neural_compressor.adaptor.mxnet_utils.util.NameCollector"]], "optype (class in neural_compressor.adaptor.mxnet_utils.util)": [[15, "neural_compressor.adaptor.mxnet_utils.util.OpType"]], "tensorcollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[15, "neural_compressor.adaptor.mxnet_utils.util.TensorCollector"]], "amp_convert() (in module neural_compressor.adaptor.mxnet_utils.util)": [[15, "neural_compressor.adaptor.mxnet_utils.util.amp_convert"]], "calc_kl_th_dict() (neural_compressor.adaptor.mxnet_utils.util.calibcollector method)": [[15, "neural_compressor.adaptor.mxnet_utils.util.CalibCollector.calc_kl_th_dict"]], "calib_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[15, "neural_compressor.adaptor.mxnet_utils.util.calib_model"]], "check_mx_version() (in module neural_compressor.adaptor.mxnet_utils.util)": [[15, "neural_compressor.adaptor.mxnet_utils.util.check_mx_version"]], "collect_gluon() (neural_compressor.adaptor.mxnet_utils.util.calibcollector method)": [[15, "neural_compressor.adaptor.mxnet_utils.util.CalibCollector.collect_gluon"]], "collect_gluon() (neural_compressor.adaptor.mxnet_utils.util.collectorbase method)": [[15, "neural_compressor.adaptor.mxnet_utils.util.CollectorBase.collect_gluon"]], "collect_gluon() (neural_compressor.adaptor.mxnet_utils.util.namecollector method)": [[15, "neural_compressor.adaptor.mxnet_utils.util.NameCollector.collect_gluon"]], "collect_gluon() (neural_compressor.adaptor.mxnet_utils.util.tensorcollector method)": [[15, "neural_compressor.adaptor.mxnet_utils.util.TensorCollector.collect_gluon"]], "collect_module() (neural_compressor.adaptor.mxnet_utils.util.collectorbase method)": [[15, "neural_compressor.adaptor.mxnet_utils.util.CollectorBase.collect_module"]], "combine_capabilities() (in module neural_compressor.adaptor.mxnet_utils.util)": [[15, "neural_compressor.adaptor.mxnet_utils.util.combine_capabilities"]], "create_data_example() (in module neural_compressor.adaptor.mxnet_utils.util)": [[15, "neural_compressor.adaptor.mxnet_utils.util.create_data_example"]], "distribute_calib_tensors() (in module neural_compressor.adaptor.mxnet_utils.util)": [[15, "neural_compressor.adaptor.mxnet_utils.util.distribute_calib_tensors"]], "ensure_list() (in module neural_compressor.adaptor.mxnet_utils.util)": [[15, "neural_compressor.adaptor.mxnet_utils.util.ensure_list"]], "fuse() (in module neural_compressor.adaptor.mxnet_utils.util)": [[15, "neural_compressor.adaptor.mxnet_utils.util.fuse"]], "get_framework_name() (in module neural_compressor.adaptor.mxnet_utils.util)": [[15, "neural_compressor.adaptor.mxnet_utils.util.get_framework_name"]], "is_model_quantized() (in module neural_compressor.adaptor.mxnet_utils.util)": [[15, "neural_compressor.adaptor.mxnet_utils.util.is_model_quantized"]], "isiterable() (in module neural_compressor.adaptor.mxnet_utils.util)": [[15, "neural_compressor.adaptor.mxnet_utils.util.isiterable"]], "make_module() (in module neural_compressor.adaptor.mxnet_utils.util)": [[15, "neural_compressor.adaptor.mxnet_utils.util.make_module"]], "make_nc_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[15, "neural_compressor.adaptor.mxnet_utils.util.make_nc_model"]], "make_symbol_block() (in module neural_compressor.adaptor.mxnet_utils.util)": [[15, "neural_compressor.adaptor.mxnet_utils.util.make_symbol_block"]], "min_max_dict (neural_compressor.adaptor.mxnet_utils.util.calibdata property)": [[15, "neural_compressor.adaptor.mxnet_utils.util.CalibData.min_max_dict"]], "ndarray_to_device() (in module neural_compressor.adaptor.mxnet_utils.util)": [[15, "neural_compressor.adaptor.mxnet_utils.util.ndarray_to_device"]], "neural_compressor.adaptor.mxnet_utils.util": [[15, "module-neural_compressor.adaptor.mxnet_utils.util"]], "parse_tune_config() (in module neural_compressor.adaptor.mxnet_utils.util)": [[15, "neural_compressor.adaptor.mxnet_utils.util.parse_tune_config"]], "post_batch() (neural_compressor.adaptor.mxnet_utils.util.collectorbase method)": [[15, "neural_compressor.adaptor.mxnet_utils.util.CollectorBase.post_batch"]], "post_collect() (neural_compressor.adaptor.mxnet_utils.util.calibdata method)": [[15, "neural_compressor.adaptor.mxnet_utils.util.CalibData.post_collect"]], "pre_batch() (neural_compressor.adaptor.mxnet_utils.util.collectorbase method)": [[15, "neural_compressor.adaptor.mxnet_utils.util.CollectorBase.pre_batch"]], "pre_batch() (neural_compressor.adaptor.mxnet_utils.util.tensorcollector method)": [[15, "neural_compressor.adaptor.mxnet_utils.util.TensorCollector.pre_batch"]], "prepare_dataloader() (in module neural_compressor.adaptor.mxnet_utils.util)": [[15, "neural_compressor.adaptor.mxnet_utils.util.prepare_dataloader"]], "prepare_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[15, "neural_compressor.adaptor.mxnet_utils.util.prepare_model"]], "prepare_model_data() (in module neural_compressor.adaptor.mxnet_utils.util)": [[15, "neural_compressor.adaptor.mxnet_utils.util.prepare_model_data"]], "quantize_sym_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[15, "neural_compressor.adaptor.mxnet_utils.util.quantize_sym_model"]], "query_quantizable_nodes() (in module neural_compressor.adaptor.mxnet_utils.util)": [[15, "neural_compressor.adaptor.mxnet_utils.util.query_quantizable_nodes"]], "run_forward() (in module neural_compressor.adaptor.mxnet_utils.util)": [[15, "neural_compressor.adaptor.mxnet_utils.util.run_forward"]], "onnxrt_integeropsadaptor (class in neural_compressor.adaptor.onnxrt)": [[16, "neural_compressor.adaptor.onnxrt.ONNXRT_IntegerOpsAdaptor"]], "onnxrt_qdqadaptor (class in neural_compressor.adaptor.onnxrt)": [[16, "neural_compressor.adaptor.onnxrt.ONNXRT_QDQAdaptor"]], "onnxrt_qlinearopsadaptor (class in neural_compressor.adaptor.onnxrt)": [[16, "neural_compressor.adaptor.onnxrt.ONNXRT_QLinearOpsAdaptor"]], "onnxruntimeadaptor (class in neural_compressor.adaptor.onnxrt)": [[16, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor"]], "evaluate() (neural_compressor.adaptor.onnxrt.onnxruntimeadaptor method)": [[16, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor.evaluate"]], "inspect_tensor() (neural_compressor.adaptor.onnxrt.onnxruntimeadaptor method)": [[16, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor.inspect_tensor"]], "neural_compressor.adaptor.onnxrt": [[16, "module-neural_compressor.adaptor.onnxrt"]], "quantize() (neural_compressor.adaptor.onnxrt.onnxruntimeadaptor method)": [[16, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor.quantize"]], "query_fw_capability() (neural_compressor.adaptor.onnxrt.onnxruntimeadaptor method)": [[16, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor.query_fw_capability"]], "recover() (neural_compressor.adaptor.onnxrt.onnxruntimeadaptor method)": [[16, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor.recover"]], "save() (neural_compressor.adaptor.onnxrt.onnxruntimeadaptor method)": [[16, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor.save"]], "set_tensor() (neural_compressor.adaptor.onnxrt.onnxruntimeadaptor method)": [[16, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor.set_tensor"]], "smooth_quant() (neural_compressor.adaptor.onnxrt.onnxruntimeadaptor method)": [[16, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor.smooth_quant"]], "onnxrtaugment (class in neural_compressor.adaptor.ox_utils.calibration)": [[17, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment"]], "augment_graph() (neural_compressor.adaptor.ox_utils.calibration.onnxrtaugment method)": [[17, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment.augment_graph"]], "calculate_quantization_params() (neural_compressor.adaptor.ox_utils.calibration.onnxrtaugment method)": [[17, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment.calculate_quantization_params"]], "calculate_scale_zeropoint() (neural_compressor.adaptor.ox_utils.calibration.onnxrtaugment method)": [[17, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment.calculate_scale_zeropoint"]], "calib_smooth() (neural_compressor.adaptor.ox_utils.calibration.onnxrtaugment method)": [[17, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment.calib_smooth"]], "dump_calibration() (neural_compressor.adaptor.ox_utils.calibration.onnxrtaugment method)": [[17, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment.dump_calibration"]], "dump_minmax() (neural_compressor.adaptor.ox_utils.calibration.onnxrtaugment method)": [[17, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment.dump_minmax"]], "dump_tensor() (neural_compressor.adaptor.ox_utils.calibration.onnxrtaugment method)": [[17, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment.dump_tensor"]], "get_intermediate_outputs() (neural_compressor.adaptor.ox_utils.calibration.onnxrtaugment method)": [[17, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment.get_intermediate_outputs"]], "neural_compressor.adaptor.ox_utils.calibration": [[17, "module-neural_compressor.adaptor.ox_utils.calibration"]], "neural_compressor.adaptor.ox_utils": [[18, "module-neural_compressor.adaptor.ox_utils"]], "activationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[19, "neural_compressor.adaptor.ox_utils.operators.activation.ActivationOperator"]], "qactivationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[19, "neural_compressor.adaptor.ox_utils.operators.activation.QActivationOperator"]], "removableactivationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[19, "neural_compressor.adaptor.ox_utils.operators.activation.RemovableActivationOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.activation.activationoperator method)": [[19, "neural_compressor.adaptor.ox_utils.operators.activation.ActivationOperator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.activation.qactivationoperator method)": [[19, "neural_compressor.adaptor.ox_utils.operators.activation.QActivationOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.activation.activationoperator method)": [[19, "neural_compressor.adaptor.ox_utils.operators.activation.ActivationOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[19, "module-neural_compressor.adaptor.ox_utils.operators.activation"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.activation.activationoperator method)": [[19, "neural_compressor.adaptor.ox_utils.operators.activation.ActivationOperator.quantize"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.activation.removableactivationoperator method)": [[19, "neural_compressor.adaptor.ox_utils.operators.activation.RemovableActivationOperator.quantize"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.activation.activationoperator method)": [[19, "neural_compressor.adaptor.ox_utils.operators.activation.ActivationOperator.quantize_check"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.activation.removableactivationoperator method)": [[19, "neural_compressor.adaptor.ox_utils.operators.activation.RemovableActivationOperator.quantize_check"]], "argmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.argmax)": [[20, "neural_compressor.adaptor.ox_utils.operators.argmax.ArgMaxOperator"]], "qargmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.argmax)": [[20, "neural_compressor.adaptor.ox_utils.operators.argmax.QArgMaxOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.argmax.argmaxoperator method)": [[20, "neural_compressor.adaptor.ox_utils.operators.argmax.ArgMaxOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.argmax.argmaxoperator method)": [[20, "neural_compressor.adaptor.ox_utils.operators.argmax.ArgMaxOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[20, "module-neural_compressor.adaptor.ox_utils.operators.argmax"]], "attentionoperator (class in neural_compressor.adaptor.ox_utils.operators.attention)": [[21, "neural_compressor.adaptor.ox_utils.operators.attention.AttentionOperator"]], "qattentionoperator (class in neural_compressor.adaptor.ox_utils.operators.attention)": [[21, "neural_compressor.adaptor.ox_utils.operators.attention.QAttentionOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.attention.attentionoperator method)": [[21, "neural_compressor.adaptor.ox_utils.operators.attention.AttentionOperator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.attention.qattentionoperator method)": [[21, "neural_compressor.adaptor.ox_utils.operators.attention.QAttentionOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.attention.attentionoperator method)": [[21, "neural_compressor.adaptor.ox_utils.operators.attention.AttentionOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[21, "module-neural_compressor.adaptor.ox_utils.operators.attention"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.attention.attentionoperator method)": [[21, "neural_compressor.adaptor.ox_utils.operators.attention.AttentionOperator.quantize"]], "binaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[22, "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryOperator"]], "qbinaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[22, "neural_compressor.adaptor.ox_utils.operators.binary_op.QBinaryOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.binary_op.binaryoperator method)": [[22, "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryOperator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.binary_op.qbinaryoperator method)": [[22, "neural_compressor.adaptor.ox_utils.operators.binary_op.QBinaryOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.binary_op.binaryoperator method)": [[22, "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[22, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.binary_op.binaryoperator method)": [[22, "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryOperator.quantize"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.binary_op.binaryoperator method)": [[22, "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryOperator.quantize_check"]], "concatoperator (class in neural_compressor.adaptor.ox_utils.operators.concat)": [[23, "neural_compressor.adaptor.ox_utils.operators.concat.ConcatOperator"]], "qconcatoperator (class in neural_compressor.adaptor.ox_utils.operators.concat)": [[23, "neural_compressor.adaptor.ox_utils.operators.concat.QConcatOperator"]], "cast() (neural_compressor.adaptor.ox_utils.operators.concat.concatoperator method)": [[23, "neural_compressor.adaptor.ox_utils.operators.concat.ConcatOperator.cast"]], "convert() (neural_compressor.adaptor.ox_utils.operators.concat.concatoperator method)": [[23, "neural_compressor.adaptor.ox_utils.operators.concat.ConcatOperator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.concat.qconcatoperator method)": [[23, "neural_compressor.adaptor.ox_utils.operators.concat.QConcatOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.concat.concatoperator method)": [[23, "neural_compressor.adaptor.ox_utils.operators.concat.ConcatOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[23, "module-neural_compressor.adaptor.ox_utils.operators.concat"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.concat.concatoperator method)": [[23, "neural_compressor.adaptor.ox_utils.operators.concat.ConcatOperator.quantize"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.concat.concatoperator method)": [[23, "neural_compressor.adaptor.ox_utils.operators.concat.ConcatOperator.quantize_check"]], "convoperator (class in neural_compressor.adaptor.ox_utils.operators.conv)": [[24, "neural_compressor.adaptor.ox_utils.operators.conv.ConvOperator"]], "qconvoperator (class in neural_compressor.adaptor.ox_utils.operators.conv)": [[24, "neural_compressor.adaptor.ox_utils.operators.conv.QConvOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.conv.convoperator method)": [[24, "neural_compressor.adaptor.ox_utils.operators.conv.ConvOperator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.conv.qconvoperator method)": [[24, "neural_compressor.adaptor.ox_utils.operators.conv.QConvOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.conv.convoperator method)": [[24, "neural_compressor.adaptor.ox_utils.operators.conv.ConvOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[24, "module-neural_compressor.adaptor.ox_utils.operators.conv"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.conv.convoperator method)": [[24, "neural_compressor.adaptor.ox_utils.operators.conv.ConvOperator.quantize"]], "direct8bitoperator (class in neural_compressor.adaptor.ox_utils.operators.direct_q8)": [[25, "neural_compressor.adaptor.ox_utils.operators.direct_q8.Direct8BitOperator"]], "qdirectoperator (class in neural_compressor.adaptor.ox_utils.operators.direct_q8)": [[25, "neural_compressor.adaptor.ox_utils.operators.direct_q8.QDirectOperator"]], "cast() (neural_compressor.adaptor.ox_utils.operators.direct_q8.direct8bitoperator method)": [[25, "neural_compressor.adaptor.ox_utils.operators.direct_q8.Direct8BitOperator.cast"]], "convert() (neural_compressor.adaptor.ox_utils.operators.direct_q8.direct8bitoperator method)": [[25, "neural_compressor.adaptor.ox_utils.operators.direct_q8.Direct8BitOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.direct_q8.direct8bitoperator method)": [[25, "neural_compressor.adaptor.ox_utils.operators.direct_q8.Direct8BitOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[25, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.direct_q8.direct8bitoperator method)": [[25, "neural_compressor.adaptor.ox_utils.operators.direct_q8.Direct8BitOperator.quantize"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.direct_q8.direct8bitoperator method)": [[25, "neural_compressor.adaptor.ox_utils.operators.direct_q8.Direct8BitOperator.quantize_check"]], "embedlayernormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.embed_layernorm)": [[26, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.EmbedLayerNormalizationOperator"]], "qembedlayernormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.embed_layernorm)": [[26, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.QEmbedLayerNormalizationOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.embed_layernorm.embedlayernormalizationoperator method)": [[26, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.EmbedLayerNormalizationOperator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.embed_layernorm.qembedlayernormalizationoperator method)": [[26, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.QEmbedLayerNormalizationOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.embed_layernorm.embedlayernormalizationoperator method)": [[26, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.EmbedLayerNormalizationOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[26, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.embed_layernorm.embedlayernormalizationoperator method)": [[26, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.EmbedLayerNormalizationOperator.quantize"]], "gatheroperator (class in neural_compressor.adaptor.ox_utils.operators.gather)": [[27, "neural_compressor.adaptor.ox_utils.operators.gather.GatherOperator"]], "qgatheroperator (class in neural_compressor.adaptor.ox_utils.operators.gather)": [[27, "neural_compressor.adaptor.ox_utils.operators.gather.QGatherOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.gather.gatheroperator method)": [[27, "neural_compressor.adaptor.ox_utils.operators.gather.GatherOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.gather.gatheroperator method)": [[27, "neural_compressor.adaptor.ox_utils.operators.gather.GatherOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[27, "module-neural_compressor.adaptor.ox_utils.operators.gather"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.gather.gatheroperator method)": [[27, "neural_compressor.adaptor.ox_utils.operators.gather.GatherOperator.quantize"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.gather.gatheroperator method)": [[27, "neural_compressor.adaptor.ox_utils.operators.gather.GatherOperator.quantize_check"]], "globalaveragepooloperator (class in neural_compressor.adaptor.ox_utils.operators.gavgpool)": [[28, "neural_compressor.adaptor.ox_utils.operators.gavgpool.GlobalAveragePoolOperator"]], "qglobalaveragepooloperator (class in neural_compressor.adaptor.ox_utils.operators.gavgpool)": [[28, "neural_compressor.adaptor.ox_utils.operators.gavgpool.QGlobalAveragePoolOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.gavgpool.globalaveragepooloperator method)": [[28, "neural_compressor.adaptor.ox_utils.operators.gavgpool.GlobalAveragePoolOperator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.gavgpool.qglobalaveragepooloperator method)": [[28, "neural_compressor.adaptor.ox_utils.operators.gavgpool.QGlobalAveragePoolOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.gavgpool.globalaveragepooloperator method)": [[28, "neural_compressor.adaptor.ox_utils.operators.gavgpool.GlobalAveragePoolOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[28, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"]], "gemmoperator (class in neural_compressor.adaptor.ox_utils.operators.gemm)": [[29, "neural_compressor.adaptor.ox_utils.operators.gemm.GemmOperator"]], "qgemmoperator (class in neural_compressor.adaptor.ox_utils.operators.gemm)": [[29, "neural_compressor.adaptor.ox_utils.operators.gemm.QGemmOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.gemm.gemmoperator method)": [[29, "neural_compressor.adaptor.ox_utils.operators.gemm.GemmOperator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.gemm.qgemmoperator method)": [[29, "neural_compressor.adaptor.ox_utils.operators.gemm.QGemmOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.gemm.gemmoperator method)": [[29, "neural_compressor.adaptor.ox_utils.operators.gemm.GemmOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[29, "module-neural_compressor.adaptor.ox_utils.operators.gemm"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.gemm.gemmoperator method)": [[29, "neural_compressor.adaptor.ox_utils.operators.gemm.GemmOperator.quantize"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.gemm.gemmoperator method)": [[29, "neural_compressor.adaptor.ox_utils.operators.gemm.GemmOperator.quantize_check"]], "neural_compressor.adaptor.ox_utils.operators": [[30, "module-neural_compressor.adaptor.ox_utils.operators"]], "lstmoperator (class in neural_compressor.adaptor.ox_utils.operators.lstm)": [[31, "neural_compressor.adaptor.ox_utils.operators.lstm.LSTMOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.lstm.lstmoperator method)": [[31, "neural_compressor.adaptor.ox_utils.operators.lstm.LSTMOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.lstm.lstmoperator method)": [[31, "neural_compressor.adaptor.ox_utils.operators.lstm.LSTMOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[31, "module-neural_compressor.adaptor.ox_utils.operators.lstm"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.lstm.lstmoperator method)": [[31, "neural_compressor.adaptor.ox_utils.operators.lstm.LSTMOperator.quantize"]], "matmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[32, "neural_compressor.adaptor.ox_utils.operators.matmul.MatMulOperator"]], "qmatmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[32, "neural_compressor.adaptor.ox_utils.operators.matmul.QMatMulOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.matmul.matmuloperator method)": [[32, "neural_compressor.adaptor.ox_utils.operators.matmul.MatMulOperator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.matmul.qmatmuloperator method)": [[32, "neural_compressor.adaptor.ox_utils.operators.matmul.QMatMulOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.matmul.matmuloperator method)": [[32, "neural_compressor.adaptor.ox_utils.operators.matmul.MatMulOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[32, "module-neural_compressor.adaptor.ox_utils.operators.matmul"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.matmul.matmuloperator method)": [[32, "neural_compressor.adaptor.ox_utils.operators.matmul.MatMulOperator.quantize"]], "maxpooloperator (class in neural_compressor.adaptor.ox_utils.operators.maxpool)": [[33, "neural_compressor.adaptor.ox_utils.operators.maxpool.MaxPoolOperator"]], "qmaxpooloperator (class in neural_compressor.adaptor.ox_utils.operators.maxpool)": [[33, "neural_compressor.adaptor.ox_utils.operators.maxpool.QMaxPoolOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.maxpool.maxpooloperator method)": [[33, "neural_compressor.adaptor.ox_utils.operators.maxpool.MaxPoolOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.maxpool.maxpooloperator method)": [[33, "neural_compressor.adaptor.ox_utils.operators.maxpool.MaxPoolOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[33, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.maxpool.maxpooloperator method)": [[33, "neural_compressor.adaptor.ox_utils.operators.maxpool.MaxPoolOperator.quantize"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.maxpool.maxpooloperator method)": [[33, "neural_compressor.adaptor.ox_utils.operators.maxpool.MaxPoolOperator.quantize_check"]], "operator (class in neural_compressor.adaptor.ox_utils.operators.ops)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.Operator"]], "qoperator (class in neural_compressor.adaptor.ox_utils.operators.ops)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.QOperator"]], "cast() (neural_compressor.adaptor.ox_utils.operators.ops.operator method)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.Operator.cast"]], "convert() (neural_compressor.adaptor.ox_utils.operators.ops.operator method)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.Operator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.ops.qoperator method)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.QOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.ops.operator method)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.Operator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[34, "module-neural_compressor.adaptor.ox_utils.operators.ops"]], "op_registry() (in module neural_compressor.adaptor.ox_utils.operators.ops)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.op_registry"]], "qop_registry() (in module neural_compressor.adaptor.ox_utils.operators.ops)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.qop_registry"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.ops.operator method)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.Operator.quantize"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.ops.operator method)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.Operator.quantize_check"]], "padoperator (class in neural_compressor.adaptor.ox_utils.operators.pad)": [[35, "neural_compressor.adaptor.ox_utils.operators.pad.PadOperator"]], "qpadoperator (class in neural_compressor.adaptor.ox_utils.operators.pad)": [[35, "neural_compressor.adaptor.ox_utils.operators.pad.QPadOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.pad.padoperator method)": [[35, "neural_compressor.adaptor.ox_utils.operators.pad.PadOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.pad.padoperator method)": [[35, "neural_compressor.adaptor.ox_utils.operators.pad.PadOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[35, "module-neural_compressor.adaptor.ox_utils.operators.pad"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.pad.padoperator method)": [[35, "neural_compressor.adaptor.ox_utils.operators.pad.PadOperator.quantize"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.pad.padoperator method)": [[35, "neural_compressor.adaptor.ox_utils.operators.pad.PadOperator.quantize_check"]], "pooloperator (class in neural_compressor.adaptor.ox_utils.operators.pooling)": [[36, "neural_compressor.adaptor.ox_utils.operators.pooling.PoolOperator"]], "qpooloperator (class in neural_compressor.adaptor.ox_utils.operators.pooling)": [[36, "neural_compressor.adaptor.ox_utils.operators.pooling.QPoolOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.pooling.pooloperator method)": [[36, "neural_compressor.adaptor.ox_utils.operators.pooling.PoolOperator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.pooling.qpooloperator method)": [[36, "neural_compressor.adaptor.ox_utils.operators.pooling.QPoolOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.pooling.pooloperator method)": [[36, "neural_compressor.adaptor.ox_utils.operators.pooling.PoolOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[36, "module-neural_compressor.adaptor.ox_utils.operators.pooling"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.pooling.pooloperator method)": [[36, "neural_compressor.adaptor.ox_utils.operators.pooling.PoolOperator.quantize"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.pooling.pooloperator method)": [[36, "neural_compressor.adaptor.ox_utils.operators.pooling.PoolOperator.quantize_check"]], "qresizeoperator (class in neural_compressor.adaptor.ox_utils.operators.resize)": [[37, "neural_compressor.adaptor.ox_utils.operators.resize.QResizeOperator"]], "resizeoperator (class in neural_compressor.adaptor.ox_utils.operators.resize)": [[37, "neural_compressor.adaptor.ox_utils.operators.resize.ResizeOperator"]], "convert() (neural_compressor.adaptor.ox_utils.operators.resize.resizeoperator method)": [[37, "neural_compressor.adaptor.ox_utils.operators.resize.ResizeOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.resize.resizeoperator method)": [[37, "neural_compressor.adaptor.ox_utils.operators.resize.ResizeOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[37, "module-neural_compressor.adaptor.ox_utils.operators.resize"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.resize.resizeoperator method)": [[37, "neural_compressor.adaptor.ox_utils.operators.resize.ResizeOperator.quantize"]], "quantize_check() (neural_compressor.adaptor.ox_utils.operators.resize.resizeoperator method)": [[37, "neural_compressor.adaptor.ox_utils.operators.resize.ResizeOperator.quantize_check"]], "qsplitoperator (class in neural_compressor.adaptor.ox_utils.operators.split)": [[38, "neural_compressor.adaptor.ox_utils.operators.split.QSplitOperator"]], "splitoperator (class in neural_compressor.adaptor.ox_utils.operators.split)": [[38, "neural_compressor.adaptor.ox_utils.operators.split.SplitOperator"]], "cast() (neural_compressor.adaptor.ox_utils.operators.split.splitoperator method)": [[38, "neural_compressor.adaptor.ox_utils.operators.split.SplitOperator.cast"]], "convert() (neural_compressor.adaptor.ox_utils.operators.split.qsplitoperator method)": [[38, "neural_compressor.adaptor.ox_utils.operators.split.QSplitOperator.convert"]], "convert() (neural_compressor.adaptor.ox_utils.operators.split.splitoperator method)": [[38, "neural_compressor.adaptor.ox_utils.operators.split.SplitOperator.convert"]], "convert_check() (neural_compressor.adaptor.ox_utils.operators.split.splitoperator method)": [[38, "neural_compressor.adaptor.ox_utils.operators.split.SplitOperator.convert_check"]], "neural_compressor.adaptor.ox_utils.operators.split": [[38, "module-neural_compressor.adaptor.ox_utils.operators.split"]], "quantize() (neural_compressor.adaptor.ox_utils.operators.split.splitoperator method)": [[38, "neural_compressor.adaptor.ox_utils.operators.split.SplitOperator.quantize"]], "quantizer (class in neural_compressor.adaptor.ox_utils.quantizer)": [[39, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer"]], "check_opset_version() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[39, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.check_opset_version"]], "convert_qdq_to_operator_oriented() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[39, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.convert_qdq_to_operator_oriented"]], "dequantize_tensor() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[39, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.dequantize_tensor"]], "dtype_cast() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[39, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.dtype_cast"]], "get_bias_add_nodes() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[39, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.get_bias_add_nodes"]], "insert_qdq() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[39, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.insert_qdq"]], "is_valid_quantize_weight() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[39, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.is_valid_quantize_weight"]], "merge_dedicated_qdq_pair() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[39, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.merge_dedicated_qdq_pair"]], "neural_compressor.adaptor.ox_utils.quantizer": [[39, "module-neural_compressor.adaptor.ox_utils.quantizer"]], "quantize_bias() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[39, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.quantize_bias"]], "quantize_bias_tensor() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[39, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.quantize_bias_tensor"]], "quantize_inputs() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[39, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.quantize_inputs"]], "quantize_model() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[39, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.quantize_model"]], "quantize_outputs() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[39, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.quantize_outputs"]], "quantize_weight_per_channel() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[39, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.quantize_weight_per_channel"]], "quantize_weights_per_channel() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[39, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.quantize_weights_per_channel"]], "remove_redundant_pairs() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[39, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.remove_redundant_pairs"]], "should_cast() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[39, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.should_cast"]], "should_convert() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[39, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.should_convert"]], "should_quantize() (neural_compressor.adaptor.ox_utils.quantizer.quantizer method)": [[39, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.should_quantize"]], "tensor_proto_to_array() (neural_compressor.adaptor.ox_utils.quantizer.quantizer static method)": [[39, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer.tensor_proto_to_array"]], "quantformat (class in neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.QuantFormat"]], "quanttype (class in neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.QuantType"]], "quantizationmode (class in neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.QuantizationMode"]], "quantizedinitializer (class in neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.QuantizedInitializer"]], "quantizedvalue (class in neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.QuantizedValue"]], "quantizedvaluetype (class in neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.QuantizedValueType"]], "valueinfo (class in neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.ValueInfo"]], "adjust_weights_per_input() (in module neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.adjust_weights_per_input"]], "adjust_weights_per_op() (in module neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.adjust_weights_per_op"]], "attribute_to_kwarg() (in module neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.attribute_to_kwarg"]], "calculate_scale_zp() (in module neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.calculate_scale_zp"]], "cast_tensor() (in module neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.cast_tensor"]], "collate_preds() (in module neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.collate_preds"]], "dequantize_data() (in module neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.dequantize_data"]], "dequantize_data_with_scale_zero() (in module neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.dequantize_data_with_scale_zero"]], "dtype_to_name() (in module neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.dtype_to_name"]], "find_by_name() (in module neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.find_by_name"]], "float_to_bfloat16() (in module neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.float_to_bfloat16"]], "float_to_float16() (in module neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.float_to_float16"]], "get_smooth_scales_per_input() (in module neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.get_smooth_scales_per_input"]], "get_smooth_scales_per_op() (in module neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.get_smooth_scales_per_op"]], "insert_smooth_mul_op_per_input() (in module neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.insert_smooth_mul_op_per_input"]], "insert_smooth_mul_op_per_op() (in module neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.insert_smooth_mul_op_per_op"]], "is_b_transposed() (in module neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.is_B_transposed"]], "make_dquant_node() (in module neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.make_dquant_node"]], "make_quant_node() (in module neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.make_quant_node"]], "neural_compressor.adaptor.ox_utils.util": [[40, "module-neural_compressor.adaptor.ox_utils.util"]], "quantize_data() (in module neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.quantize_data"]], "quantize_data_per_channel() (in module neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.quantize_data_per_channel"]], "quantize_data_with_scale_zero() (in module neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.quantize_data_with_scale_zero"]], "quantize_nparray() (in module neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.quantize_nparray"]], "remove_init_from_model_input() (in module neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.remove_init_from_model_input"]], "split_shared_bias() (in module neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.split_shared_bias"]], "trt_env_setup() (in module neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.trt_env_setup"]], "pytorchadaptor (class in neural_compressor.adaptor.pytorch)": [[41, "neural_compressor.adaptor.pytorch.PyTorchAdaptor"]], "pytorch_fxadaptor (class in neural_compressor.adaptor.pytorch)": [[41, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor"]], "pytorch_ipexadaptor (class in neural_compressor.adaptor.pytorch)": [[41, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor"]], "templateadaptor (class in neural_compressor.adaptor.pytorch)": [[41, "neural_compressor.adaptor.pytorch.TemplateAdaptor"]], "calculate_hessian_trace() (neural_compressor.adaptor.pytorch.templateadaptor method)": [[41, "neural_compressor.adaptor.pytorch.TemplateAdaptor.calculate_hessian_trace"]], "calculate_op_sensitivity() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor method)": [[41, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.calculate_op_sensitivity"]], "convert_sub_graph() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor static method)": [[41, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.convert_sub_graph"]], "evaluate() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[41, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.evaluate"]], "evaluate() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor method)": [[41, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.evaluate"]], "evaluate() (neural_compressor.adaptor.pytorch.pytorch_ipexadaptor method)": [[41, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor.evaluate"]], "fuse_fx_model() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor method)": [[41, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.fuse_fx_model"]], "get_non_quant_modules() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[41, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.get_non_quant_modules"]], "get_ops_recursively() (in module neural_compressor.adaptor.pytorch)": [[41, "neural_compressor.adaptor.pytorch.get_ops_recursively"]], "is_fused_child() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[41, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.is_fused_child"]], "is_fused_module() (neural_compressor.adaptor.pytorch.templateadaptor method)": [[41, "neural_compressor.adaptor.pytorch.TemplateAdaptor.is_fused_module"]], "is_fused_op() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[41, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.is_fused_op"]], "is_last_fused_child() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[41, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.is_last_fused_child"]], "neural_compressor.adaptor.pytorch": [[41, "module-neural_compressor.adaptor.pytorch"]], "prepare_sub_graph() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor static method)": [[41, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.prepare_sub_graph"]], "quantize() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[41, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.quantize"]], "quantize() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor method)": [[41, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.quantize"]], "quantize() (neural_compressor.adaptor.pytorch.pytorch_ipexadaptor method)": [[41, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor.quantize"]], "query_fw_capability() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[41, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.query_fw_capability"]], "query_fw_capability() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor method)": [[41, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.query_fw_capability"]], "query_fw_capability() (neural_compressor.adaptor.pytorch.pytorch_ipexadaptor method)": [[41, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor.query_fw_capability"]], "save() (neural_compressor.adaptor.pytorch.pytorch_ipexadaptor method)": [[41, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor.save"]], "smooth_quant() (neural_compressor.adaptor.pytorch.templateadaptor method)": [[41, "neural_compressor.adaptor.pytorch.TemplateAdaptor.smooth_quant"]], "train() (neural_compressor.adaptor.pytorch.pytorchadaptor method)": [[41, "neural_compressor.adaptor.pytorch.PyTorchAdaptor.train"]], "train() (neural_compressor.adaptor.pytorch.pytorch_fxadaptor method)": [[41, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor.train"]], "querybackendcapability (class in neural_compressor.adaptor.query)": [[42, "neural_compressor.adaptor.query.QueryBackendCapability"]], "get_fuse_patterns() (neural_compressor.adaptor.query.querybackendcapability method)": [[42, "neural_compressor.adaptor.query.QueryBackendCapability.get_fuse_patterns"]], "get_mixed_precision_combination() (neural_compressor.adaptor.query.querybackendcapability method)": [[42, "neural_compressor.adaptor.query.QueryBackendCapability.get_mixed_precision_combination"]], "get_op_types() (neural_compressor.adaptor.query.querybackendcapability method)": [[42, "neural_compressor.adaptor.query.QueryBackendCapability.get_op_types"]], "get_precisions() (neural_compressor.adaptor.query.querybackendcapability method)": [[42, "neural_compressor.adaptor.query.QueryBackendCapability.get_precisions"]], "get_quantization_capability() (neural_compressor.adaptor.query.querybackendcapability method)": [[42, "neural_compressor.adaptor.query.QueryBackendCapability.get_quantization_capability"]], "get_version() (neural_compressor.adaptor.query.querybackendcapability method)": [[42, "neural_compressor.adaptor.query.QueryBackendCapability.get_version"]], "neural_compressor.adaptor.query": [[42, "module-neural_compressor.adaptor.query"]], "set_quantization_config() (neural_compressor.adaptor.query.querybackendcapability method)": [[42, "neural_compressor.adaptor.query.QueryBackendCapability.set_quantization_config"]], "tensorflowadaptor (class in neural_compressor.adaptor.tensorflow)": [[43, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor"]], "tensorflowquery (class in neural_compressor.adaptor.tensorflow)": [[43, "neural_compressor.adaptor.tensorflow.TensorflowQuery"]], "tensorflow_itexadaptor (class in neural_compressor.adaptor.tensorflow)": [[43, "neural_compressor.adaptor.tensorflow.Tensorflow_ITEXAdaptor"]], "calculate_op_sensitivity() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[43, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.calculate_op_sensitivity"]], "convert() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[43, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.convert"]], "diagnosis_helper() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[43, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.diagnosis_helper"]], "evaluate() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[43, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.evaluate"]], "fused_node_mapping() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[43, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.fused_node_mapping"]], "generate_internal_patterns() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[43, "neural_compressor.adaptor.tensorflow.TensorflowQuery.generate_internal_patterns"]], "get_bf16_patterns() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[43, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_bf16_patterns"]], "get_eightbit_patterns() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[43, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_eightbit_patterns"]], "get_fuse_patterns() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[43, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_fuse_patterns"]], "get_mixed_precision_combination() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[43, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_mixed_precision_combination"]], "get_op_types() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[43, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_op_types"]], "get_op_types_by_precision() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[43, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_op_types_by_precision"]], "get_optype_wise_ability() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[43, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.get_optype_wise_ability"]], "get_output_op_names() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[43, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.get_output_op_names"]], "get_quantization_capability() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[43, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_quantization_capability"]], "get_version() (neural_compressor.adaptor.tensorflow.tensorflowquery method)": [[43, "neural_compressor.adaptor.tensorflow.TensorflowQuery.get_version"]], "inspect_activation() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[43, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.inspect_activation"]], "inspect_tensor() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[43, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.inspect_tensor"]], "inspect_weight_and_bias() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[43, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.inspect_weight_and_bias"]], "neural_compressor.adaptor.tensorflow": [[43, "module-neural_compressor.adaptor.tensorflow"]], "qat_convert() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[43, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.qat_convert"]], "quantize() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[43, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.quantize"]], "quantize() (neural_compressor.adaptor.tensorflow.tensorflow_itexadaptor method)": [[43, "neural_compressor.adaptor.tensorflow.Tensorflow_ITEXAdaptor.quantize"]], "quantize_input() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[43, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.quantize_input"]], "query_fw_capability() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[43, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.query_fw_capability"]], "recover_tuned_model() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[43, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.recover_tuned_model"]], "save() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[43, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.save"]], "set_tensor() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[43, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.set_tensor"]], "train() (neural_compressor.adaptor.tensorflow.tensorflowadaptor method)": [[43, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor.train"]], "graphconverter (class in neural_compressor.adaptor.tf_utils.graph_converter)": [[44, "neural_compressor.adaptor.tf_utils.graph_converter.GraphConverter"]], "bf16_convert() (neural_compressor.adaptor.tf_utils.graph_converter.graphconverter method)": [[44, "neural_compressor.adaptor.tf_utils.graph_converter.GraphConverter.bf16_convert"]], "convert() (neural_compressor.adaptor.tf_utils.graph_converter.graphconverter method)": [[44, "neural_compressor.adaptor.tf_utils.graph_converter.GraphConverter.convert"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[44, "module-neural_compressor.adaptor.tf_utils.graph_converter"]], "quantize() (neural_compressor.adaptor.tf_utils.graph_converter.graphconverter method)": [[44, "neural_compressor.adaptor.tf_utils.graph_converter.GraphConverter.quantize"]], "quantize_with_qdq_pattern() (neural_compressor.adaptor.tf_utils.graph_converter.graphconverter method)": [[44, "neural_compressor.adaptor.tf_utils.graph_converter.GraphConverter.quantize_with_qdq_pattern"]], "graphconverterwithoutcalib (class in neural_compressor.adaptor.tf_utils.graph_converter_without_calib)": [[45, "neural_compressor.adaptor.tf_utils.graph_converter_without_calib.GraphConverterWithoutCalib"]], "bf16_convert() (neural_compressor.adaptor.tf_utils.graph_converter_without_calib.graphconverterwithoutcalib method)": [[45, "neural_compressor.adaptor.tf_utils.graph_converter_without_calib.GraphConverterWithoutCalib.bf16_convert"]], "convert_without_calib() (neural_compressor.adaptor.tf_utils.graph_converter_without_calib.graphconverterwithoutcalib method)": [[45, "neural_compressor.adaptor.tf_utils.graph_converter_without_calib.GraphConverterWithoutCalib.convert_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[45, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"]], "quantize_without_calib() (neural_compressor.adaptor.tf_utils.graph_converter_without_calib.graphconverterwithoutcalib method)": [[45, "neural_compressor.adaptor.tf_utils.graph_converter_without_calib.GraphConverterWithoutCalib.quantize_without_calib"]], "bf16convert (class in neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert)": [[46, "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert.BF16Convert"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert.bf16convert method)": [[46, "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert.BF16Convert.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[46, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[47, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"]], "convertaddtobiasaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd)": [[48, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd.ConvertAddToBiasAddOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd.convertaddtobiasaddoptimizer method)": [[48, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd.ConvertAddToBiasAddOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[48, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"]], "convertlayoutoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout)": [[49, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout.ConvertLayoutOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout.convertlayoutoptimizer method)": [[49, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout.ConvertLayoutOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[49, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"]], "convertleakyreluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu)": [[50, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu.ConvertLeakyReluOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu.convertleakyreluoptimizer method)": [[50, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu.ConvertLeakyReluOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"]], "convertnantorandom (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random)": [[51, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random.ConvertNanToRandom"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random.convertnantorandom method)": [[51, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random.ConvertNanToRandom.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"]], "convertplaceholdertoconst (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const)": [[52, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.convertplaceholdertoconst method)": [[52, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"]], "strtobool() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.convertplaceholdertoconst method)": [[52, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst.strtobool"]], "dequantizecastoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer)": [[53, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer.DequantizeCastOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer.dequantizecastoptimizer method)": [[53, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer.DequantizeCastOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"]], "dilatedcontraction (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction)": [[54, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction.DilatedContraction"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction.dilatedcontraction method)": [[54, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction.DilatedContraction.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"]], "injectdummybiasaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd)": [[55, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd.InjectDummyBiasAddOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd.injectdummybiasaddoptimizer method)": [[55, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd.InjectDummyBiasAddOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"]], "expanddimsoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer)": [[56, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer.ExpandDimsOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer.expanddimsoptimizer method)": [[56, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer.ExpandDimsOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"]], "fetchweightfromreshapeoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape)": [[57, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape.FetchWeightFromReshapeOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape.fetchweightfromreshapeoptimizer method)": [[57, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape.FetchWeightFromReshapeOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "foldbatchnormnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm)": [[58, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.foldbatchnormnodesoptimizer method)": [[58, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"]], "scale_after_normalization() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.foldbatchnormnodesoptimizer method)": [[58, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer.scale_after_normalization"]], "graphfoldconstantoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant)": [[59, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer"]], "check_all_folded() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.graphfoldconstantoptimizer method)": [[59, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer.check_all_folded"]], "check_const_inputs() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.graphfoldconstantoptimizer method)": [[59, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer.check_const_inputs"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.graphfoldconstantoptimizer method)": [[59, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"]], "fusebiasaddandaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add)": [[60, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add.FuseBiasAddAndAddOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add.fusebiasaddandaddoptimizer method)": [[60, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add.FuseBiasAddAndAddOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"]], "fusecolumnwisemuloptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul)": [[61, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul.FuseColumnWiseMulOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul.fusecolumnwisemuloptimizer method)": [[61, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul.FuseColumnWiseMulOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"]], "fuseconvwithmathoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math)": [[62, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math.FuseConvWithMathOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math.fuseconvwithmathoptimizer method)": [[62, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math.FuseConvWithMathOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"]], "fusedecomposedbnoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[63, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.FuseDecomposedBNOptimizer"]], "bypass_reshape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[63, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.bypass_reshape"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.fusedecomposedbnoptimizer method)": [[63, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.FuseDecomposedBNOptimizer.do_transformation"]], "get_const_dim_count() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[63, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.get_const_dim_count"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[63, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[63, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_name_from_input"]], "valid_reshape_inputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[63, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.valid_reshape_inputs"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[63, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.values_from_const"]], "fusedecomposedinoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[64, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.FuseDecomposedINOptimizer"]], "bypass_reshape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[64, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.bypass_reshape"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.fusedecomposedinoptimizer method)": [[64, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.FuseDecomposedINOptimizer.do_transformation"]], "get_const_dim_count() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[64, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.get_const_dim_count"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[64, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[64, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.node_name_from_input"]], "valid_reshape_inputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[64, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.valid_reshape_inputs"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[64, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.values_from_const"]], "fusegeluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu)": [[65, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu.FuseGeluOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu.fusegeluoptimizer method)": [[65, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu.FuseGeluOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"]], "fuselayernormoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.FuseLayerNormOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.fuselayernormoptimizer method)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.FuseLayerNormOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.node_name_from_input"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.values_from_const"]], "fusepadwithconv2doptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv.FusePadWithConv2DOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv.fusepadwithconv2doptimizer method)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv.FusePadWithConv2DOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"]], "fusepadwithfp32conv2doptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.FusePadWithFP32Conv2DOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.fusepadwithfp32conv2doptimizer method)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.FusePadWithFP32Conv2DOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "fusetransposereshapeoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose)": [[69, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose.FuseTransposeReshapeOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose.fusetransposereshapeoptimizer method)": [[69, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose.FuseTransposeReshapeOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"]], "graphcseoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer)": [[70, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer.GraphCseOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer.graphcseoptimizer method)": [[70, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer.GraphCseOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"]], "grappleroptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass)": [[71, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass.GrapplerOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass.grappleroptimizer method)": [[71, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass.GrapplerOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"]], "insertprintminmaxnode (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node)": [[73, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node.InsertPrintMinMaxNode"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node.insertprintminmaxnode method)": [[73, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node.InsertPrintMinMaxNode.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"]], "movesqueezeafterreluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu)": [[74, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu.MoveSqueezeAfterReluOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu.movesqueezeafterreluoptimizer method)": [[74, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu.MoveSqueezeAfterReluOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"]], "preoptimization (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize)": [[75, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.PreOptimization"]], "get_excluded_node_names() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.preoptimization method)": [[75, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.PreOptimization.get_excluded_node_names"]], "get_matched_nodes() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.preoptimization method)": [[75, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.PreOptimization.get_matched_nodes"]], "get_optimized_model() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.preoptimization method)": [[75, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.PreOptimization.get_optimized_model"]], "has_positive_input() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.preoptimization method)": [[75, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.PreOptimization.has_positive_input"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"]], "removetrainingnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes)": [[76, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes.RemoveTrainingNodesOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes.removetrainingnodesoptimizer method)": [[76, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes.RemoveTrainingNodesOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"]], "renamebatchnormoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm)": [[77, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm.RenameBatchNormOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm.renamebatchnormoptimizer method)": [[77, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm.RenameBatchNormOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"]], "splitsharedinputoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input)": [[78, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input.SplitSharedInputOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input.splitsharedinputoptimizer method)": [[78, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input.SplitSharedInputOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"]], "stripequivalentnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes)": [[79, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes.StripEquivalentNodesOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes.stripequivalentnodesoptimizer method)": [[79, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes.StripEquivalentNodesOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"]], "stripunusednodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes)": [[80, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes.StripUnusedNodesOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes.stripunusednodesoptimizer method)": [[80, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes.StripUnusedNodesOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"]], "switchoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer)": [[81, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer.SwitchOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer.switchoptimizer method)": [[81, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer.SwitchOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"]], "graphrewriterbase (class in neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base)": [[82, "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base.GraphRewriterBase"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base.graphrewriterbase method)": [[82, "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base.GraphRewriterBase.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"]], "freezefakequantopoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant)": [[84, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant.FreezeFakeQuantOpOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant.freezefakequantopoptimizer method)": [[84, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant.FreezeFakeQuantOpOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"]], "freezevaluetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value)": [[85, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.freezevaluetransformer method)": [[85, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer.do_transformation"]], "generate_output_graph() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.freezevaluetransformer method)": [[85, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer.generate_output_graph"]], "generate_output_graph_ranges() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.freezevaluetransformer method)": [[85, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer.generate_output_graph_ranges"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"]], "freezevaluewithoutcalibtransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib)": [[86, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer"]], "do_transformation_without_calib() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.freezevaluewithoutcalibtransformer method)": [[86, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer.do_transformation_without_calib"]], "generate_output_graph() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.freezevaluewithoutcalibtransformer method)": [[86, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer.generate_output_graph"]], "generate_output_graph_ranges() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.freezevaluewithoutcalibtransformer method)": [[86, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer.generate_output_graph_ranges"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"]], "fuseconvredundantdequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize)": [[87, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.FuseConvRedundantDequantizeTransformer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.fuseconvredundantdequantizetransformer method)": [[87, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.FuseConvRedundantDequantizeTransformer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "fuseconvrequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize)": [[88, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize.FuseConvRequantizeTransformer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize.fuseconvrequantizetransformer method)": [[88, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize.FuseConvRequantizeTransformer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"]], "fusematmulredundantdequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize)": [[89, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.FuseMatMulRedundantDequantizeTransformer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.fusematmulredundantdequantizetransformer method)": [[89, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.FuseMatMulRedundantDequantizeTransformer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "fusematmulrequantizedequantizenewapitransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeNewAPITransformer"]], "fusematmulrequantizedequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeTransformer"]], "fusematmulrequantizenewapitransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeNewAPITransformer"]], "fusematmulrequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeTransformer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.fusematmulrequantizedequantizenewapitransformer method)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeNewAPITransformer.do_transformation"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.fusematmulrequantizedequantizetransformer method)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeTransformer.do_transformation"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.fusematmulrequantizenewapitransformer method)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeNewAPITransformer.do_transformation"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.fusematmulrequantizetransformer method)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeTransformer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"]], "metainfochangingmemopoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer)": [[92, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer.MetaInfoChangingMemOpOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer.metainfochangingmemopoptimizer method)": [[92, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer.MetaInfoChangingMemOpOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"]], "posthostconstconverter (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter)": [[93, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter.PostHostConstConverter"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter.posthostconstconverter method)": [[93, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter.PostHostConstConverter.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"]], "postcseoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse.PostCseOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse.postcseoptimizer method)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse.PostCseOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"]], "quantizedrnnconverter (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert)": [[95, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert.QuantizedRNNConverter"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert.quantizedrnnconverter method)": [[95, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert.QuantizedRNNConverter.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"]], "scalepropagationtransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation.ScaleProPagationTransformer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation.scalepropagationtransformer method)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation.ScaleProPagationTransformer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"]], "onnxgraph (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph"]], "add_graph_input() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.add_graph_input"]], "add_graph_output() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.add_graph_output"]], "append_node() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.append_node"]], "apply_onnx_fusion() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.apply_onnx_fusion"]], "convert_qdq_nodes() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.convert_qdq_nodes"]], "copy_dtype() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.copy_dtype"]], "copy_shape() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.copy_shape"]], "create_new_graph_with_same_config() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.create_new_graph_with_same_config"]], "delete_qdq_nodes() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.delete_qdq_nodes"]], "delete_unused_nodes() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.delete_unused_nodes"]], "dump_graph() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.dump_graph"]], "dump_node_statistics() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.dump_node_statistics"]], "extra_opset (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph property)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.extra_opset"]], "extract_sub_graph_nodes() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.extract_sub_graph_nodes"]], "find_output_consumers() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.find_output_consumers"]], "get_dtype() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.get_dtype"]], "get_node_by_name() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.get_node_by_name"]], "get_node_by_output() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.get_node_by_output"]], "get_node_by_output_in_current_graph() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.get_node_by_output_in_current_graph"]], "get_nodes() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.get_nodes"]], "get_rank() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.get_rank"]], "get_shape() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.get_shape"]], "get_tensor_value() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.get_tensor_value"]], "input_names (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph property)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.input_names"]], "insert_new_node_on_input() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.insert_new_node_on_input"]], "insert_new_node_on_output() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.insert_new_node_on_output"]], "insert_node_on_output() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.insert_node_on_output"]], "is_const() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.is_const"]], "is_empty_input() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.is_empty_input"]], "is_target() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.is_target"]], "make_const() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.make_const"]], "make_graph() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.make_graph"]], "make_model() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.make_model"]], "make_node() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.make_node"]], "make_onnx_graph_io() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.make_onnx_graph_io"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"]], "opset (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph property)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.opset"]], "optimize_conv_add_fusion() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.optimize_conv_add_fusion"]], "remove_input() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.remove_input"]], "remove_node() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.remove_node"]], "replace_all_inputs() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.replace_all_inputs"]], "replace_input() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.replace_input"]], "replace_inputs() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.replace_inputs"]], "reset_nodes() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.reset_nodes"]], "safe_remove_nodes() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.safe_remove_nodes"]], "safe_to_remove_nodes() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.safe_to_remove_nodes"]], "set_config() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.set_config"]], "set_dtype() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.set_dtype"]], "set_node_by_name() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.set_node_by_name"]], "set_shape() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.set_shape"]], "topological_sort() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.topological_sort"]], "update_node_shape_dtype() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.update_node_shape_dtype"]], "update_proto() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.onnxgraph method)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph.update_proto"]], "onnxnode (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode"]], "attr (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode property)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.attr"]], "child_name() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode method)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.child_name"]], "data_format (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode property)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.data_format"]], "domain (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode property)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.domain"]], "get_attr() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode method)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.get_attr"]], "get_attr_int() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode method)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.get_attr_int"]], "get_attr_str() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode method)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.get_attr_str"]], "get_attr_value() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode method)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.get_attr_value"]], "get_body_graphs() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode method)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.get_body_graphs"]], "get_implicit_inputs() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode method)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.get_implicit_inputs"]], "get_onnx_attrs() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode method)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.get_onnx_attrs"]], "get_tensor_value() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode method)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.get_tensor_value"]], "get_value_attr() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode method)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.get_value_attr"]], "input (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode property)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.input"]], "inputs (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode property)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.inputs"]], "is_const() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode method)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.is_const"]], "is_graph_input() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode method)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.is_graph_input"]], "is_graph_input_default_const() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode method)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.is_graph_input_default_const"]], "is_nhwc() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode method)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.is_nhwc"]], "is_scalar() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode method)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.is_scalar"]], "is_while() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode method)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.is_while"]], "name (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode property)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.name"]], "need_skip() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode method)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.need_skip"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"]], "op (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode property)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.op"]], "output (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode property)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.output"]], "output_dtypes (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode property)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.output_dtypes"]], "output_shapes (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode property)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.output_shapes"]], "scalar_to_dim1() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode method)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.scalar_to_dim1"]], "set_attr() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode method)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.set_attr"]], "set_attr_onnx() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode method)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.set_attr_onnx"]], "set_body_graph_as_attr() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode method)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.set_body_graph_as_attr"]], "set_tensor_value() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode method)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.set_tensor_value"]], "skip_conversion (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode property)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.skip_conversion"]], "summary (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode property)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.summary"]], "type (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode property)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.type"]], "update_proto() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.onnxnode method)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode.update_proto"]], "onnxopschema (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[100, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.OnnxOpSchema"]], "attributes (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.onnxopschema property)": [[100, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.OnnxOpSchema.attributes"]], "domain (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.onnxopschema property)": [[100, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.OnnxOpSchema.domain"]], "from_onnx_schema() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.onnxopschema static method)": [[100, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.OnnxOpSchema.from_onnx_schema"]], "get_max_supported_opset_version() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[100, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.get_max_supported_opset_version"]], "get_schema() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[100, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.get_schema"]], "has_attribute() (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.onnxopschema method)": [[100, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.OnnxOpSchema.has_attribute"]], "name (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.onnxopschema property)": [[100, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.OnnxOpSchema.name"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"]], "since_version (neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.onnxopschema property)": [[100, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.OnnxOpSchema.since_version"]], "seqtype (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.SeqType"]], "add_port_to_name() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.add_port_to_name"]], "are_shapes_equal() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.are_shapes_equal"]], "assert_error() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.assert_error"]], "compute_const_folding_using_tf() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.compute_const_folding_using_tf"]], "convert_tensorflow_tensor_to_onnx() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.convert_tensorflow_tensor_to_onnx"]], "find_opset() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.find_opset"]], "get_index_from_strided_slice_of_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_index_from_strided_slice_of_shape"]], "get_subgraphs_from_onnx() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_subgraphs_from_onnx"]], "get_tensorflow_node_attr() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_node_attr"]], "get_tensorflow_node_shape_attr() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_node_shape_attr"]], "get_tensorflow_tensor_data() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_tensor_data"]], "get_tensorflow_tensor_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_tensor_shape"]], "infer_onnx_shape_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.infer_onnx_shape_dtype"]], "initialize_name_counter() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.initialize_name_counter"]], "is_list_or_tuple() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.is_list_or_tuple"]], "is_onnx_domain() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.is_onnx_domain"]], "make_onnx_inputs_outputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.make_onnx_inputs_outputs"]], "make_onnx_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.make_onnx_shape"]], "map_numpy_to_onnx_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_numpy_to_onnx_dtype"]], "map_onnx_to_numpy_type() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_onnx_to_numpy_type"]], "map_tensorflow_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_tensorflow_dtype"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"]], "read_tensorflow_node_attrs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.read_tensorflow_node_attrs"]], "save_protobuf() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.save_protobuf"]], "set_name() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.set_name"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"]], "generategraphwithqdqpattern (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern.GenerateGraphWithQDQPattern"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern.generategraphwithqdqpattern method)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern.GenerateGraphWithQDQPattern.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"]], "mergeduplicatedqdqoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq.MergeDuplicatedQDQOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq.mergeduplicatedqdqoptimizer method)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq.MergeDuplicatedQDQOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "shareqdqforitexypatternoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern.ShareQDQForItexYPatternOptimizer"]], "do_transformation() (neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern.shareqdqforitexypatternoptimizer method)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern.ShareQDQForItexYPatternOptimizer.do_transformation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "graphanalyzer (class in neural_compressor.adaptor.tf_utils.graph_util)": [[106, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer"]], "graphrewriterhelper (class in neural_compressor.adaptor.tf_utils.graph_util)": [[106, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper"]], "add_node() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[106, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.add_node"]], "analysis_rnn_model() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[106, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.analysis_rnn_model"]], "compare_node_attr() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[106, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.compare_node_attr"]], "create_constant_node() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[106, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.create_constant_node"]], "create_node() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[106, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.create_node"]], "dump_graph() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[106, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.dump_graph"]], "gen_valid_sampling_log() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[106, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.gen_valid_sampling_log"]], "generate_int32_bias_for_conv() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[106, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.generate_int32_bias_for_conv"]], "generate_int32_bias_for_matmul() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[106, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.generate_int32_bias_for_matmul"]], "get_frame_info() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[106, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.get_frame_info"]], "get_graph_input_output() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[106, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.get_graph_input_output"]], "graph (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer property)": [[106, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.graph"]], "has_positive_input() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[106, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.has_positive_input"]], "neural_compressor.adaptor.tf_utils.graph_util": [[106, "module-neural_compressor.adaptor.tf_utils.graph_util"]], "node_name_from_input() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[106, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.node_name_from_input"]], "parse_graph() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[106, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.parse_graph"]], "query_fusion_pattern_nodes() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[106, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.query_fusion_pattern_nodes"]], "remove_node() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[106, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.remove_node"]], "remove_node_with_single_input_output() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[106, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.remove_node_with_single_input_output"]], "replace_const_node() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[106, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.replace_const_node"]], "replace_constant_graph_with_constant_node() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[106, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.replace_constant_graph_with_constant_node"]], "replace_node() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[106, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.replace_node"]], "replace_single_node() (neural_compressor.adaptor.tf_utils.graph_util.graphanalyzer method)": [[106, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer.replace_single_node"]], "set_attr_bool() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[106, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_bool"]], "set_attr_dtype() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[106, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_dtype"]], "set_attr_float() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[106, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_float"]], "set_attr_int() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[106, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_int"]], "set_attr_int_list() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[106, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_int_list"]], "set_attr_string() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[106, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_string"]], "set_attr_string_list() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[106, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_string_list"]], "set_attr_tensor() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[106, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_tensor"]], "set_attr_type_list() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[106, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.set_attr_type_list"]], "values_from_const() (neural_compressor.adaptor.tf_utils.graph_util.graphrewriterhelper static method)": [[106, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper.values_from_const"]], "neural_compressor.adaptor.tf_utils": [[107, "module-neural_compressor.adaptor.tf_utils"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[108, "module-neural_compressor.adaptor.tf_utils.quantize_graph"]], "fakequantize (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize)": [[109, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantize"]], "fakequantizebase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize)": [[109, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantizeBase"]], "from_config() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.fakequantizebase class method)": [[109, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantizeBase.from_config"]], "get_config() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.fakequantize method)": [[109, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantize.get_config"]], "get_config() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.fakequantizebase method)": [[109, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantizeBase.get_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[109, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[110, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"]], "quantizeconfig (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config)": [[111, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig"]], "add_quantize_recipe() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.quantizeconfig method)": [[111, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig.add_quantize_recipe"]], "clear_quantize_recipe() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.quantizeconfig method)": [[111, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig.clear_quantize_recipe"]], "get_quantize_recipe() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.quantizeconfig method)": [[111, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig.get_quantize_recipe"]], "is_empty() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.quantizeconfig method)": [[111, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig.is_empty"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[111, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"]], "query_layer() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.quantizeconfig method)": [[111, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig.query_layer"]], "remove_layer() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.quantizeconfig method)": [[111, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig.remove_layer"]], "remove_layers() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.quantizeconfig method)": [[111, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig.remove_layers"]], "init_quantize_config() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper)": [[112, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper.init_quantize_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[112, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"]], "qat_clone_function() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper)": [[112, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper.qat_clone_function"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"]], "config_quantizable_layers() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer)": [[114, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer.config_quantizable_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "quantizelayeradd (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add)": [[115, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add.QuantizeLayerAdd"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "quantizelayerbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base)": [[116, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base.QuantizeLayerBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "quantizelayerbatchnormalization (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn)": [[117, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn.QuantizeLayerBatchNormalization"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "quantizewrapper (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper)": [[118, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapper"]], "quantizewrapperbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper)": [[118, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase"]], "build() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapper method)": [[118, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapper.build"]], "build() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase method)": [[118, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.build"]], "call() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapper method)": [[118, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapper.call"]], "call() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase method)": [[118, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.call"]], "compute_output_shape() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase method)": [[118, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.compute_output_shape"]], "from_config() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase class method)": [[118, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.from_config"]], "get_config() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase method)": [[118, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.get_config"]], "losses (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase property)": [[118, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.losses"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"]], "non_trainable_weights (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase property)": [[118, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.non_trainable_weights"]], "query_input_index() (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase method)": [[118, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.query_input_index"]], "trainable (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase property)": [[118, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.trainable"]], "trainable_weights (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase property)": [[118, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.trainable_weights"]], "updates (neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.quantizewrapperbase property)": [[118, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase.updates"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn)": [[119, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3"]], "apply_newly_bn_leakyrelu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.fusenodestartwithfusedbatchnormv3 method)": [[119, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3.apply_newly_bn_leakyrelu_fusion"]], "apply_newly_bn_relu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.fusenodestartwithfusedbatchnormv3 method)": [[119, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3.apply_newly_bn_relu_fusion"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.fusenodestartwithfusedbatchnormv3 method)": [[119, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.fusenodestartwithfusedbatchnormv3 method)": [[119, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2)": [[120, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.fusenodestartwithconcatv2 method)": [[120, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.fusenodestartwithconcatv2 method)": [[120, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv)": [[121, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d"]], "apply_conv3d_add_addn_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[121, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_conv3d_add_addn_fusion"]], "apply_conv3d_add_addn_relu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[121, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_conv3d_add_addn_relu_fusion"]], "apply_conv3d_add_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[121, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_conv3d_add_fusion"]], "apply_conv3d_add_relu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[121, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_conv3d_add_relu_fusion"]], "apply_conv3d_single_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[121, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_conv3d_single_fusion"]], "apply_conv_biasadd_hardswish_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[121, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_conv_biasadd_hardswish_fusion"]], "apply_newly_conv_biasadd_addn_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[121, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_newly_conv_biasadd_addn_fusion"]], "apply_newly_conv_biasadd_addn_relu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[121, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_newly_conv_biasadd_addn_relu_fusion"]], "apply_newly_conv_biasadd_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[121, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_newly_conv_biasadd_fusion"]], "apply_newly_conv_biasadd_relu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[121, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_newly_conv_biasadd_relu_fusion"]], "apply_newly_conv_biasadd_swishf32_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[121, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_newly_conv_biasadd_swishf32_fusion"]], "apply_newly_conv_single_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[121, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_newly_conv_single_fusion"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[121, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.fusenodestartwithconv2d method)": [[121, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"]], "fusenodestartwithdeconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv)": [[122, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d"]], "apply_deconv2d_biasadd_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.fusenodestartwithdeconv2d method)": [[122, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d.apply_deconv2d_biasadd_fusion"]], "apply_deconv3d_biasadd_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.fusenodestartwithdeconv2d method)": [[122, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d.apply_deconv3d_biasadd_fusion"]], "apply_single_deconv2d_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.fusenodestartwithdeconv2d method)": [[122, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d.apply_single_deconv2d_fusion"]], "apply_single_deconv3d_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.fusenodestartwithdeconv2d method)": [[122, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d.apply_single_deconv3d_fusion"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.fusenodestartwithdeconv2d method)": [[122, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.fusenodestartwithdeconv2d method)": [[122, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"]], "fusenodestartwithfusedinstancenorm (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in)": [[123, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm"]], "apply_newly_in_relu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.fusenodestartwithfusedinstancenorm method)": [[123, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm.apply_newly_in_relu_fusion"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.fusenodestartwithfusedinstancenorm method)": [[123, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.fusenodestartwithfusedinstancenorm method)": [[123, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"]], "fusenodestartwithmatmul (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul)": [[124, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul"]], "apply_batchmatmulv2_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.fusenodestartwithmatmul method)": [[124, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul.apply_batchmatmulv2_fusion"]], "apply_batchmatmulv2_mul_add_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.fusenodestartwithmatmul method)": [[124, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul.apply_batchmatmulv2_mul_add_fusion"]], "apply_matmul_biasadd_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.fusenodestartwithmatmul method)": [[124, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul.apply_matmul_biasadd_fusion"]], "apply_matmul_biasadd_relu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.fusenodestartwithmatmul method)": [[124, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul.apply_matmul_biasadd_relu_fusion"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.fusenodestartwithmatmul method)": [[124, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.fusenodestartwithmatmul method)": [[124, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"]], "fusenodestartwithpooling (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling)": [[125, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.fusenodestartwithpooling method)": [[125, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.fusenodestartwithpooling method)": [[125, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"]], "optimizeqdqgraph (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq)": [[127, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.OptimizeQDQGraph"]], "do_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.optimizeqdqgraph method)": [[127, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.OptimizeQDQGraph.do_transform"]], "get_quantized_nodes() (neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.optimizeqdqgraph method)": [[127, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.OptimizeQDQGraph.get_quantized_nodes"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"]], "quantizegraphbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base)": [[128, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase"]], "quantizenodebase (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base)": [[128, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase"]], "add_output_graph_node() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizenodebase method)": [[128, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase.add_output_graph_node"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizenodebase method)": [[128, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase.apply_the_transform"]], "create_nodes_map() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizenodebase method)": [[128, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase.create_nodes_map"]], "do_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizegraphbase method)": [[128, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase.do_transform"]], "eightbitize_single_input_tensor_node() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizenodebase method)": [[128, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase.eightbitize_single_input_tensor_node"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizenodebase method)": [[128, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"]], "register_transformer() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizegraphbase method)": [[128, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase.register_transformer"]], "remove_dead_nodes() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizegraphbase method)": [[128, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase.remove_dead_nodes"]], "remove_redundant_quantization() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.quantizenodebase method)": [[128, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase.remove_redundant_quantization"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn)": [[129, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3"]], "apply_newly_bn_leakyrelu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.fusenodestartwithfusedbatchnormv3 method)": [[129, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3.apply_newly_bn_leakyrelu_fusion"]], "apply_newly_bn_relu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.fusenodestartwithfusedbatchnormv3 method)": [[129, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3.apply_newly_bn_relu_fusion"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.fusenodestartwithfusedbatchnormv3 method)": [[129, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.fusenodestartwithfusedbatchnormv3 method)": [[129, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2)": [[130, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.fusenodestartwithconcatv2 method)": [[130, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.fusenodestartwithconcatv2 method)": [[130, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv)": [[131, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d"]], "apply_conv_biasadd_addn_relu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.fusenodestartwithconv2d method)": [[131, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d.apply_conv_biasadd_addn_relu_fusion"]], "apply_conv_biasadd_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.fusenodestartwithconv2d method)": [[131, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d.apply_conv_biasadd_fusion"]], "apply_conv_biasadd_relu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.fusenodestartwithconv2d method)": [[131, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d.apply_conv_biasadd_relu_fusion"]], "apply_conv_single_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.fusenodestartwithconv2d method)": [[131, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d.apply_conv_single_fusion"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.fusenodestartwithconv2d method)": [[131, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.fusenodestartwithconv2d method)": [[131, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"]], "quantizegraphforintel (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu)": [[132, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu.QuantizeGraphForIntel"]], "do_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu.quantizegraphforintel method)": [[132, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu.QuantizeGraphForIntel.do_transform"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"]], "fusenodestartwithmatmul (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul)": [[133, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul"]], "apply_matmul_biasadd_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.fusenodestartwithmatmul method)": [[133, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul.apply_matmul_biasadd_fusion"]], "apply_matmul_biasadd_relu_fusion() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.fusenodestartwithmatmul method)": [[133, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul.apply_matmul_biasadd_relu_fusion"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.fusenodestartwithmatmul method)": [[133, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.fusenodestartwithmatmul method)": [[133, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"]], "fusenodestartwithpooling (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling)": [[134, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling"]], "apply_the_transform() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.fusenodestartwithpooling method)": [[134, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling.apply_the_transform"]], "get_longest_fuse() (neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.fusenodestartwithpooling method)": [[134, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling.get_longest_fuse"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"]], "quantizegraphhelper (class in neural_compressor.adaptor.tf_utils.quantize_graph_common)": [[135, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper"]], "copy_attr() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[135, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.copy_attr"]], "create_constant_node() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[135, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.create_constant_node"]], "create_node() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[135, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.create_node"]], "ensure_tensor_name_has_port() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[135, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.ensure_tensor_name_has_port"]], "generate_quantized_weight_node() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[135, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.generate_quantized_weight_node"]], "get_sorted_graph() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper method)": [[135, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.get_sorted_graph"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[135, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"]], "node_name_from_input() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[135, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.node_name_from_input"]], "remove_training_nodes() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[135, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.remove_training_nodes"]], "set_attr_bool() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[135, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_bool"]], "set_attr_dtype() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[135, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_dtype"]], "set_attr_float() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[135, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_float"]], "set_attr_int() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[135, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_int"]], "set_attr_string() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[135, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_string"]], "set_attr_string_list() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[135, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_string_list"]], "set_attr_tensor() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[135, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_tensor"]], "set_attr_type_list() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[135, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.set_attr_type_list"]], "split_shared_inputs() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[135, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.split_shared_inputs"]], "unique_node_name_from_input() (neural_compressor.adaptor.tf_utils.quantize_graph_common.quantizegraphhelper static method)": [[135, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper.unique_node_name_from_input"]], "tensorflowqdqtoonnxqdqconverter (class in neural_compressor.adaptor.tf_utils.tf2onnx_converter)": [[136, "neural_compressor.adaptor.tf_utils.tf2onnx_converter.TensorflowQDQToOnnxQDQConverter"]], "convert() (neural_compressor.adaptor.tf_utils.tf2onnx_converter.tensorflowqdqtoonnxqdqconverter method)": [[136, "neural_compressor.adaptor.tf_utils.tf2onnx_converter.TensorflowQDQToOnnxQDQConverter.convert"]], "duplicate_tf_quantizev2_nodes() (neural_compressor.adaptor.tf_utils.tf2onnx_converter.tensorflowqdqtoonnxqdqconverter method)": [[136, "neural_compressor.adaptor.tf_utils.tf2onnx_converter.TensorflowQDQToOnnxQDQConverter.duplicate_tf_quantizev2_nodes"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[136, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"]], "tf_graph_optimize() (neural_compressor.adaptor.tf_utils.tf2onnx_converter.tensorflowqdqtoonnxqdqconverter method)": [[136, "neural_compressor.adaptor.tf_utils.tf2onnx_converter.TensorflowQDQToOnnxQDQConverter.tf_graph_optimize"]], "transpose_inputs() (neural_compressor.adaptor.tf_utils.tf2onnx_converter.tensorflowqdqtoonnxqdqconverter method)": [[136, "neural_compressor.adaptor.tf_utils.tf2onnx_converter.TensorflowQDQToOnnxQDQConverter.transpose_inputs"]], "biascorrection (class in neural_compressor.adaptor.tf_utils.transform_graph.bias_correction)": [[137, "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction.BiasCorrection"]], "do_transformation() (neural_compressor.adaptor.tf_utils.transform_graph.bias_correction.biascorrection method)": [[137, "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction.BiasCorrection.do_transformation"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[137, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"]], "graphtransformbase (class in neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base)": [[138, "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.GraphTransformBase"]], "do_transformation() (neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.graphtransformbase method)": [[138, "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.GraphTransformBase.do_transformation"]], "generate_input_map() (neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.graphtransformbase method)": [[138, "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.GraphTransformBase.generate_input_map"]], "get_node_name_from_input() (neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.graphtransformbase method)": [[138, "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.GraphTransformBase.get_node_name_from_input"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[138, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"]], "node_name_from_input() (neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.graphtransformbase method)": [[138, "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.GraphTransformBase.node_name_from_input"]], "parse_input_pb() (neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.graphtransformbase method)": [[138, "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.GraphTransformBase.parse_input_pb"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[139, "module-neural_compressor.adaptor.tf_utils.transform_graph"]], "insertlogging (class in neural_compressor.adaptor.tf_utils.transform_graph.insert_logging)": [[140, "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging.InsertLogging"]], "do_transformation() (neural_compressor.adaptor.tf_utils.transform_graph.insert_logging.insertlogging method)": [[140, "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging.InsertLogging.do_transformation"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[140, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"]], "rerangequantizedconcat (class in neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat)": [[141, "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat.RerangeQuantizedConcat"]], "do_transformation() (neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat.rerangequantizedconcat method)": [[141, "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat.RerangeQuantizedConcat.do_transformation"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[141, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"]], "collate_tf_preds() (in module neural_compressor.adaptor.tf_utils.util)": [[142, "neural_compressor.adaptor.tf_utils.util.collate_tf_preds"]], "disable_random() (in module neural_compressor.adaptor.tf_utils.util)": [[142, "neural_compressor.adaptor.tf_utils.util.disable_random"]], "fix_ref_type_of_graph_def() (in module neural_compressor.adaptor.tf_utils.util)": [[142, "neural_compressor.adaptor.tf_utils.util.fix_ref_type_of_graph_def"]], "generate_feed_dict() (in module neural_compressor.adaptor.tf_utils.util)": [[142, "neural_compressor.adaptor.tf_utils.util.generate_feed_dict"]], "get_estimator_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[142, "neural_compressor.adaptor.tf_utils.util.get_estimator_graph"]], "get_graph_def() (in module neural_compressor.adaptor.tf_utils.util)": [[142, "neural_compressor.adaptor.tf_utils.util.get_graph_def"]], "get_input_output_node_names() (in module neural_compressor.adaptor.tf_utils.util)": [[142, "neural_compressor.adaptor.tf_utils.util.get_input_output_node_names"]], "get_model_input_shape() (in module neural_compressor.adaptor.tf_utils.util)": [[142, "neural_compressor.adaptor.tf_utils.util.get_model_input_shape"]], "get_tensor_by_name() (in module neural_compressor.adaptor.tf_utils.util)": [[142, "neural_compressor.adaptor.tf_utils.util.get_tensor_by_name"]], "get_tensor_val_from_graph_node() (in module neural_compressor.adaptor.tf_utils.util)": [[142, "neural_compressor.adaptor.tf_utils.util.get_tensor_val_from_graph_node"]], "int8_node_name_reverse() (in module neural_compressor.adaptor.tf_utils.util)": [[142, "neural_compressor.adaptor.tf_utils.util.int8_node_name_reverse"]], "is_ckpt_format() (in module neural_compressor.adaptor.tf_utils.util)": [[142, "neural_compressor.adaptor.tf_utils.util.is_ckpt_format"]], "is_saved_model_format() (in module neural_compressor.adaptor.tf_utils.util)": [[142, "neural_compressor.adaptor.tf_utils.util.is_saved_model_format"]], "iterator_sess_run() (in module neural_compressor.adaptor.tf_utils.util)": [[142, "neural_compressor.adaptor.tf_utils.util.iterator_sess_run"]], "neural_compressor.adaptor.tf_utils.util": [[142, "module-neural_compressor.adaptor.tf_utils.util"]], "read_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[142, "neural_compressor.adaptor.tf_utils.util.read_graph"]], "strip_equivalent_nodes() (in module neural_compressor.adaptor.tf_utils.util)": [[142, "neural_compressor.adaptor.tf_utils.util.strip_equivalent_nodes"]], "strip_unused_nodes() (in module neural_compressor.adaptor.tf_utils.util)": [[142, "neural_compressor.adaptor.tf_utils.util.strip_unused_nodes"]], "tf_diagnosis_helper() (in module neural_compressor.adaptor.tf_utils.util)": [[142, "neural_compressor.adaptor.tf_utils.util.tf_diagnosis_helper"]], "version1_eq_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[142, "neural_compressor.adaptor.tf_utils.util.version1_eq_version2"]], "version1_gt_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[142, "neural_compressor.adaptor.tf_utils.util.version1_gt_version2"]], "version1_gte_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[142, "neural_compressor.adaptor.tf_utils.util.version1_gte_version2"]], "version1_lt_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[142, "neural_compressor.adaptor.tf_utils.util.version1_lt_version2"]], "version1_lte_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[142, "neural_compressor.adaptor.tf_utils.util.version1_lte_version2"]], "write_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[142, "neural_compressor.adaptor.tf_utils.util.write_graph"]], "bf16modulewrapper (class in neural_compressor.adaptor.torch_utils.bf16_convert)": [[143, "neural_compressor.adaptor.torch_utils.bf16_convert.BF16ModuleWrapper"]], "convert() (in module neural_compressor.adaptor.torch_utils.bf16_convert)": [[143, "neural_compressor.adaptor.torch_utils.bf16_convert.Convert"]], "bf16_symbolic_trace() (in module neural_compressor.adaptor.torch_utils.bf16_convert)": [[143, "neural_compressor.adaptor.torch_utils.bf16_convert.bf16_symbolic_trace"]], "forward() (neural_compressor.adaptor.torch_utils.bf16_convert.bf16modulewrapper method)": [[143, "neural_compressor.adaptor.torch_utils.bf16_convert.BF16ModuleWrapper.forward"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[143, "module-neural_compressor.adaptor.torch_utils.bf16_convert"]], "hessiantrace (class in neural_compressor.adaptor.torch_utils.hawq_metric)": [[144, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace"]], "node_collector (class in neural_compressor.adaptor.torch_utils.hawq_metric)": [[144, "neural_compressor.adaptor.torch_utils.hawq_metric.Node_collector"]], "compare_weights() (in module neural_compressor.adaptor.torch_utils.hawq_metric)": [[144, "neural_compressor.adaptor.torch_utils.hawq_metric.compare_weights"]], "get_act_gap() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[144, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.get_act_gap"]], "get_act_traces() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[144, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.get_act_traces"]], "get_avg_traces() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[144, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.get_avg_traces"]], "get_device() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[144, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.get_device"]], "get_fused_mapping() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[144, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.get_fused_mapping"]], "get_params() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[144, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.get_params"]], "get_vthv_weight() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[144, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.get_vtHv_weight"]], "get_weight_traces() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[144, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.get_weight_traces"]], "hawq_top() (in module neural_compressor.adaptor.torch_utils.hawq_metric)": [[144, "neural_compressor.adaptor.torch_utils.hawq_metric.hawq_top"]], "hook_fn_act() (neural_compressor.adaptor.torch_utils.hawq_metric.node_collector method)": [[144, "neural_compressor.adaptor.torch_utils.hawq_metric.Node_collector.hook_fn_act"]], "is_fused_module() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[144, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.is_fused_module"]], "mse_metric_gap() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[144, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.mse_metric_gap"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[144, "module-neural_compressor.adaptor.torch_utils.hawq_metric"]], "register_act_grad_hooks() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[144, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.register_act_grad_hooks"]], "remove() (neural_compressor.adaptor.torch_utils.hawq_metric.node_collector method)": [[144, "neural_compressor.adaptor.torch_utils.hawq_metric.Node_collector.remove"]], "reset_act_gradient_and_hooks() (neural_compressor.adaptor.torch_utils.hawq_metric.hessiantrace method)": [[144, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace.reset_act_gradient_and_hooks"]], "neural_compressor.adaptor.torch_utils": [[145, "module-neural_compressor.adaptor.torch_utils"]], "graphtrace (class in neural_compressor.adaptor.torch_utils.smooth_quant)": [[146, "neural_compressor.adaptor.torch_utils.smooth_quant.GraphTrace"]], "torchsmoothquant (class in neural_compressor.adaptor.torch_utils.smooth_quant)": [[146, "neural_compressor.adaptor.torch_utils.smooth_quant.TorchSmoothQuant"]], "neural_compressor.adaptor.torch_utils.smooth_quant": [[146, "module-neural_compressor.adaptor.torch_utils.smooth_quant"]], "recover() (neural_compressor.adaptor.torch_utils.smooth_quant.torchsmoothquant method)": [[146, "neural_compressor.adaptor.torch_utils.smooth_quant.TorchSmoothQuant.recover"]], "transform() (neural_compressor.adaptor.torch_utils.smooth_quant.torchsmoothquant method)": [[146, "neural_compressor.adaptor.torch_utils.smooth_quant.TorchSmoothQuant.transform"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[147, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"]], "symbolic_trace() (in module neural_compressor.adaptor.torch_utils.symbolic_trace)": [[147, "neural_compressor.adaptor.torch_utils.symbolic_trace.symbolic_trace"]], "trace_and_fuse_sub_graph() (in module neural_compressor.adaptor.torch_utils.symbolic_trace)": [[147, "neural_compressor.adaptor.torch_utils.symbolic_trace.trace_and_fuse_sub_graph"]], "append_attr() (in module neural_compressor.adaptor.torch_utils.util)": [[148, "neural_compressor.adaptor.torch_utils.util.append_attr"]], "auto_copy() (in module neural_compressor.adaptor.torch_utils.util)": [[148, "neural_compressor.adaptor.torch_utils.util.auto_copy"]], "check_cfg_and_qconfig() (in module neural_compressor.adaptor.torch_utils.util)": [[148, "neural_compressor.adaptor.torch_utils.util.check_cfg_and_qconfig"]], "collate_torch_preds() (in module neural_compressor.adaptor.torch_utils.util)": [[148, "neural_compressor.adaptor.torch_utils.util.collate_torch_preds"]], "fetch_module() (in module neural_compressor.adaptor.torch_utils.util)": [[148, "neural_compressor.adaptor.torch_utils.util.fetch_module"]], "generate_activation_observer() (in module neural_compressor.adaptor.torch_utils.util)": [[148, "neural_compressor.adaptor.torch_utils.util.generate_activation_observer"]], "get_embedding_contiguous() (in module neural_compressor.adaptor.torch_utils.util)": [[148, "neural_compressor.adaptor.torch_utils.util.get_embedding_contiguous"]], "get_example_input() (in module neural_compressor.adaptor.torch_utils.util)": [[148, "neural_compressor.adaptor.torch_utils.util.get_example_input"]], "get_fallback_order() (in module neural_compressor.adaptor.torch_utils.util)": [[148, "neural_compressor.adaptor.torch_utils.util.get_fallback_order"]], "get_mse_order_per_fp32() (in module neural_compressor.adaptor.torch_utils.util)": [[148, "neural_compressor.adaptor.torch_utils.util.get_mse_order_per_fp32"]], "get_mse_order_per_int8() (in module neural_compressor.adaptor.torch_utils.util)": [[148, "neural_compressor.adaptor.torch_utils.util.get_mse_order_per_int8"]], "get_quantizable_ops_from_cfgs() (in module neural_compressor.adaptor.torch_utils.util)": [[148, "neural_compressor.adaptor.torch_utils.util.get_quantizable_ops_from_cfgs"]], "get_torch_version() (in module neural_compressor.adaptor.torch_utils.util)": [[148, "neural_compressor.adaptor.torch_utils.util.get_torch_version"]], "input2tuple() (in module neural_compressor.adaptor.torch_utils.util)": [[148, "neural_compressor.adaptor.torch_utils.util.input2tuple"]], "is_fused_module() (in module neural_compressor.adaptor.torch_utils.util)": [[148, "neural_compressor.adaptor.torch_utils.util.is_fused_module"]], "neural_compressor.adaptor.torch_utils.util": [[148, "module-neural_compressor.adaptor.torch_utils.util"]], "paser_cfgs() (in module neural_compressor.adaptor.torch_utils.util)": [[148, "neural_compressor.adaptor.torch_utils.util.paser_cfgs"]], "set_module() (in module neural_compressor.adaptor.torch_utils.util)": [[148, "neural_compressor.adaptor.torch_utils.util.set_module"]], "simple_inference() (in module neural_compressor.adaptor.torch_utils.util)": [[148, "neural_compressor.adaptor.torch_utils.util.simple_inference"]], "algorithms (class in neural_compressor.algorithm.algorithm)": [[149, "neural_compressor.algorithm.algorithm.ALGORITHMS"]], "algorithm (class in neural_compressor.algorithm.algorithm)": [[149, "neural_compressor.algorithm.algorithm.Algorithm"]], "algorithmscheduler (class in neural_compressor.algorithm.algorithm)": [[149, "neural_compressor.algorithm.algorithm.AlgorithmScheduler"]], "adaptor (neural_compressor.algorithm.algorithm.algorithmscheduler property)": [[149, "neural_compressor.algorithm.algorithm.AlgorithmScheduler.adaptor"]], "algorithm_registry() (in module neural_compressor.algorithm.algorithm)": [[149, "neural_compressor.algorithm.algorithm.algorithm_registry"]], "append_algorithm() (neural_compressor.algorithm.algorithm.algorithmscheduler method)": [[149, "neural_compressor.algorithm.algorithm.AlgorithmScheduler.append_algorithm"]], "calib_iter (neural_compressor.algorithm.algorithm.algorithmscheduler property)": [[149, "neural_compressor.algorithm.algorithm.AlgorithmScheduler.calib_iter"]], "dataloader (neural_compressor.algorithm.algorithm.algorithmscheduler property)": [[149, "neural_compressor.algorithm.algorithm.AlgorithmScheduler.dataloader"]], "neural_compressor.algorithm.algorithm": [[149, "module-neural_compressor.algorithm.algorithm"]], "origin_model (neural_compressor.algorithm.algorithm.algorithmscheduler property)": [[149, "neural_compressor.algorithm.algorithm.AlgorithmScheduler.origin_model"]], "q_model (neural_compressor.algorithm.algorithm.algorithmscheduler property)": [[149, "neural_compressor.algorithm.algorithm.AlgorithmScheduler.q_model"]], "reset_exec_algorithms() (neural_compressor.algorithm.algorithm.algorithmscheduler method)": [[149, "neural_compressor.algorithm.algorithm.AlgorithmScheduler.reset_exec_algorithms"]], "support_algorithms() (neural_compressor.algorithm.algorithm.algorithms class method)": [[149, "neural_compressor.algorithm.algorithm.ALGORITHMS.support_algorithms"]], "fastbiascorrection (class in neural_compressor.algorithm.fast_bias_correction)": [[150, "neural_compressor.algorithm.fast_bias_correction.FastBiasCorrection"]], "neural_compressor.algorithm.fast_bias_correction": [[150, "module-neural_compressor.algorithm.fast_bias_correction"]], "algorithms (class in neural_compressor.algorithm)": [[151, "neural_compressor.algorithm.ALGORITHMS"]], "algorithm (class in neural_compressor.algorithm)": [[151, "neural_compressor.algorithm.Algorithm"]], "algorithmscheduler (class in neural_compressor.algorithm)": [[151, "neural_compressor.algorithm.AlgorithmScheduler"]], "adaptor (neural_compressor.algorithm.algorithmscheduler property)": [[151, "neural_compressor.algorithm.AlgorithmScheduler.adaptor"]], "algorithm_registry() (in module neural_compressor.algorithm)": [[151, "neural_compressor.algorithm.algorithm_registry"]], "append_algorithm() (neural_compressor.algorithm.algorithmscheduler method)": [[151, "neural_compressor.algorithm.AlgorithmScheduler.append_algorithm"]], "calib_iter (neural_compressor.algorithm.algorithmscheduler property)": [[151, "neural_compressor.algorithm.AlgorithmScheduler.calib_iter"]], "dataloader (neural_compressor.algorithm.algorithmscheduler property)": [[151, "neural_compressor.algorithm.AlgorithmScheduler.dataloader"]], "neural_compressor.algorithm": [[151, "module-neural_compressor.algorithm"]], "origin_model (neural_compressor.algorithm.algorithmscheduler property)": [[151, "neural_compressor.algorithm.AlgorithmScheduler.origin_model"]], "q_model (neural_compressor.algorithm.algorithmscheduler property)": [[151, "neural_compressor.algorithm.AlgorithmScheduler.q_model"]], "reset_exec_algorithms() (neural_compressor.algorithm.algorithmscheduler method)": [[151, "neural_compressor.algorithm.AlgorithmScheduler.reset_exec_algorithms"]], "support_algorithms() (neural_compressor.algorithm.algorithms class method)": [[151, "neural_compressor.algorithm.ALGORITHMS.support_algorithms"]], "smoothquant (class in neural_compressor.algorithm.smooth_quant)": [[152, "neural_compressor.algorithm.smooth_quant.SmoothQuant"]], "neural_compressor.algorithm.smooth_quant": [[152, "module-neural_compressor.algorithm.smooth_quant"]], "weightcorrection (class in neural_compressor.algorithm.weight_correction)": [[153, "neural_compressor.algorithm.weight_correction.WeightCorrection"]], "neural_compressor.algorithm.weight_correction": [[153, "module-neural_compressor.algorithm.weight_correction"]], "benchmark (class in neural_compressor.benchmark)": [[154, "neural_compressor.benchmark.Benchmark"]], "b_dataloader (neural_compressor.benchmark.benchmark property)": [[154, "neural_compressor.benchmark.Benchmark.b_dataloader"]], "b_func (neural_compressor.benchmark.benchmark property)": [[154, "neural_compressor.benchmark.Benchmark.b_func"]], "config_instance() (neural_compressor.benchmark.benchmark method)": [[154, "neural_compressor.benchmark.Benchmark.config_instance"]], "fit() (in module neural_compressor.benchmark)": [[154, "neural_compressor.benchmark.fit"]], "generate_prefix() (neural_compressor.benchmark.benchmark method)": [[154, "neural_compressor.benchmark.Benchmark.generate_prefix"]], "get_architecture() (in module neural_compressor.benchmark)": [[154, "neural_compressor.benchmark.get_architecture"]], "get_bounded_threads() (in module neural_compressor.benchmark)": [[154, "neural_compressor.benchmark.get_bounded_threads"]], "get_core_ids() (in module neural_compressor.benchmark)": [[154, "neural_compressor.benchmark.get_core_ids"]], "get_physical_ids() (in module neural_compressor.benchmark)": [[154, "neural_compressor.benchmark.get_physical_ids"]], "get_threads() (in module neural_compressor.benchmark)": [[154, "neural_compressor.benchmark.get_threads"]], "get_threads_per_core() (in module neural_compressor.benchmark)": [[154, "neural_compressor.benchmark.get_threads_per_core"]], "model (neural_compressor.benchmark.benchmark property)": [[154, "neural_compressor.benchmark.Benchmark.model"]], "neural_compressor.benchmark": [[154, "module-neural_compressor.benchmark"]], "results (neural_compressor.benchmark.benchmark property)": [[154, "neural_compressor.benchmark.Benchmark.results"]], "run_instance() (neural_compressor.benchmark.benchmark method)": [[154, "neural_compressor.benchmark.Benchmark.run_instance"]], "set_all_env_var() (in module neural_compressor.benchmark)": [[154, "neural_compressor.benchmark.set_all_env_var"]], "set_env_var() (in module neural_compressor.benchmark)": [[154, "neural_compressor.benchmark.set_env_var"]], "summary_benchmark() (neural_compressor.benchmark.benchmark method)": [[154, "neural_compressor.benchmark.Benchmark.summary_benchmark"]], "basecallbacks (class in neural_compressor.compression.callbacks)": [[155, "neural_compressor.compression.callbacks.BaseCallbacks"]], "distillationcallbacks (class in neural_compressor.compression.callbacks)": [[155, "neural_compressor.compression.callbacks.DistillationCallbacks"]], "pruningcallbacks (class in neural_compressor.compression.callbacks)": [[155, "neural_compressor.compression.callbacks.PruningCallbacks"]], "quantizationawaretrainingcallbacks (class in neural_compressor.compression.callbacks)": [[155, "neural_compressor.compression.callbacks.QuantizationAwareTrainingCallbacks"]], "_epoch_ran (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[155, "neural_compressor.compression.callbacks.DistillationCallbacks._epoch_ran"]], "best_model (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[155, "neural_compressor.compression.callbacks.DistillationCallbacks.best_model"]], "best_score (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[155, "neural_compressor.compression.callbacks.DistillationCallbacks.best_score"]], "create_criterion() (neural_compressor.compression.callbacks.distillationcallbacks method)": [[155, "neural_compressor.compression.callbacks.DistillationCallbacks.create_criterion"]], "criterion (neural_compressor.compression.callbacks.distillationcallbacks property)": [[155, "neural_compressor.compression.callbacks.DistillationCallbacks.criterion"]], "eval_dataloader (neural_compressor.compression.callbacks.basecallbacks property)": [[155, "neural_compressor.compression.callbacks.BaseCallbacks.eval_dataloader"]], "eval_frequency (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[155, "neural_compressor.compression.callbacks.DistillationCallbacks.eval_frequency"]], "eval_func (neural_compressor.compression.callbacks.basecallbacks property)": [[155, "neural_compressor.compression.callbacks.BaseCallbacks.eval_func"]], "execute() (neural_compressor.compression.callbacks.basecallbacks method)": [[155, "neural_compressor.compression.callbacks.BaseCallbacks.execute"]], "generate_hooks() (neural_compressor.compression.callbacks.distillationcallbacks method)": [[155, "neural_compressor.compression.callbacks.DistillationCallbacks.generate_hooks"]], "generate_hooks() (neural_compressor.compression.callbacks.pruningcallbacks method)": [[155, "neural_compressor.compression.callbacks.PruningCallbacks.generate_hooks"]], "init_train_cfg() (neural_compressor.compression.callbacks.distillationcallbacks method)": [[155, "neural_compressor.compression.callbacks.DistillationCallbacks.init_train_cfg"]], "metric (neural_compressor.compression.callbacks.basecallbacks property)": [[155, "neural_compressor.compression.callbacks.BaseCallbacks.metric"]], "model (neural_compressor.compression.callbacks.basecallbacks property)": [[155, "neural_compressor.compression.callbacks.BaseCallbacks.model"]], "neural_compressor.compression.callbacks": [[155, "module-neural_compressor.compression.callbacks"]], "on_after_compute_loss() (neural_compressor.compression.callbacks.basecallbacks method)": [[155, "neural_compressor.compression.callbacks.BaseCallbacks.on_after_compute_loss"]], "on_after_eval() (neural_compressor.compression.callbacks.basecallbacks method)": [[155, "neural_compressor.compression.callbacks.BaseCallbacks.on_after_eval"]], "on_after_optimizer_step() (neural_compressor.compression.callbacks.basecallbacks method)": [[155, "neural_compressor.compression.callbacks.BaseCallbacks.on_after_optimizer_step"]], "on_before_eval() (neural_compressor.compression.callbacks.basecallbacks method)": [[155, "neural_compressor.compression.callbacks.BaseCallbacks.on_before_eval"]], "on_before_optimizer_step() (neural_compressor.compression.callbacks.basecallbacks method)": [[155, "neural_compressor.compression.callbacks.BaseCallbacks.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.compression.callbacks.basecallbacks method)": [[155, "neural_compressor.compression.callbacks.BaseCallbacks.on_epoch_begin"]], "on_epoch_end() (neural_compressor.compression.callbacks.basecallbacks method)": [[155, "neural_compressor.compression.callbacks.BaseCallbacks.on_epoch_end"]], "on_step_begin() (neural_compressor.compression.callbacks.basecallbacks method)": [[155, "neural_compressor.compression.callbacks.BaseCallbacks.on_step_begin"]], "on_step_end() (neural_compressor.compression.callbacks.basecallbacks method)": [[155, "neural_compressor.compression.callbacks.BaseCallbacks.on_step_end"]], "on_train_begin() (neural_compressor.compression.callbacks.basecallbacks method)": [[155, "neural_compressor.compression.callbacks.BaseCallbacks.on_train_begin"]], "on_train_end() (neural_compressor.compression.callbacks.basecallbacks method)": [[155, "neural_compressor.compression.callbacks.BaseCallbacks.on_train_end"]], "on_train_end() (neural_compressor.compression.callbacks.pruningcallbacks method)": [[155, "neural_compressor.compression.callbacks.PruningCallbacks.on_train_end"]], "pre_process() (neural_compressor.compression.callbacks.basecallbacks method)": [[155, "neural_compressor.compression.callbacks.BaseCallbacks.pre_process"]], "register_hook() (neural_compressor.compression.callbacks.basecallbacks method)": [[155, "neural_compressor.compression.callbacks.BaseCallbacks.register_hook"]], "remove_hook() (neural_compressor.compression.callbacks.basecallbacks method)": [[155, "neural_compressor.compression.callbacks.BaseCallbacks.remove_hook"]], "student_model (neural_compressor.compression.callbacks.distillationcallbacks property)": [[155, "neural_compressor.compression.callbacks.DistillationCallbacks.student_model"]], "teacher_model (neural_compressor.compression.callbacks.distillationcallbacks property)": [[155, "neural_compressor.compression.callbacks.DistillationCallbacks.teacher_model"]], "train_cfg (neural_compressor.compression.callbacks.distillationcallbacks property)": [[155, "neural_compressor.compression.callbacks.DistillationCallbacks.train_cfg"]], "train_func (neural_compressor.compression.callbacks.basecallbacks property)": [[155, "neural_compressor.compression.callbacks.BaseCallbacks.train_func"]], "criterions (class in neural_compressor.compression.distillation.criterions)": [[156, "neural_compressor.compression.distillation.criterions.Criterions"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[156, "neural_compressor.compression.distillation.criterions.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationframework (class in neural_compressor.compression.distillation.criterions)": [[156, "neural_compressor.compression.distillation.criterions.KnowledgeDistillationFramework"]], "knowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[156, "neural_compressor.compression.distillation.criterions.KnowledgeDistillationLoss"]], "kullbackleiblerdivergence() (neural_compressor.compression.distillation.criterions.pytorchknowledgedistillationloss method)": [[156, "neural_compressor.compression.distillation.criterions.PyTorchKnowledgeDistillationLoss.KullbackLeiblerDivergence"]], "kullbackleiblerdivergence() (neural_compressor.compression.distillation.criterions.pytorchselfknowledgedistillationloss method)": [[156, "neural_compressor.compression.distillation.criterions.PyTorchSelfKnowledgeDistillationLoss.KullbackLeiblerDivergence"]], "l2divergence() (neural_compressor.compression.distillation.criterions.pytorchselfknowledgedistillationloss method)": [[156, "neural_compressor.compression.distillation.criterions.PyTorchSelfKnowledgeDistillationLoss.L2Divergence"]], "pytorchcriterions (class in neural_compressor.compression.distillation.criterions)": [[156, "neural_compressor.compression.distillation.criterions.PyTorchCriterions"]], "pytorchintermediatelayersknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[156, "neural_compressor.compression.distillation.criterions.PyTorchIntermediateLayersKnowledgeDistillationLoss"]], "pytorchintermediatelayersknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[156, "neural_compressor.compression.distillation.criterions.PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"]], "pytorchknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[156, "neural_compressor.compression.distillation.criterions.PyTorchKnowledgeDistillationLoss"]], "pytorchknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[156, "neural_compressor.compression.distillation.criterions.PyTorchKnowledgeDistillationLossWrapper"]], "pytorchselfknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[156, "neural_compressor.compression.distillation.criterions.PyTorchSelfKnowledgeDistillationLoss"]], "pytorchselfknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[156, "neural_compressor.compression.distillation.criterions.PyTorchSelfKnowledgeDistillationLossWrapper"]], "selfknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[156, "neural_compressor.compression.distillation.criterions.SelfKnowledgeDistillationLoss"]], "softcrossentropy() (neural_compressor.compression.distillation.criterions.pytorchknowledgedistillationloss method)": [[156, "neural_compressor.compression.distillation.criterions.PyTorchKnowledgeDistillationLoss.SoftCrossEntropy"]], "softcrossentropy() (neural_compressor.compression.distillation.criterions.pytorchselfknowledgedistillationloss method)": [[156, "neural_compressor.compression.distillation.criterions.PyTorchSelfKnowledgeDistillationLoss.SoftCrossEntropy"]], "softcrossentropy() (neural_compressor.compression.distillation.criterions.tensorflowknowledgedistillationloss method)": [[156, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLoss.SoftCrossEntropy"]], "tensorflowcriterions (class in neural_compressor.compression.distillation.criterions)": [[156, "neural_compressor.compression.distillation.criterions.TensorflowCriterions"]], "tensorflowknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[156, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLoss"]], "tensorflowknowledgedistillationlossexternal (class in neural_compressor.compression.distillation.criterions)": [[156, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLossExternal"]], "tensorflowknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[156, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLossWrapper"]], "clear_features() (neural_compressor.compression.distillation.criterions.intermediatelayersknowledgedistillationloss method)": [[156, "neural_compressor.compression.distillation.criterions.IntermediateLayersKnowledgeDistillationLoss.clear_features"]], "criterion_registry() (in module neural_compressor.compression.distillation.criterions)": [[156, "neural_compressor.compression.distillation.criterions.criterion_registry"]], "init_feature_matcher() (neural_compressor.compression.distillation.criterions.intermediatelayersknowledgedistillationloss method)": [[156, "neural_compressor.compression.distillation.criterions.IntermediateLayersKnowledgeDistillationLoss.init_feature_matcher"]], "init_feature_matcher() (neural_compressor.compression.distillation.criterions.pytorchintermediatelayersknowledgedistillationloss method)": [[156, "neural_compressor.compression.distillation.criterions.PyTorchIntermediateLayersKnowledgeDistillationLoss.init_feature_matcher"]], "init_loss_funcs() (neural_compressor.compression.distillation.criterions.intermediatelayersknowledgedistillationloss method)": [[156, "neural_compressor.compression.distillation.criterions.IntermediateLayersKnowledgeDistillationLoss.init_loss_funcs"]], "init_loss_funcs() (neural_compressor.compression.distillation.criterions.pytorchintermediatelayersknowledgedistillationloss method)": [[156, "neural_compressor.compression.distillation.criterions.PyTorchIntermediateLayersKnowledgeDistillationLoss.init_loss_funcs"]], "init_loss_funcs() (neural_compressor.compression.distillation.criterions.pytorchselfknowledgedistillationloss method)": [[156, "neural_compressor.compression.distillation.criterions.PyTorchSelfKnowledgeDistillationLoss.init_loss_funcs"]], "init_loss_funcs() (neural_compressor.compression.distillation.criterions.selfknowledgedistillationloss method)": [[156, "neural_compressor.compression.distillation.criterions.SelfKnowledgeDistillationLoss.init_loss_funcs"]], "loss_cal() (neural_compressor.compression.distillation.criterions.intermediatelayersknowledgedistillationloss method)": [[156, "neural_compressor.compression.distillation.criterions.IntermediateLayersKnowledgeDistillationLoss.loss_cal"]], "loss_cal() (neural_compressor.compression.distillation.criterions.knowledgedistillationloss method)": [[156, "neural_compressor.compression.distillation.criterions.KnowledgeDistillationLoss.loss_cal"]], "loss_cal() (neural_compressor.compression.distillation.criterions.pytorchintermediatelayersknowledgedistillationloss method)": [[156, "neural_compressor.compression.distillation.criterions.PyTorchIntermediateLayersKnowledgeDistillationLoss.loss_cal"]], "loss_cal() (neural_compressor.compression.distillation.criterions.pytorchselfknowledgedistillationloss method)": [[156, "neural_compressor.compression.distillation.criterions.PyTorchSelfKnowledgeDistillationLoss.loss_cal"]], "loss_cal() (neural_compressor.compression.distillation.criterions.selfknowledgedistillationloss method)": [[156, "neural_compressor.compression.distillation.criterions.SelfKnowledgeDistillationLoss.loss_cal"]], "loss_cal_sloss() (neural_compressor.compression.distillation.criterions.intermediatelayersknowledgedistillationloss method)": [[156, "neural_compressor.compression.distillation.criterions.IntermediateLayersKnowledgeDistillationLoss.loss_cal_sloss"]], "loss_cal_sloss() (neural_compressor.compression.distillation.criterions.knowledgedistillationloss method)": [[156, "neural_compressor.compression.distillation.criterions.KnowledgeDistillationLoss.loss_cal_sloss"]], "loss_cal_sloss() (neural_compressor.compression.distillation.criterions.pytorchintermediatelayersknowledgedistillationloss method)": [[156, "neural_compressor.compression.distillation.criterions.PyTorchIntermediateLayersKnowledgeDistillationLoss.loss_cal_sloss"]], "loss_cal_sloss() (neural_compressor.compression.distillation.criterions.selfknowledgedistillationloss method)": [[156, "neural_compressor.compression.distillation.criterions.SelfKnowledgeDistillationLoss.loss_cal_sloss"]], "neural_compressor.compression.distillation.criterions": [[156, "module-neural_compressor.compression.distillation.criterions"]], "register() (neural_compressor.compression.distillation.criterions.criterions method)": [[156, "neural_compressor.compression.distillation.criterions.Criterions.register"]], "register_hooks_for_models() (neural_compressor.compression.distillation.criterions.pytorchintermediatelayersknowledgedistillationloss method)": [[156, "neural_compressor.compression.distillation.criterions.PyTorchIntermediateLayersKnowledgeDistillationLoss.register_hooks_for_models"]], "remove_all_hooks() (neural_compressor.compression.distillation.criterions.pytorchintermediatelayersknowledgedistillationloss method)": [[156, "neural_compressor.compression.distillation.criterions.PyTorchIntermediateLayersKnowledgeDistillationLoss.remove_all_hooks"]], "student_model (neural_compressor.compression.distillation.criterions.knowledgedistillationframework property)": [[156, "neural_compressor.compression.distillation.criterions.KnowledgeDistillationFramework.student_model"]], "student_targets_loss_cal() (neural_compressor.compression.distillation.criterions.knowledgedistillationloss method)": [[156, "neural_compressor.compression.distillation.criterions.KnowledgeDistillationLoss.student_targets_loss_cal"]], "student_targets_loss_cal() (neural_compressor.compression.distillation.criterions.pytorchknowledgedistillationloss method)": [[156, "neural_compressor.compression.distillation.criterions.PyTorchKnowledgeDistillationLoss.student_targets_loss_cal"]], "student_targets_loss_cal() (neural_compressor.compression.distillation.criterions.tensorflowknowledgedistillationloss method)": [[156, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLoss.student_targets_loss_cal"]], "student_targets_loss_cal() (neural_compressor.compression.distillation.criterions.tensorflowknowledgedistillationlossexternal method)": [[156, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLossExternal.student_targets_loss_cal"]], "teacher_model (neural_compressor.compression.distillation.criterions.knowledgedistillationframework property)": [[156, "neural_compressor.compression.distillation.criterions.KnowledgeDistillationFramework.teacher_model"]], "teacher_model_forward() (neural_compressor.compression.distillation.criterions.intermediatelayersknowledgedistillationloss method)": [[156, "neural_compressor.compression.distillation.criterions.IntermediateLayersKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.compression.distillation.criterions.knowledgedistillationloss method)": [[156, "neural_compressor.compression.distillation.criterions.KnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.compression.distillation.criterions.pytorchintermediatelayersknowledgedistillationloss method)": [[156, "neural_compressor.compression.distillation.criterions.PyTorchIntermediateLayersKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.compression.distillation.criterions.pytorchknowledgedistillationloss method)": [[156, "neural_compressor.compression.distillation.criterions.PyTorchKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.compression.distillation.criterions.pytorchselfknowledgedistillationloss method)": [[156, "neural_compressor.compression.distillation.criterions.PyTorchSelfKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.compression.distillation.criterions.selfknowledgedistillationloss method)": [[156, "neural_compressor.compression.distillation.criterions.SelfKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.compression.distillation.criterions.tensorflowknowledgedistillationloss method)": [[156, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.compression.distillation.criterions.tensorflowknowledgedistillationlossexternal method)": [[156, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLossExternal.teacher_model_forward"]], "teacher_student_loss_cal() (neural_compressor.compression.distillation.criterions.knowledgedistillationloss method)": [[156, "neural_compressor.compression.distillation.criterions.KnowledgeDistillationLoss.teacher_student_loss_cal"]], "teacher_student_loss_cal() (neural_compressor.compression.distillation.criterions.pytorchknowledgedistillationloss method)": [[156, "neural_compressor.compression.distillation.criterions.PyTorchKnowledgeDistillationLoss.teacher_student_loss_cal"]], "teacher_student_loss_cal() (neural_compressor.compression.distillation.criterions.tensorflowknowledgedistillationloss method)": [[156, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLoss.teacher_student_loss_cal"]], "teacher_student_loss_cal() (neural_compressor.compression.distillation.criterions.tensorflowknowledgedistillationlossexternal method)": [[156, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLossExternal.teacher_student_loss_cal"]], "neural_compressor.compression.distillation": [[157, "module-neural_compressor.compression.distillation"]], "distillationcallbacks (class in neural_compressor.compression)": [[158, "neural_compressor.compression.DistillationCallbacks"]], "pruningcallbacks (class in neural_compressor.compression)": [[158, "neural_compressor.compression.PruningCallbacks"]], "quantizationawaretrainingcallbacks (class in neural_compressor.compression)": [[158, "neural_compressor.compression.QuantizationAwareTrainingCallbacks"]], "weightpruningconfig (class in neural_compressor.compression)": [[158, "neural_compressor.compression.WeightPruningConfig"]], "_epoch_ran (neural_compressor.compression.distillationcallbacks attribute)": [[158, "neural_compressor.compression.DistillationCallbacks._epoch_ran"]], "best_model (neural_compressor.compression.distillationcallbacks attribute)": [[158, "neural_compressor.compression.DistillationCallbacks.best_model"]], "best_score (neural_compressor.compression.distillationcallbacks attribute)": [[158, "neural_compressor.compression.DistillationCallbacks.best_score"]], "create_criterion() (neural_compressor.compression.distillationcallbacks method)": [[158, "neural_compressor.compression.DistillationCallbacks.create_criterion"]], "criterion (neural_compressor.compression.distillationcallbacks property)": [[158, "neural_compressor.compression.DistillationCallbacks.criterion"]], "eval_frequency (neural_compressor.compression.distillationcallbacks attribute)": [[158, "neural_compressor.compression.DistillationCallbacks.eval_frequency"]], "generate_hooks() (neural_compressor.compression.distillationcallbacks method)": [[158, "neural_compressor.compression.DistillationCallbacks.generate_hooks"]], "generate_hooks() (neural_compressor.compression.pruningcallbacks method)": [[158, "neural_compressor.compression.PruningCallbacks.generate_hooks"]], "init_train_cfg() (neural_compressor.compression.distillationcallbacks method)": [[158, "neural_compressor.compression.DistillationCallbacks.init_train_cfg"]], "neural_compressor.compression": [[158, "module-neural_compressor.compression"]], "on_train_end() (neural_compressor.compression.pruningcallbacks method)": [[158, "neural_compressor.compression.PruningCallbacks.on_train_end"]], "prepare_pruning() (in module neural_compressor.compression)": [[158, "neural_compressor.compression.prepare_pruning"]], "student_model (neural_compressor.compression.distillationcallbacks property)": [[158, "neural_compressor.compression.DistillationCallbacks.student_model"]], "teacher_model (neural_compressor.compression.distillationcallbacks property)": [[158, "neural_compressor.compression.DistillationCallbacks.teacher_model"]], "train_cfg (neural_compressor.compression.distillationcallbacks property)": [[158, "neural_compressor.compression.DistillationCallbacks.train_cfg"]], "weight_compression (neural_compressor.compression.weightpruningconfig property)": [[158, "neural_compressor.compression.WeightPruningConfig.weight_compression"]], "gradientcriterion (class in neural_compressor.compression.pruner.criteria)": [[159, "neural_compressor.compression.pruner.criteria.GradientCriterion"]], "magnitudecriterion (class in neural_compressor.compression.pruner.criteria)": [[159, "neural_compressor.compression.pruner.criteria.MagnitudeCriterion"]], "pruningcriterion (class in neural_compressor.compression.pruner.criteria)": [[159, "neural_compressor.compression.pruner.criteria.PruningCriterion"]], "snipcriterion (class in neural_compressor.compression.pruner.criteria)": [[159, "neural_compressor.compression.pruner.criteria.SnipCriterion"]], "snipmomentumcriterion (class in neural_compressor.compression.pruner.criteria)": [[159, "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion"]], "get_criterion() (in module neural_compressor.compression.pruner.criteria)": [[159, "neural_compressor.compression.pruner.criteria.get_criterion"]], "neural_compressor.compression.pruner.criteria": [[159, "module-neural_compressor.compression.pruner.criteria"]], "on_after_optimizer_step() (neural_compressor.compression.pruner.criteria.pruningcriterion method)": [[159, "neural_compressor.compression.pruner.criteria.PruningCriterion.on_after_optimizer_step"]], "on_before_optimizer_step() (neural_compressor.compression.pruner.criteria.gradientcriterion method)": [[159, "neural_compressor.compression.pruner.criteria.GradientCriterion.on_before_optimizer_step"]], "on_before_optimizer_step() (neural_compressor.compression.pruner.criteria.pruningcriterion method)": [[159, "neural_compressor.compression.pruner.criteria.PruningCriterion.on_before_optimizer_step"]], "on_before_optimizer_step() (neural_compressor.compression.pruner.criteria.snipcriterion method)": [[159, "neural_compressor.compression.pruner.criteria.SnipCriterion.on_before_optimizer_step"]], "on_before_optimizer_step() (neural_compressor.compression.pruner.criteria.snipmomentumcriterion method)": [[159, "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion.on_before_optimizer_step"]], "on_step_begin() (neural_compressor.compression.pruner.criteria.magnitudecriterion method)": [[159, "neural_compressor.compression.pruner.criteria.MagnitudeCriterion.on_step_begin"]], "on_step_begin() (neural_compressor.compression.pruner.criteria.pruningcriterion method)": [[159, "neural_compressor.compression.pruner.criteria.PruningCriterion.on_step_begin"]], "register_criterion() (in module neural_compressor.compression.pruner.criteria)": [[159, "neural_compressor.compression.pruner.criteria.register_criterion"]], "scores (neural_compressor.compression.pruner.criteria.gradientcriterion attribute)": [[159, "neural_compressor.compression.pruner.criteria.GradientCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.magnitudecriterion attribute)": [[159, "neural_compressor.compression.pruner.criteria.MagnitudeCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.pruningcriterion attribute)": [[159, "neural_compressor.compression.pruner.criteria.PruningCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.snipcriterion attribute)": [[159, "neural_compressor.compression.pruner.criteria.SnipCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.snipmomentumcriterion attribute)": [[159, "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion.scores"]], "neural_compressor.compression.pruner": [[160, "module-neural_compressor.compression.pruner"]], "basepattern (class in neural_compressor.compression.pruner.patterns)": [[161, "neural_compressor.compression.pruner.patterns.BasePattern"]], "m (neural_compressor.compression.pruner.patterns.patternninm attribute)": [[161, "neural_compressor.compression.pruner.patterns.PatternNInM.M"]], "n (neural_compressor.compression.pruner.patterns.patternninm attribute)": [[161, "neural_compressor.compression.pruner.patterns.PatternNInM.N"]], "patternninm (class in neural_compressor.compression.pruner.patterns)": [[161, "neural_compressor.compression.pruner.patterns.PatternNInM"]], "patternnxm (class in neural_compressor.compression.pruner.patterns)": [[161, "neural_compressor.compression.pruner.patterns.PatternNxM"]], "adjust_ratio() (neural_compressor.compression.pruner.patterns.basepattern method)": [[161, "neural_compressor.compression.pruner.patterns.BasePattern.adjust_ratio"]], "block_size (neural_compressor.compression.pruner.patterns.patternnxm attribute)": [[161, "neural_compressor.compression.pruner.patterns.PatternNxM.block_size"]], "check_layer_validity() (neural_compressor.compression.pruner.patterns.basepattern method)": [[161, "neural_compressor.compression.pruner.patterns.BasePattern.check_layer_validity"]], "check_layer_validity() (neural_compressor.compression.pruner.patterns.patternninm method)": [[161, "neural_compressor.compression.pruner.patterns.PatternNInM.check_layer_validity"]], "check_layer_validity() (neural_compressor.compression.pruner.patterns.patternnxm method)": [[161, "neural_compressor.compression.pruner.patterns.PatternNxM.check_layer_validity"]], "config (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[161, "neural_compressor.compression.pruner.patterns.BasePattern.config"]], "count_new_masked_cnts() (neural_compressor.compression.pruner.patterns.patternnxm method)": [[161, "neural_compressor.compression.pruner.patterns.PatternNxM.count_new_masked_cnts"]], "get_block_size_dict() (neural_compressor.compression.pruner.patterns.basepattern method)": [[161, "neural_compressor.compression.pruner.patterns.BasePattern.get_block_size_dict"]], "get_block_size_dict() (neural_compressor.compression.pruner.patterns.patternnxm method)": [[161, "neural_compressor.compression.pruner.patterns.PatternNxM.get_block_size_dict"]], "get_ele_mask_per_threshold() (neural_compressor.compression.pruner.patterns.patternninm method)": [[161, "neural_compressor.compression.pruner.patterns.PatternNInM.get_ele_mask_per_threshold"]], "get_least_ninm_mask_from_data() (neural_compressor.compression.pruner.patterns.patternninm method)": [[161, "neural_compressor.compression.pruner.patterns.PatternNInM.get_least_ninm_mask_from_data"]], "get_mask_per_threshold() (neural_compressor.compression.pruner.patterns.patternnxm method)": [[161, "neural_compressor.compression.pruner.patterns.PatternNxM.get_mask_per_threshold"]], "get_masks() (neural_compressor.compression.pruner.patterns.basepattern method)": [[161, "neural_compressor.compression.pruner.patterns.BasePattern.get_masks"]], "get_masks_global() (neural_compressor.compression.pruner.patterns.basepattern method)": [[161, "neural_compressor.compression.pruner.patterns.BasePattern.get_masks_global"]], "get_masks_global() (neural_compressor.compression.pruner.patterns.patternninm method)": [[161, "neural_compressor.compression.pruner.patterns.PatternNInM.get_masks_global"]], "get_masks_global() (neural_compressor.compression.pruner.patterns.patternnxm method)": [[161, "neural_compressor.compression.pruner.patterns.PatternNxM.get_masks_global"]], "get_masks_local() (neural_compressor.compression.pruner.patterns.basepattern method)": [[161, "neural_compressor.compression.pruner.patterns.BasePattern.get_masks_local"]], "get_pattern() (in module neural_compressor.compression.pruner.patterns)": [[161, "neural_compressor.compression.pruner.patterns.get_pattern"]], "get_pattern_lock_masks() (neural_compressor.compression.pruner.patterns.basepattern method)": [[161, "neural_compressor.compression.pruner.patterns.BasePattern.get_pattern_lock_masks"]], "get_pattern_lock_masks() (neural_compressor.compression.pruner.patterns.patternninm method)": [[161, "neural_compressor.compression.pruner.patterns.PatternNInM.get_pattern_lock_masks"]], "get_pattern_lock_masks() (neural_compressor.compression.pruner.patterns.patternnxm method)": [[161, "neural_compressor.compression.pruner.patterns.PatternNxM.get_pattern_lock_masks"]], "get_reduced_masks_from_data() (neural_compressor.compression.pruner.patterns.basepattern method)": [[161, "neural_compressor.compression.pruner.patterns.BasePattern.get_reduced_masks_from_data"]], "get_reduced_masks_from_data() (neural_compressor.compression.pruner.patterns.patternninm method)": [[161, "neural_compressor.compression.pruner.patterns.PatternNInM.get_reduced_masks_from_data"]], "get_reduced_masks_from_data() (neural_compressor.compression.pruner.patterns.patternnxm method)": [[161, "neural_compressor.compression.pruner.patterns.PatternNxM.get_reduced_masks_from_data"]], "get_single_mask_per_target_ratio() (neural_compressor.compression.pruner.patterns.basepattern method)": [[161, "neural_compressor.compression.pruner.patterns.BasePattern.get_single_mask_per_target_ratio"]], "get_sparsity_ratio() (neural_compressor.compression.pruner.patterns.basepattern method)": [[161, "neural_compressor.compression.pruner.patterns.BasePattern.get_sparsity_ratio"]], "get_sparsity_ratio() (neural_compressor.compression.pruner.patterns.patternninm method)": [[161, "neural_compressor.compression.pruner.patterns.PatternNInM.get_sparsity_ratio"]], "get_sparsity_ratio() (neural_compressor.compression.pruner.patterns.patternnxm method)": [[161, "neural_compressor.compression.pruner.patterns.PatternNxM.get_sparsity_ratio"]], "get_sparsity_ratio_each_layer() (neural_compressor.compression.pruner.patterns.basepattern method)": [[161, "neural_compressor.compression.pruner.patterns.BasePattern.get_sparsity_ratio_each_layer"]], "get_sparsity_ratio_progressive() (neural_compressor.compression.pruner.patterns.patternnxm method)": [[161, "neural_compressor.compression.pruner.patterns.PatternNxM.get_sparsity_ratio_progressive"]], "invalid_layers (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[161, "neural_compressor.compression.pruner.patterns.BasePattern.invalid_layers"]], "is_global (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[161, "neural_compressor.compression.pruner.patterns.BasePattern.is_global"]], "keep_mask_layers (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[161, "neural_compressor.compression.pruner.patterns.BasePattern.keep_mask_layers"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[161, "neural_compressor.compression.pruner.patterns.BasePattern.max_sparsity_ratio_per_op"]], "min_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[161, "neural_compressor.compression.pruner.patterns.BasePattern.min_sparsity_ratio_per_op"]], "modules (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[161, "neural_compressor.compression.pruner.patterns.BasePattern.modules"]], "neural_compressor.compression.pruner.patterns": [[161, "module-neural_compressor.compression.pruner.patterns"]], "pattern (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[161, "neural_compressor.compression.pruner.patterns.BasePattern.pattern"]], "reduce_scores() (neural_compressor.compression.pruner.patterns.patternninm method)": [[161, "neural_compressor.compression.pruner.patterns.PatternNInM.reduce_scores"]], "reduce_scores() (neural_compressor.compression.pruner.patterns.patternnxm method)": [[161, "neural_compressor.compression.pruner.patterns.PatternNxM.reduce_scores"]], "reduce_tensor() (neural_compressor.compression.pruner.patterns.basepattern method)": [[161, "neural_compressor.compression.pruner.patterns.BasePattern.reduce_tensor"]], "register_pattern() (in module neural_compressor.compression.pruner.patterns)": [[161, "neural_compressor.compression.pruner.patterns.register_pattern"]], "reshape_orig_to_pattern() (neural_compressor.compression.pruner.patterns.patternninm method)": [[161, "neural_compressor.compression.pruner.patterns.PatternNInM.reshape_orig_to_pattern"]], "reshape_orig_to_pattern() (neural_compressor.compression.pruner.patterns.patternnxm method)": [[161, "neural_compressor.compression.pruner.patterns.PatternNxM.reshape_orig_to_pattern"]], "reshape_reduced_to_orig() (neural_compressor.compression.pruner.patterns.patternninm method)": [[161, "neural_compressor.compression.pruner.patterns.PatternNInM.reshape_reduced_to_orig"]], "reshape_reduced_to_orig() (neural_compressor.compression.pruner.patterns.patternnxm method)": [[161, "neural_compressor.compression.pruner.patterns.PatternNxM.reshape_reduced_to_orig"]], "target_sparsity (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[161, "neural_compressor.compression.pruner.patterns.BasePattern.target_sparsity"]], "update_new_added_masks() (neural_compressor.compression.pruner.patterns.patternnxm method)": [[161, "neural_compressor.compression.pruner.patterns.PatternNxM.update_new_added_masks"]], "update_progressive_masks() (neural_compressor.compression.pruner.patterns.patternnxm method)": [[161, "neural_compressor.compression.pruner.patterns.PatternNxM.update_progressive_masks"]], "update_progressive_masks_global() (neural_compressor.compression.pruner.patterns.patternnxm method)": [[161, "neural_compressor.compression.pruner.patterns.PatternNxM.update_progressive_masks_global"]], "update_progressive_masks_linear() (neural_compressor.compression.pruner.patterns.patternnxm method)": [[161, "neural_compressor.compression.pruner.patterns.PatternNxM.update_progressive_masks_linear"]], "update_progressive_masks_local() (neural_compressor.compression.pruner.patterns.patternnxm method)": [[161, "neural_compressor.compression.pruner.patterns.PatternNxM.update_progressive_masks_local"]], "update_progressive_masks_scores() (neural_compressor.compression.pruner.patterns.patternnxm method)": [[161, "neural_compressor.compression.pruner.patterns.PatternNxM.update_progressive_masks_scores"]], "update_residual_cnt() (neural_compressor.compression.pruner.patterns.basepattern method)": [[161, "neural_compressor.compression.pruner.patterns.BasePattern.update_residual_cnt"]], "basepruner (class in neural_compressor.compression.pruner.pruners)": [[162, "neural_compressor.compression.pruner.pruners.BasePruner"]], "basicpruner (class in neural_compressor.compression.pruner.pruners)": [[162, "neural_compressor.compression.pruner.pruners.BasicPruner"]], "patternlockpruner (class in neural_compressor.compression.pruner.pruners)": [[162, "neural_compressor.compression.pruner.pruners.PatternLockPruner"]], "progressivepruner (class in neural_compressor.compression.pruner.pruners)": [[162, "neural_compressor.compression.pruner.pruners.ProgressivePruner"]], "check_is_pruned_progressive_step() (neural_compressor.compression.pruner.pruners.progressivepruner method)": [[162, "neural_compressor.compression.pruner.pruners.ProgressivePruner.check_is_pruned_progressive_step"]], "check_is_pruned_step() (neural_compressor.compression.pruner.pruners.basepruner method)": [[162, "neural_compressor.compression.pruner.pruners.BasePruner.check_is_pruned_step"]], "check_progressive_validity() (neural_compressor.compression.pruner.pruners.progressivepruner method)": [[162, "neural_compressor.compression.pruner.pruners.ProgressivePruner.check_progressive_validity"]], "config (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[162, "neural_compressor.compression.pruner.pruners.BasePruner.config"]], "criterion (neural_compressor.compression.pruner.pruners.basicpruner attribute)": [[162, "neural_compressor.compression.pruner.pruners.BasicPruner.criterion"]], "current_sparsity_ratio (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[162, "neural_compressor.compression.pruner.pruners.BasePruner.current_sparsity_ratio"]], "end_step (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[162, "neural_compressor.compression.pruner.pruners.BasePruner.end_step"]], "get_pruner() (in module neural_compressor.compression.pruner.pruners)": [[162, "neural_compressor.compression.pruner.pruners.get_pruner"]], "global_step (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[162, "neural_compressor.compression.pruner.pruners.BasePruner.global_step"]], "mask_weights() (neural_compressor.compression.pruner.pruners.basepruner method)": [[162, "neural_compressor.compression.pruner.pruners.BasePruner.mask_weights"]], "mask_weights_general() (neural_compressor.compression.pruner.pruners.basepruner method)": [[162, "neural_compressor.compression.pruner.pruners.BasePruner.mask_weights_general"]], "masks (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[162, "neural_compressor.compression.pruner.pruners.BasePruner.masks"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[162, "neural_compressor.compression.pruner.pruners.BasePruner.max_sparsity_ratio_per_op"]], "modules (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[162, "neural_compressor.compression.pruner.pruners.BasePruner.modules"]], "neural_compressor.compression.pruner.pruners": [[162, "module-neural_compressor.compression.pruner.pruners"]], "on_after_eval() (neural_compressor.compression.pruner.pruners.basepruner method)": [[162, "neural_compressor.compression.pruner.pruners.BasePruner.on_after_eval"]], "on_after_optimizer_step() (neural_compressor.compression.pruner.pruners.basepruner method)": [[162, "neural_compressor.compression.pruner.pruners.BasePruner.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.compression.pruner.pruners.basicpruner method)": [[162, "neural_compressor.compression.pruner.pruners.BasicPruner.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.compression.pruner.pruners.patternlockpruner method)": [[162, "neural_compressor.compression.pruner.pruners.PatternLockPruner.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.compression.pruner.pruners.progressivepruner method)": [[162, "neural_compressor.compression.pruner.pruners.ProgressivePruner.on_after_optimizer_step"]], "on_before_eval() (neural_compressor.compression.pruner.pruners.basepruner method)": [[162, "neural_compressor.compression.pruner.pruners.BasePruner.on_before_eval"]], "on_before_optimizer_step() (neural_compressor.compression.pruner.pruners.basepruner method)": [[162, "neural_compressor.compression.pruner.pruners.BasePruner.on_before_optimizer_step"]], "on_before_optimizer_step() (neural_compressor.compression.pruner.pruners.basicpruner method)": [[162, "neural_compressor.compression.pruner.pruners.BasicPruner.on_before_optimizer_step"]], "on_before_optimizer_step() (neural_compressor.compression.pruner.pruners.progressivepruner method)": [[162, "neural_compressor.compression.pruner.pruners.ProgressivePruner.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.compression.pruner.pruners.basepruner method)": [[162, "neural_compressor.compression.pruner.pruners.BasePruner.on_epoch_begin"]], "on_epoch_end() (neural_compressor.compression.pruner.pruners.basepruner method)": [[162, "neural_compressor.compression.pruner.pruners.BasePruner.on_epoch_end"]], "on_step_begin() (neural_compressor.compression.pruner.pruners.basepruner method)": [[162, "neural_compressor.compression.pruner.pruners.BasePruner.on_step_begin"]], "on_step_begin() (neural_compressor.compression.pruner.pruners.progressivepruner method)": [[162, "neural_compressor.compression.pruner.pruners.ProgressivePruner.on_step_begin"]], "on_step_end() (neural_compressor.compression.pruner.pruners.basepruner method)": [[162, "neural_compressor.compression.pruner.pruners.BasePruner.on_step_end"]], "on_train_begin() (neural_compressor.compression.pruner.pruners.basepruner method)": [[162, "neural_compressor.compression.pruner.pruners.BasePruner.on_train_begin"]], "on_train_end() (neural_compressor.compression.pruner.pruners.basepruner method)": [[162, "neural_compressor.compression.pruner.pruners.BasePruner.on_train_end"]], "parse_valid_pruner_types() (in module neural_compressor.compression.pruner.pruners)": [[162, "neural_compressor.compression.pruner.pruners.parse_valid_pruner_types"]], "pattern (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[162, "neural_compressor.compression.pruner.pruners.BasePruner.pattern"]], "pattern (neural_compressor.compression.pruner.pruners.basicpruner attribute)": [[162, "neural_compressor.compression.pruner.pruners.BasicPruner.pattern"]], "print_progressive_sparsity() (neural_compressor.compression.pruner.pruners.progressivepruner method)": [[162, "neural_compressor.compression.pruner.pruners.ProgressivePruner.print_progressive_sparsity"]], "pruning_frequency (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[162, "neural_compressor.compression.pruner.pruners.BasePruner.pruning_frequency"]], "reg (neural_compressor.compression.pruner.pruners.basicpruner attribute)": [[162, "neural_compressor.compression.pruner.pruners.BasicPruner.reg"]], "register_pruner() (in module neural_compressor.compression.pruner.pruners)": [[162, "neural_compressor.compression.pruner.pruners.register_pruner"]], "scheduler (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[162, "neural_compressor.compression.pruner.pruners.BasePruner.scheduler"]], "scheduler (neural_compressor.compression.pruner.pruners.basicpruner attribute)": [[162, "neural_compressor.compression.pruner.pruners.BasicPruner.scheduler"]], "scores (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[162, "neural_compressor.compression.pruner.pruners.BasePruner.scores"]], "set_global_step() (neural_compressor.compression.pruner.pruners.basicpruner method)": [[162, "neural_compressor.compression.pruner.pruners.BasicPruner.set_global_step"]], "start_step (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[162, "neural_compressor.compression.pruner.pruners.BasePruner.start_step"]], "target_sparsity_ratio (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[162, "neural_compressor.compression.pruner.pruners.BasePruner.target_sparsity_ratio"]], "update_masks() (neural_compressor.compression.pruner.pruners.basepruner method)": [[162, "neural_compressor.compression.pruner.pruners.BasePruner.update_masks"]], "update_masks() (neural_compressor.compression.pruner.pruners.basicpruner method)": [[162, "neural_compressor.compression.pruner.pruners.BasicPruner.update_masks"]], "update_masks() (neural_compressor.compression.pruner.pruners.patternlockpruner method)": [[162, "neural_compressor.compression.pruner.pruners.PatternLockPruner.update_masks"]], "update_masks_progressive() (neural_compressor.compression.pruner.pruners.progressivepruner method)": [[162, "neural_compressor.compression.pruner.pruners.ProgressivePruner.update_masks_progressive"]], "basereg (class in neural_compressor.compression.pruner.regs)": [[163, "neural_compressor.compression.pruner.regs.BaseReg"]], "grouplasso (class in neural_compressor.compression.pruner.regs)": [[163, "neural_compressor.compression.pruner.regs.GroupLasso"]], "alpha (neural_compressor.compression.pruner.regs.grouplasso attribute)": [[163, "neural_compressor.compression.pruner.regs.GroupLasso.alpha"]], "get_reg() (in module neural_compressor.compression.pruner.regs)": [[163, "neural_compressor.compression.pruner.regs.get_reg"]], "get_reg_type() (in module neural_compressor.compression.pruner.regs)": [[163, "neural_compressor.compression.pruner.regs.get_reg_type"]], "neural_compressor.compression.pruner.regs": [[163, "module-neural_compressor.compression.pruner.regs"]], "on_after_optimizer_step() (neural_compressor.compression.pruner.regs.basereg method)": [[163, "neural_compressor.compression.pruner.regs.BaseReg.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.compression.pruner.regs.grouplasso method)": [[163, "neural_compressor.compression.pruner.regs.GroupLasso.on_after_optimizer_step"]], "on_before_optimizer_step() (neural_compressor.compression.pruner.regs.basereg method)": [[163, "neural_compressor.compression.pruner.regs.BaseReg.on_before_optimizer_step"]], "on_before_optimizer_step() (neural_compressor.compression.pruner.regs.grouplasso method)": [[163, "neural_compressor.compression.pruner.regs.GroupLasso.on_before_optimizer_step"]], "reg_terms (neural_compressor.compression.pruner.regs.grouplasso attribute)": [[163, "neural_compressor.compression.pruner.regs.GroupLasso.reg_terms"]], "register_reg() (in module neural_compressor.compression.pruner.regs)": [[163, "neural_compressor.compression.pruner.regs.register_reg"]], "iterativescheduler (class in neural_compressor.compression.pruner.schedulers)": [[164, "neural_compressor.compression.pruner.schedulers.IterativeScheduler"]], "oneshotscheduler (class in neural_compressor.compression.pruner.schedulers)": [[164, "neural_compressor.compression.pruner.schedulers.OneshotScheduler"]], "pruningscheduler (class in neural_compressor.compression.pruner.schedulers)": [[164, "neural_compressor.compression.pruner.schedulers.PruningScheduler"]], "config (neural_compressor.compression.pruner.schedulers.pruningscheduler attribute)": [[164, "neural_compressor.compression.pruner.schedulers.PruningScheduler.config"]], "get_scheduler() (in module neural_compressor.compression.pruner.schedulers)": [[164, "neural_compressor.compression.pruner.schedulers.get_scheduler"]], "neural_compressor.compression.pruner.schedulers": [[164, "module-neural_compressor.compression.pruner.schedulers"]], "register_scheduler() (in module neural_compressor.compression.pruner.schedulers)": [[164, "neural_compressor.compression.pruner.schedulers.register_scheduler"]], "update_sparsity_ratio() (neural_compressor.compression.pruner.schedulers.iterativescheduler method)": [[164, "neural_compressor.compression.pruner.schedulers.IterativeScheduler.update_sparsity_ratio"]], "update_sparsity_ratio() (neural_compressor.compression.pruner.schedulers.oneshotscheduler method)": [[164, "neural_compressor.compression.pruner.schedulers.OneshotScheduler.update_sparsity_ratio"]], "update_sparsity_ratio() (neural_compressor.compression.pruner.schedulers.pruningscheduler method)": [[164, "neural_compressor.compression.pruner.schedulers.PruningScheduler.update_sparsity_ratio"]], "check_config() (in module neural_compressor.compression.pruner.utils)": [[165, "neural_compressor.compression.pruner.utils.check_config"]], "check_key_validity() (in module neural_compressor.compression.pruner.utils)": [[165, "neural_compressor.compression.pruner.utils.check_key_validity"]], "generate_pruner_config() (in module neural_compressor.compression.pruner.utils)": [[165, "neural_compressor.compression.pruner.utils.generate_pruner_config"]], "get_sparsity_ratio() (in module neural_compressor.compression.pruner.utils)": [[165, "neural_compressor.compression.pruner.utils.get_sparsity_ratio"]], "neural_compressor.compression.pruner.utils": [[165, "module-neural_compressor.compression.pruner.utils"]], "parse_to_prune() (in module neural_compressor.compression.pruner.utils)": [[165, "neural_compressor.compression.pruner.utils.parse_to_prune"]], "process_and_check_config() (in module neural_compressor.compression.pruner.utils)": [[165, "neural_compressor.compression.pruner.utils.process_and_check_config"]], "process_config() (in module neural_compressor.compression.pruner.utils)": [[165, "neural_compressor.compression.pruner.utils.process_config"]], "process_weight_config() (in module neural_compressor.compression.pruner.utils)": [[165, "neural_compressor.compression.pruner.utils.process_weight_config"]], "process_yaml_config() (in module neural_compressor.compression.pruner.utils)": [[165, "neural_compressor.compression.pruner.utils.process_yaml_config"]], "reset_none_to_default() (in module neural_compressor.compression.pruner.utils)": [[165, "neural_compressor.compression.pruner.utils.reset_none_to_default"]], "update_params() (in module neural_compressor.compression.pruner.utils)": [[165, "neural_compressor.compression.pruner.utils.update_params"]], "benchmark_conf (class in neural_compressor.conf.config)": [[166, "neural_compressor.conf.config.Benchmark_Conf"]], "conf (class in neural_compressor.conf.config)": [[166, "neural_compressor.conf.config.Conf"]], "distillation_conf (class in neural_compressor.conf.config)": [[166, "neural_compressor.conf.config.Distillation_Conf"]], "graph_optimization_conf (class in neural_compressor.conf.config)": [[166, "neural_compressor.conf.config.Graph_Optimization_Conf"]], "mixedprecision_conf (class in neural_compressor.conf.config)": [[166, "neural_compressor.conf.config.MixedPrecision_Conf"]], "nasconfig (class in neural_compressor.conf.config)": [[166, "neural_compressor.conf.config.NASConfig"]], "prunerv2 (class in neural_compressor.conf.config)": [[166, "neural_compressor.conf.config.PrunerV2"]], "pruning_conf (class in neural_compressor.conf.config)": [[166, "neural_compressor.conf.config.Pruning_Conf"]], "quantization_conf (class in neural_compressor.conf.config)": [[166, "neural_compressor.conf.config.Quantization_Conf"]], "neural_compressor.conf.config": [[166, "module-neural_compressor.conf.config"]], "dotdict (class in neural_compressor.conf.dotdict)": [[167, "neural_compressor.conf.dotdict.DotDict"]], "deep_get() (in module neural_compressor.conf.dotdict)": [[167, "neural_compressor.conf.dotdict.deep_get"]], "deep_set() (in module neural_compressor.conf.dotdict)": [[167, "neural_compressor.conf.dotdict.deep_set"]], "neural_compressor.conf.dotdict": [[167, "module-neural_compressor.conf.dotdict"]], "neural_compressor.conf": [[168, "module-neural_compressor.conf"]], "neural_compressor.conf.pythonic_config": [[169, "module-neural_compressor.conf.pythonic_config"]], "accuracycriterion (class in neural_compressor.config)": [[170, "neural_compressor.config.AccuracyCriterion"]], "benchmarkconfig (class in neural_compressor.config)": [[170, "neural_compressor.config.BenchmarkConfig"]], "distillationconfig (class in neural_compressor.config)": [[170, "neural_compressor.config.DistillationConfig"]], "exportconfig (class in neural_compressor.config)": [[170, "neural_compressor.config.ExportConfig"]], "intermediatelayersknowledgedistillationlossconfig (class in neural_compressor.config)": [[170, "neural_compressor.config.IntermediateLayersKnowledgeDistillationLossConfig"]], "knowledgedistillationlossconfig (class in neural_compressor.config)": [[170, "neural_compressor.config.KnowledgeDistillationLossConfig"]], "mixedprecisionconfig (class in neural_compressor.config)": [[170, "neural_compressor.config.MixedPrecisionConfig"]], "onnxqlinear2qdqconfig (class in neural_compressor.config)": [[170, "neural_compressor.config.ONNXQlinear2QDQConfig"]], "options (class in neural_compressor.config)": [[170, "neural_compressor.config.Options"]], "posttrainingquantconfig (class in neural_compressor.config)": [[170, "neural_compressor.config.PostTrainingQuantConfig"]], "quantizationawaretrainingconfig (class in neural_compressor.config)": [[170, "neural_compressor.config.QuantizationAwareTrainingConfig"]], "selfknowledgedistillationlossconfig (class in neural_compressor.config)": [[170, "neural_compressor.config.SelfKnowledgeDistillationLossConfig"]], "tf2onnxconfig (class in neural_compressor.config)": [[170, "neural_compressor.config.TF2ONNXConfig"]], "torch2onnxconfig (class in neural_compressor.config)": [[170, "neural_compressor.config.Torch2ONNXConfig"]], "tuningcriterion (class in neural_compressor.config)": [[170, "neural_compressor.config.TuningCriterion"]], "weightpruningconfig (class in neural_compressor.config)": [[170, "neural_compressor.config.WeightPruningConfig"]], "absolute (neural_compressor.config.accuracycriterion property)": [[170, "neural_compressor.config.AccuracyCriterion.absolute"]], "approach (neural_compressor.config.posttrainingquantconfig property)": [[170, "neural_compressor.config.PostTrainingQuantConfig.approach"]], "approach (neural_compressor.config.quantizationawaretrainingconfig property)": [[170, "neural_compressor.config.QuantizationAwareTrainingConfig.approach"]], "backend (neural_compressor.config.benchmarkconfig property)": [[170, "neural_compressor.config.BenchmarkConfig.backend"]], "check_value() (in module neural_compressor.config)": [[170, "neural_compressor.config.check_value"]], "cores_per_instance (neural_compressor.config.benchmarkconfig property)": [[170, "neural_compressor.config.BenchmarkConfig.cores_per_instance"]], "criterion (neural_compressor.config.accuracycriterion property)": [[170, "neural_compressor.config.AccuracyCriterion.criterion"]], "criterion (neural_compressor.config.distillationconfig property)": [[170, "neural_compressor.config.DistillationConfig.criterion"]], "dtype (neural_compressor.config.exportconfig property)": [[170, "neural_compressor.config.ExportConfig.dtype"]], "dynamic_axes (neural_compressor.config.exportconfig property)": [[170, "neural_compressor.config.ExportConfig.dynamic_axes"]], "example_inputs (neural_compressor.config.exportconfig property)": [[170, "neural_compressor.config.ExportConfig.example_inputs"]], "higher_is_better (neural_compressor.config.accuracycriterion property)": [[170, "neural_compressor.config.AccuracyCriterion.higher_is_better"]], "input_names (neural_compressor.config.exportconfig property)": [[170, "neural_compressor.config.ExportConfig.input_names"]], "inputs (neural_compressor.config.benchmarkconfig property)": [[170, "neural_compressor.config.BenchmarkConfig.inputs"]], "inter_num_of_threads (neural_compressor.config.benchmarkconfig property)": [[170, "neural_compressor.config.BenchmarkConfig.inter_num_of_threads"]], "intra_num_of_threads (neural_compressor.config.benchmarkconfig property)": [[170, "neural_compressor.config.BenchmarkConfig.intra_num_of_threads"]], "iteration (neural_compressor.config.benchmarkconfig property)": [[170, "neural_compressor.config.BenchmarkConfig.iteration"]], "max_trials (neural_compressor.config.tuningcriterion property)": [[170, "neural_compressor.config.TuningCriterion.max_trials"]], "neural_compressor.config": [[170, "module-neural_compressor.config"]], "num_of_instance (neural_compressor.config.benchmarkconfig property)": [[170, "neural_compressor.config.BenchmarkConfig.num_of_instance"]], "objective (neural_compressor.config.tuningcriterion property)": [[170, "neural_compressor.config.TuningCriterion.objective"]], "opset_version (neural_compressor.config.exportconfig property)": [[170, "neural_compressor.config.ExportConfig.opset_version"]], "optimizer (neural_compressor.config.distillationconfig property)": [[170, "neural_compressor.config.DistillationConfig.optimizer"]], "output_names (neural_compressor.config.exportconfig property)": [[170, "neural_compressor.config.ExportConfig.output_names"]], "outputs (neural_compressor.config.benchmarkconfig property)": [[170, "neural_compressor.config.BenchmarkConfig.outputs"]], "precision (neural_compressor.config.mixedprecisionconfig property)": [[170, "neural_compressor.config.MixedPrecisionConfig.precision"]], "quant_format (neural_compressor.config.exportconfig property)": [[170, "neural_compressor.config.ExportConfig.quant_format"]], "random_seed (neural_compressor.config.options property)": [[170, "neural_compressor.config.Options.random_seed"]], "relative (neural_compressor.config.accuracycriterion property)": [[170, "neural_compressor.config.AccuracyCriterion.relative"]], "resume_from (neural_compressor.config.options property)": [[170, "neural_compressor.config.Options.resume_from"]], "strategy (neural_compressor.config.tuningcriterion property)": [[170, "neural_compressor.config.TuningCriterion.strategy"]], "strategy_kwargs (neural_compressor.config.tuningcriterion property)": [[170, "neural_compressor.config.TuningCriterion.strategy_kwargs"]], "teacher_model (neural_compressor.config.distillationconfig property)": [[170, "neural_compressor.config.DistillationConfig.teacher_model"]], "tensorboard (neural_compressor.config.options property)": [[170, "neural_compressor.config.Options.tensorboard"]], "timeout (neural_compressor.config.tuningcriterion property)": [[170, "neural_compressor.config.TuningCriterion.timeout"]], "tolerable_loss (neural_compressor.config.accuracycriterion property)": [[170, "neural_compressor.config.AccuracyCriterion.tolerable_loss"]], "tuning_criterion (neural_compressor.config.posttrainingquantconfig property)": [[170, "neural_compressor.config.PostTrainingQuantConfig.tuning_criterion"]], "warmup (neural_compressor.config.benchmarkconfig property)": [[170, "neural_compressor.config.BenchmarkConfig.warmup"]], "weight_compression (neural_compressor.config.weightpruningconfig property)": [[170, "neural_compressor.config.WeightPruningConfig.weight_compression"]], "workspace (neural_compressor.config.options property)": [[170, "neural_compressor.config.Options.workspace"]], "neural_compressor.contrib": [[171, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[172, "module-neural_compressor.contrib.strategy"]], "sigopttunestrategy (class in neural_compressor.contrib.strategy.sigopt)": [[173, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy"]], "create_exp() (neural_compressor.contrib.strategy.sigopt.sigopttunestrategy method)": [[173, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy.create_exp"]], "get_acc_target() (neural_compressor.contrib.strategy.sigopt.sigopttunestrategy method)": [[173, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy.get_acc_target"]], "neural_compressor.contrib.strategy.sigopt": [[173, "module-neural_compressor.contrib.strategy.sigopt"]], "next_tune_cfg() (neural_compressor.contrib.strategy.sigopt.sigopttunestrategy method)": [[173, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy.next_tune_cfg"]], "params_to_tune_configs() (neural_compressor.contrib.strategy.sigopt.sigopttunestrategy method)": [[173, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy.params_to_tune_configs"]], "traverse() (neural_compressor.contrib.strategy.sigopt.sigopttunestrategy method)": [[173, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy.traverse"]], "tpetunestrategy (class in neural_compressor.contrib.strategy.tpe)": [[174, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy"]], "add_loss_to_tuned_history_and_find_best() (neural_compressor.contrib.strategy.tpe.tpetunestrategy method)": [[174, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy.add_loss_to_tuned_history_and_find_best"]], "calculate_loss() (neural_compressor.contrib.strategy.tpe.tpetunestrategy method)": [[174, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy.calculate_loss"]], "neural_compressor.contrib.strategy.tpe": [[174, "module-neural_compressor.contrib.strategy.tpe"]], "object_evaluation() (neural_compressor.contrib.strategy.tpe.tpetunestrategy method)": [[174, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy.object_evaluation"]], "stop() (neural_compressor.contrib.strategy.tpe.tpetunestrategy method)": [[174, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy.stop"]], "traverse() (neural_compressor.contrib.strategy.tpe.tpetunestrategy method)": [[174, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy.traverse"]], "basedataloader (class in neural_compressor.data.dataloaders.base_dataloader)": [[175, "neural_compressor.data.dataloaders.base_dataloader.BaseDataLoader"]], "batch() (neural_compressor.data.dataloaders.base_dataloader.basedataloader method)": [[175, "neural_compressor.data.dataloaders.base_dataloader.BaseDataLoader.batch"]], "batch_size (neural_compressor.data.dataloaders.base_dataloader.basedataloader property)": [[175, "neural_compressor.data.dataloaders.base_dataloader.BaseDataLoader.batch_size"]], "neural_compressor.data.dataloaders.base_dataloader": [[175, "module-neural_compressor.data.dataloaders.base_dataloader"]], "dataloader (class in neural_compressor.data.dataloaders.dataloader)": [[176, "neural_compressor.data.dataloaders.dataloader.DataLoader"]], "neural_compressor.data.dataloaders.dataloader": [[176, "module-neural_compressor.data.dataloaders.dataloader"]], "defaultdataloader (class in neural_compressor.data.dataloaders.default_dataloader)": [[177, "neural_compressor.data.dataloaders.default_dataloader.DefaultDataLoader"]], "batch() (neural_compressor.data.dataloaders.default_dataloader.defaultdataloader method)": [[177, "neural_compressor.data.dataloaders.default_dataloader.DefaultDataLoader.batch"]], "dataloader (neural_compressor.data.dataloaders.default_dataloader.defaultdataloader property)": [[177, "neural_compressor.data.dataloaders.default_dataloader.DefaultDataLoader.dataloader"]], "default_collate() (in module neural_compressor.data.dataloaders.default_dataloader)": [[177, "neural_compressor.data.dataloaders.default_dataloader.default_collate"]], "neural_compressor.data.dataloaders.default_dataloader": [[177, "module-neural_compressor.data.dataloaders.default_dataloader"]], "fetcher (class in neural_compressor.data.dataloaders.fetcher)": [[178, "neural_compressor.data.dataloaders.fetcher.Fetcher"]], "indexfetcher (class in neural_compressor.data.dataloaders.fetcher)": [[178, "neural_compressor.data.dataloaders.fetcher.IndexFetcher"]], "iterablefetcher (class in neural_compressor.data.dataloaders.fetcher)": [[178, "neural_compressor.data.dataloaders.fetcher.IterableFetcher"]], "neural_compressor.data.dataloaders.fetcher": [[178, "module-neural_compressor.data.dataloaders.fetcher"]], "dataloader (class in neural_compressor.data.dataloaders)": [[179, "neural_compressor.data.dataloaders.DataLoader"]], "neural_compressor.data.dataloaders": [[179, "module-neural_compressor.data.dataloaders"]], "mxnetdataloader (class in neural_compressor.data.dataloaders.mxnet_dataloader)": [[180, "neural_compressor.data.dataloaders.mxnet_dataloader.MXNetDataLoader"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[180, "module-neural_compressor.data.dataloaders.mxnet_dataloader"]], "onnxrtbertdataloader (class in neural_compressor.data.dataloaders.onnxrt_dataloader)": [[181, "neural_compressor.data.dataloaders.onnxrt_dataloader.ONNXRTBertDataLoader"]], "onnxrtdataloader (class in neural_compressor.data.dataloaders.onnxrt_dataloader)": [[181, "neural_compressor.data.dataloaders.onnxrt_dataloader.ONNXRTDataLoader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[181, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"]], "pytorchdataloader (class in neural_compressor.data.dataloaders.pytorch_dataloader)": [[182, "neural_compressor.data.dataloaders.pytorch_dataloader.PyTorchDataLoader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[182, "module-neural_compressor.data.dataloaders.pytorch_dataloader"]], "batchsampler (class in neural_compressor.data.dataloaders.sampler)": [[183, "neural_compressor.data.dataloaders.sampler.BatchSampler"]], "iterablesampler (class in neural_compressor.data.dataloaders.sampler)": [[183, "neural_compressor.data.dataloaders.sampler.IterableSampler"]], "sampler (class in neural_compressor.data.dataloaders.sampler)": [[183, "neural_compressor.data.dataloaders.sampler.Sampler"]], "sequentialsampler (class in neural_compressor.data.dataloaders.sampler)": [[183, "neural_compressor.data.dataloaders.sampler.SequentialSampler"]], "neural_compressor.data.dataloaders.sampler": [[183, "module-neural_compressor.data.dataloaders.sampler"]], "tfdatadataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[184, "neural_compressor.data.dataloaders.tensorflow_dataloader.TFDataDataLoader"]], "tensorflowbertdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[184, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowBertDataLoader"]], "tensorflowdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[184, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowDataLoader"]], "tensorflowmodelzoobertdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[184, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowModelZooBertDataLoader"]], "batch() (neural_compressor.data.dataloaders.tensorflow_dataloader.tfdatadataloader method)": [[184, "neural_compressor.data.dataloaders.tensorflow_dataloader.TFDataDataLoader.batch"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[184, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"]], "inputfeatures (class in neural_compressor.data.datasets.bert_dataset)": [[185, "neural_compressor.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[185, "neural_compressor.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.data.datasets.bert_dataset)": [[185, "neural_compressor.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[185, "neural_compressor.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[185, "neural_compressor.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[185, "neural_compressor.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.data.datasets.bert_dataset)": [[185, "neural_compressor.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.data.datasets.bert_dataset)": [[185, "neural_compressor.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.data.datasets.bert_dataset": [[185, "module-neural_compressor.data.datasets.bert_dataset"]], "to_json_string() (neural_compressor.data.datasets.bert_dataset.inputfeatures method)": [[185, "neural_compressor.data.datasets.bert_dataset.InputFeatures.to_json_string"]], "coconpy (class in neural_compressor.data.datasets.coco_dataset)": [[186, "neural_compressor.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.data.datasets.coco_dataset)": [[186, "neural_compressor.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.data.datasets.coco_dataset)": [[186, "neural_compressor.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.data.datasets.coco_dataset)": [[186, "neural_compressor.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.data.datasets.coco_dataset": [[186, "module-neural_compressor.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.data.datasets.dataset)": [[187, "neural_compressor.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.data.datasets.dataset)": [[187, "neural_compressor.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.data.datasets.dataset)": [[187, "neural_compressor.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.data.datasets.dataset)": [[187, "neural_compressor.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.data.datasets.dataset)": [[187, "neural_compressor.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.data.datasets.dataset)": [[187, "neural_compressor.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.data.datasets.dataset)": [[187, "neural_compressor.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.data.datasets.dataset)": [[187, "neural_compressor.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.data.datasets.dataset)": [[187, "neural_compressor.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.data.datasets.dataset)": [[187, "neural_compressor.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.data.datasets.dataset)": [[187, "neural_compressor.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.data.datasets.dataset)": [[187, "neural_compressor.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.data.datasets.dataset)": [[187, "neural_compressor.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.data.datasets.dataset)": [[187, "neural_compressor.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.data.datasets.dataset)": [[187, "neural_compressor.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.data.datasets.dataset)": [[187, "neural_compressor.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.data.datasets.dataset)": [[187, "neural_compressor.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.data.datasets.dataset)": [[187, "neural_compressor.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.data.datasets.dataset)": [[187, "neural_compressor.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.data.datasets.dataset)": [[187, "neural_compressor.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.data.datasets.dataset)": [[187, "neural_compressor.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.data.datasets.dataset)": [[187, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.datasets.dataset)": [[187, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflow (class in neural_compressor.data.datasets.dataset)": [[187, "neural_compressor.data.datasets.dataset.Tensorflow"]], "tensorflowcifar10 (class in neural_compressor.data.datasets.dataset)": [[187, "neural_compressor.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.data.datasets.dataset)": [[187, "neural_compressor.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.data.datasets.dataset)": [[187, "neural_compressor.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.data.datasets.dataset)": [[187, "neural_compressor.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagerecord (class in neural_compressor.data.datasets.dataset)": [[187, "neural_compressor.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.data.datasets.dataset)": [[187, "neural_compressor.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.data.datasets.dataset)": [[187, "neural_compressor.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.data.datasets.dataset)": [[187, "neural_compressor.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.data.datasets.dataset)": [[187, "neural_compressor.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.data.datasets.dataset)": [[187, "neural_compressor.data.datasets.dataset.check_integrity"]], "class_to_idx (neural_compressor.data.datasets.dataset.mnist property)": [[187, "neural_compressor.data.datasets.dataset.MNIST.class_to_idx"]], "dataset_registry() (in module neural_compressor.data.datasets.dataset)": [[187, "neural_compressor.data.datasets.dataset.dataset_registry"]], "download() (neural_compressor.data.datasets.dataset.cifar10 method)": [[187, "neural_compressor.data.datasets.dataset.CIFAR10.download"]], "download() (neural_compressor.data.datasets.dataset.mnist method)": [[187, "neural_compressor.data.datasets.dataset.MNIST.download"]], "download_url() (in module neural_compressor.data.datasets.dataset)": [[187, "neural_compressor.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.data.datasets.dataset)": [[187, "neural_compressor.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.data.datasets.dataset)": [[187, "neural_compressor.data.datasets.dataset.gen_bar_updater"]], "load_meta() (neural_compressor.data.datasets.dataset.cifar10 method)": [[187, "neural_compressor.data.datasets.dataset.CIFAR10.load_meta"]], "neural_compressor.data.datasets.dataset": [[187, "module-neural_compressor.data.datasets.dataset"]], "read_data() (neural_compressor.data.datasets.dataset.fashionmnist method)": [[187, "neural_compressor.data.datasets.dataset.FashionMNIST.read_data"]], "read_data() (neural_compressor.data.datasets.dataset.mnist method)": [[187, "neural_compressor.data.datasets.dataset.MNIST.read_data"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset)": [[188, "neural_compressor.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset": [[188, "module-neural_compressor.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[189, "neural_compressor.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[189, "neural_compressor.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[189, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[190, "neural_compressor.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[190, "neural_compressor.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[190, "neural_compressor.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[190, "neural_compressor.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[190, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[190, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.data.datasets.imagenet_dataset": [[190, "module-neural_compressor.data.datasets.imagenet_dataset"]], "cocorecorddataset (class in neural_compressor.data.datasets)": [[191, "neural_compressor.data.datasets.COCORecordDataset"]], "dataset (class in neural_compressor.data.datasets)": [[191, "neural_compressor.data.datasets.Dataset"]], "datasets (class in neural_compressor.data.datasets)": [[191, "neural_compressor.data.datasets.Datasets"]], "iterabledataset (class in neural_compressor.data.datasets)": [[191, "neural_compressor.data.datasets.IterableDataset"]], "tensorflowimagerecord (class in neural_compressor.data.datasets)": [[191, "neural_compressor.data.datasets.TensorflowImageRecord"]], "dataset_registry() (in module neural_compressor.data.datasets)": [[191, "neural_compressor.data.datasets.dataset_registry"]], "neural_compressor.data.datasets": [[191, "module-neural_compressor.data.datasets"]], "styletransferdataset (class in neural_compressor.data.datasets.style_transfer_dataset)": [[192, "neural_compressor.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.data.datasets.style_transfer_dataset": [[192, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.data.filters.coco_filter)": [[193, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.data.filters.coco_filter)": [[193, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.coco_filter": [[193, "module-neural_compressor.data.filters.coco_filter"]], "filters (class in neural_compressor.data.filters.filter)": [[194, "neural_compressor.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.data.filters.filter)": [[194, "neural_compressor.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.data.filters.filter)": [[194, "neural_compressor.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.data.filters.filter)": [[194, "neural_compressor.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.data.filters.filter)": [[194, "neural_compressor.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.data.filters.filter)": [[194, "neural_compressor.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.data.filters.filter)": [[194, "neural_compressor.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.data.filters.filter)": [[194, "neural_compressor.data.filters.filter.filter_registry"]], "neural_compressor.data.filters.filter": [[194, "module-neural_compressor.data.filters.filter"]], "filters (class in neural_compressor.data.filters)": [[195, "neural_compressor.data.filters.FILTERS"]], "filter (class in neural_compressor.data.filters)": [[195, "neural_compressor.data.filters.Filter"]], "labelbalancecocorecordfilter (class in neural_compressor.data.filters)": [[195, "neural_compressor.data.filters.LabelBalanceCOCORecordFilter"]], "filter_registry() (in module neural_compressor.data.filters)": [[195, "neural_compressor.data.filters.filter_registry"]], "neural_compressor.data.filters": [[195, "module-neural_compressor.data.filters"]], "basetransform (class in neural_compressor.data)": [[196, "neural_compressor.data.BaseTransform"]], "bilinearimagenettransform (class in neural_compressor.data)": [[196, "neural_compressor.data.BilinearImagenetTransform"]], "cocorecorddataset (class in neural_compressor.data)": [[196, "neural_compressor.data.COCORecordDataset"]], "composetransform (class in neural_compressor.data)": [[196, "neural_compressor.data.ComposeTransform"]], "dataloader (class in neural_compressor.data)": [[196, "neural_compressor.data.DataLoader"]], "dataset (class in neural_compressor.data)": [[196, "neural_compressor.data.Dataset"]], "datasets (class in neural_compressor.data)": [[196, "neural_compressor.data.Datasets"]], "defaultdataloader (class in neural_compressor.data)": [[196, "neural_compressor.data.DefaultDataLoader"]], "filters (class in neural_compressor.data)": [[196, "neural_compressor.data.FILTERS"]], "filter (class in neural_compressor.data)": [[196, "neural_compressor.data.Filter"]], "iterabledataset (class in neural_compressor.data)": [[196, "neural_compressor.data.IterableDataset"]], "labelbalancecocorecordfilter (class in neural_compressor.data)": [[196, "neural_compressor.data.LabelBalanceCOCORecordFilter"]], "labelshift (class in neural_compressor.data)": [[196, "neural_compressor.data.LabelShift"]], "normalizetftransform (class in neural_compressor.data)": [[196, "neural_compressor.data.NormalizeTFTransform"]], "parsedecodecocotransform (class in neural_compressor.data)": [[196, "neural_compressor.data.ParseDecodeCocoTransform"]], "postprocess (class in neural_compressor.data)": [[196, "neural_compressor.data.Postprocess"]], "rescaletftransform (class in neural_compressor.data)": [[196, "neural_compressor.data.RescaleTFTransform"]], "resizetftransform (class in neural_compressor.data)": [[196, "neural_compressor.data.ResizeTFTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.data)": [[196, "neural_compressor.data.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.data)": [[196, "neural_compressor.data.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.data)": [[196, "neural_compressor.data.TRANSFORMS"]], "tensorflowimagerecord (class in neural_compressor.data)": [[196, "neural_compressor.data.TensorflowImageRecord"]], "tensorflowresizecropimagenettransform (class in neural_compressor.data)": [[196, "neural_compressor.data.TensorflowResizeCropImagenetTransform"]], "tensorflowresizewithratio (class in neural_compressor.data)": [[196, "neural_compressor.data.TensorflowResizeWithRatio"]], "batch() (neural_compressor.data.defaultdataloader method)": [[196, "neural_compressor.data.DefaultDataLoader.batch"]], "dataloader (neural_compressor.data.defaultdataloader property)": [[196, "neural_compressor.data.DefaultDataLoader.dataloader"]], "dataset_registry() (in module neural_compressor.data)": [[196, "neural_compressor.data.dataset_registry"]], "filter_registry() (in module neural_compressor.data)": [[196, "neural_compressor.data.filter_registry"]], "get_postprocess_result() (neural_compressor.data.tfsquadv1posttransform method)": [[196, "neural_compressor.data.TFSquadV1PostTransform.get_postprocess_result"]], "neural_compressor.data": [[196, "module-neural_compressor.data"]], "process_result() (neural_compressor.data.tfsquadv1posttransform method)": [[196, "neural_compressor.data.TFSquadV1PostTransform.process_result"]], "register() (neural_compressor.data.transforms method)": [[196, "neural_compressor.data.TRANSFORMS.register"]], "transform_registry() (in module neural_compressor.data)": [[196, "neural_compressor.data.transform_registry"]], "parsedecodecocotransform (class in neural_compressor.data.transforms.coco_transform)": [[197, "neural_compressor.data.transforms.coco_transform.ParseDecodeCocoTransform"]], "neural_compressor.data.transforms.coco_transform": [[197, "module-neural_compressor.data.transforms.coco_transform"]], "bilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[198, "neural_compressor.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.data.transforms.imagenet_transform)": [[198, "neural_compressor.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[198, "neural_compressor.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[198, "neural_compressor.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.data.transforms.imagenet_transform)": [[198, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[198, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.data.transforms.imagenet_transform)": [[198, "neural_compressor.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.data.transforms.imagenet_transform)": [[198, "neural_compressor.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[198, "neural_compressor.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "neural_compressor.data.transforms.imagenet_transform": [[198, "module-neural_compressor.data.transforms.imagenet_transform"]], "basetransform (class in neural_compressor.data.transforms)": [[199, "neural_compressor.data.transforms.BaseTransform"]], "bilinearimagenettransform (class in neural_compressor.data.transforms)": [[199, "neural_compressor.data.transforms.BilinearImagenetTransform"]], "composetransform (class in neural_compressor.data.transforms)": [[199, "neural_compressor.data.transforms.ComposeTransform"]], "labelshift (class in neural_compressor.data.transforms)": [[199, "neural_compressor.data.transforms.LabelShift"]], "normalizetftransform (class in neural_compressor.data.transforms)": [[199, "neural_compressor.data.transforms.NormalizeTFTransform"]], "parsedecodecocotransform (class in neural_compressor.data.transforms)": [[199, "neural_compressor.data.transforms.ParseDecodeCocoTransform"]], "postprocess (class in neural_compressor.data.transforms)": [[199, "neural_compressor.data.transforms.Postprocess"]], "rescaletftransform (class in neural_compressor.data.transforms)": [[199, "neural_compressor.data.transforms.RescaleTFTransform"]], "resizetftransform (class in neural_compressor.data.transforms)": [[199, "neural_compressor.data.transforms.ResizeTFTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.data.transforms)": [[199, "neural_compressor.data.transforms.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.data.transforms)": [[199, "neural_compressor.data.transforms.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.data.transforms)": [[199, "neural_compressor.data.transforms.TRANSFORMS"]], "tensorflowresizecropimagenettransform (class in neural_compressor.data.transforms)": [[199, "neural_compressor.data.transforms.TensorflowResizeCropImagenetTransform"]], "tensorflowresizewithratio (class in neural_compressor.data.transforms)": [[199, "neural_compressor.data.transforms.TensorflowResizeWithRatio"]], "get_postprocess_result() (neural_compressor.data.transforms.tfsquadv1posttransform method)": [[199, "neural_compressor.data.transforms.TFSquadV1PostTransform.get_postprocess_result"]], "neural_compressor.data.transforms": [[199, "module-neural_compressor.data.transforms"]], "process_result() (neural_compressor.data.transforms.tfsquadv1posttransform method)": [[199, "neural_compressor.data.transforms.TFSquadV1PostTransform.process_result"]], "register() (neural_compressor.data.transforms.transforms method)": [[199, "neural_compressor.data.transforms.TRANSFORMS.register"]], "transform_registry() (in module neural_compressor.data.transforms)": [[199, "neural_compressor.data.transforms.transform_registry"]], "postprocess (class in neural_compressor.data.transforms.postprocess)": [[200, "neural_compressor.data.transforms.postprocess.Postprocess"]], "neural_compressor.data.transforms.postprocess": [[200, "module-neural_compressor.data.transforms.postprocess"]], "basictokenizer (class in neural_compressor.data.transforms.tokenization)": [[201, "neural_compressor.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.data.transforms.tokenization)": [[201, "neural_compressor.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.data.transforms.tokenization)": [[201, "neural_compressor.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.data.transforms.tokenization)": [[201, "neural_compressor.data.transforms.tokenization.convert_by_vocab"]], "convert_ids_to_tokens() (neural_compressor.data.transforms.tokenization.fulltokenizer method)": [[201, "neural_compressor.data.transforms.tokenization.FullTokenizer.convert_ids_to_tokens"]], "convert_to_unicode() (in module neural_compressor.data.transforms.tokenization)": [[201, "neural_compressor.data.transforms.tokenization.convert_to_unicode"]], "convert_tokens_to_ids() (neural_compressor.data.transforms.tokenization.fulltokenizer method)": [[201, "neural_compressor.data.transforms.tokenization.FullTokenizer.convert_tokens_to_ids"]], "load_vocab() (in module neural_compressor.data.transforms.tokenization)": [[201, "neural_compressor.data.transforms.tokenization.load_vocab"]], "neural_compressor.data.transforms.tokenization": [[201, "module-neural_compressor.data.transforms.tokenization"]], "tokenize() (neural_compressor.data.transforms.tokenization.basictokenizer method)": [[201, "neural_compressor.data.transforms.tokenization.BasicTokenizer.tokenize"]], "tokenize() (neural_compressor.data.transforms.tokenization.fulltokenizer method)": [[201, "neural_compressor.data.transforms.tokenization.FullTokenizer.tokenize"]], "tokenize() (neural_compressor.data.transforms.tokenization.wordpiecetokenizer method)": [[201, "neural_compressor.data.transforms.tokenization.WordpieceTokenizer.tokenize"]], "whitespace_tokenize() (in module neural_compressor.data.transforms.tokenization)": [[201, "neural_compressor.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.TRANSFORMS"], [202, "neural_compressor.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.get_final_text"]], "get_params() (neural_compressor.data.transforms.transform.randomresizedcroptftransform method)": [[202, "neural_compressor.data.transforms.transform.RandomResizedCropTFTransform.get_params"]], "get_params() (neural_compressor.data.transforms.transform.randomresizedcroptransform method)": [[202, "neural_compressor.data.transforms.transform.RandomResizedCropTransform.get_params"]], "get_postprocess_result() (neural_compressor.data.transforms.transform.tfsquadv1posttransform method)": [[202, "neural_compressor.data.transforms.transform.TFSquadV1PostTransform.get_postprocess_result"]], "get_torchvision_map() (in module neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.get_torchvision_map"]], "neural_compressor.data.transforms.transform": [[202, "module-neural_compressor.data.transforms.transform"]], "process_result() (neural_compressor.data.transforms.transform.tfsquadv1posttransform method)": [[202, "neural_compressor.data.transforms.transform.TFSquadV1PostTransform.process_result"]], "read_squad_examples() (in module neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.read_squad_examples"]], "register() (neural_compressor.data.transforms.transform.transforms method)": [[202, "neural_compressor.data.transforms.transform.TRANSFORMS.register"]], "transform_registry() (in module neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.transform_registry"]], "benchmark (class in neural_compressor.experimental.benchmark)": [[203, "neural_compressor.experimental.benchmark.Benchmark"]], "b_dataloader (neural_compressor.experimental.benchmark.benchmark property)": [[203, "neural_compressor.experimental.benchmark.Benchmark.b_dataloader"]], "b_func (neural_compressor.experimental.benchmark.benchmark property)": [[203, "neural_compressor.experimental.benchmark.Benchmark.b_func"]], "call_one() (neural_compressor.experimental.benchmark.benchmark method)": [[203, "neural_compressor.experimental.benchmark.Benchmark.call_one"]], "config_instance() (neural_compressor.experimental.benchmark.benchmark method)": [[203, "neural_compressor.experimental.benchmark.Benchmark.config_instance"]], "generate_prefix() (neural_compressor.experimental.benchmark.benchmark method)": [[203, "neural_compressor.experimental.benchmark.Benchmark.generate_prefix"]], "get_architecture() (in module neural_compressor.experimental.benchmark)": [[203, "neural_compressor.experimental.benchmark.get_architecture"]], "get_bounded_threads() (in module neural_compressor.experimental.benchmark)": [[203, "neural_compressor.experimental.benchmark.get_bounded_threads"]], "get_core_ids() (in module neural_compressor.experimental.benchmark)": [[203, "neural_compressor.experimental.benchmark.get_core_ids"]], "get_physical_ids() (in module neural_compressor.experimental.benchmark)": [[203, "neural_compressor.experimental.benchmark.get_physical_ids"]], "get_threads() (in module neural_compressor.experimental.benchmark)": [[203, "neural_compressor.experimental.benchmark.get_threads"]], "get_threads_per_core() (in module neural_compressor.experimental.benchmark)": [[203, "neural_compressor.experimental.benchmark.get_threads_per_core"]], "metric (neural_compressor.experimental.benchmark.benchmark property)": [[203, "neural_compressor.experimental.benchmark.Benchmark.metric"]], "model (neural_compressor.experimental.benchmark.benchmark property)": [[203, "neural_compressor.experimental.benchmark.Benchmark.model"]], "neural_compressor.experimental.benchmark": [[203, "module-neural_compressor.experimental.benchmark"]], "postprocess (neural_compressor.experimental.benchmark.benchmark property)": [[203, "neural_compressor.experimental.benchmark.Benchmark.postprocess"]], "results (neural_compressor.experimental.benchmark.benchmark property)": [[203, "neural_compressor.experimental.benchmark.Benchmark.results"]], "run_instance() (neural_compressor.experimental.benchmark.benchmark method)": [[203, "neural_compressor.experimental.benchmark.Benchmark.run_instance"]], "set_all_env_var() (in module neural_compressor.experimental.benchmark)": [[203, "neural_compressor.experimental.benchmark.set_all_env_var"]], "set_env_var() (in module neural_compressor.experimental.benchmark)": [[203, "neural_compressor.experimental.benchmark.set_env_var"]], "summary_benchmark() (neural_compressor.experimental.benchmark.benchmark method)": [[203, "neural_compressor.experimental.benchmark.Benchmark.summary_benchmark"]], "criterions (class in neural_compressor.experimental.common.criterion)": [[204, "neural_compressor.experimental.common.criterion.Criterions"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[204, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationframework (class in neural_compressor.experimental.common.criterion)": [[204, "neural_compressor.experimental.common.criterion.KnowledgeDistillationFramework"]], "knowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[204, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss"]], "kullbackleiblerdivergence() (neural_compressor.experimental.common.criterion.pytorchknowledgedistillationloss method)": [[204, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss.KullbackLeiblerDivergence"]], "kullbackleiblerdivergence() (neural_compressor.experimental.common.criterion.pytorchselfknowledgedistillationloss method)": [[204, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss.KullbackLeiblerDivergence"]], "l2divergence() (neural_compressor.experimental.common.criterion.pytorchselfknowledgedistillationloss method)": [[204, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss.L2Divergence"]], "pytorchcriterions (class in neural_compressor.experimental.common.criterion)": [[204, "neural_compressor.experimental.common.criterion.PyTorchCriterions"]], "pytorchcrossentropyloss (class in neural_compressor.experimental.common.criterion)": [[204, "neural_compressor.experimental.common.criterion.PyTorchCrossEntropyLoss"]], "pytorchintermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[204, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss"]], "pytorchintermediatelayersknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[204, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"]], "pytorchknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[204, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss"]], "pytorchknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[204, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLossWrapper"]], "pytorchselfknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[204, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss"]], "pytorchselfknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[204, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLossWrapper"]], "selfknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[204, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss"]], "softcrossentropy() (neural_compressor.experimental.common.criterion.pytorchknowledgedistillationloss method)": [[204, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss.SoftCrossEntropy"]], "softcrossentropy() (neural_compressor.experimental.common.criterion.pytorchselfknowledgedistillationloss method)": [[204, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss.SoftCrossEntropy"]], "softcrossentropy() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationloss method)": [[204, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss.SoftCrossEntropy"]], "tensorflowcrossentropyloss (class in neural_compressor.experimental.common.criterion)": [[204, "neural_compressor.experimental.common.criterion.TensorFlowCrossEntropyLoss"]], "tensorflowsparsecategoricalcrossentropy (class in neural_compressor.experimental.common.criterion)": [[204, "neural_compressor.experimental.common.criterion.TensorFlowSparseCategoricalCrossentropy"]], "tensorflowcriterions (class in neural_compressor.experimental.common.criterion)": [[204, "neural_compressor.experimental.common.criterion.TensorflowCriterions"]], "tensorflowknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[204, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss"]], "tensorflowknowledgedistillationlossexternal (class in neural_compressor.experimental.common.criterion)": [[204, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal"]], "tensorflowknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[204, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossWrapper"]], "clear_features() (neural_compressor.experimental.common.criterion.intermediatelayersknowledgedistillationloss method)": [[204, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss.clear_features"]], "criterion_registry() (in module neural_compressor.experimental.common.criterion)": [[204, "neural_compressor.experimental.common.criterion.criterion_registry"]], "init_feature_matcher() (neural_compressor.experimental.common.criterion.intermediatelayersknowledgedistillationloss method)": [[204, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss.init_feature_matcher"]], "init_feature_matcher() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[204, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.init_feature_matcher"]], "init_loss_funcs() (neural_compressor.experimental.common.criterion.intermediatelayersknowledgedistillationloss method)": [[204, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss.init_loss_funcs"]], "init_loss_funcs() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[204, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.init_loss_funcs"]], "init_loss_funcs() (neural_compressor.experimental.common.criterion.pytorchselfknowledgedistillationloss method)": [[204, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss.init_loss_funcs"]], "init_loss_funcs() (neural_compressor.experimental.common.criterion.selfknowledgedistillationloss method)": [[204, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss.init_loss_funcs"]], "loss_cal() (neural_compressor.experimental.common.criterion.intermediatelayersknowledgedistillationloss method)": [[204, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss.loss_cal"]], "loss_cal() (neural_compressor.experimental.common.criterion.knowledgedistillationloss method)": [[204, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss.loss_cal"]], "loss_cal() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[204, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.loss_cal"]], "loss_cal() (neural_compressor.experimental.common.criterion.pytorchselfknowledgedistillationloss method)": [[204, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss.loss_cal"]], "loss_cal() (neural_compressor.experimental.common.criterion.selfknowledgedistillationloss method)": [[204, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss.loss_cal"]], "loss_cal_sloss() (neural_compressor.experimental.common.criterion.intermediatelayersknowledgedistillationloss method)": [[204, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss.loss_cal_sloss"]], "loss_cal_sloss() (neural_compressor.experimental.common.criterion.knowledgedistillationloss method)": [[204, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss.loss_cal_sloss"]], "loss_cal_sloss() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[204, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.loss_cal_sloss"]], "loss_cal_sloss() (neural_compressor.experimental.common.criterion.selfknowledgedistillationloss method)": [[204, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss.loss_cal_sloss"]], "neural_compressor.experimental.common.criterion": [[204, "module-neural_compressor.experimental.common.criterion"]], "register() (neural_compressor.experimental.common.criterion.criterions method)": [[204, "neural_compressor.experimental.common.criterion.Criterions.register"]], "register_hooks_for_models() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[204, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.register_hooks_for_models"]], "remove_all_hooks() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[204, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.remove_all_hooks"]], "student_model (neural_compressor.experimental.common.criterion.knowledgedistillationframework property)": [[204, "neural_compressor.experimental.common.criterion.KnowledgeDistillationFramework.student_model"]], "student_targets_loss_cal() (neural_compressor.experimental.common.criterion.knowledgedistillationloss method)": [[204, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss.student_targets_loss_cal"]], "student_targets_loss_cal() (neural_compressor.experimental.common.criterion.pytorchknowledgedistillationloss method)": [[204, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss.student_targets_loss_cal"]], "student_targets_loss_cal() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationloss method)": [[204, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss.student_targets_loss_cal"]], "student_targets_loss_cal() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationlossexternal method)": [[204, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal.student_targets_loss_cal"]], "teacher_model (neural_compressor.experimental.common.criterion.knowledgedistillationframework property)": [[204, "neural_compressor.experimental.common.criterion.KnowledgeDistillationFramework.teacher_model"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.intermediatelayersknowledgedistillationloss method)": [[204, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.knowledgedistillationloss method)": [[204, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.pytorchintermediatelayersknowledgedistillationloss method)": [[204, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.pytorchknowledgedistillationloss method)": [[204, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.pytorchselfknowledgedistillationloss method)": [[204, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.selfknowledgedistillationloss method)": [[204, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationloss method)": [[204, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss.teacher_model_forward"]], "teacher_model_forward() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationlossexternal method)": [[204, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal.teacher_model_forward"]], "teacher_student_loss_cal() (neural_compressor.experimental.common.criterion.knowledgedistillationloss method)": [[204, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss.teacher_student_loss_cal"]], "teacher_student_loss_cal() (neural_compressor.experimental.common.criterion.pytorchknowledgedistillationloss method)": [[204, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss.teacher_student_loss_cal"]], "teacher_student_loss_cal() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationloss method)": [[204, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss.teacher_student_loss_cal"]], "teacher_student_loss_cal() (neural_compressor.experimental.common.criterion.tensorflowknowledgedistillationlossexternal method)": [[204, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal.teacher_student_loss_cal"]], "dataloader (class in neural_compressor.experimental.common.dataloader)": [[205, "neural_compressor.experimental.common.dataloader.DataLoader"]], "neural_compressor.experimental.common.dataloader": [[205, "module-neural_compressor.experimental.common.dataloader"]], "dataloader (class in neural_compressor.experimental.common)": [[206, "neural_compressor.experimental.common.DataLoader"]], "metric (class in neural_compressor.experimental.common)": [[206, "neural_compressor.experimental.common.Metric"]], "model (class in neural_compressor.experimental.common)": [[206, "neural_compressor.experimental.common.Model"]], "postprocess (class in neural_compressor.experimental.common)": [[206, "neural_compressor.experimental.common.Postprocess"]], "neural_compressor.experimental.common": [[206, "module-neural_compressor.experimental.common"]], "metric (class in neural_compressor.experimental.common.metric)": [[207, "neural_compressor.experimental.common.metric.Metric"]], "neural_compressor.experimental.common.metric": [[207, "module-neural_compressor.experimental.common.metric"]], "model (class in neural_compressor.experimental.common.model)": [[208, "neural_compressor.experimental.common.model.Model"]], "neural_compressor.experimental.common.model": [[208, "module-neural_compressor.experimental.common.model"]], "set_backend() (in module neural_compressor.experimental.common.model)": [[208, "neural_compressor.experimental.common.model.set_backend"]], "optimizers (class in neural_compressor.experimental.common.optimizer)": [[209, "neural_compressor.experimental.common.optimizer.Optimizers"]], "pytorchoptimizers (class in neural_compressor.experimental.common.optimizer)": [[209, "neural_compressor.experimental.common.optimizer.PyTorchOptimizers"]], "pytorchsgd (class in neural_compressor.experimental.common.optimizer)": [[209, "neural_compressor.experimental.common.optimizer.PyTorchSGD"]], "tensorflowadam (class in neural_compressor.experimental.common.optimizer)": [[209, "neural_compressor.experimental.common.optimizer.TensorFlowAdam"]], "tensorflowadamw (class in neural_compressor.experimental.common.optimizer)": [[209, "neural_compressor.experimental.common.optimizer.TensorFlowAdamW"]], "tensorflowsgd (class in neural_compressor.experimental.common.optimizer)": [[209, "neural_compressor.experimental.common.optimizer.TensorFlowSGD"]], "tensorflowoptimizers (class in neural_compressor.experimental.common.optimizer)": [[209, "neural_compressor.experimental.common.optimizer.TensorflowOptimizers"]], "neural_compressor.experimental.common.optimizer": [[209, "module-neural_compressor.experimental.common.optimizer"]], "optimizer_registry() (in module neural_compressor.experimental.common.optimizer)": [[209, "neural_compressor.experimental.common.optimizer.optimizer_registry"]], "register() (neural_compressor.experimental.common.optimizer.optimizers method)": [[209, "neural_compressor.experimental.common.optimizer.Optimizers.register"]], "postprocess (class in neural_compressor.experimental.common.postprocess)": [[210, "neural_compressor.experimental.common.postprocess.Postprocess"]], "neural_compressor.experimental.common.postprocess": [[210, "module-neural_compressor.experimental.common.postprocess"]], "get_activation() (in module neural_compressor.experimental.common.torch_utils)": [[211, "neural_compressor.experimental.common.torch_utils.get_activation"]], "neural_compressor.experimental.common.torch_utils": [[211, "module-neural_compressor.experimental.common.torch_utils"]], "record_output() (in module neural_compressor.experimental.common.torch_utils)": [[211, "neural_compressor.experimental.common.torch_utils.record_output"]], "component (class in neural_compressor.experimental.component)": [[212, "neural_compressor.experimental.component.Component"]], "eval_dataloader (neural_compressor.experimental.component.component property)": [[212, "neural_compressor.experimental.component.Component.eval_dataloader"]], "eval_func (neural_compressor.experimental.component.component property)": [[212, "neural_compressor.experimental.component.Component.eval_func"]], "execute() (neural_compressor.experimental.component.component method)": [[212, "neural_compressor.experimental.component.Component.execute"]], "model (neural_compressor.experimental.component.component property)": [[212, "neural_compressor.experimental.component.Component.model"]], "neural_compressor.experimental.component": [[212, "module-neural_compressor.experimental.component"]], "on_after_compute_loss() (neural_compressor.experimental.component.component method)": [[212, "neural_compressor.experimental.component.Component.on_after_compute_loss"]], "on_after_eval() (neural_compressor.experimental.component.component method)": [[212, "neural_compressor.experimental.component.Component.on_after_eval"]], "on_after_optimizer_step() (neural_compressor.experimental.component.component method)": [[212, "neural_compressor.experimental.component.Component.on_after_optimizer_step"]], "on_batch_begin() (neural_compressor.experimental.component.component method)": [[212, "neural_compressor.experimental.component.Component.on_batch_begin"]], "on_batch_end() (neural_compressor.experimental.component.component method)": [[212, "neural_compressor.experimental.component.Component.on_batch_end"]], "on_before_eval() (neural_compressor.experimental.component.component method)": [[212, "neural_compressor.experimental.component.Component.on_before_eval"]], "on_before_optimizer_step() (neural_compressor.experimental.component.component method)": [[212, "neural_compressor.experimental.component.Component.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.experimental.component.component method)": [[212, "neural_compressor.experimental.component.Component.on_epoch_begin"]], "on_epoch_end() (neural_compressor.experimental.component.component method)": [[212, "neural_compressor.experimental.component.Component.on_epoch_end"]], "on_post_grad() (neural_compressor.experimental.component.component method)": [[212, "neural_compressor.experimental.component.Component.on_post_grad"]], "on_step_begin() (neural_compressor.experimental.component.component method)": [[212, "neural_compressor.experimental.component.Component.on_step_begin"]], "on_step_end() (neural_compressor.experimental.component.component method)": [[212, "neural_compressor.experimental.component.Component.on_step_end"]], "on_train_begin() (neural_compressor.experimental.component.component method)": [[212, "neural_compressor.experimental.component.Component.on_train_begin"]], "on_train_end() (neural_compressor.experimental.component.component method)": [[212, "neural_compressor.experimental.component.Component.on_train_end"]], "post_epoch_end() (neural_compressor.experimental.component.component method)": [[212, "neural_compressor.experimental.component.Component.post_epoch_end"]], "post_process() (neural_compressor.experimental.component.component method)": [[212, "neural_compressor.experimental.component.Component.post_process"]], "pre_epoch_begin() (neural_compressor.experimental.component.component method)": [[212, "neural_compressor.experimental.component.Component.pre_epoch_begin"]], "pre_process() (neural_compressor.experimental.component.component method)": [[212, "neural_compressor.experimental.component.Component.pre_process"]], "prepare() (neural_compressor.experimental.component.component method)": [[212, "neural_compressor.experimental.component.Component.prepare"]], "prepare_qat() (neural_compressor.experimental.component.component method)": [[212, "neural_compressor.experimental.component.Component.prepare_qat"]], "register_hook() (neural_compressor.experimental.component.component method)": [[212, "neural_compressor.experimental.component.Component.register_hook"]], "train_dataloader (neural_compressor.experimental.component.component property)": [[212, "neural_compressor.experimental.component.Component.train_dataloader"]], "train_func (neural_compressor.experimental.component.component property)": [[212, "neural_compressor.experimental.component.Component.train_func"]], "neural_compressor.experimental.compression": [[213, "module-neural_compressor.experimental.compression"]], "prepare_pruning() (in module neural_compressor.experimental.compression)": [[213, "neural_compressor.experimental.compression.prepare_pruning"]], "neural_compressor.experimental.compression.pruning": [[214, "module-neural_compressor.experimental.compression.pruning"]], "prepare_pruning() (in module neural_compressor.experimental.compression.pruning)": [[214, "neural_compressor.experimental.compression.pruning.prepare_pruning"]], "save() (in module neural_compressor.experimental.compression.pruning)": [[214, "neural_compressor.experimental.compression.pruning.save"]], "basedataloader (class in neural_compressor.experimental.data.dataloaders.base_dataloader)": [[215, "neural_compressor.experimental.data.dataloaders.base_dataloader.BaseDataLoader"]], "batch() (neural_compressor.experimental.data.dataloaders.base_dataloader.basedataloader method)": [[215, "neural_compressor.experimental.data.dataloaders.base_dataloader.BaseDataLoader.batch"]], "batch_size (neural_compressor.experimental.data.dataloaders.base_dataloader.basedataloader property)": [[215, "neural_compressor.experimental.data.dataloaders.base_dataloader.BaseDataLoader.batch_size"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[215, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[216, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "defaultdataloader (class in neural_compressor.experimental.data.dataloaders.default_dataloader)": [[217, "neural_compressor.experimental.data.dataloaders.default_dataloader.DefaultDataLoader"]], "batch() (neural_compressor.experimental.data.dataloaders.default_dataloader.defaultdataloader method)": [[217, "neural_compressor.experimental.data.dataloaders.default_dataloader.DefaultDataLoader.batch"]], "dataloader (neural_compressor.experimental.data.dataloaders.default_dataloader.defaultdataloader property)": [[217, "neural_compressor.experimental.data.dataloaders.default_dataloader.DefaultDataLoader.dataloader"]], "default_collate() (in module neural_compressor.experimental.data.dataloaders.default_dataloader)": [[217, "neural_compressor.experimental.data.dataloaders.default_dataloader.default_collate"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[217, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "fetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[218, "neural_compressor.experimental.data.dataloaders.fetcher.Fetcher"]], "indexfetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[218, "neural_compressor.experimental.data.dataloaders.fetcher.IndexFetcher"]], "iterablefetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[218, "neural_compressor.experimental.data.dataloaders.fetcher.IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[218, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[219, "module-neural_compressor.experimental.data.dataloaders"]], "mxnetdataloader (class in neural_compressor.experimental.data.dataloaders.mxnet_dataloader)": [[220, "neural_compressor.experimental.data.dataloaders.mxnet_dataloader.MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[220, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "onnxrtbertdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[221, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTBertDataLoader"]], "onnxrtdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[221, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[221, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "pytorchdataloader (class in neural_compressor.experimental.data.dataloaders.pytorch_dataloader)": [[222, "neural_compressor.experimental.data.dataloaders.pytorch_dataloader.PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[222, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "batchsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[223, "neural_compressor.experimental.data.dataloaders.sampler.BatchSampler"]], "iterablesampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[223, "neural_compressor.experimental.data.dataloaders.sampler.IterableSampler"]], "sampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[223, "neural_compressor.experimental.data.dataloaders.sampler.Sampler"]], "sequentialsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[223, "neural_compressor.experimental.data.dataloaders.sampler.SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.sampler": [[223, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "tfdatadataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[224, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TFDataDataLoader"]], "tensorflowbertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[224, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowBertDataLoader"]], "tensorflowdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[224, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowDataLoader"]], "tensorflowmodelzoobertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[224, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowModelZooBertDataLoader"]], "batch() (neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.tfdatadataloader method)": [[224, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TFDataDataLoader.batch"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[224, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "inputfeatures (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[225, "neural_compressor.experimental.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[225, "neural_compressor.experimental.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[225, "neural_compressor.experimental.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[225, "neural_compressor.experimental.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[225, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[225, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[225, "neural_compressor.experimental.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[225, "neural_compressor.experimental.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[225, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "to_json_string() (neural_compressor.experimental.data.datasets.bert_dataset.inputfeatures method)": [[225, "neural_compressor.experimental.data.datasets.bert_dataset.InputFeatures.to_json_string"]], "coconpy (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[226, "neural_compressor.experimental.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[226, "neural_compressor.experimental.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[226, "neural_compressor.experimental.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[226, "neural_compressor.experimental.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[226, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[227, "neural_compressor.experimental.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[227, "neural_compressor.experimental.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.experimental.data.datasets.dataset)": [[227, "neural_compressor.experimental.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.experimental.data.datasets.dataset)": [[227, "neural_compressor.experimental.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[227, "neural_compressor.experimental.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[227, "neural_compressor.experimental.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.experimental.data.datasets.dataset)": [[227, "neural_compressor.experimental.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.experimental.data.datasets.dataset)": [[227, "neural_compressor.experimental.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[227, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[227, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[227, "neural_compressor.experimental.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[227, "neural_compressor.experimental.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[227, "neural_compressor.experimental.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[227, "neural_compressor.experimental.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[227, "neural_compressor.experimental.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[227, "neural_compressor.experimental.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[227, "neural_compressor.experimental.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[227, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[227, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[227, "neural_compressor.experimental.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[227, "neural_compressor.experimental.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.experimental.data.datasets.dataset)": [[227, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.datasets.dataset)": [[227, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflowcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[227, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[227, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[227, "neural_compressor.experimental.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[227, "neural_compressor.experimental.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[227, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageFolder"]], "tensorflowimagerecord (class in neural_compressor.experimental.data.datasets.dataset)": [[227, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[227, "neural_compressor.experimental.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.experimental.data.datasets.dataset)": [[227, "neural_compressor.experimental.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.experimental.data.datasets.dataset)": [[227, "neural_compressor.experimental.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.experimental.data.datasets.dataset)": [[227, "neural_compressor.experimental.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.experimental.data.datasets.dataset)": [[227, "neural_compressor.experimental.data.datasets.dataset.check_integrity"]], "class_to_idx (neural_compressor.experimental.data.datasets.dataset.mnist property)": [[227, "neural_compressor.experimental.data.datasets.dataset.MNIST.class_to_idx"]], "dataset_registry() (in module neural_compressor.experimental.data.datasets.dataset)": [[227, "neural_compressor.experimental.data.datasets.dataset.dataset_registry"]], "download() (neural_compressor.experimental.data.datasets.dataset.cifar10 method)": [[227, "neural_compressor.experimental.data.datasets.dataset.CIFAR10.download"]], "download() (neural_compressor.experimental.data.datasets.dataset.mnist method)": [[227, "neural_compressor.experimental.data.datasets.dataset.MNIST.download"]], "download_url() (in module neural_compressor.experimental.data.datasets.dataset)": [[227, "neural_compressor.experimental.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.experimental.data.datasets.dataset)": [[227, "neural_compressor.experimental.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.experimental.data.datasets.dataset)": [[227, "neural_compressor.experimental.data.datasets.dataset.gen_bar_updater"]], "load_meta() (neural_compressor.experimental.data.datasets.dataset.cifar10 method)": [[227, "neural_compressor.experimental.data.datasets.dataset.CIFAR10.load_meta"]], "neural_compressor.experimental.data.datasets.dataset": [[227, "module-neural_compressor.experimental.data.datasets.dataset"]], "read_data() (neural_compressor.experimental.data.datasets.dataset.fashionmnist method)": [[227, "neural_compressor.experimental.data.datasets.dataset.FashionMNIST.read_data"]], "read_data() (neural_compressor.experimental.data.datasets.dataset.mnist method)": [[227, "neural_compressor.experimental.data.datasets.dataset.MNIST.read_data"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset)": [[228, "neural_compressor.experimental.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[228, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[229, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[229, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[229, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[230, "neural_compressor.experimental.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[230, "neural_compressor.experimental.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[230, "neural_compressor.experimental.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[230, "neural_compressor.experimental.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[230, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[230, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[230, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "dataset (class in neural_compressor.experimental.data.datasets)": [[231, "neural_compressor.experimental.data.datasets.Dataset"]], "datasets (class in neural_compressor.experimental.data.datasets)": [[231, "neural_compressor.experimental.data.datasets.Datasets"]], "iterabledataset (class in neural_compressor.experimental.data.datasets)": [[231, "neural_compressor.experimental.data.datasets.IterableDataset"]], "dataset_registry() (in module neural_compressor.experimental.data.datasets)": [[231, "neural_compressor.experimental.data.datasets.dataset_registry"]], "neural_compressor.experimental.data.datasets": [[231, "module-neural_compressor.experimental.data.datasets"]], "styletransferdataset (class in neural_compressor.experimental.data.datasets.style_transfer_dataset)": [[232, "neural_compressor.experimental.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[232, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[233, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[233, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.coco_filter": [[233, "module-neural_compressor.experimental.data.filters.coco_filter"]], "filters (class in neural_compressor.experimental.data.filters.filter)": [[234, "neural_compressor.experimental.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.experimental.data.filters.filter)": [[234, "neural_compressor.experimental.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.experimental.data.filters.filter)": [[234, "neural_compressor.experimental.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.experimental.data.filters.filter)": [[234, "neural_compressor.experimental.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.experimental.data.filters.filter)": [[234, "neural_compressor.experimental.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.experimental.data.filters.filter)": [[234, "neural_compressor.experimental.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.experimental.data.filters.filter)": [[234, "neural_compressor.experimental.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.experimental.data.filters.filter)": [[234, "neural_compressor.experimental.data.filters.filter.filter_registry"]], "neural_compressor.experimental.data.filters.filter": [[234, "module-neural_compressor.experimental.data.filters.filter"]], "filters (class in neural_compressor.experimental.data.filters)": [[235, "neural_compressor.experimental.data.filters.FILTERS"]], "filter (class in neural_compressor.experimental.data.filters)": [[235, "neural_compressor.experimental.data.filters.Filter"]], "filter_registry() (in module neural_compressor.experimental.data.filters)": [[235, "neural_compressor.experimental.data.filters.filter_registry"]], "neural_compressor.experimental.data.filters": [[235, "module-neural_compressor.experimental.data.filters"]], "basetransform (class in neural_compressor.experimental.data)": [[236, "neural_compressor.experimental.data.BaseTransform"]], "dataset (class in neural_compressor.experimental.data)": [[236, "neural_compressor.experimental.data.Dataset"]], "datasets (class in neural_compressor.experimental.data)": [[236, "neural_compressor.experimental.data.Datasets"]], "filters (class in neural_compressor.experimental.data)": [[236, "neural_compressor.experimental.data.FILTERS"]], "filter (class in neural_compressor.experimental.data)": [[236, "neural_compressor.experimental.data.Filter"]], "iterabledataset (class in neural_compressor.experimental.data)": [[236, "neural_compressor.experimental.data.IterableDataset"]], "transforms (class in neural_compressor.experimental.data)": [[236, "neural_compressor.experimental.data.TRANSFORMS"]], "dataset_registry() (in module neural_compressor.experimental.data)": [[236, "neural_compressor.experimental.data.dataset_registry"]], "filter_registry() (in module neural_compressor.experimental.data)": [[236, "neural_compressor.experimental.data.filter_registry"]], "neural_compressor.experimental.data": [[236, "module-neural_compressor.experimental.data"]], "register() (neural_compressor.experimental.data.transforms method)": [[236, "neural_compressor.experimental.data.TRANSFORMS.register"]], "transform_registry() (in module neural_compressor.experimental.data)": [[236, "neural_compressor.experimental.data.transform_registry"]], "bilinearimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[237, "neural_compressor.experimental.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[237, "neural_compressor.experimental.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[237, "neural_compressor.experimental.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[237, "neural_compressor.experimental.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[237, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[237, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[237, "neural_compressor.experimental.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[237, "neural_compressor.experimental.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[237, "neural_compressor.experimental.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[237, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "basetransform (class in neural_compressor.experimental.data.transforms)": [[238, "neural_compressor.experimental.data.transforms.BaseTransform"]], "transforms (class in neural_compressor.experimental.data.transforms)": [[238, "neural_compressor.experimental.data.transforms.TRANSFORMS"]], "neural_compressor.experimental.data.transforms": [[238, "module-neural_compressor.experimental.data.transforms"]], "register() (neural_compressor.experimental.data.transforms.transforms method)": [[238, "neural_compressor.experimental.data.transforms.TRANSFORMS.register"]], "transform_registry() (in module neural_compressor.experimental.data.transforms)": [[238, "neural_compressor.experimental.data.transforms.transform_registry"]], "basictokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[239, "neural_compressor.experimental.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[239, "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[239, "neural_compressor.experimental.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[239, "neural_compressor.experimental.data.transforms.tokenization.convert_by_vocab"]], "convert_ids_to_tokens() (neural_compressor.experimental.data.transforms.tokenization.fulltokenizer method)": [[239, "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer.convert_ids_to_tokens"]], "convert_to_unicode() (in module neural_compressor.experimental.data.transforms.tokenization)": [[239, "neural_compressor.experimental.data.transforms.tokenization.convert_to_unicode"]], "convert_tokens_to_ids() (neural_compressor.experimental.data.transforms.tokenization.fulltokenizer method)": [[239, "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer.convert_tokens_to_ids"]], "load_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[239, "neural_compressor.experimental.data.transforms.tokenization.load_vocab"]], "neural_compressor.experimental.data.transforms.tokenization": [[239, "module-neural_compressor.experimental.data.transforms.tokenization"]], "tokenize() (neural_compressor.experimental.data.transforms.tokenization.basictokenizer method)": [[239, "neural_compressor.experimental.data.transforms.tokenization.BasicTokenizer.tokenize"]], "tokenize() (neural_compressor.experimental.data.transforms.tokenization.fulltokenizer method)": [[239, "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer.tokenize"]], "tokenize() (neural_compressor.experimental.data.transforms.tokenization.wordpiecetokenizer method)": [[239, "neural_compressor.experimental.data.transforms.tokenization.WordpieceTokenizer.tokenize"]], "whitespace_tokenize() (in module neural_compressor.experimental.data.transforms.tokenization)": [[239, "neural_compressor.experimental.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.TRANSFORMS"], [240, "neural_compressor.experimental.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.get_final_text"]], "get_params() (neural_compressor.experimental.data.transforms.transform.randomresizedcroptftransform method)": [[240, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTFTransform.get_params"]], "get_params() (neural_compressor.experimental.data.transforms.transform.randomresizedcroptransform method)": [[240, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTransform.get_params"]], "get_postprocess_result() (neural_compressor.experimental.data.transforms.transform.tfsquadv1posttransform method)": [[240, "neural_compressor.experimental.data.transforms.transform.TFSquadV1PostTransform.get_postprocess_result"]], "get_torchvision_map() (in module neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.get_torchvision_map"]], "neural_compressor.experimental.data.transforms.transform": [[240, "module-neural_compressor.experimental.data.transforms.transform"]], "process_result() (neural_compressor.experimental.data.transforms.transform.tfsquadv1posttransform method)": [[240, "neural_compressor.experimental.data.transforms.transform.TFSquadV1PostTransform.process_result"]], "read_squad_examples() (in module neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.read_squad_examples"]], "register() (neural_compressor.experimental.data.transforms.transform.transforms method)": [[240, "neural_compressor.experimental.data.transforms.transform.TRANSFORMS.register"]], "transform_registry() (in module neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.transform_registry"]], "distillation (class in neural_compressor.experimental.distillation)": [[241, "neural_compressor.experimental.distillation.Distillation"]], "_epoch_ran (neural_compressor.experimental.distillation.distillation attribute)": [[241, "neural_compressor.experimental.distillation.Distillation._epoch_ran"]], "best_model (neural_compressor.experimental.distillation.distillation attribute)": [[241, "neural_compressor.experimental.distillation.Distillation.best_model"]], "best_score (neural_compressor.experimental.distillation.distillation attribute)": [[241, "neural_compressor.experimental.distillation.Distillation.best_score"]], "create_criterion() (neural_compressor.experimental.distillation.distillation method)": [[241, "neural_compressor.experimental.distillation.Distillation.create_criterion"]], "create_optimizer() (neural_compressor.experimental.distillation.distillation method)": [[241, "neural_compressor.experimental.distillation.Distillation.create_optimizer"]], "criterion (neural_compressor.experimental.distillation.distillation property)": [[241, "neural_compressor.experimental.distillation.Distillation.criterion"]], "eval_frequency (neural_compressor.experimental.distillation.distillation attribute)": [[241, "neural_compressor.experimental.distillation.Distillation.eval_frequency"]], "evaluation_distributed (neural_compressor.experimental.distillation.distillation property)": [[241, "neural_compressor.experimental.distillation.Distillation.evaluation_distributed"]], "execute() (neural_compressor.experimental.distillation.distillation method)": [[241, "neural_compressor.experimental.distillation.Distillation.execute"]], "generate_hooks() (neural_compressor.experimental.distillation.distillation method)": [[241, "neural_compressor.experimental.distillation.Distillation.generate_hooks"]], "init_train_cfg() (neural_compressor.experimental.distillation.distillation method)": [[241, "neural_compressor.experimental.distillation.Distillation.init_train_cfg"]], "neural_compressor.experimental.distillation": [[241, "module-neural_compressor.experimental.distillation"]], "on_post_forward() (neural_compressor.experimental.distillation.distillation method)": [[241, "neural_compressor.experimental.distillation.Distillation.on_post_forward"]], "optimizer (neural_compressor.experimental.distillation.distillation property)": [[241, "neural_compressor.experimental.distillation.Distillation.optimizer"]], "pre_process() (neural_compressor.experimental.distillation.distillation method)": [[241, "neural_compressor.experimental.distillation.Distillation.pre_process"]], "prepare() (neural_compressor.experimental.distillation.distillation method)": [[241, "neural_compressor.experimental.distillation.Distillation.prepare"]], "student_model (neural_compressor.experimental.distillation.distillation property)": [[241, "neural_compressor.experimental.distillation.Distillation.student_model"]], "teacher_model (neural_compressor.experimental.distillation.distillation property)": [[241, "neural_compressor.experimental.distillation.Distillation.teacher_model"]], "train_cfg (neural_compressor.experimental.distillation.distillation property)": [[241, "neural_compressor.experimental.distillation.Distillation.train_cfg"]], "train_distributed (neural_compressor.experimental.distillation.distillation property)": [[241, "neural_compressor.experimental.distillation.Distillation.train_distributed"]], "neural_compressor.experimental.export": [[242, "module-neural_compressor.experimental.export"]], "onnx_qlinear_to_qdq() (in module neural_compressor.experimental.export)": [[242, "neural_compressor.experimental.export.onnx_qlinear_to_qdq"]], "tf_to_fp32_onnx() (in module neural_compressor.experimental.export)": [[242, "neural_compressor.experimental.export.tf_to_fp32_onnx"]], "tf_to_int8_onnx() (in module neural_compressor.experimental.export)": [[242, "neural_compressor.experimental.export.tf_to_int8_onnx"]], "torch_to_fp32_onnx() (in module neural_compressor.experimental.export)": [[242, "neural_compressor.experimental.export.torch_to_fp32_onnx"]], "torch_to_int8_onnx() (in module neural_compressor.experimental.export)": [[242, "neural_compressor.experimental.export.torch_to_int8_onnx"]], "check_model() (in module neural_compressor.experimental.export.qlinear2qdq)": [[243, "neural_compressor.experimental.export.qlinear2qdq.check_model"]], "neural_compressor.experimental.export.qlinear2qdq": [[243, "module-neural_compressor.experimental.export.qlinear2qdq"]], "onnx_qlinear_to_qdq() (in module neural_compressor.experimental.export.qlinear2qdq)": [[243, "neural_compressor.experimental.export.qlinear2qdq.onnx_qlinear_to_qdq"]], "neural_compressor.experimental.export.tf2onnx": [[244, "module-neural_compressor.experimental.export.tf2onnx"]], "tf_to_fp32_onnx() (in module neural_compressor.experimental.export.tf2onnx)": [[244, "neural_compressor.experimental.export.tf2onnx.tf_to_fp32_onnx"]], "tf_to_int8_onnx() (in module neural_compressor.experimental.export.tf2onnx)": [[244, "neural_compressor.experimental.export.tf2onnx.tf_to_int8_onnx"]], "build_scale_mapping() (in module neural_compressor.experimental.export.torch2onnx)": [[245, "neural_compressor.experimental.export.torch2onnx.build_scale_mapping"]], "get_node_mapping() (in module neural_compressor.experimental.export.torch2onnx)": [[245, "neural_compressor.experimental.export.torch2onnx.get_node_mapping"]], "get_quantizable_onnx_ops() (in module neural_compressor.experimental.export.torch2onnx)": [[245, "neural_compressor.experimental.export.torch2onnx.get_quantizable_onnx_ops"]], "neural_compressor.experimental.export.torch2onnx": [[245, "module-neural_compressor.experimental.export.torch2onnx"]], "qdq_fp32_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[245, "neural_compressor.experimental.export.torch2onnx.qdq_fp32_bias"]], "qdq_fp32_bias_qdq() (in module neural_compressor.experimental.export.torch2onnx)": [[245, "neural_compressor.experimental.export.torch2onnx.qdq_fp32_bias_qdq"]], "qdq_int32_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[245, "neural_compressor.experimental.export.torch2onnx.qdq_int32_bias"]], "recalculate_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[245, "neural_compressor.experimental.export.torch2onnx.recalculate_bias"]], "remove_nodes_by_name() (in module neural_compressor.experimental.export.torch2onnx)": [[245, "neural_compressor.experimental.export.torch2onnx.remove_nodes_by_name"]], "set_data_type() (in module neural_compressor.experimental.export.torch2onnx)": [[245, "neural_compressor.experimental.export.torch2onnx.set_data_type"]], "set_scale_info() (in module neural_compressor.experimental.export.torch2onnx)": [[245, "neural_compressor.experimental.export.torch2onnx.set_scale_info"]], "sub_graph_with_int32_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[245, "neural_compressor.experimental.export.torch2onnx.sub_graph_with_int32_bias"]], "torch_to_fp32_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[245, "neural_compressor.experimental.export.torch2onnx.torch_to_fp32_onnx"]], "torch_to_int8_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[245, "neural_compressor.experimental.export.torch2onnx.torch_to_int8_onnx"]], "update_weight_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[245, "neural_compressor.experimental.export.torch2onnx.update_weight_bias"]], "dummydatareader (class in neural_compressor.experimental.export.utils)": [[246, "neural_compressor.experimental.export.utils.DummyDataReader"]], "onnx2numpy_dtype() (in module neural_compressor.experimental.export.utils)": [[246, "neural_compressor.experimental.export.utils.ONNX2Numpy_dtype"]], "get_next() (neural_compressor.experimental.export.utils.dummydatareader method)": [[246, "neural_compressor.experimental.export.utils.DummyDataReader.get_next"]], "neural_compressor.experimental.export.utils": [[246, "module-neural_compressor.experimental.export.utils"]], "graph_optimization (class in neural_compressor.experimental.graph_optimization)": [[247, "neural_compressor.experimental.graph_optimization.Graph_Optimization"]], "dataset() (neural_compressor.experimental.graph_optimization.graph_optimization method)": [[247, "neural_compressor.experimental.graph_optimization.Graph_Optimization.dataset"]], "eval_dataloader (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[247, "neural_compressor.experimental.graph_optimization.Graph_Optimization.eval_dataloader"]], "eval_func (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[247, "neural_compressor.experimental.graph_optimization.Graph_Optimization.eval_func"]], "input (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[247, "neural_compressor.experimental.graph_optimization.Graph_Optimization.input"]], "metric (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[247, "neural_compressor.experimental.graph_optimization.Graph_Optimization.metric"]], "model (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[247, "neural_compressor.experimental.graph_optimization.Graph_Optimization.model"]], "neural_compressor.experimental.graph_optimization": [[247, "module-neural_compressor.experimental.graph_optimization"]], "output (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[247, "neural_compressor.experimental.graph_optimization.Graph_Optimization.output"]], "postprocess (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[247, "neural_compressor.experimental.graph_optimization.Graph_Optimization.postprocess"]], "precisions (neural_compressor.experimental.graph_optimization.graph_optimization property)": [[247, "neural_compressor.experimental.graph_optimization.Graph_Optimization.precisions"]], "set_config_by_model() (neural_compressor.experimental.graph_optimization.graph_optimization method)": [[247, "neural_compressor.experimental.graph_optimization.Graph_Optimization.set_config_by_model"]], "benchmark (class in neural_compressor.experimental)": [[248, "neural_compressor.experimental.Benchmark"]], "component (class in neural_compressor.experimental)": [[248, "neural_compressor.experimental.Component"]], "distillation (class in neural_compressor.experimental)": [[248, "neural_compressor.experimental.Distillation"]], "graph_optimization (class in neural_compressor.experimental)": [[248, "neural_compressor.experimental.Graph_Optimization"]], "mixedprecision (class in neural_compressor.experimental)": [[248, "neural_compressor.experimental.MixedPrecision"]], "modelconversion (class in neural_compressor.experimental)": [[248, "neural_compressor.experimental.ModelConversion"]], "nas (class in neural_compressor.experimental)": [[248, "neural_compressor.experimental.NAS"]], "pruning (class in neural_compressor.experimental)": [[248, "neural_compressor.experimental.Pruning"]], "quantization (class in neural_compressor.experimental)": [[248, "neural_compressor.experimental.Quantization"]], "_epoch_ran (neural_compressor.experimental.distillation attribute)": [[248, "neural_compressor.experimental.Distillation._epoch_ran"]], "b_dataloader (neural_compressor.experimental.benchmark property)": [[248, "neural_compressor.experimental.Benchmark.b_dataloader"]], "b_func (neural_compressor.experimental.benchmark property)": [[248, "neural_compressor.experimental.Benchmark.b_func"]], "best_model (neural_compressor.experimental.distillation attribute)": [[248, "neural_compressor.experimental.Distillation.best_model"]], "best_score (neural_compressor.experimental.distillation attribute)": [[248, "neural_compressor.experimental.Distillation.best_score"]], "calib_dataloader (neural_compressor.experimental.quantization property)": [[248, "neural_compressor.experimental.Quantization.calib_dataloader"]], "call_one() (neural_compressor.experimental.benchmark method)": [[248, "neural_compressor.experimental.Benchmark.call_one"]], "conf (neural_compressor.experimental.pruning attribute)": [[248, "neural_compressor.experimental.Pruning.conf"]], "config_instance() (neural_compressor.experimental.benchmark method)": [[248, "neural_compressor.experimental.Benchmark.config_instance"]], "create_criterion() (neural_compressor.experimental.distillation method)": [[248, "neural_compressor.experimental.Distillation.create_criterion"]], "create_optimizer() (neural_compressor.experimental.distillation method)": [[248, "neural_compressor.experimental.Distillation.create_optimizer"]], "criterion (neural_compressor.experimental.distillation property)": [[248, "neural_compressor.experimental.Distillation.criterion"]], "dataset() (neural_compressor.experimental.graph_optimization method)": [[248, "neural_compressor.experimental.Graph_Optimization.dataset"]], "dataset() (neural_compressor.experimental.modelconversion method)": [[248, "neural_compressor.experimental.ModelConversion.dataset"]], "dataset() (neural_compressor.experimental.quantization method)": [[248, "neural_compressor.experimental.Quantization.dataset"]], "destination (neural_compressor.experimental.modelconversion property)": [[248, "neural_compressor.experimental.ModelConversion.destination"]], "distributed_execute() (neural_compressor.experimental.quantization method)": [[248, "neural_compressor.experimental.Quantization.distributed_execute"]], "eval_dataloader (neural_compressor.experimental.component property)": [[248, "neural_compressor.experimental.Component.eval_dataloader"]], "eval_dataloader (neural_compressor.experimental.graph_optimization property)": [[248, "neural_compressor.experimental.Graph_Optimization.eval_dataloader"]], "eval_dataloader (neural_compressor.experimental.modelconversion property)": [[248, "neural_compressor.experimental.ModelConversion.eval_dataloader"]], "eval_frequency (neural_compressor.experimental.distillation attribute)": [[248, "neural_compressor.experimental.Distillation.eval_frequency"]], "eval_func (neural_compressor.experimental.component property)": [[248, "neural_compressor.experimental.Component.eval_func"]], "eval_func (neural_compressor.experimental.graph_optimization property)": [[248, "neural_compressor.experimental.Graph_Optimization.eval_func"]], "eval_func (neural_compressor.experimental.modelconversion property)": [[248, "neural_compressor.experimental.ModelConversion.eval_func"]], "evaluation_distributed (neural_compressor.experimental.distillation property)": [[248, "neural_compressor.experimental.Distillation.evaluation_distributed"]], "evaluation_distributed (neural_compressor.experimental.pruning property)": [[248, "neural_compressor.experimental.Pruning.evaluation_distributed"]], "execute() (neural_compressor.experimental.component method)": [[248, "neural_compressor.experimental.Component.execute"]], "execute() (neural_compressor.experimental.distillation method)": [[248, "neural_compressor.experimental.Distillation.execute"]], "execute() (neural_compressor.experimental.pruning method)": [[248, "neural_compressor.experimental.Pruning.execute"]], "execute() (neural_compressor.experimental.quantization method)": [[248, "neural_compressor.experimental.Quantization.execute"]], "generate_hooks() (neural_compressor.experimental.distillation method)": [[248, "neural_compressor.experimental.Distillation.generate_hooks"]], "generate_hooks() (neural_compressor.experimental.pruning method)": [[248, "neural_compressor.experimental.Pruning.generate_hooks"]], "generate_prefix() (neural_compressor.experimental.benchmark method)": [[248, "neural_compressor.experimental.Benchmark.generate_prefix"]], "generate_pruners() (neural_compressor.experimental.pruning method)": [[248, "neural_compressor.experimental.Pruning.generate_pruners"]], "get_sparsity_ratio() (neural_compressor.experimental.pruning method)": [[248, "neural_compressor.experimental.Pruning.get_sparsity_ratio"]], "init_train_cfg() (neural_compressor.experimental.distillation method)": [[248, "neural_compressor.experimental.Distillation.init_train_cfg"]], "input (neural_compressor.experimental.graph_optimization property)": [[248, "neural_compressor.experimental.Graph_Optimization.input"]], "metric (neural_compressor.experimental.benchmark property)": [[248, "neural_compressor.experimental.Benchmark.metric"]], "metric (neural_compressor.experimental.graph_optimization property)": [[248, "neural_compressor.experimental.Graph_Optimization.metric"]], "metric (neural_compressor.experimental.modelconversion property)": [[248, "neural_compressor.experimental.ModelConversion.metric"]], "metric (neural_compressor.experimental.quantization property)": [[248, "neural_compressor.experimental.Quantization.metric"]], "model (neural_compressor.experimental.benchmark property)": [[248, "neural_compressor.experimental.Benchmark.model"]], "model (neural_compressor.experimental.component property)": [[248, "neural_compressor.experimental.Component.model"]], "model (neural_compressor.experimental.graph_optimization property)": [[248, "neural_compressor.experimental.Graph_Optimization.model"]], "model (neural_compressor.experimental.modelconversion property)": [[248, "neural_compressor.experimental.ModelConversion.model"]], "model (neural_compressor.experimental.quantization property)": [[248, "neural_compressor.experimental.Quantization.model"]], "neural_compressor.experimental": [[248, "module-neural_compressor.experimental"]], "objective (neural_compressor.experimental.quantization property)": [[248, "neural_compressor.experimental.Quantization.objective"]], "on_after_compute_loss() (neural_compressor.experimental.component method)": [[248, "neural_compressor.experimental.Component.on_after_compute_loss"]], "on_after_eval() (neural_compressor.experimental.component method)": [[248, "neural_compressor.experimental.Component.on_after_eval"]], "on_after_optimizer_step() (neural_compressor.experimental.component method)": [[248, "neural_compressor.experimental.Component.on_after_optimizer_step"]], "on_batch_begin() (neural_compressor.experimental.component method)": [[248, "neural_compressor.experimental.Component.on_batch_begin"]], "on_batch_end() (neural_compressor.experimental.component method)": [[248, "neural_compressor.experimental.Component.on_batch_end"]], "on_before_eval() (neural_compressor.experimental.component method)": [[248, "neural_compressor.experimental.Component.on_before_eval"]], "on_before_optimizer_step() (neural_compressor.experimental.component method)": [[248, "neural_compressor.experimental.Component.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.experimental.component method)": [[248, "neural_compressor.experimental.Component.on_epoch_begin"]], "on_epoch_end() (neural_compressor.experimental.component method)": [[248, "neural_compressor.experimental.Component.on_epoch_end"]], "on_post_forward() (neural_compressor.experimental.distillation method)": [[248, "neural_compressor.experimental.Distillation.on_post_forward"]], "on_post_grad() (neural_compressor.experimental.component method)": [[248, "neural_compressor.experimental.Component.on_post_grad"]], "on_step_begin() (neural_compressor.experimental.component method)": [[248, "neural_compressor.experimental.Component.on_step_begin"]], "on_step_end() (neural_compressor.experimental.component method)": [[248, "neural_compressor.experimental.Component.on_step_end"]], "on_train_begin() (neural_compressor.experimental.component method)": [[248, "neural_compressor.experimental.Component.on_train_begin"]], "on_train_end() (neural_compressor.experimental.component method)": [[248, "neural_compressor.experimental.Component.on_train_end"]], "optimizer (neural_compressor.experimental.distillation property)": [[248, "neural_compressor.experimental.Distillation.optimizer"]], "output (neural_compressor.experimental.graph_optimization property)": [[248, "neural_compressor.experimental.Graph_Optimization.output"]], "post_epoch_end() (neural_compressor.experimental.component method)": [[248, "neural_compressor.experimental.Component.post_epoch_end"]], "post_process() (neural_compressor.experimental.component method)": [[248, "neural_compressor.experimental.Component.post_process"]], "postprocess (neural_compressor.experimental.benchmark property)": [[248, "neural_compressor.experimental.Benchmark.postprocess"]], "postprocess (neural_compressor.experimental.graph_optimization property)": [[248, "neural_compressor.experimental.Graph_Optimization.postprocess"]], "postprocess (neural_compressor.experimental.modelconversion property)": [[248, "neural_compressor.experimental.ModelConversion.postprocess"]], "postprocess (neural_compressor.experimental.quantization property)": [[248, "neural_compressor.experimental.Quantization.postprocess"]], "pre_epoch_begin() (neural_compressor.experimental.component method)": [[248, "neural_compressor.experimental.Component.pre_epoch_begin"]], "pre_process() (neural_compressor.experimental.component method)": [[248, "neural_compressor.experimental.Component.pre_process"]], "pre_process() (neural_compressor.experimental.distillation method)": [[248, "neural_compressor.experimental.Distillation.pre_process"]], "pre_process() (neural_compressor.experimental.pruning method)": [[248, "neural_compressor.experimental.Pruning.pre_process"]], "pre_process() (neural_compressor.experimental.quantization method)": [[248, "neural_compressor.experimental.Quantization.pre_process"]], "precisions (neural_compressor.experimental.graph_optimization property)": [[248, "neural_compressor.experimental.Graph_Optimization.precisions"]], "precisions (neural_compressor.experimental.mixedprecision property)": [[248, "neural_compressor.experimental.MixedPrecision.precisions"]], "prepare() (neural_compressor.experimental.component method)": [[248, "neural_compressor.experimental.Component.prepare"]], "prepare() (neural_compressor.experimental.distillation method)": [[248, "neural_compressor.experimental.Distillation.prepare"]], "prepare() (neural_compressor.experimental.pruning method)": [[248, "neural_compressor.experimental.Pruning.prepare"]], "prepare_qat() (neural_compressor.experimental.component method)": [[248, "neural_compressor.experimental.Component.prepare_qat"]], "pruners (neural_compressor.experimental.pruning attribute)": [[248, "neural_compressor.experimental.Pruning.pruners"]], "pruning_func (neural_compressor.experimental.pruning property)": [[248, "neural_compressor.experimental.Pruning.pruning_func"]], "q_func (neural_compressor.experimental.quantization property)": [[248, "neural_compressor.experimental.Quantization.q_func"]], "register_hook() (neural_compressor.experimental.component method)": [[248, "neural_compressor.experimental.Component.register_hook"]], "results (neural_compressor.experimental.benchmark property)": [[248, "neural_compressor.experimental.Benchmark.results"]], "run_instance() (neural_compressor.experimental.benchmark method)": [[248, "neural_compressor.experimental.Benchmark.run_instance"]], "set_config_by_model() (neural_compressor.experimental.graph_optimization method)": [[248, "neural_compressor.experimental.Graph_Optimization.set_config_by_model"]], "set_config_by_model() (neural_compressor.experimental.mixedprecision method)": [[248, "neural_compressor.experimental.MixedPrecision.set_config_by_model"]], "source (neural_compressor.experimental.modelconversion property)": [[248, "neural_compressor.experimental.ModelConversion.source"]], "student_model (neural_compressor.experimental.distillation property)": [[248, "neural_compressor.experimental.Distillation.student_model"]], "summary_benchmark() (neural_compressor.experimental.benchmark method)": [[248, "neural_compressor.experimental.Benchmark.summary_benchmark"]], "teacher_model (neural_compressor.experimental.distillation property)": [[248, "neural_compressor.experimental.Distillation.teacher_model"]], "train_cfg (neural_compressor.experimental.distillation property)": [[248, "neural_compressor.experimental.Distillation.train_cfg"]], "train_dataloader (neural_compressor.experimental.component property)": [[248, "neural_compressor.experimental.Component.train_dataloader"]], "train_distributed (neural_compressor.experimental.distillation property)": [[248, "neural_compressor.experimental.Distillation.train_distributed"]], "train_distributed (neural_compressor.experimental.pruning property)": [[248, "neural_compressor.experimental.Pruning.train_distributed"]], "train_func (neural_compressor.experimental.component property)": [[248, "neural_compressor.experimental.Component.train_func"]], "update_items_for_all_pruners() (neural_compressor.experimental.pruning method)": [[248, "neural_compressor.experimental.Pruning.update_items_for_all_pruners"]], "bleu (class in neural_compressor.experimental.metric.bleu)": [[249, "neural_compressor.experimental.metric.bleu.BLEU"], [544, "neural_compressor.experimental.metric.bleu.BLEU"]], "unicoderegex (class in neural_compressor.experimental.metric.bleu)": [[249, "neural_compressor.experimental.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.experimental.metric.bleu)": [[249, "neural_compressor.experimental.metric.bleu.bleu_tokenize"]], "labels (neural_compressor.experimental.metric.bleu.bleu attribute)": [[249, "neural_compressor.experimental.metric.bleu.BLEU.labels"], [544, "neural_compressor.experimental.metric.bleu.BLEU.labels"]], "neural_compressor.experimental.metric.bleu": [[249, "module-neural_compressor.experimental.metric.bleu"], [544, "module-neural_compressor.experimental.metric.bleu"]], "nondigit_punct_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[249, "neural_compressor.experimental.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "predictions (neural_compressor.experimental.metric.bleu.bleu attribute)": [[249, "neural_compressor.experimental.metric.bleu.BLEU.predictions"], [544, "neural_compressor.experimental.metric.bleu.BLEU.predictions"]], "property_chars() (neural_compressor.experimental.metric.bleu.unicoderegex method)": [[249, "neural_compressor.experimental.metric.bleu.UnicodeRegex.property_chars"]], "punct_nondigit_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[249, "neural_compressor.experimental.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "reset() (neural_compressor.experimental.metric.bleu.bleu method)": [[249, "neural_compressor.experimental.metric.bleu.BLEU.reset"], [544, "neural_compressor.experimental.metric.bleu.BLEU.reset"]], "result() (neural_compressor.experimental.metric.bleu.bleu method)": [[249, "neural_compressor.experimental.metric.bleu.BLEU.result"], [544, "neural_compressor.experimental.metric.bleu.BLEU.result"]], "symbol_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[249, "neural_compressor.experimental.metric.bleu.UnicodeRegex.symbol_re"]], "update() (neural_compressor.experimental.metric.bleu.bleu method)": [[249, "neural_compressor.experimental.metric.bleu.BLEU.update"], [544, "neural_compressor.experimental.metric.bleu.BLEU.update"]], "compute_bleu() (in module neural_compressor.experimental.metric.bleu_util)": [[250, "neural_compressor.experimental.metric.bleu_util.compute_bleu"]], "neural_compressor.experimental.metric.bleu_util": [[250, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[251, "module-neural_compressor.experimental.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.experimental.metric.coco_tools)": [[252, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.experimental.metric.coco_tools)": [[252, "neural_compressor.experimental.metric.coco_tools.COCOWrapper"]], "computemetrics() (neural_compressor.experimental.metric.coco_tools.cocoevalwrapper method)": [[252, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper.ComputeMetrics"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.experimental.metric.coco_tools)": [[252, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.experimental.metric.coco_tools)": [[252, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.experimental.metric.coco_tools)": [[252, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "getagnosticmode() (neural_compressor.experimental.metric.coco_tools.cocoevalwrapper method)": [[252, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper.GetAgnosticMode"]], "getcategory() (neural_compressor.experimental.metric.coco_tools.cocoevalwrapper method)": [[252, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper.GetCategory"]], "getcategoryidlist() (neural_compressor.experimental.metric.coco_tools.cocoevalwrapper method)": [[252, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper.GetCategoryIdList"]], "loadannotations() (neural_compressor.experimental.metric.coco_tools.cocowrapper method)": [[252, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.LoadAnnotations"]], "accumulate() (neural_compressor.experimental.metric.coco_tools.cocoevalwrapper method)": [[252, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper.accumulate"]], "dataset (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[252, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[252, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.experimental.metric.coco_tools": [[252, "module-neural_compressor.experimental.metric.coco_tools"]], "evaluate() (in module neural_compressor.experimental.metric.evaluate_squad)": [[253, "neural_compressor.experimental.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[253, "neural_compressor.experimental.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[253, "neural_compressor.experimental.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.evaluate_squad)": [[253, "neural_compressor.experimental.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.evaluate_squad": [[253, "module-neural_compressor.experimental.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.experimental.metric.f1)": [[254, "neural_compressor.experimental.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.experimental.metric.f1)": [[254, "neural_compressor.experimental.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.f1)": [[254, "neural_compressor.experimental.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[254, "module-neural_compressor.experimental.metric.f1"]], "normalize_answer() (in module neural_compressor.experimental.metric.f1)": [[254, "neural_compressor.experimental.metric.f1.normalize_answer"]], "basemetric (class in neural_compressor.experimental.metric)": [[255, "neural_compressor.experimental.metric.BaseMetric"]], "metrics (class in neural_compressor.experimental.metric)": [[255, "neural_compressor.experimental.metric.METRICS"]], "hvd (neural_compressor.experimental.metric.basemetric property)": [[255, "neural_compressor.experimental.metric.BaseMetric.hvd"]], "metric (neural_compressor.experimental.metric.basemetric property)": [[255, "neural_compressor.experimental.metric.BaseMetric.metric"]], "metric_registry() (in module neural_compressor.experimental.metric)": [[255, "neural_compressor.experimental.metric.metric_registry"]], "metrics (neural_compressor.experimental.metric.metrics attribute)": [[255, "neural_compressor.experimental.metric.METRICS.metrics"]], "neural_compressor.experimental.metric": [[255, "module-neural_compressor.experimental.metric"]], "register() (neural_compressor.experimental.metric.metrics method)": [[255, "neural_compressor.experimental.metric.METRICS.register"]], "reset() (neural_compressor.experimental.metric.basemetric method)": [[255, "neural_compressor.experimental.metric.BaseMetric.reset"]], "result() (neural_compressor.experimental.metric.basemetric method)": [[255, "neural_compressor.experimental.metric.BaseMetric.result"]], "update() (neural_compressor.experimental.metric.basemetric method)": [[255, "neural_compressor.experimental.metric.BaseMetric.update"]], "accuracy (class in neural_compressor.experimental.metric.metric)": [[256, "neural_compressor.experimental.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.experimental.metric.metric)": [[256, "neural_compressor.experimental.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.experimental.metric.metric)": [[256, "neural_compressor.experimental.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.experimental.metric.metric)": [[256, "neural_compressor.experimental.metric.metric.F1"]], "generaltopk (class in neural_compressor.experimental.metric.metric)": [[256, "neural_compressor.experimental.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.experimental.metric.metric)": [[256, "neural_compressor.experimental.metric.metric.Loss"]], "mae (class in neural_compressor.experimental.metric.metric)": [[256, "neural_compressor.experimental.metric.metric.MAE"]], "metrics (class in neural_compressor.experimental.metric.metric)": [[256, "neural_compressor.experimental.metric.metric.METRICS"]], "mse (class in neural_compressor.experimental.metric.metric)": [[256, "neural_compressor.experimental.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.experimental.metric.metric)": [[256, "neural_compressor.experimental.metric.metric.MXNetMetrics"]], "onnxrtglue (class in neural_compressor.experimental.metric.metric)": [[256, "neural_compressor.experimental.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.experimental.metric.metric)": [[256, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.experimental.metric.metric)": [[256, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.experimental.metric.metric)": [[256, "neural_compressor.experimental.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.experimental.metric.metric)": [[256, "neural_compressor.experimental.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.experimental.metric.metric)": [[256, "neural_compressor.experimental.metric.metric.RMSE"]], "roc (class in neural_compressor.experimental.metric.metric)": [[256, "neural_compressor.experimental.metric.metric.ROC"]], "squadf1 (class in neural_compressor.experimental.metric.metric)": [[256, "neural_compressor.experimental.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.experimental.metric.metric)": [[256, "neural_compressor.experimental.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.experimental.metric.metric)": [[256, "neural_compressor.experimental.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.experimental.metric.metric)": [[256, "neural_compressor.experimental.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.experimental.metric.metric)": [[256, "neural_compressor.experimental.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.experimental.metric.metric)": [[256, "neural_compressor.experimental.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.experimental.metric.metric)": [[256, "neural_compressor.experimental.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.experimental.metric.metric)": [[256, "neural_compressor.experimental.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.experimental.metric.metric)": [[256, "neural_compressor.experimental.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.experimental.metric.metric.mae attribute)": [[256, "neural_compressor.experimental.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.experimental.metric.metric.mse attribute)": [[256, "neural_compressor.experimental.metric.metric.MSE.compare_label"]], "compute() (neural_compressor.experimental.metric.metric.pytorchloss method)": [[256, "neural_compressor.experimental.metric.metric.PyTorchLoss.compute"]], "hvd (neural_compressor.experimental.metric.metric.basemetric property)": [[256, "neural_compressor.experimental.metric.metric.BaseMetric.hvd"]], "k (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[256, "neural_compressor.experimental.metric.metric.GeneralTopK.k"]], "k (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[256, "neural_compressor.experimental.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[256, "neural_compressor.experimental.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mae attribute)": [[256, "neural_compressor.experimental.metric.metric.MAE.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mse attribute)": [[256, "neural_compressor.experimental.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.experimental.metric.metric)": [[256, "neural_compressor.experimental.metric.metric.mIOU"]], "metric (neural_compressor.experimental.metric.metric.basemetric property)": [[256, "neural_compressor.experimental.metric.metric.BaseMetric.metric"]], "metric_registry() (in module neural_compressor.experimental.metric.metric)": [[256, "neural_compressor.experimental.metric.metric.metric_registry"]], "metrics (neural_compressor.experimental.metric.metric.metrics attribute)": [[256, "neural_compressor.experimental.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.experimental.metric.metric.mxnetmetrics attribute)": [[256, "neural_compressor.experimental.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtitmetrics attribute)": [[256, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtqlmetrics attribute)": [[256, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.pytorchmetrics attribute)": [[256, "neural_compressor.experimental.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.tensorflowmetrics attribute)": [[256, "neural_compressor.experimental.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.experimental.metric.metric.rmse attribute)": [[256, "neural_compressor.experimental.metric.metric.RMSE.mse"]], "neural_compressor.experimental.metric.metric": [[256, "module-neural_compressor.experimental.metric.metric"]], "num_correct (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[256, "neural_compressor.experimental.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[256, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[256, "neural_compressor.experimental.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[256, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[256, "neural_compressor.experimental.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mae attribute)": [[256, "neural_compressor.experimental.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mse attribute)": [[256, "neural_compressor.experimental.metric.metric.MSE.pred_list"]], "register() (neural_compressor.experimental.metric.metric.metrics method)": [[256, "neural_compressor.experimental.metric.metric.METRICS.register"]], "reset() (neural_compressor.experimental.metric.metric.accuracy method)": [[256, "neural_compressor.experimental.metric.metric.Accuracy.reset"]], "reset() (neural_compressor.experimental.metric.metric.basemetric method)": [[256, "neural_compressor.experimental.metric.metric.BaseMetric.reset"]], "reset() (neural_compressor.experimental.metric.metric.cocomapv2 method)": [[256, "neural_compressor.experimental.metric.metric.COCOmAPv2.reset"]], "reset() (neural_compressor.experimental.metric.metric.f1 method)": [[256, "neural_compressor.experimental.metric.metric.F1.reset"]], "reset() (neural_compressor.experimental.metric.metric.generaltopk method)": [[256, "neural_compressor.experimental.metric.metric.GeneralTopK.reset"]], "reset() (neural_compressor.experimental.metric.metric.loss method)": [[256, "neural_compressor.experimental.metric.metric.Loss.reset"]], "reset() (neural_compressor.experimental.metric.metric.mae method)": [[256, "neural_compressor.experimental.metric.metric.MAE.reset"]], "reset() (neural_compressor.experimental.metric.metric.mse method)": [[256, "neural_compressor.experimental.metric.metric.MSE.reset"]], "reset() (neural_compressor.experimental.metric.metric.onnxrtglue method)": [[256, "neural_compressor.experimental.metric.metric.ONNXRTGLUE.reset"]], "reset() (neural_compressor.experimental.metric.metric.pytorchloss method)": [[256, "neural_compressor.experimental.metric.metric.PyTorchLoss.reset"]], "reset() (neural_compressor.experimental.metric.metric.rmse method)": [[256, "neural_compressor.experimental.metric.metric.RMSE.reset"]], "reset() (neural_compressor.experimental.metric.metric.roc method)": [[256, "neural_compressor.experimental.metric.metric.ROC.reset"]], "reset() (neural_compressor.experimental.metric.metric.squadf1 method)": [[256, "neural_compressor.experimental.metric.metric.SquadF1.reset"]], "reset() (neural_compressor.experimental.metric.metric.tensorflowmap method)": [[256, "neural_compressor.experimental.metric.metric.TensorflowMAP.reset"]], "reset() (neural_compressor.experimental.metric.metric.tensorflowtopk method)": [[256, "neural_compressor.experimental.metric.metric.TensorflowTopK.reset"]], "reset() (neural_compressor.experimental.metric.metric.wrapmxnetmetric method)": [[256, "neural_compressor.experimental.metric.metric.WrapMXNetMetric.reset"]], "reset() (neural_compressor.experimental.metric.metric.wraponnxrtmetric method)": [[256, "neural_compressor.experimental.metric.metric.WrapONNXRTMetric.reset"]], "reset() (neural_compressor.experimental.metric.metric.wrappytorchmetric method)": [[256, "neural_compressor.experimental.metric.metric.WrapPyTorchMetric.reset"]], "reset() (neural_compressor.experimental.metric.metric.miou method)": [[256, "neural_compressor.experimental.metric.metric.mIOU.reset"]], "result() (neural_compressor.experimental.metric.metric.accuracy method)": [[256, "neural_compressor.experimental.metric.metric.Accuracy.result"]], "result() (neural_compressor.experimental.metric.metric.basemetric method)": [[256, "neural_compressor.experimental.metric.metric.BaseMetric.result"]], "result() (neural_compressor.experimental.metric.metric.cocomapv2 method)": [[256, "neural_compressor.experimental.metric.metric.COCOmAPv2.result"]], "result() (neural_compressor.experimental.metric.metric.f1 method)": [[256, "neural_compressor.experimental.metric.metric.F1.result"]], "result() (neural_compressor.experimental.metric.metric.generaltopk method)": [[256, "neural_compressor.experimental.metric.metric.GeneralTopK.result"]], "result() (neural_compressor.experimental.metric.metric.loss method)": [[256, "neural_compressor.experimental.metric.metric.Loss.result"]], "result() (neural_compressor.experimental.metric.metric.mae method)": [[256, "neural_compressor.experimental.metric.metric.MAE.result"]], "result() (neural_compressor.experimental.metric.metric.mse method)": [[256, "neural_compressor.experimental.metric.metric.MSE.result"]], "result() (neural_compressor.experimental.metric.metric.onnxrtglue method)": [[256, "neural_compressor.experimental.metric.metric.ONNXRTGLUE.result"]], "result() (neural_compressor.experimental.metric.metric.rmse method)": [[256, "neural_compressor.experimental.metric.metric.RMSE.result"]], "result() (neural_compressor.experimental.metric.metric.roc method)": [[256, "neural_compressor.experimental.metric.metric.ROC.result"]], "result() (neural_compressor.experimental.metric.metric.squadf1 method)": [[256, "neural_compressor.experimental.metric.metric.SquadF1.result"]], "result() (neural_compressor.experimental.metric.metric.tensorflowmap method)": [[256, "neural_compressor.experimental.metric.metric.TensorflowMAP.result"]], "result() (neural_compressor.experimental.metric.metric.tensorflowtopk method)": [[256, "neural_compressor.experimental.metric.metric.TensorflowTopK.result"]], "result() (neural_compressor.experimental.metric.metric.wrapmxnetmetric method)": [[256, "neural_compressor.experimental.metric.metric.WrapMXNetMetric.result"]], "result() (neural_compressor.experimental.metric.metric.wraponnxrtmetric method)": [[256, "neural_compressor.experimental.metric.metric.WrapONNXRTMetric.result"]], "result() (neural_compressor.experimental.metric.metric.wrappytorchmetric method)": [[256, "neural_compressor.experimental.metric.metric.WrapPyTorchMetric.result"]], "result() (neural_compressor.experimental.metric.metric.miou method)": [[256, "neural_compressor.experimental.metric.metric.mIOU.result"]], "sample (neural_compressor.experimental.metric.metric.accuracy attribute)": [[256, "neural_compressor.experimental.metric.metric.Accuracy.sample"]], "sample (neural_compressor.experimental.metric.metric.loss attribute)": [[256, "neural_compressor.experimental.metric.metric.Loss.sample"]], "sum (neural_compressor.experimental.metric.metric.loss attribute)": [[256, "neural_compressor.experimental.metric.metric.Loss.sum"]], "update() (neural_compressor.experimental.metric.metric.accuracy method)": [[256, "neural_compressor.experimental.metric.metric.Accuracy.update"]], "update() (neural_compressor.experimental.metric.metric.basemetric method)": [[256, "neural_compressor.experimental.metric.metric.BaseMetric.update"]], "update() (neural_compressor.experimental.metric.metric.cocomapv2 method)": [[256, "neural_compressor.experimental.metric.metric.COCOmAPv2.update"]], "update() (neural_compressor.experimental.metric.metric.f1 method)": [[256, "neural_compressor.experimental.metric.metric.F1.update"]], "update() (neural_compressor.experimental.metric.metric.generaltopk method)": [[256, "neural_compressor.experimental.metric.metric.GeneralTopK.update"]], "update() (neural_compressor.experimental.metric.metric.loss method)": [[256, "neural_compressor.experimental.metric.metric.Loss.update"]], "update() (neural_compressor.experimental.metric.metric.mae method)": [[256, "neural_compressor.experimental.metric.metric.MAE.update"]], "update() (neural_compressor.experimental.metric.metric.mse method)": [[256, "neural_compressor.experimental.metric.metric.MSE.update"]], "update() (neural_compressor.experimental.metric.metric.onnxrtglue method)": [[256, "neural_compressor.experimental.metric.metric.ONNXRTGLUE.update"]], "update() (neural_compressor.experimental.metric.metric.pytorchloss method)": [[256, "neural_compressor.experimental.metric.metric.PyTorchLoss.update"]], "update() (neural_compressor.experimental.metric.metric.rmse method)": [[256, "neural_compressor.experimental.metric.metric.RMSE.update"]], "update() (neural_compressor.experimental.metric.metric.roc method)": [[256, "neural_compressor.experimental.metric.metric.ROC.update"]], "update() (neural_compressor.experimental.metric.metric.squadf1 method)": [[256, "neural_compressor.experimental.metric.metric.SquadF1.update"]], "update() (neural_compressor.experimental.metric.metric.tensorflowmap method)": [[256, "neural_compressor.experimental.metric.metric.TensorflowMAP.update"]], "update() (neural_compressor.experimental.metric.metric.tensorflowtopk method)": [[256, "neural_compressor.experimental.metric.metric.TensorflowTopK.update"]], "update() (neural_compressor.experimental.metric.metric.wrapmxnetmetric method)": [[256, "neural_compressor.experimental.metric.metric.WrapMXNetMetric.update"]], "update() (neural_compressor.experimental.metric.metric.wraponnxrtmetric method)": [[256, "neural_compressor.experimental.metric.metric.WrapONNXRTMetric.update"]], "update() (neural_compressor.experimental.metric.metric.wrappytorchmetric method)": [[256, "neural_compressor.experimental.metric.metric.WrapPyTorchMetric.update"]], "update() (neural_compressor.experimental.metric.metric.miou method)": [[256, "neural_compressor.experimental.metric.metric.mIOU.update"]], "mixedprecision (class in neural_compressor.experimental.mixed_precision)": [[257, "neural_compressor.experimental.mixed_precision.MixedPrecision"]], "neural_compressor.experimental.mixed_precision": [[257, "module-neural_compressor.experimental.mixed_precision"]], "precisions (neural_compressor.experimental.mixed_precision.mixedprecision property)": [[257, "neural_compressor.experimental.mixed_precision.MixedPrecision.precisions"]], "set_config_by_model() (neural_compressor.experimental.mixed_precision.mixedprecision method)": [[257, "neural_compressor.experimental.mixed_precision.MixedPrecision.set_config_by_model"]], "modelconversion (class in neural_compressor.experimental.model_conversion)": [[258, "neural_compressor.experimental.model_conversion.ModelConversion"]], "dataset() (neural_compressor.experimental.model_conversion.modelconversion method)": [[258, "neural_compressor.experimental.model_conversion.ModelConversion.dataset"]], "destination (neural_compressor.experimental.model_conversion.modelconversion property)": [[258, "neural_compressor.experimental.model_conversion.ModelConversion.destination"]], "eval_dataloader (neural_compressor.experimental.model_conversion.modelconversion property)": [[258, "neural_compressor.experimental.model_conversion.ModelConversion.eval_dataloader"]], "eval_func (neural_compressor.experimental.model_conversion.modelconversion property)": [[258, "neural_compressor.experimental.model_conversion.ModelConversion.eval_func"]], "metric (neural_compressor.experimental.model_conversion.modelconversion property)": [[258, "neural_compressor.experimental.model_conversion.ModelConversion.metric"]], "model (neural_compressor.experimental.model_conversion.modelconversion property)": [[258, "neural_compressor.experimental.model_conversion.ModelConversion.model"]], "neural_compressor.experimental.model_conversion": [[258, "module-neural_compressor.experimental.model_conversion"]], "postprocess (neural_compressor.experimental.model_conversion.modelconversion property)": [[258, "neural_compressor.experimental.model_conversion.ModelConversion.postprocess"]], "source (neural_compressor.experimental.model_conversion.modelconversion property)": [[258, "neural_compressor.experimental.model_conversion.ModelConversion.source"]], "basicnas (class in neural_compressor.experimental.nas.basic_nas)": [[259, "neural_compressor.experimental.nas.basic_nas.BasicNAS"]], "estimate() (neural_compressor.experimental.nas.basic_nas.basicnas method)": [[259, "neural_compressor.experimental.nas.basic_nas.BasicNAS.estimate"]], "execute() (neural_compressor.experimental.nas.basic_nas.basicnas method)": [[259, "neural_compressor.experimental.nas.basic_nas.BasicNAS.execute"]], "init_by_cfg() (neural_compressor.experimental.nas.basic_nas.basicnas method)": [[259, "neural_compressor.experimental.nas.basic_nas.BasicNAS.init_by_cfg"]], "neural_compressor.experimental.nas.basic_nas": [[259, "module-neural_compressor.experimental.nas.basic_nas"]], "pre_process() (neural_compressor.experimental.nas.basic_nas.basicnas method)": [[259, "neural_compressor.experimental.nas.basic_nas.BasicNAS.pre_process"]], "dynas (class in neural_compressor.experimental.nas.dynas)": [[260, "neural_compressor.experimental.nas.dynas.DyNAS"]], "init_cfg() (neural_compressor.experimental.nas.dynas.dynas method)": [[260, "neural_compressor.experimental.nas.dynas.DyNAS.init_cfg"]], "neural_compressor.experimental.nas.dynas": [[260, "module-neural_compressor.experimental.nas.dynas"]], "search() (neural_compressor.experimental.nas.dynas.dynas method)": [[260, "neural_compressor.experimental.nas.dynas.DyNAS.search"]], "select_model_arch() (neural_compressor.experimental.nas.dynas.dynas method)": [[260, "neural_compressor.experimental.nas.dynas.DyNAS.select_model_arch"]], "basicnas (class in neural_compressor.experimental.nas)": [[261, "neural_compressor.experimental.nas.BasicNAS"]], "dynas (class in neural_compressor.experimental.nas)": [[261, "neural_compressor.experimental.nas.DyNAS"]], "nas (class in neural_compressor.experimental.nas)": [[261, "neural_compressor.experimental.nas.NAS"]], "estimate() (neural_compressor.experimental.nas.basicnas method)": [[261, "neural_compressor.experimental.nas.BasicNAS.estimate"]], "execute() (neural_compressor.experimental.nas.basicnas method)": [[261, "neural_compressor.experimental.nas.BasicNAS.execute"]], "init_by_cfg() (neural_compressor.experimental.nas.basicnas method)": [[261, "neural_compressor.experimental.nas.BasicNAS.init_by_cfg"]], "init_cfg() (neural_compressor.experimental.nas.dynas method)": [[261, "neural_compressor.experimental.nas.DyNAS.init_cfg"]], "neural_compressor.experimental.nas": [[261, "module-neural_compressor.experimental.nas"]], "pre_process() (neural_compressor.experimental.nas.basicnas method)": [[261, "neural_compressor.experimental.nas.BasicNAS.pre_process"]], "search() (neural_compressor.experimental.nas.dynas method)": [[261, "neural_compressor.experimental.nas.DyNAS.search"]], "select_model_arch() (neural_compressor.experimental.nas.dynas method)": [[261, "neural_compressor.experimental.nas.DyNAS.select_model_arch"]], "nas (class in neural_compressor.experimental.nas.nas)": [[262, "neural_compressor.experimental.nas.nas.NAS"]], "nasbase (class in neural_compressor.experimental.nas.nas)": [[262, "neural_compressor.experimental.nas.nas.NASBase"]], "count_model_parameters() (neural_compressor.experimental.nas.nas.nasbase method)": [[262, "neural_compressor.experimental.nas.nas.NASBase.count_model_parameters"]], "dump_search_results() (neural_compressor.experimental.nas.nas.nasbase method)": [[262, "neural_compressor.experimental.nas.nas.NASBase.dump_search_results"]], "estimate() (neural_compressor.experimental.nas.nas.nasbase method)": [[262, "neural_compressor.experimental.nas.nas.NASBase.estimate"]], "find_best_model_archs() (neural_compressor.experimental.nas.nas.nasbase method)": [[262, "neural_compressor.experimental.nas.nas.NASBase.find_best_model_archs"]], "init_search_cfg() (neural_compressor.experimental.nas.nas.nasbase method)": [[262, "neural_compressor.experimental.nas.nas.NASBase.init_search_cfg"]], "load_search_results() (neural_compressor.experimental.nas.nas.nasbase method)": [[262, "neural_compressor.experimental.nas.nas.NASBase.load_search_results"]], "metrics_conversion() (neural_compressor.experimental.nas.nas.nasbase method)": [[262, "neural_compressor.experimental.nas.nas.NASBase.metrics_conversion"]], "model_builder (neural_compressor.experimental.nas.nas.nasbase property)": [[262, "neural_compressor.experimental.nas.nas.NASBase.model_builder"]], "neural_compressor.experimental.nas.nas": [[262, "module-neural_compressor.experimental.nas.nas"]], "params_vec2params_dict() (neural_compressor.experimental.nas.nas.nasbase method)": [[262, "neural_compressor.experimental.nas.nas.NASBase.params_vec2params_dict"]], "search() (neural_compressor.experimental.nas.nas.nasbase method)": [[262, "neural_compressor.experimental.nas.nas.NASBase.search"]], "search_algorithm (neural_compressor.experimental.nas.nas.nasbase property)": [[262, "neural_compressor.experimental.nas.nas.NASBase.search_algorithm"]], "search_space (neural_compressor.experimental.nas.nas.nasbase property)": [[262, "neural_compressor.experimental.nas.nas.NASBase.search_space"]], "select_model_arch() (neural_compressor.experimental.nas.nas.nasbase method)": [[262, "neural_compressor.experimental.nas.nas.NASBase.select_model_arch"]], "create_search_space_pool() (in module neural_compressor.experimental.nas.nas_utils)": [[263, "neural_compressor.experimental.nas.nas_utils.create_search_space_pool"]], "find_pareto_front() (in module neural_compressor.experimental.nas.nas_utils)": [[263, "neural_compressor.experimental.nas.nas_utils.find_pareto_front"]], "nas_registry() (in module neural_compressor.experimental.nas.nas_utils)": [[263, "neural_compressor.experimental.nas.nas_utils.nas_registry"]], "neural_compressor.experimental.nas.nas_utils": [[263, "module-neural_compressor.experimental.nas.nas_utils"]], "bayesianoptimizationsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[264, "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher"]], "gridsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[264, "neural_compressor.experimental.nas.search_algorithms.GridSearcher"]], "randomsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[264, "neural_compressor.experimental.nas.search_algorithms.RandomSearcher"]], "searcher (class in neural_compressor.experimental.nas.search_algorithms)": [[264, "neural_compressor.experimental.nas.search_algorithms.Searcher"]], "get_feedback() (neural_compressor.experimental.nas.search_algorithms.bayesianoptimizationsearcher method)": [[264, "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher.get_feedback"]], "get_feedback() (neural_compressor.experimental.nas.search_algorithms.searcher method)": [[264, "neural_compressor.experimental.nas.search_algorithms.Searcher.get_feedback"]], "indices2params_vec() (neural_compressor.experimental.nas.search_algorithms.bayesianoptimizationsearcher method)": [[264, "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher.indices2params_vec"]], "neural_compressor.experimental.nas.search_algorithms": [[264, "module-neural_compressor.experimental.nas.search_algorithms"]], "params_vec2params_dict() (neural_compressor.experimental.nas.search_algorithms.searcher method)": [[264, "neural_compressor.experimental.nas.search_algorithms.Searcher.params_vec2params_dict"]], "suggest() (neural_compressor.experimental.nas.search_algorithms.bayesianoptimizationsearcher method)": [[264, "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher.suggest"]], "suggest() (neural_compressor.experimental.nas.search_algorithms.gridsearcher method)": [[264, "neural_compressor.experimental.nas.search_algorithms.GridSearcher.suggest"]], "suggest() (neural_compressor.experimental.nas.search_algorithms.randomsearcher method)": [[264, "neural_compressor.experimental.nas.search_algorithms.RandomSearcher.suggest"]], "suggest() (neural_compressor.experimental.nas.search_algorithms.searcher method)": [[264, "neural_compressor.experimental.nas.search_algorithms.Searcher.suggest"]], "gradientsensitivitypruner (class in neural_compressor.experimental.pruner_legacy.gradient_sensitivity)": [[265, "neural_compressor.experimental.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner"]], "compute_mask() (neural_compressor.experimental.pruner_legacy.gradient_sensitivity.gradientsensitivitypruner method)": [[265, "neural_compressor.experimental.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner.compute_mask"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[265, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"]], "on_epoch_begin() (neural_compressor.experimental.pruner_legacy.gradient_sensitivity.gradientsensitivitypruner method)": [[265, "neural_compressor.experimental.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner.on_epoch_begin"]], "on_epoch_end() (neural_compressor.experimental.pruner_legacy.gradient_sensitivity.gradientsensitivitypruner method)": [[265, "neural_compressor.experimental.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner.on_epoch_end"]], "on_step_begin() (neural_compressor.experimental.pruner_legacy.gradient_sensitivity.gradientsensitivitypruner method)": [[265, "neural_compressor.experimental.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner.on_step_begin"]], "on_step_end() (neural_compressor.experimental.pruner_legacy.gradient_sensitivity.gradientsensitivitypruner method)": [[265, "neural_compressor.experimental.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner.on_step_end"]], "parse_weight_name() (neural_compressor.experimental.pruner_legacy.gradient_sensitivity.gradientsensitivitypruner method)": [[265, "neural_compressor.experimental.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner.parse_weight_name"]], "prune_by_importance() (neural_compressor.experimental.pruner_legacy.gradient_sensitivity.gradientsensitivitypruner method)": [[265, "neural_compressor.experimental.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner.prune_by_importance"]], "prune_weight() (neural_compressor.experimental.pruner_legacy.gradient_sensitivity.gradientsensitivitypruner method)": [[265, "neural_compressor.experimental.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner.prune_weight"]], "update_importance_abs() (neural_compressor.experimental.pruner_legacy.gradient_sensitivity.gradientsensitivitypruner method)": [[265, "neural_compressor.experimental.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner.update_importance_abs"]], "update_importance_elementwise() (neural_compressor.experimental.pruner_legacy.gradient_sensitivity.gradientsensitivitypruner method)": [[265, "neural_compressor.experimental.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner.update_importance_elementwise"]], "update_importance_weighted() (neural_compressor.experimental.pruner_legacy.gradient_sensitivity.gradientsensitivitypruner method)": [[265, "neural_compressor.experimental.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner.update_importance_weighted"]], "grouplassopruner (class in neural_compressor.experimental.pruner_legacy.group_lasso)": [[266, "neural_compressor.experimental.pruner_legacy.group_lasso.GroupLassoPruner"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[266, "module-neural_compressor.experimental.pruner_legacy.group_lasso"]], "on_before_optimizer_step() (neural_compressor.experimental.pruner_legacy.group_lasso.grouplassopruner method)": [[266, "neural_compressor.experimental.pruner_legacy.group_lasso.GroupLassoPruner.on_before_optimizer_step"]], "neural_compressor.experimental.pruner_legacy": [[267, "module-neural_compressor.experimental.pruner_legacy"]], "basicmagnitudepruner (class in neural_compressor.experimental.pruner_legacy.magnitude)": [[268, "neural_compressor.experimental.pruner_legacy.magnitude.BasicMagnitudePruner"]], "compute_mask() (neural_compressor.experimental.pruner_legacy.magnitude.basicmagnitudepruner method)": [[268, "neural_compressor.experimental.pruner_legacy.magnitude.BasicMagnitudePruner.compute_mask"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[268, "module-neural_compressor.experimental.pruner_legacy.magnitude"]], "on_epoch_begin() (neural_compressor.experimental.pruner_legacy.magnitude.basicmagnitudepruner method)": [[268, "neural_compressor.experimental.pruner_legacy.magnitude.BasicMagnitudePruner.on_epoch_begin"]], "on_epoch_end() (neural_compressor.experimental.pruner_legacy.magnitude.basicmagnitudepruner method)": [[268, "neural_compressor.experimental.pruner_legacy.magnitude.BasicMagnitudePruner.on_epoch_end"]], "on_step_begin() (neural_compressor.experimental.pruner_legacy.magnitude.basicmagnitudepruner method)": [[268, "neural_compressor.experimental.pruner_legacy.magnitude.BasicMagnitudePruner.on_step_begin"]], "on_step_end() (neural_compressor.experimental.pruner_legacy.magnitude.basicmagnitudepruner method)": [[268, "neural_compressor.experimental.pruner_legacy.magnitude.BasicMagnitudePruner.on_step_end"]], "patternlockpruner (class in neural_compressor.experimental.pruner_legacy.pattern_lock)": [[269, "neural_compressor.experimental.pruner_legacy.pattern_lock.PatternLockPruner"]], "compute_mask() (neural_compressor.experimental.pruner_legacy.pattern_lock.patternlockpruner method)": [[269, "neural_compressor.experimental.pruner_legacy.pattern_lock.PatternLockPruner.compute_mask"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[269, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"]], "on_epoch_begin() (neural_compressor.experimental.pruner_legacy.pattern_lock.patternlockpruner method)": [[269, "neural_compressor.experimental.pruner_legacy.pattern_lock.PatternLockPruner.on_epoch_begin"]], "on_epoch_end() (neural_compressor.experimental.pruner_legacy.pattern_lock.patternlockpruner method)": [[269, "neural_compressor.experimental.pruner_legacy.pattern_lock.PatternLockPruner.on_epoch_end"]], "on_step_begin() (neural_compressor.experimental.pruner_legacy.pattern_lock.patternlockpruner method)": [[269, "neural_compressor.experimental.pruner_legacy.pattern_lock.PatternLockPruner.on_step_begin"]], "on_step_end() (neural_compressor.experimental.pruner_legacy.pattern_lock.patternlockpruner method)": [[269, "neural_compressor.experimental.pruner_legacy.pattern_lock.PatternLockPruner.on_step_end"]], "update_weights() (neural_compressor.experimental.pruner_legacy.pattern_lock.patternlockpruner method)": [[269, "neural_compressor.experimental.pruner_legacy.pattern_lock.PatternLockPruner.update_weights"]], "pruner (class in neural_compressor.experimental.pruner_legacy.pruner)": [[270, "neural_compressor.experimental.pruner_legacy.pruner.Pruner"]], "neural_compressor.experimental.pruner_legacy.pruner": [[270, "module-neural_compressor.experimental.pruner_legacy.pruner"]], "on_before_optimizer_step() (neural_compressor.experimental.pruner_legacy.pruner.pruner method)": [[270, "neural_compressor.experimental.pruner_legacy.pruner.Pruner.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.experimental.pruner_legacy.pruner.pruner method)": [[270, "neural_compressor.experimental.pruner_legacy.pruner.Pruner.on_epoch_begin"]], "on_epoch_end() (neural_compressor.experimental.pruner_legacy.pruner.pruner method)": [[270, "neural_compressor.experimental.pruner_legacy.pruner.Pruner.on_epoch_end"]], "on_step_begin() (neural_compressor.experimental.pruner_legacy.pruner.pruner method)": [[270, "neural_compressor.experimental.pruner_legacy.pruner.Pruner.on_step_begin"]], "on_step_end() (neural_compressor.experimental.pruner_legacy.pruner.pruner method)": [[270, "neural_compressor.experimental.pruner_legacy.pruner.Pruner.on_step_end"]], "on_train_begin() (neural_compressor.experimental.pruner_legacy.pruner.pruner method)": [[270, "neural_compressor.experimental.pruner_legacy.pruner.Pruner.on_train_begin"]], "on_train_end() (neural_compressor.experimental.pruner_legacy.pruner.pruner method)": [[270, "neural_compressor.experimental.pruner_legacy.pruner.Pruner.on_train_end"]], "pruner_registry() (in module neural_compressor.experimental.pruner_legacy.pruner)": [[270, "neural_compressor.experimental.pruner_legacy.pruner.pruner_registry"]], "update_sparsity() (neural_compressor.experimental.pruner_legacy.pruner.pruner method)": [[270, "neural_compressor.experimental.pruner_legacy.pruner.Pruner.update_sparsity"]], "pruning (class in neural_compressor.experimental.pruning)": [[271, "neural_compressor.experimental.pruning.Pruning"]], "tfpruningcallback (class in neural_compressor.experimental.pruning)": [[271, "neural_compressor.experimental.pruning.TfPruningCallback"]], "conf (neural_compressor.experimental.pruning.pruning attribute)": [[271, "neural_compressor.experimental.pruning.Pruning.conf"]], "evaluation_distributed (neural_compressor.experimental.pruning.pruning property)": [[271, "neural_compressor.experimental.pruning.Pruning.evaluation_distributed"]], "execute() (neural_compressor.experimental.pruning.pruning method)": [[271, "neural_compressor.experimental.pruning.Pruning.execute"]], "generate_hooks() (neural_compressor.experimental.pruning.pruning method)": [[271, "neural_compressor.experimental.pruning.Pruning.generate_hooks"]], "generate_pruners() (neural_compressor.experimental.pruning.pruning method)": [[271, "neural_compressor.experimental.pruning.Pruning.generate_pruners"]], "get_sparsity_ratio() (neural_compressor.experimental.pruning.pruning method)": [[271, "neural_compressor.experimental.pruning.Pruning.get_sparsity_ratio"]], "neural_compressor.experimental.pruning": [[271, "module-neural_compressor.experimental.pruning"]], "on_after_compute_loss() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[271, "neural_compressor.experimental.pruning.TfPruningCallback.on_after_compute_loss"]], "on_batch_begin() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[271, "neural_compressor.experimental.pruning.TfPruningCallback.on_batch_begin"]], "on_batch_end() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[271, "neural_compressor.experimental.pruning.TfPruningCallback.on_batch_end"]], "on_epoch_begin() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[271, "neural_compressor.experimental.pruning.TfPruningCallback.on_epoch_begin"]], "on_epoch_end() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[271, "neural_compressor.experimental.pruning.TfPruningCallback.on_epoch_end"]], "on_step_begin() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[271, "neural_compressor.experimental.pruning.TfPruningCallback.on_step_begin"]], "on_step_end() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[271, "neural_compressor.experimental.pruning.TfPruningCallback.on_step_end"]], "on_train_begin() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[271, "neural_compressor.experimental.pruning.TfPruningCallback.on_train_begin"]], "on_train_end() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[271, "neural_compressor.experimental.pruning.TfPruningCallback.on_train_end"]], "post_epoch_end() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[271, "neural_compressor.experimental.pruning.TfPruningCallback.post_epoch_end"]], "pre_epoch_begin() (neural_compressor.experimental.pruning.tfpruningcallback method)": [[271, "neural_compressor.experimental.pruning.TfPruningCallback.pre_epoch_begin"]], "pre_process() (neural_compressor.experimental.pruning.pruning method)": [[271, "neural_compressor.experimental.pruning.Pruning.pre_process"]], "prepare() (neural_compressor.experimental.pruning.pruning method)": [[271, "neural_compressor.experimental.pruning.Pruning.prepare"]], "pruners (neural_compressor.experimental.pruning.pruning attribute)": [[271, "neural_compressor.experimental.pruning.Pruning.pruners"]], "pruning_func (neural_compressor.experimental.pruning.pruning property)": [[271, "neural_compressor.experimental.pruning.Pruning.pruning_func"]], "train_distributed (neural_compressor.experimental.pruning.pruning property)": [[271, "neural_compressor.experimental.pruning.Pruning.train_distributed"]], "update_items_for_all_pruners() (neural_compressor.experimental.pruning.pruning method)": [[271, "neural_compressor.experimental.pruning.Pruning.update_items_for_all_pruners"]], "patterns (class in neural_compressor.experimental.pruning_recipes)": [[272, "neural_compressor.experimental.pruning_recipes.PATTERNS"]], "neural_compressor.experimental.pruning_recipes": [[272, "module-neural_compressor.experimental.pruning_recipes"]], "patterns (neural_compressor.experimental.pruning_recipes.patterns attribute)": [[272, "neural_compressor.experimental.pruning_recipes.PATTERNS.patterns"]], "support_pattern() (neural_compressor.experimental.pruning_recipes.patterns class method)": [[272, "neural_compressor.experimental.pruning_recipes.PATTERNS.support_pattern"]], "patterns (class in neural_compressor.experimental.pruning_recipes.patterns)": [[273, "neural_compressor.experimental.pruning_recipes.patterns.PATTERNS"]], "neural_compressor.experimental.pruning_recipes.patterns": [[273, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "patterns (neural_compressor.experimental.pruning_recipes.patterns.patterns attribute)": [[273, "neural_compressor.experimental.pruning_recipes.patterns.PATTERNS.patterns"]], "support_pattern() (neural_compressor.experimental.pruning_recipes.patterns.patterns class method)": [[273, "neural_compressor.experimental.pruning_recipes.patterns.PATTERNS.support_pattern"]], "patterns (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[274, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS"]], "patternbase (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[274, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase"]], "compute_sparsity() (neural_compressor.experimental.pruning_recipes.patterns.pattern.patternbase method)": [[274, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase.compute_sparsity"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[274, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "pattern_registry() (in module neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[274, "neural_compressor.experimental.pruning_recipes.patterns.pattern.pattern_registry"]], "patterns (neural_compressor.experimental.pruning_recipes.patterns.pattern.patterns attribute)": [[274, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS.patterns"]], "reduce() (neural_compressor.experimental.pruning_recipes.patterns.pattern.patternbase method)": [[274, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase.reduce"]], "reshape() (neural_compressor.experimental.pruning_recipes.patterns.pattern.patternbase method)": [[274, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase.reshape"]], "support_pattern() (neural_compressor.experimental.pruning_recipes.patterns.pattern.patterns class method)": [[274, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS.support_pattern"]], "tilepatternbase (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[275, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePatternBase"]], "tilepattern_1x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[275, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x1"]], "tilepattern_1x16 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[275, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x16"]], "tilepattern_1x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[275, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x2"]], "tilepattern_2x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[275, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_2x2"]], "tilepattern_4x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[275, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_4x1"]], "compute_sparsity() (neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.tilepatternbase method)": [[275, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePatternBase.compute_sparsity"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[275, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "repeat_mask() (neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.tilepatternbase method)": [[275, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePatternBase.repeat_mask"]], "pruning (class in neural_compressor.experimental.pruning_v2)": [[276, "neural_compressor.experimental.pruning_v2.Pruning"]], "tfpruningcallback (class in neural_compressor.experimental.pruning_v2)": [[276, "neural_compressor.experimental.pruning_v2.TfPruningCallback"]], "conf (neural_compressor.experimental.pruning_v2.pruning attribute)": [[276, "neural_compressor.experimental.pruning_v2.Pruning.conf"]], "evaluation_distributed (neural_compressor.experimental.pruning_v2.pruning property)": [[276, "neural_compressor.experimental.pruning_v2.Pruning.evaluation_distributed"]], "execute() (neural_compressor.experimental.pruning_v2.pruning method)": [[276, "neural_compressor.experimental.pruning_v2.Pruning.execute"]], "generate_hooks() (neural_compressor.experimental.pruning_v2.pruning method)": [[276, "neural_compressor.experimental.pruning_v2.Pruning.generate_hooks"]], "get_sparsity_ratio() (neural_compressor.experimental.pruning_v2.pruning method)": [[276, "neural_compressor.experimental.pruning_v2.Pruning.get_sparsity_ratio"]], "neural_compressor.experimental.pruning_v2": [[276, "module-neural_compressor.experimental.pruning_v2"]], "on_after_compute_loss() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[276, "neural_compressor.experimental.pruning_v2.TfPruningCallback.on_after_compute_loss"]], "on_batch_begin() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[276, "neural_compressor.experimental.pruning_v2.TfPruningCallback.on_batch_begin"]], "on_batch_end() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[276, "neural_compressor.experimental.pruning_v2.TfPruningCallback.on_batch_end"]], "on_epoch_begin() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[276, "neural_compressor.experimental.pruning_v2.TfPruningCallback.on_epoch_begin"]], "on_epoch_end() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[276, "neural_compressor.experimental.pruning_v2.TfPruningCallback.on_epoch_end"]], "on_step_begin() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[276, "neural_compressor.experimental.pruning_v2.TfPruningCallback.on_step_begin"]], "on_step_end() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[276, "neural_compressor.experimental.pruning_v2.TfPruningCallback.on_step_end"]], "on_train_begin() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[276, "neural_compressor.experimental.pruning_v2.TfPruningCallback.on_train_begin"]], "on_train_end() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[276, "neural_compressor.experimental.pruning_v2.TfPruningCallback.on_train_end"]], "post_epoch_end() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[276, "neural_compressor.experimental.pruning_v2.TfPruningCallback.post_epoch_end"]], "pre_epoch_begin() (neural_compressor.experimental.pruning_v2.tfpruningcallback method)": [[276, "neural_compressor.experimental.pruning_v2.TfPruningCallback.pre_epoch_begin"]], "pre_process() (neural_compressor.experimental.pruning_v2.pruning method)": [[276, "neural_compressor.experimental.pruning_v2.Pruning.pre_process"]], "prepare() (neural_compressor.experimental.pruning_v2.pruning method)": [[276, "neural_compressor.experimental.pruning_v2.Pruning.prepare"]], "pruners (neural_compressor.experimental.pruning_v2.pruning attribute)": [[276, "neural_compressor.experimental.pruning_v2.Pruning.pruners"]], "pruning_func (neural_compressor.experimental.pruning_v2.pruning property)": [[276, "neural_compressor.experimental.pruning_v2.Pruning.pruning_func"]], "train_distributed (neural_compressor.experimental.pruning_v2.pruning property)": [[276, "neural_compressor.experimental.pruning_v2.Pruning.train_distributed"]], "update_config() (neural_compressor.experimental.pruning_v2.pruning method)": [[276, "neural_compressor.experimental.pruning_v2.Pruning.update_config"]], "neural_compressor.experimental.pytorch_pruner": [[277, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[278, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "m (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[279, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.M"]], "n (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[279, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.N"]], "pattern (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[279, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern"]], "patternninm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[279, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM"]], "patternnxm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[279, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM"]], "block_size (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm attribute)": [[279, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.block_size"]], "get_block_size_dict() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[279, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_block_size_dict"]], "get_block_size_dict() (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm method)": [[279, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.get_block_size_dict"]], "get_mask_single() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[279, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_mask_single"]], "get_masks() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[279, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_masks"]], "get_masks_global() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[279, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_masks_global"]], "get_masks_global() (neural_compressor.experimental.pytorch_pruner.patterns.patternninm method)": [[279, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.get_masks_global"]], "get_masks_global() (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm method)": [[279, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.get_masks_global"]], "get_masks_local() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[279, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_masks_local"]], "get_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[279, "neural_compressor.experimental.pytorch_pruner.patterns.get_pattern"]], "get_pattern_lock_masks() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[279, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_pattern_lock_masks"]], "get_pattern_lock_masks() (neural_compressor.experimental.pytorch_pruner.patterns.patternninm method)": [[279, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.get_pattern_lock_masks"]], "get_pattern_lock_masks() (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm method)": [[279, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.get_pattern_lock_masks"]], "get_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.patterns.pattern method)": [[279, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.get_sparsity_ratio"]], "get_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.patterns.patternninm method)": [[279, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.get_sparsity_ratio"]], "get_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm method)": [[279, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.get_sparsity_ratio"]], "is_global (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[279, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.is_global"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[279, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "pattern (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[279, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.pattern"]], "register_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[279, "neural_compressor.experimental.pytorch_pruner.patterns.register_pattern"]], "check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[280, "neural_compressor.experimental.pytorch_pruner.prune_utils.check_config"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[280, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "parse_not_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[280, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_not_to_prune"]], "parse_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[280, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_to_prune"]], "process_and_check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[280, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_and_check_config"]], "process_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[280, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_config"]], "reset_non_value_to_default() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[280, "neural_compressor.experimental.pytorch_pruner.prune_utils.reset_non_value_to_default"]], "magnitudepruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[281, "neural_compressor.experimental.pytorch_pruner.pruner.MagnitudePruner"]], "patternlockpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[281, "neural_compressor.experimental.pytorch_pruner.pruner.PatternLockPruner"]], "pruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[281, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner"]], "snipmomentumpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[281, "neural_compressor.experimental.pytorch_pruner.pruner.SnipMomentumPruner"]], "snippruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[281, "neural_compressor.experimental.pytorch_pruner.pruner.SnipPruner"]], "check_is_pruned_step() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[281, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.check_is_pruned_step"]], "config (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[281, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.config"]], "current_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[281, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.current_sparsity_ratio"]], "end_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[281, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.end_step"]], "get_pruner() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[281, "neural_compressor.experimental.pytorch_pruner.pruner.get_pruner"]], "global_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[281, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.global_step"]], "mask_weights() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[281, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.mask_weights"]], "masks (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[281, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.masks"]], "max_sparsity_ratio_per_layer (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[281, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.max_sparsity_ratio_per_layer"]], "modules (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[281, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.modules"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[281, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "on_after_eval() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[281, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_after_eval"]], "on_after_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruner.patternlockpruner method)": [[281, "neural_compressor.experimental.pytorch_pruner.pruner.PatternLockPruner.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[281, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruner.snipmomentumpruner method)": [[281, "neural_compressor.experimental.pytorch_pruner.pruner.SnipMomentumPruner.on_after_optimizer_step"]], "on_after_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruner.snippruner method)": [[281, "neural_compressor.experimental.pytorch_pruner.pruner.SnipPruner.on_after_optimizer_step"]], "on_before_eval() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[281, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_before_eval"]], "on_before_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[281, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[281, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_epoch_begin"]], "on_epoch_end() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[281, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_epoch_end"]], "on_step_begin() (neural_compressor.experimental.pytorch_pruner.pruner.patternlockpruner method)": [[281, "neural_compressor.experimental.pytorch_pruner.pruner.PatternLockPruner.on_step_begin"]], "on_step_begin() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[281, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_step_begin"]], "on_step_end() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[281, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_step_end"]], "on_train_begin() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[281, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_train_begin"]], "on_train_end() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[281, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.on_train_end"]], "pattern (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[281, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.pattern"]], "register_pruners() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[281, "neural_compressor.experimental.pytorch_pruner.pruner.register_pruners"]], "scheduler (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[281, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scheduler"]], "scores (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[281, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scores"]], "start_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[281, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.start_step"]], "target_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[281, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.target_sparsity_ratio"]], "update_frequency_on_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[281, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.update_frequency_on_step"]], "update_scores() (neural_compressor.experimental.pytorch_pruner.pruner.magnitudepruner method)": [[281, "neural_compressor.experimental.pytorch_pruner.pruner.MagnitudePruner.update_scores"]], "update_scores() (neural_compressor.experimental.pytorch_pruner.pruner.pruner method)": [[281, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.update_scores"]], "pruning (class in neural_compressor.experimental.pytorch_pruner.pruning)": [[282, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning"]], "config_file_path (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[282, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.config_file_path"]], "get_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[282, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.get_sparsity_ratio"]], "model (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[282, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.model"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[282, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "on_after_eval() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[282, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_after_eval"]], "on_after_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[282, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_after_optimizer_step"]], "on_before_eval() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[282, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_before_eval"]], "on_before_optimizer_step() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[282, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[282, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_epoch_begin"]], "on_epoch_end() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[282, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_epoch_end"]], "on_step_begin() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[282, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_step_begin"]], "on_step_end() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[282, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_step_end"]], "on_train_begin() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[282, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_train_begin"]], "on_train_end() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[282, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.on_train_end"]], "prepare() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[282, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.prepare"]], "pruner_info (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[282, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruner_info"]], "pruners (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[282, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruners"]], "update_items_for_all_pruners() (neural_compressor.experimental.pytorch_pruner.pruning.pruning method)": [[282, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.update_items_for_all_pruners"]], "iterativescheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[283, "neural_compressor.experimental.pytorch_pruner.scheduler.IterativeScheduler"]], "oneshotscheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[283, "neural_compressor.experimental.pytorch_pruner.scheduler.OneshotScheduler"]], "scheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[283, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler"]], "config (neural_compressor.experimental.pytorch_pruner.scheduler.scheduler attribute)": [[283, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler.config"]], "get_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[283, "neural_compressor.experimental.pytorch_pruner.scheduler.get_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[283, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "register_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[283, "neural_compressor.experimental.pytorch_pruner.scheduler.register_scheduler"]], "update_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.scheduler.iterativescheduler method)": [[283, "neural_compressor.experimental.pytorch_pruner.scheduler.IterativeScheduler.update_sparsity_ratio"]], "update_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.scheduler.oneshotscheduler method)": [[283, "neural_compressor.experimental.pytorch_pruner.scheduler.OneshotScheduler.update_sparsity_ratio"]], "update_sparsity_ratio() (neural_compressor.experimental.pytorch_pruner.scheduler.scheduler method)": [[283, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler.update_sparsity_ratio"]], "quantization (class in neural_compressor.experimental.quantization)": [[284, "neural_compressor.experimental.quantization.Quantization"]], "calib_dataloader (neural_compressor.experimental.quantization.quantization property)": [[284, "neural_compressor.experimental.quantization.Quantization.calib_dataloader"]], "dataset() (neural_compressor.experimental.quantization.quantization method)": [[284, "neural_compressor.experimental.quantization.Quantization.dataset"]], "distributed_execute() (neural_compressor.experimental.quantization.quantization method)": [[284, "neural_compressor.experimental.quantization.Quantization.distributed_execute"]], "execute() (neural_compressor.experimental.quantization.quantization method)": [[284, "neural_compressor.experimental.quantization.Quantization.execute"]], "metric (neural_compressor.experimental.quantization.quantization property)": [[284, "neural_compressor.experimental.quantization.Quantization.metric"]], "model (neural_compressor.experimental.quantization.quantization property)": [[284, "neural_compressor.experimental.quantization.Quantization.model"]], "neural_compressor.experimental.quantization": [[284, "module-neural_compressor.experimental.quantization"]], "objective (neural_compressor.experimental.quantization.quantization property)": [[284, "neural_compressor.experimental.quantization.Quantization.objective"]], "postprocess (neural_compressor.experimental.quantization.quantization property)": [[284, "neural_compressor.experimental.quantization.Quantization.postprocess"]], "pre_process() (neural_compressor.experimental.quantization.quantization method)": [[284, "neural_compressor.experimental.quantization.Quantization.pre_process"]], "q_func (neural_compressor.experimental.quantization.quantization property)": [[284, "neural_compressor.experimental.quantization.Quantization.q_func"]], "scheduler (class in neural_compressor.experimental.scheduler)": [[285, "neural_compressor.experimental.scheduler.Scheduler"]], "append() (neural_compressor.experimental.scheduler.scheduler method)": [[285, "neural_compressor.experimental.scheduler.Scheduler.append"]], "combine() (neural_compressor.experimental.scheduler.scheduler method)": [[285, "neural_compressor.experimental.scheduler.Scheduler.combine"]], "eval_func (neural_compressor.experimental.scheduler.scheduler property)": [[285, "neural_compressor.experimental.scheduler.Scheduler.eval_func"]], "model (neural_compressor.experimental.scheduler.scheduler property)": [[285, "neural_compressor.experimental.scheduler.Scheduler.model"]], "neural_compressor.experimental.scheduler": [[285, "module-neural_compressor.experimental.scheduler"]], "train_func (neural_compressor.experimental.scheduler.scheduler property)": [[285, "neural_compressor.experimental.scheduler.Scheduler.train_func"]], "benchmark (class in neural_compressor)": [[286, "neural_compressor.Benchmark"]], "distillationconfig (class in neural_compressor)": [[286, "neural_compressor.DistillationConfig"]], "mixedprecisionconfig (class in neural_compressor)": [[286, "neural_compressor.MixedPrecisionConfig"]], "posttrainingquantconfig (class in neural_compressor)": [[286, "neural_compressor.PostTrainingQuantConfig"]], "quantizationawaretrainingconfig (class in neural_compressor)": [[286, "neural_compressor.QuantizationAwareTrainingConfig"]], "weightpruningconfig (class in neural_compressor)": [[286, "neural_compressor.WeightPruningConfig"]], "approach (neural_compressor.posttrainingquantconfig property)": [[286, "neural_compressor.PostTrainingQuantConfig.approach"]], "approach (neural_compressor.quantizationawaretrainingconfig property)": [[286, "neural_compressor.QuantizationAwareTrainingConfig.approach"]], "b_dataloader (neural_compressor.benchmark property)": [[286, "neural_compressor.Benchmark.b_dataloader"]], "b_func (neural_compressor.benchmark property)": [[286, "neural_compressor.Benchmark.b_func"]], "config_instance() (neural_compressor.benchmark method)": [[286, "neural_compressor.Benchmark.config_instance"]], "criterion (neural_compressor.distillationconfig property)": [[286, "neural_compressor.DistillationConfig.criterion"]], "generate_prefix() (neural_compressor.benchmark method)": [[286, "neural_compressor.Benchmark.generate_prefix"]], "model (neural_compressor.benchmark property)": [[286, "neural_compressor.Benchmark.model"]], "neural_compressor": [[286, "module-neural_compressor"]], "optimizer (neural_compressor.distillationconfig property)": [[286, "neural_compressor.DistillationConfig.optimizer"]], "precision (neural_compressor.mixedprecisionconfig property)": [[286, "neural_compressor.MixedPrecisionConfig.precision"]], "results (neural_compressor.benchmark property)": [[286, "neural_compressor.Benchmark.results"]], "run_instance() (neural_compressor.benchmark method)": [[286, "neural_compressor.Benchmark.run_instance"]], "set_random_seed() (in module neural_compressor)": [[286, "neural_compressor.set_random_seed"]], "set_tensorboard() (in module neural_compressor)": [[286, "neural_compressor.set_tensorboard"]], "set_workspace() (in module neural_compressor)": [[286, "neural_compressor.set_workspace"]], "summary_benchmark() (neural_compressor.benchmark method)": [[286, "neural_compressor.Benchmark.summary_benchmark"]], "teacher_model (neural_compressor.distillationconfig property)": [[286, "neural_compressor.DistillationConfig.teacher_model"]], "tuning_criterion (neural_compressor.posttrainingquantconfig property)": [[286, "neural_compressor.PostTrainingQuantConfig.tuning_criterion"]], "weight_compression (neural_compressor.weightpruningconfig property)": [[286, "neural_compressor.WeightPruningConfig.weight_compression"]], "bleu (class in neural_compressor.metric.bleu)": [[287, "neural_compressor.metric.bleu.BLEU"]], "unicoderegex (class in neural_compressor.metric.bleu)": [[287, "neural_compressor.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.metric.bleu)": [[287, "neural_compressor.metric.bleu.bleu_tokenize"]], "labels (neural_compressor.metric.bleu.bleu attribute)": [[287, "neural_compressor.metric.bleu.BLEU.labels"]], "neural_compressor.metric.bleu": [[287, "module-neural_compressor.metric.bleu"]], "nondigit_punct_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[287, "neural_compressor.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "predictions (neural_compressor.metric.bleu.bleu attribute)": [[287, "neural_compressor.metric.bleu.BLEU.predictions"]], "property_chars() (neural_compressor.metric.bleu.unicoderegex method)": [[287, "neural_compressor.metric.bleu.UnicodeRegex.property_chars"]], "punct_nondigit_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[287, "neural_compressor.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "reset() (neural_compressor.metric.bleu.bleu method)": [[287, "neural_compressor.metric.bleu.BLEU.reset"]], "result() (neural_compressor.metric.bleu.bleu method)": [[287, "neural_compressor.metric.bleu.BLEU.result"]], "symbol_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[287, "neural_compressor.metric.bleu.UnicodeRegex.symbol_re"]], "update() (neural_compressor.metric.bleu.bleu method)": [[287, "neural_compressor.metric.bleu.BLEU.update"]], "compute_bleu() (in module neural_compressor.metric.bleu_util)": [[288, "neural_compressor.metric.bleu_util.compute_bleu"]], "neural_compressor.metric.bleu_util": [[288, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[289, "module-neural_compressor.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.metric.coco_tools)": [[290, "neural_compressor.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.metric.coco_tools)": [[290, "neural_compressor.metric.coco_tools.COCOWrapper"]], "computemetrics() (neural_compressor.metric.coco_tools.cocoevalwrapper method)": [[290, "neural_compressor.metric.coco_tools.COCOEvalWrapper.ComputeMetrics"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.metric.coco_tools)": [[290, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.metric.coco_tools)": [[290, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.metric.coco_tools)": [[290, "neural_compressor.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "getagnosticmode() (neural_compressor.metric.coco_tools.cocoevalwrapper method)": [[290, "neural_compressor.metric.coco_tools.COCOEvalWrapper.GetAgnosticMode"]], "getcategory() (neural_compressor.metric.coco_tools.cocoevalwrapper method)": [[290, "neural_compressor.metric.coco_tools.COCOEvalWrapper.GetCategory"]], "getcategoryidlist() (neural_compressor.metric.coco_tools.cocoevalwrapper method)": [[290, "neural_compressor.metric.coco_tools.COCOEvalWrapper.GetCategoryIdList"]], "loadannotations() (neural_compressor.metric.coco_tools.cocowrapper method)": [[290, "neural_compressor.metric.coco_tools.COCOWrapper.LoadAnnotations"]], "accumulate() (neural_compressor.metric.coco_tools.cocoevalwrapper method)": [[290, "neural_compressor.metric.coco_tools.COCOEvalWrapper.accumulate"]], "dataset (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[290, "neural_compressor.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[290, "neural_compressor.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.metric.coco_tools": [[290, "module-neural_compressor.metric.coco_tools"]], "evaluate() (in module neural_compressor.metric.evaluate_squad)": [[291, "neural_compressor.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.metric.evaluate_squad)": [[291, "neural_compressor.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.metric.evaluate_squad)": [[291, "neural_compressor.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.evaluate_squad)": [[291, "neural_compressor.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.metric.evaluate_squad": [[291, "module-neural_compressor.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.metric.f1)": [[292, "neural_compressor.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.metric.f1)": [[292, "neural_compressor.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.f1)": [[292, "neural_compressor.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[292, "module-neural_compressor.metric.f1"]], "normalize_answer() (in module neural_compressor.metric.f1)": [[292, "neural_compressor.metric.f1.normalize_answer"]], "basemetric (class in neural_compressor.metric)": [[293, "neural_compressor.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.metric)": [[293, "neural_compressor.metric.COCOmAPv2"]], "generaltopk (class in neural_compressor.metric)": [[293, "neural_compressor.metric.GeneralTopK"]], "metrics (class in neural_compressor.metric)": [[293, "neural_compressor.metric.METRICS"]], "metric (class in neural_compressor.metric)": [[293, "neural_compressor.metric.Metric"]], "squadf1 (class in neural_compressor.metric)": [[293, "neural_compressor.metric.SquadF1"]], "tensorflowtopk (class in neural_compressor.metric)": [[293, "neural_compressor.metric.TensorflowTopK"]], "hvd (neural_compressor.metric.basemetric property)": [[293, "neural_compressor.metric.BaseMetric.hvd"]], "k (neural_compressor.metric.generaltopk attribute)": [[293, "neural_compressor.metric.GeneralTopK.k"]], "k (neural_compressor.metric.tensorflowtopk attribute)": [[293, "neural_compressor.metric.TensorflowTopK.k"]], "metric (neural_compressor.metric.basemetric property)": [[293, "neural_compressor.metric.BaseMetric.metric"]], "metric_registry() (in module neural_compressor.metric)": [[293, "neural_compressor.metric.metric_registry"]], "metrics (neural_compressor.metric.metrics attribute)": [[293, "neural_compressor.metric.METRICS.metrics"]], "neural_compressor.metric": [[293, "module-neural_compressor.metric"]], "num_correct (neural_compressor.metric.generaltopk attribute)": [[293, "neural_compressor.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.metric.tensorflowtopk attribute)": [[293, "neural_compressor.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.metric.generaltopk attribute)": [[293, "neural_compressor.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.metric.tensorflowtopk attribute)": [[293, "neural_compressor.metric.TensorflowTopK.num_sample"]], "register() (neural_compressor.metric.metrics method)": [[293, "neural_compressor.metric.METRICS.register"]], "reset() (neural_compressor.metric.basemetric method)": [[293, "neural_compressor.metric.BaseMetric.reset"]], "reset() (neural_compressor.metric.cocomapv2 method)": [[293, "neural_compressor.metric.COCOmAPv2.reset"]], "reset() (neural_compressor.metric.generaltopk method)": [[293, "neural_compressor.metric.GeneralTopK.reset"]], "reset() (neural_compressor.metric.squadf1 method)": [[293, "neural_compressor.metric.SquadF1.reset"]], "reset() (neural_compressor.metric.tensorflowtopk method)": [[293, "neural_compressor.metric.TensorflowTopK.reset"]], "result() (neural_compressor.metric.basemetric method)": [[293, "neural_compressor.metric.BaseMetric.result"]], "result() (neural_compressor.metric.cocomapv2 method)": [[293, "neural_compressor.metric.COCOmAPv2.result"]], "result() (neural_compressor.metric.generaltopk method)": [[293, "neural_compressor.metric.GeneralTopK.result"]], "result() (neural_compressor.metric.squadf1 method)": [[293, "neural_compressor.metric.SquadF1.result"]], "result() (neural_compressor.metric.tensorflowtopk method)": [[293, "neural_compressor.metric.TensorflowTopK.result"]], "update() (neural_compressor.metric.basemetric method)": [[293, "neural_compressor.metric.BaseMetric.update"]], "update() (neural_compressor.metric.cocomapv2 method)": [[293, "neural_compressor.metric.COCOmAPv2.update"]], "update() (neural_compressor.metric.generaltopk method)": [[293, "neural_compressor.metric.GeneralTopK.update"]], "update() (neural_compressor.metric.squadf1 method)": [[293, "neural_compressor.metric.SquadF1.update"]], "update() (neural_compressor.metric.tensorflowtopk method)": [[293, "neural_compressor.metric.TensorflowTopK.update"]], "accuracy (class in neural_compressor.metric.metric)": [[294, "neural_compressor.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.metric.metric)": [[294, "neural_compressor.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.metric.metric)": [[294, "neural_compressor.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.metric.metric)": [[294, "neural_compressor.metric.metric.F1"]], "generaltopk (class in neural_compressor.metric.metric)": [[294, "neural_compressor.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.metric.metric)": [[294, "neural_compressor.metric.metric.Loss"]], "mae (class in neural_compressor.metric.metric)": [[294, "neural_compressor.metric.metric.MAE"]], "metrics (class in neural_compressor.metric.metric)": [[294, "neural_compressor.metric.metric.METRICS"]], "mse (class in neural_compressor.metric.metric)": [[294, "neural_compressor.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.metric.metric)": [[294, "neural_compressor.metric.metric.MXNetMetrics"]], "metric (class in neural_compressor.metric.metric)": [[294, "neural_compressor.metric.metric.Metric"]], "onnxrtglue (class in neural_compressor.metric.metric)": [[294, "neural_compressor.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.metric.metric)": [[294, "neural_compressor.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.metric.metric)": [[294, "neural_compressor.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.metric.metric)": [[294, "neural_compressor.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.metric.metric)": [[294, "neural_compressor.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.metric.metric)": [[294, "neural_compressor.metric.metric.RMSE"]], "roc (class in neural_compressor.metric.metric)": [[294, "neural_compressor.metric.metric.ROC"]], "squadf1 (class in neural_compressor.metric.metric)": [[294, "neural_compressor.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.metric.metric)": [[294, "neural_compressor.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.metric.metric)": [[294, "neural_compressor.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.metric.metric)": [[294, "neural_compressor.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.metric.metric)": [[294, "neural_compressor.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.metric.metric)": [[294, "neural_compressor.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.metric.metric)": [[294, "neural_compressor.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.metric.metric)": [[294, "neural_compressor.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.metric.metric)": [[294, "neural_compressor.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.metric.metric.mae attribute)": [[294, "neural_compressor.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.metric.metric.mse attribute)": [[294, "neural_compressor.metric.metric.MSE.compare_label"]], "compute() (neural_compressor.metric.metric.pytorchloss method)": [[294, "neural_compressor.metric.metric.PyTorchLoss.compute"]], "hvd (neural_compressor.metric.metric.basemetric property)": [[294, "neural_compressor.metric.metric.BaseMetric.hvd"]], "k (neural_compressor.metric.metric.generaltopk attribute)": [[294, "neural_compressor.metric.metric.GeneralTopK.k"]], "k (neural_compressor.metric.metric.tensorflowtopk attribute)": [[294, "neural_compressor.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.metric.metric.accuracy attribute)": [[294, "neural_compressor.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.metric.metric.mae attribute)": [[294, "neural_compressor.metric.metric.MAE.label_list"]], "label_list (neural_compressor.metric.metric.mse attribute)": [[294, "neural_compressor.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.metric.metric)": [[294, "neural_compressor.metric.metric.mIOU"]], "metric (neural_compressor.metric.metric.basemetric property)": [[294, "neural_compressor.metric.metric.BaseMetric.metric"]], "metric_registry() (in module neural_compressor.metric.metric)": [[294, "neural_compressor.metric.metric.metric_registry"]], "metrics (neural_compressor.metric.metric.metrics attribute)": [[294, "neural_compressor.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.metric.metric.mxnetmetrics attribute)": [[294, "neural_compressor.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtitmetrics attribute)": [[294, "neural_compressor.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtqlmetrics attribute)": [[294, "neural_compressor.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.metric.metric.pytorchmetrics attribute)": [[294, "neural_compressor.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.metric.metric.tensorflowmetrics attribute)": [[294, "neural_compressor.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.metric.metric.rmse attribute)": [[294, "neural_compressor.metric.metric.RMSE.mse"]], "neural_compressor.metric.metric": [[294, "module-neural_compressor.metric.metric"]], "num_correct (neural_compressor.metric.metric.generaltopk attribute)": [[294, "neural_compressor.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.metric.metric.tensorflowtopk attribute)": [[294, "neural_compressor.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.metric.metric.generaltopk attribute)": [[294, "neural_compressor.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.metric.metric.tensorflowtopk attribute)": [[294, "neural_compressor.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.metric.metric.accuracy attribute)": [[294, "neural_compressor.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.metric.metric.mae attribute)": [[294, "neural_compressor.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.metric.metric.mse attribute)": [[294, "neural_compressor.metric.metric.MSE.pred_list"]], "register() (neural_compressor.metric.metric.metrics method)": [[294, "neural_compressor.metric.metric.METRICS.register"]], "reset() (neural_compressor.metric.metric.accuracy method)": [[294, "neural_compressor.metric.metric.Accuracy.reset"]], "reset() (neural_compressor.metric.metric.basemetric method)": [[294, "neural_compressor.metric.metric.BaseMetric.reset"]], "reset() (neural_compressor.metric.metric.cocomapv2 method)": [[294, "neural_compressor.metric.metric.COCOmAPv2.reset"]], "reset() (neural_compressor.metric.metric.f1 method)": [[294, "neural_compressor.metric.metric.F1.reset"]], "reset() (neural_compressor.metric.metric.generaltopk method)": [[294, "neural_compressor.metric.metric.GeneralTopK.reset"]], "reset() (neural_compressor.metric.metric.loss method)": [[294, "neural_compressor.metric.metric.Loss.reset"]], "reset() (neural_compressor.metric.metric.mae method)": [[294, "neural_compressor.metric.metric.MAE.reset"]], "reset() (neural_compressor.metric.metric.mse method)": [[294, "neural_compressor.metric.metric.MSE.reset"]], "reset() (neural_compressor.metric.metric.onnxrtglue method)": [[294, "neural_compressor.metric.metric.ONNXRTGLUE.reset"]], "reset() (neural_compressor.metric.metric.pytorchloss method)": [[294, "neural_compressor.metric.metric.PyTorchLoss.reset"]], "reset() (neural_compressor.metric.metric.rmse method)": [[294, "neural_compressor.metric.metric.RMSE.reset"]], "reset() (neural_compressor.metric.metric.roc method)": [[294, "neural_compressor.metric.metric.ROC.reset"]], "reset() (neural_compressor.metric.metric.squadf1 method)": [[294, "neural_compressor.metric.metric.SquadF1.reset"]], "reset() (neural_compressor.metric.metric.tensorflowmap method)": [[294, "neural_compressor.metric.metric.TensorflowMAP.reset"]], "reset() (neural_compressor.metric.metric.tensorflowtopk method)": [[294, "neural_compressor.metric.metric.TensorflowTopK.reset"]], "reset() (neural_compressor.metric.metric.wrapmxnetmetric method)": [[294, "neural_compressor.metric.metric.WrapMXNetMetric.reset"]], "reset() (neural_compressor.metric.metric.wraponnxrtmetric method)": [[294, "neural_compressor.metric.metric.WrapONNXRTMetric.reset"]], "reset() (neural_compressor.metric.metric.wrappytorchmetric method)": [[294, "neural_compressor.metric.metric.WrapPyTorchMetric.reset"]], "reset() (neural_compressor.metric.metric.miou method)": [[294, "neural_compressor.metric.metric.mIOU.reset"]], "result() (neural_compressor.metric.metric.accuracy method)": [[294, "neural_compressor.metric.metric.Accuracy.result"]], "result() (neural_compressor.metric.metric.basemetric method)": [[294, "neural_compressor.metric.metric.BaseMetric.result"]], "result() (neural_compressor.metric.metric.cocomapv2 method)": [[294, "neural_compressor.metric.metric.COCOmAPv2.result"]], "result() (neural_compressor.metric.metric.f1 method)": [[294, "neural_compressor.metric.metric.F1.result"]], "result() (neural_compressor.metric.metric.generaltopk method)": [[294, "neural_compressor.metric.metric.GeneralTopK.result"]], "result() (neural_compressor.metric.metric.loss method)": [[294, "neural_compressor.metric.metric.Loss.result"]], "result() (neural_compressor.metric.metric.mae method)": [[294, "neural_compressor.metric.metric.MAE.result"]], "result() (neural_compressor.metric.metric.mse method)": [[294, "neural_compressor.metric.metric.MSE.result"]], "result() (neural_compressor.metric.metric.onnxrtglue method)": [[294, "neural_compressor.metric.metric.ONNXRTGLUE.result"]], "result() (neural_compressor.metric.metric.rmse method)": [[294, "neural_compressor.metric.metric.RMSE.result"]], "result() (neural_compressor.metric.metric.roc method)": [[294, "neural_compressor.metric.metric.ROC.result"]], "result() (neural_compressor.metric.metric.squadf1 method)": [[294, "neural_compressor.metric.metric.SquadF1.result"]], "result() (neural_compressor.metric.metric.tensorflowmap method)": [[294, "neural_compressor.metric.metric.TensorflowMAP.result"]], "result() (neural_compressor.metric.metric.tensorflowtopk method)": [[294, "neural_compressor.metric.metric.TensorflowTopK.result"]], "result() (neural_compressor.metric.metric.wrapmxnetmetric method)": [[294, "neural_compressor.metric.metric.WrapMXNetMetric.result"]], "result() (neural_compressor.metric.metric.wraponnxrtmetric method)": [[294, "neural_compressor.metric.metric.WrapONNXRTMetric.result"]], "result() (neural_compressor.metric.metric.wrappytorchmetric method)": [[294, "neural_compressor.metric.metric.WrapPyTorchMetric.result"]], "result() (neural_compressor.metric.metric.miou method)": [[294, "neural_compressor.metric.metric.mIOU.result"]], "sample (neural_compressor.metric.metric.accuracy attribute)": [[294, "neural_compressor.metric.metric.Accuracy.sample"]], "sample (neural_compressor.metric.metric.loss attribute)": [[294, "neural_compressor.metric.metric.Loss.sample"]], "sum (neural_compressor.metric.metric.loss attribute)": [[294, "neural_compressor.metric.metric.Loss.sum"]], "update() (neural_compressor.metric.metric.accuracy method)": [[294, "neural_compressor.metric.metric.Accuracy.update"]], "update() (neural_compressor.metric.metric.basemetric method)": [[294, "neural_compressor.metric.metric.BaseMetric.update"]], "update() (neural_compressor.metric.metric.cocomapv2 method)": [[294, "neural_compressor.metric.metric.COCOmAPv2.update"]], "update() (neural_compressor.metric.metric.f1 method)": [[294, "neural_compressor.metric.metric.F1.update"]], "update() (neural_compressor.metric.metric.generaltopk method)": [[294, "neural_compressor.metric.metric.GeneralTopK.update"]], "update() (neural_compressor.metric.metric.loss method)": [[294, "neural_compressor.metric.metric.Loss.update"]], "update() (neural_compressor.metric.metric.mae method)": [[294, "neural_compressor.metric.metric.MAE.update"]], "update() (neural_compressor.metric.metric.mse method)": [[294, "neural_compressor.metric.metric.MSE.update"]], "update() (neural_compressor.metric.metric.onnxrtglue method)": [[294, "neural_compressor.metric.metric.ONNXRTGLUE.update"]], "update() (neural_compressor.metric.metric.pytorchloss method)": [[294, "neural_compressor.metric.metric.PyTorchLoss.update"]], "update() (neural_compressor.metric.metric.rmse method)": [[294, "neural_compressor.metric.metric.RMSE.update"]], "update() (neural_compressor.metric.metric.roc method)": [[294, "neural_compressor.metric.metric.ROC.update"]], "update() (neural_compressor.metric.metric.squadf1 method)": [[294, "neural_compressor.metric.metric.SquadF1.update"]], "update() (neural_compressor.metric.metric.tensorflowmap method)": [[294, "neural_compressor.metric.metric.TensorflowMAP.update"]], "update() (neural_compressor.metric.metric.tensorflowtopk method)": [[294, "neural_compressor.metric.metric.TensorflowTopK.update"]], "update() (neural_compressor.metric.metric.wrapmxnetmetric method)": [[294, "neural_compressor.metric.metric.WrapMXNetMetric.update"]], "update() (neural_compressor.metric.metric.wraponnxrtmetric method)": [[294, "neural_compressor.metric.metric.WrapONNXRTMetric.update"]], "update() (neural_compressor.metric.metric.wrappytorchmetric method)": [[294, "neural_compressor.metric.metric.WrapPyTorchMetric.update"]], "update() (neural_compressor.metric.metric.miou method)": [[294, "neural_compressor.metric.metric.mIOU.update"]], "mixedprecision (class in neural_compressor.mix_precision)": [[295, "neural_compressor.mix_precision.MixedPrecision"]], "eval_dataloader (neural_compressor.mix_precision.mixedprecision property)": [[295, "neural_compressor.mix_precision.MixedPrecision.eval_dataloader"]], "eval_func (neural_compressor.mix_precision.mixedprecision property)": [[295, "neural_compressor.mix_precision.MixedPrecision.eval_func"]], "execute() (neural_compressor.mix_precision.mixedprecision method)": [[295, "neural_compressor.mix_precision.MixedPrecision.execute"]], "fit() (in module neural_compressor.mix_precision)": [[295, "neural_compressor.mix_precision.fit"]], "metric (neural_compressor.mix_precision.mixedprecision property)": [[295, "neural_compressor.mix_precision.MixedPrecision.metric"]], "model (neural_compressor.mix_precision.mixedprecision property)": [[295, "neural_compressor.mix_precision.MixedPrecision.model"]], "neural_compressor.mix_precision": [[295, "module-neural_compressor.mix_precision"]], "pre_process() (neural_compressor.mix_precision.mixedprecision method)": [[295, "neural_compressor.mix_precision.MixedPrecision.pre_process"]], "precisions (neural_compressor.mix_precision.mixedprecision property)": [[295, "neural_compressor.mix_precision.MixedPrecision.precisions"]], "basemodel (class in neural_compressor.model.base_model)": [[296, "neural_compressor.model.base_model.BaseModel"]], "export() (neural_compressor.model.base_model.basemodel method)": [[296, "neural_compressor.model.base_model.BaseModel.export"]], "framework() (neural_compressor.model.base_model.basemodel method)": [[296, "neural_compressor.model.base_model.BaseModel.framework"]], "graph_info (neural_compressor.model.base_model.basemodel property)": [[296, "neural_compressor.model.base_model.BaseModel.graph_info"]], "model (neural_compressor.model.base_model.basemodel property)": [[296, "neural_compressor.model.base_model.BaseModel.model"]], "neural_compressor.model.base_model": [[296, "module-neural_compressor.model.base_model"]], "save() (neural_compressor.model.base_model.basemodel method)": [[296, "neural_compressor.model.base_model.BaseModel.save"]], "basemodel (class in neural_compressor.model)": [[297, "neural_compressor.model.BaseModel"]], "model (class in neural_compressor.model)": [[297, "neural_compressor.model.Model"]], "export() (neural_compressor.model.basemodel method)": [[297, "neural_compressor.model.BaseModel.export"]], "framework() (neural_compressor.model.basemodel method)": [[297, "neural_compressor.model.BaseModel.framework"]], "graph_info (neural_compressor.model.basemodel property)": [[297, "neural_compressor.model.BaseModel.graph_info"]], "model (neural_compressor.model.basemodel property)": [[297, "neural_compressor.model.BaseModel.model"]], "neural_compressor.model": [[297, "module-neural_compressor.model"]], "save() (neural_compressor.model.basemodel method)": [[297, "neural_compressor.model.BaseModel.save"]], "kerasmodel (class in neural_compressor.model.keras_model)": [[298, "neural_compressor.model.keras_model.KerasModel"]], "framework() (neural_compressor.model.keras_model.kerasmodel method)": [[298, "neural_compressor.model.keras_model.KerasModel.framework"]], "get_all_weight_names() (neural_compressor.model.keras_model.kerasmodel method)": [[298, "neural_compressor.model.keras_model.KerasModel.get_all_weight_names"]], "graph_info (neural_compressor.model.keras_model.kerasmodel property)": [[298, "neural_compressor.model.keras_model.KerasModel.graph_info"]], "input_node_names (neural_compressor.model.keras_model.kerasmodel property)": [[298, "neural_compressor.model.keras_model.KerasModel.input_node_names"]], "model (neural_compressor.model.keras_model.kerasmodel property)": [[298, "neural_compressor.model.keras_model.KerasModel.model"]], "neural_compressor.model.keras_model": [[298, "module-neural_compressor.model.keras_model"]], "output_node_names (neural_compressor.model.keras_model.kerasmodel property)": [[298, "neural_compressor.model.keras_model.KerasModel.output_node_names"]], "q_config (neural_compressor.model.keras_model.kerasmodel property)": [[298, "neural_compressor.model.keras_model.KerasModel.q_config"]], "report_sparsity() (neural_compressor.model.keras_model.kerasmodel method)": [[298, "neural_compressor.model.keras_model.KerasModel.report_sparsity"]], "save() (neural_compressor.model.keras_model.kerasmodel method)": [[298, "neural_compressor.model.keras_model.KerasModel.save"]], "model (class in neural_compressor.model.model)": [[299, "neural_compressor.model.model.Model"]], "get_model_fwk_name() (in module neural_compressor.model.model)": [[299, "neural_compressor.model.model.get_model_fwk_name"]], "neural_compressor.model.model": [[299, "module-neural_compressor.model.model"]], "mxnetmodel (class in neural_compressor.model.mxnet_model)": [[300, "neural_compressor.model.mxnet_model.MXNetModel"]], "framework() (neural_compressor.model.mxnet_model.mxnetmodel method)": [[300, "neural_compressor.model.mxnet_model.MXNetModel.framework"]], "model (neural_compressor.model.mxnet_model.mxnetmodel property)": [[300, "neural_compressor.model.mxnet_model.MXNetModel.model"]], "neural_compressor.model.mxnet_model": [[300, "module-neural_compressor.model.mxnet_model"]], "save() (neural_compressor.model.mxnet_model.mxnetmodel method)": [[300, "neural_compressor.model.mxnet_model.MXNetModel.save"]], "tfslimnetsfactory (class in neural_compressor.model.nets_factory)": [[301, "neural_compressor.model.nets_factory.TFSlimNetsFactory"]], "neural_compressor.model.nets_factory": [[301, "module-neural_compressor.model.nets_factory"]], "register() (neural_compressor.model.nets_factory.tfslimnetsfactory method)": [[301, "neural_compressor.model.nets_factory.TFSlimNetsFactory.register"]], "onnxmodel (class in neural_compressor.model.onnx_model)": [[302, "neural_compressor.model.onnx_model.ONNXModel"]], "add_initializer() (neural_compressor.model.onnx_model.onnxmodel method)": [[302, "neural_compressor.model.onnx_model.ONNXModel.add_initializer"]], "add_initializers() (neural_compressor.model.onnx_model.onnxmodel method)": [[302, "neural_compressor.model.onnx_model.ONNXModel.add_initializers"]], "add_node() (neural_compressor.model.onnx_model.onnxmodel method)": [[302, "neural_compressor.model.onnx_model.ONNXModel.add_node"]], "add_nodes() (neural_compressor.model.onnx_model.onnxmodel method)": [[302, "neural_compressor.model.onnx_model.ONNXModel.add_nodes"]], "add_tensors_to_outputs() (neural_compressor.model.onnx_model.onnxmodel method)": [[302, "neural_compressor.model.onnx_model.ONNXModel.add_tensors_to_outputs"]], "export() (neural_compressor.model.onnx_model.onnxmodel method)": [[302, "neural_compressor.model.onnx_model.ONNXModel.export"]], "find_node_by_name() (neural_compressor.model.onnx_model.onnxmodel method)": [[302, "neural_compressor.model.onnx_model.ONNXModel.find_node_by_name"]], "find_nodes_by_initializer() (neural_compressor.model.onnx_model.onnxmodel method)": [[302, "neural_compressor.model.onnx_model.ONNXModel.find_nodes_by_initializer"]], "framework() (neural_compressor.model.onnx_model.onnxmodel method)": [[302, "neural_compressor.model.onnx_model.ONNXModel.framework"]], "get_children() (neural_compressor.model.onnx_model.onnxmodel method)": [[302, "neural_compressor.model.onnx_model.ONNXModel.get_children"]], "get_initializer() (neural_compressor.model.onnx_model.onnxmodel method)": [[302, "neural_compressor.model.onnx_model.ONNXModel.get_initializer"]], "get_nodes_chain() (neural_compressor.model.onnx_model.onnxmodel method)": [[302, "neural_compressor.model.onnx_model.ONNXModel.get_nodes_chain"]], "get_parent() (neural_compressor.model.onnx_model.onnxmodel method)": [[302, "neural_compressor.model.onnx_model.ONNXModel.get_parent"]], "get_parents() (neural_compressor.model.onnx_model.onnxmodel method)": [[302, "neural_compressor.model.onnx_model.ONNXModel.get_parents"]], "get_scale_zero() (neural_compressor.model.onnx_model.onnxmodel method)": [[302, "neural_compressor.model.onnx_model.ONNXModel.get_scale_zero"]], "get_siblings() (neural_compressor.model.onnx_model.onnxmodel method)": [[302, "neural_compressor.model.onnx_model.ONNXModel.get_siblings"]], "graph() (neural_compressor.model.onnx_model.onnxmodel method)": [[302, "neural_compressor.model.onnx_model.ONNXModel.graph"]], "graph_info (neural_compressor.model.onnx_model.onnxmodel property)": [[302, "neural_compressor.model.onnx_model.ONNXModel.graph_info"]], "initializer() (neural_compressor.model.onnx_model.onnxmodel method)": [[302, "neural_compressor.model.onnx_model.ONNXModel.initializer"]], "input() (neural_compressor.model.onnx_model.onnxmodel method)": [[302, "neural_compressor.model.onnx_model.ONNXModel.input"]], "input_name_to_nodes (neural_compressor.model.onnx_model.onnxmodel property)": [[302, "neural_compressor.model.onnx_model.ONNXModel.input_name_to_nodes"]], "ir_version() (neural_compressor.model.onnx_model.onnxmodel method)": [[302, "neural_compressor.model.onnx_model.ONNXModel.ir_version"]], "is_large_model (neural_compressor.model.onnx_model.onnxmodel property)": [[302, "neural_compressor.model.onnx_model.ONNXModel.is_large_model"]], "match_first_parent() (neural_compressor.model.onnx_model.onnxmodel method)": [[302, "neural_compressor.model.onnx_model.ONNXModel.match_first_parent"]], "match_parent() (neural_compressor.model.onnx_model.onnxmodel method)": [[302, "neural_compressor.model.onnx_model.ONNXModel.match_parent"]], "match_parent_path() (neural_compressor.model.onnx_model.onnxmodel method)": [[302, "neural_compressor.model.onnx_model.ONNXModel.match_parent_path"]], "model (neural_compressor.model.onnx_model.onnxmodel property)": [[302, "neural_compressor.model.onnx_model.ONNXModel.model"]], "model_path (neural_compressor.model.onnx_model.onnxmodel property)": [[302, "neural_compressor.model.onnx_model.ONNXModel.model_path"]], "neural_compressor.model.onnx_model": [[302, "module-neural_compressor.model.onnx_model"]], "nodes() (neural_compressor.model.onnx_model.onnxmodel method)": [[302, "neural_compressor.model.onnx_model.ONNXModel.nodes"]], "opset_import() (neural_compressor.model.onnx_model.onnxmodel method)": [[302, "neural_compressor.model.onnx_model.ONNXModel.opset_import"]], "output() (neural_compressor.model.onnx_model.onnxmodel method)": [[302, "neural_compressor.model.onnx_model.ONNXModel.output"]], "output_name_to_node (neural_compressor.model.onnx_model.onnxmodel property)": [[302, "neural_compressor.model.onnx_model.ONNXModel.output_name_to_node"]], "q_config (neural_compressor.model.onnx_model.onnxmodel property)": [[302, "neural_compressor.model.onnx_model.ONNXModel.q_config"]], "remove_initializer() (neural_compressor.model.onnx_model.onnxmodel method)": [[302, "neural_compressor.model.onnx_model.ONNXModel.remove_initializer"]], "remove_initializers() (neural_compressor.model.onnx_model.onnxmodel method)": [[302, "neural_compressor.model.onnx_model.ONNXModel.remove_initializers"]], "remove_node() (neural_compressor.model.onnx_model.onnxmodel method)": [[302, "neural_compressor.model.onnx_model.ONNXModel.remove_node"]], "remove_nodes() (neural_compressor.model.onnx_model.onnxmodel method)": [[302, "neural_compressor.model.onnx_model.ONNXModel.remove_nodes"]], "remove_tensors_from_outputs() (neural_compressor.model.onnx_model.onnxmodel method)": [[302, "neural_compressor.model.onnx_model.ONNXModel.remove_tensors_from_outputs"]], "remove_unused_constant() (neural_compressor.model.onnx_model.onnxmodel method)": [[302, "neural_compressor.model.onnx_model.ONNXModel.remove_unused_constant"]], "replace_input_of_all_nodes() (neural_compressor.model.onnx_model.onnxmodel method)": [[302, "neural_compressor.model.onnx_model.ONNXModel.replace_input_of_all_nodes"]], "replace_node_input() (neural_compressor.model.onnx_model.onnxmodel static method)": [[302, "neural_compressor.model.onnx_model.ONNXModel.replace_node_input"]], "replace_node_output() (neural_compressor.model.onnx_model.onnxmodel static method)": [[302, "neural_compressor.model.onnx_model.ONNXModel.replace_node_output"]], "replace_output_of_all_nodes() (neural_compressor.model.onnx_model.onnxmodel method)": [[302, "neural_compressor.model.onnx_model.ONNXModel.replace_output_of_all_nodes"]], "save() (neural_compressor.model.onnx_model.onnxmodel method)": [[302, "neural_compressor.model.onnx_model.ONNXModel.save"]], "save_model_to_file() (neural_compressor.model.onnx_model.onnxmodel method)": [[302, "neural_compressor.model.onnx_model.ONNXModel.save_model_to_file"]], "set_initializer() (neural_compressor.model.onnx_model.onnxmodel method)": [[302, "neural_compressor.model.onnx_model.ONNXModel.set_initializer"]], "topological_sort() (neural_compressor.model.onnx_model.onnxmodel method)": [[302, "neural_compressor.model.onnx_model.ONNXModel.topological_sort"]], "update() (neural_compressor.model.onnx_model.onnxmodel method)": [[302, "neural_compressor.model.onnx_model.ONNXModel.update"]], "tensorflowbasemodel (class in neural_compressor.model.tensorflow_model)": [[303, "neural_compressor.model.tensorflow_model.TensorflowBaseModel"]], "tensorflowcheckpointmodel (class in neural_compressor.model.tensorflow_model)": [[303, "neural_compressor.model.tensorflow_model.TensorflowCheckpointModel"]], "tensorflowmodel (class in neural_compressor.model.tensorflow_model)": [[303, "neural_compressor.model.tensorflow_model.TensorflowModel"]], "tensorflowqatmodel (class in neural_compressor.model.tensorflow_model)": [[303, "neural_compressor.model.tensorflow_model.TensorflowQATModel"]], "tensorflowsavedmodelmodel (class in neural_compressor.model.tensorflow_model)": [[303, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel"]], "build_saved_model() (neural_compressor.model.tensorflow_model.tensorflowsavedmodelmodel method)": [[303, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel.build_saved_model"]], "checkpoint_session() (in module neural_compressor.model.tensorflow_model)": [[303, "neural_compressor.model.tensorflow_model.checkpoint_session"]], "estimator_session() (in module neural_compressor.model.tensorflow_model)": [[303, "neural_compressor.model.tensorflow_model.estimator_session"]], "export() (neural_compressor.model.tensorflow_model.tensorflowbasemodel method)": [[303, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.export"]], "framework() (neural_compressor.model.tensorflow_model.tensorflowbasemodel method)": [[303, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.framework"]], "frozen_graph_def (neural_compressor.model.tensorflow_model.tensorflowqatmodel property)": [[303, "neural_compressor.model.tensorflow_model.TensorflowQATModel.frozen_graph_def"]], "frozen_pb_session() (in module neural_compressor.model.tensorflow_model)": [[303, "neural_compressor.model.tensorflow_model.frozen_pb_session"]], "get_all_weight_names() (neural_compressor.model.tensorflow_model.tensorflowsavedmodelmodel method)": [[303, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel.get_all_weight_names"]], "get_model_type() (in module neural_compressor.model.tensorflow_model)": [[303, "neural_compressor.model.tensorflow_model.get_model_type"]], "get_weight() (neural_compressor.model.tensorflow_model.tensorflowsavedmodelmodel method)": [[303, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel.get_weight"]], "graph (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[303, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.graph"]], "graph_def (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[303, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.graph_def"]], "graph_def (neural_compressor.model.tensorflow_model.tensorflowcheckpointmodel property)": [[303, "neural_compressor.model.tensorflow_model.TensorflowCheckpointModel.graph_def"]], "graph_def_session() (in module neural_compressor.model.tensorflow_model)": [[303, "neural_compressor.model.tensorflow_model.graph_def_session"]], "graph_info (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[303, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.graph_info"]], "graph_session() (in module neural_compressor.model.tensorflow_model)": [[303, "neural_compressor.model.tensorflow_model.graph_session"]], "input_node_names (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[303, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.input_node_names"]], "input_tensor (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[303, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.input_tensor"]], "input_tensor_names (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[303, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.input_tensor_names"]], "iter_op (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[303, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.iter_op"]], "keras_session() (in module neural_compressor.model.tensorflow_model)": [[303, "neural_compressor.model.tensorflow_model.keras_session"]], "load_saved_model() (in module neural_compressor.model.tensorflow_model)": [[303, "neural_compressor.model.tensorflow_model.load_saved_model"]], "model (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[303, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.model"]], "model (neural_compressor.model.tensorflow_model.tensorflowcheckpointmodel property)": [[303, "neural_compressor.model.tensorflow_model.TensorflowCheckpointModel.model"]], "model (neural_compressor.model.tensorflow_model.tensorflowqatmodel property)": [[303, "neural_compressor.model.tensorflow_model.TensorflowQATModel.model"]], "model (neural_compressor.model.tensorflow_model.tensorflowsavedmodelmodel property)": [[303, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel.model"]], "model_type (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[303, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.model_type"]], "name (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[303, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.name"]], "neural_compressor.model.tensorflow_model": [[303, "module-neural_compressor.model.tensorflow_model"]], "output_node_names (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[303, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.output_node_names"]], "output_tensor (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[303, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.output_tensor"]], "output_tensor_names (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[303, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.output_tensor_names"]], "q_config (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[303, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.q_config"]], "report_sparsity() (neural_compressor.model.tensorflow_model.tensorflowsavedmodelmodel method)": [[303, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel.report_sparsity"]], "save() (neural_compressor.model.tensorflow_model.tensorflowbasemodel method)": [[303, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.save"]], "save() (neural_compressor.model.tensorflow_model.tensorflowqatmodel method)": [[303, "neural_compressor.model.tensorflow_model.TensorflowQATModel.save"]], "save() (neural_compressor.model.tensorflow_model.tensorflowsavedmodelmodel method)": [[303, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel.save"]], "saved_model_session() (in module neural_compressor.model.tensorflow_model)": [[303, "neural_compressor.model.tensorflow_model.saved_model_session"]], "sess (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[303, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.sess"]], "slim_session() (in module neural_compressor.model.tensorflow_model)": [[303, "neural_compressor.model.tensorflow_model.slim_session"]], "update_weights() (neural_compressor.model.tensorflow_model.tensorflowsavedmodelmodel method)": [[303, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel.update_weights"]], "validate_and_inference_input_output() (in module neural_compressor.model.tensorflow_model)": [[303, "neural_compressor.model.tensorflow_model.validate_and_inference_input_output"]], "validate_graph_node() (in module neural_compressor.model.tensorflow_model)": [[303, "neural_compressor.model.tensorflow_model.validate_graph_node"]], "weights (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[303, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.weights"]], "workspace_path (neural_compressor.model.tensorflow_model.tensorflowbasemodel property)": [[303, "neural_compressor.model.tensorflow_model.TensorflowBaseModel.workspace_path"]], "ipexmodel (class in neural_compressor.model.torch_model)": [[304, "neural_compressor.model.torch_model.IPEXModel"]], "pytorchbasemodel (class in neural_compressor.model.torch_model)": [[304, "neural_compressor.model.torch_model.PyTorchBaseModel"]], "pytorchfxmodel (class in neural_compressor.model.torch_model)": [[304, "neural_compressor.model.torch_model.PyTorchFXModel"]], "pytorchmodel (class in neural_compressor.model.torch_model)": [[304, "neural_compressor.model.torch_model.PyTorchModel"]], "export() (neural_compressor.model.torch_model.pytorchmodel method)": [[304, "neural_compressor.model.torch_model.PyTorchModel.export"]], "forward() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[304, "neural_compressor.model.torch_model.PyTorchBaseModel.forward"]], "fp32_model (neural_compressor.model.torch_model.pytorchbasemodel property)": [[304, "neural_compressor.model.torch_model.PyTorchBaseModel.fp32_model"]], "framework() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[304, "neural_compressor.model.torch_model.PyTorchBaseModel.framework"]], "generate_forward_pre_hook() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[304, "neural_compressor.model.torch_model.PyTorchBaseModel.generate_forward_pre_hook"]], "get_all_weight_names() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[304, "neural_compressor.model.torch_model.PyTorchBaseModel.get_all_weight_names"]], "get_gradient() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[304, "neural_compressor.model.torch_model.PyTorchBaseModel.get_gradient"]], "get_inputs() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[304, "neural_compressor.model.torch_model.PyTorchBaseModel.get_inputs"]], "get_weight() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[304, "neural_compressor.model.torch_model.PyTorchBaseModel.get_weight"]], "graph_info (neural_compressor.model.torch_model.pytorchmodel property)": [[304, "neural_compressor.model.torch_model.PyTorchModel.graph_info"]], "load_quantized_state_dict() (neural_compressor.model.torch_model.pytorchmodel method)": [[304, "neural_compressor.model.torch_model.PyTorchModel.load_quantized_state_dict"]], "model (neural_compressor.model.torch_model.pytorchbasemodel property)": [[304, "neural_compressor.model.torch_model.PyTorchBaseModel.model"]], "neural_compressor.model.torch_model": [[304, "module-neural_compressor.model.torch_model"]], "prune_weights_() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[304, "neural_compressor.model.torch_model.PyTorchBaseModel.prune_weights_"]], "quantized_state_dict() (neural_compressor.model.torch_model.pytorchmodel method)": [[304, "neural_compressor.model.torch_model.PyTorchModel.quantized_state_dict"]], "register_forward_pre_hook() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[304, "neural_compressor.model.torch_model.PyTorchBaseModel.register_forward_pre_hook"]], "remove_hooks() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[304, "neural_compressor.model.torch_model.PyTorchBaseModel.remove_hooks"]], "report_sparsity() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[304, "neural_compressor.model.torch_model.PyTorchBaseModel.report_sparsity"]], "save() (neural_compressor.model.torch_model.ipexmodel method)": [[304, "neural_compressor.model.torch_model.IPEXModel.save"]], "save() (neural_compressor.model.torch_model.pytorchmodel method)": [[304, "neural_compressor.model.torch_model.PyTorchModel.save"]], "update_gradient() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[304, "neural_compressor.model.torch_model.PyTorchBaseModel.update_gradient"]], "update_weights() (neural_compressor.model.torch_model.pytorchbasemodel method)": [[304, "neural_compressor.model.torch_model.PyTorchBaseModel.update_weights"]], "workspace_path (neural_compressor.model.torch_model.ipexmodel property)": [[304, "neural_compressor.model.torch_model.IPEXModel.workspace_path"]], "workspace_path (neural_compressor.model.torch_model.pytorchmodel property)": [[304, "neural_compressor.model.torch_model.PyTorchModel.workspace_path"]], "accuracy (class in neural_compressor.objective)": [[305, "neural_compressor.objective.Accuracy"]], "footprint (class in neural_compressor.objective)": [[305, "neural_compressor.objective.Footprint"]], "modelsize (class in neural_compressor.objective)": [[305, "neural_compressor.objective.ModelSize"]], "multiobjective (class in neural_compressor.objective)": [[305, "neural_compressor.objective.MultiObjective"]], "objective (class in neural_compressor.objective)": [[305, "neural_compressor.objective.Objective"]], "performance (class in neural_compressor.objective)": [[305, "neural_compressor.objective.Performance"]], "accuracy_meet_req() (neural_compressor.objective.multiobjective method)": [[305, "neural_compressor.objective.MultiObjective.accuracy_meet_req"]], "accuracy_meets() (neural_compressor.objective.multiobjective method)": [[305, "neural_compressor.objective.MultiObjective.accuracy_meets"]], "accuracy_target (neural_compressor.objective.multiobjective property)": [[305, "neural_compressor.objective.MultiObjective.accuracy_target"]], "baseline (neural_compressor.objective.multiobjective property)": [[305, "neural_compressor.objective.MultiObjective.baseline"]], "best_result() (neural_compressor.objective.multiobjective method)": [[305, "neural_compressor.objective.MultiObjective.best_result"]], "compare() (neural_compressor.objective.multiobjective method)": [[305, "neural_compressor.objective.MultiObjective.compare"]], "end() (neural_compressor.objective.accuracy method)": [[305, "neural_compressor.objective.Accuracy.end"]], "end() (neural_compressor.objective.footprint method)": [[305, "neural_compressor.objective.Footprint.end"]], "end() (neural_compressor.objective.modelsize method)": [[305, "neural_compressor.objective.ModelSize.end"]], "end() (neural_compressor.objective.multiobjective method)": [[305, "neural_compressor.objective.MultiObjective.end"]], "end() (neural_compressor.objective.objective method)": [[305, "neural_compressor.objective.Objective.end"]], "end() (neural_compressor.objective.performance method)": [[305, "neural_compressor.objective.Performance.end"]], "evaluate() (neural_compressor.objective.multiobjective method)": [[305, "neural_compressor.objective.MultiObjective.evaluate"]], "model (neural_compressor.objective.objective property)": [[305, "neural_compressor.objective.Objective.model"]], "neural_compressor.objective": [[305, "module-neural_compressor.objective"]], "objective_custom_registry() (in module neural_compressor.objective)": [[305, "neural_compressor.objective.objective_custom_registry"]], "objective_registry() (in module neural_compressor.objective)": [[305, "neural_compressor.objective.objective_registry"]], "reset() (neural_compressor.objective.multiobjective method)": [[305, "neural_compressor.objective.MultiObjective.reset"]], "reset() (neural_compressor.objective.objective method)": [[305, "neural_compressor.objective.Objective.reset"]], "result() (neural_compressor.objective.multiobjective method)": [[305, "neural_compressor.objective.MultiObjective.result"]], "result() (neural_compressor.objective.objective method)": [[305, "neural_compressor.objective.Objective.result"]], "result_list() (neural_compressor.objective.objective method)": [[305, "neural_compressor.objective.Objective.result_list"]], "set_model() (neural_compressor.objective.multiobjective method)": [[305, "neural_compressor.objective.MultiObjective.set_model"]], "start() (neural_compressor.objective.accuracy method)": [[305, "neural_compressor.objective.Accuracy.start"]], "start() (neural_compressor.objective.footprint method)": [[305, "neural_compressor.objective.Footprint.start"]], "start() (neural_compressor.objective.modelsize method)": [[305, "neural_compressor.objective.ModelSize.start"]], "start() (neural_compressor.objective.multiobjective method)": [[305, "neural_compressor.objective.MultiObjective.start"]], "start() (neural_compressor.objective.objective method)": [[305, "neural_compressor.objective.Objective.start"]], "start() (neural_compressor.objective.performance method)": [[305, "neural_compressor.objective.Performance.start"]], "posttrainingquant (class in neural_compressor.quantization)": [[306, "neural_compressor.quantization.PostTrainingQuant"]], "calib_dataloader (neural_compressor.quantization.posttrainingquant property)": [[306, "neural_compressor.quantization.PostTrainingQuant.calib_dataloader"]], "calib_func (neural_compressor.quantization.posttrainingquant property)": [[306, "neural_compressor.quantization.PostTrainingQuant.calib_func"]], "eval_dataloader (neural_compressor.quantization.posttrainingquant property)": [[306, "neural_compressor.quantization.PostTrainingQuant.eval_dataloader"]], "eval_func (neural_compressor.quantization.posttrainingquant property)": [[306, "neural_compressor.quantization.PostTrainingQuant.eval_func"]], "execute() (neural_compressor.quantization.posttrainingquant method)": [[306, "neural_compressor.quantization.PostTrainingQuant.execute"]], "fit() (in module neural_compressor.quantization)": [[306, "neural_compressor.quantization.fit"]], "metric (neural_compressor.quantization.posttrainingquant property)": [[306, "neural_compressor.quantization.PostTrainingQuant.metric"]], "model (neural_compressor.quantization.posttrainingquant property)": [[306, "neural_compressor.quantization.PostTrainingQuant.model"]], "neural_compressor.quantization": [[306, "module-neural_compressor.quantization"]], "pre_proccess() (neural_compressor.quantization.posttrainingquant method)": [[306, "neural_compressor.quantization.PostTrainingQuant.pre_proccess"]], "autotunestrategy (class in neural_compressor.strategy.auto)": [[307, "neural_compressor.strategy.auto.AutoTuneStrategy"]], "neural_compressor.strategy.auto": [[307, "module-neural_compressor.strategy.auto"]], "next_tune_cfg() (neural_compressor.strategy.auto.autotunestrategy method)": [[307, "neural_compressor.strategy.auto.AutoTuneStrategy.next_tune_cfg"]], "sequential_traverse() (neural_compressor.strategy.auto.autotunestrategy method)": [[307, "neural_compressor.strategy.auto.AutoTuneStrategy.sequential_traverse"]], "traverse() (neural_compressor.strategy.auto.autotunestrategy method)": [[307, "neural_compressor.strategy.auto.AutoTuneStrategy.traverse"]], "automixedprecisiontunestrategy (class in neural_compressor.strategy.auto_mixed_precision)": [[308, "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[308, "module-neural_compressor.strategy.auto_mixed_precision"]], "next_tune_cfg() (neural_compressor.strategy.auto_mixed_precision.automixedprecisiontunestrategy method)": [[308, "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy.next_tune_cfg"]], "traverse() (neural_compressor.strategy.auto_mixed_precision.automixedprecisiontunestrategy method)": [[308, "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy.traverse"]], "basictunestrategy (class in neural_compressor.strategy.basic)": [[309, "neural_compressor.strategy.basic.BasicTuneStrategy"]], "distributed_next_tune_cfg_lst() (neural_compressor.strategy.basic.basictunestrategy method)": [[309, "neural_compressor.strategy.basic.BasicTuneStrategy.distributed_next_tune_cfg_lst"]], "neural_compressor.strategy.basic": [[309, "module-neural_compressor.strategy.basic"]], "next_tune_cfg() (neural_compressor.strategy.basic.basictunestrategy method)": [[309, "neural_compressor.strategy.basic.BasicTuneStrategy.next_tune_cfg"]], "bayesianoptimization (class in neural_compressor.strategy.bayesian)": [[310, "neural_compressor.strategy.bayesian.BayesianOptimization"]], "bayesiantunestrategy (class in neural_compressor.strategy.bayesian)": [[310, "neural_compressor.strategy.bayesian.BayesianTuneStrategy"]], "targetspace (class in neural_compressor.strategy.bayesian)": [[310, "neural_compressor.strategy.bayesian.TargetSpace"]], "acq_max() (in module neural_compressor.strategy.bayesian)": [[310, "neural_compressor.strategy.bayesian.acq_max"]], "array_to_params() (neural_compressor.strategy.bayesian.targetspace method)": [[310, "neural_compressor.strategy.bayesian.TargetSpace.array_to_params"]], "bounds (neural_compressor.strategy.bayesian.targetspace property)": [[310, "neural_compressor.strategy.bayesian.TargetSpace.bounds"]], "dim (neural_compressor.strategy.bayesian.targetspace property)": [[310, "neural_compressor.strategy.bayesian.TargetSpace.dim"]], "empty (neural_compressor.strategy.bayesian.targetspace property)": [[310, "neural_compressor.strategy.bayesian.TargetSpace.empty"]], "gen_next_params() (neural_compressor.strategy.bayesian.bayesianoptimization method)": [[310, "neural_compressor.strategy.bayesian.BayesianOptimization.gen_next_params"]], "get_target() (neural_compressor.strategy.bayesian.targetspace method)": [[310, "neural_compressor.strategy.bayesian.TargetSpace.get_target"]], "keys (neural_compressor.strategy.bayesian.targetspace property)": [[310, "neural_compressor.strategy.bayesian.TargetSpace.keys"]], "max (neural_compressor.strategy.bayesian.bayesianoptimization property)": [[310, "neural_compressor.strategy.bayesian.BayesianOptimization.max"]], "max() (neural_compressor.strategy.bayesian.targetspace method)": [[310, "neural_compressor.strategy.bayesian.TargetSpace.max"]], "neural_compressor.strategy.bayesian": [[310, "module-neural_compressor.strategy.bayesian"]], "next_tune_cfg() (neural_compressor.strategy.bayesian.bayesiantunestrategy method)": [[310, "neural_compressor.strategy.bayesian.BayesianTuneStrategy.next_tune_cfg"]], "params (neural_compressor.strategy.bayesian.targetspace property)": [[310, "neural_compressor.strategy.bayesian.TargetSpace.params"]], "params_to_array() (neural_compressor.strategy.bayesian.targetspace method)": [[310, "neural_compressor.strategy.bayesian.TargetSpace.params_to_array"]], "random_sample() (neural_compressor.strategy.bayesian.targetspace method)": [[310, "neural_compressor.strategy.bayesian.TargetSpace.random_sample"]], "register() (neural_compressor.strategy.bayesian.targetspace method)": [[310, "neural_compressor.strategy.bayesian.TargetSpace.register"]], "res (neural_compressor.strategy.bayesian.bayesianoptimization property)": [[310, "neural_compressor.strategy.bayesian.BayesianOptimization.res"]], "res() (neural_compressor.strategy.bayesian.targetspace method)": [[310, "neural_compressor.strategy.bayesian.TargetSpace.res"]], "space (neural_compressor.strategy.bayesian.bayesianoptimization property)": [[310, "neural_compressor.strategy.bayesian.BayesianOptimization.space"]], "suggest() (neural_compressor.strategy.bayesian.bayesianoptimization method)": [[310, "neural_compressor.strategy.bayesian.BayesianOptimization.suggest"]], "target (neural_compressor.strategy.bayesian.targetspace property)": [[310, "neural_compressor.strategy.bayesian.TargetSpace.target"]], "conservativetunestrategy (class in neural_compressor.strategy.conservative)": [[311, "neural_compressor.strategy.conservative.ConservativeTuneStrategy"]], "neural_compressor.strategy.conservative": [[311, "module-neural_compressor.strategy.conservative"]], "next_tune_cfg() (neural_compressor.strategy.conservative.conservativetunestrategy method)": [[311, "neural_compressor.strategy.conservative.ConservativeTuneStrategy.next_tune_cfg"]], "exhaustivetunestrategy (class in neural_compressor.strategy.exhaustive)": [[312, "neural_compressor.strategy.exhaustive.ExhaustiveTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[312, "module-neural_compressor.strategy.exhaustive"]], "next_tune_cfg() (neural_compressor.strategy.exhaustive.exhaustivetunestrategy method)": [[312, "neural_compressor.strategy.exhaustive.ExhaustiveTuneStrategy.next_tune_cfg"]], "hawq_v2tunestrategy (class in neural_compressor.strategy.hawq_v2)": [[313, "neural_compressor.strategy.hawq_v2.HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.hawq_v2": [[313, "module-neural_compressor.strategy.hawq_v2"]], "next_tune_cfg() (neural_compressor.strategy.hawq_v2.hawq_v2tunestrategy method)": [[313, "neural_compressor.strategy.hawq_v2.HAWQ_V2TuneStrategy.next_tune_cfg"]], "neural_compressor.strategy": [[314, "module-neural_compressor.strategy"]], "msetunestrategy (class in neural_compressor.strategy.mse)": [[315, "neural_compressor.strategy.mse.MSETuneStrategy"]], "mse_impact_lst() (neural_compressor.strategy.mse.msetunestrategy method)": [[315, "neural_compressor.strategy.mse.MSETuneStrategy.mse_impact_lst"]], "neural_compressor.strategy.mse": [[315, "module-neural_compressor.strategy.mse"]], "next_tune_cfg() (neural_compressor.strategy.mse.msetunestrategy method)": [[315, "neural_compressor.strategy.mse.MSETuneStrategy.next_tune_cfg"]], "mse_v2tunestrategy (class in neural_compressor.strategy.mse_v2)": [[316, "neural_compressor.strategy.mse_v2.MSE_V2TuneStrategy"]], "neural_compressor.strategy.mse_v2": [[316, "module-neural_compressor.strategy.mse_v2"]], "next_tune_cfg() (neural_compressor.strategy.mse_v2.mse_v2tunestrategy method)": [[316, "neural_compressor.strategy.mse_v2.MSE_V2TuneStrategy.next_tune_cfg"]], "randomtunestrategy (class in neural_compressor.strategy.random)": [[317, "neural_compressor.strategy.random.RandomTuneStrategy"]], "neural_compressor.strategy.random": [[317, "module-neural_compressor.strategy.random"]], "next_tune_cfg() (neural_compressor.strategy.random.randomtunestrategy method)": [[317, "neural_compressor.strategy.random.RandomTuneStrategy.next_tune_cfg"]], "tunestrategy (class in neural_compressor.strategy.strategy)": [[318, "neural_compressor.strategy.strategy.TuneStrategy"]], "apply_all_tuning_recipes() (neural_compressor.strategy.strategy.tunestrategy method)": [[318, "neural_compressor.strategy.strategy.TuneStrategy.apply_all_tuning_recipes"]], "apply_recipe_one_by_one() (neural_compressor.strategy.strategy.tunestrategy method)": [[318, "neural_compressor.strategy.strategy.TuneStrategy.apply_recipe_one_by_one"]], "deploy_config() (neural_compressor.strategy.strategy.tunestrategy method)": [[318, "neural_compressor.strategy.strategy.TuneStrategy.deploy_config"]], "distributed_next_tune_cfg_lst() (neural_compressor.strategy.strategy.tunestrategy method)": [[318, "neural_compressor.strategy.strategy.TuneStrategy.distributed_next_tune_cfg_lst"]], "distributed_traverse() (neural_compressor.strategy.strategy.tunestrategy method)": [[318, "neural_compressor.strategy.strategy.TuneStrategy.distributed_traverse"]], "evaluation_result (neural_compressor.strategy.strategy.tunestrategy property)": [[318, "neural_compressor.strategy.strategy.TuneStrategy.evaluation_result"]], "initial_best_acc() (neural_compressor.strategy.strategy.tunestrategy method)": [[318, "neural_compressor.strategy.strategy.TuneStrategy.initial_best_acc"]], "initial_tuning_cfg() (neural_compressor.strategy.strategy.tunestrategy method)": [[318, "neural_compressor.strategy.strategy.TuneStrategy.initial_tuning_cfg"]], "master_worker_handle() (neural_compressor.strategy.strategy.tunestrategy method)": [[318, "neural_compressor.strategy.strategy.TuneStrategy.master_worker_handle"]], "meet_acc_req() (neural_compressor.strategy.strategy.tunestrategy method)": [[318, "neural_compressor.strategy.strategy.TuneStrategy.meet_acc_req"]], "neural_compressor.strategy.strategy": [[318, "module-neural_compressor.strategy.strategy"]], "next_tune_cfg() (neural_compressor.strategy.strategy.tunestrategy method)": [[318, "neural_compressor.strategy.strategy.TuneStrategy.next_tune_cfg"]], "set_param_for_post_quantization_algos() (neural_compressor.strategy.strategy.tunestrategy method)": [[318, "neural_compressor.strategy.strategy.TuneStrategy.set_param_for_post_quantization_algos"]], "set_param_for_pre_quantization_algos() (neural_compressor.strategy.strategy.tunestrategy method)": [[318, "neural_compressor.strategy.strategy.TuneStrategy.set_param_for_pre_quantization_algos"]], "set_q_func() (neural_compressor.strategy.strategy.tunestrategy method)": [[318, "neural_compressor.strategy.strategy.TuneStrategy.set_q_func"]], "set_tuning_space() (neural_compressor.strategy.strategy.tunestrategy method)": [[318, "neural_compressor.strategy.strategy.TuneStrategy.set_tuning_space"]], "setup_resume() (neural_compressor.strategy.strategy.tunestrategy method)": [[318, "neural_compressor.strategy.strategy.TuneStrategy.setup_resume"]], "show_baseline_info() (neural_compressor.strategy.strategy.tunestrategy method)": [[318, "neural_compressor.strategy.strategy.TuneStrategy.show_baseline_info"]], "slave_worker_handle() (neural_compressor.strategy.strategy.tunestrategy method)": [[318, "neural_compressor.strategy.strategy.TuneStrategy.slave_worker_handle"]], "stop() (neural_compressor.strategy.strategy.tunestrategy method)": [[318, "neural_compressor.strategy.strategy.TuneStrategy.stop"]], "strategy_registry() (in module neural_compressor.strategy.strategy)": [[318, "neural_compressor.strategy.strategy.strategy_registry"]], "traverse() (neural_compressor.strategy.strategy.tunestrategy method)": [[318, "neural_compressor.strategy.strategy.TuneStrategy.traverse"]], "update_best_op_tuning_cfg() (neural_compressor.strategy.strategy.tunestrategy method)": [[318, "neural_compressor.strategy.strategy.TuneStrategy.update_best_op_tuning_cfg"]], "neural_compressor.strategy.utils.constant": [[319, "module-neural_compressor.strategy.utils.constant"]], "fallbacktuningsampler (class in neural_compressor.strategy.utils)": [[320, "neural_compressor.strategy.utils.FallbackTuningSampler"]], "optuningconfig (class in neural_compressor.strategy.utils)": [[320, "neural_compressor.strategy.utils.OpTuningConfig"]], "optypewisetuningsampler (class in neural_compressor.strategy.utils)": [[320, "neural_compressor.strategy.utils.OpTypeWiseTuningSampler"]], "opwisetuningsampler (class in neural_compressor.strategy.utils)": [[320, "neural_compressor.strategy.utils.OpWiseTuningSampler"]], "tuningitem (class in neural_compressor.strategy.utils)": [[320, "neural_compressor.strategy.utils.TuningItem"]], "tuningsampler (class in neural_compressor.strategy.utils)": [[320, "neural_compressor.strategy.utils.TuningSampler"]], "tuningspace (class in neural_compressor.strategy.utils)": [[320, "neural_compressor.strategy.utils.TuningSpace"]], "append() (neural_compressor.strategy.utils.tuningitem method)": [[320, "neural_compressor.strategy.utils.TuningItem.append"]], "from_state() (neural_compressor.strategy.utils.optuningconfig class method)": [[320, "neural_compressor.strategy.utils.OpTuningConfig.from_state"]], "get_default_config() (neural_compressor.strategy.utils.tuningspace method)": [[320, "neural_compressor.strategy.utils.TuningSpace.get_default_config"]], "get_default_full_path() (neural_compressor.strategy.utils.tuningspace method)": [[320, "neural_compressor.strategy.utils.TuningSpace.get_default_full_path"]], "get_details() (neural_compressor.strategy.utils.tuningitem method)": [[320, "neural_compressor.strategy.utils.TuningItem.get_details"]], "get_item_by_path() (neural_compressor.strategy.utils.tuningspace method)": [[320, "neural_compressor.strategy.utils.TuningSpace.get_item_by_path"]], "get_op_default_path_by_pattern() (neural_compressor.strategy.utils.tuningspace method)": [[320, "neural_compressor.strategy.utils.TuningSpace.get_op_default_path_by_pattern"]], "get_option_by_name() (neural_compressor.strategy.utils.tuningitem method)": [[320, "neural_compressor.strategy.utils.TuningItem.get_option_by_name"]], "get_options_name() (neural_compressor.strategy.utils.tuningitem method)": [[320, "neural_compressor.strategy.utils.TuningItem.get_options_name"]], "get_opwise_candidate() (neural_compressor.strategy.utils.opwisetuningsampler method)": [[320, "neural_compressor.strategy.utils.OpWiseTuningSampler.get_opwise_candidate"]], "get_state() (neural_compressor.strategy.utils.optuningconfig method)": [[320, "neural_compressor.strategy.utils.OpTuningConfig.get_state"]], "neural_compressor.strategy.utils": [[320, "module-neural_compressor.strategy.utils"]], "options (neural_compressor.strategy.utils.tuningitem property)": [[320, "neural_compressor.strategy.utils.TuningItem.options"]], "query_item_option() (neural_compressor.strategy.utils.tuningspace method)": [[320, "neural_compressor.strategy.utils.TuningSpace.query_item_option"]], "query_items_by_quant_mode() (neural_compressor.strategy.utils.tuningspace method)": [[320, "neural_compressor.strategy.utils.TuningSpace.query_items_by_quant_mode"]], "query_quant_mode_item_by_full_path() (neural_compressor.strategy.utils.tuningspace method)": [[320, "neural_compressor.strategy.utils.TuningSpace.query_quant_mode_item_by_full_path"]], "remove() (neural_compressor.strategy.utils.tuningitem method)": [[320, "neural_compressor.strategy.utils.TuningItem.remove"]], "fallbacktuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[321, "neural_compressor.strategy.utils.tuning_sampler.FallbackTuningSampler"]], "modelwisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[321, "neural_compressor.strategy.utils.tuning_sampler.ModelWiseTuningSampler"]], "optypewisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[321, "neural_compressor.strategy.utils.tuning_sampler.OpTypeWiseTuningSampler"]], "opwisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[321, "neural_compressor.strategy.utils.tuning_sampler.OpWiseTuningSampler"]], "smoothquantsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[321, "neural_compressor.strategy.utils.tuning_sampler.SmoothQuantSampler"]], "tuningorder (class in neural_compressor.strategy.utils.tuning_sampler)": [[321, "neural_compressor.strategy.utils.tuning_sampler.TuningOrder"]], "tuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[321, "neural_compressor.strategy.utils.tuning_sampler.TuningSampler"]], "tuningsamplerregistry (class in neural_compressor.strategy.utils.tuning_sampler)": [[321, "neural_compressor.strategy.utils.tuning_sampler.TuningSamplerRegistry"]], "get_opwise_candidate() (neural_compressor.strategy.utils.tuning_sampler.opwisetuningsampler method)": [[321, "neural_compressor.strategy.utils.tuning_sampler.OpWiseTuningSampler.get_opwise_candidate"]], "neural_compressor.strategy.utils.tuning_sampler": [[321, "module-neural_compressor.strategy.utils.tuning_sampler"]], "register() (neural_compressor.strategy.utils.tuning_sampler.tuningsamplerregistry class method)": [[321, "neural_compressor.strategy.utils.tuning_sampler.TuningSamplerRegistry.register"]], "tuningitem (class in neural_compressor.strategy.utils.tuning_space)": [[322, "neural_compressor.strategy.utils.tuning_space.TuningItem"]], "tuningspace (class in neural_compressor.strategy.utils.tuning_space)": [[322, "neural_compressor.strategy.utils.tuning_space.TuningSpace"]], "append() (neural_compressor.strategy.utils.tuning_space.tuningitem method)": [[322, "neural_compressor.strategy.utils.tuning_space.TuningItem.append"]], "get_default_config() (neural_compressor.strategy.utils.tuning_space.tuningspace method)": [[322, "neural_compressor.strategy.utils.tuning_space.TuningSpace.get_default_config"]], "get_default_full_path() (neural_compressor.strategy.utils.tuning_space.tuningspace method)": [[322, "neural_compressor.strategy.utils.tuning_space.TuningSpace.get_default_full_path"]], "get_details() (neural_compressor.strategy.utils.tuning_space.tuningitem method)": [[322, "neural_compressor.strategy.utils.tuning_space.TuningItem.get_details"]], "get_item_by_path() (neural_compressor.strategy.utils.tuning_space.tuningspace method)": [[322, "neural_compressor.strategy.utils.tuning_space.TuningSpace.get_item_by_path"]], "get_op_default_path_by_pattern() (neural_compressor.strategy.utils.tuning_space.tuningspace method)": [[322, "neural_compressor.strategy.utils.tuning_space.TuningSpace.get_op_default_path_by_pattern"]], "get_op_mode_by_query_order() (in module neural_compressor.strategy.utils.tuning_space)": [[322, "neural_compressor.strategy.utils.tuning_space.get_op_mode_by_query_order"]], "get_option_by_name() (neural_compressor.strategy.utils.tuning_space.tuningitem method)": [[322, "neural_compressor.strategy.utils.tuning_space.TuningItem.get_option_by_name"]], "get_options_name() (neural_compressor.strategy.utils.tuning_space.tuningitem method)": [[322, "neural_compressor.strategy.utils.tuning_space.TuningItem.get_options_name"]], "initial_tuning_cfg_with_quant_mode() (in module neural_compressor.strategy.utils.tuning_space)": [[322, "neural_compressor.strategy.utils.tuning_space.initial_tuning_cfg_with_quant_mode"]], "neural_compressor.strategy.utils.tuning_space": [[322, "module-neural_compressor.strategy.utils.tuning_space"]], "options (neural_compressor.strategy.utils.tuning_space.tuningitem property)": [[322, "neural_compressor.strategy.utils.tuning_space.TuningItem.options"]], "pattern_to_internal() (in module neural_compressor.strategy.utils.tuning_space)": [[322, "neural_compressor.strategy.utils.tuning_space.pattern_to_internal"]], "pattern_to_path() (in module neural_compressor.strategy.utils.tuning_space)": [[322, "neural_compressor.strategy.utils.tuning_space.pattern_to_path"]], "quant_mode_from_pattern() (in module neural_compressor.strategy.utils.tuning_space)": [[322, "neural_compressor.strategy.utils.tuning_space.quant_mode_from_pattern"]], "query_item_option() (neural_compressor.strategy.utils.tuning_space.tuningspace method)": [[322, "neural_compressor.strategy.utils.tuning_space.TuningSpace.query_item_option"]], "query_items_by_quant_mode() (neural_compressor.strategy.utils.tuning_space.tuningspace method)": [[322, "neural_compressor.strategy.utils.tuning_space.TuningSpace.query_items_by_quant_mode"]], "query_quant_mode_item_by_full_path() (neural_compressor.strategy.utils.tuning_space.tuningspace method)": [[322, "neural_compressor.strategy.utils.tuning_space.TuningSpace.query_quant_mode_item_by_full_path"]], "remove() (neural_compressor.strategy.utils.tuning_space.tuningitem method)": [[322, "neural_compressor.strategy.utils.tuning_space.TuningItem.remove"]], "optuningconfig (class in neural_compressor.strategy.utils.tuning_structs)": [[323, "neural_compressor.strategy.utils.tuning_structs.OpTuningConfig"]], "from_state() (neural_compressor.strategy.utils.tuning_structs.optuningconfig class method)": [[323, "neural_compressor.strategy.utils.tuning_structs.OpTuningConfig.from_state"]], "get_state() (neural_compressor.strategy.utils.tuning_structs.optuningconfig method)": [[323, "neural_compressor.strategy.utils.tuning_structs.OpTuningConfig.get_state"]], "neural_compressor.strategy.utils.tuning_structs": [[323, "module-neural_compressor.strategy.utils.tuning_structs"]], "ordereddefaultdict (class in neural_compressor.strategy.utils.utility)": [[324, "neural_compressor.strategy.utils.utility.OrderedDefaultDict"]], "extract_data_type() (in module neural_compressor.strategy.utils.utility)": [[324, "neural_compressor.strategy.utils.utility.extract_data_type"]], "get_adaptor_name() (in module neural_compressor.strategy.utils.utility)": [[324, "neural_compressor.strategy.utils.utility.get_adaptor_name"]], "neural_compressor.strategy.utils.utility": [[324, "module-neural_compressor.strategy.utils.utility"]], "reverted_data_type() (in module neural_compressor.strategy.utils.utility)": [[324, "neural_compressor.strategy.utils.utility.reverted_data_type"]], "callbacks (class in neural_compressor.training)": [[325, "neural_compressor.training.CallBacks"]], "compressionmanager (class in neural_compressor.training)": [[325, "neural_compressor.training.CompressionManager"]], "eval_dataloader (neural_compressor.training.compressionmanager property)": [[325, "neural_compressor.training.CompressionManager.eval_dataloader"]], "eval_func (neural_compressor.training.compressionmanager property)": [[325, "neural_compressor.training.CompressionManager.eval_func"]], "export() (neural_compressor.training.compressionmanager method)": [[325, "neural_compressor.training.CompressionManager.export"]], "fit() (in module neural_compressor.training)": [[325, "neural_compressor.training.fit"]], "fit() (neural_compressor.training.compressionmanager method)": [[325, "neural_compressor.training.CompressionManager.fit"]], "metric (neural_compressor.training.compressionmanager property)": [[325, "neural_compressor.training.CompressionManager.metric"]], "neural_compressor.training": [[325, "module-neural_compressor.training"]], "on_after_compute_loss() (neural_compressor.training.callbacks method)": [[325, "neural_compressor.training.CallBacks.on_after_compute_loss"]], "on_after_eval() (neural_compressor.training.callbacks method)": [[325, "neural_compressor.training.CallBacks.on_after_eval"]], "on_after_optimizer_step() (neural_compressor.training.callbacks method)": [[325, "neural_compressor.training.CallBacks.on_after_optimizer_step"]], "on_before_eval() (neural_compressor.training.callbacks method)": [[325, "neural_compressor.training.CallBacks.on_before_eval"]], "on_before_optimizer_step() (neural_compressor.training.callbacks method)": [[325, "neural_compressor.training.CallBacks.on_before_optimizer_step"]], "on_epoch_begin() (neural_compressor.training.callbacks method)": [[325, "neural_compressor.training.CallBacks.on_epoch_begin"]], "on_epoch_end() (neural_compressor.training.callbacks method)": [[325, "neural_compressor.training.CallBacks.on_epoch_end"]], "on_step_begin() (neural_compressor.training.callbacks method)": [[325, "neural_compressor.training.CallBacks.on_step_begin"]], "on_step_end() (neural_compressor.training.callbacks method)": [[325, "neural_compressor.training.CallBacks.on_step_end"]], "on_train_begin() (neural_compressor.training.callbacks method)": [[325, "neural_compressor.training.CallBacks.on_train_begin"]], "on_train_end() (neural_compressor.training.callbacks method)": [[325, "neural_compressor.training.CallBacks.on_train_end"]], "prepare_compression() (in module neural_compressor.training)": [[325, "neural_compressor.training.prepare_compression"]], "save() (neural_compressor.training.compressionmanager method)": [[325, "neural_compressor.training.CompressionManager.save"]], "train_func (neural_compressor.training.compressionmanager property)": [[325, "neural_compressor.training.CompressionManager.train_func"]], "layerhistogramcollector (class in neural_compressor.utils.collect_layer_histogram)": [[326, "neural_compressor.utils.collect_layer_histogram.LayerHistogramCollector"]], "collect() (neural_compressor.utils.collect_layer_histogram.layerhistogramcollector method)": [[326, "neural_compressor.utils.collect_layer_histogram.LayerHistogramCollector.collect"]], "neural_compressor.utils.collect_layer_histogram": [[326, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[327, "module-neural_compressor.utils.constant"]], "create_dataloader() (in module neural_compressor.utils.create_obj_from_config)": [[328, "neural_compressor.utils.create_obj_from_config.create_dataloader"]], "create_dataset() (in module neural_compressor.utils.create_obj_from_config)": [[328, "neural_compressor.utils.create_obj_from_config.create_dataset"]], "create_eval_func() (in module neural_compressor.utils.create_obj_from_config)": [[328, "neural_compressor.utils.create_obj_from_config.create_eval_func"]], "create_train_func() (in module neural_compressor.utils.create_obj_from_config)": [[328, "neural_compressor.utils.create_obj_from_config.create_train_func"]], "get_algorithm() (in module neural_compressor.utils.create_obj_from_config)": [[328, "neural_compressor.utils.create_obj_from_config.get_algorithm"]], "get_func_from_config() (in module neural_compressor.utils.create_obj_from_config)": [[328, "neural_compressor.utils.create_obj_from_config.get_func_from_config"]], "get_metrics() (in module neural_compressor.utils.create_obj_from_config)": [[328, "neural_compressor.utils.create_obj_from_config.get_metrics"]], "get_postprocess() (in module neural_compressor.utils.create_obj_from_config)": [[328, "neural_compressor.utils.create_obj_from_config.get_postprocess"]], "get_preprocess() (in module neural_compressor.utils.create_obj_from_config)": [[328, "neural_compressor.utils.create_obj_from_config.get_preprocess"]], "neural_compressor.utils.create_obj_from_config": [[328, "module-neural_compressor.utils.create_obj_from_config"]], "layerhistogramcollector (class in neural_compressor.utils)": [[329, "neural_compressor.utils.LayerHistogramCollector"]], "collect() (neural_compressor.utils.layerhistogramcollector method)": [[329, "neural_compressor.utils.LayerHistogramCollector.collect"]], "debug() (in module neural_compressor.utils)": [[329, "neural_compressor.utils.debug"]], "error() (in module neural_compressor.utils)": [[329, "neural_compressor.utils.error"]], "fatal() (in module neural_compressor.utils)": [[329, "neural_compressor.utils.fatal"]], "info() (in module neural_compressor.utils)": [[329, "neural_compressor.utils.info"]], "log() (in module neural_compressor.utils)": [[329, "neural_compressor.utils.log"]], "neural_compressor.utils": [[329, "module-neural_compressor.utils"]], "set_random_seed() (in module neural_compressor.utils)": [[329, "neural_compressor.utils.set_random_seed"]], "warn() (in module neural_compressor.utils)": [[329, "neural_compressor.utils.warn"]], "warning() (in module neural_compressor.utils)": [[329, "neural_compressor.utils.warning"]], "kl_divergence (class in neural_compressor.utils.kl_divergence)": [[330, "neural_compressor.utils.kl_divergence.KL_Divergence"]], "expand_quantized_bins() (neural_compressor.utils.kl_divergence.kl_divergence method)": [[330, "neural_compressor.utils.kl_divergence.KL_Divergence.expand_quantized_bins"]], "get_threshold() (neural_compressor.utils.kl_divergence.kl_divergence method)": [[330, "neural_compressor.utils.kl_divergence.KL_Divergence.get_threshold"]], "neural_compressor.utils.kl_divergence": [[330, "module-neural_compressor.utils.kl_divergence"]], "safe_entropy() (neural_compressor.utils.kl_divergence.kl_divergence method)": [[330, "neural_compressor.utils.kl_divergence.KL_Divergence.safe_entropy"]], "optimizedmodel (class in neural_compressor.utils.load_huggingface)": [[331, "neural_compressor.utils.load_huggingface.OptimizedModel"]], "from_pretrained() (neural_compressor.utils.load_huggingface.optimizedmodel class method)": [[331, "neural_compressor.utils.load_huggingface.OptimizedModel.from_pretrained"]], "neural_compressor.utils.load_huggingface": [[331, "module-neural_compressor.utils.load_huggingface"]], "save_for_huggingface_upstream() (in module neural_compressor.utils.load_huggingface)": [[331, "neural_compressor.utils.load_huggingface.save_for_huggingface_upstream"]], "logger (class in neural_compressor.utils.logger)": [[332, "neural_compressor.utils.logger.Logger"]], "debug() (in module neural_compressor.utils.logger)": [[332, "neural_compressor.utils.logger.debug"]], "error() (in module neural_compressor.utils.logger)": [[332, "neural_compressor.utils.logger.error"]], "fatal() (in module neural_compressor.utils.logger)": [[332, "neural_compressor.utils.logger.fatal"]], "get_logger() (neural_compressor.utils.logger.logger method)": [[332, "neural_compressor.utils.logger.Logger.get_logger"]], "info() (in module neural_compressor.utils.logger)": [[332, "neural_compressor.utils.logger.info"]], "log() (in module neural_compressor.utils.logger)": [[332, "neural_compressor.utils.logger.log"]], "neural_compressor.utils.logger": [[332, "module-neural_compressor.utils.logger"]], "warn() (in module neural_compressor.utils.logger)": [[332, "neural_compressor.utils.logger.warn"]], "warning() (in module neural_compressor.utils.logger)": [[332, "neural_compressor.utils.logger.warning"]], "neural_compressor.utils.options": [[333, "module-neural_compressor.utils.options"]], "onnxrt (class in neural_compressor.utils.options)": [[333, "neural_compressor.utils.options.onnxrt"]], "is_int8_model() (in module neural_compressor.utils.pytorch)": [[334, "neural_compressor.utils.pytorch.is_int8_model"]], "load() (in module neural_compressor.utils.pytorch)": [[334, "neural_compressor.utils.pytorch.load"]], "neural_compressor.utils.pytorch": [[334, "module-neural_compressor.utils.pytorch"]], "captureoutputtofile (class in neural_compressor.utils.utility)": [[335, "neural_compressor.utils.utility.CaptureOutputToFile"]], "cpuinfo (class in neural_compressor.utils.utility)": [[335, "neural_compressor.utils.utility.CpuInfo"]], "dequantize() (in module neural_compressor.utils.utility)": [[335, "neural_compressor.utils.utility.Dequantize"]], "dequantizeweight() (in module neural_compressor.utils.utility)": [[335, "neural_compressor.utils.utility.DequantizeWeight"]], "global_state (class in neural_compressor.utils.utility)": [[335, "neural_compressor.utils.utility.GLOBAL_STATE"]], "lazyimport (class in neural_compressor.utils.utility)": [[335, "neural_compressor.utils.utility.LazyImport"]], "mode (class in neural_compressor.utils.utility)": [[335, "neural_compressor.utils.utility.MODE"]], "statistics (class in neural_compressor.utils.utility)": [[335, "neural_compressor.utils.utility.Statistics"]], "bf16 (neural_compressor.utils.utility.cpuinfo property)": [[335, "neural_compressor.utils.utility.CpuInfo.bf16"]], "combine_histogram() (in module neural_compressor.utils.utility)": [[335, "neural_compressor.utils.utility.combine_histogram"]], "compute_sparsity() (in module neural_compressor.utils.utility)": [[335, "neural_compressor.utils.utility.compute_sparsity"]], "cores_per_socket (neural_compressor.utils.utility.cpuinfo property)": [[335, "neural_compressor.utils.utility.CpuInfo.cores_per_socket"]], "dump_data_to_local() (in module neural_compressor.utils.utility)": [[335, "neural_compressor.utils.utility.dump_data_to_local"]], "dump_elapsed_time() (in module neural_compressor.utils.utility)": [[335, "neural_compressor.utils.utility.dump_elapsed_time"]], "equal_dicts() (in module neural_compressor.utils.utility)": [[335, "neural_compressor.utils.utility.equal_dicts"]], "fault_tolerant_file() (in module neural_compressor.utils.utility)": [[335, "neural_compressor.utils.utility.fault_tolerant_file"]], "get_all_fp32_data() (in module neural_compressor.utils.utility)": [[335, "neural_compressor.utils.utility.get_all_fp32_data"]], "get_number_of_sockets() (neural_compressor.utils.utility.cpuinfo method)": [[335, "neural_compressor.utils.utility.CpuInfo.get_number_of_sockets"]], "get_size() (in module neural_compressor.utils.utility)": [[335, "neural_compressor.utils.utility.get_size"]], "get_tensor_histogram() (in module neural_compressor.utils.utility)": [[335, "neural_compressor.utils.utility.get_tensor_histogram"]], "get_tuning_history() (in module neural_compressor.utils.utility)": [[335, "neural_compressor.utils.utility.get_tuning_history"]], "load_data_from_pkl() (in module neural_compressor.utils.utility)": [[335, "neural_compressor.utils.utility.load_data_from_pkl"]], "neural_compressor.utils.utility": [[335, "module-neural_compressor.utils.utility"]], "print_stat() (neural_compressor.utils.utility.statistics method)": [[335, "neural_compressor.utils.utility.Statistics.print_stat"]], "recover() (in module neural_compressor.utils.utility)": [[335, "neural_compressor.utils.utility.recover"]], "set_random_seed() (in module neural_compressor.utils.utility)": [[335, "neural_compressor.utils.utility.set_random_seed"]], "set_resume_from() (in module neural_compressor.utils.utility)": [[335, "neural_compressor.utils.utility.set_resume_from"]], "set_tensorboard() (in module neural_compressor.utils.utility)": [[335, "neural_compressor.utils.utility.set_tensorboard"]], "set_workspace() (in module neural_compressor.utils.utility)": [[335, "neural_compressor.utils.utility.set_workspace"]], "show_memory_info() (in module neural_compressor.utils.utility)": [[335, "neural_compressor.utils.utility.show_memory_info"]], "singleton() (in module neural_compressor.utils.utility)": [[335, "neural_compressor.utils.utility.singleton"]], "str2array() (in module neural_compressor.utils.utility)": [[335, "neural_compressor.utils.utility.str2array"]], "time_limit() (in module neural_compressor.utils.utility)": [[335, "neural_compressor.utils.utility.time_limit"]], "version1_eq_version2() (in module neural_compressor.utils.utility)": [[335, "neural_compressor.utils.utility.version1_eq_version2"]], "version1_gt_version2() (in module neural_compressor.utils.utility)": [[335, "neural_compressor.utils.utility.version1_gt_version2"]], "version1_gte_version2() (in module neural_compressor.utils.utility)": [[335, "neural_compressor.utils.utility.version1_gte_version2"]], "version1_lt_version2() (in module neural_compressor.utils.utility)": [[335, "neural_compressor.utils.utility.version1_lt_version2"]], "version1_lte_version2() (in module neural_compressor.utils.utility)": [[335, "neural_compressor.utils.utility.version1_lte_version2"]], "vnni (neural_compressor.utils.utility.cpuinfo property)": [[335, "neural_compressor.utils.utility.CpuInfo.vnni"]], "benchmark (class in neural_compressor.ux.components.benchmark.benchmark)": [[336, "neural_compressor.ux.components.benchmark.benchmark.Benchmark"]], "dataloaderinterface (class in neural_compressor.ux.components.benchmark.benchmark)": [[336, "neural_compressor.ux.components.benchmark.benchmark.DataloaderInterface"]], "config_filename (neural_compressor.ux.components.benchmark.benchmark.benchmark property)": [[336, "neural_compressor.ux.components.benchmark.benchmark.Benchmark.config_filename"]], "configuration_data (neural_compressor.ux.components.benchmark.benchmark.benchmark property)": [[336, "neural_compressor.ux.components.benchmark.benchmark.Benchmark.configuration_data"]], "execute() (neural_compressor.ux.components.benchmark.benchmark.benchmark method)": [[336, "neural_compressor.ux.components.benchmark.benchmark.Benchmark.execute"]], "generate_config() (neural_compressor.ux.components.benchmark.benchmark.benchmark method)": [[336, "neural_compressor.ux.components.benchmark.benchmark.Benchmark.generate_config"]], "neural_compressor.ux.components.benchmark.benchmark": [[336, "module-neural_compressor.ux.components.benchmark.benchmark"]], "workdir (neural_compressor.ux.components.benchmark.benchmark.benchmark property)": [[336, "neural_compressor.ux.components.benchmark.benchmark.Benchmark.workdir"]], "benchmark_model() (in module neural_compressor.ux.components.benchmark.benchmark_model)": [[337, "neural_compressor.ux.components.benchmark.benchmark_model.benchmark_model"]], "neural_compressor.ux.components.benchmark.benchmark_model": [[337, "module-neural_compressor.ux.components.benchmark.benchmark_model"]], "parse_args() (in module neural_compressor.ux.components.benchmark.benchmark_model)": [[337, "neural_compressor.ux.components.benchmark.benchmark_model.parse_args"]], "set_eager_execution() (in module neural_compressor.ux.components.benchmark.benchmark_model)": [[337, "neural_compressor.ux.components.benchmark.benchmark_model.set_eager_execution"]], "benchmark_result_update() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[338, "neural_compressor.ux.components.benchmark.execute_benchmark.benchmark_result_update"]], "benchmark_result_update_pytorch_script() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[338, "neural_compressor.ux.components.benchmark.execute_benchmark.benchmark_result_update_pytorch_script"]], "execute_benchmark() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[338, "neural_compressor.ux.components.benchmark.execute_benchmark.execute_benchmark"]], "execute_real_benchmark() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[338, "neural_compressor.ux.components.benchmark.execute_benchmark.execute_real_benchmark"]], "neural_compressor.ux.components.benchmark.execute_benchmark": [[338, "module-neural_compressor.ux.components.benchmark.execute_benchmark"]], "pytorch_script_bench_optimizations() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[338, "neural_compressor.ux.components.benchmark.execute_benchmark.pytorch_script_bench_optimizations"]], "pytorch_script_bench_original_model() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[338, "neural_compressor.ux.components.benchmark.execute_benchmark.pytorch_script_bench_original_model"]], "benchmarks (class in neural_compressor.ux.components.benchmark)": [[339, "neural_compressor.ux.components.benchmark.Benchmarks"]], "neural_compressor.ux.components.benchmark": [[339, "module-neural_compressor.ux.components.benchmark"]], "benchmarkconfiggenerator (class in neural_compressor.ux.components.config_generator.benchmark_config_generator)": [[340, "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.benchmark_config_generator.benchmarkconfiggenerator method)": [[340, "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator.generate"]], "generate_accuracy_config() (neural_compressor.ux.components.config_generator.benchmark_config_generator.benchmarkconfiggenerator method)": [[340, "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator.generate_accuracy_config"]], "generate_evaluation_config() (neural_compressor.ux.components.config_generator.benchmark_config_generator.benchmarkconfiggenerator method)": [[340, "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator.generate_evaluation_config"]], "generate_performance_config() (neural_compressor.ux.components.config_generator.benchmark_config_generator.benchmarkconfiggenerator method)": [[340, "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator.generate_performance_config"]], "neural_compressor.ux.components.config_generator.benchmark_config_generator": [[340, "module-neural_compressor.ux.components.config_generator.benchmark_config_generator"]], "configgenerator (class in neural_compressor.ux.components.config_generator.config_generator)": [[341, "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.config_generator.configgenerator method)": [[341, "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator.generate"]], "generate_dataloader_config() (neural_compressor.ux.components.config_generator.config_generator.configgenerator method)": [[341, "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator.generate_dataloader_config"]], "generate_model_config() (neural_compressor.ux.components.config_generator.config_generator.configgenerator method)": [[341, "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator.generate_model_config"]], "get_predefined_config_path() (neural_compressor.ux.components.config_generator.config_generator.configgenerator method)": [[341, "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator.get_predefined_config_path"]], "neural_compressor.ux.components.config_generator.config_generator": [[341, "module-neural_compressor.ux.components.config_generator.config_generator"]], "graphoptimizationconfiggenerator (class in neural_compressor.ux.components.config_generator.graph_optimization_config_generator)": [[342, "neural_compressor.ux.components.config_generator.graph_optimization_config_generator.GraphOptimizationConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.graph_optimization_config_generator.graphoptimizationconfiggenerator method)": [[342, "neural_compressor.ux.components.config_generator.graph_optimization_config_generator.GraphOptimizationConfigGenerator.generate"]], "generate_evaluation_config() (neural_compressor.ux.components.config_generator.graph_optimization_config_generator.graphoptimizationconfiggenerator method)": [[342, "neural_compressor.ux.components.config_generator.graph_optimization_config_generator.GraphOptimizationConfigGenerator.generate_evaluation_config"]], "generate_graph_optimization_config() (neural_compressor.ux.components.config_generator.graph_optimization_config_generator.graphoptimizationconfiggenerator method)": [[342, "neural_compressor.ux.components.config_generator.graph_optimization_config_generator.GraphOptimizationConfigGenerator.generate_graph_optimization_config"]], "neural_compressor.ux.components.config_generator.graph_optimization_config_generator": [[342, "module-neural_compressor.ux.components.config_generator.graph_optimization_config_generator"]], "neural_compressor.ux.components.config_generator": [[343, "module-neural_compressor.ux.components.config_generator"]], "mixedprecisionconfiggenerator (class in neural_compressor.ux.components.config_generator.mixed_precision_config_generator)": [[344, "neural_compressor.ux.components.config_generator.mixed_precision_config_generator.MixedPrecisionConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.mixed_precision_config_generator.mixedprecisionconfiggenerator method)": [[344, "neural_compressor.ux.components.config_generator.mixed_precision_config_generator.MixedPrecisionConfigGenerator.generate"]], "generate_evaluation_config() (neural_compressor.ux.components.config_generator.mixed_precision_config_generator.mixedprecisionconfiggenerator method)": [[344, "neural_compressor.ux.components.config_generator.mixed_precision_config_generator.MixedPrecisionConfigGenerator.generate_evaluation_config"]], "generate_mixed_precision_config() (neural_compressor.ux.components.config_generator.mixed_precision_config_generator.mixedprecisionconfiggenerator method)": [[344, "neural_compressor.ux.components.config_generator.mixed_precision_config_generator.MixedPrecisionConfigGenerator.generate_mixed_precision_config"]], "neural_compressor.ux.components.config_generator.mixed_precision_config_generator": [[344, "module-neural_compressor.ux.components.config_generator.mixed_precision_config_generator"]], "profilingconfiggenerator (class in neural_compressor.ux.components.config_generator.profiling_config_generator)": [[345, "neural_compressor.ux.components.config_generator.profiling_config_generator.ProfilingConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.profiling_config_generator.profilingconfiggenerator method)": [[345, "neural_compressor.ux.components.config_generator.profiling_config_generator.ProfilingConfigGenerator.generate"]], "neural_compressor.ux.components.config_generator.profiling_config_generator": [[345, "module-neural_compressor.ux.components.config_generator.profiling_config_generator"]], "pruningconfiggenerator (class in neural_compressor.ux.components.config_generator.pruning_config_generator)": [[346, "neural_compressor.ux.components.config_generator.pruning_config_generator.PruningConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.pruning_config_generator.pruningconfiggenerator method)": [[346, "neural_compressor.ux.components.config_generator.pruning_config_generator.PruningConfigGenerator.generate"]], "generate_evaluation_config() (neural_compressor.ux.components.config_generator.pruning_config_generator.pruningconfiggenerator method)": [[346, "neural_compressor.ux.components.config_generator.pruning_config_generator.PruningConfigGenerator.generate_evaluation_config"]], "generate_pruning_config() (neural_compressor.ux.components.config_generator.pruning_config_generator.pruningconfiggenerator method)": [[346, "neural_compressor.ux.components.config_generator.pruning_config_generator.PruningConfigGenerator.generate_pruning_config"]], "neural_compressor.ux.components.config_generator.pruning_config_generator": [[346, "module-neural_compressor.ux.components.config_generator.pruning_config_generator"]], "quantizationconfiggenerator (class in neural_compressor.ux.components.config_generator.quantization_config_generator)": [[347, "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator"]], "generate() (neural_compressor.ux.components.config_generator.quantization_config_generator.quantizationconfiggenerator method)": [[347, "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator.generate"]], "generate_evaluation_config() (neural_compressor.ux.components.config_generator.quantization_config_generator.quantizationconfiggenerator method)": [[347, "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator.generate_evaluation_config"]], "generate_quantization_config() (neural_compressor.ux.components.config_generator.quantization_config_generator.quantizationconfiggenerator method)": [[347, "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator.generate_quantization_config"]], "generate_tuning_config() (neural_compressor.ux.components.config_generator.quantization_config_generator.quantizationconfiggenerator method)": [[347, "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator.generate_tuning_config"]], "neural_compressor.ux.components.config_generator.quantization_config_generator": [[347, "module-neural_compressor.ux.components.config_generator.quantization_config_generator"]], "configurationparser (class in neural_compressor.ux.components.configuration_wizard.configuration_parser)": [[348, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser"]], "get_param_type() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser method)": [[348, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.get_param_type"]], "neural_compressor.ux.components.configuration_wizard.configuration_parser": [[348, "module-neural_compressor.ux.components.configuration_wizard.configuration_parser"]], "normalize_string_list() (in module neural_compressor.ux.components.configuration_wizard.configuration_parser)": [[348, "neural_compressor.ux.components.configuration_wizard.configuration_parser.normalize_string_list"]], "parse() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser method)": [[348, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.parse"]], "parse_dataloader() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser method)": [[348, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.parse_dataloader"]], "parse_evaluation_data() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser method)": [[348, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.parse_evaluation_data"]], "parse_list_value() (in module neural_compressor.ux.components.configuration_wizard.configuration_parser)": [[348, "neural_compressor.ux.components.configuration_wizard.configuration_parser.parse_list_value"]], "parse_metric() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser method)": [[348, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.parse_metric"]], "parse_multidim_list() (in module neural_compressor.ux.components.configuration_wizard.configuration_parser)": [[348, "neural_compressor.ux.components.configuration_wizard.configuration_parser.parse_multidim_list"]], "parse_transforms() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser method)": [[348, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.parse_transforms"]], "parse_value() (neural_compressor.ux.components.configuration_wizard.configuration_parser.configurationparser static method)": [[348, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser.parse_value"]], "get_boundary_nodes() (in module neural_compressor.ux.components.configuration_wizard.get_boundary_nodes)": [[349, "neural_compressor.ux.components.configuration_wizard.get_boundary_nodes.get_boundary_nodes"]], "neural_compressor.ux.components.configuration_wizard.get_boundary_nodes": [[349, "module-neural_compressor.ux.components.configuration_wizard.get_boundary_nodes"]], "get_predefined_configuration() (in module neural_compressor.ux.components.configuration_wizard.get_configuration)": [[350, "neural_compressor.ux.components.configuration_wizard.get_configuration.get_predefined_configuration"]], "neural_compressor.ux.components.configuration_wizard.get_configuration": [[350, "module-neural_compressor.ux.components.configuration_wizard.get_configuration"]], "update_config_to_machine_specification() (in module neural_compressor.ux.components.configuration_wizard.get_configuration)": [[350, "neural_compressor.ux.components.configuration_wizard.get_configuration.update_config_to_machine_specification"]], "neural_compressor.ux.components.configuration_wizard": [[351, "module-neural_compressor.ux.components.configuration_wizard"]], "feeder (class in neural_compressor.ux.components.configuration_wizard.params_feeder)": [[352, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder"]], "feed() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[352, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.feed"]], "get_dataloaders() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[352, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_dataloaders"]], "get_domains() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[352, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_domains"]], "get_frameworks() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder static method)": [[352, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_frameworks"]], "get_metrics() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[352, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_metrics"]], "get_models() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[352, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_models"]], "get_objectives() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder static method)": [[352, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_objectives"]], "get_possible_values() (in module neural_compressor.ux.components.configuration_wizard.params_feeder)": [[352, "neural_compressor.ux.components.configuration_wizard.params_feeder.get_possible_values"]], "get_precisions() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[352, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_precisions"]], "get_quantization_approaches() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[352, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_quantization_approaches"]], "get_strategies() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder static method)": [[352, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_strategies"]], "get_transforms() (neural_compressor.ux.components.configuration_wizard.params_feeder.feeder method)": [[352, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder.get_transforms"]], "neural_compressor.ux.components.configuration_wizard.params_feeder": [[352, "module-neural_compressor.ux.components.configuration_wizard.params_feeder"]], "pruningconfigparser (class in neural_compressor.ux.components.configuration_wizard.pruning_config_parser)": [[353, "neural_compressor.ux.components.configuration_wizard.pruning_config_parser.PruningConfigParser"]], "generate_tree() (neural_compressor.ux.components.configuration_wizard.pruning_config_parser.pruningconfigparser method)": [[353, "neural_compressor.ux.components.configuration_wizard.pruning_config_parser.PruningConfigParser.generate_tree"]], "neural_compressor.ux.components.configuration_wizard.pruning_config_parser": [[353, "module-neural_compressor.ux.components.configuration_wizard.pruning_config_parser"]], "parse() (neural_compressor.ux.components.configuration_wizard.pruning_config_parser.pruningconfigparser method)": [[353, "neural_compressor.ux.components.configuration_wizard.pruning_config_parser.PruningConfigParser.parse"]], "parse_entry() (neural_compressor.ux.components.configuration_wizard.pruning_config_parser.pruningconfigparser method)": [[353, "neural_compressor.ux.components.configuration_wizard.pruning_config_parser.PruningConfigParser.parse_entry"]], "dbmanager (class in neural_compressor.ux.components.db_manager.db_manager)": [[354, "neural_compressor.ux.components.db_manager.db_manager.DBManager"]], "create_all() (neural_compressor.ux.components.db_manager.db_manager.dbmanager method)": [[354, "neural_compressor.ux.components.db_manager.db_manager.DBManager.create_all"]], "create_sqlalchemy_engine() (neural_compressor.ux.components.db_manager.db_manager.dbmanager method)": [[354, "neural_compressor.ux.components.db_manager.db_manager.DBManager.create_sqlalchemy_engine"]], "engine (neural_compressor.ux.components.db_manager.db_manager.dbmanager property)": [[354, "neural_compressor.ux.components.db_manager.db_manager.DBManager.engine"]], "initialize_database() (neural_compressor.ux.components.db_manager.db_manager.dbmanager method)": [[354, "neural_compressor.ux.components.db_manager.db_manager.DBManager.initialize_database"]], "neural_compressor.ux.components.db_manager.db_manager": [[354, "module-neural_compressor.ux.components.db_manager.db_manager"]], "benchmark (class in neural_compressor.ux.components.db_manager.db_models.benchmark)": [[355, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark"]], "add() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[355, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[355, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.build_info"]], "clean_status() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[355, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.clean_status"]], "delete_benchmark() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[355, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.delete_benchmark"]], "details() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[355, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.details"]], "list() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[355, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.list"]], "neural_compressor.ux.components.db_manager.db_models.benchmark": [[355, "module-neural_compressor.ux.components.db_manager.db_models.benchmark"]], "update_batch_size() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[355, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_batch_size"]], "update_config_path() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[355, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_config_path"]], "update_cores_per_instance() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[355, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_cores_per_instance"]], "update_dataset() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[355, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_dataset"]], "update_duration() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[355, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_duration"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[355, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_execution_command"]], "update_log_path() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[355, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_log_path"]], "update_mode() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[355, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_mode"]], "update_number_of_instance() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[355, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_number_of_instance"]], "update_status() (neural_compressor.ux.components.db_manager.db_models.benchmark.benchmark static method)": [[355, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark.update_status"]], "benchmarkresult (class in neural_compressor.ux.components.db_manager.db_models.benchmark_result)": [[356, "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult"]], "add() (neural_compressor.ux.components.db_manager.db_models.benchmark_result.benchmarkresult static method)": [[356, "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.benchmark_result.benchmarkresult static method)": [[356, "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult.build_info"]], "neural_compressor.ux.components.db_manager.db_models.benchmark_result": [[356, "module-neural_compressor.ux.components.db_manager.db_models.benchmark_result"]], "update_accuracy() (neural_compressor.ux.components.db_manager.db_models.benchmark_result.benchmarkresult static method)": [[356, "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult.update_accuracy"]], "update_performance() (neural_compressor.ux.components.db_manager.db_models.benchmark_result.benchmarkresult static method)": [[356, "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult.update_performance"]], "dataloader (class in neural_compressor.ux.components.db_manager.db_models.dataloader)": [[357, "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.dataloader)": [[357, "neural_compressor.ux.components.db_manager.db_models.dataloader.fill_dictionary"]], "list() (neural_compressor.ux.components.db_manager.db_models.dataloader.dataloader static method)": [[357, "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader.list"]], "list_by_framework() (neural_compressor.ux.components.db_manager.db_models.dataloader.dataloader static method)": [[357, "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader.list_by_framework"]], "neural_compressor.ux.components.db_manager.db_models.dataloader": [[357, "module-neural_compressor.ux.components.db_manager.db_models.dataloader"]], "query_to_list() (neural_compressor.ux.components.db_manager.db_models.dataloader.dataloader static method)": [[357, "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader.query_to_list"]], "update_params() (neural_compressor.ux.components.db_manager.db_models.dataloader.dataloader static method)": [[357, "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader.update_params"]], "dataset (class in neural_compressor.ux.components.db_manager.db_models.dataset)": [[358, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset"]], "add() (neural_compressor.ux.components.db_manager.db_models.dataset.dataset static method)": [[358, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.dataset.dataset static method)": [[358, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset.build_info"]], "delete_dataset() (neural_compressor.ux.components.db_manager.db_models.dataset.dataset static method)": [[358, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset.delete_dataset"]], "details() (neural_compressor.ux.components.db_manager.db_models.dataset.dataset static method)": [[358, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset.details"]], "list() (neural_compressor.ux.components.db_manager.db_models.dataset.dataset static method)": [[358, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset.list"]], "neural_compressor.ux.components.db_manager.db_models.dataset": [[358, "module-neural_compressor.ux.components.db_manager.db_models.dataset"]], "update_template_path() (neural_compressor.ux.components.db_manager.db_models.dataset.dataset static method)": [[358, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset.update_template_path"]], "domain (class in neural_compressor.ux.components.db_manager.db_models.domain)": [[359, "neural_compressor.ux.components.db_manager.db_models.domain.Domain"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.domain)": [[359, "neural_compressor.ux.components.db_manager.db_models.domain.fill_dictionary"]], "get_domain_id() (neural_compressor.ux.components.db_manager.db_models.domain.domain static method)": [[359, "neural_compressor.ux.components.db_manager.db_models.domain.Domain.get_domain_id"]], "list() (neural_compressor.ux.components.db_manager.db_models.domain.domain static method)": [[359, "neural_compressor.ux.components.db_manager.db_models.domain.Domain.list"]], "neural_compressor.ux.components.db_manager.db_models.domain": [[359, "module-neural_compressor.ux.components.db_manager.db_models.domain"]], "domainflavour (class in neural_compressor.ux.components.db_manager.db_models.domain_flavour)": [[360, "neural_compressor.ux.components.db_manager.db_models.domain_flavour.DomainFlavour"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.domain_flavour)": [[360, "neural_compressor.ux.components.db_manager.db_models.domain_flavour.fill_dictionary"]], "get_domain_flavour_id() (neural_compressor.ux.components.db_manager.db_models.domain_flavour.domainflavour static method)": [[360, "neural_compressor.ux.components.db_manager.db_models.domain_flavour.DomainFlavour.get_domain_flavour_id"]], "list() (neural_compressor.ux.components.db_manager.db_models.domain_flavour.domainflavour static method)": [[360, "neural_compressor.ux.components.db_manager.db_models.domain_flavour.DomainFlavour.list"]], "neural_compressor.ux.components.db_manager.db_models.domain_flavour": [[360, "module-neural_compressor.ux.components.db_manager.db_models.domain_flavour"]], "example (class in neural_compressor.ux.components.db_manager.db_models.example)": [[361, "neural_compressor.ux.components.db_manager.db_models.example.Example"]], "neural_compressor.ux.components.db_manager.db_models.example": [[361, "module-neural_compressor.ux.components.db_manager.db_models.example"]], "framework (class in neural_compressor.ux.components.db_manager.db_models.framework)": [[362, "neural_compressor.ux.components.db_manager.db_models.framework.Framework"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.framework)": [[362, "neural_compressor.ux.components.db_manager.db_models.framework.fill_dictionary"]], "get_framework_id() (neural_compressor.ux.components.db_manager.db_models.framework.framework static method)": [[362, "neural_compressor.ux.components.db_manager.db_models.framework.Framework.get_framework_id"]], "neural_compressor.ux.components.db_manager.db_models.framework": [[362, "module-neural_compressor.ux.components.db_manager.db_models.framework"]], "neural_compressor.ux.components.db_manager.db_models": [[363, "module-neural_compressor.ux.components.db_manager.db_models"]], "metric (class in neural_compressor.ux.components.db_manager.db_models.metric)": [[364, "neural_compressor.ux.components.db_manager.db_models.metric.Metric"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.metric)": [[364, "neural_compressor.ux.components.db_manager.db_models.metric.fill_dictionary"]], "list() (neural_compressor.ux.components.db_manager.db_models.metric.metric static method)": [[364, "neural_compressor.ux.components.db_manager.db_models.metric.Metric.list"]], "list_by_framework() (neural_compressor.ux.components.db_manager.db_models.metric.metric static method)": [[364, "neural_compressor.ux.components.db_manager.db_models.metric.Metric.list_by_framework"]], "neural_compressor.ux.components.db_manager.db_models.metric": [[364, "module-neural_compressor.ux.components.db_manager.db_models.metric"]], "query_to_list() (neural_compressor.ux.components.db_manager.db_models.metric.metric static method)": [[364, "neural_compressor.ux.components.db_manager.db_models.metric.Metric.query_to_list"]], "model (class in neural_compressor.ux.components.db_manager.db_models.model)": [[365, "neural_compressor.ux.components.db_manager.db_models.model.Model"]], "add() (neural_compressor.ux.components.db_manager.db_models.model.model static method)": [[365, "neural_compressor.ux.components.db_manager.db_models.model.Model.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.model.model static method)": [[365, "neural_compressor.ux.components.db_manager.db_models.model.Model.build_info"]], "delete_model() (neural_compressor.ux.components.db_manager.db_models.model.model static method)": [[365, "neural_compressor.ux.components.db_manager.db_models.model.Model.delete_model"]], "details() (neural_compressor.ux.components.db_manager.db_models.model.model static method)": [[365, "neural_compressor.ux.components.db_manager.db_models.model.Model.details"]], "list() (neural_compressor.ux.components.db_manager.db_models.model.model static method)": [[365, "neural_compressor.ux.components.db_manager.db_models.model.Model.list"]], "neural_compressor.ux.components.db_manager.db_models.model": [[365, "module-neural_compressor.ux.components.db_manager.db_models.model"]], "optimization (class in neural_compressor.ux.components.db_manager.db_models.optimization)": [[366, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization"]], "add() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[366, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[366, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.build_info"]], "clean_status() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[366, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.clean_status"]], "delete_optimization() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[366, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.delete_optimization"]], "details() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[366, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.details"]], "get_optimization_by_project_and_model() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[366, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.get_optimization_by_project_and_model"]], "get_pinned_benchmarks() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[366, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.get_pinned_benchmarks"]], "list() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[366, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.list"]], "neural_compressor.ux.components.db_manager.db_models.optimization": [[366, "module-neural_compressor.ux.components.db_manager.db_models.optimization"]], "pin_accuracy_benchmark() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[366, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.pin_accuracy_benchmark"]], "pin_performance_benchmark() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[366, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.pin_performance_benchmark"]], "unpin_benchmark() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[366, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.unpin_benchmark"]], "update_batch_size() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[366, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_batch_size"]], "update_config_path() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[366, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_config_path"]], "update_dataset() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[366, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_dataset"]], "update_duration() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[366, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_duration"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[366, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_execution_command"]], "update_log_path() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[366, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_log_path"]], "update_optimized_model() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[366, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_optimized_model"]], "update_precision() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[366, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_precision"]], "update_pruning_details() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[366, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_pruning_details"]], "update_sampling_size() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[366, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_sampling_size"]], "update_status() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[366, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_status"]], "update_tuning_details() (neural_compressor.ux.components.db_manager.db_models.optimization.optimization static method)": [[366, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization.update_tuning_details"]], "optimizationtype (class in neural_compressor.ux.components.db_manager.db_models.optimization_type)": [[367, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType"]], "add() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[367, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.add"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.optimization_type)": [[367, "neural_compressor.ux.components.db_manager.db_models.optimization_type.fill_dictionary"]], "get_optimization_type_by_id() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[367, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.get_optimization_type_by_id"]], "get_optimization_type_by_name() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[367, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.get_optimization_type_by_name"]], "get_optimization_type_for_precision() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[367, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.get_optimization_type_for_precision"]], "get_optimization_type_id() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[367, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.get_optimization_type_id"]], "list() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[367, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.list"]], "list_for_precision() (neural_compressor.ux.components.db_manager.db_models.optimization_type.optimizationtype static method)": [[367, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType.list_for_precision"]], "neural_compressor.ux.components.db_manager.db_models.optimization_type": [[367, "module-neural_compressor.ux.components.db_manager.db_models.optimization_type"]], "precision (class in neural_compressor.ux.components.db_manager.db_models.precision)": [[368, "neural_compressor.ux.components.db_manager.db_models.precision.Precision"]], "add() (neural_compressor.ux.components.db_manager.db_models.precision.precision static method)": [[368, "neural_compressor.ux.components.db_manager.db_models.precision.Precision.add"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.precision)": [[368, "neural_compressor.ux.components.db_manager.db_models.precision.fill_dictionary"]], "get_precision_by_id() (neural_compressor.ux.components.db_manager.db_models.precision.precision static method)": [[368, "neural_compressor.ux.components.db_manager.db_models.precision.Precision.get_precision_by_id"]], "get_precision_by_name() (neural_compressor.ux.components.db_manager.db_models.precision.precision static method)": [[368, "neural_compressor.ux.components.db_manager.db_models.precision.Precision.get_precision_by_name"]], "get_precision_id() (neural_compressor.ux.components.db_manager.db_models.precision.precision static method)": [[368, "neural_compressor.ux.components.db_manager.db_models.precision.Precision.get_precision_id"]], "list() (neural_compressor.ux.components.db_manager.db_models.precision.precision static method)": [[368, "neural_compressor.ux.components.db_manager.db_models.precision.Precision.list"]], "neural_compressor.ux.components.db_manager.db_models.precision": [[368, "module-neural_compressor.ux.components.db_manager.db_models.precision"]], "profiling (class in neural_compressor.ux.components.db_manager.db_models.profiling)": [[369, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling"]], "add() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[369, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[369, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.build_info"]], "clean_status() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[369, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.clean_status"]], "delete_profiling() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[369, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.delete_profiling"]], "details() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[369, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.details"]], "list() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[369, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.list"]], "neural_compressor.ux.components.db_manager.db_models.profiling": [[369, "module-neural_compressor.ux.components.db_manager.db_models.profiling"]], "update_dataset() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[369, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.update_dataset"]], "update_duration() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[369, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.update_duration"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[369, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.update_execution_command"]], "update_log_path() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[369, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.update_log_path"]], "update_num_threads() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[369, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.update_num_threads"]], "update_status() (neural_compressor.ux.components.db_manager.db_models.profiling.profiling static method)": [[369, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling.update_status"]], "profilingresult (class in neural_compressor.ux.components.db_manager.db_models.profiling_result)": [[370, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult"]], "add() (neural_compressor.ux.components.db_manager.db_models.profiling_result.profilingresult static method)": [[370, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.profiling_result.profilingresult static method)": [[370, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult.build_info"]], "bulk_add() (neural_compressor.ux.components.db_manager.db_models.profiling_result.profilingresult static method)": [[370, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult.bulk_add"]], "delete_results() (neural_compressor.ux.components.db_manager.db_models.profiling_result.profilingresult static method)": [[370, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult.delete_results"]], "get_results() (neural_compressor.ux.components.db_manager.db_models.profiling_result.profilingresult static method)": [[370, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult.get_results"]], "neural_compressor.ux.components.db_manager.db_models.profiling_result": [[370, "module-neural_compressor.ux.components.db_manager.db_models.profiling_result"]], "project (class in neural_compressor.ux.components.db_manager.db_models.project)": [[371, "neural_compressor.ux.components.db_manager.db_models.project.Project"]], "create_project() (neural_compressor.ux.components.db_manager.db_models.project.project static method)": [[371, "neural_compressor.ux.components.db_manager.db_models.project.Project.create_project"]], "delete_project() (neural_compressor.ux.components.db_manager.db_models.project.project static method)": [[371, "neural_compressor.ux.components.db_manager.db_models.project.Project.delete_project"]], "get_model_by_name() (neural_compressor.ux.components.db_manager.db_models.project.project static method)": [[371, "neural_compressor.ux.components.db_manager.db_models.project.Project.get_model_by_name"]], "list_projects() (neural_compressor.ux.components.db_manager.db_models.project.project static method)": [[371, "neural_compressor.ux.components.db_manager.db_models.project.Project.list_projects"]], "neural_compressor.ux.components.db_manager.db_models.project": [[371, "module-neural_compressor.ux.components.db_manager.db_models.project"]], "project_details() (neural_compressor.ux.components.db_manager.db_models.project.project static method)": [[371, "neural_compressor.ux.components.db_manager.db_models.project.Project.project_details"]], "update_notes() (neural_compressor.ux.components.db_manager.db_models.project.project static method)": [[371, "neural_compressor.ux.components.db_manager.db_models.project.Project.update_notes"]], "pruningdetails (class in neural_compressor.ux.components.db_manager.db_models.pruning_details)": [[372, "neural_compressor.ux.components.db_manager.db_models.pruning_details.PruningDetails"]], "add() (neural_compressor.ux.components.db_manager.db_models.pruning_details.pruningdetails static method)": [[372, "neural_compressor.ux.components.db_manager.db_models.pruning_details.PruningDetails.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.pruning_details.pruningdetails static method)": [[372, "neural_compressor.ux.components.db_manager.db_models.pruning_details.PruningDetails.build_info"]], "delete_pruning_details() (neural_compressor.ux.components.db_manager.db_models.pruning_details.pruningdetails static method)": [[372, "neural_compressor.ux.components.db_manager.db_models.pruning_details.PruningDetails.delete_pruning_details"]], "neural_compressor.ux.components.db_manager.db_models.pruning_details": [[372, "module-neural_compressor.ux.components.db_manager.db_models.pruning_details"]], "update() (neural_compressor.ux.components.db_manager.db_models.pruning_details.pruningdetails static method)": [[372, "neural_compressor.ux.components.db_manager.db_models.pruning_details.PruningDetails.update"]], "transform (class in neural_compressor.ux.components.db_manager.db_models.transform)": [[373, "neural_compressor.ux.components.db_manager.db_models.transform.Transform"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.transform)": [[373, "neural_compressor.ux.components.db_manager.db_models.transform.fill_dictionary"]], "list() (neural_compressor.ux.components.db_manager.db_models.transform.transform static method)": [[373, "neural_compressor.ux.components.db_manager.db_models.transform.Transform.list"]], "list_by_domain() (neural_compressor.ux.components.db_manager.db_models.transform.transform static method)": [[373, "neural_compressor.ux.components.db_manager.db_models.transform.Transform.list_by_domain"]], "list_by_framework() (neural_compressor.ux.components.db_manager.db_models.transform.transform static method)": [[373, "neural_compressor.ux.components.db_manager.db_models.transform.Transform.list_by_framework"]], "neural_compressor.ux.components.db_manager.db_models.transform": [[373, "module-neural_compressor.ux.components.db_manager.db_models.transform"]], "query_to_list() (neural_compressor.ux.components.db_manager.db_models.transform.transform static method)": [[373, "neural_compressor.ux.components.db_manager.db_models.transform.Transform.query_to_list"]], "tuningdetails (class in neural_compressor.ux.components.db_manager.db_models.tuning_details)": [[374, "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails"]], "add() (neural_compressor.ux.components.db_manager.db_models.tuning_details.tuningdetails static method)": [[374, "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails.add"]], "delete_tuning_details() (neural_compressor.ux.components.db_manager.db_models.tuning_details.tuningdetails static method)": [[374, "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails.delete_tuning_details"]], "neural_compressor.ux.components.db_manager.db_models.tuning_details": [[374, "module-neural_compressor.ux.components.db_manager.db_models.tuning_details"]], "update() (neural_compressor.ux.components.db_manager.db_models.tuning_details.tuningdetails static method)": [[374, "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails.update"]], "update_tuning_history() (neural_compressor.ux.components.db_manager.db_models.tuning_details.tuningdetails static method)": [[374, "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails.update_tuning_history"]], "tuninghistory (class in neural_compressor.ux.components.db_manager.db_models.tuning_history)": [[375, "neural_compressor.ux.components.db_manager.db_models.tuning_history.TuningHistory"]], "add() (neural_compressor.ux.components.db_manager.db_models.tuning_history.tuninghistory static method)": [[375, "neural_compressor.ux.components.db_manager.db_models.tuning_history.TuningHistory.add"]], "build_info() (neural_compressor.ux.components.db_manager.db_models.tuning_history.tuninghistory static method)": [[375, "neural_compressor.ux.components.db_manager.db_models.tuning_history.TuningHistory.build_info"]], "neural_compressor.ux.components.db_manager.db_models.tuning_history": [[375, "module-neural_compressor.ux.components.db_manager.db_models.tuning_history"]], "benchmarkapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface)": [[376, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface"]], "add_benchmark() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.add_benchmark"]], "add_result() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.add_result"]], "before_delete_benchmark_entry() (in module neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface)": [[376, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.before_delete_benchmark_entry"]], "clean_status() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.clean_status"]], "delete_benchmark() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.delete_benchmark"]], "edit_benchmark() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.edit_benchmark"]], "get_benchmark_details() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.get_benchmark_details"]], "list_benchmarks() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.list_benchmarks"]], "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface": [[376, "module-neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface"]], "parse_benchmark_data() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.parse_benchmark_data"]], "parse_benchmark_edit_data() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.parse_benchmark_edit_data"]], "update_benchmark_accuracy() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.update_benchmark_accuracy"]], "update_benchmark_duration() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.update_benchmark_duration"]], "update_benchmark_performance() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.update_benchmark_performance"]], "update_benchmark_status() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.update_benchmark_status"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.update_execution_command"]], "update_paths() (neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.benchmarkapiinterface static method)": [[376, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface.update_paths"]], "datasetapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[377, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface"]], "add_dataset() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[377, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.add_dataset"]], "check_if_custom_metric_or_dataloader() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[377, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.check_if_custom_metric_or_dataloader"]], "dataloader_path() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[377, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.dataloader_path"]], "delete_dataset() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[377, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.delete_dataset"]], "generate_custom_template() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[377, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.generate_custom_template"]], "generate_template() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[377, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.generate_template"]], "get_dataset_details() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[377, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.get_dataset_details"]], "get_predefined_dataset() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[377, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.get_predefined_dataset"]], "initialize_associations() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[377, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.initialize_associations"]], "initialize_precision_optimization_types_association() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[377, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.initialize_precision_optimization_types_association"]], "list_datasets() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[377, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.list_datasets"]], "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface": [[377, "module-neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface"]], "parse_dataset_data() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[377, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.parse_dataset_data"]], "prepare_predefined_dataloader() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[377, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.prepare_predefined_dataloader"]], "prepare_predefined_transform() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[377, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.prepare_predefined_transform"]], "search_in_list_of_dict() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[377, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.search_in_list_of_dict"]], "search_in_list_of_dict_for_unique_value() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[377, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.search_in_list_of_dict_for_unique_value"]], "set_database_version() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[377, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.set_database_version"]], "set_template_path() (neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.datasetapiinterface static method)": [[377, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface.set_template_path"]], "initialize_associations() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[378, "neural_compressor.ux.components.db_manager.db_operations.db_operations.initialize_associations"]], "initialize_precision_optimization_types_association() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[378, "neural_compressor.ux.components.db_manager.db_operations.db_operations.initialize_precision_optimization_types_association"]], "neural_compressor.ux.components.db_manager.db_operations.db_operations": [[378, "module-neural_compressor.ux.components.db_manager.db_operations.db_operations"]], "search_in_list_of_dict() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[378, "neural_compressor.ux.components.db_manager.db_operations.db_operations.search_in_list_of_dict"]], "search_in_list_of_dict_for_unique_value() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[378, "neural_compressor.ux.components.db_manager.db_operations.db_operations.search_in_list_of_dict_for_unique_value"]], "set_database_version() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[378, "neural_compressor.ux.components.db_manager.db_operations.db_operations.set_database_version"]], "diagnosisapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface)": [[379, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface"]], "generate_optimization() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.generate_optimization"]], "get_op_details() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.get_op_details"]], "get_op_list() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.get_op_list"]], "histogram() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.histogram"]], "model_wise_params() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.model_wise_params"]], "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface": [[379, "module-neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface"]], "parse_model_wise_config() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.parse_model_wise_config"]], "parse_op_wise_config() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.parse_op_wise_config"]], "parse_optimization_data() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.parse_optimization_data"]], "parse_wise_parameters() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.parse_wise_parameters"]], "set_op_wise_pattern_precision() (neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.diagnosisapiinterface static method)": [[379, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface.set_op_wise_pattern_precision"]], "dictionariesapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface)": [[380, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface"]], "list_dataloaders() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[380, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_dataloaders"]], "list_dataloaders_by_framework() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[380, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_dataloaders_by_framework"]], "list_domain_flavours() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[380, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_domain_flavours"]], "list_domains() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[380, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_domains"]], "list_metrics() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[380, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_metrics"]], "list_metrics_by_framework() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[380, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_metrics_by_framework"]], "list_optimization_types() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[380, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_optimization_types"]], "list_optimization_types_for_precision() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[380, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_optimization_types_for_precision"]], "list_precisions() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[380, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_precisions"]], "list_transforms() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[380, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_transforms"]], "list_transforms_by_domain() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[380, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_transforms_by_domain"]], "list_transforms_by_framework() (neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.dictionariesapiinterface static method)": [[380, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface.list_transforms_by_framework"]], "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface": [[380, "module-neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface"]], "examplesapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.examples_api_interface)": [[381, "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.ExamplesAPIInterface"]], "create_project() (neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.examplesapiinterface static method)": [[381, "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.ExamplesAPIInterface.create_project"]], "get_optimization_data() (neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.examplesapiinterface static method)": [[381, "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.ExamplesAPIInterface.get_optimization_data"]], "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface": [[381, "module-neural_compressor.ux.components.db_manager.db_operations.examples_api_interface"]], "benchmarkapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[382, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface"]], "datasetapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[382, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface"]], "diagnosisapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[382, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface"]], "dictionariesapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[382, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface"]], "examplesapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[382, "neural_compressor.ux.components.db_manager.db_operations.ExamplesAPIInterface"]], "modelapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[382, "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface"]], "optimizationapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[382, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface"]], "profilingapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[382, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface"]], "projectapiinterface (class in neural_compressor.ux.components.db_manager.db_operations)": [[382, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface"]], "add_benchmark() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.add_benchmark"]], "add_dataset() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.add_dataset"]], "add_dummy_dataset() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.add_dummy_dataset"]], "add_model() (neural_compressor.ux.components.db_manager.db_operations.modelapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface.add_model"]], "add_model() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.add_model"]], "add_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.add_optimization"]], "add_profiling() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.add_profiling"]], "add_pruning_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.add_pruning_optimization"]], "add_quantization_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.add_quantization_optimization"]], "add_result() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.add_result"]], "add_result() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.add_result"]], "add_standard_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.add_standard_optimization"]], "add_tuning_history() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.add_tuning_history"]], "bulk_add_results() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.bulk_add_results"]], "check_if_custom_metric_or_dataloader() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.check_if_custom_metric_or_dataloader"]], "clean_status() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.clean_status"]], "clean_status() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.clean_status"]], "clean_status() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.clean_status"]], "create_project() (neural_compressor.ux.components.db_manager.db_operations.examplesapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.ExamplesAPIInterface.create_project"]], "create_project() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.create_project"]], "dataloader_path() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.dataloader_path"]], "delete_benchmark() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.delete_benchmark"]], "delete_dataset() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.delete_dataset"]], "delete_model() (neural_compressor.ux.components.db_manager.db_operations.modelapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface.delete_model"]], "delete_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.delete_optimization"]], "delete_profiling() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.delete_profiling"]], "delete_project() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.delete_project"]], "edit_benchmark() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.edit_benchmark"]], "edit_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.edit_optimization"]], "edit_profiling() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.edit_profiling"]], "edit_pruning_details() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.edit_pruning_details"]], "edit_tuning_details() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.edit_tuning_details"]], "generate_custom_template() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.generate_custom_template"]], "generate_optimization() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.generate_optimization"]], "generate_template() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.generate_template"]], "get_benchmark_details() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.get_benchmark_details"]], "get_dataset_details() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.get_dataset_details"]], "get_model_details() (neural_compressor.ux.components.db_manager.db_operations.modelapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface.get_model_details"]], "get_op_details() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.get_op_details"]], "get_op_list() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.get_op_list"]], "get_optimization_data() (neural_compressor.ux.components.db_manager.db_operations.examplesapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.ExamplesAPIInterface.get_optimization_data"]], "get_optimization_details() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.get_optimization_details"]], "get_predefined_dataset() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.get_predefined_dataset"]], "get_profiling_details() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.get_profiling_details"]], "get_project_details() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.get_project_details"]], "get_pruning_details() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.get_pruning_details"]], "histogram() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.histogram"]], "list_benchmarks() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.list_benchmarks"]], "list_dataloaders() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_dataloaders"]], "list_dataloaders_by_framework() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_dataloaders_by_framework"]], "list_datasets() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.list_datasets"]], "list_domain_flavours() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_domain_flavours"]], "list_domains() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_domains"]], "list_metrics() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_metrics"]], "list_metrics_by_framework() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_metrics_by_framework"]], "list_models() (neural_compressor.ux.components.db_manager.db_operations.modelapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface.list_models"]], "list_optimization_types() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_optimization_types"]], "list_optimization_types_for_precision() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_optimization_types_for_precision"]], "list_optimizations() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.list_optimizations"]], "list_precisions() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_precisions"]], "list_profilings() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.list_profilings"]], "list_projects() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.list_projects"]], "list_transforms() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_transforms"]], "list_transforms_by_domain() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_transforms_by_domain"]], "list_transforms_by_framework() (neural_compressor.ux.components.db_manager.db_operations.dictionariesapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.DictionariesAPIInterface.list_transforms_by_framework"]], "load_pruning_details_config() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.load_pruning_details_config"]], "model_wise_params() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.model_wise_params"]], "neural_compressor.ux.components.db_manager.db_operations": [[382, "module-neural_compressor.ux.components.db_manager.db_operations"]], "parse_benchmark_data() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.parse_benchmark_data"]], "parse_benchmark_edit_data() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.parse_benchmark_edit_data"]], "parse_dataset_data() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.parse_dataset_data"]], "parse_model_data() (neural_compressor.ux.components.db_manager.db_operations.modelapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.ModelAPIInterface.parse_model_data"]], "parse_model_wise_config() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.parse_model_wise_config"]], "parse_op_wise_config() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.parse_op_wise_config"]], "parse_optimization_data() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.parse_optimization_data"]], "parse_optimization_data() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.parse_optimization_data"]], "parse_optimization_edit_data() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.parse_optimization_edit_data"]], "parse_profiling_data() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.parse_profiling_data"]], "parse_profiling_edit_data() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.parse_profiling_edit_data"]], "parse_profiling_result_data() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.parse_profiling_result_data"]], "parse_tuning_history() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.parse_tuning_history"]], "parse_wise_parameters() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.parse_wise_parameters"]], "pin_accuracy_benchmark() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.pin_accuracy_benchmark"]], "pin_performance_benchmark() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.pin_performance_benchmark"]], "prepare_predefined_dataloader() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.prepare_predefined_dataloader"]], "prepare_predefined_transform() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.prepare_predefined_transform"]], "set_op_wise_pattern_precision() (neural_compressor.ux.components.db_manager.db_operations.diagnosisapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.DiagnosisAPIInterface.set_op_wise_pattern_precision"]], "set_template_path() (neural_compressor.ux.components.db_manager.db_operations.datasetapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.DatasetAPIInterface.set_template_path"]], "update_benchmark_accuracy() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.update_benchmark_accuracy"]], "update_benchmark_duration() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.update_benchmark_duration"]], "update_benchmark_performance() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.update_benchmark_performance"]], "update_benchmark_status() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.update_benchmark_status"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.update_execution_command"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.update_execution_command"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.update_execution_command"]], "update_log_path() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.update_log_path"]], "update_optimization_duration() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.update_optimization_duration"]], "update_optimization_status() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.update_optimization_status"]], "update_optimized_model() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.update_optimized_model"]], "update_paths() (neural_compressor.ux.components.db_manager.db_operations.benchmarkapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.BenchmarkAPIInterface.update_paths"]], "update_paths() (neural_compressor.ux.components.db_manager.db_operations.optimizationapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.OptimizationAPIInterface.update_paths"]], "update_profiling_duration() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.update_profiling_duration"]], "update_profiling_status() (neural_compressor.ux.components.db_manager.db_operations.profilingapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.ProfilingAPIInterface.update_profiling_status"]], "update_project_notes() (neural_compressor.ux.components.db_manager.db_operations.projectapiinterface static method)": [[382, "neural_compressor.ux.components.db_manager.db_operations.ProjectAPIInterface.update_project_notes"]], "modelapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.model_api_interface)": [[383, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface"]], "add_model() (neural_compressor.ux.components.db_manager.db_operations.model_api_interface.modelapiinterface static method)": [[383, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface.add_model"]], "delete_model() (neural_compressor.ux.components.db_manager.db_operations.model_api_interface.modelapiinterface static method)": [[383, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface.delete_model"]], "get_model_details() (neural_compressor.ux.components.db_manager.db_operations.model_api_interface.modelapiinterface static method)": [[383, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface.get_model_details"]], "list_models() (neural_compressor.ux.components.db_manager.db_operations.model_api_interface.modelapiinterface static method)": [[383, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface.list_models"]], "neural_compressor.ux.components.db_manager.db_operations.model_api_interface": [[383, "module-neural_compressor.ux.components.db_manager.db_operations.model_api_interface"]], "parse_model_data() (neural_compressor.ux.components.db_manager.db_operations.model_api_interface.modelapiinterface static method)": [[383, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface.parse_model_data"]], "optimizationapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface)": [[384, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface"]], "add_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[384, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.add_optimization"]], "add_pruning_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[384, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.add_pruning_optimization"]], "add_quantization_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[384, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.add_quantization_optimization"]], "add_standard_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[384, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.add_standard_optimization"]], "add_tuning_history() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[384, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.add_tuning_history"]], "clean_status() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[384, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.clean_status"]], "delete_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[384, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.delete_optimization"]], "edit_optimization() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[384, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.edit_optimization"]], "edit_pruning_details() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[384, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.edit_pruning_details"]], "edit_tuning_details() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[384, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.edit_tuning_details"]], "get_optimization_details() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[384, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.get_optimization_details"]], "get_pruning_details() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[384, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.get_pruning_details"]], "list_optimizations() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[384, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.list_optimizations"]], "load_pruning_details_config() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[384, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.load_pruning_details_config"]], "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface": [[384, "module-neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface"]], "parse_optimization_data() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[384, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.parse_optimization_data"]], "parse_optimization_edit_data() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[384, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.parse_optimization_edit_data"]], "parse_tuning_history() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[384, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.parse_tuning_history"]], "pin_accuracy_benchmark() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[384, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.pin_accuracy_benchmark"]], "pin_performance_benchmark() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[384, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.pin_performance_benchmark"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[384, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.update_execution_command"]], "update_optimization_duration() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[384, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.update_optimization_duration"]], "update_optimization_status() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[384, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.update_optimization_status"]], "update_optimized_model() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[384, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.update_optimized_model"]], "update_paths() (neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.optimizationapiinterface static method)": [[384, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface.update_paths"]], "profilingapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface)": [[385, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface"]], "add_profiling() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[385, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.add_profiling"]], "add_result() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[385, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.add_result"]], "bulk_add_results() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[385, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.bulk_add_results"]], "clean_status() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[385, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.clean_status"]], "delete_profiling() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[385, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.delete_profiling"]], "edit_profiling() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[385, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.edit_profiling"]], "get_profiling_details() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[385, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.get_profiling_details"]], "list_profilings() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[385, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.list_profilings"]], "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface": [[385, "module-neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface"]], "parse_profiling_data() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[385, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.parse_profiling_data"]], "parse_profiling_edit_data() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[385, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.parse_profiling_edit_data"]], "parse_profiling_result_data() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[385, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.parse_profiling_result_data"]], "update_execution_command() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[385, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.update_execution_command"]], "update_log_path() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[385, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.update_log_path"]], "update_profiling_duration() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[385, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.update_profiling_duration"]], "update_profiling_status() (neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.profilingapiinterface static method)": [[385, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface.update_profiling_status"]], "projectapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.project_api_interface)": [[386, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface"]], "add_dummy_dataset() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.add_dummy_dataset"]], "add_model() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.add_model"]], "create_project() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.create_project"]], "delete_project() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.delete_project"]], "get_project_details() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.get_project_details"]], "list_projects() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.list_projects"]], "neural_compressor.ux.components.db_manager.db_operations.project_api_interface": [[386, "module-neural_compressor.ux.components.db_manager.db_operations.project_api_interface"]], "update_project_notes() (neural_compressor.ux.components.db_manager.db_operations.project_api_interface.projectapiinterface static method)": [[386, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface.update_project_notes"]], "dbmanager (class in neural_compressor.ux.components.db_manager)": [[387, "neural_compressor.ux.components.db_manager.DBManager"]], "create_all() (neural_compressor.ux.components.db_manager.dbmanager method)": [[387, "neural_compressor.ux.components.db_manager.DBManager.create_all"]], "create_sqlalchemy_engine() (neural_compressor.ux.components.db_manager.dbmanager method)": [[387, "neural_compressor.ux.components.db_manager.DBManager.create_sqlalchemy_engine"]], "engine (neural_compressor.ux.components.db_manager.dbmanager property)": [[387, "neural_compressor.ux.components.db_manager.DBManager.engine"]], "initialize_database() (neural_compressor.ux.components.db_manager.dbmanager method)": [[387, "neural_compressor.ux.components.db_manager.DBManager.initialize_database"]], "neural_compressor.ux.components.db_manager": [[387, "module-neural_compressor.ux.components.db_manager"]], "benchmarkaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[388, "neural_compressor.ux.components.db_manager.params_interfaces.BenchmarkAddParamsInterface"]], "benchmarkeditparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[388, "neural_compressor.ux.components.db_manager.params_interfaces.BenchmarkEditParamsInterface"]], "datasetaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[388, "neural_compressor.ux.components.db_manager.params_interfaces.DatasetAddParamsInterface"]], "diagnosisoptimizationparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[388, "neural_compressor.ux.components.db_manager.params_interfaces.DiagnosisOptimizationParamsInterface"]], "modeladdparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[388, "neural_compressor.ux.components.db_manager.params_interfaces.ModelAddParamsInterface"]], "optimizationaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[388, "neural_compressor.ux.components.db_manager.params_interfaces.OptimizationAddParamsInterface"]], "optimizationeditparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[388, "neural_compressor.ux.components.db_manager.params_interfaces.OptimizationEditParamsInterface"]], "profilingaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[388, "neural_compressor.ux.components.db_manager.params_interfaces.ProfilingAddParamsInterface"]], "profilingeditparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[388, "neural_compressor.ux.components.db_manager.params_interfaces.ProfilingEditParamsInterface"]], "profilingresultaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[388, "neural_compressor.ux.components.db_manager.params_interfaces.ProfilingResultAddParamsInterface"]], "tuninghistoryinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[388, "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryInterface"]], "tuninghistoryiteminterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[388, "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryItemInterface"]], "neural_compressor.ux.components.db_manager.params_interfaces": [[388, "module-neural_compressor.ux.components.db_manager.params_interfaces"]], "parse_nodes() (neural_compressor.ux.components.db_manager.params_interfaces.modeladdparamsinterface static method)": [[388, "neural_compressor.ux.components.db_manager.params_interfaces.ModelAddParamsInterface.parse_nodes"]], "serialize() (neural_compressor.ux.components.db_manager.params_interfaces.tuninghistoryinterface method)": [[388, "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryInterface.serialize"]], "serialize() (neural_compressor.ux.components.db_manager.params_interfaces.tuninghistoryiteminterface method)": [[388, "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryItemInterface.serialize"]], "get_framework_dataloaders_config() (in module neural_compressor.ux.components.db_manager.utils)": [[389, "neural_compressor.ux.components.db_manager.utils.get_framework_dataloaders_config"]], "get_framework_transforms_config() (in module neural_compressor.ux.components.db_manager.utils)": [[389, "neural_compressor.ux.components.db_manager.utils.get_framework_transforms_config"]], "neural_compressor.ux.components.db_manager.utils": [[389, "module-neural_compressor.ux.components.db_manager.utils"]], "update_dataloaders_params() (in module neural_compressor.ux.components.db_manager.utils)": [[389, "neural_compressor.ux.components.db_manager.utils.update_dataloaders_params"]], "diagnosis (class in neural_compressor.ux.components.diagnosis.diagnosis)": [[390, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis"]], "calculate_mse() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis method)": [[390, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.calculate_mse"]], "get_histogram_data() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis method)": [[390, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.get_histogram_data"]], "get_op_details() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis method)": [[390, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.get_op_details"]], "get_op_list() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis method)": [[390, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.get_op_list"]], "get_tensors_info() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis method)": [[390, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.get_tensors_info"]], "load_quantization_config() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis method)": [[390, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.load_quantization_config"]], "mse_metric_gap() (neural_compressor.ux.components.diagnosis.diagnosis.diagnosis static method)": [[390, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis.mse_metric_gap"]], "neural_compressor.ux.components.diagnosis.diagnosis": [[390, "module-neural_compressor.ux.components.diagnosis.diagnosis"]], "diagnosisfactory (class in neural_compressor.ux.components.diagnosis.factory)": [[391, "neural_compressor.ux.components.diagnosis.factory.DiagnosisFactory"]], "get_diagnosis() (neural_compressor.ux.components.diagnosis.factory.diagnosisfactory static method)": [[391, "neural_compressor.ux.components.diagnosis.factory.DiagnosisFactory.get_diagnosis"]], "neural_compressor.ux.components.diagnosis.factory": [[391, "module-neural_compressor.ux.components.diagnosis.factory"]], "neural_compressor.ux.components.diagnosis": [[392, "module-neural_compressor.ux.components.diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis": [[393, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis"]], "onnxrtdiagnosis (class in neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis)": [[394, "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis.OnnxRtDiagnosis"]], "model (neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis.onnxrtdiagnosis property)": [[394, "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis.OnnxRtDiagnosis.model"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis": [[394, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis"]], "opactivation (class in neural_compressor.ux.components.diagnosis.op_details)": [[395, "neural_compressor.ux.components.diagnosis.op_details.OpActivation"]], "opdetails (class in neural_compressor.ux.components.diagnosis.op_details)": [[395, "neural_compressor.ux.components.diagnosis.op_details.OpDetails"]], "oppattern (class in neural_compressor.ux.components.diagnosis.op_details)": [[395, "neural_compressor.ux.components.diagnosis.op_details.OpPattern"]], "opweights (class in neural_compressor.ux.components.diagnosis.op_details)": [[395, "neural_compressor.ux.components.diagnosis.op_details.OpWeights"]], "neural_compressor.ux.components.diagnosis.op_details": [[395, "module-neural_compressor.ux.components.diagnosis.op_details"]], "serialize() (neural_compressor.ux.components.diagnosis.op_details.opdetails method)": [[395, "neural_compressor.ux.components.diagnosis.op_details.OpDetails.serialize"]], "opentry (class in neural_compressor.ux.components.diagnosis.op_entry)": [[396, "neural_compressor.ux.components.diagnosis.op_entry.OpEntry"]], "neural_compressor.ux.components.diagnosis.op_entry": [[396, "module-neural_compressor.ux.components.diagnosis.op_entry"]], "serialize() (neural_compressor.ux.components.diagnosis.op_entry.opentry method)": [[396, "neural_compressor.ux.components.diagnosis.op_entry.OpEntry.serialize"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis": [[397, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis"]], "tensorflowdiagnosis (class in neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis)": [[398, "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis.TensorflowDiagnosis"]], "model (neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis.tensorflowdiagnosis property)": [[398, "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis.TensorflowDiagnosis.model"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis": [[398, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis"]], "create_dir_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[399, "neural_compressor.ux.components.file_browser.file_browser.create_dir_entry"]], "create_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[399, "neural_compressor.ux.components.file_browser.file_browser.create_entry"]], "create_file_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[399, "neural_compressor.ux.components.file_browser.file_browser.create_file_entry"]], "filter_requested_entries() (in module neural_compressor.ux.components.file_browser.file_browser)": [[399, "neural_compressor.ux.components.file_browser.file_browser.filter_requested_entries"]], "get_directory_entries() (in module neural_compressor.ux.components.file_browser.file_browser)": [[399, "neural_compressor.ux.components.file_browser.file_browser.get_directory_entries"]], "get_filter_value() (in module neural_compressor.ux.components.file_browser.file_browser)": [[399, "neural_compressor.ux.components.file_browser.file_browser.get_filter_value"]], "get_non_hidden_directory_entries() (in module neural_compressor.ux.components.file_browser.file_browser)": [[399, "neural_compressor.ux.components.file_browser.file_browser.get_non_hidden_directory_entries"]], "get_requested_path() (in module neural_compressor.ux.components.file_browser.file_browser)": [[399, "neural_compressor.ux.components.file_browser.file_browser.get_requested_path"]], "get_setting_value() (in module neural_compressor.ux.components.file_browser.file_browser)": [[399, "neural_compressor.ux.components.file_browser.file_browser.get_setting_value"]], "is_dataset_or_directory_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[399, "neural_compressor.ux.components.file_browser.file_browser.is_dataset_or_directory_entry"]], "is_directory_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[399, "neural_compressor.ux.components.file_browser.file_browser.is_directory_entry"]], "is_model_or_directory_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[399, "neural_compressor.ux.components.file_browser.file_browser.is_model_or_directory_entry"]], "neural_compressor.ux.components.file_browser.file_browser": [[399, "module-neural_compressor.ux.components.file_browser.file_browser"]], "should_show_files() (in module neural_compressor.ux.components.file_browser.file_browser)": [[399, "neural_compressor.ux.components.file_browser.file_browser.should_show_files"]], "should_show_only_model_files() (in module neural_compressor.ux.components.file_browser.file_browser)": [[399, "neural_compressor.ux.components.file_browser.file_browser.should_show_only_model_files"]], "sort_entries() (in module neural_compressor.ux.components.file_browser.file_browser)": [[399, "neural_compressor.ux.components.file_browser.file_browser.sort_entries"]], "neural_compressor.ux.components.file_browser": [[400, "module-neural_compressor.ux.components.file_browser"]], "attribute (class in neural_compressor.ux.components.graph.attribute)": [[401, "neural_compressor.ux.components.graph.attribute.Attribute"]], "neural_compressor.ux.components.graph.attribute": [[401, "module-neural_compressor.ux.components.graph.attribute"]], "collapser (class in neural_compressor.ux.components.graph.collapser)": [[402, "neural_compressor.ux.components.graph.collapser.Collapser"]], "collapse() (neural_compressor.ux.components.graph.collapser.collapser method)": [[402, "neural_compressor.ux.components.graph.collapser.Collapser.collapse"]], "neural_compressor.ux.components.graph.collapser": [[402, "module-neural_compressor.ux.components.graph.collapser"]], "edge (class in neural_compressor.ux.components.graph.edge)": [[403, "neural_compressor.ux.components.graph.edge.Edge"]], "neural_compressor.ux.components.graph.edge": [[403, "module-neural_compressor.ux.components.graph.edge"]], "source (neural_compressor.ux.components.graph.edge.edge property)": [[403, "neural_compressor.ux.components.graph.edge.Edge.source"]], "target (neural_compressor.ux.components.graph.edge.edge property)": [[403, "neural_compressor.ux.components.graph.edge.Edge.target"]], "graph (class in neural_compressor.ux.components.graph.graph)": [[404, "neural_compressor.ux.components.graph.graph.Graph"]], "add_edge() (neural_compressor.ux.components.graph.graph.graph method)": [[404, "neural_compressor.ux.components.graph.graph.Graph.add_edge"]], "add_node() (neural_compressor.ux.components.graph.graph.graph method)": [[404, "neural_compressor.ux.components.graph.graph.Graph.add_node"]], "edges (neural_compressor.ux.components.graph.graph.graph property)": [[404, "neural_compressor.ux.components.graph.graph.Graph.edges"]], "get_node() (neural_compressor.ux.components.graph.graph.graph method)": [[404, "neural_compressor.ux.components.graph.graph.Graph.get_node"]], "get_target_nodes() (neural_compressor.ux.components.graph.graph.graph method)": [[404, "neural_compressor.ux.components.graph.graph.Graph.get_target_nodes"]], "highlight_pattern() (neural_compressor.ux.components.graph.graph.graph method)": [[404, "neural_compressor.ux.components.graph.graph.Graph.highlight_pattern"]], "neural_compressor.ux.components.graph.graph": [[404, "module-neural_compressor.ux.components.graph.graph"]], "nodes (neural_compressor.ux.components.graph.graph.graph property)": [[404, "neural_compressor.ux.components.graph.graph.Graph.nodes"]], "graphreader (class in neural_compressor.ux.components.graph.graph_reader)": [[405, "neural_compressor.ux.components.graph.graph_reader.GraphReader"]], "find_pattern_in_graph() (neural_compressor.ux.components.graph.graph_reader.graphreader method)": [[405, "neural_compressor.ux.components.graph.graph_reader.GraphReader.find_pattern_in_graph"]], "neural_compressor.ux.components.graph.graph_reader": [[405, "module-neural_compressor.ux.components.graph.graph_reader"]], "read() (neural_compressor.ux.components.graph.graph_reader.graphreader method)": [[405, "neural_compressor.ux.components.graph.graph_reader.GraphReader.read"]], "neural_compressor.ux.components.graph": [[406, "module-neural_compressor.ux.components.graph"]], "groupnode (class in neural_compressor.ux.components.graph.node)": [[407, "neural_compressor.ux.components.graph.node.GroupNode"]], "node (class in neural_compressor.ux.components.graph.node)": [[407, "neural_compressor.ux.components.graph.node.Node"]], "neural_compressor.ux.components.graph.node": [[407, "module-neural_compressor.ux.components.graph.node"]], "neural_compressor.ux.components.graph.reader": [[408, "module-neural_compressor.ux.components.graph.reader"]], "onnxrtreader (class in neural_compressor.ux.components.graph.reader.onnxrt_reader)": [[409, "neural_compressor.ux.components.graph.reader.onnxrt_reader.OnnxrtReader"]], "neural_compressor.ux.components.graph.reader.onnxrt_reader": [[409, "module-neural_compressor.ux.components.graph.reader.onnxrt_reader"]], "read() (neural_compressor.ux.components.graph.reader.onnxrt_reader.onnxrtreader method)": [[409, "neural_compressor.ux.components.graph.reader.onnxrt_reader.OnnxrtReader.read"]], "tensorflowreader (class in neural_compressor.ux.components.graph.reader.tensorflow_reader)": [[410, "neural_compressor.ux.components.graph.reader.tensorflow_reader.TensorflowReader"]], "neural_compressor.ux.components.graph.reader.tensorflow_reader": [[410, "module-neural_compressor.ux.components.graph.reader.tensorflow_reader"]], "read() (neural_compressor.ux.components.graph.reader.tensorflow_reader.tensorflowreader method)": [[410, "neural_compressor.ux.components.graph.reader.tensorflow_reader.TensorflowReader.read"]], "neural_compressor.ux.components": [[411, "module-neural_compressor.ux.components"]], "neural_compressor.ux.components.jobs_management": [[412, "module-neural_compressor.ux.components.jobs_management"]], "neural_compressor.ux.components.jobs_management.jobs_control_queue": [[413, "module-neural_compressor.ux.components.jobs_management.jobs_control_queue"]], "neural_compressor.ux.components.jobs_management.jobs_manager": [[414, "module-neural_compressor.ux.components.jobs_management.jobs_manager"]], "neural_compressor.ux.components.jobs_management.request": [[415, "module-neural_compressor.ux.components.jobs_management.request"]], "get_default_path() (in module neural_compressor.ux.components.manage_workspace)": [[416, "neural_compressor.ux.components.manage_workspace.get_default_path"]], "neural_compressor.ux.components.manage_workspace": [[416, "module-neural_compressor.ux.components.manage_workspace"]], "domain (class in neural_compressor.ux.components.model.domain)": [[417, "neural_compressor.ux.components.model.domain.Domain"]], "neural_compressor.ux.components.model.domain": [[417, "module-neural_compressor.ux.components.model.domain"]], "neural_compressor.ux.components.model": [[418, "module-neural_compressor.ux.components.model"]], "model (class in neural_compressor.ux.components.model.model)": [[419, "neural_compressor.ux.components.model.model.Model"]], "domain (neural_compressor.ux.components.model.model.model property)": [[419, "neural_compressor.ux.components.model.model.Model.domain"]], "ensure_supported_path() (neural_compressor.ux.components.model.model.model method)": [[419, "neural_compressor.ux.components.model.model.Model.ensure_supported_path"]], "get_framework_name() (neural_compressor.ux.components.model.model.model static method)": [[419, "neural_compressor.ux.components.model.model.Model.get_framework_name"]], "get_input_nodes() (neural_compressor.ux.components.model.model.model method)": [[419, "neural_compressor.ux.components.model.model.Model.get_input_nodes"]], "get_model_graph() (neural_compressor.ux.components.model.model.model method)": [[419, "neural_compressor.ux.components.model.model.Model.get_model_graph"]], "get_output_nodes() (neural_compressor.ux.components.model.model.model method)": [[419, "neural_compressor.ux.components.model.model.Model.get_output_nodes"]], "get_tensors_info() (neural_compressor.ux.components.model.model.model method)": [[419, "neural_compressor.ux.components.model.model.Model.get_tensors_info"]], "guard_requirements_installed() (neural_compressor.ux.components.model.model.model method)": [[419, "neural_compressor.ux.components.model.model.Model.guard_requirements_installed"]], "input_shape (neural_compressor.ux.components.model.model.model property)": [[419, "neural_compressor.ux.components.model.model.Model.input_shape"]], "neural_compressor.ux.components.model.model": [[419, "module-neural_compressor.ux.components.model.model"]], "shape_elements_order (neural_compressor.ux.components.model.model.model property)": [[419, "neural_compressor.ux.components.model.model.Model.shape_elements_order"]], "supports_graph (neural_compressor.ux.components.model.model.model property)": [[419, "neural_compressor.ux.components.model.model.Model.supports_graph"]], "supports_path() (neural_compressor.ux.components.model.model.model static method)": [[419, "neural_compressor.ux.components.model.model.Model.supports_path"]], "supports_profiling (neural_compressor.ux.components.model.model.model property)": [[419, "neural_compressor.ux.components.model.model.Model.supports_profiling"]], "supports_pruning (neural_compressor.ux.components.model.model.model property)": [[419, "neural_compressor.ux.components.model.model.Model.supports_pruning"]], "get_model_type() (in module neural_compressor.ux.components.model.model_type_getter)": [[420, "neural_compressor.ux.components.model.model_type_getter.get_model_type"]], "neural_compressor.ux.components.model.model_type_getter": [[420, "module-neural_compressor.ux.components.model.model_type_getter"]], "neural_compressor.ux.components.model.onnxrt": [[421, "module-neural_compressor.ux.components.model.onnxrt"]], "onnxrtmodel (class in neural_compressor.ux.components.model.onnxrt.model)": [[422, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel"]], "domain (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel property)": [[422, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.domain"]], "filtered_input_nodes (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel property)": [[422, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.filtered_input_nodes"]], "get_framework_name() (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel static method)": [[422, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.get_framework_name"]], "get_model_graph() (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel method)": [[422, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.get_model_graph"]], "guard_requirements_installed() (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel method)": [[422, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.guard_requirements_installed"]], "input_shape (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel property)": [[422, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.input_shape"]], "nc_model_instance (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel property)": [[422, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.nc_model_instance"]], "neural_compressor.ux.components.model.onnxrt.model": [[422, "module-neural_compressor.ux.components.model.onnxrt.model"]], "remove_number_of_samples_from_shape() (in module neural_compressor.ux.components.model.onnxrt.model)": [[422, "neural_compressor.ux.components.model.onnxrt.model.remove_number_of_samples_from_shape"]], "shape_elements_order (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel property)": [[422, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.shape_elements_order"]], "supports_path() (neural_compressor.ux.components.model.onnxrt.model.onnxrtmodel static method)": [[422, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel.supports_path"]], "neural_compressor.ux.components.model.pytorch": [[423, "module-neural_compressor.ux.components.model.pytorch"]], "pytorchscriptmodel (class in neural_compressor.ux.components.model.pytorch.model)": [[424, "neural_compressor.ux.components.model.pytorch.model.PyTorchScriptModel"]], "get_framework_name() (neural_compressor.ux.components.model.pytorch.model.pytorchscriptmodel static method)": [[424, "neural_compressor.ux.components.model.pytorch.model.PyTorchScriptModel.get_framework_name"]], "guard_requirements_installed() (neural_compressor.ux.components.model.pytorch.model.pytorchscriptmodel method)": [[424, "neural_compressor.ux.components.model.pytorch.model.PyTorchScriptModel.guard_requirements_installed"]], "neural_compressor.ux.components.model.pytorch.model": [[424, "module-neural_compressor.ux.components.model.pytorch.model"]], "supports_path() (neural_compressor.ux.components.model.pytorch.model.pytorchscriptmodel static method)": [[424, "neural_compressor.ux.components.model.pytorch.model.PyTorchScriptModel.supports_path"]], "modelrepository (class in neural_compressor.ux.components.model.repository)": [[425, "neural_compressor.ux.components.model.repository.ModelRepository"]], "get_framework_from_path() (neural_compressor.ux.components.model.repository.modelrepository static method)": [[425, "neural_compressor.ux.components.model.repository.ModelRepository.get_framework_from_path"]], "get_frameworks() (neural_compressor.ux.components.model.repository.modelrepository method)": [[425, "neural_compressor.ux.components.model.repository.ModelRepository.get_frameworks"]], "get_model() (neural_compressor.ux.components.model.repository.modelrepository method)": [[425, "neural_compressor.ux.components.model.repository.ModelRepository.get_model"]], "get_supported_frameworks() (neural_compressor.ux.components.model.repository.modelrepository static method)": [[425, "neural_compressor.ux.components.model.repository.ModelRepository.get_supported_frameworks"]], "is_model_path() (neural_compressor.ux.components.model.repository.modelrepository static method)": [[425, "neural_compressor.ux.components.model.repository.ModelRepository.is_model_path"]], "neural_compressor.ux.components.model.repository": [[425, "module-neural_compressor.ux.components.model.repository"]], "shape (class in neural_compressor.ux.components.model.shape)": [[426, "neural_compressor.ux.components.model.shape.Shape"]], "neural_compressor.ux.components.model.shape": [[426, "module-neural_compressor.ux.components.model.shape"]], "serialize() (neural_compressor.ux.components.model.shape.shape method)": [[426, "neural_compressor.ux.components.model.shape.Shape.serialize"]], "frozenpbmodel (class in neural_compressor.ux.components.model.tensorflow.frozen_pb)": [[427, "neural_compressor.ux.components.model.tensorflow.frozen_pb.FrozenPbModel"]], "neural_compressor.ux.components.model.tensorflow.frozen_pb": [[427, "module-neural_compressor.ux.components.model.tensorflow.frozen_pb"]], "supports_path() (neural_compressor.ux.components.model.tensorflow.frozen_pb.frozenpbmodel static method)": [[427, "neural_compressor.ux.components.model.tensorflow.frozen_pb.FrozenPbModel.supports_path"]], "supports_profiling (neural_compressor.ux.components.model.tensorflow.frozen_pb.frozenpbmodel property)": [[427, "neural_compressor.ux.components.model.tensorflow.frozen_pb.FrozenPbModel.supports_profiling"]], "neural_compressor.ux.components.model.tensorflow": [[428, "module-neural_compressor.ux.components.model.tensorflow"]], "kerasmodel (class in neural_compressor.ux.components.model.tensorflow.keras)": [[429, "neural_compressor.ux.components.model.tensorflow.keras.KerasModel"]], "get_input_nodes() (neural_compressor.ux.components.model.tensorflow.keras.kerasmodel method)": [[429, "neural_compressor.ux.components.model.tensorflow.keras.KerasModel.get_input_nodes"]], "get_output_nodes() (neural_compressor.ux.components.model.tensorflow.keras.kerasmodel method)": [[429, "neural_compressor.ux.components.model.tensorflow.keras.KerasModel.get_output_nodes"]], "neural_compressor.ux.components.model.tensorflow.keras": [[429, "module-neural_compressor.ux.components.model.tensorflow.keras"]], "supports_path() (neural_compressor.ux.components.model.tensorflow.keras.kerasmodel static method)": [[429, "neural_compressor.ux.components.model.tensorflow.keras.KerasModel.supports_path"]], "metagraphmodel (class in neural_compressor.ux.components.model.tensorflow.meta_graph)": [[430, "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel"]], "get_input_nodes() (neural_compressor.ux.components.model.tensorflow.meta_graph.metagraphmodel method)": [[430, "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel.get_input_nodes"]], "get_model_graph() (neural_compressor.ux.components.model.tensorflow.meta_graph.metagraphmodel method)": [[430, "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel.get_model_graph"]], "get_output_nodes() (neural_compressor.ux.components.model.tensorflow.meta_graph.metagraphmodel method)": [[430, "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel.get_output_nodes"]], "neural_compressor.ux.components.model.tensorflow.meta_graph": [[430, "module-neural_compressor.ux.components.model.tensorflow.meta_graph"]], "supports_path() (neural_compressor.ux.components.model.tensorflow.meta_graph.metagraphmodel static method)": [[430, "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel.supports_path"]], "tensorflowmodel (class in neural_compressor.ux.components.model.tensorflow.model)": [[431, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel"]], "get_framework_name() (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel static method)": [[431, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.get_framework_name"]], "get_input_nodes() (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel method)": [[431, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.get_input_nodes"]], "get_model_graph() (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel method)": [[431, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.get_model_graph"]], "get_output_nodes() (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel method)": [[431, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.get_output_nodes"]], "guard_requirements_installed() (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel method)": [[431, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.guard_requirements_installed"]], "input_shape (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel property)": [[431, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.input_shape"]], "nc_model_instance (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel property)": [[431, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.nc_model_instance"]], "neural_compressor.ux.components.model.tensorflow.model": [[431, "module-neural_compressor.ux.components.model.tensorflow.model"]], "shape_elements_order (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel property)": [[431, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.shape_elements_order"]], "supports_pruning (neural_compressor.ux.components.model.tensorflow.model.tensorflowmodel property)": [[431, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel.supports_pruning"]], "savedmodelmodel (class in neural_compressor.ux.components.model.tensorflow.saved_model)": [[432, "neural_compressor.ux.components.model.tensorflow.saved_model.SavedModelModel"]], "neural_compressor.ux.components.model.tensorflow.saved_model": [[432, "module-neural_compressor.ux.components.model.tensorflow.saved_model"]], "supports_path() (neural_compressor.ux.components.model.tensorflow.saved_model.savedmodelmodel static method)": [[432, "neural_compressor.ux.components.model.tensorflow.saved_model.SavedModelModel.supports_path"]], "get_input_shape() (in module neural_compressor.ux.components.model.tensorflow.utils)": [[433, "neural_compressor.ux.components.model.tensorflow.utils.get_input_shape"]], "neural_compressor.ux.components.model.tensorflow.utils": [[433, "module-neural_compressor.ux.components.model.tensorflow.utils"]], "download_config() (in module neural_compressor.ux.components.model_zoo.download_config)": [[434, "neural_compressor.ux.components.model_zoo.download_config.download_config"]], "neural_compressor.ux.components.model_zoo.download_config": [[434, "module-neural_compressor.ux.components.model_zoo.download_config"]], "download_model() (in module neural_compressor.ux.components.model_zoo.download_model)": [[435, "neural_compressor.ux.components.model_zoo.download_model.download_model"]], "neural_compressor.ux.components.model_zoo.download_model": [[435, "module-neural_compressor.ux.components.model_zoo.download_model"]], "downloader (class in neural_compressor.ux.components.model_zoo.downloader)": [[436, "neural_compressor.ux.components.model_zoo.downloader.Downloader"]], "download() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[436, "neural_compressor.ux.components.model_zoo.downloader.Downloader.download"]], "download_config() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[436, "neural_compressor.ux.components.model_zoo.downloader.Downloader.download_config"]], "download_file() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[436, "neural_compressor.ux.components.model_zoo.downloader.Downloader.download_file"]], "download_model() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[436, "neural_compressor.ux.components.model_zoo.downloader.Downloader.download_model"]], "download_yaml_config() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[436, "neural_compressor.ux.components.model_zoo.downloader.Downloader.download_yaml_config"]], "get_yaml_url() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[436, "neural_compressor.ux.components.model_zoo.downloader.Downloader.get_yaml_url"]], "neural_compressor.ux.components.model_zoo.downloader": [[436, "module-neural_compressor.ux.components.model_zoo.downloader"]], "unpack_archive() (neural_compressor.ux.components.model_zoo.downloader.downloader method)": [[436, "neural_compressor.ux.components.model_zoo.downloader.Downloader.unpack_archive"]], "neural_compressor.ux.components.model_zoo": [[437, "module-neural_compressor.ux.components.model_zoo"]], "check_version() (in module neural_compressor.ux.components.model_zoo.list_models)": [[438, "neural_compressor.ux.components.model_zoo.list_models.check_version"]], "get_available_models() (in module neural_compressor.ux.components.model_zoo.list_models)": [[438, "neural_compressor.ux.components.model_zoo.list_models.get_available_models"]], "get_framework_module_name() (in module neural_compressor.ux.components.model_zoo.list_models)": [[438, "neural_compressor.ux.components.model_zoo.list_models.get_framework_module_name"]], "get_installed_frameworks() (in module neural_compressor.ux.components.model_zoo.list_models)": [[438, "neural_compressor.ux.components.model_zoo.list_models.get_installed_frameworks"]], "list_models() (in module neural_compressor.ux.components.model_zoo.list_models)": [[438, "neural_compressor.ux.components.model_zoo.list_models.list_models"]], "neural_compressor.ux.components.model_zoo.list_models": [[438, "module-neural_compressor.ux.components.model_zoo.list_models"]], "validate_model_list() (in module neural_compressor.ux.components.model_zoo.list_models)": [[438, "neural_compressor.ux.components.model_zoo.list_models.validate_model_list"]], "neural_compressor.ux.components.names_mapper": [[439, "module-neural_compressor.ux.components.names_mapper"]], "mappingdirection (class in neural_compressor.ux.components.names_mapper.names_mapper)": [[440, "neural_compressor.ux.components.names_mapper.names_mapper.MappingDirection"]], "namesmapper (class in neural_compressor.ux.components.names_mapper.names_mapper)": [[440, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper"]], "domain_flavour_mappings (neural_compressor.ux.components.names_mapper.names_mapper.namesmapper property)": [[440, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper.domain_flavour_mappings"]], "domain_mappings (neural_compressor.ux.components.names_mapper.names_mapper.namesmapper property)": [[440, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper.domain_mappings"]], "framework_mappings (neural_compressor.ux.components.names_mapper.names_mapper.namesmapper property)": [[440, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper.framework_mappings"]], "map_name() (neural_compressor.ux.components.names_mapper.names_mapper.namesmapper method)": [[440, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper.map_name"]], "neural_compressor.ux.components.names_mapper.names_mapper": [[440, "module-neural_compressor.ux.components.names_mapper.names_mapper"]], "precision_mappings (neural_compressor.ux.components.names_mapper.names_mapper.namesmapper property)": [[440, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper.precision_mappings"]], "check_if_collect_tuning_history() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[441, "neural_compressor.ux.components.optimization.execute_optimization.check_if_collect_tuning_history"]], "execute_optimization() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[441, "neural_compressor.ux.components.optimization.execute_optimization.execute_optimization"]], "execute_optimization_pytorch_script() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[441, "neural_compressor.ux.components.optimization.execute_optimization.execute_optimization_pytorch_script"]], "execute_optimization_regular() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[441, "neural_compressor.ux.components.optimization.execute_optimization.execute_optimization_regular"]], "neural_compressor.ux.components.optimization.execute_optimization": [[441, "module-neural_compressor.ux.components.optimization.execute_optimization"]], "parse_logs() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[441, "neural_compressor.ux.components.optimization.execute_optimization.parse_logs"]], "parse_model_data_to_bench_names() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[441, "neural_compressor.ux.components.optimization.execute_optimization.parse_model_data_to_bench_names"]], "optimizationfactory (class in neural_compressor.ux.components.optimization.factory)": [[442, "neural_compressor.ux.components.optimization.factory.OptimizationFactory"]], "get_optimization() (neural_compressor.ux.components.optimization.factory.optimizationfactory static method)": [[442, "neural_compressor.ux.components.optimization.factory.OptimizationFactory.get_optimization"]], "neural_compressor.ux.components.optimization.factory": [[442, "module-neural_compressor.ux.components.optimization.factory"]], "graphoptimization (class in neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization)": [[443, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization"]], "configuration_data (neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.graphoptimization property)": [[443, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization.configuration_data"]], "execute() (neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.graphoptimization method)": [[443, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization.execute"]], "generate_config() (neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.graphoptimization method)": [[443, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization.generate_config"]], "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization": [[443, "module-neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization"]], "optimization_script (neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.graphoptimization property)": [[443, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization.optimization_script"]], "parameters (neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.graphoptimization property)": [[443, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization.parameters"]], "neural_compressor.ux.components.optimization.graph_optimizer": [[444, "module-neural_compressor.ux.components.optimization.graph_optimizer"]], "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model": [[445, "module-neural_compressor.ux.components.optimization.graph_optimizer.optimize_model"]], "optimize_graph() (in module neural_compressor.ux.components.optimization.graph_optimizer.optimize_model)": [[445, "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model.optimize_graph"]], "optimize_graph_config() (in module neural_compressor.ux.components.optimization.graph_optimizer.optimize_model)": [[445, "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model.optimize_graph_config"]], "parse_args() (in module neural_compressor.ux.components.optimization.graph_optimizer.optimize_model)": [[445, "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model.parse_args"]], "set_eager_execution() (in module neural_compressor.ux.components.optimization.graph_optimizer.optimize_model)": [[445, "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model.set_eager_execution"]], "optimizations (class in neural_compressor.ux.components.optimization)": [[446, "neural_compressor.ux.components.optimization.Optimizations"]], "neural_compressor.ux.components.optimization": [[446, "module-neural_compressor.ux.components.optimization"]], "neural_compressor.ux.components.optimization.mixed_precision": [[447, "module-neural_compressor.ux.components.optimization.mixed_precision"]], "mixedprecision (class in neural_compressor.ux.components.optimization.mixed_precision.mixed_precision)": [[448, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision"]], "configuration_data (neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.mixedprecision property)": [[448, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision.configuration_data"]], "execute() (neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.mixedprecision method)": [[448, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision.execute"]], "generate_config() (neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.mixedprecision method)": [[448, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision.generate_config"]], "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision": [[448, "module-neural_compressor.ux.components.optimization.mixed_precision.mixed_precision"]], "optimization_script (neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.mixedprecision property)": [[448, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision.optimization_script"]], "parameters (neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.mixedprecision property)": [[448, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision.parameters"]], "neural_compressor.ux.components.optimization.mixed_precision.optimize_model": [[449, "module-neural_compressor.ux.components.optimization.mixed_precision.optimize_model"]], "optimize_graph() (in module neural_compressor.ux.components.optimization.mixed_precision.optimize_model)": [[449, "neural_compressor.ux.components.optimization.mixed_precision.optimize_model.optimize_graph"]], "optimize_graph_config() (in module neural_compressor.ux.components.optimization.mixed_precision.optimize_model)": [[449, "neural_compressor.ux.components.optimization.mixed_precision.optimize_model.optimize_graph_config"]], "parse_args() (in module neural_compressor.ux.components.optimization.mixed_precision.optimize_model)": [[449, "neural_compressor.ux.components.optimization.mixed_precision.optimize_model.parse_args"]], "set_eager_execution() (in module neural_compressor.ux.components.optimization.mixed_precision.optimize_model)": [[449, "neural_compressor.ux.components.optimization.mixed_precision.optimize_model.set_eager_execution"]], "neural_compressor.ux.components.optimization.neural_coder_optimization": [[450, "module-neural_compressor.ux.components.optimization.neural_coder_optimization"]], "neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model": [[451, "module-neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model"]], "optimize_pt_script() (in module neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model)": [[451, "neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model.optimize_pt_script"]], "dataloaderinterface (class in neural_compressor.ux.components.optimization.optimization)": [[452, "neural_compressor.ux.components.optimization.optimization.DataloaderInterface"]], "optimization (class in neural_compressor.ux.components.optimization.optimization)": [[452, "neural_compressor.ux.components.optimization.optimization.Optimization"]], "optimizationinterface (class in neural_compressor.ux.components.optimization.optimization)": [[452, "neural_compressor.ux.components.optimization.optimization.OptimizationInterface"]], "command (neural_compressor.ux.components.optimization.optimization.optimization property)": [[452, "neural_compressor.ux.components.optimization.optimization.Optimization.command"]], "config_filename (neural_compressor.ux.components.optimization.optimization.optimization property)": [[452, "neural_compressor.ux.components.optimization.optimization.Optimization.config_filename"]], "configuration_data (neural_compressor.ux.components.optimization.optimization.optimization property)": [[452, "neural_compressor.ux.components.optimization.optimization.Optimization.configuration_data"]], "execute() (neural_compressor.ux.components.optimization.optimization.optimization method)": [[452, "neural_compressor.ux.components.optimization.optimization.Optimization.execute"]], "generate_config() (neural_compressor.ux.components.optimization.optimization.optimization method)": [[452, "neural_compressor.ux.components.optimization.optimization.Optimization.generate_config"]], "neural_compressor.ux.components.optimization.optimization": [[452, "module-neural_compressor.ux.components.optimization.optimization"]], "optimization_script (neural_compressor.ux.components.optimization.optimization.optimization property)": [[452, "neural_compressor.ux.components.optimization.optimization.Optimization.optimization_script"]], "output_model_dir (neural_compressor.ux.components.optimization.optimization.optimization property)": [[452, "neural_compressor.ux.components.optimization.optimization.Optimization.output_model_dir"]], "output_model_name (neural_compressor.ux.components.optimization.optimization.optimization property)": [[452, "neural_compressor.ux.components.optimization.optimization.Optimization.output_model_name"]], "parameters (neural_compressor.ux.components.optimization.optimization.optimization property)": [[452, "neural_compressor.ux.components.optimization.optimization.Optimization.parameters"]], "workdir (neural_compressor.ux.components.optimization.optimization.optimization property)": [[452, "neural_compressor.ux.components.optimization.optimization.Optimization.workdir"]], "neural_compressor.ux.components.optimization.pruning": [[453, "module-neural_compressor.ux.components.optimization.pruning"]], "neural_compressor.ux.components.optimization.pruning.optimize_model": [[454, "module-neural_compressor.ux.components.optimization.pruning.optimize_model"]], "optimize_model() (in module neural_compressor.ux.components.optimization.pruning.optimize_model)": [[454, "neural_compressor.ux.components.optimization.pruning.optimize_model.optimize_model"]], "parse_args() (in module neural_compressor.ux.components.optimization.pruning.optimize_model)": [[454, "neural_compressor.ux.components.optimization.pruning.optimize_model.parse_args"]], "pruning (class in neural_compressor.ux.components.optimization.pruning.pruning)": [[455, "neural_compressor.ux.components.optimization.pruning.pruning.Pruning"]], "configuration_data (neural_compressor.ux.components.optimization.pruning.pruning.pruning property)": [[455, "neural_compressor.ux.components.optimization.pruning.pruning.Pruning.configuration_data"]], "execute() (neural_compressor.ux.components.optimization.pruning.pruning.pruning method)": [[455, "neural_compressor.ux.components.optimization.pruning.pruning.Pruning.execute"]], "generate_config() (neural_compressor.ux.components.optimization.pruning.pruning.pruning method)": [[455, "neural_compressor.ux.components.optimization.pruning.pruning.Pruning.generate_config"]], "neural_compressor.ux.components.optimization.pruning.pruning": [[455, "module-neural_compressor.ux.components.optimization.pruning.pruning"]], "optimization_script (neural_compressor.ux.components.optimization.pruning.pruning.pruning property)": [[455, "neural_compressor.ux.components.optimization.pruning.pruning.Pruning.optimization_script"]], "parameters (neural_compressor.ux.components.optimization.pruning.pruning.pruning property)": [[455, "neural_compressor.ux.components.optimization.pruning.pruning.Pruning.parameters"]], "neural_compressor.ux.components.optimization.tune": [[456, "module-neural_compressor.ux.components.optimization.tune"]], "neural_compressor.ux.components.optimization.tune.tune_model": [[457, "module-neural_compressor.ux.components.optimization.tune.tune_model"]], "parse_args() (in module neural_compressor.ux.components.optimization.tune.tune_model)": [[457, "neural_compressor.ux.components.optimization.tune.tune_model.parse_args"]], "set_eager_execution() (in module neural_compressor.ux.components.optimization.tune.tune_model)": [[457, "neural_compressor.ux.components.optimization.tune.tune_model.set_eager_execution"]], "tune_model() (in module neural_compressor.ux.components.optimization.tune.tune_model)": [[457, "neural_compressor.ux.components.optimization.tune.tune_model.tune_model"]], "accuracycriterion (class in neural_compressor.ux.components.optimization.tune.tuning)": [[458, "neural_compressor.ux.components.optimization.tune.tuning.AccuracyCriterion"]], "tuning (class in neural_compressor.ux.components.optimization.tune.tuning)": [[458, "neural_compressor.ux.components.optimization.tune.tuning.Tuning"]], "tuningdetails (class in neural_compressor.ux.components.optimization.tune.tuning)": [[458, "neural_compressor.ux.components.optimization.tune.tuning.TuningDetails"]], "configuration_data (neural_compressor.ux.components.optimization.tune.tuning.tuning property)": [[458, "neural_compressor.ux.components.optimization.tune.tuning.Tuning.configuration_data"]], "execute() (neural_compressor.ux.components.optimization.tune.tuning.tuning method)": [[458, "neural_compressor.ux.components.optimization.tune.tuning.Tuning.execute"]], "generate_config() (neural_compressor.ux.components.optimization.tune.tuning.tuning method)": [[458, "neural_compressor.ux.components.optimization.tune.tuning.Tuning.generate_config"]], "neural_compressor.ux.components.optimization.tune.tuning": [[458, "module-neural_compressor.ux.components.optimization.tune.tuning"]], "optimization_script (neural_compressor.ux.components.optimization.tune.tuning.tuning property)": [[458, "neural_compressor.ux.components.optimization.tune.tuning.Tuning.optimization_script"]], "parameters (neural_compressor.ux.components.optimization.tune.tuning.tuning property)": [[458, "neural_compressor.ux.components.optimization.tune.tuning.Tuning.parameters"]], "tuninghistory (class in neural_compressor.ux.components.optimization.tuning_history)": [[459, "neural_compressor.ux.components.optimization.tuning_history.TuningHistory"]], "watcher (class in neural_compressor.ux.components.optimization.tuning_history)": [[459, "neural_compressor.ux.components.optimization.tuning_history.Watcher"]], "history_file_modification_time() (neural_compressor.ux.components.optimization.tuning_history.watcher method)": [[459, "neural_compressor.ux.components.optimization.tuning_history.Watcher.history_file_modification_time"]], "neural_compressor.ux.components.optimization.tuning_history": [[459, "module-neural_compressor.ux.components.optimization.tuning_history"]], "send_history_snapshot() (neural_compressor.ux.components.optimization.tuning_history.tuninghistory static method)": [[459, "neural_compressor.ux.components.optimization.tuning_history.TuningHistory.send_history_snapshot"]], "stop() (neural_compressor.ux.components.optimization.tuning_history.watcher method)": [[459, "neural_compressor.ux.components.optimization.tuning_history.Watcher.stop"]], "tuning_history() (in module neural_compressor.ux.components.optimization.tuning_history)": [[459, "neural_compressor.ux.components.optimization.tuning_history.tuning_history"]], "tuning_history_path() (in module neural_compressor.ux.components.optimization.tuning_history)": [[459, "neural_compressor.ux.components.optimization.tuning_history.tuning_history_path"]], "was_history_file_changed() (neural_compressor.ux.components.optimization.tuning_history.watcher method)": [[459, "neural_compressor.ux.components.optimization.tuning_history.Watcher.was_history_file_changed"]], "execute_profiling() (in module neural_compressor.ux.components.profiling.execute_profiling)": [[460, "neural_compressor.ux.components.profiling.execute_profiling.execute_profiling"]], "execute_real_profiling() (in module neural_compressor.ux.components.profiling.execute_profiling)": [[460, "neural_compressor.ux.components.profiling.execute_profiling.execute_real_profiling"]], "neural_compressor.ux.components.profiling.execute_profiling": [[460, "module-neural_compressor.ux.components.profiling.execute_profiling"]], "profilerfactory (class in neural_compressor.ux.components.profiling.factory)": [[461, "neural_compressor.ux.components.profiling.factory.ProfilerFactory"]], "get_profiler() (neural_compressor.ux.components.profiling.factory.profilerfactory static method)": [[461, "neural_compressor.ux.components.profiling.factory.ProfilerFactory.get_profiler"]], "neural_compressor.ux.components.profiling.factory": [[461, "module-neural_compressor.ux.components.profiling.factory"]], "neural_compressor.ux.components.profiling": [[462, "module-neural_compressor.ux.components.profiling"]], "load_profiling_details() (in module neural_compressor.ux.components.profiling.profile_model)": [[463, "neural_compressor.ux.components.profiling.profile_model.load_profiling_details"]], "neural_compressor.ux.components.profiling.profile_model": [[463, "module-neural_compressor.ux.components.profiling.profile_model"]], "parse_args() (in module neural_compressor.ux.components.profiling.profile_model)": [[463, "neural_compressor.ux.components.profiling.profile_model.parse_args"]], "profiler (class in neural_compressor.ux.components.profiling.profiler)": [[464, "neural_compressor.ux.components.profiling.profiler.Profiler"]], "neural_compressor.ux.components.profiling.profiler": [[464, "module-neural_compressor.ux.components.profiling.profiler"]], "profile_model() (neural_compressor.ux.components.profiling.profiler.profiler method)": [[464, "neural_compressor.ux.components.profiling.profiler.Profiler.profile_model"]], "dataloaderinterface (class in neural_compressor.ux.components.profiling.profiling)": [[465, "neural_compressor.ux.components.profiling.profiling.DataloaderInterface"]], "profiling (class in neural_compressor.ux.components.profiling.profiling)": [[465, "neural_compressor.ux.components.profiling.profiling.Profiling"]], "config_filename (neural_compressor.ux.components.profiling.profiling.profiling property)": [[465, "neural_compressor.ux.components.profiling.profiling.Profiling.config_filename"]], "config_path (neural_compressor.ux.components.profiling.profiling.profiling property)": [[465, "neural_compressor.ux.components.profiling.profiling.Profiling.config_path"]], "execute() (neural_compressor.ux.components.profiling.profiling.profiling method)": [[465, "neural_compressor.ux.components.profiling.profiling.Profiling.execute"]], "generate_config() (neural_compressor.ux.components.profiling.profiling.profiling method)": [[465, "neural_compressor.ux.components.profiling.profiling.Profiling.generate_config"]], "neural_compressor.ux.components.profiling.profiling": [[465, "module-neural_compressor.ux.components.profiling.profiling"]], "profiling_data (neural_compressor.ux.components.profiling.profiling.profiling property)": [[465, "neural_compressor.ux.components.profiling.profiling.Profiling.profiling_data"]], "workdir (neural_compressor.ux.components.profiling.profiling.profiling property)": [[465, "neural_compressor.ux.components.profiling.profiling.Profiling.workdir"]], "profilerfactory (class in neural_compressor.ux.components.profiling.tensorflow_profiler.factory)": [[466, "neural_compressor.ux.components.profiling.tensorflow_profiler.factory.ProfilerFactory"]], "get_profiler() (neural_compressor.ux.components.profiling.tensorflow_profiler.factory.profilerfactory static method)": [[466, "neural_compressor.ux.components.profiling.tensorflow_profiler.factory.ProfilerFactory.get_profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.factory": [[466, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.factory"]], "neural_compressor.ux.components.profiling.tensorflow_profiler": [[467, "module-neural_compressor.ux.components.profiling.tensorflow_profiler"]], "profiler (class in neural_compressor.ux.components.profiling.tensorflow_profiler.profiler)": [[468, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler"]], "build_dataloader() (neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.profiler method)": [[468, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler.build_dataloader"]], "convert_nodes_to_list() (neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.profiler static method)": [[468, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler.convert_nodes_to_list"]], "create_tf_config() (neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.profiler method)": [[468, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler.create_tf_config"]], "get_node_by_name() (neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.profiler static method)": [[468, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler.get_node_by_name"]], "initialize_graph() (neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.profiler method)": [[468, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler.initialize_graph"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler": [[468, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.profiler"]], "profile_model() (neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.profiler method)": [[468, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler.profile_model"]], "delete_assign() (in module neural_compressor.ux.components.profiling.tensorflow_profiler.utils)": [[469, "neural_compressor.ux.components.profiling.tensorflow_profiler.utils.delete_assign"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.utils": [[469, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.utils"]], "main() (in module neural_compressor.ux.inc_bench)": [[470, "neural_compressor.ux.inc_bench.main"]], "neural_compressor.ux.inc_bench": [[470, "module-neural_compressor.ux.inc_bench"]], "prepare_environment() (in module neural_compressor.ux.inc_bench)": [[470, "neural_compressor.ux.inc_bench.prepare_environment"]], "neural_compressor.ux": [[471, "module-neural_compressor.ux"]], "domainflavours (class in neural_compressor.ux.utils.consts)": [[472, "neural_compressor.ux.utils.consts.DomainFlavours"]], "domains (class in neural_compressor.ux.utils.consts)": [[472, "neural_compressor.ux.utils.consts.Domains"]], "executionstatus (class in neural_compressor.ux.utils.consts)": [[472, "neural_compressor.ux.utils.consts.ExecutionStatus"]], "frameworks (class in neural_compressor.ux.utils.consts)": [[472, "neural_compressor.ux.utils.consts.Frameworks"]], "optimizationtypes (class in neural_compressor.ux.utils.consts)": [[472, "neural_compressor.ux.utils.consts.OptimizationTypes"]], "precisions (class in neural_compressor.ux.utils.consts)": [[472, "neural_compressor.ux.utils.consts.Precisions"]], "strategies (class in neural_compressor.ux.utils.consts)": [[472, "neural_compressor.ux.utils.consts.Strategies"]], "neural_compressor.ux.utils.consts": [[472, "module-neural_compressor.ux.utils.consts"]], "environment (class in neural_compressor.ux.utils.environment)": [[473, "neural_compressor.ux.utils.environment.Environment"]], "clean_workloads_wip_status() (neural_compressor.ux.utils.environment.environment static method)": [[473, "neural_compressor.ux.utils.environment.Environment.clean_workloads_wip_status"]], "ensure_workdir_exists_and_writeable() (neural_compressor.ux.utils.environment.environment static method)": [[473, "neural_compressor.ux.utils.environment.Environment.ensure_workdir_exists_and_writeable"]], "migrate_database() (neural_compressor.ux.utils.environment.environment static method)": [[473, "neural_compressor.ux.utils.environment.Environment.migrate_database"]], "neural_compressor.ux.utils.environment": [[473, "module-neural_compressor.ux.utils.environment"]], "accessdeniedexception": [[474, "neural_compressor.ux.utils.exceptions.AccessDeniedException"]], "clienterrorexception": [[474, "neural_compressor.ux.utils.exceptions.ClientErrorException"]], "internalexception": [[474, "neural_compressor.ux.utils.exceptions.InternalException"]], "notfoundexception": [[474, "neural_compressor.ux.utils.exceptions.NotFoundException"]], "neural_compressor.ux.utils.exceptions": [[474, "module-neural_compressor.ux.utils.exceptions"]], "executor (class in neural_compressor.ux.utils.executor)": [[475, "neural_compressor.ux.utils.executor.Executor"]], "additional_log_names (neural_compressor.ux.utils.executor.executor property)": [[475, "neural_compressor.ux.utils.executor.Executor.additional_log_names"]], "call() (neural_compressor.ux.utils.executor.executor method)": [[475, "neural_compressor.ux.utils.executor.Executor.call"]], "call_one() (neural_compressor.ux.utils.executor.executor method)": [[475, "neural_compressor.ux.utils.executor.Executor.call_one"]], "is_multi_commands() (neural_compressor.ux.utils.executor.executor static method)": [[475, "neural_compressor.ux.utils.executor.Executor.is_multi_commands"]], "log_name (neural_compressor.ux.utils.executor.executor property)": [[475, "neural_compressor.ux.utils.executor.Executor.log_name"]], "neural_compressor.ux.utils.executor": [[475, "module-neural_compressor.ux.utils.executor"]], "process_duration (neural_compressor.ux.utils.executor.executor property)": [[475, "neural_compressor.ux.utils.executor.Executor.process_duration"]], "refresh_workdir() (neural_compressor.ux.utils.executor.executor method)": [[475, "neural_compressor.ux.utils.executor.Executor.refresh_workdir"]], "request_id (neural_compressor.ux.utils.executor.executor property)": [[475, "neural_compressor.ux.utils.executor.Executor.request_id"]], "workdir (neural_compressor.ux.utils.executor.executor property)": [[475, "neural_compressor.ux.utils.executor.Executor.workdir"]], "expiringdict (class in neural_compressor.ux.utils.expiring_dict)": [[476, "neural_compressor.ux.utils.expiring_dict.ExpiringDict"]], "expiringdictitem (class in neural_compressor.ux.utils.expiring_dict)": [[476, "neural_compressor.ux.utils.expiring_dict.ExpiringDictItem"]], "is_expired() (neural_compressor.ux.utils.expiring_dict.expiringdictitem method)": [[476, "neural_compressor.ux.utils.expiring_dict.ExpiringDictItem.is_expired"]], "neural_compressor.ux.utils.expiring_dict": [[476, "module-neural_compressor.ux.utils.expiring_dict"]], "githubinfo (class in neural_compressor.ux.utils.github_info)": [[477, "neural_compressor.ux.utils.github_info.GithubInfo"]], "neural_compressor.ux.utils.github_info": [[477, "module-neural_compressor.ux.utils.github_info"]], "tag() (neural_compressor.ux.utils.github_info.githubinfo class method)": [[477, "neural_compressor.ux.utils.github_info.GithubInfo.tag"]], "hwinfo (class in neural_compressor.ux.utils.hw_info)": [[478, "neural_compressor.ux.utils.hw_info.HWInfo"]], "get_bios_version() (in module neural_compressor.ux.utils.hw_info)": [[478, "neural_compressor.ux.utils.hw_info.get_bios_version"]], "get_distribution() (in module neural_compressor.ux.utils.hw_info)": [[478, "neural_compressor.ux.utils.hw_info.get_distribution"]], "get_framework_dependency_info() (in module neural_compressor.ux.utils.hw_info)": [[478, "neural_compressor.ux.utils.hw_info.get_framework_dependency_info"]], "get_framework_info() (in module neural_compressor.ux.utils.hw_info)": [[478, "neural_compressor.ux.utils.hw_info.get_framework_info"]], "get_kernel_version() (in module neural_compressor.ux.utils.hw_info)": [[478, "neural_compressor.ux.utils.hw_info.get_kernel_version"]], "get_number_of_sockets() (in module neural_compressor.ux.utils.hw_info)": [[478, "neural_compressor.ux.utils.hw_info.get_number_of_sockets"]], "initialize() (neural_compressor.ux.utils.hw_info.hwinfo method)": [[478, "neural_compressor.ux.utils.hw_info.HWInfo.initialize"]], "is_turbo_boost_enabled() (in module neural_compressor.ux.utils.hw_info)": [[478, "neural_compressor.ux.utils.hw_info.is_turbo_boost_enabled"]], "neural_compressor.ux.utils.hw_info": [[478, "module-neural_compressor.ux.utils.hw_info"]], "serialize() (neural_compressor.ux.utils.hw_info.hwinfo method)": [[478, "neural_compressor.ux.utils.hw_info.HWInfo.serialize"]], "neural_compressor.ux.utils": [[479, "module-neural_compressor.ux.utils"]], "jsonserializer (class in neural_compressor.ux.utils.json_serializer)": [[480, "neural_compressor.ux.utils.json_serializer.JsonSerializer"]], "neural_compressor.ux.utils.json_serializer": [[480, "module-neural_compressor.ux.utils.json_serializer"]], "serialize() (neural_compressor.ux.utils.json_serializer.jsonserializer method)": [[480, "neural_compressor.ux.utils.json_serializer.JsonSerializer.serialize"]], "serialize_item() (neural_compressor.ux.utils.json_serializer.jsonserializer static method)": [[480, "neural_compressor.ux.utils.json_serializer.JsonSerializer.serialize_item"]], "change_log_level() (in module neural_compressor.ux.utils.logger)": [[481, "neural_compressor.ux.utils.logger.change_log_level"]], "neural_compressor.ux.utils.logger": [[481, "module-neural_compressor.ux.utils.logger"]], "accuracyparser (class in neural_compressor.ux.utils.parser)": [[482, "neural_compressor.ux.utils.parser.AccuracyParser"]], "benchmarkparserfactory (class in neural_compressor.ux.utils.parser)": [[482, "neural_compressor.ux.utils.parser.BenchmarkParserFactory"]], "optimizationparser (class in neural_compressor.ux.utils.parser)": [[482, "neural_compressor.ux.utils.parser.OptimizationParser"]], "parser (class in neural_compressor.ux.utils.parser)": [[482, "neural_compressor.ux.utils.parser.Parser"]], "performanceparser (class in neural_compressor.ux.utils.parser)": [[482, "neural_compressor.ux.utils.parser.PerformanceParser"]], "profilingparser (class in neural_compressor.ux.utils.parser)": [[482, "neural_compressor.ux.utils.parser.ProfilingParser"]], "get_parser() (neural_compressor.ux.utils.parser.benchmarkparserfactory static method)": [[482, "neural_compressor.ux.utils.parser.BenchmarkParserFactory.get_parser"]], "neural_compressor.ux.utils.parser": [[482, "module-neural_compressor.ux.utils.parser"]], "patterns (neural_compressor.ux.utils.parser.accuracyparser property)": [[482, "neural_compressor.ux.utils.parser.AccuracyParser.patterns"]], "patterns (neural_compressor.ux.utils.parser.optimizationparser property)": [[482, "neural_compressor.ux.utils.parser.OptimizationParser.patterns"]], "patterns (neural_compressor.ux.utils.parser.parser property)": [[482, "neural_compressor.ux.utils.parser.Parser.patterns"]], "patterns (neural_compressor.ux.utils.parser.performanceparser property)": [[482, "neural_compressor.ux.utils.parser.PerformanceParser.patterns"]], "patterns (neural_compressor.ux.utils.parser.profilingparser property)": [[482, "neural_compressor.ux.utils.parser.ProfilingParser.patterns"]], "process() (neural_compressor.ux.utils.parser.accuracyparser method)": [[482, "neural_compressor.ux.utils.parser.AccuracyParser.process"]], "process() (neural_compressor.ux.utils.parser.optimizationparser method)": [[482, "neural_compressor.ux.utils.parser.OptimizationParser.process"]], "process() (neural_compressor.ux.utils.parser.parser method)": [[482, "neural_compressor.ux.utils.parser.Parser.process"]], "process() (neural_compressor.ux.utils.parser.performanceparser method)": [[482, "neural_compressor.ux.utils.parser.PerformanceParser.process"]], "process() (neural_compressor.ux.utils.parser.profilingparser method)": [[482, "neural_compressor.ux.utils.parser.ProfilingParser.process"]], "summarize_partial() (neural_compressor.ux.utils.parser.performanceparser method)": [[482, "neural_compressor.ux.utils.parser.PerformanceParser.summarize_partial"]], "summarize_value() (neural_compressor.ux.utils.parser.performanceparser static method)": [[482, "neural_compressor.ux.utils.parser.PerformanceParser.summarize_value"]], "unify_time() (neural_compressor.ux.utils.parser.profilingparser static method)": [[482, "neural_compressor.ux.utils.parser.ProfilingParser.unify_time"]], "update_partial() (neural_compressor.ux.utils.parser.performanceparser static method)": [[482, "neural_compressor.ux.utils.parser.PerformanceParser.update_partial"]], "proc (class in neural_compressor.ux.utils.proc)": [[483, "neural_compressor.ux.utils.proc.Proc"]], "info (neural_compressor.ux.utils.proc.proc property)": [[483, "neural_compressor.ux.utils.proc.Proc.info"]], "info_path (neural_compressor.ux.utils.proc.proc property)": [[483, "neural_compressor.ux.utils.proc.Proc.info_path"]], "is_ok (neural_compressor.ux.utils.proc.proc property)": [[483, "neural_compressor.ux.utils.proc.Proc.is_ok"]], "neural_compressor.ux.utils.proc": [[483, "module-neural_compressor.ux.utils.proc"]], "output (neural_compressor.ux.utils.proc.proc property)": [[483, "neural_compressor.ux.utils.proc.Proc.output"]], "output_path (neural_compressor.ux.utils.proc.proc property)": [[483, "neural_compressor.ux.utils.proc.Proc.output_path"]], "remove_logs() (neural_compressor.ux.utils.proc.proc method)": [[483, "neural_compressor.ux.utils.proc.Proc.remove_logs"]], "run() (neural_compressor.ux.utils.proc.proc method)": [[483, "neural_compressor.ux.utils.proc.Proc.run"]], "tail (neural_compressor.ux.utils.proc.proc property)": [[483, "neural_compressor.ux.utils.proc.Proc.tail"]], "ncprocesses (class in neural_compressor.ux.utils.processes)": [[484, "neural_compressor.ux.utils.processes.NCProcesses"]], "is_ok (neural_compressor.ux.utils.processes.ncprocesses property)": [[484, "neural_compressor.ux.utils.processes.NCProcesses.is_ok"]], "neural_compressor.ux.utils.processes": [[484, "module-neural_compressor.ux.utils.processes"]], "remove_successful_logs() (neural_compressor.ux.utils.processes.ncprocesses method)": [[484, "neural_compressor.ux.utils.processes.NCProcesses.remove_successful_logs"]], "return_code_all() (neural_compressor.ux.utils.processes.ncprocesses method)": [[484, "neural_compressor.ux.utils.processes.NCProcesses.return_code_all"]], "singleton (class in neural_compressor.ux.utils.singleton)": [[485, "neural_compressor.ux.utils.singleton.Singleton"]], "neural_compressor.ux.utils.singleton": [[485, "module-neural_compressor.ux.utils.singleton"]], "get_status_update_function() (in module neural_compressor.ux.utils.status_updates)": [[486, "neural_compressor.ux.utils.status_updates.get_status_update_function"]], "neural_compressor.ux.utils.status_updates": [[486, "module-neural_compressor.ux.utils.status_updates"]], "neural_compressor.ux.utils.templates": [[487, "module-neural_compressor.ux.utils.templates"]], "metric (class in neural_compressor.ux.utils.templates.metric)": [[488, "neural_compressor.ux.utils.templates.metric.Metric"]], "acc_input_model (neural_compressor.ux.utils.templates.metric.metric property)": [[488, "neural_compressor.ux.utils.templates.metric.Metric.acc_input_model"]], "acc_optimized_model (neural_compressor.ux.utils.templates.metric.metric property)": [[488, "neural_compressor.ux.utils.templates.metric.Metric.acc_optimized_model"]], "accuracy (neural_compressor.ux.utils.templates.metric.metric property)": [[488, "neural_compressor.ux.utils.templates.metric.Metric.accuracy"]], "calculate_throughput() (neural_compressor.ux.utils.templates.metric.metric static method)": [[488, "neural_compressor.ux.utils.templates.metric.Metric.calculate_throughput"]], "insert_data() (neural_compressor.ux.utils.templates.metric.metric method)": [[488, "neural_compressor.ux.utils.templates.metric.Metric.insert_data"]], "latency (neural_compressor.ux.utils.templates.metric.metric property)": [[488, "neural_compressor.ux.utils.templates.metric.Metric.latency"]], "neural_compressor.ux.utils.templates.metric": [[488, "module-neural_compressor.ux.utils.templates.metric"]], "optimization_time (neural_compressor.ux.utils.templates.metric.metric property)": [[488, "neural_compressor.ux.utils.templates.metric.Metric.optimization_time"]], "path_optimized_model (neural_compressor.ux.utils.templates.metric.metric property)": [[488, "neural_compressor.ux.utils.templates.metric.Metric.path_optimized_model"]], "profiling_data (neural_compressor.ux.utils.templates.metric.metric property)": [[488, "neural_compressor.ux.utils.templates.metric.Metric.profiling_data"]], "size_input_model (neural_compressor.ux.utils.templates.metric.metric property)": [[488, "neural_compressor.ux.utils.templates.metric.Metric.size_input_model"]], "size_optimized_model (neural_compressor.ux.utils.templates.metric.metric property)": [[488, "neural_compressor.ux.utils.templates.metric.Metric.size_optimized_model"]], "throughput (neural_compressor.ux.utils.templates.metric.metric property)": [[488, "neural_compressor.ux.utils.templates.metric.Metric.throughput"]], "workdir (class in neural_compressor.ux.utils.templates.workdir)": [[489, "neural_compressor.ux.utils.templates.workdir.Workdir"]], "clean_cache_files() (neural_compressor.ux.utils.templates.workdir.workdir static method)": [[489, "neural_compressor.ux.utils.templates.workdir.Workdir.clean_cache_files"]], "clean_logs() (neural_compressor.ux.utils.templates.workdir.workdir static method)": [[489, "neural_compressor.ux.utils.templates.workdir.Workdir.clean_logs"]], "clean_status() (neural_compressor.ux.utils.templates.workdir.workdir static method)": [[489, "neural_compressor.ux.utils.templates.workdir.Workdir.clean_status"]], "ensure_working_path_exists() (neural_compressor.ux.utils.templates.workdir.workdir method)": [[489, "neural_compressor.ux.utils.templates.workdir.Workdir.ensure_working_path_exists"]], "neural_compressor.ux.utils.templates.workdir": [[489, "module-neural_compressor.ux.utils.templates.workdir"]], "are_archive_filenames_valid() (in module neural_compressor.ux.utils.utils)": [[490, "neural_compressor.ux.utils.utils.are_archive_filenames_valid"]], "check_module() (in module neural_compressor.ux.utils.utils)": [[490, "neural_compressor.ux.utils.utils.check_module"]], "deprecated() (in module neural_compressor.ux.utils.utils)": [[490, "neural_compressor.ux.utils.utils.deprecated"]], "determine_ip() (in module neural_compressor.ux.utils.utils)": [[490, "neural_compressor.ux.utils.utils.determine_ip"]], "export_to_csv() (in module neural_compressor.ux.utils.utils)": [[490, "neural_compressor.ux.utils.utils.export_to_csv"]], "filter_transforms() (in module neural_compressor.ux.utils.utils)": [[490, "neural_compressor.ux.utils.utils.filter_transforms"]], "get_dataset_path() (in module neural_compressor.ux.utils.utils)": [[490, "neural_compressor.ux.utils.utils.get_dataset_path"]], "get_default_pruning_config_path() (in module neural_compressor.ux.utils.utils)": [[490, "neural_compressor.ux.utils.utils.get_default_pruning_config_path"]], "get_file_extension() (in module neural_compressor.ux.utils.utils)": [[490, "neural_compressor.ux.utils.utils.get_file_extension"]], "get_framework_from_path() (in module neural_compressor.ux.utils.utils)": [[490, "neural_compressor.ux.utils.utils.get_framework_from_path"]], "get_height_width_from_size() (in module neural_compressor.ux.utils.utils)": [[490, "neural_compressor.ux.utils.utils.get_height_width_from_size"]], "get_metrics_dict() (in module neural_compressor.ux.utils.utils)": [[490, "neural_compressor.ux.utils.utils.get_metrics_dict"]], "get_model_zoo_config_path() (in module neural_compressor.ux.utils.utils)": [[490, "neural_compressor.ux.utils.utils.get_model_zoo_config_path"]], "get_model_zoo_model_path() (in module neural_compressor.ux.utils.utils)": [[490, "neural_compressor.ux.utils.utils.get_model_zoo_model_path"]], "get_module_version() (in module neural_compressor.ux.utils.utils)": [[490, "neural_compressor.ux.utils.utils.get_module_version"]], "get_predefined_config_path() (in module neural_compressor.ux.utils.utils)": [[490, "neural_compressor.ux.utils.utils.get_predefined_config_path"]], "get_shape_from_transforms() (in module neural_compressor.ux.utils.utils)": [[490, "neural_compressor.ux.utils.utils.get_shape_from_transforms"]], "get_size() (in module neural_compressor.ux.utils.utils)": [[490, "neural_compressor.ux.utils.utils.get_size"]], "is_dataset_file() (in module neural_compressor.ux.utils.utils)": [[490, "neural_compressor.ux.utils.utils.is_dataset_file"]], "is_development_env() (in module neural_compressor.ux.utils.utils)": [[490, "neural_compressor.ux.utils.utils.is_development_env"]], "is_hidden() (in module neural_compressor.ux.utils.utils)": [[490, "neural_compressor.ux.utils.utils.is_hidden"]], "load_dataloader_config() (in module neural_compressor.ux.utils.utils)": [[490, "neural_compressor.ux.utils.utils.load_dataloader_config"]], "load_help_nc_params() (in module neural_compressor.ux.utils.utils)": [[490, "neural_compressor.ux.utils.utils.load_help_nc_params"]], "load_metrics_config() (in module neural_compressor.ux.utils.utils)": [[490, "neural_compressor.ux.utils.utils.load_metrics_config"]], "load_model_config() (in module neural_compressor.ux.utils.utils)": [[490, "neural_compressor.ux.utils.utils.load_model_config"]], "load_model_wise_params() (in module neural_compressor.ux.utils.utils)": [[490, "neural_compressor.ux.utils.utils.load_model_wise_params"]], "load_precisions_config() (in module neural_compressor.ux.utils.utils)": [[490, "neural_compressor.ux.utils.utils.load_precisions_config"]], "load_pruning_details_config() (in module neural_compressor.ux.utils.utils)": [[490, "neural_compressor.ux.utils.utils.load_pruning_details_config"]], "load_transforms_config() (in module neural_compressor.ux.utils.utils)": [[490, "neural_compressor.ux.utils.utils.load_transforms_config"]], "load_transforms_filter_config() (in module neural_compressor.ux.utils.utils)": [[490, "neural_compressor.ux.utils.utils.load_transforms_filter_config"]], "neural_compressor.ux.utils.utils": [[490, "module-neural_compressor.ux.utils.utils"]], "normalize_domain() (in module neural_compressor.ux.utils.utils)": [[490, "neural_compressor.ux.utils.utils.normalize_domain"]], "normalize_framework() (in module neural_compressor.ux.utils.utils)": [[490, "neural_compressor.ux.utils.utils.normalize_framework"]], "normalize_string() (in module neural_compressor.ux.utils.utils)": [[490, "neural_compressor.ux.utils.utils.normalize_string"]], "parse_bool_value() (in module neural_compressor.ux.utils.utils)": [[490, "neural_compressor.ux.utils.utils.parse_bool_value"]], "parse_to_float_list() (in module neural_compressor.ux.utils.utils)": [[490, "neural_compressor.ux.utils.utils.parse_to_float_list"]], "parse_to_string_list() (in module neural_compressor.ux.utils.utils)": [[490, "neural_compressor.ux.utils.utils.parse_to_string_list"]], "parse_version() (in module neural_compressor.ux.utils.utils)": [[490, "neural_compressor.ux.utils.utils.parse_version"]], "release_tag() (in module neural_compressor.ux.utils.utils)": [[490, "neural_compressor.ux.utils.utils.release_tag"]], "replace_with_values() (in module neural_compressor.ux.utils.utils)": [[490, "neural_compressor.ux.utils.utils.replace_with_values"]], "safe_extract_archive() (in module neural_compressor.ux.utils.utils)": [[490, "neural_compressor.ux.utils.utils.safe_extract_archive"]], "verify_file_path() (in module neural_compressor.ux.utils.utils)": [[490, "neural_compressor.ux.utils.utils.verify_file_path"]], "config (class in neural_compressor.ux.utils.workload.config)": [[491, "neural_compressor.ux.utils.workload.config.Config"]], "dump() (neural_compressor.ux.utils.workload.config.config method)": [[491, "neural_compressor.ux.utils.workload.config.Config.dump"]], "get_performance_configs() (neural_compressor.ux.utils.workload.config.config method)": [[491, "neural_compressor.ux.utils.workload.config.Config.get_performance_configs"]], "get_performance_cores_per_instance() (neural_compressor.ux.utils.workload.config.config method)": [[491, "neural_compressor.ux.utils.workload.config.Config.get_performance_cores_per_instance"]], "get_performance_num_of_instance() (neural_compressor.ux.utils.workload.config.config method)": [[491, "neural_compressor.ux.utils.workload.config.Config.get_performance_num_of_instance"]], "initialize() (neural_compressor.ux.utils.workload.config.config method)": [[491, "neural_compressor.ux.utils.workload.config.Config.initialize"]], "load() (neural_compressor.ux.utils.workload.config.config method)": [[491, "neural_compressor.ux.utils.workload.config.Config.load"]], "neural_compressor.ux.utils.workload.config": [[491, "module-neural_compressor.ux.utils.workload.config"]], "process_transform() (neural_compressor.ux.utils.workload.config.config static method)": [[491, "neural_compressor.ux.utils.workload.config.Config.process_transform"]], "remove_accuracy_metric() (neural_compressor.ux.utils.workload.config.config method)": [[491, "neural_compressor.ux.utils.workload.config.Config.remove_accuracy_metric"]], "remove_dataloader() (neural_compressor.ux.utils.workload.config.config method)": [[491, "neural_compressor.ux.utils.workload.config.Config.remove_dataloader"]], "set_accuracy_and_performance_batch_sizes() (neural_compressor.ux.utils.workload.config.config method)": [[491, "neural_compressor.ux.utils.workload.config.Config.set_accuracy_and_performance_batch_sizes"]], "set_accuracy_goal() (neural_compressor.ux.utils.workload.config.config method)": [[491, "neural_compressor.ux.utils.workload.config.Config.set_accuracy_goal"]], "set_accuracy_metric() (neural_compressor.ux.utils.workload.config.config method)": [[491, "neural_compressor.ux.utils.workload.config.Config.set_accuracy_metric"]], "set_evaluation_dataloader() (neural_compressor.ux.utils.workload.config.config method)": [[491, "neural_compressor.ux.utils.workload.config.Config.set_evaluation_dataloader"]], "set_evaluation_dataset_path() (neural_compressor.ux.utils.workload.config.config method)": [[491, "neural_compressor.ux.utils.workload.config.Config.set_evaluation_dataset_path"]], "set_inputs() (neural_compressor.ux.utils.workload.config.config method)": [[491, "neural_compressor.ux.utils.workload.config.Config.set_inputs"]], "set_optimization_precision() (neural_compressor.ux.utils.workload.config.config method)": [[491, "neural_compressor.ux.utils.workload.config.Config.set_optimization_precision"]], "set_outputs() (neural_compressor.ux.utils.workload.config.config method)": [[491, "neural_compressor.ux.utils.workload.config.Config.set_outputs"]], "set_performance_cores_per_instance() (neural_compressor.ux.utils.workload.config.config method)": [[491, "neural_compressor.ux.utils.workload.config.Config.set_performance_cores_per_instance"]], "set_performance_iterations() (neural_compressor.ux.utils.workload.config.config method)": [[491, "neural_compressor.ux.utils.workload.config.Config.set_performance_iterations"]], "set_performance_num_of_instance() (neural_compressor.ux.utils.workload.config.config method)": [[491, "neural_compressor.ux.utils.workload.config.Config.set_performance_num_of_instance"]], "set_performance_warmup() (neural_compressor.ux.utils.workload.config.config method)": [[491, "neural_compressor.ux.utils.workload.config.Config.set_performance_warmup"]], "set_quantization_approach() (neural_compressor.ux.utils.workload.config.config method)": [[491, "neural_compressor.ux.utils.workload.config.Config.set_quantization_approach"]], "set_quantization_batch_size() (neural_compressor.ux.utils.workload.config.config method)": [[491, "neural_compressor.ux.utils.workload.config.Config.set_quantization_batch_size"]], "set_quantization_dataloader() (neural_compressor.ux.utils.workload.config.config method)": [[491, "neural_compressor.ux.utils.workload.config.Config.set_quantization_dataloader"]], "set_quantization_dataset_path() (neural_compressor.ux.utils.workload.config.config method)": [[491, "neural_compressor.ux.utils.workload.config.Config.set_quantization_dataset_path"]], "set_quantization_sampling_size() (neural_compressor.ux.utils.workload.config.config method)": [[491, "neural_compressor.ux.utils.workload.config.Config.set_quantization_sampling_size"]], "set_transform() (neural_compressor.ux.utils.workload.config.config method)": [[491, "neural_compressor.ux.utils.workload.config.Config.set_transform"]], "set_workspace() (neural_compressor.ux.utils.workload.config.config method)": [[491, "neural_compressor.ux.utils.workload.config.Config.set_workspace"]], "dataloader (class in neural_compressor.ux.utils.workload.dataloader)": [[492, "neural_compressor.ux.utils.workload.dataloader.Dataloader"]], "dataset (class in neural_compressor.ux.utils.workload.dataloader)": [[492, "neural_compressor.ux.utils.workload.dataloader.Dataset"]], "filter (class in neural_compressor.ux.utils.workload.dataloader)": [[492, "neural_compressor.ux.utils.workload.dataloader.Filter"]], "labelbalance (class in neural_compressor.ux.utils.workload.dataloader)": [[492, "neural_compressor.ux.utils.workload.dataloader.LabelBalance"]], "transform (class in neural_compressor.ux.utils.workload.dataloader)": [[492, "neural_compressor.ux.utils.workload.dataloader.Transform"]], "is_dummy() (neural_compressor.ux.utils.workload.dataloader.dataset method)": [[492, "neural_compressor.ux.utils.workload.dataloader.Dataset.is_dummy"]], "neural_compressor.ux.utils.workload.dataloader": [[492, "module-neural_compressor.ux.utils.workload.dataloader"]], "serialize() (neural_compressor.ux.utils.workload.dataloader.dataloader method)": [[492, "neural_compressor.ux.utils.workload.dataloader.Dataloader.serialize"]], "serialize() (neural_compressor.ux.utils.workload.dataloader.dataset method)": [[492, "neural_compressor.ux.utils.workload.dataloader.Dataset.serialize"]], "serialize() (neural_compressor.ux.utils.workload.dataloader.transform method)": [[492, "neural_compressor.ux.utils.workload.dataloader.Transform.serialize"]], "set_dataset() (neural_compressor.ux.utils.workload.dataloader.dataloader method)": [[492, "neural_compressor.ux.utils.workload.dataloader.Dataloader.set_dataset"]], "set_transforms_from_list() (neural_compressor.ux.utils.workload.dataloader.dataloader method)": [[492, "neural_compressor.ux.utils.workload.dataloader.Dataloader.set_transforms_from_list"]], "accuracy (class in neural_compressor.ux.utils.workload.evaluation)": [[493, "neural_compressor.ux.utils.workload.evaluation.Accuracy"]], "configs (class in neural_compressor.ux.utils.workload.evaluation)": [[493, "neural_compressor.ux.utils.workload.evaluation.Configs"]], "evaluation (class in neural_compressor.ux.utils.workload.evaluation)": [[493, "neural_compressor.ux.utils.workload.evaluation.Evaluation"]], "metric (class in neural_compressor.ux.utils.workload.evaluation)": [[493, "neural_compressor.ux.utils.workload.evaluation.Metric"]], "performance (class in neural_compressor.ux.utils.workload.evaluation)": [[493, "neural_compressor.ux.utils.workload.evaluation.Performance"]], "postprocess (class in neural_compressor.ux.utils.workload.evaluation)": [[493, "neural_compressor.ux.utils.workload.evaluation.Postprocess"]], "postprocessschema (class in neural_compressor.ux.utils.workload.evaluation)": [[493, "neural_compressor.ux.utils.workload.evaluation.PostprocessSchema"]], "get_label_shift_value() (neural_compressor.ux.utils.workload.evaluation.postprocessschema static method)": [[493, "neural_compressor.ux.utils.workload.evaluation.PostprocessSchema.get_label_shift_value"]], "name (neural_compressor.ux.utils.workload.evaluation.metric property)": [[493, "neural_compressor.ux.utils.workload.evaluation.Metric.name"]], "neural_compressor.ux.utils.workload.evaluation": [[493, "module-neural_compressor.ux.utils.workload.evaluation"]], "param (neural_compressor.ux.utils.workload.evaluation.metric property)": [[493, "neural_compressor.ux.utils.workload.evaluation.Metric.param"]], "serialize() (neural_compressor.ux.utils.workload.evaluation.metric method)": [[493, "neural_compressor.ux.utils.workload.evaluation.Metric.serialize"]], "set_accuracy_postprocess_transforms() (neural_compressor.ux.utils.workload.evaluation.evaluation method)": [[493, "neural_compressor.ux.utils.workload.evaluation.Evaluation.set_accuracy_postprocess_transforms"]], "graphoptimization (class in neural_compressor.ux.utils.workload.graph_optimization)": [[494, "neural_compressor.ux.utils.workload.graph_optimization.GraphOptimization"]], "neural_compressor.ux.utils.workload.graph_optimization": [[494, "module-neural_compressor.ux.utils.workload.graph_optimization"]], "set_precisions() (neural_compressor.ux.utils.workload.graph_optimization.graphoptimization method)": [[494, "neural_compressor.ux.utils.workload.graph_optimization.GraphOptimization.set_precisions"]], "neural_compressor.ux.utils.workload": [[495, "module-neural_compressor.ux.utils.workload"]], "mixedprecision (class in neural_compressor.ux.utils.workload.mixed_precision)": [[496, "neural_compressor.ux.utils.workload.mixed_precision.MixedPrecision"]], "neural_compressor.ux.utils.workload.mixed_precision": [[496, "module-neural_compressor.ux.utils.workload.mixed_precision"]], "set_precisions() (neural_compressor.ux.utils.workload.mixed_precision.mixedprecision method)": [[496, "neural_compressor.ux.utils.workload.mixed_precision.MixedPrecision.set_precisions"]], "model (class in neural_compressor.ux.utils.workload.model)": [[497, "neural_compressor.ux.utils.workload.model.Model"]], "inputs (neural_compressor.ux.utils.workload.model.model property)": [[497, "neural_compressor.ux.utils.workload.model.Model.inputs"]], "neural_compressor.ux.utils.workload.model": [[497, "module-neural_compressor.ux.utils.workload.model"]], "outputs (neural_compressor.ux.utils.workload.model.model property)": [[497, "neural_compressor.ux.utils.workload.model.Model.outputs"]], "serialize() (neural_compressor.ux.utils.workload.model.model method)": [[497, "neural_compressor.ux.utils.workload.model.Model.serialize"]], "adamoptimizer (class in neural_compressor.ux.utils.workload.pruning)": [[498, "neural_compressor.ux.utils.workload.pruning.AdamOptimizer"]], "adamwoptimizer (class in neural_compressor.ux.utils.workload.pruning)": [[498, "neural_compressor.ux.utils.workload.pruning.AdamWOptimizer"]], "approach (class in neural_compressor.ux.utils.workload.pruning)": [[498, "neural_compressor.ux.utils.workload.pruning.Approach"]], "criterion (class in neural_compressor.ux.utils.workload.pruning)": [[498, "neural_compressor.ux.utils.workload.pruning.Criterion"]], "crossentropylosscriterion (class in neural_compressor.ux.utils.workload.pruning)": [[498, "neural_compressor.ux.utils.workload.pruning.CrossEntropyLossCriterion"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.ux.utils.workload.pruning)": [[498, "neural_compressor.ux.utils.workload.pruning.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationlosscriterion (class in neural_compressor.ux.utils.workload.pruning)": [[498, "neural_compressor.ux.utils.workload.pruning.KnowledgeDistillationLossCriterion"]], "optimizer (class in neural_compressor.ux.utils.workload.pruning)": [[498, "neural_compressor.ux.utils.workload.pruning.Optimizer"]], "pruning (class in neural_compressor.ux.utils.workload.pruning)": [[498, "neural_compressor.ux.utils.workload.pruning.Pruning"]], "sgdoptimizer (class in neural_compressor.ux.utils.workload.pruning)": [[498, "neural_compressor.ux.utils.workload.pruning.SGDOptimizer"]], "selfknowledgedistillationloss (class in neural_compressor.ux.utils.workload.pruning)": [[498, "neural_compressor.ux.utils.workload.pruning.SelfKnowledgeDistillationLoss"]], "sparsecategoricalcrossentropycriterion (class in neural_compressor.ux.utils.workload.pruning)": [[498, "neural_compressor.ux.utils.workload.pruning.SparseCategoricalCrossentropyCriterion"]], "train (class in neural_compressor.ux.utils.workload.pruning)": [[498, "neural_compressor.ux.utils.workload.pruning.Train"]], "weightcompressionapproach (class in neural_compressor.ux.utils.workload.pruning)": [[498, "neural_compressor.ux.utils.workload.pruning.WeightCompressionApproach"]], "initialize_pruners() (neural_compressor.ux.utils.workload.pruning.weightcompressionapproach static method)": [[498, "neural_compressor.ux.utils.workload.pruning.WeightCompressionApproach.initialize_pruners"]], "neural_compressor.ux.utils.workload.pruning": [[498, "module-neural_compressor.ux.utils.workload.pruning"]], "parse_dict_value_to_float() (in module neural_compressor.ux.utils.workload.pruning)": [[498, "neural_compressor.ux.utils.workload.pruning.parse_dict_value_to_float"]], "parse_dict_value_to_int() (in module neural_compressor.ux.utils.workload.pruning)": [[498, "neural_compressor.ux.utils.workload.pruning.parse_dict_value_to_int"]], "serialize() (neural_compressor.ux.utils.workload.pruning.train method)": [[498, "neural_compressor.ux.utils.workload.pruning.Train.serialize"]], "serialize() (neural_compressor.ux.utils.workload.pruning.weightcompressionapproach method)": [[498, "neural_compressor.ux.utils.workload.pruning.WeightCompressionApproach.serialize"]], "serialize_pruner() (neural_compressor.ux.utils.workload.pruning.weightcompressionapproach static method)": [[498, "neural_compressor.ux.utils.workload.pruning.WeightCompressionApproach.serialize_pruner"]], "set_postprocess_transforms() (neural_compressor.ux.utils.workload.pruning.train method)": [[498, "neural_compressor.ux.utils.workload.pruning.Train.set_postprocess_transforms"]], "advance (class in neural_compressor.ux.utils.workload.quantization)": [[499, "neural_compressor.ux.utils.workload.quantization.Advance"]], "calibration (class in neural_compressor.ux.utils.workload.quantization)": [[499, "neural_compressor.ux.utils.workload.quantization.Calibration"]], "quantization (class in neural_compressor.ux.utils.workload.quantization)": [[499, "neural_compressor.ux.utils.workload.quantization.Quantization"]], "wiseconfig (class in neural_compressor.ux.utils.workload.quantization)": [[499, "neural_compressor.ux.utils.workload.quantization.WiseConfig"]], "wiseconfigdetails (class in neural_compressor.ux.utils.workload.quantization)": [[499, "neural_compressor.ux.utils.workload.quantization.WiseConfigDetails"]], "neural_compressor.ux.utils.workload.quantization": [[499, "module-neural_compressor.ux.utils.workload.quantization"]], "acccriterion (class in neural_compressor.ux.utils.workload.tuning)": [[500, "neural_compressor.ux.utils.workload.tuning.AccCriterion"]], "diagnosis (class in neural_compressor.ux.utils.workload.tuning)": [[500, "neural_compressor.ux.utils.workload.tuning.Diagnosis"]], "exitpolicy (class in neural_compressor.ux.utils.workload.tuning)": [[500, "neural_compressor.ux.utils.workload.tuning.ExitPolicy"]], "multiobjectives (class in neural_compressor.ux.utils.workload.tuning)": [[500, "neural_compressor.ux.utils.workload.tuning.MultiObjectives"]], "strategy (class in neural_compressor.ux.utils.workload.tuning)": [[500, "neural_compressor.ux.utils.workload.tuning.Strategy"]], "tuning (class in neural_compressor.ux.utils.workload.tuning)": [[500, "neural_compressor.ux.utils.workload.tuning.Tuning"]], "workspace (class in neural_compressor.ux.utils.workload.tuning)": [[500, "neural_compressor.ux.utils.workload.tuning.Workspace"]], "neural_compressor.ux.utils.workload.tuning": [[500, "module-neural_compressor.ux.utils.workload.tuning"]], "objective (neural_compressor.ux.utils.workload.tuning.multiobjectives property)": [[500, "neural_compressor.ux.utils.workload.tuning.MultiObjectives.objective"]], "set_max_trials() (neural_compressor.ux.utils.workload.tuning.tuning method)": [[500, "neural_compressor.ux.utils.workload.tuning.Tuning.set_max_trials"]], "set_performance_only() (neural_compressor.ux.utils.workload.tuning.tuning method)": [[500, "neural_compressor.ux.utils.workload.tuning.Tuning.set_performance_only"]], "set_random_seed() (neural_compressor.ux.utils.workload.tuning.tuning method)": [[500, "neural_compressor.ux.utils.workload.tuning.Tuning.set_random_seed"]], "set_timeout() (neural_compressor.ux.utils.workload.tuning.tuning method)": [[500, "neural_compressor.ux.utils.workload.tuning.Tuning.set_timeout"]], "set_workspace() (neural_compressor.ux.utils.workload.tuning.tuning method)": [[500, "neural_compressor.ux.utils.workload.tuning.Tuning.set_workspace"]], "weight (neural_compressor.ux.utils.workload.tuning.multiobjectives property)": [[500, "neural_compressor.ux.utils.workload.tuning.MultiObjectives.weight"]], "float_representer() (in module neural_compressor.ux.utils.yaml_utils)": [[501, "neural_compressor.ux.utils.yaml_utils.float_representer"]], "neural_compressor.ux.utils.yaml_utils": [[501, "module-neural_compressor.ux.utils.yaml_utils"]], "pruner_representer() (in module neural_compressor.ux.utils.yaml_utils)": [[501, "neural_compressor.ux.utils.yaml_utils.pruner_representer"]], "message (class in neural_compressor.ux.web.communication)": [[502, "neural_compressor.ux.web.communication.Message"]], "messagequeue (class in neural_compressor.ux.web.communication)": [[502, "neural_compressor.ux.web.communication.MessageQueue"]], "request (class in neural_compressor.ux.web.communication)": [[502, "neural_compressor.ux.web.communication.Request"]], "response (class in neural_compressor.ux.web.communication)": [[502, "neural_compressor.ux.web.communication.Response"]], "create_simple_response() (in module neural_compressor.ux.web.communication)": [[502, "neural_compressor.ux.web.communication.create_simple_response"]], "data (neural_compressor.ux.web.communication.message property)": [[502, "neural_compressor.ux.web.communication.Message.data"]], "get() (neural_compressor.ux.web.communication.messagequeue method)": [[502, "neural_compressor.ux.web.communication.MessageQueue.get"]], "neural_compressor.ux.web.communication": [[502, "module-neural_compressor.ux.web.communication"]], "post_error() (neural_compressor.ux.web.communication.messagequeue method)": [[502, "neural_compressor.ux.web.communication.MessageQueue.post_error"]], "post_failure() (neural_compressor.ux.web.communication.messagequeue method)": [[502, "neural_compressor.ux.web.communication.MessageQueue.post_failure"]], "post_success() (neural_compressor.ux.web.communication.messagequeue method)": [[502, "neural_compressor.ux.web.communication.MessageQueue.post_success"]], "status (neural_compressor.ux.web.communication.message property)": [[502, "neural_compressor.ux.web.communication.Message.status"]], "subject (neural_compressor.ux.web.communication.message property)": [[502, "neural_compressor.ux.web.communication.Message.subject"]], "configuration (class in neural_compressor.ux.web.configuration)": [[503, "neural_compressor.ux.web.configuration.Configuration"]], "determine_gui_port() (neural_compressor.ux.web.configuration.configuration method)": [[503, "neural_compressor.ux.web.configuration.Configuration.determine_gui_port"]], "determine_log_level() (neural_compressor.ux.web.configuration.configuration method)": [[503, "neural_compressor.ux.web.configuration.Configuration.determine_log_level"]], "determine_server_port() (neural_compressor.ux.web.configuration.configuration method)": [[503, "neural_compressor.ux.web.configuration.Configuration.determine_server_port"]], "determine_url_prefix() (neural_compressor.ux.web.configuration.configuration static method)": [[503, "neural_compressor.ux.web.configuration.Configuration.determine_url_prefix"]], "determine_values_from_environment() (neural_compressor.ux.web.configuration.configuration method)": [[503, "neural_compressor.ux.web.configuration.Configuration.determine_values_from_environment"]], "dump_token_to_file() (neural_compressor.ux.web.configuration.configuration method)": [[503, "neural_compressor.ux.web.configuration.Configuration.dump_token_to_file"]], "get_command_line_args() (neural_compressor.ux.web.configuration.configuration method)": [[503, "neural_compressor.ux.web.configuration.Configuration.get_command_line_args"]], "get_url() (neural_compressor.ux.web.configuration.configuration method)": [[503, "neural_compressor.ux.web.configuration.Configuration.get_url"]], "global_config_directory (neural_compressor.ux.web.configuration.configuration property)": [[503, "neural_compressor.ux.web.configuration.Configuration.global_config_directory"]], "is_port_taken() (neural_compressor.ux.web.configuration.configuration method)": [[503, "neural_compressor.ux.web.configuration.Configuration.is_port_taken"]], "neural_compressor.ux.web.configuration": [[503, "module-neural_compressor.ux.web.configuration"]], "set_up() (neural_compressor.ux.web.configuration.configuration method)": [[503, "neural_compressor.ux.web.configuration.Configuration.set_up"]], "servicenotfoundexception": [[504, "neural_compressor.ux.web.exceptions.ServiceNotFoundException"]], "neural_compressor.ux.web.exceptions": [[504, "module-neural_compressor.ux.web.exceptions"]], "neural_compressor.ux.web": [[505, "module-neural_compressor.ux.web"]], "deferredroutingdefinition (class in neural_compressor.ux.web.router)": [[506, "neural_compressor.ux.web.router.DeferredRoutingDefinition"]], "deferredsubprocessroutingdefinition (class in neural_compressor.ux.web.router)": [[506, "neural_compressor.ux.web.router.DeferredSubprocessRoutingDefinition"]], "realtimeroutingdefinition (class in neural_compressor.ux.web.router)": [[506, "neural_compressor.ux.web.router.RealtimeRoutingDefinition"]], "router (class in neural_compressor.ux.web.router)": [[506, "neural_compressor.ux.web.router.Router"]], "routingdefinition (class in neural_compressor.ux.web.router)": [[506, "neural_compressor.ux.web.router.RoutingDefinition"]], "find_pattern_in_graph() (in module neural_compressor.ux.web.router)": [[506, "neural_compressor.ux.web.router.find_pattern_in_graph"]], "get_model_graph() (in module neural_compressor.ux.web.router)": [[506, "neural_compressor.ux.web.router.get_model_graph"]], "get_system_info() (in module neural_compressor.ux.web.router)": [[506, "neural_compressor.ux.web.router.get_system_info"]], "handle() (neural_compressor.ux.web.router.router method)": [[506, "neural_compressor.ux.web.router.Router.handle"]], "neural_compressor.ux.web.router": [[506, "module-neural_compressor.ux.web.router"]], "allow_api_call() (in module neural_compressor.ux.web.server)": [[507, "neural_compressor.ux.web.server.allow_api_call"]], "block_iframe() (in module neural_compressor.ux.web.server)": [[507, "neural_compressor.ux.web.server.block_iframe"]], "block_sniffing() (in module neural_compressor.ux.web.server)": [[507, "neural_compressor.ux.web.server.block_sniffing"]], "build_parameters() (in module neural_compressor.ux.web.server)": [[507, "neural_compressor.ux.web.server.build_parameters"]], "disable_cache() (in module neural_compressor.ux.web.server)": [[507, "neural_compressor.ux.web.server.disable_cache"]], "get_tls_args() (in module neural_compressor.ux.web.server)": [[507, "neural_compressor.ux.web.server.get_tls_args"]], "handle_api_call() (in module neural_compressor.ux.web.server)": [[507, "neural_compressor.ux.web.server.handle_api_call"]], "neural_compressor.ux.web.server": [[507, "module-neural_compressor.ux.web.server"]], "page_not_found() (in module neural_compressor.ux.web.server)": [[507, "neural_compressor.ux.web.server.page_not_found"]], "require_api_token() (in module neural_compressor.ux.web.server)": [[507, "neural_compressor.ux.web.server.require_api_token"]], "root() (in module neural_compressor.ux.web.server)": [[507, "neural_compressor.ux.web.server.root"]], "run_server() (in module neural_compressor.ux.web.server)": [[507, "neural_compressor.ux.web.server.run_server"]], "web_socket_publisher() (in module neural_compressor.ux.web.server)": [[507, "neural_compressor.ux.web.server.web_socket_publisher"]], "benchmarkservice (class in neural_compressor.ux.web.service.benchmark)": [[508, "neural_compressor.ux.web.service.benchmark.BenchmarkService"]], "neural_compressor.ux.web.service.benchmark": [[508, "module-neural_compressor.ux.web.service.benchmark"]], "historysnapshotparser (class in neural_compressor.ux.web.service.history_snapshot_parser)": [[509, "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser"]], "extract_accuracy() (neural_compressor.ux.web.service.history_snapshot_parser.historysnapshotparser method)": [[509, "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser.extract_accuracy"]], "extract_performance() (neural_compressor.ux.web.service.history_snapshot_parser.historysnapshotparser method)": [[509, "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser.extract_performance"]], "neural_compressor.ux.web.service.history_snapshot_parser": [[509, "module-neural_compressor.ux.web.service.history_snapshot_parser"]], "parse_history_item() (neural_compressor.ux.web.service.history_snapshot_parser.historysnapshotparser method)": [[509, "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser.parse_history_item"]], "parse_history_snapshot() (neural_compressor.ux.web.service.history_snapshot_parser.historysnapshotparser method)": [[509, "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser.parse_history_snapshot"]], "neural_compressor.ux.web.service": [[510, "module-neural_compressor.ux.web.service"]], "modelservice (class in neural_compressor.ux.web.service.model)": [[511, "neural_compressor.ux.web.service.model.ModelService"]], "get_model() (neural_compressor.ux.web.service.model.modelservice class method)": [[511, "neural_compressor.ux.web.service.model.ModelService.get_model"]], "neural_compressor.ux.web.service.model": [[511, "module-neural_compressor.ux.web.service.model"]], "optimizationservice (class in neural_compressor.ux.web.service.optimization)": [[512, "neural_compressor.ux.web.service.optimization.OptimizationService"]], "neural_compressor.ux.web.service.optimization": [[512, "module-neural_compressor.ux.web.service.optimization"]], "profilingservice (class in neural_compressor.ux.web.service.profiling)": [[513, "neural_compressor.ux.web.service.profiling.ProfilingService"]], "generate_csv() (neural_compressor.ux.web.service.profiling.profilingservice class method)": [[513, "neural_compressor.ux.web.service.profiling.ProfilingService.generate_csv"]], "neural_compressor.ux.web.service.profiling": [[513, "module-neural_compressor.ux.web.service.profiling"]], "requestdataprocessor (class in neural_compressor.ux.web.service.request_data_processor)": [[514, "neural_compressor.ux.web.service.request_data_processor.RequestDataProcessor"]], "get_string_value() (neural_compressor.ux.web.service.request_data_processor.requestdataprocessor static method)": [[514, "neural_compressor.ux.web.service.request_data_processor.RequestDataProcessor.get_string_value"]], "neural_compressor.ux.web.service.request_data_processor": [[514, "module-neural_compressor.ux.web.service.request_data_processor"]], "responsegenerator (class in neural_compressor.ux.web.service.response_generator)": [[515, "neural_compressor.ux.web.service.response_generator.ResponseGenerator"]], "add_refresh() (neural_compressor.ux.web.service.response_generator.responsegenerator static method)": [[515, "neural_compressor.ux.web.service.response_generator.ResponseGenerator.add_refresh"]], "from_exception() (neural_compressor.ux.web.service.response_generator.responsegenerator static method)": [[515, "neural_compressor.ux.web.service.response_generator.ResponseGenerator.from_exception"]], "get_status_code_for_exception() (neural_compressor.ux.web.service.response_generator.responsegenerator static method)": [[515, "neural_compressor.ux.web.service.response_generator.ResponseGenerator.get_status_code_for_exception"]], "neural_compressor.ux.web.service.response_generator": [[515, "module-neural_compressor.ux.web.service.response_generator"]], "serve_from_filesystem() (neural_compressor.ux.web.service.response_generator.responsegenerator static method)": [[515, "neural_compressor.ux.web.service.response_generator.ResponseGenerator.serve_from_filesystem"]], "workloadservice (class in neural_compressor.ux.web.service.workload)": [[516, "neural_compressor.ux.web.service.workload.WorkloadService"]], "get_code_template() (neural_compressor.ux.web.service.workload.workloadservice class method)": [[516, "neural_compressor.ux.web.service.workload.WorkloadService.get_code_template"]], "get_config() (neural_compressor.ux.web.service.workload.workloadservice class method)": [[516, "neural_compressor.ux.web.service.workload.WorkloadService.get_config"]], "get_output() (neural_compressor.ux.web.service.workload.workloadservice class method)": [[516, "neural_compressor.ux.web.service.workload.WorkloadService.get_output"]], "neural_compressor.ux.web.service.workload": [[516, "module-neural_compressor.ux.web.service.workload"]], "neural_compressor.version": [[517, "module-neural_compressor.version"]]}})