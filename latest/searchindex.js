Search.setIndex({"docnames": ["autoapi/644ec953a7dc_pruning_support/index", "autoapi/6ece06672ed3_v1_14/index", "autoapi/6f0d0f71d92e_v1_13/index", "autoapi/9e89549a08c8_v1_11/index", "autoapi/block_mask/index", "autoapi/env/index", "autoapi/neural_compressor/adaptor/adaptor/index", "autoapi/neural_compressor/adaptor/index", "autoapi/neural_compressor/adaptor/keras/index", "autoapi/neural_compressor/adaptor/keras_utils/conv2d/index", "autoapi/neural_compressor/adaptor/keras_utils/dense/index", "autoapi/neural_compressor/adaptor/keras_utils/index", "autoapi/neural_compressor/adaptor/keras_utils/quantizer/index", "autoapi/neural_compressor/adaptor/mxnet/index", "autoapi/neural_compressor/adaptor/mxnet_utils/index", "autoapi/neural_compressor/adaptor/mxnet_utils/util/index", "autoapi/neural_compressor/adaptor/onnxrt/index", "autoapi/neural_compressor/adaptor/ox_utils/calibration/index", "autoapi/neural_compressor/adaptor/ox_utils/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/activation/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/argmax/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/attention/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/binary_op/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/concat/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/conv/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/direct_q8/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/embed_layernorm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gather/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gavgpool/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gemm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/lstm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/matmul/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/maxpool/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/ops/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/pad/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/pooling/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/resize/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/split/index", "autoapi/neural_compressor/adaptor/ox_utils/quantizer/index", "autoapi/neural_compressor/adaptor/ox_utils/util/index", "autoapi/neural_compressor/adaptor/pytorch/index", "autoapi/neural_compressor/adaptor/query/index", "autoapi/neural_compressor/adaptor/tensorflow/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter_without_calib/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/bf16_convert/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_add_to_biasadd/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_layout/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_leakyrelu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_nan_to_random/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_placeholder_to_const/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dequantize_cast_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dilated_contraction/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dummy_biasadd/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/expanddims_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fetch_weight_from_reshape/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_batch_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_constant/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_biasadd_add/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_column_wise_mul/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_conv_with_math/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_in/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_gelu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_layer_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_reshape_transpose/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/graph_cse_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/grappler_pass/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/insert_print_node/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/move_squeeze_after_relu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/pre_optimize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/remove_training_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/rename_batch_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/split_shared_input/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_equivalent_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_unused_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/switch_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/graph_base/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_fake_quant/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value_without_calib/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_requantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_requantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/meta_op_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_hostconst_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_quantized_op_cse/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/rnn_convert/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/scale_propagation/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_node/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_schema/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/tf2onnx_utils/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/insert_qdq_pattern/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/merge_duplicated_qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/share_qdq_y_pattern/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_util/index", "autoapi/neural_compressor/adaptor/tf_utils/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/fake_quantize/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_config/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_helper/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/optimize_layer/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_wrapper/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_concatv2/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_deconv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_in/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_matmul/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_pooling/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/optimize_qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_base/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_concatv2/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_for_intel_cpu/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_matmul/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_pooling/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph_common/index", "autoapi/neural_compressor/adaptor/tf_utils/tf2onnx_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/bias_correction/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/graph_transform_base/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/insert_logging/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/rerange_quantized_concat/index", "autoapi/neural_compressor/adaptor/tf_utils/util/index", "autoapi/neural_compressor/adaptor/torch_utils/bf16_convert/index", "autoapi/neural_compressor/adaptor/torch_utils/hawq_metric/index", "autoapi/neural_compressor/adaptor/torch_utils/index", "autoapi/neural_compressor/adaptor/torch_utils/smooth_quant/index", "autoapi/neural_compressor/adaptor/torch_utils/symbolic_trace/index", "autoapi/neural_compressor/adaptor/torch_utils/util/index", "autoapi/neural_compressor/algorithm/algorithm/index", "autoapi/neural_compressor/algorithm/fast_bias_correction/index", "autoapi/neural_compressor/algorithm/index", "autoapi/neural_compressor/algorithm/smooth_quant/index", "autoapi/neural_compressor/algorithm/weight_correction/index", "autoapi/neural_compressor/benchmark/index", "autoapi/neural_compressor/compression/callbacks/index", "autoapi/neural_compressor/compression/distillation/criterions/index", "autoapi/neural_compressor/compression/distillation/index", "autoapi/neural_compressor/compression/index", "autoapi/neural_compressor/compression/pruner/criteria/index", "autoapi/neural_compressor/compression/pruner/index", "autoapi/neural_compressor/compression/pruner/patterns/index", "autoapi/neural_compressor/compression/pruner/pruners/index", "autoapi/neural_compressor/compression/pruner/regs/index", "autoapi/neural_compressor/compression/pruner/schedulers/index", "autoapi/neural_compressor/compression/pruner/utils/index", "autoapi/neural_compressor/conf/config/index", "autoapi/neural_compressor/conf/dotdict/index", "autoapi/neural_compressor/conf/index", "autoapi/neural_compressor/conf/pythonic_config/index", "autoapi/neural_compressor/config/index", "autoapi/neural_compressor/contrib/index", "autoapi/neural_compressor/contrib/strategy/index", "autoapi/neural_compressor/contrib/strategy/sigopt/index", "autoapi/neural_compressor/contrib/strategy/tpe/index", "autoapi/neural_compressor/data/dataloaders/base_dataloader/index", "autoapi/neural_compressor/data/dataloaders/dataloader/index", "autoapi/neural_compressor/data/dataloaders/default_dataloader/index", "autoapi/neural_compressor/data/dataloaders/fetcher/index", "autoapi/neural_compressor/data/dataloaders/index", "autoapi/neural_compressor/data/dataloaders/mxnet_dataloader/index", "autoapi/neural_compressor/data/dataloaders/onnxrt_dataloader/index", "autoapi/neural_compressor/data/dataloaders/pytorch_dataloader/index", "autoapi/neural_compressor/data/dataloaders/sampler/index", "autoapi/neural_compressor/data/dataloaders/tensorflow_dataloader/index", "autoapi/neural_compressor/data/datasets/bert_dataset/index", "autoapi/neural_compressor/data/datasets/coco_dataset/index", "autoapi/neural_compressor/data/datasets/dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/data/datasets/index", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/data/filters/coco_filter/index", "autoapi/neural_compressor/data/filters/filter/index", "autoapi/neural_compressor/data/filters/index", "autoapi/neural_compressor/data/index", "autoapi/neural_compressor/data/transforms/coco_transform/index", "autoapi/neural_compressor/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/data/transforms/index", "autoapi/neural_compressor/data/transforms/postprocess/index", "autoapi/neural_compressor/data/transforms/tokenization/index", "autoapi/neural_compressor/data/transforms/transform/index", "autoapi/neural_compressor/experimental/benchmark/index", "autoapi/neural_compressor/experimental/common/criterion/index", "autoapi/neural_compressor/experimental/common/dataloader/index", "autoapi/neural_compressor/experimental/common/index", "autoapi/neural_compressor/experimental/common/metric/index", "autoapi/neural_compressor/experimental/common/model/index", "autoapi/neural_compressor/experimental/common/optimizer/index", "autoapi/neural_compressor/experimental/common/postprocess/index", "autoapi/neural_compressor/experimental/common/torch_utils/index", "autoapi/neural_compressor/experimental/component/index", "autoapi/neural_compressor/experimental/compression/index", "autoapi/neural_compressor/experimental/compression/pruning/index", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index", "autoapi/neural_compressor/experimental/data/dataloaders/index", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/index", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index", "autoapi/neural_compressor/experimental/data/filters/filter/index", "autoapi/neural_compressor/experimental/data/filters/index", "autoapi/neural_compressor/experimental/data/index", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/experimental/data/transforms/index", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index", "autoapi/neural_compressor/experimental/data/transforms/transform/index", "autoapi/neural_compressor/experimental/distillation/index", "autoapi/neural_compressor/experimental/export/index", "autoapi/neural_compressor/experimental/export/qlinear2qdq/index", "autoapi/neural_compressor/experimental/export/tf2onnx/index", "autoapi/neural_compressor/experimental/export/torch2onnx/index", "autoapi/neural_compressor/experimental/export/utils/index", "autoapi/neural_compressor/experimental/graph_optimization/index", "autoapi/neural_compressor/experimental/index", "autoapi/neural_compressor/experimental/metric/bleu/index", "autoapi/neural_compressor/experimental/metric/bleu_util/index", "autoapi/neural_compressor/experimental/metric/coco_label_map/index", "autoapi/neural_compressor/experimental/metric/coco_tools/index", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index", "autoapi/neural_compressor/experimental/metric/f1/index", "autoapi/neural_compressor/experimental/metric/index", "autoapi/neural_compressor/experimental/metric/metric/index", "autoapi/neural_compressor/experimental/mixed_precision/index", "autoapi/neural_compressor/experimental/model_conversion/index", "autoapi/neural_compressor/experimental/nas/basic_nas/index", "autoapi/neural_compressor/experimental/nas/dynas/index", "autoapi/neural_compressor/experimental/nas/index", "autoapi/neural_compressor/experimental/nas/nas/index", "autoapi/neural_compressor/experimental/nas/nas_utils/index", "autoapi/neural_compressor/experimental/nas/search_algorithms/index", "autoapi/neural_compressor/experimental/pruner_legacy/gradient_sensitivity/index", "autoapi/neural_compressor/experimental/pruner_legacy/group_lasso/index", "autoapi/neural_compressor/experimental/pruner_legacy/index", "autoapi/neural_compressor/experimental/pruner_legacy/magnitude/index", "autoapi/neural_compressor/experimental/pruner_legacy/pattern_lock/index", "autoapi/neural_compressor/experimental/pruner_legacy/pruner/index", "autoapi/neural_compressor/experimental/pruning/index", "autoapi/neural_compressor/experimental/pruning_recipes/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index", "autoapi/neural_compressor/experimental/pruning_v2/index", "autoapi/neural_compressor/experimental/pytorch_pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index", "autoapi/neural_compressor/experimental/quantization/index", "autoapi/neural_compressor/experimental/scheduler/index", "autoapi/neural_compressor/index", "autoapi/neural_compressor/metric/bleu/index", "autoapi/neural_compressor/metric/bleu_util/index", "autoapi/neural_compressor/metric/coco_label_map/index", "autoapi/neural_compressor/metric/coco_tools/index", "autoapi/neural_compressor/metric/evaluate_squad/index", "autoapi/neural_compressor/metric/f1/index", "autoapi/neural_compressor/metric/index", "autoapi/neural_compressor/metric/metric/index", "autoapi/neural_compressor/mix_precision/index", "autoapi/neural_compressor/model/base_model/index", "autoapi/neural_compressor/model/index", "autoapi/neural_compressor/model/keras_model/index", "autoapi/neural_compressor/model/model/index", "autoapi/neural_compressor/model/mxnet_model/index", "autoapi/neural_compressor/model/nets_factory/index", "autoapi/neural_compressor/model/onnx_model/index", "autoapi/neural_compressor/model/tensorflow_model/index", "autoapi/neural_compressor/model/torch_model/index", "autoapi/neural_compressor/objective/index", "autoapi/neural_compressor/quantization/index", "autoapi/neural_compressor/strategy/auto/index", "autoapi/neural_compressor/strategy/auto_mixed_precision/index", "autoapi/neural_compressor/strategy/basic/index", "autoapi/neural_compressor/strategy/bayesian/index", "autoapi/neural_compressor/strategy/conservative/index", "autoapi/neural_compressor/strategy/exhaustive/index", "autoapi/neural_compressor/strategy/hawq_v2/index", "autoapi/neural_compressor/strategy/index", "autoapi/neural_compressor/strategy/mse/index", "autoapi/neural_compressor/strategy/mse_v2/index", "autoapi/neural_compressor/strategy/random/index", "autoapi/neural_compressor/strategy/strategy/index", "autoapi/neural_compressor/strategy/utils/constant/index", "autoapi/neural_compressor/strategy/utils/index", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index", "autoapi/neural_compressor/strategy/utils/tuning_space/index", "autoapi/neural_compressor/strategy/utils/tuning_structs/index", "autoapi/neural_compressor/strategy/utils/utility/index", "autoapi/neural_compressor/template/api_doc_example/index", "autoapi/neural_compressor/template/index", "autoapi/neural_compressor/training/index", "autoapi/neural_compressor/utils/collect_layer_histogram/index", "autoapi/neural_compressor/utils/constant/index", "autoapi/neural_compressor/utils/create_obj_from_config/index", "autoapi/neural_compressor/utils/index", "autoapi/neural_compressor/utils/kl_divergence/index", "autoapi/neural_compressor/utils/load_huggingface/index", "autoapi/neural_compressor/utils/logger/index", "autoapi/neural_compressor/utils/options/index", "autoapi/neural_compressor/utils/pytorch/index", "autoapi/neural_compressor/utils/utility/index", "autoapi/neural_compressor/ux/components/benchmark/benchmark/index", "autoapi/neural_compressor/ux/components/benchmark/benchmark_model/index", "autoapi/neural_compressor/ux/components/benchmark/execute_benchmark/index", "autoapi/neural_compressor/ux/components/benchmark/index", "autoapi/neural_compressor/ux/components/config_generator/benchmark_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/graph_optimization_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/mixed_precision_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/profiling_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/pruning_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/quantization_config_generator/index", "autoapi/neural_compressor/ux/components/configuration_wizard/configuration_parser/index", "autoapi/neural_compressor/ux/components/configuration_wizard/get_boundary_nodes/index", "autoapi/neural_compressor/ux/components/configuration_wizard/get_configuration/index", "autoapi/neural_compressor/ux/components/configuration_wizard/index", "autoapi/neural_compressor/ux/components/configuration_wizard/params_feeder/index", "autoapi/neural_compressor/ux/components/configuration_wizard/pruning_config_parser/index", "autoapi/neural_compressor/ux/components/db_manager/db_manager/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/benchmark/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/benchmark_result/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/dataloader/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/dataset/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/domain/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/domain_flavour/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/example/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/framework/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/metric/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/model/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/optimization/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/optimization_type/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/precision/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/profiling/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/profiling_result/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/project/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/pruning_details/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/transform/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/tuning_details/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/tuning_history/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/benchmark_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/dataset_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/db_operations/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/diagnosis_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/dictionaries_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/examples_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/model_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/optimization_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/profiling_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/project_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/index", "autoapi/neural_compressor/ux/components/db_manager/params_interfaces/index", "autoapi/neural_compressor/ux/components/db_manager/utils/index", "autoapi/neural_compressor/ux/components/diagnosis/diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/factory/index", "autoapi/neural_compressor/ux/components/diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/onnx_diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/onnx_diagnosis/onnxrt_diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/op_details/index", "autoapi/neural_compressor/ux/components/diagnosis/op_entry/index", "autoapi/neural_compressor/ux/components/diagnosis/tensorflow_diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/tensorflow_diagnosis/tensorflow_diagnosis/index", "autoapi/neural_compressor/ux/components/file_browser/file_browser/index", "autoapi/neural_compressor/ux/components/file_browser/index", "autoapi/neural_compressor/ux/components/graph/attribute/index", "autoapi/neural_compressor/ux/components/graph/collapser/index", "autoapi/neural_compressor/ux/components/graph/edge/index", "autoapi/neural_compressor/ux/components/graph/graph/index", "autoapi/neural_compressor/ux/components/graph/graph_reader/index", "autoapi/neural_compressor/ux/components/graph/index", "autoapi/neural_compressor/ux/components/graph/node/index", "autoapi/neural_compressor/ux/components/graph/reader/index", "autoapi/neural_compressor/ux/components/graph/reader/onnxrt_reader/index", "autoapi/neural_compressor/ux/components/graph/reader/tensorflow_reader/index", "autoapi/neural_compressor/ux/components/index", "autoapi/neural_compressor/ux/components/jobs_management/index", "autoapi/neural_compressor/ux/components/jobs_management/jobs_control_queue/index", "autoapi/neural_compressor/ux/components/jobs_management/jobs_manager/index", "autoapi/neural_compressor/ux/components/jobs_management/request/index", "autoapi/neural_compressor/ux/components/manage_workspace/index", "autoapi/neural_compressor/ux/components/model/domain/index", "autoapi/neural_compressor/ux/components/model/index", "autoapi/neural_compressor/ux/components/model/model/index", "autoapi/neural_compressor/ux/components/model/model_type_getter/index", "autoapi/neural_compressor/ux/components/model/onnxrt/index", "autoapi/neural_compressor/ux/components/model/onnxrt/model/index", "autoapi/neural_compressor/ux/components/model/pytorch/index", "autoapi/neural_compressor/ux/components/model/pytorch/model/index", "autoapi/neural_compressor/ux/components/model/repository/index", "autoapi/neural_compressor/ux/components/model/shape/index", "autoapi/neural_compressor/ux/components/model/tensorflow/frozen_pb/index", "autoapi/neural_compressor/ux/components/model/tensorflow/index", "autoapi/neural_compressor/ux/components/model/tensorflow/keras/index", "autoapi/neural_compressor/ux/components/model/tensorflow/meta_graph/index", "autoapi/neural_compressor/ux/components/model/tensorflow/model/index", "autoapi/neural_compressor/ux/components/model/tensorflow/saved_model/index", "autoapi/neural_compressor/ux/components/model/tensorflow/utils/index", "autoapi/neural_compressor/ux/components/model_zoo/download_config/index", "autoapi/neural_compressor/ux/components/model_zoo/download_model/index", "autoapi/neural_compressor/ux/components/model_zoo/downloader/index", "autoapi/neural_compressor/ux/components/model_zoo/index", "autoapi/neural_compressor/ux/components/model_zoo/list_models/index", "autoapi/neural_compressor/ux/components/names_mapper/index", "autoapi/neural_compressor/ux/components/names_mapper/names_mapper/index", "autoapi/neural_compressor/ux/components/optimization/execute_optimization/index", "autoapi/neural_compressor/ux/components/optimization/factory/index", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/graph_optimization/index", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/index", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/optimize_model/index", "autoapi/neural_compressor/ux/components/optimization/index", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/index", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/mixed_precision/index", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/optimize_model/index", "autoapi/neural_compressor/ux/components/optimization/neural_coder_optimization/index", "autoapi/neural_compressor/ux/components/optimization/neural_coder_optimization/optimize_model/index", "autoapi/neural_compressor/ux/components/optimization/optimization/index", "autoapi/neural_compressor/ux/components/optimization/pruning/index", "autoapi/neural_compressor/ux/components/optimization/pruning/optimize_model/index", "autoapi/neural_compressor/ux/components/optimization/pruning/pruning/index", "autoapi/neural_compressor/ux/components/optimization/tune/index", "autoapi/neural_compressor/ux/components/optimization/tune/tune_model/index", "autoapi/neural_compressor/ux/components/optimization/tune/tuning/index", "autoapi/neural_compressor/ux/components/optimization/tuning_history/index", "autoapi/neural_compressor/ux/components/profiling/execute_profiling/index", "autoapi/neural_compressor/ux/components/profiling/factory/index", "autoapi/neural_compressor/ux/components/profiling/index", "autoapi/neural_compressor/ux/components/profiling/profile_model/index", "autoapi/neural_compressor/ux/components/profiling/profiler/index", "autoapi/neural_compressor/ux/components/profiling/profiling/index", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/factory/index", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/index", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/profiler/index", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/utils/index", "autoapi/neural_compressor/ux/inc_bench/index", "autoapi/neural_compressor/ux/index", "autoapi/neural_compressor/ux/utils/consts/index", "autoapi/neural_compressor/ux/utils/environment/index", "autoapi/neural_compressor/ux/utils/exceptions/index", "autoapi/neural_compressor/ux/utils/executor/index", "autoapi/neural_compressor/ux/utils/expiring_dict/index", "autoapi/neural_compressor/ux/utils/github_info/index", "autoapi/neural_compressor/ux/utils/hw_info/index", "autoapi/neural_compressor/ux/utils/index", "autoapi/neural_compressor/ux/utils/json_serializer/index", "autoapi/neural_compressor/ux/utils/logger/index", "autoapi/neural_compressor/ux/utils/parser/index", "autoapi/neural_compressor/ux/utils/proc/index", "autoapi/neural_compressor/ux/utils/processes/index", "autoapi/neural_compressor/ux/utils/singleton/index", "autoapi/neural_compressor/ux/utils/status_updates/index", "autoapi/neural_compressor/ux/utils/templates/index", "autoapi/neural_compressor/ux/utils/templates/metric/index", "autoapi/neural_compressor/ux/utils/templates/workdir/index", "autoapi/neural_compressor/ux/utils/utils/index", "autoapi/neural_compressor/ux/utils/workload/config/index", "autoapi/neural_compressor/ux/utils/workload/dataloader/index", "autoapi/neural_compressor/ux/utils/workload/evaluation/index", "autoapi/neural_compressor/ux/utils/workload/graph_optimization/index", "autoapi/neural_compressor/ux/utils/workload/index", "autoapi/neural_compressor/ux/utils/workload/mixed_precision/index", "autoapi/neural_compressor/ux/utils/workload/model/index", "autoapi/neural_compressor/ux/utils/workload/pruning/index", "autoapi/neural_compressor/ux/utils/workload/quantization/index", "autoapi/neural_compressor/ux/utils/workload/tuning/index", "autoapi/neural_compressor/ux/utils/yaml_utils/index", "autoapi/neural_compressor/ux/web/communication/index", "autoapi/neural_compressor/ux/web/configuration/index", "autoapi/neural_compressor/ux/web/exceptions/index", "autoapi/neural_compressor/ux/web/index", "autoapi/neural_compressor/ux/web/router/index", "autoapi/neural_compressor/ux/web/server/index", "autoapi/neural_compressor/ux/web/service/benchmark/index", "autoapi/neural_compressor/ux/web/service/history_snapshot_parser/index", "autoapi/neural_compressor/ux/web/service/index", "autoapi/neural_compressor/ux/web/service/model/index", "autoapi/neural_compressor/ux/web/service/optimization/index", "autoapi/neural_compressor/ux/web/service/profiling/index", "autoapi/neural_compressor/ux/web/service/request_data_processor/index", "autoapi/neural_compressor/ux/web/service/response_generator/index", "autoapi/neural_compressor/ux/web/service/workload/index", "autoapi/neural_compressor/version/index", "docs/build_docs/source/index", "docs/source/CODE_OF_CONDUCT", "docs/source/CONTRIBUTING", "docs/source/FX", "docs/source/NAS", "docs/source/SECURITY", "docs/source/Welcome", "docs/source/adaptor", "docs/source/api-doc/adaptor", "docs/source/api-doc/adaptor/onnxrt", "docs/source/api-doc/adaptor/torch_utils", "docs/source/api-doc/api_doc_example", "docs/source/api-doc/apis", "docs/source/api-doc/benchmark", "docs/source/api-doc/compression", "docs/source/api-doc/config", "docs/source/api-doc/mix_precision", "docs/source/api-doc/model", "docs/source/api-doc/objective", "docs/source/api-doc/quantization", "docs/source/api-doc/strategy", "docs/source/api-doc/training", "docs/source/bench", "docs/source/benchmark", "docs/source/dataloader", "docs/source/dataset", "docs/source/design", "docs/source/distillation", "docs/source/distillation_quantization", "docs/source/distributed", "docs/source/examples_readme", "docs/source/export", "docs/source/faq", "docs/source/framework_yaml", "docs/source/get_started", "docs/source/incompatible_changes", "docs/source/infrastructure", "docs/source/installation_guide", "docs/source/legal_information", "docs/source/metric", "docs/source/migration", "docs/source/mixed_precision", "docs/source/model", "docs/source/neural_coder/README", "docs/source/neural_coder/docs/AWSSageMakerSupport", "docs/source/neural_coder/docs/BigDLNanoSupport", "docs/source/neural_coder/docs/IntelCPU_PerformanceSetting", "docs/source/neural_coder/docs/PythonAPI", "docs/source/neural_coder/docs/PythonLauncher", "docs/source/neural_coder/docs/Quantization", "docs/source/neural_coder/docs/SupportMatrix", "docs/source/neural_coder/docs/release_notes/v0.4", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/DEVELOP", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/README", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/RELEASE", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/DEVELOP", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/RELEASE", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/README", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/vsc-extension-quickstart", "docs/source/objective", "docs/source/orchestration", "docs/source/platform_configuration", "docs/source/pruning", "docs/source/publication_list", "docs/source/pythonic_style", "docs/source/quantization", "docs/source/quantization_mixed_precision", "docs/source/releases_info", "docs/source/sigopt_strategy", "docs/source/smooth_quant", "docs/source/tensorboard", "docs/source/transform", "docs/source/tuning_strategies", "docs/source/user_guide", "docs/source/user_yaml", "docs/source/validated_model_list", "index"], "filenames": ["autoapi/644ec953a7dc_pruning_support/index.rst", "autoapi/6ece06672ed3_v1_14/index.rst", "autoapi/6f0d0f71d92e_v1_13/index.rst", "autoapi/9e89549a08c8_v1_11/index.rst", "autoapi/block_mask/index.rst", "autoapi/env/index.rst", "autoapi/neural_compressor/adaptor/adaptor/index.rst", "autoapi/neural_compressor/adaptor/index.rst", "autoapi/neural_compressor/adaptor/keras/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/conv2d/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/dense/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/quantizer/index.rst", "autoapi/neural_compressor/adaptor/mxnet/index.rst", "autoapi/neural_compressor/adaptor/mxnet_utils/index.rst", "autoapi/neural_compressor/adaptor/mxnet_utils/util/index.rst", "autoapi/neural_compressor/adaptor/onnxrt/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/calibration/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/activation/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/argmax/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/attention/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/binary_op/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/concat/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/conv/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/direct_q8/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/embed_layernorm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gather/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gavgpool/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gemm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/lstm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/matmul/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/maxpool/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/ops/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/pad/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/pooling/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/resize/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/split/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/quantizer/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/util/index.rst", "autoapi/neural_compressor/adaptor/pytorch/index.rst", "autoapi/neural_compressor/adaptor/query/index.rst", "autoapi/neural_compressor/adaptor/tensorflow/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter_without_calib/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/bf16_convert/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_add_to_biasadd/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_layout/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_leakyrelu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_nan_to_random/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_placeholder_to_const/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dequantize_cast_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dilated_contraction/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dummy_biasadd/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/expanddims_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fetch_weight_from_reshape/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_batch_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_constant/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_biasadd_add/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_column_wise_mul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_conv_with_math/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_in/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_gelu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_layer_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_reshape_transpose/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/graph_cse_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/grappler_pass/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/insert_print_node/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/move_squeeze_after_relu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/pre_optimize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/remove_training_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/rename_batch_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/split_shared_input/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_equivalent_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_unused_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/switch_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/graph_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_fake_quant/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value_without_calib/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_requantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_requantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/meta_op_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_hostconst_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_quantized_op_cse/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/rnn_convert/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/scale_propagation/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_node/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_schema/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/tf2onnx_utils/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/insert_qdq_pattern/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/merge_duplicated_qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/share_qdq_y_pattern/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_util/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/fake_quantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_config/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_helper/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/optimize_layer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_wrapper/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_concatv2/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_deconv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_in/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_matmul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_pooling/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/optimize_qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_concatv2/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_for_intel_cpu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_matmul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_pooling/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph_common/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/tf2onnx_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/bias_correction/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/graph_transform_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/insert_logging/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/rerange_quantized_concat/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/util/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/bf16_convert/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/hawq_metric/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/smooth_quant/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/symbolic_trace/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/util/index.rst", "autoapi/neural_compressor/algorithm/algorithm/index.rst", "autoapi/neural_compressor/algorithm/fast_bias_correction/index.rst", "autoapi/neural_compressor/algorithm/index.rst", "autoapi/neural_compressor/algorithm/smooth_quant/index.rst", "autoapi/neural_compressor/algorithm/weight_correction/index.rst", "autoapi/neural_compressor/benchmark/index.rst", "autoapi/neural_compressor/compression/callbacks/index.rst", "autoapi/neural_compressor/compression/distillation/criterions/index.rst", "autoapi/neural_compressor/compression/distillation/index.rst", "autoapi/neural_compressor/compression/index.rst", "autoapi/neural_compressor/compression/pruner/criteria/index.rst", "autoapi/neural_compressor/compression/pruner/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/index.rst", "autoapi/neural_compressor/compression/pruner/regs/index.rst", "autoapi/neural_compressor/compression/pruner/schedulers/index.rst", "autoapi/neural_compressor/compression/pruner/utils/index.rst", "autoapi/neural_compressor/conf/config/index.rst", "autoapi/neural_compressor/conf/dotdict/index.rst", "autoapi/neural_compressor/conf/index.rst", "autoapi/neural_compressor/conf/pythonic_config/index.rst", "autoapi/neural_compressor/config/index.rst", "autoapi/neural_compressor/contrib/index.rst", "autoapi/neural_compressor/contrib/strategy/index.rst", "autoapi/neural_compressor/contrib/strategy/sigopt/index.rst", "autoapi/neural_compressor/contrib/strategy/tpe/index.rst", "autoapi/neural_compressor/data/dataloaders/base_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/default_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/fetcher/index.rst", "autoapi/neural_compressor/data/dataloaders/index.rst", "autoapi/neural_compressor/data/dataloaders/mxnet_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/onnxrt_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/pytorch_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/sampler/index.rst", "autoapi/neural_compressor/data/dataloaders/tensorflow_dataloader/index.rst", "autoapi/neural_compressor/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/data/datasets/index.rst", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/data/filters/filter/index.rst", "autoapi/neural_compressor/data/filters/index.rst", "autoapi/neural_compressor/data/index.rst", "autoapi/neural_compressor/data/transforms/coco_transform/index.rst", "autoapi/neural_compressor/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/data/transforms/index.rst", "autoapi/neural_compressor/data/transforms/postprocess/index.rst", "autoapi/neural_compressor/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/benchmark/index.rst", "autoapi/neural_compressor/experimental/common/criterion/index.rst", "autoapi/neural_compressor/experimental/common/dataloader/index.rst", "autoapi/neural_compressor/experimental/common/index.rst", "autoapi/neural_compressor/experimental/common/metric/index.rst", "autoapi/neural_compressor/experimental/common/model/index.rst", "autoapi/neural_compressor/experimental/common/optimizer/index.rst", "autoapi/neural_compressor/experimental/common/postprocess/index.rst", "autoapi/neural_compressor/experimental/common/torch_utils/index.rst", "autoapi/neural_compressor/experimental/component/index.rst", "autoapi/neural_compressor/experimental/compression/index.rst", "autoapi/neural_compressor/experimental/compression/pruning/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/index.rst", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/index.rst", "autoapi/neural_compressor/experimental/data/index.rst", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/experimental/data/transforms/index.rst", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/experimental/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/distillation/index.rst", "autoapi/neural_compressor/experimental/export/index.rst", "autoapi/neural_compressor/experimental/export/qlinear2qdq/index.rst", "autoapi/neural_compressor/experimental/export/tf2onnx/index.rst", "autoapi/neural_compressor/experimental/export/torch2onnx/index.rst", "autoapi/neural_compressor/experimental/export/utils/index.rst", "autoapi/neural_compressor/experimental/graph_optimization/index.rst", "autoapi/neural_compressor/experimental/index.rst", "autoapi/neural_compressor/experimental/metric/bleu/index.rst", "autoapi/neural_compressor/experimental/metric/bleu_util/index.rst", "autoapi/neural_compressor/experimental/metric/coco_label_map/index.rst", "autoapi/neural_compressor/experimental/metric/coco_tools/index.rst", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/experimental/metric/f1/index.rst", "autoapi/neural_compressor/experimental/metric/index.rst", "autoapi/neural_compressor/experimental/metric/metric/index.rst", "autoapi/neural_compressor/experimental/mixed_precision/index.rst", "autoapi/neural_compressor/experimental/model_conversion/index.rst", "autoapi/neural_compressor/experimental/nas/basic_nas/index.rst", "autoapi/neural_compressor/experimental/nas/dynas/index.rst", "autoapi/neural_compressor/experimental/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas_utils/index.rst", "autoapi/neural_compressor/experimental/nas/search_algorithms/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/gradient_sensitivity/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/group_lasso/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/magnitude/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/pattern_lock/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/pruner/index.rst", "autoapi/neural_compressor/experimental/pruning/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_v2/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index.rst", "autoapi/neural_compressor/experimental/quantization/index.rst", "autoapi/neural_compressor/experimental/scheduler/index.rst", "autoapi/neural_compressor/index.rst", "autoapi/neural_compressor/metric/bleu/index.rst", "autoapi/neural_compressor/metric/bleu_util/index.rst", "autoapi/neural_compressor/metric/coco_label_map/index.rst", "autoapi/neural_compressor/metric/coco_tools/index.rst", "autoapi/neural_compressor/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/metric/f1/index.rst", "autoapi/neural_compressor/metric/index.rst", "autoapi/neural_compressor/metric/metric/index.rst", "autoapi/neural_compressor/mix_precision/index.rst", "autoapi/neural_compressor/model/base_model/index.rst", "autoapi/neural_compressor/model/index.rst", "autoapi/neural_compressor/model/keras_model/index.rst", "autoapi/neural_compressor/model/model/index.rst", "autoapi/neural_compressor/model/mxnet_model/index.rst", "autoapi/neural_compressor/model/nets_factory/index.rst", "autoapi/neural_compressor/model/onnx_model/index.rst", "autoapi/neural_compressor/model/tensorflow_model/index.rst", "autoapi/neural_compressor/model/torch_model/index.rst", "autoapi/neural_compressor/objective/index.rst", "autoapi/neural_compressor/quantization/index.rst", "autoapi/neural_compressor/strategy/auto/index.rst", "autoapi/neural_compressor/strategy/auto_mixed_precision/index.rst", "autoapi/neural_compressor/strategy/basic/index.rst", "autoapi/neural_compressor/strategy/bayesian/index.rst", "autoapi/neural_compressor/strategy/conservative/index.rst", "autoapi/neural_compressor/strategy/exhaustive/index.rst", "autoapi/neural_compressor/strategy/hawq_v2/index.rst", "autoapi/neural_compressor/strategy/index.rst", "autoapi/neural_compressor/strategy/mse/index.rst", "autoapi/neural_compressor/strategy/mse_v2/index.rst", "autoapi/neural_compressor/strategy/random/index.rst", "autoapi/neural_compressor/strategy/strategy/index.rst", "autoapi/neural_compressor/strategy/utils/constant/index.rst", "autoapi/neural_compressor/strategy/utils/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_space/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_structs/index.rst", "autoapi/neural_compressor/strategy/utils/utility/index.rst", "autoapi/neural_compressor/template/api_doc_example/index.rst", "autoapi/neural_compressor/template/index.rst", "autoapi/neural_compressor/training/index.rst", "autoapi/neural_compressor/utils/collect_layer_histogram/index.rst", "autoapi/neural_compressor/utils/constant/index.rst", "autoapi/neural_compressor/utils/create_obj_from_config/index.rst", "autoapi/neural_compressor/utils/index.rst", "autoapi/neural_compressor/utils/kl_divergence/index.rst", "autoapi/neural_compressor/utils/load_huggingface/index.rst", "autoapi/neural_compressor/utils/logger/index.rst", "autoapi/neural_compressor/utils/options/index.rst", "autoapi/neural_compressor/utils/pytorch/index.rst", "autoapi/neural_compressor/utils/utility/index.rst", "autoapi/neural_compressor/ux/components/benchmark/benchmark/index.rst", "autoapi/neural_compressor/ux/components/benchmark/benchmark_model/index.rst", "autoapi/neural_compressor/ux/components/benchmark/execute_benchmark/index.rst", "autoapi/neural_compressor/ux/components/benchmark/index.rst", "autoapi/neural_compressor/ux/components/config_generator/benchmark_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/graph_optimization_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/mixed_precision_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/profiling_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/pruning_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/quantization_config_generator/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/configuration_parser/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/get_boundary_nodes/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/get_configuration/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/params_feeder/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/pruning_config_parser/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_manager/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/benchmark/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/benchmark_result/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/dataloader/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/dataset/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/domain/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/domain_flavour/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/example/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/framework/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/metric/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/model/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/optimization/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/optimization_type/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/precision/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/profiling/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/profiling_result/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/project/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/pruning_details/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/transform/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/tuning_details/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/tuning_history/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/benchmark_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/dataset_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/db_operations/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/diagnosis_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/dictionaries_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/examples_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/model_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/optimization_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/profiling_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/project_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/index.rst", "autoapi/neural_compressor/ux/components/db_manager/params_interfaces/index.rst", "autoapi/neural_compressor/ux/components/db_manager/utils/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/factory/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/onnx_diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/onnx_diagnosis/onnxrt_diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/op_details/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/op_entry/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/tensorflow_diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/tensorflow_diagnosis/tensorflow_diagnosis/index.rst", "autoapi/neural_compressor/ux/components/file_browser/file_browser/index.rst", "autoapi/neural_compressor/ux/components/file_browser/index.rst", "autoapi/neural_compressor/ux/components/graph/attribute/index.rst", "autoapi/neural_compressor/ux/components/graph/collapser/index.rst", "autoapi/neural_compressor/ux/components/graph/edge/index.rst", "autoapi/neural_compressor/ux/components/graph/graph/index.rst", "autoapi/neural_compressor/ux/components/graph/graph_reader/index.rst", "autoapi/neural_compressor/ux/components/graph/index.rst", "autoapi/neural_compressor/ux/components/graph/node/index.rst", "autoapi/neural_compressor/ux/components/graph/reader/index.rst", "autoapi/neural_compressor/ux/components/graph/reader/onnxrt_reader/index.rst", "autoapi/neural_compressor/ux/components/graph/reader/tensorflow_reader/index.rst", "autoapi/neural_compressor/ux/components/index.rst", "autoapi/neural_compressor/ux/components/jobs_management/index.rst", "autoapi/neural_compressor/ux/components/jobs_management/jobs_control_queue/index.rst", "autoapi/neural_compressor/ux/components/jobs_management/jobs_manager/index.rst", "autoapi/neural_compressor/ux/components/jobs_management/request/index.rst", "autoapi/neural_compressor/ux/components/manage_workspace/index.rst", "autoapi/neural_compressor/ux/components/model/domain/index.rst", "autoapi/neural_compressor/ux/components/model/index.rst", "autoapi/neural_compressor/ux/components/model/model/index.rst", "autoapi/neural_compressor/ux/components/model/model_type_getter/index.rst", "autoapi/neural_compressor/ux/components/model/onnxrt/index.rst", "autoapi/neural_compressor/ux/components/model/onnxrt/model/index.rst", "autoapi/neural_compressor/ux/components/model/pytorch/index.rst", "autoapi/neural_compressor/ux/components/model/pytorch/model/index.rst", "autoapi/neural_compressor/ux/components/model/repository/index.rst", "autoapi/neural_compressor/ux/components/model/shape/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/frozen_pb/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/keras/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/meta_graph/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/model/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/saved_model/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/utils/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/download_config/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/download_model/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/downloader/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/list_models/index.rst", "autoapi/neural_compressor/ux/components/names_mapper/index.rst", "autoapi/neural_compressor/ux/components/names_mapper/names_mapper/index.rst", "autoapi/neural_compressor/ux/components/optimization/execute_optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/factory/index.rst", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/graph_optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/index.rst", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/optimize_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/index.rst", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/mixed_precision/index.rst", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/optimize_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/neural_coder_optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/neural_coder_optimization/optimize_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/pruning/index.rst", "autoapi/neural_compressor/ux/components/optimization/pruning/optimize_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/pruning/pruning/index.rst", "autoapi/neural_compressor/ux/components/optimization/tune/index.rst", "autoapi/neural_compressor/ux/components/optimization/tune/tune_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/tune/tuning/index.rst", "autoapi/neural_compressor/ux/components/optimization/tuning_history/index.rst", "autoapi/neural_compressor/ux/components/profiling/execute_profiling/index.rst", "autoapi/neural_compressor/ux/components/profiling/factory/index.rst", "autoapi/neural_compressor/ux/components/profiling/index.rst", "autoapi/neural_compressor/ux/components/profiling/profile_model/index.rst", "autoapi/neural_compressor/ux/components/profiling/profiler/index.rst", "autoapi/neural_compressor/ux/components/profiling/profiling/index.rst", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/factory/index.rst", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/index.rst", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/profiler/index.rst", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/utils/index.rst", "autoapi/neural_compressor/ux/inc_bench/index.rst", "autoapi/neural_compressor/ux/index.rst", "autoapi/neural_compressor/ux/utils/consts/index.rst", "autoapi/neural_compressor/ux/utils/environment/index.rst", "autoapi/neural_compressor/ux/utils/exceptions/index.rst", "autoapi/neural_compressor/ux/utils/executor/index.rst", "autoapi/neural_compressor/ux/utils/expiring_dict/index.rst", "autoapi/neural_compressor/ux/utils/github_info/index.rst", "autoapi/neural_compressor/ux/utils/hw_info/index.rst", "autoapi/neural_compressor/ux/utils/index.rst", "autoapi/neural_compressor/ux/utils/json_serializer/index.rst", "autoapi/neural_compressor/ux/utils/logger/index.rst", "autoapi/neural_compressor/ux/utils/parser/index.rst", "autoapi/neural_compressor/ux/utils/proc/index.rst", "autoapi/neural_compressor/ux/utils/processes/index.rst", "autoapi/neural_compressor/ux/utils/singleton/index.rst", "autoapi/neural_compressor/ux/utils/status_updates/index.rst", "autoapi/neural_compressor/ux/utils/templates/index.rst", "autoapi/neural_compressor/ux/utils/templates/metric/index.rst", "autoapi/neural_compressor/ux/utils/templates/workdir/index.rst", "autoapi/neural_compressor/ux/utils/utils/index.rst", "autoapi/neural_compressor/ux/utils/workload/config/index.rst", "autoapi/neural_compressor/ux/utils/workload/dataloader/index.rst", "autoapi/neural_compressor/ux/utils/workload/evaluation/index.rst", "autoapi/neural_compressor/ux/utils/workload/graph_optimization/index.rst", "autoapi/neural_compressor/ux/utils/workload/index.rst", "autoapi/neural_compressor/ux/utils/workload/mixed_precision/index.rst", "autoapi/neural_compressor/ux/utils/workload/model/index.rst", "autoapi/neural_compressor/ux/utils/workload/pruning/index.rst", "autoapi/neural_compressor/ux/utils/workload/quantization/index.rst", "autoapi/neural_compressor/ux/utils/workload/tuning/index.rst", "autoapi/neural_compressor/ux/utils/yaml_utils/index.rst", "autoapi/neural_compressor/ux/web/communication/index.rst", "autoapi/neural_compressor/ux/web/configuration/index.rst", "autoapi/neural_compressor/ux/web/exceptions/index.rst", "autoapi/neural_compressor/ux/web/index.rst", "autoapi/neural_compressor/ux/web/router/index.rst", "autoapi/neural_compressor/ux/web/server/index.rst", "autoapi/neural_compressor/ux/web/service/benchmark/index.rst", "autoapi/neural_compressor/ux/web/service/history_snapshot_parser/index.rst", "autoapi/neural_compressor/ux/web/service/index.rst", "autoapi/neural_compressor/ux/web/service/model/index.rst", "autoapi/neural_compressor/ux/web/service/optimization/index.rst", "autoapi/neural_compressor/ux/web/service/profiling/index.rst", "autoapi/neural_compressor/ux/web/service/request_data_processor/index.rst", "autoapi/neural_compressor/ux/web/service/response_generator/index.rst", "autoapi/neural_compressor/ux/web/service/workload/index.rst", "autoapi/neural_compressor/version/index.rst", "docs/build_docs/source/index.rst", "docs/source/CODE_OF_CONDUCT.md", "docs/source/CONTRIBUTING.md", "docs/source/FX.md", "docs/source/NAS.md", "docs/source/SECURITY.md", "docs/source/Welcome.md", "docs/source/adaptor.md", "docs/source/api-doc/adaptor.rst", "docs/source/api-doc/adaptor/onnxrt.rst", "docs/source/api-doc/adaptor/torch_utils.rst", "docs/source/api-doc/api_doc_example.rst", "docs/source/api-doc/apis.rst", "docs/source/api-doc/benchmark.rst", "docs/source/api-doc/compression.rst", "docs/source/api-doc/config.rst", "docs/source/api-doc/mix_precision.rst", "docs/source/api-doc/model.rst", "docs/source/api-doc/objective.rst", "docs/source/api-doc/quantization.rst", "docs/source/api-doc/strategy.rst", "docs/source/api-doc/training.rst", "docs/source/bench.md", "docs/source/benchmark.md", "docs/source/dataloader.md", "docs/source/dataset.md", "docs/source/design.md", "docs/source/distillation.md", "docs/source/distillation_quantization.md", "docs/source/distributed.md", "docs/source/examples_readme.md", "docs/source/export.md", "docs/source/faq.md", "docs/source/framework_yaml.md", "docs/source/get_started.md", "docs/source/incompatible_changes.md", "docs/source/infrastructure.md", "docs/source/installation_guide.md", "docs/source/legal_information.md", "docs/source/metric.md", "docs/source/migration.md", "docs/source/mixed_precision.md", "docs/source/model.md", "docs/source/neural_coder/README.md", "docs/source/neural_coder/docs/AWSSageMakerSupport.md", "docs/source/neural_coder/docs/BigDLNanoSupport.md", "docs/source/neural_coder/docs/IntelCPU_PerformanceSetting.md", "docs/source/neural_coder/docs/PythonAPI.md", "docs/source/neural_coder/docs/PythonLauncher.md", "docs/source/neural_coder/docs/Quantization.md", "docs/source/neural_coder/docs/SupportMatrix.md", "docs/source/neural_coder/docs/release_notes/v0.4.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/DEVELOP.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/README.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/RELEASE.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/DEVELOP.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/RELEASE.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/README.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/vsc-extension-quickstart.md", "docs/source/objective.md", "docs/source/orchestration.md", "docs/source/platform_configuration.md", "docs/source/pruning.md", "docs/source/publication_list.md", "docs/source/pythonic_style.md", "docs/source/quantization.md", "docs/source/quantization_mixed_precision.md", "docs/source/releases_info.md", "docs/source/sigopt_strategy.md", "docs/source/smooth_quant.md", "docs/source/tensorboard.md", "docs/source/transform.md", "docs/source/tuning_strategies.md", "docs/source/user_guide.md", "docs/source/user_yaml.md", "docs/source/validated_model_list.md", "index.rst"], "titles": ["<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">644ec953a7dc_pruning_support</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">6ece06672ed3_v1_14</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">6f0d0f71d92e_v1_13</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">9e89549a08c8_v1_11</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">block_mask</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">env</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.adaptor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.dense</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.onnxrt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.calibration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.activation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.argmax</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.attention</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.binary_op</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.concat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.direct_q8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.embed_layernorm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gather</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gavgpool</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gemm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.lstm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.maxpool</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.ops</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.pad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.resize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.split</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.query</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tensorflow</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_converter_without_calib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph_common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.tf2onnx_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.bias_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.insert_logging</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.bf16_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.hawq_metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.smooth_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.symbolic_trace</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.algorithm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.fast_bias_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.smooth_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.weight_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.callbacks</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.distillation.criterions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.distillation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.criteria</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.regs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.schedulers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.dotdict</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.pythonic_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy.sigopt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy.tpe</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.base_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.default_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.fetcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.mxnet_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.onnxrt_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.pytorch_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.tensorflow_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.bert_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.coco_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dummy_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dummy_dataset_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.imagenet_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.style_transfer_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters.coco_filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters.filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.coco_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.imagenet_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.postprocess</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.tokenization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.criterion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.postprocess</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.torch_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.component</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.compression</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.compression.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.base_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.default_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.fetcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.mxnet_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.onnxrt_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.pytorch_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.tensorflow_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.bert_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.coco_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dummy_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dummy_dataset_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.imagenet_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.style_transfer_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters.coco_filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters.filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.imagenet_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.tokenization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.distillation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.qlinear2qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.tf2onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.torch2onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.graph_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.bleu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.bleu_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.coco_label_map</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.coco_tools</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.evaluate_squad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.f1</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.model_conversion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.basic_nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.nas_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.search_algorithms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.gradient_sensitivity</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.group_lasso</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.magnitude</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.pattern_lock</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns.pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns.tile_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.prune_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.scheduler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.scheduler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.bleu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.bleu_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.coco_label_map</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.coco_tools</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.evaluate_squad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.f1</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.mix_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.base_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.keras_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.mxnet_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.nets_factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.onnx_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.tensorflow_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.torch_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.objective</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.auto</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.auto_mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.basic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.bayesian</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.conservative</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.exhaustive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.hawq_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.mse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.mse_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_space</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_structs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.template.api_doc_example</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.template</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.training</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.collect_layer_histogram</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.create_obj_from_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.kl_divergence</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.load_huggingface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.options</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.benchmark.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.benchmark.benchmark_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.benchmark.execute_benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.benchmark_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.graph_optimization_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.mixed_precision_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.profiling_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.pruning_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.quantization_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.configuration_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.get_boundary_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.get_configuration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.params_feeder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.pruning_config_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_manager</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.benchmark_result</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.domain</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.domain_flavour</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.example</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.framework</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.optimization_type</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.profiling_result</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.project</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.pruning_details</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.tuning_details</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.tuning_history</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.db_operations</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.examples_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.model_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.project_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.params_interfaces</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.onnx_diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.op_details</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.op_entry</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.tensorflow_diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.file_browser.file_browser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.file_browser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.attribute</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.collapser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.edge</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.graph_reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.reader.onnxrt_reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.reader.tensorflow_reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.jobs_management</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.jobs_management.jobs_control_queue</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.jobs_management.jobs_manager</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.jobs_management.request</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.manage_workspace</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.domain</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.model_type_getter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.onnxrt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.onnxrt.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.pytorch.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.repository</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.shape</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.frozen_pb</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.keras</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.meta_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.saved_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo.download_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo.download_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo.downloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo.list_models</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.names_mapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.names_mapper.names_mapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.execute_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.graph_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.graph_optimizer.optimize_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.mixed_precision.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.mixed_precision.optimize_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.neural_coder_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.pruning.optimize_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.pruning.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.tune</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.tune.tune_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.tune.tuning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.tuning_history</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.execute_profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.profile_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.tensorflow_profiler.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.tensorflow_profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.tensorflow_profiler.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.tensorflow_profiler.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.inc_bench</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.consts</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.environment</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.exceptions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.executor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.expiring_dict</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.github_info</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.hw_info</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.json_serializer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.proc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.processes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.singleton</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.status_updates</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.templates</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.templates.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.templates.workdir</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.evaluation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.graph_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.tuning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.yaml_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.communication</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.configuration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.exceptions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.router</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.server</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.history_snapshot_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.request_data_processor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.response_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.workload</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.version</span></code>", "Intel\u00ae Neural Compressor Documentation", "Contributor Covenant Code of Conduct", "Contribution Guidelines", "FX", "Neural Architecture Search", "Security Policy", "Intel\u00ae Neural Compressor", "Adaptor", "Adaptor", "ONNX Runtime", "Torch Utils", "API Document Example", "APIs", "Benchmark", "Compression", "Config", "Mix Precision", "Model", "Objective", "Quantization", "Strategy", "Training", "Intel\u00ae Neural Compressor Bench", "Benchmarking", "DataLoader", "Dataset", "Design", "Distillation", "Distillation for Quantization", "Distributed Training and Inference (Evaluation)", "Examples", "Export", "Frequently Asked Questions", "Framework YAML Configuration Files", "Getting Started", "Incompatible changes between v1.2 and v1.1", "Infrastructure of Intel\u00ae Neural Compressor", "Installation", "Legal Information", "Metrics", "Code Migration from Intel Neural Compressor 1.X to Intel Neural Compressor 2.X", "Mixed Precision", "Model", "Neural Coder", "AWS Amazon SageMaker Support", "BigDL Nano Support", "Intel CPU Platforms: Best Performance Setting", "Neural Coder as Python API", "Python Launcher", "Neural Coder for Quantization", "Supported Optimization Features", "v0.4", "Changelog", "neural_compressor_ext_lab", "Intel\u00ae Neural Compressor as JupyterLab Extension", "Making a new release of neural_compressor_ext_lab", "Changelog", "neural_compressor_ext_lab_alibaba", "Making a new release of neural_compressor_ext_lab_alibaba", "Change Log", "Neural Coder", "Welcome to your VS Code Extension", "Objective", "Optimization Orchestration", "SYSTEM CONFIGURATION", "Pruning", "Full Publications/Events (57)", "Pythonic Style Access for Configurations", "Quantization", "Turn OFF Auto Mixed Precision during Quantization", "Release", "SigOpt Strategy", "Smooth Quant", "TensorBoard", "Transform", "Tuning Strategies", "User Guide", "User YAML Configuration Files", "Validated Models", "Intel\u00ae Neural Compressor Documentation"], "terms": {"pruning_support": 0, "revis": [0, 1, 2, 3], "id": [0, 1, 2, 3, 154, 201, 203, 239, 249, 251, 252, 253, 254, 287, 289, 290, 291, 292, 409, 559, 591, 595], "644ec953a7dc": 0, "6ece06672ed3": [0, 1], "creat": [0, 1, 2, 3, 5, 15, 101, 175, 185, 187, 205, 215, 225, 227, 252, 262, 263, 290, 322, 325, 330, 504, 521, 524, 527, 545, 562, 573, 575, 577, 578, 581, 588, 591, 593, 595], "date": [0, 1, 2, 3], "2022": [0, 1, 2, 3, 526, 558], "12": [0, 542, 554, 557, 598], "09": [0, 598], "17": [0, 592, 598], "22": [0, 3, 598], "310141": 0, "v1": [1, 2, 3, 142, 197, 198, 237, 253, 254, 256, 291, 292, 294, 303, 549, 554, 559, 562, 585, 590, 591, 598], "14": [1, 2, 170, 244, 245, 551, 598], "6f0d0f71d92e": [1, 2], "08": [1, 202, 240, 594, 598], "31": [1, 598], "07": [1, 2, 597, 598], "16": [1, 544, 545, 585, 592, 598], "24": [1, 595, 598], "229939": 1, "update_dataload": 1, "db_session": [1, 391], "sqlalchemi": [1, 378, 391, 552, 557], "orm": [1, 378, 391], "session": [1, 142, 184, 224, 303, 391, 560, 593], "sourc": [1, 5, 6, 8, 13, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 159, 161, 162, 163, 164, 165, 166, 167, 170, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 237, 239, 240, 241, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 254, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 268, 269, 270, 271, 274, 275, 276, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 294, 295, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 321, 322, 323, 324, 325, 327, 328, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 388, 390, 391, 392, 393, 396, 397, 398, 400, 401, 403, 404, 405, 406, 407, 409, 411, 412, 418, 419, 421, 422, 424, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 440, 442, 443, 444, 445, 447, 448, 450, 451, 453, 454, 456, 457, 459, 460, 461, 462, 463, 465, 466, 467, 468, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 513, 514, 515, 516, 517, 518, 519, 523, 526, 558, 560, 573, 575, 577, 578, 580, 586], "updat": [1, 70, 159, 161, 165, 245, 281, 340, 391, 461, 488, 542, 551, 552, 559, 560, 566, 571, 574, 584, 585, 595, 596], "dataload": [1, 15, 17, 144, 146, 148, 154, 173, 174, 185, 196, 206, 225, 236, 241, 248, 271, 276, 285, 286, 306, 327, 330, 338, 365, 389, 391, 413, 454, 467, 473, 481, 492, 497, 523, 526, 527, 542, 547, 548, 549, 554, 555, 559, 560, 561, 583, 588, 589, 593, 594, 597], "exist": [1, 49, 154, 167, 203, 303, 424, 492, 551, 559, 567, 585, 595], "databas": [1, 187, 227, 356, 359, 361, 364, 365, 366, 369, 370, 375, 379, 380, 384, 389], "update_transform": 1, "transform": [1, 40, 46, 137, 139, 140, 141, 185, 186, 187, 188, 189, 190, 192, 194, 196, 225, 226, 227, 228, 229, 230, 232, 234, 236, 248, 286, 365, 389, 391, 413, 492, 494, 523, 524, 544, 545, 547, 548, 549, 550, 554, 560, 563, 568, 569, 570, 571, 585, 586, 589, 592, 593, 597, 598], "13": [2, 3, 306, 542, 557, 592], "9e89549a08c8": [2, 3], "29": [2, 598], "41": [2, 592, 598], "291905": 2, "11": [3, 542, 557, 559, 561, 595], "03": [3, 598], "34": [3, 598], "52": [3, 592, 598], "916541": 3, "block": [4, 161, 165, 279, 305, 325, 509, 556, 582, 585], "mask": [4, 161, 162, 185, 225, 252, 281, 290, 585, 598], "run_migrations_offlin": 5, "run": [5, 15, 142, 154, 162, 165, 170, 173, 174, 184, 201, 203, 224, 239, 280, 281, 295, 306, 310, 327, 439, 485, 507, 509, 522, 527, 542, 543, 549, 552, 553, 560, 561, 563, 565, 567, 568, 569, 571, 573, 574, 575, 577, 578, 580, 585, 586, 588, 590, 591, 593, 595, 597], "migrat": [5, 592, 596], "offlin": [5, 337, 521, 560, 588, 592], "mode": [5, 39, 40, 41, 106, 146, 194, 234, 252, 290, 303, 322, 337, 527, 542, 556, 557, 573, 577, 588, 589, 595], "thi": [5, 41, 82, 106, 128, 135, 137, 141, 144, 148, 153, 155, 161, 162, 163, 164, 173, 174, 184, 185, 186, 187, 188, 189, 190, 192, 202, 205, 211, 212, 224, 225, 226, 227, 228, 229, 230, 232, 240, 249, 252, 253, 254, 256, 265, 266, 268, 269, 270, 271, 276, 279, 281, 283, 284, 285, 287, 290, 291, 292, 294, 295, 305, 306, 310, 315, 325, 327, 336, 337, 521, 522, 523, 524, 527, 542, 544, 545, 547, 548, 549, 553, 556, 558, 559, 560, 561, 562, 563, 565, 566, 568, 569, 571, 573, 575, 577, 578, 579, 580, 581, 585, 588, 589, 590, 591, 592, 593, 594, 595, 596], "configur": [5, 13, 15, 16, 41, 114, 143, 148, 154, 165, 166, 170, 173, 174, 176, 187, 190, 203, 208, 227, 230, 241, 245, 247, 258, 259, 260, 262, 271, 276, 280, 284, 285, 286, 295, 305, 306, 315, 327, 329, 330, 335, 336, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 355, 443, 473, 492, 493, 494, 495, 496, 498, 499, 500, 501, 502, 507, 509, 523, 524, 527, 542, 545, 559, 560, 567, 581, 582, 585, 588, 590, 594, 595, 598], "context": [5, 15, 337, 587], "just": [5, 93, 175, 200, 202, 205, 207, 208, 210, 215, 240, 305, 524, 560, 570, 574, 580, 583, 588, 594, 595], "url": [5, 187, 227, 558], "an": [5, 15, 63, 64, 66, 101, 137, 144, 148, 153, 162, 178, 183, 187, 202, 206, 211, 218, 223, 227, 240, 248, 249, 253, 254, 262, 263, 285, 286, 287, 291, 292, 295, 325, 401, 519, 521, 523, 524, 526, 527, 544, 545, 546, 551, 559, 560, 561, 563, 567, 568, 571, 580, 582, 585, 586, 588, 591, 592, 593, 594, 595], "engin": 5, "though": 5, "i": [5, 15, 40, 41, 44, 45, 49, 50, 53, 56, 60, 66, 78, 81, 101, 128, 137, 142, 144, 147, 148, 153, 154, 155, 159, 162, 163, 165, 170, 173, 174, 175, 183, 184, 185, 186, 187, 188, 189, 192, 194, 198, 202, 203, 205, 209, 211, 212, 215, 223, 224, 225, 226, 227, 228, 229, 232, 234, 237, 240, 249, 252, 254, 256, 258, 263, 271, 276, 280, 281, 285, 287, 290, 292, 294, 295, 305, 306, 311, 316, 325, 327, 336, 337, 401, 440, 480, 484, 490, 492, 500, 507, 521, 522, 523, 524, 526, 527, 528, 530, 534, 537, 540, 542, 543, 544, 545, 547, 548, 549, 551, 553, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 569, 571, 573, 574, 575, 577, 578, 580, 581, 582, 583, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 597], "accept": [5, 325, 521, 542, 543], "here": [5, 252, 290, 325, 542, 545, 549, 550, 551, 553, 554, 559, 568, 575, 578, 580, 585, 588, 590, 591], "well": [5, 173, 174, 295, 306, 327, 524, 526, 545, 585, 588, 590, 592, 597], "By": [5, 249, 287, 559, 562, 573, 574, 577, 595], "skip": [5, 593, 595], "creation": [5, 353], "we": [5, 40, 63, 64, 66, 70, 82, 137, 146, 152, 153, 154, 184, 203, 205, 224, 249, 252, 287, 290, 313, 521, 523, 527, 544, 549, 551, 553, 559, 560, 567, 568, 571, 575, 578, 580, 581, 582, 583, 585, 587, 588, 591, 592, 593, 595, 596], "don": [5, 137, 153, 161, 523, 542, 585, 595], "t": [5, 63, 64, 66, 137, 153, 161, 202, 205, 240, 254, 292, 523, 527, 542, 547, 549, 560, 581, 585, 588, 592, 595, 597], "even": [5, 542, 585], "need": [5, 15, 40, 101, 105, 146, 154, 173, 174, 175, 183, 184, 187, 194, 202, 205, 207, 208, 215, 223, 224, 227, 234, 240, 285, 294, 295, 305, 306, 315, 327, 336, 337, 523, 527, 542, 544, 545, 547, 549, 556, 560, 561, 563, 565, 566, 569, 573, 574, 575, 577, 578, 580, 581, 585, 587, 588, 589, 590, 594, 595, 597], "dbapi": 5, "avail": [5, 170, 299, 440, 528, 530, 534, 537, 540, 542, 550, 554, 556, 573, 577, 584, 585, 595], "call": [5, 15, 146, 149, 162, 252, 281, 290, 523, 524, 527, 542, 544, 555, 569, 571, 581, 585, 588, 592, 593, 594], "execut": [5, 40, 49, 162, 281, 285, 306, 307, 309, 327, 330, 336, 337, 339, 340, 443, 447, 451, 455, 456, 459, 462, 474, 477, 485, 486, 508, 542, 547, 548, 560, 561, 565, 566, 573, 574, 577, 580, 581, 583, 585, 588, 591, 595, 598], "emit": 5, "given": [5, 15, 63, 64, 66, 100, 101, 112, 142, 148, 170, 202, 240, 252, 290, 306, 401, 478, 492, 524, 585, 592, 594], "string": [5, 40, 41, 112, 142, 156, 161, 162, 163, 164, 165, 166, 187, 204, 209, 227, 241, 245, 247, 249, 252, 258, 259, 260, 262, 263, 271, 276, 279, 280, 281, 282, 283, 284, 287, 290, 299, 303, 330, 337, 350, 492, 559, 594], "script": [5, 249, 250, 253, 254, 287, 288, 291, 292, 339, 340, 426, 443, 447, 451, 453, 456, 459, 465, 549, 556, 563, 567, 570, 571, 574, 586], "output": [5, 40, 49, 53, 55, 70, 94, 101, 106, 142, 148, 161, 167, 170, 173, 174, 207, 211, 244, 245, 249, 279, 287, 294, 295, 303, 306, 327, 333, 334, 337, 447, 451, 523, 527, 542, 547, 548, 549, 551, 553, 555, 559, 560, 562, 571, 580, 581, 583, 585, 587, 588, 593, 594, 595, 597], "run_migrations_onlin": 5, "onlin": [5, 521, 526, 591], "In": [5, 155, 161, 162, 163, 184, 212, 224, 252, 279, 281, 290, 305, 521, 523, 524, 526, 527, 542, 544, 545, 547, 548, 549, 559, 560, 570, 573, 574, 577, 582, 583, 585, 588, 589, 591, 592, 593, 594, 595], "scenario": [5, 354, 527, 542, 543, 547, 560, 585], "associ": [5, 252, 290, 379, 380], "connect": [5, 159, 281, 378, 379, 381, 382, 383, 385, 386, 387, 388, 542, 580, 584, 585, 591], "adaptor_registri": [6, 527], "cl": [6, 149, 156, 161, 162, 163, 164, 187, 194, 202, 204, 209, 227, 234, 240, 263, 270, 274, 279, 281, 283, 305, 318, 337], "The": [6, 8, 13, 16, 34, 40, 49, 70, 109, 115, 117, 142, 148, 149, 154, 155, 156, 159, 161, 162, 163, 164, 165, 166, 167, 173, 174, 175, 185, 186, 187, 188, 189, 193, 194, 202, 204, 207, 209, 212, 214, 215, 225, 226, 227, 228, 229, 233, 234, 240, 241, 247, 249, 250, 251, 253, 254, 256, 258, 259, 260, 262, 263, 265, 266, 268, 269, 270, 271, 274, 276, 279, 280, 281, 282, 283, 284, 287, 288, 289, 291, 292, 294, 295, 303, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 322, 324, 325, 327, 328, 330, 332, 333, 336, 337, 357, 358, 360, 363, 367, 368, 371, 372, 374, 376, 377, 384, 389, 392, 394, 395, 396, 397, 398, 399, 400, 413, 420, 421, 473, 521, 523, 524, 527, 528, 530, 534, 537, 540, 542, 543, 544, 545, 547, 549, 551, 553, 555, 556, 557, 559, 560, 561, 562, 565, 566, 568, 571, 573, 574, 575, 577, 578, 580, 581, 582, 583, 585, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597], "decor": [6, 34, 63, 64, 66, 142, 149, 161, 162, 164, 202, 209, 240, 256, 263, 270, 274, 279, 281, 283, 294, 305, 318, 321, 337, 487, 523, 524, 527, 595], "us": [6, 15, 34, 40, 44, 45, 66, 99, 101, 112, 144, 148, 154, 156, 159, 161, 162, 164, 167, 173, 174, 183, 184, 185, 186, 187, 188, 189, 192, 201, 202, 203, 204, 209, 223, 224, 225, 226, 227, 228, 229, 232, 239, 240, 244, 245, 247, 249, 250, 252, 256, 257, 258, 263, 270, 271, 274, 276, 279, 281, 282, 283, 284, 285, 287, 288, 290, 294, 295, 305, 306, 310, 313, 315, 318, 321, 322, 325, 328, 329, 330, 331, 337, 384, 389, 394, 395, 399, 401, 413, 420, 422, 447, 451, 492, 504, 521, 522, 523, 524, 527, 542, 543, 544, 545, 547, 548, 549, 551, 553, 555, 557, 558, 559, 560, 561, 562, 563, 564, 565, 567, 568, 571, 573, 575, 577, 578, 580, 582, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 597, 598], "regist": [6, 34, 149, 156, 159, 161, 162, 163, 164, 187, 194, 202, 204, 209, 227, 234, 240, 256, 263, 270, 274, 279, 281, 283, 294, 305, 318, 321, 524, 527, 545, 549, 559, 560, 581, 582, 595], "all": [6, 15, 34, 41, 59, 93, 149, 151, 154, 155, 161, 162, 165, 175, 176, 183, 187, 194, 202, 203, 209, 212, 214, 215, 223, 227, 234, 240, 245, 249, 252, 254, 256, 263, 270, 274, 275, 279, 285, 287, 290, 292, 294, 296, 305, 318, 321, 330, 337, 341, 353, 365, 389, 394, 395, 408, 410, 413, 414, 420, 439, 446, 448, 452, 453, 455, 458, 464, 469, 473, 486, 509, 521, 526, 527, 542, 544, 545, 549, 553, 557, 560, 563, 571, 574, 575, 578, 579, 580, 581, 583, 584, 585, 586, 588, 589, 594, 595], "subclass": [6, 34, 149, 161, 162, 164, 180, 184, 187, 194, 202, 209, 220, 224, 227, 234, 240, 256, 263, 270, 274, 279, 281, 283, 294, 305, 318, 321, 527], "paramet": [6, 13, 15, 16, 40, 41, 63, 64, 66, 82, 101, 112, 128, 142, 143, 144, 147, 148, 149, 154, 155, 156, 159, 161, 162, 163, 164, 165, 166, 167, 170, 173, 174, 184, 185, 187, 194, 198, 202, 204, 209, 214, 224, 225, 227, 234, 237, 240, 241, 243, 244, 245, 246, 247, 249, 250, 252, 253, 254, 256, 258, 259, 260, 262, 263, 264, 265, 266, 268, 269, 270, 271, 274, 276, 279, 280, 281, 282, 283, 284, 287, 288, 290, 291, 292, 294, 295, 299, 303, 305, 306, 310, 318, 322, 324, 325, 327, 330, 334, 336, 337, 354, 379, 380, 390, 401, 472, 492, 494, 504, 523, 542, 544, 545, 547, 549, 556, 559, 560, 574, 580, 581, 585, 588, 591, 592, 594, 595, 597], "framework_specific_info": [6, 8, 13, 16, 41, 43, 527], "base": [6, 15, 34, 42, 43, 82, 101, 112, 116, 118, 128, 138, 144, 148, 149, 155, 159, 175, 178, 183, 185, 187, 194, 202, 212, 215, 218, 223, 225, 227, 234, 240, 256, 262, 264, 270, 271, 274, 276, 281, 294, 296, 303, 304, 305, 315, 318, 322, 352, 492, 524, 526, 527, 545, 548, 549, 553, 560, 568, 569, 571, 580, 584, 585, 588, 591, 593, 595, 598], "framework": [6, 8, 13, 15, 16, 41, 154, 156, 171, 172, 176, 177, 181, 184, 185, 186, 187, 188, 189, 190, 191, 192, 194, 196, 199, 202, 204, 205, 209, 216, 217, 219, 221, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 236, 238, 240, 247, 256, 257, 284, 294, 295, 296, 297, 299, 306, 316, 322, 330, 339, 365, 389, 391, 413, 440, 447, 451, 456, 459, 474, 480, 492, 526, 527, 542, 549, 550, 554, 555, 556, 557, 559, 560, 561, 585, 586, 588, 593, 594, 595, 596, 597], "layer": [6, 8, 13, 16, 40, 42, 43, 112, 113, 114, 115, 117, 118, 146, 152, 156, 161, 165, 170, 204, 211, 279, 280, 328, 330, 337, 504, 527, 548, 556, 585, 590], "mxnet_util": 7, "util": [7, 14, 18, 101, 106, 107, 135, 136, 143, 144, 145, 147, 158, 160, 211, 242, 248, 250, 280, 286, 288, 314, 352, 389, 413, 420, 430, 464, 469, 473, 528, 549, 560, 563, 588, 595, 596], "ox_util": 7, "oper": [7, 18, 40, 100, 106, 142, 161, 198, 237, 279, 504, 523, 542, 543, 544, 551, 580, 588, 592, 594, 595], "activ": [7, 18, 30, 148, 211, 245, 322, 397, 527, 542, 548, 553, 560, 581, 584, 587, 588, 592, 593, 597], "argmax": [7, 18, 30], "attent": [7, 18, 30, 185, 225, 521, 547], "binary_op": [7, 18, 30], "concat": [7, 18, 30, 141], "conv": [7, 18, 30, 54, 58, 62, 67, 68, 69, 88, 105, 152, 170, 523, 560, 585, 587, 588, 595], "direct_q8": [7, 18, 30], "embed_layernorm": [7, 18, 30], "gather": [7, 15, 18, 30, 279, 480], "gavgpool": [7, 18, 30], "gemm": [7, 18, 30, 585, 592], "lstm": [7, 18, 30], "matmul": [7, 18, 30, 48, 55, 61, 69, 90, 105, 124, 133, 161, 245, 279, 551, 553, 595], "maxpool": [7, 18, 30, 125, 134, 553], "op": [7, 15, 18, 30, 40, 41, 48, 53, 61, 62, 63, 64, 65, 66, 67, 68, 70, 74, 77, 81, 84, 87, 88, 89, 90, 92, 101, 103, 105, 119, 120, 121, 127, 129, 130, 131, 132, 137, 140, 142, 143, 144, 147, 148, 152, 245, 311, 313, 315, 322, 323, 332, 397, 398, 508, 527, 542, 553, 560, 561, 585, 588, 589, 590, 593, 595, 597], "pad": [7, 18, 30, 67, 68, 185, 202, 225, 240, 545, 594], "pool": [7, 18, 30], "resiz": [7, 18, 30, 185, 186, 198, 202, 225, 226, 237, 240, 544, 545, 594], "split": [7, 18, 30, 40, 78, 201, 202, 239, 240, 523, 594], "calibr": [7, 13, 15, 16, 18, 40, 45, 85, 86, 148, 154, 173, 174, 247, 284, 295, 306, 332, 501, 527, 544, 545, 555, 556, 588, 595, 597], "quantiz": [7, 13, 15, 16, 18, 40, 44, 45, 84, 88, 90, 92, 95, 103, 108, 109, 110, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 143, 144, 146, 148, 152, 154, 155, 170, 173, 174, 198, 205, 212, 237, 245, 246, 247, 248, 258, 285, 286, 295, 311, 313, 315, 321, 327, 328, 332, 336, 337, 473, 481, 497, 527, 532, 542, 544, 545, 549, 550, 551, 553, 555, 556, 559, 561, 562, 563, 568, 570, 571, 574, 583, 586, 590, 593, 594, 595, 596, 597], "tf_util": 7, "graph_rewrit": [7, 107], "bf16": [7, 53, 83, 107, 143, 170, 322, 527, 553, 560, 561, 565, 570, 574, 580, 589, 595], "gener": [7, 15, 44, 45, 83, 107, 118, 142, 148, 165, 173, 174, 175, 184, 187, 188, 189, 190, 202, 215, 224, 227, 228, 229, 230, 240, 245, 249, 257, 287, 295, 306, 310, 325, 327, 339, 342, 343, 344, 345, 346, 347, 348, 349, 390, 459, 465, 466, 476, 517, 523, 527, 542, 544, 547, 559, 560, 561, 563, 568, 573, 575, 577, 578, 580, 582, 584, 585, 586, 588, 589, 593, 594, 595], "int8": [7, 19, 20, 40, 83, 107, 119, 120, 121, 127, 129, 130, 131, 132, 137, 142, 153, 154, 170, 198, 237, 243, 244, 245, 322, 324, 336, 523, 527, 542, 543, 545, 548, 553, 560, 565, 568, 570, 571, 574, 580, 587, 588, 589, 590, 591, 592, 593, 594, 597], "onnx": [7, 16, 17, 30, 39, 40, 83, 107, 136, 152, 181, 221, 243, 244, 245, 246, 295, 302, 335, 340, 443, 526, 527, 528, 544, 550, 551, 553, 554, 556, 562, 565, 570, 571, 586, 587, 595], "qdq": [7, 83, 107, 108, 109, 136, 148, 170, 243, 244, 245, 527, 551, 556, 570, 571, 588], "graph_bas": [7, 83, 107], "quantize_graph": [7, 107], "qat": [7, 107, 108, 147, 170, 245, 258, 303, 548, 549, 551, 556, 560, 588], "quantize_graph_bas": [7, 107, 108], "quantize_graph_bn": [7, 107, 108], "quantize_graph_concatv2": [7, 107, 108], "quantize_graph_conv": [7, 107, 108], "quantize_graph_for_intel_cpu": [7, 107, 108], "quantize_graph_matmul": [7, 107, 108], "quantize_graph_pool": [7, 107, 108], "transform_graph": [7, 107], "bias_correct": [7, 107, 139], "graph_transform_bas": [7, 107, 139], "insert_log": [7, 107, 139], "rerange_quantized_concat": [7, 107, 139], "graph_convert": [7, 107], "graph_converter_without_calib": [7, 107], "graph_util": [7, 107], "quantize_graph_common": [7, 107], "tf2onnx_convert": [7, 107], "torch_util": [7, 206, 248, 286], "bf16_convert": [7, 47, 83, 107, 145], "hawq_metr": [7, 145], "symbolic_trac": [7, 145], "tensorflow": [7, 47, 49, 71, 72, 73, 83, 91, 97, 98, 99, 100, 101, 102, 106, 107, 108, 110, 113, 126, 136, 139, 142, 184, 185, 186, 187, 190, 192, 194, 202, 204, 209, 224, 225, 226, 227, 230, 232, 234, 240, 244, 245, 246, 247, 250, 252, 256, 257, 258, 284, 288, 290, 294, 295, 303, 306, 316, 337, 399, 400, 412, 413, 420, 469, 470, 471, 473, 524, 526, 527, 542, 544, 547, 548, 550, 551, 553, 554, 556, 557, 560, 562, 570, 571, 586, 587, 591, 592, 595, 597], "kerasadaptor": 8, "mxnetadaptor": 13, "do": [13, 16, 155, 184, 185, 224, 225, 241, 245, 249, 252, 282, 287, 290, 336, 521, 542, 545, 549, 553, 556, 557, 559, 560, 575, 578, 585, 589, 590, 595], "inspect": [13, 16, 542, 590, 593], "tensor": [13, 15, 16, 17, 40, 66, 101, 142, 144, 148, 159, 161, 162, 163, 202, 240, 243, 245, 279, 281, 303, 315, 337, 523, 545, 585, 588, 590, 592, 593, 594, 595], "dict": [13, 15, 16, 40, 41, 112, 142, 143, 144, 148, 149, 154, 159, 161, 162, 163, 164, 165, 167, 173, 174, 184, 203, 209, 224, 243, 245, 251, 252, 253, 254, 256, 259, 262, 263, 264, 271, 274, 276, 279, 280, 281, 282, 283, 289, 290, 291, 292, 294, 295, 303, 306, 310, 311, 315, 321, 324, 325, 327, 328, 330, 336, 337, 338, 340, 343, 351, 352, 354, 359, 361, 362, 364, 366, 369, 370, 375, 379, 380, 391, 397, 401, 409, 418, 436, 437, 438, 440, 443, 445, 450, 454, 457, 460, 461, 462, 465, 467, 470, 477, 478, 480, 482, 488, 492, 493, 494, 495, 496, 498, 499, 500, 501, 502, 504, 508, 509, 523, 559, 585, 587, 588, 593, 595], "specif": [13, 16, 42, 100, 112, 165, 185, 186, 187, 188, 192, 194, 209, 225, 226, 227, 228, 232, 234, 258, 265, 266, 268, 269, 270, 379, 380, 521, 524, 527, 542, 547, 553, 555, 559, 560, 561, 562, 563, 567, 568, 570, 574, 580, 582, 585, 587, 595, 597], "mxnet": [14, 15, 180, 184, 187, 190, 194, 202, 220, 224, 227, 230, 234, 240, 247, 256, 284, 294, 295, 300, 306, 526, 527, 544, 550, 553, 556, 557, 560, 561, 562, 587, 595, 597], "init": [14, 18, 151, 157, 160, 545, 559], "optyp": [15, 243], "enum": 15, "type": [15, 40, 41, 70, 92, 101, 112, 118, 128, 142, 143, 144, 148, 149, 156, 161, 162, 163, 164, 165, 167, 170, 183, 185, 187, 194, 202, 204, 209, 223, 225, 227, 234, 240, 245, 246, 249, 250, 252, 256, 263, 270, 274, 279, 281, 283, 287, 288, 290, 294, 303, 305, 310, 311, 318, 322, 324, 325, 336, 350, 355, 379, 380, 422, 480, 488, 522, 527, 542, 545, 549, 553, 556, 560, 561, 581, 588, 591, 592, 594, 595, 597], "isiter": 15, "obj": [15, 101, 154, 165, 184, 214, 224, 241, 247, 258, 259, 260, 262, 271, 276, 280, 284, 295, 305, 306, 327, 330, 337], "bool": [15, 142, 147, 148, 161, 185, 187, 198, 202, 225, 227, 237, 240, 245, 250, 256, 279, 288, 294, 321, 325, 336, 337, 401, 409, 428, 440, 443, 477, 480, 492, 511, 545, 559, 587, 594], "check": [15, 63, 64, 101, 142, 148, 165, 170, 187, 227, 243, 280, 336, 337, 440, 443, 480, 492, 522, 526, 542, 549, 557, 564, 566, 568, 575, 578, 579, 590], "whether": [15, 101, 112, 142, 161, 183, 185, 198, 202, 223, 225, 237, 240, 250, 252, 256, 279, 288, 290, 294, 330, 336, 337, 443, 527, 545, 559, 588, 594], "object": [15, 40, 41, 70, 82, 101, 112, 128, 143, 144, 147, 148, 154, 155, 159, 161, 162, 163, 164, 165, 166, 167, 170, 173, 174, 175, 185, 186, 187, 202, 203, 205, 214, 215, 225, 226, 227, 240, 241, 245, 247, 252, 260, 262, 265, 266, 268, 269, 270, 271, 276, 279, 280, 281, 282, 283, 284, 286, 290, 295, 303, 304, 306, 310, 327, 330, 336, 337, 417, 492, 504, 505, 509, 523, 524, 532, 542, 543, 544, 545, 552, 559, 560, 562, 583, 585, 587, 588, 594, 595, 596, 598], "iter": [15, 17, 101, 142, 154, 162, 164, 170, 173, 174, 178, 183, 187, 188, 205, 218, 223, 227, 228, 281, 283, 295, 306, 327, 330, 523, 524, 527, 543, 545, 560, 585, 587, 588, 593, 595, 597], "return": [15, 40, 41, 49, 63, 64, 66, 70, 101, 112, 142, 143, 144, 147, 148, 149, 154, 156, 161, 162, 163, 164, 165, 167, 173, 174, 187, 194, 198, 202, 203, 204, 209, 214, 227, 234, 237, 240, 245, 246, 249, 250, 252, 253, 254, 256, 262, 263, 270, 274, 279, 280, 281, 283, 287, 288, 290, 291, 292, 294, 295, 299, 303, 305, 306, 310, 318, 322, 324, 325, 327, 330, 336, 337, 401, 480, 492, 523, 524, 545, 549, 559, 562, 582, 585, 588, 593, 595], "true": [15, 81, 109, 140, 142, 154, 170, 183, 185, 187, 188, 201, 202, 203, 223, 225, 227, 228, 239, 240, 245, 250, 256, 274, 288, 294, 305, 321, 325, 330, 336, 477, 480, 492, 545, 549, 553, 559, 560, 563, 566, 567, 587, 588, 593, 594, 595, 597], "els": [15, 142, 183, 223, 305, 492, 568, 593], "fals": [15, 17, 39, 43, 44, 45, 67, 68, 85, 88, 95, 98, 99, 101, 109, 127, 132, 137, 140, 141, 142, 147, 148, 154, 156, 170, 175, 177, 181, 184, 185, 187, 198, 202, 203, 204, 205, 211, 215, 217, 221, 224, 225, 227, 237, 240, 252, 256, 290, 294, 305, 325, 330, 409, 428, 480, 492, 511, 527, 545, 553, 559, 560, 573, 577, 587, 588, 593, 594, 597], "boolean": [15, 492], "ensure_list": 15, "x": [15, 50, 70, 184, 202, 224, 240, 310, 325, 549, 551, 561, 562, 585, 588, 592, 593, 594, 596], "ensur": [15, 202, 240, 310, 542, 549, 551, 588, 594], "list": [15, 40, 49, 101, 142, 143, 144, 148, 154, 161, 170, 173, 174, 178, 185, 198, 202, 203, 218, 225, 237, 240, 244, 245, 249, 250, 252, 253, 254, 256, 263, 271, 276, 279, 282, 287, 288, 290, 291, 292, 294, 295, 303, 306, 321, 325, 327, 328, 350, 352, 354, 359, 361, 362, 364, 366, 369, 370, 375, 379, 380, 391, 401, 404, 409, 435, 440, 443, 447, 451, 477, 484, 485, 486, 492, 504, 511, 523, 526, 527, 545, 553, 557, 560, 563, 568, 570, 573, 574, 577, 582, 585, 587, 588, 589, 593, 595], "input": [15, 17, 40, 41, 49, 56, 60, 63, 64, 66, 67, 68, 70, 78, 79, 81, 82, 101, 105, 106, 112, 118, 142, 143, 146, 147, 148, 152, 170, 173, 174, 185, 186, 187, 189, 198, 201, 202, 207, 225, 226, 227, 229, 237, 239, 240, 243, 244, 245, 294, 295, 299, 303, 306, 327, 336, 337, 339, 435, 447, 451, 456, 459, 465, 524, 527, 542, 543, 544, 545, 547, 548, 549, 551, 553, 555, 559, 560, 562, 563, 568, 585, 587, 588, 592, 593, 594, 597], "check_mx_vers": 15, "version": [15, 49, 100, 148, 244, 245, 286, 440, 480, 492, 521, 523, 527, 542, 553, 557, 558, 560, 573, 575, 577, 578, 584, 586, 595, 596], "str": [15, 143, 144, 147, 148, 149, 156, 185, 186, 187, 194, 198, 202, 204, 208, 209, 225, 226, 227, 234, 237, 240, 244, 245, 246, 249, 250, 252, 254, 256, 263, 274, 287, 288, 290, 292, 294, 321, 324, 325, 330, 337, 339, 340, 343, 350, 351, 352, 354, 356, 379, 380, 391, 397, 398, 401, 403, 404, 409, 418, 419, 421, 422, 424, 426, 428, 429, 433, 436, 437, 438, 440, 443, 447, 451, 456, 459, 461, 462, 465, 466, 477, 480, 485, 488, 492, 493, 494, 495, 496, 498, 499, 500, 501, 502, 504, 508, 509, 545, 559, 587, 593, 594], "mx": 15, "__version__": 15, "combine_cap": 15, "current": [15, 40, 66, 100, 146, 159, 161, 162, 258, 265, 266, 268, 269, 270, 279, 281, 310, 316, 523, 524, 527, 542, 549, 553, 557, 559, 560, 563, 567, 580, 582, 585, 588, 592, 595], "new": [15, 142, 154, 175, 187, 202, 203, 215, 227, 240, 280, 305, 504, 522, 549, 560, 561, 574, 580, 581, 585, 586, 588, 590, 591, 594, 596, 597], "combin": [15, 148, 170, 173, 174, 198, 212, 237, 295, 306, 327, 337, 523, 527, 556, 560, 583, 586, 588, 589, 594, 595], "capabl": [15, 43, 322, 543, 553, 560, 561, 571, 587, 588, 595, 597], "contain": [15, 63, 64, 66, 70, 135, 142, 144, 154, 155, 161, 162, 164, 165, 173, 174, 185, 186, 187, 225, 226, 227, 241, 245, 247, 252, 253, 254, 258, 271, 274, 276, 279, 280, 281, 282, 283, 284, 290, 291, 292, 295, 306, 327, 330, 336, 341, 345, 353, 359, 361, 362, 364, 365, 366, 369, 370, 373, 375, 384, 389, 394, 395, 399, 402, 408, 413, 414, 420, 439, 446, 448, 449, 452, 453, 455, 458, 464, 469, 473, 545, 547, 556, 559, 581, 585, 593, 595, 596], "make_nc_model": 15, "target": [15, 40, 98, 164, 165, 280, 283, 310, 405, 545, 549, 560, 585, 593, 594, 595, 597], "sym_model": 15, "ctx": 15, "input_desc": 15, "convert": [15, 40, 44, 45, 46, 48, 49, 50, 51, 52, 62, 70, 82, 95, 96, 98, 99, 100, 101, 127, 132, 136, 143, 148, 185, 198, 201, 202, 225, 237, 239, 240, 244, 252, 258, 280, 290, 322, 325, 523, 560, 561, 565, 588, 589, 592, 594, 595], "symbol": [15, 143, 147, 148, 249, 287, 295, 306, 523, 562], "model": [15, 17, 30, 39, 40, 41, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 65, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 112, 114, 136, 142, 143, 144, 146, 147, 148, 152, 154, 155, 162, 164, 165, 170, 173, 174, 181, 184, 185, 187, 202, 203, 206, 207, 214, 221, 224, 225, 227, 240, 241, 243, 244, 245, 246, 247, 248, 256, 257, 258, 259, 262, 265, 266, 268, 269, 270, 271, 276, 280, 281, 282, 283, 284, 285, 286, 294, 295, 305, 306, 307, 310, 311, 313, 315, 316, 317, 318, 325, 327, 333, 336, 337, 339, 340, 341, 365, 381, 383, 385, 389, 390, 401, 406, 407, 408, 411, 412, 413, 437, 438, 440, 443, 446, 447, 448, 449, 451, 452, 453, 458, 459, 464, 469, 473, 474, 481, 492, 497, 507, 508, 512, 519, 523, 524, 526, 527, 532, 543, 544, 545, 547, 548, 549, 550, 555, 556, 558, 559, 561, 563, 568, 570, 571, 574, 580, 582, 583, 584, 586, 588, 590, 591, 593, 594, 595, 596, 597], "neural": [15, 144, 154, 155, 161, 170, 197, 198, 199, 202, 203, 206, 209, 212, 237, 238, 240, 242, 248, 255, 256, 258, 271, 276, 279, 282, 284, 285, 286, 293, 294, 295, 299, 306, 313, 314, 320, 327, 472, 479, 492, 519, 522, 527, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 558, 559, 561, 562, 564, 565, 568, 570, 571, 573, 575, 577, 578, 579, 582, 583, 586, 588, 590, 593, 594, 595, 597], "compressor": [15, 154, 155, 161, 170, 197, 198, 199, 202, 203, 206, 209, 212, 237, 238, 240, 242, 248, 255, 256, 258, 279, 282, 284, 285, 286, 293, 294, 295, 299, 306, 314, 320, 327, 472, 479, 492, 519, 522, 524, 527, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 558, 559, 561, 562, 563, 564, 568, 570, 571, 573, 575, 577, 578, 579, 582, 583, 585, 586, 588, 590, 593, 594, 595, 596, 597], "tupl": [15, 101, 148, 173, 174, 198, 202, 237, 240, 245, 295, 306, 321, 327, 492, 545, 559, 560, 588, 594], "symnet": 15, "arg": [15, 49, 101, 185, 186, 187, 225, 226, 227, 279, 310, 325, 333, 334, 342, 344, 346, 347, 348, 349, 359, 361, 362, 364, 366, 369, 370, 375, 544, 545, 549, 560, 569, 588, 593, 594], "aux": 15, "data": [15, 40, 51, 101, 142, 144, 146, 148, 152, 154, 173, 174, 203, 205, 245, 246, 248, 286, 295, 306, 310, 322, 324, 327, 330, 337, 340, 343, 351, 352, 354, 378, 390, 401, 417, 418, 428, 436, 437, 438, 440, 443, 460, 462, 477, 490, 492, 493, 494, 495, 496, 498, 499, 500, 501, 502, 504, 508, 516, 526, 527, 542, 544, 545, 549, 553, 554, 557, 559, 560, 561, 588, 589, 590, 591, 592, 593, 594, 595], "descript": [15, 128, 245, 246, 325, 522, 523], "ncmodel": 15, "fuse": [15, 54, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 87, 88, 89, 90, 92, 127, 132, 147, 148, 152, 523, 593], "suppli": 15, "get_framework_nam": 15, "get": [15, 40, 41, 63, 64, 66, 100, 101, 142, 148, 154, 159, 161, 162, 163, 164, 167, 178, 202, 203, 209, 211, 218, 240, 245, 246, 279, 281, 283, 303, 315, 322, 324, 330, 337, 351, 352, 354, 391, 401, 418, 422, 435, 440, 443, 461, 472, 480, 488, 492, 508, 509, 542, 552, 556, 557, 560, 566, 595, 596, 599], "name": [15, 40, 41, 49, 63, 64, 66, 100, 101, 106, 112, 142, 143, 144, 147, 148, 149, 154, 159, 161, 162, 163, 164, 167, 170, 185, 186, 187, 190, 194, 200, 202, 203, 207, 210, 211, 225, 226, 227, 230, 234, 240, 243, 244, 245, 251, 256, 274, 279, 281, 283, 289, 294, 299, 303, 305, 322, 324, 328, 330, 337, 401, 403, 440, 441, 442, 443, 480, 492, 494, 523, 542, 545, 549, 553, 558, 559, 560, 562, 566, 573, 577, 581, 584, 585, 588, 590, 591, 592, 593, 595, 597, 598], "prepare_model_data": 15, "nc_model": [15, 271, 276, 327], "data_x": 15, "prepar": [15, 148, 472, 523, 526, 545, 549, 554, 588], "loader": [15, 173, 174, 295, 306, 327, 333, 588], "dataloaderwrap": 15, "prepare_model": 15, "create_data_exampl": 15, "exampl": [15, 144, 148, 154, 170, 185, 186, 187, 198, 202, 225, 226, 227, 237, 240, 252, 253, 254, 256, 282, 290, 291, 292, 294, 295, 305, 306, 325, 327, 365, 383, 389, 413, 437, 438, 439, 440, 492, 521, 522, 526, 532, 542, 555, 556, 563, 566, 567, 568, 571, 589, 590, 594, 595, 596, 599], "prepare_dataload": 15, "io": [15, 526], "ndarray_to_devic": 15, "ndarrai": [15, 63, 64, 66, 202, 240, 328, 552, 594], "devic": [15, 75, 85, 86, 87, 88, 89, 90, 93, 103, 127, 132, 141, 170, 547, 560, 561, 563, 566, 571, 580, 585, 587], "is_model_quant": 15, "query_quantizable_nod": 15, "queri": [15, 43, 142, 322, 378, 379, 381, 382, 383, 385, 386, 387, 388, 588], "node": [15, 40, 46, 49, 50, 51, 52, 56, 58, 60, 63, 64, 66, 70, 73, 76, 78, 79, 80, 94, 98, 99, 101, 106, 128, 142, 243, 245, 303, 403, 405, 408, 413, 471, 473, 527, 542, 549, 593, 595], "map": [15, 40, 101, 202, 240, 243, 245, 247, 251, 253, 254, 256, 271, 276, 281, 284, 289, 291, 292, 294, 306, 442, 545, 549, 559, 560, 573, 577, 585, 588, 592], "quantize_sym_model": 15, "qconfig": [15, 593], "accord": [15, 118, 154, 170, 185, 186, 187, 202, 225, 226, 227, 240, 313, 315, 322, 330, 524, 527, 545, 549, 585, 589, 594, 595], "run_forward": 15, "b_filter": 15, "collector": [15, 144, 328], "none": [15, 39, 40, 41, 43, 44, 45, 59, 85, 98, 100, 101, 106, 112, 136, 142, 144, 146, 148, 154, 155, 156, 165, 166, 167, 170, 173, 174, 175, 177, 181, 183, 184, 185, 186, 187, 188, 189, 190, 192, 198, 202, 203, 204, 205, 212, 214, 215, 217, 221, 223, 224, 225, 226, 227, 228, 229, 230, 232, 237, 240, 241, 244, 245, 247, 252, 256, 257, 258, 259, 262, 271, 276, 280, 284, 290, 294, 295, 305, 306, 307, 310, 311, 313, 315, 316, 317, 318, 322, 325, 327, 328, 330, 336, 337, 339, 340, 351, 352, 356, 359, 361, 362, 364, 366, 369, 370, 375, 378, 379, 380, 391, 428, 440, 447, 451, 456, 459, 460, 462, 472, 477, 478, 480, 483, 485, 492, 498, 500, 501, 502, 509, 527, 545, 559, 588, 593, 594, 595], "pre_batch": 15, "post_batch": 15, "forward": [15, 526, 560, 585, 587, 588, 593], "propag": [15, 96], "filter": [15, 185, 186, 187, 188, 189, 190, 192, 196, 225, 226, 227, 228, 229, 230, 232, 236, 248, 286, 337, 401, 494, 544, 545, 556, 585, 593], "which": [15, 51, 79, 106, 144, 146, 159, 161, 162, 164, 185, 186, 187, 198, 203, 225, 226, 227, 237, 249, 254, 263, 265, 266, 268, 269, 270, 274, 279, 280, 281, 283, 287, 292, 299, 305, 310, 337, 490, 521, 523, 524, 527, 542, 544, 545, 547, 549, 552, 553, 556, 559, 560, 561, 562, 564, 568, 571, 574, 580, 581, 583, 585, 587, 588, 589, 590, 592, 593, 594, 595, 596, 597], "batch": [15, 148, 175, 177, 178, 183, 184, 205, 215, 217, 218, 223, 224, 327, 542, 544, 547, 548, 560, 583, 585, 594, 595, 598], "infer": [15, 101, 247, 284, 303, 305, 306, 327, 526, 527, 547, 548, 560, 561, 580, 582, 585, 586, 588, 592, 593, 595], "collect": [15, 40, 200, 202, 205, 207, 208, 210, 240, 254, 256, 292, 294, 328, 337, 443, 480, 492, 551, 588, 593, 595], "inform": [15, 40, 144, 159, 161, 162, 163, 164, 165, 173, 174, 205, 207, 208, 279, 281, 282, 283, 285, 294, 354, 479, 480, 486, 521, 522, 525, 526, 527, 528, 530, 534, 537, 540, 547, 551, 553, 560, 562, 575, 578, 581, 585, 589, 590, 593, 597, 598, 599], "dure": [15, 161, 164, 279, 283, 305, 560, 561, 562, 582, 583, 585, 588, 593, 597], "prior": [15, 84, 595], "after": [15, 40, 74, 148, 161, 162, 185, 198, 202, 205, 225, 237, 240, 245, 281, 311, 325, 478, 524, 542, 544, 545, 547, 548, 551, 556, 559, 560, 573, 574, 577, 581, 582, 583, 585, 588, 589, 591, 593, 594, 595], "count": [15, 524, 545], "int": [15, 40, 101, 142, 148, 184, 185, 186, 198, 202, 224, 225, 226, 237, 240, 244, 245, 250, 252, 256, 263, 288, 290, 294, 325, 337, 356, 391, 435, 478, 480, 483, 492, 500, 545, 559, 560, 587, 594], "make_symbol_block": 15, "gluon": [15, 295, 306, 562], "symbolblock": 15, "make_modul": 15, "parse_tune_config": 15, "tune_cfg": [15, 142, 143, 148, 527, 595], "quantizable_nod": 15, "strategi": [15, 148, 170, 171, 187, 227, 286, 474, 492, 502, 526, 527, 532, 549, 556, 560, 568, 580, 586, 587, 588, 589, 590, 596, 597], "config": [15, 111, 112, 114, 118, 148, 154, 159, 161, 162, 163, 164, 165, 173, 174, 185, 214, 225, 265, 266, 268, 269, 270, 271, 276, 279, 280, 281, 282, 283, 286, 295, 322, 323, 325, 327, 330, 336, 337, 339, 352, 391, 436, 447, 451, 456, 459, 473, 481, 492, 495, 497, 503, 524, 526, 532, 542, 543, 547, 548, 549, 551, 554, 556, 560, 561, 562, 583, 585, 587, 588, 589, 591, 593, 595], "tune": [15, 41, 154, 170, 173, 174, 185, 187, 225, 227, 247, 284, 295, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 321, 322, 323, 324, 327, 337, 376, 377, 390, 413, 443, 448, 461, 473, 481, 497, 527, 542, 544, 545, 549, 556, 558, 560, 561, 580, 582, 585, 586, 589, 590, 591, 593, 597], "from": [15, 40, 41, 57, 63, 64, 66, 101, 142, 148, 154, 155, 156, 159, 161, 162, 163, 164, 165, 170, 173, 174, 175, 178, 182, 185, 186, 187, 188, 189, 190, 192, 197, 198, 204, 205, 208, 215, 218, 222, 225, 226, 227, 228, 229, 230, 232, 237, 241, 243, 244, 245, 246, 249, 252, 253, 254, 258, 263, 279, 280, 281, 283, 287, 290, 291, 292, 295, 303, 305, 306, 322, 324, 325, 330, 336, 337, 390, 401, 424, 436, 437, 438, 440, 465, 485, 490, 492, 509, 521, 523, 524, 527, 543, 544, 545, 547, 548, 549, 550, 551, 552, 554, 556, 559, 561, 562, 563, 567, 568, 569, 571, 581, 582, 583, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596], "distribute_calib_tensor": 15, "calib_tensor": 15, "calib_cfg": 15, "tensor_to_nod": 15, "distribut": [15, 137, 153, 175, 177, 178, 181, 183, 184, 205, 215, 217, 218, 221, 223, 224, 332, 480, 526, 547, 557, 575, 578, 586, 588, 590, 592, 596, 598], "depend": [15, 173, 174, 203, 295, 306, 327, 522, 542, 552, 553, 587, 588, 595], "algorithm": [15, 148, 166, 249, 256, 264, 286, 287, 294, 330, 332, 524, 527, 547, 548, 553, 556, 569, 574, 585, 588, 592, 593, 597], "set": [15, 40, 53, 92, 101, 111, 142, 148, 154, 165, 167, 170, 173, 174, 175, 185, 187, 190, 202, 203, 208, 209, 215, 225, 227, 230, 240, 245, 252, 258, 271, 276, 280, 285, 290, 295, 303, 306, 325, 327, 337, 339, 379, 380, 401, 447, 451, 459, 504, 509, 521, 524, 542, 543, 545, 547, 549, 553, 555, 556, 557, 559, 560, 561, 563, 565, 567, 581, 585, 587, 588, 591, 595, 597], "kl": [15, 328, 332, 553, 560, 595, 597], "minmax": [15, 553, 588, 597], "calib_model": 15, "qsym_model": 15, "calib_data": 15, "calibdata": 15, "threshold": [15, 150, 328, 332, 559], "amp_convert": 15, "amp_cfg": 15, "support": [15, 40, 93, 100, 146, 152, 156, 161, 162, 170, 173, 174, 184, 185, 187, 194, 198, 202, 204, 205, 206, 209, 214, 224, 225, 227, 234, 237, 240, 248, 256, 258, 263, 279, 281, 285, 286, 294, 295, 299, 305, 306, 316, 322, 325, 327, 330, 332, 440, 474, 492, 519, 526, 542, 560, 563, 568, 571, 574, 580, 586, 589, 591, 595, 596], "amp": [15, 563, 570, 584], "wrap": [15, 101, 112, 156, 204, 252, 290, 350, 523, 549, 575, 578], "dataiterload": 15, "data_it": 15, "collectorbas": 15, "calibcollector": 15, "include_tensors_kl": 15, "include_tensors_minmax": 15, "num_bin": [15, 328], "8001": [15, 328], "tensorcollector": 15, "include_nod": 15, "qtensor_to_tensor": 15, "build": [15, 111, 149, 150, 152, 153, 245, 246, 259, 262, 298, 300, 302, 303, 304, 401, 461, 492, 509, 527, 542, 557, 562, 573, 575, 577, 578, 581, 586, 591, 595], "up": [15, 96, 202, 240, 280, 378, 542, 549, 550, 553, 556, 571, 575, 578, 580, 586, 587, 588, 591, 594, 595, 597], "namecollector": 15, "cache_kl": 15, "cache_minmax": 15, "tensors_kl": 15, "tensors_minmax": 15, "onnxruntimeadaptor": 16, "rt": 16, "onnxrt_qlinearopsadaptor": [16, 527], "onnxrt_integeropsadaptor": 16, "onnxrt_qdqadaptor": 16, "onnxrtaug": 17, "model_wrapp": 17, "dump_op_typ": 17, "black_nod": 17, "white_nod": 17, "backend": [17, 42, 152, 170, 171, 172, 176, 177, 181, 185, 186, 188, 189, 190, 191, 192, 196, 199, 202, 208, 209, 216, 217, 219, 221, 225, 226, 228, 229, 230, 231, 232, 236, 238, 240, 257, 295, 296, 297, 299, 316, 523, 549, 555, 556, 560, 561, 569, 587, 594, 597], "cpuexecutionprovid": [17, 588], "reduce_rang": [17, 39, 170, 587], "augment": 17, "dump": [17, 245, 337, 588, 593], "activationoper": 19, "onnx_quant": [19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38], "onnx_nod": [19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 83, 97, 107], "removableactivationoper": 19, "remov": [19, 40, 52, 53, 56, 70, 76, 79, 80, 81, 92, 94, 245, 254, 292, 378, 424, 521, 522, 560, 573, 577, 585, 593], "qactivationoper": 19, "children": [19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 32, 33, 34, 35, 36, 37, 38], "initi": [19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 32, 33, 34, 35, 36, 37, 38, 40, 101, 112, 142, 156, 162, 173, 174, 182, 185, 204, 222, 225, 280, 281, 306, 322, 327, 379, 380, 472, 524, 542, 544, 545, 559, 579, 585, 588, 595], "qoper": [19, 34], "format": [19, 40, 49, 142, 185, 186, 187, 225, 226, 227, 245, 252, 258, 290, 322, 325, 443, 545, 549, 551, 559, 560, 561, 562, 563, 588], "argmaxoper": 20, "qargmaxoper": 20, "attentionoper": 21, "qattentionoper": 21, "qattent": 21, "binari": [22, 142, 256, 294, 552, 559, 575, 578], "binaryoper": 22, "qbinaryoper": 22, "qbinari": 22, "concatoper": 23, "qconcatoper": 23, "qconcat": 23, "convoper": 24, "qconvoper": 24, "qlinearconv": 24, "direct8bit": 25, "direct8bitoper": 25, "qdirectoper": 25, "qdirect": 25, "embedlayernorm": 26, "embedlayernormalizationoper": 26, "qembedlayernormalizationoper": 26, "qembedlayernorm": 26, "gatheroper": 27, "qgatheroper": 27, "qgather": 27, "globalaveragepool": 28, "globalaveragepooloper": 28, "qglobalaveragepooloper": 28, "qlinearglobalaveragepool": 28, "gemmoper": 29, "qgemmoper": 29, "qgemm": 29, "lstmoper": 31, "matmuloper": 32, "qmatmuloper": 32, "qlinearmatmul": 32, "maxpooloper": 33, "qmaxpooloper": 33, "qmaxpool": 33, "op_registri": 34, "op_typ": [34, 323], "qop_registri": 34, "padoper": 35, "qpadoper": 35, "qpad": 35, "averagepool": 36, "pooloper": 36, "qpooloper": 36, "qlinearaveragepool": 36, "resizeoper": 37, "qresizeoper": 37, "qresiz": 37, "splitoper": 38, "qsplitoper": 38, "qsplit": 38, "q_config": [39, 245, 527], "static": [39, 43, 146, 152, 170, 246, 306, 322, 509, 527, 556, 560, 563, 568, 569, 570, 571, 574, 580, 595, 598], "quantization_param": 39, "op_types_to_quant": 39, "fallback_list": 39, "fp32": [39, 75, 127, 132, 137, 148, 153, 170, 173, 174, 244, 245, 256, 294, 311, 315, 322, 330, 336, 337, 526, 527, 542, 553, 554, 559, 560, 561, 570, 587, 588, 589, 590, 591, 592, 593, 595, 597, 598], "add_qdq_pair_to_weight": [39, 588], "optypes_to_exclude_output_qu": [39, 588], "dedicated_qdq_pair": [39, 588], "helper": [40, 41, 106, 112, 142, 148, 185, 186, 187, 201, 225, 226, 227, 239, 243, 244, 245, 303, 335, 486], "onnxrt": [40, 185, 187, 194, 202, 225, 227, 234, 240, 256, 294, 335, 395, 396, 411, 413, 420, 473, 527, 561], "dtype_to_nam": 40, "dtype_map": 40, "dtype": [40, 98, 101, 170, 188, 189, 198, 202, 228, 229, 237, 240, 245, 246, 545, 551, 553, 563, 587, 588, 593, 594, 597], "its": [40, 56, 92, 144, 162, 181, 187, 202, 221, 227, 240, 243, 250, 251, 281, 288, 289, 310, 521, 542, 545, 547, 558, 559, 561, 571, 573, 577, 580, 581, 584, 585, 591, 594, 595], "represent": [40, 357, 358, 360, 363, 367, 368, 371, 372, 374, 376, 377, 503, 521, 523, 548, 585, 588], "quanttyp": 40, "repres": [40, 161, 162, 163, 165, 187, 192, 227, 232, 252, 254, 256, 290, 292, 294, 359, 361, 362, 364, 366, 369, 370, 373, 375, 490, 521, 545, 551, 588, 595], "valu": [40, 51, 63, 64, 66, 85, 86, 101, 137, 142, 148, 153, 154, 159, 165, 167, 170, 173, 174, 185, 188, 189, 198, 202, 203, 225, 228, 229, 237, 240, 252, 256, 280, 290, 294, 295, 306, 310, 315, 322, 325, 327, 328, 330, 337, 350, 352, 354, 359, 361, 362, 364, 366, 369, 370, 375, 379, 380, 401, 403, 474, 478, 492, 500, 503, 523, 542, 545, 553, 559, 560, 566, 582, 585, 587, 588, 594, 595, 597], "make_quant_nod": 40, "make": [40, 101, 137, 153, 161, 162, 164, 183, 223, 279, 281, 283, 337, 521, 522, 527, 542, 543, 544, 553, 559, 560, 568, 573, 577, 580, 588, 589, 591, 592, 595], "quantizelinear": [40, 551], "make_dquant_nod": 40, "axi": 40, "dequantizelinear": [40, 551], "is_b_transpos": 40, "wheter": 40, "inuput": 40, "b": [40, 70, 185, 225, 245, 545, 559, 585, 595], "transpos": [40, 69, 161, 202, 240, 244, 279, 594], "split_shared_bia": 40, "share": [40, 78, 94, 105, 552, 553, 595], "float_to_float16": 40, "float": [40, 144, 161, 162, 163, 165, 185, 198, 225, 237, 250, 252, 253, 254, 281, 288, 290, 291, 292, 325, 340, 398, 453, 478, 492, 500, 503, 545, 559, 587, 588, 592, 594], "float16": [40, 545], "float_to_bfloat16": 40, "bfloat16": [40, 561, 563, 571, 589], "cast_tensor": 40, "tensorproto": [40, 101], "remove_init_from_model_input": 40, "collate_pr": 40, "result": [40, 142, 144, 148, 198, 202, 237, 240, 249, 252, 253, 254, 256, 287, 290, 291, 292, 294, 313, 336, 340, 358, 372, 390, 521, 524, 526, 542, 544, 547, 549, 556, 558, 559, 560, 568, 569, 580, 581, 582, 585, 586, 588, 591, 593, 594, 595, 596, 598], "quantize_data_with_scale_zero": 40, "qtype": [40, 527], "scheme": [40, 148, 509, 527, 544, 553, 571, 595, 597], "scale": [40, 96, 137, 146, 152, 153, 198, 202, 237, 240, 245, 551, 588, 591, 592, 594, 595], "zero_point": [40, 245], "zero": [40, 162, 165, 202, 240, 281, 337, 526, 585, 588, 594, 595], "point": [40, 198, 237, 253, 254, 263, 291, 292, 310, 559, 580, 588, 592, 594, 595], "To": [40, 252, 290, 305, 522, 542, 545, 549, 551, 561, 564, 567, 573, 575, 577, 578, 587, 589, 590, 595, 597], "pack": [40, 57], "weight": [40, 56, 57, 118, 137, 144, 146, 153, 159, 161, 162, 163, 245, 279, 281, 313, 322, 337, 397, 527, 542, 548, 551, 553, 555, 559, 560, 582, 585, 587, 588, 592, 593, 595, 597], "comput": [40, 101, 144, 148, 249, 250, 253, 254, 256, 287, 288, 291, 292, 294, 337, 526, 548, 551, 559, 560, 561, 563, 574, 585, 586, 588, 595], "linear": [40, 152, 161, 170, 245, 279, 523, 547, 551, 560, 585, 595], "when": [40, 49, 60, 66, 142, 162, 165, 170, 185, 186, 194, 202, 225, 226, 234, 240, 250, 280, 281, 288, 306, 327, 492, 509, 521, 524, 542, 544, 545, 560, 571, 573, 574, 577, 581, 585, 588, 594, 595], "uint8": [40, 170, 198, 237, 252, 290, 324, 527, 545, 553, 587, 588, 594, 597], "rmin": [40, 588], "rmax": [40, 588], "0": [40, 49, 86, 101, 142, 150, 152, 156, 170, 175, 177, 181, 184, 185, 188, 189, 192, 198, 202, 204, 205, 215, 217, 221, 224, 225, 228, 229, 232, 237, 240, 245, 247, 256, 263, 271, 276, 284, 294, 305, 306, 311, 325, 523, 542, 545, 547, 549, 551, 552, 553, 554, 557, 558, 559, 560, 561, 566, 568, 573, 577, 584, 585, 587, 588, 590, 591, 592, 593, 594, 595, 597], "2": [40, 49, 70, 101, 105, 146, 150, 152, 154, 161, 162, 186, 203, 226, 252, 254, 256, 281, 290, 292, 294, 305, 310, 325, 523, 527, 545, 547, 553, 554, 556, 557, 558, 559, 561, 582, 584, 585, 588, 590, 591, 592, 594, 595, 596], "1": [40, 50, 70, 85, 101, 105, 109, 140, 142, 146, 148, 150, 152, 153, 154, 156, 162, 170, 175, 177, 181, 184, 185, 186, 188, 189, 192, 193, 198, 202, 203, 204, 205, 215, 217, 221, 224, 225, 226, 228, 229, 232, 233, 237, 240, 247, 252, 253, 254, 256, 271, 276, 281, 284, 285, 290, 291, 292, 294, 305, 306, 325, 330, 340, 462, 521, 523, 526, 527, 544, 545, 547, 551, 553, 554, 557, 559, 561, 564, 566, 582, 583, 584, 585, 587, 588, 590, 591, 592, 593, 594, 595, 596, 597], "m": [40, 144, 161, 279, 547, 557, 563, 565, 568, 571, 575, 578, 598], "where": [40, 252, 256, 290, 294, 547, 573, 577, 581, 585, 592, 593], "max": [40, 100, 137, 153, 170, 202, 240, 253, 254, 291, 292, 310, 337, 526, 542, 557, 560, 585, 588, 592, 594, 595], "ab": [40, 159, 281, 588], "np": [40, 202, 240, 310, 549, 594], "arrai": [40, 142, 202, 240, 252, 263, 290, 337, 594], "sym": [40, 553, 588, 597], "asym": [40, 553, 597], "calculate_scale_zp": 40, "quantize_rang": 40, "calcul": [40, 56, 159, 165, 188, 189, 228, 229, 253, 254, 279, 281, 291, 292, 315, 328, 545, 559, 560, 571, 582, 585, 588, 591, 595, 597], "quantize_data": 40, "add": [40, 48, 60, 105, 115, 142, 165, 185, 187, 209, 225, 227, 280, 322, 350, 390, 492, 522, 523, 542, 544, 545, 549, 551, 553, 559, 560, 561, 575, 578, 591, 593, 595], "necessari": [40, 521, 524, 562, 581, 591, 595], "intermedi": [40, 144, 156, 170, 204, 306, 523, 556, 585, 588], "trasnform": 40, "full": [40, 185, 186, 187, 225, 226, 227, 337, 526, 542, 545, 552, 554, 557, 558, 581, 585], "equat": [40, 254, 256, 292, 294, 588], "r": [40, 137, 153, 542, 557, 581, 584, 588, 592, 598], "": [40, 101, 137, 142, 153, 161, 162, 166, 167, 170, 184, 187, 201, 202, 203, 205, 207, 214, 224, 227, 239, 240, 254, 279, 281, 292, 294, 295, 299, 306, 337, 478, 521, 524, 547, 549, 553, 556, 560, 561, 568, 571, 573, 577, 580, 583, 584, 585, 586, 587, 588, 590, 591, 592, 595, 597], "q": [40, 103, 105, 127], "z": [40, 547], "real": [40, 188, 205, 228, 549, 586, 588], "origin": [40, 148, 162, 165, 185, 202, 203, 225, 240, 265, 266, 268, 269, 270, 280, 281, 311, 324, 337, 340, 522, 545, 568, 585, 588, 594, 595, 597], "quantize_data_per_channel": 40, "per": [40, 146, 152, 154, 203, 332, 527, 542, 584, 589, 592, 598], "channel": [40, 137, 146, 152, 153, 161, 198, 202, 237, 240, 279, 527, 556, 557, 563, 565, 570, 585, 592, 594, 598], "dequantize_data_with_scale_zero": 40, "tensor_valu": 40, "scale_valu": 40, "zo_valu": 40, "dequant": [40, 53, 84, 87, 88, 89, 90, 92, 144, 148, 337, 523, 593], "sacal": 40, "dequantize_data": 40, "valueinfo": 40, "tensor_nam": [40, 142], "new_dtyp": 40, "cast": [40, 53, 551, 589, 594], "info": [40, 148, 161, 165, 200, 205, 210, 245, 279, 299, 334, 337, 480, 492, 508, 523, 542, 551, 562], "quantizedvalu": 40, "new_quantized_nam": 40, "scale_nam": 40, "zero_point_nam": 40, "quantized_value_typ": 40, "quint8": 40, "linearli": 40, "intial": 40, "quantizediniti": 40, "quantized_data": 40, "quantizationmod": 40, "quantizedvaluetyp": 40, "quantformat": [40, 245], "quantize_nparrai": 40, "arr": [40, 337], "low": [40, 173, 174, 188, 189, 228, 229, 247, 257, 284, 295, 306, 527, 543, 545, 549, 560, 561, 586, 588, 592, 595], "high": [40, 188, 189, 228, 229, 545, 557, 586, 595], "numpi": [40, 63, 64, 66, 101, 142, 202, 240, 246, 252, 263, 290, 552, 594], "attribute_to_kwarg": 40, "attribut": [40, 79, 100, 101, 148, 167, 408, 409, 413, 473, 527, 544, 553, 555, 560, 587, 597], "kwarg": [40, 101, 118, 119, 120, 121, 122, 123, 124, 125, 128, 129, 131, 133, 134, 170, 187, 200, 202, 207, 210, 227, 240, 294, 295, 296, 298, 300, 302, 303, 304, 306, 321, 323, 325, 327, 333, 334, 336, 337, 342, 344, 346, 347, 348, 349, 359, 361, 362, 364, 366, 369, 370, 375, 544], "make_nod": 40, "find_by_nam": 40, "item_list": 40, "find": [40, 63, 64, 66, 101, 142, 256, 263, 294, 310, 337, 508, 526, 527, 542, 566, 573, 577, 580, 581, 585, 591, 593, 595], "item": [40, 165, 167, 201, 239, 280, 322, 390, 478, 549, 595], "get_smooth_scales_per_op": 40, "max_vals_per_channel": 40, "input_tensors_2_weight": 40, "input_tensors_2_weights_nod": 40, "alpha": [40, 152, 159, 163, 588, 592], "smooth": [40, 146, 152, 321, 585], "same": [40, 79, 142, 185, 202, 225, 240, 252, 290, 337, 527, 543, 544, 545, 547, 549, 553, 560, 564, 568, 573, 577, 584, 585, 587, 588, 593, 594, 595], "one": [40, 105, 106, 111, 148, 161, 164, 202, 212, 240, 249, 252, 256, 258, 279, 282, 283, 287, 290, 294, 524, 527, 542, 547, 548, 549, 553, 554, 556, 557, 559, 560, 561, 563, 564, 568, 569, 571, 573, 574, 577, 580, 581, 582, 583, 585, 587, 588, 590, 594, 595], "mul": [40, 50, 61, 62, 65, 152, 551], "todo": [40, 185, 188, 225, 228, 252, 290, 322], "individu": [40, 161, 279, 521], "each": [40, 42, 144, 183, 187, 190, 198, 202, 223, 227, 230, 237, 240, 250, 252, 253, 254, 288, 290, 291, 292, 315, 522, 527, 542, 545, 547, 548, 553, 560, 561, 565, 571, 574, 580, 582, 585, 591, 593, 594, 595, 596], "A": [40, 50, 70, 71, 99, 112, 142, 148, 155, 159, 161, 162, 163, 164, 165, 187, 202, 205, 207, 208, 214, 227, 240, 241, 249, 252, 253, 254, 256, 259, 262, 263, 264, 271, 274, 276, 279, 280, 281, 282, 283, 287, 290, 291, 292, 294, 295, 299, 303, 310, 327, 545, 550, 553, 559, 560, 562, 573, 574, 577, 580, 585, 586, 588, 594, 595, 597], "save": [40, 101, 165, 187, 214, 227, 244, 245, 285, 303, 306, 327, 328, 333, 337, 523, 527, 544, 555, 560, 561, 562, 564, 568, 573, 577, 583, 585, 588], "correspond": [40, 144, 185, 225, 249, 252, 256, 287, 290, 294, 330, 527, 553, 560, 585, 587, 588, 591, 592, 595], "paper": [40, 547, 585], "onli": [40, 49, 59, 66, 82, 105, 111, 137, 146, 152, 153, 154, 161, 162, 185, 203, 205, 209, 225, 258, 279, 281, 316, 325, 492, 504, 527, 543, 544, 547, 549, 551, 553, 560, 561, 568, 581, 585, 587, 588, 593, 595, 597], "have": [40, 70, 79, 142, 161, 162, 183, 205, 223, 249, 252, 279, 281, 287, 290, 325, 521, 522, 542, 544, 545, 549, 553, 558, 559, 560, 561, 563, 580, 582, 585, 588, 592, 595], "get_smooth_scales_per_input": 40, "insert_smooth_mul_op_per_input": 40, "shape_info": 40, "insert": [40, 73, 101, 103, 105, 109, 140, 152, 245, 523, 556, 560, 563, 585, 588, 589, 593], "inupt": 40, "shape": [40, 101, 142, 161, 188, 189, 198, 202, 228, 229, 237, 240, 252, 290, 413, 420, 424, 435, 473, 526, 542, 545, 553, 554, 560, 594], "ad": [40, 162, 185, 225, 249, 287, 310, 542, 561, 563, 568, 571, 575, 578, 585, 593], "new_init_tensor": 40, "new_added_mul_nod": 40, "adjust_weights_per_op": 40, "adjust": [40, 571, 588], "ha": [40, 63, 64, 66, 70, 161, 162, 203, 249, 279, 281, 287, 325, 522, 524, 527, 542, 544, 551, 556, 560, 561, 566, 580, 587, 588, 589, 591, 595], "whose": [40, 146, 152, 161, 280, 555, 585, 592, 595], "adjustd": 40, "adjust_weights_per_input": 40, "insert_smooth_mul_op_per_op": 40, "befor": [40, 103, 105, 152, 161, 162, 164, 185, 225, 245, 279, 281, 283, 378, 522, 542, 545, 547, 548, 549, 552, 553, 557, 560, 575, 578, 585, 588, 591, 593, 595], "name_2_nod": 40, "kei": [40, 142, 144, 165, 167, 263, 280, 303, 325, 328, 330, 337, 500, 526, 542, 551, 586, 593, 595], "trt_env_setup": 40, "environ": [40, 154, 203, 286, 440, 472, 473, 481, 521, 542, 543, 573, 577, 580, 595], "variabl": [40, 154, 163, 187, 203, 227, 310, 542, 557, 585, 595], "tensorrt": [40, 588], "provid": [40, 98, 101, 106, 173, 174, 202, 240, 247, 252, 271, 276, 284, 285, 290, 295, 306, 327, 331, 333, 401, 477, 486, 524, 526, 527, 542, 543, 544, 548, 549, 550, 551, 556, 557, 560, 561, 562, 563, 567, 571, 574, 580, 581, 585, 587, 588, 593, 595, 596, 597, 598], "get_ops_recurs": 41, "prefix": [41, 142, 143, 147, 563, 568, 593], "graph_info": 41, "templateadaptor": 41, "tampl": 41, "dictionari": [41, 63, 64, 66, 143, 144, 148, 167, 170, 201, 239, 252, 259, 262, 264, 290, 359, 361, 362, 364, 366, 369, 370, 375, 379, 380, 382], "yaml": [41, 154, 165, 167, 173, 174, 185, 187, 203, 225, 227, 241, 247, 258, 259, 260, 262, 271, 276, 284, 285, 295, 336, 337, 345, 351, 352, 436, 492, 503, 527, 555, 559, 560, 582, 585, 587, 593, 594], "file": [41, 101, 142, 151, 165, 166, 173, 174, 185, 186, 187, 190, 201, 202, 208, 211, 225, 226, 227, 230, 239, 240, 241, 245, 247, 252, 258, 259, 260, 262, 271, 276, 280, 282, 284, 285, 290, 295, 305, 306, 336, 337, 345, 401, 447, 451, 461, 484, 492, 509, 524, 527, 542, 549, 552, 555, 558, 559, 560, 562, 566, 575, 578, 579, 580, 581, 582, 585, 587, 588, 593, 594], "pytorchadaptor": 41, "api": [41, 66, 71, 106, 213, 247, 252, 284, 290, 306, 321, 322, 325, 337, 378, 379, 380, 381, 382, 383, 385, 386, 387, 388, 508, 509, 522, 523, 528, 530, 534, 537, 540, 551, 556, 560, 565, 569, 570, 571, 590, 591, 595, 599], "pytorch_ipexadaptor": 41, "intel": [41, 161, 206, 209, 242, 248, 255, 256, 279, 282, 286, 293, 294, 314, 320, 472, 519, 521, 522, 524, 525, 527, 544, 545, 546, 547, 548, 550, 551, 553, 554, 558, 561, 562, 563, 568, 570, 571, 582, 583, 584, 585, 586, 588, 589, 590, 593, 595, 596, 597], "extens": [41, 492, 524, 526, 527, 553, 556, 557, 560, 561, 562, 564, 569, 570, 571, 575, 578, 579, 585, 586, 595, 596, 597], "ipex": [41, 148, 556, 560, 565, 569, 570, 598], "pytorch_fxadaptor": 41, "fx": [41, 148, 306, 316, 556, 569, 570, 586, 588, 589, 598], "graph": [41, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 108, 109, 110, 113, 126, 128, 132, 135, 136, 137, 139, 140, 141, 142, 184, 224, 245, 247, 286, 296, 303, 413, 435, 446, 447, 452, 453, 471, 473, 496, 508, 523, 527, 545, 547, 549, 555, 559, 562, 563, 588, 589, 593], "querybackendcap": [42, 527], "defin": [42, 82, 144, 161, 162, 163, 164, 173, 174, 259, 260, 262, 263, 264, 271, 276, 279, 280, 281, 283, 295, 306, 327, 336, 415, 416, 417, 504, 521, 524, 527, 542, 544, 545, 547, 548, 553, 556, 559, 560, 581, 583, 585, 588, 591, 593, 595, 597], "interfac": [42, 82, 109, 166, 170, 247, 271, 276, 284, 285, 330, 338, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 390, 454, 460, 467, 479, 556, 560, 571, 584, 588, 590], "adapt": [42, 521, 526, 545, 571, 586], "should": [42, 50, 111, 112, 173, 174, 183, 185, 187, 202, 207, 223, 225, 227, 240, 245, 250, 288, 294, 295, 306, 325, 327, 337, 401, 523, 524, 527, 542, 545, 547, 549, 559, 560, 561, 566, 575, 578, 580, 582, 588, 594, 595, 597], "implement": [42, 106, 137, 141, 173, 174, 180, 183, 184, 185, 187, 220, 223, 224, 225, 227, 249, 287, 295, 305, 306, 313, 327, 544, 545, 560, 571, 581, 585, 588, 590, 593, 595, 597], "inherit": [42, 155, 156, 162, 164, 182, 202, 204, 212, 222, 240, 281, 283, 524, 527, 545], "own": [42, 70, 183, 202, 223, 240, 305, 524, 542, 544, 545, 556, 559, 582, 591, 596], "tensorflowadaptor": 43, "stock": [43, 569], "spr": 43, "tensorflow_itexadaptor": 43, "itex": [43, 105, 244, 588], "tensorflowqueri": [43, 527], "local_config_fil": 43, "performance_onli": [43, 44, 45, 103, 127, 132, 141, 560], "itex_mod": [43, 44, 85, 103, 127, 132], "quant_mod": [43, 322], "graphconvert": 44, "qt_config": 44, "recip": [44, 170, 245, 247, 284, 306, 551, 560, 595], "int8_sequ": 44, "fp32_op": [44, 46, 103], "bf16_op": [44, 46, 103, 589], "data_load": [44, 45, 527], "fake_qu": [44, 84, 103, 127, 132], "qdq_enabl": 44, "new_api": [44, 45, 67, 68, 73, 75, 88, 95, 127, 132, 137], "use_bf16": [44, 45, 587], "without": [45, 86, 142, 162, 202, 240, 281, 324, 492, 521, 542, 544, 547, 549, 559, 560, 571, 585, 586, 587, 595, 596], "graphconverterwithoutcalib": 45, "recover_config": 45, "rewrit": [46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 102, 103, 104, 105, 214], "bf16convert": [46, 589], "biasadd": [48, 55, 60, 62, 105, 553], "convertaddtobiasaddoptim": 48, "conv2d": [48, 55, 56, 57, 61, 62, 67, 121, 131, 137, 553, 593, 595], "addv2": [48, 65, 553], "layout": 49, "convertlayoutoptim": 49, "optim": [49, 70, 71, 75, 76, 112, 114, 166, 170, 206, 212, 214, 247, 248, 264, 284, 286, 306, 310, 327, 328, 340, 365, 379, 380, 386, 389, 390, 392, 393, 394, 395, 396, 399, 400, 413, 473, 474, 484, 490, 496, 500, 507, 512, 524, 526, 543, 547, 548, 549, 553, 554, 556, 557, 560, 562, 563, 565, 567, 568, 571, 574, 584, 585, 586, 587, 588, 589, 591, 593, 595, 597], "nchw": 49, "nhwc": 49, "It": [49, 161, 173, 174, 211, 254, 256, 263, 279, 284, 292, 294, 295, 306, 311, 315, 327, 527, 542, 547, 560, 566, 569, 574, 580, 581, 585, 588, 591, 592, 595, 597], "4": [49, 154, 161, 170, 194, 197, 198, 202, 234, 237, 240, 249, 250, 252, 287, 288, 290, 325, 521, 527, 542, 543, 549, 550, 553, 556, 557, 559, 560, 568, 584, 585, 594, 595, 598], "abov": [49, 527, 547, 585, 588], "graph_def": [49, 142, 244, 295, 303, 306, 435, 471], "leakyrelu": 50, "convertleakyreluoptim": 50, "below": [50, 62, 70, 285, 522, 523, 526, 527, 542, 544, 547, 549, 555, 559, 563, 565, 573, 574, 577, 580, 582, 583, 585, 587, 588, 591, 593, 595, 596], "subgraph": [50, 62, 101, 147, 551], "maximum": [50, 161, 162, 185, 202, 225, 240, 250, 281, 288, 310, 545, 560, 585, 588, 594], "note": [50, 161, 252, 290, 316, 524, 542, 549, 551, 553, 557, 560, 565, 568, 573, 577, 580, 585, 588, 593, 595, 596, 597], "coeffici": [50, 585], "less": [50, 142, 337, 543, 547, 560, 585], "than": [50, 142, 185, 202, 225, 240, 337, 524, 526, 543, 545, 555, 559, 582, 583, 585, 588, 591, 592, 594], "convers": [50, 258, 527, 560, 561, 588, 589, 592], "valid": [50, 63, 64, 101, 162, 165, 187, 227, 252, 280, 281, 290, 303, 440, 492, 509, 522, 524, 526, 527, 545, 547, 550, 553, 556, 558, 560, 571, 585, 588, 590], "nan": 51, "random": [51, 142, 198, 202, 237, 240, 264, 286, 310, 314, 337, 522, 524, 560, 587, 594, 597], "convertnantorandom": 51, "const": [51, 52, 59, 60, 63, 64, 66, 78, 94, 286, 391, 473, 481], "consist": [51, 59, 522, 523, 542, 551, 595], "placehold": [52, 183, 223], "convertplaceholdertoconst": 52, "train": [52, 76, 146, 152, 155, 162, 170, 173, 174, 185, 187, 202, 212, 225, 227, 240, 241, 258, 281, 286, 306, 330, 500, 524, 526, 527, 532, 545, 547, 548, 551, 556, 561, 563, 569, 580, 583, 585, 586, 591, 592, 595, 597], "rerewrit": 53, "dequantizecastoptim": 53, "b16": 53, "dilat": 54, "contract": 54, "dilatedcontract": 54, "spacetobatchnd": 54, "batchtospacend": 54, "pattern": [54, 55, 57, 74, 92, 103, 104, 105, 127, 132, 158, 160, 162, 163, 166, 170, 187, 227, 248, 269, 270, 272, 277, 281, 286, 322, 397, 508, 527, 545, 553, 556, 560, 581, 583, 587, 598], "inject": [55, 560], "dummi": [55, 188, 189, 228, 229, 246, 256, 294, 526, 542, 545, 554, 559, 560], "injectdummybiasaddoptim": 55, "fusion": [55, 57, 66, 74, 105, 122, 123, 124, 127, 128, 129, 133, 523, 527, 553], "expanddim": 56, "expanddimsoptim": 56, "next": [56, 178, 218, 325, 524, 542, 587, 595], "featch": 57, "reshap": [57, 63, 64, 69], "fetchweightfromreshapeoptim": 57, "handl": [57, 142, 146, 152, 334, 509, 523, 525, 544], "fold": [58, 59, 245, 553], "batchnorm": [58, 63, 117, 523], "foldbatchnormnodesoptim": 58, "graphfoldconstantoptim": 59, "sequenc": [59, 101, 161, 185, 201, 202, 225, 239, 240, 250, 254, 279, 288, 292, 527, 545, 553, 585, 594], "self": [59, 170, 305, 527, 542, 544, 545, 556, 559, 591, 593, 595], "supported_op_typ": 59, "fusebiasaddandaddoptim": 60, "second": [60, 170, 185, 225, 311, 337, 401, 542, 560, 573, 577, 581, 595, 597], "columnwis": 61, "fusecolumnwisemuloptim": 61, "depthwiseconv2dn": [61, 67, 121, 131, 553], "math": [62, 588], "fuseconvwithmathoptim": 62, "elimin": 62, "sub": [62, 203, 245, 524, 595], "realdiv": [62, 65], "decompos": [63, 64], "fusedecomposedbnoptim": 63, "input_graph_def": [63, 64, 66], "small": [63, 64, 65, 313, 524, 542, 585, 592, 595], "node_name_from_input": [63, 64, 66], "node_nam": [63, 64, 66, 142, 245, 303], "strip": [63, 64, 66, 79, 80, 142, 593], "off": [63, 64, 66, 522], "port": [63, 64, 66, 509, 542], "other": [63, 64, 66, 146, 152, 184, 224, 254, 292, 303, 509, 521, 522, 523, 542, 553, 556, 557, 558, 560, 562, 582, 584, 585, 588, 592, 594, 595, 598], "underli": [63, 64, 66], "node_from_map": [63, 64, 66], "node_map": [63, 64, 66], "pull": [63, 64, 66], "def": [63, 64, 66, 170, 173, 174, 295, 306, 325, 327, 523, 527, 544, 545, 547, 548, 549, 559, 560, 588, 593, 595], "entri": [63, 64, 66, 144, 209, 247, 285, 398, 401, 492, 558], "index": [63, 64, 66, 101, 178, 183, 187, 218, 223, 227, 263, 337, 509, 545, 559, 581], "everi": [63, 64, 66, 161, 162, 279, 281, 527, 568, 573, 577, 585, 595], "identifi": [63, 64, 66, 252, 290, 303], "want": [63, 64, 66, 183, 185, 223, 225, 281, 311, 327, 523, 527, 542, 545, 549, 557, 559, 560, 561, 568, 580, 581, 582, 591, 593, 595], "nodedef": [63, 64, 66], "rais": [63, 64, 66, 101, 161, 162, 165, 252, 279, 280, 281, 290, 295, 325, 492, 526, 585], "valueerror": [63, 64, 66, 252, 290, 325, 552], "If": [63, 64, 66, 70, 154, 173, 174, 187, 202, 227, 240, 280, 295, 306, 325, 327, 522, 523, 542, 543, 545, 549, 551, 557, 558, 559, 560, 561, 566, 574, 575, 578, 580, 582, 588, 591, 593, 594, 595], "isn": [63, 64, 66], "present": [63, 64, 66, 542, 586], "values_from_const": [63, 64, 66], "node_def": [63, 64, 66], "extract": [63, 64, 66, 187, 227, 324, 492, 545], "access": [63, 64, 66, 167, 333, 337, 476, 492, 509, 542, 575, 578], "valid_reshape_input": [63, 64], "reshape_in0_ndef": [63, 64], "reshape_in1_ndef": [63, 64], "ar": [63, 64, 101, 161, 162, 170, 185, 202, 225, 240, 252, 256, 263, 279, 280, 281, 285, 290, 294, 307, 309, 310, 325, 330, 336, 337, 492, 521, 522, 523, 524, 527, 542, 544, 545, 547, 548, 549, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 563, 566, 568, 571, 574, 580, 582, 583, 584, 585, 588, 589, 590, 591, 592, 593, 594, 595, 597], "bypass_reshap": [63, 64], "input_node_map": [63, 64], "input_nam": [63, 64, 98, 136, 170, 244, 245, 551], "get_const_dim_count": [63, 64], "number": [63, 64, 101, 148, 161, 183, 186, 198, 202, 223, 226, 237, 240, 253, 254, 256, 279, 291, 292, 294, 310, 325, 330, 337, 424, 480, 542, 543, 545, 549, 559, 585, 588, 591, 594, 595], "dimens": [63, 64, 101, 177, 202, 217, 240, 545, 547, 585, 594], "instancenorm": 64, "fusedecomposedinoptim": 64, "gelu": 65, "fusegeluoptim": 65, "sqrt": 65, "erf": 65, "samll": 66, "layernorm": 66, "fuselayernormoptim": 66, "remap": 66, "smaller": [66, 202, 240, 547, 560, 585, 594], "case": [66, 70, 154, 184, 201, 202, 203, 224, 239, 240, 247, 271, 276, 284, 305, 306, 492, 542, 544, 547, 548, 549, 553, 555, 559, 564, 568, 580, 581, 582, 585, 586, 588, 590, 594, 596, 597, 598], "fusedbatcnormv3": 66, "And": [66, 523, 543, 560, 566], "further": [66, 521, 561, 562, 563, 565, 574, 580], "restrict": [66, 585, 591], "2d": 66, "3d": [66, 586], "kera": [66, 112, 187, 194, 209, 227, 234, 298, 303, 413, 420, 430, 549, 562, 570, 571, 598], "fusepadwithconv2doptim": 67, "excluded_op_nam": [67, 68, 166, 170, 560, 585], "cfg": [67, 68, 148, 166, 322, 330], "itex_qdq_mod": [67, 68], "conv3d": [67, 121], "fusepadwithfp32conv2doptim": 68, "fusetransposereshapeoptim": 69, "cse": [70, 94], "graphcseoptim": 70, "introduc": [70, 522, 527, 551, 553, 560, 585, 588, 590, 596], "ident": [70, 76, 521, 547], "three": [70, 165, 185, 225, 307, 309, 523, 527, 542, 544, 551, 557, 561, 574, 583, 588, 589, 591, 593], "c": [70, 187, 227, 542, 545, 552, 557, 592, 595], "d": [70, 547, 555, 581, 598], "those": [70, 315, 337, 547, 548, 555, 560, 583, 585, 588, 595], "child": [70, 593], "b1": 70, "c1c2": 70, "d1": [70, 337], "c1": 70, "c2": 70, "memori": [70, 247, 271, 276, 284, 305, 306, 337, 544, 548, 560, 561, 563, 582, 585, 588, 592, 595], "bound": [70, 202, 240, 252, 290, 310, 559, 594], "like": [70, 92, 94, 142, 173, 174, 175, 187, 215, 227, 247, 256, 281, 284, 285, 294, 303, 306, 327, 522, 523, 524, 527, 542, 547, 548, 556, 568, 583, 585, 588, 590, 595], "relu": [70, 74, 105, 523, 553, 593], "relu6": [70, 553], "graphdef": [70, 142, 303, 562], "grappler": [71, 553], "grappleroptim": 71, "input_output_nam": 71, "opt_cfg": 71, "python": [71, 142, 187, 206, 227, 248, 286, 325, 337, 440, 519, 522, 523, 542, 545, 549, 552, 557, 560, 565, 571, 574, 580, 586, 594], "wrapper": [71, 98, 99, 100, 101, 118, 143, 156, 184, 202, 204, 205, 207, 208, 214, 224, 240, 252, 256, 290, 294, 299, 303, 509, 589], "leverag": [71, 524, 526, 547, 551, 563, 580, 583, 588, 595], "built": [71, 171, 172, 176, 181, 185, 186, 191, 193, 195, 196, 198, 199, 202, 207, 209, 216, 219, 221, 225, 226, 231, 233, 235, 236, 237, 238, 240, 285, 294, 297, 305, 306, 327, 524, 527, 545, 549, 560, 573, 577, 582, 588, 594, 595, 597], "convert_add_to_biasadd": [72, 83, 107], "convert_layout": [72, 83, 107], "convert_leakyrelu": [72, 83, 107], "convert_nan_to_random": [72, 83, 107], "convert_placeholder_to_const": [72, 83, 107], "dequantize_cast_optim": [72, 83, 107], "dilated_contract": [72, 83, 107], "dummy_biasadd": [72, 83, 107], "expanddims_optim": [72, 83, 107], "fetch_weight_from_reshap": [72, 83, 107], "fold_batch_norm": [72, 83, 107], "fold_const": [72, 83, 107], "fuse_biasadd_add": [72, 83, 107], "fuse_column_wise_mul": [72, 83, 107], "fuse_conv_with_math": [72, 83, 107], "fuse_decomposed_bn": [72, 83, 107], "fuse_decomposed_in": [72, 83, 107], "fuse_gelu": [72, 83, 107], "fuse_layer_norm": [72, 83, 107], "fuse_pad_with_conv": [72, 83, 107], "fuse_pad_with_fp32_conv": [72, 83, 107], "fuse_reshape_transpos": [72, 83, 107], "graph_cse_optim": [72, 83, 107], "grappler_pass": [72, 83, 107], "insert_print_nod": [72, 83, 107], "move_squeeze_after_relu": [72, 83, 107], "pre_optim": [72, 83, 107], "remove_training_nod": [72, 83, 107], "rename_batch_norm": [72, 83, 107], "split_shared_input": [72, 83, 107], "strip_equivalent_nod": [72, 83, 107, 142], "strip_unused_nod": [72, 83, 107, 142], "switch_optim": [72, 83, 107], "print": [73, 144, 256, 294, 325, 542, 549, 559, 560, 585, 595], "insertprintminmaxnod": 73, "pre_node_nam": 73, "post_node_nam": 73, "pass": [73, 142, 154, 337, 435, 504, 523, 527, 543, 545, 547, 548, 549, 551, 555, 559, 560, 581, 585, 587, 588, 589, 597], "sampl": [73, 178, 183, 185, 186, 187, 198, 202, 218, 223, 225, 226, 227, 237, 240, 256, 263, 294, 310, 424, 524, 526, 545, 550, 556, 581, 588, 594, 595, 597, 598], "move": [74, 523, 587, 590], "squeez": [74, 523], "movesqueezeafterreluoptim": 74, "match": [74, 98, 252, 253, 290, 291, 547, 581], "pre": [75, 112, 173, 174, 185, 225, 295, 306, 327, 545, 547, 548, 560, 561, 568, 585, 586, 588, 593, 595], "entranc": [75, 176], "preoptim": 75, "removetrainingnodesoptim": 76, "protected_nod": 76, "types_to_splic": 76, "checknumer": 76, "stopgradi": 76, "renam": [77, 590], "fusedbatchnorm": 77, "fusedbatchnormv2": 77, "renamebatchnormoptim": 77, "splitsharedinputoptim": 78, "equival": [79, 592], "stripequivalentnodesoptim": 79, "output_node_nam": [79, 80, 127, 128, 132, 142], "unus": [80, 142], "stripunusednodesoptim": 80, "input_node_nam": [80, 127, 132, 142], "switch": [81, 563, 593], "switchoptim": 81, "condit": [81, 185, 186, 187, 202, 225, 226, 227, 240, 307, 309, 545, 558, 594, 595], "graphrewriterbas": 82, "abstract": [82, 155, 202, 240, 241, 247, 284, 306, 421, 433, 484, 508, 527, 555], "freeze_fake_qu": [83, 91, 107], "freeze_valu": [83, 91, 107], "freeze_value_without_calib": [83, 91, 107], "fuse_conv_redundant_dequant": [83, 91, 107], "fuse_conv_requant": [83, 91, 107], "fuse_matmul_redundant_dequant": [83, 91, 107], "fuse_matmul_requant": [83, 91, 107], "meta_op_optim": [83, 91, 107], "post_hostconst_convert": [83, 91, 107], "post_quantized_op_cs": [83, 91, 107], "rnn_convert": [83, 91, 107], "scale_propag": [83, 91, 107], "onnx_graph": [83, 97, 107], "onnx_schema": [83, 97, 107], "tf2onnx_util": [83, 97, 107], "insert_qdq_pattern": [83, 102, 107], "merge_duplicated_qdq": [83, 102, 107], "share_qdq_y_pattern": [83, 102, 107], "freez": [84, 85, 86, 563, 585], "fakequ": 84, "freezefakequantopoptim": 84, "follow": [84, 106, 187, 227, 249, 252, 287, 290, 521, 522, 523, 524, 527, 542, 544, 545, 547, 548, 549, 551, 553, 557, 558, 559, 560, 561, 562, 563, 564, 565, 573, 577, 583, 585, 587, 588, 593, 595], "freezevaluetransform": 85, "max_min_data": [85, 86], "postfix": [85, 86], "tensor_data": [85, 337], "th": [85, 86, 592], "gpu": [85, 86, 93, 526, 543, 556, 560, 561, 565, 571, 580, 587, 588], "freezevaluewithoutcalibtransform": 86, "95": [86, 256, 294, 559, 598], "quantizedconv": [87, 88], "quantizeddeconv": 87, "redund": [87, 89], "fuseconvredundantdequantizetransform": 87, "cpu": [87, 88, 89, 90, 170, 337, 526, 543, 556, 560, 561, 563, 565, 571, 580, 584, 586, 587, 589, 593], "_quantizedconv": 87, "_quantizeddeconv": 87, "successor": [87, 88, 89, 90], "requant": [88, 90, 593], "fuseconvrequantizetransform": 88, "quantizedmatmul": [89, 90], "fusematmulredundantdequantizetransform": 89, "_quantizedmatmul": [89, 90], "fusematmulrequantizedequantizetransform": 90, "quantizedmatmulwithbiasanddequant": 90, "fusematmulrequantizetransform": 90, "fusematmulrequantizedequantizenewapitransform": 90, "fusematmulrequantizenewapitransform": 90, "newapi": 90, "meta": [92, 586], "metainfochangingmemopoptim": 92, "metaop": 92, "With": [92, 154, 305, 523, 527, 544, 560, 568, 573, 577, 581, 582, 585, 586, 591, 595, 598], "chang": [92, 137, 146, 153, 162, 164, 281, 283, 313, 337, 352, 461, 483, 522, 544, 549, 552, 558, 559, 560, 563, 573, 574, 577, 580, 585, 593, 594, 595], "better": [92, 173, 174, 263, 295, 306, 327, 548, 559, 561, 585, 586, 588, 591, 595], "perform": [92, 154, 163, 170, 185, 197, 198, 203, 225, 237, 247, 271, 276, 284, 305, 306, 311, 315, 484, 495, 523, 524, 526, 527, 542, 543, 544, 545, 546, 548, 550, 551, 556, 557, 559, 560, 561, 562, 563, 565, 569, 571, 574, 580, 582, 583, 584, 585, 586, 587, 588, 589, 592, 593, 595, 597, 598], "post": [93, 94, 146, 152, 170, 173, 174, 245, 306, 521, 526, 527, 548, 549, 556, 557, 563, 569, 580, 585, 586, 592, 593, 595], "hostconst": 93, "posthostconstconvert": 93, "default": [93, 142, 165, 167, 170, 173, 174, 177, 185, 186, 187, 198, 202, 217, 225, 226, 227, 237, 240, 244, 245, 249, 258, 280, 287, 303, 324, 330, 337, 359, 361, 362, 364, 366, 369, 370, 375, 401, 418, 492, 523, 527, 542, 545, 551, 553, 556, 557, 559, 560, 561, 568, 571, 573, 577, 582, 585, 587, 588, 589, 591, 594, 595, 597], "postcseoptim": 94, "duplic": [94, 104, 310], "quantizev2": 94, "decreas": [94, 585, 592], "size": [94, 161, 177, 178, 184, 187, 193, 198, 202, 217, 218, 224, 227, 233, 237, 240, 279, 305, 337, 492, 521, 542, 544, 545, 549, 552, 560, 580, 581, 582, 585, 594, 597, 598], "rnn": 95, "quantizedrnnconvert": 95, "calibration_data": [95, 103], "rnn_detail": 95, "scalepropagationtransform": 96, "direct": [96, 161, 279, 442, 585], "export": [97, 170, 248, 252, 286, 290, 492, 526, 554, 566, 581, 593, 596], "onnxgraph": 98, "output_shap": 98, "opset": [98, 100, 101, 244, 245], "extra_opset": 98, "output_nam": [98, 136, 170, 244, 245, 551], "is_subgraph": 98, "graph_nam": 98, "manipul": [98, 99], "onnxnod": 99, "skip_convers": 99, "schema": 100, "onnxopschema": 100, "domain": [100, 101, 170, 365, 389, 413, 420, 473, 474, 476, 492, 504, 509, 542, 585, 595], "since_vers": 100, "get_schema": 100, "max_inclusive_opset_vers": 100, "within": [100, 162, 247, 252, 284, 290, 303, 306, 521, 523, 561, 573, 577, 580, 586], "get_max_supported_opset_vers": 100, "packag": [100, 345, 353, 359, 361, 362, 364, 365, 366, 369, 370, 373, 375, 384, 389, 394, 395, 399, 402, 408, 410, 413, 414, 420, 439, 441, 446, 449, 452, 453, 455, 458, 464, 469, 473, 507, 527, 542, 552, 557, 580, 581, 586, 590, 595], "set_nam": 101, "find_opset": 101, "assert_error": 101, "bool_val": 101, "error_msg": 101, "error": [101, 144, 256, 294, 315, 334, 476, 559, 564, 592, 595], "messag": [101, 140, 492, 504, 509, 595], "map_numpy_to_onnx_dtyp": 101, "np_dtype": 101, "map_onnx_to_numpy_typ": 101, "onnx_typ": 101, "add_port_to_nam": 101, "nr": 101, "get_tensorflow_node_attr": 101, "pars": [101, 148, 185, 186, 198, 202, 225, 226, 237, 240, 339, 350, 443, 447, 451, 456, 459, 465, 484, 492, 500, 594], "get_tensorflow_tensor_shap": 101, "get_tensorflow_node_shape_attr": 101, "attr": [101, 142], "map_tensorflow_dtyp": 101, "get_tensorflow_tensor_data": 101, "convert_tensorflow_tensor_to_onnx": 101, "read_tensorflow_node_attr": 101, "read": [101, 142, 190, 202, 230, 240, 280, 545, 589, 591, 592], "infer_onnx_shape_dtyp": 101, "opset_vers": [101, 136, 170, 244, 245, 551], "input_shap": [101, 189, 229, 544, 545], "input_dtyp": 101, "sometim": [101, 523, 585, 588], "so": [101, 202, 240, 523, 527, 552, 556, 559, 566, 568, 588, 589, 593, 594, 596], "make_onnx_shap": 101, "seqtyp": 101, "tensor_dtyp": 101, "around": 101, "signifi": 101, "make_onnx_inputs_output": 101, "elem_typ": 101, "text": [101, 201, 202, 239, 240, 249, 254, 282, 287, 292, 551, 558, 569, 585, 586, 594, 598], "datatyp": [101, 170, 589, 595], "option": [101, 161, 170, 173, 174, 185, 202, 225, 240, 244, 245, 252, 258, 279, 285, 286, 290, 295, 306, 322, 325, 327, 331, 337, 545, 553, 557, 560, 574, 588, 591, 594, 595, 597], "save_protobuf": 101, "path": [101, 142, 165, 166, 185, 186, 187, 202, 225, 226, 227, 240, 241, 244, 245, 247, 258, 259, 260, 262, 271, 276, 280, 282, 284, 285, 295, 303, 306, 322, 327, 337, 401, 418, 421, 424, 426, 429, 433, 461, 492, 523, 524, 527, 542, 544, 545, 549, 555, 559, 560, 561, 562, 566, 569, 580, 583, 594, 597], "as_text": 101, "protobuf": 101, "is_onnx_domain": 101, "is_list_or_tupl": 101, "are_shapes_equ": 101, "src": [101, 170, 581], "dest": 101, "equal": [101, 137, 142, 153, 325, 337, 559, 585], "get_subgraphs_from_onnx": 101, "model_proto": 101, "over": [101, 187, 227, 256, 294, 550, 554, 556, 559, 571, 580, 587, 595], "df": 101, "initialize_name_count": 101, "avoid": [101, 185, 225, 523, 593], "conflict": [101, 552], "counter": 101, "make_nam": 101, "get_index_from_strided_slice_of_shap": 101, "outputs_to_valu": 101, "stride": [101, 202, 240, 594], "slice": 101, "compute_const_folding_using_tf": 101, "g": [101, 161, 547, 550, 554, 563, 568, 585, 590, 595], "const_node_valu": 101, "graph_output": 101, "constant": [101, 245, 286, 310, 314, 320, 331, 474, 544, 553, 594], "tf": [101, 112, 142, 184, 185, 186, 187, 202, 224, 225, 226, 227, 240, 301, 303, 340, 542, 549, 562, 586, 589, 594], "generategraphwithqdqpattern": 103, "op_wise_config": [103, 127, 132], "quantized_nod": 103, "dq": [103, 105, 127], "pair": [103, 544, 560, 561], "merg": [104, 177, 217, 322, 575, 578, 593, 595], "mergeduplicatedqdqoptim": 104, "y": [105, 202, 240, 310, 552, 566, 592, 594], "shareqdqforitexypatternoptim": 105, "enabl": [105, 144, 162, 170, 281, 480, 542, 549, 557, 561, 563, 565, 568, 569, 571, 584, 585, 586, 595], "break": [105, 549, 560], "graphanalyz": 106, "extend_engin": 106, "analyz": [106, 303, 585, 591, 593], "under": [106, 187, 227, 336, 524, 542, 545, 558, 559, 560, 563, 568, 569, 580, 583, 585, 593, 595], "singleton": [106, 286, 337, 473, 481], "specifi": [106, 154, 173, 174, 202, 203, 240, 247, 252, 256, 259, 262, 271, 276, 284, 285, 290, 294, 295, 306, 325, 327, 336, 337, 354, 391, 443, 488, 492, 509, 542, 549, 553, 559, 560, 568, 582, 587, 594, 595, 597], "graphrewriterhelp": 106, "encapsul": [106, 173, 174, 295, 306, 327, 562], "quantize_lay": [107, 108, 110], "fake_quant": [107, 108, 110], "quantize_config": [107, 108, 110], "quantize_help": [107, 108, 110], "quantize_wrapp": [107, 108, 110], "fuse_qdq_bn": [107, 108, 126], "fuse_qdq_concatv2": [107, 108, 126], "fuse_qdq_conv": [107, 108, 126], "fuse_qdq_deconv": [107, 108, 126], "fuse_qdq_in": [107, 108, 126], "fuse_qdq_matmul": [107, 108, 126], "fuse_qdq_pool": [107, 108, 126], "optimize_qdq": [107, 108, 126], "optimize_lay": [108, 110, 113], "quantize_layer_add": [108, 110, 113], "quantize_layer_bas": [108, 110, 113], "quantize_layer_bn": [108, 110, 113], "fake": [109, 146, 152, 560, 588], "fakequantizebas": 109, "abc": [109, 254, 292, 527, 593, 595], "appli": [109, 122, 123, 124, 127, 129, 133, 155, 162, 212, 250, 288, 521, 542, 560, 563, 565, 571, 580, 583, 585, 588, 589, 591, 595, 596, 597], "fakequant": 109, "per_channel": [109, 553, 588, 597], "num_bit": 109, "8": [109, 170, 201, 239, 523, 553, 557, 585, 586, 595, 598], "channel_axi": [109, 150, 153], "symmetr": [109, 588, 592, 594, 595], "narrow_rang": 109, "quantizeconfig": [111, 112], "custom": [111, 154, 285, 305, 336, 543, 547, 548, 563, 585, 591], "There": [111, 285, 307, 309, 542, 547, 553, 556, 559, 560, 561, 563, 595, 597], "instanc": [111, 112, 154, 173, 174, 203, 253, 254, 256, 259, 262, 265, 266, 268, 269, 270, 291, 292, 294, 295, 306, 310, 324, 327, 521, 523, 527, 542, 543, 560, 565, 571, 597, 598], "global": [111, 161, 170, 265, 266, 268, 269, 270, 279, 337, 523, 560, 585, 587, 595], "class": [112, 148, 263, 415, 416, 523, 524, 544, 545, 547, 559, 560, 571, 582, 583, 588, 590, 593, 595, 597], "init_quantize_config": 112, "quantize_recip": 112, "begin": [112, 162, 281, 547, 548, 560, 585, 595], "process": [112, 144, 161, 162, 164, 165, 173, 174, 185, 186, 187, 198, 202, 203, 225, 226, 227, 237, 240, 245, 279, 281, 283, 286, 295, 306, 307, 309, 310, 327, 336, 337, 353, 436, 437, 440, 473, 481, 485, 524, 527, 542, 544, 545, 547, 548, 549, 551, 560, 564, 583, 585, 588, 593, 594, 597], "model_nam": [112, 492], "special": [112, 305, 523, 544, 559, 560, 582, 585, 596], "decid": [112, 170, 250, 281, 288, 401, 527, 560, 588, 590, 595], "qat_clone_funct": 112, "leav": [112, 574], "quantizewrapp": [112, 118], "wrapped_lay": 112, "config_quantizable_lay": 114, "quantizelayeradd": 115, "quantizelay": 116, "quantizelayerbas": 116, "quantizelayerbatchnorm": 117, "quantizewrapperbas": 118, "fusedbatchnormv3": [119, 129], "fusenodestartwithfusedbatchnormv3": [119, 129], "_quantizedfusedbatchnorm": 119, "concatv2": [120, 130, 141, 553], "fusenodestartwithconcatv2": [120, 130], "quantizedconcatv2": [120, 130], "fusenodestartwithconv2d": [121, 131], "conv2dbackpropinput": 122, "conv3dbackpropinputv2": 122, "fusenodestartwithdeconv2d": 122, "fusedinstancenorm": 123, "fusenodestartwithfusedinstancenorm": 123, "batchmatmul": 124, "batchmatmulv2": 124, "fusenodestartwithmatmul": [124, 133], "avgpool": [125, 134, 553], "fusenodestartwithpool": [125, 134], "optimizeqdqgraph": 127, "input_graph": [127, 132, 137, 339, 447, 451, 456, 459, 466, 527], "op_wise_sequ": [127, 132], "quantizegraph": 128, "quantizegraphbas": 128, "quantizenodebas": 128, "quantizegraphforintel": 132, "common": [135, 200, 248, 258, 262, 263, 264, 286, 330, 485, 486, 492, 521, 545, 548, 549, 551, 555, 557, 560, 588, 592], "herlper": 135, "quantizegraphhelp": 135, "sever": [135, 164, 202, 240, 283, 524, 542, 547, 548, 556, 560, 561, 573, 577, 585, 587, 594, 595, 597], "staticmethod": 135, "function": [135, 146, 173, 174, 186, 226, 259, 262, 271, 276, 523, 524, 527, 542, 543, 544, 547, 548, 555, 556, 557, 559, 560, 561, 571, 581, 585, 588, 591, 593, 595, 596], "tensorflowqdqtoonnxqdqconvert": 136, "shape_overrid": 136, "inputs_as_nchw": [136, 244], "default_opset_vers": 136, "bia": [137, 245, 593], "correct": [137, 153, 165, 252, 253, 254, 256, 280, 290, 291, 292, 294, 521, 542, 563], "biascorrect": 137, "fp32_graph": 137, "method": [137, 148, 163, 178, 183, 184, 185, 187, 194, 202, 205, 218, 223, 224, 225, 227, 234, 240, 262, 263, 264, 322, 330, 331, 333, 334, 486, 504, 523, 524, 526, 545, 547, 548, 559, 560, 583, 585, 588, 589, 592, 594, 595], "weight_empir": 137, "Will": [137, 547, 556], "our": [137, 524, 526, 551, 560, 581, 585, 591, 596], "task": [137, 185, 192, 225, 232, 256, 294, 545, 547, 548, 551, 556, 559, 560, 585], "close": [137, 153], "w_int8": [137, 153], "u": [137, 153, 526, 563], "w_fp32": [137, 153], "varianc": [137, 153, 592], "ratio": [137, 153, 161, 162, 165, 198, 202, 237, 240, 281, 545, 560, 585, 594, 598], "between": [137, 153, 162, 202, 240, 253, 256, 291, 294, 504, 508, 523, 527, 547, 551, 556, 559, 560, 571, 588, 590, 591, 592, 594, 595], "differ": [137, 149, 153, 156, 178, 187, 202, 204, 218, 227, 240, 247, 256, 262, 264, 273, 284, 294, 305, 306, 332, 521, 523, 524, 542, 544, 545, 547, 549, 550, 551, 555, 556, 559, 560, 562, 573, 577, 582, 585, 588, 592, 593, 594, 595], "wise": [137, 153, 310, 311, 315, 492, 542, 556, 585, 592, 593, 595, 597], "minim": [137, 153, 310, 547, 550, 559, 560, 573, 577, 585, 588, 595], "round": [137, 153, 588], "scale_c": [137, 153], "shift": [137, 153, 198, 237, 581, 592, 594], "notic": [137, 153, 203, 558, 590], "can": [137, 144, 146, 153, 154, 161, 162, 164, 173, 174, 184, 187, 202, 203, 205, 224, 227, 240, 252, 254, 256, 279, 281, 283, 290, 292, 294, 295, 305, 306, 327, 443, 492, 523, 524, 526, 527, 542, 543, 544, 545, 547, 548, 549, 551, 553, 556, 557, 559, 560, 561, 562, 563, 564, 565, 567, 568, 569, 571, 573, 574, 575, 577, 578, 580, 581, 582, 583, 584, 585, 587, 588, 589, 591, 592, 593, 594, 595, 597], "first": [137, 153, 167, 185, 225, 252, 290, 311, 322, 401, 523, 524, 527, 542, 545, 551, 557, 561, 565, 574, 575, 578, 581, 587, 588, 589, 591, 593, 595, 597], "empir": [137, 153], "solut": [137, 153, 526, 527, 552, 565, 569, 574, 586, 592, 595], "min": [137, 153, 337, 542, 585, 588, 594, 595], "graphtransform": 138, "graphtransformbas": 138, "input_pb": [138, 140, 141], "log": [140, 334, 340, 443, 483, 484, 523, 542, 571, 591, 593, 595], "insertlog": 140, "node_name_list": 140, "show_nam": 140, "show_op": 140, "first_n": 140, "summar": [140, 547], "1024": [140, 187, 227, 566], "dump_fp32": 140, "rerang": 141, "rerangequantizedconcat": 141, "rerange_quant": 141, "version1_lt_version2": [142, 337], "version1": [142, 337], "version2": [142, 337], "version1_gt_version2": [142, 337], "greater": [142, 337], "version1_eq_version2": [142, 337], "version1_gte_version2": [142, 337], "version1_lte_version2": [142, 337], "disable_random": 142, "seed": [142, 264, 337, 560, 597], "disabl": [142, 480, 509, 521, 580, 589], "read_graph": 142, "in_graph": 142, "in_graph_is_binari": 142, "write_graph": 142, "out_graph_def": 142, "out_graph_fil": 142, "write": [142, 194, 234, 337, 549, 555, 560, 563, 593], "is_ckpt_format": 142, "model_path": [142, 422, 492], "ckpt": [142, 295, 303, 306, 598], "folder": [142, 187, 192, 227, 232, 295, 306, 336, 545, 568, 573, 577, 593], "is_saved_model_format": 142, "saved_model": [142, 258, 413, 420, 430], "get_estimator_graph": 142, "estim": [142, 256, 294, 303, 595], "input_fn": [142, 303], "get_tensor_by_nam": 142, "try_cnt": 142, "3": [142, 187, 202, 227, 240, 252, 290, 325, 523, 524, 526, 542, 544, 545, 547, 549, 551, 553, 554, 557, 559, 560, 561, 563, 567, 571, 573, 577, 582, 585, 587, 591, 594, 595, 598], "consid": [142, 256, 294, 521, 547, 581, 595], "import": [142, 154, 170, 258, 295, 305, 306, 325, 327, 337, 523, 524, 526, 543, 544, 545, 547, 548, 549, 551, 554, 559, 560, 561, 562, 563, 567, 569, 582, 583, 585, 587, 588, 589, 590, 591, 593, 594, 595], "scope": [142, 560], "mai": [142, 265, 266, 268, 269, 270, 325, 521, 522, 542, 544, 552, 558, 561, 573, 577, 584, 586, 588, 595], "more": [142, 146, 152, 161, 202, 240, 279, 524, 525, 526, 542, 545, 547, 549, 554, 556, 557, 559, 560, 561, 563, 571, 575, 578, 582, 583, 585, 589, 592, 595, 596, 598], "onc": [142, 146, 164, 209, 283, 307, 309, 542, 544, 580, 585, 586, 595, 598], "both": [142, 521, 524, 527, 548, 557, 560, 564, 585, 587, 588, 595], "compat": [142, 303, 549, 562, 575, 578, 580, 590], "suffix": 142, "time": [142, 170, 202, 240, 256, 294, 305, 310, 337, 478, 549, 552, 560, 568, 570, 573, 577, 580, 581, 582, 585, 586, 588, 591, 593, 594, 595], "got": [142, 552, 593], "iterator_sess_run": 142, "sess": [142, 303], "iter_op": 142, "feed_dict": [142, 184, 224], "output_tensor": [142, 303], "measur": [142, 203, 295, 332, 524, 527, 543, 547, 559, 560, 593, 595], "integr": [142, 156, 204, 527, 542, 560, 581], "makeiter": 142, "feed": [142, 184, 224, 547, 585], "end": [142, 162, 185, 201, 202, 225, 239, 240, 281, 307, 309, 527, 547, 548, 553, 557, 560, 574, 582, 585, 593, 594, 595], "predict": [142, 202, 207, 240, 249, 253, 254, 256, 287, 291, 292, 294, 524, 547, 559, 571, 593, 594], "pred": [142, 256, 294, 559], "collate_tf_pr": 142, "collat": [142, 148], "tbe": 142, "get_input_output_node_nam": 142, "fix_ref_type_of_graph_def": 142, "fix": [142, 162, 185, 225, 281, 522, 545, 567, 585, 595], "ref": 142, "tool": [142, 244, 337, 526, 527, 560, 573, 577, 585, 586, 588], "strip_unused_lib": 142, "py": [142, 144, 162, 250, 252, 253, 254, 281, 288, 290, 291, 292, 325, 508, 523, 527, 542, 549, 557, 560, 565, 567, 568, 569, 575, 578, 588, 590, 593], "offici": [142, 249, 253, 254, 287, 291, 292, 521, 542, 559], "r1": 142, "15": [142, 553, 598], "branch": [142, 542], "get_graph_def": 142, "auto_input_output": 142, "get_model_input_shap": 142, "inout": 142, "get_tensor_val_from_graph_nod": 142, "graph_node_name_map": 142, "val": [142, 165, 187, 190, 227, 230, 280, 560], "tensor_v": 142, "int8_node_name_revers": 142, "revers": [142, 542], "tf_diagnosis_help": 142, "fp32_model": [142, 144, 148, 245, 337, 527], "quan_model": 142, "save_path": [142, 244, 245, 527, 562], "diagnosi": [142, 286, 381, 390, 413, 473, 502, 508, 560], "generate_feed_dict": 142, "input_tensor": [142, 303], "torch": [143, 144, 145, 147, 148, 152, 161, 166, 170, 214, 245, 295, 306, 336, 523, 526, 528, 547, 549, 551, 560, 561, 562, 563, 568, 571, 588, 593], "bf16modulewrapp": 143, "bf16modul": 143, "mix": [143, 295, 308, 322, 449, 450, 451, 498, 526, 527, 532, 556, 563, 569, 570, 571, 596], "precis": [143, 170, 173, 174, 247, 254, 256, 257, 284, 292, 294, 295, 305, 306, 308, 311, 322, 365, 379, 380, 389, 413, 447, 449, 450, 451, 474, 498, 526, 527, 532, 542, 543, 548, 549, 553, 556, 563, 569, 570, 571, 586, 587, 588, 595, 596], "mixed_precision_model": 143, "bf16_symbolic_trac": 143, "fx_sub_module_list": 143, "trace": [143, 144, 147, 148, 245, 306, 313, 523, 570, 595], "_description_": 143, "hessian": [144, 313, 595], "awar": [144, 155, 170, 212, 258, 279, 313, 327, 527, 548, 549, 551, 556, 561, 580, 583, 595], "node_collector": 144, "hook": [144, 155, 211, 212, 271, 276, 330, 547, 548, 560, 585, 593], "record": [144, 148, 156, 185, 186, 187, 193, 204, 211, 225, 226, 227, 233, 545, 591, 593, 595], "hessiantrac": 144, "q_model": [144, 258, 306, 523, 526, 544, 545, 549, 551, 554, 555, 559, 560, 562, 588, 589], "criterion": [144, 155, 157, 158, 159, 161, 162, 170, 206, 209, 248, 286, 460, 500, 547, 548, 551, 560, 585, 588, 595, 597], "pleas": [144, 146, 152, 159, 161, 185, 186, 187, 190, 225, 226, 227, 230, 279, 281, 282, 325, 523, 524, 525, 526, 527, 542, 543, 545, 548, 549, 557, 559, 561, 563, 564, 568, 571, 585, 588, 589, 590, 591, 592, 596], "refer": [144, 146, 152, 159, 161, 165, 185, 225, 249, 250, 256, 279, 281, 282, 287, 288, 294, 325, 523, 527, 543, 544, 545, 548, 549, 555, 557, 558, 559, 560, 561, 563, 568, 571, 582, 587, 590, 592, 594, 595], "yao": 144, "zhewei": 144, "et": 144, "al": 144, "pyhessian": 144, "network": [144, 159, 161, 281, 313, 524, 542, 547, 548, 551, 560, 584, 586, 588, 595], "through": [144, 173, 174, 295, 306, 526, 543, 553, 555, 556, 559, 566, 582, 583, 585, 587, 588], "len": [144, 170, 202, 240, 545, 549, 594], "2020": 144, "ieee": [144, 561], "intern": [144, 322, 476, 544, 545, 585], "confer": [144, 585], "big": 144, "dong": 144, "zhen": 144, "hawq": [144, 313, 595], "v2": [144, 313, 549, 557, 569, 590, 595, 598], "advanc": [144, 501, 521, 526, 532, 588, 597], "system": [144, 154, 203, 337, 480, 507, 508, 543, 566, 585], "33": [144, 598], "18518": 144, "18529": 144, "http": [144, 159, 161, 185, 187, 225, 227, 249, 250, 252, 253, 254, 279, 281, 282, 287, 288, 290, 291, 292, 523, 526, 542, 545, 554, 557, 558, 560, 569, 575, 578, 590], "github": [144, 161, 185, 225, 249, 250, 253, 254, 279, 282, 287, 288, 291, 292, 436, 479, 522, 526, 542, 545, 550, 554, 557, 558, 560, 569, 575, 578, 590], "com": [144, 161, 185, 225, 249, 250, 253, 254, 279, 282, 287, 288, 291, 292, 521, 526, 542, 545, 554, 557, 558, 560, 563, 569, 590, 591, 598], "openvinotoolkit": 144, "nncf": 144, "blob": [144, 161, 249, 250, 253, 254, 279, 287, 288, 291, 292, 560, 569], "develop": [144, 305, 492, 522, 523, 557, 560, 561, 563, 569, 580, 586, 589, 591], "hessian_trac": 144, "compare_weight": 144, "float_dict": 144, "ani": [144, 252, 254, 290, 292, 321, 325, 339, 340, 342, 344, 346, 347, 348, 349, 350, 351, 352, 354, 379, 380, 401, 403, 409, 418, 435, 438, 440, 443, 447, 451, 453, 456, 459, 462, 465, 471, 478, 480, 492, 493, 494, 495, 496, 498, 499, 500, 501, 502, 503, 504, 508, 509, 521, 522, 526, 542, 544, 549, 563, 568, 581, 591], "quantized_dict": 144, "compar": [144, 256, 294, 542, 548, 559, 588, 591, 593, 595], "being": [144, 252, 290, 409], "two": [144, 154, 161, 162, 164, 187, 192, 203, 227, 232, 252, 279, 283, 285, 290, 316, 337, 523, 524, 542, 545, 547, 549, 551, 553, 559, 560, 561, 585, 588, 589, 591, 592, 595, 597], "wt_compare_dict": 144, "float_model": 144, "state_dict": [144, 549, 593], "qmodel": 144, "compute_error": 144, "state": [144, 566, 585], "weight_dict": 144, "hawq_top": 144, "enable_act": 144, "modul": [145, 261, 267, 277, 278, 481, 489, 497, 523, 542, 544, 547, 551, 556, 559, 560, 562, 585, 587, 589, 593, 596], "torchsmoothqu": 146, "traced_model": [146, 147], "detail": [146, 152, 202, 240, 374, 376, 397, 460, 465, 479, 492, 521, 522, 526, 547, 553, 554, 555, 559, 560, 561, 563, 571, 580, 585, 590, 591, 592, 593, 595, 596, 598], "smoothquant": [146, 152, 526, 596], "accur": [146, 152], "effici": [146, 152, 524, 544, 547, 563, 583, 586, 595], "larg": [146, 152, 526, 544, 547, 560, 585, 592, 598], "languag": [146, 152, 249, 287, 521, 551, 585, 586, 592], "spiq": [146, 152], "free": [146, 152, 173, 174, 306, 521, 526, 559, 569, 574, 582, 591, 592], "could": [146, 152, 161, 173, 174, 187, 227, 285, 295, 306, 327, 521, 523, 548, 560, 583, 585, 588, 592, 596], "absorb": [146, 152], "later": [146, 152, 593], "inplac": 146, "mean": [146, 161, 198, 202, 237, 240, 254, 256, 279, 292, 294, 315, 523, 544, 549, 553, 559, 560, 566, 585, 588, 592, 594, 595, 597], "you": [146, 183, 185, 223, 225, 281, 522, 523, 542, 545, 549, 551, 557, 558, 559, 563, 565, 566, 568, 573, 577, 580, 581, 585, 588, 590, 591, 593, 596], "recov": [146, 337, 527, 548], "graphtrac": 146, "trace_and_fuse_sub_graph": 147, "is_qat": 147, "get_embedding_contigu": 148, "nn": [148, 170, 214, 245, 295, 306, 336, 523, 547, 551, 560, 562, 593], "embed": 148, "contigu": [148, 585], "is_fused_modul": 148, "_propagate_qconfig_help": 148, "detect": [148, 252, 256, 290, 294, 299, 492, 523, 542, 563, 570, 571, 585], "collate_torch_pr": 148, "fetch": [148, 151, 178, 218, 545], "collate_result": 148, "input2tupl": 148, "append_attr": 148, "fx_model": 148, "fx_white_list": 148, "append": [148, 170, 285, 310, 523, 548, 560, 583], "graphmodul": [148, 523, 589], "addit": [148, 327, 542, 547, 574, 590], "dir": [148, 185, 225, 336, 545, 552, 555], "generate_activation_observ": 148, "observ": [148, 591, 593, 595], "what": [148, 154, 162, 183, 223, 327, 521, 542], "check_cfg_and_qconfig": 148, "op_infos_from_cfg": 148, "output_tensor_ids_op_nam": 148, "paser_cfg": 148, "ops_nam": 148, "get_quantizable_ops_from_cfg": 148, "input_tensor_ids_op_nam": 148, "auto_copi": 148, "fetch_modul": 148, "op_nam": [148, 166, 170, 323, 397, 398, 560, 585, 593], "set_modul": 148, "new_modul": 148, "simple_infer": 148, "get_example_input": 148, "dataset": [148, 173, 174, 175, 177, 178, 181, 182, 183, 184, 196, 205, 215, 217, 218, 221, 222, 223, 224, 236, 248, 252, 253, 254, 256, 285, 286, 290, 291, 292, 294, 295, 306, 327, 330, 365, 379, 389, 390, 401, 413, 492, 494, 524, 526, 527, 544, 549, 554, 559, 560, 568, 585, 588, 590, 595, 597, 598], "example_inp": 148, "get_fallback_ord": 148, "confidence_batch": [148, 595], "fallback": [148, 313, 315, 316, 561, 589, 595], "requantize_cfg": 148, "fall": 148, "back": [148, 202, 208, 240, 580], "order": [148, 249, 250, 285, 287, 288, 310, 315, 322, 324, 523, 559, 585, 587, 592, 593, 595], "confid": 148, "ordered_op": 148, "get_mse_order_per_fp32": 148, "mse": [148, 170, 256, 286, 294, 314, 398, 542, 559, 587, 590], "influenc": [148, 585], "last": [148, 159, 542, 561, 563, 565, 570, 574, 588], "quant": [148, 322, 523, 560, 588], "fallback_ord": 148, "get_mse_order_per_int8": 148, "example_input": [148, 170, 245, 551], "get_torch_vers": 148, "algorithm_registri": 149, "algorithm_typ": 149, "locat": [149, 202, 240, 549, 566, 573, 577, 580, 588, 590, 594, 597], "registr": [149, 187, 194, 202, 227, 234, 240, 274], "algorithmschedul": 149, "conf": [149, 154, 155, 170, 173, 174, 203, 258, 265, 266, 268, 269, 270, 271, 276, 295, 305, 306, 307, 310, 311, 313, 315, 316, 317, 318, 322, 325, 327, 503, 523, 524, 526, 543, 547, 554, 555, 560, 561, 562, 583, 588, 589, 591, 595], "control": [149, 384, 389, 523, 542, 560, 585, 592, 595], "phase": [149, 524, 560, 585, 588, 589, 595], "fastbiascorrect": [150, 153], "fast_bias_correct": [151, 286, 588], "smooth_quant": [151, 286, 588], "weight_correct": [151, 286, 588], "5": [152, 156, 170, 189, 198, 204, 229, 237, 256, 294, 527, 542, 545, 553, 559, 560, 584, 585, 587, 588, 592, 594, 595, 597, 598], "For": [152, 161, 187, 202, 227, 240, 253, 254, 256, 279, 282, 291, 292, 294, 295, 306, 521, 523, 525, 527, 542, 547, 548, 549, 551, 553, 556, 563, 565, 566, 568, 571, 585, 589, 592, 593, 595, 597, 598], "kernel": [152, 480, 527, 584, 585, 592, 595], "futur": [152, 173, 174, 205, 556, 560, 571, 596], "weightcorrect": 153, "ep": [153, 561], "1e": [153, 597], "05": [153, 256, 294, 559, 598], "evalu": [154, 155, 161, 173, 174, 185, 203, 225, 241, 249, 252, 253, 254, 256, 258, 287, 290, 291, 292, 294, 295, 305, 306, 327, 330, 473, 481, 497, 524, 527, 544, 545, 547, 548, 555, 556, 559, 560, 561, 563, 569, 571, 574, 580, 582, 585, 588, 591, 593, 595, 597], "set_env_var": [154, 203], "env_var": [154, 203], "overwrite_exist": [154, 203], "env": [154, 203, 552], "alreadi": [154, 187, 201, 203, 227, 239, 478, 527, 542, 545, 556, 575, 578, 595], "param": [154, 175, 203, 209, 215, 256, 294, 310, 391, 492, 527, 562, 595], "set_all_env_var": [154, 203], "physic": [154, 203, 521, 543], "core": [154, 203, 542, 543, 558, 573, 577, 584, 598], "get_architectur": [154, 203], "architectur": [154, 203, 259, 262, 526, 542, 543, 547, 560, 585, 586, 596], "get_threads_per_cor": [154, 203], "thread": [154, 203, 508, 542, 544, 584], "get_thread": [154, 203], "get_physical_id": [154, 203], "socket": [154, 203, 480, 509, 584, 598], "get_core_id": [154, 203], "get_bounded_thread": [154, 203], "core_id": [154, 203], "bind": [154, 203], "user": [154, 162, 165, 173, 174, 187, 190, 194, 202, 203, 209, 214, 227, 230, 234, 240, 247, 271, 276, 282, 284, 285, 295, 305, 306, 311, 327, 337, 476, 523, 524, 527, 532, 543, 547, 548, 551, 553, 556, 559, 560, 561, 562, 563, 564, 565, 567, 568, 569, 571, 574, 580, 582, 583, 585, 586, 588, 589, 590, 592, 593, 594, 595, 599], "thei": [154, 203, 325, 521, 547, 553, 559, 560, 561, 568, 582, 585], "benchmarkconfig": [154, 170, 543, 560], "accuraci": [154, 170, 173, 174, 241, 247, 256, 271, 276, 284, 294, 295, 305, 306, 311, 325, 327, 460, 484, 495, 523, 526, 542, 544, 545, 548, 549, 550, 551, 559, 560, 561, 571, 580, 582, 583, 585, 586, 587, 590, 591, 592, 593, 597, 598], "goal": [154, 241, 247, 271, 276, 284, 295, 306, 544, 583, 588, 595], "etc": [154, 155, 201, 239, 241, 247, 254, 271, 276, 284, 292, 295, 306, 336, 547, 556, 585, 591, 595], "fit": [154, 161, 170, 295, 306, 310, 325, 327, 523, 526, 543, 544, 545, 549, 554, 555, 559, 560, 561, 562, 585, 588, 589], "b_dataload": [154, 170, 543, 560], "b_func": [154, 543], "prefer": [154, 247, 284, 295, 306, 585], "space": [154, 162, 173, 174, 247, 254, 259, 262, 263, 264, 284, 292, 295, 306, 310, 315, 322, 492, 521, 522, 524, 527, 585, 588, 597], "100": [154, 170, 187, 227, 325, 543, 545, 549, 555, 560, 587, 588, 594, 595, 597, 598], "cores_per_inst": [154, 170, 543, 560, 587], "num_of_inst": [154, 170, 543, 560, 587], "7": [154, 170, 305, 543, 552, 553, 557, 560, 585, 588, 590, 595, 598], "pb": [154, 170, 295, 303, 306, 429, 432, 443, 526, 543, 549, 554, 560, 562, 593, 598], "eval_dataload": [154, 170, 173, 174, 285, 295, 306, 307, 310, 311, 313, 315, 316, 317, 318, 327, 526, 543, 554, 555, 560, 588, 595], "compon": [155, 241, 248, 285, 286, 473, 508, 523, 549, 557, 558, 563, 580, 583, 584], "quantizationawaretrainingcallback": [155, 327], "pruningcallback": [155, 327], "distillationcallback": 155, "basecallback": 155, "design": [155, 184, 207, 212, 224, 294, 311, 524, 526, 560, 568, 571, 585, 588, 596], "mainli": [155, 164, 212, 283, 560, 585, 588], "prune": [155, 159, 160, 161, 162, 163, 164, 165, 170, 212, 213, 248, 265, 266, 268, 269, 270, 274, 276, 277, 279, 280, 281, 283, 285, 286, 327, 337, 348, 355, 374, 413, 448, 473, 481, 492, 497, 526, 549, 550, 553, 554, 556, 583, 586, 596, 597], "distil": [155, 158, 170, 204, 211, 212, 248, 286, 327, 526, 550, 554, 556, 583, 596, 597], "deriv": [155, 159, 161, 162, 163, 164, 241, 279, 281, 283], "pipelin": [155, 241, 259, 260, 285, 548, 560, 583], "knowledg": [155, 156, 170, 204, 241, 548, 550, 554, 556, 560, 562, 597], "transfer": [155, 192, 232, 241, 545, 547, 548, 560], "teacher": [155, 170, 241, 547, 548, 560, 598], "student": [155, 185, 211, 225, 241, 545, 547, 548, 598], "distillation_conf": [155, 166, 241], "_epoch_ran": [155, 241], "integ": [155, 161, 162, 241, 252, 256, 263, 279, 281, 290, 294, 325, 527, 588, 592, 595], "indic": [155, 178, 183, 185, 218, 223, 225, 241, 252, 263, 290, 523, 542, 552, 593], "how": [155, 159, 161, 162, 202, 240, 241, 279, 522, 523, 525, 527, 542, 544, 545, 547, 548, 549, 555, 560, 574, 575, 578, 579, 580, 585, 588, 592, 594, 595, 596, 597], "much": [155, 159, 202, 240, 241, 547, 574, 585, 592, 594], "epoch": [155, 162, 241, 281, 327, 547, 548, 549, 560, 583, 585, 597], "ran": [155, 241], "eval_frequ": [155, 241], "frequenc": [155, 162, 241, 281, 560, 584, 585, 597], "term": [155, 162, 163, 241, 522, 547, 558, 559, 582, 583, 595], "best_scor": [155, 241], "best": [155, 202, 240, 241, 247, 284, 306, 315, 521, 524, 557, 563, 569, 580, 582, 588, 594, 595], "metric": [155, 173, 174, 206, 241, 247, 248, 263, 271, 276, 284, 285, 286, 295, 306, 327, 330, 365, 389, 413, 473, 481, 489, 492, 495, 524, 527, 542, 544, 545, 549, 560, 561, 588, 591, 593, 595, 596, 597, 598], "best_model": [155, 241], "found": [155, 241, 476, 492, 509, 526, 542, 547, 561, 568, 595], "critet": [156, 204], "includ": [156, 159, 161, 163, 185, 187, 194, 202, 204, 225, 227, 234, 240, 247, 257, 279, 284, 295, 306, 325, 521, 522, 527, 542, 545, 557, 558, 559, 560, 561, 563, 566, 569, 574, 585, 588, 589, 593, 595], "tensorflowknowledgedistillationloss": [156, 204], "pytorchknowledgedistillationloss": [156, 204, 560], "pytorchintermediatelayersknowledgedistillationloss": [156, 204], "tensorflowcriterion": [156, 204], "pytorchcriterion": [156, 204], "criterion_registri": [156, 204], "criterion_typ": [156, 204], "registry_criterion": [156, 204], "knowledgedistillationframework": [156, 204], "student_model": [156, 204, 560], "teacher_model": [156, 170, 204, 547, 548, 560], "knowledgedistillationloss": [156, 204, 560, 597], "temperatur": [156, 170, 204, 560, 597], "loss_typ": [156, 170, 204, 560, 597], "ce": [156, 170, 204, 560, 597], "loss_weight": [156, 170, 204, 560, 597], "pytorchknowledgedistillationlosswrapp": [156, 204], "param_dict": [156, 204, 209], "tensorflowknowledgedistillationlosswrapp": [156, 204], "tensorflowknowledgedistillationlossextern": [156, 204], "intermediatelayersknowledgedistillationloss": [156, 204, 500], "layer_map": [156, 170, 204, 547], "add_origin_loss": [156, 170, 204], "pytorch": [156, 161, 184, 185, 187, 190, 194, 202, 204, 209, 211, 224, 225, 227, 230, 234, 240, 245, 246, 247, 256, 257, 277, 279, 282, 284, 286, 294, 295, 304, 306, 316, 331, 337, 340, 413, 420, 443, 453, 473, 523, 524, 526, 527, 544, 547, 548, 550, 551, 553, 556, 557, 560, 562, 563, 565, 568, 569, 570, 571, 580, 585, 586, 587, 590, 592, 595, 597], "loss": [156, 170, 204, 247, 256, 271, 276, 284, 294, 306, 327, 547, 548, 549, 550, 559, 560, 561, 571, 583, 585, 588, 595, 597], "pytorchintermediatelayersknowledgedistillationlosswrapp": [156, 204], "selfknowledgedistillationloss": [156, 204, 500], "selfknowledg": [156, 204], "pytorchselfknowledgedistillationloss": [156, 204], "pytorchselfknowledgedistillationlosswrapp": [156, 204], "pruner": [158, 248, 265, 266, 267, 268, 269, 271, 276, 277, 279, 282, 286, 503, 560, 585, 597], "criteria": [158, 160, 247, 271, 276, 279, 281, 284, 306, 523, 580], "reg": [158, 160, 162], "schedul": [158, 160, 162, 163, 248, 277, 281, 286, 560, 583], "callback": [158, 271, 276, 327, 330, 508, 523, 560, 583, 585, 588], "register_criterion": 159, "registri": [159, 161, 162, 163, 164, 279, 281, 283, 524], "get_criterion": 159, "pruningcriterion": 159, "about": [159, 479, 480, 486, 521, 542, 544, 560, 589, 595, 596, 598], "module_nam": [159, 162, 163, 281, 337, 492], "store": [159, 162, 163, 187, 227, 274, 281, 555], "score": [159, 161, 162, 249, 250, 252, 253, 254, 256, 281, 287, 288, 290, 291, 292, 294, 313, 330, 523, 559, 582, 585, 591, 595], "magnitudecriterion": 159, "magnitud": [159, 248, 256, 267, 286, 294, 556, 585, 592], "criterion_class": 159, "determin": [159, 161, 162, 332, 521, 523, 585, 588], "gradientcriterion": 159, "gradient": [159, 265, 556, 560, 585, 598], "absolut": [159, 170, 256, 294, 559, 560, 584, 585, 588, 595], "snipcriterion": 159, "snip": [159, 281, 556, 585, 598], "product": [159, 556, 561, 563, 564, 580, 584, 586, 588, 591, 595], "singl": [159, 164, 178, 185, 202, 218, 225, 240, 252, 281, 283, 290, 373, 390, 409, 523, 545, 557, 585], "shot": [159, 164, 212, 281, 283, 524, 556, 560, 585, 586], "sensit": [159, 265, 281, 556, 585], "arxiv": [159, 281, 585], "org": [159, 252, 281, 290, 522, 523, 542, 557, 575, 578], "1810": [159, 281], "02340": [159, 281], "snipmomentumcriterion": 159, "snip_momentum": [159, 170, 560, 585], "momentum": [159, 281, 556, 560, 585, 597], "mechan": [159, 591, 596], "preserv": 159, "step": [159, 161, 162, 164, 279, 281, 283, 327, 542, 547, 548, 549, 560, 575, 578, 580, 583, 585, 587, 589, 591, 593, 595], "beta": 159, "register_pattern": [161, 279], "sure": [161, 162, 164, 279, 281, 283, 542, 543], "get_pattern": [161, 279], "assertionerror": [161, 162, 165, 279, 280, 281, 295], "been": [161, 162, 249, 279, 281, 287, 522, 524, 542, 547, 560, 561, 580], "basepattern": [161, 163], "basic": [161, 170, 201, 239, 259, 279, 286, 314, 318, 321, 327, 556, 557, 560, 587, 591], "unit": [161, 279, 492, 522], "e": [161, 509, 521, 547, 550, 554, 563, 568, 569, 573, 577, 585, 595], "4x1": [161, 170, 275, 560, 585, 598], "is_glob": [161, 279], "take": [161, 173, 174, 178, 202, 207, 218, 240, 279, 294, 295, 306, 310, 327, 521, 523, 524, 542, 544, 547, 553, 560, 580, 585, 588, 589, 594, 595, 597], "local": [161, 279, 337, 352, 384, 389, 402, 422, 542, 573, 577, 585, 591], "contrast": [161, 279, 594], "keep_mask_lay": 161, "invalid_lay": 161, "max_sparsity_ratio_per_op": [161, 162, 166, 170, 560, 585], "sparsiti": [161, 162, 164, 165, 281, 283, 337, 526, 545, 556, 560, 596, 598], "reach": [161, 164, 283, 522, 526, 544, 585, 595], "min_sparsity_ratio_per_op": [161, 166, 170, 560, 585], "minimum": [161, 560, 571, 585, 595], "target_spars": [161, 166, 170, 560, 585, 587, 597], "patternnxm": [161, 279], "nxm": [161, 162, 275, 279, 585], "kept": [161, 279], "block_siz": [161, 279], "height": [161, 198, 202, 237, 240, 279, 549, 585, 594, 597], "width": [161, 198, 202, 237, 240, 279, 549, 585, 588, 594, 597], "vertic": [161, 202, 240, 279, 594], "becaus": [161, 202, 240, 279, 523, 585, 588, 592, 594, 595], "hidden": [161, 279, 492, 527, 585], "patternninm": [161, 279], "n": [161, 186, 202, 226, 240, 250, 279, 288, 325, 480, 545, 547, 585, 588, 594], "out": [161, 185, 186, 187, 225, 226, 227, 247, 279, 284, 306, 522, 523, 526, 545, 563, 568, 573, 574, 575, 577, 578, 580, 585, 587, 588], "continu": [161, 252, 279, 290, 524, 560, 581, 585], "master": [161, 249, 250, 253, 254, 279, 282, 287, 288, 291, 292, 560, 595], "doc": [161, 279, 321, 322, 325, 337, 559, 560, 575, 578], "md": [161, 279, 549, 588], "element": [161, 165, 183, 223, 252, 279, 290, 337, 545, 556, 559, 585], "register_prun": [162, 281], "parse_valid_pruner_typ": 162, "get_prun": [162, 281], "cuurent": [162, 281], "baseprun": 162, "part": [162, 279, 281, 523, 557, 561, 575, 578, 585, 596], "current_sparsity_ratio": [162, 281], "global_step": [162, 281], "total": [162, 202, 240, 256, 281, 294, 545, 585, 594], "start_step": [162, 166, 170, 281, 560, 585, 587], "trigger": [162, 281, 522], "end_step": [162, 166, 170, 281, 560, 585, 587], "pruning_frequ": [162, 166, 170, 560, 585], "target_sparsity_ratio": [162, 281], "show": [162, 337, 521, 542, 547, 549, 560, 566, 581, 585, 595, 596], "final": [162, 281, 560, 566, 582, 585, 588, 590, 595], "basicprun": 162, "arrang": [162, 186, 187, 190, 226, 227, 230, 545, 585], "proce": 162, "regul": 162, "patternlockprun": [162, 269, 281], "while": [162, 281, 310, 527, 542, 545, 550, 556, 561, 563, 568, 580, 587, 588], "spars": [162, 281, 545, 586], "structur": [162, 281, 323, 417, 556, 579, 581, 585, 588, 593, 596, 598], "parent": [162, 164, 275, 281, 283, 593], "progressiveprun": 162, "interpol": [162, 202, 240, 559, 585, 594], "fine": [162, 185, 225, 545, 566, 585, 586, 588], "grain": [162, 586, 595], "improv": [162, 522, 526, 560, 563, 580, 581, 585, 586, 588, 589, 595, 598], "interv": [162, 585], "regular": [163, 249, 280, 287], "register_reg": 163, "regulariz": 163, "get_reg_typ": 163, "obtain": [163, 165, 280, 523, 551, 585, 591, 595], "get_reg": 163, "basereg": 163, "grouplasso": 163, "coeff": 163, "group": [163, 266, 409, 556, 585, 593, 594, 595, 598], "lasso": [163, 266, 556, 585], "select": [163, 185, 225, 523, 524, 542, 556, 557, 580, 585, 588, 593, 595], "reg_term": 163, "coeffient": 163, "relat": [163, 241, 252, 271, 276, 279, 290, 330, 420, 423, 425, 430, 510, 513, 514, 515, 518, 563, 585, 597], "register_schedul": [164, 283], "get_schedul": [164, 283], "pruningschedul": 164, "dens": [164, 283, 585, 598], "gradual": [164, 283, 585], "oneshotschedul": [164, 283], "iterativeschedul": [164, 283], "get_sparsity_ratio": 165, "elementwise_over_matmul_gemm_conv": 165, "elementwise_over_al": 165, "blockwise_over_matmul_gemm_conv": 165, "check_config": [165, 280], "prune_config": [165, 280], "everyth": [165, 280, 568], "reset_none_to_default": 165, "undefin": [165, 280], "update_param": 165, "process_weight_config": 165, "global_config": [165, 265, 266, 268, 269, 270], "local_config": [165, 170, 265, 266, 268, 269, 270], "default_config": 165, "pruners_info": 165, "process_yaml_config": 165, "check_key_valid": 165, "template_config": 165, "user_config": 165, "process_and_check_config": [165, 280], "process_config": [165, 280], "parse_to_prun": [165, 280], "keep": [165, 280, 311, 523, 527, 579, 580, 590, 592], "generate_pruner_config": 165, "dotdict": [165, 166, 305], "prunerv2": 166, "pruning_typ": [166, 170, 560, 585], "pruning_scop": [166, 170, 560, 585], "sparsity_decay_typ": [166, 170, 560, 585], "pruning_op_typ": [166, 170, 560, 585], "reg_typ": 166, "criterion_reduce_typ": 166, "resume_from_pruned_checkpoint": 166, "similiar": [166, 170], "cfg_fname": 166, "parser": [166, 286, 350, 355, 473, 481, 511], "quantization_conf": 166, "pruning_conf": 166, "graph_optimization_conf": [166, 247], "mixedprecision_conf": 166, "benchmark_conf": 166, "nasconfig": [166, 260, 262, 524], "approach": [166, 170, 259, 260, 262, 500, 523, 524, 544, 545, 547, 556, 560, 568, 580, 586, 587, 595, 597], "search_spac": [166, 259, 262, 263, 264], "search_algorithm": [166, 248, 261, 286, 524], "na": [166, 248, 286, 299, 556], "search": [166, 173, 174, 247, 249, 259, 262, 263, 264, 284, 287, 306, 310, 379, 380, 526, 542, 554, 556, 559, 563, 564, 574, 586, 593, 595, 596], "procedur": [166, 524], "deep_get": [167, 305], "dot": [167, 492, 561, 588], "nest": 167, "eg": [167, 187, 227, 545, 587], "person": [167, 521, 586], "john": 167, "deep": [167, 526, 527, 544, 556, 557, 560, 561, 563, 565, 568, 569, 571, 574, 580, 586, 588, 595, 596, 598], "deep_set": [167, 305], "sex": [167, 521], "male": 167, "instead": [167, 184, 224, 337, 566, 568, 571, 585], "notat": 167, "check_valu": 170, "supported_typ": 170, "supported_valu": 170, "_datatyp": 170, "random_se": [170, 310, 327, 560, 597], "1978": 170, "workspac": [170, 327, 336, 337, 418, 491, 502, 562], "default_workspac": 170, "resume_from": [170, 337], "tensorboard": [170, 327, 330, 337, 527, 560], "warmup": [170, 543, 560, 587], "inter_num_of_thread": [170, 560, 587], "intra_num_of_thread": [170, 560, 587], "benchmark": [170, 205, 248, 285, 286, 305, 337, 358, 365, 378, 389, 390, 413, 473, 474, 484, 490, 507, 512, 526, 532, 562, 563, 567, 571, 574, 580, 595, 596, 597, 598], "accuracycriterion": [170, 460, 560, 595], "higher_is_bett": [170, 559, 595, 597], "rel": [170, 305, 560, 587, 595, 597, 598], "tolerable_loss": [170, 560, 595], "01": [170, 560, 584, 587, 595, 597, 598], "accuracy_criterion": [170, 305, 560, 582, 587, 595, 597], "tuningcriterion": [170, 560, 582, 591, 595], "strategy_kwarg": [170, 591, 595], "timeout": [170, 560, 587, 595, 597], "max_trial": [170, 560, 595], "tuning_criterion": [170, 560, 582, 591, 595], "earli": [170, 560, 588, 595, 597], "stop": [170, 560, 595, 596, 597], "field": [170, 187, 227, 252, 290, 523, 527, 542, 549, 560, 591, 595, 597], "exit": [170, 307, 309, 542, 560, 561, 597], "see": [170, 202, 240, 249, 287, 521, 523, 525, 542, 558, 560, 573, 574, 577, 580, 581, 593, 595, 598], "concret": [170, 595], "posttrainingquantconfig": [170, 306, 523, 526, 544, 554, 560, 562, 588, 589, 591, 595], "auto": [170, 286, 308, 314, 337, 523, 563, 566, 568, 570, 571, 585, 588], "quant_format": [170, 245, 551], "calibration_sampling_s": [170, 560], "op_type_dict": [170, 587, 588, 595], "op_name_dict": [170, 560, 588, 595], "excluded_precis": [170, 589], "quant_level": [170, 595], "use_distributed_tun": [170, 595], "level": [170, 311, 325, 334, 483, 521, 595], "quantizationawaretrainingconfig": [170, 306, 327, 523, 548, 560, 588, 589, 595], "copi": [170, 280, 337], "deepcopi": 170, "model_origin": [170, 306, 589], "qat_op_name_dict": 170, "compression_manag": [170, 327, 523, 547, 548, 560, 583, 585, 588], "prepare_compress": [170, 327, 523, 547, 548, 560, 583, 585, 588], "weightpruningconfig": [170, 214, 560, 583, 585], "pruning_config": [170, 560, 585], "9": [170, 523, 557, 560, 585, 587, 595, 597], "98": [170, 560, 585, 587, 598], "exp": [170, 560, 585], "update_config": 170, "10": [170, 187, 227, 310, 526, 542, 543, 545, 557, 560, 585, 587, 594, 595, 598], "knowledgedistillationlossconfig": [170, 547, 548, 560, 583], "distillationconfig": [170, 327, 547, 548, 560, 583], "comb": [170, 548], "distillation_criterion": [170, 548, 560, 583], "d_conf": [170, 548, 560, 583], "q_conf": [170, 548], "intermediatelayersknowledgedistillationlossconfig": [170, 547], "selfknowledgedistillationlossconfig": [170, 547, 560], "distil_loss": [170, 560], "crossentropyloss": [170, 204, 547, 560], "sgd": [170, 209, 547, 560, 587, 597], "lr": [170, 547, 549, 560], "0001": [170, 547, 560, 587], "learning_r": [170, 560, 587, 597], "callabl": [170, 254, 292, 327, 488, 492, 508, 509], "featur": [170, 185, 186, 198, 202, 225, 226, 237, 240, 522, 526, 543, 544, 546, 547, 560, 561, 562, 563, 567, 568, 571, 580, 585, 586, 590, 594], "altern": [170, 592], "mixedprecisionconfig": [170, 295, 325, 560, 561], "mixedprecis": [170, 257, 295, 450, 498, 560], "mix_precis": [170, 286, 325, 560, 561], "converted_model": [170, 295, 560, 561], "exportconfig": 170, "dynamic_ax": [170, 245, 551], "onnxqlinear2qdqconfig": 170, "onnxqlinear2qdq": 170, "torch2onnxconfig": [170, 551], "qdq_op_fp32_bia": [170, 245, 551], "torch2onnx": [170, 242, 248, 286], "tf2onnxconfig": 170, "tf2onnx": [170, 242, 248, 286], "multipl": [171, 172, 176, 177, 185, 186, 188, 189, 190, 191, 192, 196, 199, 202, 209, 216, 217, 219, 225, 226, 228, 229, 230, 231, 232, 236, 238, 240, 257, 295, 296, 297, 299, 305, 543, 545, 551, 560, 583, 585, 591, 595], "sigopt": [171, 172, 286, 586], "tpe": [171, 172, 286], "sigopttunestrategi": 173, "q_dataload": [173, 174, 307, 310, 311, 313, 315, 316, 317, 318, 555, 595], "q_func": [173, 174, 307, 310, 311, 313, 315, 316, 317, 318, 527, 560, 595], "eval_func": [173, 174, 285, 295, 306, 307, 310, 311, 313, 315, 316, 317, 318, 325, 327, 523, 544, 545, 547, 548, 549, 560, 588, 589, 595, 597], "q_hook": [173, 174, 307, 310, 311, 313, 315, 316, 317, 318], "hpo": 173, "mandatori": [173, 174, 306, 560, 597], "yield": [173, 174, 183, 205, 223, 295, 306, 310, 325, 327, 544, 588, 595], "label": [173, 174, 185, 187, 188, 189, 190, 193, 198, 202, 207, 225, 227, 228, 229, 230, 233, 237, 240, 249, 251, 256, 287, 289, 294, 295, 306, 327, 409, 523, 544, 545, 559, 560, 588, 594], "_": [173, 174, 306, 523, 524, 527, 542, 547, 549, 553, 559, 560, 561, 562, 563, 569, 573, 575, 577, 578, 582, 585, 588, 590, 591, 592, 593, 595, 597], "taken": [173, 174, 295, 306, 327, 588], "reserv": [173, 174], "abl": [173, 174, 295, 306, 327, 571, 580, 585, 588], "tuner": [173, 174, 247, 284, 295, 306, 327, 588], "higher": [173, 174, 263, 295, 306, 327, 523, 547, 551, 559, 585, 588, 591], "scalar": [173, 174, 295, 306, 327, 559, 588], "pseudo": [173, 174, 306, 327, 593], "code": [173, 174, 203, 258, 282, 285, 306, 327, 402, 420, 523, 526, 527, 542, 544, 545, 547, 548, 549, 555, 556, 558, 559, 563, 565, 567, 568, 569, 571, 574, 580, 582, 583, 585, 586, 587, 588, 591, 593, 594], "someth": [173, 174, 187, 227, 306, 327], "resum": [173, 174, 307, 313, 316, 317, 318, 327], "fefin": 174, "tpetunestrategi": 174, "basedatalod": [175, 215], "basedataload": [175, 180, 182, 215, 220, 222], "batch_siz": [175, 177, 181, 183, 184, 185, 186, 205, 215, 217, 221, 223, 224, 225, 226, 245, 524, 544, 545, 549, 551, 555, 560, 563, 588], "last_batch": [175, 177, 181, 184, 205, 215, 217, 221, 224], "rollov": [175, 177, 181, 184, 205, 215, 217, 221, 224], "collate_fn": [175, 177, 178, 181, 184, 205, 215, 217, 218, 221, 224, 545], "sampler": [175, 177, 179, 181, 184, 205, 215, 217, 219, 221, 224, 236, 248, 321, 549], "batch_sampl": [175, 177, 181, 184, 205, 215, 217, 221, 224], "num_work": [175, 177, 181, 184, 205, 215, 217, 221, 224, 560, 588], "pin_memori": [175, 177, 181, 184, 205, 215, 217, 221, 224], "shuffl": [175, 177, 181, 184, 205, 215, 217, 221, 224, 560, 588], "_generate_dataload": [175, 215], "dynam": [175, 215, 245, 322, 345, 527, 544, 547, 556, 560, 563, 568, 569, 570, 571, 574, 580, 586, 595, 598], "default_col": [177, 217], "outer": [177, 217], "defaultdataload": [177, 184, 217, 224], "definit": [178, 183, 218, 223, 406, 419, 428, 477, 508], "style": [178, 192, 218, 232, 325, 522, 545, 555], "drop_last": [178, 183, 218, 223], "iterablefetch": [178, 218], "indexfetch": [178, 218], "base_dataload": [179, 219, 236, 248], "default_dataload": [179, 219, 236, 248], "fetcher": [179, 219, 236, 248], "mxnet_dataload": [179, 219, 236, 248], "onnxrt_dataload": [179, 219, 236, 248], "pytorch_dataload": [179, 219, 236, 248], "tensorflow_dataload": [179, 219, 236, 248], "mxnetdataload": [180, 220], "onnxruntim": [181, 187, 194, 221, 227, 234, 257, 295, 396, 400, 527, 554, 556, 557, 561, 587], "onnxrtbertdataload": [181, 221], "bert": [181, 184, 185, 202, 221, 224, 225, 240, 526, 545, 547, 559, 568, 594, 598], "varient": [181, 221], "onnxrtdataload": [181, 221], "pytorchdataload": [182, 222], "data_sourc": [183, 223, 330], "__iter__": [183, 187, 223, 227, 544, 545, 560], "matter": [183, 223, 589], "iterablesampl": [183, 223], "squential": [183, 223], "your": [183, 185, 223, 225, 522, 542, 545, 549, 551, 557, 558, 560, 563, 566, 567, 568, 573, 574, 575, 577, 578, 580, 585, 591, 593, 595], "clear": [183, 223, 527, 553, 559, 560], "iterabledataset": [183, 187, 223, 227], "try": [183, 223, 523, 551, 585, 588, 595], "indexdataset": [183, 223], "__getitem__": [183, 187, 202, 223, 227, 240, 545, 560], "__len__": [183, 187, 223, 227, 545], "inter": [183, 187, 223, 227], "retriev": [183, 223, 486], "act": [183, 223, 521], "sequentialsampl": [183, 223], "sequenti": [183, 223, 285, 307, 309, 595], "batchsampl": [183, 223], "tfdatadataload": [184, 224], "tensorflow1": [184, 224], "coupl": [184, 224], "also": [184, 187, 202, 224, 227, 240, 249, 287, 305, 306, 522, 524, 526, 527, 542, 544, 550, 554, 556, 559, 560, 563, 568, 573, 574, 577, 580, 581, 582, 585, 586, 588, 589, 592, 595], "satisfi": [184, 224, 557], "usag": [184, 224, 252, 258, 285, 290, 325, 492, 542, 545, 549, 550, 559, 563, 571, 582, 587, 594], "tf1": [184, 224, 562], "although": [184, 224, 591], "tensorflowbertdataload": [184, 224], "tensorflowmodelzoobertdataload": [184, 224], "zoo": [184, 202, 224, 240, 526, 550, 554, 598], "tensorflowdataload": [184, 224], "directli": [184, 224, 252, 256, 280, 290, 294, 551, 559, 560, 567, 585, 587, 588, 593], "pytorchbertdataset": [185, 225], "model_typ": [185, 225, 422, 545], "construct": [185, 188, 189, 192, 200, 205, 207, 208, 210, 225, 228, 229, 232, 294, 299, 303, 330, 521, 545, 549, 585, 595], "tensordataset": [185, 225, 545], "repo": [185, 225, 520, 545, 550, 573, 575, 577, 578, 599], "link": [185, 225, 542, 545, 573, 577, 580], "huggingfac": [185, 225, 333, 545, 550, 554, 568, 569, 570, 571], "easi": [185, 225, 284, 542, 544, 551, 560, 586, 588, 591], "load": [185, 201, 202, 225, 239, 240, 295, 303, 306, 336, 337, 465, 492, 544, 573, 577, 581, 587, 588], "classifi": [185, 225, 256, 294, 545, 547, 585], "squad": [185, 202, 225, 240, 253, 254, 256, 291, 292, 294, 545, 559, 585, 594, 598], "distilbert": [185, 225, 526, 545, 586, 598], "xlnet": [185, 225, 545], "xlm": [185, 225, 545, 598], "101": [185, 225, 256, 294, 559, 598], "2043": [185, 225], "2001": [185, 225], "preprocess": [185, 202, 225, 240, 330, 549, 594], "onnxrtbertdataset": [185, 225], "data_dir": [185, 225, 545], "model_name_or_path": [185, 225, 545, 560, 568, 569], "max_seq_length": [185, 202, 225, 240, 545, 594], "128": [185, 188, 189, 202, 225, 228, 229, 240, 545, 560, 588, 594], "do_lower_cas": [185, 201, 202, 225, 239, 240, 545, 594], "mrpc": [185, 225, 256, 294, 545, 559, 568, 585, 595, 598], "dynamic_length": [185, 225, 545], "shortcut": [185, 225, 545], "length": [185, 202, 225, 240, 252, 290, 526, 545, 559, 586, 588, 594], "token": [185, 196, 199, 202, 225, 236, 238, 240, 248, 249, 250, 286, 287, 288, 333, 509, 542, 545, 559, 560, 591, 592, 594, 595], "longer": [185, 202, 225, 240, 545, 594], "truncat": [185, 202, 225, 240, 545, 594], "shorter": [185, 202, 225, 240, 545, 594], "lowercas": [185, 225, 545], "choic": [185, 225, 527, 542, 545, 559], "qqp": [185, 225, 545, 559, 598], "qnli": [185, 225, 545, 559, 598], "rte": [185, 225, 545, 559, 598], "st": [185, 225, 545, 559], "cola": [185, 225, 545, 559, 598], "mnli": [185, 225, 545, 559, 598], "wnli": [185, 225, 545, 559, 598], "mobilebert": [185, 225, 545, 547, 598], "roberta": [185, 225, 545, 598], "uncas": [185, 202, 225, 240, 545, 594, 598], "load_and_cache_exampl": [185, 225], "cach": [185, 225, 422, 509, 552, 588], "convert_examples_to_featur": [185, 202, 225, 240], "max_length": [185, 225], "label_list": [185, 225, 256, 294], "output_mod": [185, 225], "classif": [185, 202, 225, 240, 256, 282, 294, 547, 551, 554, 559, 569, 585, 586], "pad_token": [185, 225], "pad_token_segment_id": [185, 225], "mask_padding_with_zero": [185, 225], "inputfeatur": [185, 202, 225, 240], "properti": [185, 225, 409, 558, 584], "input_id": [185, 202, 225, 240, 560], "vocabulari": [185, 201, 202, 225, 239, 240, 594], "attention_mask": [185, 225, 560], "usual": [185, 225, 547, 583, 588], "NOT": [185, 225, 553, 557], "token_type_id": [185, 225, 560], "segment": [185, 225, 250, 252, 288, 290], "portion": [185, 225], "some": [185, 225, 280, 492, 542, 545, 557, 559, 560, 561, 582, 585, 588, 589, 592, 593, 595], "them": [185, 225, 523, 544, 551, 553, 555, 583, 585, 595], "problem": [185, 225, 256, 294, 559, 561, 581], "regress": [185, 225], "seq_length": [185, 225], "tensorflowbertdataset": [185, 225], "root": [185, 186, 187, 190, 225, 226, 227, 230, 256, 294, 509, 544, 545, 549, 559, 560, 597], "label_fil": [185, 202, 225, 240, 545, 594], "tfrecord": [185, 186, 187, 225, 226, 227, 545], "guid": [185, 225, 523, 526, 545, 547, 557, 563, 571, 580, 599], "parsedecodebert": [185, 225], "tensorflowmodelzoobertdataset": [185, 186, 225, 226], "num_cor": [185, 186, 190, 225, 226, 230, 545], "28": [185, 186, 190, 225, 226, 230, 545, 592, 598], "coco": [186, 193, 197, 226, 233, 252, 256, 290, 294, 559, 585], "parsedecodecoco": [186, 226], "cocorecorddataset": [186, 226], "directori": [186, 187, 226, 227, 303, 333, 336, 337, 401, 492, 545, 549, 552, 573, 575, 577, 578, 593], "interleav": [186, 226, 545], "parallel": [186, 226, 545, 560, 595], "cocoraw": [186, 226, 544, 545], "img_dir": [186, 226, 545], "val2017": [186, 226, 545], "anno_dir": [186, 226, 545], "annot": [186, 226, 252, 290, 325, 545, 559, 585], "instances_val2017": [186, 226, 545], "json": [186, 202, 226, 240, 465, 492, 545, 562, 581, 594], "raw": [186, 190, 193, 226, 230, 233, 315, 554, 559, 595], "wai": [186, 187, 190, 226, 227, 230, 492, 524, 542, 544, 545, 559, 560, 563, 566, 581, 583, 585, 588, 595, 597], "jpg": [186, 190, 192, 226, 230, 232, 545], "imag": [186, 187, 190, 192, 198, 202, 226, 227, 230, 232, 237, 240, 252, 290, 542, 545, 549, 551, 585, 587, 593, 594, 598], "coconpi": [186, 226, 545], "npy_dir": [186, 226, 545], "npy": [186, 226, 545], "tensorflowdataset": [187, 227], "pytorchdataset": [187, 227], "mxnetdataset": [187, 227], "onnxrtqldataset": [187, 227], "qlinear": [187, 194, 227, 234, 256, 294, 527, 551, 570, 598], "onnxrtitdataset": [187, 227], "IT": [187, 194, 227, 234, 586], "pytorchmxnetwrapdataset": [187, 227], "datafunc": [187, 227], "pytorchmxnetwrapfunct": [187, 202, 227, 240], "framework_dataset": [187, 227], "convent": [187, 227, 252, 290, 547], "imageclassifi": [187, 227], "choos": [187, 227, 542, 556, 557, 568, 590, 595, 597], "tensorflow_itex": [187, 190, 192, 194, 227, 230, 232, 234, 587], "onnxrt_qdq": [187, 194, 227, 234, 587], "onnxrt_qlinearop": [187, 194, 202, 227, 234, 240, 587], "onnxrt_integerop": [187, 194, 202, 227, 234, 240, 587], "pytorch_ipex": [187, 194, 227, 234, 560, 587, 597], "pytorch_fx": [187, 194, 227, 234, 560, 587], "dataset_registri": [187, 227], "dataset_typ": [187, 227], "dataset_format": [187, 227], "data_format": [187, 198, 227, 237], "raw_imag": [187, 227], "overwrit": [187, 227, 573, 577], "download_url": [187, 227], "filenam": [187, 227, 337, 461, 485, 492, 545], "md5": [187, 227], "download": [187, 227, 413, 436, 437, 439, 440, 473, 542, 545, 557, 590], "address": [187, 227, 509, 521, 542, 561, 586], "gen_bar_updat": [187, 227], "progress": [187, 227, 574, 580, 585, 588], "bar": [187, 227, 542, 580], "check_integr": [187, 227], "fpath": [187, 227], "checksum": [187, 227], "calculate_md5": [187, 227], "chunk_siz": [187, 227], "cifar10": [187, 227, 545], "cifar100": [187, 227, 545], "automat": [187, 190, 197, 198, 227, 230, 237, 247, 257, 284, 295, 306, 523, 526, 542, 543, 545, 556, 560, 561, 563, 565, 568, 569, 571, 573, 574, 575, 577, 578, 580, 583, 585, 588, 594, 595], "otherwis": [187, 202, 227, 240, 521, 545, 575, 578, 587, 594], "www": [187, 227, 545, 598], "toronto": [187, 227, 545], "edu": [187, 227, 545], "kriz": [187, 227, 545], "cifar": [187, 227, 545, 598], "tar": [187, 227, 545, 575, 578], "gz": [187, 227, 545, 575, 578], "manual": [187, 227, 545, 563, 569, 571, 574], "subset": [187, 190, 227, 230, 545], "internet": [187, 227, 542, 545], "put": [187, 227, 545, 547, 585], "again": [187, 227, 545, 589], "pytorchcifar10": [187, 227], "mxnetcifar10": [187, 227], "tensorflowcifar10": [187, 227], "pytorchcifar100": [187, 227], "mxnetcifar100": [187, 227], "tensorflowcifar100": [187, 227], "mnist": [187, 227, 545, 549], "modifi": [187, 214, 227, 471, 523, 542, 549, 553, 597], "nation": [187, 227, 521], "institut": [187, 227], "standard": [187, 202, 227, 240, 551, 559, 594, 595], "technologi": [187, 227, 560, 584], "fashionmnist": [187, 227, 545], "npz": [187, 227, 545], "idx1": [187, 227, 545], "ubyt": [187, 227, 545], "idx3": [187, 227, 545], "t10k": [187, 227, 545], "pytorchmnist": [187, 227], "mxnetmnist": [187, 227], "tensorflowmnist": [187, 227], "pytorchfashionmnist": [187, 227], "mxnetfashionmnist": [187, 227], "tensorflowfashionmnist": [187, 227], "imagefold": [187, 227, 545, 549, 560], "expect": [187, 227, 340, 462, 521, 522, 552, 580, 588, 595], "subfold": [187, 227], "belong": [187, 227, 245, 299, 588], "class_1": [187, 227, 545], "xxx": [187, 227, 522, 545, 560], "png": [187, 227, 545], "xxy": [187, 227, 545], "xxz": [187, 227, 545], "class_n": [187, 227, 545], "123": [187, 227, 545, 594], "nsdf3": [187, 227, 545], "asd932_": [187, 227, 545], "categori": [187, 227, 251, 289, 543, 545, 570], "mxnetimagefold": [187, 227], "tensorflowtfrecorddataset": [187, 227], "tensorflowimagerecord": [187, 227], "imagenet": [187, 190, 198, 227, 230, 237, 524, 542, 560, 569, 585, 593, 594, 597, 598], "000": [187, 227, 526, 545], "001": [187, 227, 545, 549, 597], "099": [187, 227, 545], "tensorflowvocrecord": [187, 227], "pascal": [187, 227], "voc": [187, 227, 256, 294], "2012": [187, 227], "00000": [187, 227], "00004": [187, 227], "00001": [187, 227], "00003": [187, 227], "dummydataset": [188, 189, 228, 229], "127": [188, 189, 228, 229, 545, 588], "float32": [188, 189, 202, 228, 229, 240, 252, 290, 527, 543, 545, 560, 588, 594], "rang": [188, 189, 202, 228, 229, 240, 325, 327, 526, 527, 545, 547, 548, 549, 560, 583, 585, 588, 592, 594], "stand_norm": [188, 189, 228, 229, 545], "dummy_v2": [189, 229, 544, 545], "sparse_dummy_v2": [189, 229, 545], "label_shap": [189, 229, 545], "sparsedummydataset": [189, 229], "dense_shap": [189, 229, 545], "sparse_ratio": [189, 229, 545], "imagenetraw": [190, 230, 545], "data_path": [190, 230, 545], "image_list": [190, 230, 545], "img1": [190, 230, 545], "img2": [190, 230, 545], "imgx": [190, 230, 545], "val_map": [190, 230, 545], "txt": [190, 230, 542, 545, 557], "pytorchimagenetraw": [190, 230], "mxnetimagenetraw": [190, 230], "tensorflowimagenetraw": [190, 230], "inteltensorflow": [190, 192, 230, 232, 557], "tensorflowimagenetdataset": [190, 230], "onnxrtimagenetdataset": [190, 230], "bert_dataset": [191, 196, 231, 236, 248, 286], "coco_dataset": [191, 196, 231, 236, 248, 286], "dummy_dataset": [191, 196, 231, 236, 248, 286], "dummy_dataset_v2": [191, 196, 231, 236, 248, 286], "imagenet_dataset": [191, 196, 231, 236, 248, 286], "style_transfer_dataset": [191, 196, 231, 236, 248, 286], "styletransferdataset": [192, 232], "content_fold": [192, 232, 545], "style_fold": [192, 232, 545], "crop_ratio": [192, 232, 545], "resize_shap": [192, 232, 545], "256": [192, 198, 232, 237, 545, 549, 560, 594], "image_format": [192, 232, 545], "holder": [192, 232, 545], "labelbalancecocorecordfilt": [193, 233], "balanc": [193, 233, 584, 592], "labelbalancecocorawfilt": [193, 233], "tensorflowfilt": [194, 234], "onnxrtqlfilt": [194, 234], "onnxrtitfilt": [194, 234], "pytorchfilt": [194, 234], "mxnetfilt": [194, 234], "filter_registri": [194, 234], "filter_typ": [194, 234], "__call__": [194, 234], "coco_filt": [195, 196, 235, 236, 248, 286], "imagenet_transform": [196, 199, 236, 238, 248, 286], "postprocess": [196, 199, 202, 206, 240, 248, 286, 330, 495, 527, 560, 593, 594], "parsedecodecocotransform": 197, "decod": [197, 198, 237, 249, 287, 559, 594], "quantizedinput": [198, 237, 594], "desir": [198, 202, 237, 240, 594], "labelshift": [198, 237, 594], "label_shift": [198, 237, 594], "parsedecodeimagenet": [198, 237, 594], "proto": [198, 202, 237, 240, 594], "parsedecodeimagenettransform": [198, 237], "tensorflowresizecropimagenettransform": [198, 237], "random_crop": [198, 237, 594], "resize_sid": [198, 237, 594], "resize_method": [198, 237], "bilinear": [198, 202, 237, 240, 594], "random_flip_left_right": [198, 237, 594], "mean_valu": [198, 237, 594], "channels_last": [198, 237, 563], "subpixel": [198, 237], "rgb": [198, 237], "seri": [198, 237, 526, 557, 560, 594], "applic": [198, 237, 476, 507, 509, 542, 551, 563, 580, 586, 593, 594], "crop": [198, 202, 237, 240, 545, 594], "flip": [198, 202, 237, 240, 594], "left": [198, 202, 237, 240, 542, 574, 580, 594], "right": [198, 237, 252, 290, 521, 523, 542, 580, 594], "std": [198, 202, 237, 240, 560, 594], "bilinearimagenettransform": [198, 237], "central_fract": [198, 237, 594], "875": [198, 237, 594], "fraction": [198, 237, 594], "onnxbilinearimagenettransform": [198, 237], "onnxresizecropimagenettransform": [198, 237], "std_valu": [198, 237], "229": [198, 237, 560, 598], "224": [198, 237, 526, 544, 545, 549, 551, 554, 560, 563, 594, 597, 598], "225": [198, 237, 560, 598], "resizewithaspectratio": [198, 237], "87": [198, 237, 598], "inter_pol": [198, 237], "cv2": [198, 237], "inter_area": [198, 237], "aspect": [198, 202, 237, 240, 594], "postprocess_cl": [200, 210, 560], "user_postprocess": [200, 210], "convert_to_unicod": [201, 239], "unicod": [201, 239], "assum": [201, 239, 252, 263, 290, 527, 553, 580], "utf": [201, 239], "load_vocab": [201, 239], "vocab_fil": [201, 202, 239, 240, 594], "convert_by_vocab": [201, 239], "vocab": [201, 239], "whitespace_token": [201, 239], "whitespac": [201, 239, 254, 292], "clean": [201, 239, 378, 522, 560], "piec": [201, 239, 249, 287, 551, 559], "fulltoken": [201, 239], "tokenzi": [201, 239], "basictoken": [201, 239], "punctuat": [201, 239, 249, 254, 287, 292], "lower": [201, 202, 239, 240, 254, 292, 311, 492, 548, 585, 586, 588, 594, 595], "wordpiecetoken": [201, 239], "unk_token": [201, 239], "unk": [201, 239], "max_input_chars_per_word": [201, 239], "200": [201, 239, 523, 595], "wordpiec": [201, 202, 239, 240, 594], "concat_gener": [202, 240], "inc": [202, 240, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 388, 521, 526, 563, 570, 580, 586, 587, 590], "tensorflowtransform": [202, 240], "mxnettransform": [202, 240], "pytorchtransform": [202, 240], "onnxrtqltransform": [202, 240], "onnxrtittransform": [202, 240], "transform_registri": [202, 240], "transform_typ": [202, 240], "basetransform": [202, 240], "tensorflowwrapfunct": [202, 240], "transform_func": [202, 240], "pytorchmxnettransform": [202, 240], "get_torchvision_map": [202, 240], "torchvis": [202, 240, 542, 550, 554, 563, 569], "composetransform": [202, 240], "transform_list": [202, 240, 594], "compos": [202, 240, 330, 594], "togeth": [202, 240, 547, 557, 567, 586, 593, 594], "croptoboundingbox": [202, 240, 594], "offset_height": [202, 240, 594], "offset_width": [202, 240, 594], "target_height": [202, 240, 594], "target_width": [202, 240, 594], "box": [202, 240, 252, 256, 290, 294, 523, 542, 559, 563, 574, 580, 593, 594, 595], "coordin": [202, 240, 310, 594, 595], "top": [202, 240, 247, 256, 271, 276, 284, 294, 306, 559, 580, 594], "corner": [202, 240, 527, 594], "horizont": [202, 240, 594], "mxnetcroptoboundingbox": [202, 240], "onnxrtcroptoboundingbox": [202, 240], "tensorflowcroptoboundingbox": [202, 240], "resizewithratio": [202, 240, 594], "min_dim": [202, 240, 594], "800": [202, 240, 594], "max_dim": [202, 240, 594], "1365": [202, 240, 594, 598], "constant_valu": [202, 240], "longest": [202, 240, 594], "side": [202, 240, 542, 545, 574, 594], "doesn": [202, 240, 527, 549, 560, 581, 597], "exce": [202, 240, 594], "tensorflowresizewithratio": [202, 240], "perm": [202, 240, 594], "permut": [202, 240, 594], "tensorflowtranspos": [202, 240], "mxnettranspos": [202, 240], "pytorchtranspos": [202, 240], "randomverticalflip": [202, 240, 594], "randomli": [202, 240, 264, 310, 524, 594, 595], "tensorflowrandomverticalflip": [202, 240], "randomhorizontalflip": [202, 240, 560, 594], "tensorflowrandomhorizontalflip": [202, 240], "toarrai": [202, 240, 594], "pil": [202, 240, 594], "casttftransform": [202, 240], "castonnxtransform": [202, 240], "castpytorchtransform": [202, 240], "centercroptftransform": [202, 240], "center": [202, 240, 525, 526, 557, 594, 595], "paddedcentercroptransform": [202, 240], "crop_pad": [202, 240], "resizetftransform": [202, 240], "nearest": [202, 240, 594], "bicub": [202, 240, 594], "resizepytorchtransform": [202, 240], "randomcroptftransform": [202, 240], "randomresizedcroppytorchtransform": [202, 240], "randomresizedcropmxnettransform": [202, 240], "randomresizedcroptftransform": [202, 240], "normalizetftransform": [202, 240], "rescal": [202, 240, 594], "normal": [202, 240, 254, 292, 492, 560, 582, 594], "deviat": [202, 240, 594], "broadcast": [202, 240, 549, 594], "rescalekeraspretraintransform": [202, 240], "rescaletftransform": [202, 240], "rescaletransform": [202, 240], "alignimagechanneltransform": [202, 240], "dim": [202, 240, 594], "align": [202, 240, 521, 594], "now": [202, 240, 523, 524, 545, 549, 571, 587, 594, 595], "h": [202, 240, 549, 594], "w": [202, 240, 585, 592, 594], "must": [202, 240, 252, 290, 522, 523, 542, 543, 544, 557, 588, 594], "pytorchalignimagechannel": [202, 240], "tondarraytransform": [202, 240], "resizemxnettransform": [202, 240], "resizetransform": [202, 240], "cropresizetftransform": [202, 240], "boundari": [202, 240, 594], "area": [202, 240, 252, 290, 559, 594], "pytorchcropresizetransform": [202, 240], "mxnetcropresizetransform": [202, 240], "cropresizetransform": [202, 240], "centercroptransform": [202, 240], "mxnetnormalizetransform": [202, 240], "pytorchnormalizetransform": [202, 240], "normalizetransform": [202, 240], "randomcroptransform": [202, 240], "randomresizedcroptransform": [202, 240], "get_final_text": [202, 240], "pred_text": [202, 240], "orig_text": [202, 240], "project": [202, 240, 365, 388, 389, 413, 520, 521, 522, 586, 591, 595, 599], "squadexampl": [202, 240], "qas_id": [202, 240], "question_text": [202, 240], "doc_token": [202, 240], "orig_answer_text": [202, 240], "start_posit": [202, 240], "end_posit": [202, 240], "is_imposs": [202, 240], "test": [202, 240, 522, 526, 542, 557, 598], "simpl": [202, 240, 542, 557, 560, 591, 595], "answer": [202, 240, 253, 254, 291, 292, 521, 585, 594, 598], "start": [202, 240, 252, 290, 311, 557, 594, 595, 596, 599], "posit": [202, 240, 521, 542, 559, 563], "unique_id": [202, 240], "example_index": [202, 240], "doc_span_index": [202, 240], "token_to_orig_map": [202, 240], "token_is_max_context": [202, 240], "input_mask": [202, 240, 560], "segment_id": [202, 240, 560], "read_squad_exampl": [202, 240], "input_fil": [202, 240], "doc_strid": [202, 240, 594], "max_query_length": [202, 240, 594], "output_fn": [202, 240], "inputbatch": [202, 240], "collecttransform": [202, 240], "10833": [202, 240], "tfsquadv1posttransform": [202, 240], "n_best_siz": [202, 240, 594], "20": [202, 240, 557, 584, 594, 597, 598], "384": [202, 240, 594], "64": [202, 240, 524, 592, 594, 598], "max_answer_length": [202, 240, 594], "30": [202, 240, 550, 554, 556, 594, 598], "nbest_predict": [202, 240, 594], "question": [202, 240, 253, 254, 291, 292, 521, 522, 527, 557, 563, 585, 594, 598], "anoth": [202, 240, 249, 258, 287, 337, 547, 561, 573, 577, 594, 595], "long": [202, 240, 552, 594], "document": [202, 240, 325, 522, 532, 549, 561, 565, 575, 578, 579, 590, 594, 596], "chunk": [202, 240, 594], "tfmodelzoocollecttransform": [202, 240], "tfsquadv1modelzooposttransform": [202, 240], "squadv1": [202, 240, 594], "parsedecodevoctransform": [202, 240], "conf_fname_or_obj": [203, 212, 241, 247, 257, 258, 259, 260, 262, 271, 276, 284], "command": [203, 327, 477, 485, 542, 549, 563, 565, 568, 573, 577, 581], "possibl": [203, 354, 542, 583, 585, 589, 595], "unnecessari": [203, 560], "tensorflowcrossentropyloss": 204, "pytorchcrossentropyloss": 204, "tensorflowsparsecategoricalcrossentropi": 204, "sparsecategoricalcrossentropyloss": 204, "setter": 205, "calib_dataload": [205, 285, 306, 523, 526, 544, 545, 554, 555, 559, 560, 588, 589], "reason": [205, 521, 544, 593, 595], "know": [205, 478, 549, 590], "infom": [205, 245], "known": [205, 310, 551, 560, 585, 593, 595], "open": [206, 248, 286, 330, 519, 521, 526, 542, 551, 552, 560, 575, 578, 581, 586], "librari": [206, 248, 286, 519, 522, 526, 557, 560, 565, 574, 580, 586, 588], "metric_cl": [207, 294, 560], "user_metr": [207, 294], "alwai": [207, 252, 290, 294, 559, 560], "recommend": [207, 294, 527, 545, 551, 553, 571, 574, 579, 581, 585, 587, 595], "set_backend": 208, "tensorflowoptim": 209, "pytorchoptim": 209, "main": [209, 282, 472, 509, 523, 549, 554, 560, 567, 569, 581, 585, 588], "optimizer_registri": 209, "optimizer_typ": 209, "cross": [209, 256, 294, 555, 595], "tensorflowsgd": 209, "tensorflowadamw": 209, "tensorflow_addon": 209, "adamw": 209, "tensorflowadam": 209, "adam": [209, 597], "pytorchsgd": 209, "record_output": 211, "output_process": 211, "help": [211, 258, 354, 492, 562, 563, 569, 580, 595, 596], "get_activ": 211, "f": [214, 547, 549, 588], "pickle_modul": 214, "pickle_protocol": 214, "_use_new_zipfile_seri": 214, "prepare_prun": 214, "opt": [214, 568, 592], "tensorflowimagefold": 227, "qlinear2qdq": [242, 248, 286], "qlinearop": [243, 556, 571, 588], "check_model": 243, "modelproto": [243, 245, 295, 562], "onnx_qlinear_to_qdq": 243, "input_name_to_nod": 243, "destin": [243, 258], "tf_to_fp32_onnx": 244, "tf_to_int8_onnx": 244, "int8_model": [244, 245, 527], "update_weight_bia": 245, "fp32_onnx_path": [245, 246], "wegiht": 245, "set_data_typ": 245, "weight_typ": 245, "activation_typ": 245, "get_node_map": 245, "module_node_map": 245, "get_quantizable_onnx_op": 245, "quantize_nod": 245, "build_scale_map": 245, "int8_scale_info": 245, "scale_zp_dict": 245, "set_scale_info": 245, "int8_onnx_model": 245, "int8_onnx_path": 245, "recalculate_bia": 245, "recalcul": 245, "remove_nodes_by_nam": 245, "sub_graph_with_int32_bia": 245, "a_info": 245, "b_info": 245, "bias_nam": 245, "int32": [245, 545], "nodeproto": 245, "_type_": 245, "qdq_fp32_bia": 245, "excut": 245, "qdq_int32_bia": 245, "qdq_op_int32_bia": [245, 551], "qdq_fp32_bias_qdq": 245, "qdq_op_fp32_bias_qdq": [245, 551], "torch_to_fp32_onnx": 245, "do_constant_fold": 245, "verbos": [245, 310], "ax": 245, "torch_to_int8_onnx": 245, "u8s8": 245, "optionl": 245, "onnx2numpy_dtyp": 246, "onnx_node_typ": 246, "dummydataread": 246, "dataread": 246, "achiev": [247, 284, 306, 551, 559, 560, 583, 585, 586, 588, 593, 595], "constraint": [247, 284, 306, 560, 591, 595, 597], "across": [247, 257, 284, 295, 306, 546, 560, 585, 595], "variou": [247, 257, 284, 295, 306, 556, 563, 587], "dl": [247, 257, 271, 276, 284, 295, 306, 555, 567, 580, 586], "bring": [247, 284, 306, 574, 588], "unifi": [247, 284, 306, 527, 544, 555, 556, 560, 562], "work": [247, 284, 306, 525, 544, 547, 575, 578, 585, 589, 590, 593], "sinc": [247, 249, 271, 276, 284, 287, 306, 547, 551, 557, 559, 574, 580, 583], "vari": [247, 271, 276, 284, 306, 584, 598], "roc": [247, 256, 271, 276, 284, 294, 306], "footprint": [247, 271, 276, 284, 305, 306, 548, 560, 582, 585, 587], "flexibl": [247, 271, 276, 284, 547, 585], "via": [247, 271, 276, 284, 509, 521, 549, 556, 560, 563, 580, 585], "popular": [248, 286, 519, 526, 527, 547, 550, 551, 554, 560, 585, 588, 595, 596], "compress": [248, 271, 276, 286, 305, 327, 519, 526, 532, 547, 556, 560, 580, 582, 583, 585, 586, 588, 592, 596], "techniqu": [248, 286, 519, 526, 556, 560, 563, 583, 585, 587, 588, 592, 596, 597], "bleu": [248, 250, 255, 286, 288, 293, 559], "bleu_util": [248, 255, 286, 293], "coco_label_map": [248, 255, 286, 293], "coco_tool": [248, 255, 286, 293], "evaluate_squad": [248, 255, 286, 293], "f1": [248, 253, 255, 256, 286, 291, 293, 294, 549, 559, 560, 591, 598], "basic_na": [248, 261, 286], "dyna": [248, 261, 286, 524, 556, 587], "nas_util": [248, 261, 286], "pruner_legaci": [248, 286], "gradient_sensit": [248, 267, 286], "group_lasso": [248, 267, 286], "pattern_lock": [248, 267, 286], "pruning_recip": [248, 286], "tile_pattern": [248, 272, 273], "pytorch_prun": [248, 286], "logger": [248, 277, 286, 328, 331, 337, 473, 481], "prune_util": [248, 277, 286], "graph_optim": [248, 286, 413, 448, 452, 453, 473, 481, 497], "mixed_precis": [248, 286, 413, 448, 473, 481, 497, 560], "model_convers": [248, 286], "pruning_v2": [248, 286], "unicoderegex": [249, 287], "hoc": [249, 287], "hack": [249, 287], "recogn": [249, 287, 595], "nondigit_punct_r": [249, 287], "compil": [249, 287, 560, 584], "express": [249, 287, 521], "preced": [249, 287], "digit": [249, 287, 586], "punct_nondigit_r": [249, 287], "symbol_r": [249, 287], "bleu_token": [249, 287], "mose": [249, 287], "smt": [249, 287], "mosesdecod": [249, 287], "mteval": [249, 287], "v14": [249, 287], "pl": [249, 287], "l954": [249, 287], "l983": [249, 287], "bilingu": [249, 287], "understudi": [249, 287], "qualiti": [249, 287], "machin": [249, 287, 352, 542, 551, 557, 566, 580, 586, 593], "translat": [249, 250, 287, 288, 585, 595], "natur": [249, 287, 551], "approxim": [249, 250, 287, 288, 559], "glue": [249, 256, 287, 294, 545, 559, 560, 569], "word": [249, 287, 559, 585], "ngram": [249, 287, 559], "breviti": [249, 250, 287, 288, 559], "penalti": [249, 250, 287, 288, 559], "doe": [249, 287, 545, 559, 560, 590, 594], "beam": [249, 287, 559], "tensor2tensor": [250, 288], "bleu_hook": [250, 288], "compute_bleu": [250, 288], "reference_corpu": [250, 288], "translation_corpu": [250, 288], "max_ord": [250, 288], "use_bp": [250, 288], "against": [250, 288], "gram": [250, 288], "flag": [250, 288, 327], "bleu_scor": [250, 288], "third": [252, 290, 542, 558], "parti": [252, 290, 558, 588], "pycocotool": [252, 290, 552, 557], "object_detect": [252, 290], "noth": [252, 290, 595], "thu": [252, 290, 560, 585, 588], "cannot": [252, 290, 480, 523, 551, 552, 561, 592, 593], "slim": [252, 290, 301, 303, 562, 585], "jonathanhuang": [252, 290], "image_id": [252, 290, 559], "encod": [252, 290, 594], "groundtruth": [252, 290], "multi": [252, 290, 350, 524, 544, 545, 556, 560, 582, 588, 595], "invok": [252, 290], "groundtruth_dict": [252, 290], "exportgroundtruthtococo": [252, 290], "groundtruth_boxes_list": [252, 290], "groundtruth_classes_list": [252, 290], "max_num_class": [252, 290], "output_path": [252, 290], "detections_list": [252, 290], "exportdetectionstococo": [252, 290], "detection_boxes_list": [252, 290], "detection_scores_list": [252, 290], "detection_classes_list": [252, 290], "cocowrapp": [252, 290], "loadannot": [252, 290], "cocoevalwrapp": [252, 290], "agnostic_mod": [252, 290], "computemetr": [252, 290], "detection_typ": [252, 290], "bbox": [252, 290, 523, 559], "hold": [252, 290, 310, 545], "iou_typ": [252, 290], "iou_thr": [252, 256, 290, 294, 559], "map_point": [252, 256, 290, 294, 559], "cocoev": [252, 290], "mscoco": [252, 290], "Then": [252, 290, 542, 573, 575, 577, 578, 595], "exportsingleimagegroundtruthtococo": [252, 290], "next_annotation_id": [252, 290], "category_id_set": [252, 290], "groundtruth_box": [252, 290], "groundtruth_class": [252, 290], "groundtruth_mask": [252, 290], "groundtruth_is_crowd": [252, 290], "ingest": [252, 290], "ones": [252, 290, 585], "exportsingleimagedetectionstococo": [252, 290], "uniqu": [252, 285, 290, 379, 380, 588], "either": [252, 290, 564, 568, 583, 587, 588], "assign": [252, 290, 337, 542, 549, 587], "drop": [252, 280, 290, 560, 561, 574, 585, 598], "num_gt_box": [252, 290], "num_detect": [252, 256, 290, 294, 559, 560, 597], "image_height": [252, 290], "image_width": [252, 290], "detection_mask": [252, 290], "crowd": [252, 290], "insid": [252, 290, 547, 548, 581, 585, 595], "exportsingleimagedetectionboxestococo": [252, 290], "detection_box": [252, 290, 560, 597], "detection_scor": [252, 290, 560, 597], "detection_class": [252, 290, 560, 597], "exporsingleimagedetectionboxestococo": [252, 290], "exportsingleimagedetectionmaskstococo": [252, 290], "allenai": [253, 254, 291, 292], "bi": [253, 254, 291, 292], "att": [253, 254, 291, 292], "flow": [253, 254, 291, 292, 523, 524, 560], "f1_score": [253, 254, 291, 292], "ground_truth": [253, 254, 291, 292], "ground": [253, 254, 291, 292], "truth": [253, 254, 291, 292], "metric_max_over_ground_truth": [253, 254, 291, 292], "metric_fn": [253, 254, 291, 292], "exact_match_scor": [253, 291], "exact": [253, 291], "averag": [253, 254, 256, 291, 292, 294, 559, 560, 595], "articl": [253, 254, 291, 292], "paragraph": [253, 254, 291, 292], "qa": [253, 254, 291, 292], "cantain": [253, 254, 291, 292], "normalize_answ": [254, 292], "extra": [254, 292, 560], "replac": [254, 292, 492, 549, 560, 571, 590], "newlin": [254, 292], "tab": [254, 292, 390, 508, 580, 593], "harmon": [254, 256, 292, 294], "recal": [254, 256, 292, 294], "answer_start": [254, 292], "177": [254, 292], "denver": [254, 292], "bronco": [254, 292], "nfl": [254, 292], "team": [254, 292, 521, 589], "afc": [254, 292], "super": [254, 292, 524], "bowl": [254, 292], "50": [254, 292, 524, 598], "56be4db0acb8001400a502ec": [254, 292], "form": [254, 292, 542, 547, 580], "percentag": [254, 292, 597], "tensorflowmetr": [256, 294], "maintain": [256, 294, 521, 522, 526, 562, 563, 575, 578, 585, 590], "pytorchmetr": [256, 294], "mxnetmetr": [256, 294], "onnxrtqlmetr": [256, 294], "onnxrtitmetr": [256, 294], "metric_registri": [256, 294], "metric_typ": [256, 294], "decorator_metr": [256, 294], "basemetr": [256, 294], "single_output": [256, 294], "hvd": [256, 294, 549], "wrappytorchmetr": [256, 294], "wrapmxnetmetr": [256, 294], "wraponnxrtmetr": [256, 294], "proport": [256, 294], "were": [256, 294, 566, 585], "pred_list": [256, 294], "pytorchloss": [256, 294], "sum": [256, 294, 547], "mae": [256, 294, 559], "compare_label": [256, 294, 559], "actual": [256, 294, 549], "numer": [256, 294, 561, 586, 588], "rmse": [256, 294, 559, 595], "squar": [256, 294, 315, 559, 595], "tensorflowtopk": [256, 294], "k": [256, 294, 559, 585], "among": [256, 294, 574], "most": [256, 294, 542, 560, 561, 585, 588, 592, 595], "outcom": [256, 294], "num_correct": [256, 294], "num_sampl": [256, 294], "generaltopk": [256, 294], "cocomapv2": [256, 294, 559], "anno_path": [256, 294, 559], "map_kei": [256, 294], "detectionboxes_precis": [256, 294], "output_index_map": [256, 294, 559], "tensorflowmap": [256, 294], "tensorflowcocomap": [256, 294], "tensorflowvocmap": [256, 294], "squadf1": [256, 294, 559], "miou": [256, 294], "num_class": [256, 294], "21": [256, 294, 568, 569, 586, 598], "iou": [256, 294], "intersect": [256, 294, 527, 559], "union": [256, 294, 327, 559], "onnxrtglu": [256, 294], "dlrm": [256, 294], "modelconvers": 258, "typic": [258, 285, 524, 526, 548, 550, 554, 585], "basicna": 259, "model_build": [259, 262], "conf_fnam": 259, "nasbas": [262, 524], "nas_registri": 263, "nas_method": 263, "create_search_space_pool": 263, "idx": [263, 545], "enumer": [263, 327, 341, 442, 448, 474, 527, 547, 548, 549, 560, 583, 585, 593], "find_pareto_front": 263, "pareto": [263, 524], "front": [263, 524], "n_point": 263, "n_metric": 263, "n_pareto_point": 263, "searcher": 264, "gridsearch": 264, "grid": [264, 524], "whole": [264, 507, 542, 588], "exhaust": [264, 286, 314, 587], "randomsearch": 264, "42": [264, 584, 598], "bayesianoptimizationsearch": 264, "bayesian": [264, 286, 314, 524, 587], "gradientsensitivityprun": 265, "pytorchmodel": [265, 266, 268, 269, 270, 304], "overwritten": [265, 266, 268, 269, 270, 568], "grouplassoprun": 266, "legaci": 267, "basicmagnitudeprun": 268, "lock": [269, 270, 556, 583, 585], "pruner_registri": 270, "clase": 270, "pruningconf": [271, 276], "tfpruningcallback": [271, 276], "input_model": [271, 276, 562, 593], "pure": [271, 276, 561, 585], "pattern_registri": 274, "pattern_typ": 274, "patternbas": 274, "mask_shap": [274, 275], "is_contigu": 274, "tile": 275, "tilepatternbas": 275, "tilepattern_1x1": 275, "1x1": [275, 547, 560, 585], "unstructur": [275, 556, 585, 598], "tilepattern_2x2": 275, "2x2": 275, "tilepattern_1x16": 275, "1x16": 275, "tilepattern_4x1": 275, "tilepattern_1x2": 275, "1x2": 275, "reset_non_value_to_default": 280, "non": [280, 337, 523, 584, 585, 595], "obejct": 280, "parse_not_to_prun": 280, "update_frequency_on_step": [281, 587], "max_sparsity_ratio_per_lay": [281, 587], "magnitudeprun": 281, "snipprun": 281, "snipmomentumprun": 281, "moreoev": 281, "least": [282, 560, 585, 595], "templat": [282, 286, 473, 481, 542, 560, 585], "tree": [282, 322], "nlp": [282, 568, 585, 588], "huggingface_model": 282, "eager": [282, 339, 447, 451, 459, 549, 556, 588, 589, 593, 598], "config_file_path": 282, "pruner_info": 282, "quantconf": [284, 295], "server": [285, 286, 413, 420, 472, 473, 480, 481, 489, 492, 503, 505, 507, 542, 580], "seper": 285, "opt_model": [285, 560], "fulli": [285, 560, 588], "meet": [285, 307, 309, 523, 551, 582, 586, 587, 588, 593, 595], "requir": [285, 303, 339, 341, 353, 408, 414, 439, 446, 447, 448, 449, 451, 452, 453, 455, 458, 459, 464, 469, 473, 523, 527, 542, 543, 544, 548, 549, 553, 560, 561, 562, 564, 574, 580, 584, 585, 588, 590, 591, 593, 595, 597], "train_func": [285, 327, 549, 560, 588], "contrib": 286, "experiment": [286, 524, 545, 548, 549, 551, 560, 585, 587, 590, 594], "base_model": [286, 297], "keras_model": [286, 297], "mxnet_model": [286, 297], "nets_factori": [286, 297], "onnx_model": [286, 297], "tensorflow_model": [286, 297], "torch_model": [286, 297], "tuning_sampl": [286, 314, 320], "tuning_spac": [286, 314, 320, 321, 323], "tuning_struct": [286, 314, 320, 321, 322], "auto_mixed_precis": [286, 314], "conserv": [286, 314], "hawq_v2": [286, 314], "mse_v2": [286, 314], "collect_layer_histogram": [286, 331], "create_obj_from_config": [286, 331], "kl_diverg": [286, 331], "load_huggingfac": [286, 331, 560], "ux": 286, "config_gener": [286, 413, 473], "configuration_wizard": [286, 413, 473], "db_manag": [286, 413, 473], "file_brows": [286, 413, 473], "jobs_manag": [286, 413, 473], "model_zoo": [286, 413, 473], "names_mapp": [286, 413, 473], "profil": [286, 365, 372, 387, 389, 390, 413, 473, 474, 484, 507, 512], "manage_workspac": [286, 413, 473], "workload": [286, 352, 473, 481, 492, 507, 512, 513, 586], "except": [286, 325, 337, 473, 481, 492, 507], "executor": [286, 340, 473, 481], "expiring_dict": [286, 473, 481], "github_info": [286, 473, 481], "hw_info": [286, 473, 481], "json_seri": [286, 473, 481], "proc": [286, 473, 481], "status_upd": [286, 473, 481], "yaml_util": [286, 473, 481], "web": [286, 472, 473, 526, 542, 593], "servic": [286, 473, 506, 507, 526, 580, 584], "commun": [286, 473, 507, 509, 521, 542], "router": [286, 473, 507], "inc_bench": [286, 473, 542, 554], "output_model": [295, 325, 544, 560, 593], "eval_metr": [295, 306, 327, 588], "frozen": [295, 303, 306, 429, 432, 542, 562], "savedmodel": [295, 303, 306, 598], "chould": 295, "onnx_ml_pb2": [295, 562], "hybirdblock": [295, 306], "paramt": [295, 327], "basemodel": 296, "plai": [296, 585, 586], "role": [296, 585], "kerasmodel": [298, 431], "get_model_fwk_nam": 299, "fwk": 299, "mxnetmodel": 300, "net": 301, "factori": [301, 394, 413, 448, 464, 469, 473, 484, 488], "tfslimnetsfactori": 301, "onnxmodel": 302, "get_model_typ": [303, 422], "validate_graph_nod": 303, "validate_and_inference_input_output": 303, "input_tensor_nam": 303, "output_tensor_nam": 303, "graph_sess": 303, "graph_def_sess": 303, "frozen_pb_sess": 303, "load_saved_model": 303, "saved_model_tag": 303, "serv": [303, 509], "signatur": 303, "saved_model_dir": 303, "tag": [303, 492, 593], "metagraphdef": 303, "keras_sess": 303, "slim_sess": 303, "checkpoint_sess": 303, "estimator_sess": 303, "saved_model_sess": 303, "tensorflowbasemodel": 303, "tensorflowsavedmodelmodel": 303, "tensorflowqatmodel": 303, "tensorflowcheckpointmodel": 303, "checkpoint": [303, 336, 562], "tensorflowmodel": [303, 433], "pytorchbasemodel": 304, "pytorchfxmodel": 304, "ipexmodel": 304, "driven": [305, 526, 560, 561, 580, 582, 593], "objective_registri": 305, "objective_custom_registri": 305, "obj_cl": 305, "eural_compressor": 305, "objective_cl": 305, "user_object": 305, "__class__": 305, "__name__": 305, "objective_cfg": 305, "usr_cfg": 305, "user_obj_cfg": 305, "easili": [305, 527, 564, 568, 580, 582, 585], "peak": [305, 582], "models": [305, 560, 582, 587], "multiobject": [305, 502], "metric_criterion": 305, "metric_weight": 305, "obj_criterion": 305, "obj_weight": 305, "is_measur": 305, "posttrainingqu": 306, "calib_func": [306, 589], "entir": [306, 327, 523, 585], "ptq": [306, 523, 549, 556, 560, 588, 592, 593, 595], "set_workspac": [306, 337], "autotunestrategi": 307, "stage": [307, 309, 316, 547, 593, 595], "polici": [307, 309, 315, 521, 526, 584, 597, 599], "automixedprecisiontunestrategi": 308, "basictunestrategi": 309, "bayesiantunestrategi": 310, "acq_max": 310, "ac": 310, "gp": 310, "y_max": 310, "n_warmup": 310, "10000": 310, "n_iter": 310, "acquisit": 310, "gaussian": [310, 595], "relev": 310, "limit": [310, 337, 526, 547, 585, 593], "acq": 310, "randomst": 310, "scipi": 310, "x_max": 310, "targetspac": 310, "pbound": 310, "9527": [310, 560, 597], "allow": [310, 509, 542, 547, 549, 559, 560, 561, 587, 595, 597], "bayesianoptim": 310, "conservativetunestrategi": 311, "o0": [311, 595], "who": [311, 521], "exhaustivetunestrategi": 312, "hawq_v2tunestrategi": 313, "made": [313, 527, 588, 590, 595], "impact": [313, 590, 595], "msetunestrategi": 315, "sort": [315, 401, 595], "mse_v2tunestrategi": 316, "revert": [316, 324, 595], "randomtunestrategi": 317, "strategy_registri": [318, 595], "tunestrategi": [318, 595], "tuningsamplerregistri": 321, "tuningsampl": 321, "tuningord": 321, "Not": [321, 322, 337, 476, 524], "displai": [321, 322, 337, 408, 580], "tuningspac": [321, 322], "tuning_order_lst": 321, "initial_op_tuning_cfg": 321, "modelwisetuningsampl": 321, "tuning_items_prior": 321, "op_dtype_dict": 321, "optuningconfig": [321, 322, 323], "optypewisetuningsampl": 321, "opwisetuningsampl": 321, "fallbacktuningsampl": 321, "op_dtyp": 321, "accumul": [321, 595], "skip_first": 321, "smoothquantsampl": 321, "hyperparamet": [321, 591, 595], "tuningitem": 322, "item_typ": 322, "get_op_mode_by_query_ord": 322, "query_ord": 322, "pattern_to_intern": 322, "default_dtyp": 322, "pattern_to_path": 322, "quant_mode_from_pattern": 322, "internal_pattern": 322, "initial_tuning_cfg_with_quant_mod": 322, "op_name_typ": 322, "fp16": [322, 561, 588], "step1": 322, "step2": 322, "complet": [322, 527, 542, 588, 595, 597, 598], "step3": 322, "step4": 322, "step5": 322, "op_quant_mod": 323, "ordereddefaultdict": 324, "extract_data_typ": 324, "data_typ": 324, "sign": [324, 522, 542, 588, 591], "unsign": 324, "reverted_data_typ": 324, "signed_flag": 324, "get_adaptor_nam": 324, "adaptor": [324, 330, 526, 556, 589, 590, 593, 596], "docstr": 325, "fun": 325, "attribute1": 325, "module_debug_level1": 325, "debug": [325, 334, 394, 395, 399, 542, 573, 577, 581, 595], "function1": 325, "param1": 325, "param2": 325, "parameter1": 325, "parameter2": 325, "o": [325, 401, 557, 565, 584, 592], "function2": 325, "pep": 325, "484": 325, "function3": 325, "argument": [325, 339, 447, 451, 456, 459, 465, 524], "section": [325, 542, 547, 548, 580, 585, 587, 597], "restructuredtext": 325, "liter": 325, "attributeerror": 325, "generator1": 325, "example_gener": 325, "exampleclass": 325, "param3": 325, "public": [325, 521, 575, 578], "attr1": 325, "attr2": 325, "attr5": 325, "api_doc_exampl": 326, "loop": [327, 523, 524, 553, 591, 595], "compressionmanag": 327, "callbacks_list": 327, "uesd": 327, "deal": 327, "Such": 327, "distillationcallbback": 327, "on_train_begin": [327, 523, 547, 548, 560, 583, 585, 588], "train_loop": [327, 560, 583], "on_epoch_begin": [327, 330, 547, 548, 560, 583, 585], "on_step_begin": [327, 330, 547, 548, 560, 583, 585], "on_after_compute_loss": [327, 547, 548, 560, 583], "backward": [327, 547, 548, 549, 560, 583, 585, 588, 590], "on_before_optimizer_step": [327, 547, 548, 560, 583, 585], "on_step_end": [327, 330, 547, 548, 560, 583, 585], "on_epoch_end": [327, 330, 547, 548, 560, 583, 585], "on_train_end": [327, 547, 548, 560, 583, 585, 588], "path_to_sav": 327, "manag": [327, 330, 356, 391, 414, 475, 491, 554, 560, 563, 564, 574], "summari": [327, 542, 575, 578, 584, 593], "orchestr": [327, 526, 556, 596], "pruningconfig": 327, "layerhistogramcollector": 328, "histogram": [328, 337, 542, 593], "layer_tensor": 328, "include_lay": 328, "diverg": [328, 332, 547, 595], "get_func_from_config": 330, "func_dict": 330, "get_preprocess": 330, "get_metr": 330, "get_postprocess": 330, "get_algorithm": 330, "algo": 330, "create_dataset": 330, "cfg_preprocess": 330, "cfg_filter": 330, "create_dataload": 330, "dataloader_cfg": 330, "create_eval_func": 330, "postprocess_cfg": 330, "fp32_baselin": [330, 527], "baselin": [330, 591, 593], "create_train_func": 330, "train_cfg": 330, "Their": 330, "auxiliari": 331, "probabl": 332, "pretrain": [333, 563, 569], "optimizedmodel": 333, "from_pretrain": [333, 560], "save_for_huggingface_upstream": [333, 560], "output_dir": [333, 485, 560, 568, 569], "msg": 334, "fatal": 334, "warn": [334, 542], "warin": 334, "alia": [334, 565, 570], "is_int8_model": 336, "checkpoint_dir": 336, "history_cfg": 336, "best_configur": 336, "best_model_weight": 336, "pt": [336, 562, 586, 589], "histori": [336, 337, 377, 390, 443, 461, 511, 580, 595], "snapshot": [336, 511], "cfg_from_fil": 337, "yaml_fil": [337, 545, 549, 559], "overrid": 337, "lazyimport": 337, "lazi": 337, "till": [337, 595], "decorat": 337, "time_limit": 337, "get_siz": [337, 492], "seen": [337, 527], "recurs": 337, "compute_spars": 337, "fault_tolerant_fil": 337, "temporari": [337, 521], "equal_dict": 337, "d2": 337, "compare_kei": 337, "ignore_kei": 337, "ignor": [337, 545], "cpuinfo": 337, "dump_elapsed_tim": [337, 527], "customized_msg": 337, "elaps": 337, "combine_histogram": 337, "old_hist": 337, "old": [337, 560, 590], "get_tensor_histogram": 337, "bin": [337, 552], "2048": 337, "get_all_fp32_data": 337, "get_tuning_histori": 337, "tuning_history_path": [337, 461], "num": [337, 559, 592], "str2arrai": 337, "dequantizeweight": 337, "weight_tensor": 337, "min_filter_tensor": 337, "max_filter_tensor": 337, "scale_info": 337, "captureoutputtofil": 337, "tmp_file_path": 337, "stream": 337, "sy": [337, 566], "stderr": 337, "captur": 337, "statist": 337, "header": [337, 552], "field_nam": 337, "output_handl": 337, "printer": 337, "global_st": 337, "load_data_from_pkl": 337, "pkl": 337, "dump_data_to_loc": 337, "set_random_se": 337, "set_resume_from": 337, "set_tensorboard": 337, "show_memory_info": 337, "hint": 337, "project_data": [338, 445, 450, 454, 457, 460, 467], "benchmark_data": 338, "dataloaderinterfac": [338, 454, 467], "dataloader_data": [338, 454, 467], "parse_arg": [339, 447, 451, 456, 459, 465], "benchmark_mod": 339, "set_eager_execut": [339, 447, 451, 459], "request_id": [340, 443, 461, 462, 485], "asd": [340, 462], "benchmark_id": 340, "benchmark_result_upd": 340, "benchmark_result_update_pytorch_script": 340, "neural_coder_perform": 340, "neural_coder_tim": 340, "pytorch_script_bench_optim": 340, "command_line_of_script": 340, "pytorch_script_bench_original_model": 340, "execute_real_benchmark": 340, "project_detail": [340, 443, 462], "benchmark_detail": 340, "benchmark_model": [341, 413, 473], "execute_benchmark": [341, 413, 473], "benchmarkconfiggener": 342, "configgener": 343, "workload_directori": 343, "configuration_path": 343, "graphoptimizationconfiggener": 344, "benchmark_config_gener": [345, 413, 473], "graph_optimization_config_gener": [345, 413, 473], "mixed_precision_config_gener": [345, 413, 473], "profiling_config_gener": [345, 413, 473], "pruning_config_gener": [345, 413, 473], "quantization_config_gener": [345, 413, 473], "mixedprecisionconfiggener": 346, "profilingconfiggener": 347, "pruningconfiggener": 348, "quantizationconfiggener": 349, "configurationpars": 350, "parse_list_valu": 350, "required_typ": 350, "parse_multidim_list": 350, "dimension": 350, "normalize_string_list": 350, "string_list": 350, "bracket": 350, "miss": [350, 585, 588], "get_predefined_configur": 352, "update_config_to_machine_specif": 352, "configuration_pars": [353, 413, 473], "get_boundary_nod": [353, 413, 473], "get_configur": [353, 413, 473], "params_feed": [353, 413, 473], "pruning_config_pars": [353, 413, 473], "feeder": 354, "get_possible_valu": 354, "pruningconfigpars": 355, "bench": [356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 388, 443, 472, 563], "dbmanag": 356, "database_loc": 356, "log_level": [356, 483], "tabl": [357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 379, 380], "benchmarkresult": 358, "fill_dictionari": [359, 361, 362, 364, 366, 369, 370, 375], "fill": [359, 361, 362, 364, 366, 369, 370, 375, 542, 580, 591, 594], "domainflavour": [362, 474], "db": [362, 390, 391], "benchmark_result": [365, 389, 413], "domain_flavour": [365, 389, 413, 419, 492], "optimization_typ": [365, 389, 413], "profiling_result": [365, 389, 413], "pruning_detail": [365, 389, 413], "tuning_detail": [365, 389, 413], "tuning_histori": [365, 389, 413, 448, 473], "optimizationtyp": [369, 474], "profilingresult": 372, "pruningdetail": 374, "tuningdetail": [376, 460], "tuninghistori": [377, 461], "benchmarkapiinterfac": 378, "before_delete_benchmark_entri": 378, "mapper": [378, 441, 442], "sqlite3": 378, "db_model": [378, 389, 413, 473], "datasetapiinterfac": 379, "set_database_vers": [379, 380], "version_num": [379, 380], "alembic_vers": [379, 380], "initialize_associ": [379, 380], "initialize_precision_optimization_types_associ": [379, 380], "search_in_list_of_dict_for_unique_valu": [379, 380], "list_of_dict": [379, 380], "search_in_list_of_dict": [379, 380], "diagnosisapiinterfac": 381, "dictionariesapiinterfac": 382, "dictonari": 382, "examplesapiinterfac": 383, "predefin": [383, 492], "benchmark_api_interfac": [384, 389, 413], "dataset_api_interfac": [384, 389, 413], "diagnosis_api_interfac": [384, 389, 413], "dictionaries_api_interfac": [384, 389, 413], "examples_api_interfac": [384, 389, 413], "model_api_interfac": [384, 389, 413], "optimization_api_interfac": [384, 389, 413], "profiling_api_interfac": [384, 389, 413], "project_api_interfac": [384, 389, 413], "modelapiinterfac": 385, "optimizationapiinterfac": 386, "profilingapiinterfac": 387, "projectapiinterfac": 388, "db_oper": [389, 413, 473], "params_interfac": [389, 413, 473], "modeladdparamsinterfac": 390, "datasetaddparamsinterfac": 390, "optimizationaddparamsinterfac": 390, "optimizationeditparamsinterfac": 390, "edit": [390, 521], "benchmarkaddparamsinterfac": 390, "benchmarkeditparamsinterfac": 390, "profilingaddparamsinterfac": 390, "profilingeditparamsinterfac": 390, "profilingresultaddparamsinterfac": 390, "tuninghistoryiteminterfac": 390, "tuninghistoryinterfac": 390, "diagnosisoptimizationparamsinterfac": 390, "update_dataloaders_param": 391, "framework_id": 391, "dataloaders_to_upd": 391, "framework_dataloaders_config": 391, "get_framework_dataloaders_config": 391, "get_framework_transforms_config": 391, "diagnosisfactori": 393, "onnx_diagnosi": [394, 413, 473], "onnxrt_diagnosi": [394, 395, 413], "tensorflow_diagnosi": [394, 413, 473], "op_detail": [394, 413, 473], "op_entri": [394, 413, 473], "onnxrtdiagnosi": 396, "opdetail": 397, "oppattern": 397, "pattern_data": 397, "opweight": 397, "weights_data": 397, "opactiv": 397, "op_activ": 397, "opentri": 398, "activation_min": 398, "activation_max": 398, "tensorflowdiagnosi": 400, "browser": [401, 542, 573, 577], "get_directory_entri": 401, "get_requested_path": 401, "request": [401, 413, 414, 415, 436, 437, 440, 461, 473, 504, 506, 509, 516, 542, 588], "get_non_hidden_directory_entri": 401, "create_dir_entri": 401, "direntri": 401, "create_file_entri": 401, "create_entri": 401, "is_directori": 401, "sort_entri": 401, "should_show_fil": 401, "should_show_only_model_fil": 401, "get_setting_valu": 401, "get_filter_valu": 401, "filter_requested_entri": 401, "filter_nam": 401, "is_directory_entri": 401, "is_model_or_directory_entri": 401, "shown": [401, 524, 542, 544, 547, 559, 560, 574, 582, 583, 595], "is_dataset_or_directory_entri": 401, "brows": 402, "filesystem": [402, 492], "attribute_typ": 403, "expanded_group": 404, "reader": [407, 408, 413, 473], "graphread": 407, "onnxrt_read": [408, 410, 413], "tensorflow_read": [408, 410, 413], "collaps": [408, 413, 473, 542], "edg": [408, 413, 473, 594], "graph_read": [408, 413, 473], "highlight": [409, 523, 542], "groupnod": 409, "group_nam": 409, "onnxrtread": 411, "tensorflowread": 412, "jobs_control_queu": [413, 414, 473], "frozen_pb": [413, 420, 430], "meta_graph": [413, 420, 430], "model_type_gett": [413, 420, 473], "repositori": [413, 418, 420, 473, 479, 575, 578], "download_config": [413, 439, 473], "download_model": [413, 439, 473], "list_model": [413, 439, 473], "optimize_model": [413, 446, 448, 449, 452, 455], "neural_coder_optim": [413, 448, 473], "tune_model": [413, 448, 458], "execute_optim": [413, 448, 473], "tensorflow_profil": [413, 464, 473], "execute_profil": [413, 464, 473], "profile_model": [413, 464, 473], "job": [414, 488], "_jobscontrolqueu": 415, "queu": 415, "jobsmanag": 415, "_jobsmmanag": 416, "_job": 416, "get_default_path": 418, "getter": 422, "onnxrtmodel": 424, "remove_number_of_samples_from_shap": 424, "pytorchscriptmodel": 426, "modelrepositori": 427, "trust": [428, 542], "frozenpbmodel": 429, "metagraphmodel": 432, "metagraph": 432, "savedmodelmodel": 434, "get_input_shap": 435, "fix_dynamic_shap": 435, "get_available_model": 440, "check_vers": 440, "framework_vers": 440, "supported_vers": 440, "validate_model_list": 440, "model_list": 440, "get_framework_module_nam": 440, "framework_nam": [440, 480], "get_installed_framework": 440, "instal": [440, 549, 552, 554, 563, 565, 568, 571, 575, 578, 580, 581, 584, 599], "mappingdirect": 442, "namesmapp": 442, "execute_optimization_pytorch_script": 443, "optimization_id": 443, "execute_optimization_regular": 443, "parse_model_data_to_bench_nam": 443, "parse_log": 443, "optimization_detail": 443, "check_if_collect_tuning_histori": 443, "optimizationfactori": 444, "graphoptim": [445, 496], "optimization_data": [445, 450, 454, 457, 460], "dataset_data": [445, 450, 454, 457, 460], "optimize_graph": [447, 451], "output_graph": [447, 451, 456, 459], "optimize_graph_config": [447, 451], "optimize_pt_script": 453, "optimizationinterfac": 454, "optimization_workdir": 461, "watcher": 461, "send": [461, 504, 509, 522], "profiling_id": 462, "execute_real_profil": 462, "profiling_detail": 462, "profilerfactori": [463, 468], "load_profiling_detail": 465, "json_path": 465, "profiling_data": [467, 470], "delete_assign": 471, "wsgi": 472, "prepare_environ": 472, "app": [473, 507], "workdir": [473, 481, 489], "history_snapshot_pars": [473, 507, 512], "request_data_processor": [473, 507, 512], "response_gener": [473, 507, 512], "flavour": 474, "executionstatu": 474, "status": 474, "notfoundexcept": 476, "accessdeniedexcept": 476, "deni": 476, "clienterrorexcept": 476, "internalexcept": 476, "workspace_path": [477, 492], "subject": [477, 504, 558], "send_respons": 477, "log_nam": 477, "additional_log_nam": [477, 485], "shell": [477, 485, 593], "expir": 478, "expiringdictitem": 478, "expires_at": 478, "expiringdict": 478, "initial_valu": 478, "ttl": 478, "120": 478, "githubinfo": 479, "hw": 480, "hwinfo": 480, "respons": [480, 484, 491, 504, 509, 517, 588], "platform": [480, 526, 556, 563, 571, 586, 588, 598], "hardwar": [480, 522, 526, 527, 547, 556, 560, 561, 580, 584, 585, 586, 587, 592], "get_number_of_socket": 480, "get_distribut": 480, "distibut": 480, "get_bios_vers": 480, "bio": [480, 584], "is_turbo_boost_en": 480, "turbo": [480, 584], "boost": [480, 561, 564, 580, 586], "get_kernel_vers": 480, "get_framework_info": 480, "get_framework_dependency_info": 480, "subdepend": 480, "jsonseri": 482, "serializ": 482, "change_log_level": 483, "optimizationpars": 484, "performancepars": 484, "accuracypars": 484, "benchmarkparserfactori": 484, "profilingpars": 484, "pid": 485, "ncprocess": 486, "aggreg": 486, "statu": [488, 504, 521, 544, 582], "get_status_update_funct": 488, "job_typ": 488, "sent": 490, "deprec": [492, 575, 578, 594], "func": [492, 509, 588, 597], "signal": 492, "is_hidden": 492, "get_dataset_path": 492, "get_framework_from_path": 492, "get_file_extens": 492, "lead": [492, 547, 560, 561, 585], "is_dataset_fil": 492, "get_predefined_config_path": 492, "normalize_domain": 492, "underscor": 492, "normalize_framework": 492, "normalize_str": 492, "string_to_norm": 492, "get_model_zoo_config_path": 492, "model_dict": 492, "get_model_zoo_model_path": 492, "check_modul": 492, "get_module_vers": 492, "mb": 492, "add_unit": 492, "load_model_config": 492, "load_dataloader_config": 492, "load_transforms_config": 492, "load_transforms_filter_config": 492, "meaning": [492, 560, 583], "load_precisions_config": 492, "load_pruning_details_config": 492, "get_default_pruning_config_path": 492, "load_model_wise_param": 492, "load_metrics_config": 492, "get_metrics_dict": 492, "load_help_nc_param": 492, "replace_with_valu": 492, "file_path": 492, "verify_file_path": 492, "determine_ip": 492, "ip": 492, "is_development_env": 492, "nc_mode": 492, "filter_transform": 492, "parse_bool_valu": 492, "release_tag": 492, "releas": [492, 526, 557, 569, 571, 573, 577, 579, 599], "get_shape_from_transform": 492, "shape_elements_ord": 492, "get_height_width_from_s": 492, "parse_to_string_list": 492, "parse_to_float_list": 492, "export_to_csv": 492, "csv": [492, 524, 542], "parse_vers": 492, "string_vers": 492, "are_archive_filenames_valid": 492, "archiv": 492, "malici": 492, "safe_extract_arch": 492, "zipfil": 492, "tarfil": 492, "destination_dir": 492, "member": [492, 521, 527], "safe": [492, 522], "labelbal": [494, 544, 545], "postprocessschema": 495, "sgdoptim": 500, "adamwoptim": 500, "adamoptim": 500, "crossentropylosscriterion": 500, "sparsecategoricalcrossentropycriterion": 500, "knowledgedistillationlosscriterion": 500, "weightcompressionapproach": 500, "parse_dict_value_to_float": 500, "parse_dict_value_to_int": 500, "wiseconfigdetail": 501, "wiseconfig": 501, "acccriterion": 502, "exitpolici": 502, "float_represent": 503, "dumper": 503, "pruner_represent": 503, "logic": [504, 597], "outsid": 504, "create_simple_respons": 504, "gui": [504, 509, 526, 542, 556, 557, 585, 596], "messagequeu": 504, "queue": [504, 509], "servicenotfoundexcept": 506, "unknown": 506, "connector": 508, "routingdefinit": 508, "rout": 508, "realtimeroutingdefinit": 508, "realtim": 508, "deferredroutingdefinit": 508, "separ": [508, 521, 542, 555, 558, 583, 587], "deferredsubprocessroutingdefinit": 508, "spawn": 508, "subprocess": 508, "get_model_graph": 508, "find_pattern_in_graph": 508, "get_system_info": 508, "endpoint": 509, "run_serv": 509, "webserv": 509, "get_tls_arg": 509, "tl": [509, 542], "block_ifram": 509, "werkzeug": 509, "ifram": 509, "csp": 509, "block_snif": 509, "mime": 509, "snif": 509, "require_api_token": 509, "author": [509, 558], "j": [509, 522, 526, 592, 598], "handle_api_cal": 509, "subpath": 509, "allow_api_cal": 509, "page_not_found": 509, "disable_cach": 509, "build_paramet": 509, "flask": [509, 542], "web_socket_publish": 509, "web_socket": 509, "flask_socketio": 509, "socketio": [509, 542], "benchmarkservic": 510, "historysnapshotpars": 511, "history_snapshot": 511, "provide_perform": 511, "modelservic": 513, "optimizationservic": 514, "profilingservic": 515, "processor": [516, 526, 561, 584, 586, 588, 589, 598], "requestdataprocessor": 516, "responsegener": 517, "workloadservic": 518, "welcom": [520, 521, 522, 526, 599], "interest": [521, 526, 593], "foster": 521, "particip": 521, "harass": 521, "experi": [521, 563, 591, 595], "everyon": 521, "regardless": 521, "ag": 521, "bodi": 521, "ethnic": 521, "characterist": 521, "gender": 521, "educ": 521, "socio": 521, "econom": 521, "appear": [521, 542, 574, 580], "race": 521, "religion": 521, "sexual": 521, "orient": 521, "behavior": [521, 522, 527, 553, 562, 593, 595, 597], "contribut": [521, 526], "inclus": 521, "Being": 521, "respect": [521, 553, 585, 597], "viewpoint": 521, "gracefulli": 521, "critic": 521, "focus": [521, 527], "empathi": 521, "toward": [521, 547], "unaccept": 521, "imageri": 521, "unwelcom": 521, "troll": 521, "insult": 521, "derogatori": 521, "comment": [521, 545, 559, 560, 594], "polit": 521, "attack": 521, "privat": 521, "publish": [521, 558, 561, 581], "electron": 521, "explicit": 521, "permiss": 521, "inappropri": 521, "profession": 521, "clarifi": 521, "appropri": 521, "fair": 521, "action": [521, 575, 578], "reject": 521, "commit": [521, 522], "wiki": 521, "issu": [521, 522, 525, 542, 557, 588, 593], "ban": 521, "temporarili": 521, "perman": [521, 585], "deem": 521, "threaten": 521, "offens": 521, "harm": 521, "mail": 521, "social": [521, 526, 586], "media": [521, 526, 586], "account": [521, 591, 595], "appoint": 521, "event": [521, 593], "abus": 521, "report": [521, 522, 542, 591], "contact": [521, 590, 591], "complaint": 521, "review": [521, 522], "investig": 521, "circumst": [521, 587], "oblig": 521, "confidenti": [521, 542], "regard": [521, 589], "incid": 521, "good": [521, 588, 595], "faith": 521, "face": [521, 526, 532, 563, 567, 586, 590], "repercuss": 521, "leadership": 521, "faq": [521, 526], "page": [521, 522, 526], "view": [522, 526, 542, 550, 571, 580, 590], "pylint": 522, "flake8": 522, "autopep8": 522, "cover": [522, 551, 555, 586], "would": [522, 560, 561, 585, 588], "adopt": [522, 526, 563, 585, 586], "certif": [522, 542], "agre": 522, "bug": 522, "jira": 522, "ticket": 522, "potenti": [522, 524], "risk": 522, "pr": [522, 559, 575, 578, 590], "reproduc": 522, "submit": [522, 586], "intend": 522, "collabor": [522, 565, 571], "adher": 522, "toolkit": [523, 526, 557, 563, 571, 586, 596], "tracer": 523, "resolv": [523, 525], "floatfunct": 523, "cat": [523, 566], "done": [523, 547, 548, 564, 580, 585, 588], "10004": [523, 524, 527, 544, 547, 548, 551, 553, 556, 561, 583, 587, 597], "neural_compressor": [523, 524, 526, 543, 544, 545, 547, 548, 549, 551, 554, 555, 559, 560, 561, 562, 582, 583, 585, 587, 588, 589, 590, 591, 594, 595, 597], "eval": [523, 544, 563, 588, 593], "fail": 523, "conduct": [523, 560, 568, 580, 596], "imper": 523, "therefor": [523, 560, 585, 588, 590, 592], "lot": 523, "As": [523, 542, 544, 547, 560, 574, 585, 595], "might": [523, 542, 595], "failur": 523, "successfulli": [523, 549, 586], "suggest": [523, 591], "traceabl": 523, "proxi": 523, "tutori": [523, 571, 586, 596], "prototyp": 523, "html": [523, 526, 575, 578], "untrac": 523, "ssd": [523, 598], "resnet34": [523, 598], "r34": 523, "bboxes_labels_scor": 523, "prob": 523, "45": [523, 598], "max_output": 523, "zip": 523, "dbox": 523, "dlabel": 523, "dscore": 523, "decode_singl": 523, "autom": [524, 563, 580, 581], "artifici": 524, "ann": 524, "par": 524, "outperform": 524, "hand": [524, 542], "propos": [524, 527, 547, 561, 585], "lie": 524, "predictor": 524, "4x": [524, 588], "figur": [524, 573, 574, 577, 585], "popul": 524, "inner": 524, "evolutionari": 524, "cycl": 524, "until": [524, 595], "conclud": 524, "met": [524, 553, 561, 588, 593], "yet": [524, 542, 575, 578, 581], "simplest": [524, 566], "launcher": [524, 526, 547, 548, 571, 585, 596], "agent": 524, "nsga2": 524, "supernet": 524, "ofa_mbv3_d234_e346_k357_w1": 524, "acc": [524, 593, 598], "mac": [524, 581], "num_ev": 524, "250": 524, "results_csv_path": 524, "search_result": 524, "dataset_path": 524, "ilsvrc2012": 524, "aim": [524, 526, 563, 585, 595, 596], "mobilenetv3": 524, "lt": [524, 545, 584, 598], "wmt": 524, "en": 524, "de": 524, "guidelin": [525, 526], "mainstream": [526, 596], "learn": [526, 527, 544, 545, 551, 555, 556, 557, 560, 561, 563, 565, 568, 569, 571, 574, 575, 578, 580, 585, 586, 588, 593, 595, 596], "runtim": [526, 527, 528, 544, 550, 553, 556, 565, 570, 571, 587], "showcas": 526, "broad": [526, 556, 569, 596], "wide": [526, 550, 561, 588, 598], "xeon": [526, 557, 558, 561, 584, 586, 588, 589, 598], "scalabl": [526, 557, 561, 584, 586, 588, 589, 598], "flex": [526, 557], "amd": [526, 556, 557, 598], "arm": [526, 556, 557, 598], "nvidia": [526, 556, 557, 585, 588, 598], "stabl": [526, 542, 557, 586], "diffus": [526, 586, 598], "gpt": [526, 592, 598], "resnet50": [526, 549, 554, 563, 567, 585, 588, 591, 598], "hub": [526, 550, 554, 571], "hug": [526, 586], "vision": [526, 551, 554, 567], "coder": [526, 556, 564, 565, 568, 571, 574, 586], "workflow": [526, 547, 557, 561, 575, 578, 593, 596], "cloud": [526, 586], "marketplac": [526, 581, 586], "googl": [526, 561, 586], "amazon": [526, 563, 571], "azur": [526, 586], "softwar": [526, 558, 561, 584, 585, 586, 590], "alibaba": [526, 570, 577, 578, 586], "tencent": [526, 586], "taco": [526, 586], "ai": [526, 563, 586, 589, 596], "ecosystem": [526, 586], "lightn": [526, 570], "visit": [526, 598], "websit": [526, 557], "pip": [526, 542, 549, 552, 554, 557, 565, 568, 573, 575, 577, 578, 590], "wget": [526, 552, 554], "storag": [526, 554, 559], "googleapi": [526, 554], "v1_6": [526, 554], "mobilenet_v1_1": [526, 554], "0_224_frozen": [526, 554], "quick": [526, 553, 596, 597], "overview": 526, "notebook": [526, 596], "oneapi": [526, 557, 586, 596], "analyt": [526, 557, 586, 596], "jupyterlab": [526, 563, 569, 571, 573, 577, 596], "visual": [526, 571, 580, 591, 593, 595, 596], "studio": [526, 571, 580, 596], "matrix": [526, 571, 596], "topic": 526, "heterogen": [526, 586], "power": [526, 547, 560, 574, 584, 586], "mar": [526, 586], "2023": [526, 598], "busi": [526, 586], "jan": [526, 586], "blog": [526, 586], "amx": [526, 586], "enhanc": [526, 563, 586, 589], "4th": [526, 586], "gen": [526, 561, 586, 589], "neurip": [526, 586], "fast": [526, 586], "oct": [526, 586], "quala": [526, 586], "minilm": [526, 586, 598], "legal": [526, 599], "secur": [526, 584, 586, 599], "idea": [526, 585, 595], "feel": 526, "look": [526, 527, 553, 559, 597], "bridg": [527, 556], "vanilla": [527, 556], "abcadaptor": 527, "__init__": [527, 544, 545, 559, 595], "query_fw_cap": 527, "query_fused_pattern": 527, "he": 527, "besid": [527, 547], "describ": [527, 542, 553, 593], "past": 527, "wa": [527, 542, 560, 586, 595], "effect": [527, 585], "mainten": 527, "difficult": [527, 592], "abil": [527, 545, 553], "modif": [527, 544, 553, 568], "fragment": 527, "granular": [527, 553, 556, 566, 585, 588, 597], "semant": [527, 553], "microsoft": 527, "mla": [527, 588], "becom": [527, 551], "explor": 527, "reduc": [527, 548, 560, 561, 580, 581, 586, 588, 589, 592, 595, 597], "exclud": [527, 561, 589], "inspect_tensor": 527, "op_list": [527, 593], "iteration_list": 527, "inspect_typ": 527, "save_to_disk": 527, "quantization_cfg": 527, "set_tensor": 527, "tensor_dict": 527, "diagnosis_help": 527, "easier": [542, 573, 577, 580, 586], "6": [542, 553, 585, 588, 592, 595, 598], "nightli": [542, 557], "pypi": [542, 557, 575, 578], "conda": [542, 552, 557, 566, 574, 590], "forg": [542, 552, 557], "git": [542, 552, 557], "clone": [542, 557, 573, 577], "cd": [542, 549, 557], "setup": [542, 553, 557, 575, 578, 585], "instruct": [542, 547, 557, 561, 575, 578, 586, 587, 588], "ui": 542, "5000": 542, "338174d13706855fc6924cec7b3a8ae8": 542, "listen": 542, "firewal": 542, "8080": 542, "p": [542, 581], "tf_enable_onednn_opt": [542, 557], "cert": 542, "path_to_cert": 542, "crt": 542, "path_to_private_kei": 542, "encrypt": 542, "insecur": 542, "expos": 542, "forfeit": 542, "client": 542, "extern": 542, "threat": 542, "button": [542, 556, 574, 580], "click": [542, 554, 556, 563, 564, 571, 574, 580, 586, 593], "pop": [542, 580], "recognit": [542, 549, 551, 585, 593], "few": [542, 586, 595], "finish": [542, 574], "chosen": 542, "synthet": 542, "plu": 542, "icon": 542, "unfold": 542, "On": [542, 588], "panel": [542, 575, 578, 580], "navig": 542, "previou": [542, 560, 585, 590, 593, 595, 596], "trash": 542, "visibl": 542, "cursor": 542, "prompt": [542, 549], "confirm": 542, "bottom": 542, "pencil": 542, "light": [542, 548], "blue": 542, "color": 542, "That": 542, "row": [542, 585], "arrow": 542, "line": [542, 549, 556, 563, 568, 569, 585, 593], "checkbox": 542, "column": [542, 585], "chart": [542, 588, 591, 593], "offer": [542, 545], "conveni": [542, 560], "variat": 542, "pictur": 542, "yellow": 542, "remind": 542, "ofa": 542, "fvcore": 542, "autograd": 542, "pymoo": 542, "numba": 542, "ilsvrc": 542, "hour": [542, 595], "One": [542, 545, 549, 556, 585, 586, 595], "dialog": 542, "organ": [542, 597], "cryptographi": 542, "linux": [543, 552, 574, 580], "window": [543, 580, 581], "x86_64": 543, "aarch64": 543, "often": [544, 547, 583, 585], "encount": 544, "consum": 544, "previous": 544, "lack": [544, 552], "faster": [544, 546, 586, 595, 598], "hard": 544, "treat": 544, "manner": [544, 547, 562], "post_training_static_qu": [544, 545, 560, 587, 595], "300": [544, 545], "input_data": 544, "customis": [544, 545], "ensp": [545, 559, 594], "imagerecord": [545, 549, 597], "image_nam": 545, "cocorecord": 545, "gt": [545, 551, 594], "int64": 545, "style_transf": 545, "content": 545, "tfrecorddataset": 545, "helloworld": [545, 594], "aid": 546, "increas": [546, 556, 563, 580, 592, 595], "deploy": [546, 563, 580], "infrastructur": 546, "expens": [547, 560, 595], "deploi": [547, 560, 595], "mobil": [547, 560, 598], "produc": 547, "logit": 547, "softmax": 547, "l": [547, 593, 595], "kd": 547, "distanc": 547, "euclidean": 547, "kullback": 547, "leibler": 547, "patient": 547, "compact": [547, 560, 566, 585], "agnost": 547, "resourc": [547, 585, 595], "convolut": [547, 585, 586], "ia": 547, "attach": [547, 560], "shallow": 547, "depth": [547, 589], "deepest": 547, "deeper": 547, "acceler": [547, 560, 563, 571, 580, 585, 586, 589, 592, 595], "10006": [547, 548], "student_output": [547, 548], "student_loss": [547, 548], "training_func_for_nc": [547, 548], "distil_loss_conf": 547, "accordingli": [547, 571, 592], "promis": [548, 560, 585], "huge": 548, "bit": [548, 561, 586, 588], "heavi": 548, "booster": 548, "degrad": [548, 595], "retrain": [548, 585], "incorpor": [548, 595], "novel": [548, 563, 574, 580], "place": [548, 557, 585, 593], "illustr": 548, "horovod": 549, "builtin": 549, "program": [549, 558, 561, 563, 580], "addition": [549, 595], "enable_eager_execut": 549, "yaml_file_path": 549, "pre_process": 549, "simpli": [549, 562, 563, 565, 568, 580], "evaluation_result": 549, "evaluation_time_cost": 549, "partit": 549, "distributedsampl": 549, "train_sampl": 549, "train_dataset": [549, 588], "num_replica": 549, "rank": 549, "train_load": 549, "train_kwarg": 549, "adadelta": 549, "distributedoptim": 549, "named_paramet": 549, "broadcast_paramet": 549, "root_rank": 549, "broadcast_optimizer_st": 549, "set_epoch": 549, "batch_idx": 549, "zero_grad": [549, 560, 585], "nll_loss": 549, "log_interv": 549, "0f": 549, "tloss": 549, "6f": 549, "dry_run": 549, "test_func": 549, "host": 549, "num_of_process": 549, "002": 549, "ssh": [549, 580], "readm": 549, "exactli": [549, 564], "resnet50_v1": [549, 560], "topk": [549, 559, 560, 588], "32": [549, 555, 584, 585, 598], "resizecropimagenet": [549, 594], "realiz": [549, 559, 582, 589, 591], "tow": 549, "situat": 549, "node1": 549, "node2": 549, "TO": [549, 565], "your_node1_nam": 549, "your_node2_nam": 549, "resnet50_fp32_pretrained_model": 549, "nc_resnet50_v1": 549, "resnet": [549, 554, 598], "varieti": [550, 587, 595], "demonstr": [550, 563, 585, 593], "10k": [550, 554], "speedup": [550, 556, 588], "2x": [550, 556, 584], "vnni": [550, 556, 587, 588], "exchang": 551, "howev": [551, 585, 592], "hope": 551, "briefli": [551, 560, 585], "matur": 551, "major": [551, 555, 588], "reus": 551, "inc_model": [551, 562], "fp32_onnx_config": 551, "randn": 551, "int8_onnx_config": 551, "verifi": 551, "gap": [551, 562], "matmulintegertofloat": 551, "matmulinteg": 551, "toolchain": 552, "bare": 552, "metal": 552, "sudo": [552, 566], "apt": [552, 557, 566, 574], "python3": 552, "dev": [552, 573, 577], "distutil": 552, "essenti": 552, "libgl1": 552, "mesa": 552, "glx": 552, "libglib2": 552, "numactl": [552, 566, 574], "ln": 552, "sf": 552, "usr": 552, "incompat": 552, "88": [552, 591, 598], "80": [552, 593, 598], "pyobject": 552, "reinstal": 552, "importerror": 552, "libgl": 552, "No": [552, 560, 584, 586], "yum": [552, 557], "opencv": [552, 574], "pend": 552, "27": [552, 557, 598], "alemb": [552, 557], "friendli": [553, 560, 597], "dive": [553, 596], "unless": 553, "purpos": [553, 561, 580, 587, 588], "let": [553, 568, 587, 597], "syntax": 553, "go": [553, 575, 578, 587, 594], "up1": 553, "up2": 553, "valid_mixed_precis": 553, "per_tensor": [553, 588, 597], "addn": 553, "grappler_optim": 553, "constfold": 553, "arithmet": 553, "debug_stripp": 553, "jupyt": [554, 571, 573, 574, 577], "lab": [554, 573, 574, 575, 577, 578], "concept": [555, 591, 596], "rather": 555, "custom_metr": 555, "explicitli": 555, "refin": [555, 585], "These": 556, "420": 556, "geomean": 556, "snippet": 556, "upload": [556, 575, 578], "dispatch": 556, "qintegerop": [556, 588], "plan": 556, "success": 557, "re": [557, 580], "uninstal": [557, 580], "frequent": 557, "ask": 557, "consolid": 557, "latest": [557, 586, 590], "eas": [557, 565, 586], "along": 557, "streamlin": 557, "scienc": 557, "mani": [557, 595, 597], "anaconda": 557, "suit": [557, 581, 593], "esri": 557, "formerli": 557, "skylak": 557, "cascad": 557, "lake": [557, 561, 586], "cooper": [557, 561, 586], "ic": [557, 585, 586], "sapphir": 557, "rapid": 557, "hbm": 557, "arctic": 557, "sound": 557, "pont": 557, "vecchio": 557, "cento": 557, "ubuntu": [557, 584], "04": [557, 584, 598], "fortensorflow": 557, "forpytorch": 557, "onednn": [557, 588], "newer": 557, "apach": 558, "copyright": 558, "accompani": 558, "research": 558, "wish": 558, "bibtex": 558, "misc": 558, "feng": 558, "tian": 558, "hanwen": 558, "haihao": [558, 585], "shen": [558, 585], "suyu": 558, "chen": 558, "titl": [558, 581], "howpublish": 558, "year": 558, "logo": [558, 584], "atom": 558, "phi": 558, "pentium": 558, "vtune": 558, "corpor": [558, 584], "subsidiari": [558, 584], "brand": [558, 584], "claim": [558, 584], "popularli": 559, "industri": [559, 586], "label_map": 559, "decis": 559, "ap": 559, "curv": 559, "turn": [559, 574], "target_boxes_num": 559, "str_label": 559, "int_label": 559, "inturn": 559, "cocomap": 559, "vocmap": 559, "categor": 559, "multiclass": 559, "multilabel": 559, "multi_metr": 559, "newmetr": 559, "reset": 559, "reflect": [559, 584, 594], "deliv": [560, 586], "upgrad": 560, "veri": [560, 581, 588, 595], "speed": [560, 571, 585, 586, 588, 595], "fundament": 560, "comprehens": [560, 596], "kind": 560, "resort": 560, "automodelforsequenceclassif": 560, "autotoken": 560, "val_dataset": [560, 588], "val_dataload": [560, 588], "worker": [560, 588], "ping_memori": [560, 588], "formul": 560, "effort": 560, "written": 560, "onnxrt_integ": [560, 597], "onnxrt_qlinear": [560, 597], "unsupport": 560, "image_tensor": [560, 597], "post_training_dynamic_qu": [560, 587, 595], "1000": [560, 597], "2000": 560, "sampling_s": [560, 597], "model_wis": [560, 597], "op_dict": 560, "op_wis": [560, 593, 597], "sigopt_api_token": [560, 591, 595], "sigopt_project_id": [560, 591, 595], "sigopt_experiment_nam": [560, 591, 595], "demo": 560, "600": [560, 598], "training_arg": 560, "emul": [560, 588], "trainer": [560, 571], "similar": [560, 587, 595, 597], "maxim": [560, 585, 595], "still": [560, 588, 589], "pruning_func": 560, "num_train_epoch": [560, 585], "train_dataload": [560, 585, 588], "n_gpu": 560, "gradient_accumulation_step": 560, "clip_grad_norm_": 560, "max_grad_norm": 560, "rate": [560, 585, 588], "start_epoch": [560, 587, 597], "end_epoch": [560, 587, 597], "97": [560, 598], "newli": [560, 585], "on_after_optimizer_step": [560, 585], "layer1": [560, 585, 588], "layer3": [560, 585], "layer2": [560, 585, 588], "lr_schedul": [560, 585], "weight_decai": [560, 597], "0004": 560, "nesterov": [560, 597], "randomresizedcrop": [560, 594], "totensor": [560, 594], "485": 560, "456": 560, "406": 560, "nepoch": 560, "cnt": 560, "loss_sum": 560, "iter_bar": 560, "tqdm": 560, "desc": 560, "teacher_logit": 560, "train_fun": 560, "training_func": 560, "recent": [560, 561], "growth": [560, 561, 585], "complex": [560, 561, 585], "significantli": [560, 561, 585, 595], "bandwidth": [560, 561], "guarante": 560, "exit_polici": [560, 597], "determinist": 560, "arbitrari": [560, 583], "reli": 560, "prune_conf": 560, "quantization_aware_training_conf": 560, "aforement": 560, "inset": 560, "p_conf": [560, 583], "ssd_mobilenet_v1": 560, "lpot": [560, 586, 590], "benchmarkconf": 560, "half": [561, 571], "sixteen": 561, "launch": [561, 581], "3rd": [561, 586, 588, 589], "codenam": 561, "x86": 561, "avx512": [561, 588], "vcvtne2ps2bf16": 561, "vcvtneps2bf16": 561, "vdpbf16p": 561, "onnxrt_cuda_ep": [561, 588], "consequ": 561, "avx512_bf16": 561, "cuda": [561, 563, 565, 588], "persist": 562, "brought": [562, 564, 571, 588], "tf2": 562, "h5": 562, "hybridblock": 562, "0000": 562, "saved_result": 562, "simplifi": [563, 574, 580], "subsequ": [563, 580], "acquir": 563, "analysi": [563, 580, 591], "heurist": [563, 580], "rule": [563, 585], "great": 563, "facilit": 563, "autocast": 563, "jit": [563, 565, 570, 593], "simultan": [563, 583, 587], "my_model": 563, "no_grad": 563, "memory_format": 563, "112": [563, 598], "rand": 563, "plugin": [563, 581], "aw": [563, 571, 586, 598], "sagemak": [563, 571], "inlin": [563, 568, 571], "neural_cod": [563, 565, 567, 568, 569, 571], "superbench": 563, "enjoi": [564, 568, 571], "caus": [564, 585], "rebuild": [564, 573, 577], "reload": [564, 581], "modern": 565, "democrat": [565, 586], "programm": [565, 571, 580], "nano_bf16_channels_last": 565, "resnet18": [565, 598], "nano_bf16_ipex_channels_last": 565, "nano_bf16_ipex": 565, "nano_bf16": 565, "nano_fp32_channels_last": 565, "nano_fp32_ipex_channels_last": 565, "nano_fp32_ipex": 565, "nano_gpu_to_cpu": 565, "nano_int8": 565, "nano_jit_bf16_channels_last": 565, "nano_jit_bf16_ipex_channels_last": 565, "nano_jit_bf16_ipex": 565, "nano_jit_bf16": 565, "nano_jit_fp32_channels_last": 565, "nano_jit_fp32_ipex_channels_last": 565, "nano_jit_fp32_ipex": 565, "nano_jit_fp32": 565, "nano_onnxruntime_fp32": 565, "nano_onnxruntime_int8_qlinear": 565, "openvino": 565, "nano_openvino_fp32": 565, "nano_openvino_int8": 565, "bc": [566, 574], "conda_prefix": 566, "echo": 566, "empti": 566, "tradit": [566, 585], "libjemalloc": 566, "libiomp5": 566, "home": 566, "lib": 566, "ld_preload": 566, "malloc_conf": 566, "oversize_threshold": 566, "background_thread": 566, "metadata_thp": 566, "dirty_decay_m": 566, "9000000000": 566, "muzzy_decay_m": 566, "kmp_affin": 566, "kmp_blocktim": 566, "dnnl_primitive_cache_capac": 566, "cpufreq": 566, "scaling_governor": 566, "powersav": 566, "tee": 566, "pytorch_jit_script": [567, 570], "pytorch_channels_last": [567, 570], "run_bench": 567, "patch": [567, 580], "patch_path": 567, "your_patch_path": 567, "sweep": 567, "sweep_object": 567, "bench_config": 567, "bench_featur": 567, "sai": 568, "run_glu": [568, 569], "requisit": 568, "task_nam": [568, 569], "do_ev": [568, 569], "remain": 568, "itself": 568, "run_glue_optim": 568, "static_ipex": 568, "auto_qu": 569, "v4": [569, 598], "albert": [569, 598], "sst2": 569, "alexnet": [569, 598], "pytorch_amp": 570, "optimize_for_infer": 570, "pytorch_jit_trac": 570, "pytorch_jit_script_ofi": 570, "pytorch_jit_trace_ofi": 570, "torchdynamo": 570, "pytorch_torchdynamo_jit_script": 570, "pytorch_torchdynamo_jit_trac": 570, "pytorch_torchdynamo_jit_script_ofi": 570, "pytorch_torchdynamo_jit_trace_ofi": 570, "pytorch_inc_bf16": 570, "pytorch_inc_static_quant_fx": 570, "pytorch_inc_static_quant_ipex": 570, "pytorch_inc_dynamic_qu": 570, "pytorch_ipex_fp32": 570, "pytorch_ipex_bf16": 570, "pytorch_ipex_int8_static_qu": 570, "pytorch_ipex_int8_dynamic_qu": 570, "blade": 570, "disc": 570, "pytorch_aliblad": 570, "pytorch_lightning_bf16_cpu": 570, "tensorflow_amp": 570, "keras_amp": 570, "tensorflow_inc": 570, "keras_inc": 570, "onnx_inc_static_quant_qlinear": 570, "onnx_inc_static_quant_qdq": 570, "onnx_inc_dynamic_qu": 570, "optimum": [570, 571], "pytorch_inc_huggingface_optimum_stat": 570, "pytorch_inc_huggingface_optimum_dynam": 570, "intel_extension_for_transform": 570, "bigdl": [570, 571], "nano": [570, 571], "nano_": 570, "inc_auto": 570, "delight": 571, "announc": 571, "v": [571, 580, 595, 597], "500": 571, "innov": [571, 586, 596], "isa": 571, "xpu": 571, "delta": 571, "acc_delta": 571, "int8_acc": 571, "fp32_acc": 571, "ext": [573, 575, 577, 578, 579], "nodej": [573, 577], "jlpm": [573, 577], "pin": [573, 577], "yarn": [573, 577], "npm": [573, 574, 577], "lieu": [573, 577], "labextens": [573, 574, 577], "typescript": [573, 577], "watch": [573, 577], "termin": [573, 574, 577], "immedi": [573, 577, 585], "refresh": [573, 577], "wait": [573, 577, 580], "rebuilt": [573, 577], "symlink": [573, 577], "down": 574, "enter": [574, 580], "blank": 574, "cell": 574, "gain": [574, 583, 586], "mkl": 574, "jemalloc": 574, "pip3": 574, "headless": 574, "pyproject": [575, 578], "toml": [575, 578], "twine": [575, 578], "whl": [575, 578], "dist": [575, 578], "sdist": [575, 578], "bdist_wheel": [575, 578], "frontend": [575, 578], "login": [575, 578, 591], "cut": [575, 578], "fork": [575, 578], "admin_github_token": [575, 578], "pypi_token": [575, 578], "npm_token": [575, 578], "secret": [575, 578], "draft": [575, 578], "changelog": [575, 578, 579], "pkg": [575, 578], "bot": [575, 578], "pick": [575, 578, 581], "feedstock": [575, 578], "hatch": 578, "notabl": 579, "vscode": [579, 581], "daili": 580, "give": [580, 595], "advantag": [580, 585, 587, 595], "remot": 580, "market": 580, "upper": 580, "sidebar": 580, "hover": 580, "track": [580, 591], "argpars": 580, "diff": 580, "manifest": 581, "declar": 581, "palett": 581, "registercommand": 581, "amodio": 581, "tsl": 581, "matcher": 581, "dbaeumer": 581, "eslint": 581, "press": 581, "f5": 581, "ctrl": [581, 598], "cmd": 581, "hello": 581, "world": 581, "breakpoint": 581, "consol": 581, "relaunch": 581, "toolbar": 581, "node_modul": 581, "viewlet": 581, "dropdown": 581, "runner": 581, "startup": 581, "bundl": 581, "multi_object": 582, "benefit": [583, 585], "instanti": 583, "platinum": [584, 598], "8358": 584, "manufactur": 584, "m50cyp2sbstd": 584, "se5c620": 584, "86b": 584, "0005": 584, "2202160810": 584, "microcod": 584, "0xd000332": 584, "irq": 584, "60ghz": 584, "6chz": 584, "perf": 584, "512gb": 584, "16x32gb": 584, "ddr4": 584, "3200": 584, "mt": 584, "nic": 584, "1x": 584, "ethernet": 584, "100mb": 584, "i350": 584, "gigabit": 584, "drive": 584, "intel_ssdsckkb48": 584, "447": 584, "1g": 584, "factor": [584, 592, 598], "publicli": 584, "degre": 584, "mark": 584, "trademark": 584, "art": 585, "increasingli": 585, "crucial": 585, "salient": 585, "nonzero": 585, "irregular": 585, "anywher": 585, "2in4": 585, "amper": 585, "delet": 585, "due": [585, 588, 592, 593], "oc": 585, "kh": 585, "kw": 585, "shrink": 585, "channelx1": 585, "1xchannel": 585, "particular": 585, "examin": 585, "lowest": [585, 595], "head": 585, "fastform": 585, "formula": [585, 592], "emsp": 585, "partial": [585, 588], "downstream": 585, "co": 585, "cube": 585, "discourag": 585, "push": 585, "penal": 585, "l2": 585, "parameter": 585, "exemplifi": 585, "complement": 585, "pruner1": 585, "pruner2": 585, "snip_momentum_progress": 585, "mention": 585, "cv": 585, "readi": 585, "hesit": 585, "sst": [585, 598], "flan": 585, "t5": 585, "english": 585, "romanian": 585, "yolov5": 585, "signific": [585, 586, 588, 592], "reduct": [585, 597], "namhoon": 585, "lee": 585, "thalaiyasingam": 585, "ajanthan": 585, "philip": 585, "torr": 585, "2019": 585, "zafrir": 585, "ofir": 585, "ariel": 585, "larei": 585, "boudoukh": 585, "mosh": 585, "wasserblat": 585, "preprint": 585, "2111": 585, "05754": 585, "2021": 585, "medium": 586, "mleffici": 586, "dec": 586, "wechat": 586, "deepen": 586, "foundat": 586, "intellig": 586, "vmware": 586, "virtual": 586, "applianc": 586, "bitnami": 586, "nov": 586, "sota": 586, "plug": 586, "twitter": 586, "linkedin": 586, "zone": 586, "land": 586, "gcp": 586, "pat": 586, "keynot": 586, "intelon": 586, "sep": 586, "chines": 586, "aug": 586, "purif": 586, "sacrif": 586, "jun": 586, "partner": 586, "apr": 586, "feb": 586, "joint": 586, "msft": 586, "bilibili": 586, "gestalt": 586, "ml": 586, "doubl": 586, "mlperf": [586, 598], "reconstruct": 586, "abound": 586, "nextplatform": 586, "cern": 586, "gan": 586, "3dgan": 586, "iml": 586, "workshop": 586, "asplo": 586, "18": [586, 592, 598], "highli": 586, "intelcaff": 586, "aris": 587, "tell": 587, "henc": 587, "onnxrt_qoper": 587, "quant_aware_train": 587, "weight_compress": [587, 597], "initial_spars": [587, 597], "prune_typ": [587, 597], "basic_magnitud": [587, 597], "update_frequ": 587, "prune_domain": 587, "tile_pattern_1x1": 587, "graph_optimization_level": [587, 588], "disable_al": 587, "invent": 588, "int4": 588, "cost": 588, "theoret": 588, "affin": [588, 592], "zeropoint": 588, "asymmetr": [588, 592, 595], "255": 588, "overflow": 588, "solv": [588, 590], "fbgemm": 588, "unseen": 588, "enough": 588, "peopl": 588, "mimic": 588, "fact": 588, "ultim": 588, "pain": 588, "lossi": 588, "understand": [588, 593, 596], "philosophi": 588, "won": 588, "neither": 588, "nor": 588, "val_load": 588, "top1": [588, 598], "avg": 588, "conv1": [588, 597], "smooth_quant_arg": 588, "first_conv_or_matmul_quant": 588, "last_conv_or_matmul_quant": 588, "pre_post_process_quant": 588, "gemm_to_matmul": 588, "themselv": 588, "tensorrtexecutionprovid": 588, "onnxrt_trt_ep": 588, "cudaexecutionprovid": 588, "ON": 589, "forc": 589, "postposttrainingquantconfig": 589, "bf16wrapper": 589, "retrac": 589, "site": 590, "assist": 590, "comparison": [590, 593], "sed": 590, "your_script": 590, "backbon": 591, "interact": 591, "sigopt_experiment_id": 591, "nc": [591, 595], "certain": 591, "suffici": 591, "ordinari": 591, "capac": 591, "receiv": 591, "latenc": [591, 595], "draw": [591, 595], "mobilenet": [591, 598], "durat": 591, "8266": 591, "8372": 591, "2132": 591, "83": [591, 592, 598], "7495": 591, "8299": 591, "8294": 591, "85": [591, 598], "0837": 591, "8291": 591, "4469": 591, "llm": 592, "gigant": 592, "systemat": 592, "outlier": 592, "quantif": 592, "difficulti": 592, "mathemat": 592, "especi": 592, "harder": 592, "uniform": 592, "flat": 592, "amongst": 592, "divid": [592, 595], "mathbb": 592, "xdiag": 592, "cdot": 592, "diag": 592, "hat": 592, "hyper": [592, 597], "strength": 592, "bloom": 592, "bigger": 592, "75": [592, 598], "bigscienc": 592, "560m": 592, "65": [592, 598], "96": [592, 598], "66": [592, 598], "1b7": 592, "71": [592, 598], "55": [592, 598], "67": [592, 598], "61": [592, 598], "72": [592, 598], "81": [592, 598], "3b": 592, "74": [592, 598], "06": [592, 597, 598], "70": [592, 598], "73": [592, 598], "7b1": 592, "77": [592, 598], "59": [592, 598], "76": [592, 598], "176b": 592, "84": [592, 598], "82": [592, 598], "facebook": 592, "125m": 592, "63": [592, 598], "89": [592, 598], "54": [592, 597, 598], "91": [592, 598], "7b": 592, "90": [592, 597, 598], "78": [592, 594, 598], "99": [592, 598], "51": [592, 598], "79": [592, 593, 598], "44": [592, 598], "58": [592, 598], "eleutherai": 592, "6b": 592, "discov": 593, "why": 593, "valuabl": 593, "instrument": 593, "writer": 593, "_pre_eval_hook": 593, "_post_eval_hook": 593, "submodul": 593, "whitelist": 593, "_recordingobserv": 593, "output_tensors_dict": 593, "current_it": 593, "get_tensor_valu": 593, "_observer_forward_hook": 593, "activation_post_process": 593, "_add_observer_": 593, "named_children": 593, "leaf": 593, "add_modul": 593, "register_forward_hook": 593, "dump_tim": 593, "summarywrit": 593, "_acc": 593, "tune_": 593, "add_graph": 593, "get_observer_dict": 593, "observer_dict": 593, "is_quant": 593, "add_histogram": 593, "bind_al": 593, "logdir_spec": 593, "tune_0_acc0": 593, "tune_1": 593, "tune_1_acc0": 593, "four": 593, "baseline_acc_0": 593, "776": 593, "tune_1_acc_0": 593, "095": 593, "runs_v3": 593, "image_recognit": 593, "run_tuning_dump_tensor": 593, "sh": 593, "inceptionv3": 593, "v0": 593, "cg": 593, "conv0": 593, "bash": 593, "run_tun": 593, "topologi": 593, "inception_v3": 593, "dataset_loc": 593, "inceptionv3_fp32_pretrained_model": 593, "nc_inceptionv3": 593, "inceptionv3_dump_tensor": 593, "poor": 593, "eightbit": 593, "disappear": 593, "centercrop": 594, "randomcrop": 594, "cropres": 594, "decodeimag": 594, "jpeg": 594, "encodejp": 594, "alignimagechannel": 594, "68": [594, 598], "116": 594, "103": 594, "94": [594, 598], "017": 594, "bilinearimagenet": [594, 597], "topilimag": 594, "padding_mod": 594, "border": 594, "pixel": 594, "colorjitt": 594, "bright": 594, "satur": 594, "hue": 594, "jitter": 594, "tondarrai": 594, "quickli": [595, 596], "travers": 595, "human": 595, "finer": 595, "tri": 595, "insight": 595, "aggress": 595, "classic": 595, "six": 595, "At": 595, "ii": 595, "iii": 595, "post_training_auto_qu": 595, "iv": 595, "vi": 595, "increment": 595, "primari": 595, "highest": 595, "spent": 595, "hawq_v2_loss": 595, "model_loss": 595, "black": 595, "come": 595, "discret": 595, "compli": 595, "posterior": 595, "focu": 595, "short": 595, "never": 595, "loglevel": 595, "endlessli": 595, "perspect": 595, "smbo": 595, "trial": 595, "appl": 595, "surrog": 595, "repeat": 595, "entropi": 595, "quantil": 595, "x1": 595, "x2": 595, "densiti": 595, "parzen": 595, "greatest": 595, "dai": 595, "next_tune_cfg": 595, "overridden": 595, "cluster": 595, "seamlessli": 595, "mpi": 595, "replic": 595, "replica": 595, "fed": 595, "handler": 595, "synchron": 595, "slave": 595, "abctunestrategi": 595, "familiar": 596, "mobilenet_v1": 597, "subsect": 597, "40": [597, 598], "beta_1": 597, "beta_2": 597, "999": [597, 598], "epsilon": 597, "sparsecategoricalcrossentropi": 597, "sum_over_batch_s": 597, "from_logit": 597, "19": [597, 598], "overal": 597, "8380": 598, "performancethroughput": 598, "sec": 598, "86": 598, "00": 598, "170": 598, "93": 598, "69": 598, "82x": 598, "92": 598, "39": 598, "85x": 598, "83x": 598, "densenet": 598, "121": 598, "274": 598, "148": 598, "161": 598, "132": 598, "35": 598, "39x": 598, "169": 598, "38": 598, "36": 598, "191": 598, "118": 598, "61x": 598, "cnn": 598, "incept": 598, "37": 598, "84x": 598, "resnet101": 598, "57": 598, "25": 598, "21x": 598, "43": 598, "70x": 598, "26": 598, "14x": 598, "139": 598, "955": 598, "328": 598, "91x": 598, "709": 598, "282": 598, "51x": 598, "v3": 598, "337": 598, "160": 598, "11x": 598, "438": 598, "204": 598, "223": 598, "02": 598, "105": 598, "12x": 598, "10x": 598, "47": 598, "1347": 598, "439": 598, "07x": 598, "56": 598, "1192": 598, "492": 598, "42x": 598, "412": 598, "376": 598, "662": 598, "397": 598, "66x": 598, "299": 598, "23": 598, "154": 598, "93x": 598, "476": 598, "227": 598, "fashion": 598, "2734": 598, "1299": 598, "498": 598, "178": 598, "79x": 598, "46": 598, "427": 598, "173": 598, "47x": 598, "resnetv2": 598, "194": 598, "146": 598, "33x": 598, "48": 598, "237": 598, "187": 598, "27x": 598, "152": 598, "155": 598, "38x": 598, "302": 598, "215": 598, "40x": 598, "346": 598, "312": 598, "277": 598, "60x": 598, "273": 598, "31x": 598, "18x": 598, "53x": 598, "24x": 598, "vgg16": 598, "219": 598, "vgg19": 598, "193": 598, "11506": 598, "9665": 598, "19x": 598, "xception": 598, "262": 598, "137": 598, "barthez": 598, "143": 598, "02x": 598, "20x": 598, "209": 598, "08x": 598, "221": 598, "stsb": 598, "218": 598, "16x": 598, "62": 598, "57x": 598, "55x": 598, "56x": 598, "53": 598, "89x": 598, "blendcnn": 598, "4885": 598, "60": 598, "3715": 598, "camembert": 598, "206": 598, "09x": 598, "deberta": 598, "125": 598, "366": 598, "197": 598, "399": 598, "flaubert": 598, "592": 598, "385": 598, "54x": 598, "wikitext": 598, "hubert": 598, "446": 598, "181": 598, "46x": 598, "layoutlm": 598, "longform": 598, "49": 598, "mbart": 598, "625": 598, "451": 598, "lvwerra": 598, "pegasu": 598, "samsum": 598, "peleenet": 598, "402": 598, "29x": 598, "pokemon": 598, "275": 598, "334": 598, "48x": 598, "reform": 598, "crime": 598, "punish": 598, "162": 598, "153": 598, "06x": 598, "657": 598, "327": 598, "01x": 598, "812": 598, "344": 598, "36x": 598, "360": 598, "23x": 598, "resnext101": 598, "32x8d": 598, "182": 598, "207": 598, "squeezebert": 598, "195": 598, "150": 598, "30x": 598, "75x": 598, "transfo": 598, "xl": 598, "41x": 598, "wave2vec2": 598, "22x": 598, "102": 598, "00x": 598, "115": 598, "17x": 598, "yolo": 598, "232": 598, "28x": 598, "664": 598, "329": 598, "832": 598, "338": 598, "433": 598, "164": 598, "63x": 598, "836": 598, "1396": 598, "463": 598, "90x": 598, "159": 598, "32x": 598, "968": 598, "473": 598, "05x": 598, "958": 598, "477": 598, "arcfac": 598, "126": 598, "78x": 598, "298": 598, "124": 598, "624": 598, "254": 598, "45x": 598, "caffenet": 598, "1432": 598, "540": 598, "65x": 598, "1460": 598, "357": 598, "265": 598, "35x": 598, "86x": 598, "524": 598, "duc": 598, "efficientnet": 598, "1211": 598, "758": 598, "856": 598, "762": 598, "emot": 598, "ferplu": 598, "925": 598, "694": 598, "fcn": 598, "25x": 598, "googlenet": 598, "771": 598, "571": 598, "763": 598, "579": 598, "hf": 598, "156": 598, "multilingu": 598, "99x": 598, "199": 598, "104": 598, "73x": 598, "449": 598, "74x": 598, "l12": 598, "h384": 598, "466": 598, "247": 598, "88x": 598, "l6": 598, "523": 598, "354": 598, "183": 598, "107": 598, "spanbert": 598, "208": 598, "795": 598, "780": 598, "591": 598, "515": 598, "15x": 598, "2370": 598, "1526": 598, "2216": 598, "1506": 598, "2078": 598, "1028": 598, "1762": 598, "76x": 598, "mobilenetv2": 598, "2615": 598, "1645": 598, "59x": 598, "2461": 598, "1674": 598, "766": 598, "431": 598, "77x": 598, "575": 598, "430": 598, "34x": 598, "747": 598, "564": 598, "594": 598, "590": 598, "643": 598, "253": 598, "shufflenet": 598, "2354": 598, "1461": 598, "1850": 598, "1368": 598, "squeezenet": 598, "2484": 598, "1912": 598, "2526": 598, "1911": 598, "710": 598, "549": 598, "622": 598, "497": 598, "652": 598, "507": 598, "573": 598, "470": 598, "527": 598, "396": 598, "68x": 598, "tini": 598, "647": 598, "514": 598, "26x": 598, "ultrafac": 598, "314": 598, "50x": 598, "304": 598, "316": 598, "315": 598, "119": 598, "zfnet": 598, "462": 598, "268": 598, "72x": 598, "465": 598, "62x": 598, "436": 598, "270": 598, "429": 598, "92x": 598, "94x": 598, "331": 598, "242": 598, "37x": 598, "98x": 598, "taskdataset": 598, "accuracyspars": 598, "ratiospars": 598, "commentsbalanc": 598, "unbalanc": 598, "mini": 598, "answeringsquad": 598, "87f1": 598, "momentumunbalanc": 598, "momentumbalanc": 598, "90f1": 598, "59f1": 598, "23f1": 598, "classificationmrpc": 598, "52f1": 598, "26f1": 598, "classificationsst": 598, "61accuraci": 598, "recognitionimagenet": 598, "95top1": 598, "2x1": 598, "v5s6": 598, "detectioncoco": 598, "ap0": 598, "404": 598, "6ap0": 598, "393": 598, "584": 598, "34f1": 598, "lassounbalanc": 598, "classificationmnli": 598, "mm": 598, "allbalanc": 598, "32accuraci": 598, "sensitivitybalanc": 598, "classificationqqp": 598, "classificationqnli": 598, "54accuraci": 598, "em": 598, "7965": 598, "wideresnet40": 598, "9522": 598, "8178": 598, "0213": 598, "8235": 598, "027": 598, "5494": 598, "7153": 598, "5540": 598, "0046": 598, "5523": 598, "0029": 598, "vgg": 598, "bn": 598, "7022": 598, "7415": 598, "7025": 598, "0003": 598, "wip": 598, "6739": 598, "7399": 598, "6845": 598, "0106": 598, "7034": 598, "8382": 598, "bilstm": 598, "8314": 598, "9403": 598, "9048": 598, "0734": 598, "7323": 598, "8256": 598, "8084": 598, "8814": 598, "7442": 598, "8371": 598, "0119": 598, "0115": 598, "tinybert": 598, "8018": 598, "8044": 598, "8363": 598, "8411": 598, "8025": 598, "8074": 598, "0007": 598, "0030": 598, "8626": 598, "8213": 598, "9091": 598, "8782": 598, "8684": 598, "8259": 598, "0058": 598, "distilroberta": 598, "6057": 598, "6455": 598, "6187": 598, "0130": 598, "c6i": 598, "2xlarg": 598, "c6a": 598, "c6g": 598, "a100cuda": 598}, "objects": {"": [[0, 0, 0, "-", "644ec953a7dc_pruning_support"], [1, 0, 0, "-", "6ece06672ed3_v1_14"], [2, 0, 0, "-", "6f0d0f71d92e_v1_13"], [3, 0, 0, "-", "9e89549a08c8_v1_11"], [4, 0, 0, "-", "block_mask"], [5, 0, 0, "-", "env"], [286, 0, 0, "-", "neural_compressor"]], "6ece06672ed3_v1_14": [[1, 1, 1, "ece06672ed3_v1_14.update_dataloaders", "update_dataloaders"], [1, 1, 1, "ece06672ed3_v1_14.update_transformations", "update_transformations"]], "env": [[5, 1, 1, "", "run_migrations_offline"], [5, 1, 1, "", "run_migrations_online"]], "neural_compressor": [[7, 0, 0, "-", "adaptor"], [151, 0, 0, "-", "algorithm"], [154, 0, 0, "-", "benchmark"], [158, 0, 0, "-", "compression"], [168, 0, 0, "-", "conf"], [170, 0, 0, "-", "config"], [171, 0, 0, "-", "contrib"], [196, 0, 0, "-", "data"], [248, 0, 0, "-", "experimental"], [293, 0, 0, "-", "metric"], [295, 0, 0, "-", "mix_precision"], [297, 0, 0, "-", "model"], [305, 0, 0, "-", "objective"], [306, 0, 0, "-", "quantization"], [314, 0, 0, "-", "strategy"], [326, 0, 0, "-", "template"], [327, 0, 0, "-", "training"], [331, 0, 0, "-", "utils"], [473, 0, 0, "-", "ux"], [519, 0, 0, "-", "version"]], "neural_compressor.adaptor": [[6, 0, 0, "-", "adaptor"], [8, 0, 0, "-", "keras"], [11, 0, 0, "-", "keras_utils"], [13, 0, 0, "-", "mxnet"], [14, 0, 0, "-", "mxnet_utils"], [16, 0, 0, "-", "onnxrt"], [18, 0, 0, "-", "ox_utils"], [41, 0, 0, "-", "pytorch"], [42, 0, 0, "-", "query"], [43, 0, 0, "-", "tensorflow"], [107, 0, 0, "-", "tf_utils"], [145, 0, 0, "-", "torch_utils"]], "neural_compressor.adaptor.adaptor": [[6, 2, 1, "", "Adaptor"], [6, 1, 1, "", "adaptor_registry"]], "neural_compressor.adaptor.keras": [[8, 2, 1, "", "KerasAdaptor"]], "neural_compressor.adaptor.keras_utils": [[9, 0, 0, "-", "conv2d"], [10, 0, 0, "-", "dense"], [12, 0, 0, "-", "quantizer"]], "neural_compressor.adaptor.mxnet": [[13, 2, 1, "", "MxNetAdaptor"]], "neural_compressor.adaptor.mxnet_utils": [[15, 0, 0, "-", "util"]], "neural_compressor.adaptor.mxnet_utils.util": [[15, 2, 1, "", "CalibCollector"], [15, 2, 1, "", "CalibData"], [15, 2, 1, "", "CollectorBase"], [15, 2, 1, "", "DataIterLoader"], [15, 2, 1, "", "DataLoaderWrap"], [15, 2, 1, "", "NameCollector"], [15, 2, 1, "", "OpType"], [15, 2, 1, "", "TensorCollector"], [15, 1, 1, "", "amp_convert"], [15, 1, 1, "", "calib_model"], [15, 1, 1, "", "check_mx_version"], [15, 1, 1, "", "combine_capabilities"], [15, 1, 1, "", "create_data_example"], [15, 1, 1, "", "distribute_calib_tensors"], [15, 1, 1, "", "ensure_list"], [15, 1, 1, "", "fuse"], [15, 1, 1, "", "get_framework_name"], [15, 1, 1, "", "is_model_quantized"], [15, 1, 1, "", "isiterable"], [15, 1, 1, "", "make_module"], [15, 1, 1, "", "make_nc_model"], [15, 1, 1, "", "make_symbol_block"], [15, 1, 1, "", "ndarray_to_device"], [15, 1, 1, "", "parse_tune_config"], [15, 1, 1, "", "prepare_dataloader"], [15, 1, 1, "", "prepare_model"], [15, 1, 1, "", "prepare_model_data"], [15, 1, 1, "", "quantize_sym_model"], [15, 1, 1, "", "query_quantizable_nodes"], [15, 1, 1, "", "run_forward"]], "neural_compressor.adaptor.onnxrt": [[16, 2, 1, "", "ONNXRT_IntegerOpsAdaptor"], [16, 2, 1, "", "ONNXRT_QDQAdaptor"], [16, 2, 1, "", "ONNXRT_QLinearOpsAdaptor"], [16, 2, 1, "", "ONNXRUNTIMEAdaptor"]], "neural_compressor.adaptor.ox_utils": [[17, 0, 0, "-", "calibration"], [30, 0, 0, "-", "operators"], [39, 0, 0, "-", "quantizer"], [40, 0, 0, "-", "util"]], "neural_compressor.adaptor.ox_utils.calibration": [[17, 2, 1, "", "ONNXRTAugment"]], "neural_compressor.adaptor.ox_utils.operators": [[19, 0, 0, "-", "activation"], [20, 0, 0, "-", "argmax"], [21, 0, 0, "-", "attention"], [22, 0, 0, "-", "binary_op"], [23, 0, 0, "-", "concat"], [24, 0, 0, "-", "conv"], [25, 0, 0, "-", "direct_q8"], [26, 0, 0, "-", "embed_layernorm"], [27, 0, 0, "-", "gather"], [28, 0, 0, "-", "gavgpool"], [29, 0, 0, "-", "gemm"], [31, 0, 0, "-", "lstm"], [32, 0, 0, "-", "matmul"], [33, 0, 0, "-", "maxpool"], [34, 0, 0, "-", "ops"], [35, 0, 0, "-", "pad"], [36, 0, 0, "-", "pooling"], [37, 0, 0, "-", "resize"], [38, 0, 0, "-", "split"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[19, 2, 1, "", "ActivationOperator"], [19, 2, 1, "", "QActivationOperator"], [19, 2, 1, "", "RemovableActivationOperator"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[20, 2, 1, "", "ArgMaxOperator"], [20, 2, 1, "", "QArgMaxOperator"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[21, 2, 1, "", "AttentionOperator"], [21, 2, 1, "", "QAttentionOperator"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[22, 2, 1, "", "BinaryOperator"], [22, 2, 1, "", "QBinaryOperator"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[23, 2, 1, "", "ConcatOperator"], [23, 2, 1, "", "QConcatOperator"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[24, 2, 1, "", "ConvOperator"], [24, 2, 1, "", "QConvOperator"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[25, 2, 1, "", "Direct8BitOperator"], [25, 2, 1, "", "QDirectOperator"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[26, 2, 1, "", "EmbedLayerNormalizationOperator"], [26, 2, 1, "", "QEmbedLayerNormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[27, 2, 1, "", "GatherOperator"], [27, 2, 1, "", "QGatherOperator"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[28, 2, 1, "", "GlobalAveragePoolOperator"], [28, 2, 1, "", "QGlobalAveragePoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[29, 2, 1, "", "GemmOperator"], [29, 2, 1, "", "QGemmOperator"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[31, 2, 1, "", "LSTMOperator"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[32, 2, 1, "", "MatMulOperator"], [32, 2, 1, "", "QMatMulOperator"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[33, 2, 1, "", "MaxPoolOperator"], [33, 2, 1, "", "QMaxPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[34, 2, 1, "", "Operator"], [34, 2, 1, "", "QOperator"], [34, 1, 1, "", "op_registry"], [34, 1, 1, "", "qop_registry"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[35, 2, 1, "", "PadOperator"], [35, 2, 1, "", "QPadOperator"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[36, 2, 1, "", "PoolOperator"], [36, 2, 1, "", "QPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[37, 2, 1, "", "QResizeOperator"], [37, 2, 1, "", "ResizeOperator"]], "neural_compressor.adaptor.ox_utils.operators.split": [[38, 2, 1, "", "QSplitOperator"], [38, 2, 1, "", "SplitOperator"]], "neural_compressor.adaptor.ox_utils.quantizer": [[39, 2, 1, "", "Quantizer"]], "neural_compressor.adaptor.ox_utils.util": [[40, 2, 1, "", "QuantFormat"], [40, 2, 1, "", "QuantType"], [40, 2, 1, "", "QuantizationMode"], [40, 2, 1, "", "QuantizedInitializer"], [40, 2, 1, "", "QuantizedValue"], [40, 2, 1, "", "QuantizedValueType"], [40, 2, 1, "", "ValueInfo"], [40, 1, 1, "", "adjust_weights_per_input"], [40, 1, 1, "", "adjust_weights_per_op"], [40, 1, 1, "", "attribute_to_kwarg"], [40, 1, 1, "", "calculate_scale_zp"], [40, 1, 1, "", "cast_tensor"], [40, 1, 1, "", "collate_preds"], [40, 1, 1, "", "dequantize_data"], [40, 1, 1, "", "dequantize_data_with_scale_zero"], [40, 1, 1, "", "dtype_to_name"], [40, 1, 1, "", "find_by_name"], [40, 1, 1, "", "float_to_bfloat16"], [40, 1, 1, "", "float_to_float16"], [40, 1, 1, "", "get_smooth_scales_per_input"], [40, 1, 1, "", "get_smooth_scales_per_op"], [40, 1, 1, "", "insert_smooth_mul_op_per_input"], [40, 1, 1, "", "insert_smooth_mul_op_per_op"], [40, 1, 1, "", "is_B_transposed"], [40, 1, 1, "", "make_dquant_node"], [40, 1, 1, "", "make_quant_node"], [40, 1, 1, "", "quantize_data"], [40, 1, 1, "", "quantize_data_per_channel"], [40, 1, 1, "", "quantize_data_with_scale_zero"], [40, 1, 1, "", "quantize_nparray"], [40, 1, 1, "", "remove_init_from_model_input"], [40, 1, 1, "", "split_shared_bias"], [40, 1, 1, "", "trt_env_setup"]], "neural_compressor.adaptor.pytorch": [[41, 2, 1, "", "PyTorchAdaptor"], [41, 2, 1, "", "PyTorch_FXAdaptor"], [41, 2, 1, "", "PyTorch_IPEXAdaptor"], [41, 2, 1, "", "TemplateAdaptor"], [41, 1, 1, "", "get_ops_recursively"]], "neural_compressor.adaptor.query": [[42, 2, 1, "", "QueryBackendCapability"]], "neural_compressor.adaptor.tensorflow": [[43, 2, 1, "", "TensorFlowAdaptor"], [43, 2, 1, "", "TensorflowQuery"], [43, 2, 1, "", "Tensorflow_ITEXAdaptor"]], "neural_compressor.adaptor.tf_utils": [[44, 0, 0, "-", "graph_converter"], [45, 0, 0, "-", "graph_converter_without_calib"], [83, 0, 0, "-", "graph_rewriter"], [106, 0, 0, "-", "graph_util"], [108, 0, 0, "-", "quantize_graph"], [135, 0, 0, "-", "quantize_graph_common"], [136, 0, 0, "-", "tf2onnx_converter"], [139, 0, 0, "-", "transform_graph"], [142, 0, 0, "-", "util"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[44, 2, 1, "", "GraphConverter"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[45, 2, 1, "", "GraphConverterWithoutCalib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[47, 0, 0, "-", "bf16"], [72, 0, 0, "-", "generic"], [82, 0, 0, "-", "graph_base"], [91, 0, 0, "-", "int8"], [97, 0, 0, "-", "onnx"], [102, 0, 0, "-", "qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[46, 0, 0, "-", "bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[46, 2, 1, "", "BF16Convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[48, 0, 0, "-", "convert_add_to_biasadd"], [49, 0, 0, "-", "convert_layout"], [50, 0, 0, "-", "convert_leakyrelu"], [51, 0, 0, "-", "convert_nan_to_random"], [52, 0, 0, "-", "convert_placeholder_to_const"], [53, 0, 0, "-", "dequantize_cast_optimizer"], [54, 0, 0, "-", "dilated_contraction"], [55, 0, 0, "-", "dummy_biasadd"], [56, 0, 0, "-", "expanddims_optimizer"], [57, 0, 0, "-", "fetch_weight_from_reshape"], [58, 0, 0, "-", "fold_batch_norm"], [59, 0, 0, "-", "fold_constant"], [60, 0, 0, "-", "fuse_biasadd_add"], [61, 0, 0, "-", "fuse_column_wise_mul"], [62, 0, 0, "-", "fuse_conv_with_math"], [63, 0, 0, "-", "fuse_decomposed_bn"], [64, 0, 0, "-", "fuse_decomposed_in"], [65, 0, 0, "-", "fuse_gelu"], [66, 0, 0, "-", "fuse_layer_norm"], [67, 0, 0, "-", "fuse_pad_with_conv"], [68, 0, 0, "-", "fuse_pad_with_fp32_conv"], [69, 0, 0, "-", "fuse_reshape_transpose"], [70, 0, 0, "-", "graph_cse_optimizer"], [71, 0, 0, "-", "grappler_pass"], [73, 0, 0, "-", "insert_print_node"], [74, 0, 0, "-", "move_squeeze_after_relu"], [75, 0, 0, "-", "pre_optimize"], [76, 0, 0, "-", "remove_training_nodes"], [77, 0, 0, "-", "rename_batch_norm"], [78, 0, 0, "-", "split_shared_input"], [79, 0, 0, "-", "strip_equivalent_nodes"], [80, 0, 0, "-", "strip_unused_nodes"], [81, 0, 0, "-", "switch_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[48, 2, 1, "", "ConvertAddToBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[49, 2, 1, "", "ConvertLayoutOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[50, 2, 1, "", "ConvertLeakyReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[51, 2, 1, "", "ConvertNanToRandom"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[52, 2, 1, "", "ConvertPlaceholderToConst"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[53, 2, 1, "", "DequantizeCastOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[54, 2, 1, "", "DilatedContraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[55, 2, 1, "", "InjectDummyBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[56, 2, 1, "", "ExpandDimsOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[57, 2, 1, "", "FetchWeightFromReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[58, 2, 1, "", "FoldBatchNormNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[59, 2, 1, "", "GraphFoldConstantOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[60, 2, 1, "", "FuseBiasAddAndAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[61, 2, 1, "", "FuseColumnWiseMulOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[62, 2, 1, "", "FuseConvWithMathOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[63, 2, 1, "", "FuseDecomposedBNOptimizer"], [63, 1, 1, "", "bypass_reshape"], [63, 1, 1, "", "get_const_dim_count"], [63, 1, 1, "", "node_from_map"], [63, 1, 1, "", "node_name_from_input"], [63, 1, 1, "", "valid_reshape_inputs"], [63, 1, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[64, 2, 1, "", "FuseDecomposedINOptimizer"], [64, 1, 1, "", "bypass_reshape"], [64, 1, 1, "", "get_const_dim_count"], [64, 1, 1, "", "node_from_map"], [64, 1, 1, "", "node_name_from_input"], [64, 1, 1, "", "valid_reshape_inputs"], [64, 1, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[65, 2, 1, "", "FuseGeluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[66, 2, 1, "", "FuseLayerNormOptimizer"], [66, 1, 1, "", "node_from_map"], [66, 1, 1, "", "node_name_from_input"], [66, 1, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[67, 2, 1, "", "FusePadWithConv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[68, 2, 1, "", "FusePadWithFP32Conv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[69, 2, 1, "", "FuseTransposeReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[70, 2, 1, "", "GraphCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[71, 2, 1, "", "GrapplerOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[73, 2, 1, "", "InsertPrintMinMaxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[74, 2, 1, "", "MoveSqueezeAfterReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[75, 2, 1, "", "PreOptimization"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[76, 2, 1, "", "RemoveTrainingNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[77, 2, 1, "", "RenameBatchNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[78, 2, 1, "", "SplitSharedInputOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[79, 2, 1, "", "StripEquivalentNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[80, 2, 1, "", "StripUnusedNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[81, 2, 1, "", "SwitchOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[82, 2, 1, "", "GraphRewriterBase"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[84, 0, 0, "-", "freeze_fake_quant"], [85, 0, 0, "-", "freeze_value"], [86, 0, 0, "-", "freeze_value_without_calib"], [87, 0, 0, "-", "fuse_conv_redundant_dequantize"], [88, 0, 0, "-", "fuse_conv_requantize"], [89, 0, 0, "-", "fuse_matmul_redundant_dequantize"], [90, 0, 0, "-", "fuse_matmul_requantize"], [92, 0, 0, "-", "meta_op_optimizer"], [93, 0, 0, "-", "post_hostconst_converter"], [94, 0, 0, "-", "post_quantized_op_cse"], [95, 0, 0, "-", "rnn_convert"], [96, 0, 0, "-", "scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[84, 2, 1, "", "FreezeFakeQuantOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[85, 2, 1, "", "FreezeValueTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[86, 2, 1, "", "FreezeValueWithoutCalibTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[87, 2, 1, "", "FuseConvRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[88, 2, 1, "", "FuseConvRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[89, 2, 1, "", "FuseMatMulRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[90, 2, 1, "", "FuseMatMulRequantizeDequantizeNewAPITransformer"], [90, 2, 1, "", "FuseMatMulRequantizeDequantizeTransformer"], [90, 2, 1, "", "FuseMatMulRequantizeNewAPITransformer"], [90, 2, 1, "", "FuseMatMulRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[92, 2, 1, "", "MetaInfoChangingMemOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[93, 2, 1, "", "PostHostConstConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[94, 2, 1, "", "PostCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[95, 2, 1, "", "QuantizedRNNConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[96, 2, 1, "", "ScaleProPagationTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[98, 0, 0, "-", "onnx_graph"], [99, 0, 0, "-", "onnx_node"], [100, 0, 0, "-", "onnx_schema"], [101, 0, 0, "-", "tf2onnx_utils"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[98, 2, 1, "", "OnnxGraph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[99, 2, 1, "", "OnnxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[100, 2, 1, "", "OnnxOpSchema"], [100, 1, 1, "", "get_max_supported_opset_version"], [100, 1, 1, "", "get_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[101, 2, 1, "", "SeqType"], [101, 1, 1, "", "add_port_to_name"], [101, 1, 1, "", "are_shapes_equal"], [101, 1, 1, "", "assert_error"], [101, 1, 1, "", "compute_const_folding_using_tf"], [101, 1, 1, "", "convert_tensorflow_tensor_to_onnx"], [101, 1, 1, "", "find_opset"], [101, 1, 1, "", "get_index_from_strided_slice_of_shape"], [101, 1, 1, "", "get_subgraphs_from_onnx"], [101, 1, 1, "", "get_tensorflow_node_attr"], [101, 1, 1, "", "get_tensorflow_node_shape_attr"], [101, 1, 1, "", "get_tensorflow_tensor_data"], [101, 1, 1, "", "get_tensorflow_tensor_shape"], [101, 1, 1, "", "infer_onnx_shape_dtype"], [101, 1, 1, "", "initialize_name_counter"], [101, 1, 1, "", "is_list_or_tuple"], [101, 1, 1, "", "is_onnx_domain"], [101, 1, 1, "", "make_onnx_inputs_outputs"], [101, 1, 1, "", "make_onnx_shape"], [101, 1, 1, "", "map_numpy_to_onnx_dtype"], [101, 1, 1, "", "map_onnx_to_numpy_type"], [101, 1, 1, "", "map_tensorflow_dtype"], [101, 1, 1, "", "read_tensorflow_node_attrs"], [101, 1, 1, "", "save_protobuf"], [101, 1, 1, "", "set_name"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[103, 0, 0, "-", "insert_qdq_pattern"], [104, 0, 0, "-", "merge_duplicated_qdq"], [105, 0, 0, "-", "share_qdq_y_pattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[103, 2, 1, "", "GenerateGraphWithQDQPattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[104, 2, 1, "", "MergeDuplicatedQDQOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[105, 2, 1, "", "ShareQDQForItexYPatternOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_util": [[106, 2, 1, "", "GraphAnalyzer"], [106, 2, 1, "", "GraphRewriterHelper"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[110, 0, 0, "-", "qat"], [126, 0, 0, "-", "qdq"], [128, 0, 0, "-", "quantize_graph_base"], [129, 0, 0, "-", "quantize_graph_bn"], [130, 0, 0, "-", "quantize_graph_concatv2"], [131, 0, 0, "-", "quantize_graph_conv"], [132, 0, 0, "-", "quantize_graph_for_intel_cpu"], [133, 0, 0, "-", "quantize_graph_matmul"], [134, 0, 0, "-", "quantize_graph_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[109, 0, 0, "-", "fake_quantize"], [111, 0, 0, "-", "quantize_config"], [112, 0, 0, "-", "quantize_helper"], [113, 0, 0, "-", "quantize_layers"], [118, 0, 0, "-", "quantize_wrapper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[109, 2, 1, "", "FakeQuantize"], [109, 2, 1, "", "FakeQuantizeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[111, 2, 1, "", "QuantizeConfig"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[112, 1, 1, "", "init_quantize_config"], [112, 1, 1, "", "qat_clone_function"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[114, 0, 0, "-", "optimize_layer"], [115, 0, 0, "-", "quantize_layer_add"], [116, 0, 0, "-", "quantize_layer_base"], [117, 0, 0, "-", "quantize_layer_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[114, 1, 1, "", "config_quantizable_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[115, 2, 1, "", "QuantizeLayerAdd"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[116, 2, 1, "", "QuantizeLayerBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[117, 2, 1, "", "QuantizeLayerBatchNormalization"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[118, 2, 1, "", "QuantizeWrapper"], [118, 2, 1, "", "QuantizeWrapperBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[119, 0, 0, "-", "fuse_qdq_bn"], [120, 0, 0, "-", "fuse_qdq_concatv2"], [121, 0, 0, "-", "fuse_qdq_conv"], [122, 0, 0, "-", "fuse_qdq_deconv"], [123, 0, 0, "-", "fuse_qdq_in"], [124, 0, 0, "-", "fuse_qdq_matmul"], [125, 0, 0, "-", "fuse_qdq_pooling"], [127, 0, 0, "-", "optimize_qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[119, 2, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[120, 2, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[121, 2, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[122, 2, 1, "", "FuseNodeStartWithDeconv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[123, 2, 1, "", "FuseNodeStartWithFusedInstanceNorm"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[124, 2, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[125, 2, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[127, 2, 1, "", "OptimizeQDQGraph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[128, 2, 1, "", "QuantizeGraphBase"], [128, 2, 1, "", "QuantizeNodeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[129, 2, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[130, 2, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[131, 2, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[132, 2, 1, "", "QuantizeGraphForIntel"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[133, 2, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[134, 2, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[135, 2, 1, "", "QuantizeGraphHelper"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[136, 2, 1, "", "TensorflowQDQToOnnxQDQConverter"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[137, 0, 0, "-", "bias_correction"], [138, 0, 0, "-", "graph_transform_base"], [140, 0, 0, "-", "insert_logging"], [141, 0, 0, "-", "rerange_quantized_concat"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[137, 2, 1, "", "BiasCorrection"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[138, 2, 1, "", "GraphTransformBase"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[140, 2, 1, "", "InsertLogging"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[141, 2, 1, "", "RerangeQuantizedConcat"]], "neural_compressor.adaptor.tf_utils.util": [[142, 1, 1, "", "collate_tf_preds"], [142, 1, 1, "", "disable_random"], [142, 1, 1, "", "fix_ref_type_of_graph_def"], [142, 1, 1, "", "generate_feed_dict"], [142, 1, 1, "", "get_estimator_graph"], [142, 1, 1, "", "get_graph_def"], [142, 1, 1, "", "get_input_output_node_names"], [142, 1, 1, "", "get_model_input_shape"], [142, 1, 1, "", "get_tensor_by_name"], [142, 1, 1, "", "get_tensor_val_from_graph_node"], [142, 1, 1, "", "int8_node_name_reverse"], [142, 1, 1, "", "is_ckpt_format"], [142, 1, 1, "", "is_saved_model_format"], [142, 1, 1, "", "iterator_sess_run"], [142, 1, 1, "", "read_graph"], [142, 1, 1, "", "strip_equivalent_nodes"], [142, 1, 1, "", "strip_unused_nodes"], [142, 1, 1, "", "tf_diagnosis_helper"], [142, 1, 1, "", "version1_eq_version2"], [142, 1, 1, "", "version1_gt_version2"], [142, 1, 1, "", "version1_gte_version2"], [142, 1, 1, "", "version1_lt_version2"], [142, 1, 1, "", "version1_lte_version2"], [142, 1, 1, "", "write_graph"]], "neural_compressor.adaptor.torch_utils": [[143, 0, 0, "-", "bf16_convert"], [144, 0, 0, "-", "hawq_metric"], [146, 0, 0, "-", "smooth_quant"], [147, 0, 0, "-", "symbolic_trace"], [148, 0, 0, "-", "util"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[143, 2, 1, "", "BF16ModuleWrapper"], [143, 1, 1, "", "Convert"], [143, 1, 1, "", "bf16_symbolic_trace"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[144, 2, 1, "", "HessianTrace"], [144, 2, 1, "", "Node_collector"], [144, 1, 1, "", "compare_weights"], [144, 1, 1, "", "hawq_top"]], "neural_compressor.adaptor.torch_utils.smooth_quant": [[146, 2, 1, "", "GraphTrace"], [146, 2, 1, "", "TorchSmoothQuant"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[147, 1, 1, "", "symbolic_trace"], [147, 1, 1, "", "trace_and_fuse_sub_graph"]], "neural_compressor.adaptor.torch_utils.util": [[148, 1, 1, "", "append_attr"], [148, 1, 1, "", "auto_copy"], [148, 1, 1, "", "check_cfg_and_qconfig"], [148, 1, 1, "", "collate_torch_preds"], [148, 1, 1, "", "fetch_module"], [148, 1, 1, "", "generate_activation_observer"], [148, 1, 1, "", "get_embedding_contiguous"], [148, 1, 1, "", "get_example_input"], [148, 1, 1, "", "get_fallback_order"], [148, 1, 1, "", "get_mse_order_per_fp32"], [148, 1, 1, "", "get_mse_order_per_int8"], [148, 1, 1, "", "get_quantizable_ops_from_cfgs"], [148, 1, 1, "", "get_torch_version"], [148, 1, 1, "", "input2tuple"], [148, 1, 1, "", "is_fused_module"], [148, 1, 1, "", "paser_cfgs"], [148, 1, 1, "", "set_module"], [148, 1, 1, "", "simple_inference"]], "neural_compressor.algorithm": [[149, 0, 0, "-", "algorithm"], [150, 0, 0, "-", "fast_bias_correction"], [152, 0, 0, "-", "smooth_quant"], [153, 0, 0, "-", "weight_correction"]], "neural_compressor.algorithm.algorithm": [[149, 2, 1, "", "ALGORITHMS"], [149, 2, 1, "", "Algorithm"], [149, 2, 1, "", "AlgorithmScheduler"], [149, 1, 1, "", "algorithm_registry"]], "neural_compressor.algorithm.fast_bias_correction": [[150, 2, 1, "", "FastBiasCorrection"]], "neural_compressor.algorithm.smooth_quant": [[152, 2, 1, "", "SmoothQuant"]], "neural_compressor.algorithm.weight_correction": [[153, 2, 1, "", "WeightCorrection"]], "neural_compressor.benchmark": [[154, 2, 1, "", "Benchmark"], [154, 1, 1, "", "fit"], [154, 1, 1, "", "get_architecture"], [154, 1, 1, "", "get_bounded_threads"], [154, 1, 1, "", "get_core_ids"], [154, 1, 1, "", "get_physical_ids"], [154, 1, 1, "", "get_threads"], [154, 1, 1, "", "get_threads_per_core"], [154, 1, 1, "", "set_all_env_var"], [154, 1, 1, "", "set_env_var"]], "neural_compressor.compression": [[155, 0, 0, "-", "callbacks"], [157, 0, 0, "-", "distillation"], [160, 0, 0, "-", "pruner"]], "neural_compressor.compression.callbacks": [[155, 2, 1, "", "BaseCallbacks"], [155, 2, 1, "", "DistillationCallbacks"], [155, 2, 1, "", "PruningCallbacks"], [155, 2, 1, "", "QuantizationAwareTrainingCallbacks"]], "neural_compressor.compression.callbacks.DistillationCallbacks": [[155, 3, 1, "", "_epoch_ran"], [155, 3, 1, "", "best_model"], [155, 3, 1, "", "best_score"], [155, 3, 1, "", "eval_frequency"]], "neural_compressor.compression.distillation": [[156, 0, 0, "-", "criterions"]], "neural_compressor.compression.distillation.criterions": [[156, 2, 1, "", "Criterions"], [156, 2, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [156, 2, 1, "", "KnowledgeDistillationFramework"], [156, 2, 1, "", "KnowledgeDistillationLoss"], [156, 2, 1, "", "PyTorchCriterions"], [156, 2, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLoss"], [156, 2, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"], [156, 2, 1, "", "PyTorchKnowledgeDistillationLoss"], [156, 2, 1, "", "PyTorchKnowledgeDistillationLossWrapper"], [156, 2, 1, "", "PyTorchSelfKnowledgeDistillationLoss"], [156, 2, 1, "", "PyTorchSelfKnowledgeDistillationLossWrapper"], [156, 2, 1, "", "SelfKnowledgeDistillationLoss"], [156, 2, 1, "", "TensorflowCriterions"], [156, 2, 1, "", "TensorflowKnowledgeDistillationLoss"], [156, 2, 1, "", "TensorflowKnowledgeDistillationLossExternal"], [156, 2, 1, "", "TensorflowKnowledgeDistillationLossWrapper"], [156, 1, 1, "", "criterion_registry"]], "neural_compressor.compression.pruner": [[159, 0, 0, "-", "criteria"], [161, 0, 0, "-", "patterns"], [162, 0, 0, "-", "pruners"], [163, 0, 0, "-", "regs"], [164, 0, 0, "-", "schedulers"], [165, 0, 0, "-", "utils"]], "neural_compressor.compression.pruner.criteria": [[159, 2, 1, "", "GradientCriterion"], [159, 2, 1, "", "MagnitudeCriterion"], [159, 2, 1, "", "PruningCriterion"], [159, 2, 1, "", "SnipCriterion"], [159, 2, 1, "", "SnipMomentumCriterion"], [159, 1, 1, "", "get_criterion"], [159, 1, 1, "", "register_criterion"]], "neural_compressor.compression.pruner.criteria.GradientCriterion": [[159, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.MagnitudeCriterion": [[159, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.PruningCriterion": [[159, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.SnipCriterion": [[159, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion": [[159, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.patterns": [[161, 2, 1, "", "BasePattern"], [161, 2, 1, "", "PatternNInM"], [161, 2, 1, "", "PatternNxM"], [161, 1, 1, "", "get_pattern"], [161, 1, 1, "", "register_pattern"]], "neural_compressor.compression.pruner.patterns.BasePattern": [[161, 3, 1, "", "config"], [161, 3, 1, "", "invalid_layers"], [161, 3, 1, "", "is_global"], [161, 3, 1, "", "keep_mask_layers"], [161, 3, 1, "", "max_sparsity_ratio_per_op"], [161, 3, 1, "", "min_sparsity_ratio_per_op"], [161, 3, 1, "", "modules"], [161, 3, 1, "", "pattern"], [161, 3, 1, "", "target_sparsity"]], "neural_compressor.compression.pruner.patterns.PatternNInM": [[161, 3, 1, "", "M"], [161, 3, 1, "", "N"]], "neural_compressor.compression.pruner.patterns.PatternNxM": [[161, 3, 1, "", "block_size"]], "neural_compressor.compression.pruner.pruners": [[162, 2, 1, "", "BasePruner"], [162, 2, 1, "", "BasicPruner"], [162, 2, 1, "", "PatternLockPruner"], [162, 2, 1, "", "ProgressivePruner"], [162, 1, 1, "", "get_pruner"], [162, 1, 1, "", "parse_valid_pruner_types"], [162, 1, 1, "", "register_pruner"]], "neural_compressor.compression.pruner.pruners.BasePruner": [[162, 3, 1, "", "config"], [162, 3, 1, "", "current_sparsity_ratio"], [162, 3, 1, "", "end_step"], [162, 3, 1, "", "global_step"], [162, 3, 1, "", "masks"], [162, 3, 1, "", "max_sparsity_ratio_per_op"], [162, 3, 1, "", "modules"], [162, 3, 1, "", "pattern"], [162, 3, 1, "", "pruning_frequency"], [162, 3, 1, "", "scheduler"], [162, 3, 1, "", "scores"], [162, 3, 1, "", "start_step"], [162, 3, 1, "", "target_sparsity_ratio"]], "neural_compressor.compression.pruner.pruners.BasicPruner": [[162, 3, 1, "", "criterion"], [162, 3, 1, "", "pattern"], [162, 3, 1, "", "reg"], [162, 3, 1, "", "scheduler"]], "neural_compressor.compression.pruner.regs": [[163, 2, 1, "", "BaseReg"], [163, 2, 1, "", "GroupLasso"], [163, 1, 1, "", "get_reg"], [163, 1, 1, "", "get_reg_type"], [163, 1, 1, "", "register_reg"]], "neural_compressor.compression.pruner.regs.GroupLasso": [[163, 3, 1, "", "alpha"], [163, 3, 1, "", "reg_terms"]], "neural_compressor.compression.pruner.schedulers": [[164, 2, 1, "", "IterativeScheduler"], [164, 2, 1, "", "OneshotScheduler"], [164, 2, 1, "", "PruningScheduler"], [164, 1, 1, "", "get_scheduler"], [164, 1, 1, "", "register_scheduler"]], "neural_compressor.compression.pruner.schedulers.PruningScheduler": [[164, 3, 1, "", "config"]], "neural_compressor.compression.pruner.utils": [[165, 1, 1, "", "check_config"], [165, 1, 1, "", "check_key_validity"], [165, 1, 1, "", "generate_pruner_config"], [165, 1, 1, "", "get_sparsity_ratio"], [165, 1, 1, "", "parse_to_prune"], [165, 1, 1, "", "process_and_check_config"], [165, 1, 1, "", "process_config"], [165, 1, 1, "", "process_weight_config"], [165, 1, 1, "", "process_yaml_config"], [165, 1, 1, "", "reset_none_to_default"], [165, 1, 1, "", "update_params"]], "neural_compressor.conf": [[166, 0, 0, "-", "config"], [167, 0, 0, "-", "dotdict"], [169, 0, 0, "-", "pythonic_config"]], "neural_compressor.conf.config": [[166, 2, 1, "", "Benchmark_Conf"], [166, 2, 1, "", "Conf"], [166, 2, 1, "", "Distillation_Conf"], [166, 2, 1, "", "Graph_Optimization_Conf"], [166, 2, 1, "", "MixedPrecision_Conf"], [166, 2, 1, "", "NASConfig"], [166, 2, 1, "", "PrunerV2"], [166, 2, 1, "", "Pruning_Conf"], [166, 2, 1, "", "Quantization_Conf"]], "neural_compressor.conf.dotdict": [[167, 2, 1, "", "DotDict"], [167, 1, 1, "", "deep_get"], [167, 1, 1, "", "deep_set"]], "neural_compressor.config": [[170, 2, 1, "", "AccuracyCriterion"], [170, 2, 1, "", "BenchmarkConfig"], [170, 2, 1, "", "DistillationConfig"], [170, 2, 1, "", "ExportConfig"], [170, 2, 1, "", "IntermediateLayersKnowledgeDistillationLossConfig"], [170, 2, 1, "", "KnowledgeDistillationLossConfig"], [170, 2, 1, "", "MixedPrecisionConfig"], [170, 2, 1, "", "ONNXQlinear2QDQConfig"], [170, 2, 1, "", "Options"], [170, 2, 1, "", "PostTrainingQuantConfig"], [170, 2, 1, "", "QuantizationAwareTrainingConfig"], [170, 2, 1, "", "SelfKnowledgeDistillationLossConfig"], [170, 2, 1, "", "TF2ONNXConfig"], [170, 2, 1, "", "Torch2ONNXConfig"], [170, 2, 1, "", "TuningCriterion"], [170, 2, 1, "", "WeightPruningConfig"], [170, 1, 1, "", "check_value"]], "neural_compressor.contrib": [[172, 0, 0, "-", "strategy"]], "neural_compressor.contrib.strategy": [[173, 0, 0, "-", "sigopt"], [174, 0, 0, "-", "tpe"]], "neural_compressor.contrib.strategy.sigopt": [[173, 2, 1, "", "SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.tpe": [[174, 2, 1, "", "TpeTuneStrategy"]], "neural_compressor.data": [[179, 0, 0, "-", "dataloaders"], [191, 0, 0, "-", "datasets"], [195, 0, 0, "-", "filters"], [199, 0, 0, "-", "transforms"]], "neural_compressor.data.dataloaders": [[175, 0, 0, "-", "base_dataloader"], [176, 0, 0, "-", "dataloader"], [177, 0, 0, "-", "default_dataloader"], [178, 0, 0, "-", "fetcher"], [180, 0, 0, "-", "mxnet_dataloader"], [181, 0, 0, "-", "onnxrt_dataloader"], [182, 0, 0, "-", "pytorch_dataloader"], [183, 0, 0, "-", "sampler"], [184, 0, 0, "-", "tensorflow_dataloader"]], "neural_compressor.data.dataloaders.base_dataloader": [[175, 2, 1, "", "BaseDataLoader"]], "neural_compressor.data.dataloaders.dataloader": [[176, 2, 1, "", "DataLoader"]], "neural_compressor.data.dataloaders.default_dataloader": [[177, 2, 1, "", "DefaultDataLoader"], [177, 1, 1, "", "default_collate"]], "neural_compressor.data.dataloaders.fetcher": [[178, 2, 1, "", "Fetcher"], [178, 2, 1, "", "IndexFetcher"], [178, 2, 1, "", "IterableFetcher"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[180, 2, 1, "", "MXNetDataLoader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[181, 2, 1, "", "ONNXRTBertDataLoader"], [181, 2, 1, "", "ONNXRTDataLoader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[182, 2, 1, "", "PyTorchDataLoader"]], "neural_compressor.data.dataloaders.sampler": [[183, 2, 1, "", "BatchSampler"], [183, 2, 1, "", "IterableSampler"], [183, 2, 1, "", "Sampler"], [183, 2, 1, "", "SequentialSampler"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[184, 2, 1, "", "TFDataDataLoader"], [184, 2, 1, "", "TensorflowBertDataLoader"], [184, 2, 1, "", "TensorflowDataLoader"], [184, 2, 1, "", "TensorflowModelZooBertDataLoader"]], "neural_compressor.data.datasets": [[185, 0, 0, "-", "bert_dataset"], [186, 0, 0, "-", "coco_dataset"], [187, 0, 0, "-", "dataset"], [188, 0, 0, "-", "dummy_dataset"], [189, 0, 0, "-", "dummy_dataset_v2"], [190, 0, 0, "-", "imagenet_dataset"], [192, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.data.datasets.bert_dataset": [[185, 2, 1, "", "InputFeatures"], [185, 2, 1, "", "ONNXRTBertDataset"], [185, 2, 1, "", "ParseDecodeBert"], [185, 2, 1, "", "PytorchBertDataset"], [185, 2, 1, "", "TensorflowBertDataset"], [185, 2, 1, "", "TensorflowModelZooBertDataset"], [185, 1, 1, "", "convert_examples_to_features"], [185, 1, 1, "", "load_and_cache_examples"]], "neural_compressor.data.datasets.coco_dataset": [[186, 2, 1, "", "COCONpy"], [186, 2, 1, "", "COCORaw"], [186, 2, 1, "", "COCORecordDataset"], [186, 2, 1, "", "ParseDecodeCoco"]], "neural_compressor.data.datasets.dataset": [[187, 2, 1, "", "CIFAR10"], [187, 2, 1, "", "CIFAR100"], [187, 2, 1, "", "Dataset"], [187, 2, 1, "", "Datasets"], [187, 2, 1, "", "FashionMNIST"], [187, 2, 1, "", "ImageFolder"], [187, 2, 1, "", "IterableDataset"], [187, 2, 1, "", "MNIST"], [187, 2, 1, "", "MXNetCIFAR10"], [187, 2, 1, "", "MXNetCIFAR100"], [187, 2, 1, "", "MXNetDatasets"], [187, 2, 1, "", "MXNetFashionMNIST"], [187, 2, 1, "", "MXNetImageFolder"], [187, 2, 1, "", "MXNetMNIST"], [187, 2, 1, "", "ONNXRTITDatasets"], [187, 2, 1, "", "ONNXRTQLDatasets"], [187, 2, 1, "", "PyTorchDatasets"], [187, 2, 1, "", "PytorchCIFAR10"], [187, 2, 1, "", "PytorchCIFAR100"], [187, 2, 1, "", "PytorchFashionMNIST"], [187, 2, 1, "", "PytorchMNIST"], [187, 2, 1, "", "PytorchMxnetWrapDataset"], [187, 2, 1, "", "PytorchMxnetWrapFunction"], [187, 2, 1, "", "Tensorflow"], [187, 2, 1, "", "TensorflowCIFAR10"], [187, 2, 1, "", "TensorflowCIFAR100"], [187, 2, 1, "", "TensorflowDatasets"], [187, 2, 1, "", "TensorflowFashionMNIST"], [187, 2, 1, "", "TensorflowImageRecord"], [187, 2, 1, "", "TensorflowMNIST"], [187, 2, 1, "", "TensorflowTFRecordDataset"], [187, 2, 1, "", "TensorflowVOCRecord"], [187, 1, 1, "", "calculate_md5"], [187, 1, 1, "", "check_integrity"], [187, 1, 1, "", "dataset_registry"], [187, 1, 1, "", "download_url"], [187, 4, 1, "", "framework_datasets"], [187, 1, 1, "", "gen_bar_updater"]], "neural_compressor.data.datasets.dummy_dataset": [[188, 2, 1, "", "DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[189, 2, 1, "", "DummyDataset"], [189, 2, 1, "", "SparseDummyDataset"]], "neural_compressor.data.datasets.imagenet_dataset": [[190, 2, 1, "", "ImagenetRaw"], [190, 2, 1, "", "MXNetImagenetRaw"], [190, 2, 1, "", "ONNXRTImagenetDataset"], [190, 2, 1, "", "PytorchImagenetRaw"], [190, 2, 1, "", "TensorflowImagenetDataset"], [190, 2, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.data.datasets.style_transfer_dataset": [[192, 2, 1, "", "StyleTransferDataset"]], "neural_compressor.data.filters": [[193, 0, 0, "-", "coco_filter"], [194, 0, 0, "-", "filter"]], "neural_compressor.data.filters.coco_filter": [[193, 2, 1, "", "LabelBalanceCOCORawFilter"], [193, 2, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.filter": [[194, 2, 1, "", "FILTERS"], [194, 2, 1, "", "Filter"], [194, 2, 1, "", "MXNetFilters"], [194, 2, 1, "", "ONNXRTITFilters"], [194, 2, 1, "", "ONNXRTQLFilters"], [194, 2, 1, "", "PyTorchFilters"], [194, 2, 1, "", "TensorflowFilters"], [194, 1, 1, "", "filter_registry"]], "neural_compressor.data.transforms": [[197, 0, 0, "-", "coco_transform"], [198, 0, 0, "-", "imagenet_transform"], [200, 0, 0, "-", "postprocess"], [201, 0, 0, "-", "tokenization"], [202, 0, 0, "-", "transform"]], "neural_compressor.data.transforms.coco_transform": [[197, 2, 1, "", "ParseDecodeCocoTransform"]], "neural_compressor.data.transforms.imagenet_transform": [[198, 2, 1, "", "BilinearImagenetTransform"], [198, 2, 1, "", "LabelShift"], [198, 2, 1, "", "ONNXResizeCropImagenetTransform"], [198, 2, 1, "", "OnnxBilinearImagenetTransform"], [198, 2, 1, "", "ParseDecodeImagenet"], [198, 2, 1, "", "ParseDecodeImagenetTransform"], [198, 2, 1, "", "QuantizedInput"], [198, 2, 1, "", "ResizeWithAspectRatio"], [198, 2, 1, "", "TensorflowResizeCropImagenetTransform"]], "neural_compressor.data.transforms.postprocess": [[200, 2, 1, "", "Postprocess"]], "neural_compressor.data.transforms.tokenization": [[201, 2, 1, "", "BasicTokenizer"], [201, 2, 1, "", "FullTokenizer"], [201, 2, 1, "", "WordpieceTokenizer"], [201, 1, 1, "", "convert_by_vocab"], [201, 1, 1, "", "convert_to_unicode"], [201, 1, 1, "", "load_vocab"], [201, 1, 1, "", "whitespace_tokenize"]], "neural_compressor.data.transforms.transform": [[202, 2, 1, "", "AlignImageChannelTransform"], [202, 2, 1, "", "BaseTransform"], [202, 2, 1, "", "CastONNXTransform"], [202, 2, 1, "", "CastPyTorchTransform"], [202, 2, 1, "", "CastTFTransform"], [202, 2, 1, "", "CenterCropTFTransform"], [202, 2, 1, "", "CenterCropTransform"], [202, 2, 1, "", "CollectTransform"], [202, 2, 1, "", "ComposeTransform"], [202, 2, 1, "", "CropResizeTFTransform"], [202, 2, 1, "", "CropResizeTransform"], [202, 2, 1, "", "CropToBoundingBox"], [202, 2, 1, "", "InputFeatures"], [202, 2, 1, "", "MXNetCropResizeTransform"], [202, 2, 1, "", "MXNetCropToBoundingBox"], [202, 2, 1, "", "MXNetNormalizeTransform"], [202, 2, 1, "", "MXNetTransforms"], [202, 2, 1, "", "MXNetTranspose"], [202, 2, 1, "", "NormalizeTFTransform"], [202, 2, 1, "", "NormalizeTransform"], [202, 2, 1, "", "ONNXRTCropToBoundingBox"], [202, 2, 1, "", "ONNXRTITTransforms"], [202, 2, 1, "", "ONNXRTQLTransforms"], [202, 2, 1, "", "PaddedCenterCropTransform"], [202, 2, 1, "", "ParseDecodeVocTransform"], [202, 2, 1, "", "PyTorchAlignImageChannel"], [202, 2, 1, "", "PyTorchCropResizeTransform"], [202, 2, 1, "", "PyTorchNormalizeTransform"], [202, 2, 1, "", "PyTorchTransforms"], [202, 2, 1, "", "PyTorchTranspose"], [202, 2, 1, "", "PytorchMxnetTransform"], [202, 2, 1, "", "PytorchMxnetWrapFunction"], [202, 2, 1, "", "RandomCropTFTransform"], [202, 2, 1, "", "RandomCropTransform"], [202, 2, 1, "", "RandomHorizontalFlip"], [202, 2, 1, "", "RandomResizedCropMXNetTransform"], [202, 2, 1, "", "RandomResizedCropPytorchTransform"], [202, 2, 1, "", "RandomResizedCropTFTransform"], [202, 2, 1, "", "RandomResizedCropTransform"], [202, 2, 1, "", "RandomVerticalFlip"], [202, 2, 1, "", "RescaleKerasPretrainTransform"], [202, 2, 1, "", "RescaleTFTransform"], [202, 2, 1, "", "RescaleTransform"], [202, 2, 1, "", "ResizeMXNetTransform"], [202, 2, 1, "", "ResizePytorchTransform"], [202, 2, 1, "", "ResizeTFTransform"], [202, 2, 1, "", "ResizeTransform"], [202, 2, 1, "", "ResizeWithRatio"], [202, 2, 1, "", "SquadExample"], [202, 2, 1, "", "TFModelZooCollectTransform"], [202, 2, 1, "", "TFSquadV1ModelZooPostTransform"], [202, 2, 1, "", "TFSquadV1PostTransform"], [202, 2, 1, "", "TRANSFORMS"], [202, 2, 1, "", "TensorflowCropToBoundingBox"], [202, 2, 1, "", "TensorflowRandomHorizontalFlip"], [202, 2, 1, "", "TensorflowRandomVerticalFlip"], [202, 2, 1, "", "TensorflowResizeWithRatio"], [202, 2, 1, "", "TensorflowTransform"], [202, 2, 1, "", "TensorflowTransforms"], [202, 2, 1, "", "TensorflowTranspose"], [202, 2, 1, "", "TensorflowWrapFunction"], [202, 2, 1, "", "ToArray"], [202, 2, 1, "", "ToNDArrayTransform"], [202, 2, 1, "", "Transforms"], [202, 2, 1, "", "Transpose"], [202, 1, 1, "", "convert_examples_to_features"], [202, 1, 1, "", "get_final_text"], [202, 1, 1, "", "get_torchvision_map"], [202, 1, 1, "", "read_squad_examples"], [202, 1, 1, "", "transform_registry"]], "neural_compressor.experimental": [[203, 0, 0, "-", "benchmark"], [206, 0, 0, "-", "common"], [212, 0, 0, "-", "component"], [213, 0, 0, "-", "compression"], [236, 0, 0, "-", "data"], [241, 0, 0, "-", "distillation"], [242, 0, 0, "-", "export"], [247, 0, 0, "-", "graph_optimization"], [255, 0, 0, "-", "metric"], [257, 0, 0, "-", "mixed_precision"], [258, 0, 0, "-", "model_conversion"], [261, 0, 0, "-", "nas"], [267, 0, 0, "-", "pruner_legacy"], [271, 0, 0, "-", "pruning"], [272, 0, 0, "-", "pruning_recipes"], [276, 0, 0, "-", "pruning_v2"], [277, 0, 0, "-", "pytorch_pruner"], [284, 0, 0, "-", "quantization"], [285, 0, 0, "-", "scheduler"]], "neural_compressor.experimental.benchmark": [[203, 2, 1, "", "Benchmark"], [203, 1, 1, "", "get_architecture"], [203, 1, 1, "", "get_bounded_threads"], [203, 1, 1, "", "get_core_ids"], [203, 1, 1, "", "get_physical_ids"], [203, 1, 1, "", "get_threads"], [203, 1, 1, "", "get_threads_per_core"], [203, 1, 1, "", "set_all_env_var"], [203, 1, 1, "", "set_env_var"]], "neural_compressor.experimental.common": [[204, 0, 0, "-", "criterion"], [205, 0, 0, "-", "dataloader"], [207, 0, 0, "-", "metric"], [208, 0, 0, "-", "model"], [209, 0, 0, "-", "optimizer"], [210, 0, 0, "-", "postprocess"], [211, 0, 0, "-", "torch_utils"]], "neural_compressor.experimental.common.criterion": [[204, 2, 1, "", "Criterions"], [204, 2, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [204, 2, 1, "", "KnowledgeDistillationFramework"], [204, 2, 1, "", "KnowledgeDistillationLoss"], [204, 2, 1, "", "PyTorchCriterions"], [204, 2, 1, "", "PyTorchCrossEntropyLoss"], [204, 2, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLoss"], [204, 2, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"], [204, 2, 1, "", "PyTorchKnowledgeDistillationLoss"], [204, 2, 1, "", "PyTorchKnowledgeDistillationLossWrapper"], [204, 2, 1, "", "PyTorchSelfKnowledgeDistillationLoss"], [204, 2, 1, "", "PyTorchSelfKnowledgeDistillationLossWrapper"], [204, 2, 1, "", "SelfKnowledgeDistillationLoss"], [204, 2, 1, "", "TensorFlowCrossEntropyLoss"], [204, 2, 1, "", "TensorFlowSparseCategoricalCrossentropy"], [204, 2, 1, "", "TensorflowCriterions"], [204, 2, 1, "", "TensorflowKnowledgeDistillationLoss"], [204, 2, 1, "", "TensorflowKnowledgeDistillationLossExternal"], [204, 2, 1, "", "TensorflowKnowledgeDistillationLossWrapper"], [204, 1, 1, "", "criterion_registry"]], "neural_compressor.experimental.common.dataloader": [[205, 2, 1, "", "DataLoader"]], "neural_compressor.experimental.common.metric": [[207, 2, 1, "", "Metric"]], "neural_compressor.experimental.common.model": [[208, 2, 1, "", "Model"], [208, 1, 1, "", "set_backend"]], "neural_compressor.experimental.common.optimizer": [[209, 2, 1, "", "Optimizers"], [209, 2, 1, "", "PyTorchOptimizers"], [209, 2, 1, "", "PyTorchSGD"], [209, 2, 1, "", "TensorFlowAdam"], [209, 2, 1, "", "TensorFlowAdamW"], [209, 2, 1, "", "TensorFlowSGD"], [209, 2, 1, "", "TensorflowOptimizers"], [209, 1, 1, "", "optimizer_registry"]], "neural_compressor.experimental.common.postprocess": [[210, 2, 1, "", "Postprocess"]], "neural_compressor.experimental.common.torch_utils": [[211, 1, 1, "", "get_activation"], [211, 1, 1, "", "record_output"]], "neural_compressor.experimental.component": [[212, 2, 1, "", "Component"]], "neural_compressor.experimental.compression": [[214, 0, 0, "-", "pruning"]], "neural_compressor.experimental.compression.pruning": [[214, 1, 1, "", "prepare_pruning"], [214, 1, 1, "", "save"]], "neural_compressor.experimental.data": [[219, 0, 0, "-", "dataloaders"], [231, 0, 0, "-", "datasets"], [235, 0, 0, "-", "filters"], [238, 0, 0, "-", "transforms"]], "neural_compressor.experimental.data.dataloaders": [[215, 0, 0, "-", "base_dataloader"], [216, 0, 0, "-", "dataloader"], [217, 0, 0, "-", "default_dataloader"], [218, 0, 0, "-", "fetcher"], [220, 0, 0, "-", "mxnet_dataloader"], [221, 0, 0, "-", "onnxrt_dataloader"], [222, 0, 0, "-", "pytorch_dataloader"], [223, 0, 0, "-", "sampler"], [224, 0, 0, "-", "tensorflow_dataloader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[215, 2, 1, "", "BaseDataLoader"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[217, 2, 1, "", "DefaultDataLoader"], [217, 1, 1, "", "default_collate"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[218, 2, 1, "", "Fetcher"], [218, 2, 1, "", "IndexFetcher"], [218, 2, 1, "", "IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[220, 2, 1, "", "MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[221, 2, 1, "", "ONNXRTBertDataLoader"], [221, 2, 1, "", "ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[222, 2, 1, "", "PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[223, 2, 1, "", "BatchSampler"], [223, 2, 1, "", "IterableSampler"], [223, 2, 1, "", "Sampler"], [223, 2, 1, "", "SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[224, 2, 1, "", "TFDataDataLoader"], [224, 2, 1, "", "TensorflowBertDataLoader"], [224, 2, 1, "", "TensorflowDataLoader"], [224, 2, 1, "", "TensorflowModelZooBertDataLoader"]], "neural_compressor.experimental.data.datasets": [[225, 0, 0, "-", "bert_dataset"], [226, 0, 0, "-", "coco_dataset"], [227, 0, 0, "-", "dataset"], [228, 0, 0, "-", "dummy_dataset"], [229, 0, 0, "-", "dummy_dataset_v2"], [230, 0, 0, "-", "imagenet_dataset"], [232, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[225, 2, 1, "", "InputFeatures"], [225, 2, 1, "", "ONNXRTBertDataset"], [225, 2, 1, "", "ParseDecodeBert"], [225, 2, 1, "", "PytorchBertDataset"], [225, 2, 1, "", "TensorflowBertDataset"], [225, 2, 1, "", "TensorflowModelZooBertDataset"], [225, 1, 1, "", "convert_examples_to_features"], [225, 1, 1, "", "load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[226, 2, 1, "", "COCONpy"], [226, 2, 1, "", "COCORaw"], [226, 2, 1, "", "COCORecordDataset"], [226, 2, 1, "", "ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.dataset": [[227, 2, 1, "", "CIFAR10"], [227, 2, 1, "", "CIFAR100"], [227, 2, 1, "", "Dataset"], [227, 2, 1, "", "Datasets"], [227, 2, 1, "", "FashionMNIST"], [227, 2, 1, "", "ImageFolder"], [227, 2, 1, "", "IterableDataset"], [227, 2, 1, "", "MNIST"], [227, 2, 1, "", "MXNetCIFAR10"], [227, 2, 1, "", "MXNetCIFAR100"], [227, 2, 1, "", "MXNetDatasets"], [227, 2, 1, "", "MXNetFashionMNIST"], [227, 2, 1, "", "MXNetImageFolder"], [227, 2, 1, "", "MXNetMNIST"], [227, 2, 1, "", "ONNXRTITDatasets"], [227, 2, 1, "", "ONNXRTQLDatasets"], [227, 2, 1, "", "PyTorchDatasets"], [227, 2, 1, "", "PytorchCIFAR10"], [227, 2, 1, "", "PytorchCIFAR100"], [227, 2, 1, "", "PytorchFashionMNIST"], [227, 2, 1, "", "PytorchMNIST"], [227, 2, 1, "", "PytorchMxnetWrapDataset"], [227, 2, 1, "", "PytorchMxnetWrapFunction"], [227, 2, 1, "", "TensorflowCIFAR10"], [227, 2, 1, "", "TensorflowCIFAR100"], [227, 2, 1, "", "TensorflowDatasets"], [227, 2, 1, "", "TensorflowFashionMNIST"], [227, 2, 1, "", "TensorflowImageFolder"], [227, 2, 1, "", "TensorflowImageRecord"], [227, 2, 1, "", "TensorflowMNIST"], [227, 2, 1, "", "TensorflowTFRecordDataset"], [227, 2, 1, "", "TensorflowVOCRecord"], [227, 1, 1, "", "calculate_md5"], [227, 1, 1, "", "check_integrity"], [227, 1, 1, "", "dataset_registry"], [227, 1, 1, "", "download_url"], [227, 4, 1, "", "framework_datasets"], [227, 1, 1, "", "gen_bar_updater"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[228, 2, 1, "", "DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[229, 2, 1, "", "DummyDataset"], [229, 2, 1, "", "SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[230, 2, 1, "", "ImagenetRaw"], [230, 2, 1, "", "MXNetImagenetRaw"], [230, 2, 1, "", "ONNXRTImagenetDataset"], [230, 2, 1, "", "PytorchImagenetRaw"], [230, 2, 1, "", "TensorflowImagenetDataset"], [230, 2, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[232, 2, 1, "", "StyleTransferDataset"]], "neural_compressor.experimental.data.filters": [[233, 0, 0, "-", "coco_filter"], [234, 0, 0, "-", "filter"]], "neural_compressor.experimental.data.filters.coco_filter": [[233, 2, 1, "", "LabelBalanceCOCORawFilter"], [233, 2, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.filter": [[234, 2, 1, "", "FILTERS"], [234, 2, 1, "", "Filter"], [234, 2, 1, "", "MXNetFilters"], [234, 2, 1, "", "ONNXRTITFilters"], [234, 2, 1, "", "ONNXRTQLFilters"], [234, 2, 1, "", "PyTorchFilters"], [234, 2, 1, "", "TensorflowFilters"], [234, 1, 1, "", "filter_registry"]], "neural_compressor.experimental.data.transforms": [[237, 0, 0, "-", "imagenet_transform"], [239, 0, 0, "-", "tokenization"], [240, 0, 0, "-", "transform"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[237, 2, 1, "", "BilinearImagenetTransform"], [237, 2, 1, "", "LabelShift"], [237, 2, 1, "", "ONNXResizeCropImagenetTransform"], [237, 2, 1, "", "OnnxBilinearImagenetTransform"], [237, 2, 1, "", "ParseDecodeImagenet"], [237, 2, 1, "", "ParseDecodeImagenetTransform"], [237, 2, 1, "", "QuantizedInput"], [237, 2, 1, "", "ResizeWithAspectRatio"], [237, 2, 1, "", "TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental.data.transforms.tokenization": [[239, 2, 1, "", "BasicTokenizer"], [239, 2, 1, "", "FullTokenizer"], [239, 2, 1, "", "WordpieceTokenizer"], [239, 1, 1, "", "convert_by_vocab"], [239, 1, 1, "", "convert_to_unicode"], [239, 1, 1, "", "load_vocab"], [239, 1, 1, "", "whitespace_tokenize"]], "neural_compressor.experimental.data.transforms.transform": [[240, 2, 1, "", "AlignImageChannelTransform"], [240, 2, 1, "", "BaseTransform"], [240, 2, 1, "", "CastONNXTransform"], [240, 2, 1, "", "CastPyTorchTransform"], [240, 2, 1, "", "CastTFTransform"], [240, 2, 1, "", "CenterCropTFTransform"], [240, 2, 1, "", "CenterCropTransform"], [240, 2, 1, "", "CollectTransform"], [240, 2, 1, "", "ComposeTransform"], [240, 2, 1, "", "CropResizeTFTransform"], [240, 2, 1, "", "CropResizeTransform"], [240, 2, 1, "", "CropToBoundingBox"], [240, 2, 1, "", "InputFeatures"], [240, 2, 1, "", "MXNetCropResizeTransform"], [240, 2, 1, "", "MXNetCropToBoundingBox"], [240, 2, 1, "", "MXNetNormalizeTransform"], [240, 2, 1, "", "MXNetTransforms"], [240, 2, 1, "", "MXNetTranspose"], [240, 2, 1, "", "NormalizeTFTransform"], [240, 2, 1, "", "NormalizeTransform"], [240, 2, 1, "", "ONNXRTCropToBoundingBox"], [240, 2, 1, "", "ONNXRTITTransforms"], [240, 2, 1, "", "ONNXRTQLTransforms"], [240, 2, 1, "", "PaddedCenterCropTransform"], [240, 2, 1, "", "ParseDecodeVocTransform"], [240, 2, 1, "", "PyTorchAlignImageChannel"], [240, 2, 1, "", "PyTorchCropResizeTransform"], [240, 2, 1, "", "PyTorchNormalizeTransform"], [240, 2, 1, "", "PyTorchTransforms"], [240, 2, 1, "", "PyTorchTranspose"], [240, 2, 1, "", "PytorchMxnetTransform"], [240, 2, 1, "", "PytorchMxnetWrapFunction"], [240, 2, 1, "", "RandomCropTFTransform"], [240, 2, 1, "", "RandomCropTransform"], [240, 2, 1, "", "RandomHorizontalFlip"], [240, 2, 1, "", "RandomResizedCropMXNetTransform"], [240, 2, 1, "", "RandomResizedCropPytorchTransform"], [240, 2, 1, "", "RandomResizedCropTFTransform"], [240, 2, 1, "", "RandomResizedCropTransform"], [240, 2, 1, "", "RandomVerticalFlip"], [240, 2, 1, "", "RescaleKerasPretrainTransform"], [240, 2, 1, "", "RescaleTFTransform"], [240, 2, 1, "", "RescaleTransform"], [240, 2, 1, "", "ResizeMXNetTransform"], [240, 2, 1, "", "ResizePytorchTransform"], [240, 2, 1, "", "ResizeTFTransform"], [240, 2, 1, "", "ResizeTransform"], [240, 2, 1, "", "ResizeWithRatio"], [240, 2, 1, "", "SquadExample"], [240, 2, 1, "", "TFModelZooCollectTransform"], [240, 2, 1, "", "TFSquadV1ModelZooPostTransform"], [240, 2, 1, "", "TFSquadV1PostTransform"], [240, 2, 1, "", "TRANSFORMS"], [240, 2, 1, "", "TensorflowCropToBoundingBox"], [240, 2, 1, "", "TensorflowRandomHorizontalFlip"], [240, 2, 1, "", "TensorflowRandomVerticalFlip"], [240, 2, 1, "", "TensorflowResizeWithRatio"], [240, 2, 1, "", "TensorflowTransform"], [240, 2, 1, "", "TensorflowTransforms"], [240, 2, 1, "", "TensorflowTranspose"], [240, 2, 1, "", "TensorflowWrapFunction"], [240, 2, 1, "", "ToArray"], [240, 2, 1, "", "ToNDArrayTransform"], [240, 2, 1, "", "Transforms"], [240, 2, 1, "", "Transpose"], [240, 1, 1, "", "convert_examples_to_features"], [240, 1, 1, "", "get_final_text"], [240, 1, 1, "", "get_torchvision_map"], [240, 1, 1, "", "read_squad_examples"], [240, 1, 1, "", "transform_registry"]], "neural_compressor.experimental.distillation": [[241, 2, 1, "", "Distillation"]], "neural_compressor.experimental.distillation.Distillation": [[241, 3, 1, "", "_epoch_ran"], [241, 3, 1, "", "best_model"], [241, 3, 1, "", "best_score"], [241, 3, 1, "", "eval_frequency"]], "neural_compressor.experimental.export": [[243, 0, 0, "-", "qlinear2qdq"], [244, 0, 0, "-", "tf2onnx"], [245, 0, 0, "-", "torch2onnx"], [246, 0, 0, "-", "utils"]], "neural_compressor.experimental.export.qlinear2qdq": [[243, 1, 1, "", "check_model"], [243, 1, 1, "", "onnx_qlinear_to_qdq"]], "neural_compressor.experimental.export.tf2onnx": [[244, 1, 1, "", "tf_to_fp32_onnx"], [244, 1, 1, "", "tf_to_int8_onnx"]], "neural_compressor.experimental.export.torch2onnx": [[245, 1, 1, "", "build_scale_mapping"], [245, 1, 1, "", "get_node_mapping"], [245, 1, 1, "", "get_quantizable_onnx_ops"], [245, 1, 1, "", "qdq_fp32_bias"], [245, 1, 1, "", "qdq_fp32_bias_qdq"], [245, 1, 1, "", "qdq_int32_bias"], [245, 1, 1, "", "recalculate_bias"], [245, 1, 1, "", "remove_nodes_by_name"], [245, 1, 1, "", "set_data_type"], [245, 1, 1, "", "set_scale_info"], [245, 1, 1, "", "sub_graph_with_int32_bias"], [245, 1, 1, "", "torch_to_fp32_onnx"], [245, 1, 1, "", "torch_to_int8_onnx"], [245, 1, 1, "", "update_weight_bias"]], "neural_compressor.experimental.export.utils": [[246, 2, 1, "", "DummyDataReader"], [246, 1, 1, "", "ONNX2Numpy_dtype"]], "neural_compressor.experimental.graph_optimization": [[247, 2, 1, "", "Graph_Optimization"]], "neural_compressor.experimental.metric": [[249, 0, 0, "-", "bleu"], [250, 0, 0, "-", "bleu_util"], [251, 0, 0, "-", "coco_label_map"], [252, 0, 0, "-", "coco_tools"], [253, 0, 0, "-", "evaluate_squad"], [254, 0, 0, "-", "f1"], [256, 0, 0, "-", "metric"]], "neural_compressor.experimental.metric.bleu": [[249, 2, 1, "", "BLEU"], [249, 2, 1, "", "UnicodeRegex"], [249, 1, 1, "", "bleu_tokenize"]], "neural_compressor.experimental.metric.bleu.BLEU": [[249, 3, 1, "", "labels"], [249, 3, 1, "", "predictions"]], "neural_compressor.experimental.metric.bleu.UnicodeRegex": [[249, 3, 1, "", "nondigit_punct_re"], [249, 3, 1, "", "punct_nondigit_re"], [249, 3, 1, "", "symbol_re"]], "neural_compressor.experimental.metric.bleu_util": [[250, 1, 1, "", "compute_bleu"]], "neural_compressor.experimental.metric.coco_tools": [[252, 2, 1, "", "COCOEvalWrapper"], [252, 2, 1, "", "COCOWrapper"], [252, 1, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [252, 1, 1, "", "ExportSingleImageDetectionMasksToCoco"], [252, 1, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.experimental.metric.coco_tools.COCOWrapper": [[252, 3, 1, "", "dataset"], [252, 3, 1, "", "detection_type"]], "neural_compressor.experimental.metric.evaluate_squad": [[253, 1, 1, "", "evaluate"], [253, 1, 1, "", "exact_match_score"], [253, 1, 1, "", "f1_score"], [253, 1, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[254, 1, 1, "", "evaluate"], [254, 1, 1, "", "f1_score"], [254, 1, 1, "", "metric_max_over_ground_truths"], [254, 1, 1, "", "normalize_answer"]], "neural_compressor.experimental.metric.metric": [[256, 2, 1, "", "Accuracy"], [256, 2, 1, "", "BaseMetric"], [256, 2, 1, "", "COCOmAPv2"], [256, 2, 1, "", "F1"], [256, 2, 1, "", "GeneralTopK"], [256, 2, 1, "", "Loss"], [256, 2, 1, "", "MAE"], [256, 2, 1, "", "METRICS"], [256, 2, 1, "", "MSE"], [256, 2, 1, "", "MXNetMetrics"], [256, 2, 1, "", "ONNXRTGLUE"], [256, 2, 1, "", "ONNXRTITMetrics"], [256, 2, 1, "", "ONNXRTQLMetrics"], [256, 2, 1, "", "PyTorchLoss"], [256, 2, 1, "", "PyTorchMetrics"], [256, 2, 1, "", "RMSE"], [256, 2, 1, "", "ROC"], [256, 2, 1, "", "SquadF1"], [256, 2, 1, "", "TensorflowCOCOMAP"], [256, 2, 1, "", "TensorflowMAP"], [256, 2, 1, "", "TensorflowMetrics"], [256, 2, 1, "", "TensorflowTopK"], [256, 2, 1, "", "TensorflowVOCMAP"], [256, 2, 1, "", "WrapMXNetMetric"], [256, 2, 1, "", "WrapONNXRTMetric"], [256, 2, 1, "", "WrapPyTorchMetric"], [256, 2, 1, "", "mIOU"], [256, 1, 1, "", "metric_registry"]], "neural_compressor.experimental.metric.metric.Accuracy": [[256, 3, 1, "", "label_list"], [256, 3, 1, "", "pred_list"], [256, 3, 1, "", "sample"]], "neural_compressor.experimental.metric.metric.GeneralTopK": [[256, 3, 1, "", "k"], [256, 3, 1, "", "num_correct"], [256, 3, 1, "", "num_sample"]], "neural_compressor.experimental.metric.metric.Loss": [[256, 3, 1, "", "sample"], [256, 3, 1, "", "sum"]], "neural_compressor.experimental.metric.metric.MAE": [[256, 3, 1, "", "compare_label"], [256, 3, 1, "", "label_list"], [256, 3, 1, "", "pred_list"]], "neural_compressor.experimental.metric.metric.METRICS": [[256, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.MSE": [[256, 3, 1, "", "compare_label"], [256, 3, 1, "", "label_list"], [256, 3, 1, "", "pred_list"]], "neural_compressor.experimental.metric.metric.MXNetMetrics": [[256, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTITMetrics": [[256, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics": [[256, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.PyTorchMetrics": [[256, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.RMSE": [[256, 3, 1, "", "mse"]], "neural_compressor.experimental.metric.metric.TensorflowMetrics": [[256, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.TensorflowTopK": [[256, 3, 1, "", "k"], [256, 3, 1, "", "num_correct"], [256, 3, 1, "", "num_sample"]], "neural_compressor.experimental.mixed_precision": [[257, 2, 1, "", "MixedPrecision"]], "neural_compressor.experimental.model_conversion": [[258, 2, 1, "", "ModelConversion"]], "neural_compressor.experimental.nas": [[259, 0, 0, "-", "basic_nas"], [260, 0, 0, "-", "dynas"], [262, 0, 0, "-", "nas"], [263, 0, 0, "-", "nas_utils"], [264, 0, 0, "-", "search_algorithms"]], "neural_compressor.experimental.nas.basic_nas": [[259, 2, 1, "", "BasicNAS"]], "neural_compressor.experimental.nas.dynas": [[260, 2, 1, "", "DyNAS"]], "neural_compressor.experimental.nas.nas": [[262, 2, 1, "", "NAS"], [262, 2, 1, "", "NASBase"]], "neural_compressor.experimental.nas.nas_utils": [[263, 1, 1, "", "create_search_space_pool"], [263, 1, 1, "", "find_pareto_front"], [263, 1, 1, "", "nas_registry"]], "neural_compressor.experimental.nas.search_algorithms": [[264, 2, 1, "", "BayesianOptimizationSearcher"], [264, 2, 1, "", "GridSearcher"], [264, 2, 1, "", "RandomSearcher"], [264, 2, 1, "", "Searcher"]], "neural_compressor.experimental.pruner_legacy": [[265, 0, 0, "-", "gradient_sensitivity"], [266, 0, 0, "-", "group_lasso"], [268, 0, 0, "-", "magnitude"], [269, 0, 0, "-", "pattern_lock"], [270, 0, 0, "-", "pruner"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[265, 2, 1, "", "GradientSensitivityPruner"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[266, 2, 1, "", "GroupLassoPruner"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[268, 2, 1, "", "BasicMagnitudePruner"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[269, 2, 1, "", "PatternLockPruner"]], "neural_compressor.experimental.pruner_legacy.pruner": [[270, 2, 1, "", "Pruner"], [270, 1, 1, "", "pruner_registry"]], "neural_compressor.experimental.pruning": [[271, 2, 1, "", "Pruning"], [271, 2, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning.Pruning": [[271, 3, 1, "", "conf"], [271, 3, 1, "", "pruners"]], "neural_compressor.experimental.pruning_recipes": [[273, 0, 0, "-", "patterns"]], "neural_compressor.experimental.pruning_recipes.patterns": [[274, 0, 0, "-", "pattern"], [275, 0, 0, "-", "tile_pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[274, 2, 1, "", "PATTERNS"], [274, 2, 1, "", "PatternBase"], [274, 1, 1, "", "pattern_registry"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS": [[274, 3, 1, "", "patterns"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[275, 2, 1, "", "TilePatternBase"], [275, 2, 1, "", "TilePattern_1x1"], [275, 2, 1, "", "TilePattern_1x16"], [275, 2, 1, "", "TilePattern_1x2"], [275, 2, 1, "", "TilePattern_2x2"], [275, 2, 1, "", "TilePattern_4x1"]], "neural_compressor.experimental.pruning_v2": [[276, 2, 1, "", "Pruning"], [276, 2, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning_v2.Pruning": [[276, 3, 1, "", "conf"], [276, 3, 1, "", "pruners"]], "neural_compressor.experimental.pytorch_pruner": [[278, 0, 0, "-", "logger"], [279, 0, 0, "-", "patterns"], [280, 0, 0, "-", "prune_utils"], [281, 0, 0, "-", "pruner"], [282, 0, 0, "-", "pruning"], [283, 0, 0, "-", "scheduler"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[279, 2, 1, "", "Pattern"], [279, 2, 1, "", "PatternNInM"], [279, 2, 1, "", "PatternNxM"], [279, 1, 1, "", "get_pattern"], [279, 1, 1, "", "register_pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.Pattern": [[279, 3, 1, "", "is_global"], [279, 3, 1, "", "pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM": [[279, 3, 1, "", "M"], [279, 3, 1, "", "N"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM": [[279, 3, 1, "", "block_size"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[280, 1, 1, "", "check_config"], [280, 1, 1, "", "parse_not_to_prune"], [280, 1, 1, "", "parse_to_prune"], [280, 1, 1, "", "process_and_check_config"], [280, 1, 1, "", "process_config"], [280, 1, 1, "", "reset_non_value_to_default"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[281, 2, 1, "", "MagnitudePruner"], [281, 2, 1, "", "PatternLockPruner"], [281, 2, 1, "", "Pruner"], [281, 2, 1, "", "SnipMomentumPruner"], [281, 2, 1, "", "SnipPruner"], [281, 1, 1, "", "get_pruner"], [281, 1, 1, "", "register_pruners"]], "neural_compressor.experimental.pytorch_pruner.pruner.Pruner": [[281, 3, 1, "", "config"], [281, 3, 1, "", "current_sparsity_ratio"], [281, 3, 1, "", "end_step"], [281, 3, 1, "", "global_step"], [281, 3, 1, "", "masks"], [281, 3, 1, "", "max_sparsity_ratio_per_layer"], [281, 3, 1, "", "modules"], [281, 3, 1, "", "pattern"], [281, 3, 1, "", "scheduler"], [281, 3, 1, "", "scores"], [281, 3, 1, "", "start_step"], [281, 3, 1, "", "target_sparsity_ratio"], [281, 3, 1, "", "update_frequency_on_step"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[282, 2, 1, "", "Pruning"]], "neural_compressor.experimental.pytorch_pruner.pruning.Pruning": [[282, 3, 1, "", "config_file_path"], [282, 3, 1, "", "model"], [282, 3, 1, "", "pruner_info"], [282, 3, 1, "", "pruners"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[283, 2, 1, "", "IterativeScheduler"], [283, 2, 1, "", "OneshotScheduler"], [283, 2, 1, "", "Scheduler"], [283, 1, 1, "", "get_scheduler"], [283, 1, 1, "", "register_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler": [[283, 3, 1, "", "config"]], "neural_compressor.experimental.quantization": [[284, 2, 1, "", "Quantization"]], "neural_compressor.experimental.scheduler": [[285, 2, 1, "", "Scheduler"]], "neural_compressor.metric": [[287, 0, 0, "-", "bleu"], [288, 0, 0, "-", "bleu_util"], [289, 0, 0, "-", "coco_label_map"], [290, 0, 0, "-", "coco_tools"], [291, 0, 0, "-", "evaluate_squad"], [292, 0, 0, "-", "f1"], [294, 0, 0, "-", "metric"]], "neural_compressor.metric.bleu": [[287, 2, 1, "", "BLEU"], [287, 2, 1, "", "UnicodeRegex"], [287, 1, 1, "", "bleu_tokenize"]], "neural_compressor.metric.bleu.BLEU": [[287, 3, 1, "", "labels"], [287, 3, 1, "", "predictions"]], "neural_compressor.metric.bleu.UnicodeRegex": [[287, 3, 1, "", "nondigit_punct_re"], [287, 3, 1, "", "punct_nondigit_re"], [287, 3, 1, "", "symbol_re"]], "neural_compressor.metric.bleu_util": [[288, 1, 1, "", "compute_bleu"]], "neural_compressor.metric.coco_tools": [[290, 2, 1, "", "COCOEvalWrapper"], [290, 2, 1, "", "COCOWrapper"], [290, 1, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [290, 1, 1, "", "ExportSingleImageDetectionMasksToCoco"], [290, 1, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.metric.coco_tools.COCOWrapper": [[290, 3, 1, "", "dataset"], [290, 3, 1, "", "detection_type"]], "neural_compressor.metric.evaluate_squad": [[291, 1, 1, "", "evaluate"], [291, 1, 1, "", "exact_match_score"], [291, 1, 1, "", "f1_score"], [291, 1, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[292, 1, 1, "", "evaluate"], [292, 1, 1, "", "f1_score"], [292, 1, 1, "", "metric_max_over_ground_truths"], [292, 1, 1, "", "normalize_answer"]], "neural_compressor.metric.metric": [[294, 2, 1, "", "Accuracy"], [294, 2, 1, "", "BaseMetric"], [294, 2, 1, "", "COCOmAPv2"], [294, 2, 1, "", "F1"], [294, 2, 1, "", "GeneralTopK"], [294, 2, 1, "", "Loss"], [294, 2, 1, "", "MAE"], [294, 2, 1, "", "METRICS"], [294, 2, 1, "", "MSE"], [294, 2, 1, "", "MXNetMetrics"], [294, 2, 1, "", "Metric"], [294, 2, 1, "", "ONNXRTGLUE"], [294, 2, 1, "", "ONNXRTITMetrics"], [294, 2, 1, "", "ONNXRTQLMetrics"], [294, 2, 1, "", "PyTorchLoss"], [294, 2, 1, "", "PyTorchMetrics"], [294, 2, 1, "", "RMSE"], [294, 2, 1, "", "ROC"], [294, 2, 1, "", "SquadF1"], [294, 2, 1, "", "TensorflowCOCOMAP"], [294, 2, 1, "", "TensorflowMAP"], [294, 2, 1, "", "TensorflowMetrics"], [294, 2, 1, "", "TensorflowTopK"], [294, 2, 1, "", "TensorflowVOCMAP"], [294, 2, 1, "", "WrapMXNetMetric"], [294, 2, 1, "", "WrapONNXRTMetric"], [294, 2, 1, "", "WrapPyTorchMetric"], [294, 2, 1, "", "mIOU"], [294, 1, 1, "", "metric_registry"]], "neural_compressor.metric.metric.Accuracy": [[294, 3, 1, "", "label_list"], [294, 3, 1, "", "pred_list"], [294, 3, 1, "", "sample"]], "neural_compressor.metric.metric.GeneralTopK": [[294, 3, 1, "", "k"], [294, 3, 1, "", "num_correct"], [294, 3, 1, "", "num_sample"]], "neural_compressor.metric.metric.Loss": [[294, 3, 1, "", "sample"], [294, 3, 1, "", "sum"]], "neural_compressor.metric.metric.MAE": [[294, 3, 1, "", "compare_label"], [294, 3, 1, "", "label_list"], [294, 3, 1, "", "pred_list"]], "neural_compressor.metric.metric.METRICS": [[294, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.MSE": [[294, 3, 1, "", "compare_label"], [294, 3, 1, "", "label_list"], [294, 3, 1, "", "pred_list"]], "neural_compressor.metric.metric.MXNetMetrics": [[294, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTITMetrics": [[294, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTQLMetrics": [[294, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.PyTorchMetrics": [[294, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.RMSE": [[294, 3, 1, "", "mse"]], "neural_compressor.metric.metric.TensorflowMetrics": [[294, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.TensorflowTopK": [[294, 3, 1, "", "k"], [294, 3, 1, "", "num_correct"], [294, 3, 1, "", "num_sample"]], "neural_compressor.mix_precision": [[295, 2, 1, "", "MixedPrecision"], [295, 1, 1, "", "fit"]], "neural_compressor.model": [[296, 0, 0, "-", "base_model"], [298, 0, 0, "-", "keras_model"], [299, 0, 0, "-", "model"], [300, 0, 0, "-", "mxnet_model"], [301, 0, 0, "-", "nets_factory"], [302, 0, 0, "-", "onnx_model"], [303, 0, 0, "-", "tensorflow_model"], [304, 0, 0, "-", "torch_model"]], "neural_compressor.model.base_model": [[296, 2, 1, "", "BaseModel"]], "neural_compressor.model.keras_model": [[298, 2, 1, "", "KerasModel"]], "neural_compressor.model.model": [[299, 2, 1, "", "Model"], [299, 1, 1, "", "get_model_fwk_name"]], "neural_compressor.model.mxnet_model": [[300, 2, 1, "", "MXNetModel"]], "neural_compressor.model.nets_factory": [[301, 2, 1, "", "TFSlimNetsFactory"]], "neural_compressor.model.onnx_model": [[302, 2, 1, "", "ONNXModel"]], "neural_compressor.model.tensorflow_model": [[303, 2, 1, "", "TensorflowBaseModel"], [303, 2, 1, "", "TensorflowCheckpointModel"], [303, 2, 1, "", "TensorflowModel"], [303, 2, 1, "", "TensorflowQATModel"], [303, 2, 1, "", "TensorflowSavedModelModel"], [303, 1, 1, "", "checkpoint_session"], [303, 1, 1, "", "estimator_session"], [303, 1, 1, "", "frozen_pb_session"], [303, 1, 1, "", "get_model_type"], [303, 1, 1, "", "graph_def_session"], [303, 1, 1, "", "graph_session"], [303, 1, 1, "", "keras_session"], [303, 1, 1, "", "load_saved_model"], [303, 1, 1, "", "saved_model_session"], [303, 1, 1, "", "slim_session"], [303, 1, 1, "", "validate_and_inference_input_output"], [303, 1, 1, "", "validate_graph_node"]], "neural_compressor.model.torch_model": [[304, 2, 1, "", "IPEXModel"], [304, 2, 1, "", "PyTorchBaseModel"], [304, 2, 1, "", "PyTorchFXModel"], [304, 2, 1, "", "PyTorchModel"]], "neural_compressor.objective": [[305, 2, 1, "", "Accuracy"], [305, 2, 1, "", "Footprint"], [305, 2, 1, "", "ModelSize"], [305, 2, 1, "", "MultiObjective"], [305, 2, 1, "", "Objective"], [305, 2, 1, "", "Performance"], [305, 1, 1, "", "objective_custom_registry"], [305, 1, 1, "", "objective_registry"]], "neural_compressor.quantization": [[306, 2, 1, "", "PostTrainingQuant"], [306, 1, 1, "", "fit"]], "neural_compressor.strategy": [[307, 0, 0, "-", "auto"], [308, 0, 0, "-", "auto_mixed_precision"], [309, 0, 0, "-", "basic"], [310, 0, 0, "-", "bayesian"], [311, 0, 0, "-", "conservative"], [312, 0, 0, "-", "exhaustive"], [313, 0, 0, "-", "hawq_v2"], [315, 0, 0, "-", "mse"], [316, 0, 0, "-", "mse_v2"], [317, 0, 0, "-", "random"], [318, 0, 0, "-", "strategy"], [320, 0, 0, "-", "utils"]], "neural_compressor.strategy.auto": [[307, 2, 1, "", "AutoTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[308, 2, 1, "", "AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.basic": [[309, 2, 1, "", "BasicTuneStrategy"]], "neural_compressor.strategy.bayesian": [[310, 2, 1, "", "BayesianOptimization"], [310, 2, 1, "", "BayesianTuneStrategy"], [310, 2, 1, "", "TargetSpace"], [310, 1, 1, "", "acq_max"]], "neural_compressor.strategy.conservative": [[311, 2, 1, "", "ConservativeTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[312, 2, 1, "", "ExhaustiveTuneStrategy"]], "neural_compressor.strategy.hawq_v2": [[313, 2, 1, "", "HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.mse": [[315, 2, 1, "", "MSETuneStrategy"]], "neural_compressor.strategy.mse_v2": [[316, 2, 1, "", "MSE_V2TuneStrategy"]], "neural_compressor.strategy.random": [[317, 2, 1, "", "RandomTuneStrategy"]], "neural_compressor.strategy.strategy": [[318, 2, 1, "", "TuneStrategy"], [318, 1, 1, "", "strategy_registry"]], "neural_compressor.strategy.utils": [[319, 0, 0, "-", "constant"], [321, 0, 0, "-", "tuning_sampler"], [322, 0, 0, "-", "tuning_space"], [323, 0, 0, "-", "tuning_structs"], [324, 0, 0, "-", "utility"]], "neural_compressor.strategy.utils.tuning_sampler": [[321, 2, 1, "", "FallbackTuningSampler"], [321, 2, 1, "", "ModelWiseTuningSampler"], [321, 2, 1, "", "OpTypeWiseTuningSampler"], [321, 2, 1, "", "OpWiseTuningSampler"], [321, 2, 1, "", "SmoothQuantSampler"], [321, 2, 1, "", "TuningOrder"], [321, 2, 1, "", "TuningSampler"], [321, 2, 1, "", "TuningSamplerRegistry"]], "neural_compressor.strategy.utils.tuning_space": [[322, 2, 1, "", "TuningItem"], [322, 2, 1, "", "TuningSpace"], [322, 1, 1, "", "get_op_mode_by_query_order"], [322, 1, 1, "", "initial_tuning_cfg_with_quant_mode"], [322, 1, 1, "", "pattern_to_internal"], [322, 1, 1, "", "pattern_to_path"], [322, 1, 1, "", "quant_mode_from_pattern"]], "neural_compressor.strategy.utils.tuning_structs": [[323, 2, 1, "", "OpTuningConfig"]], "neural_compressor.strategy.utils.utility": [[324, 2, 1, "", "OrderedDefaultDict"], [324, 1, 1, "", "extract_data_type"], [324, 1, 1, "", "get_adaptor_name"], [324, 1, 1, "", "reverted_data_type"]], "neural_compressor.template": [[325, 0, 0, "-", "api_doc_example"]], "neural_compressor.template.api_doc_example": [[325, 2, 1, "", "ExampleClass"], [325, 3, 1, "", "attribute1"], [325, 1, 1, "", "function1"], [325, 1, 1, "", "function2"], [325, 1, 1, "", "function3"], [325, 1, 1, "", "generator1"], [325, 4, 1, "", "module_debug_level1"]], "neural_compressor.template.api_doc_example.ExampleClass": [[325, 3, 1, "", "attr1"], [325, 3, 1, "", "attr2"], [325, 3, 1, "", "attr5"]], "neural_compressor.training": [[327, 2, 1, "", "CallBacks"], [327, 2, 1, "", "CompressionManager"], [327, 1, 1, "", "fit"], [327, 1, 1, "", "prepare_compression"]], "neural_compressor.utils": [[328, 0, 0, "-", "collect_layer_histogram"], [329, 0, 0, "-", "constant"], [330, 0, 0, "-", "create_obj_from_config"], [332, 0, 0, "-", "kl_divergence"], [333, 0, 0, "-", "load_huggingface"], [334, 0, 0, "-", "logger"], [335, 0, 0, "-", "options"], [336, 0, 0, "-", "pytorch"], [337, 0, 0, "-", "utility"]], "neural_compressor.utils.collect_layer_histogram": [[328, 2, 1, "", "LayerHistogramCollector"]], "neural_compressor.utils.create_obj_from_config": [[330, 1, 1, "", "create_dataloader"], [330, 1, 1, "", "create_dataset"], [330, 1, 1, "", "create_eval_func"], [330, 1, 1, "", "create_train_func"], [330, 1, 1, "", "get_algorithm"], [330, 1, 1, "", "get_func_from_config"], [330, 1, 1, "", "get_metrics"], [330, 1, 1, "", "get_postprocess"], [330, 1, 1, "", "get_preprocess"]], "neural_compressor.utils.kl_divergence": [[332, 2, 1, "", "KL_Divergence"]], "neural_compressor.utils.load_huggingface": [[333, 2, 1, "", "OptimizedModel"], [333, 1, 1, "", "save_for_huggingface_upstream"]], "neural_compressor.utils.logger": [[334, 2, 1, "", "Logger"], [334, 1, 1, "", "debug"], [334, 1, 1, "", "error"], [334, 1, 1, "", "fatal"], [334, 1, 1, "", "info"], [334, 1, 1, "", "log"], [334, 1, 1, "", "warn"], [334, 1, 1, "", "warning"]], "neural_compressor.utils.options": [[335, 2, 1, "", "onnxrt"]], "neural_compressor.utils.pytorch": [[336, 1, 1, "", "is_int8_model"], [336, 1, 1, "", "load"]], "neural_compressor.utils.utility": [[337, 2, 1, "", "CaptureOutputToFile"], [337, 2, 1, "", "CpuInfo"], [337, 1, 1, "", "Dequantize"], [337, 1, 1, "", "DequantizeWeight"], [337, 2, 1, "", "GLOBAL_STATE"], [337, 2, 1, "", "LazyImport"], [337, 2, 1, "", "MODE"], [337, 2, 1, "", "Statistics"], [337, 1, 1, "", "combine_histogram"], [337, 1, 1, "", "compute_sparsity"], [337, 1, 1, "", "dump_data_to_local"], [337, 1, 1, "", "dump_elapsed_time"], [337, 1, 1, "", "equal_dicts"], [337, 1, 1, "", "fault_tolerant_file"], [337, 1, 1, "", "get_all_fp32_data"], [337, 1, 1, "", "get_size"], [337, 1, 1, "", "get_tensor_histogram"], [337, 1, 1, "", "get_tuning_history"], [337, 1, 1, "", "load_data_from_pkl"], [337, 1, 1, "", "recover"], [337, 1, 1, "", "set_random_seed"], [337, 1, 1, "", "set_resume_from"], [337, 1, 1, "", "set_tensorboard"], [337, 1, 1, "", "set_workspace"], [337, 1, 1, "", "show_memory_info"], [337, 1, 1, "", "singleton"], [337, 1, 1, "", "str2array"], [337, 1, 1, "", "time_limit"], [337, 1, 1, "", "version1_eq_version2"], [337, 1, 1, "", "version1_gt_version2"], [337, 1, 1, "", "version1_gte_version2"], [337, 1, 1, "", "version1_lt_version2"], [337, 1, 1, "", "version1_lte_version2"]], "neural_compressor.ux": [[413, 0, 0, "-", "components"], [472, 0, 0, "-", "inc_bench"], [481, 0, 0, "-", "utils"], [507, 0, 0, "-", "web"]], "neural_compressor.ux.components": [[341, 0, 0, "-", "benchmark"], [345, 0, 0, "-", "config_generator"], [353, 0, 0, "-", "configuration_wizard"], [389, 0, 0, "-", "db_manager"], [394, 0, 0, "-", "diagnosis"], [402, 0, 0, "-", "file_browser"], [408, 0, 0, "-", "graph"], [414, 0, 0, "-", "jobs_management"], [418, 0, 0, "-", "manage_workspace"], [420, 0, 0, "-", "model"], [439, 0, 0, "-", "model_zoo"], [441, 0, 0, "-", "names_mapper"], [448, 0, 0, "-", "optimization"], [464, 0, 0, "-", "profiling"]], "neural_compressor.ux.components.benchmark": [[341, 2, 1, "", "Benchmarks"], [338, 0, 0, "-", "benchmark"], [339, 0, 0, "-", "benchmark_model"], [340, 0, 0, "-", "execute_benchmark"]], "neural_compressor.ux.components.benchmark.benchmark": [[338, 2, 1, "", "Benchmark"], [338, 2, 1, "", "DataloaderInterface"]], "neural_compressor.ux.components.benchmark.benchmark_model": [[339, 1, 1, "", "benchmark_model"], [339, 1, 1, "", "parse_args"], [339, 1, 1, "", "set_eager_execution"]], "neural_compressor.ux.components.benchmark.execute_benchmark": [[340, 1, 1, "", "benchmark_result_update"], [340, 1, 1, "", "benchmark_result_update_pytorch_script"], [340, 1, 1, "", "execute_benchmark"], [340, 1, 1, "", "execute_real_benchmark"], [340, 1, 1, "", "pytorch_script_bench_optimizations"], [340, 1, 1, "", "pytorch_script_bench_original_model"]], "neural_compressor.ux.components.config_generator": [[342, 0, 0, "-", "benchmark_config_generator"], [343, 0, 0, "-", "config_generator"], [344, 0, 0, "-", "graph_optimization_config_generator"], [346, 0, 0, "-", "mixed_precision_config_generator"], [347, 0, 0, "-", "profiling_config_generator"], [348, 0, 0, "-", "pruning_config_generator"], [349, 0, 0, "-", "quantization_config_generator"]], "neural_compressor.ux.components.config_generator.benchmark_config_generator": [[342, 2, 1, "", "BenchmarkConfigGenerator"]], "neural_compressor.ux.components.config_generator.config_generator": [[343, 2, 1, "", "ConfigGenerator"]], "neural_compressor.ux.components.config_generator.graph_optimization_config_generator": [[344, 2, 1, "", "GraphOptimizationConfigGenerator"]], "neural_compressor.ux.components.config_generator.mixed_precision_config_generator": [[346, 2, 1, "", "MixedPrecisionConfigGenerator"]], "neural_compressor.ux.components.config_generator.profiling_config_generator": [[347, 2, 1, "", "ProfilingConfigGenerator"]], "neural_compressor.ux.components.config_generator.pruning_config_generator": [[348, 2, 1, "", "PruningConfigGenerator"]], "neural_compressor.ux.components.config_generator.quantization_config_generator": [[349, 2, 1, "", "QuantizationConfigGenerator"]], "neural_compressor.ux.components.configuration_wizard": [[350, 0, 0, "-", "configuration_parser"], [351, 0, 0, "-", "get_boundary_nodes"], [352, 0, 0, "-", "get_configuration"], [354, 0, 0, "-", "params_feeder"], [355, 0, 0, "-", "pruning_config_parser"]], "neural_compressor.ux.components.configuration_wizard.configuration_parser": [[350, 2, 1, "", "ConfigurationParser"], [350, 1, 1, "", "normalize_string_list"], [350, 1, 1, "", "parse_list_value"], [350, 1, 1, "", "parse_multidim_list"]], "neural_compressor.ux.components.configuration_wizard.get_boundary_nodes": [[351, 1, 1, "", "get_boundary_nodes"]], "neural_compressor.ux.components.configuration_wizard.get_configuration": [[352, 1, 1, "", "get_predefined_configuration"], [352, 1, 1, "", "update_config_to_machine_specification"]], "neural_compressor.ux.components.configuration_wizard.params_feeder": [[354, 2, 1, "", "Feeder"], [354, 1, 1, "", "get_possible_values"]], "neural_compressor.ux.components.configuration_wizard.pruning_config_parser": [[355, 2, 1, "", "PruningConfigParser"]], "neural_compressor.ux.components.db_manager": [[356, 0, 0, "-", "db_manager"], [365, 0, 0, "-", "db_models"], [384, 0, 0, "-", "db_operations"], [390, 0, 0, "-", "params_interfaces"], [391, 0, 0, "-", "utils"]], "neural_compressor.ux.components.db_manager.db_manager": [[356, 2, 1, "", "DBManager"]], "neural_compressor.ux.components.db_manager.db_models": [[357, 0, 0, "-", "benchmark"], [358, 0, 0, "-", "benchmark_result"], [359, 0, 0, "-", "dataloader"], [360, 0, 0, "-", "dataset"], [361, 0, 0, "-", "domain"], [362, 0, 0, "-", "domain_flavour"], [363, 0, 0, "-", "example"], [364, 0, 0, "-", "framework"], [366, 0, 0, "-", "metric"], [367, 0, 0, "-", "model"], [368, 0, 0, "-", "optimization"], [369, 0, 0, "-", "optimization_type"], [370, 0, 0, "-", "precision"], [371, 0, 0, "-", "profiling"], [372, 0, 0, "-", "profiling_result"], [373, 0, 0, "-", "project"], [374, 0, 0, "-", "pruning_details"], [375, 0, 0, "-", "transform"], [376, 0, 0, "-", "tuning_details"], [377, 0, 0, "-", "tuning_history"]], "neural_compressor.ux.components.db_manager.db_models.benchmark": [[357, 2, 1, "", "Benchmark"]], "neural_compressor.ux.components.db_manager.db_models.benchmark_result": [[358, 2, 1, "", "BenchmarkResult"]], "neural_compressor.ux.components.db_manager.db_models.dataloader": [[359, 2, 1, "", "Dataloader"], [359, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.dataset": [[360, 2, 1, "", "Dataset"]], "neural_compressor.ux.components.db_manager.db_models.domain": [[361, 2, 1, "", "Domain"], [361, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.domain_flavour": [[362, 2, 1, "", "DomainFlavour"], [362, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.example": [[363, 2, 1, "", "Example"]], "neural_compressor.ux.components.db_manager.db_models.framework": [[364, 2, 1, "", "Framework"], [364, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.metric": [[366, 2, 1, "", "Metric"], [366, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.model": [[367, 2, 1, "", "Model"]], "neural_compressor.ux.components.db_manager.db_models.optimization": [[368, 2, 1, "", "Optimization"]], "neural_compressor.ux.components.db_manager.db_models.optimization_type": [[369, 2, 1, "", "OptimizationType"], [369, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.precision": [[370, 2, 1, "", "Precision"], [370, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.profiling": [[371, 2, 1, "", "Profiling"]], "neural_compressor.ux.components.db_manager.db_models.profiling_result": [[372, 2, 1, "", "ProfilingResult"]], "neural_compressor.ux.components.db_manager.db_models.project": [[373, 2, 1, "", "Project"]], "neural_compressor.ux.components.db_manager.db_models.pruning_details": [[374, 2, 1, "", "PruningDetails"]], "neural_compressor.ux.components.db_manager.db_models.transform": [[375, 2, 1, "", "Transform"], [375, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.tuning_details": [[376, 2, 1, "", "TuningDetails"]], "neural_compressor.ux.components.db_manager.db_models.tuning_history": [[377, 2, 1, "", "TuningHistory"]], "neural_compressor.ux.components.db_manager.db_operations": [[378, 0, 0, "-", "benchmark_api_interface"], [379, 0, 0, "-", "dataset_api_interface"], [380, 0, 0, "-", "db_operations"], [381, 0, 0, "-", "diagnosis_api_interface"], [382, 0, 0, "-", "dictionaries_api_interface"], [383, 0, 0, "-", "examples_api_interface"], [385, 0, 0, "-", "model_api_interface"], [386, 0, 0, "-", "optimization_api_interface"], [387, 0, 0, "-", "profiling_api_interface"], [388, 0, 0, "-", "project_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface": [[378, 2, 1, "", "BenchmarkAPIInterface"], [378, 1, 1, "", "before_delete_benchmark_entry"]], "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface": [[379, 2, 1, "", "DatasetAPIInterface"], [379, 1, 1, "", "initialize_associations"], [379, 1, 1, "", "initialize_precision_optimization_types_association"], [379, 1, 1, "", "search_in_list_of_dict"], [379, 1, 1, "", "search_in_list_of_dict_for_unique_value"], [379, 1, 1, "", "set_database_version"]], "neural_compressor.ux.components.db_manager.db_operations.db_operations": [[380, 1, 1, "", "initialize_associations"], [380, 1, 1, "", "initialize_precision_optimization_types_association"], [380, 1, 1, "", "search_in_list_of_dict"], [380, 1, 1, "", "search_in_list_of_dict_for_unique_value"], [380, 1, 1, "", "set_database_version"]], "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface": [[381, 2, 1, "", "DiagnosisAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface": [[382, 2, 1, "", "DictionariesAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface": [[383, 2, 1, "", "ExamplesAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.model_api_interface": [[385, 2, 1, "", "ModelAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface": [[386, 2, 1, "", "OptimizationAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface": [[387, 2, 1, "", "ProfilingAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.project_api_interface": [[388, 2, 1, "", "ProjectAPIInterface"]], "neural_compressor.ux.components.db_manager.params_interfaces": [[390, 2, 1, "", "BenchmarkAddParamsInterface"], [390, 2, 1, "", "BenchmarkEditParamsInterface"], [390, 2, 1, "", "DatasetAddParamsInterface"], [390, 2, 1, "", "DiagnosisOptimizationParamsInterface"], [390, 2, 1, "", "ModelAddParamsInterface"], [390, 2, 1, "", "OptimizationAddParamsInterface"], [390, 2, 1, "", "OptimizationEditParamsInterface"], [390, 2, 1, "", "ProfilingAddParamsInterface"], [390, 2, 1, "", "ProfilingEditParamsInterface"], [390, 2, 1, "", "ProfilingResultAddParamsInterface"], [390, 2, 1, "", "TuningHistoryInterface"], [390, 2, 1, "", "TuningHistoryItemInterface"]], "neural_compressor.ux.components.db_manager.utils": [[391, 1, 1, "", "get_framework_dataloaders_config"], [391, 1, 1, "", "get_framework_transforms_config"], [391, 1, 1, "", "update_dataloaders_params"]], "neural_compressor.ux.components.diagnosis": [[392, 0, 0, "-", "diagnosis"], [393, 0, 0, "-", "factory"], [395, 0, 0, "-", "onnx_diagnosis"], [397, 0, 0, "-", "op_details"], [398, 0, 0, "-", "op_entry"], [399, 0, 0, "-", "tensorflow_diagnosis"]], "neural_compressor.ux.components.diagnosis.diagnosis": [[392, 2, 1, "", "Diagnosis"]], "neural_compressor.ux.components.diagnosis.factory": [[393, 2, 1, "", "DiagnosisFactory"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis": [[396, 0, 0, "-", "onnxrt_diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis": [[396, 2, 1, "", "OnnxRtDiagnosis"]], "neural_compressor.ux.components.diagnosis.op_details": [[397, 2, 1, "", "OpActivation"], [397, 2, 1, "", "OpDetails"], [397, 2, 1, "", "OpPattern"], [397, 2, 1, "", "OpWeights"]], "neural_compressor.ux.components.diagnosis.op_entry": [[398, 2, 1, "", "OpEntry"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis": [[400, 0, 0, "-", "tensorflow_diagnosis"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis": [[400, 2, 1, "", "TensorflowDiagnosis"]], "neural_compressor.ux.components.file_browser": [[401, 0, 0, "-", "file_browser"]], "neural_compressor.ux.components.file_browser.file_browser": [[401, 1, 1, "", "create_dir_entry"], [401, 1, 1, "", "create_entry"], [401, 1, 1, "", "create_file_entry"], [401, 1, 1, "", "filter_requested_entries"], [401, 1, 1, "", "get_directory_entries"], [401, 1, 1, "", "get_filter_value"], [401, 1, 1, "", "get_non_hidden_directory_entries"], [401, 1, 1, "", "get_requested_path"], [401, 1, 1, "", "get_setting_value"], [401, 1, 1, "", "is_dataset_or_directory_entry"], [401, 1, 1, "", "is_directory_entry"], [401, 1, 1, "", "is_model_or_directory_entry"], [401, 1, 1, "", "should_show_files"], [401, 1, 1, "", "should_show_only_model_files"], [401, 1, 1, "", "sort_entries"]], "neural_compressor.ux.components.graph": [[403, 0, 0, "-", "attribute"], [404, 0, 0, "-", "collapser"], [405, 0, 0, "-", "edge"], [406, 0, 0, "-", "graph"], [407, 0, 0, "-", "graph_reader"], [409, 0, 0, "-", "node"], [410, 0, 0, "-", "reader"]], "neural_compressor.ux.components.graph.attribute": [[403, 2, 1, "", "Attribute"]], "neural_compressor.ux.components.graph.collapser": [[404, 2, 1, "", "Collapser"]], "neural_compressor.ux.components.graph.edge": [[405, 2, 1, "", "Edge"]], "neural_compressor.ux.components.graph.graph": [[406, 2, 1, "", "Graph"]], "neural_compressor.ux.components.graph.graph_reader": [[407, 2, 1, "", "GraphReader"]], "neural_compressor.ux.components.graph.node": [[409, 2, 1, "", "GroupNode"], [409, 2, 1, "", "Node"]], "neural_compressor.ux.components.graph.reader": [[411, 0, 0, "-", "onnxrt_reader"], [412, 0, 0, "-", "tensorflow_reader"]], "neural_compressor.ux.components.graph.reader.onnxrt_reader": [[411, 2, 1, "", "OnnxrtReader"]], "neural_compressor.ux.components.graph.reader.tensorflow_reader": [[412, 2, 1, "", "TensorflowReader"]], "neural_compressor.ux.components.jobs_management": [[415, 0, 0, "-", "jobs_control_queue"], [416, 0, 0, "-", "jobs_manager"], [417, 0, 0, "-", "request"]], "neural_compressor.ux.components.manage_workspace": [[418, 1, 1, "", "get_default_path"]], "neural_compressor.ux.components.model": [[419, 0, 0, "-", "domain"], [421, 0, 0, "-", "model"], [422, 0, 0, "-", "model_type_getter"], [423, 0, 0, "-", "onnxrt"], [425, 0, 0, "-", "pytorch"], [427, 0, 0, "-", "repository"], [428, 0, 0, "-", "shape"], [430, 0, 0, "-", "tensorflow"]], "neural_compressor.ux.components.model.domain": [[419, 2, 1, "", "Domain"]], "neural_compressor.ux.components.model.model": [[421, 2, 1, "", "Model"]], "neural_compressor.ux.components.model.model_type_getter": [[422, 1, 1, "", "get_model_type"]], "neural_compressor.ux.components.model.onnxrt": [[424, 0, 0, "-", "model"]], "neural_compressor.ux.components.model.onnxrt.model": [[424, 2, 1, "", "OnnxrtModel"], [424, 1, 1, "", "remove_number_of_samples_from_shape"]], "neural_compressor.ux.components.model.pytorch": [[426, 0, 0, "-", "model"]], "neural_compressor.ux.components.model.pytorch.model": [[426, 2, 1, "", "PyTorchScriptModel"]], "neural_compressor.ux.components.model.repository": [[427, 2, 1, "", "ModelRepository"]], "neural_compressor.ux.components.model.shape": [[428, 2, 1, "", "Shape"]], "neural_compressor.ux.components.model.tensorflow": [[429, 0, 0, "-", "frozen_pb"], [431, 0, 0, "-", "keras"], [432, 0, 0, "-", "meta_graph"], [433, 0, 0, "-", "model"], [434, 0, 0, "-", "saved_model"], [435, 0, 0, "-", "utils"]], "neural_compressor.ux.components.model.tensorflow.frozen_pb": [[429, 2, 1, "", "FrozenPbModel"]], "neural_compressor.ux.components.model.tensorflow.keras": [[431, 2, 1, "", "KerasModel"]], "neural_compressor.ux.components.model.tensorflow.meta_graph": [[432, 2, 1, "", "MetaGraphModel"]], "neural_compressor.ux.components.model.tensorflow.model": [[433, 2, 1, "", "TensorflowModel"]], "neural_compressor.ux.components.model.tensorflow.saved_model": [[434, 2, 1, "", "SavedModelModel"]], "neural_compressor.ux.components.model.tensorflow.utils": [[435, 1, 1, "", "get_input_shape"]], "neural_compressor.ux.components.model_zoo": [[436, 0, 0, "-", "download_config"], [437, 0, 0, "-", "download_model"], [438, 0, 0, "-", "downloader"], [440, 0, 0, "-", "list_models"]], "neural_compressor.ux.components.model_zoo.download_config": [[436, 1, 1, "", "download_config"]], "neural_compressor.ux.components.model_zoo.download_model": [[437, 1, 1, "", "download_model"]], "neural_compressor.ux.components.model_zoo.downloader": [[438, 2, 1, "", "Downloader"]], "neural_compressor.ux.components.model_zoo.list_models": [[440, 1, 1, "", "check_version"], [440, 1, 1, "", "get_available_models"], [440, 1, 1, "", "get_framework_module_name"], [440, 1, 1, "", "get_installed_frameworks"], [440, 1, 1, "", "list_models"], [440, 1, 1, "", "validate_model_list"]], "neural_compressor.ux.components.names_mapper": [[442, 0, 0, "-", "names_mapper"]], "neural_compressor.ux.components.names_mapper.names_mapper": [[442, 2, 1, "", "MappingDirection"], [442, 2, 1, "", "NamesMapper"]], "neural_compressor.ux.components.optimization": [[448, 2, 1, "", "Optimizations"], [443, 0, 0, "-", "execute_optimization"], [444, 0, 0, "-", "factory"], [446, 0, 0, "-", "graph_optimizer"], [449, 0, 0, "-", "mixed_precision"], [452, 0, 0, "-", "neural_coder_optimization"], [454, 0, 0, "-", "optimization"], [455, 0, 0, "-", "pruning"], [458, 0, 0, "-", "tune"], [461, 0, 0, "-", "tuning_history"]], "neural_compressor.ux.components.optimization.execute_optimization": [[443, 1, 1, "", "check_if_collect_tuning_history"], [443, 1, 1, "", "execute_optimization"], [443, 1, 1, "", "execute_optimization_pytorch_script"], [443, 1, 1, "", "execute_optimization_regular"], [443, 1, 1, "", "parse_logs"], [443, 1, 1, "", "parse_model_data_to_bench_names"]], "neural_compressor.ux.components.optimization.factory": [[444, 2, 1, "", "OptimizationFactory"]], "neural_compressor.ux.components.optimization.graph_optimizer": [[445, 0, 0, "-", "graph_optimization"], [447, 0, 0, "-", "optimize_model"]], "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization": [[445, 2, 1, "", "GraphOptimization"]], "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model": [[447, 1, 1, "", "optimize_graph"], [447, 1, 1, "", "optimize_graph_config"], [447, 1, 1, "", "parse_args"], [447, 1, 1, "", "set_eager_execution"]], "neural_compressor.ux.components.optimization.mixed_precision": [[450, 0, 0, "-", "mixed_precision"], [451, 0, 0, "-", "optimize_model"]], "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision": [[450, 2, 1, "", "MixedPrecision"]], "neural_compressor.ux.components.optimization.mixed_precision.optimize_model": [[451, 1, 1, "", "optimize_graph"], [451, 1, 1, "", "optimize_graph_config"], [451, 1, 1, "", "parse_args"], [451, 1, 1, "", "set_eager_execution"]], "neural_compressor.ux.components.optimization.neural_coder_optimization": [[453, 0, 0, "-", "optimize_model"]], "neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model": [[453, 1, 1, "", "optimize_pt_script"]], "neural_compressor.ux.components.optimization.optimization": [[454, 2, 1, "", "DataloaderInterface"], [454, 2, 1, "", "Optimization"], [454, 2, 1, "", "OptimizationInterface"]], "neural_compressor.ux.components.optimization.pruning": [[456, 0, 0, "-", "optimize_model"], [457, 0, 0, "-", "pruning"]], "neural_compressor.ux.components.optimization.pruning.optimize_model": [[456, 1, 1, "", "optimize_model"], [456, 1, 1, "", "parse_args"]], "neural_compressor.ux.components.optimization.pruning.pruning": [[457, 2, 1, "", "Pruning"]], "neural_compressor.ux.components.optimization.tune": [[459, 0, 0, "-", "tune_model"], [460, 0, 0, "-", "tuning"]], "neural_compressor.ux.components.optimization.tune.tune_model": [[459, 1, 1, "", "parse_args"], [459, 1, 1, "", "set_eager_execution"], [459, 1, 1, "", "tune_model"]], "neural_compressor.ux.components.optimization.tune.tuning": [[460, 2, 1, "", "AccuracyCriterion"], [460, 2, 1, "", "Tuning"], [460, 2, 1, "", "TuningDetails"]], "neural_compressor.ux.components.optimization.tuning_history": [[461, 2, 1, "", "TuningHistory"], [461, 2, 1, "", "Watcher"], [461, 1, 1, "", "tuning_history"], [461, 1, 1, "", "tuning_history_path"]], "neural_compressor.ux.components.profiling": [[462, 0, 0, "-", "execute_profiling"], [463, 0, 0, "-", "factory"], [465, 0, 0, "-", "profile_model"], [466, 0, 0, "-", "profiler"], [467, 0, 0, "-", "profiling"], [469, 0, 0, "-", "tensorflow_profiler"]], "neural_compressor.ux.components.profiling.execute_profiling": [[462, 1, 1, "", "execute_profiling"], [462, 1, 1, "", "execute_real_profiling"]], "neural_compressor.ux.components.profiling.factory": [[463, 2, 1, "", "ProfilerFactory"]], "neural_compressor.ux.components.profiling.profile_model": [[465, 1, 1, "", "load_profiling_details"], [465, 1, 1, "", "parse_args"]], "neural_compressor.ux.components.profiling.profiler": [[466, 2, 1, "", "Profiler"]], "neural_compressor.ux.components.profiling.profiling": [[467, 2, 1, "", "DataloaderInterface"], [467, 2, 1, "", "Profiling"]], "neural_compressor.ux.components.profiling.tensorflow_profiler": [[468, 0, 0, "-", "factory"], [470, 0, 0, "-", "profiler"], [471, 0, 0, "-", "utils"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.factory": [[468, 2, 1, "", "ProfilerFactory"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler": [[470, 2, 1, "", "Profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.utils": [[471, 1, 1, "", "delete_assign"]], "neural_compressor.ux.inc_bench": [[472, 1, 1, "", "main"], [472, 1, 1, "", "prepare_environment"]], "neural_compressor.ux.utils": [[474, 0, 0, "-", "consts"], [475, 0, 0, "-", "environment"], [476, 0, 0, "-", "exceptions"], [477, 0, 0, "-", "executor"], [478, 0, 0, "-", "expiring_dict"], [479, 0, 0, "-", "github_info"], [480, 0, 0, "-", "hw_info"], [482, 0, 0, "-", "json_serializer"], [483, 0, 0, "-", "logger"], [484, 0, 0, "-", "parser"], [485, 0, 0, "-", "proc"], [486, 0, 0, "-", "processes"], [487, 0, 0, "-", "singleton"], [488, 0, 0, "-", "status_updates"], [489, 0, 0, "-", "templates"], [492, 0, 0, "-", "utils"], [497, 0, 0, "-", "workload"], [503, 0, 0, "-", "yaml_utils"]], "neural_compressor.ux.utils.consts": [[474, 2, 1, "", "DomainFlavours"], [474, 2, 1, "", "Domains"], [474, 2, 1, "", "ExecutionStatus"], [474, 2, 1, "", "Frameworks"], [474, 2, 1, "", "OptimizationTypes"], [474, 2, 1, "", "Precisions"], [474, 2, 1, "", "Strategies"]], "neural_compressor.ux.utils.environment": [[475, 2, 1, "", "Environment"]], "neural_compressor.ux.utils.exceptions": [[476, 5, 1, "", "AccessDeniedException"], [476, 5, 1, "", "ClientErrorException"], [476, 5, 1, "", "InternalException"], [476, 5, 1, "", "NotFoundException"]], "neural_compressor.ux.utils.executor": [[477, 2, 1, "", "Executor"]], "neural_compressor.ux.utils.expiring_dict": [[478, 2, 1, "", "ExpiringDict"], [478, 2, 1, "", "ExpiringDictItem"]], "neural_compressor.ux.utils.github_info": [[479, 2, 1, "", "GithubInfo"]], "neural_compressor.ux.utils.hw_info": [[480, 2, 1, "", "HWInfo"], [480, 1, 1, "", "get_bios_version"], [480, 1, 1, "", "get_distribution"], [480, 1, 1, "", "get_framework_dependency_info"], [480, 1, 1, "", "get_framework_info"], [480, 1, 1, "", "get_kernel_version"], [480, 1, 1, "", "get_number_of_sockets"], [480, 1, 1, "", "is_turbo_boost_enabled"]], "neural_compressor.ux.utils.json_serializer": [[482, 2, 1, "", "JsonSerializer"]], "neural_compressor.ux.utils.logger": [[483, 1, 1, "", "change_log_level"]], "neural_compressor.ux.utils.parser": [[484, 2, 1, "", "AccuracyParser"], [484, 2, 1, "", "BenchmarkParserFactory"], [484, 2, 1, "", "OptimizationParser"], [484, 2, 1, "", "Parser"], [484, 2, 1, "", "PerformanceParser"], [484, 2, 1, "", "ProfilingParser"]], "neural_compressor.ux.utils.proc": [[485, 2, 1, "", "Proc"]], "neural_compressor.ux.utils.processes": [[486, 2, 1, "", "NCProcesses"]], "neural_compressor.ux.utils.singleton": [[487, 2, 1, "", "Singleton"]], "neural_compressor.ux.utils.status_updates": [[488, 1, 1, "", "get_status_update_function"]], "neural_compressor.ux.utils.templates": [[490, 0, 0, "-", "metric"], [491, 0, 0, "-", "workdir"]], "neural_compressor.ux.utils.templates.metric": [[490, 2, 1, "", "Metric"]], "neural_compressor.ux.utils.templates.workdir": [[491, 2, 1, "", "Workdir"]], "neural_compressor.ux.utils.utils": [[492, 1, 1, "", "are_archive_filenames_valid"], [492, 1, 1, "", "check_module"], [492, 1, 1, "", "deprecated"], [492, 1, 1, "", "determine_ip"], [492, 1, 1, "", "export_to_csv"], [492, 1, 1, "", "filter_transforms"], [492, 1, 1, "", "get_dataset_path"], [492, 1, 1, "", "get_default_pruning_config_path"], [492, 1, 1, "", "get_file_extension"], [492, 1, 1, "", "get_framework_from_path"], [492, 1, 1, "", "get_height_width_from_size"], [492, 1, 1, "", "get_metrics_dict"], [492, 1, 1, "", "get_model_zoo_config_path"], [492, 1, 1, "", "get_model_zoo_model_path"], [492, 1, 1, "", "get_module_version"], [492, 1, 1, "", "get_predefined_config_path"], [492, 1, 1, "", "get_shape_from_transforms"], [492, 1, 1, "", "get_size"], [492, 1, 1, "", "is_dataset_file"], [492, 1, 1, "", "is_development_env"], [492, 1, 1, "", "is_hidden"], [492, 1, 1, "", "load_dataloader_config"], [492, 1, 1, "", "load_help_nc_params"], [492, 1, 1, "", "load_metrics_config"], [492, 1, 1, "", "load_model_config"], [492, 1, 1, "", "load_model_wise_params"], [492, 1, 1, "", "load_precisions_config"], [492, 1, 1, "", "load_pruning_details_config"], [492, 1, 1, "", "load_transforms_config"], [492, 1, 1, "", "load_transforms_filter_config"], [492, 1, 1, "", "normalize_domain"], [492, 1, 1, "", "normalize_framework"], [492, 1, 1, "", "normalize_string"], [492, 1, 1, "", "parse_bool_value"], [492, 1, 1, "", "parse_to_float_list"], [492, 1, 1, "", "parse_to_string_list"], [492, 1, 1, "", "parse_version"], [492, 1, 1, "", "release_tag"], [492, 1, 1, "", "replace_with_values"], [492, 1, 1, "", "safe_extract_archive"], [492, 1, 1, "", "verify_file_path"]], "neural_compressor.ux.utils.workload": [[493, 0, 0, "-", "config"], [494, 0, 0, "-", "dataloader"], [495, 0, 0, "-", "evaluation"], [496, 0, 0, "-", "graph_optimization"], [498, 0, 0, "-", "mixed_precision"], [499, 0, 0, "-", "model"], [500, 0, 0, "-", "pruning"], [501, 0, 0, "-", "quantization"], [502, 0, 0, "-", "tuning"]], "neural_compressor.ux.utils.workload.config": [[493, 2, 1, "", "Config"]], "neural_compressor.ux.utils.workload.dataloader": [[494, 2, 1, "", "Dataloader"], [494, 2, 1, "", "Dataset"], [494, 2, 1, "", "Filter"], [494, 2, 1, "", "LabelBalance"], [494, 2, 1, "", "Transform"]], "neural_compressor.ux.utils.workload.evaluation": [[495, 2, 1, "", "Accuracy"], [495, 2, 1, "", "Configs"], [495, 2, 1, "", "Evaluation"], [495, 2, 1, "", "Metric"], [495, 2, 1, "", "Performance"], [495, 2, 1, "", "Postprocess"], [495, 2, 1, "", "PostprocessSchema"]], "neural_compressor.ux.utils.workload.graph_optimization": [[496, 2, 1, "", "GraphOptimization"]], "neural_compressor.ux.utils.workload.mixed_precision": [[498, 2, 1, "", "MixedPrecision"]], "neural_compressor.ux.utils.workload.model": [[499, 2, 1, "", "Model"]], "neural_compressor.ux.utils.workload.pruning": [[500, 2, 1, "", "AdamOptimizer"], [500, 2, 1, "", "AdamWOptimizer"], [500, 2, 1, "", "Approach"], [500, 2, 1, "", "Criterion"], [500, 2, 1, "", "CrossEntropyLossCriterion"], [500, 2, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [500, 2, 1, "", "KnowledgeDistillationLossCriterion"], [500, 2, 1, "", "Optimizer"], [500, 2, 1, "", "Pruning"], [500, 2, 1, "", "SGDOptimizer"], [500, 2, 1, "", "SelfKnowledgeDistillationLoss"], [500, 2, 1, "", "SparseCategoricalCrossentropyCriterion"], [500, 2, 1, "", "Train"], [500, 2, 1, "", "WeightCompressionApproach"], [500, 1, 1, "", "parse_dict_value_to_float"], [500, 1, 1, "", "parse_dict_value_to_int"]], "neural_compressor.ux.utils.workload.quantization": [[501, 2, 1, "", "Advance"], [501, 2, 1, "", "Calibration"], [501, 2, 1, "", "Quantization"], [501, 2, 1, "", "WiseConfig"], [501, 2, 1, "", "WiseConfigDetails"]], "neural_compressor.ux.utils.workload.tuning": [[502, 2, 1, "", "AccCriterion"], [502, 2, 1, "", "Diagnosis"], [502, 2, 1, "", "ExitPolicy"], [502, 2, 1, "", "MultiObjectives"], [502, 2, 1, "", "Strategy"], [502, 2, 1, "", "Tuning"], [502, 2, 1, "", "Workspace"]], "neural_compressor.ux.utils.yaml_utils": [[503, 1, 1, "", "float_representer"], [503, 1, 1, "", "pruner_representer"]], "neural_compressor.ux.web": [[504, 0, 0, "-", "communication"], [505, 0, 0, "-", "configuration"], [506, 0, 0, "-", "exceptions"], [508, 0, 0, "-", "router"], [509, 0, 0, "-", "server"], [512, 0, 0, "-", "service"]], "neural_compressor.ux.web.communication": [[504, 2, 1, "", "Message"], [504, 2, 1, "", "MessageQueue"], [504, 2, 1, "", "Request"], [504, 2, 1, "", "Response"], [504, 1, 1, "", "create_simple_response"]], "neural_compressor.ux.web.configuration": [[505, 2, 1, "", "Configuration"]], "neural_compressor.ux.web.exceptions": [[506, 5, 1, "", "ServiceNotFoundException"]], "neural_compressor.ux.web.router": [[508, 2, 1, "", "DeferredRoutingDefinition"], [508, 2, 1, "", "DeferredSubprocessRoutingDefinition"], [508, 2, 1, "", "RealtimeRoutingDefinition"], [508, 2, 1, "", "Router"], [508, 2, 1, "", "RoutingDefinition"], [508, 1, 1, "", "find_pattern_in_graph"], [508, 1, 1, "", "get_model_graph"], [508, 1, 1, "", "get_system_info"]], "neural_compressor.ux.web.server": [[509, 1, 1, "", "allow_api_call"], [509, 1, 1, "", "block_iframe"], [509, 1, 1, "", "block_sniffing"], [509, 1, 1, "", "build_parameters"], [509, 1, 1, "", "disable_cache"], [509, 1, 1, "", "get_tls_args"], [509, 1, 1, "", "handle_api_call"], [509, 1, 1, "", "page_not_found"], [509, 1, 1, "", "require_api_token"], [509, 1, 1, "", "root"], [509, 1, 1, "", "run_server"], [509, 1, 1, "", "web_socket_publisher"]], "neural_compressor.ux.web.service": [[510, 0, 0, "-", "benchmark"], [511, 0, 0, "-", "history_snapshot_parser"], [513, 0, 0, "-", "model"], [514, 0, 0, "-", "optimization"], [515, 0, 0, "-", "profiling"], [516, 0, 0, "-", "request_data_processor"], [517, 0, 0, "-", "response_generator"], [518, 0, 0, "-", "workload"]], "neural_compressor.ux.web.service.benchmark": [[510, 2, 1, "", "BenchmarkService"]], "neural_compressor.ux.web.service.history_snapshot_parser": [[511, 2, 1, "", "HistorySnapshotParser"]], "neural_compressor.ux.web.service.model": [[513, 2, 1, "", "ModelService"]], "neural_compressor.ux.web.service.optimization": [[514, 2, 1, "", "OptimizationService"]], "neural_compressor.ux.web.service.profiling": [[515, 2, 1, "", "ProfilingService"]], "neural_compressor.ux.web.service.request_data_processor": [[516, 2, 1, "", "RequestDataProcessor"]], "neural_compressor.ux.web.service.response_generator": [[517, 2, 1, "", "ResponseGenerator"]], "neural_compressor.ux.web.service.workload": [[518, 2, 1, "", "WorkloadService"]]}, "objtypes": {"0": "py:module", "1": "py:function", "2": "py:class", "3": "py:attribute", "4": "py:data", "5": "py:exception"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "function", "Python function"], "2": ["py", "class", "Python class"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "data", "Python data"], "5": ["py", "exception", "Python exception"]}, "titleterms": {"644ec953a7dc_pruning_support": 0, "6ece06672ed3_v1_14": 1, "modul": [1, 5, 6, 8, 13, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 159, 161, 162, 163, 164, 165, 166, 167, 170, 173, 174, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 197, 198, 200, 201, 202, 203, 204, 205, 207, 208, 209, 210, 211, 212, 214, 215, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 237, 239, 240, 241, 243, 244, 245, 246, 247, 249, 250, 252, 253, 254, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 268, 269, 270, 271, 274, 275, 276, 279, 280, 281, 282, 283, 284, 285, 287, 288, 290, 291, 292, 294, 295, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 321, 322, 323, 324, 325, 327, 328, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 342, 343, 344, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 388, 390, 391, 392, 393, 396, 397, 398, 400, 401, 403, 404, 405, 406, 407, 409, 411, 412, 418, 419, 421, 422, 424, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 440, 442, 443, 444, 445, 447, 450, 451, 453, 454, 456, 457, 459, 460, 461, 462, 463, 465, 466, 467, 468, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 513, 514, 515, 516, 517, 518], "content": [1, 5, 6, 7, 8, 13, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 111, 112, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 159, 161, 162, 163, 164, 165, 166, 167, 170, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 214, 215, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 280, 281, 282, 283, 284, 285, 287, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 321, 322, 323, 324, 325, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 388, 390, 391, 392, 393, 396, 397, 398, 400, 401, 403, 404, 405, 406, 407, 409, 411, 412, 418, 419, 421, 422, 424, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 440, 442, 443, 444, 445, 447, 448, 450, 451, 453, 454, 456, 457, 459, 460, 461, 462, 463, 465, 466, 467, 468, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 493, 494, 495, 496, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 513, 514, 515, 516, 517, 518, 526, 542], "function": [1, 5, 6, 15, 34, 40, 41, 63, 64, 66, 100, 101, 112, 114, 142, 143, 144, 147, 148, 149, 151, 154, 156, 159, 161, 162, 163, 164, 165, 167, 170, 177, 185, 187, 191, 194, 195, 196, 199, 201, 202, 203, 204, 206, 208, 209, 211, 214, 217, 225, 227, 231, 234, 235, 236, 238, 239, 240, 243, 244, 245, 246, 249, 250, 252, 253, 254, 255, 256, 263, 270, 274, 279, 280, 281, 283, 287, 288, 290, 291, 292, 293, 294, 295, 299, 303, 305, 306, 310, 318, 322, 324, 325, 327, 330, 331, 333, 334, 336, 337, 339, 340, 350, 351, 352, 354, 359, 361, 362, 364, 366, 369, 370, 375, 378, 379, 380, 391, 401, 418, 422, 424, 435, 436, 437, 440, 443, 447, 451, 453, 456, 459, 461, 462, 465, 471, 472, 480, 483, 488, 492, 500, 503, 504, 508, 509, 549], "6f0d0f71d92e_v1_13": 2, "9e89549a08c8_v1_11": 3, "block_mask": 4, "env": 5, "neural_compressor": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519], "adaptor": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 527, 528], "class": [6, 8, 13, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 98, 99, 100, 101, 103, 104, 105, 106, 109, 111, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 143, 144, 146, 149, 150, 151, 152, 153, 154, 155, 156, 159, 161, 162, 163, 164, 166, 167, 170, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 215, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 246, 247, 248, 249, 252, 255, 256, 257, 258, 259, 260, 262, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 279, 281, 282, 283, 284, 285, 287, 290, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 318, 321, 322, 323, 324, 325, 327, 328, 331, 332, 333, 334, 335, 337, 338, 341, 342, 343, 344, 346, 347, 348, 349, 350, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 385, 386, 387, 388, 390, 392, 393, 396, 397, 398, 400, 403, 404, 405, 406, 407, 409, 411, 412, 419, 421, 424, 426, 427, 428, 429, 431, 432, 433, 434, 438, 442, 444, 445, 448, 450, 454, 457, 460, 461, 463, 466, 467, 468, 470, 474, 475, 477, 478, 479, 480, 482, 484, 485, 486, 487, 490, 491, 493, 494, 495, 496, 498, 499, 500, 501, 502, 504, 505, 508, 510, 511, 513, 514, 515, 516, 517, 518, 527], "subpackag": [7, 18, 83, 107, 108, 110, 158, 171, 196, 236, 248, 272, 286, 314, 389, 394, 408, 413, 420, 448, 464, 473, 481, 507], "submodul": [7, 14, 18, 30, 47, 72, 83, 91, 97, 102, 107, 108, 110, 113, 126, 139, 145, 151, 157, 158, 160, 172, 179, 191, 195, 199, 206, 213, 219, 231, 235, 238, 242, 248, 255, 261, 267, 273, 277, 286, 293, 297, 314, 320, 326, 331, 341, 345, 353, 365, 384, 389, 394, 395, 399, 402, 408, 410, 413, 414, 420, 423, 425, 430, 439, 441, 446, 448, 449, 452, 455, 458, 464, 469, 473, 481, 489, 497, 507, 512], "packag": [7, 30, 151, 179, 191, 195, 196, 199, 206, 219, 231, 235, 236, 238, 248, 255, 267, 272, 273, 293, 297, 314, 331, 341, 448, 573, 575, 577, 578], "kera": [8, 431], "keras_util": [9, 10, 11, 12], "conv2d": 9, "dens": 10, "quantiz": [12, 39, 284, 306, 501, 523, 526, 539, 548, 554, 557, 560, 569, 580, 587, 588, 589, 592, 598], "mxnet": [13, 545, 559, 588, 594, 598], "mxnet_util": [14, 15], "util": [15, 40, 142, 148, 165, 246, 319, 320, 321, 322, 323, 324, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 391, 435, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 530], "onnxrt": [16, 423, 424, 545, 559, 594], "ox_util": [17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40], "calibr": 17, "oper": [19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38], "activ": 19, "argmax": 20, "attent": 21, "binary_op": 22, "concat": 23, "conv": 24, "direct_q8": 25, "embed_layernorm": 26, "gather": 27, "gavgpool": 28, "gemm": 29, "lstm": 31, "matmul": 32, "maxpool": 33, "op": 34, "pad": 35, "pool": 36, "resiz": 37, "split": 38, "pytorch": [41, 336, 425, 426, 545, 549, 559, 561, 588, 589, 593, 594, 598], "queri": [42, 527], "tensorflow": [43, 429, 430, 431, 432, 433, 434, 435, 545, 549, 559, 561, 588, 589, 593, 594, 598], "tf_util": [44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142], "graph_convert": 44, "graph_converter_without_calib": 45, "graph_rewrit": [46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105], "bf16": [46, 47], "bf16_convert": [46, 143], "gener": [48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81], "convert_add_to_biasadd": 48, "convert_layout": 49, "convert_leakyrelu": 50, "convert_nan_to_random": 51, "convert_placeholder_to_const": 52, "dequantize_cast_optim": 53, "dilated_contract": 54, "dummy_biasadd": 55, "expanddims_optim": 56, "fetch_weight_from_reshap": 57, "fold_batch_norm": 58, "fold_const": 59, "fuse_biasadd_add": 60, "fuse_column_wise_mul": 61, "fuse_conv_with_math": 62, "fuse_decomposed_bn": 63, "fuse_decomposed_in": 64, "fuse_gelu": 65, "fuse_layer_norm": 66, "fuse_pad_with_conv": 67, "fuse_pad_with_fp32_conv": 68, "fuse_reshape_transpos": 69, "graph_cse_optim": 70, "grappler_pass": 71, "insert_print_nod": 73, "move_squeeze_after_relu": 74, "pre_optim": 75, "remove_training_nod": 76, "rename_batch_norm": 77, "split_shared_input": 78, "strip_equivalent_nod": 79, "strip_unused_nod": 80, "switch_optim": 81, "graph_bas": 82, "int8": [84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 551, 598], "freeze_fake_qu": 84, "freeze_valu": 85, "freeze_value_without_calib": 86, "fuse_conv_redundant_dequant": 87, "fuse_conv_requant": 88, "fuse_matmul_redundant_dequant": 89, "fuse_matmul_requant": 90, "meta_op_optim": 92, "post_hostconst_convert": 93, "post_quantized_op_cs": 94, "rnn_convert": 95, "scale_propag": 96, "onnx": [97, 98, 99, 100, 101, 529, 557, 561, 588, 598], "onnx_graph": 98, "onnx_nod": 99, "onnx_schema": 100, "tf2onnx_util": 101, "qdq": [102, 103, 104, 105, 119, 120, 121, 122, 123, 124, 125, 126, 127, 598], "insert_qdq_pattern": 103, "merge_duplicated_qdq": 104, "share_qdq_y_pattern": 105, "graph_util": 106, "quantize_graph": [108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134], "qat": [109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 598], "fake_quant": 109, "quantize_config": 111, "quantize_help": 112, "quantize_lay": [113, 114, 115, 116, 117], "optimize_lay": 114, "quantize_layer_add": 115, "quantize_layer_bas": 116, "quantize_layer_bn": 117, "quantize_wrapp": 118, "fuse_qdq_bn": 119, "fuse_qdq_concatv2": 120, "fuse_qdq_conv": 121, "fuse_qdq_deconv": 122, "fuse_qdq_in": 123, "fuse_qdq_matmul": 124, "fuse_qdq_pool": 125, "optimize_qdq": 127, "quantize_graph_bas": 128, "quantize_graph_bn": 129, "quantize_graph_concatv2": 130, "quantize_graph_conv": 131, "quantize_graph_for_intel_cpu": 132, "quantize_graph_matmul": 133, "quantize_graph_pool": 134, "quantize_graph_common": 135, "tf2onnx_convert": 136, "transform_graph": [137, 138, 139, 140, 141], "bias_correct": 137, "graph_transform_bas": 138, "insert_log": 140, "rerange_quantized_concat": 141, "torch_util": [143, 144, 145, 146, 147, 148, 211], "hawq_metr": 144, "smooth_quant": [146, 152], "symbolic_trac": 147, "algorithm": [149, 150, 151, 152, 153, 595], "fast_bias_correct": 150, "weight_correct": 153, "benchmark": [154, 203, 338, 339, 340, 341, 357, 510, 533, 542, 543, 560, 587], "compress": [155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 213, 214, 534], "callback": 155, "distil": [156, 157, 241, 547, 548, 560, 587, 598], "criterion": [156, 204], "pruner": [159, 160, 161, 162, 163, 164, 165, 270, 281], "criteria": [159, 585, 595], "pattern": [161, 273, 274, 275, 279, 585], "reg": 163, "schedul": [164, 283, 285, 585], "conf": [166, 167, 168, 169], "config": [166, 170, 493, 535, 544, 545, 582], "dotdict": 167, "pythonic_config": 169, "contrib": [171, 172, 173, 174], "strategi": [172, 173, 174, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 540, 591, 595], "sigopt": [173, 591, 595], "tpe": [174, 595], "data": [175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 550], "dataload": [175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 205, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 359, 494, 544, 545], "base_dataload": [175, 215], "default_dataload": [177, 217], "fetcher": [178, 218], "attribut": [179, 187, 196, 227, 236, 248, 272, 297, 325, 331, 403, 521], "mxnet_dataload": [180, 220], "onnxrt_dataload": [181, 221], "pytorch_dataload": [182, 222], "sampler": [183, 223], "tensorflow_dataload": [184, 224], "dataset": [185, 186, 187, 188, 189, 190, 191, 192, 225, 226, 227, 228, 229, 230, 231, 232, 360, 542, 545, 555], "bert_dataset": [185, 225], "coco_dataset": [186, 226], "dummy_dataset": [188, 228], "dummy_dataset_v2": [189, 229], "imagenet_dataset": [190, 230], "style_transfer_dataset": [192, 232], "filter": [193, 194, 195, 233, 234, 235], "coco_filt": [193, 233], "transform": [197, 198, 199, 200, 201, 202, 237, 238, 239, 240, 375, 555, 594], "coco_transform": 197, "imagenet_transform": [198, 237], "postprocess": [200, 210], "token": [201, 239], "experiment": [203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285], "common": [204, 205, 206, 207, 208, 209, 210, 211, 523, 552], "metric": [207, 249, 250, 251, 252, 253, 254, 255, 256, 287, 288, 289, 290, 291, 292, 293, 294, 366, 490, 555, 559], "model": [208, 296, 297, 298, 299, 300, 301, 302, 303, 304, 367, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 499, 513, 537, 542, 551, 554, 557, 560, 562, 569, 585, 592, 598], "optim": [209, 368, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 514, 542, 570, 580, 583, 596], "compon": [212, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471], "prune": [214, 271, 282, 455, 456, 457, 500, 542, 560, 585, 587, 598], "export": [242, 243, 244, 245, 246, 551], "qlinear2qdq": 243, "tf2onnx": 244, "torch2onnx": 245, "graph_optim": [247, 445, 446, 447, 496], "bleu": [249, 287], "bleu_util": [250, 288], "coco_label_map": [251, 289], "coco_tool": [252, 290], "evaluate_squad": [253, 291], "f1": [254, 292], "mixed_precis": [257, 449, 450, 451, 498], "model_convers": 258, "na": [259, 260, 261, 262, 263, 264, 524, 542, 587], "basic_na": 259, "dyna": 260, "nas_util": 263, "search_algorithm": 264, "pruner_legaci": [265, 266, 267, 268, 269, 270], "gradient_sensit": 265, "group_lasso": 266, "magnitud": 268, "pattern_lock": 269, "pruning_recip": [272, 273, 274, 275], "tile_pattern": 275, "pruning_v2": 276, "pytorch_prun": [277, 278, 279, 280, 281, 282, 283], "logger": [278, 334, 483], "prune_util": 280, "mix_precis": 295, "base_model": 296, "keras_model": 298, "mxnet_model": 300, "nets_factori": 301, "onnx_model": 302, "tensorflow_model": 303, "torch_model": 304, "object": [305, 538, 582], "auto": [307, 574, 580, 589, 595], "auto_mixed_precis": 308, "basic": [309, 524, 595], "bayesian": [310, 595], "conserv": [311, 595], "exhaust": [312, 595], "hawq_v2": [313, 595], "mse": [315, 595], "mse_v2": [316, 595], "random": [317, 595], "constant": [319, 329], "tuning_sampl": 321, "tuning_spac": 322, "tuning_struct": 323, "templat": [325, 326, 489, 490, 491, 522], "api_doc_exampl": 325, "train": [327, 523, 541, 549, 560, 588], "collect_layer_histogram": 328, "create_obj_from_config": 330, "kl_diverg": 332, "load_huggingfac": 333, "option": [335, 542, 549, 568], "ux": [338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518], "benchmark_model": 339, "execute_benchmark": 340, "config_gener": [342, 343, 344, 345, 346, 347, 348, 349], "benchmark_config_gener": 342, "graph_optimization_config_gener": 344, "mixed_precision_config_gener": 346, "profiling_config_gener": 347, "pruning_config_gener": 348, "quantization_config_gener": 349, "configuration_wizard": [350, 351, 352, 353, 354, 355], "configuration_pars": 350, "get_boundary_nod": 351, "get_configur": 352, "params_feed": 354, "pruning_config_pars": 355, "db_manag": [356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391], "db_model": [357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377], "benchmark_result": 358, "domain": [361, 419], "domain_flavour": 362, "exampl": [363, 523, 524, 527, 531, 543, 544, 545, 547, 548, 549, 550, 551, 560, 561, 562, 565, 569, 582, 583, 585, 588, 592, 593, 598], "framework": [364, 544, 545, 551, 553, 562, 587], "optimization_typ": 369, "precis": [370, 536, 560, 561, 589], "profil": [371, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 515, 542], "profiling_result": 372, "project": [373, 542], "pruning_detail": 374, "tuning_detail": 376, "tuning_histori": [377, 461], "db_oper": [378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388], "benchmark_api_interfac": 378, "dataset_api_interfac": 379, "diagnosis_api_interfac": 381, "dictionaries_api_interfac": 382, "examples_api_interfac": 383, "model_api_interfac": 385, "optimization_api_interfac": 386, "profiling_api_interfac": 387, "project_api_interfac": 388, "params_interfac": 390, "diagnosi": [392, 393, 394, 395, 396, 397, 398, 399, 400, 542], "factori": [393, 444, 463, 468], "onnx_diagnosi": [395, 396], "onnxrt_diagnosi": 396, "op_detail": 397, "op_entri": 398, "tensorflow_diagnosi": [399, 400], "file_brows": [401, 402], "graph": [403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 542], "collaps": 404, "edg": 405, "graph_read": 407, "node": 409, "reader": [410, 411, 412], "onnxrt_read": 411, "tensorflow_read": 412, "jobs_manag": [414, 415, 416, 417], "jobs_control_queu": 415, "request": [417, 522], "manage_workspac": 418, "model_type_gett": 422, "repositori": 427, "shape": 428, "frozen_pb": 429, "meta_graph": 432, "saved_model": 434, "model_zoo": [436, 437, 438, 439, 440], "download_config": 436, "download_model": 437, "download": 438, "list_model": 440, "names_mapp": [441, 442], "execute_optim": 443, "optimize_model": [447, 451, 453, 456], "neural_coder_optim": [452, 453], "tune": [458, 459, 460, 502, 588, 595], "tune_model": 459, "execute_profil": 462, "profile_model": 465, "tensorflow_profil": [468, 469, 470, 471], "inc_bench": 472, "const": 474, "environ": [475, 557, 566], "except": [476, 506], "executor": 477, "expiring_dict": 478, "github_info": 479, "hw_info": 480, "json_seri": 482, "parser": 484, "proc": 485, "process": [486, 595], "singleton": 487, "status_upd": 488, "workdir": 491, "workload": [493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 518], "evalu": [495, 549], "yaml_util": 503, "web": [504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518], "commun": 504, "configur": [505, 549, 553, 584, 587, 591, 597], "router": 508, "server": 509, "servic": [510, 511, 512, 513, 514, 515, 516, 517, 518], "history_snapshot_pars": 511, "request_data_processor": 516, "response_gener": 517, "version": 519, "intel": [520, 526, 542, 556, 557, 560, 566, 574, 580, 598, 599], "neural": [520, 523, 524, 526, 542, 556, 557, 560, 563, 567, 569, 574, 580, 585, 591, 596, 599], "compressor": [520, 523, 526, 542, 556, 557, 560, 574, 580, 591, 599], "document": [520, 526, 531, 599], "section": [520, 599], "contributor": [521, 522], "coven": [521, 522], "code": [521, 522, 524, 560, 581, 596], "conduct": [521, 522], "our": 521, "pledg": 521, "standard": 521, "respons": 521, "scope": [521, 585], "enforc": 521, "contribut": [522, 573, 577], "guidelin": 522, "pull": 522, "checklist": 522, "support": [522, 523, 524, 527, 543, 544, 545, 547, 548, 549, 551, 553, 556, 557, 559, 561, 562, 564, 565, 569, 570, 582, 583, 585, 587, 588, 592, 593, 594, 597], "fx": 523, "introduct": [523, 524, 527, 542, 543, 544, 545, 547, 548, 549, 551, 553, 556, 559, 561, 562, 580, 582, 583, 585, 587, 588, 591, 592, 593, 594, 595, 597], "mode": [523, 598], "matrix": [523, 524, 527, 543, 544, 545, 547, 548, 549, 551, 553, 556, 559, 561, 562, 565, 582, 583, 585, 587, 588, 592, 593, 597], "get": [523, 524, 526, 527, 543, 544, 545, 547, 548, 549, 553, 554, 559, 561, 563, 574, 581, 582, 583, 585, 587, 588, 593, 597], "start": [523, 524, 526, 527, 542, 543, 544, 545, 547, 548, 549, 553, 554, 559, 561, 563, 564, 568, 574, 582, 583, 585, 587, 588, 593, 597], "post": [523, 560, 588], "static": [523, 588], "dynam": [523, 524, 588], "awar": [523, 560, 588], "note": [523, 590], "detail": [523, 542], "problem": 523, "architectur": [524, 546, 556, 557], "search": [524, 580], "api": [524, 526, 527, 531, 532, 543, 544, 545, 547, 548, 549, 554, 555, 559, 561, 563, 567, 581, 582, 583, 585, 587, 596], "usag": [524, 569, 580, 593, 595], "1": [524, 542, 549, 552, 555, 560, 580, 598], "python": [524, 526, 554, 559, 563, 567, 568, 575, 578, 587, 596], "yaml": [524, 544, 545, 549, 553, 597], "2": [524, 542, 549, 552, 555, 560, 580, 598], "onli": 524, "advanc": [524, 596], "custom": [524, 542, 559, 595], "secur": [525, 542, 549], "polici": [525, 595], "report": 525, "vulner": 525, "instal": [526, 542, 557, 564, 566, 573, 574, 577], "from": [526, 542, 557, 560], "pypi": [526, 569], "select": [526, 574], "public": [526, 586], "event": [526, 586], "addit": 526, "research": 526, "collabor": 526, "work": [527, 588], "flow": [527, 588], "background": [527, 580], "ad": 527, "new": [527, 542, 575, 578, 595], "backend": [527, 588], "capabl": 527, "implement": 527, "onnxrtadaptor": 527, "runtim": [529, 557, 561, 588, 598], "torch": [530, 598], "mix": [536, 560, 561, 589], "bench": [542, 567], "tabl": 542, "binari": [542, 557], "sourc": [542, 557], "home": 542, "screen": 542, "creat": [542, 544], "predefin": 542, "displai": 542, "list": [542, 550, 594], "remov": 542, "develop": [542, 573, 577], "tab": 542, "wizard": 542, "edit": 542, "entri": 542, "inform": [542, 558], "demo": 542, "system": [542, 557, 584], "file": [544, 545, 553, 597], "user": [544, 545, 549, 555, 587, 596, 597], "specif": [544, 545], "design": [546, 595], "workflow": 546, "knowledg": [547, 598], "intermedi": 547, "layer": 547, "self": 547, "distribut": [549, 569, 595], "infer": 549, "featur": [549, 553, 556, 569, 570, 574, 587, 588, 593, 597], "pure": 549, "defin": 549, "horovodrun": 549, "execut": 549, "releas": [550, 575, 578, 590], "fp32": 551, "appendix": 551, "frequent": 552, "ask": 552, "question": 552, "build": [552, 559], "issu": [552, 590], "3": [552, 564, 580], "4": [552, 571, 580, 586], "quick": [554, 568], "sampl": 554, "jupyterlab": [554, 574], "extens": [554, 563, 573, 574, 577, 580, 581, 598], "gui": 554, "valid": [554, 557, 592, 598], "incompat": [555, 590], "chang": [555, 579, 581, 590], "between": 555, "v1": 555, "face": 555, "built": [555, 557, 559], "infrastructur": 556, "linux": 557, "prerequisit": 557, "ai": 557, "kit": 557, "window": 557, "requir": [557, 573, 577], "hardwar": [557, 598], "cpu": [557, 566, 598], "base": [557, 596], "64": 557, "compat": 557, "processor": 557, "gpu": 557, "": [557, 581], "xe": 557, "multipl": [557, 582, 598], "vendor": 557, "through": [557, 598], "softwar": 557, "legal": 558, "licens": 558, "citat": 558, "trademark": 558, "singl": [559, 582], "multi": 559, "migrat": 560, "x": 560, "orchestr": [560, 583], "coder": [563, 567, 569, 580, 596], "what": [563, 581], "do": 563, "we": 563, "offer": 563, "jupyt": [563, 564, 575, 578], "lab": [563, 564], "launcher": [563, 568], "contact": 563, "aw": 564, "amazon": 564, "sagemak": 564, "For": 564, "studio": 564, "notebook": 564, "instanc": 564, "guid": [564, 596], "bigdl": 565, "nano": 565, "platform": [566, 591], "best": [566, 574], "perform": [566, 591], "set": [566, 580], "mkl": 566, "openmp": 566, "jemalloc": 566, "numa": 566, "control": 566, "variabl": 566, "frequenc": 566, "govern": 566, "enabl": [567, 574, 580], "superbench": 567, "argument": 568, "v0": 571, "highlight": 571, "other": 571, "changelog": [572, 576], "neural_compressor_ext_lab": [573, 575], "uninstal": [573, 577], "Or": 574, "let": 574, "u": 574, "help": 574, "you": 574, "pre": 574, "requisit": 574, "make": [575, 578, 581], "manual": [575, 578], "npm": [575, 578], "autom": [575, 578], "publish": [575, 578], "conda": [575, 578], "forg": [575, 578], "neural_compressor_ext_lab_alibaba": [577, 578], "log": 579, "unreleas": 579, "vscode": 580, "open": 580, "icon": 580, "5": 580, "welcom": 581, "your": 581, "v": 581, "folder": 581, "setup": 581, "up": 581, "run": 581, "straight": 581, "awai": 581, "explor": 581, "test": 581, "go": 581, "further": 581, "One": 583, "shot": 583, "network": 585, "type": 585, "sparsiti": 585, "decai": 585, "regular": 585, "spars": 585, "deploy": 585, "refer": [585, 588], "full": 586, "57": 586, "2023": 586, "2022": 586, "34": 586, "2021": 586, "15": 586, "2018": 586, "2020": 586, "style": 587, "access": 587, "fundament": [588, 592], "scheme": 588, "ipex": 588, "approach": 588, "With": 588, "without": 588, "accuraci": [588, 595], "specifi": 588, "rule": 588, "recip": 588, "turn": 589, "off": 589, "dure": 589, "known": 590, "prepar": 591, "benefit": 591, "comparison": 591, "differ": 591, "smooth": 592, "quant": 592, "smoothquant": 592, "tensorboard": 593, "space": 595, "exit": 595, "overview": 596, "zero": 596, "topic": 596, "11": 598, "0": 598, "13": 598, "ptq": 598, "9": 598}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"644ec953a7dc_pruning_support": [[0, "module-644ec953a7dc_pruning_support"]], "6ece06672ed3_v1_14": [[1, "module-6ece06672ed3_v1_14"]], "Module Contents": [[1, "module-contents"], [5, "module-contents"], [6, "module-contents"], [8, "module-contents"], [13, "module-contents"], [15, "module-contents"], [16, "module-contents"], [17, "module-contents"], [19, "module-contents"], [20, "module-contents"], [21, "module-contents"], [22, "module-contents"], [23, "module-contents"], [24, "module-contents"], [25, "module-contents"], [26, "module-contents"], [27, "module-contents"], [28, "module-contents"], [29, "module-contents"], [31, "module-contents"], [32, "module-contents"], [33, "module-contents"], [34, "module-contents"], [35, "module-contents"], [36, "module-contents"], [37, "module-contents"], [38, "module-contents"], [39, "module-contents"], [40, "module-contents"], [41, "module-contents"], [42, "module-contents"], [43, "module-contents"], [44, "module-contents"], [45, "module-contents"], [46, "module-contents"], [48, "module-contents"], [49, "module-contents"], [50, "module-contents"], [51, "module-contents"], [52, "module-contents"], [53, "module-contents"], [54, "module-contents"], [55, "module-contents"], [56, "module-contents"], [57, "module-contents"], [58, "module-contents"], [59, "module-contents"], [60, "module-contents"], [61, "module-contents"], [62, "module-contents"], [63, "module-contents"], [64, "module-contents"], [65, "module-contents"], [66, "module-contents"], [67, "module-contents"], [68, "module-contents"], [69, "module-contents"], [70, "module-contents"], [71, "module-contents"], [73, "module-contents"], [74, "module-contents"], [75, "module-contents"], [76, "module-contents"], [77, "module-contents"], [78, "module-contents"], [79, "module-contents"], [80, "module-contents"], [81, "module-contents"], [82, "module-contents"], [84, "module-contents"], [85, "module-contents"], [86, "module-contents"], [87, "module-contents"], [88, "module-contents"], [89, "module-contents"], [90, "module-contents"], [92, "module-contents"], [93, "module-contents"], [94, "module-contents"], [95, "module-contents"], [96, "module-contents"], [98, "module-contents"], [99, "module-contents"], [100, "module-contents"], [101, "module-contents"], [103, "module-contents"], [104, "module-contents"], [105, "module-contents"], [106, "module-contents"], [109, "module-contents"], [111, "module-contents"], [112, "module-contents"], [114, "module-contents"], [115, "module-contents"], [116, "module-contents"], [117, "module-contents"], [118, "module-contents"], [119, "module-contents"], [120, "module-contents"], [121, "module-contents"], [122, "module-contents"], [123, "module-contents"], [124, "module-contents"], [125, "module-contents"], [127, "module-contents"], [128, "module-contents"], [129, "module-contents"], [130, "module-contents"], [131, "module-contents"], [132, "module-contents"], [133, "module-contents"], [134, "module-contents"], [135, "module-contents"], [136, "module-contents"], [137, "module-contents"], [138, "module-contents"], [140, "module-contents"], [141, "module-contents"], [142, "module-contents"], [143, "module-contents"], [144, "module-contents"], [146, "module-contents"], [147, "module-contents"], [148, "module-contents"], [149, "module-contents"], [150, "module-contents"], [152, "module-contents"], [153, "module-contents"], [154, "module-contents"], [155, "module-contents"], [156, "module-contents"], [159, "module-contents"], [161, "module-contents"], [162, "module-contents"], [163, "module-contents"], [164, "module-contents"], [165, "module-contents"], [166, "module-contents"], [167, "module-contents"], [170, "module-contents"], [173, "module-contents"], [174, "module-contents"], [175, "module-contents"], [176, "module-contents"], [177, "module-contents"], [178, "module-contents"], [180, "module-contents"], [181, "module-contents"], [182, "module-contents"], [183, "module-contents"], [184, "module-contents"], [185, "module-contents"], [186, "module-contents"], [187, "module-contents"], [188, "module-contents"], [189, "module-contents"], [190, "module-contents"], [192, "module-contents"], [193, "module-contents"], [194, "module-contents"], [197, "module-contents"], [198, "module-contents"], [200, "module-contents"], [201, "module-contents"], [202, "module-contents"], [203, "module-contents"], [204, "module-contents"], [205, "module-contents"], [207, "module-contents"], [208, "module-contents"], [209, "module-contents"], [210, "module-contents"], [211, "module-contents"], [212, "module-contents"], [214, "module-contents"], [215, "module-contents"], [217, "module-contents"], [218, "module-contents"], [220, "module-contents"], [221, "module-contents"], [222, "module-contents"], [223, "module-contents"], [224, "module-contents"], [225, "module-contents"], [226, "module-contents"], [227, "module-contents"], [228, "module-contents"], [229, "module-contents"], [230, "module-contents"], [232, "module-contents"], [233, "module-contents"], [234, "module-contents"], [237, "module-contents"], [239, "module-contents"], [240, "module-contents"], [241, "module-contents"], [243, "module-contents"], [244, "module-contents"], [245, "module-contents"], [246, "module-contents"], [247, "module-contents"], [249, "module-contents"], [250, "module-contents"], [252, "module-contents"], [253, "module-contents"], [254, "module-contents"], [256, "module-contents"], [257, "module-contents"], [258, "module-contents"], [259, "module-contents"], [260, "module-contents"], [262, "module-contents"], [263, "module-contents"], [264, "module-contents"], [265, "module-contents"], [266, "module-contents"], [268, "module-contents"], [269, "module-contents"], [270, "module-contents"], [271, "module-contents"], [274, "module-contents"], [275, "module-contents"], [276, "module-contents"], [279, "module-contents"], [280, "module-contents"], [281, "module-contents"], [282, "module-contents"], [283, "module-contents"], [284, "module-contents"], [285, "module-contents"], [287, "module-contents"], [288, "module-contents"], [290, "module-contents"], [291, "module-contents"], [292, "module-contents"], [294, "module-contents"], [295, "module-contents"], [296, "module-contents"], [298, "module-contents"], [299, "module-contents"], [300, "module-contents"], [301, "module-contents"], [302, "module-contents"], [303, "module-contents"], [304, "module-contents"], [305, "module-contents"], [306, "module-contents"], [307, "module-contents"], [308, "module-contents"], [309, "module-contents"], [310, "module-contents"], [311, "module-contents"], [312, "module-contents"], [313, "module-contents"], [315, "module-contents"], [316, "module-contents"], [317, "module-contents"], [318, "module-contents"], [321, "module-contents"], [322, "module-contents"], [323, "module-contents"], [324, "module-contents"], [325, "module-contents"], [327, "module-contents"], [328, "module-contents"], [330, "module-contents"], [332, "module-contents"], [333, "module-contents"], [334, "module-contents"], [335, "module-contents"], [336, "module-contents"], [337, "module-contents"], [338, "module-contents"], [339, "module-contents"], [340, "module-contents"], [342, "module-contents"], [343, "module-contents"], [344, "module-contents"], [346, "module-contents"], [347, "module-contents"], [348, "module-contents"], [349, "module-contents"], [350, "module-contents"], [351, "module-contents"], [352, "module-contents"], [354, "module-contents"], [355, "module-contents"], [356, "module-contents"], [357, "module-contents"], [358, "module-contents"], [359, "module-contents"], [360, "module-contents"], [361, "module-contents"], [362, "module-contents"], [363, "module-contents"], [364, "module-contents"], [366, "module-contents"], [367, "module-contents"], [368, "module-contents"], [369, "module-contents"], [370, "module-contents"], [371, "module-contents"], [372, "module-contents"], [373, "module-contents"], [374, "module-contents"], [375, "module-contents"], [376, "module-contents"], [377, "module-contents"], [378, "module-contents"], [379, "module-contents"], [380, "module-contents"], [381, "module-contents"], [382, "module-contents"], [383, "module-contents"], [385, "module-contents"], [386, "module-contents"], [387, "module-contents"], [388, "module-contents"], [390, "module-contents"], [391, "module-contents"], [392, "module-contents"], [393, "module-contents"], [396, "module-contents"], [397, "module-contents"], [398, "module-contents"], [400, "module-contents"], [401, "module-contents"], [403, "module-contents"], [404, "module-contents"], [405, "module-contents"], [406, "module-contents"], [407, "module-contents"], [409, "module-contents"], [411, "module-contents"], [412, "module-contents"], [418, "module-contents"], [419, "module-contents"], [421, "module-contents"], [422, "module-contents"], [424, "module-contents"], [426, "module-contents"], [427, "module-contents"], [428, "module-contents"], [429, "module-contents"], [431, "module-contents"], [432, "module-contents"], [433, "module-contents"], [434, "module-contents"], [435, "module-contents"], [436, "module-contents"], [437, "module-contents"], [438, "module-contents"], [440, "module-contents"], [442, "module-contents"], [443, "module-contents"], [444, "module-contents"], [445, "module-contents"], [447, "module-contents"], [450, "module-contents"], [451, "module-contents"], [453, "module-contents"], [454, "module-contents"], [456, "module-contents"], [457, "module-contents"], [459, "module-contents"], [460, "module-contents"], [461, "module-contents"], [462, "module-contents"], [463, "module-contents"], [465, "module-contents"], [466, "module-contents"], [467, "module-contents"], [468, "module-contents"], [470, "module-contents"], [471, "module-contents"], [472, "module-contents"], [474, "module-contents"], [475, "module-contents"], [476, "module-contents"], [477, "module-contents"], [478, "module-contents"], [479, "module-contents"], [480, "module-contents"], [482, "module-contents"], [483, "module-contents"], [484, "module-contents"], [485, "module-contents"], [486, "module-contents"], [487, "module-contents"], [488, "module-contents"], [490, "module-contents"], [491, "module-contents"], [492, "module-contents"], [493, "module-contents"], [494, "module-contents"], [495, "module-contents"], [496, "module-contents"], [498, "module-contents"], [499, "module-contents"], [500, "module-contents"], [501, "module-contents"], [502, "module-contents"], [503, "module-contents"], [504, "module-contents"], [505, "module-contents"], [506, "module-contents"], [508, "module-contents"], [509, "module-contents"], [510, "module-contents"], [511, "module-contents"], [513, "module-contents"], [514, "module-contents"], [515, "module-contents"], [516, "module-contents"], [517, "module-contents"], [518, "module-contents"]], "Functions": [[1, "functions"], [5, "functions"], [6, "functions"], [15, "functions"], [34, "functions"], [40, "functions"], [41, "functions"], [63, "functions"], [64, "functions"], [66, "functions"], [100, "functions"], [101, "functions"], [112, "functions"], [114, "functions"], [142, "functions"], [143, "functions"], [144, "functions"], [147, "functions"], [148, "functions"], [149, "functions"], [151, "functions"], [154, "functions"], [156, "functions"], [159, "functions"], [161, "functions"], [162, "functions"], [163, "functions"], [164, "functions"], [165, "functions"], [167, "functions"], [170, "functions"], [177, "functions"], [185, "functions"], [187, "functions"], [191, "functions"], [194, "functions"], [195, "functions"], [196, "functions"], [199, "functions"], [201, "functions"], [202, "functions"], [203, "functions"], [204, "functions"], [206, "functions"], [208, "functions"], [209, "functions"], [211, "functions"], [214, "functions"], [217, "functions"], [225, "functions"], [227, "functions"], [231, "functions"], [234, "functions"], [235, "functions"], [236, "functions"], [238, "functions"], [239, "functions"], [240, "functions"], [243, "functions"], [244, "functions"], [245, "functions"], [246, "functions"], [249, "functions"], [250, "functions"], [252, "functions"], [253, "functions"], [254, "functions"], [255, "functions"], [256, "functions"], [263, "functions"], [270, "functions"], [274, "functions"], [279, "functions"], [280, "functions"], [281, "functions"], [283, "functions"], [287, "functions"], [288, "functions"], [290, "functions"], [291, "functions"], [292, "functions"], [293, "functions"], [294, "functions"], [295, "functions"], [299, "functions"], [303, "functions"], [305, "functions"], [306, "functions"], [310, "functions"], [318, "functions"], [322, "functions"], [324, "functions"], [325, "functions"], [327, "functions"], [330, "functions"], [331, "functions"], [333, "functions"], [334, "functions"], [336, "functions"], [337, "functions"], [339, "functions"], [340, "functions"], [350, "functions"], [351, "functions"], [352, "functions"], [354, "functions"], [359, "functions"], [361, "functions"], [362, "functions"], [364, "functions"], [366, "functions"], [369, "functions"], [370, "functions"], [375, "functions"], [378, "functions"], [379, "functions"], [380, "functions"], [391, "functions"], [401, "functions"], [418, "functions"], [422, "functions"], [424, "functions"], [435, "functions"], [436, "functions"], [437, "functions"], [440, "functions"], [443, "functions"], [447, "functions"], [451, "functions"], [453, "functions"], [456, "functions"], [459, "functions"], [461, "functions"], [462, "functions"], [465, "functions"], [471, "functions"], [472, "functions"], [480, "functions"], [483, "functions"], [488, "functions"], [492, "functions"], [500, "functions"], [503, "functions"], [504, "functions"], [508, "functions"], [509, "functions"]], "6f0d0f71d92e_v1_13": [[2, "module-6f0d0f71d92e_v1_13"]], "9e89549a08c8_v1_11": [[3, "module-9e89549a08c8_v1_11"]], "block_mask": [[4, "module-block_mask"]], "env": [[5, "module-env"]], "neural_compressor.adaptor.adaptor": [[6, "module-neural_compressor.adaptor.adaptor"]], "Classes": [[6, "classes"], [8, "classes"], [13, "classes"], [15, "classes"], [16, "classes"], [17, "classes"], [19, "classes"], [20, "classes"], [21, "classes"], [22, "classes"], [23, "classes"], [24, "classes"], [25, "classes"], [26, "classes"], [27, "classes"], [28, "classes"], [29, "classes"], [31, "classes"], [32, "classes"], [33, "classes"], [34, "classes"], [35, "classes"], [36, "classes"], [37, "classes"], [38, "classes"], [39, "classes"], [40, "classes"], [41, "classes"], [42, "classes"], [43, "classes"], [44, "classes"], [45, "classes"], [46, "classes"], [48, "classes"], [49, "classes"], [50, "classes"], [51, "classes"], [52, "classes"], [53, "classes"], [54, "classes"], [55, "classes"], [56, "classes"], [57, "classes"], [58, "classes"], [59, "classes"], [60, "classes"], [61, "classes"], [62, "classes"], [63, "classes"], [64, "classes"], [65, "classes"], [66, "classes"], [67, "classes"], [68, "classes"], [69, "classes"], [70, "classes"], [71, "classes"], [73, "classes"], [74, "classes"], [75, "classes"], [76, "classes"], [77, "classes"], [78, "classes"], [79, "classes"], [80, "classes"], [81, "classes"], [82, "classes"], [84, "classes"], [85, "classes"], [86, "classes"], [87, "classes"], [88, "classes"], [89, "classes"], [90, "classes"], [92, "classes"], [93, "classes"], [94, "classes"], [95, "classes"], [96, "classes"], [98, "classes"], [99, "classes"], [100, "classes"], [101, "classes"], [103, "classes"], [104, "classes"], [105, "classes"], [106, "classes"], [109, "classes"], [111, "classes"], [115, "classes"], [116, "classes"], [117, "classes"], [118, "classes"], [119, "classes"], [120, "classes"], [121, "classes"], [122, "classes"], [123, "classes"], [124, "classes"], [125, "classes"], [127, "classes"], [128, "classes"], [129, "classes"], [130, "classes"], [131, "classes"], [132, "classes"], [133, "classes"], [134, "classes"], [135, "classes"], [136, "classes"], [137, "classes"], [138, "classes"], [140, "classes"], [141, "classes"], [143, "classes"], [144, "classes"], [146, "classes"], [149, "classes"], [150, "classes"], [151, "classes"], [152, "classes"], [153, "classes"], [154, "classes"], [155, "classes"], [156, "classes"], [159, "classes"], [161, "classes"], [162, "classes"], [163, "classes"], [164, "classes"], [166, "classes"], [167, "classes"], [170, "classes"], [173, "classes"], [174, "classes"], [175, "classes"], [176, "classes"], [177, "classes"], [178, "classes"], [179, "classes"], [180, "classes"], [181, "classes"], [182, "classes"], [183, "classes"], [184, "classes"], [185, "classes"], [186, "classes"], [187, "classes"], [188, "classes"], [189, "classes"], [190, "classes"], [191, "classes"], [192, "classes"], [193, "classes"], [194, "classes"], [195, "classes"], [196, "classes"], [197, "classes"], [198, "classes"], [199, "classes"], [200, "classes"], [201, "classes"], [202, "classes"], [203, "classes"], [204, "classes"], [205, "classes"], [206, "classes"], [207, "classes"], [208, "classes"], [209, "classes"], [210, "classes"], [212, "classes"], [215, "classes"], [217, "classes"], [218, "classes"], [220, "classes"], [221, "classes"], [222, "classes"], [223, "classes"], [224, "classes"], [225, "classes"], [226, "classes"], [227, "classes"], [228, "classes"], [229, "classes"], [230, "classes"], [231, "classes"], [232, "classes"], [233, "classes"], [234, "classes"], [235, "classes"], [236, "classes"], [237, "classes"], [238, "classes"], [239, "classes"], [240, "classes"], [241, "classes"], [246, "classes"], [247, "classes"], [248, "classes"], [249, "classes"], [252, "classes"], [255, "classes"], [256, "classes"], [257, "classes"], [258, "classes"], [259, "classes"], [260, "classes"], [262, "classes"], [264, "classes"], [265, "classes"], [266, "classes"], [268, "classes"], [269, "classes"], [270, "classes"], [271, "classes"], [272, "classes"], [273, "classes"], [274, "classes"], [275, "classes"], [276, "classes"], [279, "classes"], [281, "classes"], [282, "classes"], [283, "classes"], [284, "classes"], [285, "classes"], [287, "classes"], [290, "classes"], [293, "classes"], [294, "classes"], [295, "classes"], [296, "classes"], [297, "classes"], [298, "classes"], [299, "classes"], [300, "classes"], [301, "classes"], [302, "classes"], [303, "classes"], [304, "classes"], [305, "classes"], [306, "classes"], [307, "classes"], [308, "classes"], [309, "classes"], [310, "classes"], [311, "classes"], [312, "classes"], [313, "classes"], [315, "classes"], [316, "classes"], [317, "classes"], [318, "classes"], [321, "classes"], [322, "classes"], [323, "classes"], [324, "classes"], [325, "classes"], [327, "classes"], [328, "classes"], [331, "classes"], [332, "classes"], [333, "classes"], [334, "classes"], [335, "classes"], [337, "classes"], [338, "classes"], [341, "classes"], [342, "classes"], [343, "classes"], [344, "classes"], [346, "classes"], [347, "classes"], [348, "classes"], [349, "classes"], [350, "classes"], [354, "classes"], [355, "classes"], [356, "classes"], [357, "classes"], [358, "classes"], [359, "classes"], [360, "classes"], [361, "classes"], [362, "classes"], [363, "classes"], [364, "classes"], [366, "classes"], [367, "classes"], [368, "classes"], [369, "classes"], [370, "classes"], [371, "classes"], [372, "classes"], [373, "classes"], [374, "classes"], [375, "classes"], [376, "classes"], [377, "classes"], [378, "classes"], [379, "classes"], [381, "classes"], [382, "classes"], [383, "classes"], [385, "classes"], [386, "classes"], [387, "classes"], [388, "classes"], [390, "classes"], [392, "classes"], [393, "classes"], [396, "classes"], [397, "classes"], [398, "classes"], [400, "classes"], [403, "classes"], [404, "classes"], [405, "classes"], [406, "classes"], [407, "classes"], [409, "classes"], [411, "classes"], [412, "classes"], [419, "classes"], [421, "classes"], [424, "classes"], [426, "classes"], [427, "classes"], [428, "classes"], [429, "classes"], [431, "classes"], [432, "classes"], [433, "classes"], [434, "classes"], [438, "classes"], [442, "classes"], [444, "classes"], [445, "classes"], [448, "classes"], [450, "classes"], [454, "classes"], [457, "classes"], [460, "classes"], [461, "classes"], [463, "classes"], [466, "classes"], [467, "classes"], [468, "classes"], [470, "classes"], [474, "classes"], [475, "classes"], [477, "classes"], [478, "classes"], [479, "classes"], [480, "classes"], [482, "classes"], [484, "classes"], [485, "classes"], [486, "classes"], [487, "classes"], [490, "classes"], [491, "classes"], [493, "classes"], [494, "classes"], [495, "classes"], [496, "classes"], [498, "classes"], [499, "classes"], [500, "classes"], [501, "classes"], [502, "classes"], [504, "classes"], [505, "classes"], [508, "classes"], [510, "classes"], [511, "classes"], [513, "classes"], [514, "classes"], [515, "classes"], [516, "classes"], [517, "classes"], [518, "classes"]], "neural_compressor.adaptor": [[7, "module-neural_compressor.adaptor"]], "Subpackages": [[7, "subpackages"], [18, "subpackages"], [83, "subpackages"], [107, "subpackages"], [108, "subpackages"], [110, "subpackages"], [158, "subpackages"], [171, "subpackages"], [196, "subpackages"], [236, "subpackages"], [248, "subpackages"], [272, "subpackages"], [286, "subpackages"], [314, "subpackages"], [389, "subpackages"], [394, "subpackages"], [408, "subpackages"], [413, "subpackages"], [420, "subpackages"], [448, "subpackages"], [464, "subpackages"], [473, "subpackages"], [481, "subpackages"], [507, "subpackages"]], "Submodules": [[7, "submodules"], [14, "submodules"], [18, "submodules"], [30, "submodules"], [47, "submodules"], [72, "submodules"], [83, "submodules"], [91, "submodules"], [97, "submodules"], [102, "submodules"], [107, "submodules"], [108, "submodules"], [110, "submodules"], [113, "submodules"], [126, "submodules"], [139, "submodules"], [145, "submodules"], [151, "submodules"], [157, "submodules"], [158, "submodules"], [160, "submodules"], [172, "submodules"], [179, "submodules"], [191, "submodules"], [195, "submodules"], [199, "submodules"], [206, "submodules"], [213, "submodules"], [219, "submodules"], [231, "submodules"], [235, "submodules"], [238, "submodules"], [242, "submodules"], [248, "submodules"], [255, "submodules"], [261, "submodules"], [267, "submodules"], [273, "submodules"], [277, "submodules"], [286, "submodules"], [293, "submodules"], [297, "submodules"], [314, "submodules"], [320, "submodules"], [326, "submodules"], [331, "submodules"], [341, "submodules"], [345, "submodules"], [353, "submodules"], [365, "submodules"], [384, "submodules"], [389, "submodules"], [394, "submodules"], [395, "submodules"], [399, "submodules"], [402, "submodules"], [408, "submodules"], [410, "submodules"], [413, "submodules"], [414, "submodules"], [420, "submodules"], [423, "submodules"], [425, "submodules"], [430, "submodules"], [439, "submodules"], [441, "submodules"], [446, "submodules"], [448, "submodules"], [449, "submodules"], [452, "submodules"], [455, "submodules"], [458, "submodules"], [464, "submodules"], [469, "submodules"], [473, "submodules"], [481, "submodules"], [489, "submodules"], [497, "submodules"], [507, "submodules"], [512, "submodules"]], "Package Contents": [[7, "package-contents"], [30, "package-contents"], [151, "package-contents"], [179, "package-contents"], [191, "package-contents"], [195, "package-contents"], [196, "package-contents"], [199, "package-contents"], [206, "package-contents"], [219, "package-contents"], [231, "package-contents"], [235, "package-contents"], [236, "package-contents"], [238, "package-contents"], [248, "package-contents"], [255, "package-contents"], [267, "package-contents"], [272, "package-contents"], [273, "package-contents"], [293, "package-contents"], [297, "package-contents"], [314, "package-contents"], [331, "package-contents"], [341, "package-contents"], [448, "package-contents"]], "neural_compressor.adaptor.keras": [[8, "module-neural_compressor.adaptor.keras"]], "neural_compressor.adaptor.keras_utils.conv2d": [[9, "module-neural_compressor.adaptor.keras_utils.conv2d"]], "neural_compressor.adaptor.keras_utils.dense": [[10, "module-neural_compressor.adaptor.keras_utils.dense"]], "neural_compressor.adaptor.keras_utils": [[11, "module-neural_compressor.adaptor.keras_utils"]], "neural_compressor.adaptor.keras_utils.quantizer": [[12, "module-neural_compressor.adaptor.keras_utils.quantizer"]], "neural_compressor.adaptor.mxnet": [[13, "module-neural_compressor.adaptor.mxnet"]], "neural_compressor.adaptor.mxnet_utils": [[14, "module-neural_compressor.adaptor.mxnet_utils"]], "neural_compressor.adaptor.mxnet_utils.util": [[15, "module-neural_compressor.adaptor.mxnet_utils.util"]], "neural_compressor.adaptor.onnxrt": [[16, "module-neural_compressor.adaptor.onnxrt"]], "neural_compressor.adaptor.ox_utils.calibration": [[17, "module-neural_compressor.adaptor.ox_utils.calibration"]], "neural_compressor.adaptor.ox_utils": [[18, "module-neural_compressor.adaptor.ox_utils"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[19, "module-neural_compressor.adaptor.ox_utils.operators.activation"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[20, "module-neural_compressor.adaptor.ox_utils.operators.argmax"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[21, "module-neural_compressor.adaptor.ox_utils.operators.attention"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[22, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[23, "module-neural_compressor.adaptor.ox_utils.operators.concat"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[24, "module-neural_compressor.adaptor.ox_utils.operators.conv"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[25, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[26, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[27, "module-neural_compressor.adaptor.ox_utils.operators.gather"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[28, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[29, "module-neural_compressor.adaptor.ox_utils.operators.gemm"]], "neural_compressor.adaptor.ox_utils.operators": [[30, "module-neural_compressor.adaptor.ox_utils.operators"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[31, "module-neural_compressor.adaptor.ox_utils.operators.lstm"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[32, "module-neural_compressor.adaptor.ox_utils.operators.matmul"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[33, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[34, "module-neural_compressor.adaptor.ox_utils.operators.ops"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[35, "module-neural_compressor.adaptor.ox_utils.operators.pad"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[36, "module-neural_compressor.adaptor.ox_utils.operators.pooling"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[37, "module-neural_compressor.adaptor.ox_utils.operators.resize"]], "neural_compressor.adaptor.ox_utils.operators.split": [[38, "module-neural_compressor.adaptor.ox_utils.operators.split"]], "neural_compressor.adaptor.ox_utils.quantizer": [[39, "module-neural_compressor.adaptor.ox_utils.quantizer"]], "neural_compressor.adaptor.ox_utils.util": [[40, "module-neural_compressor.adaptor.ox_utils.util"]], "neural_compressor.adaptor.pytorch": [[41, "module-neural_compressor.adaptor.pytorch"]], "neural_compressor.adaptor.query": [[42, "module-neural_compressor.adaptor.query"]], "neural_compressor.adaptor.tensorflow": [[43, "module-neural_compressor.adaptor.tensorflow"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[44, "module-neural_compressor.adaptor.tf_utils.graph_converter"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[45, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[46, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[47, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[48, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[49, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "neural_compressor.adaptor.tf_utils.graph_util": [[106, "module-neural_compressor.adaptor.tf_utils.graph_util"]], "neural_compressor.adaptor.tf_utils": [[107, "module-neural_compressor.adaptor.tf_utils"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[108, "module-neural_compressor.adaptor.tf_utils.quantize_graph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[109, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[110, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[111, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[112, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[135, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[136, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[137, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[138, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[139, "module-neural_compressor.adaptor.tf_utils.transform_graph"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[140, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[141, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"]], "neural_compressor.adaptor.tf_utils.util": [[142, "module-neural_compressor.adaptor.tf_utils.util"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[143, "module-neural_compressor.adaptor.torch_utils.bf16_convert"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[144, "module-neural_compressor.adaptor.torch_utils.hawq_metric"]], "neural_compressor.adaptor.torch_utils": [[145, "module-neural_compressor.adaptor.torch_utils"]], "neural_compressor.adaptor.torch_utils.smooth_quant": [[146, "module-neural_compressor.adaptor.torch_utils.smooth_quant"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[147, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"]], "neural_compressor.adaptor.torch_utils.util": [[148, "module-neural_compressor.adaptor.torch_utils.util"]], "neural_compressor.algorithm.algorithm": [[149, "module-neural_compressor.algorithm.algorithm"]], "neural_compressor.algorithm.fast_bias_correction": [[150, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm": [[151, "module-neural_compressor.algorithm"]], "neural_compressor.algorithm.smooth_quant": [[152, "module-neural_compressor.algorithm.smooth_quant"]], "neural_compressor.algorithm.weight_correction": [[153, "module-neural_compressor.algorithm.weight_correction"]], "neural_compressor.benchmark": [[154, "module-neural_compressor.benchmark"]], "neural_compressor.compression.callbacks": [[155, "module-neural_compressor.compression.callbacks"]], "neural_compressor.compression.distillation.criterions": [[156, "module-neural_compressor.compression.distillation.criterions"]], "neural_compressor.compression.distillation": [[157, "module-neural_compressor.compression.distillation"]], "neural_compressor.compression": [[158, "module-neural_compressor.compression"]], "neural_compressor.compression.pruner.criteria": [[159, "module-neural_compressor.compression.pruner.criteria"]], "neural_compressor.compression.pruner": [[160, "module-neural_compressor.compression.pruner"]], "neural_compressor.compression.pruner.patterns": [[161, "module-neural_compressor.compression.pruner.patterns"]], "neural_compressor.compression.pruner.pruners": [[162, "module-neural_compressor.compression.pruner.pruners"]], "neural_compressor.compression.pruner.regs": [[163, "module-neural_compressor.compression.pruner.regs"]], "neural_compressor.compression.pruner.schedulers": [[164, "module-neural_compressor.compression.pruner.schedulers"]], "neural_compressor.compression.pruner.utils": [[165, "module-neural_compressor.compression.pruner.utils"]], "neural_compressor.conf.config": [[166, "module-neural_compressor.conf.config"]], "neural_compressor.conf.dotdict": [[167, "module-neural_compressor.conf.dotdict"]], "neural_compressor.conf": [[168, "module-neural_compressor.conf"]], "neural_compressor.conf.pythonic_config": [[169, "module-neural_compressor.conf.pythonic_config"]], "neural_compressor.config": [[170, "module-neural_compressor.config"]], "neural_compressor.contrib": [[171, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[172, "module-neural_compressor.contrib.strategy"]], "neural_compressor.contrib.strategy.sigopt": [[173, "module-neural_compressor.contrib.strategy.sigopt"]], "neural_compressor.contrib.strategy.tpe": [[174, "module-neural_compressor.contrib.strategy.tpe"]], "neural_compressor.data.dataloaders.base_dataloader": [[175, "module-neural_compressor.data.dataloaders.base_dataloader"]], "neural_compressor.data.dataloaders.dataloader": [[176, "module-neural_compressor.data.dataloaders.dataloader"]], "neural_compressor.data.dataloaders.default_dataloader": [[177, "module-neural_compressor.data.dataloaders.default_dataloader"]], "neural_compressor.data.dataloaders.fetcher": [[178, "module-neural_compressor.data.dataloaders.fetcher"]], "neural_compressor.data.dataloaders": [[179, "module-neural_compressor.data.dataloaders"]], "Attributes": [[179, "attributes"], [187, "attributes"], [196, "attributes"], [227, "attributes"], [236, "attributes"], [248, "attributes"], [272, "attributes"], [297, "attributes"], [325, "attributes"], [331, "attributes"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[180, "module-neural_compressor.data.dataloaders.mxnet_dataloader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[181, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[182, "module-neural_compressor.data.dataloaders.pytorch_dataloader"]], "neural_compressor.data.dataloaders.sampler": [[183, "module-neural_compressor.data.dataloaders.sampler"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[184, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"]], "neural_compressor.data.datasets.bert_dataset": [[185, "module-neural_compressor.data.datasets.bert_dataset"]], "neural_compressor.data.datasets.coco_dataset": [[186, "module-neural_compressor.data.datasets.coco_dataset"]], "neural_compressor.data.datasets.dataset": [[187, "module-neural_compressor.data.datasets.dataset"]], "neural_compressor.data.datasets.dummy_dataset": [[188, "module-neural_compressor.data.datasets.dummy_dataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[189, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "neural_compressor.data.datasets.imagenet_dataset": [[190, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[191, "module-neural_compressor.data.datasets"]], "neural_compressor.data.datasets.style_transfer_dataset": [[192, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "neural_compressor.data.filters.coco_filter": [[193, "module-neural_compressor.data.filters.coco_filter"]], "neural_compressor.data.filters.filter": [[194, "module-neural_compressor.data.filters.filter"]], "neural_compressor.data.filters": [[195, "module-neural_compressor.data.filters"]], "neural_compressor.data": [[196, "module-neural_compressor.data"]], "neural_compressor.data.transforms.coco_transform": [[197, "module-neural_compressor.data.transforms.coco_transform"]], "neural_compressor.data.transforms.imagenet_transform": [[198, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[199, "module-neural_compressor.data.transforms"]], "neural_compressor.data.transforms.postprocess": [[200, "module-neural_compressor.data.transforms.postprocess"]], "neural_compressor.data.transforms.tokenization": [[201, "module-neural_compressor.data.transforms.tokenization"]], "neural_compressor.data.transforms.transform": [[202, "module-neural_compressor.data.transforms.transform"]], "neural_compressor.experimental.benchmark": [[203, "module-neural_compressor.experimental.benchmark"]], "neural_compressor.experimental.common.criterion": [[204, "module-neural_compressor.experimental.common.criterion"]], "neural_compressor.experimental.common.dataloader": [[205, "module-neural_compressor.experimental.common.dataloader"]], "neural_compressor.experimental.common": [[206, "module-neural_compressor.experimental.common"]], "neural_compressor.experimental.common.metric": [[207, "module-neural_compressor.experimental.common.metric"]], "neural_compressor.experimental.common.model": [[208, "module-neural_compressor.experimental.common.model"]], "neural_compressor.experimental.common.optimizer": [[209, "module-neural_compressor.experimental.common.optimizer"]], "neural_compressor.experimental.common.postprocess": [[210, "module-neural_compressor.experimental.common.postprocess"]], "neural_compressor.experimental.common.torch_utils": [[211, "module-neural_compressor.experimental.common.torch_utils"]], "neural_compressor.experimental.component": [[212, "module-neural_compressor.experimental.component"]], "neural_compressor.experimental.compression": [[213, "module-neural_compressor.experimental.compression"]], "neural_compressor.experimental.compression.pruning": [[214, "module-neural_compressor.experimental.compression.pruning"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[215, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[216, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[217, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[218, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[219, "module-neural_compressor.experimental.data.dataloaders"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[220, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[221, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[222, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[223, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[224, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[225, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[226, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "neural_compressor.experimental.data.datasets.dataset": [[227, "module-neural_compressor.experimental.data.datasets.dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[228, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[229, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[230, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "neural_compressor.experimental.data.datasets": [[231, "module-neural_compressor.experimental.data.datasets"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[232, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "neural_compressor.experimental.data.filters.coco_filter": [[233, "module-neural_compressor.experimental.data.filters.coco_filter"]], "neural_compressor.experimental.data.filters.filter": [[234, "module-neural_compressor.experimental.data.filters.filter"]], "neural_compressor.experimental.data.filters": [[235, "module-neural_compressor.experimental.data.filters"]], "neural_compressor.experimental.data": [[236, "module-neural_compressor.experimental.data"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[237, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "neural_compressor.experimental.data.transforms": [[238, "module-neural_compressor.experimental.data.transforms"]], "neural_compressor.experimental.data.transforms.tokenization": [[239, "module-neural_compressor.experimental.data.transforms.tokenization"]], "neural_compressor.experimental.data.transforms.transform": [[240, "module-neural_compressor.experimental.data.transforms.transform"]], "neural_compressor.experimental.distillation": [[241, "module-neural_compressor.experimental.distillation"]], "neural_compressor.experimental.export": [[242, "module-neural_compressor.experimental.export"]], "neural_compressor.experimental.export.qlinear2qdq": [[243, "module-neural_compressor.experimental.export.qlinear2qdq"]], "neural_compressor.experimental.export.tf2onnx": [[244, "module-neural_compressor.experimental.export.tf2onnx"]], "neural_compressor.experimental.export.torch2onnx": [[245, "module-neural_compressor.experimental.export.torch2onnx"]], "neural_compressor.experimental.export.utils": [[246, "module-neural_compressor.experimental.export.utils"]], "neural_compressor.experimental.graph_optimization": [[247, "module-neural_compressor.experimental.graph_optimization"]], "neural_compressor.experimental": [[248, "module-neural_compressor.experimental"]], "neural_compressor.experimental.metric.bleu": [[249, "module-neural_compressor.experimental.metric.bleu"]], "neural_compressor.experimental.metric.bleu_util": [[250, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[251, "module-neural_compressor.experimental.metric.coco_label_map"]], "neural_compressor.experimental.metric.coco_tools": [[252, "module-neural_compressor.experimental.metric.coco_tools"]], "neural_compressor.experimental.metric.evaluate_squad": [[253, "module-neural_compressor.experimental.metric.evaluate_squad"]], "neural_compressor.experimental.metric.f1": [[254, "module-neural_compressor.experimental.metric.f1"]], "neural_compressor.experimental.metric": [[255, "module-neural_compressor.experimental.metric"]], "neural_compressor.experimental.metric.metric": [[256, "module-neural_compressor.experimental.metric.metric"]], "neural_compressor.experimental.mixed_precision": [[257, "module-neural_compressor.experimental.mixed_precision"]], "neural_compressor.experimental.model_conversion": [[258, "module-neural_compressor.experimental.model_conversion"]], "neural_compressor.experimental.nas.basic_nas": [[259, "module-neural_compressor.experimental.nas.basic_nas"]], "neural_compressor.experimental.nas.dynas": [[260, "module-neural_compressor.experimental.nas.dynas"]], "neural_compressor.experimental.nas": [[261, "module-neural_compressor.experimental.nas"]], "neural_compressor.experimental.nas.nas": [[262, "module-neural_compressor.experimental.nas.nas"]], "neural_compressor.experimental.nas.nas_utils": [[263, "module-neural_compressor.experimental.nas.nas_utils"]], "neural_compressor.experimental.nas.search_algorithms": [[264, "module-neural_compressor.experimental.nas.search_algorithms"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[265, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[266, "module-neural_compressor.experimental.pruner_legacy.group_lasso"]], "neural_compressor.experimental.pruner_legacy": [[267, "module-neural_compressor.experimental.pruner_legacy"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[268, "module-neural_compressor.experimental.pruner_legacy.magnitude"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[269, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"]], "neural_compressor.experimental.pruner_legacy.pruner": [[270, "module-neural_compressor.experimental.pruner_legacy.pruner"]], "neural_compressor.experimental.pruning": [[271, "module-neural_compressor.experimental.pruning"]], "neural_compressor.experimental.pruning_recipes": [[272, "module-neural_compressor.experimental.pruning_recipes"]], "neural_compressor.experimental.pruning_recipes.patterns": [[273, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[274, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[275, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "neural_compressor.experimental.pruning_v2": [[276, "module-neural_compressor.experimental.pruning_v2"]], "neural_compressor.experimental.pytorch_pruner": [[277, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[278, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[279, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[280, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[281, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[282, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[283, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "neural_compressor.experimental.quantization": [[284, "module-neural_compressor.experimental.quantization"]], "neural_compressor.experimental.scheduler": [[285, "module-neural_compressor.experimental.scheduler"]], "neural_compressor": [[286, "module-neural_compressor"]], "neural_compressor.metric.bleu": [[287, "module-neural_compressor.metric.bleu"]], "neural_compressor.metric.bleu_util": [[288, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[289, "module-neural_compressor.metric.coco_label_map"]], "neural_compressor.metric.coco_tools": [[290, "module-neural_compressor.metric.coco_tools"]], "neural_compressor.metric.evaluate_squad": [[291, "module-neural_compressor.metric.evaluate_squad"]], "neural_compressor.metric.f1": [[292, "module-neural_compressor.metric.f1"]], "neural_compressor.metric": [[293, "module-neural_compressor.metric"]], "neural_compressor.metric.metric": [[294, "module-neural_compressor.metric.metric"]], "neural_compressor.mix_precision": [[295, "module-neural_compressor.mix_precision"]], "neural_compressor.model.base_model": [[296, "module-neural_compressor.model.base_model"]], "neural_compressor.model": [[297, "module-neural_compressor.model"]], "neural_compressor.model.keras_model": [[298, "module-neural_compressor.model.keras_model"]], "neural_compressor.model.model": [[299, "module-neural_compressor.model.model"]], "neural_compressor.model.mxnet_model": [[300, "module-neural_compressor.model.mxnet_model"]], "neural_compressor.model.nets_factory": [[301, "module-neural_compressor.model.nets_factory"]], "neural_compressor.model.onnx_model": [[302, "module-neural_compressor.model.onnx_model"]], "neural_compressor.model.tensorflow_model": [[303, "module-neural_compressor.model.tensorflow_model"]], "neural_compressor.model.torch_model": [[304, "module-neural_compressor.model.torch_model"]], "neural_compressor.objective": [[305, "module-neural_compressor.objective"]], "neural_compressor.quantization": [[306, "module-neural_compressor.quantization"]], "neural_compressor.strategy.auto": [[307, "module-neural_compressor.strategy.auto"]], "neural_compressor.strategy.auto_mixed_precision": [[308, "module-neural_compressor.strategy.auto_mixed_precision"]], "neural_compressor.strategy.basic": [[309, "module-neural_compressor.strategy.basic"]], "neural_compressor.strategy.bayesian": [[310, "module-neural_compressor.strategy.bayesian"]], "neural_compressor.strategy.conservative": [[311, "module-neural_compressor.strategy.conservative"]], "neural_compressor.strategy.exhaustive": [[312, "module-neural_compressor.strategy.exhaustive"]], "neural_compressor.strategy.hawq_v2": [[313, "module-neural_compressor.strategy.hawq_v2"]], "neural_compressor.strategy": [[314, "module-neural_compressor.strategy"]], "neural_compressor.strategy.mse": [[315, "module-neural_compressor.strategy.mse"]], "neural_compressor.strategy.mse_v2": [[316, "module-neural_compressor.strategy.mse_v2"]], "neural_compressor.strategy.random": [[317, "module-neural_compressor.strategy.random"]], "neural_compressor.strategy.strategy": [[318, "module-neural_compressor.strategy.strategy"]], "neural_compressor.strategy.utils.constant": [[319, "module-neural_compressor.strategy.utils.constant"]], "neural_compressor.strategy.utils": [[320, "module-neural_compressor.strategy.utils"]], "neural_compressor.strategy.utils.tuning_sampler": [[321, "module-neural_compressor.strategy.utils.tuning_sampler"]], "neural_compressor.strategy.utils.tuning_space": [[322, "module-neural_compressor.strategy.utils.tuning_space"]], "neural_compressor.strategy.utils.tuning_structs": [[323, "module-neural_compressor.strategy.utils.tuning_structs"]], "neural_compressor.strategy.utils.utility": [[324, "module-neural_compressor.strategy.utils.utility"]], "neural_compressor.template.api_doc_example": [[325, "module-neural_compressor.template.api_doc_example"]], "neural_compressor.template": [[326, "module-neural_compressor.template"]], "neural_compressor.training": [[327, "module-neural_compressor.training"]], "neural_compressor.utils.collect_layer_histogram": [[328, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[329, "module-neural_compressor.utils.constant"]], "neural_compressor.utils.create_obj_from_config": [[330, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils": [[331, "module-neural_compressor.utils"]], "neural_compressor.utils.kl_divergence": [[332, "module-neural_compressor.utils.kl_divergence"]], "neural_compressor.utils.load_huggingface": [[333, "module-neural_compressor.utils.load_huggingface"]], "neural_compressor.utils.logger": [[334, "module-neural_compressor.utils.logger"]], "neural_compressor.utils.options": [[335, "module-neural_compressor.utils.options"]], "neural_compressor.utils.pytorch": [[336, "module-neural_compressor.utils.pytorch"]], "neural_compressor.utils.utility": [[337, "module-neural_compressor.utils.utility"]], "neural_compressor.ux.components.benchmark.benchmark": [[338, "module-neural_compressor.ux.components.benchmark.benchmark"]], "neural_compressor.ux.components.benchmark.benchmark_model": [[339, "module-neural_compressor.ux.components.benchmark.benchmark_model"]], "neural_compressor.ux.components.benchmark.execute_benchmark": [[340, "module-neural_compressor.ux.components.benchmark.execute_benchmark"]], "neural_compressor.ux.components.benchmark": [[341, "module-neural_compressor.ux.components.benchmark"]], "neural_compressor.ux.components.config_generator.benchmark_config_generator": [[342, "module-neural_compressor.ux.components.config_generator.benchmark_config_generator"]], "neural_compressor.ux.components.config_generator.config_generator": [[343, "module-neural_compressor.ux.components.config_generator.config_generator"]], "neural_compressor.ux.components.config_generator.graph_optimization_config_generator": [[344, "module-neural_compressor.ux.components.config_generator.graph_optimization_config_generator"]], "neural_compressor.ux.components.config_generator": [[345, "module-neural_compressor.ux.components.config_generator"]], "neural_compressor.ux.components.config_generator.mixed_precision_config_generator": [[346, "module-neural_compressor.ux.components.config_generator.mixed_precision_config_generator"]], "neural_compressor.ux.components.config_generator.profiling_config_generator": [[347, "module-neural_compressor.ux.components.config_generator.profiling_config_generator"]], "neural_compressor.ux.components.config_generator.pruning_config_generator": [[348, "module-neural_compressor.ux.components.config_generator.pruning_config_generator"]], "neural_compressor.ux.components.config_generator.quantization_config_generator": [[349, "module-neural_compressor.ux.components.config_generator.quantization_config_generator"]], "neural_compressor.ux.components.configuration_wizard.configuration_parser": [[350, "module-neural_compressor.ux.components.configuration_wizard.configuration_parser"]], "neural_compressor.ux.components.configuration_wizard.get_boundary_nodes": [[351, "module-neural_compressor.ux.components.configuration_wizard.get_boundary_nodes"]], "neural_compressor.ux.components.configuration_wizard.get_configuration": [[352, "module-neural_compressor.ux.components.configuration_wizard.get_configuration"]], "neural_compressor.ux.components.configuration_wizard": [[353, "module-neural_compressor.ux.components.configuration_wizard"]], "neural_compressor.ux.components.configuration_wizard.params_feeder": [[354, "module-neural_compressor.ux.components.configuration_wizard.params_feeder"]], "neural_compressor.ux.components.configuration_wizard.pruning_config_parser": [[355, "module-neural_compressor.ux.components.configuration_wizard.pruning_config_parser"]], "neural_compressor.ux.components.db_manager.db_manager": [[356, "module-neural_compressor.ux.components.db_manager.db_manager"]], "neural_compressor.ux.components.db_manager.db_models.benchmark": [[357, "module-neural_compressor.ux.components.db_manager.db_models.benchmark"]], "neural_compressor.ux.components.db_manager.db_models.benchmark_result": [[358, "module-neural_compressor.ux.components.db_manager.db_models.benchmark_result"]], "neural_compressor.ux.components.db_manager.db_models.dataloader": [[359, "module-neural_compressor.ux.components.db_manager.db_models.dataloader"]], "neural_compressor.ux.components.db_manager.db_models.dataset": [[360, "module-neural_compressor.ux.components.db_manager.db_models.dataset"]], "neural_compressor.ux.components.db_manager.db_models.domain": [[361, "module-neural_compressor.ux.components.db_manager.db_models.domain"]], "neural_compressor.ux.components.db_manager.db_models.domain_flavour": [[362, "module-neural_compressor.ux.components.db_manager.db_models.domain_flavour"]], "neural_compressor.ux.components.db_manager.db_models.example": [[363, "module-neural_compressor.ux.components.db_manager.db_models.example"]], "neural_compressor.ux.components.db_manager.db_models.framework": [[364, "module-neural_compressor.ux.components.db_manager.db_models.framework"]], "neural_compressor.ux.components.db_manager.db_models": [[365, "module-neural_compressor.ux.components.db_manager.db_models"]], "neural_compressor.ux.components.db_manager.db_models.metric": [[366, "module-neural_compressor.ux.components.db_manager.db_models.metric"]], "neural_compressor.ux.components.db_manager.db_models.model": [[367, "module-neural_compressor.ux.components.db_manager.db_models.model"]], "neural_compressor.ux.components.db_manager.db_models.optimization": [[368, "module-neural_compressor.ux.components.db_manager.db_models.optimization"]], "neural_compressor.ux.components.db_manager.db_models.optimization_type": [[369, "module-neural_compressor.ux.components.db_manager.db_models.optimization_type"]], "neural_compressor.ux.components.db_manager.db_models.precision": [[370, "module-neural_compressor.ux.components.db_manager.db_models.precision"]], "neural_compressor.ux.components.db_manager.db_models.profiling": [[371, "module-neural_compressor.ux.components.db_manager.db_models.profiling"]], "neural_compressor.ux.components.db_manager.db_models.profiling_result": [[372, "module-neural_compressor.ux.components.db_manager.db_models.profiling_result"]], "neural_compressor.ux.components.db_manager.db_models.project": [[373, "module-neural_compressor.ux.components.db_manager.db_models.project"]], "neural_compressor.ux.components.db_manager.db_models.pruning_details": [[374, "module-neural_compressor.ux.components.db_manager.db_models.pruning_details"]], "neural_compressor.ux.components.db_manager.db_models.transform": [[375, "module-neural_compressor.ux.components.db_manager.db_models.transform"]], "neural_compressor.ux.components.db_manager.db_models.tuning_details": [[376, "module-neural_compressor.ux.components.db_manager.db_models.tuning_details"]], "neural_compressor.ux.components.db_manager.db_models.tuning_history": [[377, "module-neural_compressor.ux.components.db_manager.db_models.tuning_history"]], "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface": [[378, "module-neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface": [[379, "module-neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.db_operations": [[380, "module-neural_compressor.ux.components.db_manager.db_operations.db_operations"]], "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface": [[381, "module-neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface": [[382, "module-neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface": [[383, "module-neural_compressor.ux.components.db_manager.db_operations.examples_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations": [[384, "module-neural_compressor.ux.components.db_manager.db_operations"]], "neural_compressor.ux.components.db_manager.db_operations.model_api_interface": [[385, "module-neural_compressor.ux.components.db_manager.db_operations.model_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface": [[386, "module-neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface": [[387, "module-neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.project_api_interface": [[388, "module-neural_compressor.ux.components.db_manager.db_operations.project_api_interface"]], "neural_compressor.ux.components.db_manager": [[389, "module-neural_compressor.ux.components.db_manager"]], "neural_compressor.ux.components.db_manager.params_interfaces": [[390, "module-neural_compressor.ux.components.db_manager.params_interfaces"]], "neural_compressor.ux.components.db_manager.utils": [[391, "module-neural_compressor.ux.components.db_manager.utils"]], "neural_compressor.ux.components.diagnosis.diagnosis": [[392, "module-neural_compressor.ux.components.diagnosis.diagnosis"]], "neural_compressor.ux.components.diagnosis.factory": [[393, "module-neural_compressor.ux.components.diagnosis.factory"]], "neural_compressor.ux.components.diagnosis": [[394, "module-neural_compressor.ux.components.diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis": [[395, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis": [[396, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis"]], "neural_compressor.ux.components.diagnosis.op_details": [[397, "module-neural_compressor.ux.components.diagnosis.op_details"]], "neural_compressor.ux.components.diagnosis.op_entry": [[398, "module-neural_compressor.ux.components.diagnosis.op_entry"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis": [[399, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis": [[400, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis"]], "neural_compressor.ux.components.file_browser.file_browser": [[401, "module-neural_compressor.ux.components.file_browser.file_browser"]], "neural_compressor.ux.components.file_browser": [[402, "module-neural_compressor.ux.components.file_browser"]], "neural_compressor.ux.components.graph.attribute": [[403, "module-neural_compressor.ux.components.graph.attribute"]], "neural_compressor.ux.components.graph.collapser": [[404, "module-neural_compressor.ux.components.graph.collapser"]], "neural_compressor.ux.components.graph.edge": [[405, "module-neural_compressor.ux.components.graph.edge"]], "neural_compressor.ux.components.graph.graph": [[406, "module-neural_compressor.ux.components.graph.graph"]], "neural_compressor.ux.components.graph.graph_reader": [[407, "module-neural_compressor.ux.components.graph.graph_reader"]], "neural_compressor.ux.components.graph": [[408, "module-neural_compressor.ux.components.graph"]], "neural_compressor.ux.components.graph.node": [[409, "module-neural_compressor.ux.components.graph.node"]], "neural_compressor.ux.components.graph.reader": [[410, "module-neural_compressor.ux.components.graph.reader"]], "neural_compressor.ux.components.graph.reader.onnxrt_reader": [[411, "module-neural_compressor.ux.components.graph.reader.onnxrt_reader"]], "neural_compressor.ux.components.graph.reader.tensorflow_reader": [[412, "module-neural_compressor.ux.components.graph.reader.tensorflow_reader"]], "neural_compressor.ux.components": [[413, "module-neural_compressor.ux.components"]], "neural_compressor.ux.components.jobs_management": [[414, "module-neural_compressor.ux.components.jobs_management"]], "neural_compressor.ux.components.jobs_management.jobs_control_queue": [[415, "module-neural_compressor.ux.components.jobs_management.jobs_control_queue"]], "neural_compressor.ux.components.jobs_management.jobs_manager": [[416, "module-neural_compressor.ux.components.jobs_management.jobs_manager"]], "neural_compressor.ux.components.jobs_management.request": [[417, "module-neural_compressor.ux.components.jobs_management.request"]], "neural_compressor.ux.components.manage_workspace": [[418, "module-neural_compressor.ux.components.manage_workspace"]], "neural_compressor.ux.components.model.domain": [[419, "module-neural_compressor.ux.components.model.domain"]], "neural_compressor.ux.components.model": [[420, "module-neural_compressor.ux.components.model"]], "neural_compressor.ux.components.model.model": [[421, "module-neural_compressor.ux.components.model.model"]], "neural_compressor.ux.components.model.model_type_getter": [[422, "module-neural_compressor.ux.components.model.model_type_getter"]], "neural_compressor.ux.components.model.onnxrt": [[423, "module-neural_compressor.ux.components.model.onnxrt"]], "neural_compressor.ux.components.model.onnxrt.model": [[424, "module-neural_compressor.ux.components.model.onnxrt.model"]], "neural_compressor.ux.components.model.pytorch": [[425, "module-neural_compressor.ux.components.model.pytorch"]], "neural_compressor.ux.components.model.pytorch.model": [[426, "module-neural_compressor.ux.components.model.pytorch.model"]], "neural_compressor.ux.components.model.repository": [[427, "module-neural_compressor.ux.components.model.repository"]], "neural_compressor.ux.components.model.shape": [[428, "module-neural_compressor.ux.components.model.shape"]], "neural_compressor.ux.components.model.tensorflow.frozen_pb": [[429, "module-neural_compressor.ux.components.model.tensorflow.frozen_pb"]], "neural_compressor.ux.components.model.tensorflow": [[430, "module-neural_compressor.ux.components.model.tensorflow"]], "neural_compressor.ux.components.model.tensorflow.keras": [[431, "module-neural_compressor.ux.components.model.tensorflow.keras"]], "neural_compressor.ux.components.model.tensorflow.meta_graph": [[432, "module-neural_compressor.ux.components.model.tensorflow.meta_graph"]], "neural_compressor.ux.components.model.tensorflow.model": [[433, "module-neural_compressor.ux.components.model.tensorflow.model"]], "neural_compressor.ux.components.model.tensorflow.saved_model": [[434, "module-neural_compressor.ux.components.model.tensorflow.saved_model"]], "neural_compressor.ux.components.model.tensorflow.utils": [[435, "module-neural_compressor.ux.components.model.tensorflow.utils"]], "neural_compressor.ux.components.model_zoo.download_config": [[436, "module-neural_compressor.ux.components.model_zoo.download_config"]], "neural_compressor.ux.components.model_zoo.download_model": [[437, "module-neural_compressor.ux.components.model_zoo.download_model"]], "neural_compressor.ux.components.model_zoo.downloader": [[438, "module-neural_compressor.ux.components.model_zoo.downloader"]], "neural_compressor.ux.components.model_zoo": [[439, "module-neural_compressor.ux.components.model_zoo"]], "neural_compressor.ux.components.model_zoo.list_models": [[440, "module-neural_compressor.ux.components.model_zoo.list_models"]], "neural_compressor.ux.components.names_mapper": [[441, "module-neural_compressor.ux.components.names_mapper"]], "neural_compressor.ux.components.names_mapper.names_mapper": [[442, "module-neural_compressor.ux.components.names_mapper.names_mapper"]], "neural_compressor.ux.components.optimization.execute_optimization": [[443, "module-neural_compressor.ux.components.optimization.execute_optimization"]], "neural_compressor.ux.components.optimization.factory": [[444, "module-neural_compressor.ux.components.optimization.factory"]], "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization": [[445, "module-neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization"]], "neural_compressor.ux.components.optimization.graph_optimizer": [[446, "module-neural_compressor.ux.components.optimization.graph_optimizer"]], "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model": [[447, "module-neural_compressor.ux.components.optimization.graph_optimizer.optimize_model"]], "neural_compressor.ux.components.optimization": [[448, "module-neural_compressor.ux.components.optimization"]], "neural_compressor.ux.components.optimization.mixed_precision": [[449, "module-neural_compressor.ux.components.optimization.mixed_precision"]], "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision": [[450, "module-neural_compressor.ux.components.optimization.mixed_precision.mixed_precision"]], "neural_compressor.ux.components.optimization.mixed_precision.optimize_model": [[451, "module-neural_compressor.ux.components.optimization.mixed_precision.optimize_model"]], "neural_compressor.ux.components.optimization.neural_coder_optimization": [[452, "module-neural_compressor.ux.components.optimization.neural_coder_optimization"]], "neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model": [[453, "module-neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model"]], "neural_compressor.ux.components.optimization.optimization": [[454, "module-neural_compressor.ux.components.optimization.optimization"]], "neural_compressor.ux.components.optimization.pruning": [[455, "module-neural_compressor.ux.components.optimization.pruning"]], "neural_compressor.ux.components.optimization.pruning.optimize_model": [[456, "module-neural_compressor.ux.components.optimization.pruning.optimize_model"]], "neural_compressor.ux.components.optimization.pruning.pruning": [[457, "module-neural_compressor.ux.components.optimization.pruning.pruning"]], "neural_compressor.ux.components.optimization.tune": [[458, "module-neural_compressor.ux.components.optimization.tune"]], "neural_compressor.ux.components.optimization.tune.tune_model": [[459, "module-neural_compressor.ux.components.optimization.tune.tune_model"]], "neural_compressor.ux.components.optimization.tune.tuning": [[460, "module-neural_compressor.ux.components.optimization.tune.tuning"]], "neural_compressor.ux.components.optimization.tuning_history": [[461, "module-neural_compressor.ux.components.optimization.tuning_history"]], "neural_compressor.ux.components.profiling.execute_profiling": [[462, "module-neural_compressor.ux.components.profiling.execute_profiling"]], "neural_compressor.ux.components.profiling.factory": [[463, "module-neural_compressor.ux.components.profiling.factory"]], "neural_compressor.ux.components.profiling": [[464, "module-neural_compressor.ux.components.profiling"]], "neural_compressor.ux.components.profiling.profile_model": [[465, "module-neural_compressor.ux.components.profiling.profile_model"]], "neural_compressor.ux.components.profiling.profiler": [[466, "module-neural_compressor.ux.components.profiling.profiler"]], "neural_compressor.ux.components.profiling.profiling": [[467, "module-neural_compressor.ux.components.profiling.profiling"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.factory": [[468, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.factory"]], "neural_compressor.ux.components.profiling.tensorflow_profiler": [[469, "module-neural_compressor.ux.components.profiling.tensorflow_profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler": [[470, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.utils": [[471, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.utils"]], "neural_compressor.ux.inc_bench": [[472, "module-neural_compressor.ux.inc_bench"]], "neural_compressor.ux": [[473, "module-neural_compressor.ux"]], "neural_compressor.ux.utils.consts": [[474, "module-neural_compressor.ux.utils.consts"]], "neural_compressor.ux.utils.environment": [[475, "module-neural_compressor.ux.utils.environment"]], "neural_compressor.ux.utils.exceptions": [[476, "module-neural_compressor.ux.utils.exceptions"]], "neural_compressor.ux.utils.executor": [[477, "module-neural_compressor.ux.utils.executor"]], "neural_compressor.ux.utils.expiring_dict": [[478, "module-neural_compressor.ux.utils.expiring_dict"]], "neural_compressor.ux.utils.github_info": [[479, "module-neural_compressor.ux.utils.github_info"]], "neural_compressor.ux.utils.hw_info": [[480, "module-neural_compressor.ux.utils.hw_info"]], "neural_compressor.ux.utils": [[481, "module-neural_compressor.ux.utils"]], "neural_compressor.ux.utils.json_serializer": [[482, "module-neural_compressor.ux.utils.json_serializer"]], "neural_compressor.ux.utils.logger": [[483, "module-neural_compressor.ux.utils.logger"]], "neural_compressor.ux.utils.parser": [[484, "module-neural_compressor.ux.utils.parser"]], "neural_compressor.ux.utils.proc": [[485, "module-neural_compressor.ux.utils.proc"]], "neural_compressor.ux.utils.processes": [[486, "module-neural_compressor.ux.utils.processes"]], "neural_compressor.ux.utils.singleton": [[487, "module-neural_compressor.ux.utils.singleton"]], "neural_compressor.ux.utils.status_updates": [[488, "module-neural_compressor.ux.utils.status_updates"]], "neural_compressor.ux.utils.templates": [[489, "module-neural_compressor.ux.utils.templates"]], "neural_compressor.ux.utils.templates.metric": [[490, "module-neural_compressor.ux.utils.templates.metric"]], "neural_compressor.ux.utils.templates.workdir": [[491, "module-neural_compressor.ux.utils.templates.workdir"]], "neural_compressor.ux.utils.utils": [[492, "module-neural_compressor.ux.utils.utils"]], "neural_compressor.ux.utils.workload.config": [[493, "module-neural_compressor.ux.utils.workload.config"]], "neural_compressor.ux.utils.workload.dataloader": [[494, "module-neural_compressor.ux.utils.workload.dataloader"]], "neural_compressor.ux.utils.workload.evaluation": [[495, "module-neural_compressor.ux.utils.workload.evaluation"]], "neural_compressor.ux.utils.workload.graph_optimization": [[496, "module-neural_compressor.ux.utils.workload.graph_optimization"]], "neural_compressor.ux.utils.workload": [[497, "module-neural_compressor.ux.utils.workload"]], "neural_compressor.ux.utils.workload.mixed_precision": [[498, "module-neural_compressor.ux.utils.workload.mixed_precision"]], "neural_compressor.ux.utils.workload.model": [[499, "module-neural_compressor.ux.utils.workload.model"]], "neural_compressor.ux.utils.workload.pruning": [[500, "module-neural_compressor.ux.utils.workload.pruning"]], "neural_compressor.ux.utils.workload.quantization": [[501, "module-neural_compressor.ux.utils.workload.quantization"]], "neural_compressor.ux.utils.workload.tuning": [[502, "module-neural_compressor.ux.utils.workload.tuning"]], "neural_compressor.ux.utils.yaml_utils": [[503, "module-neural_compressor.ux.utils.yaml_utils"]], "neural_compressor.ux.web.communication": [[504, "module-neural_compressor.ux.web.communication"]], "neural_compressor.ux.web.configuration": [[505, "module-neural_compressor.ux.web.configuration"]], "neural_compressor.ux.web.exceptions": [[506, "module-neural_compressor.ux.web.exceptions"]], "neural_compressor.ux.web": [[507, "module-neural_compressor.ux.web"]], "neural_compressor.ux.web.router": [[508, "module-neural_compressor.ux.web.router"]], "neural_compressor.ux.web.server": [[509, "module-neural_compressor.ux.web.server"]], "neural_compressor.ux.web.service.benchmark": [[510, "module-neural_compressor.ux.web.service.benchmark"]], "neural_compressor.ux.web.service.history_snapshot_parser": [[511, "module-neural_compressor.ux.web.service.history_snapshot_parser"]], "neural_compressor.ux.web.service": [[512, "module-neural_compressor.ux.web.service"]], "neural_compressor.ux.web.service.model": [[513, "module-neural_compressor.ux.web.service.model"]], "neural_compressor.ux.web.service.optimization": [[514, "module-neural_compressor.ux.web.service.optimization"]], "neural_compressor.ux.web.service.profiling": [[515, "module-neural_compressor.ux.web.service.profiling"]], "neural_compressor.ux.web.service.request_data_processor": [[516, "module-neural_compressor.ux.web.service.request_data_processor"]], "neural_compressor.ux.web.service.response_generator": [[517, "module-neural_compressor.ux.web.service.response_generator"]], "neural_compressor.ux.web.service.workload": [[518, "module-neural_compressor.ux.web.service.workload"]], "neural_compressor.version": [[519, "module-neural_compressor.version"]], "Intel\u00ae Neural Compressor Documentation": [[520, "intel-neural-compressor-documentation"], [599, "intel-neural-compressor-documentation"]], "Sections": [[520, "sections"], [599, "sections"]], "Contributor Covenant Code of Conduct": [[521, "contributor-covenant-code-of-conduct"], [522, "contributor-covenant-code-of-conduct"]], "Our Pledge": [[521, "our-pledge"]], "Our Standards": [[521, "our-standards"]], "Our Responsibilities": [[521, "our-responsibilities"]], "Scope": [[521, "scope"]], "Enforcement": [[521, "enforcement"]], "Attribution": [[521, "attribution"]], "Contribution Guidelines": [[522, "contribution-guidelines"]], "Pull Request Checklist": [[522, "pull-request-checklist"]], "Pull Request Template": [[522, "pull-request-template"]], "Support": [[522, "support"]], "FX": [[523, "fx"]], "Introduction": [[523, "introduction"], [524, "introduction"], [527, "introduction"], [542, "introduction"], [543, "introduction"], [544, "introduction"], [545, "introduction"], [547, "introduction"], [548, "introduction"], [549, "introduction"], [551, "introduction"], [553, "introduction"], [556, "introduction"], [559, "introduction"], [561, "introduction"], [562, "introduction"], [582, "introduction"], [583, "introduction"], [585, "introduction"], [587, "introduction"], [591, "introduction"], [592, "introduction"], [593, "introduction"], [594, "introduction"], [595, "introduction"], [597, "introduction"]], "FX Mode Support Matrix in Neural Compressor": [[523, "fx-mode-support-matrix-in-neural-compressor"]], "Get Start": [[523, "get-start"]], "Post Training Static Quantization": [[523, "post-training-static-quantization"], [588, "post-training-static-quantization"]], "Post Training Dynamic Quantization": [[523, "post-training-dynamic-quantization"], [588, "post-training-dynamic-quantization"]], "Quantization-Aware Training": [[523, "quantization-aware-training"]], "Examples": [[523, "examples"], [524, "examples"], [543, "examples"], [544, "examples"], [545, "examples"], [547, "examples"], [548, "examples"], [549, "examples"], [550, "examples"], [551, "examples"], [560, "examples"], [561, "examples"], [562, "examples"], [583, "examples"], [585, "examples"], [588, "examples"], [593, "examples"]], "Note": [[523, "note"]], "Details": [[523, "details"]], "Common Problem": [[523, "common-problem"]], "Dynamic Quantization": [[523, "dynamic-quantization"]], "Static Quantization & Quantization Aware Training": [[523, "static-quantization-quantization-aware-training"]], "Neural Architecture Search": [[524, "neural-architecture-search"]], "Basic NAS": [[524, "basic-nas"]], "Dynamic NAS": [[524, "dynamic-nas"]], "NAS Support Matrix": [[524, "nas-support-matrix"]], "Get Started with NAS API": [[524, "get-started-with-nas-api"]], "Basic Usage": [[524, "basic-usage"]], "1. Python code + YAML": [[524, "python-code-yaml"]], "2. Python code only": [[524, "python-code-only"]], "Advanced Usage (Custom NAS)": [[524, "advanced-usage-custom-nas"]], "Security Policy": [[525, "security-policy"]], "Report a Vulnerability": [[525, "report-a-vulnerability"]], "Intel\u00ae Neural Compressor": [[526, "intel-neural-compressor"], [580, "intel-neural-compressor"]], "Installation": [[526, "installation"], [557, "installation"], [574, "installation"]], "Install from pypi": [[526, "install-from-pypi"]], "Getting Started": [[526, "getting-started"], [554, "getting-started"]], "Quantization with Python API": [[526, "quantization-with-python-api"], [554, "quantization-with-python-api"]], "Documentation": [[526, "documentation"]], "Selected Publications/Events": [[526, "selected-publications-events"]], "Additional Content": [[526, "additional-content"]], "Research Collaborations": [[526, "research-collaborations"]], "Adaptor": [[527, "adaptor"], [528, "adaptor"]], "Adaptor Support Matrix": [[527, "adaptor-support-matrix"]], "Working Flow": [[527, "working-flow"], [588, "working-flow"]], "Get Start with Adaptor API": [[527, "get-start-with-adaptor-api"]], "Query API": [[527, "query-api"]], "Background": [[527, "background"]], "Query API Introduction": [[527, "query-api-introduction"]], "Example of Adding a New Backend Support": [[527, "example-of-adding-a-new-backend-support"]], "Capability": [[527, "capability"]], "Implement ONNXRTAdaptor Class": [[527, "implement-onnxrtadaptor-class"]], "ONNX Runtime": [[529, "onnx-runtime"], [561, "onnx-runtime"], [561, "id1"]], "Torch Utils": [[530, "torch-utils"]], "API Document Example": [[531, "api-document-example"]], "APIs": [[532, "apis"]], "Benchmark": [[533, "benchmark"], [560, "benchmark"], [587, "benchmark"]], "Compression": [[534, "compression"]], "Config": [[535, "config"]], "Mix Precision": [[536, "mix-precision"], [560, "mix-precision"]], "Model": [[537, "model"], [562, "model"]], "Objective": [[538, "objective"], [582, "objective"]], "Quantization": [[539, "quantization"], [587, "quantization"], [588, "quantization"]], "Strategy": [[540, "strategy"]], "Training": [[541, "training"]], "Intel\u00ae Neural Compressor Bench": [[542, "intel-neural-compressor-bench"]], "Table of Contents": [[542, "table-of-contents"]], "Install Intel\u00ae Neural Compressor with Bench": [[542, "install-intel-neural-compressor-with-bench"]], "Option 1: Install from Binary": [[542, "option-1-install-from-binary"]], "Option 2: Install from Source": [[542, "option-2-install-from-source"]], "Start the Intel\u00ae Neural Compressor Bench": [[542, "start-the-intel-neural-compressor-bench"]], "Home Screen": [[542, "home-screen"]], "Create New Project": [[542, "create-new-project"]], "Predefined Model": [[542, "predefined-model"]], "Custom Model": [[542, "custom-model"]], "Display Model Graph": [[542, "display-model-graph"]], "Project List": [[542, "project-list"]], "Remove Project": [[542, "remove-project"]], "Develop Project": [[542, "develop-project"]], "Optimization Tab": [[542, "optimization-tab"]], "Optimization Table": [[542, "optimization-table"]], "Optimization Wizard": [[542, "optimization-wizard"]], "Editing Optimization Entries": [[542, "editing-optimization-entries"]], "Optimization Details": [[542, "optimization-details"]], "Pruning": [[542, "pruning"], [560, "pruning"], [585, "pruning"], [587, "pruning"]], "Benchmark Tab": [[542, "benchmark-tab"]], "Benchmark Table": [[542, "benchmark-table"]], "Benchmark Wizard": [[542, "benchmark-wizard"]], "Editing Benchmark Entries": [[542, "editing-benchmark-entries"]], "Benchmark Details": [[542, "benchmark-details"]], "Profiling Tab": [[542, "profiling-tab"]], "Profiling Table": [[542, "profiling-table"]], "Profiling Wizard": [[542, "profiling-wizard"]], "Editing Profiling Entries": [[542, "editing-profiling-entries"]], "Profiling Details": [[542, "profiling-details"]], "Diagnosis Tab": [[542, "diagnosis-tab"]], "Dataset Tab": [[542, "dataset-tab"]], "Dataset List": [[542, "dataset-list"]], "Dataset Wizard": [[542, "dataset-wizard"]], "Dataset Details": [[542, "dataset-details"]], "Custom Dataset": [[542, "custom-dataset"]], "Project Information": [[542, "project-information"]], "NAS demo": [[542, "nas-demo"]], "System Information": [[542, "system-information"]], "Security": [[542, "security"], [549, "security"]], "Benchmarking": [[543, "benchmarking"]], "Benchmark Support Matrix": [[543, "benchmark-support-matrix"]], "Get Started with Benchmark API": [[543, "get-started-with-benchmark-api"]], "DataLoader": [[544, "dataloader"]], "Supported Framework Dataloader Matrix": [[544, "supported-framework-dataloader-matrix"]], "Get Start with Dataloader API": [[544, "get-start-with-dataloader-api"]], "Config Dataloader in a Yaml File": [[544, "config-dataloader-in-a-yaml-file"]], "Create a User-specific Dataloader": [[544, "create-a-user-specific-dataloader"]], "Dataset": [[545, "dataset"]], "Supported Framework Dataset Matrix": [[545, "supported-framework-dataset-matrix"]], "TensorFlow": [[545, "tensorflow"], [559, "tensorflow"], [561, "tensorflow"], [594, "tensorflow"]], "PyTorch": [[545, "pytorch"], [559, "pytorch"], [561, "pytorch"], [589, "pytorch"]], "MXNet": [[545, "mxnet"], [559, "mxnet"], [594, "mxnet"]], "ONNXRT": [[545, "onnxrt"], [559, "onnxrt"], [594, "onnxrt"]], "Get start with Dataset API": [[545, "get-start-with-dataset-api"]], "Config dataloader in a yaml file": [[545, "config-dataloader-in-a-yaml-file"]], "User-specific dataset": [[545, "user-specific-dataset"]], "Design": [[546, "design"], [595, "design"], [595, "id1"], [595, "id3"], [595, "id5"], [595, "id7"], [595, "id9"], [595, "id11"], [595, "id13"], [595, "id15"], [595, "id17"], [595, "id19"], [595, "id21"]], "Architecture": [[546, "architecture"], [556, "architecture"]], "Workflow": [[546, "workflow"]], "Distillation": [[547, "distillation"], [560, "distillation"], [587, "distillation"]], "Knowledge Distillation": [[547, "knowledge-distillation"]], "Intermediate Layer Knowledge Distillation": [[547, "intermediate-layer-knowledge-distillation"]], "Self Distillation": [[547, "self-distillation"]], "Distillation Support Matrix": [[547, "distillation-support-matrix"]], "Get Started with Distillation API": [[547, "get-started-with-distillation-api"]], "Distillation for Quantization": [[548, "distillation-for-quantization"]], "Distillation for Quantization Support Matrix": [[548, "distillation-for-quantization-support-matrix"]], "Get Started with Distillation for Quantization API": [[548, "get-started-with-distillation-for-quantization-api"]], "Distributed Training and Inference (Evaluation)": [[549, "distributed-training-and-inference-evaluation"]], "Supported Feature Matrix": [[549, "supported-feature-matrix"], [553, "supported-feature-matrix"], [556, "supported-feature-matrix"], [587, "supported-feature-matrix"], [588, "supported-feature-matrix"], [593, "supported-feature-matrix"], [597, "supported-feature-matrix"]], "Get Started with Distributed Training and Inference API": [[549, "get-started-with-distributed-training-and-inference-api"]], "Option 1: Pure Yaml Configuration": [[549, "option-1-pure-yaml-configuration"]], "Option 2: User Defined Training Function": [[549, "option-2-user-defined-training-function"]], "Horovodrun Execution": [[549, "horovodrun-execution"]], "PyTorch Examples:": [[549, "pytorch-examples"]], "TensorFlow Examples:": [[549, "tensorflow-examples"]], "Example List": [[550, "example-list"]], "Release Data": [[550, "release-data"]], "Export": [[551, "export"]], "Supported Framework Model Matrix": [[551, "supported-framework-model-matrix"], [562, "supported-framework-model-matrix"]], "FP32 Model Export": [[551, "fp32-model-export"]], "INT8 Model Export": [[551, "int8-model-export"]], "Appendix": [[551, "appendix"]], "Frequently Asked Questions": [[552, "frequently-asked-questions"]], "Common Build Issues": [[552, "common-build-issues"]], "Issue 1:": [[552, "issue-1"]], "Issue 2:": [[552, "issue-2"]], "Issue 3:": [[552, "issue-3"]], "Issue 4:": [[552, "issue-4"]], "Framework YAML Configuration Files": [[553, "framework-yaml-configuration-files"]], "Get started with Framework YAML Files": [[553, "get-started-with-framework-yaml-files"]], "Quick Samples": [[554, "quick-samples"]], "Quantization with JupyterLab Extension": [[554, "quantization-with-jupyterlab-extension"]], "Quantization with GUI": [[554, "quantization-with-gui"]], "Validated Models": [[554, "validated-models"], [592, "validated-models"], [598, "validated-models"]], "Incompatible changes between v1.2 and v1.1": [[555, "incompatible-changes-between-v1-2-and-v1-1"]], "User-facing APIs": [[555, "user-facing-apis"]], "Built-in transform/dataset/metric APIs": [[555, "built-in-transform-dataset-metric-apis"]], "Infrastructure of Intel\u00ae Neural Compressor": [[556, "infrastructure-of-intel-neural-compressor"]], "Linux Installation": [[557, "linux-installation"]], "Prerequisites": [[557, "prerequisites"], [557, "id1"]], "Install from Binary": [[557, "install-from-binary"], [557, "id2"]], "Install from Source": [[557, "install-from-source"], [557, "id3"]], "Install from AI Kit": [[557, "install-from-ai-kit"]], "Windows Installation": [[557, "windows-installation"]], "System Requirements": [[557, "system-requirements"]], "Validated Hardware Environment": [[557, "validated-hardware-environment"]], "Intel\u00ae Neural Compressor supports CPUs based on Intel 64 architecture or compatible processors:": [[557, "intel-neural-compressor-supports-cpus-based-on-intel-64-architecture-or-compatible-processors"]], "Intel\u00ae Neural Compressor supports GPUs built on Intel\u2019s Xe architecture:": [[557, "intel-neural-compressor-supports-gpus-built-on-intel-s-xe-architecture"]], "Intel\u00ae Neural Compressor quantized ONNX models support multiple hardware vendors through ONNX Runtime:": [[557, "intel-neural-compressor-quantized-onnx-models-support-multiple-hardware-vendors-through-onnx-runtime"]], "Validated Software Environment": [[557, "validated-software-environment"]], "Legal Information": [[558, "legal-information"]], "License": [[558, "license"]], "Citation": [[558, "citation"]], "Trademarks": [[558, "trademarks"]], "Metrics": [[559, "metrics"]], "Supported Built-in Metric Matrix": [[559, "supported-built-in-metric-matrix"]], "Get Start with Metrics": [[559, "get-start-with-metrics"]], "Support Single-metric and Multi-metrics": [[559, "support-single-metric-and-multi-metrics"]], "Build Custom Metric with Python API": [[559, "build-custom-metric-with-python-api"]], "Code Migration from Intel Neural Compressor 1.X to Intel Neural Compressor 2.X": [[560, "code-migration-from-intel-neural-compressor-1-x-to-intel-neural-compressor-2-x"]], "Model Quantization": [[560, "model-quantization"]], "Post-training Quantization": [[560, "post-training-quantization"]], "Quantization Aware Training": [[560, "quantization-aware-training"], [588, "quantization-aware-training"], [588, "id1"]], "Orchestration": [[560, "orchestration"]], "Mixed Precision": [[561, "mixed-precision"]], "Mixed Precision Support Matrix": [[561, "mixed-precision-support-matrix"]], "Get Started with Mixed Precision API": [[561, "get-started-with-mixed-precision-api"]], "Neural Coder": [[563, "neural-coder"], [580, "neural-coder"], [580, "id1"]], "What do we offer?": [[563, "what-do-we-offer"]], "Getting Started!": [[563, "getting-started"], [574, "getting-started"]], "Jupyter Lab Extension": [[563, "jupyter-lab-extension"]], "Python Launcher": [[563, "python-launcher"], [568, "python-launcher"]], "Python API": [[563, "python-api"]], "Contact": [[563, "contact"]], "AWS Amazon SageMaker Support": [[564, "aws-amazon-sagemaker-support"]], "Start Jupyter Lab 3": [[564, "start-jupyter-lab-3"]], "For SageMaker Studio": [[564, "for-sagemaker-studio"]], "For SageMaker Notebook instance": [[564, "for-sagemaker-notebook-instance"]], "Installation Guide": [[564, "installation-guide"]], "BigDL Nano Support": [[565, "bigdl-nano-support"]], "Example": [[565, "example"], [569, "example"], [582, "example"], [592, "example"]], "Support Matrix": [[565, "support-matrix"]], "Intel CPU Platforms: Best Performance Setting": [[566, "intel-cpu-platforms-best-performance-setting"]], "Install MKL, OpenMP and JEMALLOC": [[566, "install-mkl-openmp-and-jemalloc"]], "Install NUMA Controller": [[566, "install-numa-controller"]], "Environment Variables": [[566, "environment-variables"]], "Frequency Governers": [[566, "frequency-governers"]], "Neural Coder as Python API": [[567, "neural-coder-as-python-api"]], "Enable": [[567, "enable"]], "Bench": [[567, "bench"]], "SuperBench": [[567, "superbench"]], "Quick-Start": [[568, "quick-start"]], "Launcher Arguments (Optional)": [[568, "launcher-arguments-optional"]], "Neural Coder for Quantization": [[569, "neural-coder-for-quantization"]], "Features Supported": [[569, "features-supported"]], "Models Supported": [[569, "models-supported"]], "Usage": [[569, "usage"], [593, "usage"], [593, "id1"], [595, "usage"], [595, "id2"], [595, "id4"], [595, "id6"], [595, "id8"], [595, "id10"], [595, "id12"], [595, "id14"], [595, "id16"], [595, "id18"], [595, "id20"], [595, "id22"]], "PyPI distribution:": [[569, "pypi-distribution"]], "Supported Optimization Features": [[570, "supported-optimization-features"]], "v0.4": [[571, "v0-4"]], "Highlights": [[571, "highlights"]], "Others": [[571, "others"]], "Changelog": [[572, "changelog"], [576, "changelog"]], "neural_compressor_ext_lab": [[573, "neural-compressor-ext-lab"]], "Requirements": [[573, "requirements"], [577, "requirements"]], "Install": [[573, "install"], [577, "install"]], "Uninstall": [[573, "uninstall"], [577, "uninstall"]], "Contributing": [[573, "contributing"], [577, "contributing"]], "Development install": [[573, "development-install"], [577, "development-install"]], "Development uninstall": [[573, "development-uninstall"], [577, "development-uninstall"]], "Packaging the extension": [[573, "packaging-the-extension"], [577, "packaging-the-extension"]], "Intel\u00ae Neural Compressor as JupyterLab Extension": [[574, "intel-neural-compressor-as-jupyterlab-extension"]], "Auto-enable a feature": [[574, "auto-enable-a-feature"]], "Or let us help you auto-select the best feature": [[574, "or-let-us-help-you-auto-select-the-best-feature"]], "Pre-requisites": [[574, "pre-requisites"]], "Making a new release of neural_compressor_ext_lab": [[575, "making-a-new-release-of-neural-compressor-ext-lab"]], "Manual release": [[575, "manual-release"], [578, "manual-release"]], "Python package": [[575, "python-package"], [578, "python-package"]], "NPM package": [[575, "npm-package"], [578, "npm-package"]], "Automated releases with the Jupyter Releaser": [[575, "automated-releases-with-the-jupyter-releaser"], [578, "automated-releases-with-the-jupyter-releaser"]], "Publishing to conda-forge": [[575, "publishing-to-conda-forge"], [578, "publishing-to-conda-forge"]], "neural_compressor_ext_lab_alibaba": [[577, "neural-compressor-ext-lab-alibaba"]], "Making a new release of neural_compressor_ext_lab_alibaba": [[578, "making-a-new-release-of-neural-compressor-ext-lab-alibaba"]], "Change Log": [[579, "change-log"]], "[Unreleased]": [[579, "unreleased"]], "Background Introduction": [[580, "background-introduction"]], "Neural Coder Extension in VSCode": [[580, "neural-coder-extension-in-vscode"]], "Neural Coder Extension Usage": [[580, "neural-coder-extension-usage"]], "1. Open": [[580, "open"]], "2. Search": [[580, "search"]], "3. Setting": [[580, "setting"]], "4. Icon": [[580, "icon"]], "5. optimization (quantization)": [[580, "optimization-quantization"]], "5.1 Enable": [[580, "enable"]], "5.2 Auto": [[580, "auto"]], "Welcome to your VS Code Extension": [[581, "welcome-to-your-vs-code-extension"]], "What\u2019s in the folder": [[581, "what-s-in-the-folder"]], "Setup": [[581, "setup"]], "Get up and running straight away": [[581, "get-up-and-running-straight-away"]], "Make changes": [[581, "make-changes"]], "Explore the API": [[581, "explore-the-api"]], "Run tests": [[581, "run-tests"]], "Go further": [[581, "go-further"]], "Single Objective": [[582, "single-objective"]], "Multiple Objectives": [[582, "multiple-objectives"]], "Objective Support Matrix": [[582, "objective-support-matrix"]], "Get Started with Objective API": [[582, "get-started-with-objective-api"]], "Config Single Objective": [[582, "config-single-objective"]], "Config Multiple Objectives": [[582, "config-multiple-objectives"]], "Optimization Orchestration": [[583, "optimization-orchestration"]], "One-shot": [[583, "one-shot"]], "Orchestration Support Matrix": [[583, "orchestration-support-matrix"]], "Get Started with Orchestration API": [[583, "get-started-with-orchestration-api"]], "SYSTEM CONFIGURATION": [[584, "system-configuration"]], "Neural Network Pruning": [[585, "neural-network-pruning"]], "Pruning Patterns": [[585, "pruning-patterns"]], "Pruning Criteria": [[585, "pruning-criteria"]], "Pruning Schedule": [[585, "pruning-schedule"]], "Pruning Types": [[585, "pruning-types"]], "Pruning Scope": [[585, "pruning-scope"]], "Sparsity Decay Types": [[585, "sparsity-decay-types"]], "Regularization": [[585, "regularization"]], "Pruning Support Matrix": [[585, "pruning-support-matrix"]], "Get Started with Pruning API": [[585, "get-started-with-pruning-api"]], "Sparse Model Deployment": [[585, "sparse-model-deployment"]], "Reference": [[585, "reference"], [588, "reference"]], "Full Publications/Events (57)": [[586, "full-publications-events-57"]], "2023 (4)": [[586, "id1"]], "2022 (34)": [[586, "id2"]], "2021 (15)": [[586, "id3"]], "2018 - 2020 (4)": [[586, "id4"]], "Pythonic Style Access for Configurations": [[587, "pythonic-style-access-for-configurations"]], "Pythonic API for User Configurations": [[587, "pythonic-api-for-user-configurations"], [587, "id1"]], "Pythonic API for Framework Configurations": [[587, "pythonic-api-for-framework-configurations"], [587, "id2"]], "Get Started with Pythonic API for Configurations": [[587, "get-started-with-pythonic-api-for-configurations"]], "NAS": [[587, "nas"]], "Quantization Introduction": [[588, "quantization-introduction"]], "Quantization Fundamentals": [[588, "quantization-fundamentals"], [592, "quantization-fundamentals"]], "Quantization Support Matrix": [[588, "quantization-support-matrix"]], "Quantization Scheme in TensorFlow": [[588, "quantization-scheme-in-tensorflow"]], "Quantization Scheme in PyTorch": [[588, "quantization-scheme-in-pytorch"]], "Quantization Scheme in IPEX": [[588, "quantization-scheme-in-ipex"]], "Quantization Scheme in MXNet": [[588, "quantization-scheme-in-mxnet"]], "Quantization Scheme in ONNX Runtime": [[588, "quantization-scheme-in-onnx-runtime"]], "Quantization Approaches": [[588, "quantization-approaches"]], "With or Without Accuracy Aware Tuning": [[588, "with-or-without-accuracy-aware-tuning"]], "Get Started": [[588, "get-started"]], "Post Training Quantization": [[588, "post-training-quantization"]], "Specify Quantization Rules": [[588, "specify-quantization-rules"]], "Specify Quantization Recipes": [[588, "specify-quantization-recipes"]], "Specify Quantization Backend": [[588, "specify-quantization-backend"]], "Turn OFF Auto Mixed Precision during Quantization": [[589, "turn-off-auto-mixed-precision-during-quantization"]], "Tensorflow": [[589, "tensorflow"]], "Release": [[590, "release"]], "Release Notes": [[590, "release-notes"]], "Known Issues": [[590, "known-issues"]], "Incompatible Changes": [[590, "incompatible-changes"]], "SigOpt Strategy": [[591, "sigopt-strategy"]], "Preparation": [[591, "preparation"]], "SigOpt Platform": [[591, "sigopt-platform"]], "Neural Compressor Configuration": [[591, "neural-compressor-configuration"]], "Performance": [[591, "performance"]], "Benefit of SigOpt Strategy": [[591, "benefit-of-sigopt-strategy"]], "Performance Comparison of Different Strategies": [[591, "performance-comparison-of-different-strategies"]], "Smooth Quant": [[592, "smooth-quant"]], "SmoothQuant": [[592, "smoothquant"]], "SmoothQuant Support Matrix": [[592, "smoothquant-support-matrix"]], "TensorBoard": [[593, "tensorboard"]], "Get Started with TensorBoard": [[593, "get-started-with-tensorboard"]], "PyTorch TensorBoard": [[593, "pytorch-tensorboard"]], "TensorFlow Tensorboard": [[593, "tensorflow-tensorboard"]], "PyTorch Examples": [[593, "pytorch-examples"]], "TensorFlow Examples": [[593, "tensorflow-examples"]], "Transform": [[594, "transform"]], "Transform Support List": [[594, "transform-support-list"]], "Pytorch": [[594, "pytorch"]], "Tuning Strategies": [[595, "tuning-strategies"]], "Strategy Design": [[595, "strategy-design"]], "Tuning Space": [[595, "tuning-space"]], "Exit Policy": [[595, "exit-policy"]], "Accuracy Criteria": [[595, "accuracy-criteria"]], "Tuning Process": [[595, "tuning-process"]], "Tuning Algorithms": [[595, "tuning-algorithms"]], "Auto": [[595, "auto"]], "Conservative Tuning": [[595, "conservative-tuning"]], "Basic": [[595, "basic"]], "MSE": [[595, "mse"]], "MSE_V2": [[595, "mse-v2"]], "HAWQ_V2": [[595, "hawq-v2"]], "Bayesian": [[595, "bayesian"]], "Exhaustive": [[595, "exhaustive"]], "Random": [[595, "random"]], "SigOpt": [[595, "sigopt"]], "TPE": [[595, "tpe"]], "Distributed Tuning": [[595, "distributed-tuning"]], "Customize a New Tuning Strategy": [[595, "customize-a-new-tuning-strategy"]], "User Guide": [[596, "user-guide"]], "Overview": [[596, "overview"]], "Python-based APIs": [[596, "python-based-apis"]], "Neural Coder (Zero-code Optimization)": [[596, "neural-coder-zero-code-optimization"]], "Advanced Topics": [[596, "advanced-topics"]], "User YAML Configuration Files": [[597, "user-yaml-configuration-files"]], "Get started with User YAML Files": [[597, "get-started-with-user-yaml-files"]], "Validated Quantization Examples": [[598, "validated-quantization-examples"]], "TensorFlow Models with Intel TensorFlow 2.11.0": [[598, "tensorflow-models-with-intel-tensorflow-2-11-0"]], "PyTorch Models with Torch 1.13.0+cpu in PTQ Mode": [[598, "pytorch-models-with-torch-1-13-0-cpu-in-ptq-mode"]], "PyTorch Models with Torch 1.13.0+cpu in QAT Mode": [[598, "pytorch-models-with-torch-1-13-0-cpu-in-qat-mode"]], "PyTorch Models with Torch and Intel\u00ae Extension for PyTorch* 1.13.0+cpu": [[598, "pytorch-models-with-torch-and-intel-extension-for-pytorch-1-13-0-cpu"]], "ONNX Models with ONNX Runtime 1.13.1": [[598, "onnx-models-with-onnx-runtime-1-13-1"]], "MXNet Models with MXNet 1.9.1": [[598, "mxnet-models-with-mxnet-1-9-1"]], "Validated Pruning Examples": [[598, "validated-pruning-examples"]], "Validated Knowledge Distillation Examples": [[598, "validated-knowledge-distillation-examples"]], "Validated ONNX QDQ INT8 Models on Multiple Hardware through ONNX Runtime": [[598, "validated-onnx-qdq-int8-models-on-multiple-hardware-through-onnx-runtime"]]}, "indexentries": {"644ec953a7dc_pruning_support": [[0, "module-644ec953a7dc_pruning_support"]], "module": [[0, "module-644ec953a7dc_pruning_support"], [1, "module-6ece06672ed3_v1_14"], [2, "module-6f0d0f71d92e_v1_13"], [3, "module-9e89549a08c8_v1_11"], [4, "module-block_mask"], [5, "module-env"], [6, "module-neural_compressor.adaptor.adaptor"], [7, "module-neural_compressor.adaptor"], [8, "module-neural_compressor.adaptor.keras"], [9, "module-neural_compressor.adaptor.keras_utils.conv2d"], [10, "module-neural_compressor.adaptor.keras_utils.dense"], [11, "module-neural_compressor.adaptor.keras_utils"], [12, "module-neural_compressor.adaptor.keras_utils.quantizer"], [13, "module-neural_compressor.adaptor.mxnet"], [14, "module-neural_compressor.adaptor.mxnet_utils"], [15, "module-neural_compressor.adaptor.mxnet_utils.util"], [16, "module-neural_compressor.adaptor.onnxrt"], [17, "module-neural_compressor.adaptor.ox_utils.calibration"], [18, "module-neural_compressor.adaptor.ox_utils"], [19, "module-neural_compressor.adaptor.ox_utils.operators.activation"], [20, "module-neural_compressor.adaptor.ox_utils.operators.argmax"], [21, "module-neural_compressor.adaptor.ox_utils.operators.attention"], [22, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"], [23, "module-neural_compressor.adaptor.ox_utils.operators.concat"], [24, "module-neural_compressor.adaptor.ox_utils.operators.conv"], [25, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"], [26, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"], [27, "module-neural_compressor.adaptor.ox_utils.operators.gather"], [28, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"], [29, "module-neural_compressor.adaptor.ox_utils.operators.gemm"], [30, "module-neural_compressor.adaptor.ox_utils.operators"], [31, "module-neural_compressor.adaptor.ox_utils.operators.lstm"], [32, "module-neural_compressor.adaptor.ox_utils.operators.matmul"], [33, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"], [34, "module-neural_compressor.adaptor.ox_utils.operators.ops"], [35, "module-neural_compressor.adaptor.ox_utils.operators.pad"], [36, "module-neural_compressor.adaptor.ox_utils.operators.pooling"], [37, "module-neural_compressor.adaptor.ox_utils.operators.resize"], [38, "module-neural_compressor.adaptor.ox_utils.operators.split"], [39, "module-neural_compressor.adaptor.ox_utils.quantizer"], [40, "module-neural_compressor.adaptor.ox_utils.util"], [41, "module-neural_compressor.adaptor.pytorch"], [42, "module-neural_compressor.adaptor.query"], [43, "module-neural_compressor.adaptor.tensorflow"], [44, "module-neural_compressor.adaptor.tf_utils.graph_converter"], [45, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"], [46, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"], [47, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"], [48, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"], [49, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"], [50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"], [51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"], [52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"], [53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"], [54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"], [55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"], [56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"], [57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"], [58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"], [59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"], [60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"], [61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"], [62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"], [63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"], [64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"], [65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"], [66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"], [67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"], [68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"], [69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"], [70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"], [71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"], [72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"], [73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"], [74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"], [75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"], [76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"], [77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"], [78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"], [79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"], [80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"], [81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"], [82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"], [83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"], [84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"], [85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"], [86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"], [87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"], [88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"], [89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"], [90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"], [91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"], [92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"], [93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"], [94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"], [95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"], [96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"], [97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"], [98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"], [99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"], [100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"], [101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"], [102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"], [103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"], [104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"], [105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"], [106, "module-neural_compressor.adaptor.tf_utils.graph_util"], [107, "module-neural_compressor.adaptor.tf_utils"], [108, "module-neural_compressor.adaptor.tf_utils.quantize_graph"], [109, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"], [110, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"], [111, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"], [112, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"], [113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"], [114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"], [115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"], [116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"], [117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"], [118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"], [119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"], [120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"], [121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"], [122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"], [123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"], [124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"], [125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"], [126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"], [127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"], [128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"], [129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"], [130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"], [131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"], [132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"], [133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"], [134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"], [135, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"], [136, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"], [137, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"], [138, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"], [139, "module-neural_compressor.adaptor.tf_utils.transform_graph"], [140, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"], [141, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"], [142, "module-neural_compressor.adaptor.tf_utils.util"], [143, "module-neural_compressor.adaptor.torch_utils.bf16_convert"], [144, "module-neural_compressor.adaptor.torch_utils.hawq_metric"], [145, "module-neural_compressor.adaptor.torch_utils"], [146, "module-neural_compressor.adaptor.torch_utils.smooth_quant"], [147, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"], [148, "module-neural_compressor.adaptor.torch_utils.util"], [149, "module-neural_compressor.algorithm.algorithm"], [150, "module-neural_compressor.algorithm.fast_bias_correction"], [151, "module-neural_compressor.algorithm"], [152, "module-neural_compressor.algorithm.smooth_quant"], [153, "module-neural_compressor.algorithm.weight_correction"], [154, "module-neural_compressor.benchmark"], [155, "module-neural_compressor.compression.callbacks"], [156, "module-neural_compressor.compression.distillation.criterions"], [157, "module-neural_compressor.compression.distillation"], [158, "module-neural_compressor.compression"], [159, "module-neural_compressor.compression.pruner.criteria"], [160, "module-neural_compressor.compression.pruner"], [161, "module-neural_compressor.compression.pruner.patterns"], [162, "module-neural_compressor.compression.pruner.pruners"], [163, "module-neural_compressor.compression.pruner.regs"], [164, "module-neural_compressor.compression.pruner.schedulers"], [165, "module-neural_compressor.compression.pruner.utils"], [166, "module-neural_compressor.conf.config"], [167, "module-neural_compressor.conf.dotdict"], [168, "module-neural_compressor.conf"], [169, "module-neural_compressor.conf.pythonic_config"], [170, "module-neural_compressor.config"], [171, "module-neural_compressor.contrib"], [172, "module-neural_compressor.contrib.strategy"], [173, "module-neural_compressor.contrib.strategy.sigopt"], [174, "module-neural_compressor.contrib.strategy.tpe"], [175, "module-neural_compressor.data.dataloaders.base_dataloader"], [176, "module-neural_compressor.data.dataloaders.dataloader"], [177, "module-neural_compressor.data.dataloaders.default_dataloader"], [178, "module-neural_compressor.data.dataloaders.fetcher"], [179, "module-neural_compressor.data.dataloaders"], [180, "module-neural_compressor.data.dataloaders.mxnet_dataloader"], [181, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"], [182, "module-neural_compressor.data.dataloaders.pytorch_dataloader"], [183, "module-neural_compressor.data.dataloaders.sampler"], [184, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"], [185, "module-neural_compressor.data.datasets.bert_dataset"], [186, "module-neural_compressor.data.datasets.coco_dataset"], [187, "module-neural_compressor.data.datasets.dataset"], [188, "module-neural_compressor.data.datasets.dummy_dataset"], [189, "module-neural_compressor.data.datasets.dummy_dataset_v2"], [190, "module-neural_compressor.data.datasets.imagenet_dataset"], [191, "module-neural_compressor.data.datasets"], [192, "module-neural_compressor.data.datasets.style_transfer_dataset"], [193, "module-neural_compressor.data.filters.coco_filter"], [194, "module-neural_compressor.data.filters.filter"], [195, "module-neural_compressor.data.filters"], [196, "module-neural_compressor.data"], [197, "module-neural_compressor.data.transforms.coco_transform"], [198, "module-neural_compressor.data.transforms.imagenet_transform"], [199, "module-neural_compressor.data.transforms"], [200, "module-neural_compressor.data.transforms.postprocess"], [201, "module-neural_compressor.data.transforms.tokenization"], [202, "module-neural_compressor.data.transforms.transform"], [203, "module-neural_compressor.experimental.benchmark"], [204, "module-neural_compressor.experimental.common.criterion"], [205, "module-neural_compressor.experimental.common.dataloader"], [206, "module-neural_compressor.experimental.common"], [207, "module-neural_compressor.experimental.common.metric"], [208, "module-neural_compressor.experimental.common.model"], [209, "module-neural_compressor.experimental.common.optimizer"], [210, "module-neural_compressor.experimental.common.postprocess"], [211, "module-neural_compressor.experimental.common.torch_utils"], [212, "module-neural_compressor.experimental.component"], [213, "module-neural_compressor.experimental.compression"], [214, "module-neural_compressor.experimental.compression.pruning"], [215, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"], [216, "module-neural_compressor.experimental.data.dataloaders.dataloader"], [217, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"], [218, "module-neural_compressor.experimental.data.dataloaders.fetcher"], [219, "module-neural_compressor.experimental.data.dataloaders"], [220, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"], [221, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"], [222, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"], [223, "module-neural_compressor.experimental.data.dataloaders.sampler"], [224, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"], [225, "module-neural_compressor.experimental.data.datasets.bert_dataset"], [226, "module-neural_compressor.experimental.data.datasets.coco_dataset"], [227, "module-neural_compressor.experimental.data.datasets.dataset"], [228, "module-neural_compressor.experimental.data.datasets.dummy_dataset"], [229, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"], [230, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"], [231, "module-neural_compressor.experimental.data.datasets"], [232, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"], [233, "module-neural_compressor.experimental.data.filters.coco_filter"], [234, "module-neural_compressor.experimental.data.filters.filter"], [235, "module-neural_compressor.experimental.data.filters"], [236, "module-neural_compressor.experimental.data"], [237, "module-neural_compressor.experimental.data.transforms.imagenet_transform"], [238, "module-neural_compressor.experimental.data.transforms"], [239, "module-neural_compressor.experimental.data.transforms.tokenization"], [240, "module-neural_compressor.experimental.data.transforms.transform"], [241, "module-neural_compressor.experimental.distillation"], [242, "module-neural_compressor.experimental.export"], [243, "module-neural_compressor.experimental.export.qlinear2qdq"], [244, "module-neural_compressor.experimental.export.tf2onnx"], [245, "module-neural_compressor.experimental.export.torch2onnx"], [246, "module-neural_compressor.experimental.export.utils"], [247, "module-neural_compressor.experimental.graph_optimization"], [248, "module-neural_compressor.experimental"], [249, "module-neural_compressor.experimental.metric.bleu"], [250, "module-neural_compressor.experimental.metric.bleu_util"], [251, "module-neural_compressor.experimental.metric.coco_label_map"], [252, "module-neural_compressor.experimental.metric.coco_tools"], [253, "module-neural_compressor.experimental.metric.evaluate_squad"], [254, "module-neural_compressor.experimental.metric.f1"], [255, "module-neural_compressor.experimental.metric"], [256, "module-neural_compressor.experimental.metric.metric"], [257, "module-neural_compressor.experimental.mixed_precision"], [258, "module-neural_compressor.experimental.model_conversion"], [259, "module-neural_compressor.experimental.nas.basic_nas"], [260, "module-neural_compressor.experimental.nas.dynas"], [261, "module-neural_compressor.experimental.nas"], [262, "module-neural_compressor.experimental.nas.nas"], [263, "module-neural_compressor.experimental.nas.nas_utils"], [264, "module-neural_compressor.experimental.nas.search_algorithms"], [265, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"], [266, "module-neural_compressor.experimental.pruner_legacy.group_lasso"], [267, "module-neural_compressor.experimental.pruner_legacy"], [268, "module-neural_compressor.experimental.pruner_legacy.magnitude"], [269, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"], [270, "module-neural_compressor.experimental.pruner_legacy.pruner"], [271, "module-neural_compressor.experimental.pruning"], [272, "module-neural_compressor.experimental.pruning_recipes"], [273, "module-neural_compressor.experimental.pruning_recipes.patterns"], [274, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"], [275, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"], [276, "module-neural_compressor.experimental.pruning_v2"], [277, "module-neural_compressor.experimental.pytorch_pruner"], [278, "module-neural_compressor.experimental.pytorch_pruner.logger"], [279, "module-neural_compressor.experimental.pytorch_pruner.patterns"], [280, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"], [281, "module-neural_compressor.experimental.pytorch_pruner.pruner"], [282, "module-neural_compressor.experimental.pytorch_pruner.pruning"], [283, "module-neural_compressor.experimental.pytorch_pruner.scheduler"], [284, "module-neural_compressor.experimental.quantization"], [285, "module-neural_compressor.experimental.scheduler"], [286, "module-neural_compressor"], [287, "module-neural_compressor.metric.bleu"], [288, "module-neural_compressor.metric.bleu_util"], [289, "module-neural_compressor.metric.coco_label_map"], [290, "module-neural_compressor.metric.coco_tools"], [291, "module-neural_compressor.metric.evaluate_squad"], [292, "module-neural_compressor.metric.f1"], [293, "module-neural_compressor.metric"], [294, "module-neural_compressor.metric.metric"], [295, "module-neural_compressor.mix_precision"], [296, "module-neural_compressor.model.base_model"], [297, "module-neural_compressor.model"], [298, "module-neural_compressor.model.keras_model"], [299, "module-neural_compressor.model.model"], [300, "module-neural_compressor.model.mxnet_model"], [301, "module-neural_compressor.model.nets_factory"], [302, "module-neural_compressor.model.onnx_model"], [303, "module-neural_compressor.model.tensorflow_model"], [304, "module-neural_compressor.model.torch_model"], [305, "module-neural_compressor.objective"], [306, "module-neural_compressor.quantization"], [307, "module-neural_compressor.strategy.auto"], [308, "module-neural_compressor.strategy.auto_mixed_precision"], [309, "module-neural_compressor.strategy.basic"], [310, "module-neural_compressor.strategy.bayesian"], [311, "module-neural_compressor.strategy.conservative"], [312, "module-neural_compressor.strategy.exhaustive"], [313, "module-neural_compressor.strategy.hawq_v2"], [314, "module-neural_compressor.strategy"], [315, "module-neural_compressor.strategy.mse"], [316, "module-neural_compressor.strategy.mse_v2"], [317, "module-neural_compressor.strategy.random"], [318, "module-neural_compressor.strategy.strategy"], [319, "module-neural_compressor.strategy.utils.constant"], [320, "module-neural_compressor.strategy.utils"], [321, "module-neural_compressor.strategy.utils.tuning_sampler"], [322, "module-neural_compressor.strategy.utils.tuning_space"], [323, "module-neural_compressor.strategy.utils.tuning_structs"], [324, "module-neural_compressor.strategy.utils.utility"], [325, "module-neural_compressor.template.api_doc_example"], [326, "module-neural_compressor.template"], [327, "module-neural_compressor.training"], [328, "module-neural_compressor.utils.collect_layer_histogram"], [329, "module-neural_compressor.utils.constant"], [330, "module-neural_compressor.utils.create_obj_from_config"], [331, "module-neural_compressor.utils"], [332, "module-neural_compressor.utils.kl_divergence"], [333, "module-neural_compressor.utils.load_huggingface"], [334, "module-neural_compressor.utils.logger"], [335, "module-neural_compressor.utils.options"], [336, "module-neural_compressor.utils.pytorch"], [337, "module-neural_compressor.utils.utility"], [338, "module-neural_compressor.ux.components.benchmark.benchmark"], [339, "module-neural_compressor.ux.components.benchmark.benchmark_model"], [340, "module-neural_compressor.ux.components.benchmark.execute_benchmark"], [341, "module-neural_compressor.ux.components.benchmark"], [342, "module-neural_compressor.ux.components.config_generator.benchmark_config_generator"], [343, "module-neural_compressor.ux.components.config_generator.config_generator"], [344, "module-neural_compressor.ux.components.config_generator.graph_optimization_config_generator"], [345, "module-neural_compressor.ux.components.config_generator"], [346, "module-neural_compressor.ux.components.config_generator.mixed_precision_config_generator"], [347, "module-neural_compressor.ux.components.config_generator.profiling_config_generator"], [348, "module-neural_compressor.ux.components.config_generator.pruning_config_generator"], [349, "module-neural_compressor.ux.components.config_generator.quantization_config_generator"], [350, "module-neural_compressor.ux.components.configuration_wizard.configuration_parser"], [351, "module-neural_compressor.ux.components.configuration_wizard.get_boundary_nodes"], [352, "module-neural_compressor.ux.components.configuration_wizard.get_configuration"], [353, "module-neural_compressor.ux.components.configuration_wizard"], [354, "module-neural_compressor.ux.components.configuration_wizard.params_feeder"], [355, "module-neural_compressor.ux.components.configuration_wizard.pruning_config_parser"], [356, "module-neural_compressor.ux.components.db_manager.db_manager"], [357, "module-neural_compressor.ux.components.db_manager.db_models.benchmark"], [358, "module-neural_compressor.ux.components.db_manager.db_models.benchmark_result"], [359, "module-neural_compressor.ux.components.db_manager.db_models.dataloader"], [360, "module-neural_compressor.ux.components.db_manager.db_models.dataset"], [361, "module-neural_compressor.ux.components.db_manager.db_models.domain"], [362, "module-neural_compressor.ux.components.db_manager.db_models.domain_flavour"], [363, "module-neural_compressor.ux.components.db_manager.db_models.example"], [364, "module-neural_compressor.ux.components.db_manager.db_models.framework"], [365, "module-neural_compressor.ux.components.db_manager.db_models"], [366, "module-neural_compressor.ux.components.db_manager.db_models.metric"], [367, "module-neural_compressor.ux.components.db_manager.db_models.model"], [368, "module-neural_compressor.ux.components.db_manager.db_models.optimization"], [369, "module-neural_compressor.ux.components.db_manager.db_models.optimization_type"], [370, "module-neural_compressor.ux.components.db_manager.db_models.precision"], [371, "module-neural_compressor.ux.components.db_manager.db_models.profiling"], [372, "module-neural_compressor.ux.components.db_manager.db_models.profiling_result"], [373, "module-neural_compressor.ux.components.db_manager.db_models.project"], [374, "module-neural_compressor.ux.components.db_manager.db_models.pruning_details"], [375, "module-neural_compressor.ux.components.db_manager.db_models.transform"], [376, "module-neural_compressor.ux.components.db_manager.db_models.tuning_details"], [377, "module-neural_compressor.ux.components.db_manager.db_models.tuning_history"], [378, "module-neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface"], [379, "module-neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface"], [380, "module-neural_compressor.ux.components.db_manager.db_operations.db_operations"], [381, "module-neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface"], [382, "module-neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface"], [383, "module-neural_compressor.ux.components.db_manager.db_operations.examples_api_interface"], [384, "module-neural_compressor.ux.components.db_manager.db_operations"], [385, "module-neural_compressor.ux.components.db_manager.db_operations.model_api_interface"], [386, "module-neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface"], [387, "module-neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface"], [388, "module-neural_compressor.ux.components.db_manager.db_operations.project_api_interface"], [389, "module-neural_compressor.ux.components.db_manager"], [390, "module-neural_compressor.ux.components.db_manager.params_interfaces"], [391, "module-neural_compressor.ux.components.db_manager.utils"], [392, "module-neural_compressor.ux.components.diagnosis.diagnosis"], [393, "module-neural_compressor.ux.components.diagnosis.factory"], [394, "module-neural_compressor.ux.components.diagnosis"], [395, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis"], [396, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis"], [397, "module-neural_compressor.ux.components.diagnosis.op_details"], [398, "module-neural_compressor.ux.components.diagnosis.op_entry"], [399, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis"], [400, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis"], [401, "module-neural_compressor.ux.components.file_browser.file_browser"], [402, "module-neural_compressor.ux.components.file_browser"], [403, "module-neural_compressor.ux.components.graph.attribute"], [404, "module-neural_compressor.ux.components.graph.collapser"], [405, "module-neural_compressor.ux.components.graph.edge"], [406, "module-neural_compressor.ux.components.graph.graph"], [407, "module-neural_compressor.ux.components.graph.graph_reader"], [408, "module-neural_compressor.ux.components.graph"], [409, "module-neural_compressor.ux.components.graph.node"], [410, "module-neural_compressor.ux.components.graph.reader"], [411, "module-neural_compressor.ux.components.graph.reader.onnxrt_reader"], [412, "module-neural_compressor.ux.components.graph.reader.tensorflow_reader"], [413, "module-neural_compressor.ux.components"], [414, "module-neural_compressor.ux.components.jobs_management"], [415, "module-neural_compressor.ux.components.jobs_management.jobs_control_queue"], [416, "module-neural_compressor.ux.components.jobs_management.jobs_manager"], [417, "module-neural_compressor.ux.components.jobs_management.request"], [418, "module-neural_compressor.ux.components.manage_workspace"], [419, "module-neural_compressor.ux.components.model.domain"], [420, "module-neural_compressor.ux.components.model"], [421, "module-neural_compressor.ux.components.model.model"], [422, "module-neural_compressor.ux.components.model.model_type_getter"], [423, "module-neural_compressor.ux.components.model.onnxrt"], [424, "module-neural_compressor.ux.components.model.onnxrt.model"], [425, "module-neural_compressor.ux.components.model.pytorch"], [426, "module-neural_compressor.ux.components.model.pytorch.model"], [427, "module-neural_compressor.ux.components.model.repository"], [428, "module-neural_compressor.ux.components.model.shape"], [429, "module-neural_compressor.ux.components.model.tensorflow.frozen_pb"], [430, "module-neural_compressor.ux.components.model.tensorflow"], [431, "module-neural_compressor.ux.components.model.tensorflow.keras"], [432, "module-neural_compressor.ux.components.model.tensorflow.meta_graph"], [433, "module-neural_compressor.ux.components.model.tensorflow.model"], [434, "module-neural_compressor.ux.components.model.tensorflow.saved_model"], [435, "module-neural_compressor.ux.components.model.tensorflow.utils"], [436, "module-neural_compressor.ux.components.model_zoo.download_config"], [437, "module-neural_compressor.ux.components.model_zoo.download_model"], [438, "module-neural_compressor.ux.components.model_zoo.downloader"], [439, "module-neural_compressor.ux.components.model_zoo"], [440, "module-neural_compressor.ux.components.model_zoo.list_models"], [441, "module-neural_compressor.ux.components.names_mapper"], [442, "module-neural_compressor.ux.components.names_mapper.names_mapper"], [443, "module-neural_compressor.ux.components.optimization.execute_optimization"], [444, "module-neural_compressor.ux.components.optimization.factory"], [445, "module-neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization"], [446, "module-neural_compressor.ux.components.optimization.graph_optimizer"], [447, "module-neural_compressor.ux.components.optimization.graph_optimizer.optimize_model"], [448, "module-neural_compressor.ux.components.optimization"], [449, "module-neural_compressor.ux.components.optimization.mixed_precision"], [450, "module-neural_compressor.ux.components.optimization.mixed_precision.mixed_precision"], [451, "module-neural_compressor.ux.components.optimization.mixed_precision.optimize_model"], [452, "module-neural_compressor.ux.components.optimization.neural_coder_optimization"], [453, "module-neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model"], [454, "module-neural_compressor.ux.components.optimization.optimization"], [455, "module-neural_compressor.ux.components.optimization.pruning"], [456, "module-neural_compressor.ux.components.optimization.pruning.optimize_model"], [457, "module-neural_compressor.ux.components.optimization.pruning.pruning"], [458, "module-neural_compressor.ux.components.optimization.tune"], [459, "module-neural_compressor.ux.components.optimization.tune.tune_model"], [460, "module-neural_compressor.ux.components.optimization.tune.tuning"], [461, "module-neural_compressor.ux.components.optimization.tuning_history"], [462, "module-neural_compressor.ux.components.profiling.execute_profiling"], [463, "module-neural_compressor.ux.components.profiling.factory"], [464, "module-neural_compressor.ux.components.profiling"], [465, "module-neural_compressor.ux.components.profiling.profile_model"], [466, "module-neural_compressor.ux.components.profiling.profiler"], [467, "module-neural_compressor.ux.components.profiling.profiling"], [468, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.factory"], [469, "module-neural_compressor.ux.components.profiling.tensorflow_profiler"], [470, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.profiler"], [471, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.utils"], [472, "module-neural_compressor.ux.inc_bench"], [473, "module-neural_compressor.ux"], [474, "module-neural_compressor.ux.utils.consts"], [475, "module-neural_compressor.ux.utils.environment"], [476, "module-neural_compressor.ux.utils.exceptions"], [477, "module-neural_compressor.ux.utils.executor"], [478, "module-neural_compressor.ux.utils.expiring_dict"], [479, "module-neural_compressor.ux.utils.github_info"], [480, "module-neural_compressor.ux.utils.hw_info"], [481, "module-neural_compressor.ux.utils"], [482, "module-neural_compressor.ux.utils.json_serializer"], [483, "module-neural_compressor.ux.utils.logger"], [484, "module-neural_compressor.ux.utils.parser"], [485, "module-neural_compressor.ux.utils.proc"], [486, "module-neural_compressor.ux.utils.processes"], [487, "module-neural_compressor.ux.utils.singleton"], [488, "module-neural_compressor.ux.utils.status_updates"], [489, "module-neural_compressor.ux.utils.templates"], [490, "module-neural_compressor.ux.utils.templates.metric"], [491, "module-neural_compressor.ux.utils.templates.workdir"], [492, "module-neural_compressor.ux.utils.utils"], [493, "module-neural_compressor.ux.utils.workload.config"], [494, "module-neural_compressor.ux.utils.workload.dataloader"], [495, "module-neural_compressor.ux.utils.workload.evaluation"], [496, "module-neural_compressor.ux.utils.workload.graph_optimization"], [497, "module-neural_compressor.ux.utils.workload"], [498, "module-neural_compressor.ux.utils.workload.mixed_precision"], [499, "module-neural_compressor.ux.utils.workload.model"], [500, "module-neural_compressor.ux.utils.workload.pruning"], [501, "module-neural_compressor.ux.utils.workload.quantization"], [502, "module-neural_compressor.ux.utils.workload.tuning"], [503, "module-neural_compressor.ux.utils.yaml_utils"], [504, "module-neural_compressor.ux.web.communication"], [505, "module-neural_compressor.ux.web.configuration"], [506, "module-neural_compressor.ux.web.exceptions"], [507, "module-neural_compressor.ux.web"], [508, "module-neural_compressor.ux.web.router"], [509, "module-neural_compressor.ux.web.server"], [510, "module-neural_compressor.ux.web.service.benchmark"], [511, "module-neural_compressor.ux.web.service.history_snapshot_parser"], [512, "module-neural_compressor.ux.web.service"], [513, "module-neural_compressor.ux.web.service.model"], [514, "module-neural_compressor.ux.web.service.optimization"], [515, "module-neural_compressor.ux.web.service.profiling"], [516, "module-neural_compressor.ux.web.service.request_data_processor"], [517, "module-neural_compressor.ux.web.service.response_generator"], [518, "module-neural_compressor.ux.web.service.workload"], [519, "module-neural_compressor.version"]], "6ece06672ed3_v1_14": [[1, "module-6ece06672ed3_v1_14"]], "update_dataloaders() (in module 6ece06672ed3_v1_14)": [[1, "ece06672ed3_v1_14.update_dataloaders"]], "update_transformations() (in module 6ece06672ed3_v1_14)": [[1, "ece06672ed3_v1_14.update_transformations"]], "6f0d0f71d92e_v1_13": [[2, "module-6f0d0f71d92e_v1_13"]], "9e89549a08c8_v1_11": [[3, "module-9e89549a08c8_v1_11"]], "block_mask": [[4, "module-block_mask"]], "env": [[5, "module-env"]], "run_migrations_offline() (in module env)": [[5, "env.run_migrations_offline"]], "run_migrations_online() (in module env)": [[5, "env.run_migrations_online"]], "adaptor (class in neural_compressor.adaptor.adaptor)": [[6, "neural_compressor.adaptor.adaptor.Adaptor"]], "adaptor_registry() (in module neural_compressor.adaptor.adaptor)": [[6, "neural_compressor.adaptor.adaptor.adaptor_registry"]], "neural_compressor.adaptor.adaptor": [[6, "module-neural_compressor.adaptor.adaptor"]], "neural_compressor.adaptor": [[7, "module-neural_compressor.adaptor"]], "kerasadaptor (class in neural_compressor.adaptor.keras)": [[8, "neural_compressor.adaptor.keras.KerasAdaptor"]], "neural_compressor.adaptor.keras": [[8, "module-neural_compressor.adaptor.keras"]], "neural_compressor.adaptor.keras_utils.conv2d": [[9, "module-neural_compressor.adaptor.keras_utils.conv2d"]], "neural_compressor.adaptor.keras_utils.dense": [[10, "module-neural_compressor.adaptor.keras_utils.dense"]], "neural_compressor.adaptor.keras_utils": [[11, "module-neural_compressor.adaptor.keras_utils"]], "neural_compressor.adaptor.keras_utils.quantizer": [[12, "module-neural_compressor.adaptor.keras_utils.quantizer"]], "mxnetadaptor (class in neural_compressor.adaptor.mxnet)": [[13, "neural_compressor.adaptor.mxnet.MxNetAdaptor"]], "neural_compressor.adaptor.mxnet": [[13, "module-neural_compressor.adaptor.mxnet"]], "neural_compressor.adaptor.mxnet_utils": [[14, "module-neural_compressor.adaptor.mxnet_utils"]], "calibcollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[15, "neural_compressor.adaptor.mxnet_utils.util.CalibCollector"]], "calibdata (class in neural_compressor.adaptor.mxnet_utils.util)": [[15, "neural_compressor.adaptor.mxnet_utils.util.CalibData"]], "collectorbase (class in neural_compressor.adaptor.mxnet_utils.util)": [[15, "neural_compressor.adaptor.mxnet_utils.util.CollectorBase"]], "dataiterloader (class in neural_compressor.adaptor.mxnet_utils.util)": [[15, "neural_compressor.adaptor.mxnet_utils.util.DataIterLoader"]], "dataloaderwrap (class in neural_compressor.adaptor.mxnet_utils.util)": [[15, "neural_compressor.adaptor.mxnet_utils.util.DataLoaderWrap"]], "namecollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[15, "neural_compressor.adaptor.mxnet_utils.util.NameCollector"]], "optype (class in neural_compressor.adaptor.mxnet_utils.util)": [[15, "neural_compressor.adaptor.mxnet_utils.util.OpType"]], "tensorcollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[15, "neural_compressor.adaptor.mxnet_utils.util.TensorCollector"]], "amp_convert() (in module neural_compressor.adaptor.mxnet_utils.util)": [[15, "neural_compressor.adaptor.mxnet_utils.util.amp_convert"]], "calib_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[15, "neural_compressor.adaptor.mxnet_utils.util.calib_model"]], "check_mx_version() (in module neural_compressor.adaptor.mxnet_utils.util)": [[15, "neural_compressor.adaptor.mxnet_utils.util.check_mx_version"]], "combine_capabilities() (in module neural_compressor.adaptor.mxnet_utils.util)": [[15, "neural_compressor.adaptor.mxnet_utils.util.combine_capabilities"]], "create_data_example() (in module neural_compressor.adaptor.mxnet_utils.util)": [[15, "neural_compressor.adaptor.mxnet_utils.util.create_data_example"]], "distribute_calib_tensors() (in module neural_compressor.adaptor.mxnet_utils.util)": [[15, "neural_compressor.adaptor.mxnet_utils.util.distribute_calib_tensors"]], "ensure_list() (in module neural_compressor.adaptor.mxnet_utils.util)": [[15, "neural_compressor.adaptor.mxnet_utils.util.ensure_list"]], "fuse() (in module neural_compressor.adaptor.mxnet_utils.util)": [[15, "neural_compressor.adaptor.mxnet_utils.util.fuse"]], "get_framework_name() (in module neural_compressor.adaptor.mxnet_utils.util)": [[15, "neural_compressor.adaptor.mxnet_utils.util.get_framework_name"]], "is_model_quantized() (in module neural_compressor.adaptor.mxnet_utils.util)": [[15, "neural_compressor.adaptor.mxnet_utils.util.is_model_quantized"]], "isiterable() (in module neural_compressor.adaptor.mxnet_utils.util)": [[15, "neural_compressor.adaptor.mxnet_utils.util.isiterable"]], "make_module() (in module neural_compressor.adaptor.mxnet_utils.util)": [[15, "neural_compressor.adaptor.mxnet_utils.util.make_module"]], "make_nc_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[15, "neural_compressor.adaptor.mxnet_utils.util.make_nc_model"]], "make_symbol_block() (in module neural_compressor.adaptor.mxnet_utils.util)": [[15, "neural_compressor.adaptor.mxnet_utils.util.make_symbol_block"]], "ndarray_to_device() (in module neural_compressor.adaptor.mxnet_utils.util)": [[15, "neural_compressor.adaptor.mxnet_utils.util.ndarray_to_device"]], "neural_compressor.adaptor.mxnet_utils.util": [[15, "module-neural_compressor.adaptor.mxnet_utils.util"]], "parse_tune_config() (in module neural_compressor.adaptor.mxnet_utils.util)": [[15, "neural_compressor.adaptor.mxnet_utils.util.parse_tune_config"]], "prepare_dataloader() (in module neural_compressor.adaptor.mxnet_utils.util)": [[15, "neural_compressor.adaptor.mxnet_utils.util.prepare_dataloader"]], "prepare_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[15, "neural_compressor.adaptor.mxnet_utils.util.prepare_model"]], "prepare_model_data() (in module neural_compressor.adaptor.mxnet_utils.util)": [[15, "neural_compressor.adaptor.mxnet_utils.util.prepare_model_data"]], "quantize_sym_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[15, "neural_compressor.adaptor.mxnet_utils.util.quantize_sym_model"]], "query_quantizable_nodes() (in module neural_compressor.adaptor.mxnet_utils.util)": [[15, "neural_compressor.adaptor.mxnet_utils.util.query_quantizable_nodes"]], "run_forward() (in module neural_compressor.adaptor.mxnet_utils.util)": [[15, "neural_compressor.adaptor.mxnet_utils.util.run_forward"]], "onnxrt_integeropsadaptor (class in neural_compressor.adaptor.onnxrt)": [[16, "neural_compressor.adaptor.onnxrt.ONNXRT_IntegerOpsAdaptor"]], "onnxrt_qdqadaptor (class in neural_compressor.adaptor.onnxrt)": [[16, "neural_compressor.adaptor.onnxrt.ONNXRT_QDQAdaptor"]], "onnxrt_qlinearopsadaptor (class in neural_compressor.adaptor.onnxrt)": [[16, "neural_compressor.adaptor.onnxrt.ONNXRT_QLinearOpsAdaptor"]], "onnxruntimeadaptor (class in neural_compressor.adaptor.onnxrt)": [[16, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor"]], "neural_compressor.adaptor.onnxrt": [[16, "module-neural_compressor.adaptor.onnxrt"]], "onnxrtaugment (class in neural_compressor.adaptor.ox_utils.calibration)": [[17, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment"]], "neural_compressor.adaptor.ox_utils.calibration": [[17, "module-neural_compressor.adaptor.ox_utils.calibration"]], "neural_compressor.adaptor.ox_utils": [[18, "module-neural_compressor.adaptor.ox_utils"]], "activationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[19, "neural_compressor.adaptor.ox_utils.operators.activation.ActivationOperator"]], "qactivationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[19, "neural_compressor.adaptor.ox_utils.operators.activation.QActivationOperator"]], "removableactivationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[19, "neural_compressor.adaptor.ox_utils.operators.activation.RemovableActivationOperator"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[19, "module-neural_compressor.adaptor.ox_utils.operators.activation"]], "argmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.argmax)": [[20, "neural_compressor.adaptor.ox_utils.operators.argmax.ArgMaxOperator"]], "qargmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.argmax)": [[20, "neural_compressor.adaptor.ox_utils.operators.argmax.QArgMaxOperator"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[20, "module-neural_compressor.adaptor.ox_utils.operators.argmax"]], "attentionoperator (class in neural_compressor.adaptor.ox_utils.operators.attention)": [[21, "neural_compressor.adaptor.ox_utils.operators.attention.AttentionOperator"]], "qattentionoperator (class in neural_compressor.adaptor.ox_utils.operators.attention)": [[21, "neural_compressor.adaptor.ox_utils.operators.attention.QAttentionOperator"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[21, "module-neural_compressor.adaptor.ox_utils.operators.attention"]], "binaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[22, "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryOperator"]], "qbinaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[22, "neural_compressor.adaptor.ox_utils.operators.binary_op.QBinaryOperator"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[22, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"]], "concatoperator (class in neural_compressor.adaptor.ox_utils.operators.concat)": [[23, "neural_compressor.adaptor.ox_utils.operators.concat.ConcatOperator"]], "qconcatoperator (class in neural_compressor.adaptor.ox_utils.operators.concat)": [[23, "neural_compressor.adaptor.ox_utils.operators.concat.QConcatOperator"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[23, "module-neural_compressor.adaptor.ox_utils.operators.concat"]], "convoperator (class in neural_compressor.adaptor.ox_utils.operators.conv)": [[24, "neural_compressor.adaptor.ox_utils.operators.conv.ConvOperator"]], "qconvoperator (class in neural_compressor.adaptor.ox_utils.operators.conv)": [[24, "neural_compressor.adaptor.ox_utils.operators.conv.QConvOperator"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[24, "module-neural_compressor.adaptor.ox_utils.operators.conv"]], "direct8bitoperator (class in neural_compressor.adaptor.ox_utils.operators.direct_q8)": [[25, "neural_compressor.adaptor.ox_utils.operators.direct_q8.Direct8BitOperator"]], "qdirectoperator (class in neural_compressor.adaptor.ox_utils.operators.direct_q8)": [[25, "neural_compressor.adaptor.ox_utils.operators.direct_q8.QDirectOperator"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[25, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"]], "embedlayernormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.embed_layernorm)": [[26, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.EmbedLayerNormalizationOperator"]], "qembedlayernormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.embed_layernorm)": [[26, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.QEmbedLayerNormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[26, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"]], "gatheroperator (class in neural_compressor.adaptor.ox_utils.operators.gather)": [[27, "neural_compressor.adaptor.ox_utils.operators.gather.GatherOperator"]], "qgatheroperator (class in neural_compressor.adaptor.ox_utils.operators.gather)": [[27, "neural_compressor.adaptor.ox_utils.operators.gather.QGatherOperator"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[27, "module-neural_compressor.adaptor.ox_utils.operators.gather"]], "globalaveragepooloperator (class in neural_compressor.adaptor.ox_utils.operators.gavgpool)": [[28, "neural_compressor.adaptor.ox_utils.operators.gavgpool.GlobalAveragePoolOperator"]], "qglobalaveragepooloperator (class in neural_compressor.adaptor.ox_utils.operators.gavgpool)": [[28, "neural_compressor.adaptor.ox_utils.operators.gavgpool.QGlobalAveragePoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[28, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"]], "gemmoperator (class in neural_compressor.adaptor.ox_utils.operators.gemm)": [[29, "neural_compressor.adaptor.ox_utils.operators.gemm.GemmOperator"]], "qgemmoperator (class in neural_compressor.adaptor.ox_utils.operators.gemm)": [[29, "neural_compressor.adaptor.ox_utils.operators.gemm.QGemmOperator"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[29, "module-neural_compressor.adaptor.ox_utils.operators.gemm"]], "neural_compressor.adaptor.ox_utils.operators": [[30, "module-neural_compressor.adaptor.ox_utils.operators"]], "lstmoperator (class in neural_compressor.adaptor.ox_utils.operators.lstm)": [[31, "neural_compressor.adaptor.ox_utils.operators.lstm.LSTMOperator"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[31, "module-neural_compressor.adaptor.ox_utils.operators.lstm"]], "matmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[32, "neural_compressor.adaptor.ox_utils.operators.matmul.MatMulOperator"]], "qmatmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[32, "neural_compressor.adaptor.ox_utils.operators.matmul.QMatMulOperator"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[32, "module-neural_compressor.adaptor.ox_utils.operators.matmul"]], "maxpooloperator (class in neural_compressor.adaptor.ox_utils.operators.maxpool)": [[33, "neural_compressor.adaptor.ox_utils.operators.maxpool.MaxPoolOperator"]], "qmaxpooloperator (class in neural_compressor.adaptor.ox_utils.operators.maxpool)": [[33, "neural_compressor.adaptor.ox_utils.operators.maxpool.QMaxPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[33, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"]], "operator (class in neural_compressor.adaptor.ox_utils.operators.ops)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.Operator"]], "qoperator (class in neural_compressor.adaptor.ox_utils.operators.ops)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.QOperator"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[34, "module-neural_compressor.adaptor.ox_utils.operators.ops"]], "op_registry() (in module neural_compressor.adaptor.ox_utils.operators.ops)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.op_registry"]], "qop_registry() (in module neural_compressor.adaptor.ox_utils.operators.ops)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.qop_registry"]], "padoperator (class in neural_compressor.adaptor.ox_utils.operators.pad)": [[35, "neural_compressor.adaptor.ox_utils.operators.pad.PadOperator"]], "qpadoperator (class in neural_compressor.adaptor.ox_utils.operators.pad)": [[35, "neural_compressor.adaptor.ox_utils.operators.pad.QPadOperator"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[35, "module-neural_compressor.adaptor.ox_utils.operators.pad"]], "pooloperator (class in neural_compressor.adaptor.ox_utils.operators.pooling)": [[36, "neural_compressor.adaptor.ox_utils.operators.pooling.PoolOperator"]], "qpooloperator (class in neural_compressor.adaptor.ox_utils.operators.pooling)": [[36, "neural_compressor.adaptor.ox_utils.operators.pooling.QPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[36, "module-neural_compressor.adaptor.ox_utils.operators.pooling"]], "qresizeoperator (class in neural_compressor.adaptor.ox_utils.operators.resize)": [[37, "neural_compressor.adaptor.ox_utils.operators.resize.QResizeOperator"]], "resizeoperator (class in neural_compressor.adaptor.ox_utils.operators.resize)": [[37, "neural_compressor.adaptor.ox_utils.operators.resize.ResizeOperator"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[37, "module-neural_compressor.adaptor.ox_utils.operators.resize"]], "qsplitoperator (class in neural_compressor.adaptor.ox_utils.operators.split)": [[38, "neural_compressor.adaptor.ox_utils.operators.split.QSplitOperator"]], "splitoperator (class in neural_compressor.adaptor.ox_utils.operators.split)": [[38, "neural_compressor.adaptor.ox_utils.operators.split.SplitOperator"]], "neural_compressor.adaptor.ox_utils.operators.split": [[38, "module-neural_compressor.adaptor.ox_utils.operators.split"]], "quantizer (class in neural_compressor.adaptor.ox_utils.quantizer)": [[39, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer"]], "neural_compressor.adaptor.ox_utils.quantizer": [[39, "module-neural_compressor.adaptor.ox_utils.quantizer"]], "quantformat (class in neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.QuantFormat"]], "quanttype (class in neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.QuantType"]], "quantizationmode (class in neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.QuantizationMode"]], "quantizedinitializer (class in neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.QuantizedInitializer"]], "quantizedvalue (class in neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.QuantizedValue"]], "quantizedvaluetype (class in neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.QuantizedValueType"]], "valueinfo (class in neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.ValueInfo"]], "adjust_weights_per_input() (in module neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.adjust_weights_per_input"]], "adjust_weights_per_op() (in module neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.adjust_weights_per_op"]], "attribute_to_kwarg() (in module neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.attribute_to_kwarg"]], "calculate_scale_zp() (in module neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.calculate_scale_zp"]], "cast_tensor() (in module neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.cast_tensor"]], "collate_preds() (in module neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.collate_preds"]], "dequantize_data() (in module neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.dequantize_data"]], "dequantize_data_with_scale_zero() (in module neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.dequantize_data_with_scale_zero"]], "dtype_to_name() (in module neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.dtype_to_name"]], "find_by_name() (in module neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.find_by_name"]], "float_to_bfloat16() (in module neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.float_to_bfloat16"]], "float_to_float16() (in module neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.float_to_float16"]], "get_smooth_scales_per_input() (in module neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.get_smooth_scales_per_input"]], "get_smooth_scales_per_op() (in module neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.get_smooth_scales_per_op"]], "insert_smooth_mul_op_per_input() (in module neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.insert_smooth_mul_op_per_input"]], "insert_smooth_mul_op_per_op() (in module neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.insert_smooth_mul_op_per_op"]], "is_b_transposed() (in module neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.is_B_transposed"]], "make_dquant_node() (in module neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.make_dquant_node"]], "make_quant_node() (in module neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.make_quant_node"]], "neural_compressor.adaptor.ox_utils.util": [[40, "module-neural_compressor.adaptor.ox_utils.util"]], "quantize_data() (in module neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.quantize_data"]], "quantize_data_per_channel() (in module neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.quantize_data_per_channel"]], "quantize_data_with_scale_zero() (in module neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.quantize_data_with_scale_zero"]], "quantize_nparray() (in module neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.quantize_nparray"]], "remove_init_from_model_input() (in module neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.remove_init_from_model_input"]], "split_shared_bias() (in module neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.split_shared_bias"]], "trt_env_setup() (in module neural_compressor.adaptor.ox_utils.util)": [[40, "neural_compressor.adaptor.ox_utils.util.trt_env_setup"]], "pytorchadaptor (class in neural_compressor.adaptor.pytorch)": [[41, "neural_compressor.adaptor.pytorch.PyTorchAdaptor"]], "pytorch_fxadaptor (class in neural_compressor.adaptor.pytorch)": [[41, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor"]], "pytorch_ipexadaptor (class in neural_compressor.adaptor.pytorch)": [[41, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor"]], "templateadaptor (class in neural_compressor.adaptor.pytorch)": [[41, "neural_compressor.adaptor.pytorch.TemplateAdaptor"]], "get_ops_recursively() (in module neural_compressor.adaptor.pytorch)": [[41, "neural_compressor.adaptor.pytorch.get_ops_recursively"]], "neural_compressor.adaptor.pytorch": [[41, "module-neural_compressor.adaptor.pytorch"]], "querybackendcapability (class in neural_compressor.adaptor.query)": [[42, "neural_compressor.adaptor.query.QueryBackendCapability"]], "neural_compressor.adaptor.query": [[42, "module-neural_compressor.adaptor.query"]], "tensorflowadaptor (class in neural_compressor.adaptor.tensorflow)": [[43, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor"]], "tensorflowquery (class in neural_compressor.adaptor.tensorflow)": [[43, "neural_compressor.adaptor.tensorflow.TensorflowQuery"]], "tensorflow_itexadaptor (class in neural_compressor.adaptor.tensorflow)": [[43, "neural_compressor.adaptor.tensorflow.Tensorflow_ITEXAdaptor"]], "neural_compressor.adaptor.tensorflow": [[43, "module-neural_compressor.adaptor.tensorflow"]], "graphconverter (class in neural_compressor.adaptor.tf_utils.graph_converter)": [[44, "neural_compressor.adaptor.tf_utils.graph_converter.GraphConverter"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[44, "module-neural_compressor.adaptor.tf_utils.graph_converter"]], "graphconverterwithoutcalib (class in neural_compressor.adaptor.tf_utils.graph_converter_without_calib)": [[45, "neural_compressor.adaptor.tf_utils.graph_converter_without_calib.GraphConverterWithoutCalib"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[45, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"]], "bf16convert (class in neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert)": [[46, "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert.BF16Convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[46, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[47, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"]], "convertaddtobiasaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd)": [[48, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd.ConvertAddToBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[48, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"]], "convertlayoutoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout)": [[49, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout.ConvertLayoutOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[49, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"]], "convertleakyreluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu)": [[50, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu.ConvertLeakyReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"]], "convertnantorandom (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random)": [[51, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random.ConvertNanToRandom"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"]], "convertplaceholdertoconst (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const)": [[52, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"]], "dequantizecastoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer)": [[53, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer.DequantizeCastOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"]], "dilatedcontraction (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction)": [[54, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction.DilatedContraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"]], "injectdummybiasaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd)": [[55, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd.InjectDummyBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"]], "expanddimsoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer)": [[56, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer.ExpandDimsOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"]], "fetchweightfromreshapeoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape)": [[57, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape.FetchWeightFromReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "foldbatchnormnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm)": [[58, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"]], "graphfoldconstantoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant)": [[59, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"]], "fusebiasaddandaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add)": [[60, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add.FuseBiasAddAndAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"]], "fusecolumnwisemuloptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul)": [[61, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul.FuseColumnWiseMulOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"]], "fuseconvwithmathoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math)": [[62, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math.FuseConvWithMathOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"]], "fusedecomposedbnoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[63, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.FuseDecomposedBNOptimizer"]], "bypass_reshape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[63, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.bypass_reshape"]], "get_const_dim_count() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[63, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.get_const_dim_count"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[63, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[63, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_name_from_input"]], "valid_reshape_inputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[63, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.valid_reshape_inputs"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[63, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.values_from_const"]], "fusedecomposedinoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[64, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.FuseDecomposedINOptimizer"]], "bypass_reshape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[64, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.bypass_reshape"]], "get_const_dim_count() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[64, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.get_const_dim_count"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[64, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[64, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.node_name_from_input"]], "valid_reshape_inputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[64, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.valid_reshape_inputs"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[64, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.values_from_const"]], "fusegeluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu)": [[65, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu.FuseGeluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"]], "fuselayernormoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.FuseLayerNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.node_name_from_input"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.values_from_const"]], "fusepadwithconv2doptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv.FusePadWithConv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"]], "fusepadwithfp32conv2doptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.FusePadWithFP32Conv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "fusetransposereshapeoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose)": [[69, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose.FuseTransposeReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"]], "graphcseoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer)": [[70, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer.GraphCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"]], "grappleroptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass)": [[71, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass.GrapplerOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"]], "insertprintminmaxnode (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node)": [[73, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node.InsertPrintMinMaxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"]], "movesqueezeafterreluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu)": [[74, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu.MoveSqueezeAfterReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"]], "preoptimization (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize)": [[75, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.PreOptimization"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"]], "removetrainingnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes)": [[76, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes.RemoveTrainingNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"]], "renamebatchnormoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm)": [[77, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm.RenameBatchNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"]], "splitsharedinputoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input)": [[78, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input.SplitSharedInputOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"]], "stripequivalentnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes)": [[79, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes.StripEquivalentNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"]], "stripunusednodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes)": [[80, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes.StripUnusedNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"]], "switchoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer)": [[81, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer.SwitchOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"]], "graphrewriterbase (class in neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base)": [[82, "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base.GraphRewriterBase"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"]], "freezefakequantopoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant)": [[84, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant.FreezeFakeQuantOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"]], "freezevaluetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value)": [[85, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"]], "freezevaluewithoutcalibtransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib)": [[86, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"]], "fuseconvredundantdequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize)": [[87, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.FuseConvRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "fuseconvrequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize)": [[88, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize.FuseConvRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"]], "fusematmulredundantdequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize)": [[89, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.FuseMatMulRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "fusematmulrequantizedequantizenewapitransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeNewAPITransformer"]], "fusematmulrequantizedequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeTransformer"]], "fusematmulrequantizenewapitransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeNewAPITransformer"]], "fusematmulrequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"]], "metainfochangingmemopoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer)": [[92, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer.MetaInfoChangingMemOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"]], "posthostconstconverter (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter)": [[93, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter.PostHostConstConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"]], "postcseoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse.PostCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"]], "quantizedrnnconverter (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert)": [[95, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert.QuantizedRNNConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"]], "scalepropagationtransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation.ScaleProPagationTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"]], "onnxgraph (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"]], "onnxnode (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"]], "onnxopschema (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[100, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.OnnxOpSchema"]], "get_max_supported_opset_version() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[100, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.get_max_supported_opset_version"]], "get_schema() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[100, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.get_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"]], "seqtype (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.SeqType"]], "add_port_to_name() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.add_port_to_name"]], "are_shapes_equal() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.are_shapes_equal"]], "assert_error() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.assert_error"]], "compute_const_folding_using_tf() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.compute_const_folding_using_tf"]], "convert_tensorflow_tensor_to_onnx() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.convert_tensorflow_tensor_to_onnx"]], "find_opset() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.find_opset"]], "get_index_from_strided_slice_of_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_index_from_strided_slice_of_shape"]], "get_subgraphs_from_onnx() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_subgraphs_from_onnx"]], "get_tensorflow_node_attr() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_node_attr"]], "get_tensorflow_node_shape_attr() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_node_shape_attr"]], "get_tensorflow_tensor_data() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_tensor_data"]], "get_tensorflow_tensor_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_tensor_shape"]], "infer_onnx_shape_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.infer_onnx_shape_dtype"]], "initialize_name_counter() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.initialize_name_counter"]], "is_list_or_tuple() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.is_list_or_tuple"]], "is_onnx_domain() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.is_onnx_domain"]], "make_onnx_inputs_outputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.make_onnx_inputs_outputs"]], "make_onnx_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.make_onnx_shape"]], "map_numpy_to_onnx_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_numpy_to_onnx_dtype"]], "map_onnx_to_numpy_type() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_onnx_to_numpy_type"]], "map_tensorflow_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_tensorflow_dtype"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"]], "read_tensorflow_node_attrs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.read_tensorflow_node_attrs"]], "save_protobuf() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.save_protobuf"]], "set_name() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.set_name"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"]], "generategraphwithqdqpattern (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern.GenerateGraphWithQDQPattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"]], "mergeduplicatedqdqoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq.MergeDuplicatedQDQOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "shareqdqforitexypatternoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern.ShareQDQForItexYPatternOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "graphanalyzer (class in neural_compressor.adaptor.tf_utils.graph_util)": [[106, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer"]], "graphrewriterhelper (class in neural_compressor.adaptor.tf_utils.graph_util)": [[106, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper"]], "neural_compressor.adaptor.tf_utils.graph_util": [[106, "module-neural_compressor.adaptor.tf_utils.graph_util"]], "neural_compressor.adaptor.tf_utils": [[107, "module-neural_compressor.adaptor.tf_utils"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[108, "module-neural_compressor.adaptor.tf_utils.quantize_graph"]], "fakequantize (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize)": [[109, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantize"]], "fakequantizebase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize)": [[109, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantizeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[109, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[110, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"]], "quantizeconfig (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config)": [[111, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[111, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"]], "init_quantize_config() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper)": [[112, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper.init_quantize_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[112, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"]], "qat_clone_function() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper)": [[112, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper.qat_clone_function"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"]], "config_quantizable_layers() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer)": [[114, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer.config_quantizable_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "quantizelayeradd (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add)": [[115, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add.QuantizeLayerAdd"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "quantizelayerbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base)": [[116, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base.QuantizeLayerBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "quantizelayerbatchnormalization (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn)": [[117, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn.QuantizeLayerBatchNormalization"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "quantizewrapper (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper)": [[118, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapper"]], "quantizewrapperbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper)": [[118, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn)": [[119, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2)": [[120, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv)": [[121, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"]], "fusenodestartwithdeconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv)": [[122, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"]], "fusenodestartwithfusedinstancenorm (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in)": [[123, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"]], "fusenodestartwithmatmul (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul)": [[124, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"]], "fusenodestartwithpooling (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling)": [[125, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"]], "optimizeqdqgraph (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq)": [[127, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.OptimizeQDQGraph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"]], "quantizegraphbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base)": [[128, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase"]], "quantizenodebase (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base)": [[128, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn)": [[129, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2)": [[130, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv)": [[131, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"]], "quantizegraphforintel (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu)": [[132, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu.QuantizeGraphForIntel"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"]], "fusenodestartwithmatmul (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul)": [[133, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"]], "fusenodestartwithpooling (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling)": [[134, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"]], "quantizegraphhelper (class in neural_compressor.adaptor.tf_utils.quantize_graph_common)": [[135, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[135, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"]], "tensorflowqdqtoonnxqdqconverter (class in neural_compressor.adaptor.tf_utils.tf2onnx_converter)": [[136, "neural_compressor.adaptor.tf_utils.tf2onnx_converter.TensorflowQDQToOnnxQDQConverter"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[136, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"]], "biascorrection (class in neural_compressor.adaptor.tf_utils.transform_graph.bias_correction)": [[137, "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction.BiasCorrection"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[137, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"]], "graphtransformbase (class in neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base)": [[138, "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.GraphTransformBase"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[138, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[139, "module-neural_compressor.adaptor.tf_utils.transform_graph"]], "insertlogging (class in neural_compressor.adaptor.tf_utils.transform_graph.insert_logging)": [[140, "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging.InsertLogging"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[140, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"]], "rerangequantizedconcat (class in neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat)": [[141, "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat.RerangeQuantizedConcat"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[141, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"]], "collate_tf_preds() (in module neural_compressor.adaptor.tf_utils.util)": [[142, "neural_compressor.adaptor.tf_utils.util.collate_tf_preds"]], "disable_random() (in module neural_compressor.adaptor.tf_utils.util)": [[142, "neural_compressor.adaptor.tf_utils.util.disable_random"]], "fix_ref_type_of_graph_def() (in module neural_compressor.adaptor.tf_utils.util)": [[142, "neural_compressor.adaptor.tf_utils.util.fix_ref_type_of_graph_def"]], "generate_feed_dict() (in module neural_compressor.adaptor.tf_utils.util)": [[142, "neural_compressor.adaptor.tf_utils.util.generate_feed_dict"]], "get_estimator_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[142, "neural_compressor.adaptor.tf_utils.util.get_estimator_graph"]], "get_graph_def() (in module neural_compressor.adaptor.tf_utils.util)": [[142, "neural_compressor.adaptor.tf_utils.util.get_graph_def"]], "get_input_output_node_names() (in module neural_compressor.adaptor.tf_utils.util)": [[142, "neural_compressor.adaptor.tf_utils.util.get_input_output_node_names"]], "get_model_input_shape() (in module neural_compressor.adaptor.tf_utils.util)": [[142, "neural_compressor.adaptor.tf_utils.util.get_model_input_shape"]], "get_tensor_by_name() (in module neural_compressor.adaptor.tf_utils.util)": [[142, "neural_compressor.adaptor.tf_utils.util.get_tensor_by_name"]], "get_tensor_val_from_graph_node() (in module neural_compressor.adaptor.tf_utils.util)": [[142, "neural_compressor.adaptor.tf_utils.util.get_tensor_val_from_graph_node"]], "int8_node_name_reverse() (in module neural_compressor.adaptor.tf_utils.util)": [[142, "neural_compressor.adaptor.tf_utils.util.int8_node_name_reverse"]], "is_ckpt_format() (in module neural_compressor.adaptor.tf_utils.util)": [[142, "neural_compressor.adaptor.tf_utils.util.is_ckpt_format"]], "is_saved_model_format() (in module neural_compressor.adaptor.tf_utils.util)": [[142, "neural_compressor.adaptor.tf_utils.util.is_saved_model_format"]], "iterator_sess_run() (in module neural_compressor.adaptor.tf_utils.util)": [[142, "neural_compressor.adaptor.tf_utils.util.iterator_sess_run"]], "neural_compressor.adaptor.tf_utils.util": [[142, "module-neural_compressor.adaptor.tf_utils.util"]], "read_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[142, "neural_compressor.adaptor.tf_utils.util.read_graph"]], "strip_equivalent_nodes() (in module neural_compressor.adaptor.tf_utils.util)": [[142, "neural_compressor.adaptor.tf_utils.util.strip_equivalent_nodes"]], "strip_unused_nodes() (in module neural_compressor.adaptor.tf_utils.util)": [[142, "neural_compressor.adaptor.tf_utils.util.strip_unused_nodes"]], "tf_diagnosis_helper() (in module neural_compressor.adaptor.tf_utils.util)": [[142, "neural_compressor.adaptor.tf_utils.util.tf_diagnosis_helper"]], "version1_eq_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[142, "neural_compressor.adaptor.tf_utils.util.version1_eq_version2"]], "version1_gt_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[142, "neural_compressor.adaptor.tf_utils.util.version1_gt_version2"]], "version1_gte_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[142, "neural_compressor.adaptor.tf_utils.util.version1_gte_version2"]], "version1_lt_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[142, "neural_compressor.adaptor.tf_utils.util.version1_lt_version2"]], "version1_lte_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[142, "neural_compressor.adaptor.tf_utils.util.version1_lte_version2"]], "write_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[142, "neural_compressor.adaptor.tf_utils.util.write_graph"]], "bf16modulewrapper (class in neural_compressor.adaptor.torch_utils.bf16_convert)": [[143, "neural_compressor.adaptor.torch_utils.bf16_convert.BF16ModuleWrapper"]], "convert() (in module neural_compressor.adaptor.torch_utils.bf16_convert)": [[143, "neural_compressor.adaptor.torch_utils.bf16_convert.Convert"]], "bf16_symbolic_trace() (in module neural_compressor.adaptor.torch_utils.bf16_convert)": [[143, "neural_compressor.adaptor.torch_utils.bf16_convert.bf16_symbolic_trace"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[143, "module-neural_compressor.adaptor.torch_utils.bf16_convert"]], "hessiantrace (class in neural_compressor.adaptor.torch_utils.hawq_metric)": [[144, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace"]], "node_collector (class in neural_compressor.adaptor.torch_utils.hawq_metric)": [[144, "neural_compressor.adaptor.torch_utils.hawq_metric.Node_collector"]], "compare_weights() (in module neural_compressor.adaptor.torch_utils.hawq_metric)": [[144, "neural_compressor.adaptor.torch_utils.hawq_metric.compare_weights"]], "hawq_top() (in module neural_compressor.adaptor.torch_utils.hawq_metric)": [[144, "neural_compressor.adaptor.torch_utils.hawq_metric.hawq_top"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[144, "module-neural_compressor.adaptor.torch_utils.hawq_metric"]], "neural_compressor.adaptor.torch_utils": [[145, "module-neural_compressor.adaptor.torch_utils"]], "graphtrace (class in neural_compressor.adaptor.torch_utils.smooth_quant)": [[146, "neural_compressor.adaptor.torch_utils.smooth_quant.GraphTrace"]], "torchsmoothquant (class in neural_compressor.adaptor.torch_utils.smooth_quant)": [[146, "neural_compressor.adaptor.torch_utils.smooth_quant.TorchSmoothQuant"]], "neural_compressor.adaptor.torch_utils.smooth_quant": [[146, "module-neural_compressor.adaptor.torch_utils.smooth_quant"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[147, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"]], "symbolic_trace() (in module neural_compressor.adaptor.torch_utils.symbolic_trace)": [[147, "neural_compressor.adaptor.torch_utils.symbolic_trace.symbolic_trace"]], "trace_and_fuse_sub_graph() (in module neural_compressor.adaptor.torch_utils.symbolic_trace)": [[147, "neural_compressor.adaptor.torch_utils.symbolic_trace.trace_and_fuse_sub_graph"]], "append_attr() (in module neural_compressor.adaptor.torch_utils.util)": [[148, "neural_compressor.adaptor.torch_utils.util.append_attr"]], "auto_copy() (in module neural_compressor.adaptor.torch_utils.util)": [[148, "neural_compressor.adaptor.torch_utils.util.auto_copy"]], "check_cfg_and_qconfig() (in module neural_compressor.adaptor.torch_utils.util)": [[148, "neural_compressor.adaptor.torch_utils.util.check_cfg_and_qconfig"]], "collate_torch_preds() (in module neural_compressor.adaptor.torch_utils.util)": [[148, "neural_compressor.adaptor.torch_utils.util.collate_torch_preds"]], "fetch_module() (in module neural_compressor.adaptor.torch_utils.util)": [[148, "neural_compressor.adaptor.torch_utils.util.fetch_module"]], "generate_activation_observer() (in module neural_compressor.adaptor.torch_utils.util)": [[148, "neural_compressor.adaptor.torch_utils.util.generate_activation_observer"]], "get_embedding_contiguous() (in module neural_compressor.adaptor.torch_utils.util)": [[148, "neural_compressor.adaptor.torch_utils.util.get_embedding_contiguous"]], "get_example_input() (in module neural_compressor.adaptor.torch_utils.util)": [[148, "neural_compressor.adaptor.torch_utils.util.get_example_input"]], "get_fallback_order() (in module neural_compressor.adaptor.torch_utils.util)": [[148, "neural_compressor.adaptor.torch_utils.util.get_fallback_order"]], "get_mse_order_per_fp32() (in module neural_compressor.adaptor.torch_utils.util)": [[148, "neural_compressor.adaptor.torch_utils.util.get_mse_order_per_fp32"]], "get_mse_order_per_int8() (in module neural_compressor.adaptor.torch_utils.util)": [[148, "neural_compressor.adaptor.torch_utils.util.get_mse_order_per_int8"]], "get_quantizable_ops_from_cfgs() (in module neural_compressor.adaptor.torch_utils.util)": [[148, "neural_compressor.adaptor.torch_utils.util.get_quantizable_ops_from_cfgs"]], "get_torch_version() (in module neural_compressor.adaptor.torch_utils.util)": [[148, "neural_compressor.adaptor.torch_utils.util.get_torch_version"]], "input2tuple() (in module neural_compressor.adaptor.torch_utils.util)": [[148, "neural_compressor.adaptor.torch_utils.util.input2tuple"]], "is_fused_module() (in module neural_compressor.adaptor.torch_utils.util)": [[148, "neural_compressor.adaptor.torch_utils.util.is_fused_module"]], "neural_compressor.adaptor.torch_utils.util": [[148, "module-neural_compressor.adaptor.torch_utils.util"]], "paser_cfgs() (in module neural_compressor.adaptor.torch_utils.util)": [[148, "neural_compressor.adaptor.torch_utils.util.paser_cfgs"]], "set_module() (in module neural_compressor.adaptor.torch_utils.util)": [[148, "neural_compressor.adaptor.torch_utils.util.set_module"]], "simple_inference() (in module neural_compressor.adaptor.torch_utils.util)": [[148, "neural_compressor.adaptor.torch_utils.util.simple_inference"]], "algorithms (class in neural_compressor.algorithm.algorithm)": [[149, "neural_compressor.algorithm.algorithm.ALGORITHMS"]], "algorithm (class in neural_compressor.algorithm.algorithm)": [[149, "neural_compressor.algorithm.algorithm.Algorithm"]], "algorithmscheduler (class in neural_compressor.algorithm.algorithm)": [[149, "neural_compressor.algorithm.algorithm.AlgorithmScheduler"]], "algorithm_registry() (in module neural_compressor.algorithm.algorithm)": [[149, "neural_compressor.algorithm.algorithm.algorithm_registry"]], "neural_compressor.algorithm.algorithm": [[149, "module-neural_compressor.algorithm.algorithm"]], "fastbiascorrection (class in neural_compressor.algorithm.fast_bias_correction)": [[150, "neural_compressor.algorithm.fast_bias_correction.FastBiasCorrection"]], "neural_compressor.algorithm.fast_bias_correction": [[150, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm": [[151, "module-neural_compressor.algorithm"]], "smoothquant (class in neural_compressor.algorithm.smooth_quant)": [[152, "neural_compressor.algorithm.smooth_quant.SmoothQuant"]], "neural_compressor.algorithm.smooth_quant": [[152, "module-neural_compressor.algorithm.smooth_quant"]], "weightcorrection (class in neural_compressor.algorithm.weight_correction)": [[153, "neural_compressor.algorithm.weight_correction.WeightCorrection"]], "neural_compressor.algorithm.weight_correction": [[153, "module-neural_compressor.algorithm.weight_correction"]], "benchmark (class in neural_compressor.benchmark)": [[154, "neural_compressor.benchmark.Benchmark"]], "fit() (in module neural_compressor.benchmark)": [[154, "neural_compressor.benchmark.fit"]], "get_architecture() (in module neural_compressor.benchmark)": [[154, "neural_compressor.benchmark.get_architecture"]], "get_bounded_threads() (in module neural_compressor.benchmark)": [[154, "neural_compressor.benchmark.get_bounded_threads"]], "get_core_ids() (in module neural_compressor.benchmark)": [[154, "neural_compressor.benchmark.get_core_ids"]], "get_physical_ids() (in module neural_compressor.benchmark)": [[154, "neural_compressor.benchmark.get_physical_ids"]], "get_threads() (in module neural_compressor.benchmark)": [[154, "neural_compressor.benchmark.get_threads"]], "get_threads_per_core() (in module neural_compressor.benchmark)": [[154, "neural_compressor.benchmark.get_threads_per_core"]], "neural_compressor.benchmark": [[154, "module-neural_compressor.benchmark"]], "set_all_env_var() (in module neural_compressor.benchmark)": [[154, "neural_compressor.benchmark.set_all_env_var"]], "set_env_var() (in module neural_compressor.benchmark)": [[154, "neural_compressor.benchmark.set_env_var"]], "basecallbacks (class in neural_compressor.compression.callbacks)": [[155, "neural_compressor.compression.callbacks.BaseCallbacks"]], "distillationcallbacks (class in neural_compressor.compression.callbacks)": [[155, "neural_compressor.compression.callbacks.DistillationCallbacks"]], "pruningcallbacks (class in neural_compressor.compression.callbacks)": [[155, "neural_compressor.compression.callbacks.PruningCallbacks"]], "quantizationawaretrainingcallbacks (class in neural_compressor.compression.callbacks)": [[155, "neural_compressor.compression.callbacks.QuantizationAwareTrainingCallbacks"]], "_epoch_ran (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[155, "neural_compressor.compression.callbacks.DistillationCallbacks._epoch_ran"]], "best_model (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[155, "neural_compressor.compression.callbacks.DistillationCallbacks.best_model"]], "best_score (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[155, "neural_compressor.compression.callbacks.DistillationCallbacks.best_score"]], "eval_frequency (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[155, "neural_compressor.compression.callbacks.DistillationCallbacks.eval_frequency"]], "neural_compressor.compression.callbacks": [[155, "module-neural_compressor.compression.callbacks"]], "criterions (class in neural_compressor.compression.distillation.criterions)": [[156, "neural_compressor.compression.distillation.criterions.Criterions"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[156, "neural_compressor.compression.distillation.criterions.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationframework (class in neural_compressor.compression.distillation.criterions)": [[156, "neural_compressor.compression.distillation.criterions.KnowledgeDistillationFramework"]], "knowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[156, "neural_compressor.compression.distillation.criterions.KnowledgeDistillationLoss"]], "pytorchcriterions (class in neural_compressor.compression.distillation.criterions)": [[156, "neural_compressor.compression.distillation.criterions.PyTorchCriterions"]], "pytorchintermediatelayersknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[156, "neural_compressor.compression.distillation.criterions.PyTorchIntermediateLayersKnowledgeDistillationLoss"]], "pytorchintermediatelayersknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[156, "neural_compressor.compression.distillation.criterions.PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"]], "pytorchknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[156, "neural_compressor.compression.distillation.criterions.PyTorchKnowledgeDistillationLoss"]], "pytorchknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[156, "neural_compressor.compression.distillation.criterions.PyTorchKnowledgeDistillationLossWrapper"]], "pytorchselfknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[156, "neural_compressor.compression.distillation.criterions.PyTorchSelfKnowledgeDistillationLoss"]], "pytorchselfknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[156, "neural_compressor.compression.distillation.criterions.PyTorchSelfKnowledgeDistillationLossWrapper"]], "selfknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[156, "neural_compressor.compression.distillation.criterions.SelfKnowledgeDistillationLoss"]], "tensorflowcriterions (class in neural_compressor.compression.distillation.criterions)": [[156, "neural_compressor.compression.distillation.criterions.TensorflowCriterions"]], "tensorflowknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[156, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLoss"]], "tensorflowknowledgedistillationlossexternal (class in neural_compressor.compression.distillation.criterions)": [[156, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLossExternal"]], "tensorflowknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[156, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLossWrapper"]], "criterion_registry() (in module neural_compressor.compression.distillation.criterions)": [[156, "neural_compressor.compression.distillation.criterions.criterion_registry"]], "neural_compressor.compression.distillation.criterions": [[156, "module-neural_compressor.compression.distillation.criterions"]], "neural_compressor.compression.distillation": [[157, "module-neural_compressor.compression.distillation"]], "neural_compressor.compression": [[158, "module-neural_compressor.compression"]], "gradientcriterion (class in neural_compressor.compression.pruner.criteria)": [[159, "neural_compressor.compression.pruner.criteria.GradientCriterion"]], "magnitudecriterion (class in neural_compressor.compression.pruner.criteria)": [[159, "neural_compressor.compression.pruner.criteria.MagnitudeCriterion"]], "pruningcriterion (class in neural_compressor.compression.pruner.criteria)": [[159, "neural_compressor.compression.pruner.criteria.PruningCriterion"]], "snipcriterion (class in neural_compressor.compression.pruner.criteria)": [[159, "neural_compressor.compression.pruner.criteria.SnipCriterion"]], "snipmomentumcriterion (class in neural_compressor.compression.pruner.criteria)": [[159, "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion"]], "get_criterion() (in module neural_compressor.compression.pruner.criteria)": [[159, "neural_compressor.compression.pruner.criteria.get_criterion"]], "neural_compressor.compression.pruner.criteria": [[159, "module-neural_compressor.compression.pruner.criteria"]], "register_criterion() (in module neural_compressor.compression.pruner.criteria)": [[159, "neural_compressor.compression.pruner.criteria.register_criterion"]], "scores (neural_compressor.compression.pruner.criteria.gradientcriterion attribute)": [[159, "neural_compressor.compression.pruner.criteria.GradientCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.magnitudecriterion attribute)": [[159, "neural_compressor.compression.pruner.criteria.MagnitudeCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.pruningcriterion attribute)": [[159, "neural_compressor.compression.pruner.criteria.PruningCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.snipcriterion attribute)": [[159, "neural_compressor.compression.pruner.criteria.SnipCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.snipmomentumcriterion attribute)": [[159, "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion.scores"]], "neural_compressor.compression.pruner": [[160, "module-neural_compressor.compression.pruner"]], "basepattern (class in neural_compressor.compression.pruner.patterns)": [[161, "neural_compressor.compression.pruner.patterns.BasePattern"]], "m (neural_compressor.compression.pruner.patterns.patternninm attribute)": [[161, "neural_compressor.compression.pruner.patterns.PatternNInM.M"]], "n (neural_compressor.compression.pruner.patterns.patternninm attribute)": [[161, "neural_compressor.compression.pruner.patterns.PatternNInM.N"]], "patternninm (class in neural_compressor.compression.pruner.patterns)": [[161, "neural_compressor.compression.pruner.patterns.PatternNInM"]], "patternnxm (class in neural_compressor.compression.pruner.patterns)": [[161, "neural_compressor.compression.pruner.patterns.PatternNxM"]], "block_size (neural_compressor.compression.pruner.patterns.patternnxm attribute)": [[161, "neural_compressor.compression.pruner.patterns.PatternNxM.block_size"]], "config (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[161, "neural_compressor.compression.pruner.patterns.BasePattern.config"]], "get_pattern() (in module neural_compressor.compression.pruner.patterns)": [[161, "neural_compressor.compression.pruner.patterns.get_pattern"]], "invalid_layers (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[161, "neural_compressor.compression.pruner.patterns.BasePattern.invalid_layers"]], "is_global (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[161, "neural_compressor.compression.pruner.patterns.BasePattern.is_global"]], "keep_mask_layers (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[161, "neural_compressor.compression.pruner.patterns.BasePattern.keep_mask_layers"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[161, "neural_compressor.compression.pruner.patterns.BasePattern.max_sparsity_ratio_per_op"]], "min_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[161, "neural_compressor.compression.pruner.patterns.BasePattern.min_sparsity_ratio_per_op"]], "modules (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[161, "neural_compressor.compression.pruner.patterns.BasePattern.modules"]], "neural_compressor.compression.pruner.patterns": [[161, "module-neural_compressor.compression.pruner.patterns"]], "pattern (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[161, "neural_compressor.compression.pruner.patterns.BasePattern.pattern"]], "register_pattern() (in module neural_compressor.compression.pruner.patterns)": [[161, "neural_compressor.compression.pruner.patterns.register_pattern"]], "target_sparsity (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[161, "neural_compressor.compression.pruner.patterns.BasePattern.target_sparsity"]], "basepruner (class in neural_compressor.compression.pruner.pruners)": [[162, "neural_compressor.compression.pruner.pruners.BasePruner"]], "basicpruner (class in neural_compressor.compression.pruner.pruners)": [[162, "neural_compressor.compression.pruner.pruners.BasicPruner"]], "patternlockpruner (class in neural_compressor.compression.pruner.pruners)": [[162, "neural_compressor.compression.pruner.pruners.PatternLockPruner"]], "progressivepruner (class in neural_compressor.compression.pruner.pruners)": [[162, "neural_compressor.compression.pruner.pruners.ProgressivePruner"]], "config (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[162, "neural_compressor.compression.pruner.pruners.BasePruner.config"]], "criterion (neural_compressor.compression.pruner.pruners.basicpruner attribute)": [[162, "neural_compressor.compression.pruner.pruners.BasicPruner.criterion"]], "current_sparsity_ratio (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[162, "neural_compressor.compression.pruner.pruners.BasePruner.current_sparsity_ratio"]], "end_step (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[162, "neural_compressor.compression.pruner.pruners.BasePruner.end_step"]], "get_pruner() (in module neural_compressor.compression.pruner.pruners)": [[162, "neural_compressor.compression.pruner.pruners.get_pruner"]], "global_step (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[162, "neural_compressor.compression.pruner.pruners.BasePruner.global_step"]], "masks (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[162, "neural_compressor.compression.pruner.pruners.BasePruner.masks"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[162, "neural_compressor.compression.pruner.pruners.BasePruner.max_sparsity_ratio_per_op"]], "modules (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[162, "neural_compressor.compression.pruner.pruners.BasePruner.modules"]], "neural_compressor.compression.pruner.pruners": [[162, "module-neural_compressor.compression.pruner.pruners"]], "parse_valid_pruner_types() (in module neural_compressor.compression.pruner.pruners)": [[162, "neural_compressor.compression.pruner.pruners.parse_valid_pruner_types"]], "pattern (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[162, "neural_compressor.compression.pruner.pruners.BasePruner.pattern"]], "pattern (neural_compressor.compression.pruner.pruners.basicpruner attribute)": [[162, "neural_compressor.compression.pruner.pruners.BasicPruner.pattern"]], "pruning_frequency (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[162, "neural_compressor.compression.pruner.pruners.BasePruner.pruning_frequency"]], "reg (neural_compressor.compression.pruner.pruners.basicpruner attribute)": [[162, "neural_compressor.compression.pruner.pruners.BasicPruner.reg"]], "register_pruner() (in module neural_compressor.compression.pruner.pruners)": [[162, "neural_compressor.compression.pruner.pruners.register_pruner"]], "scheduler (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[162, "neural_compressor.compression.pruner.pruners.BasePruner.scheduler"]], "scheduler (neural_compressor.compression.pruner.pruners.basicpruner attribute)": [[162, "neural_compressor.compression.pruner.pruners.BasicPruner.scheduler"]], "scores (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[162, "neural_compressor.compression.pruner.pruners.BasePruner.scores"]], "start_step (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[162, "neural_compressor.compression.pruner.pruners.BasePruner.start_step"]], "target_sparsity_ratio (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[162, "neural_compressor.compression.pruner.pruners.BasePruner.target_sparsity_ratio"]], "basereg (class in neural_compressor.compression.pruner.regs)": [[163, "neural_compressor.compression.pruner.regs.BaseReg"]], "grouplasso (class in neural_compressor.compression.pruner.regs)": [[163, "neural_compressor.compression.pruner.regs.GroupLasso"]], "alpha (neural_compressor.compression.pruner.regs.grouplasso attribute)": [[163, "neural_compressor.compression.pruner.regs.GroupLasso.alpha"]], "get_reg() (in module neural_compressor.compression.pruner.regs)": [[163, "neural_compressor.compression.pruner.regs.get_reg"]], "get_reg_type() (in module neural_compressor.compression.pruner.regs)": [[163, "neural_compressor.compression.pruner.regs.get_reg_type"]], "neural_compressor.compression.pruner.regs": [[163, "module-neural_compressor.compression.pruner.regs"]], "reg_terms (neural_compressor.compression.pruner.regs.grouplasso attribute)": [[163, "neural_compressor.compression.pruner.regs.GroupLasso.reg_terms"]], "register_reg() (in module neural_compressor.compression.pruner.regs)": [[163, "neural_compressor.compression.pruner.regs.register_reg"]], "iterativescheduler (class in neural_compressor.compression.pruner.schedulers)": [[164, "neural_compressor.compression.pruner.schedulers.IterativeScheduler"]], "oneshotscheduler (class in neural_compressor.compression.pruner.schedulers)": [[164, "neural_compressor.compression.pruner.schedulers.OneshotScheduler"]], "pruningscheduler (class in neural_compressor.compression.pruner.schedulers)": [[164, "neural_compressor.compression.pruner.schedulers.PruningScheduler"]], "config (neural_compressor.compression.pruner.schedulers.pruningscheduler attribute)": [[164, "neural_compressor.compression.pruner.schedulers.PruningScheduler.config"]], "get_scheduler() (in module neural_compressor.compression.pruner.schedulers)": [[164, "neural_compressor.compression.pruner.schedulers.get_scheduler"]], "neural_compressor.compression.pruner.schedulers": [[164, "module-neural_compressor.compression.pruner.schedulers"]], "register_scheduler() (in module neural_compressor.compression.pruner.schedulers)": [[164, "neural_compressor.compression.pruner.schedulers.register_scheduler"]], "check_config() (in module neural_compressor.compression.pruner.utils)": [[165, "neural_compressor.compression.pruner.utils.check_config"]], "check_key_validity() (in module neural_compressor.compression.pruner.utils)": [[165, "neural_compressor.compression.pruner.utils.check_key_validity"]], "generate_pruner_config() (in module neural_compressor.compression.pruner.utils)": [[165, "neural_compressor.compression.pruner.utils.generate_pruner_config"]], "get_sparsity_ratio() (in module neural_compressor.compression.pruner.utils)": [[165, "neural_compressor.compression.pruner.utils.get_sparsity_ratio"]], "neural_compressor.compression.pruner.utils": [[165, "module-neural_compressor.compression.pruner.utils"]], "parse_to_prune() (in module neural_compressor.compression.pruner.utils)": [[165, "neural_compressor.compression.pruner.utils.parse_to_prune"]], "process_and_check_config() (in module neural_compressor.compression.pruner.utils)": [[165, "neural_compressor.compression.pruner.utils.process_and_check_config"]], "process_config() (in module neural_compressor.compression.pruner.utils)": [[165, "neural_compressor.compression.pruner.utils.process_config"]], "process_weight_config() (in module neural_compressor.compression.pruner.utils)": [[165, "neural_compressor.compression.pruner.utils.process_weight_config"]], "process_yaml_config() (in module neural_compressor.compression.pruner.utils)": [[165, "neural_compressor.compression.pruner.utils.process_yaml_config"]], "reset_none_to_default() (in module neural_compressor.compression.pruner.utils)": [[165, "neural_compressor.compression.pruner.utils.reset_none_to_default"]], "update_params() (in module neural_compressor.compression.pruner.utils)": [[165, "neural_compressor.compression.pruner.utils.update_params"]], "benchmark_conf (class in neural_compressor.conf.config)": [[166, "neural_compressor.conf.config.Benchmark_Conf"]], "conf (class in neural_compressor.conf.config)": [[166, "neural_compressor.conf.config.Conf"]], "distillation_conf (class in neural_compressor.conf.config)": [[166, "neural_compressor.conf.config.Distillation_Conf"]], "graph_optimization_conf (class in neural_compressor.conf.config)": [[166, "neural_compressor.conf.config.Graph_Optimization_Conf"]], "mixedprecision_conf (class in neural_compressor.conf.config)": [[166, "neural_compressor.conf.config.MixedPrecision_Conf"]], "nasconfig (class in neural_compressor.conf.config)": [[166, "neural_compressor.conf.config.NASConfig"]], "prunerv2 (class in neural_compressor.conf.config)": [[166, "neural_compressor.conf.config.PrunerV2"]], "pruning_conf (class in neural_compressor.conf.config)": [[166, "neural_compressor.conf.config.Pruning_Conf"]], "quantization_conf (class in neural_compressor.conf.config)": [[166, "neural_compressor.conf.config.Quantization_Conf"]], "neural_compressor.conf.config": [[166, "module-neural_compressor.conf.config"]], "dotdict (class in neural_compressor.conf.dotdict)": [[167, "neural_compressor.conf.dotdict.DotDict"]], "deep_get() (in module neural_compressor.conf.dotdict)": [[167, "neural_compressor.conf.dotdict.deep_get"]], "deep_set() (in module neural_compressor.conf.dotdict)": [[167, "neural_compressor.conf.dotdict.deep_set"]], "neural_compressor.conf.dotdict": [[167, "module-neural_compressor.conf.dotdict"]], "neural_compressor.conf": [[168, "module-neural_compressor.conf"]], "neural_compressor.conf.pythonic_config": [[169, "module-neural_compressor.conf.pythonic_config"]], "accuracycriterion (class in neural_compressor.config)": [[170, "neural_compressor.config.AccuracyCriterion"]], "benchmarkconfig (class in neural_compressor.config)": [[170, "neural_compressor.config.BenchmarkConfig"]], "distillationconfig (class in neural_compressor.config)": [[170, "neural_compressor.config.DistillationConfig"]], "exportconfig (class in neural_compressor.config)": [[170, "neural_compressor.config.ExportConfig"]], "intermediatelayersknowledgedistillationlossconfig (class in neural_compressor.config)": [[170, "neural_compressor.config.IntermediateLayersKnowledgeDistillationLossConfig"]], "knowledgedistillationlossconfig (class in neural_compressor.config)": [[170, "neural_compressor.config.KnowledgeDistillationLossConfig"]], "mixedprecisionconfig (class in neural_compressor.config)": [[170, "neural_compressor.config.MixedPrecisionConfig"]], "onnxqlinear2qdqconfig (class in neural_compressor.config)": [[170, "neural_compressor.config.ONNXQlinear2QDQConfig"]], "options (class in neural_compressor.config)": [[170, "neural_compressor.config.Options"]], "posttrainingquantconfig (class in neural_compressor.config)": [[170, "neural_compressor.config.PostTrainingQuantConfig"]], "quantizationawaretrainingconfig (class in neural_compressor.config)": [[170, "neural_compressor.config.QuantizationAwareTrainingConfig"]], "selfknowledgedistillationlossconfig (class in neural_compressor.config)": [[170, "neural_compressor.config.SelfKnowledgeDistillationLossConfig"]], "tf2onnxconfig (class in neural_compressor.config)": [[170, "neural_compressor.config.TF2ONNXConfig"]], "torch2onnxconfig (class in neural_compressor.config)": [[170, "neural_compressor.config.Torch2ONNXConfig"]], "tuningcriterion (class in neural_compressor.config)": [[170, "neural_compressor.config.TuningCriterion"]], "weightpruningconfig (class in neural_compressor.config)": [[170, "neural_compressor.config.WeightPruningConfig"]], "check_value() (in module neural_compressor.config)": [[170, "neural_compressor.config.check_value"]], "neural_compressor.config": [[170, "module-neural_compressor.config"]], "neural_compressor.contrib": [[171, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[172, "module-neural_compressor.contrib.strategy"]], "sigopttunestrategy (class in neural_compressor.contrib.strategy.sigopt)": [[173, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.sigopt": [[173, "module-neural_compressor.contrib.strategy.sigopt"]], "tpetunestrategy (class in neural_compressor.contrib.strategy.tpe)": [[174, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy"]], "neural_compressor.contrib.strategy.tpe": [[174, "module-neural_compressor.contrib.strategy.tpe"]], "basedataloader (class in neural_compressor.data.dataloaders.base_dataloader)": [[175, "neural_compressor.data.dataloaders.base_dataloader.BaseDataLoader"]], "neural_compressor.data.dataloaders.base_dataloader": [[175, "module-neural_compressor.data.dataloaders.base_dataloader"]], "dataloader (class in neural_compressor.data.dataloaders.dataloader)": [[176, "neural_compressor.data.dataloaders.dataloader.DataLoader"]], "neural_compressor.data.dataloaders.dataloader": [[176, "module-neural_compressor.data.dataloaders.dataloader"]], "defaultdataloader (class in neural_compressor.data.dataloaders.default_dataloader)": [[177, "neural_compressor.data.dataloaders.default_dataloader.DefaultDataLoader"]], "default_collate() (in module neural_compressor.data.dataloaders.default_dataloader)": [[177, "neural_compressor.data.dataloaders.default_dataloader.default_collate"]], "neural_compressor.data.dataloaders.default_dataloader": [[177, "module-neural_compressor.data.dataloaders.default_dataloader"]], "fetcher (class in neural_compressor.data.dataloaders.fetcher)": [[178, "neural_compressor.data.dataloaders.fetcher.Fetcher"]], "indexfetcher (class in neural_compressor.data.dataloaders.fetcher)": [[178, "neural_compressor.data.dataloaders.fetcher.IndexFetcher"]], "iterablefetcher (class in neural_compressor.data.dataloaders.fetcher)": [[178, "neural_compressor.data.dataloaders.fetcher.IterableFetcher"]], "neural_compressor.data.dataloaders.fetcher": [[178, "module-neural_compressor.data.dataloaders.fetcher"]], "neural_compressor.data.dataloaders": [[179, "module-neural_compressor.data.dataloaders"]], "mxnetdataloader (class in neural_compressor.data.dataloaders.mxnet_dataloader)": [[180, "neural_compressor.data.dataloaders.mxnet_dataloader.MXNetDataLoader"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[180, "module-neural_compressor.data.dataloaders.mxnet_dataloader"]], "onnxrtbertdataloader (class in neural_compressor.data.dataloaders.onnxrt_dataloader)": [[181, "neural_compressor.data.dataloaders.onnxrt_dataloader.ONNXRTBertDataLoader"]], "onnxrtdataloader (class in neural_compressor.data.dataloaders.onnxrt_dataloader)": [[181, "neural_compressor.data.dataloaders.onnxrt_dataloader.ONNXRTDataLoader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[181, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"]], "pytorchdataloader (class in neural_compressor.data.dataloaders.pytorch_dataloader)": [[182, "neural_compressor.data.dataloaders.pytorch_dataloader.PyTorchDataLoader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[182, "module-neural_compressor.data.dataloaders.pytorch_dataloader"]], "batchsampler (class in neural_compressor.data.dataloaders.sampler)": [[183, "neural_compressor.data.dataloaders.sampler.BatchSampler"]], "iterablesampler (class in neural_compressor.data.dataloaders.sampler)": [[183, "neural_compressor.data.dataloaders.sampler.IterableSampler"]], "sampler (class in neural_compressor.data.dataloaders.sampler)": [[183, "neural_compressor.data.dataloaders.sampler.Sampler"]], "sequentialsampler (class in neural_compressor.data.dataloaders.sampler)": [[183, "neural_compressor.data.dataloaders.sampler.SequentialSampler"]], "neural_compressor.data.dataloaders.sampler": [[183, "module-neural_compressor.data.dataloaders.sampler"]], "tfdatadataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[184, "neural_compressor.data.dataloaders.tensorflow_dataloader.TFDataDataLoader"]], "tensorflowbertdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[184, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowBertDataLoader"]], "tensorflowdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[184, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowDataLoader"]], "tensorflowmodelzoobertdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[184, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowModelZooBertDataLoader"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[184, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"]], "inputfeatures (class in neural_compressor.data.datasets.bert_dataset)": [[185, "neural_compressor.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[185, "neural_compressor.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.data.datasets.bert_dataset)": [[185, "neural_compressor.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[185, "neural_compressor.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[185, "neural_compressor.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[185, "neural_compressor.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.data.datasets.bert_dataset)": [[185, "neural_compressor.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.data.datasets.bert_dataset)": [[185, "neural_compressor.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.data.datasets.bert_dataset": [[185, "module-neural_compressor.data.datasets.bert_dataset"]], "coconpy (class in neural_compressor.data.datasets.coco_dataset)": [[186, "neural_compressor.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.data.datasets.coco_dataset)": [[186, "neural_compressor.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.data.datasets.coco_dataset)": [[186, "neural_compressor.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.data.datasets.coco_dataset)": [[186, "neural_compressor.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.data.datasets.coco_dataset": [[186, "module-neural_compressor.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.data.datasets.dataset)": [[187, "neural_compressor.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.data.datasets.dataset)": [[187, "neural_compressor.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.data.datasets.dataset)": [[187, "neural_compressor.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.data.datasets.dataset)": [[187, "neural_compressor.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.data.datasets.dataset)": [[187, "neural_compressor.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.data.datasets.dataset)": [[187, "neural_compressor.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.data.datasets.dataset)": [[187, "neural_compressor.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.data.datasets.dataset)": [[187, "neural_compressor.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.data.datasets.dataset)": [[187, "neural_compressor.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.data.datasets.dataset)": [[187, "neural_compressor.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.data.datasets.dataset)": [[187, "neural_compressor.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.data.datasets.dataset)": [[187, "neural_compressor.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.data.datasets.dataset)": [[187, "neural_compressor.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.data.datasets.dataset)": [[187, "neural_compressor.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.data.datasets.dataset)": [[187, "neural_compressor.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.data.datasets.dataset)": [[187, "neural_compressor.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.data.datasets.dataset)": [[187, "neural_compressor.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.data.datasets.dataset)": [[187, "neural_compressor.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.data.datasets.dataset)": [[187, "neural_compressor.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.data.datasets.dataset)": [[187, "neural_compressor.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.data.datasets.dataset)": [[187, "neural_compressor.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.data.datasets.dataset)": [[187, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.datasets.dataset)": [[187, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflow (class in neural_compressor.data.datasets.dataset)": [[187, "neural_compressor.data.datasets.dataset.Tensorflow"]], "tensorflowcifar10 (class in neural_compressor.data.datasets.dataset)": [[187, "neural_compressor.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.data.datasets.dataset)": [[187, "neural_compressor.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.data.datasets.dataset)": [[187, "neural_compressor.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.data.datasets.dataset)": [[187, "neural_compressor.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagerecord (class in neural_compressor.data.datasets.dataset)": [[187, "neural_compressor.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.data.datasets.dataset)": [[187, "neural_compressor.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.data.datasets.dataset)": [[187, "neural_compressor.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.data.datasets.dataset)": [[187, "neural_compressor.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.data.datasets.dataset)": [[187, "neural_compressor.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.data.datasets.dataset)": [[187, "neural_compressor.data.datasets.dataset.check_integrity"]], "dataset_registry() (in module neural_compressor.data.datasets.dataset)": [[187, "neural_compressor.data.datasets.dataset.dataset_registry"]], "download_url() (in module neural_compressor.data.datasets.dataset)": [[187, "neural_compressor.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.data.datasets.dataset)": [[187, "neural_compressor.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.data.datasets.dataset)": [[187, "neural_compressor.data.datasets.dataset.gen_bar_updater"]], "neural_compressor.data.datasets.dataset": [[187, "module-neural_compressor.data.datasets.dataset"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset)": [[188, "neural_compressor.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset": [[188, "module-neural_compressor.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[189, "neural_compressor.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[189, "neural_compressor.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[189, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[190, "neural_compressor.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[190, "neural_compressor.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[190, "neural_compressor.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[190, "neural_compressor.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[190, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[190, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.data.datasets.imagenet_dataset": [[190, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[191, "module-neural_compressor.data.datasets"]], "styletransferdataset (class in neural_compressor.data.datasets.style_transfer_dataset)": [[192, "neural_compressor.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.data.datasets.style_transfer_dataset": [[192, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.data.filters.coco_filter)": [[193, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.data.filters.coco_filter)": [[193, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.coco_filter": [[193, "module-neural_compressor.data.filters.coco_filter"]], "filters (class in neural_compressor.data.filters.filter)": [[194, "neural_compressor.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.data.filters.filter)": [[194, "neural_compressor.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.data.filters.filter)": [[194, "neural_compressor.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.data.filters.filter)": [[194, "neural_compressor.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.data.filters.filter)": [[194, "neural_compressor.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.data.filters.filter)": [[194, "neural_compressor.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.data.filters.filter)": [[194, "neural_compressor.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.data.filters.filter)": [[194, "neural_compressor.data.filters.filter.filter_registry"]], "neural_compressor.data.filters.filter": [[194, "module-neural_compressor.data.filters.filter"]], "neural_compressor.data.filters": [[195, "module-neural_compressor.data.filters"]], "neural_compressor.data": [[196, "module-neural_compressor.data"]], "parsedecodecocotransform (class in neural_compressor.data.transforms.coco_transform)": [[197, "neural_compressor.data.transforms.coco_transform.ParseDecodeCocoTransform"]], "neural_compressor.data.transforms.coco_transform": [[197, "module-neural_compressor.data.transforms.coco_transform"]], "bilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[198, "neural_compressor.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.data.transforms.imagenet_transform)": [[198, "neural_compressor.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[198, "neural_compressor.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[198, "neural_compressor.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.data.transforms.imagenet_transform)": [[198, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[198, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.data.transforms.imagenet_transform)": [[198, "neural_compressor.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.data.transforms.imagenet_transform)": [[198, "neural_compressor.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[198, "neural_compressor.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "neural_compressor.data.transforms.imagenet_transform": [[198, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[199, "module-neural_compressor.data.transforms"]], "postprocess (class in neural_compressor.data.transforms.postprocess)": [[200, "neural_compressor.data.transforms.postprocess.Postprocess"]], "neural_compressor.data.transforms.postprocess": [[200, "module-neural_compressor.data.transforms.postprocess"]], "basictokenizer (class in neural_compressor.data.transforms.tokenization)": [[201, "neural_compressor.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.data.transforms.tokenization)": [[201, "neural_compressor.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.data.transforms.tokenization)": [[201, "neural_compressor.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.data.transforms.tokenization)": [[201, "neural_compressor.data.transforms.tokenization.convert_by_vocab"]], "convert_to_unicode() (in module neural_compressor.data.transforms.tokenization)": [[201, "neural_compressor.data.transforms.tokenization.convert_to_unicode"]], "load_vocab() (in module neural_compressor.data.transforms.tokenization)": [[201, "neural_compressor.data.transforms.tokenization.load_vocab"]], "neural_compressor.data.transforms.tokenization": [[201, "module-neural_compressor.data.transforms.tokenization"]], "whitespace_tokenize() (in module neural_compressor.data.transforms.tokenization)": [[201, "neural_compressor.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.TRANSFORMS"], [202, "neural_compressor.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.get_final_text"]], "get_torchvision_map() (in module neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.get_torchvision_map"]], "neural_compressor.data.transforms.transform": [[202, "module-neural_compressor.data.transforms.transform"]], "read_squad_examples() (in module neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.read_squad_examples"]], "transform_registry() (in module neural_compressor.data.transforms.transform)": [[202, "neural_compressor.data.transforms.transform.transform_registry"]], "benchmark (class in neural_compressor.experimental.benchmark)": [[203, "neural_compressor.experimental.benchmark.Benchmark"]], "get_architecture() (in module neural_compressor.experimental.benchmark)": [[203, "neural_compressor.experimental.benchmark.get_architecture"]], "get_bounded_threads() (in module neural_compressor.experimental.benchmark)": [[203, "neural_compressor.experimental.benchmark.get_bounded_threads"]], "get_core_ids() (in module neural_compressor.experimental.benchmark)": [[203, "neural_compressor.experimental.benchmark.get_core_ids"]], "get_physical_ids() (in module neural_compressor.experimental.benchmark)": [[203, "neural_compressor.experimental.benchmark.get_physical_ids"]], "get_threads() (in module neural_compressor.experimental.benchmark)": [[203, "neural_compressor.experimental.benchmark.get_threads"]], "get_threads_per_core() (in module neural_compressor.experimental.benchmark)": [[203, "neural_compressor.experimental.benchmark.get_threads_per_core"]], "neural_compressor.experimental.benchmark": [[203, "module-neural_compressor.experimental.benchmark"]], "set_all_env_var() (in module neural_compressor.experimental.benchmark)": [[203, "neural_compressor.experimental.benchmark.set_all_env_var"]], "set_env_var() (in module neural_compressor.experimental.benchmark)": [[203, "neural_compressor.experimental.benchmark.set_env_var"]], "criterions (class in neural_compressor.experimental.common.criterion)": [[204, "neural_compressor.experimental.common.criterion.Criterions"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[204, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationframework (class in neural_compressor.experimental.common.criterion)": [[204, "neural_compressor.experimental.common.criterion.KnowledgeDistillationFramework"]], "knowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[204, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss"]], "pytorchcriterions (class in neural_compressor.experimental.common.criterion)": [[204, "neural_compressor.experimental.common.criterion.PyTorchCriterions"]], "pytorchcrossentropyloss (class in neural_compressor.experimental.common.criterion)": [[204, "neural_compressor.experimental.common.criterion.PyTorchCrossEntropyLoss"]], "pytorchintermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[204, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss"]], "pytorchintermediatelayersknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[204, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"]], "pytorchknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[204, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss"]], "pytorchknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[204, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLossWrapper"]], "pytorchselfknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[204, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss"]], "pytorchselfknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[204, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLossWrapper"]], "selfknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[204, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss"]], "tensorflowcrossentropyloss (class in neural_compressor.experimental.common.criterion)": [[204, "neural_compressor.experimental.common.criterion.TensorFlowCrossEntropyLoss"]], "tensorflowsparsecategoricalcrossentropy (class in neural_compressor.experimental.common.criterion)": [[204, "neural_compressor.experimental.common.criterion.TensorFlowSparseCategoricalCrossentropy"]], "tensorflowcriterions (class in neural_compressor.experimental.common.criterion)": [[204, "neural_compressor.experimental.common.criterion.TensorflowCriterions"]], "tensorflowknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[204, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss"]], "tensorflowknowledgedistillationlossexternal (class in neural_compressor.experimental.common.criterion)": [[204, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal"]], "tensorflowknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[204, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossWrapper"]], "criterion_registry() (in module neural_compressor.experimental.common.criterion)": [[204, "neural_compressor.experimental.common.criterion.criterion_registry"]], "neural_compressor.experimental.common.criterion": [[204, "module-neural_compressor.experimental.common.criterion"]], "dataloader (class in neural_compressor.experimental.common.dataloader)": [[205, "neural_compressor.experimental.common.dataloader.DataLoader"]], "neural_compressor.experimental.common.dataloader": [[205, "module-neural_compressor.experimental.common.dataloader"]], "neural_compressor.experimental.common": [[206, "module-neural_compressor.experimental.common"]], "metric (class in neural_compressor.experimental.common.metric)": [[207, "neural_compressor.experimental.common.metric.Metric"]], "neural_compressor.experimental.common.metric": [[207, "module-neural_compressor.experimental.common.metric"]], "model (class in neural_compressor.experimental.common.model)": [[208, "neural_compressor.experimental.common.model.Model"]], "neural_compressor.experimental.common.model": [[208, "module-neural_compressor.experimental.common.model"]], "set_backend() (in module neural_compressor.experimental.common.model)": [[208, "neural_compressor.experimental.common.model.set_backend"]], "optimizers (class in neural_compressor.experimental.common.optimizer)": [[209, "neural_compressor.experimental.common.optimizer.Optimizers"]], "pytorchoptimizers (class in neural_compressor.experimental.common.optimizer)": [[209, "neural_compressor.experimental.common.optimizer.PyTorchOptimizers"]], "pytorchsgd (class in neural_compressor.experimental.common.optimizer)": [[209, "neural_compressor.experimental.common.optimizer.PyTorchSGD"]], "tensorflowadam (class in neural_compressor.experimental.common.optimizer)": [[209, "neural_compressor.experimental.common.optimizer.TensorFlowAdam"]], "tensorflowadamw (class in neural_compressor.experimental.common.optimizer)": [[209, "neural_compressor.experimental.common.optimizer.TensorFlowAdamW"]], "tensorflowsgd (class in neural_compressor.experimental.common.optimizer)": [[209, "neural_compressor.experimental.common.optimizer.TensorFlowSGD"]], "tensorflowoptimizers (class in neural_compressor.experimental.common.optimizer)": [[209, "neural_compressor.experimental.common.optimizer.TensorflowOptimizers"]], "neural_compressor.experimental.common.optimizer": [[209, "module-neural_compressor.experimental.common.optimizer"]], "optimizer_registry() (in module neural_compressor.experimental.common.optimizer)": [[209, "neural_compressor.experimental.common.optimizer.optimizer_registry"]], "postprocess (class in neural_compressor.experimental.common.postprocess)": [[210, "neural_compressor.experimental.common.postprocess.Postprocess"]], "neural_compressor.experimental.common.postprocess": [[210, "module-neural_compressor.experimental.common.postprocess"]], "get_activation() (in module neural_compressor.experimental.common.torch_utils)": [[211, "neural_compressor.experimental.common.torch_utils.get_activation"]], "neural_compressor.experimental.common.torch_utils": [[211, "module-neural_compressor.experimental.common.torch_utils"]], "record_output() (in module neural_compressor.experimental.common.torch_utils)": [[211, "neural_compressor.experimental.common.torch_utils.record_output"]], "component (class in neural_compressor.experimental.component)": [[212, "neural_compressor.experimental.component.Component"]], "neural_compressor.experimental.component": [[212, "module-neural_compressor.experimental.component"]], "neural_compressor.experimental.compression": [[213, "module-neural_compressor.experimental.compression"]], "neural_compressor.experimental.compression.pruning": [[214, "module-neural_compressor.experimental.compression.pruning"]], "prepare_pruning() (in module neural_compressor.experimental.compression.pruning)": [[214, "neural_compressor.experimental.compression.pruning.prepare_pruning"]], "save() (in module neural_compressor.experimental.compression.pruning)": [[214, "neural_compressor.experimental.compression.pruning.save"]], "basedataloader (class in neural_compressor.experimental.data.dataloaders.base_dataloader)": [[215, "neural_compressor.experimental.data.dataloaders.base_dataloader.BaseDataLoader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[215, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[216, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "defaultdataloader (class in neural_compressor.experimental.data.dataloaders.default_dataloader)": [[217, "neural_compressor.experimental.data.dataloaders.default_dataloader.DefaultDataLoader"]], "default_collate() (in module neural_compressor.experimental.data.dataloaders.default_dataloader)": [[217, "neural_compressor.experimental.data.dataloaders.default_dataloader.default_collate"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[217, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "fetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[218, "neural_compressor.experimental.data.dataloaders.fetcher.Fetcher"]], "indexfetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[218, "neural_compressor.experimental.data.dataloaders.fetcher.IndexFetcher"]], "iterablefetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[218, "neural_compressor.experimental.data.dataloaders.fetcher.IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[218, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[219, "module-neural_compressor.experimental.data.dataloaders"]], "mxnetdataloader (class in neural_compressor.experimental.data.dataloaders.mxnet_dataloader)": [[220, "neural_compressor.experimental.data.dataloaders.mxnet_dataloader.MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[220, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "onnxrtbertdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[221, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTBertDataLoader"]], "onnxrtdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[221, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[221, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "pytorchdataloader (class in neural_compressor.experimental.data.dataloaders.pytorch_dataloader)": [[222, "neural_compressor.experimental.data.dataloaders.pytorch_dataloader.PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[222, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "batchsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[223, "neural_compressor.experimental.data.dataloaders.sampler.BatchSampler"]], "iterablesampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[223, "neural_compressor.experimental.data.dataloaders.sampler.IterableSampler"]], "sampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[223, "neural_compressor.experimental.data.dataloaders.sampler.Sampler"]], "sequentialsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[223, "neural_compressor.experimental.data.dataloaders.sampler.SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.sampler": [[223, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "tfdatadataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[224, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TFDataDataLoader"]], "tensorflowbertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[224, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowBertDataLoader"]], "tensorflowdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[224, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowDataLoader"]], "tensorflowmodelzoobertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[224, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowModelZooBertDataLoader"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[224, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "inputfeatures (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[225, "neural_compressor.experimental.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[225, "neural_compressor.experimental.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[225, "neural_compressor.experimental.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[225, "neural_compressor.experimental.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[225, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[225, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[225, "neural_compressor.experimental.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[225, "neural_compressor.experimental.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[225, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "coconpy (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[226, "neural_compressor.experimental.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[226, "neural_compressor.experimental.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[226, "neural_compressor.experimental.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[226, "neural_compressor.experimental.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[226, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[227, "neural_compressor.experimental.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[227, "neural_compressor.experimental.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.experimental.data.datasets.dataset)": [[227, "neural_compressor.experimental.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.experimental.data.datasets.dataset)": [[227, "neural_compressor.experimental.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[227, "neural_compressor.experimental.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[227, "neural_compressor.experimental.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.experimental.data.datasets.dataset)": [[227, "neural_compressor.experimental.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.experimental.data.datasets.dataset)": [[227, "neural_compressor.experimental.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[227, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[227, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[227, "neural_compressor.experimental.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[227, "neural_compressor.experimental.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[227, "neural_compressor.experimental.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[227, "neural_compressor.experimental.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[227, "neural_compressor.experimental.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[227, "neural_compressor.experimental.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[227, "neural_compressor.experimental.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[227, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[227, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[227, "neural_compressor.experimental.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[227, "neural_compressor.experimental.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.experimental.data.datasets.dataset)": [[227, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.datasets.dataset)": [[227, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflowcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[227, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[227, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[227, "neural_compressor.experimental.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[227, "neural_compressor.experimental.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[227, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageFolder"]], "tensorflowimagerecord (class in neural_compressor.experimental.data.datasets.dataset)": [[227, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[227, "neural_compressor.experimental.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.experimental.data.datasets.dataset)": [[227, "neural_compressor.experimental.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.experimental.data.datasets.dataset)": [[227, "neural_compressor.experimental.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.experimental.data.datasets.dataset)": [[227, "neural_compressor.experimental.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.experimental.data.datasets.dataset)": [[227, "neural_compressor.experimental.data.datasets.dataset.check_integrity"]], "dataset_registry() (in module neural_compressor.experimental.data.datasets.dataset)": [[227, "neural_compressor.experimental.data.datasets.dataset.dataset_registry"]], "download_url() (in module neural_compressor.experimental.data.datasets.dataset)": [[227, "neural_compressor.experimental.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.experimental.data.datasets.dataset)": [[227, "neural_compressor.experimental.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.experimental.data.datasets.dataset)": [[227, "neural_compressor.experimental.data.datasets.dataset.gen_bar_updater"]], "neural_compressor.experimental.data.datasets.dataset": [[227, "module-neural_compressor.experimental.data.datasets.dataset"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset)": [[228, "neural_compressor.experimental.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[228, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[229, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[229, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[229, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[230, "neural_compressor.experimental.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[230, "neural_compressor.experimental.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[230, "neural_compressor.experimental.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[230, "neural_compressor.experimental.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[230, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[230, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[230, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "neural_compressor.experimental.data.datasets": [[231, "module-neural_compressor.experimental.data.datasets"]], "styletransferdataset (class in neural_compressor.experimental.data.datasets.style_transfer_dataset)": [[232, "neural_compressor.experimental.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[232, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[233, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[233, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.coco_filter": [[233, "module-neural_compressor.experimental.data.filters.coco_filter"]], "filters (class in neural_compressor.experimental.data.filters.filter)": [[234, "neural_compressor.experimental.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.experimental.data.filters.filter)": [[234, "neural_compressor.experimental.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.experimental.data.filters.filter)": [[234, "neural_compressor.experimental.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.experimental.data.filters.filter)": [[234, "neural_compressor.experimental.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.experimental.data.filters.filter)": [[234, "neural_compressor.experimental.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.experimental.data.filters.filter)": [[234, "neural_compressor.experimental.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.experimental.data.filters.filter)": [[234, "neural_compressor.experimental.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.experimental.data.filters.filter)": [[234, "neural_compressor.experimental.data.filters.filter.filter_registry"]], "neural_compressor.experimental.data.filters.filter": [[234, "module-neural_compressor.experimental.data.filters.filter"]], "neural_compressor.experimental.data.filters": [[235, "module-neural_compressor.experimental.data.filters"]], "neural_compressor.experimental.data": [[236, "module-neural_compressor.experimental.data"]], "bilinearimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[237, "neural_compressor.experimental.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[237, "neural_compressor.experimental.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[237, "neural_compressor.experimental.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[237, "neural_compressor.experimental.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[237, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[237, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[237, "neural_compressor.experimental.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[237, "neural_compressor.experimental.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[237, "neural_compressor.experimental.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[237, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "neural_compressor.experimental.data.transforms": [[238, "module-neural_compressor.experimental.data.transforms"]], "basictokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[239, "neural_compressor.experimental.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[239, "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[239, "neural_compressor.experimental.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[239, "neural_compressor.experimental.data.transforms.tokenization.convert_by_vocab"]], "convert_to_unicode() (in module neural_compressor.experimental.data.transforms.tokenization)": [[239, "neural_compressor.experimental.data.transforms.tokenization.convert_to_unicode"]], "load_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[239, "neural_compressor.experimental.data.transforms.tokenization.load_vocab"]], "neural_compressor.experimental.data.transforms.tokenization": [[239, "module-neural_compressor.experimental.data.transforms.tokenization"]], "whitespace_tokenize() (in module neural_compressor.experimental.data.transforms.tokenization)": [[239, "neural_compressor.experimental.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.TRANSFORMS"], [240, "neural_compressor.experimental.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.get_final_text"]], "get_torchvision_map() (in module neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.get_torchvision_map"]], "neural_compressor.experimental.data.transforms.transform": [[240, "module-neural_compressor.experimental.data.transforms.transform"]], "read_squad_examples() (in module neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.read_squad_examples"]], "transform_registry() (in module neural_compressor.experimental.data.transforms.transform)": [[240, "neural_compressor.experimental.data.transforms.transform.transform_registry"]], "distillation (class in neural_compressor.experimental.distillation)": [[241, "neural_compressor.experimental.distillation.Distillation"]], "_epoch_ran (neural_compressor.experimental.distillation.distillation attribute)": [[241, "neural_compressor.experimental.distillation.Distillation._epoch_ran"]], "best_model (neural_compressor.experimental.distillation.distillation attribute)": [[241, "neural_compressor.experimental.distillation.Distillation.best_model"]], "best_score (neural_compressor.experimental.distillation.distillation attribute)": [[241, "neural_compressor.experimental.distillation.Distillation.best_score"]], "eval_frequency (neural_compressor.experimental.distillation.distillation attribute)": [[241, "neural_compressor.experimental.distillation.Distillation.eval_frequency"]], "neural_compressor.experimental.distillation": [[241, "module-neural_compressor.experimental.distillation"]], "neural_compressor.experimental.export": [[242, "module-neural_compressor.experimental.export"]], "check_model() (in module neural_compressor.experimental.export.qlinear2qdq)": [[243, "neural_compressor.experimental.export.qlinear2qdq.check_model"]], "neural_compressor.experimental.export.qlinear2qdq": [[243, "module-neural_compressor.experimental.export.qlinear2qdq"]], "onnx_qlinear_to_qdq() (in module neural_compressor.experimental.export.qlinear2qdq)": [[243, "neural_compressor.experimental.export.qlinear2qdq.onnx_qlinear_to_qdq"]], "neural_compressor.experimental.export.tf2onnx": [[244, "module-neural_compressor.experimental.export.tf2onnx"]], "tf_to_fp32_onnx() (in module neural_compressor.experimental.export.tf2onnx)": [[244, "neural_compressor.experimental.export.tf2onnx.tf_to_fp32_onnx"]], "tf_to_int8_onnx() (in module neural_compressor.experimental.export.tf2onnx)": [[244, "neural_compressor.experimental.export.tf2onnx.tf_to_int8_onnx"]], "build_scale_mapping() (in module neural_compressor.experimental.export.torch2onnx)": [[245, "neural_compressor.experimental.export.torch2onnx.build_scale_mapping"]], "get_node_mapping() (in module neural_compressor.experimental.export.torch2onnx)": [[245, "neural_compressor.experimental.export.torch2onnx.get_node_mapping"]], "get_quantizable_onnx_ops() (in module neural_compressor.experimental.export.torch2onnx)": [[245, "neural_compressor.experimental.export.torch2onnx.get_quantizable_onnx_ops"]], "neural_compressor.experimental.export.torch2onnx": [[245, "module-neural_compressor.experimental.export.torch2onnx"]], "qdq_fp32_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[245, "neural_compressor.experimental.export.torch2onnx.qdq_fp32_bias"]], "qdq_fp32_bias_qdq() (in module neural_compressor.experimental.export.torch2onnx)": [[245, "neural_compressor.experimental.export.torch2onnx.qdq_fp32_bias_qdq"]], "qdq_int32_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[245, "neural_compressor.experimental.export.torch2onnx.qdq_int32_bias"]], "recalculate_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[245, "neural_compressor.experimental.export.torch2onnx.recalculate_bias"]], "remove_nodes_by_name() (in module neural_compressor.experimental.export.torch2onnx)": [[245, "neural_compressor.experimental.export.torch2onnx.remove_nodes_by_name"]], "set_data_type() (in module neural_compressor.experimental.export.torch2onnx)": [[245, "neural_compressor.experimental.export.torch2onnx.set_data_type"]], "set_scale_info() (in module neural_compressor.experimental.export.torch2onnx)": [[245, "neural_compressor.experimental.export.torch2onnx.set_scale_info"]], "sub_graph_with_int32_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[245, "neural_compressor.experimental.export.torch2onnx.sub_graph_with_int32_bias"]], "torch_to_fp32_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[245, "neural_compressor.experimental.export.torch2onnx.torch_to_fp32_onnx"]], "torch_to_int8_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[245, "neural_compressor.experimental.export.torch2onnx.torch_to_int8_onnx"]], "update_weight_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[245, "neural_compressor.experimental.export.torch2onnx.update_weight_bias"]], "dummydatareader (class in neural_compressor.experimental.export.utils)": [[246, "neural_compressor.experimental.export.utils.DummyDataReader"]], "onnx2numpy_dtype() (in module neural_compressor.experimental.export.utils)": [[246, "neural_compressor.experimental.export.utils.ONNX2Numpy_dtype"]], "neural_compressor.experimental.export.utils": [[246, "module-neural_compressor.experimental.export.utils"]], "graph_optimization (class in neural_compressor.experimental.graph_optimization)": [[247, "neural_compressor.experimental.graph_optimization.Graph_Optimization"]], "neural_compressor.experimental.graph_optimization": [[247, "module-neural_compressor.experimental.graph_optimization"]], "neural_compressor.experimental": [[248, "module-neural_compressor.experimental"]], "bleu (class in neural_compressor.experimental.metric.bleu)": [[249, "neural_compressor.experimental.metric.bleu.BLEU"]], "unicoderegex (class in neural_compressor.experimental.metric.bleu)": [[249, "neural_compressor.experimental.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.experimental.metric.bleu)": [[249, "neural_compressor.experimental.metric.bleu.bleu_tokenize"]], "labels (neural_compressor.experimental.metric.bleu.bleu attribute)": [[249, "neural_compressor.experimental.metric.bleu.BLEU.labels"]], "neural_compressor.experimental.metric.bleu": [[249, "module-neural_compressor.experimental.metric.bleu"]], "nondigit_punct_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[249, "neural_compressor.experimental.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "predictions (neural_compressor.experimental.metric.bleu.bleu attribute)": [[249, "neural_compressor.experimental.metric.bleu.BLEU.predictions"]], "punct_nondigit_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[249, "neural_compressor.experimental.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "symbol_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[249, "neural_compressor.experimental.metric.bleu.UnicodeRegex.symbol_re"]], "compute_bleu() (in module neural_compressor.experimental.metric.bleu_util)": [[250, "neural_compressor.experimental.metric.bleu_util.compute_bleu"]], "neural_compressor.experimental.metric.bleu_util": [[250, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[251, "module-neural_compressor.experimental.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.experimental.metric.coco_tools)": [[252, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.experimental.metric.coco_tools)": [[252, "neural_compressor.experimental.metric.coco_tools.COCOWrapper"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.experimental.metric.coco_tools)": [[252, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.experimental.metric.coco_tools)": [[252, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.experimental.metric.coco_tools)": [[252, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "dataset (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[252, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[252, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.experimental.metric.coco_tools": [[252, "module-neural_compressor.experimental.metric.coco_tools"]], "evaluate() (in module neural_compressor.experimental.metric.evaluate_squad)": [[253, "neural_compressor.experimental.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[253, "neural_compressor.experimental.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[253, "neural_compressor.experimental.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.evaluate_squad)": [[253, "neural_compressor.experimental.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.evaluate_squad": [[253, "module-neural_compressor.experimental.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.experimental.metric.f1)": [[254, "neural_compressor.experimental.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.experimental.metric.f1)": [[254, "neural_compressor.experimental.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.f1)": [[254, "neural_compressor.experimental.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[254, "module-neural_compressor.experimental.metric.f1"]], "normalize_answer() (in module neural_compressor.experimental.metric.f1)": [[254, "neural_compressor.experimental.metric.f1.normalize_answer"]], "neural_compressor.experimental.metric": [[255, "module-neural_compressor.experimental.metric"]], "accuracy (class in neural_compressor.experimental.metric.metric)": [[256, "neural_compressor.experimental.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.experimental.metric.metric)": [[256, "neural_compressor.experimental.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.experimental.metric.metric)": [[256, "neural_compressor.experimental.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.experimental.metric.metric)": [[256, "neural_compressor.experimental.metric.metric.F1"]], "generaltopk (class in neural_compressor.experimental.metric.metric)": [[256, "neural_compressor.experimental.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.experimental.metric.metric)": [[256, "neural_compressor.experimental.metric.metric.Loss"]], "mae (class in neural_compressor.experimental.metric.metric)": [[256, "neural_compressor.experimental.metric.metric.MAE"]], "metrics (class in neural_compressor.experimental.metric.metric)": [[256, "neural_compressor.experimental.metric.metric.METRICS"]], "mse (class in neural_compressor.experimental.metric.metric)": [[256, "neural_compressor.experimental.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.experimental.metric.metric)": [[256, "neural_compressor.experimental.metric.metric.MXNetMetrics"]], "onnxrtglue (class in neural_compressor.experimental.metric.metric)": [[256, "neural_compressor.experimental.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.experimental.metric.metric)": [[256, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.experimental.metric.metric)": [[256, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.experimental.metric.metric)": [[256, "neural_compressor.experimental.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.experimental.metric.metric)": [[256, "neural_compressor.experimental.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.experimental.metric.metric)": [[256, "neural_compressor.experimental.metric.metric.RMSE"]], "roc (class in neural_compressor.experimental.metric.metric)": [[256, "neural_compressor.experimental.metric.metric.ROC"]], "squadf1 (class in neural_compressor.experimental.metric.metric)": [[256, "neural_compressor.experimental.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.experimental.metric.metric)": [[256, "neural_compressor.experimental.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.experimental.metric.metric)": [[256, "neural_compressor.experimental.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.experimental.metric.metric)": [[256, "neural_compressor.experimental.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.experimental.metric.metric)": [[256, "neural_compressor.experimental.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.experimental.metric.metric)": [[256, "neural_compressor.experimental.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.experimental.metric.metric)": [[256, "neural_compressor.experimental.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.experimental.metric.metric)": [[256, "neural_compressor.experimental.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.experimental.metric.metric)": [[256, "neural_compressor.experimental.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.experimental.metric.metric.mae attribute)": [[256, "neural_compressor.experimental.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.experimental.metric.metric.mse attribute)": [[256, "neural_compressor.experimental.metric.metric.MSE.compare_label"]], "k (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[256, "neural_compressor.experimental.metric.metric.GeneralTopK.k"]], "k (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[256, "neural_compressor.experimental.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[256, "neural_compressor.experimental.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mae attribute)": [[256, "neural_compressor.experimental.metric.metric.MAE.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mse attribute)": [[256, "neural_compressor.experimental.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.experimental.metric.metric)": [[256, "neural_compressor.experimental.metric.metric.mIOU"]], "metric_registry() (in module neural_compressor.experimental.metric.metric)": [[256, "neural_compressor.experimental.metric.metric.metric_registry"]], "metrics (neural_compressor.experimental.metric.metric.metrics attribute)": [[256, "neural_compressor.experimental.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.experimental.metric.metric.mxnetmetrics attribute)": [[256, "neural_compressor.experimental.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtitmetrics attribute)": [[256, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtqlmetrics attribute)": [[256, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.pytorchmetrics attribute)": [[256, "neural_compressor.experimental.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.tensorflowmetrics attribute)": [[256, "neural_compressor.experimental.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.experimental.metric.metric.rmse attribute)": [[256, "neural_compressor.experimental.metric.metric.RMSE.mse"]], "neural_compressor.experimental.metric.metric": [[256, "module-neural_compressor.experimental.metric.metric"]], "num_correct (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[256, "neural_compressor.experimental.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[256, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[256, "neural_compressor.experimental.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[256, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[256, "neural_compressor.experimental.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mae attribute)": [[256, "neural_compressor.experimental.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mse attribute)": [[256, "neural_compressor.experimental.metric.metric.MSE.pred_list"]], "sample (neural_compressor.experimental.metric.metric.accuracy attribute)": [[256, "neural_compressor.experimental.metric.metric.Accuracy.sample"]], "sample (neural_compressor.experimental.metric.metric.loss attribute)": [[256, "neural_compressor.experimental.metric.metric.Loss.sample"]], "sum (neural_compressor.experimental.metric.metric.loss attribute)": [[256, "neural_compressor.experimental.metric.metric.Loss.sum"]], "mixedprecision (class in neural_compressor.experimental.mixed_precision)": [[257, "neural_compressor.experimental.mixed_precision.MixedPrecision"]], "neural_compressor.experimental.mixed_precision": [[257, "module-neural_compressor.experimental.mixed_precision"]], "modelconversion (class in neural_compressor.experimental.model_conversion)": [[258, "neural_compressor.experimental.model_conversion.ModelConversion"]], "neural_compressor.experimental.model_conversion": [[258, "module-neural_compressor.experimental.model_conversion"]], "basicnas (class in neural_compressor.experimental.nas.basic_nas)": [[259, "neural_compressor.experimental.nas.basic_nas.BasicNAS"]], "neural_compressor.experimental.nas.basic_nas": [[259, "module-neural_compressor.experimental.nas.basic_nas"]], "dynas (class in neural_compressor.experimental.nas.dynas)": [[260, "neural_compressor.experimental.nas.dynas.DyNAS"]], "neural_compressor.experimental.nas.dynas": [[260, "module-neural_compressor.experimental.nas.dynas"]], "neural_compressor.experimental.nas": [[261, "module-neural_compressor.experimental.nas"]], "nas (class in neural_compressor.experimental.nas.nas)": [[262, "neural_compressor.experimental.nas.nas.NAS"]], "nasbase (class in neural_compressor.experimental.nas.nas)": [[262, "neural_compressor.experimental.nas.nas.NASBase"]], "neural_compressor.experimental.nas.nas": [[262, "module-neural_compressor.experimental.nas.nas"]], "create_search_space_pool() (in module neural_compressor.experimental.nas.nas_utils)": [[263, "neural_compressor.experimental.nas.nas_utils.create_search_space_pool"]], "find_pareto_front() (in module neural_compressor.experimental.nas.nas_utils)": [[263, "neural_compressor.experimental.nas.nas_utils.find_pareto_front"]], "nas_registry() (in module neural_compressor.experimental.nas.nas_utils)": [[263, "neural_compressor.experimental.nas.nas_utils.nas_registry"]], "neural_compressor.experimental.nas.nas_utils": [[263, "module-neural_compressor.experimental.nas.nas_utils"]], "bayesianoptimizationsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[264, "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher"]], "gridsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[264, "neural_compressor.experimental.nas.search_algorithms.GridSearcher"]], "randomsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[264, "neural_compressor.experimental.nas.search_algorithms.RandomSearcher"]], "searcher (class in neural_compressor.experimental.nas.search_algorithms)": [[264, "neural_compressor.experimental.nas.search_algorithms.Searcher"]], "neural_compressor.experimental.nas.search_algorithms": [[264, "module-neural_compressor.experimental.nas.search_algorithms"]], "gradientsensitivitypruner (class in neural_compressor.experimental.pruner_legacy.gradient_sensitivity)": [[265, "neural_compressor.experimental.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[265, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"]], "grouplassopruner (class in neural_compressor.experimental.pruner_legacy.group_lasso)": [[266, "neural_compressor.experimental.pruner_legacy.group_lasso.GroupLassoPruner"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[266, "module-neural_compressor.experimental.pruner_legacy.group_lasso"]], "neural_compressor.experimental.pruner_legacy": [[267, "module-neural_compressor.experimental.pruner_legacy"]], "basicmagnitudepruner (class in neural_compressor.experimental.pruner_legacy.magnitude)": [[268, "neural_compressor.experimental.pruner_legacy.magnitude.BasicMagnitudePruner"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[268, "module-neural_compressor.experimental.pruner_legacy.magnitude"]], "patternlockpruner (class in neural_compressor.experimental.pruner_legacy.pattern_lock)": [[269, "neural_compressor.experimental.pruner_legacy.pattern_lock.PatternLockPruner"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[269, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"]], "pruner (class in neural_compressor.experimental.pruner_legacy.pruner)": [[270, "neural_compressor.experimental.pruner_legacy.pruner.Pruner"]], "neural_compressor.experimental.pruner_legacy.pruner": [[270, "module-neural_compressor.experimental.pruner_legacy.pruner"]], "pruner_registry() (in module neural_compressor.experimental.pruner_legacy.pruner)": [[270, "neural_compressor.experimental.pruner_legacy.pruner.pruner_registry"]], "pruning (class in neural_compressor.experimental.pruning)": [[271, "neural_compressor.experimental.pruning.Pruning"]], "tfpruningcallback (class in neural_compressor.experimental.pruning)": [[271, "neural_compressor.experimental.pruning.TfPruningCallback"]], "conf (neural_compressor.experimental.pruning.pruning attribute)": [[271, "neural_compressor.experimental.pruning.Pruning.conf"]], "neural_compressor.experimental.pruning": [[271, "module-neural_compressor.experimental.pruning"]], "pruners (neural_compressor.experimental.pruning.pruning attribute)": [[271, "neural_compressor.experimental.pruning.Pruning.pruners"]], "neural_compressor.experimental.pruning_recipes": [[272, "module-neural_compressor.experimental.pruning_recipes"]], "neural_compressor.experimental.pruning_recipes.patterns": [[273, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "patterns (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[274, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS"]], "patternbase (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[274, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[274, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "pattern_registry() (in module neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[274, "neural_compressor.experimental.pruning_recipes.patterns.pattern.pattern_registry"]], "patterns (neural_compressor.experimental.pruning_recipes.patterns.pattern.patterns attribute)": [[274, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS.patterns"]], "tilepatternbase (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[275, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePatternBase"]], "tilepattern_1x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[275, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x1"]], "tilepattern_1x16 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[275, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x16"]], "tilepattern_1x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[275, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x2"]], "tilepattern_2x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[275, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_2x2"]], "tilepattern_4x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[275, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_4x1"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[275, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "pruning (class in neural_compressor.experimental.pruning_v2)": [[276, "neural_compressor.experimental.pruning_v2.Pruning"]], "tfpruningcallback (class in neural_compressor.experimental.pruning_v2)": [[276, "neural_compressor.experimental.pruning_v2.TfPruningCallback"]], "conf (neural_compressor.experimental.pruning_v2.pruning attribute)": [[276, "neural_compressor.experimental.pruning_v2.Pruning.conf"]], "neural_compressor.experimental.pruning_v2": [[276, "module-neural_compressor.experimental.pruning_v2"]], "pruners (neural_compressor.experimental.pruning_v2.pruning attribute)": [[276, "neural_compressor.experimental.pruning_v2.Pruning.pruners"]], "neural_compressor.experimental.pytorch_pruner": [[277, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[278, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "m (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[279, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.M"]], "n (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[279, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.N"]], "pattern (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[279, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern"]], "patternninm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[279, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM"]], "patternnxm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[279, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM"]], "block_size (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm attribute)": [[279, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.block_size"]], "get_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[279, "neural_compressor.experimental.pytorch_pruner.patterns.get_pattern"]], "is_global (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[279, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.is_global"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[279, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "pattern (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[279, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.pattern"]], "register_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[279, "neural_compressor.experimental.pytorch_pruner.patterns.register_pattern"]], "check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[280, "neural_compressor.experimental.pytorch_pruner.prune_utils.check_config"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[280, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "parse_not_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[280, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_not_to_prune"]], "parse_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[280, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_to_prune"]], "process_and_check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[280, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_and_check_config"]], "process_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[280, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_config"]], "reset_non_value_to_default() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[280, "neural_compressor.experimental.pytorch_pruner.prune_utils.reset_non_value_to_default"]], "magnitudepruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[281, "neural_compressor.experimental.pytorch_pruner.pruner.MagnitudePruner"]], "patternlockpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[281, "neural_compressor.experimental.pytorch_pruner.pruner.PatternLockPruner"]], "pruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[281, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner"]], "snipmomentumpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[281, "neural_compressor.experimental.pytorch_pruner.pruner.SnipMomentumPruner"]], "snippruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[281, "neural_compressor.experimental.pytorch_pruner.pruner.SnipPruner"]], "config (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[281, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.config"]], "current_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[281, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.current_sparsity_ratio"]], "end_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[281, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.end_step"]], "get_pruner() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[281, "neural_compressor.experimental.pytorch_pruner.pruner.get_pruner"]], "global_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[281, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.global_step"]], "masks (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[281, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.masks"]], "max_sparsity_ratio_per_layer (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[281, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.max_sparsity_ratio_per_layer"]], "modules (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[281, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.modules"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[281, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "pattern (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[281, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.pattern"]], "register_pruners() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[281, "neural_compressor.experimental.pytorch_pruner.pruner.register_pruners"]], "scheduler (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[281, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scheduler"]], "scores (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[281, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scores"]], "start_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[281, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.start_step"]], "target_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[281, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.target_sparsity_ratio"]], "update_frequency_on_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[281, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.update_frequency_on_step"]], "pruning (class in neural_compressor.experimental.pytorch_pruner.pruning)": [[282, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning"]], "config_file_path (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[282, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.config_file_path"]], "model (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[282, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.model"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[282, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "pruner_info (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[282, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruner_info"]], "pruners (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[282, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruners"]], "iterativescheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[283, "neural_compressor.experimental.pytorch_pruner.scheduler.IterativeScheduler"]], "oneshotscheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[283, "neural_compressor.experimental.pytorch_pruner.scheduler.OneshotScheduler"]], "scheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[283, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler"]], "config (neural_compressor.experimental.pytorch_pruner.scheduler.scheduler attribute)": [[283, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler.config"]], "get_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[283, "neural_compressor.experimental.pytorch_pruner.scheduler.get_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[283, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "register_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[283, "neural_compressor.experimental.pytorch_pruner.scheduler.register_scheduler"]], "quantization (class in neural_compressor.experimental.quantization)": [[284, "neural_compressor.experimental.quantization.Quantization"]], "neural_compressor.experimental.quantization": [[284, "module-neural_compressor.experimental.quantization"]], "scheduler (class in neural_compressor.experimental.scheduler)": [[285, "neural_compressor.experimental.scheduler.Scheduler"]], "neural_compressor.experimental.scheduler": [[285, "module-neural_compressor.experimental.scheduler"]], "neural_compressor": [[286, "module-neural_compressor"]], "bleu (class in neural_compressor.metric.bleu)": [[287, "neural_compressor.metric.bleu.BLEU"]], "unicoderegex (class in neural_compressor.metric.bleu)": [[287, "neural_compressor.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.metric.bleu)": [[287, "neural_compressor.metric.bleu.bleu_tokenize"]], "labels (neural_compressor.metric.bleu.bleu attribute)": [[287, "neural_compressor.metric.bleu.BLEU.labels"]], "neural_compressor.metric.bleu": [[287, "module-neural_compressor.metric.bleu"]], "nondigit_punct_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[287, "neural_compressor.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "predictions (neural_compressor.metric.bleu.bleu attribute)": [[287, "neural_compressor.metric.bleu.BLEU.predictions"]], "punct_nondigit_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[287, "neural_compressor.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "symbol_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[287, "neural_compressor.metric.bleu.UnicodeRegex.symbol_re"]], "compute_bleu() (in module neural_compressor.metric.bleu_util)": [[288, "neural_compressor.metric.bleu_util.compute_bleu"]], "neural_compressor.metric.bleu_util": [[288, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[289, "module-neural_compressor.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.metric.coco_tools)": [[290, "neural_compressor.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.metric.coco_tools)": [[290, "neural_compressor.metric.coco_tools.COCOWrapper"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.metric.coco_tools)": [[290, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.metric.coco_tools)": [[290, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.metric.coco_tools)": [[290, "neural_compressor.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "dataset (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[290, "neural_compressor.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[290, "neural_compressor.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.metric.coco_tools": [[290, "module-neural_compressor.metric.coco_tools"]], "evaluate() (in module neural_compressor.metric.evaluate_squad)": [[291, "neural_compressor.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.metric.evaluate_squad)": [[291, "neural_compressor.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.metric.evaluate_squad)": [[291, "neural_compressor.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.evaluate_squad)": [[291, "neural_compressor.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.metric.evaluate_squad": [[291, "module-neural_compressor.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.metric.f1)": [[292, "neural_compressor.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.metric.f1)": [[292, "neural_compressor.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.f1)": [[292, "neural_compressor.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[292, "module-neural_compressor.metric.f1"]], "normalize_answer() (in module neural_compressor.metric.f1)": [[292, "neural_compressor.metric.f1.normalize_answer"]], "neural_compressor.metric": [[293, "module-neural_compressor.metric"]], "accuracy (class in neural_compressor.metric.metric)": [[294, "neural_compressor.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.metric.metric)": [[294, "neural_compressor.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.metric.metric)": [[294, "neural_compressor.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.metric.metric)": [[294, "neural_compressor.metric.metric.F1"]], "generaltopk (class in neural_compressor.metric.metric)": [[294, "neural_compressor.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.metric.metric)": [[294, "neural_compressor.metric.metric.Loss"]], "mae (class in neural_compressor.metric.metric)": [[294, "neural_compressor.metric.metric.MAE"]], "metrics (class in neural_compressor.metric.metric)": [[294, "neural_compressor.metric.metric.METRICS"]], "mse (class in neural_compressor.metric.metric)": [[294, "neural_compressor.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.metric.metric)": [[294, "neural_compressor.metric.metric.MXNetMetrics"]], "metric (class in neural_compressor.metric.metric)": [[294, "neural_compressor.metric.metric.Metric"]], "onnxrtglue (class in neural_compressor.metric.metric)": [[294, "neural_compressor.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.metric.metric)": [[294, "neural_compressor.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.metric.metric)": [[294, "neural_compressor.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.metric.metric)": [[294, "neural_compressor.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.metric.metric)": [[294, "neural_compressor.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.metric.metric)": [[294, "neural_compressor.metric.metric.RMSE"]], "roc (class in neural_compressor.metric.metric)": [[294, "neural_compressor.metric.metric.ROC"]], "squadf1 (class in neural_compressor.metric.metric)": [[294, "neural_compressor.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.metric.metric)": [[294, "neural_compressor.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.metric.metric)": [[294, "neural_compressor.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.metric.metric)": [[294, "neural_compressor.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.metric.metric)": [[294, "neural_compressor.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.metric.metric)": [[294, "neural_compressor.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.metric.metric)": [[294, "neural_compressor.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.metric.metric)": [[294, "neural_compressor.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.metric.metric)": [[294, "neural_compressor.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.metric.metric.mae attribute)": [[294, "neural_compressor.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.metric.metric.mse attribute)": [[294, "neural_compressor.metric.metric.MSE.compare_label"]], "k (neural_compressor.metric.metric.generaltopk attribute)": [[294, "neural_compressor.metric.metric.GeneralTopK.k"]], "k (neural_compressor.metric.metric.tensorflowtopk attribute)": [[294, "neural_compressor.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.metric.metric.accuracy attribute)": [[294, "neural_compressor.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.metric.metric.mae attribute)": [[294, "neural_compressor.metric.metric.MAE.label_list"]], "label_list (neural_compressor.metric.metric.mse attribute)": [[294, "neural_compressor.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.metric.metric)": [[294, "neural_compressor.metric.metric.mIOU"]], "metric_registry() (in module neural_compressor.metric.metric)": [[294, "neural_compressor.metric.metric.metric_registry"]], "metrics (neural_compressor.metric.metric.metrics attribute)": [[294, "neural_compressor.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.metric.metric.mxnetmetrics attribute)": [[294, "neural_compressor.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtitmetrics attribute)": [[294, "neural_compressor.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtqlmetrics attribute)": [[294, "neural_compressor.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.metric.metric.pytorchmetrics attribute)": [[294, "neural_compressor.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.metric.metric.tensorflowmetrics attribute)": [[294, "neural_compressor.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.metric.metric.rmse attribute)": [[294, "neural_compressor.metric.metric.RMSE.mse"]], "neural_compressor.metric.metric": [[294, "module-neural_compressor.metric.metric"]], "num_correct (neural_compressor.metric.metric.generaltopk attribute)": [[294, "neural_compressor.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.metric.metric.tensorflowtopk attribute)": [[294, "neural_compressor.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.metric.metric.generaltopk attribute)": [[294, "neural_compressor.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.metric.metric.tensorflowtopk attribute)": [[294, "neural_compressor.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.metric.metric.accuracy attribute)": [[294, "neural_compressor.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.metric.metric.mae attribute)": [[294, "neural_compressor.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.metric.metric.mse attribute)": [[294, "neural_compressor.metric.metric.MSE.pred_list"]], "sample (neural_compressor.metric.metric.accuracy attribute)": [[294, "neural_compressor.metric.metric.Accuracy.sample"]], "sample (neural_compressor.metric.metric.loss attribute)": [[294, "neural_compressor.metric.metric.Loss.sample"]], "sum (neural_compressor.metric.metric.loss attribute)": [[294, "neural_compressor.metric.metric.Loss.sum"]], "mixedprecision (class in neural_compressor.mix_precision)": [[295, "neural_compressor.mix_precision.MixedPrecision"]], "fit() (in module neural_compressor.mix_precision)": [[295, "neural_compressor.mix_precision.fit"]], "neural_compressor.mix_precision": [[295, "module-neural_compressor.mix_precision"]], "basemodel (class in neural_compressor.model.base_model)": [[296, "neural_compressor.model.base_model.BaseModel"]], "neural_compressor.model.base_model": [[296, "module-neural_compressor.model.base_model"]], "neural_compressor.model": [[297, "module-neural_compressor.model"]], "kerasmodel (class in neural_compressor.model.keras_model)": [[298, "neural_compressor.model.keras_model.KerasModel"]], "neural_compressor.model.keras_model": [[298, "module-neural_compressor.model.keras_model"]], "model (class in neural_compressor.model.model)": [[299, "neural_compressor.model.model.Model"]], "get_model_fwk_name() (in module neural_compressor.model.model)": [[299, "neural_compressor.model.model.get_model_fwk_name"]], "neural_compressor.model.model": [[299, "module-neural_compressor.model.model"]], "mxnetmodel (class in neural_compressor.model.mxnet_model)": [[300, "neural_compressor.model.mxnet_model.MXNetModel"]], "neural_compressor.model.mxnet_model": [[300, "module-neural_compressor.model.mxnet_model"]], "tfslimnetsfactory (class in neural_compressor.model.nets_factory)": [[301, "neural_compressor.model.nets_factory.TFSlimNetsFactory"]], "neural_compressor.model.nets_factory": [[301, "module-neural_compressor.model.nets_factory"]], "onnxmodel (class in neural_compressor.model.onnx_model)": [[302, "neural_compressor.model.onnx_model.ONNXModel"]], "neural_compressor.model.onnx_model": [[302, "module-neural_compressor.model.onnx_model"]], "tensorflowbasemodel (class in neural_compressor.model.tensorflow_model)": [[303, "neural_compressor.model.tensorflow_model.TensorflowBaseModel"]], "tensorflowcheckpointmodel (class in neural_compressor.model.tensorflow_model)": [[303, "neural_compressor.model.tensorflow_model.TensorflowCheckpointModel"]], "tensorflowmodel (class in neural_compressor.model.tensorflow_model)": [[303, "neural_compressor.model.tensorflow_model.TensorflowModel"]], "tensorflowqatmodel (class in neural_compressor.model.tensorflow_model)": [[303, "neural_compressor.model.tensorflow_model.TensorflowQATModel"]], "tensorflowsavedmodelmodel (class in neural_compressor.model.tensorflow_model)": [[303, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel"]], "checkpoint_session() (in module neural_compressor.model.tensorflow_model)": [[303, "neural_compressor.model.tensorflow_model.checkpoint_session"]], "estimator_session() (in module neural_compressor.model.tensorflow_model)": [[303, "neural_compressor.model.tensorflow_model.estimator_session"]], "frozen_pb_session() (in module neural_compressor.model.tensorflow_model)": [[303, "neural_compressor.model.tensorflow_model.frozen_pb_session"]], "get_model_type() (in module neural_compressor.model.tensorflow_model)": [[303, "neural_compressor.model.tensorflow_model.get_model_type"]], "graph_def_session() (in module neural_compressor.model.tensorflow_model)": [[303, "neural_compressor.model.tensorflow_model.graph_def_session"]], "graph_session() (in module neural_compressor.model.tensorflow_model)": [[303, "neural_compressor.model.tensorflow_model.graph_session"]], "keras_session() (in module neural_compressor.model.tensorflow_model)": [[303, "neural_compressor.model.tensorflow_model.keras_session"]], "load_saved_model() (in module neural_compressor.model.tensorflow_model)": [[303, "neural_compressor.model.tensorflow_model.load_saved_model"]], "neural_compressor.model.tensorflow_model": [[303, "module-neural_compressor.model.tensorflow_model"]], "saved_model_session() (in module neural_compressor.model.tensorflow_model)": [[303, "neural_compressor.model.tensorflow_model.saved_model_session"]], "slim_session() (in module neural_compressor.model.tensorflow_model)": [[303, "neural_compressor.model.tensorflow_model.slim_session"]], "validate_and_inference_input_output() (in module neural_compressor.model.tensorflow_model)": [[303, "neural_compressor.model.tensorflow_model.validate_and_inference_input_output"]], "validate_graph_node() (in module neural_compressor.model.tensorflow_model)": [[303, "neural_compressor.model.tensorflow_model.validate_graph_node"]], "ipexmodel (class in neural_compressor.model.torch_model)": [[304, "neural_compressor.model.torch_model.IPEXModel"]], "pytorchbasemodel (class in neural_compressor.model.torch_model)": [[304, "neural_compressor.model.torch_model.PyTorchBaseModel"]], "pytorchfxmodel (class in neural_compressor.model.torch_model)": [[304, "neural_compressor.model.torch_model.PyTorchFXModel"]], "pytorchmodel (class in neural_compressor.model.torch_model)": [[304, "neural_compressor.model.torch_model.PyTorchModel"]], "neural_compressor.model.torch_model": [[304, "module-neural_compressor.model.torch_model"]], "accuracy (class in neural_compressor.objective)": [[305, "neural_compressor.objective.Accuracy"]], "footprint (class in neural_compressor.objective)": [[305, "neural_compressor.objective.Footprint"]], "modelsize (class in neural_compressor.objective)": [[305, "neural_compressor.objective.ModelSize"]], "multiobjective (class in neural_compressor.objective)": [[305, "neural_compressor.objective.MultiObjective"]], "objective (class in neural_compressor.objective)": [[305, "neural_compressor.objective.Objective"]], "performance (class in neural_compressor.objective)": [[305, "neural_compressor.objective.Performance"]], "neural_compressor.objective": [[305, "module-neural_compressor.objective"]], "objective_custom_registry() (in module neural_compressor.objective)": [[305, "neural_compressor.objective.objective_custom_registry"]], "objective_registry() (in module neural_compressor.objective)": [[305, "neural_compressor.objective.objective_registry"]], "posttrainingquant (class in neural_compressor.quantization)": [[306, "neural_compressor.quantization.PostTrainingQuant"]], "fit() (in module neural_compressor.quantization)": [[306, "neural_compressor.quantization.fit"]], "neural_compressor.quantization": [[306, "module-neural_compressor.quantization"]], "autotunestrategy (class in neural_compressor.strategy.auto)": [[307, "neural_compressor.strategy.auto.AutoTuneStrategy"]], "neural_compressor.strategy.auto": [[307, "module-neural_compressor.strategy.auto"]], "automixedprecisiontunestrategy (class in neural_compressor.strategy.auto_mixed_precision)": [[308, "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[308, "module-neural_compressor.strategy.auto_mixed_precision"]], "basictunestrategy (class in neural_compressor.strategy.basic)": [[309, "neural_compressor.strategy.basic.BasicTuneStrategy"]], "neural_compressor.strategy.basic": [[309, "module-neural_compressor.strategy.basic"]], "bayesianoptimization (class in neural_compressor.strategy.bayesian)": [[310, "neural_compressor.strategy.bayesian.BayesianOptimization"]], "bayesiantunestrategy (class in neural_compressor.strategy.bayesian)": [[310, "neural_compressor.strategy.bayesian.BayesianTuneStrategy"]], "targetspace (class in neural_compressor.strategy.bayesian)": [[310, "neural_compressor.strategy.bayesian.TargetSpace"]], "acq_max() (in module neural_compressor.strategy.bayesian)": [[310, "neural_compressor.strategy.bayesian.acq_max"]], "neural_compressor.strategy.bayesian": [[310, "module-neural_compressor.strategy.bayesian"]], "conservativetunestrategy (class in neural_compressor.strategy.conservative)": [[311, "neural_compressor.strategy.conservative.ConservativeTuneStrategy"]], "neural_compressor.strategy.conservative": [[311, "module-neural_compressor.strategy.conservative"]], "exhaustivetunestrategy (class in neural_compressor.strategy.exhaustive)": [[312, "neural_compressor.strategy.exhaustive.ExhaustiveTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[312, "module-neural_compressor.strategy.exhaustive"]], "hawq_v2tunestrategy (class in neural_compressor.strategy.hawq_v2)": [[313, "neural_compressor.strategy.hawq_v2.HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.hawq_v2": [[313, "module-neural_compressor.strategy.hawq_v2"]], "neural_compressor.strategy": [[314, "module-neural_compressor.strategy"]], "msetunestrategy (class in neural_compressor.strategy.mse)": [[315, "neural_compressor.strategy.mse.MSETuneStrategy"]], "neural_compressor.strategy.mse": [[315, "module-neural_compressor.strategy.mse"]], "mse_v2tunestrategy (class in neural_compressor.strategy.mse_v2)": [[316, "neural_compressor.strategy.mse_v2.MSE_V2TuneStrategy"]], "neural_compressor.strategy.mse_v2": [[316, "module-neural_compressor.strategy.mse_v2"]], "randomtunestrategy (class in neural_compressor.strategy.random)": [[317, "neural_compressor.strategy.random.RandomTuneStrategy"]], "neural_compressor.strategy.random": [[317, "module-neural_compressor.strategy.random"]], "tunestrategy (class in neural_compressor.strategy.strategy)": [[318, "neural_compressor.strategy.strategy.TuneStrategy"]], "neural_compressor.strategy.strategy": [[318, "module-neural_compressor.strategy.strategy"]], "strategy_registry() (in module neural_compressor.strategy.strategy)": [[318, "neural_compressor.strategy.strategy.strategy_registry"]], "neural_compressor.strategy.utils.constant": [[319, "module-neural_compressor.strategy.utils.constant"]], "neural_compressor.strategy.utils": [[320, "module-neural_compressor.strategy.utils"]], "fallbacktuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[321, "neural_compressor.strategy.utils.tuning_sampler.FallbackTuningSampler"]], "modelwisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[321, "neural_compressor.strategy.utils.tuning_sampler.ModelWiseTuningSampler"]], "optypewisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[321, "neural_compressor.strategy.utils.tuning_sampler.OpTypeWiseTuningSampler"]], "opwisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[321, "neural_compressor.strategy.utils.tuning_sampler.OpWiseTuningSampler"]], "smoothquantsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[321, "neural_compressor.strategy.utils.tuning_sampler.SmoothQuantSampler"]], "tuningorder (class in neural_compressor.strategy.utils.tuning_sampler)": [[321, "neural_compressor.strategy.utils.tuning_sampler.TuningOrder"]], "tuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[321, "neural_compressor.strategy.utils.tuning_sampler.TuningSampler"]], "tuningsamplerregistry (class in neural_compressor.strategy.utils.tuning_sampler)": [[321, "neural_compressor.strategy.utils.tuning_sampler.TuningSamplerRegistry"]], "neural_compressor.strategy.utils.tuning_sampler": [[321, "module-neural_compressor.strategy.utils.tuning_sampler"]], "tuningitem (class in neural_compressor.strategy.utils.tuning_space)": [[322, "neural_compressor.strategy.utils.tuning_space.TuningItem"]], "tuningspace (class in neural_compressor.strategy.utils.tuning_space)": [[322, "neural_compressor.strategy.utils.tuning_space.TuningSpace"]], "get_op_mode_by_query_order() (in module neural_compressor.strategy.utils.tuning_space)": [[322, "neural_compressor.strategy.utils.tuning_space.get_op_mode_by_query_order"]], "initial_tuning_cfg_with_quant_mode() (in module neural_compressor.strategy.utils.tuning_space)": [[322, "neural_compressor.strategy.utils.tuning_space.initial_tuning_cfg_with_quant_mode"]], "neural_compressor.strategy.utils.tuning_space": [[322, "module-neural_compressor.strategy.utils.tuning_space"]], "pattern_to_internal() (in module neural_compressor.strategy.utils.tuning_space)": [[322, "neural_compressor.strategy.utils.tuning_space.pattern_to_internal"]], "pattern_to_path() (in module neural_compressor.strategy.utils.tuning_space)": [[322, "neural_compressor.strategy.utils.tuning_space.pattern_to_path"]], "quant_mode_from_pattern() (in module neural_compressor.strategy.utils.tuning_space)": [[322, "neural_compressor.strategy.utils.tuning_space.quant_mode_from_pattern"]], "optuningconfig (class in neural_compressor.strategy.utils.tuning_structs)": [[323, "neural_compressor.strategy.utils.tuning_structs.OpTuningConfig"]], "neural_compressor.strategy.utils.tuning_structs": [[323, "module-neural_compressor.strategy.utils.tuning_structs"]], "ordereddefaultdict (class in neural_compressor.strategy.utils.utility)": [[324, "neural_compressor.strategy.utils.utility.OrderedDefaultDict"]], "extract_data_type() (in module neural_compressor.strategy.utils.utility)": [[324, "neural_compressor.strategy.utils.utility.extract_data_type"]], "get_adaptor_name() (in module neural_compressor.strategy.utils.utility)": [[324, "neural_compressor.strategy.utils.utility.get_adaptor_name"]], "neural_compressor.strategy.utils.utility": [[324, "module-neural_compressor.strategy.utils.utility"]], "reverted_data_type() (in module neural_compressor.strategy.utils.utility)": [[324, "neural_compressor.strategy.utils.utility.reverted_data_type"]], "exampleclass (class in neural_compressor.template.api_doc_example)": [[325, "neural_compressor.template.api_doc_example.ExampleClass"]], "attr1 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[325, "neural_compressor.template.api_doc_example.ExampleClass.attr1"]], "attr2 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[325, "neural_compressor.template.api_doc_example.ExampleClass.attr2"]], "attr5 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[325, "neural_compressor.template.api_doc_example.ExampleClass.attr5"]], "attribute1 (in module neural_compressor.template.api_doc_example)": [[325, "neural_compressor.template.api_doc_example.attribute1"]], "function1() (in module neural_compressor.template.api_doc_example)": [[325, "neural_compressor.template.api_doc_example.function1"]], "function2() (in module neural_compressor.template.api_doc_example)": [[325, "neural_compressor.template.api_doc_example.function2"]], "function3() (in module neural_compressor.template.api_doc_example)": [[325, "neural_compressor.template.api_doc_example.function3"]], "generator1() (in module neural_compressor.template.api_doc_example)": [[325, "neural_compressor.template.api_doc_example.generator1"]], "module_debug_level1 (in module neural_compressor.template.api_doc_example)": [[325, "neural_compressor.template.api_doc_example.module_debug_level1"]], "neural_compressor.template.api_doc_example": [[325, "module-neural_compressor.template.api_doc_example"]], "neural_compressor.template": [[326, "module-neural_compressor.template"]], "callbacks (class in neural_compressor.training)": [[327, "neural_compressor.training.CallBacks"]], "compressionmanager (class in neural_compressor.training)": [[327, "neural_compressor.training.CompressionManager"]], "fit() (in module neural_compressor.training)": [[327, "neural_compressor.training.fit"]], "neural_compressor.training": [[327, "module-neural_compressor.training"]], "prepare_compression() (in module neural_compressor.training)": [[327, "neural_compressor.training.prepare_compression"]], "layerhistogramcollector (class in neural_compressor.utils.collect_layer_histogram)": [[328, "neural_compressor.utils.collect_layer_histogram.LayerHistogramCollector"]], "neural_compressor.utils.collect_layer_histogram": [[328, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[329, "module-neural_compressor.utils.constant"]], "create_dataloader() (in module neural_compressor.utils.create_obj_from_config)": [[330, "neural_compressor.utils.create_obj_from_config.create_dataloader"]], "create_dataset() (in module neural_compressor.utils.create_obj_from_config)": [[330, "neural_compressor.utils.create_obj_from_config.create_dataset"]], "create_eval_func() (in module neural_compressor.utils.create_obj_from_config)": [[330, "neural_compressor.utils.create_obj_from_config.create_eval_func"]], "create_train_func() (in module neural_compressor.utils.create_obj_from_config)": [[330, "neural_compressor.utils.create_obj_from_config.create_train_func"]], "get_algorithm() (in module neural_compressor.utils.create_obj_from_config)": [[330, "neural_compressor.utils.create_obj_from_config.get_algorithm"]], "get_func_from_config() (in module neural_compressor.utils.create_obj_from_config)": [[330, "neural_compressor.utils.create_obj_from_config.get_func_from_config"]], "get_metrics() (in module neural_compressor.utils.create_obj_from_config)": [[330, "neural_compressor.utils.create_obj_from_config.get_metrics"]], "get_postprocess() (in module neural_compressor.utils.create_obj_from_config)": [[330, "neural_compressor.utils.create_obj_from_config.get_postprocess"]], "get_preprocess() (in module neural_compressor.utils.create_obj_from_config)": [[330, "neural_compressor.utils.create_obj_from_config.get_preprocess"]], "neural_compressor.utils.create_obj_from_config": [[330, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils": [[331, "module-neural_compressor.utils"]], "kl_divergence (class in neural_compressor.utils.kl_divergence)": [[332, "neural_compressor.utils.kl_divergence.KL_Divergence"]], "neural_compressor.utils.kl_divergence": [[332, "module-neural_compressor.utils.kl_divergence"]], "optimizedmodel (class in neural_compressor.utils.load_huggingface)": [[333, "neural_compressor.utils.load_huggingface.OptimizedModel"]], "neural_compressor.utils.load_huggingface": [[333, "module-neural_compressor.utils.load_huggingface"]], "save_for_huggingface_upstream() (in module neural_compressor.utils.load_huggingface)": [[333, "neural_compressor.utils.load_huggingface.save_for_huggingface_upstream"]], "logger (class in neural_compressor.utils.logger)": [[334, "neural_compressor.utils.logger.Logger"]], "debug() (in module neural_compressor.utils.logger)": [[334, "neural_compressor.utils.logger.debug"]], "error() (in module neural_compressor.utils.logger)": [[334, "neural_compressor.utils.logger.error"]], "fatal() (in module neural_compressor.utils.logger)": [[334, "neural_compressor.utils.logger.fatal"]], "info() (in module neural_compressor.utils.logger)": [[334, "neural_compressor.utils.logger.info"]], "log() (in module neural_compressor.utils.logger)": [[334, "neural_compressor.utils.logger.log"]], "neural_compressor.utils.logger": [[334, "module-neural_compressor.utils.logger"]], "warn() (in module neural_compressor.utils.logger)": [[334, "neural_compressor.utils.logger.warn"]], "warning() (in module neural_compressor.utils.logger)": [[334, "neural_compressor.utils.logger.warning"]], "neural_compressor.utils.options": [[335, "module-neural_compressor.utils.options"]], "onnxrt (class in neural_compressor.utils.options)": [[335, "neural_compressor.utils.options.onnxrt"]], "is_int8_model() (in module neural_compressor.utils.pytorch)": [[336, "neural_compressor.utils.pytorch.is_int8_model"]], "load() (in module neural_compressor.utils.pytorch)": [[336, "neural_compressor.utils.pytorch.load"]], "neural_compressor.utils.pytorch": [[336, "module-neural_compressor.utils.pytorch"]], "captureoutputtofile (class in neural_compressor.utils.utility)": [[337, "neural_compressor.utils.utility.CaptureOutputToFile"]], "cpuinfo (class in neural_compressor.utils.utility)": [[337, "neural_compressor.utils.utility.CpuInfo"]], "dequantize() (in module neural_compressor.utils.utility)": [[337, "neural_compressor.utils.utility.Dequantize"]], "dequantizeweight() (in module neural_compressor.utils.utility)": [[337, "neural_compressor.utils.utility.DequantizeWeight"]], "global_state (class in neural_compressor.utils.utility)": [[337, "neural_compressor.utils.utility.GLOBAL_STATE"]], "lazyimport (class in neural_compressor.utils.utility)": [[337, "neural_compressor.utils.utility.LazyImport"]], "mode (class in neural_compressor.utils.utility)": [[337, "neural_compressor.utils.utility.MODE"]], "statistics (class in neural_compressor.utils.utility)": [[337, "neural_compressor.utils.utility.Statistics"]], "combine_histogram() (in module neural_compressor.utils.utility)": [[337, "neural_compressor.utils.utility.combine_histogram"]], "compute_sparsity() (in module neural_compressor.utils.utility)": [[337, "neural_compressor.utils.utility.compute_sparsity"]], "dump_data_to_local() (in module neural_compressor.utils.utility)": [[337, "neural_compressor.utils.utility.dump_data_to_local"]], "dump_elapsed_time() (in module neural_compressor.utils.utility)": [[337, "neural_compressor.utils.utility.dump_elapsed_time"]], "equal_dicts() (in module neural_compressor.utils.utility)": [[337, "neural_compressor.utils.utility.equal_dicts"]], "fault_tolerant_file() (in module neural_compressor.utils.utility)": [[337, "neural_compressor.utils.utility.fault_tolerant_file"]], "get_all_fp32_data() (in module neural_compressor.utils.utility)": [[337, "neural_compressor.utils.utility.get_all_fp32_data"]], "get_size() (in module neural_compressor.utils.utility)": [[337, "neural_compressor.utils.utility.get_size"]], "get_tensor_histogram() (in module neural_compressor.utils.utility)": [[337, "neural_compressor.utils.utility.get_tensor_histogram"]], "get_tuning_history() (in module neural_compressor.utils.utility)": [[337, "neural_compressor.utils.utility.get_tuning_history"]], "load_data_from_pkl() (in module neural_compressor.utils.utility)": [[337, "neural_compressor.utils.utility.load_data_from_pkl"]], "neural_compressor.utils.utility": [[337, "module-neural_compressor.utils.utility"]], "recover() (in module neural_compressor.utils.utility)": [[337, "neural_compressor.utils.utility.recover"]], "set_random_seed() (in module neural_compressor.utils.utility)": [[337, "neural_compressor.utils.utility.set_random_seed"]], "set_resume_from() (in module neural_compressor.utils.utility)": [[337, "neural_compressor.utils.utility.set_resume_from"]], "set_tensorboard() (in module neural_compressor.utils.utility)": [[337, "neural_compressor.utils.utility.set_tensorboard"]], "set_workspace() (in module neural_compressor.utils.utility)": [[337, "neural_compressor.utils.utility.set_workspace"]], "show_memory_info() (in module neural_compressor.utils.utility)": [[337, "neural_compressor.utils.utility.show_memory_info"]], "singleton() (in module neural_compressor.utils.utility)": [[337, "neural_compressor.utils.utility.singleton"]], "str2array() (in module neural_compressor.utils.utility)": [[337, "neural_compressor.utils.utility.str2array"]], "time_limit() (in module neural_compressor.utils.utility)": [[337, "neural_compressor.utils.utility.time_limit"]], "version1_eq_version2() (in module neural_compressor.utils.utility)": [[337, "neural_compressor.utils.utility.version1_eq_version2"]], "version1_gt_version2() (in module neural_compressor.utils.utility)": [[337, "neural_compressor.utils.utility.version1_gt_version2"]], "version1_gte_version2() (in module neural_compressor.utils.utility)": [[337, "neural_compressor.utils.utility.version1_gte_version2"]], "version1_lt_version2() (in module neural_compressor.utils.utility)": [[337, "neural_compressor.utils.utility.version1_lt_version2"]], "version1_lte_version2() (in module neural_compressor.utils.utility)": [[337, "neural_compressor.utils.utility.version1_lte_version2"]], "benchmark (class in neural_compressor.ux.components.benchmark.benchmark)": [[338, "neural_compressor.ux.components.benchmark.benchmark.Benchmark"]], "dataloaderinterface (class in neural_compressor.ux.components.benchmark.benchmark)": [[338, "neural_compressor.ux.components.benchmark.benchmark.DataloaderInterface"]], "neural_compressor.ux.components.benchmark.benchmark": [[338, "module-neural_compressor.ux.components.benchmark.benchmark"]], "benchmark_model() (in module neural_compressor.ux.components.benchmark.benchmark_model)": [[339, "neural_compressor.ux.components.benchmark.benchmark_model.benchmark_model"]], "neural_compressor.ux.components.benchmark.benchmark_model": [[339, "module-neural_compressor.ux.components.benchmark.benchmark_model"]], "parse_args() (in module neural_compressor.ux.components.benchmark.benchmark_model)": [[339, "neural_compressor.ux.components.benchmark.benchmark_model.parse_args"]], "set_eager_execution() (in module neural_compressor.ux.components.benchmark.benchmark_model)": [[339, "neural_compressor.ux.components.benchmark.benchmark_model.set_eager_execution"]], "benchmark_result_update() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[340, "neural_compressor.ux.components.benchmark.execute_benchmark.benchmark_result_update"]], "benchmark_result_update_pytorch_script() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[340, "neural_compressor.ux.components.benchmark.execute_benchmark.benchmark_result_update_pytorch_script"]], "execute_benchmark() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[340, "neural_compressor.ux.components.benchmark.execute_benchmark.execute_benchmark"]], "execute_real_benchmark() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[340, "neural_compressor.ux.components.benchmark.execute_benchmark.execute_real_benchmark"]], "neural_compressor.ux.components.benchmark.execute_benchmark": [[340, "module-neural_compressor.ux.components.benchmark.execute_benchmark"]], "pytorch_script_bench_optimizations() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[340, "neural_compressor.ux.components.benchmark.execute_benchmark.pytorch_script_bench_optimizations"]], "pytorch_script_bench_original_model() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[340, "neural_compressor.ux.components.benchmark.execute_benchmark.pytorch_script_bench_original_model"]], "benchmarks (class in neural_compressor.ux.components.benchmark)": [[341, "neural_compressor.ux.components.benchmark.Benchmarks"]], "neural_compressor.ux.components.benchmark": [[341, "module-neural_compressor.ux.components.benchmark"]], "benchmarkconfiggenerator (class in neural_compressor.ux.components.config_generator.benchmark_config_generator)": [[342, "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator"]], "neural_compressor.ux.components.config_generator.benchmark_config_generator": [[342, "module-neural_compressor.ux.components.config_generator.benchmark_config_generator"]], "configgenerator (class in neural_compressor.ux.components.config_generator.config_generator)": [[343, "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator"]], "neural_compressor.ux.components.config_generator.config_generator": [[343, "module-neural_compressor.ux.components.config_generator.config_generator"]], "graphoptimizationconfiggenerator (class in neural_compressor.ux.components.config_generator.graph_optimization_config_generator)": [[344, "neural_compressor.ux.components.config_generator.graph_optimization_config_generator.GraphOptimizationConfigGenerator"]], "neural_compressor.ux.components.config_generator.graph_optimization_config_generator": [[344, "module-neural_compressor.ux.components.config_generator.graph_optimization_config_generator"]], "neural_compressor.ux.components.config_generator": [[345, "module-neural_compressor.ux.components.config_generator"]], "mixedprecisionconfiggenerator (class in neural_compressor.ux.components.config_generator.mixed_precision_config_generator)": [[346, "neural_compressor.ux.components.config_generator.mixed_precision_config_generator.MixedPrecisionConfigGenerator"]], "neural_compressor.ux.components.config_generator.mixed_precision_config_generator": [[346, "module-neural_compressor.ux.components.config_generator.mixed_precision_config_generator"]], "profilingconfiggenerator (class in neural_compressor.ux.components.config_generator.profiling_config_generator)": [[347, "neural_compressor.ux.components.config_generator.profiling_config_generator.ProfilingConfigGenerator"]], "neural_compressor.ux.components.config_generator.profiling_config_generator": [[347, "module-neural_compressor.ux.components.config_generator.profiling_config_generator"]], "pruningconfiggenerator (class in neural_compressor.ux.components.config_generator.pruning_config_generator)": [[348, "neural_compressor.ux.components.config_generator.pruning_config_generator.PruningConfigGenerator"]], "neural_compressor.ux.components.config_generator.pruning_config_generator": [[348, "module-neural_compressor.ux.components.config_generator.pruning_config_generator"]], "quantizationconfiggenerator (class in neural_compressor.ux.components.config_generator.quantization_config_generator)": [[349, "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator"]], "neural_compressor.ux.components.config_generator.quantization_config_generator": [[349, "module-neural_compressor.ux.components.config_generator.quantization_config_generator"]], "configurationparser (class in neural_compressor.ux.components.configuration_wizard.configuration_parser)": [[350, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser"]], "neural_compressor.ux.components.configuration_wizard.configuration_parser": [[350, "module-neural_compressor.ux.components.configuration_wizard.configuration_parser"]], "normalize_string_list() (in module neural_compressor.ux.components.configuration_wizard.configuration_parser)": [[350, "neural_compressor.ux.components.configuration_wizard.configuration_parser.normalize_string_list"]], "parse_list_value() (in module neural_compressor.ux.components.configuration_wizard.configuration_parser)": [[350, "neural_compressor.ux.components.configuration_wizard.configuration_parser.parse_list_value"]], "parse_multidim_list() (in module neural_compressor.ux.components.configuration_wizard.configuration_parser)": [[350, "neural_compressor.ux.components.configuration_wizard.configuration_parser.parse_multidim_list"]], "get_boundary_nodes() (in module neural_compressor.ux.components.configuration_wizard.get_boundary_nodes)": [[351, "neural_compressor.ux.components.configuration_wizard.get_boundary_nodes.get_boundary_nodes"]], "neural_compressor.ux.components.configuration_wizard.get_boundary_nodes": [[351, "module-neural_compressor.ux.components.configuration_wizard.get_boundary_nodes"]], "get_predefined_configuration() (in module neural_compressor.ux.components.configuration_wizard.get_configuration)": [[352, "neural_compressor.ux.components.configuration_wizard.get_configuration.get_predefined_configuration"]], "neural_compressor.ux.components.configuration_wizard.get_configuration": [[352, "module-neural_compressor.ux.components.configuration_wizard.get_configuration"]], "update_config_to_machine_specification() (in module neural_compressor.ux.components.configuration_wizard.get_configuration)": [[352, "neural_compressor.ux.components.configuration_wizard.get_configuration.update_config_to_machine_specification"]], "neural_compressor.ux.components.configuration_wizard": [[353, "module-neural_compressor.ux.components.configuration_wizard"]], "feeder (class in neural_compressor.ux.components.configuration_wizard.params_feeder)": [[354, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder"]], "get_possible_values() (in module neural_compressor.ux.components.configuration_wizard.params_feeder)": [[354, "neural_compressor.ux.components.configuration_wizard.params_feeder.get_possible_values"]], "neural_compressor.ux.components.configuration_wizard.params_feeder": [[354, "module-neural_compressor.ux.components.configuration_wizard.params_feeder"]], "pruningconfigparser (class in neural_compressor.ux.components.configuration_wizard.pruning_config_parser)": [[355, "neural_compressor.ux.components.configuration_wizard.pruning_config_parser.PruningConfigParser"]], "neural_compressor.ux.components.configuration_wizard.pruning_config_parser": [[355, "module-neural_compressor.ux.components.configuration_wizard.pruning_config_parser"]], "dbmanager (class in neural_compressor.ux.components.db_manager.db_manager)": [[356, "neural_compressor.ux.components.db_manager.db_manager.DBManager"]], "neural_compressor.ux.components.db_manager.db_manager": [[356, "module-neural_compressor.ux.components.db_manager.db_manager"]], "benchmark (class in neural_compressor.ux.components.db_manager.db_models.benchmark)": [[357, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark"]], "neural_compressor.ux.components.db_manager.db_models.benchmark": [[357, "module-neural_compressor.ux.components.db_manager.db_models.benchmark"]], "benchmarkresult (class in neural_compressor.ux.components.db_manager.db_models.benchmark_result)": [[358, "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult"]], "neural_compressor.ux.components.db_manager.db_models.benchmark_result": [[358, "module-neural_compressor.ux.components.db_manager.db_models.benchmark_result"]], "dataloader (class in neural_compressor.ux.components.db_manager.db_models.dataloader)": [[359, "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.dataloader)": [[359, "neural_compressor.ux.components.db_manager.db_models.dataloader.fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.dataloader": [[359, "module-neural_compressor.ux.components.db_manager.db_models.dataloader"]], "dataset (class in neural_compressor.ux.components.db_manager.db_models.dataset)": [[360, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset"]], "neural_compressor.ux.components.db_manager.db_models.dataset": [[360, "module-neural_compressor.ux.components.db_manager.db_models.dataset"]], "domain (class in neural_compressor.ux.components.db_manager.db_models.domain)": [[361, "neural_compressor.ux.components.db_manager.db_models.domain.Domain"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.domain)": [[361, "neural_compressor.ux.components.db_manager.db_models.domain.fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.domain": [[361, "module-neural_compressor.ux.components.db_manager.db_models.domain"]], "domainflavour (class in neural_compressor.ux.components.db_manager.db_models.domain_flavour)": [[362, "neural_compressor.ux.components.db_manager.db_models.domain_flavour.DomainFlavour"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.domain_flavour)": [[362, "neural_compressor.ux.components.db_manager.db_models.domain_flavour.fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.domain_flavour": [[362, "module-neural_compressor.ux.components.db_manager.db_models.domain_flavour"]], "example (class in neural_compressor.ux.components.db_manager.db_models.example)": [[363, "neural_compressor.ux.components.db_manager.db_models.example.Example"]], "neural_compressor.ux.components.db_manager.db_models.example": [[363, "module-neural_compressor.ux.components.db_manager.db_models.example"]], "framework (class in neural_compressor.ux.components.db_manager.db_models.framework)": [[364, "neural_compressor.ux.components.db_manager.db_models.framework.Framework"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.framework)": [[364, "neural_compressor.ux.components.db_manager.db_models.framework.fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.framework": [[364, "module-neural_compressor.ux.components.db_manager.db_models.framework"]], "neural_compressor.ux.components.db_manager.db_models": [[365, "module-neural_compressor.ux.components.db_manager.db_models"]], "metric (class in neural_compressor.ux.components.db_manager.db_models.metric)": [[366, "neural_compressor.ux.components.db_manager.db_models.metric.Metric"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.metric)": [[366, "neural_compressor.ux.components.db_manager.db_models.metric.fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.metric": [[366, "module-neural_compressor.ux.components.db_manager.db_models.metric"]], "model (class in neural_compressor.ux.components.db_manager.db_models.model)": [[367, "neural_compressor.ux.components.db_manager.db_models.model.Model"]], "neural_compressor.ux.components.db_manager.db_models.model": [[367, "module-neural_compressor.ux.components.db_manager.db_models.model"]], "optimization (class in neural_compressor.ux.components.db_manager.db_models.optimization)": [[368, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization"]], "neural_compressor.ux.components.db_manager.db_models.optimization": [[368, "module-neural_compressor.ux.components.db_manager.db_models.optimization"]], "optimizationtype (class in neural_compressor.ux.components.db_manager.db_models.optimization_type)": [[369, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.optimization_type)": [[369, "neural_compressor.ux.components.db_manager.db_models.optimization_type.fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.optimization_type": [[369, "module-neural_compressor.ux.components.db_manager.db_models.optimization_type"]], "precision (class in neural_compressor.ux.components.db_manager.db_models.precision)": [[370, "neural_compressor.ux.components.db_manager.db_models.precision.Precision"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.precision)": [[370, "neural_compressor.ux.components.db_manager.db_models.precision.fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.precision": [[370, "module-neural_compressor.ux.components.db_manager.db_models.precision"]], "profiling (class in neural_compressor.ux.components.db_manager.db_models.profiling)": [[371, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling"]], "neural_compressor.ux.components.db_manager.db_models.profiling": [[371, "module-neural_compressor.ux.components.db_manager.db_models.profiling"]], "profilingresult (class in neural_compressor.ux.components.db_manager.db_models.profiling_result)": [[372, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult"]], "neural_compressor.ux.components.db_manager.db_models.profiling_result": [[372, "module-neural_compressor.ux.components.db_manager.db_models.profiling_result"]], "project (class in neural_compressor.ux.components.db_manager.db_models.project)": [[373, "neural_compressor.ux.components.db_manager.db_models.project.Project"]], "neural_compressor.ux.components.db_manager.db_models.project": [[373, "module-neural_compressor.ux.components.db_manager.db_models.project"]], "pruningdetails (class in neural_compressor.ux.components.db_manager.db_models.pruning_details)": [[374, "neural_compressor.ux.components.db_manager.db_models.pruning_details.PruningDetails"]], "neural_compressor.ux.components.db_manager.db_models.pruning_details": [[374, "module-neural_compressor.ux.components.db_manager.db_models.pruning_details"]], "transform (class in neural_compressor.ux.components.db_manager.db_models.transform)": [[375, "neural_compressor.ux.components.db_manager.db_models.transform.Transform"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.transform)": [[375, "neural_compressor.ux.components.db_manager.db_models.transform.fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.transform": [[375, "module-neural_compressor.ux.components.db_manager.db_models.transform"]], "tuningdetails (class in neural_compressor.ux.components.db_manager.db_models.tuning_details)": [[376, "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails"]], "neural_compressor.ux.components.db_manager.db_models.tuning_details": [[376, "module-neural_compressor.ux.components.db_manager.db_models.tuning_details"]], "tuninghistory (class in neural_compressor.ux.components.db_manager.db_models.tuning_history)": [[377, "neural_compressor.ux.components.db_manager.db_models.tuning_history.TuningHistory"]], "neural_compressor.ux.components.db_manager.db_models.tuning_history": [[377, "module-neural_compressor.ux.components.db_manager.db_models.tuning_history"]], "benchmarkapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface)": [[378, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface"]], "before_delete_benchmark_entry() (in module neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface)": [[378, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.before_delete_benchmark_entry"]], "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface": [[378, "module-neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface"]], "datasetapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[379, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface"]], "initialize_associations() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[379, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.initialize_associations"]], "initialize_precision_optimization_types_association() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[379, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.initialize_precision_optimization_types_association"]], "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface": [[379, "module-neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface"]], "search_in_list_of_dict() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[379, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.search_in_list_of_dict"]], "search_in_list_of_dict_for_unique_value() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[379, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.search_in_list_of_dict_for_unique_value"]], "set_database_version() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[379, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.set_database_version"]], "initialize_associations() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[380, "neural_compressor.ux.components.db_manager.db_operations.db_operations.initialize_associations"]], "initialize_precision_optimization_types_association() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[380, "neural_compressor.ux.components.db_manager.db_operations.db_operations.initialize_precision_optimization_types_association"]], "neural_compressor.ux.components.db_manager.db_operations.db_operations": [[380, "module-neural_compressor.ux.components.db_manager.db_operations.db_operations"]], "search_in_list_of_dict() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[380, "neural_compressor.ux.components.db_manager.db_operations.db_operations.search_in_list_of_dict"]], "search_in_list_of_dict_for_unique_value() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[380, "neural_compressor.ux.components.db_manager.db_operations.db_operations.search_in_list_of_dict_for_unique_value"]], "set_database_version() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[380, "neural_compressor.ux.components.db_manager.db_operations.db_operations.set_database_version"]], "diagnosisapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface)": [[381, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface": [[381, "module-neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface"]], "dictionariesapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface)": [[382, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface": [[382, "module-neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface"]], "examplesapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.examples_api_interface)": [[383, "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.ExamplesAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface": [[383, "module-neural_compressor.ux.components.db_manager.db_operations.examples_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations": [[384, "module-neural_compressor.ux.components.db_manager.db_operations"]], "modelapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.model_api_interface)": [[385, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.model_api_interface": [[385, "module-neural_compressor.ux.components.db_manager.db_operations.model_api_interface"]], "optimizationapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface)": [[386, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface": [[386, "module-neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface"]], "profilingapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface)": [[387, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface": [[387, "module-neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface"]], "projectapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.project_api_interface)": [[388, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.project_api_interface": [[388, "module-neural_compressor.ux.components.db_manager.db_operations.project_api_interface"]], "neural_compressor.ux.components.db_manager": [[389, "module-neural_compressor.ux.components.db_manager"]], "benchmarkaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[390, "neural_compressor.ux.components.db_manager.params_interfaces.BenchmarkAddParamsInterface"]], "benchmarkeditparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[390, "neural_compressor.ux.components.db_manager.params_interfaces.BenchmarkEditParamsInterface"]], "datasetaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[390, "neural_compressor.ux.components.db_manager.params_interfaces.DatasetAddParamsInterface"]], "diagnosisoptimizationparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[390, "neural_compressor.ux.components.db_manager.params_interfaces.DiagnosisOptimizationParamsInterface"]], "modeladdparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[390, "neural_compressor.ux.components.db_manager.params_interfaces.ModelAddParamsInterface"]], "optimizationaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[390, "neural_compressor.ux.components.db_manager.params_interfaces.OptimizationAddParamsInterface"]], "optimizationeditparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[390, "neural_compressor.ux.components.db_manager.params_interfaces.OptimizationEditParamsInterface"]], "profilingaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[390, "neural_compressor.ux.components.db_manager.params_interfaces.ProfilingAddParamsInterface"]], "profilingeditparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[390, "neural_compressor.ux.components.db_manager.params_interfaces.ProfilingEditParamsInterface"]], "profilingresultaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[390, "neural_compressor.ux.components.db_manager.params_interfaces.ProfilingResultAddParamsInterface"]], "tuninghistoryinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[390, "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryInterface"]], "tuninghistoryiteminterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[390, "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryItemInterface"]], "neural_compressor.ux.components.db_manager.params_interfaces": [[390, "module-neural_compressor.ux.components.db_manager.params_interfaces"]], "get_framework_dataloaders_config() (in module neural_compressor.ux.components.db_manager.utils)": [[391, "neural_compressor.ux.components.db_manager.utils.get_framework_dataloaders_config"]], "get_framework_transforms_config() (in module neural_compressor.ux.components.db_manager.utils)": [[391, "neural_compressor.ux.components.db_manager.utils.get_framework_transforms_config"]], "neural_compressor.ux.components.db_manager.utils": [[391, "module-neural_compressor.ux.components.db_manager.utils"]], "update_dataloaders_params() (in module neural_compressor.ux.components.db_manager.utils)": [[391, "neural_compressor.ux.components.db_manager.utils.update_dataloaders_params"]], "diagnosis (class in neural_compressor.ux.components.diagnosis.diagnosis)": [[392, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis"]], "neural_compressor.ux.components.diagnosis.diagnosis": [[392, "module-neural_compressor.ux.components.diagnosis.diagnosis"]], "diagnosisfactory (class in neural_compressor.ux.components.diagnosis.factory)": [[393, "neural_compressor.ux.components.diagnosis.factory.DiagnosisFactory"]], "neural_compressor.ux.components.diagnosis.factory": [[393, "module-neural_compressor.ux.components.diagnosis.factory"]], "neural_compressor.ux.components.diagnosis": [[394, "module-neural_compressor.ux.components.diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis": [[395, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis"]], "onnxrtdiagnosis (class in neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis)": [[396, "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis.OnnxRtDiagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis": [[396, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis"]], "opactivation (class in neural_compressor.ux.components.diagnosis.op_details)": [[397, "neural_compressor.ux.components.diagnosis.op_details.OpActivation"]], "opdetails (class in neural_compressor.ux.components.diagnosis.op_details)": [[397, "neural_compressor.ux.components.diagnosis.op_details.OpDetails"]], "oppattern (class in neural_compressor.ux.components.diagnosis.op_details)": [[397, "neural_compressor.ux.components.diagnosis.op_details.OpPattern"]], "opweights (class in neural_compressor.ux.components.diagnosis.op_details)": [[397, "neural_compressor.ux.components.diagnosis.op_details.OpWeights"]], "neural_compressor.ux.components.diagnosis.op_details": [[397, "module-neural_compressor.ux.components.diagnosis.op_details"]], "opentry (class in neural_compressor.ux.components.diagnosis.op_entry)": [[398, "neural_compressor.ux.components.diagnosis.op_entry.OpEntry"]], "neural_compressor.ux.components.diagnosis.op_entry": [[398, "module-neural_compressor.ux.components.diagnosis.op_entry"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis": [[399, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis"]], "tensorflowdiagnosis (class in neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis)": [[400, "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis.TensorflowDiagnosis"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis": [[400, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis"]], "create_dir_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[401, "neural_compressor.ux.components.file_browser.file_browser.create_dir_entry"]], "create_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[401, "neural_compressor.ux.components.file_browser.file_browser.create_entry"]], "create_file_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[401, "neural_compressor.ux.components.file_browser.file_browser.create_file_entry"]], "filter_requested_entries() (in module neural_compressor.ux.components.file_browser.file_browser)": [[401, "neural_compressor.ux.components.file_browser.file_browser.filter_requested_entries"]], "get_directory_entries() (in module neural_compressor.ux.components.file_browser.file_browser)": [[401, "neural_compressor.ux.components.file_browser.file_browser.get_directory_entries"]], "get_filter_value() (in module neural_compressor.ux.components.file_browser.file_browser)": [[401, "neural_compressor.ux.components.file_browser.file_browser.get_filter_value"]], "get_non_hidden_directory_entries() (in module neural_compressor.ux.components.file_browser.file_browser)": [[401, "neural_compressor.ux.components.file_browser.file_browser.get_non_hidden_directory_entries"]], "get_requested_path() (in module neural_compressor.ux.components.file_browser.file_browser)": [[401, "neural_compressor.ux.components.file_browser.file_browser.get_requested_path"]], "get_setting_value() (in module neural_compressor.ux.components.file_browser.file_browser)": [[401, "neural_compressor.ux.components.file_browser.file_browser.get_setting_value"]], "is_dataset_or_directory_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[401, "neural_compressor.ux.components.file_browser.file_browser.is_dataset_or_directory_entry"]], "is_directory_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[401, "neural_compressor.ux.components.file_browser.file_browser.is_directory_entry"]], "is_model_or_directory_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[401, "neural_compressor.ux.components.file_browser.file_browser.is_model_or_directory_entry"]], "neural_compressor.ux.components.file_browser.file_browser": [[401, "module-neural_compressor.ux.components.file_browser.file_browser"]], "should_show_files() (in module neural_compressor.ux.components.file_browser.file_browser)": [[401, "neural_compressor.ux.components.file_browser.file_browser.should_show_files"]], "should_show_only_model_files() (in module neural_compressor.ux.components.file_browser.file_browser)": [[401, "neural_compressor.ux.components.file_browser.file_browser.should_show_only_model_files"]], "sort_entries() (in module neural_compressor.ux.components.file_browser.file_browser)": [[401, "neural_compressor.ux.components.file_browser.file_browser.sort_entries"]], "neural_compressor.ux.components.file_browser": [[402, "module-neural_compressor.ux.components.file_browser"]], "attribute (class in neural_compressor.ux.components.graph.attribute)": [[403, "neural_compressor.ux.components.graph.attribute.Attribute"]], "neural_compressor.ux.components.graph.attribute": [[403, "module-neural_compressor.ux.components.graph.attribute"]], "collapser (class in neural_compressor.ux.components.graph.collapser)": [[404, "neural_compressor.ux.components.graph.collapser.Collapser"]], "neural_compressor.ux.components.graph.collapser": [[404, "module-neural_compressor.ux.components.graph.collapser"]], "edge (class in neural_compressor.ux.components.graph.edge)": [[405, "neural_compressor.ux.components.graph.edge.Edge"]], "neural_compressor.ux.components.graph.edge": [[405, "module-neural_compressor.ux.components.graph.edge"]], "graph (class in neural_compressor.ux.components.graph.graph)": [[406, "neural_compressor.ux.components.graph.graph.Graph"]], "neural_compressor.ux.components.graph.graph": [[406, "module-neural_compressor.ux.components.graph.graph"]], "graphreader (class in neural_compressor.ux.components.graph.graph_reader)": [[407, "neural_compressor.ux.components.graph.graph_reader.GraphReader"]], "neural_compressor.ux.components.graph.graph_reader": [[407, "module-neural_compressor.ux.components.graph.graph_reader"]], "neural_compressor.ux.components.graph": [[408, "module-neural_compressor.ux.components.graph"]], "groupnode (class in neural_compressor.ux.components.graph.node)": [[409, "neural_compressor.ux.components.graph.node.GroupNode"]], "node (class in neural_compressor.ux.components.graph.node)": [[409, "neural_compressor.ux.components.graph.node.Node"]], "neural_compressor.ux.components.graph.node": [[409, "module-neural_compressor.ux.components.graph.node"]], "neural_compressor.ux.components.graph.reader": [[410, "module-neural_compressor.ux.components.graph.reader"]], "onnxrtreader (class in neural_compressor.ux.components.graph.reader.onnxrt_reader)": [[411, "neural_compressor.ux.components.graph.reader.onnxrt_reader.OnnxrtReader"]], "neural_compressor.ux.components.graph.reader.onnxrt_reader": [[411, "module-neural_compressor.ux.components.graph.reader.onnxrt_reader"]], "tensorflowreader (class in neural_compressor.ux.components.graph.reader.tensorflow_reader)": [[412, "neural_compressor.ux.components.graph.reader.tensorflow_reader.TensorflowReader"]], "neural_compressor.ux.components.graph.reader.tensorflow_reader": [[412, "module-neural_compressor.ux.components.graph.reader.tensorflow_reader"]], "neural_compressor.ux.components": [[413, "module-neural_compressor.ux.components"]], "neural_compressor.ux.components.jobs_management": [[414, "module-neural_compressor.ux.components.jobs_management"]], "neural_compressor.ux.components.jobs_management.jobs_control_queue": [[415, "module-neural_compressor.ux.components.jobs_management.jobs_control_queue"]], "neural_compressor.ux.components.jobs_management.jobs_manager": [[416, "module-neural_compressor.ux.components.jobs_management.jobs_manager"]], "neural_compressor.ux.components.jobs_management.request": [[417, "module-neural_compressor.ux.components.jobs_management.request"]], "get_default_path() (in module neural_compressor.ux.components.manage_workspace)": [[418, "neural_compressor.ux.components.manage_workspace.get_default_path"]], "neural_compressor.ux.components.manage_workspace": [[418, "module-neural_compressor.ux.components.manage_workspace"]], "domain (class in neural_compressor.ux.components.model.domain)": [[419, "neural_compressor.ux.components.model.domain.Domain"]], "neural_compressor.ux.components.model.domain": [[419, "module-neural_compressor.ux.components.model.domain"]], "neural_compressor.ux.components.model": [[420, "module-neural_compressor.ux.components.model"]], "model (class in neural_compressor.ux.components.model.model)": [[421, "neural_compressor.ux.components.model.model.Model"]], "neural_compressor.ux.components.model.model": [[421, "module-neural_compressor.ux.components.model.model"]], "get_model_type() (in module neural_compressor.ux.components.model.model_type_getter)": [[422, "neural_compressor.ux.components.model.model_type_getter.get_model_type"]], "neural_compressor.ux.components.model.model_type_getter": [[422, "module-neural_compressor.ux.components.model.model_type_getter"]], "neural_compressor.ux.components.model.onnxrt": [[423, "module-neural_compressor.ux.components.model.onnxrt"]], "onnxrtmodel (class in neural_compressor.ux.components.model.onnxrt.model)": [[424, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel"]], "neural_compressor.ux.components.model.onnxrt.model": [[424, "module-neural_compressor.ux.components.model.onnxrt.model"]], "remove_number_of_samples_from_shape() (in module neural_compressor.ux.components.model.onnxrt.model)": [[424, "neural_compressor.ux.components.model.onnxrt.model.remove_number_of_samples_from_shape"]], "neural_compressor.ux.components.model.pytorch": [[425, "module-neural_compressor.ux.components.model.pytorch"]], "pytorchscriptmodel (class in neural_compressor.ux.components.model.pytorch.model)": [[426, "neural_compressor.ux.components.model.pytorch.model.PyTorchScriptModel"]], "neural_compressor.ux.components.model.pytorch.model": [[426, "module-neural_compressor.ux.components.model.pytorch.model"]], "modelrepository (class in neural_compressor.ux.components.model.repository)": [[427, "neural_compressor.ux.components.model.repository.ModelRepository"]], "neural_compressor.ux.components.model.repository": [[427, "module-neural_compressor.ux.components.model.repository"]], "shape (class in neural_compressor.ux.components.model.shape)": [[428, "neural_compressor.ux.components.model.shape.Shape"]], "neural_compressor.ux.components.model.shape": [[428, "module-neural_compressor.ux.components.model.shape"]], "frozenpbmodel (class in neural_compressor.ux.components.model.tensorflow.frozen_pb)": [[429, "neural_compressor.ux.components.model.tensorflow.frozen_pb.FrozenPbModel"]], "neural_compressor.ux.components.model.tensorflow.frozen_pb": [[429, "module-neural_compressor.ux.components.model.tensorflow.frozen_pb"]], "neural_compressor.ux.components.model.tensorflow": [[430, "module-neural_compressor.ux.components.model.tensorflow"]], "kerasmodel (class in neural_compressor.ux.components.model.tensorflow.keras)": [[431, "neural_compressor.ux.components.model.tensorflow.keras.KerasModel"]], "neural_compressor.ux.components.model.tensorflow.keras": [[431, "module-neural_compressor.ux.components.model.tensorflow.keras"]], "metagraphmodel (class in neural_compressor.ux.components.model.tensorflow.meta_graph)": [[432, "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel"]], "neural_compressor.ux.components.model.tensorflow.meta_graph": [[432, "module-neural_compressor.ux.components.model.tensorflow.meta_graph"]], "tensorflowmodel (class in neural_compressor.ux.components.model.tensorflow.model)": [[433, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel"]], "neural_compressor.ux.components.model.tensorflow.model": [[433, "module-neural_compressor.ux.components.model.tensorflow.model"]], "savedmodelmodel (class in neural_compressor.ux.components.model.tensorflow.saved_model)": [[434, "neural_compressor.ux.components.model.tensorflow.saved_model.SavedModelModel"]], "neural_compressor.ux.components.model.tensorflow.saved_model": [[434, "module-neural_compressor.ux.components.model.tensorflow.saved_model"]], "get_input_shape() (in module neural_compressor.ux.components.model.tensorflow.utils)": [[435, "neural_compressor.ux.components.model.tensorflow.utils.get_input_shape"]], "neural_compressor.ux.components.model.tensorflow.utils": [[435, "module-neural_compressor.ux.components.model.tensorflow.utils"]], "download_config() (in module neural_compressor.ux.components.model_zoo.download_config)": [[436, "neural_compressor.ux.components.model_zoo.download_config.download_config"]], "neural_compressor.ux.components.model_zoo.download_config": [[436, "module-neural_compressor.ux.components.model_zoo.download_config"]], "download_model() (in module neural_compressor.ux.components.model_zoo.download_model)": [[437, "neural_compressor.ux.components.model_zoo.download_model.download_model"]], "neural_compressor.ux.components.model_zoo.download_model": [[437, "module-neural_compressor.ux.components.model_zoo.download_model"]], "downloader (class in neural_compressor.ux.components.model_zoo.downloader)": [[438, "neural_compressor.ux.components.model_zoo.downloader.Downloader"]], "neural_compressor.ux.components.model_zoo.downloader": [[438, "module-neural_compressor.ux.components.model_zoo.downloader"]], "neural_compressor.ux.components.model_zoo": [[439, "module-neural_compressor.ux.components.model_zoo"]], "check_version() (in module neural_compressor.ux.components.model_zoo.list_models)": [[440, "neural_compressor.ux.components.model_zoo.list_models.check_version"]], "get_available_models() (in module neural_compressor.ux.components.model_zoo.list_models)": [[440, "neural_compressor.ux.components.model_zoo.list_models.get_available_models"]], "get_framework_module_name() (in module neural_compressor.ux.components.model_zoo.list_models)": [[440, "neural_compressor.ux.components.model_zoo.list_models.get_framework_module_name"]], "get_installed_frameworks() (in module neural_compressor.ux.components.model_zoo.list_models)": [[440, "neural_compressor.ux.components.model_zoo.list_models.get_installed_frameworks"]], "list_models() (in module neural_compressor.ux.components.model_zoo.list_models)": [[440, "neural_compressor.ux.components.model_zoo.list_models.list_models"]], "neural_compressor.ux.components.model_zoo.list_models": [[440, "module-neural_compressor.ux.components.model_zoo.list_models"]], "validate_model_list() (in module neural_compressor.ux.components.model_zoo.list_models)": [[440, "neural_compressor.ux.components.model_zoo.list_models.validate_model_list"]], "neural_compressor.ux.components.names_mapper": [[441, "module-neural_compressor.ux.components.names_mapper"]], "mappingdirection (class in neural_compressor.ux.components.names_mapper.names_mapper)": [[442, "neural_compressor.ux.components.names_mapper.names_mapper.MappingDirection"]], "namesmapper (class in neural_compressor.ux.components.names_mapper.names_mapper)": [[442, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper"]], "neural_compressor.ux.components.names_mapper.names_mapper": [[442, "module-neural_compressor.ux.components.names_mapper.names_mapper"]], "check_if_collect_tuning_history() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[443, "neural_compressor.ux.components.optimization.execute_optimization.check_if_collect_tuning_history"]], "execute_optimization() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[443, "neural_compressor.ux.components.optimization.execute_optimization.execute_optimization"]], "execute_optimization_pytorch_script() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[443, "neural_compressor.ux.components.optimization.execute_optimization.execute_optimization_pytorch_script"]], "execute_optimization_regular() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[443, "neural_compressor.ux.components.optimization.execute_optimization.execute_optimization_regular"]], "neural_compressor.ux.components.optimization.execute_optimization": [[443, "module-neural_compressor.ux.components.optimization.execute_optimization"]], "parse_logs() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[443, "neural_compressor.ux.components.optimization.execute_optimization.parse_logs"]], "parse_model_data_to_bench_names() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[443, "neural_compressor.ux.components.optimization.execute_optimization.parse_model_data_to_bench_names"]], "optimizationfactory (class in neural_compressor.ux.components.optimization.factory)": [[444, "neural_compressor.ux.components.optimization.factory.OptimizationFactory"]], "neural_compressor.ux.components.optimization.factory": [[444, "module-neural_compressor.ux.components.optimization.factory"]], "graphoptimization (class in neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization)": [[445, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization"]], "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization": [[445, "module-neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization"]], "neural_compressor.ux.components.optimization.graph_optimizer": [[446, "module-neural_compressor.ux.components.optimization.graph_optimizer"]], "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model": [[447, "module-neural_compressor.ux.components.optimization.graph_optimizer.optimize_model"]], "optimize_graph() (in module neural_compressor.ux.components.optimization.graph_optimizer.optimize_model)": [[447, "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model.optimize_graph"]], "optimize_graph_config() (in module neural_compressor.ux.components.optimization.graph_optimizer.optimize_model)": [[447, "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model.optimize_graph_config"]], "parse_args() (in module neural_compressor.ux.components.optimization.graph_optimizer.optimize_model)": [[447, "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model.parse_args"]], "set_eager_execution() (in module neural_compressor.ux.components.optimization.graph_optimizer.optimize_model)": [[447, "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model.set_eager_execution"]], "optimizations (class in neural_compressor.ux.components.optimization)": [[448, "neural_compressor.ux.components.optimization.Optimizations"]], "neural_compressor.ux.components.optimization": [[448, "module-neural_compressor.ux.components.optimization"]], "neural_compressor.ux.components.optimization.mixed_precision": [[449, "module-neural_compressor.ux.components.optimization.mixed_precision"]], "mixedprecision (class in neural_compressor.ux.components.optimization.mixed_precision.mixed_precision)": [[450, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision"]], "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision": [[450, "module-neural_compressor.ux.components.optimization.mixed_precision.mixed_precision"]], "neural_compressor.ux.components.optimization.mixed_precision.optimize_model": [[451, "module-neural_compressor.ux.components.optimization.mixed_precision.optimize_model"]], "optimize_graph() (in module neural_compressor.ux.components.optimization.mixed_precision.optimize_model)": [[451, "neural_compressor.ux.components.optimization.mixed_precision.optimize_model.optimize_graph"]], "optimize_graph_config() (in module neural_compressor.ux.components.optimization.mixed_precision.optimize_model)": [[451, "neural_compressor.ux.components.optimization.mixed_precision.optimize_model.optimize_graph_config"]], "parse_args() (in module neural_compressor.ux.components.optimization.mixed_precision.optimize_model)": [[451, "neural_compressor.ux.components.optimization.mixed_precision.optimize_model.parse_args"]], "set_eager_execution() (in module neural_compressor.ux.components.optimization.mixed_precision.optimize_model)": [[451, "neural_compressor.ux.components.optimization.mixed_precision.optimize_model.set_eager_execution"]], "neural_compressor.ux.components.optimization.neural_coder_optimization": [[452, "module-neural_compressor.ux.components.optimization.neural_coder_optimization"]], "neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model": [[453, "module-neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model"]], "optimize_pt_script() (in module neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model)": [[453, "neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model.optimize_pt_script"]], "dataloaderinterface (class in neural_compressor.ux.components.optimization.optimization)": [[454, "neural_compressor.ux.components.optimization.optimization.DataloaderInterface"]], "optimization (class in neural_compressor.ux.components.optimization.optimization)": [[454, "neural_compressor.ux.components.optimization.optimization.Optimization"]], "optimizationinterface (class in neural_compressor.ux.components.optimization.optimization)": [[454, "neural_compressor.ux.components.optimization.optimization.OptimizationInterface"]], "neural_compressor.ux.components.optimization.optimization": [[454, "module-neural_compressor.ux.components.optimization.optimization"]], "neural_compressor.ux.components.optimization.pruning": [[455, "module-neural_compressor.ux.components.optimization.pruning"]], "neural_compressor.ux.components.optimization.pruning.optimize_model": [[456, "module-neural_compressor.ux.components.optimization.pruning.optimize_model"]], "optimize_model() (in module neural_compressor.ux.components.optimization.pruning.optimize_model)": [[456, "neural_compressor.ux.components.optimization.pruning.optimize_model.optimize_model"]], "parse_args() (in module neural_compressor.ux.components.optimization.pruning.optimize_model)": [[456, "neural_compressor.ux.components.optimization.pruning.optimize_model.parse_args"]], "pruning (class in neural_compressor.ux.components.optimization.pruning.pruning)": [[457, "neural_compressor.ux.components.optimization.pruning.pruning.Pruning"]], "neural_compressor.ux.components.optimization.pruning.pruning": [[457, "module-neural_compressor.ux.components.optimization.pruning.pruning"]], "neural_compressor.ux.components.optimization.tune": [[458, "module-neural_compressor.ux.components.optimization.tune"]], "neural_compressor.ux.components.optimization.tune.tune_model": [[459, "module-neural_compressor.ux.components.optimization.tune.tune_model"]], "parse_args() (in module neural_compressor.ux.components.optimization.tune.tune_model)": [[459, "neural_compressor.ux.components.optimization.tune.tune_model.parse_args"]], "set_eager_execution() (in module neural_compressor.ux.components.optimization.tune.tune_model)": [[459, "neural_compressor.ux.components.optimization.tune.tune_model.set_eager_execution"]], "tune_model() (in module neural_compressor.ux.components.optimization.tune.tune_model)": [[459, "neural_compressor.ux.components.optimization.tune.tune_model.tune_model"]], "accuracycriterion (class in neural_compressor.ux.components.optimization.tune.tuning)": [[460, "neural_compressor.ux.components.optimization.tune.tuning.AccuracyCriterion"]], "tuning (class in neural_compressor.ux.components.optimization.tune.tuning)": [[460, "neural_compressor.ux.components.optimization.tune.tuning.Tuning"]], "tuningdetails (class in neural_compressor.ux.components.optimization.tune.tuning)": [[460, "neural_compressor.ux.components.optimization.tune.tuning.TuningDetails"]], "neural_compressor.ux.components.optimization.tune.tuning": [[460, "module-neural_compressor.ux.components.optimization.tune.tuning"]], "tuninghistory (class in neural_compressor.ux.components.optimization.tuning_history)": [[461, "neural_compressor.ux.components.optimization.tuning_history.TuningHistory"]], "watcher (class in neural_compressor.ux.components.optimization.tuning_history)": [[461, "neural_compressor.ux.components.optimization.tuning_history.Watcher"]], "neural_compressor.ux.components.optimization.tuning_history": [[461, "module-neural_compressor.ux.components.optimization.tuning_history"]], "tuning_history() (in module neural_compressor.ux.components.optimization.tuning_history)": [[461, "neural_compressor.ux.components.optimization.tuning_history.tuning_history"]], "tuning_history_path() (in module neural_compressor.ux.components.optimization.tuning_history)": [[461, "neural_compressor.ux.components.optimization.tuning_history.tuning_history_path"]], "execute_profiling() (in module neural_compressor.ux.components.profiling.execute_profiling)": [[462, "neural_compressor.ux.components.profiling.execute_profiling.execute_profiling"]], "execute_real_profiling() (in module neural_compressor.ux.components.profiling.execute_profiling)": [[462, "neural_compressor.ux.components.profiling.execute_profiling.execute_real_profiling"]], "neural_compressor.ux.components.profiling.execute_profiling": [[462, "module-neural_compressor.ux.components.profiling.execute_profiling"]], "profilerfactory (class in neural_compressor.ux.components.profiling.factory)": [[463, "neural_compressor.ux.components.profiling.factory.ProfilerFactory"]], "neural_compressor.ux.components.profiling.factory": [[463, "module-neural_compressor.ux.components.profiling.factory"]], "neural_compressor.ux.components.profiling": [[464, "module-neural_compressor.ux.components.profiling"]], "load_profiling_details() (in module neural_compressor.ux.components.profiling.profile_model)": [[465, "neural_compressor.ux.components.profiling.profile_model.load_profiling_details"]], "neural_compressor.ux.components.profiling.profile_model": [[465, "module-neural_compressor.ux.components.profiling.profile_model"]], "parse_args() (in module neural_compressor.ux.components.profiling.profile_model)": [[465, "neural_compressor.ux.components.profiling.profile_model.parse_args"]], "profiler (class in neural_compressor.ux.components.profiling.profiler)": [[466, "neural_compressor.ux.components.profiling.profiler.Profiler"]], "neural_compressor.ux.components.profiling.profiler": [[466, "module-neural_compressor.ux.components.profiling.profiler"]], "dataloaderinterface (class in neural_compressor.ux.components.profiling.profiling)": [[467, "neural_compressor.ux.components.profiling.profiling.DataloaderInterface"]], "profiling (class in neural_compressor.ux.components.profiling.profiling)": [[467, "neural_compressor.ux.components.profiling.profiling.Profiling"]], "neural_compressor.ux.components.profiling.profiling": [[467, "module-neural_compressor.ux.components.profiling.profiling"]], "profilerfactory (class in neural_compressor.ux.components.profiling.tensorflow_profiler.factory)": [[468, "neural_compressor.ux.components.profiling.tensorflow_profiler.factory.ProfilerFactory"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.factory": [[468, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.factory"]], "neural_compressor.ux.components.profiling.tensorflow_profiler": [[469, "module-neural_compressor.ux.components.profiling.tensorflow_profiler"]], "profiler (class in neural_compressor.ux.components.profiling.tensorflow_profiler.profiler)": [[470, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler": [[470, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.profiler"]], "delete_assign() (in module neural_compressor.ux.components.profiling.tensorflow_profiler.utils)": [[471, "neural_compressor.ux.components.profiling.tensorflow_profiler.utils.delete_assign"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.utils": [[471, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.utils"]], "main() (in module neural_compressor.ux.inc_bench)": [[472, "neural_compressor.ux.inc_bench.main"]], "neural_compressor.ux.inc_bench": [[472, "module-neural_compressor.ux.inc_bench"]], "prepare_environment() (in module neural_compressor.ux.inc_bench)": [[472, "neural_compressor.ux.inc_bench.prepare_environment"]], "neural_compressor.ux": [[473, "module-neural_compressor.ux"]], "domainflavours (class in neural_compressor.ux.utils.consts)": [[474, "neural_compressor.ux.utils.consts.DomainFlavours"]], "domains (class in neural_compressor.ux.utils.consts)": [[474, "neural_compressor.ux.utils.consts.Domains"]], "executionstatus (class in neural_compressor.ux.utils.consts)": [[474, "neural_compressor.ux.utils.consts.ExecutionStatus"]], "frameworks (class in neural_compressor.ux.utils.consts)": [[474, "neural_compressor.ux.utils.consts.Frameworks"]], "optimizationtypes (class in neural_compressor.ux.utils.consts)": [[474, "neural_compressor.ux.utils.consts.OptimizationTypes"]], "precisions (class in neural_compressor.ux.utils.consts)": [[474, "neural_compressor.ux.utils.consts.Precisions"]], "strategies (class in neural_compressor.ux.utils.consts)": [[474, "neural_compressor.ux.utils.consts.Strategies"]], "neural_compressor.ux.utils.consts": [[474, "module-neural_compressor.ux.utils.consts"]], "environment (class in neural_compressor.ux.utils.environment)": [[475, "neural_compressor.ux.utils.environment.Environment"]], "neural_compressor.ux.utils.environment": [[475, "module-neural_compressor.ux.utils.environment"]], "accessdeniedexception": [[476, "neural_compressor.ux.utils.exceptions.AccessDeniedException"]], "clienterrorexception": [[476, "neural_compressor.ux.utils.exceptions.ClientErrorException"]], "internalexception": [[476, "neural_compressor.ux.utils.exceptions.InternalException"]], "notfoundexception": [[476, "neural_compressor.ux.utils.exceptions.NotFoundException"]], "neural_compressor.ux.utils.exceptions": [[476, "module-neural_compressor.ux.utils.exceptions"]], "executor (class in neural_compressor.ux.utils.executor)": [[477, "neural_compressor.ux.utils.executor.Executor"]], "neural_compressor.ux.utils.executor": [[477, "module-neural_compressor.ux.utils.executor"]], "expiringdict (class in neural_compressor.ux.utils.expiring_dict)": [[478, "neural_compressor.ux.utils.expiring_dict.ExpiringDict"]], "expiringdictitem (class in neural_compressor.ux.utils.expiring_dict)": [[478, "neural_compressor.ux.utils.expiring_dict.ExpiringDictItem"]], "neural_compressor.ux.utils.expiring_dict": [[478, "module-neural_compressor.ux.utils.expiring_dict"]], "githubinfo (class in neural_compressor.ux.utils.github_info)": [[479, "neural_compressor.ux.utils.github_info.GithubInfo"]], "neural_compressor.ux.utils.github_info": [[479, "module-neural_compressor.ux.utils.github_info"]], "hwinfo (class in neural_compressor.ux.utils.hw_info)": [[480, "neural_compressor.ux.utils.hw_info.HWInfo"]], "get_bios_version() (in module neural_compressor.ux.utils.hw_info)": [[480, "neural_compressor.ux.utils.hw_info.get_bios_version"]], "get_distribution() (in module neural_compressor.ux.utils.hw_info)": [[480, "neural_compressor.ux.utils.hw_info.get_distribution"]], "get_framework_dependency_info() (in module neural_compressor.ux.utils.hw_info)": [[480, "neural_compressor.ux.utils.hw_info.get_framework_dependency_info"]], "get_framework_info() (in module neural_compressor.ux.utils.hw_info)": [[480, "neural_compressor.ux.utils.hw_info.get_framework_info"]], "get_kernel_version() (in module neural_compressor.ux.utils.hw_info)": [[480, "neural_compressor.ux.utils.hw_info.get_kernel_version"]], "get_number_of_sockets() (in module neural_compressor.ux.utils.hw_info)": [[480, "neural_compressor.ux.utils.hw_info.get_number_of_sockets"]], "is_turbo_boost_enabled() (in module neural_compressor.ux.utils.hw_info)": [[480, "neural_compressor.ux.utils.hw_info.is_turbo_boost_enabled"]], "neural_compressor.ux.utils.hw_info": [[480, "module-neural_compressor.ux.utils.hw_info"]], "neural_compressor.ux.utils": [[481, "module-neural_compressor.ux.utils"]], "jsonserializer (class in neural_compressor.ux.utils.json_serializer)": [[482, "neural_compressor.ux.utils.json_serializer.JsonSerializer"]], "neural_compressor.ux.utils.json_serializer": [[482, "module-neural_compressor.ux.utils.json_serializer"]], "change_log_level() (in module neural_compressor.ux.utils.logger)": [[483, "neural_compressor.ux.utils.logger.change_log_level"]], "neural_compressor.ux.utils.logger": [[483, "module-neural_compressor.ux.utils.logger"]], "accuracyparser (class in neural_compressor.ux.utils.parser)": [[484, "neural_compressor.ux.utils.parser.AccuracyParser"]], "benchmarkparserfactory (class in neural_compressor.ux.utils.parser)": [[484, "neural_compressor.ux.utils.parser.BenchmarkParserFactory"]], "optimizationparser (class in neural_compressor.ux.utils.parser)": [[484, "neural_compressor.ux.utils.parser.OptimizationParser"]], "parser (class in neural_compressor.ux.utils.parser)": [[484, "neural_compressor.ux.utils.parser.Parser"]], "performanceparser (class in neural_compressor.ux.utils.parser)": [[484, "neural_compressor.ux.utils.parser.PerformanceParser"]], "profilingparser (class in neural_compressor.ux.utils.parser)": [[484, "neural_compressor.ux.utils.parser.ProfilingParser"]], "neural_compressor.ux.utils.parser": [[484, "module-neural_compressor.ux.utils.parser"]], "proc (class in neural_compressor.ux.utils.proc)": [[485, "neural_compressor.ux.utils.proc.Proc"]], "neural_compressor.ux.utils.proc": [[485, "module-neural_compressor.ux.utils.proc"]], "ncprocesses (class in neural_compressor.ux.utils.processes)": [[486, "neural_compressor.ux.utils.processes.NCProcesses"]], "neural_compressor.ux.utils.processes": [[486, "module-neural_compressor.ux.utils.processes"]], "singleton (class in neural_compressor.ux.utils.singleton)": [[487, "neural_compressor.ux.utils.singleton.Singleton"]], "neural_compressor.ux.utils.singleton": [[487, "module-neural_compressor.ux.utils.singleton"]], "get_status_update_function() (in module neural_compressor.ux.utils.status_updates)": [[488, "neural_compressor.ux.utils.status_updates.get_status_update_function"]], "neural_compressor.ux.utils.status_updates": [[488, "module-neural_compressor.ux.utils.status_updates"]], "neural_compressor.ux.utils.templates": [[489, "module-neural_compressor.ux.utils.templates"]], "metric (class in neural_compressor.ux.utils.templates.metric)": [[490, "neural_compressor.ux.utils.templates.metric.Metric"]], "neural_compressor.ux.utils.templates.metric": [[490, "module-neural_compressor.ux.utils.templates.metric"]], "workdir (class in neural_compressor.ux.utils.templates.workdir)": [[491, "neural_compressor.ux.utils.templates.workdir.Workdir"]], "neural_compressor.ux.utils.templates.workdir": [[491, "module-neural_compressor.ux.utils.templates.workdir"]], "are_archive_filenames_valid() (in module neural_compressor.ux.utils.utils)": [[492, "neural_compressor.ux.utils.utils.are_archive_filenames_valid"]], "check_module() (in module neural_compressor.ux.utils.utils)": [[492, "neural_compressor.ux.utils.utils.check_module"]], "deprecated() (in module neural_compressor.ux.utils.utils)": [[492, "neural_compressor.ux.utils.utils.deprecated"]], "determine_ip() (in module neural_compressor.ux.utils.utils)": [[492, "neural_compressor.ux.utils.utils.determine_ip"]], "export_to_csv() (in module neural_compressor.ux.utils.utils)": [[492, "neural_compressor.ux.utils.utils.export_to_csv"]], "filter_transforms() (in module neural_compressor.ux.utils.utils)": [[492, "neural_compressor.ux.utils.utils.filter_transforms"]], "get_dataset_path() (in module neural_compressor.ux.utils.utils)": [[492, "neural_compressor.ux.utils.utils.get_dataset_path"]], "get_default_pruning_config_path() (in module neural_compressor.ux.utils.utils)": [[492, "neural_compressor.ux.utils.utils.get_default_pruning_config_path"]], "get_file_extension() (in module neural_compressor.ux.utils.utils)": [[492, "neural_compressor.ux.utils.utils.get_file_extension"]], "get_framework_from_path() (in module neural_compressor.ux.utils.utils)": [[492, "neural_compressor.ux.utils.utils.get_framework_from_path"]], "get_height_width_from_size() (in module neural_compressor.ux.utils.utils)": [[492, "neural_compressor.ux.utils.utils.get_height_width_from_size"]], "get_metrics_dict() (in module neural_compressor.ux.utils.utils)": [[492, "neural_compressor.ux.utils.utils.get_metrics_dict"]], "get_model_zoo_config_path() (in module neural_compressor.ux.utils.utils)": [[492, "neural_compressor.ux.utils.utils.get_model_zoo_config_path"]], "get_model_zoo_model_path() (in module neural_compressor.ux.utils.utils)": [[492, "neural_compressor.ux.utils.utils.get_model_zoo_model_path"]], "get_module_version() (in module neural_compressor.ux.utils.utils)": [[492, "neural_compressor.ux.utils.utils.get_module_version"]], "get_predefined_config_path() (in module neural_compressor.ux.utils.utils)": [[492, "neural_compressor.ux.utils.utils.get_predefined_config_path"]], "get_shape_from_transforms() (in module neural_compressor.ux.utils.utils)": [[492, "neural_compressor.ux.utils.utils.get_shape_from_transforms"]], "get_size() (in module neural_compressor.ux.utils.utils)": [[492, "neural_compressor.ux.utils.utils.get_size"]], "is_dataset_file() (in module neural_compressor.ux.utils.utils)": [[492, "neural_compressor.ux.utils.utils.is_dataset_file"]], "is_development_env() (in module neural_compressor.ux.utils.utils)": [[492, "neural_compressor.ux.utils.utils.is_development_env"]], "is_hidden() (in module neural_compressor.ux.utils.utils)": [[492, "neural_compressor.ux.utils.utils.is_hidden"]], "load_dataloader_config() (in module neural_compressor.ux.utils.utils)": [[492, "neural_compressor.ux.utils.utils.load_dataloader_config"]], "load_help_nc_params() (in module neural_compressor.ux.utils.utils)": [[492, "neural_compressor.ux.utils.utils.load_help_nc_params"]], "load_metrics_config() (in module neural_compressor.ux.utils.utils)": [[492, "neural_compressor.ux.utils.utils.load_metrics_config"]], "load_model_config() (in module neural_compressor.ux.utils.utils)": [[492, "neural_compressor.ux.utils.utils.load_model_config"]], "load_model_wise_params() (in module neural_compressor.ux.utils.utils)": [[492, "neural_compressor.ux.utils.utils.load_model_wise_params"]], "load_precisions_config() (in module neural_compressor.ux.utils.utils)": [[492, "neural_compressor.ux.utils.utils.load_precisions_config"]], "load_pruning_details_config() (in module neural_compressor.ux.utils.utils)": [[492, "neural_compressor.ux.utils.utils.load_pruning_details_config"]], "load_transforms_config() (in module neural_compressor.ux.utils.utils)": [[492, "neural_compressor.ux.utils.utils.load_transforms_config"]], "load_transforms_filter_config() (in module neural_compressor.ux.utils.utils)": [[492, "neural_compressor.ux.utils.utils.load_transforms_filter_config"]], "neural_compressor.ux.utils.utils": [[492, "module-neural_compressor.ux.utils.utils"]], "normalize_domain() (in module neural_compressor.ux.utils.utils)": [[492, "neural_compressor.ux.utils.utils.normalize_domain"]], "normalize_framework() (in module neural_compressor.ux.utils.utils)": [[492, "neural_compressor.ux.utils.utils.normalize_framework"]], "normalize_string() (in module neural_compressor.ux.utils.utils)": [[492, "neural_compressor.ux.utils.utils.normalize_string"]], "parse_bool_value() (in module neural_compressor.ux.utils.utils)": [[492, "neural_compressor.ux.utils.utils.parse_bool_value"]], "parse_to_float_list() (in module neural_compressor.ux.utils.utils)": [[492, "neural_compressor.ux.utils.utils.parse_to_float_list"]], "parse_to_string_list() (in module neural_compressor.ux.utils.utils)": [[492, "neural_compressor.ux.utils.utils.parse_to_string_list"]], "parse_version() (in module neural_compressor.ux.utils.utils)": [[492, "neural_compressor.ux.utils.utils.parse_version"]], "release_tag() (in module neural_compressor.ux.utils.utils)": [[492, "neural_compressor.ux.utils.utils.release_tag"]], "replace_with_values() (in module neural_compressor.ux.utils.utils)": [[492, "neural_compressor.ux.utils.utils.replace_with_values"]], "safe_extract_archive() (in module neural_compressor.ux.utils.utils)": [[492, "neural_compressor.ux.utils.utils.safe_extract_archive"]], "verify_file_path() (in module neural_compressor.ux.utils.utils)": [[492, "neural_compressor.ux.utils.utils.verify_file_path"]], "config (class in neural_compressor.ux.utils.workload.config)": [[493, "neural_compressor.ux.utils.workload.config.Config"]], "neural_compressor.ux.utils.workload.config": [[493, "module-neural_compressor.ux.utils.workload.config"]], "dataloader (class in neural_compressor.ux.utils.workload.dataloader)": [[494, "neural_compressor.ux.utils.workload.dataloader.Dataloader"]], "dataset (class in neural_compressor.ux.utils.workload.dataloader)": [[494, "neural_compressor.ux.utils.workload.dataloader.Dataset"]], "filter (class in neural_compressor.ux.utils.workload.dataloader)": [[494, "neural_compressor.ux.utils.workload.dataloader.Filter"]], "labelbalance (class in neural_compressor.ux.utils.workload.dataloader)": [[494, "neural_compressor.ux.utils.workload.dataloader.LabelBalance"]], "transform (class in neural_compressor.ux.utils.workload.dataloader)": [[494, "neural_compressor.ux.utils.workload.dataloader.Transform"]], "neural_compressor.ux.utils.workload.dataloader": [[494, "module-neural_compressor.ux.utils.workload.dataloader"]], "accuracy (class in neural_compressor.ux.utils.workload.evaluation)": [[495, "neural_compressor.ux.utils.workload.evaluation.Accuracy"]], "configs (class in neural_compressor.ux.utils.workload.evaluation)": [[495, "neural_compressor.ux.utils.workload.evaluation.Configs"]], "evaluation (class in neural_compressor.ux.utils.workload.evaluation)": [[495, "neural_compressor.ux.utils.workload.evaluation.Evaluation"]], "metric (class in neural_compressor.ux.utils.workload.evaluation)": [[495, "neural_compressor.ux.utils.workload.evaluation.Metric"]], "performance (class in neural_compressor.ux.utils.workload.evaluation)": [[495, "neural_compressor.ux.utils.workload.evaluation.Performance"]], "postprocess (class in neural_compressor.ux.utils.workload.evaluation)": [[495, "neural_compressor.ux.utils.workload.evaluation.Postprocess"]], "postprocessschema (class in neural_compressor.ux.utils.workload.evaluation)": [[495, "neural_compressor.ux.utils.workload.evaluation.PostprocessSchema"]], "neural_compressor.ux.utils.workload.evaluation": [[495, "module-neural_compressor.ux.utils.workload.evaluation"]], "graphoptimization (class in neural_compressor.ux.utils.workload.graph_optimization)": [[496, "neural_compressor.ux.utils.workload.graph_optimization.GraphOptimization"]], "neural_compressor.ux.utils.workload.graph_optimization": [[496, "module-neural_compressor.ux.utils.workload.graph_optimization"]], "neural_compressor.ux.utils.workload": [[497, "module-neural_compressor.ux.utils.workload"]], "mixedprecision (class in neural_compressor.ux.utils.workload.mixed_precision)": [[498, "neural_compressor.ux.utils.workload.mixed_precision.MixedPrecision"]], "neural_compressor.ux.utils.workload.mixed_precision": [[498, "module-neural_compressor.ux.utils.workload.mixed_precision"]], "model (class in neural_compressor.ux.utils.workload.model)": [[499, "neural_compressor.ux.utils.workload.model.Model"]], "neural_compressor.ux.utils.workload.model": [[499, "module-neural_compressor.ux.utils.workload.model"]], "adamoptimizer (class in neural_compressor.ux.utils.workload.pruning)": [[500, "neural_compressor.ux.utils.workload.pruning.AdamOptimizer"]], "adamwoptimizer (class in neural_compressor.ux.utils.workload.pruning)": [[500, "neural_compressor.ux.utils.workload.pruning.AdamWOptimizer"]], "approach (class in neural_compressor.ux.utils.workload.pruning)": [[500, "neural_compressor.ux.utils.workload.pruning.Approach"]], "criterion (class in neural_compressor.ux.utils.workload.pruning)": [[500, "neural_compressor.ux.utils.workload.pruning.Criterion"]], "crossentropylosscriterion (class in neural_compressor.ux.utils.workload.pruning)": [[500, "neural_compressor.ux.utils.workload.pruning.CrossEntropyLossCriterion"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.ux.utils.workload.pruning)": [[500, "neural_compressor.ux.utils.workload.pruning.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationlosscriterion (class in neural_compressor.ux.utils.workload.pruning)": [[500, "neural_compressor.ux.utils.workload.pruning.KnowledgeDistillationLossCriterion"]], "optimizer (class in neural_compressor.ux.utils.workload.pruning)": [[500, "neural_compressor.ux.utils.workload.pruning.Optimizer"]], "pruning (class in neural_compressor.ux.utils.workload.pruning)": [[500, "neural_compressor.ux.utils.workload.pruning.Pruning"]], "sgdoptimizer (class in neural_compressor.ux.utils.workload.pruning)": [[500, "neural_compressor.ux.utils.workload.pruning.SGDOptimizer"]], "selfknowledgedistillationloss (class in neural_compressor.ux.utils.workload.pruning)": [[500, "neural_compressor.ux.utils.workload.pruning.SelfKnowledgeDistillationLoss"]], "sparsecategoricalcrossentropycriterion (class in neural_compressor.ux.utils.workload.pruning)": [[500, "neural_compressor.ux.utils.workload.pruning.SparseCategoricalCrossentropyCriterion"]], "train (class in neural_compressor.ux.utils.workload.pruning)": [[500, "neural_compressor.ux.utils.workload.pruning.Train"]], "weightcompressionapproach (class in neural_compressor.ux.utils.workload.pruning)": [[500, "neural_compressor.ux.utils.workload.pruning.WeightCompressionApproach"]], "neural_compressor.ux.utils.workload.pruning": [[500, "module-neural_compressor.ux.utils.workload.pruning"]], "parse_dict_value_to_float() (in module neural_compressor.ux.utils.workload.pruning)": [[500, "neural_compressor.ux.utils.workload.pruning.parse_dict_value_to_float"]], "parse_dict_value_to_int() (in module neural_compressor.ux.utils.workload.pruning)": [[500, "neural_compressor.ux.utils.workload.pruning.parse_dict_value_to_int"]], "advance (class in neural_compressor.ux.utils.workload.quantization)": [[501, "neural_compressor.ux.utils.workload.quantization.Advance"]], "calibration (class in neural_compressor.ux.utils.workload.quantization)": [[501, "neural_compressor.ux.utils.workload.quantization.Calibration"]], "quantization (class in neural_compressor.ux.utils.workload.quantization)": [[501, "neural_compressor.ux.utils.workload.quantization.Quantization"]], "wiseconfig (class in neural_compressor.ux.utils.workload.quantization)": [[501, "neural_compressor.ux.utils.workload.quantization.WiseConfig"]], "wiseconfigdetails (class in neural_compressor.ux.utils.workload.quantization)": [[501, "neural_compressor.ux.utils.workload.quantization.WiseConfigDetails"]], "neural_compressor.ux.utils.workload.quantization": [[501, "module-neural_compressor.ux.utils.workload.quantization"]], "acccriterion (class in neural_compressor.ux.utils.workload.tuning)": [[502, "neural_compressor.ux.utils.workload.tuning.AccCriterion"]], "diagnosis (class in neural_compressor.ux.utils.workload.tuning)": [[502, "neural_compressor.ux.utils.workload.tuning.Diagnosis"]], "exitpolicy (class in neural_compressor.ux.utils.workload.tuning)": [[502, "neural_compressor.ux.utils.workload.tuning.ExitPolicy"]], "multiobjectives (class in neural_compressor.ux.utils.workload.tuning)": [[502, "neural_compressor.ux.utils.workload.tuning.MultiObjectives"]], "strategy (class in neural_compressor.ux.utils.workload.tuning)": [[502, "neural_compressor.ux.utils.workload.tuning.Strategy"]], "tuning (class in neural_compressor.ux.utils.workload.tuning)": [[502, "neural_compressor.ux.utils.workload.tuning.Tuning"]], "workspace (class in neural_compressor.ux.utils.workload.tuning)": [[502, "neural_compressor.ux.utils.workload.tuning.Workspace"]], "neural_compressor.ux.utils.workload.tuning": [[502, "module-neural_compressor.ux.utils.workload.tuning"]], "float_representer() (in module neural_compressor.ux.utils.yaml_utils)": [[503, "neural_compressor.ux.utils.yaml_utils.float_representer"]], "neural_compressor.ux.utils.yaml_utils": [[503, "module-neural_compressor.ux.utils.yaml_utils"]], "pruner_representer() (in module neural_compressor.ux.utils.yaml_utils)": [[503, "neural_compressor.ux.utils.yaml_utils.pruner_representer"]], "message (class in neural_compressor.ux.web.communication)": [[504, "neural_compressor.ux.web.communication.Message"]], "messagequeue (class in neural_compressor.ux.web.communication)": [[504, "neural_compressor.ux.web.communication.MessageQueue"]], "request (class in neural_compressor.ux.web.communication)": [[504, "neural_compressor.ux.web.communication.Request"]], "response (class in neural_compressor.ux.web.communication)": [[504, "neural_compressor.ux.web.communication.Response"]], "create_simple_response() (in module neural_compressor.ux.web.communication)": [[504, "neural_compressor.ux.web.communication.create_simple_response"]], "neural_compressor.ux.web.communication": [[504, "module-neural_compressor.ux.web.communication"]], "configuration (class in neural_compressor.ux.web.configuration)": [[505, "neural_compressor.ux.web.configuration.Configuration"]], "neural_compressor.ux.web.configuration": [[505, "module-neural_compressor.ux.web.configuration"]], "servicenotfoundexception": [[506, "neural_compressor.ux.web.exceptions.ServiceNotFoundException"]], "neural_compressor.ux.web.exceptions": [[506, "module-neural_compressor.ux.web.exceptions"]], "neural_compressor.ux.web": [[507, "module-neural_compressor.ux.web"]], "deferredroutingdefinition (class in neural_compressor.ux.web.router)": [[508, "neural_compressor.ux.web.router.DeferredRoutingDefinition"]], "deferredsubprocessroutingdefinition (class in neural_compressor.ux.web.router)": [[508, "neural_compressor.ux.web.router.DeferredSubprocessRoutingDefinition"]], "realtimeroutingdefinition (class in neural_compressor.ux.web.router)": [[508, "neural_compressor.ux.web.router.RealtimeRoutingDefinition"]], "router (class in neural_compressor.ux.web.router)": [[508, "neural_compressor.ux.web.router.Router"]], "routingdefinition (class in neural_compressor.ux.web.router)": [[508, "neural_compressor.ux.web.router.RoutingDefinition"]], "find_pattern_in_graph() (in module neural_compressor.ux.web.router)": [[508, "neural_compressor.ux.web.router.find_pattern_in_graph"]], "get_model_graph() (in module neural_compressor.ux.web.router)": [[508, "neural_compressor.ux.web.router.get_model_graph"]], "get_system_info() (in module neural_compressor.ux.web.router)": [[508, "neural_compressor.ux.web.router.get_system_info"]], "neural_compressor.ux.web.router": [[508, "module-neural_compressor.ux.web.router"]], "allow_api_call() (in module neural_compressor.ux.web.server)": [[509, "neural_compressor.ux.web.server.allow_api_call"]], "block_iframe() (in module neural_compressor.ux.web.server)": [[509, "neural_compressor.ux.web.server.block_iframe"]], "block_sniffing() (in module neural_compressor.ux.web.server)": [[509, "neural_compressor.ux.web.server.block_sniffing"]], "build_parameters() (in module neural_compressor.ux.web.server)": [[509, "neural_compressor.ux.web.server.build_parameters"]], "disable_cache() (in module neural_compressor.ux.web.server)": [[509, "neural_compressor.ux.web.server.disable_cache"]], "get_tls_args() (in module neural_compressor.ux.web.server)": [[509, "neural_compressor.ux.web.server.get_tls_args"]], "handle_api_call() (in module neural_compressor.ux.web.server)": [[509, "neural_compressor.ux.web.server.handle_api_call"]], "neural_compressor.ux.web.server": [[509, "module-neural_compressor.ux.web.server"]], "page_not_found() (in module neural_compressor.ux.web.server)": [[509, "neural_compressor.ux.web.server.page_not_found"]], "require_api_token() (in module neural_compressor.ux.web.server)": [[509, "neural_compressor.ux.web.server.require_api_token"]], "root() (in module neural_compressor.ux.web.server)": [[509, "neural_compressor.ux.web.server.root"]], "run_server() (in module neural_compressor.ux.web.server)": [[509, "neural_compressor.ux.web.server.run_server"]], "web_socket_publisher() (in module neural_compressor.ux.web.server)": [[509, "neural_compressor.ux.web.server.web_socket_publisher"]], "benchmarkservice (class in neural_compressor.ux.web.service.benchmark)": [[510, "neural_compressor.ux.web.service.benchmark.BenchmarkService"]], "neural_compressor.ux.web.service.benchmark": [[510, "module-neural_compressor.ux.web.service.benchmark"]], "historysnapshotparser (class in neural_compressor.ux.web.service.history_snapshot_parser)": [[511, "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser"]], "neural_compressor.ux.web.service.history_snapshot_parser": [[511, "module-neural_compressor.ux.web.service.history_snapshot_parser"]], "neural_compressor.ux.web.service": [[512, "module-neural_compressor.ux.web.service"]], "modelservice (class in neural_compressor.ux.web.service.model)": [[513, "neural_compressor.ux.web.service.model.ModelService"]], "neural_compressor.ux.web.service.model": [[513, "module-neural_compressor.ux.web.service.model"]], "optimizationservice (class in neural_compressor.ux.web.service.optimization)": [[514, "neural_compressor.ux.web.service.optimization.OptimizationService"]], "neural_compressor.ux.web.service.optimization": [[514, "module-neural_compressor.ux.web.service.optimization"]], "profilingservice (class in neural_compressor.ux.web.service.profiling)": [[515, "neural_compressor.ux.web.service.profiling.ProfilingService"]], "neural_compressor.ux.web.service.profiling": [[515, "module-neural_compressor.ux.web.service.profiling"]], "requestdataprocessor (class in neural_compressor.ux.web.service.request_data_processor)": [[516, "neural_compressor.ux.web.service.request_data_processor.RequestDataProcessor"]], "neural_compressor.ux.web.service.request_data_processor": [[516, "module-neural_compressor.ux.web.service.request_data_processor"]], "responsegenerator (class in neural_compressor.ux.web.service.response_generator)": [[517, "neural_compressor.ux.web.service.response_generator.ResponseGenerator"]], "neural_compressor.ux.web.service.response_generator": [[517, "module-neural_compressor.ux.web.service.response_generator"]], "workloadservice (class in neural_compressor.ux.web.service.workload)": [[518, "neural_compressor.ux.web.service.workload.WorkloadService"]], "neural_compressor.ux.web.service.workload": [[518, "module-neural_compressor.ux.web.service.workload"]], "neural_compressor.version": [[519, "module-neural_compressor.version"]]}})