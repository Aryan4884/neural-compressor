Search.setIndex({"docnames": ["autoapi/644ec953a7dc_pruning_support/index", "autoapi/6ece06672ed3_v1_14/index", "autoapi/6f0d0f71d92e_v1_13/index", "autoapi/9e89549a08c8_v1_11/index", "autoapi/block_mask/index", "autoapi/env/index", "autoapi/neural_compressor/adaptor/adaptor/index", "autoapi/neural_compressor/adaptor/index", "autoapi/neural_compressor/adaptor/keras/index", "autoapi/neural_compressor/adaptor/keras_utils/conv2d/index", "autoapi/neural_compressor/adaptor/keras_utils/dense/index", "autoapi/neural_compressor/adaptor/keras_utils/depthwise_conv2d/index", "autoapi/neural_compressor/adaptor/keras_utils/index", "autoapi/neural_compressor/adaptor/keras_utils/quantizer/index", "autoapi/neural_compressor/adaptor/keras_utils/separable_conv2d/index", "autoapi/neural_compressor/adaptor/mxnet/index", "autoapi/neural_compressor/adaptor/mxnet_utils/index", "autoapi/neural_compressor/adaptor/mxnet_utils/util/index", "autoapi/neural_compressor/adaptor/onnxrt/index", "autoapi/neural_compressor/adaptor/ox_utils/calibration/index", "autoapi/neural_compressor/adaptor/ox_utils/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/activation/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/argmax/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/attention/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/binary_op/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/concat/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/conv/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/direct_q8/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/embed_layernorm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gather/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gavgpool/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gemm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/lstm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/matmul/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/maxpool/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/ops/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/pad/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/pooling/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/resize/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/split/index", "autoapi/neural_compressor/adaptor/ox_utils/quantizer/index", "autoapi/neural_compressor/adaptor/ox_utils/util/index", "autoapi/neural_compressor/adaptor/pytorch/index", "autoapi/neural_compressor/adaptor/query/index", "autoapi/neural_compressor/adaptor/tensorflow/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter_without_calib/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/bf16_convert/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_add_to_biasadd/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_layout/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_leakyrelu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_nan_to_random/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_placeholder_to_const/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dequantize_cast_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dilated_contraction/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dummy_biasadd/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/expanddims_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fetch_weight_from_reshape/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_batch_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_constant/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_biasadd_add/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_column_wise_mul/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_conv_with_math/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_in/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_gelu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_layer_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_reshape_transpose/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/graph_cse_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/grappler_pass/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/insert_print_node/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/move_squeeze_after_relu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/pre_optimize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/remove_training_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/rename_batch_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/split_shared_input/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_equivalent_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_unused_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/switch_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/graph_base/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_fake_quant/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value_without_calib/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_requantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_requantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/meta_op_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_hostconst_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_quantized_op_cse/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/rnn_convert/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/scale_propagation/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_node/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_schema/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/tf2onnx_utils/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/insert_qdq_pattern/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/merge_duplicated_qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/share_qdq_y_pattern/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_util/index", "autoapi/neural_compressor/adaptor/tf_utils/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/fake_quantize/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_config/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_helper/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/optimize_layer/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_wrapper/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_concatv2/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_deconv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_in/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_matmul/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_pooling/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/optimize_qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_base/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_concatv2/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_for_intel_cpu/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_matmul/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_pooling/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph_common/index", "autoapi/neural_compressor/adaptor/tf_utils/tf2onnx_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/bias_correction/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/graph_transform_base/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/insert_logging/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/rerange_quantized_concat/index", "autoapi/neural_compressor/adaptor/tf_utils/util/index", "autoapi/neural_compressor/adaptor/torch_utils/bf16_convert/index", "autoapi/neural_compressor/adaptor/torch_utils/hawq_metric/index", "autoapi/neural_compressor/adaptor/torch_utils/index", "autoapi/neural_compressor/adaptor/torch_utils/smooth_quant/index", "autoapi/neural_compressor/adaptor/torch_utils/symbolic_trace/index", "autoapi/neural_compressor/adaptor/torch_utils/util/index", "autoapi/neural_compressor/algorithm/algorithm/index", "autoapi/neural_compressor/algorithm/fast_bias_correction/index", "autoapi/neural_compressor/algorithm/index", "autoapi/neural_compressor/algorithm/smooth_quant/index", "autoapi/neural_compressor/algorithm/weight_correction/index", "autoapi/neural_compressor/benchmark/index", "autoapi/neural_compressor/compression/callbacks/index", "autoapi/neural_compressor/compression/distillation/criterions/index", "autoapi/neural_compressor/compression/distillation/index", "autoapi/neural_compressor/compression/index", "autoapi/neural_compressor/compression/pruner/criteria/index", "autoapi/neural_compressor/compression/pruner/index", "autoapi/neural_compressor/compression/pruner/model_slim/index", "autoapi/neural_compressor/compression/pruner/model_slim/pattern_analyzer/index", "autoapi/neural_compressor/compression/pruner/model_slim/weight_slim/index", "autoapi/neural_compressor/compression/pruner/patterns/index", "autoapi/neural_compressor/compression/pruner/pruners/index", "autoapi/neural_compressor/compression/pruner/regs/index", "autoapi/neural_compressor/compression/pruner/schedulers/index", "autoapi/neural_compressor/compression/pruner/utils/index", "autoapi/neural_compressor/conf/config/index", "autoapi/neural_compressor/conf/dotdict/index", "autoapi/neural_compressor/conf/index", "autoapi/neural_compressor/conf/pythonic_config/index", "autoapi/neural_compressor/config/index", "autoapi/neural_compressor/contrib/index", "autoapi/neural_compressor/contrib/strategy/index", "autoapi/neural_compressor/contrib/strategy/sigopt/index", "autoapi/neural_compressor/contrib/strategy/tpe/index", "autoapi/neural_compressor/data/dataloaders/base_dataloader/index", "autoapi/neural_compressor/data/dataloaders/dataloader/index", "autoapi/neural_compressor/data/dataloaders/default_dataloader/index", "autoapi/neural_compressor/data/dataloaders/fetcher/index", "autoapi/neural_compressor/data/dataloaders/index", "autoapi/neural_compressor/data/dataloaders/mxnet_dataloader/index", "autoapi/neural_compressor/data/dataloaders/onnxrt_dataloader/index", "autoapi/neural_compressor/data/dataloaders/pytorch_dataloader/index", "autoapi/neural_compressor/data/dataloaders/sampler/index", "autoapi/neural_compressor/data/dataloaders/tensorflow_dataloader/index", "autoapi/neural_compressor/data/datasets/bert_dataset/index", "autoapi/neural_compressor/data/datasets/coco_dataset/index", "autoapi/neural_compressor/data/datasets/dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/data/datasets/index", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/data/filters/coco_filter/index", "autoapi/neural_compressor/data/filters/filter/index", "autoapi/neural_compressor/data/filters/index", "autoapi/neural_compressor/data/index", "autoapi/neural_compressor/data/transforms/coco_transform/index", "autoapi/neural_compressor/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/data/transforms/index", "autoapi/neural_compressor/data/transforms/postprocess/index", "autoapi/neural_compressor/data/transforms/tokenization/index", "autoapi/neural_compressor/data/transforms/transform/index", "autoapi/neural_compressor/experimental/benchmark/index", "autoapi/neural_compressor/experimental/common/criterion/index", "autoapi/neural_compressor/experimental/common/dataloader/index", "autoapi/neural_compressor/experimental/common/index", "autoapi/neural_compressor/experimental/common/metric/index", "autoapi/neural_compressor/experimental/common/model/index", "autoapi/neural_compressor/experimental/common/optimizer/index", "autoapi/neural_compressor/experimental/common/postprocess/index", "autoapi/neural_compressor/experimental/common/torch_utils/index", "autoapi/neural_compressor/experimental/component/index", "autoapi/neural_compressor/experimental/compression/index", "autoapi/neural_compressor/experimental/compression/pruning/index", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index", "autoapi/neural_compressor/experimental/data/dataloaders/index", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/index", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index", "autoapi/neural_compressor/experimental/data/filters/filter/index", "autoapi/neural_compressor/experimental/data/filters/index", "autoapi/neural_compressor/experimental/data/index", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/experimental/data/transforms/index", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index", "autoapi/neural_compressor/experimental/data/transforms/transform/index", "autoapi/neural_compressor/experimental/distillation/index", "autoapi/neural_compressor/experimental/export/index", "autoapi/neural_compressor/experimental/export/qlinear2qdq/index", "autoapi/neural_compressor/experimental/export/tf2onnx/index", "autoapi/neural_compressor/experimental/export/torch2onnx/index", "autoapi/neural_compressor/experimental/export/utils/index", "autoapi/neural_compressor/experimental/graph_optimization/index", "autoapi/neural_compressor/experimental/index", "autoapi/neural_compressor/experimental/metric/bleu/index", "autoapi/neural_compressor/experimental/metric/bleu_util/index", "autoapi/neural_compressor/experimental/metric/coco_label_map/index", "autoapi/neural_compressor/experimental/metric/coco_tools/index", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index", "autoapi/neural_compressor/experimental/metric/f1/index", "autoapi/neural_compressor/experimental/metric/index", "autoapi/neural_compressor/experimental/metric/metric/index", "autoapi/neural_compressor/experimental/mixed_precision/index", "autoapi/neural_compressor/experimental/model_conversion/index", "autoapi/neural_compressor/experimental/nas/basic_nas/index", "autoapi/neural_compressor/experimental/nas/dynas/index", "autoapi/neural_compressor/experimental/nas/index", "autoapi/neural_compressor/experimental/nas/nas/index", "autoapi/neural_compressor/experimental/nas/nas_utils/index", "autoapi/neural_compressor/experimental/nas/search_algorithms/index", "autoapi/neural_compressor/experimental/pruner_legacy/gradient_sensitivity/index", "autoapi/neural_compressor/experimental/pruner_legacy/group_lasso/index", "autoapi/neural_compressor/experimental/pruner_legacy/index", "autoapi/neural_compressor/experimental/pruner_legacy/magnitude/index", "autoapi/neural_compressor/experimental/pruner_legacy/pattern_lock/index", "autoapi/neural_compressor/experimental/pruner_legacy/pruner/index", "autoapi/neural_compressor/experimental/pruning/index", "autoapi/neural_compressor/experimental/pruning_recipes/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index", "autoapi/neural_compressor/experimental/pruning_v2/index", "autoapi/neural_compressor/experimental/pytorch_pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index", "autoapi/neural_compressor/experimental/quantization/index", "autoapi/neural_compressor/experimental/scheduler/index", "autoapi/neural_compressor/index", "autoapi/neural_compressor/metric/bleu/index", "autoapi/neural_compressor/metric/bleu_util/index", "autoapi/neural_compressor/metric/coco_label_map/index", "autoapi/neural_compressor/metric/coco_tools/index", "autoapi/neural_compressor/metric/evaluate_squad/index", "autoapi/neural_compressor/metric/f1/index", "autoapi/neural_compressor/metric/index", "autoapi/neural_compressor/metric/metric/index", "autoapi/neural_compressor/mix_precision/index", "autoapi/neural_compressor/model/base_model/index", "autoapi/neural_compressor/model/index", "autoapi/neural_compressor/model/keras_model/index", "autoapi/neural_compressor/model/model/index", "autoapi/neural_compressor/model/mxnet_model/index", "autoapi/neural_compressor/model/nets_factory/index", "autoapi/neural_compressor/model/onnx_model/index", "autoapi/neural_compressor/model/tensorflow_model/index", "autoapi/neural_compressor/model/torch_model/index", "autoapi/neural_compressor/objective/index", "autoapi/neural_compressor/quantization/index", "autoapi/neural_compressor/strategy/auto/index", "autoapi/neural_compressor/strategy/auto_mixed_precision/index", "autoapi/neural_compressor/strategy/basic/index", "autoapi/neural_compressor/strategy/bayesian/index", "autoapi/neural_compressor/strategy/conservative/index", "autoapi/neural_compressor/strategy/exhaustive/index", "autoapi/neural_compressor/strategy/hawq_v2/index", "autoapi/neural_compressor/strategy/index", "autoapi/neural_compressor/strategy/mse/index", "autoapi/neural_compressor/strategy/mse_v2/index", "autoapi/neural_compressor/strategy/random/index", "autoapi/neural_compressor/strategy/strategy/index", "autoapi/neural_compressor/strategy/utils/constant/index", "autoapi/neural_compressor/strategy/utils/index", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index", "autoapi/neural_compressor/strategy/utils/tuning_space/index", "autoapi/neural_compressor/strategy/utils/tuning_structs/index", "autoapi/neural_compressor/strategy/utils/utility/index", "autoapi/neural_compressor/template/api_doc_example/index", "autoapi/neural_compressor/template/index", "autoapi/neural_compressor/training/index", "autoapi/neural_compressor/utils/collect_layer_histogram/index", "autoapi/neural_compressor/utils/constant/index", "autoapi/neural_compressor/utils/create_obj_from_config/index", "autoapi/neural_compressor/utils/index", "autoapi/neural_compressor/utils/kl_divergence/index", "autoapi/neural_compressor/utils/load_huggingface/index", "autoapi/neural_compressor/utils/logger/index", "autoapi/neural_compressor/utils/options/index", "autoapi/neural_compressor/utils/pytorch/index", "autoapi/neural_compressor/utils/utility/index", "autoapi/neural_compressor/ux/components/benchmark/benchmark/index", "autoapi/neural_compressor/ux/components/benchmark/benchmark_model/index", "autoapi/neural_compressor/ux/components/benchmark/execute_benchmark/index", "autoapi/neural_compressor/ux/components/benchmark/index", "autoapi/neural_compressor/ux/components/config_generator/benchmark_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/graph_optimization_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/mixed_precision_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/profiling_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/pruning_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/quantization_config_generator/index", "autoapi/neural_compressor/ux/components/configuration_wizard/configuration_parser/index", "autoapi/neural_compressor/ux/components/configuration_wizard/get_boundary_nodes/index", "autoapi/neural_compressor/ux/components/configuration_wizard/get_configuration/index", "autoapi/neural_compressor/ux/components/configuration_wizard/index", "autoapi/neural_compressor/ux/components/configuration_wizard/params_feeder/index", "autoapi/neural_compressor/ux/components/configuration_wizard/pruning_config_parser/index", "autoapi/neural_compressor/ux/components/db_manager/db_manager/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/benchmark/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/benchmark_result/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/dataloader/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/dataset/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/domain/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/domain_flavour/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/example/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/framework/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/metric/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/model/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/optimization/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/optimization_type/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/precision/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/profiling/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/profiling_result/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/project/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/pruning_details/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/transform/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/tuning_details/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/tuning_history/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/benchmark_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/dataset_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/db_operations/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/diagnosis_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/dictionaries_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/examples_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/model_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/optimization_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/profiling_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/project_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/index", "autoapi/neural_compressor/ux/components/db_manager/params_interfaces/index", "autoapi/neural_compressor/ux/components/db_manager/utils/index", "autoapi/neural_compressor/ux/components/diagnosis/diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/factory/index", "autoapi/neural_compressor/ux/components/diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/onnx_diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/onnx_diagnosis/onnxrt_diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/op_details/index", "autoapi/neural_compressor/ux/components/diagnosis/op_entry/index", "autoapi/neural_compressor/ux/components/diagnosis/tensorflow_diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/tensorflow_diagnosis/tensorflow_diagnosis/index", "autoapi/neural_compressor/ux/components/file_browser/file_browser/index", "autoapi/neural_compressor/ux/components/file_browser/index", "autoapi/neural_compressor/ux/components/graph/attribute/index", "autoapi/neural_compressor/ux/components/graph/collapser/index", "autoapi/neural_compressor/ux/components/graph/edge/index", "autoapi/neural_compressor/ux/components/graph/graph/index", "autoapi/neural_compressor/ux/components/graph/graph_reader/index", "autoapi/neural_compressor/ux/components/graph/index", "autoapi/neural_compressor/ux/components/graph/node/index", "autoapi/neural_compressor/ux/components/graph/reader/index", "autoapi/neural_compressor/ux/components/graph/reader/onnxrt_reader/index", "autoapi/neural_compressor/ux/components/graph/reader/tensorflow_reader/index", "autoapi/neural_compressor/ux/components/index", "autoapi/neural_compressor/ux/components/jobs_management/index", "autoapi/neural_compressor/ux/components/jobs_management/jobs_control_queue/index", "autoapi/neural_compressor/ux/components/jobs_management/jobs_manager/index", "autoapi/neural_compressor/ux/components/jobs_management/request/index", "autoapi/neural_compressor/ux/components/manage_workspace/index", "autoapi/neural_compressor/ux/components/model/domain/index", "autoapi/neural_compressor/ux/components/model/index", "autoapi/neural_compressor/ux/components/model/model/index", "autoapi/neural_compressor/ux/components/model/model_type_getter/index", "autoapi/neural_compressor/ux/components/model/onnxrt/index", "autoapi/neural_compressor/ux/components/model/onnxrt/model/index", "autoapi/neural_compressor/ux/components/model/pytorch/index", "autoapi/neural_compressor/ux/components/model/pytorch/model/index", "autoapi/neural_compressor/ux/components/model/repository/index", "autoapi/neural_compressor/ux/components/model/shape/index", "autoapi/neural_compressor/ux/components/model/tensorflow/frozen_pb/index", "autoapi/neural_compressor/ux/components/model/tensorflow/index", "autoapi/neural_compressor/ux/components/model/tensorflow/keras/index", "autoapi/neural_compressor/ux/components/model/tensorflow/meta_graph/index", "autoapi/neural_compressor/ux/components/model/tensorflow/model/index", "autoapi/neural_compressor/ux/components/model/tensorflow/saved_model/index", "autoapi/neural_compressor/ux/components/model/tensorflow/utils/index", "autoapi/neural_compressor/ux/components/model_zoo/download_config/index", "autoapi/neural_compressor/ux/components/model_zoo/download_model/index", "autoapi/neural_compressor/ux/components/model_zoo/downloader/index", "autoapi/neural_compressor/ux/components/model_zoo/index", "autoapi/neural_compressor/ux/components/model_zoo/list_models/index", "autoapi/neural_compressor/ux/components/names_mapper/index", "autoapi/neural_compressor/ux/components/names_mapper/names_mapper/index", "autoapi/neural_compressor/ux/components/optimization/execute_optimization/index", "autoapi/neural_compressor/ux/components/optimization/factory/index", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/graph_optimization/index", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/index", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/optimize_model/index", "autoapi/neural_compressor/ux/components/optimization/index", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/index", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/mixed_precision/index", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/optimize_model/index", "autoapi/neural_compressor/ux/components/optimization/neural_coder_optimization/index", "autoapi/neural_compressor/ux/components/optimization/neural_coder_optimization/optimize_model/index", "autoapi/neural_compressor/ux/components/optimization/optimization/index", "autoapi/neural_compressor/ux/components/optimization/pruning/index", "autoapi/neural_compressor/ux/components/optimization/pruning/optimize_model/index", "autoapi/neural_compressor/ux/components/optimization/pruning/pruning/index", "autoapi/neural_compressor/ux/components/optimization/tune/index", "autoapi/neural_compressor/ux/components/optimization/tune/tune_model/index", "autoapi/neural_compressor/ux/components/optimization/tune/tuning/index", "autoapi/neural_compressor/ux/components/optimization/tuning_history/index", "autoapi/neural_compressor/ux/components/profiling/execute_profiling/index", "autoapi/neural_compressor/ux/components/profiling/factory/index", "autoapi/neural_compressor/ux/components/profiling/index", "autoapi/neural_compressor/ux/components/profiling/profile_model/index", "autoapi/neural_compressor/ux/components/profiling/profiler/index", "autoapi/neural_compressor/ux/components/profiling/profiling/index", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/factory/index", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/index", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/profiler/index", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/utils/index", "autoapi/neural_compressor/ux/inc_bench/index", "autoapi/neural_compressor/ux/index", "autoapi/neural_compressor/ux/utils/consts/index", "autoapi/neural_compressor/ux/utils/environment/index", "autoapi/neural_compressor/ux/utils/exceptions/index", "autoapi/neural_compressor/ux/utils/executor/index", "autoapi/neural_compressor/ux/utils/expiring_dict/index", "autoapi/neural_compressor/ux/utils/github_info/index", "autoapi/neural_compressor/ux/utils/hw_info/index", "autoapi/neural_compressor/ux/utils/index", "autoapi/neural_compressor/ux/utils/json_serializer/index", "autoapi/neural_compressor/ux/utils/logger/index", "autoapi/neural_compressor/ux/utils/parser/index", "autoapi/neural_compressor/ux/utils/proc/index", "autoapi/neural_compressor/ux/utils/processes/index", "autoapi/neural_compressor/ux/utils/singleton/index", "autoapi/neural_compressor/ux/utils/status_updates/index", "autoapi/neural_compressor/ux/utils/templates/index", "autoapi/neural_compressor/ux/utils/templates/metric/index", "autoapi/neural_compressor/ux/utils/templates/workdir/index", "autoapi/neural_compressor/ux/utils/utils/index", "autoapi/neural_compressor/ux/utils/workload/config/index", "autoapi/neural_compressor/ux/utils/workload/dataloader/index", "autoapi/neural_compressor/ux/utils/workload/evaluation/index", "autoapi/neural_compressor/ux/utils/workload/graph_optimization/index", "autoapi/neural_compressor/ux/utils/workload/index", "autoapi/neural_compressor/ux/utils/workload/mixed_precision/index", "autoapi/neural_compressor/ux/utils/workload/model/index", "autoapi/neural_compressor/ux/utils/workload/pruning/index", "autoapi/neural_compressor/ux/utils/workload/quantization/index", "autoapi/neural_compressor/ux/utils/workload/tuning/index", "autoapi/neural_compressor/ux/utils/yaml_utils/index", "autoapi/neural_compressor/ux/web/communication/index", "autoapi/neural_compressor/ux/web/configuration/index", "autoapi/neural_compressor/ux/web/exceptions/index", "autoapi/neural_compressor/ux/web/index", "autoapi/neural_compressor/ux/web/router/index", "autoapi/neural_compressor/ux/web/server/index", "autoapi/neural_compressor/ux/web/service/benchmark/index", "autoapi/neural_compressor/ux/web/service/history_snapshot_parser/index", "autoapi/neural_compressor/ux/web/service/index", "autoapi/neural_compressor/ux/web/service/model/index", "autoapi/neural_compressor/ux/web/service/optimization/index", "autoapi/neural_compressor/ux/web/service/profiling/index", "autoapi/neural_compressor/ux/web/service/request_data_processor/index", "autoapi/neural_compressor/ux/web/service/response_generator/index", "autoapi/neural_compressor/ux/web/service/workload/index", "autoapi/neural_compressor/version/index", "docs/build_docs/source/index", "docs/source/CODE_OF_CONDUCT", "docs/source/CONTRIBUTING", "docs/source/FX", "docs/source/NAS", "docs/source/SECURITY", "docs/source/Welcome", "docs/source/adaptor", "docs/source/api-doc/adaptor", "docs/source/api-doc/adaptor/onnxrt", "docs/source/api-doc/adaptor/torch_utils", "docs/source/api-doc/api_doc_example", "docs/source/api-doc/apis", "docs/source/api-doc/benchmark", "docs/source/api-doc/compression", "docs/source/api-doc/config", "docs/source/api-doc/mix_precision", "docs/source/api-doc/model", "docs/source/api-doc/objective", "docs/source/api-doc/quantization", "docs/source/api-doc/strategy", "docs/source/api-doc/training", "docs/source/bench", "docs/source/benchmark", "docs/source/dataloader", "docs/source/dataset", "docs/source/design", "docs/source/distillation", "docs/source/distillation_quantization", "docs/source/distributed", "docs/source/examples_readme", "docs/source/export", "docs/source/faq", "docs/source/framework_yaml", "docs/source/get_started", "docs/source/incompatible_changes", "docs/source/infrastructure", "docs/source/installation_guide", "docs/source/legal_information", "docs/source/metric", "docs/source/migration", "docs/source/mixed_precision", "docs/source/model", "docs/source/neural_coder/README", "docs/source/neural_coder/docs/AWSSageMakerSupport", "docs/source/neural_coder/docs/BigDLNanoSupport", "docs/source/neural_coder/docs/IntelCPU_PerformanceSetting", "docs/source/neural_coder/docs/PythonAPI", "docs/source/neural_coder/docs/PythonLauncher", "docs/source/neural_coder/docs/Quantization", "docs/source/neural_coder/docs/SupportMatrix", "docs/source/neural_coder/docs/release_notes/v0.4", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/DEVELOP", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/README", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/RELEASE", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/DEVELOP", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/RELEASE", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/README", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/vsc-extension-quickstart", "docs/source/objective", "docs/source/orchestration", "docs/source/platform_configuration", "docs/source/pruning", "docs/source/publication_list", "docs/source/pythonic_style", "docs/source/quantization", "docs/source/quantization_mixed_precision", "docs/source/releases_info", "docs/source/sigopt_strategy", "docs/source/smooth_quant", "docs/source/tensorboard", "docs/source/transform", "docs/source/tuning_strategies", "docs/source/user_guide", "docs/source/user_yaml", "docs/source/validated_model_list", "index"], "filenames": ["autoapi/644ec953a7dc_pruning_support/index.rst", "autoapi/6ece06672ed3_v1_14/index.rst", "autoapi/6f0d0f71d92e_v1_13/index.rst", "autoapi/9e89549a08c8_v1_11/index.rst", "autoapi/block_mask/index.rst", "autoapi/env/index.rst", "autoapi/neural_compressor/adaptor/adaptor/index.rst", "autoapi/neural_compressor/adaptor/index.rst", "autoapi/neural_compressor/adaptor/keras/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/conv2d/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/dense/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/depthwise_conv2d/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/quantizer/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/separable_conv2d/index.rst", "autoapi/neural_compressor/adaptor/mxnet/index.rst", "autoapi/neural_compressor/adaptor/mxnet_utils/index.rst", "autoapi/neural_compressor/adaptor/mxnet_utils/util/index.rst", "autoapi/neural_compressor/adaptor/onnxrt/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/calibration/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/activation/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/argmax/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/attention/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/binary_op/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/concat/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/conv/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/direct_q8/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/embed_layernorm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gather/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gavgpool/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gemm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/lstm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/matmul/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/maxpool/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/ops/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/pad/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/pooling/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/resize/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/split/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/quantizer/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/util/index.rst", "autoapi/neural_compressor/adaptor/pytorch/index.rst", "autoapi/neural_compressor/adaptor/query/index.rst", "autoapi/neural_compressor/adaptor/tensorflow/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter_without_calib/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/bf16_convert/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_add_to_biasadd/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_layout/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_leakyrelu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_nan_to_random/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_placeholder_to_const/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dequantize_cast_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dilated_contraction/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dummy_biasadd/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/expanddims_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fetch_weight_from_reshape/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_batch_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_constant/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_biasadd_add/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_column_wise_mul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_conv_with_math/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_in/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_gelu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_layer_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_reshape_transpose/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/graph_cse_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/grappler_pass/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/insert_print_node/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/move_squeeze_after_relu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/pre_optimize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/remove_training_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/rename_batch_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/split_shared_input/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_equivalent_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_unused_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/switch_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/graph_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_fake_quant/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value_without_calib/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_requantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_requantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/meta_op_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_hostconst_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_quantized_op_cse/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/rnn_convert/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/scale_propagation/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_node/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_schema/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/tf2onnx_utils/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/insert_qdq_pattern/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/merge_duplicated_qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/share_qdq_y_pattern/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_util/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/fake_quantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_config/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_helper/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/optimize_layer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_wrapper/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_concatv2/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_deconv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_in/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_matmul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_pooling/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/optimize_qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_concatv2/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_for_intel_cpu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_matmul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_pooling/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph_common/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/tf2onnx_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/bias_correction/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/graph_transform_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/insert_logging/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/rerange_quantized_concat/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/util/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/bf16_convert/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/hawq_metric/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/smooth_quant/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/symbolic_trace/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/util/index.rst", "autoapi/neural_compressor/algorithm/algorithm/index.rst", "autoapi/neural_compressor/algorithm/fast_bias_correction/index.rst", "autoapi/neural_compressor/algorithm/index.rst", "autoapi/neural_compressor/algorithm/smooth_quant/index.rst", "autoapi/neural_compressor/algorithm/weight_correction/index.rst", "autoapi/neural_compressor/benchmark/index.rst", "autoapi/neural_compressor/compression/callbacks/index.rst", "autoapi/neural_compressor/compression/distillation/criterions/index.rst", "autoapi/neural_compressor/compression/distillation/index.rst", "autoapi/neural_compressor/compression/index.rst", "autoapi/neural_compressor/compression/pruner/criteria/index.rst", "autoapi/neural_compressor/compression/pruner/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/pattern_analyzer/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/weight_slim/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/index.rst", "autoapi/neural_compressor/compression/pruner/regs/index.rst", "autoapi/neural_compressor/compression/pruner/schedulers/index.rst", "autoapi/neural_compressor/compression/pruner/utils/index.rst", "autoapi/neural_compressor/conf/config/index.rst", "autoapi/neural_compressor/conf/dotdict/index.rst", "autoapi/neural_compressor/conf/index.rst", "autoapi/neural_compressor/conf/pythonic_config/index.rst", "autoapi/neural_compressor/config/index.rst", "autoapi/neural_compressor/contrib/index.rst", "autoapi/neural_compressor/contrib/strategy/index.rst", "autoapi/neural_compressor/contrib/strategy/sigopt/index.rst", "autoapi/neural_compressor/contrib/strategy/tpe/index.rst", "autoapi/neural_compressor/data/dataloaders/base_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/default_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/fetcher/index.rst", "autoapi/neural_compressor/data/dataloaders/index.rst", "autoapi/neural_compressor/data/dataloaders/mxnet_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/onnxrt_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/pytorch_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/sampler/index.rst", "autoapi/neural_compressor/data/dataloaders/tensorflow_dataloader/index.rst", "autoapi/neural_compressor/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/data/datasets/index.rst", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/data/filters/filter/index.rst", "autoapi/neural_compressor/data/filters/index.rst", "autoapi/neural_compressor/data/index.rst", "autoapi/neural_compressor/data/transforms/coco_transform/index.rst", "autoapi/neural_compressor/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/data/transforms/index.rst", "autoapi/neural_compressor/data/transforms/postprocess/index.rst", "autoapi/neural_compressor/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/benchmark/index.rst", "autoapi/neural_compressor/experimental/common/criterion/index.rst", "autoapi/neural_compressor/experimental/common/dataloader/index.rst", "autoapi/neural_compressor/experimental/common/index.rst", "autoapi/neural_compressor/experimental/common/metric/index.rst", "autoapi/neural_compressor/experimental/common/model/index.rst", "autoapi/neural_compressor/experimental/common/optimizer/index.rst", "autoapi/neural_compressor/experimental/common/postprocess/index.rst", "autoapi/neural_compressor/experimental/common/torch_utils/index.rst", "autoapi/neural_compressor/experimental/component/index.rst", "autoapi/neural_compressor/experimental/compression/index.rst", "autoapi/neural_compressor/experimental/compression/pruning/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/index.rst", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/index.rst", "autoapi/neural_compressor/experimental/data/index.rst", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/experimental/data/transforms/index.rst", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/experimental/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/distillation/index.rst", "autoapi/neural_compressor/experimental/export/index.rst", "autoapi/neural_compressor/experimental/export/qlinear2qdq/index.rst", "autoapi/neural_compressor/experimental/export/tf2onnx/index.rst", "autoapi/neural_compressor/experimental/export/torch2onnx/index.rst", "autoapi/neural_compressor/experimental/export/utils/index.rst", "autoapi/neural_compressor/experimental/graph_optimization/index.rst", "autoapi/neural_compressor/experimental/index.rst", "autoapi/neural_compressor/experimental/metric/bleu/index.rst", "autoapi/neural_compressor/experimental/metric/bleu_util/index.rst", "autoapi/neural_compressor/experimental/metric/coco_label_map/index.rst", "autoapi/neural_compressor/experimental/metric/coco_tools/index.rst", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/experimental/metric/f1/index.rst", "autoapi/neural_compressor/experimental/metric/index.rst", "autoapi/neural_compressor/experimental/metric/metric/index.rst", "autoapi/neural_compressor/experimental/mixed_precision/index.rst", "autoapi/neural_compressor/experimental/model_conversion/index.rst", "autoapi/neural_compressor/experimental/nas/basic_nas/index.rst", "autoapi/neural_compressor/experimental/nas/dynas/index.rst", "autoapi/neural_compressor/experimental/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas_utils/index.rst", "autoapi/neural_compressor/experimental/nas/search_algorithms/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/gradient_sensitivity/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/group_lasso/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/magnitude/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/pattern_lock/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/pruner/index.rst", "autoapi/neural_compressor/experimental/pruning/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_v2/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index.rst", "autoapi/neural_compressor/experimental/quantization/index.rst", "autoapi/neural_compressor/experimental/scheduler/index.rst", "autoapi/neural_compressor/index.rst", "autoapi/neural_compressor/metric/bleu/index.rst", "autoapi/neural_compressor/metric/bleu_util/index.rst", "autoapi/neural_compressor/metric/coco_label_map/index.rst", "autoapi/neural_compressor/metric/coco_tools/index.rst", "autoapi/neural_compressor/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/metric/f1/index.rst", "autoapi/neural_compressor/metric/index.rst", "autoapi/neural_compressor/metric/metric/index.rst", "autoapi/neural_compressor/mix_precision/index.rst", "autoapi/neural_compressor/model/base_model/index.rst", "autoapi/neural_compressor/model/index.rst", "autoapi/neural_compressor/model/keras_model/index.rst", "autoapi/neural_compressor/model/model/index.rst", "autoapi/neural_compressor/model/mxnet_model/index.rst", "autoapi/neural_compressor/model/nets_factory/index.rst", "autoapi/neural_compressor/model/onnx_model/index.rst", "autoapi/neural_compressor/model/tensorflow_model/index.rst", "autoapi/neural_compressor/model/torch_model/index.rst", "autoapi/neural_compressor/objective/index.rst", "autoapi/neural_compressor/quantization/index.rst", "autoapi/neural_compressor/strategy/auto/index.rst", "autoapi/neural_compressor/strategy/auto_mixed_precision/index.rst", "autoapi/neural_compressor/strategy/basic/index.rst", "autoapi/neural_compressor/strategy/bayesian/index.rst", "autoapi/neural_compressor/strategy/conservative/index.rst", "autoapi/neural_compressor/strategy/exhaustive/index.rst", "autoapi/neural_compressor/strategy/hawq_v2/index.rst", "autoapi/neural_compressor/strategy/index.rst", "autoapi/neural_compressor/strategy/mse/index.rst", "autoapi/neural_compressor/strategy/mse_v2/index.rst", "autoapi/neural_compressor/strategy/random/index.rst", "autoapi/neural_compressor/strategy/strategy/index.rst", "autoapi/neural_compressor/strategy/utils/constant/index.rst", "autoapi/neural_compressor/strategy/utils/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_space/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_structs/index.rst", "autoapi/neural_compressor/strategy/utils/utility/index.rst", "autoapi/neural_compressor/template/api_doc_example/index.rst", "autoapi/neural_compressor/template/index.rst", "autoapi/neural_compressor/training/index.rst", "autoapi/neural_compressor/utils/collect_layer_histogram/index.rst", "autoapi/neural_compressor/utils/constant/index.rst", "autoapi/neural_compressor/utils/create_obj_from_config/index.rst", "autoapi/neural_compressor/utils/index.rst", "autoapi/neural_compressor/utils/kl_divergence/index.rst", "autoapi/neural_compressor/utils/load_huggingface/index.rst", "autoapi/neural_compressor/utils/logger/index.rst", "autoapi/neural_compressor/utils/options/index.rst", "autoapi/neural_compressor/utils/pytorch/index.rst", "autoapi/neural_compressor/utils/utility/index.rst", "autoapi/neural_compressor/ux/components/benchmark/benchmark/index.rst", "autoapi/neural_compressor/ux/components/benchmark/benchmark_model/index.rst", "autoapi/neural_compressor/ux/components/benchmark/execute_benchmark/index.rst", "autoapi/neural_compressor/ux/components/benchmark/index.rst", "autoapi/neural_compressor/ux/components/config_generator/benchmark_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/graph_optimization_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/mixed_precision_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/profiling_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/pruning_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/quantization_config_generator/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/configuration_parser/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/get_boundary_nodes/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/get_configuration/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/params_feeder/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/pruning_config_parser/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_manager/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/benchmark/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/benchmark_result/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/dataloader/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/dataset/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/domain/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/domain_flavour/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/example/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/framework/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/metric/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/model/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/optimization/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/optimization_type/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/precision/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/profiling/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/profiling_result/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/project/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/pruning_details/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/transform/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/tuning_details/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/tuning_history/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/benchmark_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/dataset_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/db_operations/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/diagnosis_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/dictionaries_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/examples_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/model_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/optimization_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/profiling_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/project_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/index.rst", "autoapi/neural_compressor/ux/components/db_manager/params_interfaces/index.rst", "autoapi/neural_compressor/ux/components/db_manager/utils/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/factory/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/onnx_diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/onnx_diagnosis/onnxrt_diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/op_details/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/op_entry/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/tensorflow_diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/tensorflow_diagnosis/tensorflow_diagnosis/index.rst", "autoapi/neural_compressor/ux/components/file_browser/file_browser/index.rst", "autoapi/neural_compressor/ux/components/file_browser/index.rst", "autoapi/neural_compressor/ux/components/graph/attribute/index.rst", "autoapi/neural_compressor/ux/components/graph/collapser/index.rst", "autoapi/neural_compressor/ux/components/graph/edge/index.rst", "autoapi/neural_compressor/ux/components/graph/graph/index.rst", "autoapi/neural_compressor/ux/components/graph/graph_reader/index.rst", "autoapi/neural_compressor/ux/components/graph/index.rst", "autoapi/neural_compressor/ux/components/graph/node/index.rst", "autoapi/neural_compressor/ux/components/graph/reader/index.rst", "autoapi/neural_compressor/ux/components/graph/reader/onnxrt_reader/index.rst", "autoapi/neural_compressor/ux/components/graph/reader/tensorflow_reader/index.rst", "autoapi/neural_compressor/ux/components/index.rst", "autoapi/neural_compressor/ux/components/jobs_management/index.rst", "autoapi/neural_compressor/ux/components/jobs_management/jobs_control_queue/index.rst", "autoapi/neural_compressor/ux/components/jobs_management/jobs_manager/index.rst", "autoapi/neural_compressor/ux/components/jobs_management/request/index.rst", "autoapi/neural_compressor/ux/components/manage_workspace/index.rst", "autoapi/neural_compressor/ux/components/model/domain/index.rst", "autoapi/neural_compressor/ux/components/model/index.rst", "autoapi/neural_compressor/ux/components/model/model/index.rst", "autoapi/neural_compressor/ux/components/model/model_type_getter/index.rst", "autoapi/neural_compressor/ux/components/model/onnxrt/index.rst", "autoapi/neural_compressor/ux/components/model/onnxrt/model/index.rst", "autoapi/neural_compressor/ux/components/model/pytorch/index.rst", "autoapi/neural_compressor/ux/components/model/pytorch/model/index.rst", "autoapi/neural_compressor/ux/components/model/repository/index.rst", "autoapi/neural_compressor/ux/components/model/shape/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/frozen_pb/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/keras/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/meta_graph/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/model/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/saved_model/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/utils/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/download_config/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/download_model/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/downloader/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/list_models/index.rst", "autoapi/neural_compressor/ux/components/names_mapper/index.rst", "autoapi/neural_compressor/ux/components/names_mapper/names_mapper/index.rst", "autoapi/neural_compressor/ux/components/optimization/execute_optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/factory/index.rst", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/graph_optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/index.rst", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/optimize_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/index.rst", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/mixed_precision/index.rst", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/optimize_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/neural_coder_optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/neural_coder_optimization/optimize_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/pruning/index.rst", "autoapi/neural_compressor/ux/components/optimization/pruning/optimize_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/pruning/pruning/index.rst", "autoapi/neural_compressor/ux/components/optimization/tune/index.rst", "autoapi/neural_compressor/ux/components/optimization/tune/tune_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/tune/tuning/index.rst", "autoapi/neural_compressor/ux/components/optimization/tuning_history/index.rst", "autoapi/neural_compressor/ux/components/profiling/execute_profiling/index.rst", "autoapi/neural_compressor/ux/components/profiling/factory/index.rst", "autoapi/neural_compressor/ux/components/profiling/index.rst", "autoapi/neural_compressor/ux/components/profiling/profile_model/index.rst", "autoapi/neural_compressor/ux/components/profiling/profiler/index.rst", "autoapi/neural_compressor/ux/components/profiling/profiling/index.rst", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/factory/index.rst", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/index.rst", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/profiler/index.rst", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/utils/index.rst", "autoapi/neural_compressor/ux/inc_bench/index.rst", "autoapi/neural_compressor/ux/index.rst", "autoapi/neural_compressor/ux/utils/consts/index.rst", "autoapi/neural_compressor/ux/utils/environment/index.rst", "autoapi/neural_compressor/ux/utils/exceptions/index.rst", "autoapi/neural_compressor/ux/utils/executor/index.rst", "autoapi/neural_compressor/ux/utils/expiring_dict/index.rst", "autoapi/neural_compressor/ux/utils/github_info/index.rst", "autoapi/neural_compressor/ux/utils/hw_info/index.rst", "autoapi/neural_compressor/ux/utils/index.rst", "autoapi/neural_compressor/ux/utils/json_serializer/index.rst", "autoapi/neural_compressor/ux/utils/logger/index.rst", "autoapi/neural_compressor/ux/utils/parser/index.rst", "autoapi/neural_compressor/ux/utils/proc/index.rst", "autoapi/neural_compressor/ux/utils/processes/index.rst", "autoapi/neural_compressor/ux/utils/singleton/index.rst", "autoapi/neural_compressor/ux/utils/status_updates/index.rst", "autoapi/neural_compressor/ux/utils/templates/index.rst", "autoapi/neural_compressor/ux/utils/templates/metric/index.rst", "autoapi/neural_compressor/ux/utils/templates/workdir/index.rst", "autoapi/neural_compressor/ux/utils/utils/index.rst", "autoapi/neural_compressor/ux/utils/workload/config/index.rst", "autoapi/neural_compressor/ux/utils/workload/dataloader/index.rst", "autoapi/neural_compressor/ux/utils/workload/evaluation/index.rst", "autoapi/neural_compressor/ux/utils/workload/graph_optimization/index.rst", "autoapi/neural_compressor/ux/utils/workload/index.rst", "autoapi/neural_compressor/ux/utils/workload/mixed_precision/index.rst", "autoapi/neural_compressor/ux/utils/workload/model/index.rst", "autoapi/neural_compressor/ux/utils/workload/pruning/index.rst", "autoapi/neural_compressor/ux/utils/workload/quantization/index.rst", "autoapi/neural_compressor/ux/utils/workload/tuning/index.rst", "autoapi/neural_compressor/ux/utils/yaml_utils/index.rst", "autoapi/neural_compressor/ux/web/communication/index.rst", "autoapi/neural_compressor/ux/web/configuration/index.rst", "autoapi/neural_compressor/ux/web/exceptions/index.rst", "autoapi/neural_compressor/ux/web/index.rst", "autoapi/neural_compressor/ux/web/router/index.rst", "autoapi/neural_compressor/ux/web/server/index.rst", "autoapi/neural_compressor/ux/web/service/benchmark/index.rst", "autoapi/neural_compressor/ux/web/service/history_snapshot_parser/index.rst", "autoapi/neural_compressor/ux/web/service/index.rst", "autoapi/neural_compressor/ux/web/service/model/index.rst", "autoapi/neural_compressor/ux/web/service/optimization/index.rst", "autoapi/neural_compressor/ux/web/service/profiling/index.rst", "autoapi/neural_compressor/ux/web/service/request_data_processor/index.rst", "autoapi/neural_compressor/ux/web/service/response_generator/index.rst", "autoapi/neural_compressor/ux/web/service/workload/index.rst", "autoapi/neural_compressor/version/index.rst", "docs/build_docs/source/index.rst", "docs/source/CODE_OF_CONDUCT.md", "docs/source/CONTRIBUTING.md", "docs/source/FX.md", "docs/source/NAS.md", "docs/source/SECURITY.md", "docs/source/Welcome.md", "docs/source/adaptor.md", "docs/source/api-doc/adaptor.rst", "docs/source/api-doc/adaptor/onnxrt.rst", "docs/source/api-doc/adaptor/torch_utils.rst", "docs/source/api-doc/api_doc_example.rst", "docs/source/api-doc/apis.rst", "docs/source/api-doc/benchmark.rst", "docs/source/api-doc/compression.rst", "docs/source/api-doc/config.rst", "docs/source/api-doc/mix_precision.rst", "docs/source/api-doc/model.rst", "docs/source/api-doc/objective.rst", "docs/source/api-doc/quantization.rst", "docs/source/api-doc/strategy.rst", "docs/source/api-doc/training.rst", "docs/source/bench.md", "docs/source/benchmark.md", "docs/source/dataloader.md", "docs/source/dataset.md", "docs/source/design.md", "docs/source/distillation.md", "docs/source/distillation_quantization.md", "docs/source/distributed.md", "docs/source/examples_readme.md", "docs/source/export.md", "docs/source/faq.md", "docs/source/framework_yaml.md", "docs/source/get_started.md", "docs/source/incompatible_changes.md", "docs/source/infrastructure.md", "docs/source/installation_guide.md", "docs/source/legal_information.md", "docs/source/metric.md", "docs/source/migration.md", "docs/source/mixed_precision.md", "docs/source/model.md", "docs/source/neural_coder/README.md", "docs/source/neural_coder/docs/AWSSageMakerSupport.md", "docs/source/neural_coder/docs/BigDLNanoSupport.md", "docs/source/neural_coder/docs/IntelCPU_PerformanceSetting.md", "docs/source/neural_coder/docs/PythonAPI.md", "docs/source/neural_coder/docs/PythonLauncher.md", "docs/source/neural_coder/docs/Quantization.md", "docs/source/neural_coder/docs/SupportMatrix.md", "docs/source/neural_coder/docs/release_notes/v0.4.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/DEVELOP.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/README.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/RELEASE.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/DEVELOP.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/RELEASE.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/README.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/vsc-extension-quickstart.md", "docs/source/objective.md", "docs/source/orchestration.md", "docs/source/platform_configuration.md", "docs/source/pruning.md", "docs/source/publication_list.md", "docs/source/pythonic_style.md", "docs/source/quantization.md", "docs/source/quantization_mixed_precision.md", "docs/source/releases_info.md", "docs/source/sigopt_strategy.md", "docs/source/smooth_quant.md", "docs/source/tensorboard.md", "docs/source/transform.md", "docs/source/tuning_strategies.md", "docs/source/user_guide.md", "docs/source/user_yaml.md", "docs/source/validated_model_list.md", "index.rst"], "titles": ["<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">644ec953a7dc_pruning_support</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">6ece06672ed3_v1_14</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">6f0d0f71d92e_v1_13</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">9e89549a08c8_v1_11</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">block_mask</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">env</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.adaptor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.dense</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.depthwise_conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.separable_conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.onnxrt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.calibration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.activation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.argmax</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.attention</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.binary_op</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.concat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.direct_q8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.embed_layernorm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gather</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gavgpool</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gemm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.lstm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.maxpool</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.ops</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.pad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.resize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.split</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.query</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tensorflow</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_converter_without_calib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph_common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.tf2onnx_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.bias_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.insert_logging</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.bf16_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.hawq_metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.smooth_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.symbolic_trace</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.algorithm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.fast_bias_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.smooth_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.weight_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.callbacks</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.distillation.criterions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.distillation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.criteria</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim.pattern_analyzer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim.weight_slim</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.regs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.schedulers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.dotdict</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.pythonic_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy.sigopt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy.tpe</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.base_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.default_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.fetcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.mxnet_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.onnxrt_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.pytorch_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.tensorflow_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.bert_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.coco_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dummy_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dummy_dataset_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.imagenet_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.style_transfer_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters.coco_filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters.filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.coco_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.imagenet_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.postprocess</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.tokenization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.criterion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.postprocess</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.torch_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.component</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.compression</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.compression.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.base_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.default_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.fetcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.mxnet_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.onnxrt_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.pytorch_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.tensorflow_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.bert_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.coco_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dummy_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dummy_dataset_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.imagenet_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.style_transfer_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters.coco_filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters.filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.imagenet_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.tokenization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.distillation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.qlinear2qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.tf2onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.torch2onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.graph_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.bleu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.bleu_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.coco_label_map</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.coco_tools</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.evaluate_squad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.f1</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.model_conversion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.basic_nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.nas_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.search_algorithms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.gradient_sensitivity</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.group_lasso</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.magnitude</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.pattern_lock</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns.pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns.tile_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.prune_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.scheduler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.scheduler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.bleu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.bleu_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.coco_label_map</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.coco_tools</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.evaluate_squad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.f1</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.mix_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.base_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.keras_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.mxnet_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.nets_factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.onnx_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.tensorflow_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.torch_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.objective</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.auto</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.auto_mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.basic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.bayesian</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.conservative</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.exhaustive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.hawq_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.mse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.mse_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_space</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_structs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.template.api_doc_example</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.template</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.training</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.collect_layer_histogram</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.create_obj_from_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.kl_divergence</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.load_huggingface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.options</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.benchmark.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.benchmark.benchmark_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.benchmark.execute_benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.benchmark_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.graph_optimization_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.mixed_precision_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.profiling_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.pruning_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.quantization_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.configuration_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.get_boundary_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.get_configuration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.params_feeder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.pruning_config_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_manager</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.benchmark_result</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.domain</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.domain_flavour</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.example</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.framework</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.optimization_type</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.profiling_result</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.project</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.pruning_details</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.tuning_details</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.tuning_history</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.db_operations</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.examples_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.model_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.project_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.params_interfaces</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.onnx_diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.op_details</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.op_entry</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.tensorflow_diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.file_browser.file_browser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.file_browser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.attribute</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.collapser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.edge</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.graph_reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.reader.onnxrt_reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.reader.tensorflow_reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.jobs_management</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.jobs_management.jobs_control_queue</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.jobs_management.jobs_manager</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.jobs_management.request</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.manage_workspace</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.domain</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.model_type_getter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.onnxrt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.onnxrt.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.pytorch.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.repository</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.shape</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.frozen_pb</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.keras</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.meta_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.saved_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo.download_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo.download_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo.downloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo.list_models</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.names_mapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.names_mapper.names_mapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.execute_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.graph_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.graph_optimizer.optimize_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.mixed_precision.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.mixed_precision.optimize_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.neural_coder_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.pruning.optimize_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.pruning.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.tune</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.tune.tune_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.tune.tuning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.tuning_history</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.execute_profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.profile_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.tensorflow_profiler.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.tensorflow_profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.tensorflow_profiler.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.tensorflow_profiler.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.inc_bench</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.consts</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.environment</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.exceptions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.executor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.expiring_dict</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.github_info</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.hw_info</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.json_serializer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.proc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.processes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.singleton</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.status_updates</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.templates</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.templates.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.templates.workdir</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.evaluation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.graph_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.tuning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.yaml_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.communication</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.configuration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.exceptions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.router</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.server</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.history_snapshot_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.request_data_processor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.response_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.workload</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.version</span></code>", "Intel\u00ae Neural Compressor Documentation", "Contributor Covenant Code of Conduct", "Contribution Guidelines", "FX", "Neural Architecture Search", "Security Policy", "Intel\u00ae Neural Compressor", "Adaptor", "Adaptor", "ONNX Runtime", "Torch Utils", "API Document Example", "APIs", "Benchmark", "Compression", "Config", "Mix Precision", "Model", "Objective", "Quantization", "Strategy", "Training", "Intel\u00ae Neural Compressor Bench", "Benchmarking", "DataLoader", "Dataset", "Design", "Distillation", "Distillation for Quantization", "Distributed Training and Inference (Evaluation)", "Examples", "Export", "Frequently Asked Questions", "Framework YAML Configuration Files", "Getting Started", "Incompatible changes between v1.2 and v1.1", "Infrastructure of Intel\u00ae Neural Compressor", "Installation", "Legal Information", "Metrics", "Code Migration from Intel Neural Compressor 1.X to Intel Neural Compressor 2.X", "Mixed Precision", "Model", "Neural Coder", "AWS Amazon SageMaker Support", "BigDL Nano Support", "Intel CPU Platforms: Best Performance Setting", "Neural Coder as Python API", "Python Launcher", "Neural Coder for Quantization", "Supported Optimization Features", "v0.4", "Changelog", "neural_compressor_ext_lab", "Intel\u00ae Neural Compressor as JupyterLab Extension", "Making a new release of neural_compressor_ext_lab", "Changelog", "neural_compressor_ext_lab_alibaba", "Making a new release of neural_compressor_ext_lab_alibaba", "Change Log", "Neural Coder", "Welcome to your VS Code Extension", "Objective", "Optimization Orchestration", "SYSTEM CONFIGURATION", "Pruning", "Full Publications/Events (57)", "Pythonic Style Access for Configurations", "Quantization", "Turn OFF Auto Mixed Precision during Quantization", "Release", "SigOpt Strategy", "Smooth Quant", "TensorBoard", "Transform", "Tuning Strategies", "User Guide", "User YAML Configuration Files", "Validated Models", "Intel\u00ae Neural Compressor Documentation"], "terms": {"pruning_support": 0, "revis": [0, 1, 2, 3], "id": [0, 1, 2, 3, 156, 206, 208, 244, 254, 256, 257, 258, 259, 292, 294, 295, 296, 297, 414, 564, 596, 600], "644ec953a7dc": 0, "6ece06672ed3": [0, 1], "creat": [0, 1, 2, 3, 5, 17, 103, 175, 180, 190, 192, 210, 220, 230, 232, 257, 267, 268, 295, 327, 330, 335, 509, 526, 529, 532, 550, 567, 578, 580, 582, 583, 586, 593, 596, 598, 600], "date": [0, 1, 2, 3], "2022": [0, 1, 2, 3, 175, 531, 563, 597], "12": [0, 547, 559, 562, 603], "09": [0, 603], "17": [0, 597, 603], "22": [0, 3, 562, 603], "310141": 0, "v1": [1, 2, 3, 144, 202, 203, 242, 258, 259, 261, 296, 297, 299, 308, 554, 559, 564, 567, 590, 595, 596, 603], "14": [1, 2, 175, 249, 250, 556, 562, 597, 603], "6f0d0f71d92e": [1, 2], "08": [1, 207, 245, 599, 603], "31": [1, 603], "07": [1, 2, 597, 602, 603], "16": [1, 549, 550, 590, 597, 603], "24": [1, 597, 600, 603], "229939": 1, "update_dataload": 1, "db_session": [1, 396], "sqlalchemi": [1, 383, 396, 557, 562], "orm": [1, 383, 396], "session": [1, 144, 189, 229, 308, 396, 565, 598], "sourc": [1, 5, 6, 8, 15, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 100, 101, 102, 103, 105, 106, 107, 108, 111, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 154, 155, 156, 157, 158, 161, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 242, 244, 245, 246, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 273, 274, 275, 276, 279, 280, 281, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 296, 297, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 326, 327, 328, 329, 330, 332, 333, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 390, 391, 392, 393, 395, 396, 397, 398, 401, 402, 403, 405, 406, 408, 409, 410, 411, 412, 414, 416, 417, 423, 424, 426, 427, 429, 431, 432, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 445, 447, 448, 449, 450, 452, 453, 455, 456, 458, 459, 461, 462, 464, 465, 466, 467, 468, 470, 471, 472, 473, 475, 476, 477, 479, 480, 481, 482, 483, 484, 485, 487, 488, 489, 490, 491, 492, 493, 495, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 524, 528, 531, 563, 565, 578, 580, 582, 583, 585, 591], "updat": [1, 72, 161, 166, 170, 250, 286, 345, 396, 466, 493, 547, 556, 557, 564, 565, 571, 576, 579, 589, 590, 600, 601], "dataload": [1, 17, 19, 146, 148, 150, 156, 178, 179, 190, 201, 211, 230, 241, 246, 253, 276, 281, 290, 291, 311, 332, 335, 343, 370, 394, 396, 418, 459, 472, 478, 486, 497, 502, 528, 531, 532, 547, 552, 553, 554, 559, 560, 564, 565, 566, 588, 593, 594, 597, 598, 599, 602], "exist": [1, 51, 156, 172, 208, 308, 429, 497, 556, 564, 572, 590, 600], "databas": [1, 192, 232, 361, 364, 366, 369, 370, 371, 374, 375, 380, 384, 385, 389, 394], "update_transform": 1, "transform": [1, 42, 48, 139, 141, 142, 143, 190, 191, 192, 193, 194, 195, 197, 199, 201, 230, 231, 232, 233, 234, 235, 237, 239, 241, 253, 291, 370, 394, 396, 418, 497, 499, 528, 529, 549, 550, 552, 553, 554, 555, 559, 565, 568, 573, 574, 575, 576, 590, 591, 594, 597, 598, 602, 603], "13": [2, 3, 311, 547, 562, 597], "9e89549a08c8": [2, 3], "29": [2, 597, 603], "41": [2, 597, 603], "291905": 2, "11": [3, 547, 562, 564, 566, 597, 600], "03": [3, 603], "34": [3, 603], "52": [3, 597, 603], "916541": 3, "block": [4, 166, 170, 284, 310, 330, 514, 561, 587, 590, 597], "mask": [4, 165, 166, 167, 190, 230, 257, 286, 295, 590, 603], "run_migrations_offlin": 5, "run": [5, 17, 144, 156, 167, 170, 175, 178, 179, 189, 206, 208, 229, 244, 285, 286, 300, 311, 315, 332, 444, 490, 512, 514, 527, 532, 547, 548, 554, 557, 558, 565, 566, 568, 570, 572, 573, 574, 576, 578, 579, 580, 582, 583, 585, 590, 591, 593, 595, 596, 598, 600, 602], "migrat": [5, 597, 601], "offlin": [5, 342, 526, 565, 593, 597], "mode": [5, 41, 42, 43, 108, 148, 199, 239, 257, 295, 308, 327, 342, 532, 547, 561, 562, 578, 582, 593, 594, 600], "thi": [5, 43, 84, 108, 130, 137, 139, 143, 146, 150, 155, 157, 164, 166, 167, 168, 169, 175, 178, 179, 189, 190, 191, 192, 193, 194, 195, 197, 207, 210, 216, 217, 229, 230, 231, 232, 233, 234, 235, 237, 245, 254, 257, 258, 259, 261, 270, 271, 273, 274, 275, 276, 281, 284, 286, 288, 289, 290, 292, 295, 296, 297, 299, 300, 310, 311, 315, 320, 330, 332, 341, 342, 526, 527, 528, 529, 532, 547, 549, 550, 552, 553, 554, 558, 561, 563, 564, 565, 566, 567, 568, 570, 571, 573, 574, 576, 578, 580, 582, 583, 584, 585, 586, 590, 593, 594, 595, 596, 597, 598, 599, 600, 601], "configur": [5, 15, 17, 18, 43, 116, 145, 150, 156, 170, 171, 175, 178, 179, 181, 192, 195, 208, 213, 232, 235, 246, 250, 252, 263, 264, 265, 267, 276, 281, 285, 289, 290, 291, 300, 310, 311, 320, 332, 334, 335, 340, 341, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 360, 448, 478, 497, 498, 499, 500, 501, 503, 504, 505, 506, 507, 512, 514, 528, 529, 532, 547, 550, 564, 565, 572, 586, 587, 590, 593, 595, 599, 600, 603], "context": [5, 17, 342, 592], "just": [5, 95, 180, 205, 207, 210, 212, 213, 215, 220, 245, 310, 529, 565, 575, 579, 585, 588, 593, 597, 599, 600], "url": [5, 192, 232, 563], "an": [5, 17, 65, 66, 68, 103, 139, 146, 150, 155, 167, 175, 183, 188, 192, 207, 211, 216, 223, 228, 232, 245, 253, 254, 258, 259, 267, 268, 290, 291, 292, 296, 297, 300, 330, 406, 524, 526, 528, 529, 531, 532, 549, 550, 551, 556, 564, 565, 566, 568, 572, 573, 576, 585, 587, 590, 591, 593, 596, 597, 598, 599, 600], "engin": 5, "though": [5, 597], "i": [5, 17, 42, 43, 46, 47, 51, 52, 55, 58, 62, 68, 80, 83, 103, 130, 139, 144, 146, 149, 150, 155, 156, 157, 161, 164, 165, 167, 168, 170, 174, 175, 178, 179, 180, 188, 189, 190, 191, 192, 193, 194, 197, 199, 203, 207, 208, 210, 214, 216, 217, 220, 228, 229, 230, 231, 232, 233, 234, 237, 239, 242, 245, 254, 257, 259, 261, 263, 268, 276, 281, 285, 286, 290, 292, 295, 297, 299, 300, 310, 311, 316, 321, 330, 332, 341, 342, 406, 445, 485, 489, 495, 497, 505, 512, 526, 527, 528, 529, 531, 532, 533, 535, 539, 542, 545, 547, 548, 549, 550, 552, 553, 554, 556, 558, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 573, 574, 576, 578, 579, 580, 582, 583, 585, 586, 587, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603], "accept": [5, 175, 330, 526, 547, 548], "here": [5, 257, 295, 330, 547, 550, 554, 555, 556, 558, 559, 564, 573, 580, 583, 585, 590, 593, 595, 596, 603], "well": [5, 178, 179, 300, 311, 332, 529, 531, 550, 590, 593, 595, 597, 602], "By": [5, 164, 175, 254, 292, 564, 567, 578, 579, 582, 600], "skip": [5, 598, 600], "creation": [5, 358], "we": [5, 42, 65, 66, 68, 72, 84, 139, 148, 154, 155, 156, 164, 175, 189, 208, 210, 229, 254, 257, 292, 295, 318, 526, 528, 532, 549, 554, 556, 558, 564, 565, 572, 573, 576, 580, 583, 585, 586, 587, 588, 590, 592, 593, 596, 597, 598, 600, 601], "don": [5, 139, 155, 166, 174, 175, 528, 547, 590, 600], "t": [5, 65, 66, 68, 139, 155, 166, 174, 175, 207, 210, 245, 259, 297, 528, 532, 547, 552, 554, 565, 586, 590, 593, 600, 602], "even": [5, 547, 590, 597], "need": [5, 17, 42, 103, 107, 148, 156, 164, 175, 178, 179, 180, 188, 189, 192, 199, 207, 210, 212, 213, 220, 228, 229, 232, 239, 245, 290, 299, 300, 310, 311, 320, 332, 341, 342, 528, 532, 547, 549, 550, 552, 554, 561, 565, 566, 568, 570, 571, 574, 578, 579, 580, 582, 583, 585, 586, 590, 592, 593, 594, 595, 597, 599, 600, 602], "dbapi": 5, "avail": [5, 175, 304, 445, 533, 535, 539, 542, 545, 547, 555, 559, 561, 578, 582, 589, 590, 600, 603], "call": [5, 17, 148, 151, 164, 167, 257, 286, 295, 528, 529, 532, 547, 549, 560, 574, 576, 586, 590, 593, 597, 598, 599], "execut": [5, 42, 51, 167, 174, 175, 286, 290, 311, 312, 314, 332, 335, 341, 342, 344, 345, 448, 452, 456, 460, 461, 464, 467, 479, 482, 490, 491, 513, 547, 552, 553, 565, 566, 570, 571, 578, 579, 582, 585, 586, 588, 590, 593, 596, 600, 603], "emit": 5, "given": [5, 17, 65, 66, 68, 102, 103, 114, 144, 150, 207, 245, 257, 295, 311, 406, 483, 497, 529, 590, 597, 599], "string": [5, 42, 43, 114, 144, 158, 164, 166, 167, 168, 169, 170, 171, 175, 192, 209, 214, 232, 246, 250, 252, 254, 257, 263, 264, 265, 267, 268, 276, 281, 284, 285, 286, 287, 288, 289, 292, 295, 304, 308, 335, 342, 355, 497, 564, 597, 599], "script": [5, 164, 254, 255, 258, 259, 292, 293, 296, 297, 344, 345, 431, 448, 452, 456, 458, 461, 464, 470, 554, 561, 568, 572, 575, 576, 579, 591], "output": [5, 42, 51, 55, 57, 72, 96, 103, 108, 144, 150, 164, 165, 166, 172, 174, 175, 178, 179, 212, 216, 249, 250, 254, 284, 292, 299, 300, 308, 311, 332, 338, 339, 342, 452, 456, 528, 532, 547, 552, 553, 554, 556, 558, 560, 564, 565, 567, 576, 585, 586, 588, 590, 592, 593, 597, 598, 599, 600, 602], "run_migrations_onlin": 5, "onlin": [5, 526, 596], "In": [5, 157, 166, 167, 168, 175, 189, 217, 229, 257, 284, 286, 295, 310, 526, 528, 529, 531, 532, 547, 549, 550, 552, 553, 554, 564, 565, 575, 578, 579, 582, 587, 588, 590, 593, 594, 596, 597, 598, 599, 600], "scenario": [5, 359, 532, 547, 548, 552, 565, 590], "associ": [5, 257, 295, 384, 385], "connect": [5, 161, 286, 383, 384, 386, 387, 388, 390, 391, 392, 393, 547, 585, 589, 590, 596], "adaptor_registri": [6, 532], "cl": [6, 151, 158, 166, 167, 168, 169, 192, 199, 207, 209, 214, 232, 239, 245, 268, 275, 279, 284, 286, 288, 310, 323, 342], "The": [6, 8, 15, 18, 36, 42, 51, 72, 111, 117, 119, 144, 150, 151, 156, 157, 158, 161, 164, 166, 167, 168, 169, 170, 171, 172, 175, 178, 179, 180, 190, 191, 192, 193, 194, 198, 199, 207, 209, 212, 214, 217, 219, 220, 230, 231, 232, 233, 234, 238, 239, 245, 246, 252, 254, 255, 256, 258, 259, 261, 263, 264, 265, 267, 268, 270, 271, 273, 274, 275, 276, 279, 281, 284, 285, 286, 287, 288, 289, 292, 293, 294, 296, 297, 299, 300, 308, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 327, 329, 330, 332, 333, 335, 337, 338, 341, 342, 362, 363, 365, 368, 372, 373, 376, 377, 379, 381, 382, 389, 394, 397, 399, 400, 401, 402, 403, 404, 405, 418, 425, 426, 478, 526, 528, 529, 532, 533, 535, 539, 542, 545, 547, 548, 549, 550, 552, 554, 556, 558, 560, 561, 562, 564, 565, 566, 567, 570, 571, 573, 576, 578, 579, 580, 582, 583, 585, 586, 587, 588, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603], "decor": [6, 36, 65, 66, 68, 144, 151, 166, 167, 169, 207, 214, 245, 261, 268, 275, 279, 284, 286, 288, 299, 310, 323, 326, 342, 492, 528, 529, 532, 600], "us": [6, 17, 36, 42, 46, 47, 68, 101, 103, 114, 146, 150, 156, 158, 161, 164, 165, 166, 167, 169, 172, 174, 175, 178, 179, 188, 189, 190, 191, 192, 193, 194, 197, 206, 207, 208, 209, 214, 228, 229, 230, 231, 232, 233, 234, 237, 244, 245, 249, 250, 252, 254, 255, 257, 261, 262, 263, 268, 275, 276, 279, 281, 284, 286, 287, 288, 289, 290, 292, 293, 295, 299, 310, 315, 318, 320, 323, 326, 327, 330, 333, 334, 335, 336, 342, 389, 394, 399, 400, 404, 406, 418, 425, 427, 452, 456, 497, 509, 526, 527, 528, 529, 532, 547, 548, 549, 550, 552, 553, 554, 556, 558, 560, 562, 563, 564, 565, 566, 567, 568, 569, 570, 572, 573, 576, 578, 580, 582, 583, 585, 587, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 602, 603], "regist": [6, 36, 151, 158, 161, 166, 167, 168, 169, 192, 199, 207, 209, 214, 232, 239, 245, 261, 268, 275, 279, 284, 286, 288, 299, 310, 323, 326, 529, 532, 550, 554, 564, 565, 586, 587, 597, 600], "all": [6, 17, 36, 43, 61, 95, 151, 153, 156, 157, 166, 167, 170, 175, 180, 181, 188, 192, 199, 207, 208, 214, 217, 219, 220, 228, 232, 239, 245, 250, 254, 257, 259, 261, 268, 275, 279, 280, 284, 290, 292, 295, 297, 299, 301, 310, 323, 326, 335, 342, 346, 358, 370, 394, 399, 400, 413, 415, 418, 419, 425, 444, 451, 453, 457, 458, 460, 463, 469, 474, 478, 491, 514, 526, 531, 532, 547, 549, 550, 554, 558, 562, 565, 568, 576, 579, 580, 583, 584, 585, 586, 588, 589, 590, 591, 593, 594, 597, 599, 600], "subclass": [6, 36, 151, 166, 167, 169, 185, 189, 192, 199, 207, 214, 225, 229, 232, 239, 245, 261, 268, 275, 279, 284, 286, 288, 299, 310, 323, 326, 532], "paramet": [6, 15, 17, 18, 42, 43, 65, 66, 68, 84, 103, 114, 130, 144, 145, 146, 149, 150, 151, 156, 157, 158, 161, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 178, 179, 189, 190, 192, 199, 203, 207, 209, 214, 219, 229, 230, 232, 239, 242, 245, 246, 248, 249, 250, 251, 252, 254, 255, 257, 258, 259, 261, 263, 264, 265, 267, 268, 269, 270, 271, 273, 274, 275, 276, 279, 281, 284, 285, 286, 287, 288, 289, 292, 293, 295, 296, 297, 299, 300, 304, 308, 310, 311, 315, 323, 327, 329, 330, 332, 335, 339, 341, 342, 359, 384, 385, 395, 406, 477, 497, 499, 509, 528, 547, 549, 550, 552, 554, 561, 564, 565, 579, 585, 586, 590, 593, 596, 597, 599, 600, 602], "framework_specific_info": [6, 8, 15, 18, 43, 45, 532], "base": [6, 17, 36, 44, 45, 84, 103, 114, 118, 120, 130, 140, 146, 150, 151, 157, 161, 175, 180, 183, 188, 190, 192, 199, 207, 217, 220, 223, 228, 230, 232, 239, 245, 261, 267, 269, 275, 276, 279, 281, 286, 299, 301, 308, 309, 310, 320, 323, 327, 357, 497, 529, 531, 532, 550, 553, 554, 558, 565, 573, 574, 576, 585, 589, 590, 593, 596, 598, 600, 603], "framework": [6, 8, 15, 17, 18, 43, 156, 158, 176, 177, 181, 182, 186, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 201, 204, 207, 209, 210, 214, 221, 222, 224, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 241, 243, 245, 252, 261, 262, 289, 299, 300, 301, 302, 304, 321, 327, 335, 344, 370, 394, 396, 418, 445, 452, 456, 461, 464, 479, 485, 497, 531, 532, 547, 554, 555, 559, 560, 561, 562, 564, 565, 566, 590, 591, 593, 598, 599, 600, 601, 602], "layer": [6, 8, 15, 18, 42, 44, 45, 114, 115, 116, 117, 119, 120, 148, 154, 158, 164, 165, 166, 170, 175, 209, 216, 284, 285, 333, 335, 342, 509, 532, 553, 561, 590, 595], "mxnet_util": 7, "util": [7, 16, 20, 103, 108, 109, 137, 138, 145, 146, 147, 149, 160, 162, 175, 216, 247, 253, 255, 285, 291, 293, 319, 357, 394, 418, 425, 435, 469, 474, 478, 533, 554, 565, 568, 593, 600, 601], "ox_util": 7, "oper": [7, 20, 42, 102, 108, 144, 164, 165, 166, 175, 203, 242, 284, 509, 528, 547, 548, 549, 556, 585, 593, 597, 599, 600], "activ": [7, 20, 32, 150, 174, 175, 216, 250, 327, 402, 532, 547, 553, 558, 565, 586, 589, 592, 593, 597, 598, 602], "argmax": [7, 20, 32], "attent": [7, 20, 32, 164, 170, 175, 190, 230, 526, 552], "binary_op": [7, 20, 32], "concat": [7, 20, 32, 143], "conv": [7, 20, 32, 56, 60, 64, 69, 70, 71, 90, 107, 154, 174, 175, 528, 565, 590, 592, 593, 600], "direct_q8": [7, 20, 32], "embed_layernorm": [7, 20, 32], "gather": [7, 17, 20, 32, 175, 284, 485], "gavgpool": [7, 20, 32], "gemm": [7, 20, 32, 174, 175, 590], "lstm": [7, 20, 32], "matmul": [7, 20, 32, 50, 57, 63, 71, 92, 107, 126, 135, 166, 174, 175, 250, 284, 556, 558, 600], "maxpool": [7, 20, 32, 127, 136, 558], "op": [7, 17, 20, 32, 42, 43, 50, 55, 63, 64, 65, 66, 67, 68, 69, 70, 72, 76, 79, 83, 86, 89, 90, 91, 92, 94, 103, 105, 107, 121, 122, 123, 129, 131, 132, 133, 134, 139, 142, 144, 145, 146, 149, 150, 154, 164, 174, 175, 250, 316, 318, 320, 327, 328, 337, 402, 403, 513, 532, 547, 558, 565, 566, 590, 593, 594, 595, 597, 598, 600, 602], "pad": [7, 20, 32, 69, 70, 190, 207, 230, 245, 550, 599], "pool": [7, 20, 32], "resiz": [7, 20, 32, 190, 191, 203, 207, 230, 231, 242, 245, 549, 550, 599], "split": [7, 20, 32, 42, 80, 206, 207, 244, 245, 528, 597, 599], "calibr": [7, 15, 17, 18, 20, 42, 47, 87, 88, 150, 156, 174, 175, 178, 179, 252, 289, 300, 311, 337, 506, 532, 549, 550, 560, 561, 593, 600, 602], "quantiz": [7, 15, 17, 18, 20, 42, 46, 47, 86, 90, 92, 94, 97, 105, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 145, 146, 148, 150, 154, 156, 157, 174, 175, 178, 179, 203, 210, 217, 242, 250, 251, 252, 253, 263, 290, 291, 300, 316, 318, 320, 332, 333, 337, 341, 342, 478, 486, 502, 532, 537, 547, 549, 550, 554, 555, 556, 558, 560, 561, 564, 566, 567, 568, 573, 575, 576, 579, 588, 591, 595, 598, 599, 600, 601, 602], "tf_util": 7, "graph_rewrit": [7, 109], "bf16": [7, 55, 85, 109, 145, 174, 175, 327, 532, 558, 565, 566, 570, 575, 579, 585, 594, 600], "gener": [7, 17, 46, 47, 85, 109, 120, 144, 150, 164, 170, 178, 179, 180, 189, 192, 193, 194, 195, 207, 220, 229, 232, 233, 234, 235, 245, 250, 254, 262, 292, 300, 311, 315, 330, 332, 344, 347, 348, 349, 350, 351, 352, 353, 354, 395, 464, 470, 471, 481, 522, 528, 532, 547, 549, 552, 564, 565, 566, 568, 573, 578, 580, 582, 583, 585, 587, 589, 590, 591, 593, 594, 597, 598, 599, 600], "int8": [7, 21, 22, 42, 85, 109, 121, 122, 123, 129, 131, 132, 133, 134, 139, 144, 155, 156, 174, 175, 203, 242, 248, 249, 250, 327, 329, 341, 528, 532, 547, 548, 550, 553, 558, 565, 570, 573, 575, 576, 579, 585, 592, 593, 594, 595, 596, 597, 598, 599, 602], "onnx": [7, 18, 19, 32, 41, 42, 85, 109, 138, 154, 174, 175, 186, 226, 248, 249, 250, 251, 300, 307, 340, 345, 448, 531, 532, 533, 549, 555, 556, 558, 559, 561, 567, 570, 575, 576, 591, 592, 600], "qdq": [7, 85, 109, 110, 111, 138, 150, 174, 175, 248, 249, 250, 532, 556, 561, 575, 576, 593], "graph_bas": [7, 85, 109], "quantize_graph": [7, 109], "qat": [7, 109, 110, 149, 175, 250, 263, 308, 553, 554, 556, 561, 565, 593], "quantize_graph_bas": [7, 109, 110], "quantize_graph_bn": [7, 109, 110], "quantize_graph_concatv2": [7, 109, 110], "quantize_graph_conv": [7, 109, 110], "quantize_graph_for_intel_cpu": [7, 109, 110], "quantize_graph_matmul": [7, 109, 110], "quantize_graph_pool": [7, 109, 110], "transform_graph": [7, 109], "bias_correct": [7, 109, 141], "graph_transform_bas": [7, 109, 141], "insert_log": [7, 109, 141], "rerange_quantized_concat": [7, 109, 141], "graph_convert": [7, 109], "graph_converter_without_calib": [7, 109], "graph_util": [7, 109], "quantize_graph_common": [7, 109], "tf2onnx_convert": [7, 109], "torch_util": [7, 211, 253, 291, 597], "bf16_convert": [7, 49, 85, 109, 147], "hawq_metr": [7, 147], "symbolic_trac": [7, 147], "tensorflow": [7, 49, 51, 73, 74, 75, 85, 93, 99, 100, 101, 102, 103, 104, 108, 109, 110, 112, 115, 128, 138, 141, 144, 174, 175, 189, 190, 191, 192, 195, 197, 199, 207, 209, 214, 229, 230, 231, 232, 235, 237, 239, 245, 249, 250, 251, 252, 255, 257, 261, 262, 263, 289, 293, 295, 299, 300, 308, 311, 321, 342, 404, 405, 417, 418, 425, 474, 475, 476, 478, 529, 531, 532, 547, 549, 552, 553, 555, 556, 558, 559, 561, 562, 565, 567, 575, 576, 591, 592, 596, 600, 602], "kerasadaptor": 8, "mxnetadaptor": 15, "do": [15, 18, 157, 174, 175, 189, 190, 229, 230, 246, 250, 254, 257, 287, 292, 295, 341, 526, 547, 550, 554, 558, 561, 562, 564, 565, 580, 583, 590, 594, 595, 600], "inspect": [15, 18, 547, 595, 598], "tensor": [15, 17, 18, 19, 42, 68, 103, 144, 146, 150, 161, 166, 167, 168, 207, 245, 248, 250, 284, 286, 308, 320, 342, 528, 550, 590, 593, 595, 598, 599, 600], "dict": [15, 17, 18, 42, 43, 114, 144, 145, 146, 150, 151, 156, 161, 164, 165, 166, 167, 168, 169, 170, 172, 175, 178, 179, 189, 208, 214, 229, 248, 250, 256, 257, 258, 259, 261, 264, 267, 268, 269, 276, 279, 281, 284, 285, 286, 287, 288, 294, 295, 296, 297, 299, 300, 308, 311, 315, 316, 320, 326, 329, 330, 332, 333, 335, 341, 342, 343, 345, 348, 356, 357, 359, 364, 366, 367, 369, 371, 374, 375, 380, 384, 385, 396, 402, 406, 414, 423, 441, 442, 443, 445, 448, 450, 455, 459, 462, 465, 466, 467, 470, 472, 475, 482, 483, 485, 487, 493, 497, 498, 499, 500, 501, 503, 504, 505, 506, 507, 509, 513, 514, 528, 564, 590, 592, 593, 597, 598, 600], "specif": [15, 18, 44, 102, 114, 170, 174, 175, 190, 191, 192, 193, 197, 199, 214, 230, 231, 232, 233, 237, 239, 263, 270, 271, 273, 274, 275, 384, 385, 526, 529, 532, 547, 552, 558, 560, 564, 565, 566, 567, 568, 572, 573, 575, 579, 585, 587, 590, 592, 600, 602], "mxnet": [16, 17, 185, 189, 192, 195, 199, 207, 225, 229, 232, 235, 239, 245, 252, 261, 289, 299, 300, 305, 311, 531, 532, 549, 555, 558, 561, 562, 565, 566, 567, 592, 600, 602], "init": [16, 20, 153, 159, 162, 163, 550, 564], "optyp": [17, 174, 175, 248], "enum": 17, "type": [17, 42, 43, 72, 94, 103, 114, 120, 130, 144, 145, 146, 150, 151, 158, 164, 165, 166, 167, 168, 169, 170, 172, 174, 175, 188, 190, 192, 199, 207, 209, 214, 228, 230, 232, 239, 245, 250, 251, 254, 255, 257, 261, 268, 275, 279, 284, 286, 288, 292, 293, 295, 299, 308, 310, 315, 316, 323, 327, 329, 330, 341, 355, 360, 384, 385, 427, 485, 493, 527, 532, 547, 550, 554, 558, 561, 565, 566, 586, 593, 596, 599, 600, 602], "isiter": 17, "obj": [17, 103, 170, 189, 219, 229, 246, 252, 263, 264, 265, 267, 276, 281, 285, 289, 300, 310, 311, 332, 335, 342], "bool": [17, 144, 149, 150, 166, 175, 190, 192, 203, 207, 230, 232, 242, 245, 250, 255, 261, 284, 293, 299, 326, 330, 341, 342, 406, 414, 433, 445, 448, 482, 485, 497, 516, 550, 564, 592, 599], "check": [17, 65, 66, 103, 144, 150, 170, 192, 232, 248, 285, 341, 342, 445, 448, 485, 497, 527, 531, 547, 554, 562, 569, 571, 573, 580, 583, 584, 595], "whether": [17, 103, 114, 144, 166, 174, 175, 188, 190, 203, 207, 228, 230, 242, 245, 255, 257, 261, 284, 293, 295, 299, 335, 341, 342, 448, 532, 550, 564, 593, 599], "object": [17, 42, 43, 72, 84, 103, 114, 130, 145, 146, 149, 150, 156, 157, 161, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 178, 179, 180, 190, 191, 192, 207, 208, 210, 219, 220, 230, 231, 232, 245, 246, 250, 252, 257, 265, 267, 270, 271, 273, 274, 275, 276, 281, 284, 285, 286, 287, 288, 289, 291, 295, 300, 308, 309, 311, 315, 332, 335, 341, 342, 422, 497, 509, 510, 514, 528, 529, 537, 547, 548, 549, 550, 557, 564, 565, 567, 588, 590, 592, 593, 599, 600, 601, 603], "iter": [17, 19, 103, 144, 156, 165, 167, 169, 175, 178, 179, 183, 188, 192, 193, 210, 223, 228, 232, 233, 286, 288, 300, 311, 332, 335, 528, 529, 532, 548, 550, 565, 590, 592, 593, 598, 600, 602], "return": [17, 42, 43, 51, 65, 66, 68, 72, 103, 114, 144, 145, 146, 149, 150, 151, 156, 158, 164, 166, 167, 168, 169, 170, 172, 178, 179, 192, 199, 203, 207, 208, 209, 214, 219, 232, 239, 242, 245, 250, 251, 254, 255, 257, 258, 259, 261, 267, 268, 275, 279, 284, 285, 286, 288, 292, 293, 295, 296, 297, 299, 300, 304, 308, 310, 311, 315, 323, 327, 329, 330, 332, 335, 341, 342, 406, 485, 497, 528, 529, 550, 554, 564, 567, 587, 590, 593, 597, 598, 600], "true": [17, 83, 111, 142, 144, 156, 174, 175, 188, 190, 192, 193, 206, 207, 208, 228, 230, 232, 233, 244, 245, 250, 255, 261, 279, 293, 299, 310, 326, 330, 335, 341, 482, 485, 497, 550, 554, 558, 564, 565, 568, 571, 572, 592, 593, 597, 598, 599, 600, 602], "els": [17, 144, 175, 188, 228, 310, 497, 573, 598], "fals": [17, 19, 41, 45, 46, 47, 69, 70, 87, 90, 97, 100, 101, 103, 111, 129, 134, 139, 142, 143, 144, 149, 150, 156, 158, 174, 175, 180, 182, 186, 189, 190, 192, 203, 207, 208, 209, 210, 216, 220, 222, 226, 229, 230, 232, 242, 245, 257, 261, 295, 299, 310, 330, 335, 414, 433, 485, 497, 516, 532, 550, 558, 564, 565, 578, 582, 592, 593, 597, 598, 599, 602], "boolean": [17, 497], "ensure_list": 17, "x": [17, 52, 72, 165, 189, 207, 229, 245, 315, 330, 554, 556, 566, 567, 590, 593, 597, 598, 599, 601], "ensur": [17, 207, 245, 315, 547, 554, 556, 593, 599], "list": [17, 42, 51, 103, 144, 145, 146, 150, 156, 164, 165, 166, 174, 175, 178, 179, 183, 190, 203, 207, 208, 223, 230, 242, 245, 249, 250, 254, 255, 257, 258, 259, 261, 268, 276, 281, 284, 287, 292, 293, 295, 296, 297, 299, 300, 308, 311, 326, 330, 332, 333, 355, 357, 359, 364, 366, 367, 369, 371, 374, 375, 380, 384, 385, 396, 406, 409, 414, 440, 445, 448, 452, 456, 482, 489, 490, 491, 497, 509, 516, 528, 531, 532, 550, 558, 562, 565, 568, 573, 575, 578, 579, 582, 587, 590, 592, 593, 594, 597, 598, 600], "input": [17, 19, 42, 43, 51, 58, 62, 65, 66, 68, 69, 70, 72, 80, 81, 83, 84, 103, 107, 108, 114, 120, 144, 145, 148, 149, 150, 154, 164, 165, 174, 175, 178, 179, 190, 191, 192, 194, 203, 206, 207, 212, 230, 231, 232, 234, 242, 244, 245, 248, 249, 250, 299, 300, 304, 308, 311, 332, 341, 342, 344, 440, 452, 456, 461, 464, 470, 529, 532, 547, 548, 549, 550, 552, 553, 554, 556, 558, 560, 564, 565, 567, 568, 573, 590, 592, 593, 597, 598, 599, 602], "check_mx_vers": 17, "version": [17, 51, 102, 150, 164, 175, 249, 250, 291, 445, 485, 497, 526, 528, 532, 547, 558, 562, 563, 565, 578, 580, 582, 583, 589, 591, 600, 601], "str": [17, 145, 146, 149, 150, 151, 158, 164, 175, 190, 191, 192, 199, 203, 207, 209, 213, 214, 230, 231, 232, 239, 242, 245, 249, 250, 251, 254, 255, 257, 259, 261, 268, 279, 292, 293, 295, 297, 299, 326, 329, 330, 335, 342, 344, 345, 348, 355, 356, 357, 359, 361, 384, 385, 396, 402, 403, 406, 408, 409, 414, 423, 424, 426, 427, 429, 431, 433, 434, 438, 441, 442, 443, 445, 448, 452, 456, 461, 464, 466, 467, 470, 471, 482, 485, 490, 493, 497, 498, 499, 500, 501, 503, 504, 505, 506, 507, 509, 513, 514, 550, 564, 592, 598, 599], "mx": 17, "__version__": 17, "combine_cap": 17, "current": [17, 42, 68, 102, 148, 161, 164, 166, 167, 175, 263, 270, 271, 273, 274, 275, 284, 286, 315, 321, 528, 529, 532, 547, 554, 558, 562, 564, 565, 568, 572, 585, 587, 590, 593, 600], "new": [17, 144, 156, 180, 192, 207, 208, 220, 232, 245, 285, 310, 509, 527, 554, 565, 566, 579, 585, 586, 590, 591, 593, 595, 596, 599, 601, 602], "combin": [17, 150, 174, 175, 178, 179, 203, 217, 242, 300, 311, 332, 342, 528, 532, 561, 565, 588, 591, 593, 594, 599, 600], "capabl": [17, 45, 327, 548, 558, 565, 566, 576, 592, 593, 600, 602], "contain": [17, 65, 66, 68, 72, 137, 144, 146, 156, 157, 164, 166, 167, 169, 170, 175, 178, 179, 190, 191, 192, 230, 231, 232, 246, 250, 252, 257, 258, 259, 263, 276, 279, 281, 284, 285, 286, 287, 288, 289, 295, 296, 297, 300, 311, 332, 335, 341, 346, 350, 358, 364, 366, 367, 369, 370, 371, 374, 375, 378, 380, 389, 394, 399, 400, 404, 407, 413, 418, 419, 425, 444, 451, 453, 454, 457, 458, 460, 463, 469, 474, 478, 550, 552, 561, 564, 586, 590, 598, 600, 601], "make_nc_model": 17, "target": [17, 42, 100, 164, 169, 170, 175, 285, 288, 315, 410, 550, 554, 565, 590, 598, 599, 600, 602], "sym_model": 17, "ctx": 17, "input_desc": 17, "convert": [17, 42, 46, 47, 48, 50, 51, 52, 53, 54, 64, 72, 84, 97, 98, 100, 101, 102, 103, 129, 134, 138, 145, 150, 164, 174, 175, 190, 203, 206, 207, 230, 242, 244, 245, 249, 257, 263, 285, 295, 327, 330, 528, 565, 566, 570, 593, 594, 597, 599, 600], "symbol": [17, 145, 149, 150, 254, 292, 300, 311, 528, 567], "model": [17, 19, 32, 41, 42, 43, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 67, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 105, 106, 107, 114, 116, 138, 144, 145, 146, 148, 149, 150, 154, 156, 157, 164, 167, 169, 170, 174, 175, 178, 179, 186, 189, 190, 192, 207, 208, 211, 212, 219, 226, 229, 230, 232, 245, 246, 248, 249, 250, 251, 252, 253, 261, 262, 263, 264, 267, 270, 271, 273, 274, 275, 276, 281, 285, 286, 287, 288, 289, 290, 291, 299, 300, 310, 311, 312, 315, 316, 318, 320, 321, 322, 323, 330, 332, 338, 341, 342, 344, 345, 346, 370, 386, 388, 390, 394, 395, 406, 411, 412, 413, 416, 417, 418, 442, 443, 445, 448, 451, 452, 453, 454, 456, 457, 458, 463, 464, 469, 474, 478, 479, 486, 497, 502, 512, 513, 517, 524, 528, 529, 531, 532, 537, 548, 549, 550, 552, 553, 554, 555, 560, 561, 563, 564, 566, 568, 573, 575, 576, 579, 585, 587, 588, 589, 591, 593, 595, 596, 598, 599, 600, 601, 602], "neural": [17, 146, 156, 157, 166, 174, 175, 202, 203, 204, 207, 208, 211, 214, 217, 242, 243, 245, 247, 253, 260, 261, 263, 276, 281, 284, 287, 289, 290, 291, 298, 299, 300, 304, 311, 318, 319, 325, 332, 477, 484, 497, 524, 527, 532, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 563, 564, 566, 567, 569, 570, 573, 575, 576, 578, 580, 582, 583, 584, 587, 588, 591, 593, 595, 598, 599, 600, 602, 603], "compressor": [17, 156, 157, 166, 174, 175, 202, 203, 204, 207, 208, 211, 214, 217, 242, 243, 245, 247, 253, 260, 261, 263, 284, 287, 289, 290, 291, 298, 299, 300, 304, 311, 319, 325, 332, 477, 484, 497, 524, 527, 529, 532, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 563, 564, 566, 567, 568, 569, 573, 575, 576, 578, 580, 582, 583, 584, 587, 588, 590, 591, 593, 595, 598, 599, 600, 601, 602, 603], "tupl": [17, 103, 150, 175, 178, 179, 203, 207, 242, 245, 250, 300, 311, 326, 332, 497, 550, 564, 565, 593, 599], "symnet": 17, "arg": [17, 51, 103, 190, 191, 192, 230, 231, 232, 284, 315, 330, 338, 339, 347, 349, 351, 352, 353, 354, 364, 366, 367, 369, 371, 374, 375, 380, 549, 550, 554, 565, 574, 593, 598, 599], "aux": 17, "data": [17, 42, 53, 103, 144, 146, 148, 150, 154, 164, 174, 175, 178, 179, 208, 210, 250, 251, 253, 291, 300, 311, 315, 327, 329, 332, 335, 342, 345, 348, 356, 357, 359, 383, 395, 406, 422, 423, 433, 441, 442, 443, 445, 448, 465, 467, 482, 495, 497, 498, 499, 500, 501, 503, 504, 505, 506, 507, 509, 513, 521, 531, 532, 547, 549, 550, 554, 558, 559, 562, 564, 565, 566, 593, 594, 595, 596, 597, 598, 599, 600], "descript": [17, 130, 250, 251, 330, 527, 528], "ncmodel": 17, "fuse": [17, 56, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 89, 90, 91, 92, 94, 129, 134, 149, 150, 154, 528, 597, 598], "suppli": 17, "get_framework_nam": 17, "get": [17, 42, 43, 65, 66, 68, 102, 103, 144, 150, 156, 161, 164, 166, 167, 168, 169, 170, 172, 175, 183, 207, 208, 214, 216, 223, 245, 250, 251, 284, 286, 288, 308, 320, 327, 329, 335, 342, 356, 357, 359, 396, 406, 423, 427, 440, 445, 448, 466, 477, 485, 493, 497, 513, 514, 547, 557, 561, 562, 565, 571, 597, 600, 601, 604], "name": [17, 42, 43, 51, 65, 66, 68, 102, 103, 108, 114, 144, 145, 146, 149, 150, 151, 156, 161, 164, 166, 167, 168, 169, 172, 174, 175, 190, 191, 192, 195, 199, 205, 207, 208, 212, 215, 216, 230, 231, 232, 235, 239, 245, 248, 249, 250, 256, 261, 279, 284, 286, 288, 294, 299, 304, 308, 310, 327, 329, 333, 335, 342, 406, 408, 445, 446, 447, 448, 485, 497, 499, 528, 547, 550, 554, 558, 563, 564, 565, 567, 571, 578, 582, 586, 589, 590, 593, 595, 596, 598, 600, 602, 603], "prepare_model_data": 17, "nc_model": [17, 276, 281, 332], "data_x": 17, "prepar": [17, 150, 477, 528, 531, 550, 554, 559, 593], "loader": [17, 178, 179, 300, 311, 332, 338, 593], "dataloaderwrap": 17, "prepare_model": 17, "create_data_exampl": 17, "exampl": [17, 146, 150, 156, 164, 165, 174, 175, 190, 191, 192, 203, 207, 230, 231, 232, 242, 245, 257, 258, 259, 261, 287, 295, 296, 297, 299, 300, 310, 311, 330, 332, 370, 388, 394, 418, 442, 443, 444, 445, 497, 526, 527, 531, 537, 547, 560, 561, 568, 571, 572, 573, 576, 594, 595, 599, 600, 601, 604], "prepare_dataload": 17, "io": 17, "ndarray_to_devic": 17, "ndarrai": [17, 65, 66, 68, 207, 245, 333, 557, 599], "devic": [17, 77, 87, 88, 89, 90, 91, 92, 95, 105, 129, 134, 143, 164, 165, 174, 175, 552, 565, 566, 568, 571, 576, 585, 590, 592], "is_model_quant": 17, "query_quantizable_nod": 17, "queri": [17, 45, 144, 164, 175, 327, 383, 384, 386, 387, 388, 390, 391, 392, 393, 593], "node": [17, 42, 48, 51, 52, 53, 54, 58, 60, 62, 65, 66, 68, 72, 75, 78, 80, 81, 82, 96, 100, 101, 103, 108, 130, 144, 248, 250, 308, 408, 410, 413, 418, 476, 478, 532, 547, 554, 598, 600], "map": [17, 42, 103, 175, 207, 245, 248, 250, 252, 256, 258, 259, 261, 276, 281, 286, 289, 294, 296, 297, 299, 447, 550, 554, 564, 565, 578, 582, 590, 593], "quantize_sym_model": 17, "qconfig": [17, 598], "accord": [17, 120, 150, 156, 175, 190, 191, 192, 207, 230, 231, 232, 245, 318, 320, 327, 335, 529, 532, 550, 554, 590, 594, 597, 599, 600], "run_forward": 17, "b_filter": 17, "collector": [17, 146, 333], "none": [17, 41, 42, 43, 45, 46, 47, 61, 87, 100, 102, 103, 108, 114, 138, 144, 146, 148, 150, 156, 157, 158, 170, 171, 172, 174, 175, 178, 179, 180, 182, 186, 188, 189, 190, 191, 192, 193, 194, 195, 197, 203, 207, 208, 209, 210, 217, 219, 220, 222, 226, 228, 229, 230, 231, 232, 233, 234, 235, 237, 242, 245, 246, 249, 250, 252, 257, 261, 262, 263, 264, 267, 276, 281, 285, 289, 295, 299, 300, 310, 311, 312, 315, 316, 318, 320, 321, 322, 323, 327, 330, 332, 333, 335, 341, 342, 344, 345, 356, 357, 361, 364, 366, 367, 369, 371, 374, 375, 380, 383, 384, 385, 396, 433, 445, 452, 456, 461, 464, 465, 467, 477, 482, 483, 485, 488, 490, 497, 503, 505, 506, 507, 514, 532, 550, 564, 593, 598, 599, 600], "pre_batch": 17, "post_batch": 17, "forward": [17, 531, 565, 590, 592, 593, 597, 598], "propag": [17, 98], "filter": [17, 190, 191, 192, 193, 194, 195, 197, 201, 230, 231, 232, 233, 234, 235, 237, 241, 253, 291, 342, 406, 499, 549, 550, 561, 590, 598], "which": [17, 53, 81, 108, 146, 148, 161, 164, 165, 166, 167, 169, 174, 175, 190, 191, 192, 203, 208, 230, 231, 232, 242, 254, 259, 268, 270, 271, 273, 274, 275, 279, 284, 285, 286, 288, 292, 297, 304, 310, 315, 342, 495, 526, 528, 529, 532, 547, 549, 550, 552, 554, 557, 558, 561, 564, 565, 566, 567, 569, 573, 576, 579, 585, 586, 588, 590, 592, 593, 594, 595, 598, 599, 600, 601, 602], "batch": [17, 150, 180, 182, 183, 188, 189, 210, 220, 222, 223, 228, 229, 332, 547, 549, 552, 553, 565, 588, 590, 599, 600, 603], "infer": [17, 103, 164, 252, 289, 308, 310, 311, 332, 531, 532, 552, 553, 565, 566, 585, 587, 590, 591, 593, 597, 598, 600], "collect": [17, 42, 205, 207, 210, 212, 213, 215, 245, 259, 261, 297, 299, 333, 342, 448, 485, 497, 556, 593, 598, 600], "inform": [17, 42, 146, 161, 164, 166, 167, 168, 169, 170, 175, 178, 179, 210, 212, 213, 284, 286, 287, 288, 290, 299, 359, 484, 485, 491, 526, 527, 530, 531, 532, 533, 535, 539, 542, 545, 552, 556, 558, 565, 567, 580, 583, 586, 590, 594, 595, 598, 602, 603, 604], "dure": [17, 166, 169, 175, 284, 288, 310, 565, 566, 567, 587, 588, 590, 593, 598, 602], "prior": [17, 86, 600], "after": [17, 42, 76, 150, 166, 167, 175, 190, 203, 207, 210, 230, 242, 245, 250, 286, 316, 330, 483, 529, 547, 549, 550, 552, 553, 556, 561, 564, 565, 578, 579, 582, 586, 587, 588, 590, 593, 594, 596, 597, 598, 599, 600], "count": [17, 529, 550], "int": [17, 42, 103, 144, 150, 167, 175, 189, 190, 191, 203, 207, 229, 230, 231, 242, 245, 249, 250, 255, 257, 261, 268, 293, 295, 299, 330, 342, 361, 396, 440, 483, 485, 488, 497, 505, 550, 564, 565, 592, 599], "make_symbol_block": 17, "gluon": [17, 300, 311, 567], "symbolblock": 17, "make_modul": 17, "parse_tune_config": 17, "tune_cfg": [17, 144, 145, 150, 532, 600], "quantizable_nod": 17, "strategi": [17, 150, 174, 175, 176, 192, 232, 291, 479, 497, 507, 531, 532, 537, 554, 561, 565, 573, 585, 591, 592, 593, 594, 595, 601, 602], "config": [17, 113, 114, 116, 120, 150, 156, 161, 166, 167, 168, 169, 170, 174, 178, 179, 190, 219, 230, 270, 271, 273, 274, 275, 276, 281, 284, 285, 286, 287, 288, 291, 300, 327, 328, 330, 332, 335, 341, 342, 344, 357, 396, 441, 452, 456, 461, 464, 478, 486, 497, 500, 502, 508, 529, 531, 537, 547, 548, 552, 553, 554, 556, 559, 561, 565, 566, 567, 588, 590, 592, 593, 594, 596, 598, 600], "tune": [17, 43, 156, 174, 175, 178, 179, 190, 192, 230, 232, 252, 289, 300, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 326, 327, 328, 329, 332, 342, 381, 382, 395, 418, 448, 453, 466, 478, 486, 502, 532, 547, 549, 550, 554, 561, 563, 565, 566, 585, 587, 590, 591, 594, 595, 596, 598, 602], "from": [17, 42, 43, 59, 65, 66, 68, 103, 144, 150, 156, 157, 158, 161, 166, 167, 168, 169, 170, 175, 178, 179, 180, 183, 187, 190, 191, 192, 193, 194, 195, 197, 202, 203, 209, 210, 213, 220, 223, 227, 230, 231, 232, 233, 234, 235, 237, 242, 246, 248, 249, 250, 251, 254, 257, 258, 259, 263, 268, 284, 285, 286, 288, 292, 295, 296, 297, 300, 308, 310, 311, 327, 329, 330, 335, 341, 342, 395, 406, 429, 441, 442, 443, 445, 470, 490, 495, 497, 514, 526, 528, 529, 532, 548, 549, 550, 552, 553, 554, 555, 556, 557, 559, 561, 564, 566, 567, 568, 572, 573, 574, 576, 586, 587, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601], "distribute_calib_tensor": 17, "calib_tensor": 17, "calib_cfg": 17, "tensor_to_nod": 17, "distribut": [17, 139, 155, 174, 175, 180, 182, 183, 186, 188, 189, 210, 220, 222, 223, 226, 228, 229, 337, 485, 531, 552, 562, 580, 583, 591, 593, 595, 597, 601, 603], "depend": [17, 178, 179, 208, 300, 311, 332, 527, 547, 557, 558, 592, 593, 600], "algorithm": [17, 150, 171, 254, 261, 269, 291, 292, 299, 335, 337, 529, 532, 552, 553, 558, 561, 574, 579, 590, 593, 598, 602], "set": [17, 42, 55, 94, 103, 113, 144, 150, 156, 164, 170, 172, 174, 175, 178, 179, 180, 190, 192, 195, 207, 208, 213, 214, 220, 230, 232, 235, 245, 250, 257, 263, 276, 281, 285, 290, 295, 300, 308, 311, 330, 332, 342, 344, 384, 385, 406, 452, 456, 464, 509, 514, 526, 529, 547, 548, 550, 552, 554, 558, 560, 561, 562, 564, 565, 566, 568, 570, 572, 586, 590, 592, 593, 596, 597, 600, 602], "kl": [17, 175, 333, 337, 558, 565, 600, 602], "minmax": [17, 558, 593, 602], "calib_model": 17, "qsym_model": 17, "calib_data": 17, "calibdata": 17, "threshold": [17, 152, 333, 337, 564], "amp_convert": 17, "amp_cfg": 17, "support": [17, 42, 95, 102, 148, 154, 158, 166, 167, 174, 175, 178, 179, 189, 190, 192, 199, 203, 207, 209, 210, 211, 214, 219, 229, 230, 232, 239, 242, 245, 253, 261, 263, 268, 284, 286, 290, 291, 299, 300, 304, 310, 311, 321, 327, 330, 332, 335, 337, 445, 479, 497, 524, 531, 547, 565, 568, 573, 576, 579, 585, 591, 594, 596, 597, 600, 601], "amp": [17, 568, 575, 589], "wrap": [17, 103, 114, 158, 209, 257, 295, 355, 528, 554, 580, 583], "dataiterload": 17, "data_it": 17, "collectorbas": 17, "calibcollector": 17, "include_tensors_kl": 17, "include_tensors_minmax": 17, "num_bin": [17, 333], "8001": [17, 333], "tensorcollector": 17, "include_nod": 17, "qtensor_to_tensor": 17, "build": [17, 113, 151, 152, 154, 155, 165, 250, 251, 264, 267, 303, 305, 307, 308, 309, 406, 466, 497, 514, 532, 547, 562, 567, 578, 580, 582, 583, 586, 591, 596, 600], "up": [17, 98, 207, 245, 285, 383, 547, 554, 555, 558, 561, 576, 580, 583, 585, 591, 592, 593, 596, 599, 600, 602], "namecollector": 17, "cache_kl": 17, "cache_minmax": 17, "tensors_kl": 17, "tensors_minmax": 17, "onnxruntimeadaptor": 18, "rt": 18, "onnxrt_qlinearopsadaptor": [18, 532], "onnxrt_integeropsadaptor": 18, "onnxrt_qdqadaptor": 18, "onnxrtaug": 19, "model_wrapp": 19, "dump_op_typ": 19, "black_nod": 19, "white_nod": 19, "backend": [19, 44, 154, 174, 175, 176, 177, 181, 182, 186, 190, 191, 193, 194, 195, 196, 197, 201, 204, 207, 213, 214, 221, 222, 224, 226, 230, 231, 233, 234, 235, 236, 237, 241, 243, 245, 262, 300, 301, 302, 304, 321, 528, 554, 560, 561, 565, 566, 574, 592, 599, 602], "cpuexecutionprovid": [19, 593], "reduce_rang": [19, 41, 174, 175, 592], "augment": 19, "dump": [19, 250, 342, 593, 598], "activationoper": 21, "onnx_quant": [21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40], "onnx_nod": [21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 85, 99, 109], "removableactivationoper": 21, "remov": [21, 42, 54, 55, 58, 72, 78, 81, 82, 83, 94, 96, 167, 250, 259, 297, 383, 429, 526, 527, 565, 578, 582, 590, 598], "qactivationoper": 21, "children": [21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 34, 35, 36, 37, 38, 39, 40], "initi": [21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 34, 35, 36, 37, 38, 39, 40, 42, 103, 114, 144, 158, 167, 178, 179, 187, 190, 209, 227, 230, 285, 286, 311, 327, 332, 384, 385, 477, 529, 547, 549, 550, 564, 584, 590, 593, 597, 600], "qoper": [21, 36, 174, 175], "format": [21, 42, 51, 144, 175, 190, 191, 192, 230, 231, 232, 250, 257, 263, 295, 327, 330, 448, 550, 554, 556, 564, 565, 566, 567, 568, 593], "argmaxoper": 22, "qargmaxoper": 22, "attentionoper": 23, "qattentionoper": 23, "qattent": 23, "binari": [24, 144, 261, 299, 557, 564, 580, 583], "binaryoper": 24, "qbinaryoper": 24, "qbinari": 24, "concatoper": 25, "qconcatoper": 25, "qconcat": 25, "convoper": 26, "qconvoper": 26, "qlinearconv": 26, "direct8bit": 27, "direct8bitoper": 27, "qdirectoper": 27, "qdirect": 27, "embedlayernorm": 28, "embedlayernormalizationoper": 28, "qembedlayernormalizationoper": 28, "qembedlayernorm": 28, "gatheroper": 29, "qgatheroper": 29, "qgather": 29, "globalaveragepool": 30, "globalaveragepooloper": 30, "qglobalaveragepooloper": 30, "qlinearglobalaveragepool": 30, "gemmoper": 31, "qgemmoper": 31, "qgemm": 31, "lstmoper": 33, "matmuloper": 34, "qmatmuloper": 34, "qlinearmatmul": 34, "maxpooloper": 35, "qmaxpooloper": 35, "qmaxpool": 35, "op_registri": 36, "op_typ": [36, 328], "qop_registri": 36, "padoper": 37, "qpadoper": 37, "qpad": 37, "averagepool": 38, "pooloper": 38, "qpooloper": 38, "qlinearaveragepool": 38, "resizeoper": 39, "qresizeoper": 39, "qresiz": 39, "splitoper": 40, "qsplitoper": 40, "qsplit": 40, "q_config": [41, 250, 532], "static": [41, 45, 148, 154, 164, 175, 251, 311, 327, 514, 532, 561, 565, 568, 573, 574, 575, 576, 579, 585, 597, 600, 603], "quantization_param": 41, "op_types_to_quant": 41, "fallback_list": 41, "fp32": [41, 77, 129, 134, 139, 150, 155, 174, 175, 178, 179, 249, 250, 261, 299, 316, 320, 327, 335, 341, 342, 531, 532, 547, 558, 559, 564, 565, 566, 575, 592, 593, 594, 595, 596, 597, 598, 600, 602, 603], "add_qdq_pair_to_weight": [41, 174, 175, 593], "optypes_to_exclude_output_qu": [41, 174, 175, 593], "dedicated_qdq_pair": [41, 174, 175, 593], "helper": [42, 43, 108, 114, 144, 150, 190, 191, 192, 206, 230, 231, 232, 244, 248, 249, 250, 308, 340, 491], "onnxrt": [42, 190, 192, 199, 207, 230, 232, 239, 245, 261, 299, 340, 400, 401, 416, 418, 425, 478, 532, 566], "dtype_to_nam": 42, "dtype_map": 42, "dtype": [42, 100, 103, 174, 175, 193, 194, 203, 207, 233, 234, 242, 245, 250, 251, 550, 556, 558, 568, 592, 593, 597, 598, 599, 602], "its": [42, 58, 94, 146, 164, 167, 175, 186, 192, 207, 226, 232, 245, 248, 255, 256, 286, 293, 294, 315, 526, 547, 550, 552, 563, 564, 566, 576, 578, 582, 585, 586, 589, 590, 596, 599, 600], "represent": [42, 362, 363, 365, 368, 372, 373, 376, 377, 379, 381, 382, 508, 526, 528, 553, 590, 593], "quanttyp": 42, "repres": [42, 166, 167, 168, 170, 192, 197, 232, 237, 257, 259, 261, 295, 297, 299, 364, 366, 367, 369, 371, 374, 375, 378, 380, 495, 526, 550, 556, 593, 600], "valu": [42, 53, 65, 66, 68, 87, 88, 103, 139, 144, 150, 155, 156, 161, 164, 165, 170, 172, 174, 175, 178, 179, 190, 193, 194, 203, 207, 208, 230, 233, 234, 242, 245, 257, 261, 285, 295, 299, 300, 311, 315, 320, 327, 330, 332, 333, 335, 342, 355, 357, 359, 364, 366, 367, 369, 371, 374, 375, 380, 384, 385, 406, 408, 479, 483, 497, 505, 508, 528, 547, 550, 558, 564, 565, 571, 587, 590, 592, 593, 597, 599, 600, 602], "make_quant_nod": 42, "make": [42, 103, 139, 155, 166, 167, 169, 188, 228, 284, 286, 288, 342, 526, 527, 532, 547, 548, 549, 558, 564, 565, 573, 578, 582, 585, 593, 594, 596, 597, 600], "quantizelinear": [42, 556], "make_dquant_nod": 42, "axi": [42, 175], "dequantizelinear": [42, 556], "is_b_transpos": 42, "wheter": 42, "inuput": 42, "b": [42, 72, 190, 230, 250, 550, 564, 590, 597, 600], "transpos": [42, 71, 166, 207, 245, 249, 284, 599], "split_shared_bia": 42, "share": [42, 80, 96, 107, 557, 558, 597, 600], "float_to_float16": 42, "float": [42, 146, 166, 167, 168, 170, 175, 190, 203, 230, 242, 255, 257, 258, 259, 286, 293, 295, 296, 297, 330, 345, 403, 458, 483, 497, 505, 508, 550, 564, 592, 593, 597, 599], "float16": [42, 550], "float_to_bfloat16": 42, "bfloat16": [42, 566, 568, 576, 594], "cast_tensor": 42, "tensorproto": [42, 103], "remove_init_from_model_input": 42, "collate_pr": 42, "result": [42, 144, 146, 150, 203, 207, 242, 245, 254, 257, 258, 259, 261, 292, 295, 296, 297, 299, 318, 341, 345, 363, 377, 395, 526, 529, 531, 547, 549, 552, 554, 561, 563, 564, 565, 573, 574, 585, 586, 587, 590, 591, 593, 596, 597, 598, 599, 600, 601, 603], "quantize_data_with_scale_zero": 42, "qtype": [42, 532], "scheme": [42, 150, 514, 532, 549, 558, 576, 600, 602], "scale": [42, 98, 139, 148, 154, 155, 203, 207, 242, 245, 250, 556, 593, 596, 597, 599, 600], "zero_point": [42, 250], "zero": [42, 167, 170, 207, 245, 286, 342, 531, 590, 593, 597, 599, 600], "point": [42, 203, 242, 258, 259, 268, 296, 297, 315, 564, 585, 593, 597, 599, 600], "To": [42, 257, 295, 310, 527, 547, 550, 554, 556, 566, 569, 572, 578, 580, 582, 583, 592, 594, 595, 597, 600, 602], "pack": [42, 59], "weight": [42, 58, 59, 120, 139, 146, 148, 155, 161, 165, 166, 167, 168, 174, 175, 250, 284, 286, 318, 327, 342, 402, 532, 547, 553, 556, 558, 560, 564, 565, 587, 590, 592, 593, 597, 598, 600, 602], "comput": [42, 103, 146, 150, 254, 255, 258, 259, 261, 292, 293, 296, 297, 299, 342, 531, 553, 556, 564, 565, 566, 568, 579, 590, 591, 593, 597, 600], "linear": [42, 154, 164, 165, 166, 170, 175, 250, 284, 528, 552, 556, 565, 590, 597, 600], "when": [42, 51, 62, 68, 144, 165, 167, 170, 174, 175, 190, 191, 199, 207, 230, 231, 239, 245, 255, 285, 286, 293, 311, 332, 497, 514, 526, 529, 547, 549, 550, 565, 576, 578, 579, 582, 586, 590, 593, 597, 599, 600], "uint8": [42, 203, 242, 257, 295, 329, 532, 550, 558, 592, 593, 599, 602], "rmin": [42, 593], "rmax": [42, 593], "0": [42, 51, 88, 103, 144, 152, 154, 158, 167, 170, 174, 175, 180, 182, 186, 189, 190, 193, 194, 197, 203, 207, 209, 210, 220, 222, 226, 229, 230, 233, 234, 237, 242, 245, 250, 252, 261, 268, 276, 281, 289, 299, 310, 316, 330, 528, 547, 550, 552, 554, 556, 557, 558, 559, 562, 563, 564, 565, 566, 571, 573, 578, 582, 589, 590, 592, 593, 595, 596, 597, 598, 599, 600, 602], "2": [42, 51, 72, 103, 107, 148, 152, 154, 156, 166, 167, 175, 191, 208, 231, 257, 259, 261, 286, 295, 297, 299, 310, 315, 330, 528, 532, 550, 552, 558, 559, 561, 562, 563, 564, 566, 587, 589, 590, 593, 595, 596, 597, 599, 600, 601], "1": [42, 52, 72, 87, 103, 107, 111, 142, 144, 148, 150, 152, 154, 155, 156, 158, 167, 174, 175, 180, 182, 186, 189, 190, 191, 193, 194, 197, 198, 203, 207, 208, 209, 210, 220, 222, 226, 229, 230, 231, 233, 234, 237, 238, 242, 245, 252, 257, 258, 259, 261, 276, 281, 286, 289, 290, 295, 296, 297, 299, 310, 311, 330, 335, 345, 467, 526, 528, 531, 532, 549, 550, 552, 556, 558, 559, 562, 564, 566, 569, 571, 587, 588, 589, 590, 592, 593, 595, 596, 597, 598, 599, 600, 601, 602], "m": [42, 146, 166, 175, 284, 552, 562, 568, 570, 573, 576, 580, 583, 603], "where": [42, 175, 257, 261, 295, 299, 552, 578, 582, 586, 590, 597, 598], "max": [42, 102, 139, 155, 174, 175, 207, 245, 258, 259, 296, 297, 315, 342, 531, 547, 562, 565, 590, 593, 597, 599, 600], "ab": [42, 161, 286, 593, 597], "np": [42, 207, 245, 315, 554, 599], "arrai": [42, 144, 207, 245, 257, 268, 295, 342, 599], "sym": [42, 558, 593, 602], "asym": [42, 558, 602], "calculate_scale_zp": 42, "quantize_rang": 42, "calcul": [42, 58, 150, 161, 170, 175, 193, 194, 233, 234, 258, 259, 284, 286, 296, 297, 320, 333, 550, 564, 565, 576, 587, 590, 593, 596, 597, 600, 602], "quantize_data": 42, "add": [42, 50, 62, 107, 117, 144, 170, 174, 175, 190, 192, 214, 230, 232, 285, 327, 355, 395, 497, 527, 528, 547, 549, 550, 554, 556, 558, 564, 565, 566, 580, 583, 596, 598, 600], "necessari": [42, 526, 529, 567, 586, 596, 600], "intermedi": [42, 146, 158, 175, 209, 311, 528, 561, 590, 593], "trasnform": 42, "full": [42, 190, 191, 192, 230, 231, 232, 342, 531, 547, 550, 557, 559, 562, 563, 586, 590], "equat": [42, 259, 261, 297, 299, 593, 597], "r": [42, 139, 155, 547, 562, 586, 589, 593, 603], "": [42, 103, 139, 144, 155, 164, 165, 166, 167, 171, 172, 175, 189, 192, 206, 207, 208, 210, 212, 219, 229, 232, 244, 245, 259, 284, 286, 297, 299, 300, 304, 311, 342, 483, 526, 529, 552, 554, 558, 561, 565, 566, 573, 576, 578, 582, 585, 588, 589, 590, 591, 592, 593, 595, 596, 597, 600, 602], "q": [42, 105, 107, 129, 597], "z": [42, 552, 597], "real": [42, 193, 210, 233, 554, 591, 593], "origin": [42, 150, 164, 167, 170, 175, 190, 207, 208, 230, 245, 270, 271, 273, 274, 275, 285, 286, 316, 329, 342, 345, 527, 550, 573, 590, 593, 597, 599, 600, 602], "quantize_data_per_channel": 42, "per": [42, 148, 154, 156, 175, 208, 337, 532, 547, 589, 594, 603], "channel": [42, 139, 148, 154, 155, 165, 166, 167, 175, 203, 207, 242, 245, 284, 532, 561, 562, 568, 570, 575, 590, 599, 603], "dequantize_data_with_scale_zero": 42, "tensor_valu": 42, "scale_valu": 42, "zo_valu": 42, "dequant": [42, 55, 86, 89, 90, 91, 92, 94, 146, 150, 342, 528, 597, 598], "sacal": 42, "dequantize_data": 42, "valueinfo": 42, "tensor_nam": [42, 144], "new_dtyp": 42, "cast": [42, 55, 556, 594, 599], "info": [42, 150, 166, 170, 205, 210, 215, 250, 284, 304, 339, 342, 485, 497, 513, 528, 547, 556, 567], "quantizedvalu": 42, "new_quantized_nam": 42, "scale_nam": 42, "zero_point_nam": 42, "quantized_value_typ": 42, "quint8": 42, "linearli": 42, "intial": 42, "quantizediniti": 42, "quantized_data": 42, "quantizationmod": 42, "quantizedvaluetyp": 42, "quantformat": [42, 250], "quantize_nparrai": 42, "arr": [42, 342], "low": [42, 178, 179, 193, 194, 233, 234, 252, 262, 289, 300, 532, 548, 550, 554, 565, 566, 591, 593, 597, 600], "high": [42, 193, 194, 233, 234, 550, 562, 591, 600], "numpi": [42, 65, 66, 68, 103, 144, 207, 245, 251, 257, 268, 295, 557, 599], "attribute_to_kwarg": 42, "attribut": [42, 81, 102, 103, 150, 164, 172, 413, 414, 418, 478, 532, 549, 558, 560, 565, 592, 602], "kwarg": [42, 103, 120, 121, 122, 123, 124, 125, 126, 127, 130, 131, 133, 135, 136, 170, 175, 192, 205, 207, 212, 215, 232, 245, 299, 300, 301, 303, 305, 307, 308, 309, 311, 326, 328, 330, 332, 338, 339, 341, 342, 347, 349, 351, 352, 353, 354, 364, 366, 367, 369, 371, 374, 375, 380, 549], "make_nod": 42, "find_by_nam": 42, "item_list": 42, "find": [42, 65, 66, 68, 103, 144, 261, 268, 299, 315, 342, 513, 532, 547, 571, 578, 582, 585, 586, 590, 596, 598, 600], "item": [42, 170, 172, 175, 206, 244, 285, 327, 395, 483, 554, 597, 600], "get_smooth_scales_per_op": 42, "max_vals_per_channel": 42, "input_tensors_2_weight": 42, "input_tensors_2_weights_nod": 42, "alpha": [42, 154, 161, 168, 593], "smooth": [42, 148, 154, 174, 175, 590], "same": [42, 81, 144, 165, 175, 190, 207, 230, 245, 257, 295, 342, 532, 548, 549, 550, 552, 554, 558, 565, 569, 573, 578, 582, 589, 590, 592, 593, 597, 598, 599, 600], "one": [42, 107, 108, 113, 150, 165, 166, 169, 207, 217, 245, 254, 257, 261, 263, 284, 287, 288, 292, 295, 299, 529, 532, 547, 552, 553, 554, 558, 559, 561, 562, 564, 565, 566, 568, 569, 573, 574, 576, 578, 579, 582, 585, 586, 587, 588, 590, 592, 593, 595, 597, 599, 600], "mul": [42, 52, 63, 64, 67, 154, 556], "todo": [42, 190, 193, 230, 233, 257, 295, 327], "individu": [42, 166, 284, 526, 597], "each": [42, 44, 146, 175, 188, 192, 195, 203, 207, 228, 232, 235, 242, 245, 255, 257, 258, 259, 293, 295, 296, 297, 320, 527, 532, 547, 550, 552, 553, 558, 565, 566, 570, 576, 579, 585, 587, 590, 596, 597, 598, 599, 600, 601], "A": [42, 52, 72, 73, 101, 114, 144, 150, 157, 161, 164, 166, 167, 168, 169, 170, 175, 192, 207, 210, 212, 213, 219, 232, 245, 246, 254, 257, 258, 259, 261, 264, 267, 268, 269, 276, 279, 281, 284, 285, 286, 287, 288, 292, 295, 296, 297, 299, 300, 304, 308, 315, 332, 550, 555, 558, 564, 565, 567, 578, 579, 582, 585, 590, 591, 593, 597, 599, 600, 602], "save": [42, 103, 170, 175, 192, 219, 232, 249, 250, 290, 308, 311, 332, 333, 338, 342, 528, 532, 549, 560, 565, 566, 567, 569, 573, 578, 582, 588, 590, 593, 597], "correspond": [42, 146, 164, 175, 190, 230, 254, 257, 261, 292, 295, 299, 335, 532, 558, 565, 590, 592, 593, 596, 597, 600], "paper": [42, 552, 590, 597], "onli": [42, 51, 61, 68, 84, 107, 113, 139, 148, 154, 155, 156, 165, 166, 167, 174, 175, 190, 208, 210, 214, 230, 263, 284, 286, 321, 330, 497, 509, 532, 548, 549, 552, 554, 556, 558, 565, 566, 573, 586, 590, 592, 593, 597, 598, 600, 602], "have": [42, 72, 81, 144, 165, 166, 167, 188, 210, 228, 254, 257, 284, 286, 292, 295, 330, 526, 527, 547, 549, 550, 554, 558, 563, 564, 565, 566, 568, 585, 587, 590, 593, 597, 600], "get_smooth_scales_per_input": 42, "insert_smooth_mul_op_per_input": 42, "shape_info": 42, "insert": [42, 75, 103, 105, 107, 111, 142, 154, 250, 528, 561, 565, 568, 590, 593, 594, 598], "inupt": 42, "shape": [42, 103, 144, 166, 193, 194, 203, 207, 233, 234, 242, 245, 257, 295, 418, 425, 429, 440, 478, 531, 547, 550, 558, 559, 565, 597, 599], "ad": [42, 167, 190, 230, 254, 292, 315, 547, 566, 568, 573, 576, 580, 583, 590, 598], "new_init_tensor": 42, "new_added_mul_nod": 42, "adjust_weights_per_op": 42, "adjust": [42, 576, 593, 597], "ha": [42, 65, 66, 68, 72, 166, 167, 208, 254, 284, 286, 292, 330, 527, 529, 532, 547, 549, 556, 561, 565, 566, 571, 585, 592, 593, 594, 596, 597, 600], "whose": [42, 148, 154, 166, 285, 560, 590, 600], "adjustd": 42, "adjust_weights_per_input": 42, "insert_smooth_mul_op_per_op": 42, "befor": [42, 105, 107, 154, 166, 167, 169, 175, 190, 230, 250, 284, 286, 288, 383, 527, 547, 550, 552, 553, 554, 557, 558, 562, 565, 580, 583, 590, 593, 596, 598, 600], "name_2_nod": 42, "kei": [42, 144, 146, 164, 170, 172, 175, 268, 285, 308, 330, 333, 335, 342, 505, 531, 547, 556, 591, 598, 600], "trt_env_setup": 42, "environ": [42, 156, 208, 291, 445, 477, 478, 486, 526, 547, 548, 578, 582, 585, 600], "variabl": [42, 156, 168, 175, 192, 208, 232, 315, 547, 562, 590, 600], "tensorrt": [42, 593], "provid": [42, 100, 103, 108, 164, 178, 179, 207, 245, 252, 257, 276, 281, 289, 290, 295, 300, 311, 332, 336, 338, 406, 482, 491, 529, 531, 532, 547, 548, 549, 553, 554, 555, 556, 561, 562, 565, 566, 567, 568, 572, 576, 579, 585, 586, 590, 592, 593, 598, 600, 601, 602, 603], "get_ops_recurs": 43, "prefix": [43, 144, 145, 149, 568, 573, 598], "graph_info": 43, "templateadaptor": 43, "tampl": 43, "dictionari": [43, 65, 66, 68, 145, 146, 150, 172, 175, 206, 244, 257, 264, 267, 269, 295, 364, 366, 367, 369, 371, 374, 375, 380, 384, 385, 387], "yaml": [43, 170, 172, 178, 179, 190, 192, 208, 230, 232, 246, 252, 263, 264, 265, 267, 276, 281, 289, 290, 300, 341, 342, 350, 356, 357, 441, 497, 508, 532, 560, 564, 565, 587, 590, 592, 598, 599], "file": [43, 103, 144, 153, 170, 171, 175, 178, 179, 190, 191, 192, 195, 206, 207, 213, 216, 230, 231, 232, 235, 244, 245, 246, 250, 252, 257, 263, 264, 265, 267, 276, 281, 285, 287, 289, 290, 295, 300, 310, 311, 341, 342, 350, 406, 452, 456, 466, 489, 497, 514, 529, 532, 547, 554, 557, 560, 563, 564, 565, 567, 571, 580, 583, 584, 585, 586, 587, 590, 592, 593, 598, 599], "pytorchadaptor": 43, "api": [43, 68, 73, 108, 218, 252, 257, 289, 295, 311, 326, 327, 330, 342, 383, 384, 385, 386, 387, 388, 390, 391, 392, 393, 513, 514, 527, 528, 533, 535, 539, 542, 545, 556, 561, 565, 570, 574, 575, 576, 595, 596, 600, 604], "pytorch_ipexadaptor": 43, "intel": [43, 166, 211, 214, 247, 253, 260, 261, 284, 287, 291, 298, 299, 319, 325, 477, 524, 526, 527, 529, 530, 532, 549, 550, 551, 552, 553, 555, 556, 558, 559, 563, 566, 567, 568, 573, 575, 576, 587, 588, 589, 590, 591, 593, 594, 595, 598, 600, 601, 602], "extens": [43, 497, 529, 531, 532, 558, 561, 562, 565, 566, 567, 569, 574, 575, 576, 580, 583, 584, 590, 591, 600, 601, 602], "ipex": [43, 150, 174, 175, 561, 565, 570, 574, 575, 603], "pytorch_fxadaptor": 43, "fx": [43, 150, 174, 311, 321, 561, 574, 575, 591, 593, 594, 603], "graph": [43, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 110, 111, 112, 115, 128, 130, 134, 137, 138, 139, 141, 142, 143, 144, 164, 189, 229, 250, 252, 291, 301, 308, 418, 440, 451, 452, 457, 458, 476, 478, 501, 513, 528, 532, 550, 552, 554, 560, 564, 567, 568, 593, 594, 598], "querybackendcap": [44, 532], "defin": [44, 84, 146, 164, 166, 167, 168, 169, 175, 178, 179, 264, 265, 267, 268, 269, 276, 281, 284, 285, 286, 288, 300, 311, 332, 341, 420, 421, 422, 509, 526, 529, 532, 547, 549, 550, 552, 553, 558, 561, 564, 565, 586, 588, 590, 593, 596, 597, 598, 600, 602], "interfac": [44, 84, 111, 171, 252, 276, 281, 289, 290, 335, 343, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 395, 459, 465, 472, 484, 561, 565, 576, 589, 593, 595], "adapt": [44, 526, 531, 550, 576, 591], "should": [44, 52, 113, 114, 164, 167, 175, 178, 179, 188, 190, 192, 207, 212, 228, 230, 232, 245, 250, 255, 293, 299, 300, 311, 330, 332, 342, 406, 528, 529, 532, 547, 550, 552, 554, 564, 565, 566, 571, 580, 583, 585, 587, 593, 599, 600, 602], "implement": [44, 108, 139, 143, 178, 179, 185, 188, 189, 190, 192, 225, 228, 229, 230, 232, 254, 292, 300, 310, 311, 318, 332, 549, 550, 565, 576, 586, 590, 593, 595, 598, 600, 602], "inherit": [44, 157, 158, 167, 169, 174, 187, 207, 209, 217, 227, 245, 286, 288, 529, 532, 550], "own": [44, 72, 188, 207, 228, 245, 310, 529, 547, 549, 550, 561, 564, 587, 596, 601], "tensorflowadaptor": 45, "stock": [45, 574], "spr": 45, "tensorflow_itexadaptor": 45, "itex": [45, 107, 174, 175, 249, 593], "tensorflowqueri": [45, 532], "local_config_fil": 45, "performance_onli": [45, 46, 47, 105, 129, 134, 143, 174, 565], "itex_mod": [45, 46, 87, 105, 129, 134], "quant_mod": [45, 327], "graphconvert": 46, "qt_config": 46, "recip": [46, 164, 174, 175, 250, 252, 289, 556, 565, 600], "int8_sequ": 46, "fp32_op": [46, 48, 105], "bf16_op": [46, 48, 105, 594], "data_load": [46, 47, 532], "fake_qu": [46, 86, 105, 129, 134], "qdq_enabl": 46, "new_api": [46, 47, 69, 70, 75, 77, 90, 97, 129, 134, 139], "use_bf16": [46, 47, 174, 592], "without": [47, 88, 144, 167, 207, 245, 286, 329, 497, 526, 547, 549, 552, 554, 564, 565, 576, 590, 591, 592, 600, 601], "graphconverterwithoutcalib": 47, "recover_config": 47, "rewrit": [48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 104, 105, 106, 107, 219], "bf16convert": [48, 594], "biasadd": [50, 57, 62, 64, 107, 558], "convertaddtobiasaddoptim": 50, "conv2d": [50, 57, 58, 59, 63, 64, 69, 123, 133, 139, 558, 598, 600], "addv2": [50, 67, 558], "layout": 51, "convertlayoutoptim": 51, "optim": [51, 72, 73, 77, 78, 114, 116, 164, 171, 175, 211, 217, 219, 252, 253, 269, 289, 291, 315, 332, 333, 345, 370, 384, 385, 391, 394, 395, 397, 398, 399, 400, 401, 404, 405, 418, 478, 479, 489, 495, 501, 505, 512, 517, 529, 531, 548, 552, 553, 554, 558, 559, 561, 562, 565, 567, 568, 570, 572, 573, 576, 579, 589, 590, 591, 592, 593, 594, 596, 597, 598, 600, 602], "nchw": 51, "nhwc": 51, "It": [51, 166, 178, 179, 216, 259, 261, 268, 284, 289, 297, 299, 300, 311, 316, 320, 332, 532, 547, 552, 565, 571, 574, 579, 585, 586, 590, 593, 596, 600, 602], "4": [51, 156, 166, 175, 199, 202, 203, 207, 239, 242, 245, 254, 255, 257, 292, 293, 295, 330, 526, 532, 547, 548, 554, 555, 558, 561, 562, 564, 565, 573, 589, 590, 597, 599, 600, 603], "abov": [51, 532, 552, 590, 593, 597], "graph_def": [51, 144, 249, 300, 308, 311, 440, 476], "leakyrelu": 52, "convertleakyreluoptim": 52, "below": [52, 64, 72, 174, 175, 290, 527, 528, 531, 532, 547, 549, 552, 554, 560, 564, 568, 570, 578, 579, 582, 585, 587, 588, 590, 592, 593, 596, 597, 598, 600, 601], "subgraph": [52, 64, 103, 149, 556], "maximum": [52, 166, 167, 175, 190, 207, 230, 245, 255, 286, 293, 315, 550, 565, 590, 593, 599], "note": [52, 166, 257, 295, 321, 529, 547, 554, 556, 558, 562, 565, 570, 573, 578, 582, 585, 590, 593, 597, 598, 600, 601, 602], "coeffici": [52, 590], "less": [52, 144, 175, 342, 548, 552, 565, 590], "than": [52, 144, 190, 207, 230, 245, 342, 529, 531, 548, 550, 560, 564, 587, 588, 590, 593, 596, 597, 599], "convers": [52, 175, 263, 532, 565, 566, 593, 594, 597], "valid": [52, 65, 66, 103, 167, 170, 174, 175, 192, 232, 257, 285, 286, 295, 308, 445, 497, 514, 527, 529, 531, 532, 550, 552, 555, 558, 561, 563, 565, 576, 590, 593, 595], "nan": 53, "random": [53, 144, 175, 203, 207, 242, 245, 269, 291, 315, 319, 342, 527, 529, 565, 592, 597, 599, 602], "convertnantorandom": 53, "const": [53, 54, 61, 62, 65, 66, 68, 80, 96, 291, 396, 478, 486], "consist": [53, 61, 527, 528, 547, 556, 597, 600], "placehold": [54, 188, 228], "convertplaceholdertoconst": 54, "train": [54, 78, 148, 154, 157, 165, 167, 175, 178, 179, 190, 192, 207, 217, 230, 232, 245, 246, 263, 286, 291, 311, 335, 505, 529, 531, 532, 537, 550, 552, 553, 556, 561, 566, 568, 574, 585, 588, 590, 591, 596, 597, 600, 602], "rerewrit": 55, "dequantizecastoptim": 55, "b16": 55, "dilat": 56, "contract": 56, "dilatedcontract": 56, "spacetobatchnd": 56, "batchtospacend": 56, "pattern": [56, 57, 59, 76, 94, 105, 106, 107, 129, 134, 150, 160, 162, 164, 165, 167, 168, 171, 175, 192, 232, 253, 274, 275, 277, 282, 286, 291, 327, 402, 513, 532, 550, 558, 561, 565, 586, 588, 592, 597, 603], "inject": [57, 565], "dummi": [57, 164, 193, 194, 233, 234, 251, 261, 299, 531, 547, 550, 559, 564, 565], "injectdummybiasaddoptim": 57, "fusion": [57, 59, 68, 76, 107, 124, 125, 126, 129, 130, 131, 135, 528, 532, 558], "expanddim": 58, "expanddimsoptim": 58, "next": [58, 183, 223, 330, 529, 547, 592, 600], "featch": 59, "reshap": [59, 65, 66, 71, 597], "fetchweightfromreshapeoptim": 59, "handl": [59, 144, 148, 154, 339, 514, 528, 530, 549], "fold": [60, 61, 250, 558], "batchnorm": [60, 65, 119, 528], "foldbatchnormnodesoptim": 60, "graphfoldconstantoptim": 61, "sequenc": [61, 103, 164, 165, 166, 175, 190, 206, 207, 230, 244, 245, 255, 259, 284, 293, 297, 532, 550, 558, 590, 599], "self": [61, 164, 175, 310, 532, 547, 549, 550, 561, 564, 596, 598, 600], "supported_op_typ": 61, "fusebiasaddandaddoptim": 62, "second": [62, 165, 174, 175, 190, 230, 316, 342, 406, 547, 565, 578, 582, 586, 597, 600, 602], "columnwis": 63, "fusecolumnwisemuloptim": 63, "depthwiseconv2dn": [63, 69, 123, 133, 558], "math": [64, 593], "fuseconvwithmathoptim": 64, "elimin": 64, "sub": [64, 164, 208, 250, 529, 597, 600], "realdiv": [64, 67], "decompos": [65, 66], "fusedecomposedbnoptim": 65, "input_graph_def": [65, 66, 68], "small": [65, 66, 67, 318, 529, 547, 590, 600], "node_name_from_input": [65, 66, 68], "node_nam": [65, 66, 68, 144, 250, 308], "strip": [65, 66, 68, 81, 82, 144, 598], "off": [65, 66, 68, 527], "port": [65, 66, 68, 514, 547], "other": [65, 66, 68, 148, 154, 189, 229, 259, 297, 308, 514, 526, 527, 528, 547, 558, 561, 562, 563, 565, 567, 587, 589, 590, 593, 599, 600, 603], "underli": [65, 66, 68], "node_from_map": [65, 66, 68], "node_map": [65, 66, 68], "pull": [65, 66, 68], "def": [65, 66, 68, 178, 179, 311, 330, 332, 528, 532, 549, 550, 552, 553, 554, 564, 565, 593, 597, 598, 600], "entri": [65, 66, 68, 146, 214, 252, 290, 403, 406, 497, 563], "index": [65, 66, 68, 103, 175, 183, 188, 192, 223, 228, 232, 268, 342, 514, 550, 564, 586, 597], "everi": [65, 66, 68, 166, 167, 175, 284, 286, 532, 573, 578, 582, 590, 600], "identifi": [65, 66, 68, 257, 295, 308], "want": [65, 66, 68, 164, 174, 175, 188, 190, 228, 230, 286, 316, 332, 528, 532, 547, 550, 554, 562, 564, 565, 566, 573, 585, 586, 587, 596, 598, 600], "nodedef": [65, 66, 68], "rais": [65, 66, 68, 103, 166, 167, 170, 257, 284, 285, 286, 295, 300, 330, 497, 531, 590], "valueerror": [65, 66, 68, 257, 295, 330, 557], "If": [65, 66, 68, 72, 156, 174, 175, 178, 179, 192, 207, 232, 245, 285, 300, 311, 330, 332, 527, 528, 547, 548, 550, 554, 556, 562, 563, 564, 565, 566, 571, 579, 580, 583, 585, 587, 593, 596, 597, 598, 599, 600], "isn": [65, 66, 68], "present": [65, 66, 68, 164, 547, 591, 597], "values_from_const": [65, 66, 68], "node_def": [65, 66, 68], "extract": [65, 66, 68, 164, 192, 232, 329, 497, 550], "access": [65, 66, 68, 172, 338, 342, 481, 497, 514, 547, 580, 583], "valid_reshape_input": [65, 66], "reshape_in0_ndef": [65, 66], "reshape_in1_ndef": [65, 66], "ar": [65, 66, 103, 166, 167, 175, 190, 207, 230, 245, 257, 261, 268, 284, 285, 286, 290, 295, 299, 312, 314, 315, 330, 335, 341, 342, 497, 526, 527, 528, 529, 532, 547, 549, 550, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 571, 573, 576, 579, 585, 587, 588, 589, 590, 593, 594, 595, 596, 597, 598, 599, 600, 602], "bypass_reshap": [65, 66], "input_node_map": [65, 66], "input_nam": [65, 66, 100, 138, 175, 249, 250, 556], "get_const_dim_count": [65, 66], "number": [65, 66, 103, 150, 165, 166, 167, 174, 175, 188, 191, 203, 207, 228, 231, 242, 245, 258, 259, 261, 284, 296, 297, 299, 315, 330, 335, 342, 429, 485, 547, 548, 550, 554, 564, 590, 593, 596, 599, 600], "dimens": [65, 66, 103, 182, 207, 222, 245, 550, 552, 590, 599], "instancenorm": 66, "fusedecomposedinoptim": 66, "gelu": [67, 164], "fusegeluoptim": 67, "sqrt": 67, "erf": 67, "samll": 68, "layernorm": [68, 597], "fuselayernormoptim": 68, "remap": 68, "smaller": [68, 207, 245, 552, 565, 590, 599], "case": [68, 72, 156, 175, 189, 206, 207, 208, 229, 244, 245, 252, 276, 281, 289, 310, 497, 547, 549, 552, 553, 554, 558, 560, 564, 569, 573, 585, 586, 587, 590, 591, 593, 595, 599, 601, 602, 603], "fusedbatcnormv3": 68, "And": [68, 528, 548, 565, 571, 597], "further": [68, 175, 526, 566, 567, 568, 570, 579, 585], "restrict": [68, 175, 590, 596], "2d": [68, 597], "3d": [68, 591, 597], "kera": [68, 114, 192, 199, 214, 232, 239, 303, 308, 418, 425, 435, 554, 567, 575, 576, 603], "fusepadwithconv2doptim": 69, "excluded_op_nam": [69, 70, 171, 175, 565, 590], "cfg": [69, 70, 150, 171, 327, 335], "itex_qdq_mod": [69, 70], "conv3d": [69, 123], "fusepadwithfp32conv2doptim": 70, "fusetransposereshapeoptim": 71, "cse": [72, 96], "graphcseoptim": 72, "introduc": [72, 527, 532, 556, 558, 565, 590, 593, 595, 597, 601], "ident": [72, 78, 165, 526, 552], "three": [72, 170, 190, 230, 312, 314, 528, 532, 547, 549, 556, 562, 566, 579, 588, 593, 594, 596, 597, 598], "c": [72, 192, 232, 547, 550, 557, 562, 600], "d": [72, 552, 560, 586, 603], "those": [72, 320, 342, 552, 553, 560, 565, 588, 590, 593, 600], "child": [72, 598], "b1": 72, "c1c2": 72, "d1": [72, 342], "c1": 72, "c2": 72, "memori": [72, 252, 276, 281, 289, 310, 342, 549, 553, 565, 566, 568, 587, 590, 593, 597, 600], "bound": [72, 207, 245, 257, 295, 315, 564, 599], "like": [72, 94, 96, 144, 164, 175, 178, 179, 180, 192, 220, 232, 252, 261, 286, 289, 290, 299, 308, 311, 332, 527, 528, 529, 532, 547, 552, 553, 561, 573, 588, 590, 593, 595, 600], "relu": [72, 76, 107, 528, 558, 598], "relu6": [72, 558], "graphdef": [72, 144, 308, 567], "grappler": [73, 558], "grappleroptim": 73, "input_output_nam": 73, "opt_cfg": 73, "python": [73, 144, 192, 211, 232, 253, 291, 330, 342, 445, 524, 527, 528, 547, 550, 554, 557, 562, 565, 570, 576, 579, 585, 591, 599], "wrapper": [73, 100, 101, 102, 103, 120, 145, 158, 189, 207, 209, 210, 212, 213, 219, 229, 245, 257, 261, 295, 299, 304, 308, 514, 594], "leverag": [73, 529, 531, 552, 556, 568, 585, 588, 593, 600], "built": [73, 176, 177, 181, 186, 190, 191, 196, 198, 200, 201, 203, 204, 207, 212, 214, 221, 224, 226, 230, 231, 236, 238, 240, 241, 242, 243, 245, 290, 299, 302, 310, 311, 332, 529, 532, 550, 554, 565, 578, 582, 587, 593, 599, 600, 602], "convert_add_to_biasadd": [74, 85, 109], "convert_layout": [74, 85, 109], "convert_leakyrelu": [74, 85, 109], "convert_nan_to_random": [74, 85, 109], "convert_placeholder_to_const": [74, 85, 109], "dequantize_cast_optim": [74, 85, 109], "dilated_contract": [74, 85, 109], "dummy_biasadd": [74, 85, 109], "expanddims_optim": [74, 85, 109], "fetch_weight_from_reshap": [74, 85, 109], "fold_batch_norm": [74, 85, 109], "fold_const": [74, 85, 109], "fuse_biasadd_add": [74, 85, 109], "fuse_column_wise_mul": [74, 85, 109], "fuse_conv_with_math": [74, 85, 109], "fuse_decomposed_bn": [74, 85, 109], "fuse_decomposed_in": [74, 85, 109], "fuse_gelu": [74, 85, 109], "fuse_layer_norm": [74, 85, 109], "fuse_pad_with_conv": [74, 85, 109], "fuse_pad_with_fp32_conv": [74, 85, 109], "fuse_reshape_transpos": [74, 85, 109], "graph_cse_optim": [74, 85, 109], "grappler_pass": [74, 85, 109], "insert_print_nod": [74, 85, 109], "move_squeeze_after_relu": [74, 85, 109], "pre_optim": [74, 85, 109], "remove_training_nod": [74, 85, 109], "rename_batch_norm": [74, 85, 109], "split_shared_input": [74, 85, 109], "strip_equivalent_nod": [74, 85, 109, 144], "strip_unused_nod": [74, 85, 109, 144], "switch_optim": [74, 85, 109], "print": [75, 146, 261, 299, 330, 547, 554, 564, 565, 590, 597, 600], "insertprintminmaxnod": 75, "pre_node_nam": 75, "post_node_nam": 75, "pass": [75, 144, 156, 342, 440, 509, 528, 532, 548, 550, 552, 553, 554, 556, 560, 564, 565, 586, 590, 592, 593, 594, 597, 602], "sampl": [75, 174, 175, 183, 188, 190, 191, 192, 203, 207, 223, 228, 230, 231, 232, 242, 245, 261, 268, 299, 315, 429, 529, 531, 550, 555, 561, 586, 593, 599, 600, 602, 603], "move": [76, 528, 592, 595], "squeez": [76, 528], "movesqueezeafterreluoptim": 76, "match": [76, 100, 164, 257, 258, 295, 296, 552, 586], "pre": [77, 114, 164, 178, 179, 190, 230, 300, 311, 332, 550, 552, 553, 565, 566, 573, 590, 591, 593, 598, 600], "entranc": [77, 181], "preoptim": 77, "removetrainingnodesoptim": 78, "protected_nod": 78, "types_to_splic": 78, "checknumer": 78, "stopgradi": 78, "renam": [79, 595], "fusedbatchnorm": 79, "fusedbatchnormv2": 79, "renamebatchnormoptim": 79, "splitsharedinputoptim": 80, "equival": [81, 597], "stripequivalentnodesoptim": 81, "output_node_nam": [81, 82, 129, 130, 134, 144], "unus": [82, 144], "stripunusednodesoptim": 82, "input_node_nam": [82, 129, 134, 144], "switch": [83, 568, 598], "switchoptim": 83, "condit": [83, 190, 191, 192, 207, 230, 231, 232, 245, 312, 314, 550, 563, 599, 600], "graphrewriterbas": 84, "abstract": [84, 157, 207, 245, 246, 252, 289, 426, 438, 489, 513, 532, 560], "freeze_fake_qu": [85, 93, 109], "freeze_valu": [85, 93, 109], "freeze_value_without_calib": [85, 93, 109], "fuse_conv_redundant_dequant": [85, 93, 109], "fuse_conv_requant": [85, 93, 109], "fuse_matmul_redundant_dequant": [85, 93, 109], "fuse_matmul_requant": [85, 93, 109], "meta_op_optim": [85, 93, 109], "post_hostconst_convert": [85, 93, 109], "post_quantized_op_cs": [85, 93, 109], "rnn_convert": [85, 93, 109], "scale_propag": [85, 93, 109], "onnx_graph": [85, 99, 109], "onnx_schema": [85, 99, 109], "tf2onnx_util": [85, 99, 109], "insert_qdq_pattern": [85, 104, 109], "merge_duplicated_qdq": [85, 104, 109], "share_qdq_y_pattern": [85, 104, 109], "freez": [86, 87, 88, 568, 590], "fakequ": 86, "freezefakequantopoptim": 86, "follow": [86, 108, 165, 192, 232, 254, 257, 292, 295, 526, 527, 528, 529, 532, 547, 549, 550, 552, 553, 554, 556, 558, 562, 563, 564, 565, 566, 567, 568, 569, 570, 578, 582, 588, 590, 592, 593, 597, 598, 600], "freezevaluetransform": 87, "max_min_data": [87, 88], "postfix": [87, 88], "tensor_data": [87, 342], "th": [87, 88], "gpu": [87, 88, 95, 174, 175, 531, 548, 561, 565, 566, 570, 576, 585, 592, 593], "freezevaluewithoutcalibtransform": 88, "95": [88, 261, 299, 564, 597, 603], "quantizedconv": [89, 90], "quantizeddeconv": 89, "redund": [89, 91], "fuseconvredundantdequantizetransform": 89, "cpu": [89, 90, 91, 92, 174, 175, 342, 531, 548, 561, 565, 566, 568, 570, 576, 585, 589, 591, 592, 594, 598], "_quantizedconv": 89, "_quantizeddeconv": 89, "successor": [89, 90, 91, 92], "requant": [90, 92, 598], "fuseconvrequantizetransform": 90, "quantizedmatmul": [91, 92], "fusematmulredundantdequantizetransform": 91, "_quantizedmatmul": [91, 92], "fusematmulrequantizedequantizetransform": 92, "quantizedmatmulwithbiasanddequant": 92, "fusematmulrequantizetransform": 92, "fusematmulrequantizedequantizenewapitransform": 92, "fusematmulrequantizenewapitransform": 92, "newapi": 92, "meta": [94, 591], "metainfochangingmemopoptim": 94, "metaop": 94, "With": [94, 310, 528, 532, 549, 565, 573, 578, 582, 586, 587, 590, 591, 596, 597, 600, 603], "chang": [94, 139, 148, 155, 167, 169, 175, 286, 288, 318, 342, 357, 466, 488, 527, 549, 554, 557, 563, 564, 565, 568, 578, 579, 582, 585, 590, 598, 599, 600], "better": [94, 175, 178, 179, 268, 300, 311, 332, 553, 564, 566, 590, 591, 593, 596, 600], "perform": [94, 156, 168, 174, 175, 190, 202, 203, 208, 230, 242, 252, 276, 281, 289, 310, 316, 320, 489, 500, 528, 529, 531, 532, 547, 548, 549, 550, 551, 553, 555, 556, 561, 562, 564, 565, 566, 567, 568, 570, 574, 576, 579, 585, 587, 588, 589, 590, 591, 592, 593, 594, 597, 598, 600, 602, 603], "post": [95, 96, 148, 154, 175, 178, 179, 250, 311, 526, 531, 532, 553, 554, 561, 562, 568, 574, 585, 590, 591, 597, 598, 600], "hostconst": 95, "posthostconstconvert": 95, "default": [95, 144, 170, 172, 174, 175, 178, 179, 182, 190, 191, 192, 203, 207, 222, 230, 231, 232, 242, 245, 249, 250, 254, 263, 285, 292, 308, 329, 335, 342, 364, 366, 367, 369, 371, 374, 375, 380, 406, 423, 497, 528, 532, 547, 550, 556, 558, 561, 562, 564, 565, 566, 573, 576, 578, 582, 587, 590, 592, 593, 594, 596, 599, 600, 602], "postcseoptim": 96, "duplic": [96, 106, 315], "quantizev2": 96, "decreas": [96, 590], "size": [96, 166, 182, 183, 189, 192, 198, 203, 207, 222, 223, 229, 232, 238, 242, 245, 284, 310, 342, 497, 526, 547, 549, 550, 554, 557, 565, 585, 586, 587, 590, 597, 599, 602, 603], "rnn": 97, "quantizedrnnconvert": 97, "calibration_data": [97, 105], "rnn_detail": 97, "scalepropagationtransform": 98, "direct": [98, 166, 284, 447, 590], "export": [99, 175, 253, 257, 291, 295, 497, 531, 559, 571, 586, 598, 601], "onnxgraph": 100, "output_shap": 100, "opset": [100, 102, 103, 175, 249, 250], "extra_opset": 100, "output_nam": [100, 138, 175, 249, 250, 556], "is_subgraph": 100, "graph_nam": 100, "manipul": [100, 101], "onnxnod": 101, "skip_convers": 101, "schema": 102, "onnxopschema": 102, "domain": [102, 103, 174, 175, 370, 394, 418, 425, 478, 479, 481, 497, 509, 514, 547, 590, 600], "since_vers": 102, "get_schema": 102, "max_inclusive_opset_vers": 102, "within": [102, 167, 252, 257, 289, 295, 308, 526, 528, 566, 578, 582, 585, 591, 597], "get_max_supported_opset_vers": 102, "packag": [102, 350, 358, 364, 366, 367, 369, 370, 371, 374, 375, 378, 380, 389, 394, 399, 400, 404, 407, 413, 415, 418, 419, 425, 444, 446, 451, 454, 457, 458, 460, 463, 469, 474, 478, 512, 532, 547, 557, 562, 585, 586, 591, 595, 600], "set_nam": 103, "find_opset": 103, "assert_error": 103, "bool_val": 103, "error_msg": 103, "error": [103, 146, 261, 299, 320, 339, 481, 564, 569, 597, 600], "messag": [103, 142, 497, 509, 514, 600], "map_numpy_to_onnx_dtyp": 103, "np_dtype": 103, "map_onnx_to_numpy_typ": 103, "onnx_typ": 103, "add_port_to_nam": 103, "nr": 103, "get_tensorflow_node_attr": 103, "pars": [103, 150, 190, 191, 203, 207, 230, 231, 242, 245, 344, 355, 448, 452, 456, 461, 464, 470, 489, 497, 505, 599], "get_tensorflow_tensor_shap": 103, "get_tensorflow_node_shape_attr": 103, "attr": [103, 144, 164], "map_tensorflow_dtyp": 103, "get_tensorflow_tensor_data": 103, "convert_tensorflow_tensor_to_onnx": 103, "read_tensorflow_node_attr": 103, "read": [103, 144, 195, 207, 235, 245, 285, 550, 594, 596], "infer_onnx_shape_dtyp": 103, "opset_vers": [103, 138, 175, 249, 250, 556], "input_shap": [103, 194, 234, 549, 550], "input_dtyp": 103, "sometim": [103, 528, 590, 593], "so": [103, 207, 245, 528, 532, 557, 561, 564, 571, 573, 593, 594, 597, 598, 599, 601], "make_onnx_shap": 103, "seqtyp": 103, "tensor_dtyp": 103, "around": 103, "signifi": 103, "make_onnx_inputs_output": 103, "elem_typ": 103, "text": [103, 206, 207, 244, 245, 254, 259, 287, 292, 297, 556, 563, 574, 590, 591, 597, 599, 603], "datatyp": [103, 150, 594, 600], "option": [103, 166, 175, 178, 179, 190, 207, 230, 245, 249, 250, 257, 263, 284, 290, 291, 295, 300, 311, 327, 330, 332, 336, 342, 550, 558, 562, 565, 579, 593, 596, 599, 600, 602], "save_protobuf": 103, "path": [103, 144, 164, 170, 171, 190, 191, 192, 207, 230, 231, 232, 245, 246, 249, 250, 252, 263, 264, 265, 267, 276, 281, 285, 287, 289, 290, 300, 308, 311, 327, 332, 342, 406, 423, 426, 429, 431, 434, 438, 466, 497, 528, 529, 532, 547, 549, 550, 554, 560, 564, 565, 566, 567, 571, 574, 585, 588, 599, 602], "as_text": 103, "protobuf": 103, "is_onnx_domain": 103, "is_list_or_tupl": 103, "are_shapes_equ": 103, "src": [103, 586], "dest": 103, "equal": [103, 139, 144, 155, 330, 342, 564, 590], "get_subgraphs_from_onnx": 103, "model_proto": 103, "over": [103, 192, 232, 261, 299, 555, 559, 561, 564, 576, 585, 592, 597, 600], "df": 103, "initialize_name_count": 103, "avoid": [103, 190, 230, 528, 598], "conflict": [103, 557], "counter": 103, "make_nam": 103, "get_index_from_strided_slice_of_shap": 103, "outputs_to_valu": 103, "stride": [103, 207, 245, 599], "slice": 103, "compute_const_folding_using_tf": 103, "g": [103, 166, 175, 552, 555, 559, 568, 573, 590, 595, 597, 600], "const_node_valu": 103, "graph_output": 103, "constant": [103, 250, 291, 315, 319, 325, 336, 479, 549, 558, 599], "tf": [103, 114, 144, 189, 190, 191, 192, 207, 229, 230, 231, 232, 245, 306, 308, 345, 547, 554, 567, 591, 594, 599], "generategraphwithqdqpattern": 105, "op_wise_config": [105, 129, 134], "quantized_nod": 105, "dq": [105, 107, 129, 597], "pair": [105, 174, 175, 549, 565, 566], "merg": [106, 182, 222, 327, 580, 583, 598, 600], "mergeduplicatedqdqoptim": 106, "y": [107, 175, 207, 245, 315, 557, 571, 597, 599], "shareqdqforitexypatternoptim": 107, "enabl": [107, 146, 167, 174, 175, 286, 485, 547, 554, 562, 566, 568, 570, 573, 574, 576, 589, 590, 591, 600], "break": [107, 554, 565], "graphanalyz": 108, "extend_engin": 108, "analyz": [108, 164, 308, 590, 596, 597, 598], "under": [108, 175, 192, 232, 341, 529, 547, 550, 563, 564, 565, 568, 573, 574, 585, 588, 590, 597, 598, 600], "singleton": [108, 291, 342, 478, 486], "specifi": [108, 156, 174, 175, 178, 179, 207, 208, 245, 252, 257, 261, 264, 267, 276, 281, 289, 290, 295, 299, 300, 311, 330, 332, 341, 342, 359, 396, 448, 493, 497, 514, 547, 554, 558, 564, 565, 573, 587, 592, 599, 600, 602], "graphrewriterhelp": 108, "encapsul": [108, 178, 179, 300, 311, 332, 567], "quantize_lay": [109, 110, 112], "fake_quant": [109, 110, 112], "quantize_config": [109, 110, 112], "quantize_help": [109, 110, 112], "quantize_wrapp": [109, 110, 112], "fuse_qdq_bn": [109, 110, 128], "fuse_qdq_concatv2": [109, 110, 128], "fuse_qdq_conv": [109, 110, 128], "fuse_qdq_deconv": [109, 110, 128], "fuse_qdq_in": [109, 110, 128], "fuse_qdq_matmul": [109, 110, 128], "fuse_qdq_pool": [109, 110, 128], "optimize_qdq": [109, 110, 128], "optimize_lay": [110, 112, 115], "quantize_layer_add": [110, 112, 115], "quantize_layer_bas": [110, 112, 115], "quantize_layer_bn": [110, 112, 115], "fake": [111, 148, 154, 565, 593, 597], "fakequantizebas": 111, "abc": [111, 259, 297, 532, 598, 600], "appli": [111, 124, 125, 126, 129, 131, 135, 157, 167, 217, 255, 293, 526, 547, 565, 568, 570, 576, 585, 588, 590, 593, 594, 596, 597, 600, 601, 602], "fakequant": 111, "per_channel": [111, 558, 593, 602], "num_bit": [111, 150, 597], "8": [111, 175, 206, 244, 528, 558, 562, 590, 591, 597, 600, 603], "channel_axi": [111, 152, 155], "symmetr": [111, 593, 599, 600], "narrow_rang": 111, "quantizeconfig": [113, 114], "custom": [113, 156, 290, 310, 341, 548, 552, 553, 568, 590, 596], "There": [113, 290, 312, 314, 547, 552, 558, 561, 564, 565, 566, 568, 597, 600, 602], "instanc": [113, 114, 156, 175, 178, 179, 208, 258, 259, 261, 264, 267, 270, 271, 273, 274, 275, 296, 297, 299, 300, 311, 315, 329, 332, 526, 528, 532, 547, 548, 565, 570, 576, 602, 603], "global": [113, 166, 175, 270, 271, 273, 274, 275, 284, 342, 528, 565, 590, 592, 600], "class": [114, 150, 268, 300, 311, 420, 421, 528, 529, 549, 550, 552, 564, 565, 576, 587, 588, 593, 595, 598, 600, 602], "init_quantize_config": 114, "quantize_recip": 114, "begin": [114, 167, 286, 552, 553, 565, 590, 600], "process": [114, 146, 166, 167, 169, 170, 175, 178, 179, 190, 191, 192, 203, 207, 208, 230, 231, 232, 242, 245, 250, 284, 286, 288, 291, 300, 311, 312, 314, 315, 332, 341, 342, 358, 441, 442, 445, 478, 486, 490, 529, 532, 547, 549, 550, 552, 553, 554, 556, 565, 569, 588, 590, 593, 597, 598, 599, 602], "model_nam": [114, 497], "special": [114, 164, 310, 528, 549, 564, 565, 587, 590, 601], "decid": [114, 174, 175, 255, 286, 293, 406, 532, 565, 593, 595, 600], "qat_clone_funct": 114, "leav": [114, 579], "quantizewrapp": [114, 120], "wrapped_lay": 114, "config_quantizable_lay": 116, "quantizelayeradd": 117, "quantizelay": 118, "quantizelayerbas": 118, "quantizelayerbatchnorm": 119, "quantizewrapperbas": 120, "fusedbatchnormv3": [121, 131], "fusenodestartwithfusedbatchnormv3": [121, 131], "_quantizedfusedbatchnorm": 121, "concatv2": [122, 132, 143, 558], "fusenodestartwithconcatv2": [122, 132], "quantizedconcatv2": [122, 132], "fusenodestartwithconv2d": [123, 133], "conv2dbackpropinput": 124, "conv3dbackpropinputv2": 124, "fusenodestartwithdeconv2d": 124, "fusedinstancenorm": 125, "fusenodestartwithfusedinstancenorm": 125, "batchmatmul": 126, "batchmatmulv2": 126, "fusenodestartwithmatmul": [126, 135], "avgpool": [127, 136, 558], "fusenodestartwithpool": [127, 136], "optimizeqdqgraph": 129, "input_graph": [129, 134, 139, 344, 452, 456, 461, 464, 471, 532], "op_wise_sequ": [129, 134], "quantizegraph": 130, "quantizegraphbas": 130, "quantizenodebas": 130, "quantizegraphforintel": 134, "common": [137, 175, 205, 253, 263, 267, 268, 269, 291, 335, 490, 491, 497, 526, 550, 553, 554, 556, 560, 562, 565, 593, 597], "herlper": 137, "quantizegraphhelp": 137, "sever": [137, 169, 207, 245, 288, 529, 547, 552, 553, 561, 565, 566, 578, 582, 590, 592, 597, 599, 600, 602], "staticmethod": 137, "function": [137, 148, 175, 178, 179, 191, 231, 264, 267, 276, 281, 528, 529, 532, 547, 548, 549, 552, 553, 560, 561, 562, 564, 565, 566, 576, 586, 590, 593, 596, 597, 598, 600, 601], "tensorflowqdqtoonnxqdqconvert": 138, "shape_overrid": 138, "inputs_as_nchw": [138, 249], "default_opset_vers": 138, "bia": [139, 174, 175, 250, 597, 598], "correct": [139, 155, 170, 174, 175, 257, 258, 259, 261, 285, 295, 296, 297, 299, 526, 547, 568], "biascorrect": 139, "fp32_graph": 139, "method": [139, 150, 168, 175, 183, 188, 189, 190, 192, 199, 207, 210, 223, 228, 229, 230, 232, 239, 245, 267, 268, 269, 327, 335, 336, 338, 339, 491, 509, 528, 529, 531, 550, 552, 553, 564, 565, 588, 590, 593, 594, 597, 599, 600], "weight_empir": 139, "Will": [139, 552, 561], "our": [139, 175, 529, 531, 556, 565, 586, 590, 596, 601], "task": [139, 190, 197, 230, 237, 261, 299, 550, 552, 553, 556, 561, 564, 565, 590, 597], "close": [139, 155], "w_int8": [139, 155], "u": [139, 155, 531, 568], "w_fp32": [139, 155], "varianc": [139, 155], "ratio": [139, 155, 166, 167, 170, 175, 203, 207, 242, 245, 286, 550, 565, 590, 599, 603], "between": [139, 155, 167, 175, 207, 245, 258, 261, 296, 299, 509, 513, 528, 532, 552, 556, 561, 564, 565, 576, 593, 595, 596, 597, 599, 600], "differ": [139, 151, 155, 158, 164, 165, 174, 175, 183, 192, 207, 209, 223, 232, 245, 252, 261, 267, 269, 278, 289, 299, 310, 337, 526, 528, 529, 547, 549, 550, 552, 554, 555, 556, 560, 561, 564, 565, 567, 578, 582, 587, 590, 593, 597, 598, 599, 600], "wise": [139, 155, 174, 175, 315, 316, 320, 497, 547, 561, 590, 598, 600, 602], "minim": [139, 155, 315, 552, 555, 564, 565, 578, 582, 590, 593, 600], "round": [139, 155, 593, 597], "scale_c": [139, 155], "shift": [139, 155, 203, 242, 586, 599], "notic": [139, 155, 208, 563, 595], "can": [139, 146, 148, 155, 164, 165, 166, 167, 169, 174, 175, 178, 179, 189, 192, 207, 208, 210, 229, 232, 245, 257, 259, 261, 284, 286, 288, 295, 297, 299, 300, 310, 311, 332, 448, 497, 528, 529, 531, 532, 547, 548, 549, 550, 552, 553, 554, 556, 558, 561, 562, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 578, 579, 580, 582, 583, 585, 586, 587, 588, 589, 590, 592, 593, 594, 596, 597, 598, 599, 600, 602, 603], "first": [139, 155, 165, 172, 174, 175, 190, 230, 257, 295, 316, 327, 406, 528, 529, 532, 547, 550, 556, 562, 566, 570, 579, 580, 583, 586, 592, 593, 594, 596, 597, 598, 600, 602], "empir": [139, 155], "solut": [139, 155, 531, 532, 557, 570, 574, 579, 591, 597, 600], "min": [139, 155, 342, 547, 590, 593, 597, 599, 600], "graphtransform": 140, "graphtransformbas": 140, "input_pb": [140, 142, 143], "log": [142, 339, 345, 448, 488, 489, 528, 547, 576, 596, 598, 600], "insertlog": 142, "node_name_list": 142, "show_nam": 142, "show_op": 142, "first_n": 142, "summar": [142, 552], "1024": [142, 192, 232, 571], "dump_fp32": 142, "rerang": 143, "rerangequantizedconcat": 143, "rerange_quant": 143, "version1_lt_version2": [144, 342], "version1": [144, 342], "version2": [144, 342], "version1_gt_version2": [144, 342], "greater": [144, 342], "version1_eq_version2": [144, 342], "version1_gte_version2": [144, 342], "version1_lte_version2": [144, 342], "disable_random": 144, "seed": [144, 175, 269, 342, 565, 602], "disabl": [144, 174, 175, 485, 514, 526, 585, 594], "read_graph": 144, "in_graph": 144, "in_graph_is_binari": 144, "write_graph": 144, "out_graph_def": 144, "out_graph_fil": 144, "write": [144, 199, 239, 342, 554, 560, 565, 568, 598], "is_ckpt_format": 144, "model_path": [144, 427, 497], "ckpt": [144, 300, 308, 311, 603], "folder": [144, 192, 197, 232, 237, 300, 311, 341, 550, 573, 578, 582, 598], "is_saved_model_format": 144, "saved_model": [144, 263, 418, 425, 435], "get_estimator_graph": 144, "estim": [144, 261, 299, 308, 600], "input_fn": [144, 308], "get_tensor_by_nam": 144, "try_cnt": 144, "3": [144, 175, 192, 207, 232, 245, 257, 295, 330, 528, 529, 531, 547, 549, 550, 552, 554, 556, 558, 559, 562, 564, 565, 566, 568, 572, 576, 578, 582, 587, 590, 592, 596, 597, 599, 600, 603], "consid": [144, 261, 299, 526, 552, 586, 600], "import": [144, 156, 175, 263, 300, 310, 311, 330, 332, 342, 528, 529, 531, 548, 549, 550, 552, 553, 554, 556, 559, 564, 565, 566, 567, 568, 572, 574, 587, 588, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600], "scope": [144, 565], "mai": [144, 270, 271, 273, 274, 275, 330, 526, 527, 547, 549, 557, 563, 566, 578, 582, 589, 591, 593, 600], "more": [144, 148, 154, 166, 207, 245, 284, 529, 530, 531, 547, 550, 552, 554, 559, 561, 562, 564, 565, 566, 568, 576, 580, 583, 587, 588, 590, 594, 597, 600, 601, 603], "onc": [144, 148, 169, 214, 288, 312, 314, 547, 549, 585, 590, 591, 600, 603], "both": [144, 175, 526, 529, 532, 553, 562, 565, 569, 590, 592, 593, 597, 600], "compat": [144, 308, 554, 567, 580, 583, 585, 595], "suffix": 144, "time": [144, 174, 175, 207, 245, 261, 299, 310, 315, 342, 483, 554, 557, 565, 573, 575, 578, 582, 585, 586, 587, 590, 591, 593, 596, 598, 599, 600], "got": [144, 557, 598], "iterator_sess_run": 144, "sess": [144, 308], "iter_op": 144, "feed_dict": [144, 189, 229], "output_tensor": [144, 308], "measur": [144, 208, 300, 337, 529, 532, 548, 552, 564, 565, 598, 600], "integr": [144, 158, 209, 532, 547, 565, 586], "makeiter": 144, "feed": [144, 189, 229, 552, 590], "end": [144, 167, 175, 190, 206, 207, 230, 244, 245, 286, 312, 314, 532, 552, 553, 558, 562, 565, 579, 587, 590, 598, 599, 600], "predict": [144, 207, 212, 245, 254, 258, 259, 261, 292, 296, 297, 299, 529, 552, 564, 576, 597, 598, 599], "pred": [144, 261, 299, 564], "collate_tf_pr": 144, "collat": [144, 150], "tbe": 144, "get_input_output_node_nam": 144, "fix_ref_type_of_graph_def": 144, "fix": [144, 167, 190, 230, 286, 527, 550, 572, 590, 597, 600], "ref": 144, "tool": [144, 249, 342, 531, 532, 565, 578, 582, 590, 591, 593], "strip_unused_lib": 144, "py": [144, 146, 167, 175, 255, 257, 258, 259, 286, 293, 295, 296, 297, 330, 513, 528, 532, 547, 554, 562, 565, 570, 572, 573, 574, 580, 583, 593, 595, 598], "offici": [144, 254, 258, 259, 292, 296, 297, 526, 547, 564], "r1": 144, "15": [144, 558, 603], "branch": [144, 547], "get_graph_def": 144, "auto_input_output": 144, "get_model_input_shap": 144, "inout": 144, "get_tensor_val_from_graph_nod": 144, "graph_node_name_map": 144, "val": [144, 170, 192, 195, 232, 235, 285, 565], "tensor_v": 144, "int8_node_name_revers": 144, "revers": [144, 547], "tf_diagnosis_help": 144, "fp32_model": [144, 146, 150, 250, 342, 532], "quan_model": 144, "save_path": [144, 249, 250, 532, 567], "diagnosi": [144, 291, 386, 395, 418, 478, 507, 513, 565], "generate_feed_dict": 144, "input_tensor": [144, 308], "torch": [145, 146, 147, 149, 150, 154, 164, 165, 166, 171, 174, 175, 219, 250, 300, 311, 341, 528, 531, 533, 552, 554, 556, 565, 566, 567, 568, 573, 576, 593, 597, 598], "bf16modulewrapp": 145, "bf16modul": 145, "mix": [145, 174, 175, 300, 313, 327, 454, 455, 456, 503, 531, 532, 537, 561, 568, 574, 575, 576, 601], "precis": [145, 174, 175, 178, 179, 252, 259, 261, 262, 289, 297, 299, 300, 310, 313, 316, 327, 370, 384, 385, 394, 418, 452, 454, 455, 456, 479, 503, 531, 532, 537, 547, 548, 553, 554, 558, 561, 568, 574, 575, 576, 591, 592, 593, 597, 600, 601], "mixed_precision_model": 145, "bf16_symbolic_trac": 145, "fx_sub_module_list": 145, "trace": [145, 146, 149, 150, 164, 174, 175, 250, 311, 318, 528, 575, 600], "_description_": 145, "hessian": [146, 318, 600], "awar": [146, 157, 175, 217, 263, 284, 318, 332, 532, 553, 554, 556, 561, 566, 585, 588, 600], "node_collector": 146, "hook": [146, 157, 216, 217, 276, 281, 335, 552, 553, 565, 590, 597, 598], "record": [146, 150, 158, 190, 191, 192, 198, 209, 216, 230, 231, 232, 238, 550, 596, 598, 600], "hessiantrac": 146, "q_model": [146, 175, 263, 311, 528, 531, 549, 550, 554, 556, 559, 560, 564, 565, 567, 593, 594], "criterion": [146, 157, 159, 160, 161, 166, 167, 175, 211, 214, 253, 291, 465, 505, 552, 553, 556, 565, 590, 593, 600, 602], "pleas": [146, 148, 154, 161, 166, 174, 175, 190, 191, 192, 195, 230, 231, 232, 235, 284, 286, 287, 330, 528, 529, 530, 531, 532, 547, 548, 550, 553, 554, 562, 564, 566, 568, 569, 573, 576, 590, 593, 594, 595, 596, 597, 601], "refer": [146, 148, 154, 161, 166, 170, 174, 175, 190, 230, 254, 255, 261, 284, 286, 287, 292, 293, 299, 330, 528, 532, 548, 549, 550, 553, 554, 560, 562, 563, 564, 565, 566, 568, 573, 576, 587, 592, 595, 599, 600], "yao": 146, "zhewei": 146, "et": [146, 597], "al": [146, 597], "pyhessian": 146, "network": [146, 161, 166, 286, 318, 529, 547, 552, 553, 556, 565, 589, 591, 593, 597, 600], "through": [146, 178, 179, 300, 311, 531, 548, 558, 560, 561, 564, 571, 587, 588, 590, 592, 593, 597], "len": [146, 175, 207, 245, 550, 554, 599], "2020": 146, "ieee": [146, 566, 597], "intern": [146, 327, 481, 549, 550, 590], "confer": [146, 590, 597], "big": 146, "dong": 146, "zhen": 146, "hawq": [146, 318, 600], "v2": [146, 318, 554, 562, 574, 595, 600, 603], "advanc": [146, 174, 175, 506, 526, 531, 537, 593, 602], "system": [146, 156, 208, 342, 485, 512, 513, 548, 571, 590], "33": [146, 603], "18518": 146, "18529": 146, "http": [146, 161, 166, 190, 192, 230, 232, 254, 255, 257, 258, 259, 284, 286, 287, 292, 293, 295, 296, 297, 528, 531, 547, 550, 559, 562, 563, 565, 574, 580, 583, 595], "github": [146, 166, 190, 230, 254, 255, 258, 259, 284, 287, 292, 293, 296, 297, 441, 484, 527, 547, 550, 555, 559, 562, 563, 565, 574, 580, 583, 595], "com": [146, 166, 190, 230, 254, 255, 258, 259, 284, 287, 292, 293, 296, 297, 526, 531, 547, 550, 559, 562, 563, 565, 568, 574, 595, 596, 603], "openvinotoolkit": 146, "nncf": 146, "blob": [146, 166, 254, 255, 258, 259, 284, 292, 293, 296, 297, 565, 574], "develop": [146, 310, 497, 527, 528, 562, 565, 566, 568, 574, 585, 591, 594, 596], "hessian_trac": 146, "compare_weight": 146, "float_dict": 146, "ani": [146, 257, 259, 295, 297, 326, 330, 344, 345, 347, 349, 351, 352, 353, 354, 355, 356, 357, 359, 384, 385, 406, 408, 414, 423, 440, 443, 445, 448, 452, 456, 458, 461, 464, 467, 470, 476, 483, 485, 497, 498, 499, 500, 501, 503, 504, 505, 506, 507, 508, 509, 513, 514, 526, 527, 531, 547, 549, 554, 568, 573, 586, 596], "quantized_dict": 146, "compar": [146, 261, 299, 547, 553, 564, 593, 596, 598, 600], "being": [146, 257, 295, 414], "two": [146, 156, 165, 166, 167, 169, 192, 197, 208, 232, 237, 257, 284, 288, 290, 295, 321, 342, 528, 529, 547, 550, 552, 554, 556, 558, 564, 565, 566, 590, 593, 594, 596, 600, 602], "wt_compare_dict": 146, "float_model": 146, "state_dict": [146, 554, 598], "qmodel": 146, "compute_error": 146, "state": [146, 165, 571, 590], "weight_dict": 146, "hawq_top": 146, "enable_act": 146, "modul": [147, 266, 272, 282, 283, 486, 494, 502, 528, 547, 549, 552, 556, 561, 564, 565, 567, 590, 592, 594, 598, 601], "torchsmoothqu": [148, 597], "traced_model": [148, 149], "detail": [148, 154, 164, 207, 245, 379, 381, 402, 465, 470, 484, 497, 526, 527, 531, 552, 558, 559, 560, 564, 565, 566, 568, 576, 585, 590, 595, 596, 598, 600, 601, 603], "smoothquant": [148, 154, 531, 601], "accur": [148, 154, 597], "effici": [148, 154, 529, 549, 552, 568, 588, 591, 597, 600], "larg": [148, 154, 531, 549, 552, 565, 590, 597, 603], "languag": [148, 154, 254, 292, 526, 556, 590, 591, 597], "spiq": [148, 154, 597], "free": [148, 154, 165, 178, 179, 311, 526, 531, 564, 574, 579, 587, 596, 597], "could": [148, 154, 166, 178, 179, 192, 232, 290, 300, 311, 332, 526, 528, 553, 565, 588, 590, 593, 597, 601], "absorb": [148, 154], "later": [148, 154, 598], "inplac": 148, "mean": [148, 166, 174, 175, 203, 207, 242, 245, 259, 261, 284, 297, 299, 320, 528, 549, 554, 558, 564, 565, 571, 590, 593, 597, 599, 600, 602], "you": [148, 174, 175, 188, 190, 228, 230, 286, 527, 528, 547, 550, 554, 556, 562, 563, 564, 568, 570, 571, 573, 578, 582, 585, 586, 590, 593, 595, 596, 597, 598, 601], "recov": [148, 342, 532, 553, 597], "graphtrac": 148, "trace_and_fuse_sub_graph": 149, "is_qat": 149, "get_embedding_contigu": 150, "nn": [150, 164, 165, 175, 219, 250, 300, 311, 341, 528, 552, 556, 565, 567, 597, 598], "embed": 150, "contigu": [150, 590], "is_fused_modul": 150, "_propagate_qconfig_help": 150, "detect": [150, 164, 174, 175, 257, 261, 295, 299, 304, 497, 528, 547, 568, 575, 576, 590], "collate_torch_pr": 150, "fetch": [150, 153, 183, 223, 550], "collate_result": 150, "input2tupl": 150, "append_attr": 150, "fx_model": 150, "fx_white_list": 150, "append": [150, 290, 315, 528, 553, 565, 588], "graphmodul": [150, 528, 594], "addit": [150, 175, 332, 547, 552, 579, 595], "dir": [150, 190, 230, 341, 550, 557, 560], "generate_activation_observ": 150, "observ": [150, 596, 598, 600], "what": [150, 167, 188, 228, 332, 526, 547], "check_cfg_and_qconfig": 150, "op_infos_from_cfg": 150, "output_tensor_ids_op_nam": 150, "paser_cfg": 150, "ops_nam": 150, "get_quantizable_ops_from_cfg": 150, "input_tensor_ids_op_nam": 150, "auto_copi": 150, "fetch_modul": 150, "op_nam": [150, 171, 175, 328, 402, 403, 565, 590, 598], "set_modul": 150, "new_modul": 150, "simple_infer": 150, "get_example_input": 150, "dataset": [150, 178, 179, 180, 182, 183, 186, 187, 188, 189, 201, 210, 220, 222, 223, 226, 227, 228, 229, 241, 253, 257, 258, 259, 261, 290, 291, 295, 296, 297, 299, 300, 311, 332, 335, 370, 384, 394, 395, 406, 418, 497, 499, 529, 531, 532, 549, 554, 559, 564, 565, 573, 590, 593, 595, 597, 600, 602, 603], "example_inp": 150, "get_fallback_ord": 150, "confidence_batch": [150, 600], "fallback": [150, 318, 320, 321, 566, 594, 600], "requantize_cfg": 150, "fall": 150, "back": [150, 207, 213, 245, 585], "order": [150, 254, 255, 290, 292, 293, 315, 320, 327, 329, 528, 564, 590, 592, 597, 598, 600], "confid": 150, "ordered_op": 150, "get_mse_order_per_fp32": 150, "mse": [150, 175, 261, 291, 299, 319, 403, 547, 564, 592, 595], "influenc": [150, 590], "last": [150, 161, 174, 175, 547, 566, 568, 570, 575, 579, 593, 597], "quant": [150, 174, 175, 327, 528, 565, 593], "fallback_ord": 150, "get_mse_order_per_int8": 150, "example_input": [150, 174, 175, 250, 556], "get_torch_vers": 150, "match_datatype_pattern": 150, "calculate_quant_min_max": 150, "unsign": [150, 329], "qmin": 150, "qmax": 150, "algorithm_registri": 151, "algorithm_typ": 151, "locat": [151, 207, 245, 554, 571, 578, 582, 585, 593, 595, 599, 602], "registr": [151, 192, 199, 207, 232, 239, 245, 279], "algorithmschedul": 151, "conf": [151, 156, 157, 175, 178, 179, 208, 263, 270, 271, 273, 274, 275, 276, 281, 300, 310, 311, 312, 315, 316, 318, 320, 321, 322, 323, 327, 330, 332, 508, 528, 529, 531, 548, 552, 559, 560, 565, 566, 567, 588, 593, 594, 596, 600], "control": [151, 175, 389, 394, 528, 547, 565, 590, 600], "phase": [151, 529, 565, 590, 593, 594, 600], "fastbiascorrect": [152, 155], "fast_bias_correct": [153, 174, 175, 291, 593], "smooth_quant": [153, 174, 175, 291, 593, 597], "weight_correct": [153, 174, 175, 291, 593], "5": [154, 158, 175, 194, 203, 209, 234, 242, 261, 299, 532, 547, 550, 558, 564, 565, 589, 590, 592, 593, 597, 599, 600, 602, 603], "For": [154, 164, 165, 166, 175, 192, 207, 232, 245, 258, 259, 261, 284, 287, 296, 297, 299, 300, 311, 526, 528, 530, 532, 547, 552, 553, 554, 556, 558, 561, 568, 570, 571, 573, 576, 590, 594, 597, 598, 600, 602, 603], "kernel": [154, 175, 485, 532, 589, 590, 600], "futur": [154, 178, 179, 210, 561, 565, 576, 601], "weightcorrect": 155, "ep": [155, 566], "1e": [155, 597, 602], "05": [155, 175, 261, 299, 564, 597, 603], "evalu": [156, 157, 166, 174, 178, 179, 190, 208, 230, 246, 254, 257, 258, 259, 261, 263, 292, 295, 296, 297, 299, 300, 310, 311, 332, 335, 478, 486, 502, 529, 532, 549, 550, 552, 553, 560, 561, 564, 565, 566, 568, 574, 576, 579, 585, 587, 590, 593, 596, 598, 600, 602], "set_env_var": [156, 208], "env_var": [156, 208], "overwrite_exist": [156, 208], "env": [156, 208, 557], "alreadi": [156, 192, 206, 208, 232, 244, 483, 532, 547, 550, 561, 580, 583, 600], "param": [156, 180, 208, 214, 220, 261, 299, 315, 396, 497, 532, 567, 600], "set_all_env_var": [156, 208], "physic": [156, 208, 526, 548], "core": [156, 175, 208, 547, 548, 563, 578, 582, 589, 603], "get_architectur": [156, 208], "architectur": [156, 208, 264, 267, 531, 547, 548, 552, 565, 590, 591, 601], "get_threads_per_cor": [156, 208], "thread": [156, 175, 208, 513, 547, 549, 589], "get_thread": [156, 208], "get_physical_id": [156, 208], "socket": [156, 208, 485, 514, 589, 603], "get_core_id": [156, 208], "get_bounded_thread": [156, 208], "core_id": [156, 208], "bind": [156, 208], "fit": [156, 166, 175, 300, 311, 315, 330, 332, 528, 531, 548, 549, 550, 554, 559, 560, 564, 565, 566, 567, 590, 593, 594], "b_dataload": [156, 175, 548, 565], "b_func": [156, 548], "benchmarkconfig": [156, 175, 548, 565], "accuraci": [156, 174, 175, 178, 179, 246, 252, 261, 276, 281, 289, 299, 300, 310, 311, 316, 330, 332, 465, 489, 500, 528, 531, 547, 549, 550, 553, 554, 555, 556, 564, 565, 566, 576, 585, 587, 588, 590, 591, 592, 595, 596, 597, 598, 602, 603], "goal": [156, 246, 252, 276, 281, 289, 300, 311, 549, 588, 593, 600], "prefer": [156, 252, 289, 300, 311, 590], "space": [156, 167, 174, 175, 178, 179, 252, 259, 264, 267, 268, 269, 289, 297, 300, 311, 315, 320, 327, 497, 526, 527, 529, 532, 590, 593, 602], "etc": [156, 157, 206, 244, 246, 252, 259, 276, 281, 289, 297, 300, 311, 341, 552, 561, 590, 596, 600], "user": [156, 164, 167, 170, 174, 175, 178, 179, 192, 195, 199, 207, 208, 214, 219, 232, 235, 239, 245, 252, 276, 281, 287, 289, 290, 300, 310, 311, 316, 332, 342, 481, 528, 529, 532, 537, 548, 552, 553, 556, 558, 561, 564, 565, 566, 567, 568, 569, 570, 572, 573, 574, 576, 579, 585, 587, 588, 590, 591, 593, 594, 595, 597, 598, 599, 600, 604], "100": [156, 174, 175, 192, 232, 330, 548, 550, 554, 560, 565, 592, 593, 597, 599, 600, 602, 603], "cores_per_inst": [156, 175, 548, 565, 592], "num_of_inst": [156, 175, 548, 565, 592], "7": [156, 174, 175, 310, 548, 557, 558, 562, 565, 590, 593, 595, 597, 600, 603], "pb": [156, 175, 300, 308, 311, 434, 437, 448, 531, 548, 554, 559, 565, 567, 598, 603], "eval_dataload": [156, 175, 178, 179, 290, 300, 311, 312, 315, 316, 318, 320, 321, 322, 323, 332, 531, 548, 559, 560, 565, 593, 600], "compon": [157, 246, 253, 290, 291, 478, 513, 528, 554, 562, 563, 568, 585, 588, 589], "quantizationawaretrainingcallback": [157, 332], "pruningcallback": [157, 332], "distillationcallback": 157, "basecallback": 157, "design": [157, 189, 212, 217, 229, 299, 316, 529, 531, 565, 573, 576, 590, 593, 601], "mainli": [157, 169, 217, 288, 565, 590, 593], "prune": [157, 161, 162, 165, 166, 167, 168, 169, 170, 175, 217, 218, 253, 270, 271, 273, 274, 275, 279, 281, 282, 284, 285, 286, 288, 290, 291, 332, 342, 353, 360, 379, 418, 453, 478, 486, 497, 502, 531, 554, 555, 558, 559, 561, 588, 591, 601, 602], "distil": [157, 160, 175, 209, 216, 217, 253, 291, 332, 531, 555, 559, 561, 588, 601, 602], "deriv": [157, 161, 166, 167, 168, 169, 246, 284, 286, 288], "pipelin": [157, 246, 264, 265, 290, 553, 565, 588], "knowledg": [157, 158, 175, 209, 246, 553, 555, 559, 561, 565, 567, 602], "transfer": [157, 197, 237, 246, 550, 552, 553, 565, 597], "teacher": [157, 175, 246, 552, 553, 565, 603], "student": [157, 175, 190, 216, 230, 246, 550, 552, 553, 603], "distillation_conf": [157, 171, 246], "_epoch_ran": [157, 246], "integ": [157, 166, 167, 175, 246, 257, 261, 268, 284, 286, 295, 299, 330, 532, 593, 597, 600], "indic": [157, 164, 175, 183, 188, 190, 223, 228, 230, 246, 257, 268, 295, 528, 547, 557, 598], "how": [157, 161, 166, 167, 175, 207, 245, 246, 284, 527, 528, 530, 532, 547, 549, 550, 552, 553, 554, 560, 565, 579, 580, 583, 584, 585, 590, 593, 597, 599, 600, 601, 602], "much": [157, 161, 175, 207, 245, 246, 552, 579, 590, 597, 599], "epoch": [157, 167, 246, 286, 332, 552, 553, 554, 565, 588, 590, 602], "ran": [157, 246], "eval_frequ": [157, 246], "frequenc": [157, 167, 175, 246, 286, 565, 589, 590, 602], "term": [157, 167, 168, 246, 527, 552, 563, 564, 587, 588, 600], "best_scor": [157, 246], "best": [157, 207, 245, 246, 252, 289, 320, 526, 529, 562, 568, 574, 585, 587, 593, 599, 600], "metric": [157, 175, 178, 179, 211, 246, 252, 253, 268, 276, 281, 289, 290, 291, 300, 311, 332, 335, 370, 394, 418, 478, 486, 494, 497, 500, 529, 532, 547, 549, 550, 554, 565, 566, 593, 596, 598, 600, 601, 602, 603], "best_model": [157, 246], "found": [157, 246, 481, 497, 514, 531, 547, 552, 566, 573, 597, 600, 603], "critet": [158, 209], "includ": [158, 161, 164, 166, 168, 175, 190, 192, 199, 207, 209, 230, 232, 239, 245, 252, 262, 284, 289, 330, 526, 527, 532, 547, 550, 562, 563, 564, 565, 566, 568, 571, 574, 579, 590, 593, 594, 598, 600], "tensorflowknowledgedistillationloss": [158, 209], "pytorchknowledgedistillationloss": [158, 209, 565], "pytorchintermediatelayersknowledgedistillationloss": [158, 209], "tensorflowcriterion": [158, 209], "pytorchcriterion": [158, 209], "criterion_registri": [158, 209], "criterion_typ": [158, 209], "registry_criterion": [158, 209], "knowledgedistillationframework": [158, 209], "student_model": [158, 175, 209, 565], "teacher_model": [158, 175, 209, 552, 553, 565], "knowledgedistillationloss": [158, 209, 565, 602], "temperatur": [158, 175, 209, 565, 602], "loss_typ": [158, 175, 209, 565, 602], "ce": [158, 175, 209, 565, 602], "loss_weight": [158, 175, 209, 565, 602], "pytorchknowledgedistillationlosswrapp": [158, 209], "param_dict": [158, 209, 214], "tensorflowknowledgedistillationlosswrapp": [158, 209], "tensorflowknowledgedistillationlossextern": [158, 209], "intermediatelayersknowledgedistillationloss": [158, 209, 505], "layer_map": [158, 175, 209, 552], "add_origin_loss": [158, 175, 209], "pytorch": [158, 164, 166, 174, 189, 190, 192, 195, 199, 207, 209, 214, 216, 229, 230, 232, 235, 239, 245, 250, 251, 252, 261, 262, 282, 284, 287, 289, 291, 299, 300, 309, 311, 321, 336, 342, 345, 418, 425, 448, 458, 478, 528, 529, 531, 532, 549, 552, 553, 555, 556, 558, 561, 562, 565, 567, 568, 570, 573, 574, 575, 576, 585, 590, 591, 592, 595, 600, 602], "loss": [158, 175, 209, 252, 261, 276, 281, 289, 299, 332, 552, 553, 554, 555, 564, 565, 566, 576, 588, 590, 593, 597, 600, 602], "pytorchintermediatelayersknowledgedistillationlosswrapp": [158, 209], "selfknowledgedistillationloss": [158, 209, 505], "selfknowledg": [158, 209], "pytorchselfknowledgedistillationloss": [158, 209], "pytorchselfknowledgedistillationlosswrapp": [158, 209], "pruner": [160, 253, 270, 271, 272, 273, 274, 276, 281, 282, 284, 287, 291, 508, 565, 590, 602], "model_slim": [160, 162, 167], "pattern_analyz": [160, 162, 163], "weight_slim": [160, 162, 163], "criteria": [160, 162, 175, 252, 276, 281, 284, 286, 289, 528, 585, 597], "reg": [160, 162, 167], "schedul": [160, 162, 167, 168, 175, 253, 282, 286, 291, 565, 588], "callback": [160, 276, 281, 332, 335, 513, 528, 565, 588, 590, 593], "register_criterion": 161, "registri": [161, 166, 167, 168, 169, 284, 286, 288, 529], "get_criterion": 161, "pruningcriterion": 161, "about": [161, 484, 485, 491, 526, 547, 549, 565, 594, 600, 601, 603], "module_nam": [161, 167, 168, 286, 342, 497], "store": [161, 164, 167, 168, 175, 192, 232, 279, 286, 560], "score": [161, 166, 167, 175, 254, 255, 257, 258, 259, 261, 286, 292, 293, 295, 296, 297, 299, 318, 335, 528, 564, 587, 590, 596, 600], "magnitudecriterion": 161, "magnitud": [161, 175, 253, 261, 272, 291, 299, 561, 590], "criterion_class": 161, "determin": [161, 166, 167, 175, 337, 526, 528, 590, 593, 597], "gradientcriterion": 161, "gradient": [161, 270, 561, 565, 590, 603], "absolut": [161, 175, 261, 299, 564, 565, 589, 590, 593, 600], "snipcriterion": 161, "snip": [161, 175, 286, 561, 590, 603], "product": [161, 561, 566, 568, 569, 585, 589, 591, 593, 596, 600], "singl": [161, 169, 175, 183, 190, 207, 223, 230, 245, 257, 286, 288, 295, 378, 395, 414, 528, 550, 562, 590], "shot": [161, 169, 217, 286, 288, 529, 561, 565, 590, 591], "sensit": [161, 270, 286, 561, 590], "arxiv": [161, 286, 590, 597], "org": [161, 257, 286, 295, 527, 528, 547, 562, 580, 583], "1810": [161, 286], "02340": [161, 286], "snipmomentumcriterion": 161, "snip_momentum": [161, 175, 565, 590], "momentum": [161, 286, 561, 565, 590, 602], "mechan": [161, 596, 601], "preserv": 161, "step": [161, 166, 167, 169, 175, 284, 286, 288, 332, 547, 552, 553, 554, 565, 580, 583, 585, 588, 590, 592, 594, 596, 597, 598, 600], "beta": 161, "slim": [163, 167, 170, 257, 295, 306, 308, 567, 590], "get_attribut": 164, "multi": [164, 170, 257, 295, 355, 529, 549, 550, 561, 565, 587, 593, 600], "level": [164, 316, 330, 339, 488, 526, 597, 600], "descent": 164, "recipesearch": 164, "searcher": [164, 269], "search": [164, 171, 178, 179, 252, 254, 264, 267, 268, 269, 289, 292, 315, 384, 385, 531, 547, 559, 561, 564, 568, 569, 579, 591, 598, 600, 601], "root": [164, 190, 191, 192, 195, 230, 231, 232, 235, 261, 299, 514, 549, 550, 554, 564, 565, 602], "levelwis": 164, "wai": [164, 191, 192, 195, 231, 232, 235, 497, 529, 547, 549, 550, 564, 565, 568, 571, 586, 588, 590, 593, 597, 600, 602], "huggingfac": [164, 165, 190, 230, 338, 550, 555, 559, 573, 574, 575, 576, 597], "bert": [164, 175, 186, 189, 190, 207, 226, 229, 230, 245, 531, 550, 552, 564, 573, 599, 603], "obtain": [164, 167, 168, 170, 285, 528, 556, 590, 596, 597, 600], "recipe_sampl": 164, "bertattent": 164, "dens": [164, 169, 175, 288, 590, 603], "infom": [164, 210, 250], "basic": [164, 166, 174, 175, 206, 244, 264, 284, 291, 319, 323, 326, 332, 561, 562, 565, 592, 596], "searching_result": 164, "jitbasicsearch": 164, "jit": [164, 174, 568, 570, 575, 597, 598], "some": [164, 167, 175, 190, 230, 285, 497, 547, 550, 562, 564, 565, 566, 587, 590, 593, 594, 597, 598, 600], "them": [164, 190, 230, 528, 549, 556, 558, 560, 588, 590, 600], "automat": [164, 165, 167, 174, 175, 192, 195, 202, 203, 232, 235, 242, 252, 262, 289, 528, 531, 547, 548, 550, 561, 565, 566, 568, 570, 573, 574, 576, 578, 579, 580, 582, 583, 585, 588, 590, 593, 597, 599, 600], "static_graph": 164, "flatten_static_graph": 164, "target_lay": 164, "pathsearch": 164, "target_pattern": 164, "structur": [164, 165, 167, 175, 286, 328, 422, 561, 584, 586, 590, 593, 598, 601, 603], "link": [164, 175, 190, 230, 547, 550, 578, 582, 585, 603], "target_path": 164, "target_op": 164, "target_op_lut": 164, "lookup": 164, "tabl": [164, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 379, 380, 381, 382, 384, 385, 603], "code": [164, 178, 179, 208, 263, 287, 290, 311, 332, 407, 425, 528, 531, 532, 547, 549, 550, 552, 553, 554, 560, 561, 563, 564, 568, 570, 572, 573, 574, 576, 579, 585, 587, 588, 590, 591, 592, 593, 596, 598, 599], "current_pattern": 164, "statu": [164, 493, 509, 526, 549, 587], "linear2linearsearch": 164, "consecut": [164, 165, 170], "selfmhasearch": 164, "head": [164, 165, 170, 590], "squeezer": 165, "postcompressionutil": 165, "librari": [165, 211, 253, 291, 524, 527, 531, 562, 565, 570, 579, 585, 591, 593], "relat": [165, 168, 246, 257, 276, 281, 284, 295, 335, 425, 428, 430, 435, 515, 518, 519, 520, 523, 568, 590, 602], "linearcompress": 165, "layer_1": 165, "layer_2": 165, "also": [165, 189, 192, 207, 229, 232, 245, 254, 292, 310, 311, 527, 529, 531, 532, 547, 549, 555, 559, 561, 564, 565, 568, 573, 578, 579, 582, 585, 586, 587, 590, 591, 593, 594, 597, 600], "while": [165, 167, 286, 315, 532, 547, 550, 555, 561, 566, 568, 573, 585, 592, 593, 597], "hidden": [165, 166, 284, 497, 532, 590], "act_fn": 165, "linearcompressioniter": 165, "linear_pattern": 165, "mhacompress": 165, "mha": 165, "head_num": 165, "head_siz": 165, "test": [165, 175, 207, 245, 527, 531, 547, 562, 603], "progress": [165, 192, 232, 579, 585, 590, 593], "register_pattern": [166, 284], "sure": [166, 167, 169, 284, 286, 288, 547, 548], "get_pattern": [166, 284], "assertionerror": [166, 167, 170, 284, 285, 286, 300], "been": [166, 167, 254, 284, 286, 292, 527, 529, 547, 552, 565, 566, 585, 597], "basepattern": [166, 168], "unit": [166, 284, 497, 527], "e": [166, 175, 514, 526, 552, 555, 559, 568, 573, 574, 578, 582, 590, 597, 600], "4x1": [166, 175, 280, 565, 590, 603], "is_glob": [166, 284], "take": [166, 175, 178, 179, 183, 207, 212, 223, 245, 284, 299, 300, 311, 315, 332, 526, 528, 529, 547, 549, 552, 558, 565, 585, 590, 593, 594, 599, 600, 602], "local": [166, 175, 284, 342, 357, 389, 394, 407, 427, 547, 578, 582, 590, 596], "contrast": [166, 284, 599], "keep_mask_lay": 166, "invalid_lay": 166, "max_sparsity_ratio_per_op": [166, 167, 171, 175, 565, 590], "sparsiti": [166, 167, 169, 170, 175, 286, 288, 342, 531, 550, 561, 565, 601, 603], "reach": [166, 169, 175, 288, 527, 531, 549, 590, 600], "min_sparsity_ratio_per_op": [166, 171, 175, 565, 590], "minimum": [166, 175, 565, 576, 590, 600], "target_spars": [166, 171, 175, 565, 590, 592, 602], "patternnxm": [166, 284], "nxm": [166, 167, 175, 280, 284, 590], "kept": [166, 284], "block_siz": [166, 284], "height": [166, 203, 207, 242, 245, 284, 554, 590, 599, 602], "width": [166, 203, 207, 242, 245, 284, 554, 590, 593, 599, 602], "vertic": [166, 207, 245, 284, 599], "becaus": [166, 207, 245, 284, 528, 590, 593, 597, 599, 600], "patternninm": [166, 284], "n": [166, 175, 191, 207, 231, 245, 255, 284, 293, 330, 485, 550, 552, 590, 593, 597, 599], "out": [166, 175, 190, 191, 192, 230, 231, 232, 252, 284, 289, 527, 528, 531, 550, 568, 573, 578, 579, 580, 582, 583, 585, 590, 592, 593], "continu": [166, 257, 284, 295, 529, 565, 586, 590], "master": [166, 254, 255, 258, 259, 284, 287, 292, 293, 296, 297, 565, 600], "doc": [166, 174, 175, 284, 326, 327, 330, 342, 564, 565, 580, 583], "md": [166, 174, 175, 284, 554, 593], "element": [166, 170, 188, 228, 257, 284, 295, 342, 550, 561, 564, 590, 597], "register_prun": [167, 286], "parse_valid_pruner_typ": 167, "get_prun": [167, 286], "cuurent": [167, 286], "round_multipli": 167, "spars": [167, 286, 550, 591], "model_slim_ffn2": 167, "part": [167, 284, 286, 528, 562, 566, 580, 583, 590, 597, 601], "perman": [167, 526, 590], "acceler": [167, 552, 565, 568, 576, 585, 590, 591, 594, 597, 600], "directli": [167, 175, 189, 229, 257, 261, 285, 295, 299, 556, 564, 565, 572, 590, 592, 593, 598], "sprase": 167, "multipl": [167, 175, 176, 177, 181, 182, 190, 191, 193, 194, 195, 196, 197, 201, 204, 207, 214, 221, 222, 224, 230, 231, 233, 234, 235, 236, 237, 241, 243, 245, 262, 300, 301, 302, 304, 310, 548, 550, 556, 565, 588, 590, 596, 597, 600], "model_slim_mha": 167, "baseprun": 167, "current_sparsity_ratio": [167, 286], "global_step": [167, 286], "total": [167, 207, 245, 261, 286, 299, 550, 590, 599], "start_step": [167, 171, 175, 286, 565, 590, 592], "trigger": [167, 286, 527], "end_step": [167, 171, 175, 286, 565, 590, 592], "pruning_frequ": [167, 171, 175, 565, 590], "target_sparsity_ratio": [167, 286], "show": [167, 342, 526, 547, 552, 554, 565, 571, 586, 590, 597, 600, 601], "final": [167, 286, 565, 571, 587, 590, 593, 595, 600], "basicprun": 167, "arrang": [167, 191, 192, 195, 231, 232, 235, 550, 590], "proce": 167, "regul": 167, "patternlockprun": [167, 274, 286], "parent": [167, 169, 280, 286, 288, 598], "progressiveprun": 167, "interpol": [167, 207, 245, 564, 590, 599], "fine": [167, 190, 230, 550, 571, 590, 591, 593], "grain": [167, 591, 600], "improv": [167, 527, 531, 565, 568, 585, 586, 590, 591, 593, 594, 600, 603], "interv": [167, 590], "regular": [168, 254, 285, 292], "register_reg": 168, "regulariz": 168, "get_reg_typ": 168, "get_reg": 168, "basereg": 168, "grouplasso": 168, "coeff": 168, "group": [168, 271, 414, 561, 590, 598, 599, 600, 603], "lasso": [168, 271, 561, 590], "select": [168, 175, 190, 230, 528, 529, 547, 561, 562, 585, 590, 593, 598, 600], "reg_term": 168, "coeffient": 168, "register_schedul": [169, 288], "get_schedul": [169, 288], "pruningschedul": 169, "gradual": [169, 288, 590], "oneshotschedul": [169, 288], "iterativeschedul": [169, 288], "get_sparsity_ratio": 170, "elementwise_over_matmul_gemm_conv": 170, "elementwise_over_al": 170, "blockwise_over_matmul_gemm_conv": 170, "check_config": [170, 285], "prune_config": [170, 285], "everyth": [170, 285, 573], "reset_none_to_default": 170, "undefin": [170, 285], "update_param": 170, "process_weight_config": 170, "global_config": [170, 270, 271, 273, 274, 275], "local_config": [170, 175, 270, 271, 273, 274, 275], "default_config": 170, "pruners_info": 170, "process_yaml_config": 170, "check_key_valid": 170, "template_config": 170, "user_config": 170, "process_and_check_config": [170, 285], "process_config": [170, 285], "parse_to_prun": [170, 285], "keep": [170, 285, 316, 528, 532, 584, 585, 595], "generate_pruner_config": 170, "dotdict": [170, 171, 310], "parse_auto_slim_config": 170, "ffn2_sparsiti": 170, "mha_spars": 170, "generate_ffn2_pruning_config": 170, "generate_mha_pruning_config": 170, "prunerv2": 171, "pruning_typ": [171, 175, 565, 590], "pruning_scop": [171, 175, 565, 590], "sparsity_decay_typ": [171, 175, 565, 590], "pruning_op_typ": [171, 175, 565, 590], "reg_typ": 171, "criterion_reduce_typ": 171, "resume_from_pruned_checkpoint": 171, "similiar": 171, "cfg_fname": 171, "parser": [171, 291, 355, 360, 478, 486, 516], "quantization_conf": 171, "pruning_conf": 171, "graph_optimization_conf": [171, 252], "mixedprecision_conf": 171, "benchmark_conf": 171, "nasconfig": [171, 265, 267, 529], "approach": [171, 174, 175, 264, 265, 267, 505, 528, 529, 549, 550, 552, 561, 565, 573, 585, 591, 592, 600, 602], "search_spac": [171, 264, 267, 268, 269], "search_algorithm": [171, 253, 266, 291, 529], "na": [171, 253, 291, 304, 561], "procedur": [171, 529], "deep_get": [172, 310], "dot": [172, 497, 566, 593], "nest": 172, "eg": [172, 192, 232, 550, 592], "person": [172, 526, 591], "john": 172, "deep": [172, 531, 532, 549, 561, 562, 565, 566, 568, 570, 573, 574, 576, 579, 585, 591, 593, 600, 601, 603], "deep_set": [172, 310], "sex": [172, 526], "male": 172, "instead": [172, 189, 229, 342, 571, 573, 576, 590], "notat": 172, "quantizationconfig": 174, "post_training_static_qu": [174, 549, 550, 565, 592, 600], "calibration_sampling_s": [174, 175, 565], "op_type_dict": [174, 175, 592, 593, 600], "op_name_dict": [174, 175, 565, 593, 600], "strategy_kwarg": [174, 175, 596, 600], "timeout": [174, 175, 565, 592, 600, 602], "max_trial": [174, 175, 565, 600], "quant_level": [174, 175, 600], "auto": [174, 175, 291, 313, 319, 342, 528, 568, 571, 573, 575, 576, 590, 593], "accuracy_criterion": [174, 175, 310, 565, 587, 592, 600, 602], "use_distributed_tun": [174, 175, 600], "posttrainingquantconfig": [174, 175, 311, 528, 531, 549, 559, 565, 567, 593, 594, 596, 600], "quantizationawaretrainingconfig": [174, 175, 311, 332, 528, 553, 565, 593, 594, 600], "requir": [174, 175, 290, 308, 344, 346, 358, 413, 419, 444, 451, 452, 453, 454, 456, 457, 458, 460, 463, 464, 469, 474, 478, 528, 532, 547, 548, 549, 553, 554, 558, 565, 566, 567, 569, 579, 585, 589, 590, 593, 595, 596, 598, 600, 602], "onnxrt_trt_ep": [174, 175, 593], "onnxrt_cuda_ep": [174, 175, 566, 593], "cv": [174, 175, 590], "object_detect": [174, 175, 257, 295], "nlp": [174, 175, 287, 573, 590, 593], "recommendation_system": [174, 175], "adaptor": [174, 175, 329, 335, 531, 561, 594, 595, 597, 598, 601], "explicitli": [174, 175, 560], "overrid": [174, 175, 342], "quantiztaion": [174, 175], "smooth_quant_arg": [174, 175, 593], "fast": [174, 175, 531, 591], "gemm_to_matmul": [174, 175, 593], "graph_optimization_level": [174, 175, 592, 593], "disable_al": [174, 175, 592], "enable_bas": [174, 175], "enable_extend": [174, 175], "enable_al": [174, 175], "first_conv_or_matmul_quant": [174, 175, 593], "last_conv_or_matmul_quant": [174, 175, 593], "pre_post_process_quant": [174, 175, 593], "preprocess": [174, 175, 190, 207, 230, 245, 335, 554, 599], "postprocess": [174, 175, 201, 204, 207, 211, 245, 253, 291, 335, 500, 532, 565, 598, 599], "vaild": [174, 175], "dedic": [174, 175], "quant_format": [174, 175, 250, 556], "onnxruntim": [174, 175, 186, 192, 199, 226, 232, 239, 262, 401, 405, 532, 559, 561, 562, 566, 592], "constraint": [174, 175, 252, 289, 565, 596, 600, 602], "reduc": [174, 175, 532, 553, 565, 566, 585, 586, 591, 593, 594, 597, 600, 602], "layer1": [174, 175, 565, 590, 593], "conv1": [174, 175, 593, 602], "tuning_strategi": [174, 175], "guarante": [174, 175, 565], "models": [174, 175, 310, 565, 587, 592], "footprint": [174, 175, 252, 276, 281, 289, 310, 553, 565, 587, 590, 592], "earli": [174, 175, 565, 593, 600, 602], "stop": [174, 175, 565, 600, 601, 602], "field": [174, 175, 192, 232, 257, 295, 528, 532, 547, 554, 565, 596, 600, 602], "exit": [174, 175, 312, 314, 547, 565, 566, 602], "bit": [174, 175, 553, 566, 591, 593, 597], "excluded_precis": [174, 175, 594], "exclud": [174, 175, 532, 566, 594], "empti": [174, 175, 571], "conserv": [174, 175, 291, 319], "random_se": [175, 315, 332, 565, 602], "1978": 175, "workspac": [175, 332, 341, 342, 423, 496, 507, 567], "default_workspac": 175, "resume_from": [175, 342], "tensorboard": [175, 332, 335, 342, 532, 565], "set_random_se": [175, 342], "set_workspac": [175, 311, 342], "set_resume_from": [175, 342], "set_tensorboard": [175, 342], "directori": [175, 191, 192, 231, 232, 308, 338, 341, 342, 406, 497, 550, 554, 557, 578, 580, 582, 583, 598], "histori": [175, 341, 342, 382, 395, 448, 466, 516, 585, 600], "nc_workspac": 175, "datetim": 175, "now": [175, 207, 245, 528, 529, 550, 554, 576, 592, 599, 600], "strftime": 175, "d_": 175, "h": [175, 207, 245, 554, 599], "resum": [175, 178, 179, 312, 318, 321, 322, 323, 332], "wa": [175, 532, 547, 565, 591, 600], "flag": [175, 255, 293, 332], "visual": [175, 531, 576, 585, 596, 598, 600, 601], "displai": [175, 326, 327, 342, 413, 585], "workspace_path": [175, 482, 497], "warmup": [175, 548, 565, 592], "inter_num_of_thread": [175, 565, 592], "intra_num_of_thread": [175, 565, 592], "benchmark": [175, 210, 253, 290, 291, 310, 342, 363, 370, 383, 394, 395, 418, 478, 479, 489, 495, 512, 517, 531, 537, 567, 568, 572, 576, 579, 585, 600, 601, 602, 603], "inter": [175, 188, 192, 228, 232], "intra": 175, "accuracycriterion": [175, 465, 565, 600], "higher_is_bett": [175, 564, 600, 602], "rel": [175, 310, 565, 592, 600, 602, 603], "tolerable_loss": [175, 565, 600], "01": [175, 565, 589, 592, 600, 602, 603], "higher": [175, 178, 179, 268, 300, 311, 332, 528, 552, 556, 564, 590, 593, 596], "tuningcriterion": [175, 565, 587, 596, 600], "optin": 175, "tuning_criterion": [175, 565, 587, 596, 600], "dynam": [175, 180, 220, 250, 327, 350, 532, 549, 552, 561, 565, 568, 573, 574, 575, 576, 579, 585, 591, 600, 603], "ptq": [175, 311, 528, 554, 561, 565, 593, 597, 598, 600], "tri": [175, 600], "meet": [175, 290, 312, 314, 528, 556, 587, 591, 592, 593, 598, 600], "bayesian": [175, 269, 291, 319, 529, 592], "mse_v2": [175, 291, 319], "hawq_v2": [175, 291, 319], "exhaust": [175, 269, 291, 319, 592], "docstr": [175, 330], "copi": [175, 285, 342], "deepcopi": 175, "model_origin": [175, 311, 594], "qat_op_name_dict": 175, "compression_manag": [175, 332, 528, 552, 553, 565, 588, 590, 593], "prepare_compress": [175, 332, 528, 552, 553, 565, 588, 590, 593], "weightpruningconfig": [175, 219, 565, 588, 590], "pruning_config": [175, 565, 590], "9": [175, 528, 562, 565, 590, 592, 597, 600, 602], "98": [175, 565, 590, 592, 603], "exp": [175, 565, 590], "90": [175, 602, 603], "magnitude_progress": 175, "snip_progress": 175, "snip_momentum_progress": [175, 590], "pattern_lock": [175, 253, 272, 291], "most": [175, 261, 299, 547, 565, 566, 590, 593, 597, 600], "feasibl": 175, "situat": [175, 554], "unstructur": [175, 280, 561, 590, 603], "8x1": 175, "channelx1": [175, 590], "1xchannel": [175, 590], "itrex": 175, "start": [175, 207, 245, 257, 295, 316, 562, 599, 600, 601, 604], "togeth": [175, 207, 245, 552, 562, 572, 591, 598, 599], "sort": [175, 320, 406, 600], "sinc": [175, 252, 254, 276, 281, 289, 292, 552, 556, 562, 564, 579, 585, 588], "lead": [175, 497, 552, 565, 566, 590, 597], "increas": [175, 551, 561, 568, 585, 600], "cube": [175, 590], "6": [175, 547, 558, 590, 593, 597, 600, 603], "update_config": 175, "10": [175, 192, 232, 315, 531, 547, 548, 550, 562, 565, 590, 592, 599, 600, 603], "knowledgedistillationlossconfig": [175, 552, 553, 565, 588], "hyperparamet": [175, 596, 597, 600], "entropi": [175, 600], "probabl": [175, 337], "length": [175, 190, 207, 230, 245, 257, 295, 531, 550, 564, 591, 593, 599], "groundtruth": [175, 257, 295], "label": [175, 178, 179, 190, 192, 193, 194, 195, 198, 203, 207, 212, 230, 232, 233, 234, 235, 238, 242, 245, 254, 256, 261, 292, 294, 299, 300, 311, 332, 414, 528, 549, 550, 564, 565, 593, 599], "tpye": 175, "sum": [175, 261, 299, 552], "distillationconfig": [175, 332, 552, 553, 565, 588], "criterion_conf": 175, "d_conf": [175, 553, 565, 588], "intermediatelayersknowledgedistillationlossconfig": [175, 552], "relationship": 175, "student_layer_nam": 175, "student_layer_output_process": 175, "teacher_layer_nam": 175, "teacher_layer_output_process": 175, "desir": [175, 203, 207, 242, 245, 599], "either": [175, 257, 295, 569, 573, 588, 592, 593], "serv": [175, 308, 514], "numer": [175, 261, 299, 566, 591, 593], "abbrevi": 175, "layer_nam": 175, "l1": 175, "selfknowledgedistillationlossconfig": [175, 552, 565], "student1_layer_name1": 175, "teacher_layer_name1": 175, "student2_layer_name1": 175, "student1_layer_name2": 175, "teacher_layer_name2": 175, "student2_layer_name2": 175, "soft": 175, "l2": [175, 590], "hard": [175, 549], "resblock": 175, "featur": [175, 190, 191, 203, 207, 230, 231, 242, 245, 527, 531, 548, 549, 551, 552, 565, 566, 567, 568, 572, 573, 576, 585, 590, 591, 595, 599], "deepst": 175, "fc": 175, "02": [175, 597, 603], "crossentropyloss": [175, 209, 552, 565], "sgd": [175, 214, 552, 565, 592, 602], "lr": [175, 552, 554, 565], "0001": [175, 552, 565, 592], "learning_r": [175, 565, 592, 602], "callabl": [175, 259, 297, 332, 493, 497, 513, 514], "altern": 175, "distil_loss": [175, 565], "mixedprecisionconfig": [175, 300, 330, 565, 566], "mixedprecis": [175, 262, 455, 503, 565], "fp16": [175, 327, 566, 593], "won": [175, 593], "work": [175, 252, 289, 530, 549, 552, 580, 583, 590, 594, 595, 597, 598], "mix_precis": [175, 291, 330, 565, 566], "converted_model": [175, 300, 565, 566], "exportconfig": 175, "dynamic_ax": [175, 250, 556], "qlinear": [175, 192, 199, 232, 239, 261, 299, 532, 556, 575, 603], "ax": [175, 250], "onnxqlinear2qdqconfig": 175, "onnxqlinear2qdq": 175, "new_model": 175, "torch2onnxconfig": [175, 556], "qdq_op_fp32_bia": [175, 250, 556], "torch2onnx": [175, 247, 253, 291], "qdq_op_int32_bia": [175, 250, 556], "qdq_op_fp32_bias_qdq": [175, 250, 556], "resnet50": [175, 531, 554, 559, 568, 572, 590, 593, 596, 603], "int8_onnx_config": [175, 556], "randn": [175, 556], "224": [175, 203, 242, 531, 549, 550, 554, 556, 559, 565, 568, 599, 602, 603], "batch_siz": [175, 180, 182, 186, 188, 189, 190, 191, 210, 220, 222, 226, 228, 229, 230, 231, 250, 529, 549, 550, 554, 556, 560, 565, 568, 593], "tf2onnxconfig": 175, "tf2onnx": [175, 247, 253, 291], "keyword": 175, "argument": [175, 330, 344, 452, 456, 461, 464, 470, 529], "output_graph": [175, 452, 456, 461, 464], "sigopt": [176, 177, 291, 591], "tpe": [176, 177, 291], "sigopttunestrategi": 178, "q_dataload": [178, 179, 312, 315, 316, 318, 320, 321, 322, 323, 560, 600], "q_func": [178, 179, 312, 315, 316, 318, 320, 321, 322, 323, 532, 565, 600], "eval_func": [178, 179, 290, 300, 311, 312, 315, 316, 318, 320, 321, 322, 323, 330, 332, 528, 549, 550, 552, 553, 554, 565, 593, 594, 600, 602], "q_hook": [178, 179, 312, 315, 316, 318, 320, 321, 322, 323], "hpo": 178, "mandatori": [178, 179, 311, 565, 602], "yield": [178, 179, 188, 210, 228, 300, 311, 315, 330, 332, 549, 593, 600], "_": [178, 179, 311, 528, 529, 532, 547, 552, 554, 558, 564, 565, 566, 567, 568, 574, 578, 580, 582, 583, 587, 590, 593, 595, 596, 597, 598, 600, 602], "taken": [178, 179, 300, 311, 332, 593], "reserv": [178, 179], "abl": [178, 179, 300, 311, 332, 576, 585, 590, 593], "tuner": [178, 179, 252, 289, 300, 311, 332, 593], "scalar": [178, 179, 300, 311, 332, 564, 593], "pseudo": [178, 179, 311, 332, 598], "someth": [178, 179, 192, 232, 311, 332], "fefin": 179, "tpetunestrategi": 179, "basedatalod": [180, 220], "basedataload": [180, 185, 187, 220, 225, 227], "last_batch": [180, 182, 186, 189, 210, 220, 222, 226, 229], "rollov": [180, 182, 186, 189, 210, 220, 222, 226, 229], "collate_fn": [180, 182, 183, 186, 189, 210, 220, 222, 223, 226, 229, 550], "sampler": [180, 182, 184, 186, 189, 210, 220, 222, 224, 226, 229, 241, 253, 326, 554], "batch_sampl": [180, 182, 186, 189, 210, 220, 222, 226, 229], "num_work": [180, 182, 186, 189, 210, 220, 222, 226, 229, 565, 593], "pin_memori": [180, 182, 186, 189, 210, 220, 222, 226, 229], "shuffl": [180, 182, 186, 189, 210, 220, 222, 226, 229, 565, 593], "_generate_dataload": [180, 220], "default_col": [182, 222], "outer": [182, 222], "defaultdataload": [182, 189, 222, 229], "definit": [183, 188, 223, 228, 411, 424, 433, 482, 513], "style": [183, 197, 223, 237, 330, 527, 550, 560], "drop_last": [183, 188, 223, 228], "iterablefetch": [183, 223], "indexfetch": [183, 223], "base_dataload": [184, 224, 241, 253], "default_dataload": [184, 224, 241, 253], "fetcher": [184, 224, 241, 253], "mxnet_dataload": [184, 224, 241, 253], "onnxrt_dataload": [184, 224, 241, 253], "pytorch_dataload": [184, 224, 241, 253], "tensorflow_dataload": [184, 224, 241, 253], "mxnetdataload": [185, 225], "onnxrtbertdataload": [186, 226], "varient": [186, 226], "onnxrtdataload": [186, 226], "pytorchdataload": [187, 227], "data_sourc": [188, 228, 335], "__iter__": [188, 192, 228, 232, 549, 550, 565], "matter": [188, 228, 594], "iterablesampl": [188, 228], "squential": [188, 228], "your": [188, 190, 228, 230, 527, 547, 550, 554, 556, 562, 563, 565, 568, 571, 572, 573, 578, 579, 580, 582, 583, 585, 590, 596, 598, 600], "clear": [188, 228, 532, 558, 564, 565], "iterabledataset": [188, 192, 228, 232], "try": [188, 228, 528, 556, 590, 593, 600], "indexdataset": [188, 228], "__getitem__": [188, 192, 207, 228, 232, 245, 550, 565], "__len__": [188, 192, 228, 232, 550], "retriev": [188, 228, 491], "act": [188, 228, 526], "sequentialsampl": [188, 228], "sequenti": [188, 228, 290, 312, 314, 600], "batchsampl": [188, 228], "tfdatadataload": [189, 229], "tensorflow1": [189, 229], "coupl": [189, 229], "satisfi": [189, 229, 562], "usag": [189, 229, 257, 263, 290, 295, 330, 497, 547, 550, 554, 555, 564, 568, 576, 587, 592, 599], "tf1": [189, 229, 567], "although": [189, 229, 596], "tensorflowbertdataload": [189, 229], "tensorflowmodelzoobertdataload": [189, 229], "zoo": [189, 207, 229, 245, 531, 555, 559, 603], "tensorflowdataload": [189, 229], "pytorchbertdataset": [190, 230], "model_typ": [190, 230, 427, 550], "construct": [190, 193, 194, 197, 205, 210, 212, 213, 215, 230, 233, 234, 237, 299, 304, 308, 335, 526, 550, 554, 590, 600], "tensordataset": [190, 230, 550], "repo": [190, 230, 525, 550, 555, 578, 580, 582, 583, 604], "easi": [190, 230, 289, 547, 549, 556, 565, 591, 593, 596], "load": [190, 206, 207, 230, 244, 245, 300, 308, 311, 341, 342, 470, 497, 549, 578, 582, 586, 592, 593, 597], "classifi": [190, 230, 261, 299, 550, 552, 590], "squad": [190, 207, 230, 245, 258, 259, 261, 296, 297, 299, 550, 564, 590, 599, 603], "distilbert": [190, 230, 531, 550, 591, 603], "xlnet": [190, 230, 550], "xlm": [190, 230, 550, 603], "101": [190, 230, 261, 299, 564, 597, 603], "2043": [190, 230], "2001": [190, 230], "onnxrtbertdataset": [190, 230], "data_dir": [190, 230, 550], "model_name_or_path": [190, 230, 550, 565, 573, 574], "max_seq_length": [190, 207, 230, 245, 550, 599], "128": [190, 193, 194, 207, 230, 233, 234, 245, 550, 565, 593, 599], "do_lower_cas": [190, 206, 207, 230, 244, 245, 550, 599], "mrpc": [190, 230, 261, 299, 550, 564, 573, 590, 600, 603], "dynamic_length": [190, 230, 550], "shortcut": [190, 230, 550], "token": [190, 201, 204, 207, 230, 241, 243, 245, 253, 254, 255, 291, 292, 293, 338, 514, 547, 550, 564, 565, 596, 597, 599, 600], "longer": [190, 207, 230, 245, 550, 599], "truncat": [190, 207, 230, 245, 550, 599], "shorter": [190, 207, 230, 245, 550, 599], "lowercas": [190, 230, 550], "choic": [190, 230, 532, 547, 550, 564, 597], "qqp": [190, 230, 550, 564, 603], "qnli": [190, 230, 550, 564, 603], "rte": [190, 230, 550, 564, 603], "st": [190, 230, 550, 564], "cola": [190, 230, 550, 564, 603], "mnli": [190, 230, 550, 564, 603], "wnli": [190, 230, 550, 564, 603], "mobilebert": [190, 230, 550, 552, 603], "roberta": [190, 230, 550, 603], "uncas": [190, 207, 230, 245, 550, 599, 603], "load_and_cache_exampl": [190, 230], "cach": [190, 230, 427, 514, 557, 593], "convert_examples_to_featur": [190, 207, 230, 245], "max_length": [190, 230], "label_list": [190, 230, 261, 299], "output_mod": [190, 230], "classif": [190, 207, 230, 245, 261, 287, 299, 552, 556, 559, 564, 574, 590, 591], "pad_token": [190, 230], "pad_token_segment_id": [190, 230], "mask_padding_with_zero": [190, 230], "inputfeatur": [190, 207, 230, 245], "properti": [190, 230, 414, 563, 589], "input_id": [190, 207, 230, 245, 565], "vocabulari": [190, 206, 207, 230, 244, 245, 599], "attention_mask": [190, 230, 565], "usual": [190, 230, 552, 588, 593, 597], "NOT": [190, 230, 558, 562], "token_type_id": [190, 230, 565], "segment": [190, 230, 255, 257, 293, 295], "portion": [190, 230], "problem": [190, 230, 261, 299, 564, 566, 586], "regress": [190, 230], "seq_length": [190, 230], "tensorflowbertdataset": [190, 230], "label_fil": [190, 207, 230, 245, 550, 599], "tfrecord": [190, 191, 192, 230, 231, 232, 550], "guid": [190, 230, 528, 531, 550, 552, 562, 568, 576, 585, 604], "parsedecodebert": [190, 230], "tensorflowmodelzoobertdataset": [190, 191, 230, 231], "num_cor": [190, 191, 195, 230, 231, 235, 550], "28": [190, 191, 195, 230, 231, 235, 550, 603], "coco": [191, 198, 202, 231, 238, 257, 261, 295, 299, 564, 590], "parsedecodecoco": [191, 231], "cocorecorddataset": [191, 231], "interleav": [191, 231, 550], "parallel": [191, 231, 550, 565, 600], "cocoraw": [191, 231, 549, 550], "img_dir": [191, 231, 550], "val2017": [191, 231, 550], "anno_dir": [191, 231, 550], "annot": [191, 231, 257, 295, 330, 550, 564, 590], "instances_val2017": [191, 231, 550], "json": [191, 207, 231, 245, 470, 497, 550, 567, 586, 599], "raw": [191, 195, 198, 231, 235, 238, 320, 559, 564, 600], "jpg": [191, 195, 197, 231, 235, 237, 550], "imag": [191, 192, 195, 197, 203, 207, 231, 232, 235, 237, 242, 245, 257, 295, 547, 550, 554, 556, 590, 592, 597, 598, 599, 603], "coconpi": [191, 231, 550], "npy_dir": [191, 231, 550], "npy": [191, 231, 550], "tensorflowdataset": [192, 232], "pytorchdataset": [192, 232], "mxnetdataset": [192, 232], "onnxrtqldataset": [192, 232], "onnxrtitdataset": [192, 232], "IT": [192, 199, 232, 239, 591], "pytorchmxnetwrapdataset": [192, 232], "datafunc": [192, 232], "pytorchmxnetwrapfunct": [192, 207, 232, 245], "framework_dataset": [192, 232], "convent": [192, 232, 257, 295, 552, 597], "imageclassifi": [192, 232], "choos": [192, 232, 547, 561, 562, 573, 595, 597, 600, 602], "tensorflow_itex": [192, 195, 197, 199, 232, 235, 237, 239, 592], "onnxrt_qdq": [192, 199, 232, 239, 592], "onnxrt_qlinearop": [192, 199, 207, 232, 239, 245, 592], "onnxrt_integerop": [192, 199, 207, 232, 239, 245, 592], "pytorch_ipex": [192, 199, 232, 239, 565, 592, 602], "pytorch_fx": [192, 199, 232, 239, 565, 592], "dataset_registri": [192, 232], "dataset_typ": [192, 232], "dataset_format": [192, 232], "data_format": [192, 203, 232, 242], "raw_imag": [192, 232], "overwrit": [192, 232, 578, 582], "download_url": [192, 232], "filenam": [192, 232, 342, 466, 490, 497, 550], "md5": [192, 232], "download": [192, 232, 418, 441, 442, 444, 445, 478, 547, 550, 562, 595], "address": [192, 232, 514, 526, 547, 566, 591], "gen_bar_updat": [192, 232], "bar": [192, 232, 547, 585], "check_integr": [192, 232], "fpath": [192, 232], "checksum": [192, 232], "calculate_md5": [192, 232], "chunk_siz": [192, 232], "cifar10": [192, 232, 550], "cifar100": [192, 232, 550], "otherwis": [192, 207, 232, 245, 526, 550, 580, 583, 592, 599], "www": [192, 232, 550, 603], "toronto": [192, 232, 550], "edu": [192, 232, 550], "kriz": [192, 232, 550], "cifar": [192, 232, 550, 603], "tar": [192, 232, 550, 580, 583], "gz": [192, 232, 550, 580, 583], "manual": [192, 232, 550, 568, 574, 576, 579], "subset": [192, 195, 232, 235, 550], "internet": [192, 232, 547, 550], "put": [192, 232, 550, 552, 590], "again": [192, 232, 550, 594], "pytorchcifar10": [192, 232], "mxnetcifar10": [192, 232], "tensorflowcifar10": [192, 232], "pytorchcifar100": [192, 232], "mxnetcifar100": [192, 232], "tensorflowcifar100": [192, 232], "mnist": [192, 232, 550, 554], "modifi": [192, 219, 232, 476, 528, 547, 554, 558, 602], "nation": [192, 232, 526], "institut": [192, 232], "standard": [192, 207, 232, 245, 556, 564, 599, 600], "technologi": [192, 232, 565, 589], "fashionmnist": [192, 232, 550], "npz": [192, 232, 550], "idx1": [192, 232, 550], "ubyt": [192, 232, 550], "idx3": [192, 232, 550], "t10k": [192, 232, 550], "pytorchmnist": [192, 232], "mxnetmnist": [192, 232], "tensorflowmnist": [192, 232], "pytorchfashionmnist": [192, 232], "mxnetfashionmnist": [192, 232], "tensorflowfashionmnist": [192, 232], "imagefold": [192, 232, 550, 554, 565], "expect": [192, 232, 345, 467, 526, 527, 557, 585, 593, 600], "subfold": [192, 232], "belong": [192, 232, 250, 304, 593], "class_1": [192, 232, 550], "xxx": [192, 232, 527, 550, 565], "png": [192, 232, 550], "xxy": [192, 232, 550], "xxz": [192, 232, 550], "class_n": [192, 232, 550], "123": [192, 232, 550, 599], "nsdf3": [192, 232, 550], "asd932_": [192, 232, 550], "categori": [192, 232, 256, 294, 548, 550, 575], "mxnetimagefold": [192, 232], "tensorflowtfrecorddataset": [192, 232], "tensorflowimagerecord": [192, 232], "imagenet": [192, 195, 203, 232, 235, 242, 529, 547, 565, 574, 590, 598, 599, 602, 603], "000": [192, 232, 531, 550], "001": [192, 232, 550, 554, 597, 602], "099": [192, 232, 550], "tensorflowvocrecord": [192, 232], "pascal": [192, 232], "voc": [192, 232, 261, 299], "2012": [192, 232], "00000": [192, 232], "00004": [192, 232], "00001": [192, 232], "00003": [192, 232], "dummydataset": [193, 194, 233, 234], "127": [193, 194, 233, 234, 550, 593, 597], "float32": [193, 194, 207, 233, 234, 245, 257, 295, 532, 548, 550, 565, 593, 597, 599], "rang": [193, 194, 207, 233, 234, 245, 330, 332, 531, 532, 550, 552, 553, 554, 565, 588, 590, 593, 597, 599], "stand_norm": [193, 194, 233, 234, 550], "dummy_v2": [194, 234, 549, 550], "sparse_dummy_v2": [194, 234, 550], "label_shap": [194, 234, 550], "sparsedummydataset": [194, 234], "dense_shap": [194, 234, 550], "sparse_ratio": [194, 234, 550], "imagenetraw": [195, 235, 550], "data_path": [195, 235, 550], "image_list": [195, 235, 550], "img1": [195, 235, 550], "img2": [195, 235, 550], "imgx": [195, 235, 550], "val_map": [195, 235, 550], "txt": [195, 235, 547, 550, 562], "pytorchimagenetraw": [195, 235], "mxnetimagenetraw": [195, 235], "tensorflowimagenetraw": [195, 235], "inteltensorflow": [195, 197, 235, 237, 562], "tensorflowimagenetdataset": [195, 235], "onnxrtimagenetdataset": [195, 235], "bert_dataset": [196, 201, 236, 241, 253, 291], "coco_dataset": [196, 201, 236, 241, 253, 291], "dummy_dataset": [196, 201, 236, 241, 253, 291], "dummy_dataset_v2": [196, 201, 236, 241, 253, 291], "imagenet_dataset": [196, 201, 236, 241, 253, 291], "style_transfer_dataset": [196, 201, 236, 241, 253, 291], "styletransferdataset": [197, 237], "content_fold": [197, 237, 550], "style_fold": [197, 237, 550], "crop_ratio": [197, 237, 550], "resize_shap": [197, 237, 550], "256": [197, 203, 237, 242, 550, 554, 565, 599], "image_format": [197, 237, 550], "holder": [197, 237, 550], "labelbalancecocorecordfilt": [198, 238], "balanc": [198, 238, 589, 597], "labelbalancecocorawfilt": [198, 238], "tensorflowfilt": [199, 239], "onnxrtqlfilt": [199, 239], "onnxrtitfilt": [199, 239], "pytorchfilt": [199, 239], "mxnetfilt": [199, 239], "filter_registri": [199, 239], "filter_typ": [199, 239], "__call__": [199, 239], "coco_filt": [200, 201, 240, 241, 253, 291], "imagenet_transform": [201, 204, 241, 243, 253, 291], "parsedecodecocotransform": 202, "decod": [202, 203, 242, 254, 292, 564, 599], "quantizedinput": [203, 242, 599], "labelshift": [203, 242, 599], "label_shift": [203, 242, 599], "parsedecodeimagenet": [203, 242, 599], "proto": [203, 207, 242, 245, 599], "parsedecodeimagenettransform": [203, 242], "tensorflowresizecropimagenettransform": [203, 242], "random_crop": [203, 242, 599], "resize_sid": [203, 242, 599], "resize_method": [203, 242], "bilinear": [203, 207, 242, 245, 599], "random_flip_left_right": [203, 242, 599], "mean_valu": [203, 242, 599], "channels_last": [203, 242, 568], "subpixel": [203, 242], "rgb": [203, 242], "seri": [203, 242, 531, 562, 565, 599], "applic": [203, 242, 481, 512, 514, 547, 556, 568, 585, 591, 597, 598, 599], "crop": [203, 207, 242, 245, 550, 599], "flip": [203, 207, 242, 245, 599], "left": [203, 207, 242, 245, 547, 579, 585, 597, 599], "right": [203, 242, 257, 295, 526, 528, 547, 585, 597, 599], "std": [203, 207, 242, 245, 565, 599], "bilinearimagenettransform": [203, 242], "central_fract": [203, 242, 599], "875": [203, 242, 599], "fraction": [203, 242, 599], "onnxbilinearimagenettransform": [203, 242], "onnxresizecropimagenettransform": [203, 242], "std_valu": [203, 242], "229": [203, 242, 565, 603], "225": [203, 242, 565, 603], "resizewithaspectratio": [203, 242], "87": [203, 242, 597, 603], "inter_pol": [203, 242], "cv2": [203, 242], "inter_area": [203, 242], "aspect": [203, 207, 242, 245, 599], "postprocess_cl": [205, 215, 565], "user_postprocess": [205, 215], "convert_to_unicod": [206, 244], "unicod": [206, 244], "assum": [206, 244, 257, 268, 295, 532, 558, 585], "utf": [206, 244], "load_vocab": [206, 244], "vocab_fil": [206, 207, 244, 245, 599], "convert_by_vocab": [206, 244], "vocab": [206, 244], "whitespace_token": [206, 244], "whitespac": [206, 244, 259, 297], "clean": [206, 244, 383, 527, 565], "piec": [206, 244, 254, 292, 556, 564], "fulltoken": [206, 244], "tokenzi": [206, 244], "basictoken": [206, 244], "punctuat": [206, 244, 254, 259, 292, 297], "lower": [206, 207, 244, 245, 259, 297, 316, 497, 553, 590, 591, 593, 597, 599, 600], "wordpiecetoken": [206, 244], "unk_token": [206, 244], "unk": [206, 244], "max_input_chars_per_word": [206, 244], "200": [206, 244, 528, 600], "wordpiec": [206, 207, 244, 245, 599], "concat_gener": [207, 245], "inc": [207, 245, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 390, 391, 392, 393, 526, 531, 568, 575, 585, 591, 592, 595], "tensorflowtransform": [207, 245], "mxnettransform": [207, 245], "pytorchtransform": [207, 245], "onnxrtqltransform": [207, 245], "onnxrtittransform": [207, 245], "transform_registri": [207, 245], "transform_typ": [207, 245], "basetransform": [207, 245], "tensorflowwrapfunct": [207, 245], "transform_func": [207, 245], "pytorchmxnettransform": [207, 245], "get_torchvision_map": [207, 245], "torchvis": [207, 245, 547, 555, 559, 568, 574], "composetransform": [207, 245], "transform_list": [207, 245, 599], "compos": [207, 245, 335, 599], "croptoboundingbox": [207, 245, 599], "offset_height": [207, 245, 599], "offset_width": [207, 245, 599], "target_height": [207, 245, 599], "target_width": [207, 245, 599], "box": [207, 245, 257, 261, 295, 299, 528, 547, 564, 568, 579, 585, 598, 599, 600], "coordin": [207, 245, 315, 599, 600], "top": [207, 245, 252, 261, 276, 281, 289, 299, 564, 585, 599], "corner": [207, 245, 532, 599], "horizont": [207, 245, 599], "mxnetcroptoboundingbox": [207, 245], "onnxrtcroptoboundingbox": [207, 245], "tensorflowcroptoboundingbox": [207, 245], "resizewithratio": [207, 245, 599], "min_dim": [207, 245, 599], "800": [207, 245, 599], "max_dim": [207, 245, 599], "1365": [207, 245, 599, 603], "constant_valu": [207, 245], "longest": [207, 245, 599], "side": [207, 245, 547, 550, 579, 597, 599], "doesn": [207, 245, 532, 554, 565, 586, 602], "exce": [207, 245, 599], "tensorflowresizewithratio": [207, 245], "perm": [207, 245, 599], "permut": [207, 245, 599], "tensorflowtranspos": [207, 245], "mxnettranspos": [207, 245], "pytorchtranspos": [207, 245], "randomverticalflip": [207, 245, 599], "randomli": [207, 245, 269, 315, 529, 599, 600], "tensorflowrandomverticalflip": [207, 245], "randomhorizontalflip": [207, 245, 565, 599], "tensorflowrandomhorizontalflip": [207, 245], "toarrai": [207, 245, 599], "pil": [207, 245, 599], "casttftransform": [207, 245], "castonnxtransform": [207, 245], "castpytorchtransform": [207, 245], "centercroptftransform": [207, 245], "center": [207, 245, 530, 531, 562, 599, 600], "paddedcentercroptransform": [207, 245], "crop_pad": [207, 245], "resizetftransform": [207, 245], "nearest": [207, 245, 599], "bicub": [207, 245, 599], "resizepytorchtransform": [207, 245], "randomcroptftransform": [207, 245], "randomresizedcroppytorchtransform": [207, 245], "randomresizedcropmxnettransform": [207, 245], "randomresizedcroptftransform": [207, 245], "normalizetftransform": [207, 245], "rescal": [207, 245, 599], "normal": [207, 245, 259, 297, 497, 565, 587, 597, 599], "deviat": [207, 245, 599], "broadcast": [207, 245, 554, 599], "rescalekeraspretraintransform": [207, 245], "rescaletftransform": [207, 245], "rescaletransform": [207, 245], "alignimagechanneltransform": [207, 245], "dim": [207, 245, 597, 599], "align": [207, 245, 526, 599], "w": [207, 245, 590, 597, 599], "must": [207, 245, 257, 295, 527, 528, 547, 548, 549, 562, 593, 599], "pytorchalignimagechannel": [207, 245], "tondarraytransform": [207, 245], "resizemxnettransform": [207, 245], "resizetransform": [207, 245], "cropresizetftransform": [207, 245], "boundari": [207, 245, 599], "area": [207, 245, 257, 295, 564, 599], "pytorchcropresizetransform": [207, 245], "mxnetcropresizetransform": [207, 245], "cropresizetransform": [207, 245], "centercroptransform": [207, 245], "mxnetnormalizetransform": [207, 245], "pytorchnormalizetransform": [207, 245], "normalizetransform": [207, 245], "randomcroptransform": [207, 245], "randomresizedcroptransform": [207, 245], "get_final_text": [207, 245], "pred_text": [207, 245], "orig_text": [207, 245], "project": [207, 245, 370, 393, 394, 418, 525, 526, 527, 591, 596, 600, 604], "squadexampl": [207, 245], "qas_id": [207, 245], "question_text": [207, 245], "doc_token": [207, 245], "orig_answer_text": [207, 245], "start_posit": [207, 245], "end_posit": [207, 245], "is_imposs": [207, 245], "simpl": [207, 245, 547, 562, 565, 596, 597, 600], "answer": [207, 245, 258, 259, 296, 297, 526, 590, 599, 603], "posit": [207, 245, 526, 547, 564, 568], "unique_id": [207, 245], "example_index": [207, 245], "doc_span_index": [207, 245], "token_to_orig_map": [207, 245], "token_is_max_context": [207, 245], "input_mask": [207, 245, 565], "segment_id": [207, 245, 565], "read_squad_exampl": [207, 245], "input_fil": [207, 245], "doc_strid": [207, 245, 599], "max_query_length": [207, 245, 599], "output_fn": [207, 245], "inputbatch": [207, 245], "collecttransform": [207, 245], "10833": [207, 245], "tfsquadv1posttransform": [207, 245], "n_best_siz": [207, 245, 599], "20": [207, 245, 589, 597, 599, 602, 603], "384": [207, 245, 599], "64": [207, 245, 529, 597, 599, 603], "max_answer_length": [207, 245, 599], "30": [207, 245, 555, 559, 561, 597, 599, 603], "nbest_predict": [207, 245, 599], "question": [207, 245, 258, 259, 296, 297, 526, 527, 532, 562, 568, 590, 597, 599, 603], "anoth": [207, 245, 254, 263, 292, 342, 552, 566, 578, 582, 599, 600], "long": [207, 245, 557, 599], "document": [207, 245, 330, 527, 537, 554, 566, 570, 580, 583, 584, 595, 599, 601], "chunk": [207, 245, 599], "tfmodelzoocollecttransform": [207, 245], "tfsquadv1modelzooposttransform": [207, 245], "squadv1": [207, 245, 599], "see": [207, 245, 254, 292, 526, 528, 530, 547, 563, 565, 578, 579, 582, 585, 586, 597, 598, 600, 603], "parsedecodevoctransform": [207, 245], "conf_fname_or_obj": [208, 217, 246, 252, 262, 263, 264, 265, 267, 276, 281, 289], "thei": [208, 330, 526, 552, 558, 564, 565, 566, 573, 587, 590], "command": [208, 332, 482, 490, 547, 554, 568, 570, 573, 578, 582, 586], "possibl": [208, 359, 547, 588, 590, 594, 600], "unnecessari": [208, 565], "tensorflowcrossentropyloss": 209, "pytorchcrossentropyloss": 209, "tensorflowsparsecategoricalcrossentropi": 209, "sparsecategoricalcrossentropyloss": 209, "setter": 210, "calib_dataload": [210, 290, 311, 528, 531, 549, 550, 559, 560, 564, 565, 593, 594], "reason": [210, 526, 549, 598, 600], "know": [210, 483, 554, 595], "known": [210, 315, 556, 565, 590, 598, 600], "open": [211, 253, 291, 335, 524, 526, 531, 547, 556, 557, 565, 580, 583, 586, 591], "metric_cl": [212, 299, 565], "user_metr": [212, 299], "alwai": [212, 257, 295, 299, 564, 565], "recommend": [212, 299, 532, 550, 556, 558, 576, 579, 584, 586, 590, 592, 600], "set_backend": 213, "tensorflowoptim": 214, "pytorchoptim": 214, "main": [214, 287, 477, 514, 528, 554, 559, 565, 572, 574, 586, 590, 593], "optimizer_registri": 214, "optimizer_typ": 214, "cross": [214, 261, 299, 560, 600], "tensorflowsgd": 214, "tensorflowadamw": 214, "tensorflow_addon": 214, "adamw": 214, "tensorflowadam": 214, "adam": [214, 602], "pytorchsgd": 214, "record_output": 216, "output_process": 216, "help": [216, 263, 359, 497, 567, 568, 574, 585, 600, 601], "get_activ": 216, "f": [219, 552, 554, 593, 597], "pickle_modul": 219, "pickle_protocol": 219, "_use_new_zipfile_seri": 219, "prepare_prun": 219, "opt": [219, 531, 573, 597], "tensorflowimagefold": 232, "qlinear2qdq": [247, 253, 291], "qlinearop": [248, 561, 576, 593], "check_model": 248, "modelproto": [248, 250, 300, 567], "onnx_qlinear_to_qdq": 248, "input_name_to_nod": 248, "destin": [248, 263], "tf_to_fp32_onnx": 249, "tf_to_int8_onnx": 249, "int8_model": [249, 250, 532], "update_weight_bia": 250, "fp32_onnx_path": [250, 251], "wegiht": 250, "set_data_typ": 250, "weight_typ": 250, "activation_typ": 250, "get_node_map": 250, "module_node_map": 250, "get_quantizable_onnx_op": 250, "quantize_nod": 250, "build_scale_map": 250, "int8_scale_info": 250, "scale_zp_dict": 250, "set_scale_info": 250, "int8_onnx_model": 250, "int8_onnx_path": 250, "recalculate_bia": 250, "recalcul": [250, 597], "remove_nodes_by_nam": 250, "sub_graph_with_int32_bia": 250, "a_info": 250, "b_info": 250, "bias_nam": 250, "int32": [250, 550], "nodeproto": 250, "_type_": 250, "qdq_fp32_bia": 250, "excut": 250, "qdq_int32_bia": 250, "qdq_fp32_bias_qdq": 250, "torch_to_fp32_onnx": 250, "do_constant_fold": 250, "verbos": [250, 315], "torch_to_int8_onnx": 250, "u8s8": 250, "optionl": 250, "onnx2numpy_dtyp": 251, "onnx_node_typ": 251, "dummydataread": 251, "dataread": 251, "achiev": [252, 289, 556, 564, 565, 588, 590, 591, 593, 598, 600], "across": [252, 262, 289, 300, 551, 565, 590, 597, 600], "variou": [252, 262, 289, 300, 561, 568, 592], "dl": [252, 262, 276, 281, 289, 300, 560, 572, 585, 591], "bring": [252, 289, 579, 593, 597], "unifi": [252, 289, 532, 549, 560, 561, 565, 567], "vari": [252, 276, 281, 289, 589, 597, 603], "roc": [252, 261, 276, 281, 289, 299], "flexibl": [252, 276, 281, 289, 552, 590], "via": [252, 276, 281, 289, 514, 526, 554, 561, 565, 568, 585, 590], "popular": [253, 291, 524, 531, 532, 552, 555, 556, 559, 565, 590, 593, 600, 601], "compress": [253, 276, 281, 291, 310, 332, 524, 531, 537, 552, 561, 565, 585, 587, 588, 590, 591, 593, 597, 601, 603], "techniqu": [253, 291, 524, 531, 561, 565, 568, 588, 590, 592, 593, 601, 602, 603], "bleu": [253, 255, 260, 291, 293, 298, 564], "bleu_util": [253, 260, 291, 298], "coco_label_map": [253, 260, 291, 298], "coco_tool": [253, 260, 291, 298], "evaluate_squad": [253, 260, 291, 298], "f1": [253, 258, 260, 261, 291, 296, 298, 299, 554, 564, 565, 596, 603], "basic_na": [253, 266, 291], "dyna": [253, 266, 291, 529, 561, 592], "nas_util": [253, 266, 291], "pruner_legaci": [253, 291], "gradient_sensit": [253, 272, 291], "group_lasso": [253, 272, 291], "pruning_recip": [253, 291], "tile_pattern": [253, 277, 278], "pytorch_prun": [253, 291], "logger": [253, 282, 291, 333, 336, 342, 478, 486], "prune_util": [253, 282, 291], "graph_optim": [253, 291, 418, 453, 457, 458, 478, 486, 502], "mixed_precis": [253, 291, 418, 453, 478, 486, 502, 565], "model_convers": [253, 291], "pruning_v2": [253, 291], "unicoderegex": [254, 292], "hoc": [254, 292], "hack": [254, 292], "recogn": [254, 292, 600], "nondigit_punct_r": [254, 292], "compil": [254, 292, 565, 589], "express": [254, 292, 526], "preced": [254, 292, 597], "digit": [254, 292, 591], "punct_nondigit_r": [254, 292], "symbol_r": [254, 292], "bleu_token": [254, 292], "mose": [254, 292], "smt": [254, 292], "mosesdecod": [254, 292], "mteval": [254, 292], "v14": [254, 292], "pl": [254, 292], "l954": [254, 292], "l983": [254, 292], "bilingu": [254, 292], "understudi": [254, 292], "qualiti": [254, 292], "machin": [254, 292, 357, 547, 556, 562, 571, 585, 591, 597, 598], "translat": [254, 255, 292, 293, 590, 600], "natur": [254, 292, 556], "approxim": [254, 255, 292, 293, 564], "glue": [254, 261, 292, 299, 550, 564, 565, 574], "word": [254, 292, 564, 590], "ngram": [254, 292, 564], "breviti": [254, 255, 292, 293, 564], "penalti": [254, 255, 292, 293, 564], "doe": [254, 292, 550, 564, 565, 595, 599], "beam": [254, 292, 564], "tensor2tensor": [255, 293], "bleu_hook": [255, 293], "compute_bleu": [255, 293], "reference_corpu": [255, 293], "translation_corpu": [255, 293], "max_ord": [255, 293], "use_bp": [255, 293], "against": [255, 293], "gram": [255, 293], "bleu_scor": [255, 293], "third": [257, 295, 547, 563], "parti": [257, 295, 563, 593], "pycocotool": [257, 295, 557, 562], "noth": [257, 295, 600], "thu": [257, 295, 565, 590, 593], "cannot": [257, 295, 485, 528, 556, 557, 566, 598], "jonathanhuang": [257, 295], "image_id": [257, 295, 564], "encod": [257, 295, 599], "invok": [257, 295], "groundtruth_dict": [257, 295], "exportgroundtruthtococo": [257, 295], "groundtruth_boxes_list": [257, 295], "groundtruth_classes_list": [257, 295], "max_num_class": [257, 295], "output_path": [257, 295], "detections_list": [257, 295], "exportdetectionstococo": [257, 295], "detection_boxes_list": [257, 295], "detection_scores_list": [257, 295], "detection_classes_list": [257, 295], "cocowrapp": [257, 295], "loadannot": [257, 295], "cocoevalwrapp": [257, 295], "agnostic_mod": [257, 295], "computemetr": [257, 295], "detection_typ": [257, 295], "bbox": [257, 295, 528, 564], "hold": [257, 295, 315, 550], "iou_typ": [257, 295], "iou_thr": [257, 261, 295, 299, 564], "map_point": [257, 261, 295, 299, 564], "cocoev": [257, 295], "mscoco": [257, 295], "Then": [257, 295, 547, 578, 580, 582, 583, 597, 600], "exportsingleimagegroundtruthtococo": [257, 295], "next_annotation_id": [257, 295], "category_id_set": [257, 295], "groundtruth_box": [257, 295], "groundtruth_class": [257, 295], "groundtruth_mask": [257, 295], "groundtruth_is_crowd": [257, 295], "ingest": [257, 295], "ones": [257, 295, 590], "exportsingleimagedetectionstococo": [257, 295], "uniqu": [257, 290, 295, 384, 385, 593], "assign": [257, 295, 342, 547, 554, 592], "drop": [257, 285, 295, 565, 566, 579, 590, 603], "num_gt_box": [257, 295], "num_detect": [257, 261, 295, 299, 564, 565, 602], "image_height": [257, 295], "image_width": [257, 295], "detection_mask": [257, 295], "crowd": [257, 295], "insid": [257, 295, 552, 553, 586, 590, 600], "exportsingleimagedetectionboxestococo": [257, 295], "detection_box": [257, 295, 565, 602], "detection_scor": [257, 295, 565, 602], "detection_class": [257, 295, 565, 602], "exporsingleimagedetectionboxestococo": [257, 295], "exportsingleimagedetectionmaskstococo": [257, 295], "allenai": [258, 259, 296, 297], "bi": [258, 259, 296, 297], "att": [258, 259, 296, 297], "flow": [258, 259, 296, 297, 528, 529, 565], "f1_score": [258, 259, 296, 297], "ground_truth": [258, 259, 296, 297], "ground": [258, 259, 296, 297], "truth": [258, 259, 296, 297], "metric_max_over_ground_truth": [258, 259, 296, 297], "metric_fn": [258, 259, 296, 297], "exact_match_scor": [258, 296], "exact": [258, 296], "averag": [258, 259, 261, 296, 297, 299, 564, 565, 600], "articl": [258, 259, 296, 297], "paragraph": [258, 259, 296, 297], "qa": [258, 259, 296, 297], "cantain": [258, 259, 296, 297], "normalize_answ": [259, 297], "extra": [259, 297, 565], "replac": [259, 297, 497, 554, 565, 576, 595], "newlin": [259, 297], "tab": [259, 297, 395, 513, 585, 598], "harmon": [259, 261, 297, 299], "recal": [259, 261, 297, 299], "answer_start": [259, 297], "177": [259, 297], "denver": [259, 297], "bronco": [259, 297], "nfl": [259, 297], "team": [259, 297, 526, 594], "afc": [259, 297], "super": [259, 297, 529], "bowl": [259, 297], "50": [259, 297, 529, 597, 603], "56be4db0acb8001400a502ec": [259, 297], "form": [259, 297, 547, 552, 585], "percentag": [259, 297, 602], "tensorflowmetr": [261, 299], "maintain": [261, 299, 526, 527, 531, 567, 568, 580, 583, 590, 595], "pytorchmetr": [261, 299], "mxnetmetr": [261, 299], "onnxrtqlmetr": [261, 299], "onnxrtitmetr": [261, 299], "metric_registri": [261, 299], "metric_typ": [261, 299], "decorator_metr": [261, 299], "basemetr": [261, 299], "single_output": [261, 299], "hvd": [261, 299, 554], "wrappytorchmetr": [261, 299], "wrapmxnetmetr": [261, 299], "wraponnxrtmetr": [261, 299], "proport": [261, 299], "were": [261, 299, 571, 590], "pred_list": [261, 299], "pytorchloss": [261, 299], "mae": [261, 299, 564], "compare_label": [261, 299, 564], "actual": [261, 299, 554, 597], "rmse": [261, 299, 564, 600], "squar": [261, 299, 320, 564, 597, 600], "tensorflowtopk": [261, 299], "k": [261, 299, 564, 590], "among": [261, 299, 579, 597], "outcom": [261, 299], "num_correct": [261, 299], "num_sampl": [261, 299], "generaltopk": [261, 299], "cocomapv2": [261, 299, 564], "anno_path": [261, 299, 564], "map_kei": [261, 299], "detectionboxes_precis": [261, 299], "output_index_map": [261, 299, 564], "tensorflowmap": [261, 299], "tensorflowcocomap": [261, 299], "tensorflowvocmap": [261, 299], "squadf1": [261, 299, 564], "miou": [261, 299], "num_class": [261, 299], "21": [261, 299, 573, 574, 591, 597, 603], "iou": [261, 299], "intersect": [261, 299, 532, 564], "union": [261, 299, 332, 564], "onnxrtglu": [261, 299], "dlrm": [261, 299], "modelconvers": 263, "typic": [263, 290, 529, 531, 553, 555, 559, 590, 603], "basicna": 264, "model_build": [264, 267], "conf_fnam": 264, "nasbas": [267, 529], "nas_registri": 268, "nas_method": 268, "create_search_space_pool": 268, "idx": [268, 550], "enumer": [268, 332, 346, 447, 453, 479, 532, 552, 553, 554, 565, 588, 590, 598], "find_pareto_front": 268, "pareto": [268, 529], "front": [268, 529], "n_point": 268, "n_metric": 268, "n_pareto_point": 268, "gridsearch": 269, "grid": [269, 529], "whole": [269, 512, 547, 593], "randomsearch": 269, "42": [269, 589, 603], "bayesianoptimizationsearch": 269, "gradientsensitivityprun": 270, "pytorchmodel": [270, 271, 273, 274, 275, 309], "overwritten": [270, 271, 273, 274, 275, 573], "grouplassoprun": 271, "legaci": 272, "basicmagnitudeprun": 273, "lock": [274, 275, 561, 588, 590], "pruner_registri": 275, "clase": 275, "pruningconf": [276, 281], "tfpruningcallback": [276, 281], "input_model": [276, 281, 567, 598], "pure": [276, 281, 566, 590], "pattern_registri": 279, "pattern_typ": 279, "patternbas": 279, "mask_shap": [279, 280], "is_contigu": 279, "tile": 280, "tilepatternbas": 280, "tilepattern_1x1": 280, "1x1": [280, 552, 565, 590], "tilepattern_2x2": 280, "2x2": [280, 597], "tilepattern_1x16": 280, "1x16": 280, "tilepattern_4x1": 280, "tilepattern_1x2": 280, "1x2": [280, 597], "reset_non_value_to_default": 285, "non": [285, 342, 528, 589, 590, 600], "obejct": 285, "parse_not_to_prun": 285, "update_frequency_on_step": [286, 592], "max_sparsity_ratio_per_lay": [286, 592], "magnitudeprun": 286, "snipprun": 286, "snipmomentumprun": 286, "moreoev": 286, "least": [287, 565, 590, 600], "templat": [287, 291, 478, 486, 547, 565, 590], "tree": [287, 327], "huggingface_model": 287, "eager": [287, 344, 452, 456, 464, 554, 561, 593, 594, 598, 603], "config_file_path": 287, "pruner_info": 287, "quantconf": [289, 300], "server": [290, 291, 418, 425, 477, 478, 485, 486, 494, 497, 508, 510, 512, 547, 585], "seper": 290, "opt_model": [290, 565], "fulli": [290, 565, 593, 597], "train_func": [290, 332, 554, 565, 593], "contrib": 291, "experiment": [291, 529, 550, 553, 554, 556, 565, 590, 592, 595, 599], "base_model": [291, 302], "keras_model": [291, 302], "mxnet_model": [291, 302], "nets_factori": [291, 302], "onnx_model": [291, 302], "tensorflow_model": [291, 302], "torch_model": [291, 302], "tuning_sampl": [291, 319, 325], "tuning_spac": [291, 319, 325, 326, 328], "tuning_struct": [291, 319, 325, 326, 327], "auto_mixed_precis": [291, 319], "collect_layer_histogram": [291, 336], "create_obj_from_config": [291, 336], "kl_diverg": [291, 336], "load_huggingfac": [291, 336, 565], "ux": 291, "config_gener": [291, 418, 478], "configuration_wizard": [291, 418, 478], "db_manag": [291, 418, 478], "file_brows": [291, 418, 478], "jobs_manag": [291, 418, 478], "model_zoo": [291, 418, 478], "names_mapp": [291, 418, 478], "profil": [291, 370, 377, 392, 394, 395, 418, 478, 479, 489, 512, 517], "manage_workspac": [291, 418, 478], "workload": [291, 357, 478, 486, 497, 512, 517, 518, 591], "except": [291, 330, 342, 478, 486, 497, 512], "executor": [291, 345, 478, 486], "expiring_dict": [291, 478, 486], "github_info": [291, 478, 486], "hw_info": [291, 478, 486], "json_seri": [291, 478, 486], "proc": [291, 478, 486], "status_upd": [291, 478, 486], "yaml_util": [291, 478, 486], "web": [291, 477, 478, 531, 547, 598], "servic": [291, 478, 511, 512, 531, 585, 589], "commun": [291, 478, 512, 514, 526, 547], "router": [291, 478, 512], "inc_bench": [291, 478, 547, 559], "eval_metr": [300, 311, 332, 593], "frozen": [300, 308, 311, 434, 437, 547, 567], "savedmodel": [300, 308, 311, 603], "chould": 300, "onnx_ml_pb2": [300, 567], "hybirdblock": [300, 311], "paramt": [300, 332], "_mixedprecis": 300, "basemodel": 301, "plai": [301, 590, 591, 597], "role": [301, 590, 597], "kerasmodel": [303, 436], "get_model_fwk_nam": 304, "fwk": 304, "mxnetmodel": 305, "net": 306, "factori": [306, 399, 418, 453, 469, 474, 478, 489, 493], "tfslimnetsfactori": 306, "onnxmodel": 307, "get_model_typ": [308, 427], "validate_graph_nod": 308, "validate_and_inference_input_output": 308, "input_tensor_nam": 308, "output_tensor_nam": 308, "graph_sess": 308, "graph_def_sess": 308, "frozen_pb_sess": 308, "load_saved_model": 308, "saved_model_tag": 308, "signatur": 308, "saved_model_dir": 308, "tag": [308, 497, 597, 598], "metagraphdef": 308, "keras_sess": 308, "slim_sess": 308, "checkpoint_sess": 308, "estimator_sess": 308, "saved_model_sess": 308, "tensorflowbasemodel": 308, "tensorflowsavedmodelmodel": 308, "tensorflowqatmodel": 308, "tensorflowcheckpointmodel": 308, "checkpoint": [308, 341, 567], "tensorflowmodel": [308, 438], "pytorchbasemodel": 309, "pytorchfxmodel": 309, "ipexmodel": 309, "driven": [310, 531, 565, 566, 585, 587, 598], "objective_registri": 310, "objective_custom_registri": 310, "obj_cl": 310, "eural_compressor": 310, "objective_cl": 310, "user_object": 310, "__class__": 310, "__name__": 310, "objective_cfg": 310, "usr_cfg": 310, "user_obj_cfg": 310, "easili": [310, 532, 569, 573, 585, 587, 590, 597], "peak": [310, 587], "multiobject": [310, 507], "metric_criterion": 310, "metric_weight": 310, "obj_criterion": 310, "obj_weight": 310, "is_measur": 310, "calib_func": [311, 594], "entir": [311, 332, 528, 590, 597], "autotunestrategi": 312, "stage": [312, 314, 321, 552, 598, 600], "polici": [312, 314, 320, 526, 531, 589, 602, 604], "automixedprecisiontunestrategi": 313, "basictunestrategi": 314, "bayesiantunestrategi": 315, "acq_max": 315, "ac": 315, "gp": 315, "y_max": 315, "n_warmup": 315, "10000": 315, "n_iter": 315, "acquisit": 315, "gaussian": [315, 600], "relev": 315, "limit": [315, 342, 531, 552, 590, 598], "acq": 315, "randomst": 315, "scipi": 315, "x_max": 315, "targetspac": 315, "pbound": 315, "9527": [315, 565, 602], "allow": [315, 514, 547, 552, 554, 564, 565, 566, 592, 600, 602], "bayesianoptim": 315, "conservativetunestrategi": 316, "o0": [316, 600], "who": [316, 526], "exhaustivetunestrategi": 317, "hawq_v2tunestrategi": 318, "made": [318, 532, 593, 595, 600], "impact": [318, 595, 600], "msetunestrategi": 320, "mse_v2tunestrategi": 321, "revert": [321, 329, 600], "randomtunestrategi": 322, "strategy_registri": [323, 600], "tunestrategi": [323, 600], "tuningsamplerregistri": 326, "tuningsampl": 326, "tuningord": 326, "Not": [326, 327, 342, 481, 529], "tuningspac": [326, 327], "tuning_order_lst": 326, "initial_op_tuning_cfg": 326, "modelwisetuningsampl": 326, "tuning_items_prior": 326, "op_dtype_dict": 326, "optuningconfig": [326, 327, 328], "optypewisetuningsampl": 326, "opwisetuningsampl": 326, "fallbacktuningsampl": 326, "op_dtyp": 326, "accumul": [326, 600], "skip_first": 326, "tuningitem": 327, "item_typ": 327, "get_op_mode_by_query_ord": 327, "query_ord": 327, "pattern_to_intern": 327, "default_dtyp": 327, "pattern_to_path": 327, "quant_mode_from_pattern": 327, "internal_pattern": 327, "initial_tuning_cfg_with_quant_mod": 327, "op_name_typ": 327, "step1": 327, "step2": 327, "complet": [327, 532, 547, 593, 600, 602, 603], "step3": 327, "step4": 327, "step5": 327, "op_quant_mod": 328, "ordereddefaultdict": 329, "extract_data_typ": 329, "data_typ": 329, "sign": [329, 527, 547, 593, 596], "reverted_data_typ": 329, "signed_flag": 329, "get_adaptor_nam": 329, "fun": 330, "attribute1": 330, "module_debug_level1": 330, "debug": [330, 339, 399, 400, 404, 547, 578, 582, 586, 600], "function1": 330, "param1": 330, "param2": 330, "parameter1": 330, "parameter2": 330, "o": [330, 406, 562, 570, 589, 597], "function2": 330, "pep": 330, "484": 330, "output_model": [330, 549, 565, 598], "function3": 330, "section": [330, 547, 552, 553, 585, 590, 592, 602], "restructuredtext": 330, "liter": 330, "attributeerror": 330, "generator1": 330, "example_gener": 330, "exampleclass": 330, "param3": 330, "public": [330, 526, 580, 583], "attr1": 330, "attr2": 330, "attr5": 330, "api_doc_exampl": 331, "loop": [332, 528, 529, 558, 596, 600], "compressionmanag": 332, "callbacks_list": 332, "uesd": 332, "deal": 332, "Such": 332, "distillationcallbback": 332, "on_train_begin": [332, 528, 552, 553, 565, 588, 590, 593], "train_loop": [332, 565, 588], "on_epoch_begin": [332, 335, 552, 553, 565, 588, 590], "on_step_begin": [332, 335, 552, 553, 565, 588, 590], "on_after_compute_loss": [332, 552, 553, 565, 588], "backward": [332, 552, 553, 554, 565, 588, 590, 593, 595], "on_before_optimizer_step": [332, 552, 553, 565, 588, 590], "on_step_end": [332, 335, 552, 553, 565, 588, 590], "on_epoch_end": [332, 335, 552, 553, 565, 588, 590], "on_train_end": [332, 552, 553, 565, 588, 590, 593], "path_to_sav": 332, "manag": [332, 335, 361, 396, 419, 480, 496, 559, 565, 568, 569, 579], "summari": [332, 547, 580, 583, 589, 598], "orchestr": [332, 531, 561, 601], "pruningconfig": 332, "layerhistogramcollector": 333, "histogram": [333, 342, 547, 598], "layer_tensor": 333, "include_lay": 333, "diverg": [333, 337, 552, 600], "get_func_from_config": 335, "func_dict": 335, "get_preprocess": 335, "get_metr": 335, "get_postprocess": 335, "get_algorithm": 335, "algo": 335, "create_dataset": 335, "cfg_preprocess": 335, "cfg_filter": 335, "create_dataload": 335, "dataloader_cfg": 335, "create_eval_func": 335, "postprocess_cfg": 335, "fp32_baselin": [335, 532], "baselin": [335, 596, 598], "create_train_func": 335, "train_cfg": 335, "Their": 335, "auxiliari": 336, "pretrain": [338, 568, 574], "optimizedmodel": 338, "from_pretrain": [338, 565], "save_for_huggingface_upstream": [338, 565], "output_dir": [338, 490, 565, 573, 574], "msg": 339, "fatal": 339, "warn": [339, 547], "warin": 339, "alia": [339, 570, 575], "is_int8_model": 341, "checkpoint_dir": 341, "history_cfg": 341, "best_configur": 341, "best_model_weight": 341, "pt": [341, 567, 591, 594], "snapshot": [341, 516], "cfg_from_fil": 342, "yaml_fil": [342, 550, 554, 564], "lazyimport": 342, "lazi": 342, "till": [342, 600], "decorat": 342, "time_limit": 342, "get_siz": [342, 497], "seen": [342, 532], "recurs": 342, "compute_spars": 342, "fault_tolerant_fil": 342, "temporari": [342, 526], "equal_dict": 342, "d2": 342, "compare_kei": 342, "ignore_kei": 342, "ignor": [342, 550, 597], "cpuinfo": 342, "dump_elapsed_tim": [342, 532], "customized_msg": 342, "elaps": 342, "combine_histogram": 342, "old_hist": 342, "old": [342, 565, 595], "get_tensor_histogram": 342, "bin": [342, 557], "2048": 342, "get_all_fp32_data": 342, "get_tuning_histori": 342, "tuning_history_path": [342, 466], "num": [342, 564], "str2arrai": 342, "dequantizeweight": 342, "weight_tensor": 342, "min_filter_tensor": 342, "max_filter_tensor": 342, "scale_info": 342, "captureoutputtofil": 342, "tmp_file_path": 342, "stream": 342, "sy": [342, 571], "stderr": 342, "captur": 342, "statist": 342, "header": [342, 557], "field_nam": 342, "output_handl": 342, "printer": 342, "global_st": 342, "load_data_from_pkl": 342, "pkl": 342, "dump_data_to_loc": 342, "show_memory_info": 342, "hint": 342, "project_data": [343, 450, 455, 459, 462, 465, 472], "benchmark_data": 343, "dataloaderinterfac": [343, 459, 472], "dataloader_data": [343, 459, 472], "parse_arg": [344, 452, 456, 461, 464, 470], "benchmark_mod": 344, "set_eager_execut": [344, 452, 456, 464], "request_id": [345, 448, 466, 467, 490], "asd": [345, 467], "benchmark_id": 345, "benchmark_result_upd": 345, "benchmark_result_update_pytorch_script": 345, "neural_coder_perform": 345, "neural_coder_tim": 345, "pytorch_script_bench_optim": 345, "command_line_of_script": 345, "pytorch_script_bench_original_model": 345, "execute_real_benchmark": 345, "project_detail": [345, 448, 467], "benchmark_detail": 345, "benchmark_model": [346, 418, 478], "execute_benchmark": [346, 418, 478], "benchmarkconfiggener": 347, "configgener": 348, "workload_directori": 348, "configuration_path": 348, "graphoptimizationconfiggener": 349, "benchmark_config_gener": [350, 418, 478], "graph_optimization_config_gener": [350, 418, 478], "mixed_precision_config_gener": [350, 418, 478], "profiling_config_gener": [350, 418, 478], "pruning_config_gener": [350, 418, 478], "quantization_config_gener": [350, 418, 478], "mixedprecisionconfiggener": 351, "profilingconfiggener": 352, "pruningconfiggener": 353, "quantizationconfiggener": 354, "configurationpars": 355, "parse_list_valu": 355, "required_typ": 355, "parse_multidim_list": 355, "dimension": 355, "normalize_string_list": 355, "string_list": 355, "bracket": 355, "miss": [355, 590, 593], "get_predefined_configur": 357, "update_config_to_machine_specif": 357, "configuration_pars": [358, 418, 478], "get_boundary_nod": [358, 418, 478], "get_configur": [358, 418, 478], "params_feed": [358, 418, 478], "pruning_config_pars": [358, 418, 478], "feeder": 359, "get_possible_valu": 359, "pruningconfigpars": 360, "bench": [361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 390, 391, 392, 393, 448, 477, 568], "dbmanag": 361, "database_loc": 361, "log_level": [361, 488], "benchmarkresult": 363, "fill_dictionari": [364, 366, 367, 369, 371, 374, 375, 380], "fill": [364, 366, 367, 369, 371, 374, 375, 380, 547, 585, 596, 599], "domainflavour": [367, 479], "db": [367, 395, 396], "benchmark_result": [370, 394, 418], "domain_flavour": [370, 394, 418, 424, 497], "optimization_typ": [370, 394, 418], "profiling_result": [370, 394, 418], "pruning_detail": [370, 394, 418], "tuning_detail": [370, 394, 418], "tuning_histori": [370, 394, 418, 453, 478], "optimizationtyp": [374, 479], "profilingresult": 377, "pruningdetail": 379, "tuningdetail": [381, 465], "tuninghistori": [382, 466], "benchmarkapiinterfac": 383, "before_delete_benchmark_entri": 383, "mapper": [383, 446, 447], "sqlite3": 383, "db_model": [383, 394, 418, 478], "datasetapiinterfac": 384, "set_database_vers": [384, 385], "version_num": [384, 385], "alembic_vers": [384, 385], "initialize_associ": [384, 385], "initialize_precision_optimization_types_associ": [384, 385], "search_in_list_of_dict_for_unique_valu": [384, 385], "list_of_dict": [384, 385], "search_in_list_of_dict": [384, 385], "diagnosisapiinterfac": 386, "dictionariesapiinterfac": 387, "dictonari": 387, "examplesapiinterfac": 388, "predefin": [388, 497], "benchmark_api_interfac": [389, 394, 418], "dataset_api_interfac": [389, 394, 418], "diagnosis_api_interfac": [389, 394, 418], "dictionaries_api_interfac": [389, 394, 418], "examples_api_interfac": [389, 394, 418], "model_api_interfac": [389, 394, 418], "optimization_api_interfac": [389, 394, 418], "profiling_api_interfac": [389, 394, 418], "project_api_interfac": [389, 394, 418], "modelapiinterfac": 390, "optimizationapiinterfac": 391, "profilingapiinterfac": 392, "projectapiinterfac": 393, "db_oper": [394, 418, 478], "params_interfac": [394, 418, 478], "modeladdparamsinterfac": 395, "datasetaddparamsinterfac": 395, "optimizationaddparamsinterfac": 395, "optimizationeditparamsinterfac": 395, "edit": [395, 526], "benchmarkaddparamsinterfac": 395, "benchmarkeditparamsinterfac": 395, "profilingaddparamsinterfac": 395, "profilingeditparamsinterfac": 395, "profilingresultaddparamsinterfac": 395, "tuninghistoryiteminterfac": 395, "tuninghistoryinterfac": 395, "diagnosisoptimizationparamsinterfac": 395, "update_dataloaders_param": 396, "framework_id": 396, "dataloaders_to_upd": 396, "framework_dataloaders_config": 396, "get_framework_dataloaders_config": 396, "get_framework_transforms_config": 396, "diagnosisfactori": 398, "onnx_diagnosi": [399, 418, 478], "onnxrt_diagnosi": [399, 400, 418], "tensorflow_diagnosi": [399, 418, 478], "op_detail": [399, 418, 478], "op_entri": [399, 418, 478], "onnxrtdiagnosi": 401, "opdetail": 402, "oppattern": 402, "pattern_data": 402, "opweight": 402, "weights_data": 402, "opactiv": 402, "op_activ": 402, "opentri": 403, "activation_min": 403, "activation_max": 403, "tensorflowdiagnosi": 405, "browser": [406, 547, 578, 582], "get_directory_entri": 406, "get_requested_path": 406, "request": [406, 418, 419, 420, 441, 442, 445, 466, 478, 509, 511, 514, 521, 547, 593], "get_non_hidden_directory_entri": 406, "create_dir_entri": 406, "direntri": 406, "create_file_entri": 406, "create_entri": 406, "is_directori": 406, "sort_entri": 406, "should_show_fil": 406, "should_show_only_model_fil": 406, "get_setting_valu": 406, "get_filter_valu": 406, "filter_requested_entri": 406, "filter_nam": 406, "is_directory_entri": 406, "is_model_or_directory_entri": 406, "shown": [406, 529, 547, 549, 552, 564, 565, 579, 587, 588, 600], "is_dataset_or_directory_entri": 406, "brows": 407, "filesystem": [407, 497], "attribute_typ": 408, "expanded_group": 409, "reader": [412, 413, 418, 478], "graphread": 412, "onnxrt_read": [413, 415, 418], "tensorflow_read": [413, 415, 418], "collaps": [413, 418, 478, 547], "edg": [413, 418, 478, 599], "graph_read": [413, 418, 478], "highlight": [414, 528, 547], "groupnod": 414, "group_nam": 414, "onnxrtread": 416, "tensorflowread": 417, "jobs_control_queu": [418, 419, 478], "frozen_pb": [418, 425, 435], "meta_graph": [418, 425, 435], "model_type_gett": [418, 425, 478], "repositori": [418, 423, 425, 478, 484, 580, 583], "download_config": [418, 444, 478], "download_model": [418, 444, 478], "list_model": [418, 444, 478], "optimize_model": [418, 451, 453, 454, 457, 460], "neural_coder_optim": [418, 453, 478], "tune_model": [418, 453, 463], "execute_optim": [418, 453, 478], "tensorflow_profil": [418, 469, 478], "execute_profil": [418, 469, 478], "profile_model": [418, 469, 478], "job": [419, 493], "_jobscontrolqueu": 420, "queu": 420, "jobsmanag": 420, "_jobsmmanag": 421, "_job": 421, "get_default_path": 423, "getter": 427, "onnxrtmodel": 429, "remove_number_of_samples_from_shap": 429, "pytorchscriptmodel": 431, "modelrepositori": 432, "trust": [433, 547], "frozenpbmodel": 434, "metagraphmodel": 437, "metagraph": 437, "savedmodelmodel": 439, "get_input_shap": 440, "fix_dynamic_shap": 440, "get_available_model": 445, "check_vers": 445, "framework_vers": 445, "supported_vers": 445, "validate_model_list": 445, "model_list": 445, "get_framework_module_nam": 445, "framework_nam": [445, 485], "get_installed_framework": 445, "instal": [445, 554, 557, 559, 568, 570, 573, 576, 580, 583, 585, 586, 589, 604], "mappingdirect": 447, "namesmapp": 447, "execute_optimization_pytorch_script": 448, "optimization_id": 448, "execute_optimization_regular": 448, "parse_model_data_to_bench_nam": 448, "parse_log": 448, "optimization_detail": 448, "check_if_collect_tuning_histori": 448, "optimizationfactori": 449, "graphoptim": [450, 501], "optimization_data": [450, 455, 459, 462, 465], "dataset_data": [450, 455, 459, 462, 465], "optimize_graph": [452, 456], "optimize_graph_config": [452, 456], "optimize_pt_script": 458, "optimizationinterfac": 459, "optimization_workdir": 466, "watcher": 466, "send": [466, 509, 514, 527], "profiling_id": 467, "execute_real_profil": 467, "profiling_detail": 467, "profilerfactori": [468, 473], "load_profiling_detail": 470, "json_path": 470, "profiling_data": [472, 475], "delete_assign": 476, "wsgi": 477, "prepare_environ": 477, "app": [478, 512], "workdir": [478, 486, 494], "history_snapshot_pars": [478, 512, 517], "request_data_processor": [478, 512, 517], "response_gener": [478, 512, 517], "flavour": 479, "executionstatu": 479, "status": 479, "notfoundexcept": 481, "accessdeniedexcept": 481, "deni": 481, "clienterrorexcept": 481, "internalexcept": 481, "subject": [482, 509, 563], "send_respons": 482, "log_nam": 482, "additional_log_nam": [482, 490], "shell": [482, 490, 598], "expir": 483, "expiringdictitem": 483, "expires_at": 483, "expiringdict": 483, "initial_valu": 483, "ttl": 483, "120": [483, 597], "githubinfo": 484, "hw": 485, "hwinfo": 485, "respons": [485, 489, 496, 509, 514, 522, 593], "platform": [485, 531, 561, 568, 576, 591, 593, 603], "hardwar": [485, 527, 531, 532, 552, 561, 565, 566, 585, 589, 590, 591, 592], "get_number_of_socket": 485, "get_distribut": 485, "distibut": 485, "get_bios_vers": 485, "bio": [485, 589], "is_turbo_boost_en": 485, "turbo": [485, 589], "boost": [485, 566, 569, 585, 591], "get_kernel_vers": 485, "get_framework_info": 485, "get_framework_dependency_info": 485, "subdepend": 485, "jsonseri": 487, "serializ": 487, "change_log_level": 488, "optimizationpars": 489, "performancepars": 489, "accuracypars": 489, "benchmarkparserfactori": 489, "profilingpars": 489, "pid": 490, "ncprocess": 491, "aggreg": 491, "get_status_update_funct": 493, "job_typ": 493, "sent": 495, "deprec": [497, 580, 583, 599], "func": [497, 514, 593, 602], "signal": 497, "is_hidden": 497, "get_dataset_path": 497, "get_framework_from_path": 497, "get_file_extens": 497, "is_dataset_fil": 497, "get_predefined_config_path": 497, "normalize_domain": 497, "underscor": 497, "normalize_framework": 497, "normalize_str": 497, "string_to_norm": 497, "get_model_zoo_config_path": 497, "model_dict": 497, "get_model_zoo_model_path": 497, "check_modul": 497, "get_module_vers": 497, "mb": 497, "add_unit": 497, "load_model_config": 497, "load_dataloader_config": 497, "load_transforms_config": 497, "load_transforms_filter_config": 497, "meaning": [497, 565, 588], "load_precisions_config": 497, "load_pruning_details_config": 497, "get_default_pruning_config_path": 497, "load_model_wise_param": 497, "load_metrics_config": 497, "get_metrics_dict": 497, "load_help_nc_param": 497, "replace_with_valu": 497, "file_path": 497, "verify_file_path": 497, "determine_ip": 497, "ip": 497, "is_development_env": 497, "nc_mode": 497, "filter_transform": 497, "parse_bool_valu": 497, "release_tag": 497, "releas": [497, 531, 562, 574, 576, 578, 582, 584, 604], "get_shape_from_transform": 497, "shape_elements_ord": 497, "get_height_width_from_s": 497, "parse_to_string_list": 497, "parse_to_float_list": 497, "export_to_csv": 497, "csv": [497, 529, 547], "parse_vers": 497, "string_vers": 497, "are_archive_filenames_valid": 497, "archiv": 497, "malici": 497, "safe_extract_arch": 497, "zipfil": 497, "tarfil": 497, "destination_dir": 497, "member": [497, 526, 532], "safe": [497, 527], "labelbal": [499, 549, 550], "postprocessschema": 500, "sgdoptim": 505, "adamwoptim": 505, "adamoptim": 505, "crossentropylosscriterion": 505, "sparsecategoricalcrossentropycriterion": 505, "knowledgedistillationlosscriterion": 505, "weightcompressionapproach": 505, "parse_dict_value_to_float": 505, "parse_dict_value_to_int": 505, "wiseconfigdetail": 506, "wiseconfig": 506, "acccriterion": 507, "exitpolici": 507, "float_represent": 508, "dumper": 508, "pruner_represent": 508, "logic": [509, 602], "outsid": 509, "create_simple_respons": 509, "gui": [509, 514, 531, 547, 561, 562, 590, 601], "messagequeu": 509, "queue": [509, 514], "servicenotfoundexcept": 511, "unknown": 511, "connector": 513, "routingdefinit": 513, "rout": 513, "realtimeroutingdefinit": 513, "realtim": 513, "deferredroutingdefinit": 513, "separ": [513, 526, 547, 560, 563, 588, 592], "deferredsubprocessroutingdefinit": 513, "spawn": 513, "subprocess": 513, "get_model_graph": 513, "find_pattern_in_graph": 513, "get_system_info": 513, "endpoint": 514, "run_serv": 514, "webserv": 514, "get_tls_arg": 514, "tl": [514, 547], "block_ifram": 514, "werkzeug": 514, "ifram": 514, "csp": 514, "block_snif": 514, "mime": 514, "snif": 514, "require_api_token": 514, "author": [514, 563], "j": [514, 527, 531, 597, 603], "handle_api_cal": 514, "subpath": 514, "allow_api_cal": 514, "page_not_found": 514, "disable_cach": 514, "build_paramet": 514, "flask": [514, 547], "web_socket_publish": 514, "web_socket": 514, "flask_socketio": 514, "socketio": [514, 547], "benchmarkservic": 515, "historysnapshotpars": 516, "history_snapshot": 516, "provide_perform": 516, "modelservic": 518, "optimizationservic": 519, "profilingservic": 520, "processor": [521, 531, 566, 589, 591, 593, 594, 603], "requestdataprocessor": 521, "responsegener": 522, "workloadservic": 523, "welcom": [525, 526, 527, 531, 604], "interest": [526, 531, 598], "foster": 526, "particip": 526, "harass": 526, "experi": [526, 568, 596, 597, 600], "everyon": 526, "regardless": 526, "ag": 526, "bodi": 526, "ethnic": 526, "characterist": 526, "gender": 526, "educ": 526, "socio": 526, "econom": 526, "appear": [526, 547, 579, 585], "race": 526, "religion": 526, "sexual": 526, "orient": 526, "behavior": [526, 527, 532, 558, 567, 598, 600, 602], "contribut": [526, 531], "inclus": 526, "Being": 526, "respect": [526, 558, 590, 597, 602], "viewpoint": 526, "gracefulli": 526, "critic": 526, "focus": [526, 532], "empathi": 526, "toward": [526, 552], "unaccept": 526, "imageri": 526, "unwelcom": 526, "troll": 526, "insult": 526, "derogatori": 526, "comment": [526, 550, 564, 565, 599], "polit": 526, "attack": 526, "privat": 526, "publish": [526, 563, 566, 586, 597], "electron": 526, "explicit": 526, "permiss": 526, "inappropri": 526, "profession": 526, "clarifi": 526, "appropri": [526, 597], "fair": 526, "action": [526, 580, 583], "reject": 526, "commit": [526, 527], "wiki": 526, "issu": [526, 527, 530, 547, 562, 593, 598], "ban": 526, "temporarili": 526, "deem": 526, "threaten": 526, "offens": 526, "harm": 526, "mail": 526, "social": [526, 531, 591], "media": [526, 531, 591], "account": [526, 596, 600], "appoint": 526, "event": [526, 598], "abus": 526, "report": [526, 527, 547, 596], "contact": [526, 595, 596], "complaint": 526, "review": [526, 527], "investig": 526, "circumst": [526, 592], "oblig": 526, "confidenti": [526, 547], "regard": [526, 594], "incid": 526, "good": [526, 593, 600], "faith": 526, "face": [526, 531, 537, 568, 572, 591, 595], "repercuss": 526, "leadership": 526, "faq": [526, 531], "page": [526, 527, 531], "view": [527, 531, 547, 555, 576, 585, 595], "pylint": 527, "flake8": 527, "autopep8": 527, "cover": [527, 556, 560, 591], "would": [527, 565, 566, 590, 593, 597], "adopt": [527, 531, 568, 590, 591, 597], "certif": [527, 547], "agre": 527, "bug": 527, "jira": 527, "ticket": 527, "potenti": [527, 529], "risk": 527, "pr": [527, 564, 580, 583, 595], "reproduc": 527, "submit": [527, 591], "intend": 527, "collabor": [527, 570, 576], "adher": 527, "toolkit": [528, 531, 562, 568, 576, 591, 601], "tracer": 528, "resolv": [528, 530], "floatfunct": 528, "cat": [528, 571], "done": [528, 552, 553, 569, 585, 590, 593], "10004": [528, 529, 532, 549, 552, 553, 556, 558, 561, 566, 588, 592, 602], "neural_compressor": [528, 529, 531, 548, 549, 550, 552, 553, 554, 556, 559, 560, 564, 565, 566, 567, 587, 588, 590, 592, 593, 594, 595, 596, 597, 599, 600, 602], "eval": [528, 549, 568, 593, 598], "fail": 528, "conduct": [528, 565, 573, 585, 601], "imper": 528, "therefor": [528, 565, 590, 593, 595, 597], "lot": [528, 597], "As": [528, 547, 549, 552, 565, 579, 590, 600], "might": [528, 547, 600], "failur": 528, "successfulli": [528, 554, 591], "suggest": [528, 596], "traceabl": 528, "proxi": 528, "tutori": [528, 576, 591, 601], "prototyp": 528, "html": [528, 531, 580, 583], "untrac": 528, "ssd": [528, 603], "resnet34": [528, 603], "r34": 528, "bboxes_labels_scor": 528, "prob": 528, "45": [528, 597, 603], "max_output": 528, "zip": 528, "dbox": 528, "dlabel": 528, "dscore": 528, "decode_singl": 528, "autom": [529, 568, 585, 586, 597], "artifici": 529, "ann": 529, "par": 529, "outperform": 529, "hand": [529, 547], "propos": [529, 532, 552, 566, 590, 597], "lie": 529, "predictor": 529, "4x": [529, 593], "figur": [529, 578, 579, 582, 590], "popul": 529, "inner": 529, "evolutionari": 529, "cycl": 529, "until": [529, 600], "conclud": 529, "met": [529, 558, 566, 593, 598], "yet": [529, 547, 580, 583, 586], "simplest": [529, 571], "launcher": [529, 531, 552, 553, 576, 590, 601], "agent": 529, "nsga2": 529, "supernet": 529, "ofa_mbv3_d234_e346_k357_w1": 529, "acc": [529, 598, 603], "mac": [529, 586], "num_ev": 529, "250": 529, "results_csv_path": 529, "search_result": 529, "dataset_path": 529, "ilsvrc2012": 529, "aim": [529, 531, 568, 590, 597, 600, 601], "mobilenetv3": 529, "lt": [529, 550, 589, 603], "wmt": 529, "en": 529, "de": 529, "guidelin": [530, 531], "mainstream": [531, 601], "learn": [531, 532, 549, 550, 556, 560, 561, 562, 565, 566, 568, 570, 573, 574, 576, 579, 580, 583, 585, 590, 591, 593, 597, 598, 600, 601], "runtim": [531, 532, 533, 549, 555, 558, 561, 570, 575, 576, 592], "workflow": [531, 552, 562, 566, 580, 583, 598, 601], "particular": [531, 590], "wide": [531, 555, 566, 593, 603], "xeon": [531, 562, 563, 566, 589, 591, 593, 594, 603], "scalabl": [531, 562, 566, 589, 591, 593, 594, 603], "flex": [531, 562], "amd": [531, 561, 562, 603], "arm": [531, 561, 562, 603], "nvidia": [531, 561, 562, 590, 593, 603], "bloom": [531, 597], "176b": [531, 597], "30b": 531, "stabl": [531, 547, 562, 591], "diffus": [531, 591, 603], "gpt": [531, 597, 603], "hub": [531, 555, 559, 576], "hug": [531, 591], "vision": [531, 556, 559, 572, 597], "coder": [531, 561, 569, 570, 573, 576, 579, 591], "cloud": [531, 591], "marketplac": [531, 586, 591], "googl": [531, 566, 591], "amazon": [531, 568, 576], "azur": [531, 591], "softwar": [531, 563, 566, 589, 590, 591, 595], "alibaba": [531, 575, 582, 583, 591], "tencent": [531, 591], "taco": [531, 591], "ai": [531, 568, 591, 594, 601], "ecosystem": [531, 591], "lightn": [531, 575], "pip": [531, 547, 554, 557, 559, 562, 570, 573, 578, 580, 582, 583, 595], "wget": [531, 557, 559], "storag": [531, 559, 564, 597], "googleapi": [531, 559], "v1_6": [531, 559], "mobilenet_v1_1": [531, 559], "0_224_frozen": [531, 559], "quick": [531, 558, 601, 602], "overview": 531, "notebook": [531, 601], "oneapi": [531, 562, 591, 601], "analyt": [531, 562, 591, 601], "jupyterlab": [531, 568, 574, 576, 578, 582, 601], "studio": [531, 576, 585, 601], "matrix": [531, 576, 597, 601], "topic": 531, "heterogen": [531, 591], "power": [531, 552, 565, 579, 589, 591], "mar": [531, 591], "2023": [531, 597, 603], "busi": [531, 591], "jan": [531, 591], "blog": [531, 591], "amx": [531, 591], "enhanc": [531, 568, 591, 594], "4th": [531, 591], "gen": [531, 566, 591, 594], "neurip": [531, 591], "oct": [531, 591], "quala": [531, 591], "minilm": [531, 591, 603], "legal": [531, 604], "secur": [531, 589, 591, 604], "idea": [531, 590, 597, 600], "feel": 531, "look": [531, 532, 558, 564, 602], "bridg": [532, 561], "vanilla": [532, 561], "abcadaptor": 532, "__init__": [532, 549, 550, 564, 600], "query_fw_cap": 532, "query_fused_pattern": 532, "he": 532, "besid": [532, 552], "describ": [532, 547, 558, 598], "past": 532, "effect": [532, 590], "mainten": 532, "difficult": [532, 597], "abil": [532, 550, 558, 597], "modif": [532, 549, 558, 573], "fragment": 532, "granular": [532, 558, 561, 571, 590, 593, 597, 602], "semant": [532, 558], "microsoft": 532, "mla": [532, 593], "becom": [532, 556], "explor": 532, "inspect_tensor": 532, "op_list": [532, 598], "iteration_list": 532, "inspect_typ": 532, "save_to_disk": 532, "quantization_cfg": 532, "set_tensor": 532, "tensor_dict": 532, "diagnosis_help": 532, "easier": [547, 578, 582, 585, 591], "nightli": [547, 562], "pypi": [547, 562, 580, 583], "conda": [547, 557, 562, 571, 579, 595], "forg": [547, 557, 562], "git": [547, 557, 562], "clone": [547, 562, 578, 582], "cd": [547, 554, 562], "setup": [547, 558, 562, 580, 583, 590], "instruct": [547, 552, 562, 566, 580, 583, 591, 592, 593], "ui": 547, "5000": 547, "338174d13706855fc6924cec7b3a8ae8": 547, "listen": 547, "firewal": 547, "8080": 547, "p": [547, 586], "tf_enable_onednn_opt": [547, 562], "cert": 547, "path_to_cert": 547, "crt": 547, "path_to_private_kei": 547, "encrypt": 547, "insecur": 547, "expos": 547, "forfeit": 547, "client": 547, "extern": 547, "threat": 547, "button": [547, 561, 579, 585], "click": [547, 559, 561, 568, 569, 576, 579, 585, 591, 598], "pop": [547, 585], "recognit": [547, 554, 556, 590, 598], "few": [547, 591, 600], "finish": [547, 579], "chosen": 547, "synthet": 547, "plu": 547, "icon": 547, "unfold": 547, "On": [547, 593], "panel": [547, 580, 583, 585], "navig": 547, "previou": [547, 565, 590, 595, 597, 598, 600, 601], "trash": 547, "visibl": 547, "cursor": 547, "prompt": [547, 554], "confirm": 547, "bottom": 547, "pencil": 547, "light": [547, 553], "blue": 547, "color": 547, "That": 547, "row": [547, 590, 597], "arrow": 547, "line": [547, 554, 561, 568, 573, 574, 590, 598], "checkbox": 547, "column": [547, 590, 597], "chart": [547, 593, 596, 598], "offer": [547, 550], "conveni": [547, 565], "variat": 547, "pictur": 547, "yellow": 547, "remind": 547, "ofa": 547, "fvcore": 547, "autograd": 547, "pymoo": 547, "numba": 547, "ilsvrc": 547, "hour": [547, 600], "One": [547, 550, 554, 561, 590, 591, 600], "dialog": 547, "organ": [547, 602], "cryptographi": 547, "linux": [548, 557, 579, 585], "window": [548, 585, 586], "x86_64": 548, "aarch64": 548, "often": [549, 552, 588, 590], "encount": 549, "consum": 549, "previous": 549, "lack": [549, 557], "faster": [549, 551, 591, 600, 603], "treat": 549, "manner": [549, 552, 567], "300": [549, 550], "input_data": 549, "customis": [549, 550], "ensp": [550, 564, 599], "imagerecord": [550, 554, 602], "image_nam": 550, "cocorecord": 550, "gt": [550, 556, 599], "int64": 550, "style_transf": 550, "content": 550, "tfrecorddataset": 550, "helloworld": [550, 599], "aid": 551, "deploy": [551, 568, 585, 597], "infrastructur": 551, "expens": [552, 565, 600], "deploi": [552, 565, 600], "mobil": [552, 565, 603], "produc": 552, "logit": 552, "softmax": 552, "l": [552, 598, 600], "kd": 552, "distanc": 552, "euclidean": 552, "kullback": 552, "leibler": 552, "patient": 552, "compact": [552, 565, 571, 590], "agnost": 552, "resourc": [552, 590, 600], "convolut": [552, 590, 591], "ia": 552, "attach": [552, 565, 597], "shallow": 552, "depth": [552, 594], "deepest": 552, "deeper": 552, "10006": [552, 553], "student_output": [552, 553], "student_loss": [552, 553], "training_func_for_nc": [552, 553], "distil_loss_conf": 552, "accordingli": [552, 576], "promis": [553, 565, 590], "huge": 553, "heavi": 553, "booster": 553, "degrad": [553, 600], "retrain": [553, 590], "incorpor": [553, 600], "novel": [553, 568, 579, 585], "place": [553, 562, 590, 598], "illustr": 553, "comb": 553, "distillation_criterion": [553, 565, 588], "q_conf": 553, "horovod": 554, "builtin": 554, "program": [554, 563, 566, 568, 585], "addition": [554, 600], "enable_eager_execut": 554, "yaml_file_path": 554, "pre_process": 554, "simpli": [554, 567, 568, 570, 573, 585], "evaluation_result": 554, "evaluation_time_cost": 554, "partit": 554, "distributedsampl": 554, "train_sampl": 554, "train_dataset": [554, 593], "num_replica": 554, "rank": 554, "train_load": 554, "train_kwarg": 554, "adadelta": 554, "distributedoptim": 554, "named_paramet": 554, "broadcast_paramet": 554, "root_rank": 554, "broadcast_optimizer_st": 554, "set_epoch": 554, "batch_idx": 554, "zero_grad": [554, 565, 590], "nll_loss": 554, "log_interv": 554, "0f": 554, "tloss": 554, "6f": 554, "dry_run": 554, "test_func": 554, "host": 554, "num_of_process": 554, "002": 554, "ssh": [554, 585], "readm": 554, "exactli": [554, 569], "resnet50_v1": [554, 565], "topk": [554, 564, 565, 593], "32": [554, 560, 589, 590, 597, 603], "resizecropimagenet": [554, 599], "realiz": [554, 564, 587, 594, 596], "tow": 554, "node1": 554, "node2": 554, "TO": [554, 570], "your_node1_nam": 554, "your_node2_nam": 554, "resnet50_fp32_pretrained_model": 554, "nc_resnet50_v1": 554, "resnet": [554, 559, 603], "varieti": [555, 592, 600], "demonstr": [555, 568, 590, 598], "10k": [555, 559], "speedup": [555, 561, 593], "2x": [555, 561, 589], "vnni": [555, 561, 592, 593], "exchang": 556, "howev": [556, 590, 597], "hope": 556, "briefli": [556, 565, 590, 597], "matur": 556, "major": [556, 560, 593, 597], "reus": 556, "inc_model": [556, 567], "fp32_onnx_config": 556, "verifi": 556, "gap": [556, 567], "matmulintegertofloat": 556, "matmulinteg": 556, "toolchain": 557, "bare": 557, "metal": 557, "sudo": [557, 571], "apt": [557, 562, 571, 579], "python3": 557, "dev": [557, 578, 582], "distutil": 557, "essenti": 557, "libgl1": 557, "mesa": 557, "glx": 557, "libglib2": 557, "numactl": [557, 571, 579], "ln": 557, "sf": 557, "usr": 557, "incompat": 557, "88": [557, 596, 603], "80": [557, 597, 598, 603], "pyobject": 557, "reinstal": 557, "importerror": 557, "libgl": 557, "No": [557, 565, 589, 591], "yum": [557, 562], "opencv": [557, 579], "pend": 557, "27": [557, 562, 603], "alemb": [557, 562], "friendli": [558, 565, 597, 602], "dive": [558, 601], "unless": 558, "purpos": [558, 566, 585, 592, 593], "let": [558, 573, 592, 602], "syntax": 558, "go": [558, 580, 583, 592, 599], "up1": 558, "up2": 558, "valid_mixed_precis": 558, "per_tensor": [558, 593, 602], "addn": 558, "grappler_optim": 558, "constfold": 558, "arithmet": 558, "debug_stripp": 558, "jupyt": [559, 576, 578, 579, 582], "lab": [559, 578, 579, 580, 582, 583], "concept": [560, 596, 601], "rather": 560, "custom_metr": 560, "refin": [560, 590], "These": 561, "broad": [561, 574, 601], "420": 561, "geomean": 561, "snippet": 561, "upload": [561, 580, 583], "dispatch": 561, "qintegerop": [561, 593], "plan": 561, "success": 562, "re": [562, 585], "uninstal": [562, 585], "frequent": 562, "ask": 562, "consolid": 562, "latest": [562, 591, 595], "eas": [562, 570, 591], "along": 562, "streamlin": 562, "scienc": 562, "mani": [562, 600, 602], "websit": 562, "anaconda": 562, "suit": [562, 586, 598], "esri": 562, "formerli": 562, "skylak": 562, "cascad": 562, "lake": [562, 566, 591], "cooper": [562, 566, 591], "ic": [562, 590, 591], "sapphir": 562, "rapid": 562, "hbm": 562, "arctic": 562, "sound": 562, "pont": 562, "vecchio": 562, "cento": 562, "ubuntu": [562, 589], "04": [562, 589, 603], "fortensorflow": 562, "forpytorch": 562, "onednn": [562, 593], "newer": 562, "apach": 563, "copyright": 563, "accompani": 563, "research": [563, 597], "wish": 563, "bibtex": 563, "misc": 563, "feng": 563, "tian": 563, "hanwen": 563, "haihao": [563, 590], "shen": [563, 590], "suyu": 563, "chen": 563, "titl": [563, 586], "howpublish": 563, "year": 563, "logo": [563, 589], "atom": 563, "phi": 563, "pentium": 563, "vtune": 563, "corpor": [563, 589], "subsidiari": [563, 589], "brand": [563, 589], "claim": [563, 589], "popularli": 564, "industri": [564, 591], "label_map": 564, "decis": 564, "ap": 564, "curv": 564, "turn": [564, 579], "target_boxes_num": 564, "str_label": 564, "int_label": 564, "inturn": 564, "cocomap": 564, "vocmap": 564, "categor": 564, "multiclass": 564, "multilabel": 564, "multi_metr": 564, "newmetr": 564, "reset": 564, "reflect": [564, 589, 599], "deliv": [565, 591], "upgrad": 565, "veri": [565, 586, 593, 600], "speed": [565, 576, 590, 591, 593, 600], "fundament": 565, "comprehens": [565, 601], "kind": 565, "resort": 565, "automodelforsequenceclassif": 565, "autotoken": 565, "val_dataset": [565, 593], "val_dataload": [565, 593], "worker": [565, 593], "ping_memori": [565, 593], "formul": 565, "effort": 565, "written": 565, "onnxrt_integ": [565, 602], "onnxrt_qlinear": [565, 602], "unsupport": 565, "image_tensor": [565, 602], "post_training_dynamic_qu": [565, 592, 600], "1000": [565, 602], "2000": 565, "sampling_s": [565, 602], "model_wis": [565, 602], "op_dict": 565, "op_wis": [565, 598, 602], "sigopt_api_token": [565, 596, 600], "sigopt_project_id": [565, 596, 600], "sigopt_experiment_nam": [565, 596, 600], "demo": 565, "600": [565, 603], "training_arg": 565, "emul": [565, 593], "trainer": [565, 576], "similar": [565, 592, 597, 600, 602], "maxim": [565, 590, 600], "still": [565, 593, 594], "pruning_func": 565, "num_train_epoch": [565, 590], "train_dataload": [565, 590, 593], "n_gpu": 565, "gradient_accumulation_step": 565, "clip_grad_norm_": 565, "max_grad_norm": 565, "rate": [565, 590, 593], "start_epoch": [565, 592, 602], "end_epoch": [565, 592, 602], "97": [565, 597, 603], "newli": [565, 590], "on_after_optimizer_step": [565, 590], "layer3": [565, 590], "layer2": [565, 590, 593], "lr_schedul": [565, 590], "weight_decai": [565, 602], "0004": 565, "nesterov": [565, 602], "randomresizedcrop": [565, 599], "totensor": [565, 599], "485": 565, "456": 565, "406": 565, "nepoch": 565, "cnt": 565, "loss_sum": 565, "iter_bar": 565, "tqdm": 565, "desc": 565, "teacher_logit": 565, "train_fun": 565, "training_func": 565, "recent": [565, 566], "growth": [565, 566, 590], "complex": [565, 566, 590], "significantli": [565, 566, 590, 600], "bandwidth": [565, 566], "exit_polici": [565, 602], "determinist": 565, "arbitrari": [565, 588], "reli": [565, 597], "prune_conf": 565, "quantization_aware_training_conf": 565, "aforement": 565, "inset": 565, "p_conf": [565, 588], "ssd_mobilenet_v1": 565, "benchmarkconf": 565, "half": [566, 576], "sixteen": 566, "launch": [566, 586], "3rd": [566, 591, 593, 594], "codenam": 566, "x86": 566, "avx512": [566, 593], "vcvtne2ps2bf16": 566, "vcvtneps2bf16": 566, "vdpbf16p": 566, "consequ": 566, "avx512_bf16": 566, "cuda": [566, 568, 570, 593], "persist": 567, "brought": [567, 569, 576, 593], "tf2": 567, "h5": 567, "hybridblock": 567, "0000": 567, "saved_result": 567, "simplifi": [568, 579, 585], "subsequ": [568, 585], "acquir": 568, "analysi": [568, 585, 596], "heurist": [568, 585], "rule": [568, 590], "great": 568, "facilit": 568, "autocast": 568, "simultan": [568, 588, 592], "my_model": 568, "no_grad": 568, "memory_format": 568, "112": [568, 603], "rand": [568, 597], "plugin": [568, 586], "aw": [568, 576, 591, 603], "sagemak": [568, 576], "inlin": [568, 573, 576], "neural_cod": [568, 570, 572, 573, 574, 576], "superbench": 568, "enjoi": [569, 573, 576], "caus": [569, 590], "rebuild": [569, 578, 582], "reload": [569, 586], "modern": 570, "democrat": [570, 591], "programm": [570, 576, 585], "nano_bf16_channels_last": 570, "resnet18": [570, 603], "nano_bf16_ipex_channels_last": 570, "nano_bf16_ipex": 570, "nano_bf16": 570, "nano_fp32_channels_last": 570, "nano_fp32_ipex_channels_last": 570, "nano_fp32_ipex": 570, "nano_gpu_to_cpu": 570, "nano_int8": 570, "nano_jit_bf16_channels_last": 570, "nano_jit_bf16_ipex_channels_last": 570, "nano_jit_bf16_ipex": 570, "nano_jit_bf16": 570, "nano_jit_fp32_channels_last": 570, "nano_jit_fp32_ipex_channels_last": 570, "nano_jit_fp32_ipex": 570, "nano_jit_fp32": 570, "nano_onnxruntime_fp32": 570, "nano_onnxruntime_int8_qlinear": 570, "openvino": 570, "nano_openvino_fp32": 570, "nano_openvino_int8": 570, "bc": [571, 579], "conda_prefix": 571, "echo": 571, "tradit": [571, 590], "libjemalloc": 571, "libiomp5": 571, "home": 571, "lib": 571, "ld_preload": 571, "malloc_conf": 571, "oversize_threshold": 571, "background_thread": 571, "metadata_thp": 571, "dirty_decay_m": 571, "9000000000": 571, "muzzy_decay_m": 571, "kmp_affin": 571, "kmp_blocktim": 571, "dnnl_primitive_cache_capac": 571, "cpufreq": 571, "scaling_governor": 571, "powersav": 571, "tee": 571, "pytorch_jit_script": [572, 575], "pytorch_channels_last": [572, 575], "run_bench": 572, "patch": [572, 585], "patch_path": 572, "your_patch_path": 572, "sweep": 572, "sweep_object": 572, "bench_config": 572, "bench_featur": 572, "sai": 573, "run_glu": [573, 574], "requisit": 573, "task_nam": [573, 574], "do_ev": [573, 574], "remain": 573, "itself": 573, "run_glue_optim": 573, "static_ipex": 573, "auto_qu": 574, "v4": [574, 603], "albert": [574, 603], "sst2": 574, "alexnet": [574, 603], "pytorch_amp": 575, "optimize_for_infer": 575, "pytorch_jit_trac": 575, "pytorch_jit_script_ofi": 575, "pytorch_jit_trace_ofi": 575, "torchdynamo": 575, "pytorch_torchdynamo_jit_script": 575, "pytorch_torchdynamo_jit_trac": 575, "pytorch_torchdynamo_jit_script_ofi": 575, "pytorch_torchdynamo_jit_trace_ofi": 575, "pytorch_inc_bf16": 575, "pytorch_inc_static_quant_fx": 575, "pytorch_inc_static_quant_ipex": 575, "pytorch_inc_dynamic_qu": 575, "pytorch_ipex_fp32": 575, "pytorch_ipex_bf16": 575, "pytorch_ipex_int8_static_qu": 575, "pytorch_ipex_int8_dynamic_qu": 575, "blade": 575, "disc": 575, "pytorch_aliblad": 575, "pytorch_lightning_bf16_cpu": 575, "tensorflow_amp": 575, "keras_amp": 575, "tensorflow_inc": 575, "keras_inc": 575, "onnx_inc_static_quant_qlinear": 575, "onnx_inc_static_quant_qdq": 575, "onnx_inc_dynamic_qu": 575, "optimum": [575, 576], "pytorch_inc_huggingface_optimum_stat": 575, "pytorch_inc_huggingface_optimum_dynam": 575, "intel_extension_for_transform": 575, "bigdl": [575, 576], "nano": [575, 576], "nano_": 575, "inc_auto": 575, "delight": 576, "announc": 576, "v": [576, 585, 600, 602], "500": 576, "innov": [576, 591, 601], "isa": 576, "xpu": 576, "delta": 576, "acc_delta": 576, "int8_acc": 576, "fp32_acc": 576, "ext": [578, 580, 582, 583, 584], "nodej": [578, 582], "jlpm": [578, 582], "pin": [578, 582], "yarn": [578, 582], "npm": [578, 579, 582], "lieu": [578, 582], "labextens": [578, 579, 582], "typescript": [578, 582], "watch": [578, 582], "termin": [578, 579, 582], "immedi": [578, 582, 590], "refresh": [578, 582], "wait": [578, 582, 585], "rebuilt": [578, 582], "symlink": [578, 582], "down": 579, "enter": [579, 585], "blank": 579, "cell": 579, "gain": [579, 588, 591], "mkl": 579, "jemalloc": 579, "pip3": 579, "headless": 579, "pyproject": [580, 583], "toml": [580, 583], "twine": [580, 583], "whl": [580, 583], "dist": [580, 583], "sdist": [580, 583], "bdist_wheel": [580, 583], "frontend": [580, 583], "login": [580, 583, 596], "cut": [580, 583], "fork": [580, 583], "admin_github_token": [580, 583], "pypi_token": [580, 583], "npm_token": [580, 583], "secret": [580, 583], "draft": [580, 583], "changelog": [580, 583, 584], "pkg": [580, 583], "bot": [580, 583], "pick": [580, 583, 586], "feedstock": [580, 583], "hatch": 583, "notabl": 584, "vscode": [584, 586], "daili": 585, "give": [585, 600], "advantag": [585, 590, 592, 600], "remot": 585, "market": 585, "upper": 585, "sidebar": 585, "hover": 585, "track": [585, 596], "argpars": 585, "diff": 585, "manifest": 586, "declar": 586, "palett": 586, "registercommand": 586, "amodio": 586, "tsl": 586, "matcher": 586, "dbaeumer": 586, "eslint": 586, "press": 586, "f5": 586, "ctrl": [586, 603], "cmd": 586, "hello": 586, "world": 586, "breakpoint": 586, "consol": 586, "relaunch": 586, "toolbar": 586, "node_modul": 586, "viewlet": 586, "dropdown": 586, "runner": 586, "startup": 586, "bundl": 586, "multi_object": 587, "benefit": [588, 590], "instanti": 588, "platinum": [589, 603], "8358": 589, "manufactur": 589, "m50cyp2sbstd": 589, "se5c620": 589, "86b": 589, "0005": 589, "2202160810": 589, "microcod": 589, "0xd000332": 589, "irq": 589, "60ghz": 589, "6chz": 589, "perf": 589, "512gb": 589, "16x32gb": 589, "ddr4": 589, "3200": 589, "mt": 589, "nic": 589, "1x": 589, "ethernet": 589, "100mb": 589, "i350": 589, "gigabit": 589, "drive": 589, "intel_ssdsckkb48": 589, "447": 589, "1g": 589, "factor": [589, 597, 603], "publicli": 589, "degre": 589, "mark": 589, "trademark": 589, "art": 590, "increasingli": 590, "crucial": 590, "salient": 590, "nonzero": 590, "irregular": 590, "anywher": 590, "2in4": 590, "amper": 590, "delet": 590, "due": [590, 593, 597, 598], "oc": 590, "kh": 590, "kw": 590, "shrink": 590, "examin": 590, "lowest": [590, 600], "fastform": 590, "formula": [590, 597], "emsp": 590, "partial": [590, 593], "downstream": 590, "co": 590, "discourag": 590, "push": [590, 597], "penal": 590, "parameter": 590, "exemplifi": 590, "complement": 590, "pruner1": 590, "pruner2": 590, "mention": 590, "readi": 590, "hesit": 590, "sst": [590, 603], "flan": 590, "t5": 590, "english": 590, "romanian": 590, "yolov5": 590, "signific": [590, 591, 593, 597], "reduct": [590, 602], "namhoon": 590, "lee": 590, "thalaiyasingam": 590, "ajanthan": 590, "philip": 590, "torr": 590, "2019": 590, "zafrir": 590, "ofir": 590, "ariel": 590, "larei": 590, "boudoukh": 590, "mosh": 590, "wasserblat": 590, "preprint": [590, 597], "2111": 590, "05754": 590, "2021": 590, "medium": 591, "mleffici": 591, "dec": 591, "wechat": 591, "deepen": 591, "foundat": 591, "intellig": 591, "vmware": 591, "virtual": 591, "applianc": 591, "bitnami": 591, "nov": 591, "sota": 591, "plug": 591, "twitter": 591, "linkedin": 591, "zone": 591, "land": 591, "gcp": 591, "pat": 591, "keynot": 591, "intelon": 591, "sep": 591, "chines": 591, "aug": 591, "purif": 591, "sacrif": 591, "jun": 591, "partner": 591, "apr": 591, "feb": 591, "joint": 591, "msft": 591, "bilibili": 591, "gestalt": 591, "ml": 591, "doubl": 591, "mlperf": [591, 603], "reconstruct": 591, "abound": 591, "lpot": [591, 595], "nextplatform": 591, "cern": 591, "gan": 591, "3dgan": 591, "iml": 591, "workshop": 591, "asplo": 591, "18": [591, 603], "highli": 591, "intelcaff": 591, "aris": 592, "tell": 592, "henc": 592, "onnxrt_qoper": 592, "quant_aware_train": 592, "weight_compress": [592, 602], "initial_spars": [592, 602], "prune_typ": [592, 602], "basic_magnitud": [592, 602], "update_frequ": 592, "prune_domain": 592, "tile_pattern_1x1": 592, "invent": 593, "int4": 593, "cost": 593, "theoret": 593, "affin": 593, "zeropoint": 593, "asymmetr": [593, 600], "255": [593, 597], "overflow": 593, "solv": [593, 595], "fbgemm": 593, "unseen": 593, "enough": 593, "peopl": 593, "mimic": 593, "fact": 593, "ultim": 593, "pain": 593, "lossi": 593, "understand": [593, 598, 601], "philosophi": 593, "neither": 593, "nor": 593, "val_load": 593, "top1": [593, 603], "avg": 593, "themselv": 593, "tensorrtexecutionprovid": 593, "cudaexecutionprovid": 593, "ON": 594, "forc": 594, "postposttrainingquantconfig": 594, "bf16wrapper": 594, "retrac": 594, "site": 595, "assist": 595, "comparison": [595, 598], "sed": 595, "your_script": 595, "backbon": 596, "interact": 596, "sigopt_experiment_id": 596, "nc": [596, 600], "certain": 596, "suffici": 596, "ordinari": 596, "capac": 596, "receiv": 596, "latenc": [596, 600], "draw": [596, 600], "mobilenet": [596, 603], "durat": 596, "8266": 596, "8372": 596, "2132": 596, "83": [596, 597, 603], "7495": 596, "8299": 596, "8294": 596, "85": [596, 597, 603], "0837": 596, "8291": 596, "4469": 596, "llm": 597, "gigant": 597, "systemat": 597, "outlier": 597, "quantif": 597, "difficulti": 597, "mathemat": 597, "allevi": 597, "coarsest": 597, "finer": [597, 600], "matric": 597, "similarli": 597, "finest": 597, "consumpt": 597, "why": [597, 598], "suppos": 597, "6839": 597, "4741": 597, "7451": 597, "9301": 597, "1742": 597, "6835": 597, "frac": 597, "q_min": 597, "q_max": 597, "clip": 597, "q_x": 597, "clamp_": 597, "round_": 597, "w_q": 597, "00296431384049356": 597, "59": [597, 603], "172": 597, "192": 597, "w_dq": 597, "1220": 597, "0500": 597, "1430": 597, "2570": 597, "1890": 597, "mseloss": 597, "1983354538679123": 597, "0020850980654358864": 597, "70": [597, 603], "6848": 597, "4743": 597, "7440": 597, "9308": 597, "1749": 597, "affect": 597, "quantize_per_channel": 597, "x_tmp": 597, "detach": 597, "keepdim": 597, "divid": [597, 600], "nbia": 597, "dequantize_per_channel": 597, "0029": [597, 603], "0036": 597, "162": [597, 603], "48": [597, 603], "72": [597, 603], "93": [597, 603], "207": [597, 603], "139": [597, 603], "0027": 597, "0017": 597, "66": [597, 603], "6837": 597, "4734": 597, "1751": 597, "6821": 597, "637690492221736e": 597, "cdot": 597, "quantize_per_tensor_absmax": 597, "n_bit": 597, "div_": 597, "mul_": 597, "0806": 597, "7589": 597, "6038": 597, "3815": 597, "5040": 597, "7174": 597, "5444": 597, "5826": 597, "7772": 597, "5555": 597, "3740": 597, "3253": 597, "0698": 597, "1381": 597, "5972": 597, "0086": 597, "0737": 597, "8298": 597, "6883": 597, "2991": 597, "1601": 597, "6506": 597, "8246": 597, "3924": 597, "3845": 597, "8768": 597, "w_scale": 597, "x_q": 597, "x_scale": 597, "84": [597, 603], "0059755356051027775": 597, "89": [597, 603], "119": [597, 603], "57": [597, 603], "91": [597, 603], "006533813662827015": 597, "y_q": 597, "17509": 597, "7608": 597, "4055": 597, "16599": 597, "21020": 597, "10016": 597, "9860": 597, "22444": 597, "y_dq": 597, "6836": 597, "2970": 597, "1583": 597, "6481": 597, "8207": 597, "3911": 597, "3850": 597, "8763": 597, "prove": 597, "simplic": 597, "middl": 597, "denot": 597, "fp1": 597, "fp2": 597, "subsect": [597, 602], "explain": 597, "suppress": 597, "straightforward": 597, "intuit": 597, "x1": [597, 600], "x2": [597, 600], "larger": 597, "herebi": 597, "sq": 597, "torchscript": 597, "lambada": 597, "sweet": 597, "spot": 597, "region": 597, "bigscienc": 597, "560m": 597, "65": [597, 603], "63": [597, 603], "44": [597, 603], "76": [597, 603], "1b7": 597, "71": [597, 603], "43": [597, 603], "67": [597, 603], "78": [597, 599, 603], "56": [597, 603], "58": [597, 603], "55": [597, 603], "3b": 597, "73": [597, 603], "69": [597, 603], "99": [597, 603], "74": [597, 603], "7b1": 597, "77": [597, 603], "75": [597, 603], "46": [597, 603], "82": [597, 603], "facebook": 597, "125m": 597, "94": [597, 599, 603], "7b": 597, "79": [597, 598, 603], "60": [597, 603], "25": [597, 603], "81": [597, 603], "26": [597, 603], "39": [597, 603], "68": [597, 599, 603], "eleutherai": 597, "6b": 597, "96": [597, 603], "jason": 597, "wei": 597, "emerg": 597, "transact": 597, "yvinec": 597, "edouard": 597, "proceed": 597, "cvf": 597, "winter": 597, "xiui": 597, "2209": 597, "13325": 597, "xiao": 597, "guangxuan": 597, "2211": 597, "10438": 597, "discov": 598, "valuabl": 598, "instrument": 598, "writer": 598, "_pre_eval_hook": 598, "_post_eval_hook": 598, "submodul": 598, "whitelist": 598, "_recordingobserv": 598, "output_tensors_dict": 598, "current_it": 598, "get_tensor_valu": 598, "_observer_forward_hook": 598, "activation_post_process": 598, "_add_observer_": 598, "named_children": 598, "leaf": 598, "add_modul": 598, "register_forward_hook": 598, "dump_tim": 598, "summarywrit": 598, "_acc": 598, "tune_": 598, "add_graph": 598, "get_observer_dict": 598, "observer_dict": 598, "is_quant": 598, "add_histogram": 598, "bind_al": 598, "logdir_spec": 598, "tune_0_acc0": 598, "tune_1": 598, "tune_1_acc0": 598, "four": 598, "baseline_acc_0": 598, "776": 598, "tune_1_acc_0": 598, "095": 598, "runs_v3": 598, "image_recognit": 598, "run_tuning_dump_tensor": 598, "sh": 598, "inceptionv3": 598, "v0": 598, "cg": 598, "conv0": 598, "bash": 598, "run_tun": 598, "topologi": 598, "inception_v3": 598, "dataset_loc": 598, "inceptionv3_fp32_pretrained_model": 598, "nc_inceptionv3": 598, "inceptionv3_dump_tensor": 598, "poor": 598, "eightbit": 598, "disappear": 598, "centercrop": 599, "randomcrop": 599, "cropres": 599, "decodeimag": 599, "jpeg": 599, "encodejp": 599, "alignimagechannel": 599, "116": 599, "103": 599, "017": 599, "bilinearimagenet": [599, 602], "topilimag": 599, "padding_mod": 599, "border": 599, "pixel": 599, "colorjitt": 599, "bright": 599, "satur": 599, "hue": 599, "jitter": 599, "tondarrai": 599, "quickli": [600, 601], "travers": 600, "human": 600, "concret": 600, "insight": 600, "aggress": 600, "classic": 600, "six": 600, "At": 600, "ii": 600, "iii": 600, "post_training_auto_qu": 600, "iv": 600, "vi": 600, "increment": 600, "primari": 600, "highest": 600, "spent": 600, "hawq_v2_loss": 600, "model_loss": 600, "black": 600, "come": 600, "discret": 600, "compli": 600, "posterior": 600, "focu": 600, "short": 600, "never": 600, "loglevel": 600, "endlessli": 600, "perspect": 600, "smbo": 600, "trial": 600, "appl": 600, "surrog": 600, "repeat": 600, "quantil": 600, "densiti": 600, "parzen": 600, "greatest": 600, "dai": 600, "next_tune_cfg": 600, "overridden": 600, "cluster": 600, "seamlessli": 600, "mpi": 600, "replic": 600, "replica": 600, "fed": 600, "handler": 600, "synchron": 600, "slave": 600, "abctunestrategi": 600, "familiar": 601, "mobilenet_v1": 602, "hyper": 602, "40": [602, 603], "06": [602, 603], "beta_1": 602, "beta_2": 602, "999": [602, 603], "epsilon": 602, "sparsecategoricalcrossentropi": 602, "sum_over_batch_s": 602, "from_logit": 602, "54": [602, 603], "19": [602, 603], "overal": 602, "8380": 603, "visit": 603, "performancethroughput": 603, "sec": 603, "86": 603, "00": 603, "170": 603, "82x": 603, "92": 603, "85x": 603, "61": 603, "83x": 603, "densenet": 603, "121": 603, "274": 603, "148": 603, "161": 603, "132": 603, "35": 603, "39x": 603, "169": 603, "38": 603, "36": 603, "191": 603, "118": 603, "61x": 603, "cnn": 603, "incept": 603, "37": 603, "84x": 603, "resnet101": 603, "21x": 603, "70x": 603, "51": 603, "14x": 603, "955": 603, "328": 603, "91x": 603, "709": 603, "282": 603, "51x": 603, "v3": 603, "337": 603, "160": 603, "11x": 603, "438": 603, "204": 603, "223": 603, "105": 603, "12x": 603, "10x": 603, "47": 603, "1347": 603, "439": 603, "07x": 603, "1192": 603, "492": 603, "42x": 603, "412": 603, "376": 603, "662": 603, "397": 603, "66x": 603, "299": 603, "23": 603, "154": 603, "93x": 603, "476": 603, "227": 603, "fashion": 603, "2734": 603, "1299": 603, "498": 603, "178": 603, "79x": 603, "427": 603, "173": 603, "47x": 603, "resnetv2": 603, "194": 603, "146": 603, "33x": 603, "237": 603, "187": 603, "27x": 603, "152": 603, "155": 603, "38x": 603, "302": 603, "215": 603, "40x": 603, "346": 603, "312": 603, "277": 603, "60x": 603, "273": 603, "31x": 603, "18x": 603, "53x": 603, "24x": 603, "vgg16": 603, "219": 603, "vgg19": 603, "193": 603, "11506": 603, "9665": 603, "19x": 603, "xception": 603, "262": 603, "137": 603, "barthez": 603, "143": 603, "02x": 603, "20x": 603, "209": 603, "08x": 603, "221": 603, "stsb": 603, "218": 603, "16x": 603, "62": 603, "57x": 603, "55x": 603, "56x": 603, "53": 603, "89x": 603, "blendcnn": 603, "4885": 603, "3715": 603, "camembert": 603, "206": 603, "09x": 603, "deberta": 603, "125": 603, "366": 603, "197": 603, "399": 603, "flaubert": 603, "592": 603, "385": 603, "54x": 603, "wikitext": 603, "hubert": 603, "446": 603, "181": 603, "46x": 603, "layoutlm": 603, "longform": 603, "49": 603, "mbart": 603, "625": 603, "451": 603, "lvwerra": 603, "pegasu": 603, "samsum": 603, "peleenet": 603, "402": 603, "29x": 603, "pokemon": 603, "275": 603, "334": 603, "48x": 603, "reform": 603, "crime": 603, "punish": 603, "153": 603, "06x": 603, "657": 603, "327": 603, "01x": 603, "812": 603, "344": 603, "36x": 603, "360": 603, "23x": 603, "resnext101": 603, "32x8d": 603, "182": 603, "squeezebert": 603, "195": 603, "150": 603, "30x": 603, "75x": 603, "transfo": 603, "xl": 603, "41x": 603, "wave2vec2": 603, "22x": 603, "102": 603, "00x": 603, "115": 603, "17x": 603, "yolo": 603, "232": 603, "28x": 603, "664": 603, "329": 603, "832": 603, "338": 603, "433": 603, "164": 603, "63x": 603, "836": 603, "1396": 603, "463": 603, "90x": 603, "159": 603, "32x": 603, "968": 603, "473": 603, "05x": 603, "958": 603, "477": 603, "arcfac": 603, "126": 603, "78x": 603, "298": 603, "124": 603, "624": 603, "254": 603, "45x": 603, "caffenet": 603, "1432": 603, "540": 603, "65x": 603, "1460": 603, "357": 603, "265": 603, "35x": 603, "86x": 603, "524": 603, "duc": 603, "efficientnet": 603, "1211": 603, "758": 603, "856": 603, "762": 603, "emot": 603, "ferplu": 603, "925": 603, "694": 603, "fcn": 603, "25x": 603, "googlenet": 603, "771": 603, "571": 603, "763": 603, "579": 603, "hf": 603, "156": 603, "multilingu": 603, "99x": 603, "199": 603, "104": 603, "73x": 603, "449": 603, "74x": 603, "l12": 603, "h384": 603, "466": 603, "247": 603, "88x": 603, "l6": 603, "523": 603, "354": 603, "183": 603, "107": 603, "spanbert": 603, "208": 603, "795": 603, "780": 603, "591": 603, "515": 603, "15x": 603, "2370": 603, "1526": 603, "2216": 603, "1506": 603, "2078": 603, "1028": 603, "1762": 603, "76x": 603, "mobilenetv2": 603, "2615": 603, "1645": 603, "59x": 603, "2461": 603, "1674": 603, "766": 603, "431": 603, "77x": 603, "575": 603, "430": 603, "34x": 603, "747": 603, "564": 603, "594": 603, "590": 603, "643": 603, "253": 603, "shufflenet": 603, "2354": 603, "1461": 603, "1850": 603, "1368": 603, "squeezenet": 603, "2484": 603, "1912": 603, "2526": 603, "1911": 603, "710": 603, "549": 603, "622": 603, "497": 603, "652": 603, "507": 603, "573": 603, "470": 603, "527": 603, "396": 603, "68x": 603, "tini": 603, "647": 603, "514": 603, "26x": 603, "ultrafac": 603, "314": 603, "50x": 603, "304": 603, "316": 603, "315": 603, "zfnet": 603, "462": 603, "268": 603, "72x": 603, "465": 603, "62x": 603, "436": 603, "270": 603, "429": 603, "92x": 603, "94x": 603, "331": 603, "242": 603, "37x": 603, "98x": 603, "taskdataset": 603, "accuracyspars": 603, "ratiospars": 603, "commentsbalancedor": 603, "unbalanc": 603, "mini": 603, "answeringsquad": 603, "87f1": 603, "momentumunbalanc": 603, "momentumbalanc": 603, "90f1": 603, "59f1": 603, "23f1": 603, "classificationmrpc": 603, "52f1": 603, "26f1": 603, "classificationsst": 603, "61accuraci": 603, "recognitionimagenet": 603, "95top1": 603, "2x1": 603, "v5s6": 603, "detectioncoco": 603, "ap0": 603, "404": 603, "6ap0": 603, "393": 603, "584": 603, "34f1": 603, "lassounbalanc": 603, "classificationmnli": 603, "mm": 603, "allbalanc": 603, "32accuraci": 603, "sensitivitybalanc": 603, "classificationqqp": 603, "classificationqnli": 603, "54accuraci": 603, "em": 603, "7965": 603, "wideresnet40": 603, "9522": 603, "8178": 603, "0213": 603, "8235": 603, "027": 603, "5494": 603, "7153": 603, "5540": 603, "0046": 603, "5523": 603, "vgg": 603, "bn": 603, "7022": 603, "7415": 603, "7025": 603, "0003": 603, "wip": 603, "6739": 603, "7399": 603, "6845": 603, "0106": 603, "7034": 603, "8382": 603, "bilstm": 603, "8314": 603, "9403": 603, "9048": 603, "0734": 603, "7323": 603, "8256": 603, "8084": 603, "8814": 603, "7442": 603, "8371": 603, "0119": 603, "0115": 603, "tinybert": 603, "8018": 603, "8044": 603, "8363": 603, "8411": 603, "8025": 603, "8074": 603, "0007": 603, "0030": 603, "8626": 603, "8213": 603, "9091": 603, "8782": 603, "8684": 603, "8259": 603, "0058": 603, "distilroberta": 603, "6057": 603, "6455": 603, "6187": 603, "0130": 603, "c6i": 603, "2xlarg": 603, "c6a": 603, "c6g": 603, "a100cuda": 603, "executionprovid": 603}, "objects": {"": [[0, 0, 0, "-", "644ec953a7dc_pruning_support"], [1, 0, 0, "-", "6ece06672ed3_v1_14"], [2, 0, 0, "-", "6f0d0f71d92e_v1_13"], [3, 0, 0, "-", "9e89549a08c8_v1_11"], [4, 0, 0, "-", "block_mask"], [5, 0, 0, "-", "env"], [291, 0, 0, "-", "neural_compressor"]], "6ece06672ed3_v1_14": [[1, 1, 1, "ece06672ed3_v1_14.update_dataloaders", "update_dataloaders"], [1, 1, 1, "ece06672ed3_v1_14.update_transformations", "update_transformations"]], "env": [[5, 1, 1, "", "run_migrations_offline"], [5, 1, 1, "", "run_migrations_online"]], "neural_compressor": [[7, 0, 0, "-", "adaptor"], [153, 0, 0, "-", "algorithm"], [156, 0, 0, "-", "benchmark"], [160, 0, 0, "-", "compression"], [173, 0, 0, "-", "conf"], [175, 0, 0, "-", "config"], [176, 0, 0, "-", "contrib"], [201, 0, 0, "-", "data"], [253, 0, 0, "-", "experimental"], [298, 0, 0, "-", "metric"], [300, 0, 0, "-", "mix_precision"], [302, 0, 0, "-", "model"], [310, 0, 0, "-", "objective"], [311, 0, 0, "-", "quantization"], [319, 0, 0, "-", "strategy"], [331, 0, 0, "-", "template"], [332, 0, 0, "-", "training"], [336, 0, 0, "-", "utils"], [478, 0, 0, "-", "ux"], [524, 0, 0, "-", "version"]], "neural_compressor.adaptor": [[6, 0, 0, "-", "adaptor"], [8, 0, 0, "-", "keras"], [12, 0, 0, "-", "keras_utils"], [15, 0, 0, "-", "mxnet"], [16, 0, 0, "-", "mxnet_utils"], [18, 0, 0, "-", "onnxrt"], [20, 0, 0, "-", "ox_utils"], [43, 0, 0, "-", "pytorch"], [44, 0, 0, "-", "query"], [45, 0, 0, "-", "tensorflow"], [109, 0, 0, "-", "tf_utils"], [147, 0, 0, "-", "torch_utils"]], "neural_compressor.adaptor.adaptor": [[6, 2, 1, "", "Adaptor"], [6, 1, 1, "", "adaptor_registry"]], "neural_compressor.adaptor.keras": [[8, 2, 1, "", "KerasAdaptor"]], "neural_compressor.adaptor.keras_utils": [[9, 0, 0, "-", "conv2d"], [10, 0, 0, "-", "dense"], [11, 0, 0, "-", "depthwise_conv2d"], [13, 0, 0, "-", "quantizer"], [14, 0, 0, "-", "separable_conv2d"]], "neural_compressor.adaptor.mxnet": [[15, 2, 1, "", "MxNetAdaptor"]], "neural_compressor.adaptor.mxnet_utils": [[17, 0, 0, "-", "util"]], "neural_compressor.adaptor.mxnet_utils.util": [[17, 2, 1, "", "CalibCollector"], [17, 2, 1, "", "CalibData"], [17, 2, 1, "", "CollectorBase"], [17, 2, 1, "", "DataIterLoader"], [17, 2, 1, "", "DataLoaderWrap"], [17, 2, 1, "", "NameCollector"], [17, 2, 1, "", "OpType"], [17, 2, 1, "", "TensorCollector"], [17, 1, 1, "", "amp_convert"], [17, 1, 1, "", "calib_model"], [17, 1, 1, "", "check_mx_version"], [17, 1, 1, "", "combine_capabilities"], [17, 1, 1, "", "create_data_example"], [17, 1, 1, "", "distribute_calib_tensors"], [17, 1, 1, "", "ensure_list"], [17, 1, 1, "", "fuse"], [17, 1, 1, "", "get_framework_name"], [17, 1, 1, "", "is_model_quantized"], [17, 1, 1, "", "isiterable"], [17, 1, 1, "", "make_module"], [17, 1, 1, "", "make_nc_model"], [17, 1, 1, "", "make_symbol_block"], [17, 1, 1, "", "ndarray_to_device"], [17, 1, 1, "", "parse_tune_config"], [17, 1, 1, "", "prepare_dataloader"], [17, 1, 1, "", "prepare_model"], [17, 1, 1, "", "prepare_model_data"], [17, 1, 1, "", "quantize_sym_model"], [17, 1, 1, "", "query_quantizable_nodes"], [17, 1, 1, "", "run_forward"]], "neural_compressor.adaptor.onnxrt": [[18, 2, 1, "", "ONNXRT_IntegerOpsAdaptor"], [18, 2, 1, "", "ONNXRT_QDQAdaptor"], [18, 2, 1, "", "ONNXRT_QLinearOpsAdaptor"], [18, 2, 1, "", "ONNXRUNTIMEAdaptor"]], "neural_compressor.adaptor.ox_utils": [[19, 0, 0, "-", "calibration"], [32, 0, 0, "-", "operators"], [41, 0, 0, "-", "quantizer"], [42, 0, 0, "-", "util"]], "neural_compressor.adaptor.ox_utils.calibration": [[19, 2, 1, "", "ONNXRTAugment"]], "neural_compressor.adaptor.ox_utils.operators": [[21, 0, 0, "-", "activation"], [22, 0, 0, "-", "argmax"], [23, 0, 0, "-", "attention"], [24, 0, 0, "-", "binary_op"], [25, 0, 0, "-", "concat"], [26, 0, 0, "-", "conv"], [27, 0, 0, "-", "direct_q8"], [28, 0, 0, "-", "embed_layernorm"], [29, 0, 0, "-", "gather"], [30, 0, 0, "-", "gavgpool"], [31, 0, 0, "-", "gemm"], [33, 0, 0, "-", "lstm"], [34, 0, 0, "-", "matmul"], [35, 0, 0, "-", "maxpool"], [36, 0, 0, "-", "ops"], [37, 0, 0, "-", "pad"], [38, 0, 0, "-", "pooling"], [39, 0, 0, "-", "resize"], [40, 0, 0, "-", "split"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[21, 2, 1, "", "ActivationOperator"], [21, 2, 1, "", "QActivationOperator"], [21, 2, 1, "", "RemovableActivationOperator"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[22, 2, 1, "", "ArgMaxOperator"], [22, 2, 1, "", "QArgMaxOperator"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[23, 2, 1, "", "AttentionOperator"], [23, 2, 1, "", "QAttentionOperator"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[24, 2, 1, "", "BinaryOperator"], [24, 2, 1, "", "QBinaryOperator"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[25, 2, 1, "", "ConcatOperator"], [25, 2, 1, "", "QConcatOperator"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[26, 2, 1, "", "ConvOperator"], [26, 2, 1, "", "QConvOperator"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[27, 2, 1, "", "Direct8BitOperator"], [27, 2, 1, "", "QDirectOperator"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[28, 2, 1, "", "EmbedLayerNormalizationOperator"], [28, 2, 1, "", "QEmbedLayerNormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[29, 2, 1, "", "GatherOperator"], [29, 2, 1, "", "QGatherOperator"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[30, 2, 1, "", "GlobalAveragePoolOperator"], [30, 2, 1, "", "QGlobalAveragePoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[31, 2, 1, "", "GemmOperator"], [31, 2, 1, "", "QGemmOperator"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[33, 2, 1, "", "LSTMOperator"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[34, 2, 1, "", "MatMulOperator"], [34, 2, 1, "", "QMatMulOperator"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[35, 2, 1, "", "MaxPoolOperator"], [35, 2, 1, "", "QMaxPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[36, 2, 1, "", "Operator"], [36, 2, 1, "", "QOperator"], [36, 1, 1, "", "op_registry"], [36, 1, 1, "", "qop_registry"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[37, 2, 1, "", "PadOperator"], [37, 2, 1, "", "QPadOperator"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[38, 2, 1, "", "PoolOperator"], [38, 2, 1, "", "QPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[39, 2, 1, "", "QResizeOperator"], [39, 2, 1, "", "ResizeOperator"]], "neural_compressor.adaptor.ox_utils.operators.split": [[40, 2, 1, "", "QSplitOperator"], [40, 2, 1, "", "SplitOperator"]], "neural_compressor.adaptor.ox_utils.quantizer": [[41, 2, 1, "", "Quantizer"]], "neural_compressor.adaptor.ox_utils.util": [[42, 2, 1, "", "QuantFormat"], [42, 2, 1, "", "QuantType"], [42, 2, 1, "", "QuantizationMode"], [42, 2, 1, "", "QuantizedInitializer"], [42, 2, 1, "", "QuantizedValue"], [42, 2, 1, "", "QuantizedValueType"], [42, 2, 1, "", "ValueInfo"], [42, 1, 1, "", "adjust_weights_per_input"], [42, 1, 1, "", "adjust_weights_per_op"], [42, 1, 1, "", "attribute_to_kwarg"], [42, 1, 1, "", "calculate_scale_zp"], [42, 1, 1, "", "cast_tensor"], [42, 1, 1, "", "collate_preds"], [42, 1, 1, "", "dequantize_data"], [42, 1, 1, "", "dequantize_data_with_scale_zero"], [42, 1, 1, "", "dtype_to_name"], [42, 1, 1, "", "find_by_name"], [42, 1, 1, "", "float_to_bfloat16"], [42, 1, 1, "", "float_to_float16"], [42, 1, 1, "", "get_smooth_scales_per_input"], [42, 1, 1, "", "get_smooth_scales_per_op"], [42, 1, 1, "", "insert_smooth_mul_op_per_input"], [42, 1, 1, "", "insert_smooth_mul_op_per_op"], [42, 1, 1, "", "is_B_transposed"], [42, 1, 1, "", "make_dquant_node"], [42, 1, 1, "", "make_quant_node"], [42, 1, 1, "", "quantize_data"], [42, 1, 1, "", "quantize_data_per_channel"], [42, 1, 1, "", "quantize_data_with_scale_zero"], [42, 1, 1, "", "quantize_nparray"], [42, 1, 1, "", "remove_init_from_model_input"], [42, 1, 1, "", "split_shared_bias"], [42, 1, 1, "", "trt_env_setup"]], "neural_compressor.adaptor.pytorch": [[43, 2, 1, "", "PyTorchAdaptor"], [43, 2, 1, "", "PyTorch_FXAdaptor"], [43, 2, 1, "", "PyTorch_IPEXAdaptor"], [43, 2, 1, "", "TemplateAdaptor"], [43, 1, 1, "", "get_ops_recursively"]], "neural_compressor.adaptor.query": [[44, 2, 1, "", "QueryBackendCapability"]], "neural_compressor.adaptor.tensorflow": [[45, 2, 1, "", "TensorFlowAdaptor"], [45, 2, 1, "", "TensorflowQuery"], [45, 2, 1, "", "Tensorflow_ITEXAdaptor"]], "neural_compressor.adaptor.tf_utils": [[46, 0, 0, "-", "graph_converter"], [47, 0, 0, "-", "graph_converter_without_calib"], [85, 0, 0, "-", "graph_rewriter"], [108, 0, 0, "-", "graph_util"], [110, 0, 0, "-", "quantize_graph"], [137, 0, 0, "-", "quantize_graph_common"], [138, 0, 0, "-", "tf2onnx_converter"], [141, 0, 0, "-", "transform_graph"], [144, 0, 0, "-", "util"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[46, 2, 1, "", "GraphConverter"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[47, 2, 1, "", "GraphConverterWithoutCalib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[49, 0, 0, "-", "bf16"], [74, 0, 0, "-", "generic"], [84, 0, 0, "-", "graph_base"], [93, 0, 0, "-", "int8"], [99, 0, 0, "-", "onnx"], [104, 0, 0, "-", "qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[48, 0, 0, "-", "bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[48, 2, 1, "", "BF16Convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[50, 0, 0, "-", "convert_add_to_biasadd"], [51, 0, 0, "-", "convert_layout"], [52, 0, 0, "-", "convert_leakyrelu"], [53, 0, 0, "-", "convert_nan_to_random"], [54, 0, 0, "-", "convert_placeholder_to_const"], [55, 0, 0, "-", "dequantize_cast_optimizer"], [56, 0, 0, "-", "dilated_contraction"], [57, 0, 0, "-", "dummy_biasadd"], [58, 0, 0, "-", "expanddims_optimizer"], [59, 0, 0, "-", "fetch_weight_from_reshape"], [60, 0, 0, "-", "fold_batch_norm"], [61, 0, 0, "-", "fold_constant"], [62, 0, 0, "-", "fuse_biasadd_add"], [63, 0, 0, "-", "fuse_column_wise_mul"], [64, 0, 0, "-", "fuse_conv_with_math"], [65, 0, 0, "-", "fuse_decomposed_bn"], [66, 0, 0, "-", "fuse_decomposed_in"], [67, 0, 0, "-", "fuse_gelu"], [68, 0, 0, "-", "fuse_layer_norm"], [69, 0, 0, "-", "fuse_pad_with_conv"], [70, 0, 0, "-", "fuse_pad_with_fp32_conv"], [71, 0, 0, "-", "fuse_reshape_transpose"], [72, 0, 0, "-", "graph_cse_optimizer"], [73, 0, 0, "-", "grappler_pass"], [75, 0, 0, "-", "insert_print_node"], [76, 0, 0, "-", "move_squeeze_after_relu"], [77, 0, 0, "-", "pre_optimize"], [78, 0, 0, "-", "remove_training_nodes"], [79, 0, 0, "-", "rename_batch_norm"], [80, 0, 0, "-", "split_shared_input"], [81, 0, 0, "-", "strip_equivalent_nodes"], [82, 0, 0, "-", "strip_unused_nodes"], [83, 0, 0, "-", "switch_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[50, 2, 1, "", "ConvertAddToBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[51, 2, 1, "", "ConvertLayoutOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[52, 2, 1, "", "ConvertLeakyReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[53, 2, 1, "", "ConvertNanToRandom"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[54, 2, 1, "", "ConvertPlaceholderToConst"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[55, 2, 1, "", "DequantizeCastOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[56, 2, 1, "", "DilatedContraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[57, 2, 1, "", "InjectDummyBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[58, 2, 1, "", "ExpandDimsOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[59, 2, 1, "", "FetchWeightFromReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[60, 2, 1, "", "FoldBatchNormNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[61, 2, 1, "", "GraphFoldConstantOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[62, 2, 1, "", "FuseBiasAddAndAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[63, 2, 1, "", "FuseColumnWiseMulOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[64, 2, 1, "", "FuseConvWithMathOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[65, 2, 1, "", "FuseDecomposedBNOptimizer"], [65, 1, 1, "", "bypass_reshape"], [65, 1, 1, "", "get_const_dim_count"], [65, 1, 1, "", "node_from_map"], [65, 1, 1, "", "node_name_from_input"], [65, 1, 1, "", "valid_reshape_inputs"], [65, 1, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[66, 2, 1, "", "FuseDecomposedINOptimizer"], [66, 1, 1, "", "bypass_reshape"], [66, 1, 1, "", "get_const_dim_count"], [66, 1, 1, "", "node_from_map"], [66, 1, 1, "", "node_name_from_input"], [66, 1, 1, "", "valid_reshape_inputs"], [66, 1, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[67, 2, 1, "", "FuseGeluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[68, 2, 1, "", "FuseLayerNormOptimizer"], [68, 1, 1, "", "node_from_map"], [68, 1, 1, "", "node_name_from_input"], [68, 1, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[69, 2, 1, "", "FusePadWithConv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[70, 2, 1, "", "FusePadWithFP32Conv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[71, 2, 1, "", "FuseTransposeReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[72, 2, 1, "", "GraphCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[73, 2, 1, "", "GrapplerOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[75, 2, 1, "", "InsertPrintMinMaxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[76, 2, 1, "", "MoveSqueezeAfterReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[77, 2, 1, "", "PreOptimization"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[78, 2, 1, "", "RemoveTrainingNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[79, 2, 1, "", "RenameBatchNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[80, 2, 1, "", "SplitSharedInputOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[81, 2, 1, "", "StripEquivalentNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[82, 2, 1, "", "StripUnusedNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[83, 2, 1, "", "SwitchOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[84, 2, 1, "", "GraphRewriterBase"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[86, 0, 0, "-", "freeze_fake_quant"], [87, 0, 0, "-", "freeze_value"], [88, 0, 0, "-", "freeze_value_without_calib"], [89, 0, 0, "-", "fuse_conv_redundant_dequantize"], [90, 0, 0, "-", "fuse_conv_requantize"], [91, 0, 0, "-", "fuse_matmul_redundant_dequantize"], [92, 0, 0, "-", "fuse_matmul_requantize"], [94, 0, 0, "-", "meta_op_optimizer"], [95, 0, 0, "-", "post_hostconst_converter"], [96, 0, 0, "-", "post_quantized_op_cse"], [97, 0, 0, "-", "rnn_convert"], [98, 0, 0, "-", "scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[86, 2, 1, "", "FreezeFakeQuantOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[87, 2, 1, "", "FreezeValueTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[88, 2, 1, "", "FreezeValueWithoutCalibTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[89, 2, 1, "", "FuseConvRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[90, 2, 1, "", "FuseConvRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[91, 2, 1, "", "FuseMatMulRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[92, 2, 1, "", "FuseMatMulRequantizeDequantizeNewAPITransformer"], [92, 2, 1, "", "FuseMatMulRequantizeDequantizeTransformer"], [92, 2, 1, "", "FuseMatMulRequantizeNewAPITransformer"], [92, 2, 1, "", "FuseMatMulRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[94, 2, 1, "", "MetaInfoChangingMemOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[95, 2, 1, "", "PostHostConstConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[96, 2, 1, "", "PostCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[97, 2, 1, "", "QuantizedRNNConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[98, 2, 1, "", "ScaleProPagationTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[100, 0, 0, "-", "onnx_graph"], [101, 0, 0, "-", "onnx_node"], [102, 0, 0, "-", "onnx_schema"], [103, 0, 0, "-", "tf2onnx_utils"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[100, 2, 1, "", "OnnxGraph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[101, 2, 1, "", "OnnxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[102, 2, 1, "", "OnnxOpSchema"], [102, 1, 1, "", "get_max_supported_opset_version"], [102, 1, 1, "", "get_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[103, 2, 1, "", "SeqType"], [103, 1, 1, "", "add_port_to_name"], [103, 1, 1, "", "are_shapes_equal"], [103, 1, 1, "", "assert_error"], [103, 1, 1, "", "compute_const_folding_using_tf"], [103, 1, 1, "", "convert_tensorflow_tensor_to_onnx"], [103, 1, 1, "", "find_opset"], [103, 1, 1, "", "get_index_from_strided_slice_of_shape"], [103, 1, 1, "", "get_subgraphs_from_onnx"], [103, 1, 1, "", "get_tensorflow_node_attr"], [103, 1, 1, "", "get_tensorflow_node_shape_attr"], [103, 1, 1, "", "get_tensorflow_tensor_data"], [103, 1, 1, "", "get_tensorflow_tensor_shape"], [103, 1, 1, "", "infer_onnx_shape_dtype"], [103, 1, 1, "", "initialize_name_counter"], [103, 1, 1, "", "is_list_or_tuple"], [103, 1, 1, "", "is_onnx_domain"], [103, 1, 1, "", "make_onnx_inputs_outputs"], [103, 1, 1, "", "make_onnx_shape"], [103, 1, 1, "", "map_numpy_to_onnx_dtype"], [103, 1, 1, "", "map_onnx_to_numpy_type"], [103, 1, 1, "", "map_tensorflow_dtype"], [103, 1, 1, "", "read_tensorflow_node_attrs"], [103, 1, 1, "", "save_protobuf"], [103, 1, 1, "", "set_name"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[105, 0, 0, "-", "insert_qdq_pattern"], [106, 0, 0, "-", "merge_duplicated_qdq"], [107, 0, 0, "-", "share_qdq_y_pattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[105, 2, 1, "", "GenerateGraphWithQDQPattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[106, 2, 1, "", "MergeDuplicatedQDQOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[107, 2, 1, "", "ShareQDQForItexYPatternOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_util": [[108, 2, 1, "", "GraphAnalyzer"], [108, 2, 1, "", "GraphRewriterHelper"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[112, 0, 0, "-", "qat"], [128, 0, 0, "-", "qdq"], [130, 0, 0, "-", "quantize_graph_base"], [131, 0, 0, "-", "quantize_graph_bn"], [132, 0, 0, "-", "quantize_graph_concatv2"], [133, 0, 0, "-", "quantize_graph_conv"], [134, 0, 0, "-", "quantize_graph_for_intel_cpu"], [135, 0, 0, "-", "quantize_graph_matmul"], [136, 0, 0, "-", "quantize_graph_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[111, 0, 0, "-", "fake_quantize"], [113, 0, 0, "-", "quantize_config"], [114, 0, 0, "-", "quantize_helper"], [115, 0, 0, "-", "quantize_layers"], [120, 0, 0, "-", "quantize_wrapper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[111, 2, 1, "", "FakeQuantize"], [111, 2, 1, "", "FakeQuantizeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[113, 2, 1, "", "QuantizeConfig"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[114, 1, 1, "", "init_quantize_config"], [114, 1, 1, "", "qat_clone_function"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[116, 0, 0, "-", "optimize_layer"], [117, 0, 0, "-", "quantize_layer_add"], [118, 0, 0, "-", "quantize_layer_base"], [119, 0, 0, "-", "quantize_layer_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[116, 1, 1, "", "config_quantizable_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[117, 2, 1, "", "QuantizeLayerAdd"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[118, 2, 1, "", "QuantizeLayerBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[119, 2, 1, "", "QuantizeLayerBatchNormalization"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[120, 2, 1, "", "QuantizeWrapper"], [120, 2, 1, "", "QuantizeWrapperBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[121, 0, 0, "-", "fuse_qdq_bn"], [122, 0, 0, "-", "fuse_qdq_concatv2"], [123, 0, 0, "-", "fuse_qdq_conv"], [124, 0, 0, "-", "fuse_qdq_deconv"], [125, 0, 0, "-", "fuse_qdq_in"], [126, 0, 0, "-", "fuse_qdq_matmul"], [127, 0, 0, "-", "fuse_qdq_pooling"], [129, 0, 0, "-", "optimize_qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[121, 2, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[122, 2, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[123, 2, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[124, 2, 1, "", "FuseNodeStartWithDeconv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[125, 2, 1, "", "FuseNodeStartWithFusedInstanceNorm"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[126, 2, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[127, 2, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[129, 2, 1, "", "OptimizeQDQGraph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[130, 2, 1, "", "QuantizeGraphBase"], [130, 2, 1, "", "QuantizeNodeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[131, 2, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[132, 2, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[133, 2, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[134, 2, 1, "", "QuantizeGraphForIntel"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[135, 2, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[136, 2, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[137, 2, 1, "", "QuantizeGraphHelper"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[138, 2, 1, "", "TensorflowQDQToOnnxQDQConverter"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[139, 0, 0, "-", "bias_correction"], [140, 0, 0, "-", "graph_transform_base"], [142, 0, 0, "-", "insert_logging"], [143, 0, 0, "-", "rerange_quantized_concat"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[139, 2, 1, "", "BiasCorrection"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[140, 2, 1, "", "GraphTransformBase"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[142, 2, 1, "", "InsertLogging"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[143, 2, 1, "", "RerangeQuantizedConcat"]], "neural_compressor.adaptor.tf_utils.util": [[144, 1, 1, "", "collate_tf_preds"], [144, 1, 1, "", "disable_random"], [144, 1, 1, "", "fix_ref_type_of_graph_def"], [144, 1, 1, "", "generate_feed_dict"], [144, 1, 1, "", "get_estimator_graph"], [144, 1, 1, "", "get_graph_def"], [144, 1, 1, "", "get_input_output_node_names"], [144, 1, 1, "", "get_model_input_shape"], [144, 1, 1, "", "get_tensor_by_name"], [144, 1, 1, "", "get_tensor_val_from_graph_node"], [144, 1, 1, "", "int8_node_name_reverse"], [144, 1, 1, "", "is_ckpt_format"], [144, 1, 1, "", "is_saved_model_format"], [144, 1, 1, "", "iterator_sess_run"], [144, 1, 1, "", "read_graph"], [144, 1, 1, "", "strip_equivalent_nodes"], [144, 1, 1, "", "strip_unused_nodes"], [144, 1, 1, "", "tf_diagnosis_helper"], [144, 1, 1, "", "version1_eq_version2"], [144, 1, 1, "", "version1_gt_version2"], [144, 1, 1, "", "version1_gte_version2"], [144, 1, 1, "", "version1_lt_version2"], [144, 1, 1, "", "version1_lte_version2"], [144, 1, 1, "", "write_graph"]], "neural_compressor.adaptor.torch_utils": [[145, 0, 0, "-", "bf16_convert"], [146, 0, 0, "-", "hawq_metric"], [148, 0, 0, "-", "smooth_quant"], [149, 0, 0, "-", "symbolic_trace"], [150, 0, 0, "-", "util"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[145, 2, 1, "", "BF16ModuleWrapper"], [145, 1, 1, "", "Convert"], [145, 1, 1, "", "bf16_symbolic_trace"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[146, 2, 1, "", "HessianTrace"], [146, 2, 1, "", "Node_collector"], [146, 1, 1, "", "compare_weights"], [146, 1, 1, "", "hawq_top"]], "neural_compressor.adaptor.torch_utils.smooth_quant": [[148, 2, 1, "", "GraphTrace"], [148, 2, 1, "", "TorchSmoothQuant"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[149, 1, 1, "", "symbolic_trace"], [149, 1, 1, "", "trace_and_fuse_sub_graph"]], "neural_compressor.adaptor.torch_utils.util": [[150, 1, 1, "", "append_attr"], [150, 1, 1, "", "auto_copy"], [150, 1, 1, "", "calculate_quant_min_max"], [150, 1, 1, "", "check_cfg_and_qconfig"], [150, 1, 1, "", "collate_torch_preds"], [150, 1, 1, "", "fetch_module"], [150, 1, 1, "", "generate_activation_observer"], [150, 1, 1, "", "get_embedding_contiguous"], [150, 1, 1, "", "get_example_input"], [150, 1, 1, "", "get_fallback_order"], [150, 1, 1, "", "get_mse_order_per_fp32"], [150, 1, 1, "", "get_mse_order_per_int8"], [150, 1, 1, "", "get_quantizable_ops_from_cfgs"], [150, 1, 1, "", "get_torch_version"], [150, 1, 1, "", "input2tuple"], [150, 1, 1, "", "is_fused_module"], [150, 1, 1, "", "match_datatype_pattern"], [150, 1, 1, "", "paser_cfgs"], [150, 1, 1, "", "set_module"], [150, 1, 1, "", "simple_inference"]], "neural_compressor.algorithm": [[151, 0, 0, "-", "algorithm"], [152, 0, 0, "-", "fast_bias_correction"], [154, 0, 0, "-", "smooth_quant"], [155, 0, 0, "-", "weight_correction"]], "neural_compressor.algorithm.algorithm": [[151, 2, 1, "", "ALGORITHMS"], [151, 2, 1, "", "Algorithm"], [151, 2, 1, "", "AlgorithmScheduler"], [151, 1, 1, "", "algorithm_registry"]], "neural_compressor.algorithm.fast_bias_correction": [[152, 2, 1, "", "FastBiasCorrection"]], "neural_compressor.algorithm.smooth_quant": [[154, 2, 1, "", "SmoothQuant"]], "neural_compressor.algorithm.weight_correction": [[155, 2, 1, "", "WeightCorrection"]], "neural_compressor.benchmark": [[156, 1, 1, "", "fit"], [156, 1, 1, "", "get_architecture"], [156, 1, 1, "", "get_bounded_threads"], [156, 1, 1, "", "get_core_ids"], [156, 1, 1, "", "get_physical_ids"], [156, 1, 1, "", "get_threads"], [156, 1, 1, "", "get_threads_per_core"], [156, 1, 1, "", "set_all_env_var"], [156, 1, 1, "", "set_env_var"]], "neural_compressor.compression": [[157, 0, 0, "-", "callbacks"], [159, 0, 0, "-", "distillation"], [162, 0, 0, "-", "pruner"]], "neural_compressor.compression.callbacks": [[157, 2, 1, "", "BaseCallbacks"], [157, 2, 1, "", "DistillationCallbacks"], [157, 2, 1, "", "PruningCallbacks"], [157, 2, 1, "", "QuantizationAwareTrainingCallbacks"]], "neural_compressor.compression.callbacks.DistillationCallbacks": [[157, 3, 1, "", "_epoch_ran"], [157, 3, 1, "", "best_model"], [157, 3, 1, "", "best_score"], [157, 3, 1, "", "eval_frequency"]], "neural_compressor.compression.distillation": [[158, 0, 0, "-", "criterions"]], "neural_compressor.compression.distillation.criterions": [[158, 2, 1, "", "Criterions"], [158, 2, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [158, 2, 1, "", "KnowledgeDistillationFramework"], [158, 2, 1, "", "KnowledgeDistillationLoss"], [158, 2, 1, "", "PyTorchCriterions"], [158, 2, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLoss"], [158, 2, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"], [158, 2, 1, "", "PyTorchKnowledgeDistillationLoss"], [158, 2, 1, "", "PyTorchKnowledgeDistillationLossWrapper"], [158, 2, 1, "", "PyTorchSelfKnowledgeDistillationLoss"], [158, 2, 1, "", "PyTorchSelfKnowledgeDistillationLossWrapper"], [158, 2, 1, "", "SelfKnowledgeDistillationLoss"], [158, 2, 1, "", "TensorflowCriterions"], [158, 2, 1, "", "TensorflowKnowledgeDistillationLoss"], [158, 2, 1, "", "TensorflowKnowledgeDistillationLossExternal"], [158, 2, 1, "", "TensorflowKnowledgeDistillationLossWrapper"], [158, 1, 1, "", "criterion_registry"]], "neural_compressor.compression.pruner": [[161, 0, 0, "-", "criteria"], [163, 0, 0, "-", "model_slim"], [166, 0, 0, "-", "patterns"], [167, 0, 0, "-", "pruners"], [168, 0, 0, "-", "regs"], [169, 0, 0, "-", "schedulers"], [170, 0, 0, "-", "utils"]], "neural_compressor.compression.pruner.criteria": [[161, 2, 1, "", "GradientCriterion"], [161, 2, 1, "", "MagnitudeCriterion"], [161, 2, 1, "", "PruningCriterion"], [161, 2, 1, "", "SnipCriterion"], [161, 2, 1, "", "SnipMomentumCriterion"], [161, 1, 1, "", "get_criterion"], [161, 1, 1, "", "register_criterion"]], "neural_compressor.compression.pruner.criteria.GradientCriterion": [[161, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.MagnitudeCriterion": [[161, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.PruningCriterion": [[161, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.SnipCriterion": [[161, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion": [[161, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.model_slim": [[164, 0, 0, "-", "pattern_analyzer"], [165, 0, 0, "-", "weight_slim"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer": [[164, 2, 1, "", "JitBasicSearcher"], [164, 2, 1, "", "Linear2LinearSearcher"], [164, 2, 1, "", "PathSearcher"], [164, 2, 1, "", "RecipeSearcher"], [164, 2, 1, "", "SelfMHASearcher"], [164, 1, 1, "", "get_attributes"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher": [[164, 3, 1, "", "device"], [164, 3, 1, "", "flatten_static_graph"], [164, 3, 1, "", "model"], [164, 3, 1, "", "searching_results"], [164, 3, 1, "", "static_graph"], [164, 3, 1, "", "target_layers"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher": [[164, 3, 1, "", "current_pattern"], [164, 3, 1, "", "device"], [164, 3, 1, "", "flatten_static_graph"], [164, 3, 1, "", "model"], [164, 3, 1, "", "searching_results"], [164, 3, 1, "", "static_graph"], [164, 3, 1, "", "target_layers"], [164, 3, 1, "", "target_op_lut"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.PathSearcher": [[164, 3, 1, "", "current_pattern"], [164, 3, 1, "", "device"], [164, 3, 1, "", "flatten_static_graph"], [164, 3, 1, "", "model"], [164, 3, 1, "", "searching_results"], [164, 3, 1, "", "static_graph"], [164, 3, 1, "", "target_layers"], [164, 3, 1, "", "target_op"], [164, 3, 1, "", "target_op_lut"], [164, 3, 1, "", "target_path"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher": [[164, 3, 1, "", "model"], [164, 3, 1, "", "recipe"], [164, 3, 1, "", "searching_results"], [164, 3, 1, "", "targets"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher": [[164, 3, 1, "", "device"], [164, 3, 1, "", "flatten_static_graph"], [164, 3, 1, "", "model"], [164, 3, 1, "", "static_graph"]], "neural_compressor.compression.pruner.model_slim.weight_slim": [[165, 2, 1, "", "LinearCompression"], [165, 2, 1, "", "LinearCompressionIterator"], [165, 2, 1, "", "MHACompression"], [165, 2, 1, "", "PostCompressionUtils"]], "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression": [[165, 3, 1, "", "device"], [165, 3, 1, "", "layer_1"], [165, 3, 1, "", "layer_2"]], "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompressionIterator": [[165, 3, 1, "", "linear_patterns"]], "neural_compressor.compression.pruner.patterns": [[166, 2, 1, "", "BasePattern"], [166, 2, 1, "", "PatternNInM"], [166, 2, 1, "", "PatternNxM"], [166, 1, 1, "", "get_pattern"], [166, 1, 1, "", "register_pattern"]], "neural_compressor.compression.pruner.patterns.BasePattern": [[166, 3, 1, "", "config"], [166, 3, 1, "", "invalid_layers"], [166, 3, 1, "", "is_global"], [166, 3, 1, "", "keep_mask_layers"], [166, 3, 1, "", "max_sparsity_ratio_per_op"], [166, 3, 1, "", "min_sparsity_ratio_per_op"], [166, 3, 1, "", "modules"], [166, 3, 1, "", "pattern"], [166, 3, 1, "", "target_sparsity"]], "neural_compressor.compression.pruner.patterns.PatternNInM": [[166, 3, 1, "", "M"], [166, 3, 1, "", "N"]], "neural_compressor.compression.pruner.patterns.PatternNxM": [[166, 3, 1, "", "block_size"]], "neural_compressor.compression.pruner.pruners": [[167, 2, 1, "", "BasePruner"], [167, 2, 1, "", "BasicPruner"], [167, 2, 1, "", "PatternLockPruner"], [167, 2, 1, "", "ProgressivePruner"], [167, 1, 1, "", "get_pruner"], [167, 1, 1, "", "model_slim"], [167, 1, 1, "", "model_slim_ffn2"], [167, 1, 1, "", "model_slim_mha"], [167, 1, 1, "", "parse_valid_pruner_types"], [167, 1, 1, "", "register_pruner"]], "neural_compressor.compression.pruner.pruners.BasePruner": [[167, 3, 1, "", "config"], [167, 3, 1, "", "current_sparsity_ratio"], [167, 3, 1, "", "end_step"], [167, 3, 1, "", "global_step"], [167, 3, 1, "", "masks"], [167, 3, 1, "", "max_sparsity_ratio_per_op"], [167, 3, 1, "", "modules"], [167, 3, 1, "", "pattern"], [167, 3, 1, "", "pruning_frequency"], [167, 3, 1, "", "scheduler"], [167, 3, 1, "", "scores"], [167, 3, 1, "", "start_step"], [167, 3, 1, "", "target_sparsity_ratio"]], "neural_compressor.compression.pruner.pruners.BasicPruner": [[167, 3, 1, "", "criterion"], [167, 3, 1, "", "pattern"], [167, 3, 1, "", "reg"], [167, 3, 1, "", "scheduler"]], "neural_compressor.compression.pruner.regs": [[168, 2, 1, "", "BaseReg"], [168, 2, 1, "", "GroupLasso"], [168, 1, 1, "", "get_reg"], [168, 1, 1, "", "get_reg_type"], [168, 1, 1, "", "register_reg"]], "neural_compressor.compression.pruner.regs.GroupLasso": [[168, 3, 1, "", "alpha"], [168, 3, 1, "", "reg_terms"]], "neural_compressor.compression.pruner.schedulers": [[169, 2, 1, "", "IterativeScheduler"], [169, 2, 1, "", "OneshotScheduler"], [169, 2, 1, "", "PruningScheduler"], [169, 1, 1, "", "get_scheduler"], [169, 1, 1, "", "register_scheduler"]], "neural_compressor.compression.pruner.schedulers.PruningScheduler": [[169, 3, 1, "", "config"]], "neural_compressor.compression.pruner.utils": [[170, 1, 1, "", "check_config"], [170, 1, 1, "", "check_key_validity"], [170, 1, 1, "", "generate_ffn2_pruning_config"], [170, 1, 1, "", "generate_mha_pruning_config"], [170, 1, 1, "", "generate_pruner_config"], [170, 1, 1, "", "get_sparsity_ratio"], [170, 1, 1, "", "parse_auto_slim_config"], [170, 1, 1, "", "parse_to_prune"], [170, 1, 1, "", "process_and_check_config"], [170, 1, 1, "", "process_config"], [170, 1, 1, "", "process_weight_config"], [170, 1, 1, "", "process_yaml_config"], [170, 1, 1, "", "reset_none_to_default"], [170, 1, 1, "", "update_params"]], "neural_compressor.conf": [[171, 0, 0, "-", "config"], [172, 0, 0, "-", "dotdict"], [174, 0, 0, "-", "pythonic_config"]], "neural_compressor.conf.config": [[171, 2, 1, "", "Benchmark_Conf"], [171, 2, 1, "", "Conf"], [171, 2, 1, "", "Distillation_Conf"], [171, 2, 1, "", "Graph_Optimization_Conf"], [171, 2, 1, "", "MixedPrecision_Conf"], [171, 2, 1, "", "NASConfig"], [171, 2, 1, "", "PrunerV2"], [171, 2, 1, "", "Pruning_Conf"], [171, 2, 1, "", "Quantization_Conf"]], "neural_compressor.conf.dotdict": [[172, 2, 1, "", "DotDict"], [172, 1, 1, "", "deep_get"], [172, 1, 1, "", "deep_set"]], "neural_compressor.conf.pythonic_config": [[174, 2, 1, "", "QuantizationConfig"]], "neural_compressor.config": [[175, 2, 1, "", "AccuracyCriterion"], [175, 2, 1, "", "BenchmarkConfig"], [175, 2, 1, "", "DistillationConfig"], [175, 2, 1, "", "ExportConfig"], [175, 2, 1, "", "IntermediateLayersKnowledgeDistillationLossConfig"], [175, 2, 1, "", "KnowledgeDistillationLossConfig"], [175, 2, 1, "", "MixedPrecisionConfig"], [175, 2, 1, "", "ONNXQlinear2QDQConfig"], [175, 2, 1, "", "Options"], [175, 2, 1, "", "PostTrainingQuantConfig"], [175, 2, 1, "", "QuantizationAwareTrainingConfig"], [175, 2, 1, "", "SelfKnowledgeDistillationLossConfig"], [175, 2, 1, "", "TF2ONNXConfig"], [175, 2, 1, "", "Torch2ONNXConfig"], [175, 2, 1, "", "TuningCriterion"], [175, 2, 1, "", "WeightPruningConfig"]], "neural_compressor.contrib": [[177, 0, 0, "-", "strategy"]], "neural_compressor.contrib.strategy": [[178, 0, 0, "-", "sigopt"], [179, 0, 0, "-", "tpe"]], "neural_compressor.contrib.strategy.sigopt": [[178, 2, 1, "", "SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.tpe": [[179, 2, 1, "", "TpeTuneStrategy"]], "neural_compressor.data": [[184, 0, 0, "-", "dataloaders"], [196, 0, 0, "-", "datasets"], [200, 0, 0, "-", "filters"], [204, 0, 0, "-", "transforms"]], "neural_compressor.data.dataloaders": [[180, 0, 0, "-", "base_dataloader"], [181, 0, 0, "-", "dataloader"], [182, 0, 0, "-", "default_dataloader"], [183, 0, 0, "-", "fetcher"], [185, 0, 0, "-", "mxnet_dataloader"], [186, 0, 0, "-", "onnxrt_dataloader"], [187, 0, 0, "-", "pytorch_dataloader"], [188, 0, 0, "-", "sampler"], [189, 0, 0, "-", "tensorflow_dataloader"]], "neural_compressor.data.dataloaders.base_dataloader": [[180, 2, 1, "", "BaseDataLoader"]], "neural_compressor.data.dataloaders.dataloader": [[181, 2, 1, "", "DataLoader"]], "neural_compressor.data.dataloaders.default_dataloader": [[182, 2, 1, "", "DefaultDataLoader"], [182, 1, 1, "", "default_collate"]], "neural_compressor.data.dataloaders.fetcher": [[183, 2, 1, "", "Fetcher"], [183, 2, 1, "", "IndexFetcher"], [183, 2, 1, "", "IterableFetcher"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[185, 2, 1, "", "MXNetDataLoader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[186, 2, 1, "", "ONNXRTBertDataLoader"], [186, 2, 1, "", "ONNXRTDataLoader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[187, 2, 1, "", "PyTorchDataLoader"]], "neural_compressor.data.dataloaders.sampler": [[188, 2, 1, "", "BatchSampler"], [188, 2, 1, "", "IterableSampler"], [188, 2, 1, "", "Sampler"], [188, 2, 1, "", "SequentialSampler"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[189, 2, 1, "", "TFDataDataLoader"], [189, 2, 1, "", "TensorflowBertDataLoader"], [189, 2, 1, "", "TensorflowDataLoader"], [189, 2, 1, "", "TensorflowModelZooBertDataLoader"]], "neural_compressor.data.datasets": [[190, 0, 0, "-", "bert_dataset"], [191, 0, 0, "-", "coco_dataset"], [192, 0, 0, "-", "dataset"], [193, 0, 0, "-", "dummy_dataset"], [194, 0, 0, "-", "dummy_dataset_v2"], [195, 0, 0, "-", "imagenet_dataset"], [197, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.data.datasets.bert_dataset": [[190, 2, 1, "", "InputFeatures"], [190, 2, 1, "", "ONNXRTBertDataset"], [190, 2, 1, "", "ParseDecodeBert"], [190, 2, 1, "", "PytorchBertDataset"], [190, 2, 1, "", "TensorflowBertDataset"], [190, 2, 1, "", "TensorflowModelZooBertDataset"], [190, 1, 1, "", "convert_examples_to_features"], [190, 1, 1, "", "load_and_cache_examples"]], "neural_compressor.data.datasets.coco_dataset": [[191, 2, 1, "", "COCONpy"], [191, 2, 1, "", "COCORaw"], [191, 2, 1, "", "COCORecordDataset"], [191, 2, 1, "", "ParseDecodeCoco"]], "neural_compressor.data.datasets.dataset": [[192, 2, 1, "", "CIFAR10"], [192, 2, 1, "", "CIFAR100"], [192, 2, 1, "", "Dataset"], [192, 2, 1, "", "Datasets"], [192, 2, 1, "", "FashionMNIST"], [192, 2, 1, "", "ImageFolder"], [192, 2, 1, "", "IterableDataset"], [192, 2, 1, "", "MNIST"], [192, 2, 1, "", "MXNetCIFAR10"], [192, 2, 1, "", "MXNetCIFAR100"], [192, 2, 1, "", "MXNetDatasets"], [192, 2, 1, "", "MXNetFashionMNIST"], [192, 2, 1, "", "MXNetImageFolder"], [192, 2, 1, "", "MXNetMNIST"], [192, 2, 1, "", "ONNXRTITDatasets"], [192, 2, 1, "", "ONNXRTQLDatasets"], [192, 2, 1, "", "PyTorchDatasets"], [192, 2, 1, "", "PytorchCIFAR10"], [192, 2, 1, "", "PytorchCIFAR100"], [192, 2, 1, "", "PytorchFashionMNIST"], [192, 2, 1, "", "PytorchMNIST"], [192, 2, 1, "", "PytorchMxnetWrapDataset"], [192, 2, 1, "", "PytorchMxnetWrapFunction"], [192, 2, 1, "", "Tensorflow"], [192, 2, 1, "", "TensorflowCIFAR10"], [192, 2, 1, "", "TensorflowCIFAR100"], [192, 2, 1, "", "TensorflowDatasets"], [192, 2, 1, "", "TensorflowFashionMNIST"], [192, 2, 1, "", "TensorflowImageRecord"], [192, 2, 1, "", "TensorflowMNIST"], [192, 2, 1, "", "TensorflowTFRecordDataset"], [192, 2, 1, "", "TensorflowVOCRecord"], [192, 1, 1, "", "calculate_md5"], [192, 1, 1, "", "check_integrity"], [192, 1, 1, "", "dataset_registry"], [192, 1, 1, "", "download_url"], [192, 4, 1, "", "framework_datasets"], [192, 1, 1, "", "gen_bar_updater"]], "neural_compressor.data.datasets.dummy_dataset": [[193, 2, 1, "", "DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[194, 2, 1, "", "DummyDataset"], [194, 2, 1, "", "SparseDummyDataset"]], "neural_compressor.data.datasets.imagenet_dataset": [[195, 2, 1, "", "ImagenetRaw"], [195, 2, 1, "", "MXNetImagenetRaw"], [195, 2, 1, "", "ONNXRTImagenetDataset"], [195, 2, 1, "", "PytorchImagenetRaw"], [195, 2, 1, "", "TensorflowImagenetDataset"], [195, 2, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.data.datasets.style_transfer_dataset": [[197, 2, 1, "", "StyleTransferDataset"]], "neural_compressor.data.filters": [[198, 0, 0, "-", "coco_filter"], [199, 0, 0, "-", "filter"]], "neural_compressor.data.filters.coco_filter": [[198, 2, 1, "", "LabelBalanceCOCORawFilter"], [198, 2, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.filter": [[199, 2, 1, "", "FILTERS"], [199, 2, 1, "", "Filter"], [199, 2, 1, "", "MXNetFilters"], [199, 2, 1, "", "ONNXRTITFilters"], [199, 2, 1, "", "ONNXRTQLFilters"], [199, 2, 1, "", "PyTorchFilters"], [199, 2, 1, "", "TensorflowFilters"], [199, 1, 1, "", "filter_registry"]], "neural_compressor.data.transforms": [[202, 0, 0, "-", "coco_transform"], [203, 0, 0, "-", "imagenet_transform"], [205, 0, 0, "-", "postprocess"], [206, 0, 0, "-", "tokenization"], [207, 0, 0, "-", "transform"]], "neural_compressor.data.transforms.coco_transform": [[202, 2, 1, "", "ParseDecodeCocoTransform"]], "neural_compressor.data.transforms.imagenet_transform": [[203, 2, 1, "", "BilinearImagenetTransform"], [203, 2, 1, "", "LabelShift"], [203, 2, 1, "", "ONNXResizeCropImagenetTransform"], [203, 2, 1, "", "OnnxBilinearImagenetTransform"], [203, 2, 1, "", "ParseDecodeImagenet"], [203, 2, 1, "", "ParseDecodeImagenetTransform"], [203, 2, 1, "", "QuantizedInput"], [203, 2, 1, "", "ResizeWithAspectRatio"], [203, 2, 1, "", "TensorflowResizeCropImagenetTransform"]], "neural_compressor.data.transforms.postprocess": [[205, 2, 1, "", "Postprocess"]], "neural_compressor.data.transforms.tokenization": [[206, 2, 1, "", "BasicTokenizer"], [206, 2, 1, "", "FullTokenizer"], [206, 2, 1, "", "WordpieceTokenizer"], [206, 1, 1, "", "convert_by_vocab"], [206, 1, 1, "", "convert_to_unicode"], [206, 1, 1, "", "load_vocab"], [206, 1, 1, "", "whitespace_tokenize"]], "neural_compressor.data.transforms.transform": [[207, 2, 1, "", "AlignImageChannelTransform"], [207, 2, 1, "", "BaseTransform"], [207, 2, 1, "", "CastONNXTransform"], [207, 2, 1, "", "CastPyTorchTransform"], [207, 2, 1, "", "CastTFTransform"], [207, 2, 1, "", "CenterCropTFTransform"], [207, 2, 1, "", "CenterCropTransform"], [207, 2, 1, "", "CollectTransform"], [207, 2, 1, "", "ComposeTransform"], [207, 2, 1, "", "CropResizeTFTransform"], [207, 2, 1, "", "CropResizeTransform"], [207, 2, 1, "", "CropToBoundingBox"], [207, 2, 1, "", "InputFeatures"], [207, 2, 1, "", "MXNetCropResizeTransform"], [207, 2, 1, "", "MXNetCropToBoundingBox"], [207, 2, 1, "", "MXNetNormalizeTransform"], [207, 2, 1, "", "MXNetTransforms"], [207, 2, 1, "", "MXNetTranspose"], [207, 2, 1, "", "NormalizeTFTransform"], [207, 2, 1, "", "NormalizeTransform"], [207, 2, 1, "", "ONNXRTCropToBoundingBox"], [207, 2, 1, "", "ONNXRTITTransforms"], [207, 2, 1, "", "ONNXRTQLTransforms"], [207, 2, 1, "", "PaddedCenterCropTransform"], [207, 2, 1, "", "ParseDecodeVocTransform"], [207, 2, 1, "", "PyTorchAlignImageChannel"], [207, 2, 1, "", "PyTorchCropResizeTransform"], [207, 2, 1, "", "PyTorchNormalizeTransform"], [207, 2, 1, "", "PyTorchTransforms"], [207, 2, 1, "", "PyTorchTranspose"], [207, 2, 1, "", "PytorchMxnetTransform"], [207, 2, 1, "", "PytorchMxnetWrapFunction"], [207, 2, 1, "", "RandomCropTFTransform"], [207, 2, 1, "", "RandomCropTransform"], [207, 2, 1, "", "RandomHorizontalFlip"], [207, 2, 1, "", "RandomResizedCropMXNetTransform"], [207, 2, 1, "", "RandomResizedCropPytorchTransform"], [207, 2, 1, "", "RandomResizedCropTFTransform"], [207, 2, 1, "", "RandomResizedCropTransform"], [207, 2, 1, "", "RandomVerticalFlip"], [207, 2, 1, "", "RescaleKerasPretrainTransform"], [207, 2, 1, "", "RescaleTFTransform"], [207, 2, 1, "", "RescaleTransform"], [207, 2, 1, "", "ResizeMXNetTransform"], [207, 2, 1, "", "ResizePytorchTransform"], [207, 2, 1, "", "ResizeTFTransform"], [207, 2, 1, "", "ResizeTransform"], [207, 2, 1, "", "ResizeWithRatio"], [207, 2, 1, "", "SquadExample"], [207, 2, 1, "", "TFModelZooCollectTransform"], [207, 2, 1, "", "TFSquadV1ModelZooPostTransform"], [207, 2, 1, "", "TFSquadV1PostTransform"], [207, 2, 1, "", "TRANSFORMS"], [207, 2, 1, "", "TensorflowCropToBoundingBox"], [207, 2, 1, "", "TensorflowRandomHorizontalFlip"], [207, 2, 1, "", "TensorflowRandomVerticalFlip"], [207, 2, 1, "", "TensorflowResizeWithRatio"], [207, 2, 1, "", "TensorflowTransform"], [207, 2, 1, "", "TensorflowTransforms"], [207, 2, 1, "", "TensorflowTranspose"], [207, 2, 1, "", "TensorflowWrapFunction"], [207, 2, 1, "", "ToArray"], [207, 2, 1, "", "ToNDArrayTransform"], [207, 2, 1, "", "Transforms"], [207, 2, 1, "", "Transpose"], [207, 1, 1, "", "convert_examples_to_features"], [207, 1, 1, "", "get_final_text"], [207, 1, 1, "", "get_torchvision_map"], [207, 1, 1, "", "read_squad_examples"], [207, 1, 1, "", "transform_registry"]], "neural_compressor.experimental": [[208, 0, 0, "-", "benchmark"], [211, 0, 0, "-", "common"], [217, 0, 0, "-", "component"], [218, 0, 0, "-", "compression"], [241, 0, 0, "-", "data"], [246, 0, 0, "-", "distillation"], [247, 0, 0, "-", "export"], [252, 0, 0, "-", "graph_optimization"], [260, 0, 0, "-", "metric"], [262, 0, 0, "-", "mixed_precision"], [263, 0, 0, "-", "model_conversion"], [266, 0, 0, "-", "nas"], [272, 0, 0, "-", "pruner_legacy"], [276, 0, 0, "-", "pruning"], [277, 0, 0, "-", "pruning_recipes"], [281, 0, 0, "-", "pruning_v2"], [282, 0, 0, "-", "pytorch_pruner"], [289, 0, 0, "-", "quantization"], [290, 0, 0, "-", "scheduler"]], "neural_compressor.experimental.benchmark": [[208, 2, 1, "", "Benchmark"], [208, 1, 1, "", "get_architecture"], [208, 1, 1, "", "get_bounded_threads"], [208, 1, 1, "", "get_core_ids"], [208, 1, 1, "", "get_physical_ids"], [208, 1, 1, "", "get_threads"], [208, 1, 1, "", "get_threads_per_core"], [208, 1, 1, "", "set_all_env_var"], [208, 1, 1, "", "set_env_var"]], "neural_compressor.experimental.common": [[209, 0, 0, "-", "criterion"], [210, 0, 0, "-", "dataloader"], [212, 0, 0, "-", "metric"], [213, 0, 0, "-", "model"], [214, 0, 0, "-", "optimizer"], [215, 0, 0, "-", "postprocess"], [216, 0, 0, "-", "torch_utils"]], "neural_compressor.experimental.common.criterion": [[209, 2, 1, "", "Criterions"], [209, 2, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [209, 2, 1, "", "KnowledgeDistillationFramework"], [209, 2, 1, "", "KnowledgeDistillationLoss"], [209, 2, 1, "", "PyTorchCriterions"], [209, 2, 1, "", "PyTorchCrossEntropyLoss"], [209, 2, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLoss"], [209, 2, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"], [209, 2, 1, "", "PyTorchKnowledgeDistillationLoss"], [209, 2, 1, "", "PyTorchKnowledgeDistillationLossWrapper"], [209, 2, 1, "", "PyTorchSelfKnowledgeDistillationLoss"], [209, 2, 1, "", "PyTorchSelfKnowledgeDistillationLossWrapper"], [209, 2, 1, "", "SelfKnowledgeDistillationLoss"], [209, 2, 1, "", "TensorFlowCrossEntropyLoss"], [209, 2, 1, "", "TensorFlowSparseCategoricalCrossentropy"], [209, 2, 1, "", "TensorflowCriterions"], [209, 2, 1, "", "TensorflowKnowledgeDistillationLoss"], [209, 2, 1, "", "TensorflowKnowledgeDistillationLossExternal"], [209, 2, 1, "", "TensorflowKnowledgeDistillationLossWrapper"], [209, 1, 1, "", "criterion_registry"]], "neural_compressor.experimental.common.dataloader": [[210, 2, 1, "", "DataLoader"]], "neural_compressor.experimental.common.metric": [[212, 2, 1, "", "Metric"]], "neural_compressor.experimental.common.model": [[213, 2, 1, "", "Model"], [213, 1, 1, "", "set_backend"]], "neural_compressor.experimental.common.optimizer": [[214, 2, 1, "", "Optimizers"], [214, 2, 1, "", "PyTorchOptimizers"], [214, 2, 1, "", "PyTorchSGD"], [214, 2, 1, "", "TensorFlowAdam"], [214, 2, 1, "", "TensorFlowAdamW"], [214, 2, 1, "", "TensorFlowSGD"], [214, 2, 1, "", "TensorflowOptimizers"], [214, 1, 1, "", "optimizer_registry"]], "neural_compressor.experimental.common.postprocess": [[215, 2, 1, "", "Postprocess"]], "neural_compressor.experimental.common.torch_utils": [[216, 1, 1, "", "get_activation"], [216, 1, 1, "", "record_output"]], "neural_compressor.experimental.component": [[217, 2, 1, "", "Component"]], "neural_compressor.experimental.compression": [[219, 0, 0, "-", "pruning"]], "neural_compressor.experimental.compression.pruning": [[219, 1, 1, "", "prepare_pruning"], [219, 1, 1, "", "save"]], "neural_compressor.experimental.data": [[224, 0, 0, "-", "dataloaders"], [236, 0, 0, "-", "datasets"], [240, 0, 0, "-", "filters"], [243, 0, 0, "-", "transforms"]], "neural_compressor.experimental.data.dataloaders": [[220, 0, 0, "-", "base_dataloader"], [221, 0, 0, "-", "dataloader"], [222, 0, 0, "-", "default_dataloader"], [223, 0, 0, "-", "fetcher"], [225, 0, 0, "-", "mxnet_dataloader"], [226, 0, 0, "-", "onnxrt_dataloader"], [227, 0, 0, "-", "pytorch_dataloader"], [228, 0, 0, "-", "sampler"], [229, 0, 0, "-", "tensorflow_dataloader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[220, 2, 1, "", "BaseDataLoader"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[222, 2, 1, "", "DefaultDataLoader"], [222, 1, 1, "", "default_collate"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[223, 2, 1, "", "Fetcher"], [223, 2, 1, "", "IndexFetcher"], [223, 2, 1, "", "IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[225, 2, 1, "", "MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[226, 2, 1, "", "ONNXRTBertDataLoader"], [226, 2, 1, "", "ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[227, 2, 1, "", "PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[228, 2, 1, "", "BatchSampler"], [228, 2, 1, "", "IterableSampler"], [228, 2, 1, "", "Sampler"], [228, 2, 1, "", "SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[229, 2, 1, "", "TFDataDataLoader"], [229, 2, 1, "", "TensorflowBertDataLoader"], [229, 2, 1, "", "TensorflowDataLoader"], [229, 2, 1, "", "TensorflowModelZooBertDataLoader"]], "neural_compressor.experimental.data.datasets": [[230, 0, 0, "-", "bert_dataset"], [231, 0, 0, "-", "coco_dataset"], [232, 0, 0, "-", "dataset"], [233, 0, 0, "-", "dummy_dataset"], [234, 0, 0, "-", "dummy_dataset_v2"], [235, 0, 0, "-", "imagenet_dataset"], [237, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[230, 2, 1, "", "InputFeatures"], [230, 2, 1, "", "ONNXRTBertDataset"], [230, 2, 1, "", "ParseDecodeBert"], [230, 2, 1, "", "PytorchBertDataset"], [230, 2, 1, "", "TensorflowBertDataset"], [230, 2, 1, "", "TensorflowModelZooBertDataset"], [230, 1, 1, "", "convert_examples_to_features"], [230, 1, 1, "", "load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[231, 2, 1, "", "COCONpy"], [231, 2, 1, "", "COCORaw"], [231, 2, 1, "", "COCORecordDataset"], [231, 2, 1, "", "ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.dataset": [[232, 2, 1, "", "CIFAR10"], [232, 2, 1, "", "CIFAR100"], [232, 2, 1, "", "Dataset"], [232, 2, 1, "", "Datasets"], [232, 2, 1, "", "FashionMNIST"], [232, 2, 1, "", "ImageFolder"], [232, 2, 1, "", "IterableDataset"], [232, 2, 1, "", "MNIST"], [232, 2, 1, "", "MXNetCIFAR10"], [232, 2, 1, "", "MXNetCIFAR100"], [232, 2, 1, "", "MXNetDatasets"], [232, 2, 1, "", "MXNetFashionMNIST"], [232, 2, 1, "", "MXNetImageFolder"], [232, 2, 1, "", "MXNetMNIST"], [232, 2, 1, "", "ONNXRTITDatasets"], [232, 2, 1, "", "ONNXRTQLDatasets"], [232, 2, 1, "", "PyTorchDatasets"], [232, 2, 1, "", "PytorchCIFAR10"], [232, 2, 1, "", "PytorchCIFAR100"], [232, 2, 1, "", "PytorchFashionMNIST"], [232, 2, 1, "", "PytorchMNIST"], [232, 2, 1, "", "PytorchMxnetWrapDataset"], [232, 2, 1, "", "PytorchMxnetWrapFunction"], [232, 2, 1, "", "TensorflowCIFAR10"], [232, 2, 1, "", "TensorflowCIFAR100"], [232, 2, 1, "", "TensorflowDatasets"], [232, 2, 1, "", "TensorflowFashionMNIST"], [232, 2, 1, "", "TensorflowImageFolder"], [232, 2, 1, "", "TensorflowImageRecord"], [232, 2, 1, "", "TensorflowMNIST"], [232, 2, 1, "", "TensorflowTFRecordDataset"], [232, 2, 1, "", "TensorflowVOCRecord"], [232, 1, 1, "", "calculate_md5"], [232, 1, 1, "", "check_integrity"], [232, 1, 1, "", "dataset_registry"], [232, 1, 1, "", "download_url"], [232, 4, 1, "", "framework_datasets"], [232, 1, 1, "", "gen_bar_updater"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[233, 2, 1, "", "DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[234, 2, 1, "", "DummyDataset"], [234, 2, 1, "", "SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[235, 2, 1, "", "ImagenetRaw"], [235, 2, 1, "", "MXNetImagenetRaw"], [235, 2, 1, "", "ONNXRTImagenetDataset"], [235, 2, 1, "", "PytorchImagenetRaw"], [235, 2, 1, "", "TensorflowImagenetDataset"], [235, 2, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[237, 2, 1, "", "StyleTransferDataset"]], "neural_compressor.experimental.data.filters": [[238, 0, 0, "-", "coco_filter"], [239, 0, 0, "-", "filter"]], "neural_compressor.experimental.data.filters.coco_filter": [[238, 2, 1, "", "LabelBalanceCOCORawFilter"], [238, 2, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.filter": [[239, 2, 1, "", "FILTERS"], [239, 2, 1, "", "Filter"], [239, 2, 1, "", "MXNetFilters"], [239, 2, 1, "", "ONNXRTITFilters"], [239, 2, 1, "", "ONNXRTQLFilters"], [239, 2, 1, "", "PyTorchFilters"], [239, 2, 1, "", "TensorflowFilters"], [239, 1, 1, "", "filter_registry"]], "neural_compressor.experimental.data.transforms": [[242, 0, 0, "-", "imagenet_transform"], [244, 0, 0, "-", "tokenization"], [245, 0, 0, "-", "transform"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[242, 2, 1, "", "BilinearImagenetTransform"], [242, 2, 1, "", "LabelShift"], [242, 2, 1, "", "ONNXResizeCropImagenetTransform"], [242, 2, 1, "", "OnnxBilinearImagenetTransform"], [242, 2, 1, "", "ParseDecodeImagenet"], [242, 2, 1, "", "ParseDecodeImagenetTransform"], [242, 2, 1, "", "QuantizedInput"], [242, 2, 1, "", "ResizeWithAspectRatio"], [242, 2, 1, "", "TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental.data.transforms.tokenization": [[244, 2, 1, "", "BasicTokenizer"], [244, 2, 1, "", "FullTokenizer"], [244, 2, 1, "", "WordpieceTokenizer"], [244, 1, 1, "", "convert_by_vocab"], [244, 1, 1, "", "convert_to_unicode"], [244, 1, 1, "", "load_vocab"], [244, 1, 1, "", "whitespace_tokenize"]], "neural_compressor.experimental.data.transforms.transform": [[245, 2, 1, "", "AlignImageChannelTransform"], [245, 2, 1, "", "BaseTransform"], [245, 2, 1, "", "CastONNXTransform"], [245, 2, 1, "", "CastPyTorchTransform"], [245, 2, 1, "", "CastTFTransform"], [245, 2, 1, "", "CenterCropTFTransform"], [245, 2, 1, "", "CenterCropTransform"], [245, 2, 1, "", "CollectTransform"], [245, 2, 1, "", "ComposeTransform"], [245, 2, 1, "", "CropResizeTFTransform"], [245, 2, 1, "", "CropResizeTransform"], [245, 2, 1, "", "CropToBoundingBox"], [245, 2, 1, "", "InputFeatures"], [245, 2, 1, "", "MXNetCropResizeTransform"], [245, 2, 1, "", "MXNetCropToBoundingBox"], [245, 2, 1, "", "MXNetNormalizeTransform"], [245, 2, 1, "", "MXNetTransforms"], [245, 2, 1, "", "MXNetTranspose"], [245, 2, 1, "", "NormalizeTFTransform"], [245, 2, 1, "", "NormalizeTransform"], [245, 2, 1, "", "ONNXRTCropToBoundingBox"], [245, 2, 1, "", "ONNXRTITTransforms"], [245, 2, 1, "", "ONNXRTQLTransforms"], [245, 2, 1, "", "PaddedCenterCropTransform"], [245, 2, 1, "", "ParseDecodeVocTransform"], [245, 2, 1, "", "PyTorchAlignImageChannel"], [245, 2, 1, "", "PyTorchCropResizeTransform"], [245, 2, 1, "", "PyTorchNormalizeTransform"], [245, 2, 1, "", "PyTorchTransforms"], [245, 2, 1, "", "PyTorchTranspose"], [245, 2, 1, "", "PytorchMxnetTransform"], [245, 2, 1, "", "PytorchMxnetWrapFunction"], [245, 2, 1, "", "RandomCropTFTransform"], [245, 2, 1, "", "RandomCropTransform"], [245, 2, 1, "", "RandomHorizontalFlip"], [245, 2, 1, "", "RandomResizedCropMXNetTransform"], [245, 2, 1, "", "RandomResizedCropPytorchTransform"], [245, 2, 1, "", "RandomResizedCropTFTransform"], [245, 2, 1, "", "RandomResizedCropTransform"], [245, 2, 1, "", "RandomVerticalFlip"], [245, 2, 1, "", "RescaleKerasPretrainTransform"], [245, 2, 1, "", "RescaleTFTransform"], [245, 2, 1, "", "RescaleTransform"], [245, 2, 1, "", "ResizeMXNetTransform"], [245, 2, 1, "", "ResizePytorchTransform"], [245, 2, 1, "", "ResizeTFTransform"], [245, 2, 1, "", "ResizeTransform"], [245, 2, 1, "", "ResizeWithRatio"], [245, 2, 1, "", "SquadExample"], [245, 2, 1, "", "TFModelZooCollectTransform"], [245, 2, 1, "", "TFSquadV1ModelZooPostTransform"], [245, 2, 1, "", "TFSquadV1PostTransform"], [245, 2, 1, "", "TRANSFORMS"], [245, 2, 1, "", "TensorflowCropToBoundingBox"], [245, 2, 1, "", "TensorflowRandomHorizontalFlip"], [245, 2, 1, "", "TensorflowRandomVerticalFlip"], [245, 2, 1, "", "TensorflowResizeWithRatio"], [245, 2, 1, "", "TensorflowTransform"], [245, 2, 1, "", "TensorflowTransforms"], [245, 2, 1, "", "TensorflowTranspose"], [245, 2, 1, "", "TensorflowWrapFunction"], [245, 2, 1, "", "ToArray"], [245, 2, 1, "", "ToNDArrayTransform"], [245, 2, 1, "", "Transforms"], [245, 2, 1, "", "Transpose"], [245, 1, 1, "", "convert_examples_to_features"], [245, 1, 1, "", "get_final_text"], [245, 1, 1, "", "get_torchvision_map"], [245, 1, 1, "", "read_squad_examples"], [245, 1, 1, "", "transform_registry"]], "neural_compressor.experimental.distillation": [[246, 2, 1, "", "Distillation"]], "neural_compressor.experimental.distillation.Distillation": [[246, 3, 1, "", "_epoch_ran"], [246, 3, 1, "", "best_model"], [246, 3, 1, "", "best_score"], [246, 3, 1, "", "eval_frequency"]], "neural_compressor.experimental.export": [[248, 0, 0, "-", "qlinear2qdq"], [249, 0, 0, "-", "tf2onnx"], [250, 0, 0, "-", "torch2onnx"], [251, 0, 0, "-", "utils"]], "neural_compressor.experimental.export.qlinear2qdq": [[248, 1, 1, "", "check_model"], [248, 1, 1, "", "onnx_qlinear_to_qdq"]], "neural_compressor.experimental.export.tf2onnx": [[249, 1, 1, "", "tf_to_fp32_onnx"], [249, 1, 1, "", "tf_to_int8_onnx"]], "neural_compressor.experimental.export.torch2onnx": [[250, 1, 1, "", "build_scale_mapping"], [250, 1, 1, "", "get_node_mapping"], [250, 1, 1, "", "get_quantizable_onnx_ops"], [250, 1, 1, "", "qdq_fp32_bias"], [250, 1, 1, "", "qdq_fp32_bias_qdq"], [250, 1, 1, "", "qdq_int32_bias"], [250, 1, 1, "", "recalculate_bias"], [250, 1, 1, "", "remove_nodes_by_name"], [250, 1, 1, "", "set_data_type"], [250, 1, 1, "", "set_scale_info"], [250, 1, 1, "", "sub_graph_with_int32_bias"], [250, 1, 1, "", "torch_to_fp32_onnx"], [250, 1, 1, "", "torch_to_int8_onnx"], [250, 1, 1, "", "update_weight_bias"]], "neural_compressor.experimental.export.utils": [[251, 2, 1, "", "DummyDataReader"], [251, 1, 1, "", "ONNX2Numpy_dtype"]], "neural_compressor.experimental.graph_optimization": [[252, 2, 1, "", "Graph_Optimization"]], "neural_compressor.experimental.metric": [[254, 0, 0, "-", "bleu"], [255, 0, 0, "-", "bleu_util"], [256, 0, 0, "-", "coco_label_map"], [257, 0, 0, "-", "coco_tools"], [258, 0, 0, "-", "evaluate_squad"], [259, 0, 0, "-", "f1"], [261, 0, 0, "-", "metric"]], "neural_compressor.experimental.metric.bleu": [[254, 2, 1, "", "BLEU"], [254, 2, 1, "", "UnicodeRegex"], [254, 1, 1, "", "bleu_tokenize"]], "neural_compressor.experimental.metric.bleu.BLEU": [[254, 3, 1, "", "labels"], [254, 3, 1, "", "predictions"]], "neural_compressor.experimental.metric.bleu.UnicodeRegex": [[254, 3, 1, "", "nondigit_punct_re"], [254, 3, 1, "", "punct_nondigit_re"], [254, 3, 1, "", "symbol_re"]], "neural_compressor.experimental.metric.bleu_util": [[255, 1, 1, "", "compute_bleu"]], "neural_compressor.experimental.metric.coco_tools": [[257, 2, 1, "", "COCOEvalWrapper"], [257, 2, 1, "", "COCOWrapper"], [257, 1, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [257, 1, 1, "", "ExportSingleImageDetectionMasksToCoco"], [257, 1, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.experimental.metric.coco_tools.COCOWrapper": [[257, 3, 1, "", "dataset"], [257, 3, 1, "", "detection_type"]], "neural_compressor.experimental.metric.evaluate_squad": [[258, 1, 1, "", "evaluate"], [258, 1, 1, "", "exact_match_score"], [258, 1, 1, "", "f1_score"], [258, 1, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[259, 1, 1, "", "evaluate"], [259, 1, 1, "", "f1_score"], [259, 1, 1, "", "metric_max_over_ground_truths"], [259, 1, 1, "", "normalize_answer"]], "neural_compressor.experimental.metric.metric": [[261, 2, 1, "", "Accuracy"], [261, 2, 1, "", "BaseMetric"], [261, 2, 1, "", "COCOmAPv2"], [261, 2, 1, "", "F1"], [261, 2, 1, "", "GeneralTopK"], [261, 2, 1, "", "Loss"], [261, 2, 1, "", "MAE"], [261, 2, 1, "", "METRICS"], [261, 2, 1, "", "MSE"], [261, 2, 1, "", "MXNetMetrics"], [261, 2, 1, "", "ONNXRTGLUE"], [261, 2, 1, "", "ONNXRTITMetrics"], [261, 2, 1, "", "ONNXRTQLMetrics"], [261, 2, 1, "", "PyTorchLoss"], [261, 2, 1, "", "PyTorchMetrics"], [261, 2, 1, "", "RMSE"], [261, 2, 1, "", "ROC"], [261, 2, 1, "", "SquadF1"], [261, 2, 1, "", "TensorflowCOCOMAP"], [261, 2, 1, "", "TensorflowMAP"], [261, 2, 1, "", "TensorflowMetrics"], [261, 2, 1, "", "TensorflowTopK"], [261, 2, 1, "", "TensorflowVOCMAP"], [261, 2, 1, "", "WrapMXNetMetric"], [261, 2, 1, "", "WrapONNXRTMetric"], [261, 2, 1, "", "WrapPyTorchMetric"], [261, 2, 1, "", "mIOU"], [261, 1, 1, "", "metric_registry"]], "neural_compressor.experimental.metric.metric.Accuracy": [[261, 3, 1, "", "label_list"], [261, 3, 1, "", "pred_list"], [261, 3, 1, "", "sample"]], "neural_compressor.experimental.metric.metric.GeneralTopK": [[261, 3, 1, "", "k"], [261, 3, 1, "", "num_correct"], [261, 3, 1, "", "num_sample"]], "neural_compressor.experimental.metric.metric.Loss": [[261, 3, 1, "", "sample"], [261, 3, 1, "", "sum"]], "neural_compressor.experimental.metric.metric.MAE": [[261, 3, 1, "", "compare_label"], [261, 3, 1, "", "label_list"], [261, 3, 1, "", "pred_list"]], "neural_compressor.experimental.metric.metric.METRICS": [[261, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.MSE": [[261, 3, 1, "", "compare_label"], [261, 3, 1, "", "label_list"], [261, 3, 1, "", "pred_list"]], "neural_compressor.experimental.metric.metric.MXNetMetrics": [[261, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTITMetrics": [[261, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics": [[261, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.PyTorchMetrics": [[261, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.RMSE": [[261, 3, 1, "", "mse"]], "neural_compressor.experimental.metric.metric.TensorflowMetrics": [[261, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.TensorflowTopK": [[261, 3, 1, "", "k"], [261, 3, 1, "", "num_correct"], [261, 3, 1, "", "num_sample"]], "neural_compressor.experimental.mixed_precision": [[262, 2, 1, "", "MixedPrecision"]], "neural_compressor.experimental.model_conversion": [[263, 2, 1, "", "ModelConversion"]], "neural_compressor.experimental.nas": [[264, 0, 0, "-", "basic_nas"], [265, 0, 0, "-", "dynas"], [267, 0, 0, "-", "nas"], [268, 0, 0, "-", "nas_utils"], [269, 0, 0, "-", "search_algorithms"]], "neural_compressor.experimental.nas.basic_nas": [[264, 2, 1, "", "BasicNAS"]], "neural_compressor.experimental.nas.dynas": [[265, 2, 1, "", "DyNAS"]], "neural_compressor.experimental.nas.nas": [[267, 2, 1, "", "NAS"], [267, 2, 1, "", "NASBase"]], "neural_compressor.experimental.nas.nas_utils": [[268, 1, 1, "", "create_search_space_pool"], [268, 1, 1, "", "find_pareto_front"], [268, 1, 1, "", "nas_registry"]], "neural_compressor.experimental.nas.search_algorithms": [[269, 2, 1, "", "BayesianOptimizationSearcher"], [269, 2, 1, "", "GridSearcher"], [269, 2, 1, "", "RandomSearcher"], [269, 2, 1, "", "Searcher"]], "neural_compressor.experimental.pruner_legacy": [[270, 0, 0, "-", "gradient_sensitivity"], [271, 0, 0, "-", "group_lasso"], [273, 0, 0, "-", "magnitude"], [274, 0, 0, "-", "pattern_lock"], [275, 0, 0, "-", "pruner"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[270, 2, 1, "", "GradientSensitivityPruner"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[271, 2, 1, "", "GroupLassoPruner"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[273, 2, 1, "", "BasicMagnitudePruner"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[274, 2, 1, "", "PatternLockPruner"]], "neural_compressor.experimental.pruner_legacy.pruner": [[275, 2, 1, "", "Pruner"], [275, 1, 1, "", "pruner_registry"]], "neural_compressor.experimental.pruning": [[276, 2, 1, "", "Pruning"], [276, 2, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning.Pruning": [[276, 3, 1, "", "conf"], [276, 3, 1, "", "pruners"]], "neural_compressor.experimental.pruning_recipes": [[278, 0, 0, "-", "patterns"]], "neural_compressor.experimental.pruning_recipes.patterns": [[279, 0, 0, "-", "pattern"], [280, 0, 0, "-", "tile_pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[279, 2, 1, "", "PATTERNS"], [279, 2, 1, "", "PatternBase"], [279, 1, 1, "", "pattern_registry"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS": [[279, 3, 1, "", "patterns"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[280, 2, 1, "", "TilePatternBase"], [280, 2, 1, "", "TilePattern_1x1"], [280, 2, 1, "", "TilePattern_1x16"], [280, 2, 1, "", "TilePattern_1x2"], [280, 2, 1, "", "TilePattern_2x2"], [280, 2, 1, "", "TilePattern_4x1"]], "neural_compressor.experimental.pruning_v2": [[281, 2, 1, "", "Pruning"], [281, 2, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning_v2.Pruning": [[281, 3, 1, "", "conf"], [281, 3, 1, "", "pruners"]], "neural_compressor.experimental.pytorch_pruner": [[283, 0, 0, "-", "logger"], [284, 0, 0, "-", "patterns"], [285, 0, 0, "-", "prune_utils"], [286, 0, 0, "-", "pruner"], [287, 0, 0, "-", "pruning"], [288, 0, 0, "-", "scheduler"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[284, 2, 1, "", "Pattern"], [284, 2, 1, "", "PatternNInM"], [284, 2, 1, "", "PatternNxM"], [284, 1, 1, "", "get_pattern"], [284, 1, 1, "", "register_pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.Pattern": [[284, 3, 1, "", "is_global"], [284, 3, 1, "", "pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM": [[284, 3, 1, "", "M"], [284, 3, 1, "", "N"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM": [[284, 3, 1, "", "block_size"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[285, 1, 1, "", "check_config"], [285, 1, 1, "", "parse_not_to_prune"], [285, 1, 1, "", "parse_to_prune"], [285, 1, 1, "", "process_and_check_config"], [285, 1, 1, "", "process_config"], [285, 1, 1, "", "reset_non_value_to_default"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[286, 2, 1, "", "MagnitudePruner"], [286, 2, 1, "", "PatternLockPruner"], [286, 2, 1, "", "Pruner"], [286, 2, 1, "", "SnipMomentumPruner"], [286, 2, 1, "", "SnipPruner"], [286, 1, 1, "", "get_pruner"], [286, 1, 1, "", "register_pruners"]], "neural_compressor.experimental.pytorch_pruner.pruner.Pruner": [[286, 3, 1, "", "config"], [286, 3, 1, "", "current_sparsity_ratio"], [286, 3, 1, "", "end_step"], [286, 3, 1, "", "global_step"], [286, 3, 1, "", "masks"], [286, 3, 1, "", "max_sparsity_ratio_per_layer"], [286, 3, 1, "", "modules"], [286, 3, 1, "", "pattern"], [286, 3, 1, "", "scheduler"], [286, 3, 1, "", "scores"], [286, 3, 1, "", "start_step"], [286, 3, 1, "", "target_sparsity_ratio"], [286, 3, 1, "", "update_frequency_on_step"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[287, 2, 1, "", "Pruning"]], "neural_compressor.experimental.pytorch_pruner.pruning.Pruning": [[287, 3, 1, "", "config_file_path"], [287, 3, 1, "", "model"], [287, 3, 1, "", "pruner_info"], [287, 3, 1, "", "pruners"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[288, 2, 1, "", "IterativeScheduler"], [288, 2, 1, "", "OneshotScheduler"], [288, 2, 1, "", "Scheduler"], [288, 1, 1, "", "get_scheduler"], [288, 1, 1, "", "register_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler": [[288, 3, 1, "", "config"]], "neural_compressor.experimental.quantization": [[289, 2, 1, "", "Quantization"]], "neural_compressor.experimental.scheduler": [[290, 2, 1, "", "Scheduler"]], "neural_compressor.metric": [[292, 0, 0, "-", "bleu"], [293, 0, 0, "-", "bleu_util"], [294, 0, 0, "-", "coco_label_map"], [295, 0, 0, "-", "coco_tools"], [296, 0, 0, "-", "evaluate_squad"], [297, 0, 0, "-", "f1"], [299, 0, 0, "-", "metric"]], "neural_compressor.metric.bleu": [[292, 2, 1, "", "BLEU"], [292, 2, 1, "", "UnicodeRegex"], [292, 1, 1, "", "bleu_tokenize"]], "neural_compressor.metric.bleu.BLEU": [[292, 3, 1, "", "labels"], [292, 3, 1, "", "predictions"]], "neural_compressor.metric.bleu.UnicodeRegex": [[292, 3, 1, "", "nondigit_punct_re"], [292, 3, 1, "", "punct_nondigit_re"], [292, 3, 1, "", "symbol_re"]], "neural_compressor.metric.bleu_util": [[293, 1, 1, "", "compute_bleu"]], "neural_compressor.metric.coco_tools": [[295, 2, 1, "", "COCOEvalWrapper"], [295, 2, 1, "", "COCOWrapper"], [295, 1, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [295, 1, 1, "", "ExportSingleImageDetectionMasksToCoco"], [295, 1, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.metric.coco_tools.COCOWrapper": [[295, 3, 1, "", "dataset"], [295, 3, 1, "", "detection_type"]], "neural_compressor.metric.evaluate_squad": [[296, 1, 1, "", "evaluate"], [296, 1, 1, "", "exact_match_score"], [296, 1, 1, "", "f1_score"], [296, 1, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[297, 1, 1, "", "evaluate"], [297, 1, 1, "", "f1_score"], [297, 1, 1, "", "metric_max_over_ground_truths"], [297, 1, 1, "", "normalize_answer"]], "neural_compressor.metric.metric": [[299, 2, 1, "", "Accuracy"], [299, 2, 1, "", "BaseMetric"], [299, 2, 1, "", "COCOmAPv2"], [299, 2, 1, "", "F1"], [299, 2, 1, "", "GeneralTopK"], [299, 2, 1, "", "Loss"], [299, 2, 1, "", "MAE"], [299, 2, 1, "", "METRICS"], [299, 2, 1, "", "MSE"], [299, 2, 1, "", "MXNetMetrics"], [299, 2, 1, "", "Metric"], [299, 2, 1, "", "ONNXRTGLUE"], [299, 2, 1, "", "ONNXRTITMetrics"], [299, 2, 1, "", "ONNXRTQLMetrics"], [299, 2, 1, "", "PyTorchLoss"], [299, 2, 1, "", "PyTorchMetrics"], [299, 2, 1, "", "RMSE"], [299, 2, 1, "", "ROC"], [299, 2, 1, "", "SquadF1"], [299, 2, 1, "", "TensorflowCOCOMAP"], [299, 2, 1, "", "TensorflowMAP"], [299, 2, 1, "", "TensorflowMetrics"], [299, 2, 1, "", "TensorflowTopK"], [299, 2, 1, "", "TensorflowVOCMAP"], [299, 2, 1, "", "WrapMXNetMetric"], [299, 2, 1, "", "WrapONNXRTMetric"], [299, 2, 1, "", "WrapPyTorchMetric"], [299, 2, 1, "", "mIOU"], [299, 1, 1, "", "metric_registry"]], "neural_compressor.metric.metric.Accuracy": [[299, 3, 1, "", "label_list"], [299, 3, 1, "", "pred_list"], [299, 3, 1, "", "sample"]], "neural_compressor.metric.metric.GeneralTopK": [[299, 3, 1, "", "k"], [299, 3, 1, "", "num_correct"], [299, 3, 1, "", "num_sample"]], "neural_compressor.metric.metric.Loss": [[299, 3, 1, "", "sample"], [299, 3, 1, "", "sum"]], "neural_compressor.metric.metric.MAE": [[299, 3, 1, "", "compare_label"], [299, 3, 1, "", "label_list"], [299, 3, 1, "", "pred_list"]], "neural_compressor.metric.metric.METRICS": [[299, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.MSE": [[299, 3, 1, "", "compare_label"], [299, 3, 1, "", "label_list"], [299, 3, 1, "", "pred_list"]], "neural_compressor.metric.metric.MXNetMetrics": [[299, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTITMetrics": [[299, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTQLMetrics": [[299, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.PyTorchMetrics": [[299, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.RMSE": [[299, 3, 1, "", "mse"]], "neural_compressor.metric.metric.TensorflowMetrics": [[299, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.TensorflowTopK": [[299, 3, 1, "", "k"], [299, 3, 1, "", "num_correct"], [299, 3, 1, "", "num_sample"]], "neural_compressor.mix_precision": [[300, 1, 1, "", "fit"]], "neural_compressor.model": [[301, 0, 0, "-", "base_model"], [303, 0, 0, "-", "keras_model"], [304, 0, 0, "-", "model"], [305, 0, 0, "-", "mxnet_model"], [306, 0, 0, "-", "nets_factory"], [307, 0, 0, "-", "onnx_model"], [308, 0, 0, "-", "tensorflow_model"], [309, 0, 0, "-", "torch_model"]], "neural_compressor.model.base_model": [[301, 2, 1, "", "BaseModel"]], "neural_compressor.model.keras_model": [[303, 2, 1, "", "KerasModel"]], "neural_compressor.model.model": [[304, 2, 1, "", "Model"], [304, 1, 1, "", "get_model_fwk_name"]], "neural_compressor.model.mxnet_model": [[305, 2, 1, "", "MXNetModel"]], "neural_compressor.model.nets_factory": [[306, 2, 1, "", "TFSlimNetsFactory"]], "neural_compressor.model.onnx_model": [[307, 2, 1, "", "ONNXModel"]], "neural_compressor.model.tensorflow_model": [[308, 2, 1, "", "TensorflowBaseModel"], [308, 2, 1, "", "TensorflowCheckpointModel"], [308, 2, 1, "", "TensorflowModel"], [308, 2, 1, "", "TensorflowQATModel"], [308, 2, 1, "", "TensorflowSavedModelModel"], [308, 1, 1, "", "checkpoint_session"], [308, 1, 1, "", "estimator_session"], [308, 1, 1, "", "frozen_pb_session"], [308, 1, 1, "", "get_model_type"], [308, 1, 1, "", "graph_def_session"], [308, 1, 1, "", "graph_session"], [308, 1, 1, "", "keras_session"], [308, 1, 1, "", "load_saved_model"], [308, 1, 1, "", "saved_model_session"], [308, 1, 1, "", "slim_session"], [308, 1, 1, "", "validate_and_inference_input_output"], [308, 1, 1, "", "validate_graph_node"]], "neural_compressor.model.torch_model": [[309, 2, 1, "", "IPEXModel"], [309, 2, 1, "", "PyTorchBaseModel"], [309, 2, 1, "", "PyTorchFXModel"], [309, 2, 1, "", "PyTorchModel"]], "neural_compressor.objective": [[310, 2, 1, "", "Accuracy"], [310, 2, 1, "", "Footprint"], [310, 2, 1, "", "ModelSize"], [310, 2, 1, "", "MultiObjective"], [310, 2, 1, "", "Objective"], [310, 2, 1, "", "Performance"], [310, 1, 1, "", "objective_custom_registry"], [310, 1, 1, "", "objective_registry"]], "neural_compressor.quantization": [[311, 1, 1, "", "fit"]], "neural_compressor.strategy": [[312, 0, 0, "-", "auto"], [313, 0, 0, "-", "auto_mixed_precision"], [314, 0, 0, "-", "basic"], [315, 0, 0, "-", "bayesian"], [316, 0, 0, "-", "conservative"], [317, 0, 0, "-", "exhaustive"], [318, 0, 0, "-", "hawq_v2"], [320, 0, 0, "-", "mse"], [321, 0, 0, "-", "mse_v2"], [322, 0, 0, "-", "random"], [323, 0, 0, "-", "strategy"], [325, 0, 0, "-", "utils"]], "neural_compressor.strategy.auto": [[312, 2, 1, "", "AutoTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[313, 2, 1, "", "AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.basic": [[314, 2, 1, "", "BasicTuneStrategy"]], "neural_compressor.strategy.bayesian": [[315, 2, 1, "", "BayesianOptimization"], [315, 2, 1, "", "BayesianTuneStrategy"], [315, 2, 1, "", "TargetSpace"], [315, 1, 1, "", "acq_max"]], "neural_compressor.strategy.conservative": [[316, 2, 1, "", "ConservativeTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[317, 2, 1, "", "ExhaustiveTuneStrategy"]], "neural_compressor.strategy.hawq_v2": [[318, 2, 1, "", "HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.mse": [[320, 2, 1, "", "MSETuneStrategy"]], "neural_compressor.strategy.mse_v2": [[321, 2, 1, "", "MSE_V2TuneStrategy"]], "neural_compressor.strategy.random": [[322, 2, 1, "", "RandomTuneStrategy"]], "neural_compressor.strategy.strategy": [[323, 2, 1, "", "TuneStrategy"], [323, 1, 1, "", "strategy_registry"]], "neural_compressor.strategy.utils": [[324, 0, 0, "-", "constant"], [326, 0, 0, "-", "tuning_sampler"], [327, 0, 0, "-", "tuning_space"], [328, 0, 0, "-", "tuning_structs"], [329, 0, 0, "-", "utility"]], "neural_compressor.strategy.utils.tuning_sampler": [[326, 2, 1, "", "FallbackTuningSampler"], [326, 2, 1, "", "ModelWiseTuningSampler"], [326, 2, 1, "", "OpTypeWiseTuningSampler"], [326, 2, 1, "", "OpWiseTuningSampler"], [326, 2, 1, "", "TuningOrder"], [326, 2, 1, "", "TuningSampler"], [326, 2, 1, "", "TuningSamplerRegistry"]], "neural_compressor.strategy.utils.tuning_space": [[327, 2, 1, "", "TuningItem"], [327, 2, 1, "", "TuningSpace"], [327, 1, 1, "", "get_op_mode_by_query_order"], [327, 1, 1, "", "initial_tuning_cfg_with_quant_mode"], [327, 1, 1, "", "pattern_to_internal"], [327, 1, 1, "", "pattern_to_path"], [327, 1, 1, "", "quant_mode_from_pattern"]], "neural_compressor.strategy.utils.tuning_structs": [[328, 2, 1, "", "OpTuningConfig"]], "neural_compressor.strategy.utils.utility": [[329, 2, 1, "", "OrderedDefaultDict"], [329, 1, 1, "", "extract_data_type"], [329, 1, 1, "", "get_adaptor_name"], [329, 1, 1, "", "reverted_data_type"]], "neural_compressor.template": [[330, 0, 0, "-", "api_doc_example"]], "neural_compressor.template.api_doc_example": [[330, 2, 1, "", "ExampleClass"], [330, 3, 1, "", "attribute1"], [330, 1, 1, "", "function1"], [330, 1, 1, "", "function2"], [330, 1, 1, "", "function3"], [330, 1, 1, "", "generator1"], [330, 4, 1, "", "module_debug_level1"]], "neural_compressor.template.api_doc_example.ExampleClass": [[330, 3, 1, "", "attr1"], [330, 3, 1, "", "attr2"], [330, 3, 1, "", "attr5"]], "neural_compressor.training": [[332, 2, 1, "", "CallBacks"], [332, 2, 1, "", "CompressionManager"], [332, 1, 1, "", "fit"], [332, 1, 1, "", "prepare_compression"]], "neural_compressor.utils": [[333, 0, 0, "-", "collect_layer_histogram"], [334, 0, 0, "-", "constant"], [335, 0, 0, "-", "create_obj_from_config"], [337, 0, 0, "-", "kl_divergence"], [338, 0, 0, "-", "load_huggingface"], [339, 0, 0, "-", "logger"], [340, 0, 0, "-", "options"], [341, 0, 0, "-", "pytorch"], [342, 0, 0, "-", "utility"]], "neural_compressor.utils.collect_layer_histogram": [[333, 2, 1, "", "LayerHistogramCollector"]], "neural_compressor.utils.create_obj_from_config": [[335, 1, 1, "", "create_dataloader"], [335, 1, 1, "", "create_dataset"], [335, 1, 1, "", "create_eval_func"], [335, 1, 1, "", "create_train_func"], [335, 1, 1, "", "get_algorithm"], [335, 1, 1, "", "get_func_from_config"], [335, 1, 1, "", "get_metrics"], [335, 1, 1, "", "get_postprocess"], [335, 1, 1, "", "get_preprocess"]], "neural_compressor.utils.kl_divergence": [[337, 2, 1, "", "KL_Divergence"]], "neural_compressor.utils.load_huggingface": [[338, 2, 1, "", "OptimizedModel"], [338, 1, 1, "", "save_for_huggingface_upstream"]], "neural_compressor.utils.logger": [[339, 2, 1, "", "Logger"], [339, 1, 1, "", "debug"], [339, 1, 1, "", "error"], [339, 1, 1, "", "fatal"], [339, 1, 1, "", "info"], [339, 1, 1, "", "log"], [339, 1, 1, "", "warn"], [339, 1, 1, "", "warning"]], "neural_compressor.utils.options": [[340, 2, 1, "", "onnxrt"]], "neural_compressor.utils.pytorch": [[341, 1, 1, "", "is_int8_model"], [341, 1, 1, "", "load"]], "neural_compressor.utils.utility": [[342, 2, 1, "", "CaptureOutputToFile"], [342, 2, 1, "", "CpuInfo"], [342, 1, 1, "", "Dequantize"], [342, 1, 1, "", "DequantizeWeight"], [342, 2, 1, "", "GLOBAL_STATE"], [342, 2, 1, "", "LazyImport"], [342, 2, 1, "", "MODE"], [342, 2, 1, "", "Statistics"], [342, 1, 1, "", "combine_histogram"], [342, 1, 1, "", "compute_sparsity"], [342, 1, 1, "", "dump_data_to_local"], [342, 1, 1, "", "dump_elapsed_time"], [342, 1, 1, "", "equal_dicts"], [342, 1, 1, "", "fault_tolerant_file"], [342, 1, 1, "", "get_all_fp32_data"], [342, 1, 1, "", "get_size"], [342, 1, 1, "", "get_tensor_histogram"], [342, 1, 1, "", "get_tuning_history"], [342, 1, 1, "", "load_data_from_pkl"], [342, 1, 1, "", "recover"], [342, 1, 1, "", "set_random_seed"], [342, 1, 1, "", "set_resume_from"], [342, 1, 1, "", "set_tensorboard"], [342, 1, 1, "", "set_workspace"], [342, 1, 1, "", "show_memory_info"], [342, 1, 1, "", "singleton"], [342, 1, 1, "", "str2array"], [342, 1, 1, "", "time_limit"], [342, 1, 1, "", "version1_eq_version2"], [342, 1, 1, "", "version1_gt_version2"], [342, 1, 1, "", "version1_gte_version2"], [342, 1, 1, "", "version1_lt_version2"], [342, 1, 1, "", "version1_lte_version2"]], "neural_compressor.ux": [[418, 0, 0, "-", "components"], [477, 0, 0, "-", "inc_bench"], [486, 0, 0, "-", "utils"], [512, 0, 0, "-", "web"]], "neural_compressor.ux.components": [[346, 0, 0, "-", "benchmark"], [350, 0, 0, "-", "config_generator"], [358, 0, 0, "-", "configuration_wizard"], [394, 0, 0, "-", "db_manager"], [399, 0, 0, "-", "diagnosis"], [407, 0, 0, "-", "file_browser"], [413, 0, 0, "-", "graph"], [419, 0, 0, "-", "jobs_management"], [423, 0, 0, "-", "manage_workspace"], [425, 0, 0, "-", "model"], [444, 0, 0, "-", "model_zoo"], [446, 0, 0, "-", "names_mapper"], [453, 0, 0, "-", "optimization"], [469, 0, 0, "-", "profiling"]], "neural_compressor.ux.components.benchmark": [[346, 2, 1, "", "Benchmarks"], [343, 0, 0, "-", "benchmark"], [344, 0, 0, "-", "benchmark_model"], [345, 0, 0, "-", "execute_benchmark"]], "neural_compressor.ux.components.benchmark.benchmark": [[343, 2, 1, "", "Benchmark"], [343, 2, 1, "", "DataloaderInterface"]], "neural_compressor.ux.components.benchmark.benchmark_model": [[344, 1, 1, "", "benchmark_model"], [344, 1, 1, "", "parse_args"], [344, 1, 1, "", "set_eager_execution"]], "neural_compressor.ux.components.benchmark.execute_benchmark": [[345, 1, 1, "", "benchmark_result_update"], [345, 1, 1, "", "benchmark_result_update_pytorch_script"], [345, 1, 1, "", "execute_benchmark"], [345, 1, 1, "", "execute_real_benchmark"], [345, 1, 1, "", "pytorch_script_bench_optimizations"], [345, 1, 1, "", "pytorch_script_bench_original_model"]], "neural_compressor.ux.components.config_generator": [[347, 0, 0, "-", "benchmark_config_generator"], [348, 0, 0, "-", "config_generator"], [349, 0, 0, "-", "graph_optimization_config_generator"], [351, 0, 0, "-", "mixed_precision_config_generator"], [352, 0, 0, "-", "profiling_config_generator"], [353, 0, 0, "-", "pruning_config_generator"], [354, 0, 0, "-", "quantization_config_generator"]], "neural_compressor.ux.components.config_generator.benchmark_config_generator": [[347, 2, 1, "", "BenchmarkConfigGenerator"]], "neural_compressor.ux.components.config_generator.config_generator": [[348, 2, 1, "", "ConfigGenerator"]], "neural_compressor.ux.components.config_generator.graph_optimization_config_generator": [[349, 2, 1, "", "GraphOptimizationConfigGenerator"]], "neural_compressor.ux.components.config_generator.mixed_precision_config_generator": [[351, 2, 1, "", "MixedPrecisionConfigGenerator"]], "neural_compressor.ux.components.config_generator.profiling_config_generator": [[352, 2, 1, "", "ProfilingConfigGenerator"]], "neural_compressor.ux.components.config_generator.pruning_config_generator": [[353, 2, 1, "", "PruningConfigGenerator"]], "neural_compressor.ux.components.config_generator.quantization_config_generator": [[354, 2, 1, "", "QuantizationConfigGenerator"]], "neural_compressor.ux.components.configuration_wizard": [[355, 0, 0, "-", "configuration_parser"], [356, 0, 0, "-", "get_boundary_nodes"], [357, 0, 0, "-", "get_configuration"], [359, 0, 0, "-", "params_feeder"], [360, 0, 0, "-", "pruning_config_parser"]], "neural_compressor.ux.components.configuration_wizard.configuration_parser": [[355, 2, 1, "", "ConfigurationParser"], [355, 1, 1, "", "normalize_string_list"], [355, 1, 1, "", "parse_list_value"], [355, 1, 1, "", "parse_multidim_list"]], "neural_compressor.ux.components.configuration_wizard.get_boundary_nodes": [[356, 1, 1, "", "get_boundary_nodes"]], "neural_compressor.ux.components.configuration_wizard.get_configuration": [[357, 1, 1, "", "get_predefined_configuration"], [357, 1, 1, "", "update_config_to_machine_specification"]], "neural_compressor.ux.components.configuration_wizard.params_feeder": [[359, 2, 1, "", "Feeder"], [359, 1, 1, "", "get_possible_values"]], "neural_compressor.ux.components.configuration_wizard.pruning_config_parser": [[360, 2, 1, "", "PruningConfigParser"]], "neural_compressor.ux.components.db_manager": [[361, 0, 0, "-", "db_manager"], [370, 0, 0, "-", "db_models"], [389, 0, 0, "-", "db_operations"], [395, 0, 0, "-", "params_interfaces"], [396, 0, 0, "-", "utils"]], "neural_compressor.ux.components.db_manager.db_manager": [[361, 2, 1, "", "DBManager"]], "neural_compressor.ux.components.db_manager.db_models": [[362, 0, 0, "-", "benchmark"], [363, 0, 0, "-", "benchmark_result"], [364, 0, 0, "-", "dataloader"], [365, 0, 0, "-", "dataset"], [366, 0, 0, "-", "domain"], [367, 0, 0, "-", "domain_flavour"], [368, 0, 0, "-", "example"], [369, 0, 0, "-", "framework"], [371, 0, 0, "-", "metric"], [372, 0, 0, "-", "model"], [373, 0, 0, "-", "optimization"], [374, 0, 0, "-", "optimization_type"], [375, 0, 0, "-", "precision"], [376, 0, 0, "-", "profiling"], [377, 0, 0, "-", "profiling_result"], [378, 0, 0, "-", "project"], [379, 0, 0, "-", "pruning_details"], [380, 0, 0, "-", "transform"], [381, 0, 0, "-", "tuning_details"], [382, 0, 0, "-", "tuning_history"]], "neural_compressor.ux.components.db_manager.db_models.benchmark": [[362, 2, 1, "", "Benchmark"]], "neural_compressor.ux.components.db_manager.db_models.benchmark_result": [[363, 2, 1, "", "BenchmarkResult"]], "neural_compressor.ux.components.db_manager.db_models.dataloader": [[364, 2, 1, "", "Dataloader"], [364, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.dataset": [[365, 2, 1, "", "Dataset"]], "neural_compressor.ux.components.db_manager.db_models.domain": [[366, 2, 1, "", "Domain"], [366, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.domain_flavour": [[367, 2, 1, "", "DomainFlavour"], [367, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.example": [[368, 2, 1, "", "Example"]], "neural_compressor.ux.components.db_manager.db_models.framework": [[369, 2, 1, "", "Framework"], [369, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.metric": [[371, 2, 1, "", "Metric"], [371, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.model": [[372, 2, 1, "", "Model"]], "neural_compressor.ux.components.db_manager.db_models.optimization": [[373, 2, 1, "", "Optimization"]], "neural_compressor.ux.components.db_manager.db_models.optimization_type": [[374, 2, 1, "", "OptimizationType"], [374, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.precision": [[375, 2, 1, "", "Precision"], [375, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.profiling": [[376, 2, 1, "", "Profiling"]], "neural_compressor.ux.components.db_manager.db_models.profiling_result": [[377, 2, 1, "", "ProfilingResult"]], "neural_compressor.ux.components.db_manager.db_models.project": [[378, 2, 1, "", "Project"]], "neural_compressor.ux.components.db_manager.db_models.pruning_details": [[379, 2, 1, "", "PruningDetails"]], "neural_compressor.ux.components.db_manager.db_models.transform": [[380, 2, 1, "", "Transform"], [380, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.tuning_details": [[381, 2, 1, "", "TuningDetails"]], "neural_compressor.ux.components.db_manager.db_models.tuning_history": [[382, 2, 1, "", "TuningHistory"]], "neural_compressor.ux.components.db_manager.db_operations": [[383, 0, 0, "-", "benchmark_api_interface"], [384, 0, 0, "-", "dataset_api_interface"], [385, 0, 0, "-", "db_operations"], [386, 0, 0, "-", "diagnosis_api_interface"], [387, 0, 0, "-", "dictionaries_api_interface"], [388, 0, 0, "-", "examples_api_interface"], [390, 0, 0, "-", "model_api_interface"], [391, 0, 0, "-", "optimization_api_interface"], [392, 0, 0, "-", "profiling_api_interface"], [393, 0, 0, "-", "project_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface": [[383, 2, 1, "", "BenchmarkAPIInterface"], [383, 1, 1, "", "before_delete_benchmark_entry"]], "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface": [[384, 2, 1, "", "DatasetAPIInterface"], [384, 1, 1, "", "initialize_associations"], [384, 1, 1, "", "initialize_precision_optimization_types_association"], [384, 1, 1, "", "search_in_list_of_dict"], [384, 1, 1, "", "search_in_list_of_dict_for_unique_value"], [384, 1, 1, "", "set_database_version"]], "neural_compressor.ux.components.db_manager.db_operations.db_operations": [[385, 1, 1, "", "initialize_associations"], [385, 1, 1, "", "initialize_precision_optimization_types_association"], [385, 1, 1, "", "search_in_list_of_dict"], [385, 1, 1, "", "search_in_list_of_dict_for_unique_value"], [385, 1, 1, "", "set_database_version"]], "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface": [[386, 2, 1, "", "DiagnosisAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface": [[387, 2, 1, "", "DictionariesAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface": [[388, 2, 1, "", "ExamplesAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.model_api_interface": [[390, 2, 1, "", "ModelAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface": [[391, 2, 1, "", "OptimizationAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface": [[392, 2, 1, "", "ProfilingAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.project_api_interface": [[393, 2, 1, "", "ProjectAPIInterface"]], "neural_compressor.ux.components.db_manager.params_interfaces": [[395, 2, 1, "", "BenchmarkAddParamsInterface"], [395, 2, 1, "", "BenchmarkEditParamsInterface"], [395, 2, 1, "", "DatasetAddParamsInterface"], [395, 2, 1, "", "DiagnosisOptimizationParamsInterface"], [395, 2, 1, "", "ModelAddParamsInterface"], [395, 2, 1, "", "OptimizationAddParamsInterface"], [395, 2, 1, "", "OptimizationEditParamsInterface"], [395, 2, 1, "", "ProfilingAddParamsInterface"], [395, 2, 1, "", "ProfilingEditParamsInterface"], [395, 2, 1, "", "ProfilingResultAddParamsInterface"], [395, 2, 1, "", "TuningHistoryInterface"], [395, 2, 1, "", "TuningHistoryItemInterface"]], "neural_compressor.ux.components.db_manager.utils": [[396, 1, 1, "", "get_framework_dataloaders_config"], [396, 1, 1, "", "get_framework_transforms_config"], [396, 1, 1, "", "update_dataloaders_params"]], "neural_compressor.ux.components.diagnosis": [[397, 0, 0, "-", "diagnosis"], [398, 0, 0, "-", "factory"], [400, 0, 0, "-", "onnx_diagnosis"], [402, 0, 0, "-", "op_details"], [403, 0, 0, "-", "op_entry"], [404, 0, 0, "-", "tensorflow_diagnosis"]], "neural_compressor.ux.components.diagnosis.diagnosis": [[397, 2, 1, "", "Diagnosis"]], "neural_compressor.ux.components.diagnosis.factory": [[398, 2, 1, "", "DiagnosisFactory"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis": [[401, 0, 0, "-", "onnxrt_diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis": [[401, 2, 1, "", "OnnxRtDiagnosis"]], "neural_compressor.ux.components.diagnosis.op_details": [[402, 2, 1, "", "OpActivation"], [402, 2, 1, "", "OpDetails"], [402, 2, 1, "", "OpPattern"], [402, 2, 1, "", "OpWeights"]], "neural_compressor.ux.components.diagnosis.op_entry": [[403, 2, 1, "", "OpEntry"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis": [[405, 0, 0, "-", "tensorflow_diagnosis"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis": [[405, 2, 1, "", "TensorflowDiagnosis"]], "neural_compressor.ux.components.file_browser": [[406, 0, 0, "-", "file_browser"]], "neural_compressor.ux.components.file_browser.file_browser": [[406, 1, 1, "", "create_dir_entry"], [406, 1, 1, "", "create_entry"], [406, 1, 1, "", "create_file_entry"], [406, 1, 1, "", "filter_requested_entries"], [406, 1, 1, "", "get_directory_entries"], [406, 1, 1, "", "get_filter_value"], [406, 1, 1, "", "get_non_hidden_directory_entries"], [406, 1, 1, "", "get_requested_path"], [406, 1, 1, "", "get_setting_value"], [406, 1, 1, "", "is_dataset_or_directory_entry"], [406, 1, 1, "", "is_directory_entry"], [406, 1, 1, "", "is_model_or_directory_entry"], [406, 1, 1, "", "should_show_files"], [406, 1, 1, "", "should_show_only_model_files"], [406, 1, 1, "", "sort_entries"]], "neural_compressor.ux.components.graph": [[408, 0, 0, "-", "attribute"], [409, 0, 0, "-", "collapser"], [410, 0, 0, "-", "edge"], [411, 0, 0, "-", "graph"], [412, 0, 0, "-", "graph_reader"], [414, 0, 0, "-", "node"], [415, 0, 0, "-", "reader"]], "neural_compressor.ux.components.graph.attribute": [[408, 2, 1, "", "Attribute"]], "neural_compressor.ux.components.graph.collapser": [[409, 2, 1, "", "Collapser"]], "neural_compressor.ux.components.graph.edge": [[410, 2, 1, "", "Edge"]], "neural_compressor.ux.components.graph.graph": [[411, 2, 1, "", "Graph"]], "neural_compressor.ux.components.graph.graph_reader": [[412, 2, 1, "", "GraphReader"]], "neural_compressor.ux.components.graph.node": [[414, 2, 1, "", "GroupNode"], [414, 2, 1, "", "Node"]], "neural_compressor.ux.components.graph.reader": [[416, 0, 0, "-", "onnxrt_reader"], [417, 0, 0, "-", "tensorflow_reader"]], "neural_compressor.ux.components.graph.reader.onnxrt_reader": [[416, 2, 1, "", "OnnxrtReader"]], "neural_compressor.ux.components.graph.reader.tensorflow_reader": [[417, 2, 1, "", "TensorflowReader"]], "neural_compressor.ux.components.jobs_management": [[420, 0, 0, "-", "jobs_control_queue"], [421, 0, 0, "-", "jobs_manager"], [422, 0, 0, "-", "request"]], "neural_compressor.ux.components.manage_workspace": [[423, 1, 1, "", "get_default_path"]], "neural_compressor.ux.components.model": [[424, 0, 0, "-", "domain"], [426, 0, 0, "-", "model"], [427, 0, 0, "-", "model_type_getter"], [428, 0, 0, "-", "onnxrt"], [430, 0, 0, "-", "pytorch"], [432, 0, 0, "-", "repository"], [433, 0, 0, "-", "shape"], [435, 0, 0, "-", "tensorflow"]], "neural_compressor.ux.components.model.domain": [[424, 2, 1, "", "Domain"]], "neural_compressor.ux.components.model.model": [[426, 2, 1, "", "Model"]], "neural_compressor.ux.components.model.model_type_getter": [[427, 1, 1, "", "get_model_type"]], "neural_compressor.ux.components.model.onnxrt": [[429, 0, 0, "-", "model"]], "neural_compressor.ux.components.model.onnxrt.model": [[429, 2, 1, "", "OnnxrtModel"], [429, 1, 1, "", "remove_number_of_samples_from_shape"]], "neural_compressor.ux.components.model.pytorch": [[431, 0, 0, "-", "model"]], "neural_compressor.ux.components.model.pytorch.model": [[431, 2, 1, "", "PyTorchScriptModel"]], "neural_compressor.ux.components.model.repository": [[432, 2, 1, "", "ModelRepository"]], "neural_compressor.ux.components.model.shape": [[433, 2, 1, "", "Shape"]], "neural_compressor.ux.components.model.tensorflow": [[434, 0, 0, "-", "frozen_pb"], [436, 0, 0, "-", "keras"], [437, 0, 0, "-", "meta_graph"], [438, 0, 0, "-", "model"], [439, 0, 0, "-", "saved_model"], [440, 0, 0, "-", "utils"]], "neural_compressor.ux.components.model.tensorflow.frozen_pb": [[434, 2, 1, "", "FrozenPbModel"]], "neural_compressor.ux.components.model.tensorflow.keras": [[436, 2, 1, "", "KerasModel"]], "neural_compressor.ux.components.model.tensorflow.meta_graph": [[437, 2, 1, "", "MetaGraphModel"]], "neural_compressor.ux.components.model.tensorflow.model": [[438, 2, 1, "", "TensorflowModel"]], "neural_compressor.ux.components.model.tensorflow.saved_model": [[439, 2, 1, "", "SavedModelModel"]], "neural_compressor.ux.components.model.tensorflow.utils": [[440, 1, 1, "", "get_input_shape"]], "neural_compressor.ux.components.model_zoo": [[441, 0, 0, "-", "download_config"], [442, 0, 0, "-", "download_model"], [443, 0, 0, "-", "downloader"], [445, 0, 0, "-", "list_models"]], "neural_compressor.ux.components.model_zoo.download_config": [[441, 1, 1, "", "download_config"]], "neural_compressor.ux.components.model_zoo.download_model": [[442, 1, 1, "", "download_model"]], "neural_compressor.ux.components.model_zoo.downloader": [[443, 2, 1, "", "Downloader"]], "neural_compressor.ux.components.model_zoo.list_models": [[445, 1, 1, "", "check_version"], [445, 1, 1, "", "get_available_models"], [445, 1, 1, "", "get_framework_module_name"], [445, 1, 1, "", "get_installed_frameworks"], [445, 1, 1, "", "list_models"], [445, 1, 1, "", "validate_model_list"]], "neural_compressor.ux.components.names_mapper": [[447, 0, 0, "-", "names_mapper"]], "neural_compressor.ux.components.names_mapper.names_mapper": [[447, 2, 1, "", "MappingDirection"], [447, 2, 1, "", "NamesMapper"]], "neural_compressor.ux.components.optimization": [[453, 2, 1, "", "Optimizations"], [448, 0, 0, "-", "execute_optimization"], [449, 0, 0, "-", "factory"], [451, 0, 0, "-", "graph_optimizer"], [454, 0, 0, "-", "mixed_precision"], [457, 0, 0, "-", "neural_coder_optimization"], [459, 0, 0, "-", "optimization"], [460, 0, 0, "-", "pruning"], [463, 0, 0, "-", "tune"], [466, 0, 0, "-", "tuning_history"]], "neural_compressor.ux.components.optimization.execute_optimization": [[448, 1, 1, "", "check_if_collect_tuning_history"], [448, 1, 1, "", "execute_optimization"], [448, 1, 1, "", "execute_optimization_pytorch_script"], [448, 1, 1, "", "execute_optimization_regular"], [448, 1, 1, "", "parse_logs"], [448, 1, 1, "", "parse_model_data_to_bench_names"]], "neural_compressor.ux.components.optimization.factory": [[449, 2, 1, "", "OptimizationFactory"]], "neural_compressor.ux.components.optimization.graph_optimizer": [[450, 0, 0, "-", "graph_optimization"], [452, 0, 0, "-", "optimize_model"]], "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization": [[450, 2, 1, "", "GraphOptimization"]], "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model": [[452, 1, 1, "", "optimize_graph"], [452, 1, 1, "", "optimize_graph_config"], [452, 1, 1, "", "parse_args"], [452, 1, 1, "", "set_eager_execution"]], "neural_compressor.ux.components.optimization.mixed_precision": [[455, 0, 0, "-", "mixed_precision"], [456, 0, 0, "-", "optimize_model"]], "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision": [[455, 2, 1, "", "MixedPrecision"]], "neural_compressor.ux.components.optimization.mixed_precision.optimize_model": [[456, 1, 1, "", "optimize_graph"], [456, 1, 1, "", "optimize_graph_config"], [456, 1, 1, "", "parse_args"], [456, 1, 1, "", "set_eager_execution"]], "neural_compressor.ux.components.optimization.neural_coder_optimization": [[458, 0, 0, "-", "optimize_model"]], "neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model": [[458, 1, 1, "", "optimize_pt_script"]], "neural_compressor.ux.components.optimization.optimization": [[459, 2, 1, "", "DataloaderInterface"], [459, 2, 1, "", "Optimization"], [459, 2, 1, "", "OptimizationInterface"]], "neural_compressor.ux.components.optimization.pruning": [[461, 0, 0, "-", "optimize_model"], [462, 0, 0, "-", "pruning"]], "neural_compressor.ux.components.optimization.pruning.optimize_model": [[461, 1, 1, "", "optimize_model"], [461, 1, 1, "", "parse_args"]], "neural_compressor.ux.components.optimization.pruning.pruning": [[462, 2, 1, "", "Pruning"]], "neural_compressor.ux.components.optimization.tune": [[464, 0, 0, "-", "tune_model"], [465, 0, 0, "-", "tuning"]], "neural_compressor.ux.components.optimization.tune.tune_model": [[464, 1, 1, "", "parse_args"], [464, 1, 1, "", "set_eager_execution"], [464, 1, 1, "", "tune_model"]], "neural_compressor.ux.components.optimization.tune.tuning": [[465, 2, 1, "", "AccuracyCriterion"], [465, 2, 1, "", "Tuning"], [465, 2, 1, "", "TuningDetails"]], "neural_compressor.ux.components.optimization.tuning_history": [[466, 2, 1, "", "TuningHistory"], [466, 2, 1, "", "Watcher"], [466, 1, 1, "", "tuning_history"], [466, 1, 1, "", "tuning_history_path"]], "neural_compressor.ux.components.profiling": [[467, 0, 0, "-", "execute_profiling"], [468, 0, 0, "-", "factory"], [470, 0, 0, "-", "profile_model"], [471, 0, 0, "-", "profiler"], [472, 0, 0, "-", "profiling"], [474, 0, 0, "-", "tensorflow_profiler"]], "neural_compressor.ux.components.profiling.execute_profiling": [[467, 1, 1, "", "execute_profiling"], [467, 1, 1, "", "execute_real_profiling"]], "neural_compressor.ux.components.profiling.factory": [[468, 2, 1, "", "ProfilerFactory"]], "neural_compressor.ux.components.profiling.profile_model": [[470, 1, 1, "", "load_profiling_details"], [470, 1, 1, "", "parse_args"]], "neural_compressor.ux.components.profiling.profiler": [[471, 2, 1, "", "Profiler"]], "neural_compressor.ux.components.profiling.profiling": [[472, 2, 1, "", "DataloaderInterface"], [472, 2, 1, "", "Profiling"]], "neural_compressor.ux.components.profiling.tensorflow_profiler": [[473, 0, 0, "-", "factory"], [475, 0, 0, "-", "profiler"], [476, 0, 0, "-", "utils"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.factory": [[473, 2, 1, "", "ProfilerFactory"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler": [[475, 2, 1, "", "Profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.utils": [[476, 1, 1, "", "delete_assign"]], "neural_compressor.ux.inc_bench": [[477, 1, 1, "", "main"], [477, 1, 1, "", "prepare_environment"]], "neural_compressor.ux.utils": [[479, 0, 0, "-", "consts"], [480, 0, 0, "-", "environment"], [481, 0, 0, "-", "exceptions"], [482, 0, 0, "-", "executor"], [483, 0, 0, "-", "expiring_dict"], [484, 0, 0, "-", "github_info"], [485, 0, 0, "-", "hw_info"], [487, 0, 0, "-", "json_serializer"], [488, 0, 0, "-", "logger"], [489, 0, 0, "-", "parser"], [490, 0, 0, "-", "proc"], [491, 0, 0, "-", "processes"], [492, 0, 0, "-", "singleton"], [493, 0, 0, "-", "status_updates"], [494, 0, 0, "-", "templates"], [497, 0, 0, "-", "utils"], [502, 0, 0, "-", "workload"], [508, 0, 0, "-", "yaml_utils"]], "neural_compressor.ux.utils.consts": [[479, 2, 1, "", "DomainFlavours"], [479, 2, 1, "", "Domains"], [479, 2, 1, "", "ExecutionStatus"], [479, 2, 1, "", "Frameworks"], [479, 2, 1, "", "OptimizationTypes"], [479, 2, 1, "", "Precisions"], [479, 2, 1, "", "Strategies"]], "neural_compressor.ux.utils.environment": [[480, 2, 1, "", "Environment"]], "neural_compressor.ux.utils.exceptions": [[481, 5, 1, "", "AccessDeniedException"], [481, 5, 1, "", "ClientErrorException"], [481, 5, 1, "", "InternalException"], [481, 5, 1, "", "NotFoundException"]], "neural_compressor.ux.utils.executor": [[482, 2, 1, "", "Executor"]], "neural_compressor.ux.utils.expiring_dict": [[483, 2, 1, "", "ExpiringDict"], [483, 2, 1, "", "ExpiringDictItem"]], "neural_compressor.ux.utils.github_info": [[484, 2, 1, "", "GithubInfo"]], "neural_compressor.ux.utils.hw_info": [[485, 2, 1, "", "HWInfo"], [485, 1, 1, "", "get_bios_version"], [485, 1, 1, "", "get_distribution"], [485, 1, 1, "", "get_framework_dependency_info"], [485, 1, 1, "", "get_framework_info"], [485, 1, 1, "", "get_kernel_version"], [485, 1, 1, "", "get_number_of_sockets"], [485, 1, 1, "", "is_turbo_boost_enabled"]], "neural_compressor.ux.utils.json_serializer": [[487, 2, 1, "", "JsonSerializer"]], "neural_compressor.ux.utils.logger": [[488, 1, 1, "", "change_log_level"]], "neural_compressor.ux.utils.parser": [[489, 2, 1, "", "AccuracyParser"], [489, 2, 1, "", "BenchmarkParserFactory"], [489, 2, 1, "", "OptimizationParser"], [489, 2, 1, "", "Parser"], [489, 2, 1, "", "PerformanceParser"], [489, 2, 1, "", "ProfilingParser"]], "neural_compressor.ux.utils.proc": [[490, 2, 1, "", "Proc"]], "neural_compressor.ux.utils.processes": [[491, 2, 1, "", "NCProcesses"]], "neural_compressor.ux.utils.singleton": [[492, 2, 1, "", "Singleton"]], "neural_compressor.ux.utils.status_updates": [[493, 1, 1, "", "get_status_update_function"]], "neural_compressor.ux.utils.templates": [[495, 0, 0, "-", "metric"], [496, 0, 0, "-", "workdir"]], "neural_compressor.ux.utils.templates.metric": [[495, 2, 1, "", "Metric"]], "neural_compressor.ux.utils.templates.workdir": [[496, 2, 1, "", "Workdir"]], "neural_compressor.ux.utils.utils": [[497, 1, 1, "", "are_archive_filenames_valid"], [497, 1, 1, "", "check_module"], [497, 1, 1, "", "deprecated"], [497, 1, 1, "", "determine_ip"], [497, 1, 1, "", "export_to_csv"], [497, 1, 1, "", "filter_transforms"], [497, 1, 1, "", "get_dataset_path"], [497, 1, 1, "", "get_default_pruning_config_path"], [497, 1, 1, "", "get_file_extension"], [497, 1, 1, "", "get_framework_from_path"], [497, 1, 1, "", "get_height_width_from_size"], [497, 1, 1, "", "get_metrics_dict"], [497, 1, 1, "", "get_model_zoo_config_path"], [497, 1, 1, "", "get_model_zoo_model_path"], [497, 1, 1, "", "get_module_version"], [497, 1, 1, "", "get_predefined_config_path"], [497, 1, 1, "", "get_shape_from_transforms"], [497, 1, 1, "", "get_size"], [497, 1, 1, "", "is_dataset_file"], [497, 1, 1, "", "is_development_env"], [497, 1, 1, "", "is_hidden"], [497, 1, 1, "", "load_dataloader_config"], [497, 1, 1, "", "load_help_nc_params"], [497, 1, 1, "", "load_metrics_config"], [497, 1, 1, "", "load_model_config"], [497, 1, 1, "", "load_model_wise_params"], [497, 1, 1, "", "load_precisions_config"], [497, 1, 1, "", "load_pruning_details_config"], [497, 1, 1, "", "load_transforms_config"], [497, 1, 1, "", "load_transforms_filter_config"], [497, 1, 1, "", "normalize_domain"], [497, 1, 1, "", "normalize_framework"], [497, 1, 1, "", "normalize_string"], [497, 1, 1, "", "parse_bool_value"], [497, 1, 1, "", "parse_to_float_list"], [497, 1, 1, "", "parse_to_string_list"], [497, 1, 1, "", "parse_version"], [497, 1, 1, "", "release_tag"], [497, 1, 1, "", "replace_with_values"], [497, 1, 1, "", "safe_extract_archive"], [497, 1, 1, "", "verify_file_path"]], "neural_compressor.ux.utils.workload": [[498, 0, 0, "-", "config"], [499, 0, 0, "-", "dataloader"], [500, 0, 0, "-", "evaluation"], [501, 0, 0, "-", "graph_optimization"], [503, 0, 0, "-", "mixed_precision"], [504, 0, 0, "-", "model"], [505, 0, 0, "-", "pruning"], [506, 0, 0, "-", "quantization"], [507, 0, 0, "-", "tuning"]], "neural_compressor.ux.utils.workload.config": [[498, 2, 1, "", "Config"]], "neural_compressor.ux.utils.workload.dataloader": [[499, 2, 1, "", "Dataloader"], [499, 2, 1, "", "Dataset"], [499, 2, 1, "", "Filter"], [499, 2, 1, "", "LabelBalance"], [499, 2, 1, "", "Transform"]], "neural_compressor.ux.utils.workload.evaluation": [[500, 2, 1, "", "Accuracy"], [500, 2, 1, "", "Configs"], [500, 2, 1, "", "Evaluation"], [500, 2, 1, "", "Metric"], [500, 2, 1, "", "Performance"], [500, 2, 1, "", "Postprocess"], [500, 2, 1, "", "PostprocessSchema"]], "neural_compressor.ux.utils.workload.graph_optimization": [[501, 2, 1, "", "GraphOptimization"]], "neural_compressor.ux.utils.workload.mixed_precision": [[503, 2, 1, "", "MixedPrecision"]], "neural_compressor.ux.utils.workload.model": [[504, 2, 1, "", "Model"]], "neural_compressor.ux.utils.workload.pruning": [[505, 2, 1, "", "AdamOptimizer"], [505, 2, 1, "", "AdamWOptimizer"], [505, 2, 1, "", "Approach"], [505, 2, 1, "", "Criterion"], [505, 2, 1, "", "CrossEntropyLossCriterion"], [505, 2, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [505, 2, 1, "", "KnowledgeDistillationLossCriterion"], [505, 2, 1, "", "Optimizer"], [505, 2, 1, "", "Pruning"], [505, 2, 1, "", "SGDOptimizer"], [505, 2, 1, "", "SelfKnowledgeDistillationLoss"], [505, 2, 1, "", "SparseCategoricalCrossentropyCriterion"], [505, 2, 1, "", "Train"], [505, 2, 1, "", "WeightCompressionApproach"], [505, 1, 1, "", "parse_dict_value_to_float"], [505, 1, 1, "", "parse_dict_value_to_int"]], "neural_compressor.ux.utils.workload.quantization": [[506, 2, 1, "", "Advance"], [506, 2, 1, "", "Calibration"], [506, 2, 1, "", "Quantization"], [506, 2, 1, "", "WiseConfig"], [506, 2, 1, "", "WiseConfigDetails"]], "neural_compressor.ux.utils.workload.tuning": [[507, 2, 1, "", "AccCriterion"], [507, 2, 1, "", "Diagnosis"], [507, 2, 1, "", "ExitPolicy"], [507, 2, 1, "", "MultiObjectives"], [507, 2, 1, "", "Strategy"], [507, 2, 1, "", "Tuning"], [507, 2, 1, "", "Workspace"]], "neural_compressor.ux.utils.yaml_utils": [[508, 1, 1, "", "float_representer"], [508, 1, 1, "", "pruner_representer"]], "neural_compressor.ux.web": [[509, 0, 0, "-", "communication"], [510, 0, 0, "-", "configuration"], [511, 0, 0, "-", "exceptions"], [513, 0, 0, "-", "router"], [514, 0, 0, "-", "server"], [517, 0, 0, "-", "service"]], "neural_compressor.ux.web.communication": [[509, 2, 1, "", "Message"], [509, 2, 1, "", "MessageQueue"], [509, 2, 1, "", "Request"], [509, 2, 1, "", "Response"], [509, 1, 1, "", "create_simple_response"]], "neural_compressor.ux.web.configuration": [[510, 2, 1, "", "Configuration"]], "neural_compressor.ux.web.exceptions": [[511, 5, 1, "", "ServiceNotFoundException"]], "neural_compressor.ux.web.router": [[513, 2, 1, "", "DeferredRoutingDefinition"], [513, 2, 1, "", "DeferredSubprocessRoutingDefinition"], [513, 2, 1, "", "RealtimeRoutingDefinition"], [513, 2, 1, "", "Router"], [513, 2, 1, "", "RoutingDefinition"], [513, 1, 1, "", "find_pattern_in_graph"], [513, 1, 1, "", "get_model_graph"], [513, 1, 1, "", "get_system_info"]], "neural_compressor.ux.web.server": [[514, 1, 1, "", "allow_api_call"], [514, 1, 1, "", "block_iframe"], [514, 1, 1, "", "block_sniffing"], [514, 1, 1, "", "build_parameters"], [514, 1, 1, "", "disable_cache"], [514, 1, 1, "", "get_tls_args"], [514, 1, 1, "", "handle_api_call"], [514, 1, 1, "", "page_not_found"], [514, 1, 1, "", "require_api_token"], [514, 1, 1, "", "root"], [514, 1, 1, "", "run_server"], [514, 1, 1, "", "web_socket_publisher"]], "neural_compressor.ux.web.service": [[515, 0, 0, "-", "benchmark"], [516, 0, 0, "-", "history_snapshot_parser"], [518, 0, 0, "-", "model"], [519, 0, 0, "-", "optimization"], [520, 0, 0, "-", "profiling"], [521, 0, 0, "-", "request_data_processor"], [522, 0, 0, "-", "response_generator"], [523, 0, 0, "-", "workload"]], "neural_compressor.ux.web.service.benchmark": [[515, 2, 1, "", "BenchmarkService"]], "neural_compressor.ux.web.service.history_snapshot_parser": [[516, 2, 1, "", "HistorySnapshotParser"]], "neural_compressor.ux.web.service.model": [[518, 2, 1, "", "ModelService"]], "neural_compressor.ux.web.service.optimization": [[519, 2, 1, "", "OptimizationService"]], "neural_compressor.ux.web.service.profiling": [[520, 2, 1, "", "ProfilingService"]], "neural_compressor.ux.web.service.request_data_processor": [[521, 2, 1, "", "RequestDataProcessor"]], "neural_compressor.ux.web.service.response_generator": [[522, 2, 1, "", "ResponseGenerator"]], "neural_compressor.ux.web.service.workload": [[523, 2, 1, "", "WorkloadService"]]}, "objtypes": {"0": "py:module", "1": "py:function", "2": "py:class", "3": "py:attribute", "4": "py:data", "5": "py:exception"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "function", "Python function"], "2": ["py", "class", "Python class"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "data", "Python data"], "5": ["py", "exception", "Python exception"]}, "titleterms": {"644ec953a7dc_pruning_support": 0, "6ece06672ed3_v1_14": 1, "modul": [1, 5, 6, 8, 15, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 100, 101, 102, 103, 105, 106, 107, 108, 111, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 154, 155, 156, 157, 158, 161, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 202, 203, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 219, 220, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 238, 239, 242, 244, 245, 246, 248, 249, 250, 251, 252, 254, 255, 257, 258, 259, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 273, 274, 275, 276, 279, 280, 281, 284, 285, 286, 287, 288, 289, 290, 292, 293, 295, 296, 297, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 326, 327, 328, 329, 330, 332, 333, 335, 337, 338, 339, 340, 341, 342, 343, 344, 345, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 390, 391, 392, 393, 395, 396, 397, 398, 401, 402, 403, 405, 406, 408, 409, 410, 411, 412, 414, 416, 417, 423, 424, 426, 427, 429, 431, 432, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 445, 447, 448, 449, 450, 452, 455, 456, 458, 459, 461, 462, 464, 465, 466, 467, 468, 470, 471, 472, 473, 475, 476, 477, 479, 480, 481, 482, 483, 484, 485, 487, 488, 489, 490, 491, 492, 493, 495, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523], "content": [1, 5, 6, 7, 8, 15, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 100, 101, 102, 103, 105, 106, 107, 108, 111, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 248, 249, 250, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 284, 285, 286, 287, 288, 289, 290, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 326, 327, 328, 329, 330, 332, 333, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 390, 391, 392, 393, 395, 396, 397, 398, 401, 402, 403, 405, 406, 408, 409, 410, 411, 412, 414, 416, 417, 423, 424, 426, 427, 429, 431, 432, 433, 434, 436, 437, 438, 439, 440, 441, 442, 443, 445, 447, 448, 449, 450, 452, 453, 455, 456, 458, 459, 461, 462, 464, 465, 466, 467, 468, 470, 471, 472, 473, 475, 476, 477, 479, 480, 481, 482, 483, 484, 485, 487, 488, 489, 490, 491, 492, 493, 495, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 513, 514, 515, 516, 518, 519, 520, 521, 522, 523, 531, 547], "function": [1, 5, 6, 17, 36, 42, 43, 65, 66, 68, 102, 103, 114, 116, 144, 145, 146, 149, 150, 151, 153, 156, 158, 161, 164, 166, 167, 168, 169, 170, 172, 182, 190, 192, 196, 199, 200, 201, 204, 206, 207, 208, 209, 211, 213, 214, 216, 219, 222, 230, 232, 236, 239, 240, 241, 243, 244, 245, 248, 249, 250, 251, 254, 255, 257, 258, 259, 260, 261, 268, 275, 279, 284, 285, 286, 288, 292, 293, 295, 296, 297, 298, 299, 300, 304, 308, 310, 311, 315, 323, 327, 329, 330, 332, 335, 336, 338, 339, 341, 342, 344, 345, 355, 356, 357, 359, 364, 366, 367, 369, 371, 374, 375, 380, 383, 384, 385, 396, 406, 423, 427, 429, 440, 441, 442, 445, 448, 452, 456, 458, 461, 464, 466, 467, 470, 476, 477, 485, 488, 493, 497, 505, 508, 509, 513, 514, 554], "6f0d0f71d92e_v1_13": 2, "9e89549a08c8_v1_11": 3, "block_mask": 4, "env": 5, "neural_compressor": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524], "adaptor": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 532, 533], "class": [6, 8, 15, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 100, 101, 102, 103, 105, 106, 107, 108, 111, 113, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 145, 146, 148, 151, 152, 153, 154, 155, 157, 158, 161, 164, 165, 166, 167, 168, 169, 171, 172, 174, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 220, 222, 223, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 251, 252, 253, 254, 257, 260, 261, 262, 263, 264, 265, 267, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 280, 281, 284, 286, 287, 288, 289, 290, 292, 295, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 326, 327, 328, 329, 330, 332, 333, 336, 337, 338, 339, 340, 342, 343, 346, 347, 348, 349, 351, 352, 353, 354, 355, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 386, 387, 388, 390, 391, 392, 393, 395, 397, 398, 401, 402, 403, 405, 408, 409, 410, 411, 412, 414, 416, 417, 424, 426, 429, 431, 432, 433, 434, 436, 437, 438, 439, 443, 447, 449, 450, 453, 455, 459, 462, 465, 466, 468, 471, 472, 473, 475, 479, 480, 482, 483, 484, 485, 487, 489, 490, 491, 492, 495, 496, 498, 499, 500, 501, 503, 504, 505, 506, 507, 509, 510, 513, 515, 516, 518, 519, 520, 521, 522, 523, 532], "subpackag": [7, 20, 85, 109, 110, 112, 160, 162, 176, 201, 241, 253, 277, 291, 319, 394, 399, 413, 418, 425, 453, 469, 478, 486, 512], "submodul": [7, 16, 20, 32, 49, 74, 85, 93, 99, 104, 109, 110, 112, 115, 128, 141, 147, 153, 159, 160, 162, 163, 177, 184, 196, 200, 204, 211, 218, 224, 236, 240, 243, 247, 253, 260, 266, 272, 278, 282, 291, 298, 302, 319, 325, 331, 336, 346, 350, 358, 370, 389, 394, 399, 400, 404, 407, 413, 415, 418, 419, 425, 428, 430, 435, 444, 446, 451, 453, 454, 457, 460, 463, 469, 474, 478, 486, 494, 502, 512, 517], "packag": [7, 32, 153, 184, 196, 200, 201, 204, 211, 224, 236, 240, 241, 243, 253, 260, 272, 277, 278, 298, 302, 319, 336, 346, 453, 578, 580, 582, 583], "kera": [8, 436], "keras_util": [9, 10, 11, 12, 13, 14], "conv2d": 9, "dens": 10, "depthwise_conv2d": 11, "quantiz": [13, 41, 289, 311, 506, 528, 531, 544, 553, 559, 562, 565, 574, 585, 592, 593, 594, 597, 603], "separable_conv2d": 14, "mxnet": [15, 550, 564, 593, 599, 603], "mxnet_util": [16, 17], "util": [17, 42, 144, 150, 170, 251, 324, 325, 326, 327, 328, 329, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 396, 440, 476, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 535], "onnxrt": [18, 428, 429, 550, 564, 599], "ox_util": [19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42], "calibr": 19, "oper": [21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40], "activ": 21, "argmax": 22, "attent": 23, "binary_op": 24, "concat": 25, "conv": 26, "direct_q8": 27, "embed_layernorm": 28, "gather": 29, "gavgpool": 30, "gemm": 31, "lstm": 33, "matmul": [34, 597], "maxpool": 35, "op": 36, "pad": 37, "pool": 38, "resiz": 39, "split": 40, "pytorch": [43, 341, 430, 431, 550, 554, 564, 566, 593, 594, 598, 599, 603], "queri": [44, 532], "tensorflow": [45, 434, 435, 436, 437, 438, 439, 440, 550, 554, 564, 566, 593, 594, 598, 599, 603], "tf_util": [46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144], "graph_convert": 46, "graph_converter_without_calib": 47, "graph_rewrit": [48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107], "bf16": [48, 49], "bf16_convert": [48, 145], "gener": [50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83], "convert_add_to_biasadd": 50, "convert_layout": 51, "convert_leakyrelu": 52, "convert_nan_to_random": 53, "convert_placeholder_to_const": 54, "dequantize_cast_optim": 55, "dilated_contract": 56, "dummy_biasadd": 57, "expanddims_optim": 58, "fetch_weight_from_reshap": 59, "fold_batch_norm": 60, "fold_const": 61, "fuse_biasadd_add": 62, "fuse_column_wise_mul": 63, "fuse_conv_with_math": 64, "fuse_decomposed_bn": 65, "fuse_decomposed_in": 66, "fuse_gelu": 67, "fuse_layer_norm": 68, "fuse_pad_with_conv": 69, "fuse_pad_with_fp32_conv": 70, "fuse_reshape_transpos": 71, "graph_cse_optim": 72, "grappler_pass": 73, "insert_print_nod": 75, "move_squeeze_after_relu": 76, "pre_optim": 77, "remove_training_nod": 78, "rename_batch_norm": 79, "split_shared_input": 80, "strip_equivalent_nod": 81, "strip_unused_nod": 82, "switch_optim": 83, "graph_bas": 84, "int8": [86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 556, 603], "freeze_fake_qu": 86, "freeze_valu": 87, "freeze_value_without_calib": 88, "fuse_conv_redundant_dequant": 89, "fuse_conv_requant": 90, "fuse_matmul_redundant_dequant": 91, "fuse_matmul_requant": 92, "meta_op_optim": 94, "post_hostconst_convert": 95, "post_quantized_op_cs": 96, "rnn_convert": 97, "scale_propag": 98, "onnx": [99, 100, 101, 102, 103, 534, 562, 566, 593, 603], "onnx_graph": 100, "onnx_nod": 101, "onnx_schema": 102, "tf2onnx_util": 103, "qdq": [104, 105, 106, 107, 121, 122, 123, 124, 125, 126, 127, 128, 129, 603], "insert_qdq_pattern": 105, "merge_duplicated_qdq": 106, "share_qdq_y_pattern": 107, "graph_util": 108, "quantize_graph": [110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136], "qat": [111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 603], "fake_quant": 111, "quantize_config": 113, "quantize_help": 114, "quantize_lay": [115, 116, 117, 118, 119], "optimize_lay": 116, "quantize_layer_add": 117, "quantize_layer_bas": 118, "quantize_layer_bn": 119, "quantize_wrapp": 120, "fuse_qdq_bn": 121, "fuse_qdq_concatv2": 122, "fuse_qdq_conv": 123, "fuse_qdq_deconv": 124, "fuse_qdq_in": 125, "fuse_qdq_matmul": 126, "fuse_qdq_pool": 127, "optimize_qdq": 129, "quantize_graph_bas": 130, "quantize_graph_bn": 131, "quantize_graph_concatv2": 132, "quantize_graph_conv": 133, "quantize_graph_for_intel_cpu": 134, "quantize_graph_matmul": 135, "quantize_graph_pool": 136, "quantize_graph_common": 137, "tf2onnx_convert": 138, "transform_graph": [139, 140, 141, 142, 143], "bias_correct": 139, "graph_transform_bas": 140, "insert_log": 142, "rerange_quantized_concat": 143, "torch_util": [145, 146, 147, 148, 149, 150, 216], "hawq_metr": 146, "smooth_quant": [148, 154], "symbolic_trac": 149, "algorithm": [151, 152, 153, 154, 155, 597, 600], "fast_bias_correct": 152, "weight_correct": 155, "benchmark": [156, 208, 343, 344, 345, 346, 362, 515, 538, 547, 548, 565, 592], "compress": [157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 218, 219, 539], "callback": 157, "distil": [158, 159, 246, 552, 553, 565, 592, 603], "criterion": [158, 209], "pruner": [161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 275, 286], "criteria": [161, 590, 600], "model_slim": [163, 164, 165], "pattern_analyz": 164, "weight_slim": 165, "pattern": [166, 278, 279, 280, 284, 590], "reg": 168, "schedul": [169, 288, 290, 590], "conf": [171, 172, 173, 174], "config": [171, 175, 498, 540, 549, 550, 587], "dotdict": 172, "pythonic_config": 174, "contrib": [176, 177, 178, 179], "strategi": [177, 178, 179, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 545, 596, 600], "sigopt": [178, 596, 600], "tpe": [179, 600], "data": [180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 555], "dataload": [180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 210, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 364, 499, 549, 550], "base_dataload": [180, 220], "default_dataload": [182, 222], "fetcher": [183, 223], "attribut": [184, 192, 201, 232, 241, 253, 277, 302, 330, 336, 408, 526], "mxnet_dataload": [185, 225], "onnxrt_dataload": [186, 226], "pytorch_dataload": [187, 227], "sampler": [188, 228], "tensorflow_dataload": [189, 229], "dataset": [190, 191, 192, 193, 194, 195, 196, 197, 230, 231, 232, 233, 234, 235, 236, 237, 365, 547, 550, 560], "bert_dataset": [190, 230], "coco_dataset": [191, 231], "dummy_dataset": [193, 233], "dummy_dataset_v2": [194, 234], "imagenet_dataset": [195, 235], "style_transfer_dataset": [197, 237], "filter": [198, 199, 200, 238, 239, 240], "coco_filt": [198, 238], "transform": [202, 203, 204, 205, 206, 207, 242, 243, 244, 245, 380, 560, 599], "coco_transform": 202, "imagenet_transform": [203, 242], "postprocess": [205, 215], "token": [206, 244], "experiment": [208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290], "common": [209, 210, 211, 212, 213, 214, 215, 216, 528, 557], "metric": [212, 254, 255, 256, 257, 258, 259, 260, 261, 292, 293, 294, 295, 296, 297, 298, 299, 371, 495, 560, 564], "model": [213, 301, 302, 303, 304, 305, 306, 307, 308, 309, 372, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 504, 518, 542, 547, 556, 559, 562, 565, 567, 574, 590, 597, 603], "optim": [214, 373, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 519, 547, 575, 585, 588, 601], "compon": [217, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476], "prune": [219, 276, 287, 460, 461, 462, 505, 547, 565, 590, 592, 603], "export": [247, 248, 249, 250, 251, 556], "qlinear2qdq": 248, "tf2onnx": 249, "torch2onnx": 250, "graph_optim": [252, 450, 451, 452, 501], "bleu": [254, 292], "bleu_util": [255, 293], "coco_label_map": [256, 294], "coco_tool": [257, 295], "evaluate_squad": [258, 296], "f1": [259, 297], "mixed_precis": [262, 454, 455, 456, 503], "model_convers": 263, "na": [264, 265, 266, 267, 268, 269, 529, 547, 592], "basic_na": 264, "dyna": 265, "nas_util": 268, "search_algorithm": 269, "pruner_legaci": [270, 271, 272, 273, 274, 275], "gradient_sensit": 270, "group_lasso": 271, "magnitud": 273, "pattern_lock": 274, "pruning_recip": [277, 278, 279, 280], "tile_pattern": 280, "pruning_v2": 281, "pytorch_prun": [282, 283, 284, 285, 286, 287, 288], "logger": [283, 339, 488], "prune_util": 285, "mix_precis": 300, "base_model": 301, "keras_model": 303, "mxnet_model": 305, "nets_factori": 306, "onnx_model": 307, "tensorflow_model": 308, "torch_model": 309, "object": [310, 543, 587], "auto": [312, 579, 585, 594, 597, 600], "auto_mixed_precis": 313, "basic": [314, 529, 600], "bayesian": [315, 600], "conserv": [316, 600], "exhaust": [317, 600], "hawq_v2": [318, 600], "mse": [320, 600], "mse_v2": [321, 600], "random": [322, 600], "constant": [324, 334], "tuning_sampl": 326, "tuning_spac": 327, "tuning_struct": 328, "templat": [330, 331, 494, 495, 496, 527], "api_doc_exampl": 330, "train": [332, 528, 546, 554, 565, 593], "collect_layer_histogram": 333, "create_obj_from_config": 335, "kl_diverg": 337, "load_huggingfac": 338, "option": [340, 547, 554, 573], "ux": [343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523], "benchmark_model": 344, "execute_benchmark": 345, "config_gener": [347, 348, 349, 350, 351, 352, 353, 354], "benchmark_config_gener": 347, "graph_optimization_config_gener": 349, "mixed_precision_config_gener": 351, "profiling_config_gener": 352, "pruning_config_gener": 353, "quantization_config_gener": 354, "configuration_wizard": [355, 356, 357, 358, 359, 360], "configuration_pars": 355, "get_boundary_nod": 356, "get_configur": 357, "params_feed": 359, "pruning_config_pars": 360, "db_manag": [361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396], "db_model": [362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382], "benchmark_result": 363, "domain": [366, 424], "domain_flavour": 367, "exampl": [368, 528, 529, 532, 536, 548, 549, 550, 552, 553, 554, 555, 556, 565, 566, 567, 570, 574, 587, 588, 590, 593, 597, 598, 603], "framework": [369, 549, 550, 556, 558, 567, 592], "optimization_typ": 374, "precis": [375, 541, 565, 566, 594], "profil": [376, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 520, 547], "profiling_result": 377, "project": [378, 547], "pruning_detail": 379, "tuning_detail": 381, "tuning_histori": [382, 466], "db_oper": [383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393], "benchmark_api_interfac": 383, "dataset_api_interfac": 384, "diagnosis_api_interfac": 386, "dictionaries_api_interfac": 387, "examples_api_interfac": 388, "model_api_interfac": 390, "optimization_api_interfac": 391, "profiling_api_interfac": 392, "project_api_interfac": 393, "params_interfac": 395, "diagnosi": [397, 398, 399, 400, 401, 402, 403, 404, 405, 547], "factori": [398, 449, 468, 473], "onnx_diagnosi": [400, 401], "onnxrt_diagnosi": 401, "op_detail": 402, "op_entri": 403, "tensorflow_diagnosi": [404, 405], "file_brows": [406, 407], "graph": [408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 547], "collaps": 409, "edg": 410, "graph_read": 412, "node": 414, "reader": [415, 416, 417], "onnxrt_read": 416, "tensorflow_read": 417, "jobs_manag": [419, 420, 421, 422], "jobs_control_queu": 420, "request": [422, 527], "manage_workspac": 423, "model_type_gett": 427, "repositori": 432, "shape": 433, "frozen_pb": 434, "meta_graph": 437, "saved_model": 439, "model_zoo": [441, 442, 443, 444, 445], "download_config": 441, "download_model": 442, "download": 443, "list_model": 445, "names_mapp": [446, 447], "execute_optim": 448, "optimize_model": [452, 456, 458, 461], "neural_coder_optim": [457, 458], "tune": [463, 464, 465, 507, 593, 597, 600], "tune_model": 464, "execute_profil": 467, "profile_model": 470, "tensorflow_profil": [473, 474, 475, 476], "inc_bench": 477, "const": 479, "environ": [480, 562, 571], "except": [481, 511], "executor": 482, "expiring_dict": 483, "github_info": 484, "hw_info": 485, "json_seri": 487, "parser": 489, "proc": 490, "process": [491, 600], "singleton": 492, "status_upd": 493, "workdir": 496, "workload": [498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 523], "evalu": [500, 554], "yaml_util": 508, "web": [509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523], "commun": 509, "configur": [510, 554, 558, 589, 592, 596, 602], "router": 513, "server": 514, "servic": [515, 516, 517, 518, 519, 520, 521, 522, 523], "history_snapshot_pars": 516, "request_data_processor": 521, "response_gener": 522, "version": 524, "intel": [525, 531, 547, 561, 562, 565, 571, 579, 585, 603, 604], "neural": [525, 528, 529, 531, 547, 561, 562, 565, 568, 572, 574, 579, 585, 590, 596, 601, 604], "compressor": [525, 528, 531, 547, 561, 562, 565, 579, 585, 596, 604], "document": [525, 531, 536, 604], "section": [525, 604], "contributor": [526, 527], "coven": [526, 527], "code": [526, 527, 529, 565, 586, 601], "conduct": [526, 527], "our": [526, 597], "pledg": 526, "standard": 526, "respons": 526, "scope": [526, 590], "enforc": 526, "contribut": [527, 578, 582], "guidelin": 527, "pull": 527, "checklist": 527, "support": [527, 528, 529, 532, 548, 549, 550, 552, 553, 554, 556, 558, 561, 562, 564, 566, 567, 569, 570, 574, 575, 587, 588, 590, 592, 593, 598, 599, 602], "fx": 528, "introduct": [528, 529, 532, 547, 548, 549, 550, 552, 553, 554, 556, 558, 561, 564, 566, 567, 585, 587, 588, 590, 592, 593, 596, 597, 598, 599, 600, 602], "mode": [528, 603], "matrix": [528, 529, 532, 548, 549, 550, 552, 553, 554, 556, 558, 561, 564, 566, 567, 570, 587, 588, 590, 592, 593, 598, 602], "get": [528, 529, 531, 532, 548, 549, 550, 552, 553, 554, 558, 559, 564, 566, 568, 579, 586, 587, 588, 590, 592, 593, 598, 602], "start": [528, 529, 531, 532, 547, 548, 549, 550, 552, 553, 554, 558, 559, 564, 566, 568, 569, 573, 579, 587, 588, 590, 592, 593, 598, 602], "post": [528, 565, 593], "static": [528, 593], "dynam": [528, 529, 593], "awar": [528, 565, 593], "note": [528, 595], "detail": [528, 547], "problem": 528, "architectur": [529, 551, 561, 562], "search": [529, 585], "api": [529, 531, 532, 536, 537, 548, 549, 550, 552, 553, 554, 559, 560, 564, 566, 568, 572, 586, 587, 588, 590, 592, 601], "usag": [529, 574, 585, 598, 600], "1": [529, 547, 554, 557, 560, 565, 585, 603], "python": [529, 531, 559, 564, 568, 572, 573, 580, 583, 592, 601], "yaml": [529, 549, 550, 554, 558, 602], "2": [529, 547, 554, 557, 560, 565, 585, 603], "onli": 529, "advanc": [529, 601], "custom": [529, 547, 564, 600], "secur": [530, 547, 554], "polici": [530, 600], "report": 530, "vulner": 530, "instal": [531, 547, 562, 569, 571, 578, 579, 582], "from": [531, 547, 562, 565], "pypi": [531, 574], "select": [531, 579], "public": [531, 591], "event": [531, 591], "addit": 531, "research": 531, "collabor": 531, "work": [532, 593], "flow": [532, 593], "background": [532, 585], "ad": 532, "new": [532, 547, 580, 583, 600], "backend": [532, 593], "capabl": 532, "implement": 532, "onnxrtadaptor": 532, "runtim": [534, 562, 566, 593, 603], "torch": [535, 603], "mix": [541, 565, 566, 594], "bench": [547, 572], "tabl": 547, "binari": [547, 562], "sourc": [547, 562], "home": 547, "screen": 547, "creat": [547, 549], "predefin": 547, "displai": 547, "list": [547, 555, 599], "remov": 547, "develop": [547, 578, 582], "tab": 547, "wizard": 547, "edit": 547, "entri": 547, "inform": [547, 563], "demo": 547, "system": [547, 562, 589], "file": [549, 550, 558, 602], "user": [549, 550, 554, 560, 592, 601, 602], "specif": [549, 550], "design": [551, 600], "workflow": 551, "knowledg": [552, 603], "intermedi": 552, "layer": [552, 597], "self": 552, "distribut": [554, 574, 600], "infer": 554, "featur": [554, 558, 561, 574, 575, 579, 592, 593, 598, 602], "pure": 554, "defin": 554, "horovodrun": 554, "execut": 554, "releas": [555, 580, 583, 595], "fp32": 556, "appendix": 556, "frequent": 557, "ask": 557, "question": 557, "build": [557, 564], "issu": [557, 595], "3": [557, 569, 585], "4": [557, 576, 585, 591], "quick": [559, 573], "sampl": 559, "jupyterlab": [559, 579], "extens": [559, 568, 578, 579, 582, 585, 586, 603], "gui": 559, "valid": [559, 562, 597, 603], "incompat": [560, 595], "chang": [560, 584, 586, 595], "between": 560, "v1": 560, "face": 560, "built": [560, 562, 564], "infrastructur": 561, "linux": 562, "prerequisit": 562, "ai": 562, "kit": 562, "window": 562, "requir": [562, 578, 582], "hardwar": [562, 603], "cpu": [562, 571, 603], "base": [562, 601], "64": 562, "compat": 562, "processor": 562, "gpu": 562, "": [562, 586], "xe": 562, "multipl": [562, 587, 603], "vendor": 562, "through": [562, 603], "softwar": 562, "legal": 563, "licens": 563, "citat": 563, "trademark": 563, "singl": [564, 587], "multi": 564, "migrat": 565, "x": 565, "orchestr": [565, 588], "coder": [568, 572, 574, 585, 601], "what": [568, 586], "do": 568, "we": 568, "offer": 568, "jupyt": [568, 569, 580, 583], "lab": [568, 569], "launcher": [568, 573], "contact": 568, "aw": 569, "amazon": 569, "sagemak": 569, "For": 569, "studio": 569, "notebook": 569, "instanc": 569, "guid": [569, 601], "bigdl": 570, "nano": 570, "platform": [571, 596], "best": [571, 579], "perform": [571, 596], "set": [571, 585], "mkl": 571, "openmp": 571, "jemalloc": 571, "numa": 571, "control": 571, "variabl": 571, "frequenc": 571, "govern": 571, "enabl": [572, 579, 585], "superbench": 572, "argument": 573, "v0": 576, "highlight": 576, "other": 576, "changelog": [577, 581], "neural_compressor_ext_lab": [578, 580], "uninstal": [578, 582], "Or": 579, "let": 579, "u": 579, "help": 579, "you": 579, "pre": 579, "requisit": 579, "make": [580, 583, 586], "manual": [580, 583], "npm": [580, 583], "autom": [580, 583], "publish": [580, 583], "conda": [580, 583], "forg": [580, 583], "neural_compressor_ext_lab_alibaba": [582, 583], "log": 584, "unreleas": 584, "vscode": 585, "open": 585, "icon": 585, "5": 585, "welcom": 586, "your": 586, "v": 586, "folder": 586, "setup": 586, "up": 586, "run": 586, "straight": 586, "awai": 586, "explor": 586, "test": 586, "go": 586, "further": 586, "One": 588, "shot": 588, "network": 590, "type": 590, "sparsiti": 590, "decai": 590, "regular": 590, "spars": 590, "deploy": 590, "refer": [590, 593, 597], "full": 591, "57": 591, "2023": 591, "2022": 591, "34": 591, "2021": 591, "15": 591, "2018": 591, "2020": 591, "style": 592, "access": 592, "fundament": [593, 597], "scheme": 593, "ipex": 593, "approach": 593, "With": 593, "without": 593, "accuraci": [593, 600], "specifi": 593, "rule": 593, "recip": 593, "turn": 594, "off": 594, "dure": 594, "known": 595, "prepar": 596, "benefit": 596, "comparison": 596, "differ": 596, "smooth": 597, "quant": 597, "per": 597, "tenor": 597, "channel": 597, "tensor": 597, "limit": 597, "smoothquant": 597, "enhanc": 597, "wise": 597, "alpha": 597, "engin": 597, "tensorboard": 598, "space": 600, "exit": 600, "overview": 601, "zero": 601, "topic": 601, "11": 603, "0": 603, "13": 603, "ptq": 603, "9": 603}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"644ec953a7dc_pruning_support": [[0, "module-644ec953a7dc_pruning_support"]], "6ece06672ed3_v1_14": [[1, "module-6ece06672ed3_v1_14"]], "Module Contents": [[1, "module-contents"], [5, "module-contents"], [6, "module-contents"], [8, "module-contents"], [15, "module-contents"], [17, "module-contents"], [18, "module-contents"], [19, "module-contents"], [21, "module-contents"], [22, "module-contents"], [23, "module-contents"], [24, "module-contents"], [25, "module-contents"], [26, "module-contents"], [27, "module-contents"], [28, "module-contents"], [29, "module-contents"], [30, "module-contents"], [31, "module-contents"], [33, "module-contents"], [34, "module-contents"], [35, "module-contents"], [36, "module-contents"], [37, "module-contents"], [38, "module-contents"], [39, "module-contents"], [40, "module-contents"], [41, "module-contents"], [42, "module-contents"], [43, "module-contents"], [44, "module-contents"], [45, "module-contents"], [46, "module-contents"], [47, "module-contents"], [48, "module-contents"], [50, "module-contents"], [51, "module-contents"], [52, "module-contents"], [53, "module-contents"], [54, "module-contents"], [55, "module-contents"], [56, "module-contents"], [57, "module-contents"], [58, "module-contents"], [59, "module-contents"], [60, "module-contents"], [61, "module-contents"], [62, "module-contents"], [63, "module-contents"], [64, "module-contents"], [65, "module-contents"], [66, "module-contents"], [67, "module-contents"], [68, "module-contents"], [69, "module-contents"], [70, "module-contents"], [71, "module-contents"], [72, "module-contents"], [73, "module-contents"], [75, "module-contents"], [76, "module-contents"], [77, "module-contents"], [78, "module-contents"], [79, "module-contents"], [80, "module-contents"], [81, "module-contents"], [82, "module-contents"], [83, "module-contents"], [84, "module-contents"], [86, "module-contents"], [87, "module-contents"], [88, "module-contents"], [89, "module-contents"], [90, "module-contents"], [91, "module-contents"], [92, "module-contents"], [94, "module-contents"], [95, "module-contents"], [96, "module-contents"], [97, "module-contents"], [98, "module-contents"], [100, "module-contents"], [101, "module-contents"], [102, "module-contents"], [103, "module-contents"], [105, "module-contents"], [106, "module-contents"], [107, "module-contents"], [108, "module-contents"], [111, "module-contents"], [113, "module-contents"], [114, "module-contents"], [116, "module-contents"], [117, "module-contents"], [118, "module-contents"], [119, "module-contents"], [120, "module-contents"], [121, "module-contents"], [122, "module-contents"], [123, "module-contents"], [124, "module-contents"], [125, "module-contents"], [126, "module-contents"], [127, "module-contents"], [129, "module-contents"], [130, "module-contents"], [131, "module-contents"], [132, "module-contents"], [133, "module-contents"], [134, "module-contents"], [135, "module-contents"], [136, "module-contents"], [137, "module-contents"], [138, "module-contents"], [139, "module-contents"], [140, "module-contents"], [142, "module-contents"], [143, "module-contents"], [144, "module-contents"], [145, "module-contents"], [146, "module-contents"], [148, "module-contents"], [149, "module-contents"], [150, "module-contents"], [151, "module-contents"], [152, "module-contents"], [154, "module-contents"], [155, "module-contents"], [156, "module-contents"], [157, "module-contents"], [158, "module-contents"], [161, "module-contents"], [164, "module-contents"], [165, "module-contents"], [166, "module-contents"], [167, "module-contents"], [168, "module-contents"], [169, "module-contents"], [170, "module-contents"], [171, "module-contents"], [172, "module-contents"], [174, "module-contents"], [175, "module-contents"], [178, "module-contents"], [179, "module-contents"], [180, "module-contents"], [181, "module-contents"], [182, "module-contents"], [183, "module-contents"], [185, "module-contents"], [186, "module-contents"], [187, "module-contents"], [188, "module-contents"], [189, "module-contents"], [190, "module-contents"], [191, "module-contents"], [192, "module-contents"], [193, "module-contents"], [194, "module-contents"], [195, "module-contents"], [197, "module-contents"], [198, "module-contents"], [199, "module-contents"], [202, "module-contents"], [203, "module-contents"], [205, "module-contents"], [206, "module-contents"], [207, "module-contents"], [208, "module-contents"], [209, "module-contents"], [210, "module-contents"], [212, "module-contents"], [213, "module-contents"], [214, "module-contents"], [215, "module-contents"], [216, "module-contents"], [217, "module-contents"], [219, "module-contents"], [220, "module-contents"], [222, "module-contents"], [223, "module-contents"], [225, "module-contents"], [226, "module-contents"], [227, "module-contents"], [228, "module-contents"], [229, "module-contents"], [230, "module-contents"], [231, "module-contents"], [232, "module-contents"], [233, "module-contents"], [234, "module-contents"], [235, "module-contents"], [237, "module-contents"], [238, "module-contents"], [239, "module-contents"], [242, "module-contents"], [244, "module-contents"], [245, "module-contents"], [246, "module-contents"], [248, "module-contents"], [249, "module-contents"], [250, "module-contents"], [251, "module-contents"], [252, "module-contents"], [254, "module-contents"], [255, "module-contents"], [257, "module-contents"], [258, "module-contents"], [259, "module-contents"], [261, "module-contents"], [262, "module-contents"], [263, "module-contents"], [264, "module-contents"], [265, "module-contents"], [267, "module-contents"], [268, "module-contents"], [269, "module-contents"], [270, "module-contents"], [271, "module-contents"], [273, "module-contents"], [274, "module-contents"], [275, "module-contents"], [276, "module-contents"], [279, "module-contents"], [280, "module-contents"], [281, "module-contents"], [284, "module-contents"], [285, "module-contents"], [286, "module-contents"], [287, "module-contents"], [288, "module-contents"], [289, "module-contents"], [290, "module-contents"], [292, "module-contents"], [293, "module-contents"], [295, "module-contents"], [296, "module-contents"], [297, "module-contents"], [299, "module-contents"], [300, "module-contents"], [301, "module-contents"], [303, "module-contents"], [304, "module-contents"], [305, "module-contents"], [306, "module-contents"], [307, "module-contents"], [308, "module-contents"], [309, "module-contents"], [310, "module-contents"], [311, "module-contents"], [312, "module-contents"], [313, "module-contents"], [314, "module-contents"], [315, "module-contents"], [316, "module-contents"], [317, "module-contents"], [318, "module-contents"], [320, "module-contents"], [321, "module-contents"], [322, "module-contents"], [323, "module-contents"], [326, "module-contents"], [327, "module-contents"], [328, "module-contents"], [329, "module-contents"], [330, "module-contents"], [332, "module-contents"], [333, "module-contents"], [335, "module-contents"], [337, "module-contents"], [338, "module-contents"], [339, "module-contents"], [340, "module-contents"], [341, "module-contents"], [342, "module-contents"], [343, "module-contents"], [344, "module-contents"], [345, "module-contents"], [347, "module-contents"], [348, "module-contents"], [349, "module-contents"], [351, "module-contents"], [352, "module-contents"], [353, "module-contents"], [354, "module-contents"], [355, "module-contents"], [356, "module-contents"], [357, "module-contents"], [359, "module-contents"], [360, "module-contents"], [361, "module-contents"], [362, "module-contents"], [363, "module-contents"], [364, "module-contents"], [365, "module-contents"], [366, "module-contents"], [367, "module-contents"], [368, "module-contents"], [369, "module-contents"], [371, "module-contents"], [372, "module-contents"], [373, "module-contents"], [374, "module-contents"], [375, "module-contents"], [376, "module-contents"], [377, "module-contents"], [378, "module-contents"], [379, "module-contents"], [380, "module-contents"], [381, "module-contents"], [382, "module-contents"], [383, "module-contents"], [384, "module-contents"], [385, "module-contents"], [386, "module-contents"], [387, "module-contents"], [388, "module-contents"], [390, "module-contents"], [391, "module-contents"], [392, "module-contents"], [393, "module-contents"], [395, "module-contents"], [396, "module-contents"], [397, "module-contents"], [398, "module-contents"], [401, "module-contents"], [402, "module-contents"], [403, "module-contents"], [405, "module-contents"], [406, "module-contents"], [408, "module-contents"], [409, "module-contents"], [410, "module-contents"], [411, "module-contents"], [412, "module-contents"], [414, "module-contents"], [416, "module-contents"], [417, "module-contents"], [423, "module-contents"], [424, "module-contents"], [426, "module-contents"], [427, "module-contents"], [429, "module-contents"], [431, "module-contents"], [432, "module-contents"], [433, "module-contents"], [434, "module-contents"], [436, "module-contents"], [437, "module-contents"], [438, "module-contents"], [439, "module-contents"], [440, "module-contents"], [441, "module-contents"], [442, "module-contents"], [443, "module-contents"], [445, "module-contents"], [447, "module-contents"], [448, "module-contents"], [449, "module-contents"], [450, "module-contents"], [452, "module-contents"], [455, "module-contents"], [456, "module-contents"], [458, "module-contents"], [459, "module-contents"], [461, "module-contents"], [462, "module-contents"], [464, "module-contents"], [465, "module-contents"], [466, "module-contents"], [467, "module-contents"], [468, "module-contents"], [470, "module-contents"], [471, "module-contents"], [472, "module-contents"], [473, "module-contents"], [475, "module-contents"], [476, "module-contents"], [477, "module-contents"], [479, "module-contents"], [480, "module-contents"], [481, "module-contents"], [482, "module-contents"], [483, "module-contents"], [484, "module-contents"], [485, "module-contents"], [487, "module-contents"], [488, "module-contents"], [489, "module-contents"], [490, "module-contents"], [491, "module-contents"], [492, "module-contents"], [493, "module-contents"], [495, "module-contents"], [496, "module-contents"], [497, "module-contents"], [498, "module-contents"], [499, "module-contents"], [500, "module-contents"], [501, "module-contents"], [503, "module-contents"], [504, "module-contents"], [505, "module-contents"], [506, "module-contents"], [507, "module-contents"], [508, "module-contents"], [509, "module-contents"], [510, "module-contents"], [511, "module-contents"], [513, "module-contents"], [514, "module-contents"], [515, "module-contents"], [516, "module-contents"], [518, "module-contents"], [519, "module-contents"], [520, "module-contents"], [521, "module-contents"], [522, "module-contents"], [523, "module-contents"]], "Functions": [[1, "functions"], [5, "functions"], [6, "functions"], [17, "functions"], [36, "functions"], [42, "functions"], [43, "functions"], [65, "functions"], [66, "functions"], [68, "functions"], [102, "functions"], [103, "functions"], [114, "functions"], [116, "functions"], [144, "functions"], [145, "functions"], [146, "functions"], [149, "functions"], [150, "functions"], [151, "functions"], [153, "functions"], [156, "functions"], [158, "functions"], [161, "functions"], [164, "functions"], [166, "functions"], [167, "functions"], [168, "functions"], [169, "functions"], [170, "functions"], [172, "functions"], [182, "functions"], [190, "functions"], [192, "functions"], [196, "functions"], [199, "functions"], [200, "functions"], [201, "functions"], [204, "functions"], [206, "functions"], [207, "functions"], [208, "functions"], [209, "functions"], [211, "functions"], [213, "functions"], [214, "functions"], [216, "functions"], [219, "functions"], [222, "functions"], [230, "functions"], [232, "functions"], [236, "functions"], [239, "functions"], [240, "functions"], [241, "functions"], [243, "functions"], [244, "functions"], [245, "functions"], [248, "functions"], [249, "functions"], [250, "functions"], [251, "functions"], [254, "functions"], [255, "functions"], [257, "functions"], [258, "functions"], [259, "functions"], [260, "functions"], [261, "functions"], [268, "functions"], [275, "functions"], [279, "functions"], [284, "functions"], [285, "functions"], [286, "functions"], [288, "functions"], [292, "functions"], [293, "functions"], [295, "functions"], [296, "functions"], [297, "functions"], [298, "functions"], [299, "functions"], [300, "functions"], [304, "functions"], [308, "functions"], [310, "functions"], [311, "functions"], [315, "functions"], [323, "functions"], [327, "functions"], [329, "functions"], [330, "functions"], [332, "functions"], [335, "functions"], [336, "functions"], [338, "functions"], [339, "functions"], [341, "functions"], [342, "functions"], [344, "functions"], [345, "functions"], [355, "functions"], [356, "functions"], [357, "functions"], [359, "functions"], [364, "functions"], [366, "functions"], [367, "functions"], [369, "functions"], [371, "functions"], [374, "functions"], [375, "functions"], [380, "functions"], [383, "functions"], [384, "functions"], [385, "functions"], [396, "functions"], [406, "functions"], [423, "functions"], [427, "functions"], [429, "functions"], [440, "functions"], [441, "functions"], [442, "functions"], [445, "functions"], [448, "functions"], [452, "functions"], [456, "functions"], [458, "functions"], [461, "functions"], [464, "functions"], [466, "functions"], [467, "functions"], [470, "functions"], [476, "functions"], [477, "functions"], [485, "functions"], [488, "functions"], [493, "functions"], [497, "functions"], [505, "functions"], [508, "functions"], [509, "functions"], [513, "functions"], [514, "functions"]], "6f0d0f71d92e_v1_13": [[2, "module-6f0d0f71d92e_v1_13"]], "9e89549a08c8_v1_11": [[3, "module-9e89549a08c8_v1_11"]], "block_mask": [[4, "module-block_mask"]], "env": [[5, "module-env"]], "neural_compressor.adaptor.adaptor": [[6, "module-neural_compressor.adaptor.adaptor"]], "Classes": [[6, "classes"], [8, "classes"], [15, "classes"], [17, "classes"], [18, "classes"], [19, "classes"], [21, "classes"], [22, "classes"], [23, "classes"], [24, "classes"], [25, "classes"], [26, "classes"], [27, "classes"], [28, "classes"], [29, "classes"], [30, "classes"], [31, "classes"], [33, "classes"], [34, "classes"], [35, "classes"], [36, "classes"], [37, "classes"], [38, "classes"], [39, "classes"], [40, "classes"], [41, "classes"], [42, "classes"], [43, "classes"], [44, "classes"], [45, "classes"], [46, "classes"], [47, "classes"], [48, "classes"], [50, "classes"], [51, "classes"], [52, "classes"], [53, "classes"], [54, "classes"], [55, "classes"], [56, "classes"], [57, "classes"], [58, "classes"], [59, "classes"], [60, "classes"], [61, "classes"], [62, "classes"], [63, "classes"], [64, "classes"], [65, "classes"], [66, "classes"], [67, "classes"], [68, "classes"], [69, "classes"], [70, "classes"], [71, "classes"], [72, "classes"], [73, "classes"], [75, "classes"], [76, "classes"], [77, "classes"], [78, "classes"], [79, "classes"], [80, "classes"], [81, "classes"], [82, "classes"], [83, "classes"], [84, "classes"], [86, "classes"], [87, "classes"], [88, "classes"], [89, "classes"], [90, "classes"], [91, "classes"], [92, "classes"], [94, "classes"], [95, "classes"], [96, "classes"], [97, "classes"], [98, "classes"], [100, "classes"], [101, "classes"], [102, "classes"], [103, "classes"], [105, "classes"], [106, "classes"], [107, "classes"], [108, "classes"], [111, "classes"], [113, "classes"], [117, "classes"], [118, "classes"], [119, "classes"], [120, "classes"], [121, "classes"], [122, "classes"], [123, "classes"], [124, "classes"], [125, "classes"], [126, "classes"], [127, "classes"], [129, "classes"], [130, "classes"], [131, "classes"], [132, "classes"], [133, "classes"], [134, "classes"], [135, "classes"], [136, "classes"], [137, "classes"], [138, "classes"], [139, "classes"], [140, "classes"], [142, "classes"], [143, "classes"], [145, "classes"], [146, "classes"], [148, "classes"], [151, "classes"], [152, "classes"], [153, "classes"], [154, "classes"], [155, "classes"], [157, "classes"], [158, "classes"], [161, "classes"], [164, "classes"], [165, "classes"], [166, "classes"], [167, "classes"], [168, "classes"], [169, "classes"], [171, "classes"], [172, "classes"], [174, "classes"], [175, "classes"], [178, "classes"], [179, "classes"], [180, "classes"], [181, "classes"], [182, "classes"], [183, "classes"], [184, "classes"], [185, "classes"], [186, "classes"], [187, "classes"], [188, "classes"], [189, "classes"], [190, "classes"], [191, "classes"], [192, "classes"], [193, "classes"], [194, "classes"], [195, "classes"], [196, "classes"], [197, "classes"], [198, "classes"], [199, "classes"], [200, "classes"], [201, "classes"], [202, "classes"], [203, "classes"], [204, "classes"], [205, "classes"], [206, "classes"], [207, "classes"], [208, "classes"], [209, "classes"], [210, "classes"], [211, "classes"], [212, "classes"], [213, "classes"], [214, "classes"], [215, "classes"], [217, "classes"], [220, "classes"], [222, "classes"], [223, "classes"], [225, "classes"], [226, "classes"], [227, "classes"], [228, "classes"], [229, "classes"], [230, "classes"], [231, "classes"], [232, "classes"], [233, "classes"], [234, "classes"], [235, "classes"], [236, "classes"], [237, "classes"], [238, "classes"], [239, "classes"], [240, "classes"], [241, "classes"], [242, "classes"], [243, "classes"], [244, "classes"], [245, "classes"], [246, "classes"], [251, "classes"], [252, "classes"], [253, "classes"], [254, "classes"], [257, "classes"], [260, "classes"], [261, "classes"], [262, "classes"], [263, "classes"], [264, "classes"], [265, "classes"], [267, "classes"], [269, "classes"], [270, "classes"], [271, "classes"], [273, "classes"], [274, "classes"], [275, "classes"], [276, "classes"], [277, "classes"], [278, "classes"], [279, "classes"], [280, "classes"], [281, "classes"], [284, "classes"], [286, "classes"], [287, "classes"], [288, "classes"], [289, "classes"], [290, "classes"], [292, "classes"], [295, "classes"], [298, "classes"], [299, "classes"], [301, "classes"], [302, "classes"], [303, "classes"], [304, "classes"], [305, "classes"], [306, "classes"], [307, "classes"], [308, "classes"], [309, "classes"], [310, "classes"], [312, "classes"], [313, "classes"], [314, "classes"], [315, "classes"], [316, "classes"], [317, "classes"], [318, "classes"], [320, "classes"], [321, "classes"], [322, "classes"], [323, "classes"], [326, "classes"], [327, "classes"], [328, "classes"], [329, "classes"], [330, "classes"], [332, "classes"], [333, "classes"], [336, "classes"], [337, "classes"], [338, "classes"], [339, "classes"], [340, "classes"], [342, "classes"], [343, "classes"], [346, "classes"], [347, "classes"], [348, "classes"], [349, "classes"], [351, "classes"], [352, "classes"], [353, "classes"], [354, "classes"], [355, "classes"], [359, "classes"], [360, "classes"], [361, "classes"], [362, "classes"], [363, "classes"], [364, "classes"], [365, "classes"], [366, "classes"], [367, "classes"], [368, "classes"], [369, "classes"], [371, "classes"], [372, "classes"], [373, "classes"], [374, "classes"], [375, "classes"], [376, "classes"], [377, "classes"], [378, "classes"], [379, "classes"], [380, "classes"], [381, "classes"], [382, "classes"], [383, "classes"], [384, "classes"], [386, "classes"], [387, "classes"], [388, "classes"], [390, "classes"], [391, "classes"], [392, "classes"], [393, "classes"], [395, "classes"], [397, "classes"], [398, "classes"], [401, "classes"], [402, "classes"], [403, "classes"], [405, "classes"], [408, "classes"], [409, "classes"], [410, "classes"], [411, "classes"], [412, "classes"], [414, "classes"], [416, "classes"], [417, "classes"], [424, "classes"], [426, "classes"], [429, "classes"], [431, "classes"], [432, "classes"], [433, "classes"], [434, "classes"], [436, "classes"], [437, "classes"], [438, "classes"], [439, "classes"], [443, "classes"], [447, "classes"], [449, "classes"], [450, "classes"], [453, "classes"], [455, "classes"], [459, "classes"], [462, "classes"], [465, "classes"], [466, "classes"], [468, "classes"], [471, "classes"], [472, "classes"], [473, "classes"], [475, "classes"], [479, "classes"], [480, "classes"], [482, "classes"], [483, "classes"], [484, "classes"], [485, "classes"], [487, "classes"], [489, "classes"], [490, "classes"], [491, "classes"], [492, "classes"], [495, "classes"], [496, "classes"], [498, "classes"], [499, "classes"], [500, "classes"], [501, "classes"], [503, "classes"], [504, "classes"], [505, "classes"], [506, "classes"], [507, "classes"], [509, "classes"], [510, "classes"], [513, "classes"], [515, "classes"], [516, "classes"], [518, "classes"], [519, "classes"], [520, "classes"], [521, "classes"], [522, "classes"], [523, "classes"]], "neural_compressor.adaptor": [[7, "module-neural_compressor.adaptor"]], "Subpackages": [[7, "subpackages"], [20, "subpackages"], [85, "subpackages"], [109, "subpackages"], [110, "subpackages"], [112, "subpackages"], [160, "subpackages"], [162, "subpackages"], [176, "subpackages"], [201, "subpackages"], [241, "subpackages"], [253, "subpackages"], [277, "subpackages"], [291, "subpackages"], [319, "subpackages"], [394, "subpackages"], [399, "subpackages"], [413, "subpackages"], [418, "subpackages"], [425, "subpackages"], [453, "subpackages"], [469, "subpackages"], [478, "subpackages"], [486, "subpackages"], [512, "subpackages"]], "Submodules": [[7, "submodules"], [16, "submodules"], [20, "submodules"], [32, "submodules"], [49, "submodules"], [74, "submodules"], [85, "submodules"], [93, "submodules"], [99, "submodules"], [104, "submodules"], [109, "submodules"], [110, "submodules"], [112, "submodules"], [115, "submodules"], [128, "submodules"], [141, "submodules"], [147, "submodules"], [153, "submodules"], [159, "submodules"], [160, "submodules"], [162, "submodules"], [163, "submodules"], [177, "submodules"], [184, "submodules"], [196, "submodules"], [200, "submodules"], [204, "submodules"], [211, "submodules"], [218, "submodules"], [224, "submodules"], [236, "submodules"], [240, "submodules"], [243, "submodules"], [247, "submodules"], [253, "submodules"], [260, "submodules"], [266, "submodules"], [272, "submodules"], [278, "submodules"], [282, "submodules"], [291, "submodules"], [298, "submodules"], [302, "submodules"], [319, "submodules"], [325, "submodules"], [331, "submodules"], [336, "submodules"], [346, "submodules"], [350, "submodules"], [358, "submodules"], [370, "submodules"], [389, "submodules"], [394, "submodules"], [399, "submodules"], [400, "submodules"], [404, "submodules"], [407, "submodules"], [413, "submodules"], [415, "submodules"], [418, "submodules"], [419, "submodules"], [425, "submodules"], [428, "submodules"], [430, "submodules"], [435, "submodules"], [444, "submodules"], [446, "submodules"], [451, "submodules"], [453, "submodules"], [454, "submodules"], [457, "submodules"], [460, "submodules"], [463, "submodules"], [469, "submodules"], [474, "submodules"], [478, "submodules"], [486, "submodules"], [494, "submodules"], [502, "submodules"], [512, "submodules"], [517, "submodules"]], "Package Contents": [[7, "package-contents"], [32, "package-contents"], [153, "package-contents"], [184, "package-contents"], [196, "package-contents"], [200, "package-contents"], [201, "package-contents"], [204, "package-contents"], [211, "package-contents"], [224, "package-contents"], [236, "package-contents"], [240, "package-contents"], [241, "package-contents"], [243, "package-contents"], [253, "package-contents"], [260, "package-contents"], [272, "package-contents"], [277, "package-contents"], [278, "package-contents"], [298, "package-contents"], [302, "package-contents"], [319, "package-contents"], [336, "package-contents"], [346, "package-contents"], [453, "package-contents"]], "neural_compressor.adaptor.keras": [[8, "module-neural_compressor.adaptor.keras"]], "neural_compressor.adaptor.keras_utils.conv2d": [[9, "module-neural_compressor.adaptor.keras_utils.conv2d"]], "neural_compressor.adaptor.keras_utils.dense": [[10, "module-neural_compressor.adaptor.keras_utils.dense"]], "neural_compressor.adaptor.keras_utils.depthwise_conv2d": [[11, "module-neural_compressor.adaptor.keras_utils.depthwise_conv2d"]], "neural_compressor.adaptor.keras_utils": [[12, "module-neural_compressor.adaptor.keras_utils"]], "neural_compressor.adaptor.keras_utils.quantizer": [[13, "module-neural_compressor.adaptor.keras_utils.quantizer"]], "neural_compressor.adaptor.keras_utils.separable_conv2d": [[14, "module-neural_compressor.adaptor.keras_utils.separable_conv2d"]], "neural_compressor.adaptor.mxnet": [[15, "module-neural_compressor.adaptor.mxnet"]], "neural_compressor.adaptor.mxnet_utils": [[16, "module-neural_compressor.adaptor.mxnet_utils"]], "neural_compressor.adaptor.mxnet_utils.util": [[17, "module-neural_compressor.adaptor.mxnet_utils.util"]], "neural_compressor.adaptor.onnxrt": [[18, "module-neural_compressor.adaptor.onnxrt"]], "neural_compressor.adaptor.ox_utils.calibration": [[19, "module-neural_compressor.adaptor.ox_utils.calibration"]], "neural_compressor.adaptor.ox_utils": [[20, "module-neural_compressor.adaptor.ox_utils"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[21, "module-neural_compressor.adaptor.ox_utils.operators.activation"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[22, "module-neural_compressor.adaptor.ox_utils.operators.argmax"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[23, "module-neural_compressor.adaptor.ox_utils.operators.attention"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[24, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[25, "module-neural_compressor.adaptor.ox_utils.operators.concat"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[26, "module-neural_compressor.adaptor.ox_utils.operators.conv"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[27, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[28, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[29, "module-neural_compressor.adaptor.ox_utils.operators.gather"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[30, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[31, "module-neural_compressor.adaptor.ox_utils.operators.gemm"]], "neural_compressor.adaptor.ox_utils.operators": [[32, "module-neural_compressor.adaptor.ox_utils.operators"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[33, "module-neural_compressor.adaptor.ox_utils.operators.lstm"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[34, "module-neural_compressor.adaptor.ox_utils.operators.matmul"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[35, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[36, "module-neural_compressor.adaptor.ox_utils.operators.ops"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[37, "module-neural_compressor.adaptor.ox_utils.operators.pad"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[38, "module-neural_compressor.adaptor.ox_utils.operators.pooling"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[39, "module-neural_compressor.adaptor.ox_utils.operators.resize"]], "neural_compressor.adaptor.ox_utils.operators.split": [[40, "module-neural_compressor.adaptor.ox_utils.operators.split"]], "neural_compressor.adaptor.ox_utils.quantizer": [[41, "module-neural_compressor.adaptor.ox_utils.quantizer"]], "neural_compressor.adaptor.ox_utils.util": [[42, "module-neural_compressor.adaptor.ox_utils.util"]], "neural_compressor.adaptor.pytorch": [[43, "module-neural_compressor.adaptor.pytorch"]], "neural_compressor.adaptor.query": [[44, "module-neural_compressor.adaptor.query"]], "neural_compressor.adaptor.tensorflow": [[45, "module-neural_compressor.adaptor.tensorflow"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[46, "module-neural_compressor.adaptor.tf_utils.graph_converter"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[47, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[48, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[49, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "neural_compressor.adaptor.tf_utils.graph_util": [[108, "module-neural_compressor.adaptor.tf_utils.graph_util"]], "neural_compressor.adaptor.tf_utils": [[109, "module-neural_compressor.adaptor.tf_utils"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[110, "module-neural_compressor.adaptor.tf_utils.quantize_graph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[111, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[112, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[135, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[137, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[138, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[139, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[140, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[141, "module-neural_compressor.adaptor.tf_utils.transform_graph"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[142, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[143, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"]], "neural_compressor.adaptor.tf_utils.util": [[144, "module-neural_compressor.adaptor.tf_utils.util"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[145, "module-neural_compressor.adaptor.torch_utils.bf16_convert"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[146, "module-neural_compressor.adaptor.torch_utils.hawq_metric"]], "neural_compressor.adaptor.torch_utils": [[147, "module-neural_compressor.adaptor.torch_utils"]], "neural_compressor.adaptor.torch_utils.smooth_quant": [[148, "module-neural_compressor.adaptor.torch_utils.smooth_quant"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[149, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"]], "neural_compressor.adaptor.torch_utils.util": [[150, "module-neural_compressor.adaptor.torch_utils.util"]], "neural_compressor.algorithm.algorithm": [[151, "module-neural_compressor.algorithm.algorithm"]], "neural_compressor.algorithm.fast_bias_correction": [[152, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm": [[153, "module-neural_compressor.algorithm"]], "neural_compressor.algorithm.smooth_quant": [[154, "module-neural_compressor.algorithm.smooth_quant"]], "neural_compressor.algorithm.weight_correction": [[155, "module-neural_compressor.algorithm.weight_correction"]], "neural_compressor.benchmark": [[156, "module-neural_compressor.benchmark"]], "neural_compressor.compression.callbacks": [[157, "module-neural_compressor.compression.callbacks"]], "neural_compressor.compression.distillation.criterions": [[158, "module-neural_compressor.compression.distillation.criterions"]], "neural_compressor.compression.distillation": [[159, "module-neural_compressor.compression.distillation"]], "neural_compressor.compression": [[160, "module-neural_compressor.compression"]], "neural_compressor.compression.pruner.criteria": [[161, "module-neural_compressor.compression.pruner.criteria"]], "neural_compressor.compression.pruner": [[162, "module-neural_compressor.compression.pruner"]], "neural_compressor.compression.pruner.model_slim": [[163, "module-neural_compressor.compression.pruner.model_slim"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer": [[164, "module-neural_compressor.compression.pruner.model_slim.pattern_analyzer"]], "neural_compressor.compression.pruner.model_slim.weight_slim": [[165, "module-neural_compressor.compression.pruner.model_slim.weight_slim"]], "neural_compressor.compression.pruner.patterns": [[166, "module-neural_compressor.compression.pruner.patterns"]], "neural_compressor.compression.pruner.pruners": [[167, "module-neural_compressor.compression.pruner.pruners"]], "neural_compressor.compression.pruner.regs": [[168, "module-neural_compressor.compression.pruner.regs"]], "neural_compressor.compression.pruner.schedulers": [[169, "module-neural_compressor.compression.pruner.schedulers"]], "neural_compressor.compression.pruner.utils": [[170, "module-neural_compressor.compression.pruner.utils"]], "neural_compressor.conf.config": [[171, "module-neural_compressor.conf.config"]], "neural_compressor.conf.dotdict": [[172, "module-neural_compressor.conf.dotdict"]], "neural_compressor.conf": [[173, "module-neural_compressor.conf"]], "neural_compressor.conf.pythonic_config": [[174, "module-neural_compressor.conf.pythonic_config"]], "neural_compressor.config": [[175, "module-neural_compressor.config"]], "neural_compressor.contrib": [[176, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[177, "module-neural_compressor.contrib.strategy"]], "neural_compressor.contrib.strategy.sigopt": [[178, "module-neural_compressor.contrib.strategy.sigopt"]], "neural_compressor.contrib.strategy.tpe": [[179, "module-neural_compressor.contrib.strategy.tpe"]], "neural_compressor.data.dataloaders.base_dataloader": [[180, "module-neural_compressor.data.dataloaders.base_dataloader"]], "neural_compressor.data.dataloaders.dataloader": [[181, "module-neural_compressor.data.dataloaders.dataloader"]], "neural_compressor.data.dataloaders.default_dataloader": [[182, "module-neural_compressor.data.dataloaders.default_dataloader"]], "neural_compressor.data.dataloaders.fetcher": [[183, "module-neural_compressor.data.dataloaders.fetcher"]], "neural_compressor.data.dataloaders": [[184, "module-neural_compressor.data.dataloaders"]], "Attributes": [[184, "attributes"], [192, "attributes"], [201, "attributes"], [232, "attributes"], [241, "attributes"], [253, "attributes"], [277, "attributes"], [302, "attributes"], [330, "attributes"], [336, "attributes"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[185, "module-neural_compressor.data.dataloaders.mxnet_dataloader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[186, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[187, "module-neural_compressor.data.dataloaders.pytorch_dataloader"]], "neural_compressor.data.dataloaders.sampler": [[188, "module-neural_compressor.data.dataloaders.sampler"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[189, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"]], "neural_compressor.data.datasets.bert_dataset": [[190, "module-neural_compressor.data.datasets.bert_dataset"]], "neural_compressor.data.datasets.coco_dataset": [[191, "module-neural_compressor.data.datasets.coco_dataset"]], "neural_compressor.data.datasets.dataset": [[192, "module-neural_compressor.data.datasets.dataset"]], "neural_compressor.data.datasets.dummy_dataset": [[193, "module-neural_compressor.data.datasets.dummy_dataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[194, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "neural_compressor.data.datasets.imagenet_dataset": [[195, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[196, "module-neural_compressor.data.datasets"]], "neural_compressor.data.datasets.style_transfer_dataset": [[197, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "neural_compressor.data.filters.coco_filter": [[198, "module-neural_compressor.data.filters.coco_filter"]], "neural_compressor.data.filters.filter": [[199, "module-neural_compressor.data.filters.filter"]], "neural_compressor.data.filters": [[200, "module-neural_compressor.data.filters"]], "neural_compressor.data": [[201, "module-neural_compressor.data"]], "neural_compressor.data.transforms.coco_transform": [[202, "module-neural_compressor.data.transforms.coco_transform"]], "neural_compressor.data.transforms.imagenet_transform": [[203, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[204, "module-neural_compressor.data.transforms"]], "neural_compressor.data.transforms.postprocess": [[205, "module-neural_compressor.data.transforms.postprocess"]], "neural_compressor.data.transforms.tokenization": [[206, "module-neural_compressor.data.transforms.tokenization"]], "neural_compressor.data.transforms.transform": [[207, "module-neural_compressor.data.transforms.transform"]], "neural_compressor.experimental.benchmark": [[208, "module-neural_compressor.experimental.benchmark"]], "neural_compressor.experimental.common.criterion": [[209, "module-neural_compressor.experimental.common.criterion"]], "neural_compressor.experimental.common.dataloader": [[210, "module-neural_compressor.experimental.common.dataloader"]], "neural_compressor.experimental.common": [[211, "module-neural_compressor.experimental.common"]], "neural_compressor.experimental.common.metric": [[212, "module-neural_compressor.experimental.common.metric"]], "neural_compressor.experimental.common.model": [[213, "module-neural_compressor.experimental.common.model"]], "neural_compressor.experimental.common.optimizer": [[214, "module-neural_compressor.experimental.common.optimizer"]], "neural_compressor.experimental.common.postprocess": [[215, "module-neural_compressor.experimental.common.postprocess"]], "neural_compressor.experimental.common.torch_utils": [[216, "module-neural_compressor.experimental.common.torch_utils"]], "neural_compressor.experimental.component": [[217, "module-neural_compressor.experimental.component"]], "neural_compressor.experimental.compression": [[218, "module-neural_compressor.experimental.compression"]], "neural_compressor.experimental.compression.pruning": [[219, "module-neural_compressor.experimental.compression.pruning"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[220, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[221, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[222, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[223, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[224, "module-neural_compressor.experimental.data.dataloaders"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[225, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[226, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[227, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[228, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[229, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[230, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[231, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "neural_compressor.experimental.data.datasets.dataset": [[232, "module-neural_compressor.experimental.data.datasets.dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[233, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[234, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[235, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "neural_compressor.experimental.data.datasets": [[236, "module-neural_compressor.experimental.data.datasets"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[237, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "neural_compressor.experimental.data.filters.coco_filter": [[238, "module-neural_compressor.experimental.data.filters.coco_filter"]], "neural_compressor.experimental.data.filters.filter": [[239, "module-neural_compressor.experimental.data.filters.filter"]], "neural_compressor.experimental.data.filters": [[240, "module-neural_compressor.experimental.data.filters"]], "neural_compressor.experimental.data": [[241, "module-neural_compressor.experimental.data"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[242, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "neural_compressor.experimental.data.transforms": [[243, "module-neural_compressor.experimental.data.transforms"]], "neural_compressor.experimental.data.transforms.tokenization": [[244, "module-neural_compressor.experimental.data.transforms.tokenization"]], "neural_compressor.experimental.data.transforms.transform": [[245, "module-neural_compressor.experimental.data.transforms.transform"]], "neural_compressor.experimental.distillation": [[246, "module-neural_compressor.experimental.distillation"]], "neural_compressor.experimental.export": [[247, "module-neural_compressor.experimental.export"]], "neural_compressor.experimental.export.qlinear2qdq": [[248, "module-neural_compressor.experimental.export.qlinear2qdq"]], "neural_compressor.experimental.export.tf2onnx": [[249, "module-neural_compressor.experimental.export.tf2onnx"]], "neural_compressor.experimental.export.torch2onnx": [[250, "module-neural_compressor.experimental.export.torch2onnx"]], "neural_compressor.experimental.export.utils": [[251, "module-neural_compressor.experimental.export.utils"]], "neural_compressor.experimental.graph_optimization": [[252, "module-neural_compressor.experimental.graph_optimization"]], "neural_compressor.experimental": [[253, "module-neural_compressor.experimental"]], "neural_compressor.experimental.metric.bleu": [[254, "module-neural_compressor.experimental.metric.bleu"]], "neural_compressor.experimental.metric.bleu_util": [[255, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[256, "module-neural_compressor.experimental.metric.coco_label_map"]], "neural_compressor.experimental.metric.coco_tools": [[257, "module-neural_compressor.experimental.metric.coco_tools"]], "neural_compressor.experimental.metric.evaluate_squad": [[258, "module-neural_compressor.experimental.metric.evaluate_squad"]], "neural_compressor.experimental.metric.f1": [[259, "module-neural_compressor.experimental.metric.f1"]], "neural_compressor.experimental.metric": [[260, "module-neural_compressor.experimental.metric"]], "neural_compressor.experimental.metric.metric": [[261, "module-neural_compressor.experimental.metric.metric"]], "neural_compressor.experimental.mixed_precision": [[262, "module-neural_compressor.experimental.mixed_precision"]], "neural_compressor.experimental.model_conversion": [[263, "module-neural_compressor.experimental.model_conversion"]], "neural_compressor.experimental.nas.basic_nas": [[264, "module-neural_compressor.experimental.nas.basic_nas"]], "neural_compressor.experimental.nas.dynas": [[265, "module-neural_compressor.experimental.nas.dynas"]], "neural_compressor.experimental.nas": [[266, "module-neural_compressor.experimental.nas"]], "neural_compressor.experimental.nas.nas": [[267, "module-neural_compressor.experimental.nas.nas"]], "neural_compressor.experimental.nas.nas_utils": [[268, "module-neural_compressor.experimental.nas.nas_utils"]], "neural_compressor.experimental.nas.search_algorithms": [[269, "module-neural_compressor.experimental.nas.search_algorithms"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[270, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[271, "module-neural_compressor.experimental.pruner_legacy.group_lasso"]], "neural_compressor.experimental.pruner_legacy": [[272, "module-neural_compressor.experimental.pruner_legacy"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[273, "module-neural_compressor.experimental.pruner_legacy.magnitude"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[274, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"]], "neural_compressor.experimental.pruner_legacy.pruner": [[275, "module-neural_compressor.experimental.pruner_legacy.pruner"]], "neural_compressor.experimental.pruning": [[276, "module-neural_compressor.experimental.pruning"]], "neural_compressor.experimental.pruning_recipes": [[277, "module-neural_compressor.experimental.pruning_recipes"]], "neural_compressor.experimental.pruning_recipes.patterns": [[278, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[279, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[280, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "neural_compressor.experimental.pruning_v2": [[281, "module-neural_compressor.experimental.pruning_v2"]], "neural_compressor.experimental.pytorch_pruner": [[282, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[283, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[284, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[285, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[286, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[287, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[288, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "neural_compressor.experimental.quantization": [[289, "module-neural_compressor.experimental.quantization"]], "neural_compressor.experimental.scheduler": [[290, "module-neural_compressor.experimental.scheduler"]], "neural_compressor": [[291, "module-neural_compressor"]], "neural_compressor.metric.bleu": [[292, "module-neural_compressor.metric.bleu"]], "neural_compressor.metric.bleu_util": [[293, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[294, "module-neural_compressor.metric.coco_label_map"]], "neural_compressor.metric.coco_tools": [[295, "module-neural_compressor.metric.coco_tools"]], "neural_compressor.metric.evaluate_squad": [[296, "module-neural_compressor.metric.evaluate_squad"]], "neural_compressor.metric.f1": [[297, "module-neural_compressor.metric.f1"]], "neural_compressor.metric": [[298, "module-neural_compressor.metric"]], "neural_compressor.metric.metric": [[299, "module-neural_compressor.metric.metric"]], "neural_compressor.mix_precision": [[300, "module-neural_compressor.mix_precision"]], "neural_compressor.model.base_model": [[301, "module-neural_compressor.model.base_model"]], "neural_compressor.model": [[302, "module-neural_compressor.model"]], "neural_compressor.model.keras_model": [[303, "module-neural_compressor.model.keras_model"]], "neural_compressor.model.model": [[304, "module-neural_compressor.model.model"]], "neural_compressor.model.mxnet_model": [[305, "module-neural_compressor.model.mxnet_model"]], "neural_compressor.model.nets_factory": [[306, "module-neural_compressor.model.nets_factory"]], "neural_compressor.model.onnx_model": [[307, "module-neural_compressor.model.onnx_model"]], "neural_compressor.model.tensorflow_model": [[308, "module-neural_compressor.model.tensorflow_model"]], "neural_compressor.model.torch_model": [[309, "module-neural_compressor.model.torch_model"]], "neural_compressor.objective": [[310, "module-neural_compressor.objective"]], "neural_compressor.quantization": [[311, "module-neural_compressor.quantization"]], "neural_compressor.strategy.auto": [[312, "module-neural_compressor.strategy.auto"]], "neural_compressor.strategy.auto_mixed_precision": [[313, "module-neural_compressor.strategy.auto_mixed_precision"]], "neural_compressor.strategy.basic": [[314, "module-neural_compressor.strategy.basic"]], "neural_compressor.strategy.bayesian": [[315, "module-neural_compressor.strategy.bayesian"]], "neural_compressor.strategy.conservative": [[316, "module-neural_compressor.strategy.conservative"]], "neural_compressor.strategy.exhaustive": [[317, "module-neural_compressor.strategy.exhaustive"]], "neural_compressor.strategy.hawq_v2": [[318, "module-neural_compressor.strategy.hawq_v2"]], "neural_compressor.strategy": [[319, "module-neural_compressor.strategy"]], "neural_compressor.strategy.mse": [[320, "module-neural_compressor.strategy.mse"]], "neural_compressor.strategy.mse_v2": [[321, "module-neural_compressor.strategy.mse_v2"]], "neural_compressor.strategy.random": [[322, "module-neural_compressor.strategy.random"]], "neural_compressor.strategy.strategy": [[323, "module-neural_compressor.strategy.strategy"]], "neural_compressor.strategy.utils.constant": [[324, "module-neural_compressor.strategy.utils.constant"]], "neural_compressor.strategy.utils": [[325, "module-neural_compressor.strategy.utils"]], "neural_compressor.strategy.utils.tuning_sampler": [[326, "module-neural_compressor.strategy.utils.tuning_sampler"]], "neural_compressor.strategy.utils.tuning_space": [[327, "module-neural_compressor.strategy.utils.tuning_space"]], "neural_compressor.strategy.utils.tuning_structs": [[328, "module-neural_compressor.strategy.utils.tuning_structs"]], "neural_compressor.strategy.utils.utility": [[329, "module-neural_compressor.strategy.utils.utility"]], "neural_compressor.template.api_doc_example": [[330, "module-neural_compressor.template.api_doc_example"]], "neural_compressor.template": [[331, "module-neural_compressor.template"]], "neural_compressor.training": [[332, "module-neural_compressor.training"]], "neural_compressor.utils.collect_layer_histogram": [[333, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[334, "module-neural_compressor.utils.constant"]], "neural_compressor.utils.create_obj_from_config": [[335, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils": [[336, "module-neural_compressor.utils"]], "neural_compressor.utils.kl_divergence": [[337, "module-neural_compressor.utils.kl_divergence"]], "neural_compressor.utils.load_huggingface": [[338, "module-neural_compressor.utils.load_huggingface"]], "neural_compressor.utils.logger": [[339, "module-neural_compressor.utils.logger"]], "neural_compressor.utils.options": [[340, "module-neural_compressor.utils.options"]], "neural_compressor.utils.pytorch": [[341, "module-neural_compressor.utils.pytorch"]], "neural_compressor.utils.utility": [[342, "module-neural_compressor.utils.utility"]], "neural_compressor.ux.components.benchmark.benchmark": [[343, "module-neural_compressor.ux.components.benchmark.benchmark"]], "neural_compressor.ux.components.benchmark.benchmark_model": [[344, "module-neural_compressor.ux.components.benchmark.benchmark_model"]], "neural_compressor.ux.components.benchmark.execute_benchmark": [[345, "module-neural_compressor.ux.components.benchmark.execute_benchmark"]], "neural_compressor.ux.components.benchmark": [[346, "module-neural_compressor.ux.components.benchmark"]], "neural_compressor.ux.components.config_generator.benchmark_config_generator": [[347, "module-neural_compressor.ux.components.config_generator.benchmark_config_generator"]], "neural_compressor.ux.components.config_generator.config_generator": [[348, "module-neural_compressor.ux.components.config_generator.config_generator"]], "neural_compressor.ux.components.config_generator.graph_optimization_config_generator": [[349, "module-neural_compressor.ux.components.config_generator.graph_optimization_config_generator"]], "neural_compressor.ux.components.config_generator": [[350, "module-neural_compressor.ux.components.config_generator"]], "neural_compressor.ux.components.config_generator.mixed_precision_config_generator": [[351, "module-neural_compressor.ux.components.config_generator.mixed_precision_config_generator"]], "neural_compressor.ux.components.config_generator.profiling_config_generator": [[352, "module-neural_compressor.ux.components.config_generator.profiling_config_generator"]], "neural_compressor.ux.components.config_generator.pruning_config_generator": [[353, "module-neural_compressor.ux.components.config_generator.pruning_config_generator"]], "neural_compressor.ux.components.config_generator.quantization_config_generator": [[354, "module-neural_compressor.ux.components.config_generator.quantization_config_generator"]], "neural_compressor.ux.components.configuration_wizard.configuration_parser": [[355, "module-neural_compressor.ux.components.configuration_wizard.configuration_parser"]], "neural_compressor.ux.components.configuration_wizard.get_boundary_nodes": [[356, "module-neural_compressor.ux.components.configuration_wizard.get_boundary_nodes"]], "neural_compressor.ux.components.configuration_wizard.get_configuration": [[357, "module-neural_compressor.ux.components.configuration_wizard.get_configuration"]], "neural_compressor.ux.components.configuration_wizard": [[358, "module-neural_compressor.ux.components.configuration_wizard"]], "neural_compressor.ux.components.configuration_wizard.params_feeder": [[359, "module-neural_compressor.ux.components.configuration_wizard.params_feeder"]], "neural_compressor.ux.components.configuration_wizard.pruning_config_parser": [[360, "module-neural_compressor.ux.components.configuration_wizard.pruning_config_parser"]], "neural_compressor.ux.components.db_manager.db_manager": [[361, "module-neural_compressor.ux.components.db_manager.db_manager"]], "neural_compressor.ux.components.db_manager.db_models.benchmark": [[362, "module-neural_compressor.ux.components.db_manager.db_models.benchmark"]], "neural_compressor.ux.components.db_manager.db_models.benchmark_result": [[363, "module-neural_compressor.ux.components.db_manager.db_models.benchmark_result"]], "neural_compressor.ux.components.db_manager.db_models.dataloader": [[364, "module-neural_compressor.ux.components.db_manager.db_models.dataloader"]], "neural_compressor.ux.components.db_manager.db_models.dataset": [[365, "module-neural_compressor.ux.components.db_manager.db_models.dataset"]], "neural_compressor.ux.components.db_manager.db_models.domain": [[366, "module-neural_compressor.ux.components.db_manager.db_models.domain"]], "neural_compressor.ux.components.db_manager.db_models.domain_flavour": [[367, "module-neural_compressor.ux.components.db_manager.db_models.domain_flavour"]], "neural_compressor.ux.components.db_manager.db_models.example": [[368, "module-neural_compressor.ux.components.db_manager.db_models.example"]], "neural_compressor.ux.components.db_manager.db_models.framework": [[369, "module-neural_compressor.ux.components.db_manager.db_models.framework"]], "neural_compressor.ux.components.db_manager.db_models": [[370, "module-neural_compressor.ux.components.db_manager.db_models"]], "neural_compressor.ux.components.db_manager.db_models.metric": [[371, "module-neural_compressor.ux.components.db_manager.db_models.metric"]], "neural_compressor.ux.components.db_manager.db_models.model": [[372, "module-neural_compressor.ux.components.db_manager.db_models.model"]], "neural_compressor.ux.components.db_manager.db_models.optimization": [[373, "module-neural_compressor.ux.components.db_manager.db_models.optimization"]], "neural_compressor.ux.components.db_manager.db_models.optimization_type": [[374, "module-neural_compressor.ux.components.db_manager.db_models.optimization_type"]], "neural_compressor.ux.components.db_manager.db_models.precision": [[375, "module-neural_compressor.ux.components.db_manager.db_models.precision"]], "neural_compressor.ux.components.db_manager.db_models.profiling": [[376, "module-neural_compressor.ux.components.db_manager.db_models.profiling"]], "neural_compressor.ux.components.db_manager.db_models.profiling_result": [[377, "module-neural_compressor.ux.components.db_manager.db_models.profiling_result"]], "neural_compressor.ux.components.db_manager.db_models.project": [[378, "module-neural_compressor.ux.components.db_manager.db_models.project"]], "neural_compressor.ux.components.db_manager.db_models.pruning_details": [[379, "module-neural_compressor.ux.components.db_manager.db_models.pruning_details"]], "neural_compressor.ux.components.db_manager.db_models.transform": [[380, "module-neural_compressor.ux.components.db_manager.db_models.transform"]], "neural_compressor.ux.components.db_manager.db_models.tuning_details": [[381, "module-neural_compressor.ux.components.db_manager.db_models.tuning_details"]], "neural_compressor.ux.components.db_manager.db_models.tuning_history": [[382, "module-neural_compressor.ux.components.db_manager.db_models.tuning_history"]], "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface": [[383, "module-neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface": [[384, "module-neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.db_operations": [[385, "module-neural_compressor.ux.components.db_manager.db_operations.db_operations"]], "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface": [[386, "module-neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface": [[387, "module-neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface": [[388, "module-neural_compressor.ux.components.db_manager.db_operations.examples_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations": [[389, "module-neural_compressor.ux.components.db_manager.db_operations"]], "neural_compressor.ux.components.db_manager.db_operations.model_api_interface": [[390, "module-neural_compressor.ux.components.db_manager.db_operations.model_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface": [[391, "module-neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface": [[392, "module-neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.project_api_interface": [[393, "module-neural_compressor.ux.components.db_manager.db_operations.project_api_interface"]], "neural_compressor.ux.components.db_manager": [[394, "module-neural_compressor.ux.components.db_manager"]], "neural_compressor.ux.components.db_manager.params_interfaces": [[395, "module-neural_compressor.ux.components.db_manager.params_interfaces"]], "neural_compressor.ux.components.db_manager.utils": [[396, "module-neural_compressor.ux.components.db_manager.utils"]], "neural_compressor.ux.components.diagnosis.diagnosis": [[397, "module-neural_compressor.ux.components.diagnosis.diagnosis"]], "neural_compressor.ux.components.diagnosis.factory": [[398, "module-neural_compressor.ux.components.diagnosis.factory"]], "neural_compressor.ux.components.diagnosis": [[399, "module-neural_compressor.ux.components.diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis": [[400, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis": [[401, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis"]], "neural_compressor.ux.components.diagnosis.op_details": [[402, "module-neural_compressor.ux.components.diagnosis.op_details"]], "neural_compressor.ux.components.diagnosis.op_entry": [[403, "module-neural_compressor.ux.components.diagnosis.op_entry"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis": [[404, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis": [[405, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis"]], "neural_compressor.ux.components.file_browser.file_browser": [[406, "module-neural_compressor.ux.components.file_browser.file_browser"]], "neural_compressor.ux.components.file_browser": [[407, "module-neural_compressor.ux.components.file_browser"]], "neural_compressor.ux.components.graph.attribute": [[408, "module-neural_compressor.ux.components.graph.attribute"]], "neural_compressor.ux.components.graph.collapser": [[409, "module-neural_compressor.ux.components.graph.collapser"]], "neural_compressor.ux.components.graph.edge": [[410, "module-neural_compressor.ux.components.graph.edge"]], "neural_compressor.ux.components.graph.graph": [[411, "module-neural_compressor.ux.components.graph.graph"]], "neural_compressor.ux.components.graph.graph_reader": [[412, "module-neural_compressor.ux.components.graph.graph_reader"]], "neural_compressor.ux.components.graph": [[413, "module-neural_compressor.ux.components.graph"]], "neural_compressor.ux.components.graph.node": [[414, "module-neural_compressor.ux.components.graph.node"]], "neural_compressor.ux.components.graph.reader": [[415, "module-neural_compressor.ux.components.graph.reader"]], "neural_compressor.ux.components.graph.reader.onnxrt_reader": [[416, "module-neural_compressor.ux.components.graph.reader.onnxrt_reader"]], "neural_compressor.ux.components.graph.reader.tensorflow_reader": [[417, "module-neural_compressor.ux.components.graph.reader.tensorflow_reader"]], "neural_compressor.ux.components": [[418, "module-neural_compressor.ux.components"]], "neural_compressor.ux.components.jobs_management": [[419, "module-neural_compressor.ux.components.jobs_management"]], "neural_compressor.ux.components.jobs_management.jobs_control_queue": [[420, "module-neural_compressor.ux.components.jobs_management.jobs_control_queue"]], "neural_compressor.ux.components.jobs_management.jobs_manager": [[421, "module-neural_compressor.ux.components.jobs_management.jobs_manager"]], "neural_compressor.ux.components.jobs_management.request": [[422, "module-neural_compressor.ux.components.jobs_management.request"]], "neural_compressor.ux.components.manage_workspace": [[423, "module-neural_compressor.ux.components.manage_workspace"]], "neural_compressor.ux.components.model.domain": [[424, "module-neural_compressor.ux.components.model.domain"]], "neural_compressor.ux.components.model": [[425, "module-neural_compressor.ux.components.model"]], "neural_compressor.ux.components.model.model": [[426, "module-neural_compressor.ux.components.model.model"]], "neural_compressor.ux.components.model.model_type_getter": [[427, "module-neural_compressor.ux.components.model.model_type_getter"]], "neural_compressor.ux.components.model.onnxrt": [[428, "module-neural_compressor.ux.components.model.onnxrt"]], "neural_compressor.ux.components.model.onnxrt.model": [[429, "module-neural_compressor.ux.components.model.onnxrt.model"]], "neural_compressor.ux.components.model.pytorch": [[430, "module-neural_compressor.ux.components.model.pytorch"]], "neural_compressor.ux.components.model.pytorch.model": [[431, "module-neural_compressor.ux.components.model.pytorch.model"]], "neural_compressor.ux.components.model.repository": [[432, "module-neural_compressor.ux.components.model.repository"]], "neural_compressor.ux.components.model.shape": [[433, "module-neural_compressor.ux.components.model.shape"]], "neural_compressor.ux.components.model.tensorflow.frozen_pb": [[434, "module-neural_compressor.ux.components.model.tensorflow.frozen_pb"]], "neural_compressor.ux.components.model.tensorflow": [[435, "module-neural_compressor.ux.components.model.tensorflow"]], "neural_compressor.ux.components.model.tensorflow.keras": [[436, "module-neural_compressor.ux.components.model.tensorflow.keras"]], "neural_compressor.ux.components.model.tensorflow.meta_graph": [[437, "module-neural_compressor.ux.components.model.tensorflow.meta_graph"]], "neural_compressor.ux.components.model.tensorflow.model": [[438, "module-neural_compressor.ux.components.model.tensorflow.model"]], "neural_compressor.ux.components.model.tensorflow.saved_model": [[439, "module-neural_compressor.ux.components.model.tensorflow.saved_model"]], "neural_compressor.ux.components.model.tensorflow.utils": [[440, "module-neural_compressor.ux.components.model.tensorflow.utils"]], "neural_compressor.ux.components.model_zoo.download_config": [[441, "module-neural_compressor.ux.components.model_zoo.download_config"]], "neural_compressor.ux.components.model_zoo.download_model": [[442, "module-neural_compressor.ux.components.model_zoo.download_model"]], "neural_compressor.ux.components.model_zoo.downloader": [[443, "module-neural_compressor.ux.components.model_zoo.downloader"]], "neural_compressor.ux.components.model_zoo": [[444, "module-neural_compressor.ux.components.model_zoo"]], "neural_compressor.ux.components.model_zoo.list_models": [[445, "module-neural_compressor.ux.components.model_zoo.list_models"]], "neural_compressor.ux.components.names_mapper": [[446, "module-neural_compressor.ux.components.names_mapper"]], "neural_compressor.ux.components.names_mapper.names_mapper": [[447, "module-neural_compressor.ux.components.names_mapper.names_mapper"]], "neural_compressor.ux.components.optimization.execute_optimization": [[448, "module-neural_compressor.ux.components.optimization.execute_optimization"]], "neural_compressor.ux.components.optimization.factory": [[449, "module-neural_compressor.ux.components.optimization.factory"]], "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization": [[450, "module-neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization"]], "neural_compressor.ux.components.optimization.graph_optimizer": [[451, "module-neural_compressor.ux.components.optimization.graph_optimizer"]], "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model": [[452, "module-neural_compressor.ux.components.optimization.graph_optimizer.optimize_model"]], "neural_compressor.ux.components.optimization": [[453, "module-neural_compressor.ux.components.optimization"]], "neural_compressor.ux.components.optimization.mixed_precision": [[454, "module-neural_compressor.ux.components.optimization.mixed_precision"]], "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision": [[455, "module-neural_compressor.ux.components.optimization.mixed_precision.mixed_precision"]], "neural_compressor.ux.components.optimization.mixed_precision.optimize_model": [[456, "module-neural_compressor.ux.components.optimization.mixed_precision.optimize_model"]], "neural_compressor.ux.components.optimization.neural_coder_optimization": [[457, "module-neural_compressor.ux.components.optimization.neural_coder_optimization"]], "neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model": [[458, "module-neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model"]], "neural_compressor.ux.components.optimization.optimization": [[459, "module-neural_compressor.ux.components.optimization.optimization"]], "neural_compressor.ux.components.optimization.pruning": [[460, "module-neural_compressor.ux.components.optimization.pruning"]], "neural_compressor.ux.components.optimization.pruning.optimize_model": [[461, "module-neural_compressor.ux.components.optimization.pruning.optimize_model"]], "neural_compressor.ux.components.optimization.pruning.pruning": [[462, "module-neural_compressor.ux.components.optimization.pruning.pruning"]], "neural_compressor.ux.components.optimization.tune": [[463, "module-neural_compressor.ux.components.optimization.tune"]], "neural_compressor.ux.components.optimization.tune.tune_model": [[464, "module-neural_compressor.ux.components.optimization.tune.tune_model"]], "neural_compressor.ux.components.optimization.tune.tuning": [[465, "module-neural_compressor.ux.components.optimization.tune.tuning"]], "neural_compressor.ux.components.optimization.tuning_history": [[466, "module-neural_compressor.ux.components.optimization.tuning_history"]], "neural_compressor.ux.components.profiling.execute_profiling": [[467, "module-neural_compressor.ux.components.profiling.execute_profiling"]], "neural_compressor.ux.components.profiling.factory": [[468, "module-neural_compressor.ux.components.profiling.factory"]], "neural_compressor.ux.components.profiling": [[469, "module-neural_compressor.ux.components.profiling"]], "neural_compressor.ux.components.profiling.profile_model": [[470, "module-neural_compressor.ux.components.profiling.profile_model"]], "neural_compressor.ux.components.profiling.profiler": [[471, "module-neural_compressor.ux.components.profiling.profiler"]], "neural_compressor.ux.components.profiling.profiling": [[472, "module-neural_compressor.ux.components.profiling.profiling"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.factory": [[473, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.factory"]], "neural_compressor.ux.components.profiling.tensorflow_profiler": [[474, "module-neural_compressor.ux.components.profiling.tensorflow_profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler": [[475, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.utils": [[476, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.utils"]], "neural_compressor.ux.inc_bench": [[477, "module-neural_compressor.ux.inc_bench"]], "neural_compressor.ux": [[478, "module-neural_compressor.ux"]], "neural_compressor.ux.utils.consts": [[479, "module-neural_compressor.ux.utils.consts"]], "neural_compressor.ux.utils.environment": [[480, "module-neural_compressor.ux.utils.environment"]], "neural_compressor.ux.utils.exceptions": [[481, "module-neural_compressor.ux.utils.exceptions"]], "neural_compressor.ux.utils.executor": [[482, "module-neural_compressor.ux.utils.executor"]], "neural_compressor.ux.utils.expiring_dict": [[483, "module-neural_compressor.ux.utils.expiring_dict"]], "neural_compressor.ux.utils.github_info": [[484, "module-neural_compressor.ux.utils.github_info"]], "neural_compressor.ux.utils.hw_info": [[485, "module-neural_compressor.ux.utils.hw_info"]], "neural_compressor.ux.utils": [[486, "module-neural_compressor.ux.utils"]], "neural_compressor.ux.utils.json_serializer": [[487, "module-neural_compressor.ux.utils.json_serializer"]], "neural_compressor.ux.utils.logger": [[488, "module-neural_compressor.ux.utils.logger"]], "neural_compressor.ux.utils.parser": [[489, "module-neural_compressor.ux.utils.parser"]], "neural_compressor.ux.utils.proc": [[490, "module-neural_compressor.ux.utils.proc"]], "neural_compressor.ux.utils.processes": [[491, "module-neural_compressor.ux.utils.processes"]], "neural_compressor.ux.utils.singleton": [[492, "module-neural_compressor.ux.utils.singleton"]], "neural_compressor.ux.utils.status_updates": [[493, "module-neural_compressor.ux.utils.status_updates"]], "neural_compressor.ux.utils.templates": [[494, "module-neural_compressor.ux.utils.templates"]], "neural_compressor.ux.utils.templates.metric": [[495, "module-neural_compressor.ux.utils.templates.metric"]], "neural_compressor.ux.utils.templates.workdir": [[496, "module-neural_compressor.ux.utils.templates.workdir"]], "neural_compressor.ux.utils.utils": [[497, "module-neural_compressor.ux.utils.utils"]], "neural_compressor.ux.utils.workload.config": [[498, "module-neural_compressor.ux.utils.workload.config"]], "neural_compressor.ux.utils.workload.dataloader": [[499, "module-neural_compressor.ux.utils.workload.dataloader"]], "neural_compressor.ux.utils.workload.evaluation": [[500, "module-neural_compressor.ux.utils.workload.evaluation"]], "neural_compressor.ux.utils.workload.graph_optimization": [[501, "module-neural_compressor.ux.utils.workload.graph_optimization"]], "neural_compressor.ux.utils.workload": [[502, "module-neural_compressor.ux.utils.workload"]], "neural_compressor.ux.utils.workload.mixed_precision": [[503, "module-neural_compressor.ux.utils.workload.mixed_precision"]], "neural_compressor.ux.utils.workload.model": [[504, "module-neural_compressor.ux.utils.workload.model"]], "neural_compressor.ux.utils.workload.pruning": [[505, "module-neural_compressor.ux.utils.workload.pruning"]], "neural_compressor.ux.utils.workload.quantization": [[506, "module-neural_compressor.ux.utils.workload.quantization"]], "neural_compressor.ux.utils.workload.tuning": [[507, "module-neural_compressor.ux.utils.workload.tuning"]], "neural_compressor.ux.utils.yaml_utils": [[508, "module-neural_compressor.ux.utils.yaml_utils"]], "neural_compressor.ux.web.communication": [[509, "module-neural_compressor.ux.web.communication"]], "neural_compressor.ux.web.configuration": [[510, "module-neural_compressor.ux.web.configuration"]], "neural_compressor.ux.web.exceptions": [[511, "module-neural_compressor.ux.web.exceptions"]], "neural_compressor.ux.web": [[512, "module-neural_compressor.ux.web"]], "neural_compressor.ux.web.router": [[513, "module-neural_compressor.ux.web.router"]], "neural_compressor.ux.web.server": [[514, "module-neural_compressor.ux.web.server"]], "neural_compressor.ux.web.service.benchmark": [[515, "module-neural_compressor.ux.web.service.benchmark"]], "neural_compressor.ux.web.service.history_snapshot_parser": [[516, "module-neural_compressor.ux.web.service.history_snapshot_parser"]], "neural_compressor.ux.web.service": [[517, "module-neural_compressor.ux.web.service"]], "neural_compressor.ux.web.service.model": [[518, "module-neural_compressor.ux.web.service.model"]], "neural_compressor.ux.web.service.optimization": [[519, "module-neural_compressor.ux.web.service.optimization"]], "neural_compressor.ux.web.service.profiling": [[520, "module-neural_compressor.ux.web.service.profiling"]], "neural_compressor.ux.web.service.request_data_processor": [[521, "module-neural_compressor.ux.web.service.request_data_processor"]], "neural_compressor.ux.web.service.response_generator": [[522, "module-neural_compressor.ux.web.service.response_generator"]], "neural_compressor.ux.web.service.workload": [[523, "module-neural_compressor.ux.web.service.workload"]], "neural_compressor.version": [[524, "module-neural_compressor.version"]], "Intel\u00ae Neural Compressor Documentation": [[525, "intel-neural-compressor-documentation"], [604, "intel-neural-compressor-documentation"]], "Sections": [[525, "sections"], [604, "sections"]], "Contributor Covenant Code of Conduct": [[526, "contributor-covenant-code-of-conduct"], [527, "contributor-covenant-code-of-conduct"]], "Our Pledge": [[526, "our-pledge"]], "Our Standards": [[526, "our-standards"]], "Our Responsibilities": [[526, "our-responsibilities"]], "Scope": [[526, "scope"]], "Enforcement": [[526, "enforcement"]], "Attribution": [[526, "attribution"]], "Contribution Guidelines": [[527, "contribution-guidelines"]], "Pull Request Checklist": [[527, "pull-request-checklist"]], "Pull Request Template": [[527, "pull-request-template"]], "Support": [[527, "support"]], "FX": [[528, "fx"]], "Introduction": [[528, "introduction"], [529, "introduction"], [532, "introduction"], [547, "introduction"], [548, "introduction"], [549, "introduction"], [550, "introduction"], [552, "introduction"], [553, "introduction"], [554, "introduction"], [556, "introduction"], [558, "introduction"], [561, "introduction"], [564, "introduction"], [566, "introduction"], [567, "introduction"], [587, "introduction"], [588, "introduction"], [590, "introduction"], [592, "introduction"], [596, "introduction"], [597, "introduction"], [598, "introduction"], [599, "introduction"], [600, "introduction"], [602, "introduction"]], "FX Mode Support Matrix in Neural Compressor": [[528, "fx-mode-support-matrix-in-neural-compressor"]], "Get Start": [[528, "get-start"]], "Post Training Static Quantization": [[528, "post-training-static-quantization"], [593, "post-training-static-quantization"]], "Post Training Dynamic Quantization": [[528, "post-training-dynamic-quantization"], [593, "post-training-dynamic-quantization"]], "Quantization-Aware Training": [[528, "quantization-aware-training"]], "Examples": [[528, "examples"], [529, "examples"], [548, "examples"], [549, "examples"], [550, "examples"], [552, "examples"], [553, "examples"], [554, "examples"], [555, "examples"], [556, "examples"], [565, "examples"], [566, "examples"], [567, "examples"], [588, "examples"], [590, "examples"], [593, "examples"], [598, "examples"]], "Note": [[528, "note"]], "Details": [[528, "details"]], "Common Problem": [[528, "common-problem"]], "Dynamic Quantization": [[528, "dynamic-quantization"]], "Static Quantization & Quantization Aware Training": [[528, "static-quantization-quantization-aware-training"]], "Neural Architecture Search": [[529, "neural-architecture-search"]], "Basic NAS": [[529, "basic-nas"]], "Dynamic NAS": [[529, "dynamic-nas"]], "NAS Support Matrix": [[529, "nas-support-matrix"]], "Get Started with NAS API": [[529, "get-started-with-nas-api"]], "Basic Usage": [[529, "basic-usage"]], "1. Python code + YAML": [[529, "python-code-yaml"]], "2. Python code only": [[529, "python-code-only"]], "Advanced Usage (Custom NAS)": [[529, "advanced-usage-custom-nas"]], "Security Policy": [[530, "security-policy"]], "Report a Vulnerability": [[530, "report-a-vulnerability"]], "Intel\u00ae Neural Compressor": [[531, "intel-neural-compressor"], [585, "intel-neural-compressor"]], "Installation": [[531, "installation"], [562, "installation"], [579, "installation"]], "Install from pypi": [[531, "install-from-pypi"]], "Getting Started": [[531, "getting-started"], [559, "getting-started"]], "Quantization with Python API": [[531, "quantization-with-python-api"], [559, "quantization-with-python-api"]], "Documentation": [[531, "documentation"]], "Selected Publications/Events": [[531, "selected-publications-events"]], "Additional Content": [[531, "additional-content"]], "Research Collaborations": [[531, "research-collaborations"]], "Adaptor": [[532, "adaptor"], [533, "adaptor"]], "Adaptor Support Matrix": [[532, "adaptor-support-matrix"]], "Working Flow": [[532, "working-flow"], [593, "working-flow"]], "Get Start with Adaptor API": [[532, "get-start-with-adaptor-api"]], "Query API": [[532, "query-api"]], "Background": [[532, "background"]], "Query API Introduction": [[532, "query-api-introduction"]], "Example of Adding a New Backend Support": [[532, "example-of-adding-a-new-backend-support"]], "Capability": [[532, "capability"]], "Implement ONNXRTAdaptor Class": [[532, "implement-onnxrtadaptor-class"]], "ONNX Runtime": [[534, "onnx-runtime"], [566, "onnx-runtime"], [566, "id1"]], "Torch Utils": [[535, "torch-utils"]], "API Document Example": [[536, "api-document-example"]], "APIs": [[537, "apis"]], "Benchmark": [[538, "benchmark"], [565, "benchmark"], [592, "benchmark"]], "Compression": [[539, "compression"]], "Config": [[540, "config"]], "Mix Precision": [[541, "mix-precision"], [565, "mix-precision"]], "Model": [[542, "model"], [567, "model"]], "Objective": [[543, "objective"], [587, "objective"]], "Quantization": [[544, "quantization"], [592, "quantization"], [593, "quantization"]], "Strategy": [[545, "strategy"]], "Training": [[546, "training"]], "Intel\u00ae Neural Compressor Bench": [[547, "intel-neural-compressor-bench"]], "Table of Contents": [[547, "table-of-contents"]], "Install Intel\u00ae Neural Compressor with Bench": [[547, "install-intel-neural-compressor-with-bench"]], "Option 1: Install from Binary": [[547, "option-1-install-from-binary"]], "Option 2: Install from Source": [[547, "option-2-install-from-source"]], "Start the Intel\u00ae Neural Compressor Bench": [[547, "start-the-intel-neural-compressor-bench"]], "Home Screen": [[547, "home-screen"]], "Create New Project": [[547, "create-new-project"]], "Predefined Model": [[547, "predefined-model"]], "Custom Model": [[547, "custom-model"]], "Display Model Graph": [[547, "display-model-graph"]], "Project List": [[547, "project-list"]], "Remove Project": [[547, "remove-project"]], "Develop Project": [[547, "develop-project"]], "Optimization Tab": [[547, "optimization-tab"]], "Optimization Table": [[547, "optimization-table"]], "Optimization Wizard": [[547, "optimization-wizard"]], "Editing Optimization Entries": [[547, "editing-optimization-entries"]], "Optimization Details": [[547, "optimization-details"]], "Pruning": [[547, "pruning"], [565, "pruning"], [590, "pruning"], [592, "pruning"]], "Benchmark Tab": [[547, "benchmark-tab"]], "Benchmark Table": [[547, "benchmark-table"]], "Benchmark Wizard": [[547, "benchmark-wizard"]], "Editing Benchmark Entries": [[547, "editing-benchmark-entries"]], "Benchmark Details": [[547, "benchmark-details"]], "Profiling Tab": [[547, "profiling-tab"]], "Profiling Table": [[547, "profiling-table"]], "Profiling Wizard": [[547, "profiling-wizard"]], "Editing Profiling Entries": [[547, "editing-profiling-entries"]], "Profiling Details": [[547, "profiling-details"]], "Diagnosis Tab": [[547, "diagnosis-tab"]], "Dataset Tab": [[547, "dataset-tab"]], "Dataset List": [[547, "dataset-list"]], "Dataset Wizard": [[547, "dataset-wizard"]], "Dataset Details": [[547, "dataset-details"]], "Custom Dataset": [[547, "custom-dataset"]], "Project Information": [[547, "project-information"]], "NAS demo": [[547, "nas-demo"]], "System Information": [[547, "system-information"]], "Security": [[547, "security"], [554, "security"]], "Benchmarking": [[548, "benchmarking"]], "Benchmark Support Matrix": [[548, "benchmark-support-matrix"]], "Get Started with Benchmark API": [[548, "get-started-with-benchmark-api"]], "DataLoader": [[549, "dataloader"]], "Supported Framework Dataloader Matrix": [[549, "supported-framework-dataloader-matrix"]], "Get Start with Dataloader API": [[549, "get-start-with-dataloader-api"]], "Config Dataloader in a Yaml File": [[549, "config-dataloader-in-a-yaml-file"]], "Create a User-specific Dataloader": [[549, "create-a-user-specific-dataloader"]], "Dataset": [[550, "dataset"]], "Supported Framework Dataset Matrix": [[550, "supported-framework-dataset-matrix"]], "TensorFlow": [[550, "tensorflow"], [564, "tensorflow"], [566, "tensorflow"], [599, "tensorflow"]], "PyTorch": [[550, "pytorch"], [564, "pytorch"], [566, "pytorch"], [594, "pytorch"]], "MXNet": [[550, "mxnet"], [564, "mxnet"], [599, "mxnet"]], "ONNXRT": [[550, "onnxrt"], [564, "onnxrt"], [599, "onnxrt"]], "Get start with Dataset API": [[550, "get-start-with-dataset-api"]], "Config dataloader in a yaml file": [[550, "config-dataloader-in-a-yaml-file"]], "User-specific dataset": [[550, "user-specific-dataset"]], "Design": [[551, "design"], [600, "design"], [600, "id1"], [600, "id3"], [600, "id5"], [600, "id7"], [600, "id9"], [600, "id11"], [600, "id13"], [600, "id15"], [600, "id17"], [600, "id19"], [600, "id21"]], "Architecture": [[551, "architecture"], [561, "architecture"]], "Workflow": [[551, "workflow"]], "Distillation": [[552, "distillation"], [565, "distillation"], [592, "distillation"]], "Knowledge Distillation": [[552, "knowledge-distillation"]], "Intermediate Layer Knowledge Distillation": [[552, "intermediate-layer-knowledge-distillation"]], "Self Distillation": [[552, "self-distillation"]], "Distillation Support Matrix": [[552, "distillation-support-matrix"]], "Get Started with Distillation API": [[552, "get-started-with-distillation-api"]], "Distillation for Quantization": [[553, "distillation-for-quantization"]], "Distillation for Quantization Support Matrix": [[553, "distillation-for-quantization-support-matrix"]], "Get Started with Distillation for Quantization API": [[553, "get-started-with-distillation-for-quantization-api"]], "Distributed Training and Inference (Evaluation)": [[554, "distributed-training-and-inference-evaluation"]], "Supported Feature Matrix": [[554, "supported-feature-matrix"], [558, "supported-feature-matrix"], [561, "supported-feature-matrix"], [592, "supported-feature-matrix"], [593, "supported-feature-matrix"], [598, "supported-feature-matrix"], [602, "supported-feature-matrix"]], "Get Started with Distributed Training and Inference API": [[554, "get-started-with-distributed-training-and-inference-api"]], "Option 1: Pure Yaml Configuration": [[554, "option-1-pure-yaml-configuration"]], "Option 2: User Defined Training Function": [[554, "option-2-user-defined-training-function"]], "Horovodrun Execution": [[554, "horovodrun-execution"]], "PyTorch Examples:": [[554, "pytorch-examples"]], "TensorFlow Examples:": [[554, "tensorflow-examples"]], "Example List": [[555, "example-list"]], "Release Data": [[555, "release-data"]], "Export": [[556, "export"]], "Supported Framework Model Matrix": [[556, "supported-framework-model-matrix"], [567, "supported-framework-model-matrix"]], "FP32 Model Export": [[556, "fp32-model-export"]], "INT8 Model Export": [[556, "int8-model-export"]], "Appendix": [[556, "appendix"]], "Frequently Asked Questions": [[557, "frequently-asked-questions"]], "Common Build Issues": [[557, "common-build-issues"]], "Issue 1:": [[557, "issue-1"]], "Issue 2:": [[557, "issue-2"]], "Issue 3:": [[557, "issue-3"]], "Issue 4:": [[557, "issue-4"]], "Framework YAML Configuration Files": [[558, "framework-yaml-configuration-files"]], "Get started with Framework YAML Files": [[558, "get-started-with-framework-yaml-files"]], "Quick Samples": [[559, "quick-samples"]], "Quantization with JupyterLab Extension": [[559, "quantization-with-jupyterlab-extension"]], "Quantization with GUI": [[559, "quantization-with-gui"]], "Validated Models": [[559, "validated-models"], [597, "validated-models"], [603, "validated-models"]], "Incompatible changes between v1.2 and v1.1": [[560, "incompatible-changes-between-v1-2-and-v1-1"]], "User-facing APIs": [[560, "user-facing-apis"]], "Built-in transform/dataset/metric APIs": [[560, "built-in-transform-dataset-metric-apis"]], "Infrastructure of Intel\u00ae Neural Compressor": [[561, "infrastructure-of-intel-neural-compressor"]], "Linux Installation": [[562, "linux-installation"]], "Prerequisites": [[562, "prerequisites"], [562, "id1"]], "Install from Binary": [[562, "install-from-binary"], [562, "id2"]], "Install from Source": [[562, "install-from-source"], [562, "id3"]], "Install from AI Kit": [[562, "install-from-ai-kit"]], "Windows Installation": [[562, "windows-installation"]], "System Requirements": [[562, "system-requirements"]], "Validated Hardware Environment": [[562, "validated-hardware-environment"]], "Intel\u00ae Neural Compressor supports CPUs based on Intel 64 architecture or compatible processors:": [[562, "intel-neural-compressor-supports-cpus-based-on-intel-64-architecture-or-compatible-processors"]], "Intel\u00ae Neural Compressor supports GPUs built on Intel\u2019s Xe architecture:": [[562, "intel-neural-compressor-supports-gpus-built-on-intel-s-xe-architecture"]], "Intel\u00ae Neural Compressor quantized ONNX models support multiple hardware vendors through ONNX Runtime:": [[562, "intel-neural-compressor-quantized-onnx-models-support-multiple-hardware-vendors-through-onnx-runtime"]], "Validated Software Environment": [[562, "validated-software-environment"]], "Legal Information": [[563, "legal-information"]], "License": [[563, "license"]], "Citation": [[563, "citation"]], "Trademarks": [[563, "trademarks"]], "Metrics": [[564, "metrics"]], "Supported Built-in Metric Matrix": [[564, "supported-built-in-metric-matrix"]], "Get Start with Metrics": [[564, "get-start-with-metrics"]], "Support Single-metric and Multi-metrics": [[564, "support-single-metric-and-multi-metrics"]], "Build Custom Metric with Python API": [[564, "build-custom-metric-with-python-api"]], "Code Migration from Intel Neural Compressor 1.X to Intel Neural Compressor 2.X": [[565, "code-migration-from-intel-neural-compressor-1-x-to-intel-neural-compressor-2-x"]], "Model Quantization": [[565, "model-quantization"]], "Post-training Quantization": [[565, "post-training-quantization"]], "Quantization Aware Training": [[565, "quantization-aware-training"], [593, "quantization-aware-training"], [593, "id1"]], "Orchestration": [[565, "orchestration"]], "Mixed Precision": [[566, "mixed-precision"]], "Mixed Precision Support Matrix": [[566, "mixed-precision-support-matrix"]], "Get Started with Mixed Precision API": [[566, "get-started-with-mixed-precision-api"]], "Neural Coder": [[568, "neural-coder"], [585, "neural-coder"], [585, "id1"]], "What do we offer?": [[568, "what-do-we-offer"]], "Getting Started!": [[568, "getting-started"], [579, "getting-started"]], "Jupyter Lab Extension": [[568, "jupyter-lab-extension"]], "Python Launcher": [[568, "python-launcher"], [573, "python-launcher"]], "Python API": [[568, "python-api"]], "Contact": [[568, "contact"]], "AWS Amazon SageMaker Support": [[569, "aws-amazon-sagemaker-support"]], "Start Jupyter Lab 3": [[569, "start-jupyter-lab-3"]], "For SageMaker Studio": [[569, "for-sagemaker-studio"]], "For SageMaker Notebook instance": [[569, "for-sagemaker-notebook-instance"]], "Installation Guide": [[569, "installation-guide"]], "BigDL Nano Support": [[570, "bigdl-nano-support"]], "Example": [[570, "example"], [574, "example"], [587, "example"], [597, "example"]], "Support Matrix": [[570, "support-matrix"]], "Intel CPU Platforms: Best Performance Setting": [[571, "intel-cpu-platforms-best-performance-setting"]], "Install MKL, OpenMP and JEMALLOC": [[571, "install-mkl-openmp-and-jemalloc"]], "Install NUMA Controller": [[571, "install-numa-controller"]], "Environment Variables": [[571, "environment-variables"]], "Frequency Governers": [[571, "frequency-governers"]], "Neural Coder as Python API": [[572, "neural-coder-as-python-api"]], "Enable": [[572, "enable"]], "Bench": [[572, "bench"]], "SuperBench": [[572, "superbench"]], "Quick-Start": [[573, "quick-start"]], "Launcher Arguments (Optional)": [[573, "launcher-arguments-optional"]], "Neural Coder for Quantization": [[574, "neural-coder-for-quantization"]], "Features Supported": [[574, "features-supported"]], "Models Supported": [[574, "models-supported"]], "Usage": [[574, "usage"], [598, "usage"], [598, "id1"], [600, "usage"], [600, "id2"], [600, "id4"], [600, "id6"], [600, "id8"], [600, "id10"], [600, "id12"], [600, "id14"], [600, "id16"], [600, "id18"], [600, "id20"], [600, "id22"]], "PyPI distribution:": [[574, "pypi-distribution"]], "Supported Optimization Features": [[575, "supported-optimization-features"]], "v0.4": [[576, "v0-4"]], "Highlights": [[576, "highlights"]], "Others": [[576, "others"]], "Changelog": [[577, "changelog"], [581, "changelog"]], "neural_compressor_ext_lab": [[578, "neural-compressor-ext-lab"]], "Requirements": [[578, "requirements"], [582, "requirements"]], "Install": [[578, "install"], [582, "install"]], "Uninstall": [[578, "uninstall"], [582, "uninstall"]], "Contributing": [[578, "contributing"], [582, "contributing"]], "Development install": [[578, "development-install"], [582, "development-install"]], "Development uninstall": [[578, "development-uninstall"], [582, "development-uninstall"]], "Packaging the extension": [[578, "packaging-the-extension"], [582, "packaging-the-extension"]], "Intel\u00ae Neural Compressor as JupyterLab Extension": [[579, "intel-neural-compressor-as-jupyterlab-extension"]], "Auto-enable a feature": [[579, "auto-enable-a-feature"]], "Or let us help you auto-select the best feature": [[579, "or-let-us-help-you-auto-select-the-best-feature"]], "Pre-requisites": [[579, "pre-requisites"]], "Making a new release of neural_compressor_ext_lab": [[580, "making-a-new-release-of-neural-compressor-ext-lab"]], "Manual release": [[580, "manual-release"], [583, "manual-release"]], "Python package": [[580, "python-package"], [583, "python-package"]], "NPM package": [[580, "npm-package"], [583, "npm-package"]], "Automated releases with the Jupyter Releaser": [[580, "automated-releases-with-the-jupyter-releaser"], [583, "automated-releases-with-the-jupyter-releaser"]], "Publishing to conda-forge": [[580, "publishing-to-conda-forge"], [583, "publishing-to-conda-forge"]], "neural_compressor_ext_lab_alibaba": [[582, "neural-compressor-ext-lab-alibaba"]], "Making a new release of neural_compressor_ext_lab_alibaba": [[583, "making-a-new-release-of-neural-compressor-ext-lab-alibaba"]], "Change Log": [[584, "change-log"]], "[Unreleased]": [[584, "unreleased"]], "Background Introduction": [[585, "background-introduction"]], "Neural Coder Extension in VSCode": [[585, "neural-coder-extension-in-vscode"]], "Neural Coder Extension Usage": [[585, "neural-coder-extension-usage"]], "1. Open": [[585, "open"]], "2. Search": [[585, "search"]], "3. Setting": [[585, "setting"]], "4. Icon": [[585, "icon"]], "5. optimization (quantization)": [[585, "optimization-quantization"]], "5.1 Enable": [[585, "enable"]], "5.2 Auto": [[585, "auto"]], "Welcome to your VS Code Extension": [[586, "welcome-to-your-vs-code-extension"]], "What\u2019s in the folder": [[586, "what-s-in-the-folder"]], "Setup": [[586, "setup"]], "Get up and running straight away": [[586, "get-up-and-running-straight-away"]], "Make changes": [[586, "make-changes"]], "Explore the API": [[586, "explore-the-api"]], "Run tests": [[586, "run-tests"]], "Go further": [[586, "go-further"]], "Single Objective": [[587, "single-objective"]], "Multiple Objectives": [[587, "multiple-objectives"]], "Objective Support Matrix": [[587, "objective-support-matrix"]], "Get Started with Objective API": [[587, "get-started-with-objective-api"]], "Config Single Objective": [[587, "config-single-objective"]], "Config Multiple Objectives": [[587, "config-multiple-objectives"]], "Optimization Orchestration": [[588, "optimization-orchestration"]], "One-shot": [[588, "one-shot"]], "Orchestration Support Matrix": [[588, "orchestration-support-matrix"]], "Get Started with Orchestration API": [[588, "get-started-with-orchestration-api"]], "SYSTEM CONFIGURATION": [[589, "system-configuration"]], "Neural Network Pruning": [[590, "neural-network-pruning"]], "Pruning Patterns": [[590, "pruning-patterns"]], "Pruning Criteria": [[590, "pruning-criteria"]], "Pruning Schedule": [[590, "pruning-schedule"]], "Pruning Types": [[590, "pruning-types"]], "Pruning Scope": [[590, "pruning-scope"]], "Sparsity Decay Types": [[590, "sparsity-decay-types"]], "Regularization": [[590, "regularization"]], "Pruning Support Matrix": [[590, "pruning-support-matrix"]], "Get Started with Pruning API": [[590, "get-started-with-pruning-api"]], "Sparse Model Deployment": [[590, "sparse-model-deployment"]], "Reference": [[590, "reference"], [593, "reference"], [597, "reference"]], "Full Publications/Events (57)": [[591, "full-publications-events-57"]], "2023 (4)": [[591, "id1"]], "2022 (34)": [[591, "id2"]], "2021 (15)": [[591, "id3"]], "2018 - 2020 (4)": [[591, "id4"]], "Pythonic Style Access for Configurations": [[592, "pythonic-style-access-for-configurations"]], "Pythonic API for User Configurations": [[592, "pythonic-api-for-user-configurations"], [592, "id1"]], "Pythonic API for Framework Configurations": [[592, "pythonic-api-for-framework-configurations"], [592, "id2"]], "Get Started with Pythonic API for Configurations": [[592, "get-started-with-pythonic-api-for-configurations"]], "NAS": [[592, "nas"]], "Quantization Introduction": [[593, "quantization-introduction"]], "Quantization Fundamentals": [[593, "quantization-fundamentals"], [597, "quantization-fundamentals"]], "Quantization Support Matrix": [[593, "quantization-support-matrix"]], "Quantization Scheme in TensorFlow": [[593, "quantization-scheme-in-tensorflow"]], "Quantization Scheme in PyTorch": [[593, "quantization-scheme-in-pytorch"]], "Quantization Scheme in IPEX": [[593, "quantization-scheme-in-ipex"]], "Quantization Scheme in MXNet": [[593, "quantization-scheme-in-mxnet"]], "Quantization Scheme in ONNX Runtime": [[593, "quantization-scheme-in-onnx-runtime"]], "Quantization Approaches": [[593, "quantization-approaches"]], "With or Without Accuracy Aware Tuning": [[593, "with-or-without-accuracy-aware-tuning"]], "Get Started": [[593, "get-started"]], "Post Training Quantization": [[593, "post-training-quantization"]], "Specify Quantization Rules": [[593, "specify-quantization-rules"]], "Specify Quantization Recipes": [[593, "specify-quantization-recipes"]], "Specify Quantization Backend": [[593, "specify-quantization-backend"]], "Turn OFF Auto Mixed Precision during Quantization": [[594, "turn-off-auto-mixed-precision-during-quantization"]], "Tensorflow": [[594, "tensorflow"]], "Release": [[595, "release"]], "Release Notes": [[595, "release-notes"]], "Known Issues": [[595, "known-issues"]], "Incompatible Changes": [[595, "incompatible-changes"]], "SigOpt Strategy": [[596, "sigopt-strategy"]], "Preparation": [[596, "preparation"]], "SigOpt Platform": [[596, "sigopt-platform"]], "Neural Compressor Configuration": [[596, "neural-compressor-configuration"]], "Performance": [[596, "performance"]], "Benefit of SigOpt Strategy": [[596, "benefit-of-sigopt-strategy"]], "Performance Comparison of Different Strategies": [[596, "performance-comparison-of-different-strategies"]], "Smooth Quant": [[597, "smooth-quant"]], "Per-tenor & Per-channel": [[597, "per-tenor-per-channel"]], "Per-tensor example": [[597, "per-tensor-example"]], "Per-channel example": [[597, "per-channel-example"]], "Matmul quantization example": [[597, "matmul-quantization-example"]], "Per-channel limitation": [[597, "per-channel-limitation"]], "SmoothQuant and Our Enhancement": [[597, "smoothquant-and-our-enhancement"]], "SmoothQuant": [[597, "smoothquant"]], "Our enhancement:": [[597, "our-enhancement"]], "Algorithm: Layer-wise Auto-tuning of $\\alpha$.": [[597, "algorithm-layer-wise-auto-tuning-of-alpha"]], "Engineering": [[597, "engineering"]], "TensorBoard": [[598, "tensorboard"]], "Get Started with TensorBoard": [[598, "get-started-with-tensorboard"]], "PyTorch TensorBoard": [[598, "pytorch-tensorboard"]], "TensorFlow Tensorboard": [[598, "tensorflow-tensorboard"]], "PyTorch Examples": [[598, "pytorch-examples"]], "TensorFlow Examples": [[598, "tensorflow-examples"]], "Transform": [[599, "transform"]], "Transform Support List": [[599, "transform-support-list"]], "Pytorch": [[599, "pytorch"]], "Tuning Strategies": [[600, "tuning-strategies"]], "Strategy Design": [[600, "strategy-design"]], "Tuning Space": [[600, "tuning-space"]], "Exit Policy": [[600, "exit-policy"]], "Accuracy Criteria": [[600, "accuracy-criteria"]], "Tuning Process": [[600, "tuning-process"]], "Tuning Algorithms": [[600, "tuning-algorithms"]], "Auto": [[600, "auto"]], "Conservative Tuning": [[600, "conservative-tuning"]], "Basic": [[600, "basic"]], "MSE": [[600, "mse"]], "MSE_V2": [[600, "mse-v2"]], "HAWQ_V2": [[600, "hawq-v2"]], "Bayesian": [[600, "bayesian"]], "Exhaustive": [[600, "exhaustive"]], "Random": [[600, "random"]], "SigOpt": [[600, "sigopt"]], "TPE": [[600, "tpe"]], "Distributed Tuning": [[600, "distributed-tuning"]], "Customize a New Tuning Strategy": [[600, "customize-a-new-tuning-strategy"]], "User Guide": [[601, "user-guide"]], "Overview": [[601, "overview"]], "Python-based APIs": [[601, "python-based-apis"]], "Neural Coder (Zero-code Optimization)": [[601, "neural-coder-zero-code-optimization"]], "Advanced Topics": [[601, "advanced-topics"]], "User YAML Configuration Files": [[602, "user-yaml-configuration-files"]], "Get started with User YAML Files": [[602, "get-started-with-user-yaml-files"]], "Validated Quantization Examples": [[603, "validated-quantization-examples"]], "TensorFlow Models with Intel TensorFlow 2.11.0": [[603, "tensorflow-models-with-intel-tensorflow-2-11-0"]], "PyTorch Models with Torch 1.13.0+cpu in PTQ Mode": [[603, "pytorch-models-with-torch-1-13-0-cpu-in-ptq-mode"]], "PyTorch Models with Torch 1.13.0+cpu in QAT Mode": [[603, "pytorch-models-with-torch-1-13-0-cpu-in-qat-mode"]], "PyTorch Models with Torch and Intel\u00ae Extension for PyTorch* 1.13.0+cpu": [[603, "pytorch-models-with-torch-and-intel-extension-for-pytorch-1-13-0-cpu"]], "ONNX Models with ONNX Runtime 1.13.1": [[603, "onnx-models-with-onnx-runtime-1-13-1"]], "MXNet Models with MXNet 1.9.1": [[603, "mxnet-models-with-mxnet-1-9-1"]], "Validated Pruning Examples": [[603, "validated-pruning-examples"]], "Validated Knowledge Distillation Examples": [[603, "validated-knowledge-distillation-examples"]], "Validated ONNX QDQ INT8 Models on Multiple Hardware through ONNX Runtime": [[603, "validated-onnx-qdq-int8-models-on-multiple-hardware-through-onnx-runtime"]]}, "indexentries": {"644ec953a7dc_pruning_support": [[0, "module-644ec953a7dc_pruning_support"]], "module": [[0, "module-644ec953a7dc_pruning_support"], [1, "module-6ece06672ed3_v1_14"], [2, "module-6f0d0f71d92e_v1_13"], [3, "module-9e89549a08c8_v1_11"], [4, "module-block_mask"], [5, "module-env"], [6, "module-neural_compressor.adaptor.adaptor"], [7, "module-neural_compressor.adaptor"], [8, "module-neural_compressor.adaptor.keras"], [9, "module-neural_compressor.adaptor.keras_utils.conv2d"], [10, "module-neural_compressor.adaptor.keras_utils.dense"], [11, "module-neural_compressor.adaptor.keras_utils.depthwise_conv2d"], [12, "module-neural_compressor.adaptor.keras_utils"], [13, "module-neural_compressor.adaptor.keras_utils.quantizer"], [14, "module-neural_compressor.adaptor.keras_utils.separable_conv2d"], [15, "module-neural_compressor.adaptor.mxnet"], [16, "module-neural_compressor.adaptor.mxnet_utils"], [17, "module-neural_compressor.adaptor.mxnet_utils.util"], [18, "module-neural_compressor.adaptor.onnxrt"], [19, "module-neural_compressor.adaptor.ox_utils.calibration"], [20, "module-neural_compressor.adaptor.ox_utils"], [21, "module-neural_compressor.adaptor.ox_utils.operators.activation"], [22, "module-neural_compressor.adaptor.ox_utils.operators.argmax"], [23, "module-neural_compressor.adaptor.ox_utils.operators.attention"], [24, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"], [25, "module-neural_compressor.adaptor.ox_utils.operators.concat"], [26, "module-neural_compressor.adaptor.ox_utils.operators.conv"], [27, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"], [28, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"], [29, "module-neural_compressor.adaptor.ox_utils.operators.gather"], [30, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"], [31, "module-neural_compressor.adaptor.ox_utils.operators.gemm"], [32, "module-neural_compressor.adaptor.ox_utils.operators"], [33, "module-neural_compressor.adaptor.ox_utils.operators.lstm"], [34, "module-neural_compressor.adaptor.ox_utils.operators.matmul"], [35, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"], [36, "module-neural_compressor.adaptor.ox_utils.operators.ops"], [37, "module-neural_compressor.adaptor.ox_utils.operators.pad"], [38, "module-neural_compressor.adaptor.ox_utils.operators.pooling"], [39, "module-neural_compressor.adaptor.ox_utils.operators.resize"], [40, "module-neural_compressor.adaptor.ox_utils.operators.split"], [41, "module-neural_compressor.adaptor.ox_utils.quantizer"], [42, "module-neural_compressor.adaptor.ox_utils.util"], [43, "module-neural_compressor.adaptor.pytorch"], [44, "module-neural_compressor.adaptor.query"], [45, "module-neural_compressor.adaptor.tensorflow"], [46, "module-neural_compressor.adaptor.tf_utils.graph_converter"], [47, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"], [48, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"], [49, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"], [50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"], [51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"], [52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"], [53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"], [54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"], [55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"], [56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"], [57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"], [58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"], [59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"], [60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"], [61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"], [62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"], [63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"], [64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"], [65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"], [66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"], [67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"], [68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"], [69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"], [70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"], [71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"], [72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"], [73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"], [74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"], [75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"], [76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"], [77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"], [78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"], [79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"], [80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"], [81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"], [82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"], [83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"], [84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"], [85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"], [86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"], [87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"], [88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"], [89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"], [90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"], [91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"], [92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"], [93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"], [94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"], [95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"], [96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"], [97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"], [98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"], [99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"], [100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"], [101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"], [102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"], [103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"], [104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"], [105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"], [106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"], [107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"], [108, "module-neural_compressor.adaptor.tf_utils.graph_util"], [109, "module-neural_compressor.adaptor.tf_utils"], [110, "module-neural_compressor.adaptor.tf_utils.quantize_graph"], [111, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"], [112, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"], [113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"], [114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"], [115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"], [116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"], [117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"], [118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"], [119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"], [120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"], [121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"], [122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"], [123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"], [124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"], [125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"], [126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"], [127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"], [128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"], [129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"], [130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"], [131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"], [132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"], [133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"], [134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"], [135, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"], [136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"], [137, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"], [138, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"], [139, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"], [140, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"], [141, "module-neural_compressor.adaptor.tf_utils.transform_graph"], [142, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"], [143, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"], [144, "module-neural_compressor.adaptor.tf_utils.util"], [145, "module-neural_compressor.adaptor.torch_utils.bf16_convert"], [146, "module-neural_compressor.adaptor.torch_utils.hawq_metric"], [147, "module-neural_compressor.adaptor.torch_utils"], [148, "module-neural_compressor.adaptor.torch_utils.smooth_quant"], [149, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"], [150, "module-neural_compressor.adaptor.torch_utils.util"], [151, "module-neural_compressor.algorithm.algorithm"], [152, "module-neural_compressor.algorithm.fast_bias_correction"], [153, "module-neural_compressor.algorithm"], [154, "module-neural_compressor.algorithm.smooth_quant"], [155, "module-neural_compressor.algorithm.weight_correction"], [156, "module-neural_compressor.benchmark"], [157, "module-neural_compressor.compression.callbacks"], [158, "module-neural_compressor.compression.distillation.criterions"], [159, "module-neural_compressor.compression.distillation"], [160, "module-neural_compressor.compression"], [161, "module-neural_compressor.compression.pruner.criteria"], [162, "module-neural_compressor.compression.pruner"], [163, "module-neural_compressor.compression.pruner.model_slim"], [164, "module-neural_compressor.compression.pruner.model_slim.pattern_analyzer"], [165, "module-neural_compressor.compression.pruner.model_slim.weight_slim"], [166, "module-neural_compressor.compression.pruner.patterns"], [167, "module-neural_compressor.compression.pruner.pruners"], [168, "module-neural_compressor.compression.pruner.regs"], [169, "module-neural_compressor.compression.pruner.schedulers"], [170, "module-neural_compressor.compression.pruner.utils"], [171, "module-neural_compressor.conf.config"], [172, "module-neural_compressor.conf.dotdict"], [173, "module-neural_compressor.conf"], [174, "module-neural_compressor.conf.pythonic_config"], [175, "module-neural_compressor.config"], [176, "module-neural_compressor.contrib"], [177, "module-neural_compressor.contrib.strategy"], [178, "module-neural_compressor.contrib.strategy.sigopt"], [179, "module-neural_compressor.contrib.strategy.tpe"], [180, "module-neural_compressor.data.dataloaders.base_dataloader"], [181, "module-neural_compressor.data.dataloaders.dataloader"], [182, "module-neural_compressor.data.dataloaders.default_dataloader"], [183, "module-neural_compressor.data.dataloaders.fetcher"], [184, "module-neural_compressor.data.dataloaders"], [185, "module-neural_compressor.data.dataloaders.mxnet_dataloader"], [186, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"], [187, "module-neural_compressor.data.dataloaders.pytorch_dataloader"], [188, "module-neural_compressor.data.dataloaders.sampler"], [189, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"], [190, "module-neural_compressor.data.datasets.bert_dataset"], [191, "module-neural_compressor.data.datasets.coco_dataset"], [192, "module-neural_compressor.data.datasets.dataset"], [193, "module-neural_compressor.data.datasets.dummy_dataset"], [194, "module-neural_compressor.data.datasets.dummy_dataset_v2"], [195, "module-neural_compressor.data.datasets.imagenet_dataset"], [196, "module-neural_compressor.data.datasets"], [197, "module-neural_compressor.data.datasets.style_transfer_dataset"], [198, "module-neural_compressor.data.filters.coco_filter"], [199, "module-neural_compressor.data.filters.filter"], [200, "module-neural_compressor.data.filters"], [201, "module-neural_compressor.data"], [202, "module-neural_compressor.data.transforms.coco_transform"], [203, "module-neural_compressor.data.transforms.imagenet_transform"], [204, "module-neural_compressor.data.transforms"], [205, "module-neural_compressor.data.transforms.postprocess"], [206, "module-neural_compressor.data.transforms.tokenization"], [207, "module-neural_compressor.data.transforms.transform"], [208, "module-neural_compressor.experimental.benchmark"], [209, "module-neural_compressor.experimental.common.criterion"], [210, "module-neural_compressor.experimental.common.dataloader"], [211, "module-neural_compressor.experimental.common"], [212, "module-neural_compressor.experimental.common.metric"], [213, "module-neural_compressor.experimental.common.model"], [214, "module-neural_compressor.experimental.common.optimizer"], [215, "module-neural_compressor.experimental.common.postprocess"], [216, "module-neural_compressor.experimental.common.torch_utils"], [217, "module-neural_compressor.experimental.component"], [218, "module-neural_compressor.experimental.compression"], [219, "module-neural_compressor.experimental.compression.pruning"], [220, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"], [221, "module-neural_compressor.experimental.data.dataloaders.dataloader"], [222, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"], [223, "module-neural_compressor.experimental.data.dataloaders.fetcher"], [224, "module-neural_compressor.experimental.data.dataloaders"], [225, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"], [226, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"], [227, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"], [228, "module-neural_compressor.experimental.data.dataloaders.sampler"], [229, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"], [230, "module-neural_compressor.experimental.data.datasets.bert_dataset"], [231, "module-neural_compressor.experimental.data.datasets.coco_dataset"], [232, "module-neural_compressor.experimental.data.datasets.dataset"], [233, "module-neural_compressor.experimental.data.datasets.dummy_dataset"], [234, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"], [235, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"], [236, "module-neural_compressor.experimental.data.datasets"], [237, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"], [238, "module-neural_compressor.experimental.data.filters.coco_filter"], [239, "module-neural_compressor.experimental.data.filters.filter"], [240, "module-neural_compressor.experimental.data.filters"], [241, "module-neural_compressor.experimental.data"], [242, "module-neural_compressor.experimental.data.transforms.imagenet_transform"], [243, "module-neural_compressor.experimental.data.transforms"], [244, "module-neural_compressor.experimental.data.transforms.tokenization"], [245, "module-neural_compressor.experimental.data.transforms.transform"], [246, "module-neural_compressor.experimental.distillation"], [247, "module-neural_compressor.experimental.export"], [248, "module-neural_compressor.experimental.export.qlinear2qdq"], [249, "module-neural_compressor.experimental.export.tf2onnx"], [250, "module-neural_compressor.experimental.export.torch2onnx"], [251, "module-neural_compressor.experimental.export.utils"], [252, "module-neural_compressor.experimental.graph_optimization"], [253, "module-neural_compressor.experimental"], [254, "module-neural_compressor.experimental.metric.bleu"], [255, "module-neural_compressor.experimental.metric.bleu_util"], [256, "module-neural_compressor.experimental.metric.coco_label_map"], [257, "module-neural_compressor.experimental.metric.coco_tools"], [258, "module-neural_compressor.experimental.metric.evaluate_squad"], [259, "module-neural_compressor.experimental.metric.f1"], [260, "module-neural_compressor.experimental.metric"], [261, "module-neural_compressor.experimental.metric.metric"], [262, "module-neural_compressor.experimental.mixed_precision"], [263, "module-neural_compressor.experimental.model_conversion"], [264, "module-neural_compressor.experimental.nas.basic_nas"], [265, "module-neural_compressor.experimental.nas.dynas"], [266, "module-neural_compressor.experimental.nas"], [267, "module-neural_compressor.experimental.nas.nas"], [268, "module-neural_compressor.experimental.nas.nas_utils"], [269, "module-neural_compressor.experimental.nas.search_algorithms"], [270, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"], [271, "module-neural_compressor.experimental.pruner_legacy.group_lasso"], [272, "module-neural_compressor.experimental.pruner_legacy"], [273, "module-neural_compressor.experimental.pruner_legacy.magnitude"], [274, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"], [275, "module-neural_compressor.experimental.pruner_legacy.pruner"], [276, "module-neural_compressor.experimental.pruning"], [277, "module-neural_compressor.experimental.pruning_recipes"], [278, "module-neural_compressor.experimental.pruning_recipes.patterns"], [279, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"], [280, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"], [281, "module-neural_compressor.experimental.pruning_v2"], [282, "module-neural_compressor.experimental.pytorch_pruner"], [283, "module-neural_compressor.experimental.pytorch_pruner.logger"], [284, "module-neural_compressor.experimental.pytorch_pruner.patterns"], [285, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"], [286, "module-neural_compressor.experimental.pytorch_pruner.pruner"], [287, "module-neural_compressor.experimental.pytorch_pruner.pruning"], [288, "module-neural_compressor.experimental.pytorch_pruner.scheduler"], [289, "module-neural_compressor.experimental.quantization"], [290, "module-neural_compressor.experimental.scheduler"], [291, "module-neural_compressor"], [292, "module-neural_compressor.metric.bleu"], [293, "module-neural_compressor.metric.bleu_util"], [294, "module-neural_compressor.metric.coco_label_map"], [295, "module-neural_compressor.metric.coco_tools"], [296, "module-neural_compressor.metric.evaluate_squad"], [297, "module-neural_compressor.metric.f1"], [298, "module-neural_compressor.metric"], [299, "module-neural_compressor.metric.metric"], [300, "module-neural_compressor.mix_precision"], [301, "module-neural_compressor.model.base_model"], [302, "module-neural_compressor.model"], [303, "module-neural_compressor.model.keras_model"], [304, "module-neural_compressor.model.model"], [305, "module-neural_compressor.model.mxnet_model"], [306, "module-neural_compressor.model.nets_factory"], [307, "module-neural_compressor.model.onnx_model"], [308, "module-neural_compressor.model.tensorflow_model"], [309, "module-neural_compressor.model.torch_model"], [310, "module-neural_compressor.objective"], [311, "module-neural_compressor.quantization"], [312, "module-neural_compressor.strategy.auto"], [313, "module-neural_compressor.strategy.auto_mixed_precision"], [314, "module-neural_compressor.strategy.basic"], [315, "module-neural_compressor.strategy.bayesian"], [316, "module-neural_compressor.strategy.conservative"], [317, "module-neural_compressor.strategy.exhaustive"], [318, "module-neural_compressor.strategy.hawq_v2"], [319, "module-neural_compressor.strategy"], [320, "module-neural_compressor.strategy.mse"], [321, "module-neural_compressor.strategy.mse_v2"], [322, "module-neural_compressor.strategy.random"], [323, "module-neural_compressor.strategy.strategy"], [324, "module-neural_compressor.strategy.utils.constant"], [325, "module-neural_compressor.strategy.utils"], [326, "module-neural_compressor.strategy.utils.tuning_sampler"], [327, "module-neural_compressor.strategy.utils.tuning_space"], [328, "module-neural_compressor.strategy.utils.tuning_structs"], [329, "module-neural_compressor.strategy.utils.utility"], [330, "module-neural_compressor.template.api_doc_example"], [331, "module-neural_compressor.template"], [332, "module-neural_compressor.training"], [333, "module-neural_compressor.utils.collect_layer_histogram"], [334, "module-neural_compressor.utils.constant"], [335, "module-neural_compressor.utils.create_obj_from_config"], [336, "module-neural_compressor.utils"], [337, "module-neural_compressor.utils.kl_divergence"], [338, "module-neural_compressor.utils.load_huggingface"], [339, "module-neural_compressor.utils.logger"], [340, "module-neural_compressor.utils.options"], [341, "module-neural_compressor.utils.pytorch"], [342, "module-neural_compressor.utils.utility"], [343, "module-neural_compressor.ux.components.benchmark.benchmark"], [344, "module-neural_compressor.ux.components.benchmark.benchmark_model"], [345, "module-neural_compressor.ux.components.benchmark.execute_benchmark"], [346, "module-neural_compressor.ux.components.benchmark"], [347, "module-neural_compressor.ux.components.config_generator.benchmark_config_generator"], [348, "module-neural_compressor.ux.components.config_generator.config_generator"], [349, "module-neural_compressor.ux.components.config_generator.graph_optimization_config_generator"], [350, "module-neural_compressor.ux.components.config_generator"], [351, "module-neural_compressor.ux.components.config_generator.mixed_precision_config_generator"], [352, "module-neural_compressor.ux.components.config_generator.profiling_config_generator"], [353, "module-neural_compressor.ux.components.config_generator.pruning_config_generator"], [354, "module-neural_compressor.ux.components.config_generator.quantization_config_generator"], [355, "module-neural_compressor.ux.components.configuration_wizard.configuration_parser"], [356, "module-neural_compressor.ux.components.configuration_wizard.get_boundary_nodes"], [357, "module-neural_compressor.ux.components.configuration_wizard.get_configuration"], [358, "module-neural_compressor.ux.components.configuration_wizard"], [359, "module-neural_compressor.ux.components.configuration_wizard.params_feeder"], [360, "module-neural_compressor.ux.components.configuration_wizard.pruning_config_parser"], [361, "module-neural_compressor.ux.components.db_manager.db_manager"], [362, "module-neural_compressor.ux.components.db_manager.db_models.benchmark"], [363, "module-neural_compressor.ux.components.db_manager.db_models.benchmark_result"], [364, "module-neural_compressor.ux.components.db_manager.db_models.dataloader"], [365, "module-neural_compressor.ux.components.db_manager.db_models.dataset"], [366, "module-neural_compressor.ux.components.db_manager.db_models.domain"], [367, "module-neural_compressor.ux.components.db_manager.db_models.domain_flavour"], [368, "module-neural_compressor.ux.components.db_manager.db_models.example"], [369, "module-neural_compressor.ux.components.db_manager.db_models.framework"], [370, "module-neural_compressor.ux.components.db_manager.db_models"], [371, "module-neural_compressor.ux.components.db_manager.db_models.metric"], [372, "module-neural_compressor.ux.components.db_manager.db_models.model"], [373, "module-neural_compressor.ux.components.db_manager.db_models.optimization"], [374, "module-neural_compressor.ux.components.db_manager.db_models.optimization_type"], [375, "module-neural_compressor.ux.components.db_manager.db_models.precision"], [376, "module-neural_compressor.ux.components.db_manager.db_models.profiling"], [377, "module-neural_compressor.ux.components.db_manager.db_models.profiling_result"], [378, "module-neural_compressor.ux.components.db_manager.db_models.project"], [379, "module-neural_compressor.ux.components.db_manager.db_models.pruning_details"], [380, "module-neural_compressor.ux.components.db_manager.db_models.transform"], [381, "module-neural_compressor.ux.components.db_manager.db_models.tuning_details"], [382, "module-neural_compressor.ux.components.db_manager.db_models.tuning_history"], [383, "module-neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface"], [384, "module-neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface"], [385, "module-neural_compressor.ux.components.db_manager.db_operations.db_operations"], [386, "module-neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface"], [387, "module-neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface"], [388, "module-neural_compressor.ux.components.db_manager.db_operations.examples_api_interface"], [389, "module-neural_compressor.ux.components.db_manager.db_operations"], [390, "module-neural_compressor.ux.components.db_manager.db_operations.model_api_interface"], [391, "module-neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface"], [392, "module-neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface"], [393, "module-neural_compressor.ux.components.db_manager.db_operations.project_api_interface"], [394, "module-neural_compressor.ux.components.db_manager"], [395, "module-neural_compressor.ux.components.db_manager.params_interfaces"], [396, "module-neural_compressor.ux.components.db_manager.utils"], [397, "module-neural_compressor.ux.components.diagnosis.diagnosis"], [398, "module-neural_compressor.ux.components.diagnosis.factory"], [399, "module-neural_compressor.ux.components.diagnosis"], [400, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis"], [401, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis"], [402, "module-neural_compressor.ux.components.diagnosis.op_details"], [403, "module-neural_compressor.ux.components.diagnosis.op_entry"], [404, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis"], [405, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis"], [406, "module-neural_compressor.ux.components.file_browser.file_browser"], [407, "module-neural_compressor.ux.components.file_browser"], [408, "module-neural_compressor.ux.components.graph.attribute"], [409, "module-neural_compressor.ux.components.graph.collapser"], [410, "module-neural_compressor.ux.components.graph.edge"], [411, "module-neural_compressor.ux.components.graph.graph"], [412, "module-neural_compressor.ux.components.graph.graph_reader"], [413, "module-neural_compressor.ux.components.graph"], [414, "module-neural_compressor.ux.components.graph.node"], [415, "module-neural_compressor.ux.components.graph.reader"], [416, "module-neural_compressor.ux.components.graph.reader.onnxrt_reader"], [417, "module-neural_compressor.ux.components.graph.reader.tensorflow_reader"], [418, "module-neural_compressor.ux.components"], [419, "module-neural_compressor.ux.components.jobs_management"], [420, "module-neural_compressor.ux.components.jobs_management.jobs_control_queue"], [421, "module-neural_compressor.ux.components.jobs_management.jobs_manager"], [422, "module-neural_compressor.ux.components.jobs_management.request"], [423, "module-neural_compressor.ux.components.manage_workspace"], [424, "module-neural_compressor.ux.components.model.domain"], [425, "module-neural_compressor.ux.components.model"], [426, "module-neural_compressor.ux.components.model.model"], [427, "module-neural_compressor.ux.components.model.model_type_getter"], [428, "module-neural_compressor.ux.components.model.onnxrt"], [429, "module-neural_compressor.ux.components.model.onnxrt.model"], [430, "module-neural_compressor.ux.components.model.pytorch"], [431, "module-neural_compressor.ux.components.model.pytorch.model"], [432, "module-neural_compressor.ux.components.model.repository"], [433, "module-neural_compressor.ux.components.model.shape"], [434, "module-neural_compressor.ux.components.model.tensorflow.frozen_pb"], [435, "module-neural_compressor.ux.components.model.tensorflow"], [436, "module-neural_compressor.ux.components.model.tensorflow.keras"], [437, "module-neural_compressor.ux.components.model.tensorflow.meta_graph"], [438, "module-neural_compressor.ux.components.model.tensorflow.model"], [439, "module-neural_compressor.ux.components.model.tensorflow.saved_model"], [440, "module-neural_compressor.ux.components.model.tensorflow.utils"], [441, "module-neural_compressor.ux.components.model_zoo.download_config"], [442, "module-neural_compressor.ux.components.model_zoo.download_model"], [443, "module-neural_compressor.ux.components.model_zoo.downloader"], [444, "module-neural_compressor.ux.components.model_zoo"], [445, "module-neural_compressor.ux.components.model_zoo.list_models"], [446, "module-neural_compressor.ux.components.names_mapper"], [447, "module-neural_compressor.ux.components.names_mapper.names_mapper"], [448, "module-neural_compressor.ux.components.optimization.execute_optimization"], [449, "module-neural_compressor.ux.components.optimization.factory"], [450, "module-neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization"], [451, "module-neural_compressor.ux.components.optimization.graph_optimizer"], [452, "module-neural_compressor.ux.components.optimization.graph_optimizer.optimize_model"], [453, "module-neural_compressor.ux.components.optimization"], [454, "module-neural_compressor.ux.components.optimization.mixed_precision"], [455, "module-neural_compressor.ux.components.optimization.mixed_precision.mixed_precision"], [456, "module-neural_compressor.ux.components.optimization.mixed_precision.optimize_model"], [457, "module-neural_compressor.ux.components.optimization.neural_coder_optimization"], [458, "module-neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model"], [459, "module-neural_compressor.ux.components.optimization.optimization"], [460, "module-neural_compressor.ux.components.optimization.pruning"], [461, "module-neural_compressor.ux.components.optimization.pruning.optimize_model"], [462, "module-neural_compressor.ux.components.optimization.pruning.pruning"], [463, "module-neural_compressor.ux.components.optimization.tune"], [464, "module-neural_compressor.ux.components.optimization.tune.tune_model"], [465, "module-neural_compressor.ux.components.optimization.tune.tuning"], [466, "module-neural_compressor.ux.components.optimization.tuning_history"], [467, "module-neural_compressor.ux.components.profiling.execute_profiling"], [468, "module-neural_compressor.ux.components.profiling.factory"], [469, "module-neural_compressor.ux.components.profiling"], [470, "module-neural_compressor.ux.components.profiling.profile_model"], [471, "module-neural_compressor.ux.components.profiling.profiler"], [472, "module-neural_compressor.ux.components.profiling.profiling"], [473, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.factory"], [474, "module-neural_compressor.ux.components.profiling.tensorflow_profiler"], [475, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.profiler"], [476, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.utils"], [477, "module-neural_compressor.ux.inc_bench"], [478, "module-neural_compressor.ux"], [479, "module-neural_compressor.ux.utils.consts"], [480, "module-neural_compressor.ux.utils.environment"], [481, "module-neural_compressor.ux.utils.exceptions"], [482, "module-neural_compressor.ux.utils.executor"], [483, "module-neural_compressor.ux.utils.expiring_dict"], [484, "module-neural_compressor.ux.utils.github_info"], [485, "module-neural_compressor.ux.utils.hw_info"], [486, "module-neural_compressor.ux.utils"], [487, "module-neural_compressor.ux.utils.json_serializer"], [488, "module-neural_compressor.ux.utils.logger"], [489, "module-neural_compressor.ux.utils.parser"], [490, "module-neural_compressor.ux.utils.proc"], [491, "module-neural_compressor.ux.utils.processes"], [492, "module-neural_compressor.ux.utils.singleton"], [493, "module-neural_compressor.ux.utils.status_updates"], [494, "module-neural_compressor.ux.utils.templates"], [495, "module-neural_compressor.ux.utils.templates.metric"], [496, "module-neural_compressor.ux.utils.templates.workdir"], [497, "module-neural_compressor.ux.utils.utils"], [498, "module-neural_compressor.ux.utils.workload.config"], [499, "module-neural_compressor.ux.utils.workload.dataloader"], [500, "module-neural_compressor.ux.utils.workload.evaluation"], [501, "module-neural_compressor.ux.utils.workload.graph_optimization"], [502, "module-neural_compressor.ux.utils.workload"], [503, "module-neural_compressor.ux.utils.workload.mixed_precision"], [504, "module-neural_compressor.ux.utils.workload.model"], [505, "module-neural_compressor.ux.utils.workload.pruning"], [506, "module-neural_compressor.ux.utils.workload.quantization"], [507, "module-neural_compressor.ux.utils.workload.tuning"], [508, "module-neural_compressor.ux.utils.yaml_utils"], [509, "module-neural_compressor.ux.web.communication"], [510, "module-neural_compressor.ux.web.configuration"], [511, "module-neural_compressor.ux.web.exceptions"], [512, "module-neural_compressor.ux.web"], [513, "module-neural_compressor.ux.web.router"], [514, "module-neural_compressor.ux.web.server"], [515, "module-neural_compressor.ux.web.service.benchmark"], [516, "module-neural_compressor.ux.web.service.history_snapshot_parser"], [517, "module-neural_compressor.ux.web.service"], [518, "module-neural_compressor.ux.web.service.model"], [519, "module-neural_compressor.ux.web.service.optimization"], [520, "module-neural_compressor.ux.web.service.profiling"], [521, "module-neural_compressor.ux.web.service.request_data_processor"], [522, "module-neural_compressor.ux.web.service.response_generator"], [523, "module-neural_compressor.ux.web.service.workload"], [524, "module-neural_compressor.version"]], "6ece06672ed3_v1_14": [[1, "module-6ece06672ed3_v1_14"]], "update_dataloaders() (in module 6ece06672ed3_v1_14)": [[1, "ece06672ed3_v1_14.update_dataloaders"]], "update_transformations() (in module 6ece06672ed3_v1_14)": [[1, "ece06672ed3_v1_14.update_transformations"]], "6f0d0f71d92e_v1_13": [[2, "module-6f0d0f71d92e_v1_13"]], "9e89549a08c8_v1_11": [[3, "module-9e89549a08c8_v1_11"]], "block_mask": [[4, "module-block_mask"]], "env": [[5, "module-env"]], "run_migrations_offline() (in module env)": [[5, "env.run_migrations_offline"]], "run_migrations_online() (in module env)": [[5, "env.run_migrations_online"]], "adaptor (class in neural_compressor.adaptor.adaptor)": [[6, "neural_compressor.adaptor.adaptor.Adaptor"]], "adaptor_registry() (in module neural_compressor.adaptor.adaptor)": [[6, "neural_compressor.adaptor.adaptor.adaptor_registry"]], "neural_compressor.adaptor.adaptor": [[6, "module-neural_compressor.adaptor.adaptor"]], "neural_compressor.adaptor": [[7, "module-neural_compressor.adaptor"]], "kerasadaptor (class in neural_compressor.adaptor.keras)": [[8, "neural_compressor.adaptor.keras.KerasAdaptor"]], "neural_compressor.adaptor.keras": [[8, "module-neural_compressor.adaptor.keras"]], "neural_compressor.adaptor.keras_utils.conv2d": [[9, "module-neural_compressor.adaptor.keras_utils.conv2d"]], "neural_compressor.adaptor.keras_utils.dense": [[10, "module-neural_compressor.adaptor.keras_utils.dense"]], "neural_compressor.adaptor.keras_utils.depthwise_conv2d": [[11, "module-neural_compressor.adaptor.keras_utils.depthwise_conv2d"]], "neural_compressor.adaptor.keras_utils": [[12, "module-neural_compressor.adaptor.keras_utils"]], "neural_compressor.adaptor.keras_utils.quantizer": [[13, "module-neural_compressor.adaptor.keras_utils.quantizer"]], "neural_compressor.adaptor.keras_utils.separable_conv2d": [[14, "module-neural_compressor.adaptor.keras_utils.separable_conv2d"]], "mxnetadaptor (class in neural_compressor.adaptor.mxnet)": [[15, "neural_compressor.adaptor.mxnet.MxNetAdaptor"]], "neural_compressor.adaptor.mxnet": [[15, "module-neural_compressor.adaptor.mxnet"]], "neural_compressor.adaptor.mxnet_utils": [[16, "module-neural_compressor.adaptor.mxnet_utils"]], "calibcollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.CalibCollector"]], "calibdata (class in neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.CalibData"]], "collectorbase (class in neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.CollectorBase"]], "dataiterloader (class in neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.DataIterLoader"]], "dataloaderwrap (class in neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.DataLoaderWrap"]], "namecollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.NameCollector"]], "optype (class in neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.OpType"]], "tensorcollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.TensorCollector"]], "amp_convert() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.amp_convert"]], "calib_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.calib_model"]], "check_mx_version() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.check_mx_version"]], "combine_capabilities() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.combine_capabilities"]], "create_data_example() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.create_data_example"]], "distribute_calib_tensors() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.distribute_calib_tensors"]], "ensure_list() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.ensure_list"]], "fuse() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.fuse"]], "get_framework_name() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.get_framework_name"]], "is_model_quantized() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.is_model_quantized"]], "isiterable() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.isiterable"]], "make_module() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.make_module"]], "make_nc_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.make_nc_model"]], "make_symbol_block() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.make_symbol_block"]], "ndarray_to_device() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.ndarray_to_device"]], "neural_compressor.adaptor.mxnet_utils.util": [[17, "module-neural_compressor.adaptor.mxnet_utils.util"]], "parse_tune_config() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.parse_tune_config"]], "prepare_dataloader() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.prepare_dataloader"]], "prepare_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.prepare_model"]], "prepare_model_data() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.prepare_model_data"]], "quantize_sym_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.quantize_sym_model"]], "query_quantizable_nodes() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.query_quantizable_nodes"]], "run_forward() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.run_forward"]], "onnxrt_integeropsadaptor (class in neural_compressor.adaptor.onnxrt)": [[18, "neural_compressor.adaptor.onnxrt.ONNXRT_IntegerOpsAdaptor"]], "onnxrt_qdqadaptor (class in neural_compressor.adaptor.onnxrt)": [[18, "neural_compressor.adaptor.onnxrt.ONNXRT_QDQAdaptor"]], "onnxrt_qlinearopsadaptor (class in neural_compressor.adaptor.onnxrt)": [[18, "neural_compressor.adaptor.onnxrt.ONNXRT_QLinearOpsAdaptor"]], "onnxruntimeadaptor (class in neural_compressor.adaptor.onnxrt)": [[18, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor"]], "neural_compressor.adaptor.onnxrt": [[18, "module-neural_compressor.adaptor.onnxrt"]], "onnxrtaugment (class in neural_compressor.adaptor.ox_utils.calibration)": [[19, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment"]], "neural_compressor.adaptor.ox_utils.calibration": [[19, "module-neural_compressor.adaptor.ox_utils.calibration"]], "neural_compressor.adaptor.ox_utils": [[20, "module-neural_compressor.adaptor.ox_utils"]], "activationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[21, "neural_compressor.adaptor.ox_utils.operators.activation.ActivationOperator"]], "qactivationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[21, "neural_compressor.adaptor.ox_utils.operators.activation.QActivationOperator"]], "removableactivationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[21, "neural_compressor.adaptor.ox_utils.operators.activation.RemovableActivationOperator"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[21, "module-neural_compressor.adaptor.ox_utils.operators.activation"]], "argmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.argmax)": [[22, "neural_compressor.adaptor.ox_utils.operators.argmax.ArgMaxOperator"]], "qargmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.argmax)": [[22, "neural_compressor.adaptor.ox_utils.operators.argmax.QArgMaxOperator"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[22, "module-neural_compressor.adaptor.ox_utils.operators.argmax"]], "attentionoperator (class in neural_compressor.adaptor.ox_utils.operators.attention)": [[23, "neural_compressor.adaptor.ox_utils.operators.attention.AttentionOperator"]], "qattentionoperator (class in neural_compressor.adaptor.ox_utils.operators.attention)": [[23, "neural_compressor.adaptor.ox_utils.operators.attention.QAttentionOperator"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[23, "module-neural_compressor.adaptor.ox_utils.operators.attention"]], "binaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[24, "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryOperator"]], "qbinaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[24, "neural_compressor.adaptor.ox_utils.operators.binary_op.QBinaryOperator"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[24, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"]], "concatoperator (class in neural_compressor.adaptor.ox_utils.operators.concat)": [[25, "neural_compressor.adaptor.ox_utils.operators.concat.ConcatOperator"]], "qconcatoperator (class in neural_compressor.adaptor.ox_utils.operators.concat)": [[25, "neural_compressor.adaptor.ox_utils.operators.concat.QConcatOperator"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[25, "module-neural_compressor.adaptor.ox_utils.operators.concat"]], "convoperator (class in neural_compressor.adaptor.ox_utils.operators.conv)": [[26, "neural_compressor.adaptor.ox_utils.operators.conv.ConvOperator"]], "qconvoperator (class in neural_compressor.adaptor.ox_utils.operators.conv)": [[26, "neural_compressor.adaptor.ox_utils.operators.conv.QConvOperator"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[26, "module-neural_compressor.adaptor.ox_utils.operators.conv"]], "direct8bitoperator (class in neural_compressor.adaptor.ox_utils.operators.direct_q8)": [[27, "neural_compressor.adaptor.ox_utils.operators.direct_q8.Direct8BitOperator"]], "qdirectoperator (class in neural_compressor.adaptor.ox_utils.operators.direct_q8)": [[27, "neural_compressor.adaptor.ox_utils.operators.direct_q8.QDirectOperator"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[27, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"]], "embedlayernormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.embed_layernorm)": [[28, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.EmbedLayerNormalizationOperator"]], "qembedlayernormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.embed_layernorm)": [[28, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.QEmbedLayerNormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[28, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"]], "gatheroperator (class in neural_compressor.adaptor.ox_utils.operators.gather)": [[29, "neural_compressor.adaptor.ox_utils.operators.gather.GatherOperator"]], "qgatheroperator (class in neural_compressor.adaptor.ox_utils.operators.gather)": [[29, "neural_compressor.adaptor.ox_utils.operators.gather.QGatherOperator"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[29, "module-neural_compressor.adaptor.ox_utils.operators.gather"]], "globalaveragepooloperator (class in neural_compressor.adaptor.ox_utils.operators.gavgpool)": [[30, "neural_compressor.adaptor.ox_utils.operators.gavgpool.GlobalAveragePoolOperator"]], "qglobalaveragepooloperator (class in neural_compressor.adaptor.ox_utils.operators.gavgpool)": [[30, "neural_compressor.adaptor.ox_utils.operators.gavgpool.QGlobalAveragePoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[30, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"]], "gemmoperator (class in neural_compressor.adaptor.ox_utils.operators.gemm)": [[31, "neural_compressor.adaptor.ox_utils.operators.gemm.GemmOperator"]], "qgemmoperator (class in neural_compressor.adaptor.ox_utils.operators.gemm)": [[31, "neural_compressor.adaptor.ox_utils.operators.gemm.QGemmOperator"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[31, "module-neural_compressor.adaptor.ox_utils.operators.gemm"]], "neural_compressor.adaptor.ox_utils.operators": [[32, "module-neural_compressor.adaptor.ox_utils.operators"]], "lstmoperator (class in neural_compressor.adaptor.ox_utils.operators.lstm)": [[33, "neural_compressor.adaptor.ox_utils.operators.lstm.LSTMOperator"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[33, "module-neural_compressor.adaptor.ox_utils.operators.lstm"]], "matmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[34, "neural_compressor.adaptor.ox_utils.operators.matmul.MatMulOperator"]], "qmatmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[34, "neural_compressor.adaptor.ox_utils.operators.matmul.QMatMulOperator"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[34, "module-neural_compressor.adaptor.ox_utils.operators.matmul"]], "maxpooloperator (class in neural_compressor.adaptor.ox_utils.operators.maxpool)": [[35, "neural_compressor.adaptor.ox_utils.operators.maxpool.MaxPoolOperator"]], "qmaxpooloperator (class in neural_compressor.adaptor.ox_utils.operators.maxpool)": [[35, "neural_compressor.adaptor.ox_utils.operators.maxpool.QMaxPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[35, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"]], "operator (class in neural_compressor.adaptor.ox_utils.operators.ops)": [[36, "neural_compressor.adaptor.ox_utils.operators.ops.Operator"]], "qoperator (class in neural_compressor.adaptor.ox_utils.operators.ops)": [[36, "neural_compressor.adaptor.ox_utils.operators.ops.QOperator"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[36, "module-neural_compressor.adaptor.ox_utils.operators.ops"]], "op_registry() (in module neural_compressor.adaptor.ox_utils.operators.ops)": [[36, "neural_compressor.adaptor.ox_utils.operators.ops.op_registry"]], "qop_registry() (in module neural_compressor.adaptor.ox_utils.operators.ops)": [[36, "neural_compressor.adaptor.ox_utils.operators.ops.qop_registry"]], "padoperator (class in neural_compressor.adaptor.ox_utils.operators.pad)": [[37, "neural_compressor.adaptor.ox_utils.operators.pad.PadOperator"]], "qpadoperator (class in neural_compressor.adaptor.ox_utils.operators.pad)": [[37, "neural_compressor.adaptor.ox_utils.operators.pad.QPadOperator"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[37, "module-neural_compressor.adaptor.ox_utils.operators.pad"]], "pooloperator (class in neural_compressor.adaptor.ox_utils.operators.pooling)": [[38, "neural_compressor.adaptor.ox_utils.operators.pooling.PoolOperator"]], "qpooloperator (class in neural_compressor.adaptor.ox_utils.operators.pooling)": [[38, "neural_compressor.adaptor.ox_utils.operators.pooling.QPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[38, "module-neural_compressor.adaptor.ox_utils.operators.pooling"]], "qresizeoperator (class in neural_compressor.adaptor.ox_utils.operators.resize)": [[39, "neural_compressor.adaptor.ox_utils.operators.resize.QResizeOperator"]], "resizeoperator (class in neural_compressor.adaptor.ox_utils.operators.resize)": [[39, "neural_compressor.adaptor.ox_utils.operators.resize.ResizeOperator"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[39, "module-neural_compressor.adaptor.ox_utils.operators.resize"]], "qsplitoperator (class in neural_compressor.adaptor.ox_utils.operators.split)": [[40, "neural_compressor.adaptor.ox_utils.operators.split.QSplitOperator"]], "splitoperator (class in neural_compressor.adaptor.ox_utils.operators.split)": [[40, "neural_compressor.adaptor.ox_utils.operators.split.SplitOperator"]], "neural_compressor.adaptor.ox_utils.operators.split": [[40, "module-neural_compressor.adaptor.ox_utils.operators.split"]], "quantizer (class in neural_compressor.adaptor.ox_utils.quantizer)": [[41, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer"]], "neural_compressor.adaptor.ox_utils.quantizer": [[41, "module-neural_compressor.adaptor.ox_utils.quantizer"]], "quantformat (class in neural_compressor.adaptor.ox_utils.util)": [[42, "neural_compressor.adaptor.ox_utils.util.QuantFormat"]], "quanttype (class in neural_compressor.adaptor.ox_utils.util)": [[42, "neural_compressor.adaptor.ox_utils.util.QuantType"]], "quantizationmode (class in neural_compressor.adaptor.ox_utils.util)": [[42, "neural_compressor.adaptor.ox_utils.util.QuantizationMode"]], "quantizedinitializer (class in neural_compressor.adaptor.ox_utils.util)": [[42, "neural_compressor.adaptor.ox_utils.util.QuantizedInitializer"]], "quantizedvalue (class in neural_compressor.adaptor.ox_utils.util)": [[42, "neural_compressor.adaptor.ox_utils.util.QuantizedValue"]], "quantizedvaluetype (class in neural_compressor.adaptor.ox_utils.util)": [[42, "neural_compressor.adaptor.ox_utils.util.QuantizedValueType"]], "valueinfo (class in neural_compressor.adaptor.ox_utils.util)": [[42, "neural_compressor.adaptor.ox_utils.util.ValueInfo"]], "adjust_weights_per_input() (in module neural_compressor.adaptor.ox_utils.util)": [[42, "neural_compressor.adaptor.ox_utils.util.adjust_weights_per_input"]], "adjust_weights_per_op() (in module neural_compressor.adaptor.ox_utils.util)": [[42, "neural_compressor.adaptor.ox_utils.util.adjust_weights_per_op"]], "attribute_to_kwarg() (in module neural_compressor.adaptor.ox_utils.util)": [[42, "neural_compressor.adaptor.ox_utils.util.attribute_to_kwarg"]], "calculate_scale_zp() (in module neural_compressor.adaptor.ox_utils.util)": [[42, "neural_compressor.adaptor.ox_utils.util.calculate_scale_zp"]], "cast_tensor() (in module neural_compressor.adaptor.ox_utils.util)": [[42, "neural_compressor.adaptor.ox_utils.util.cast_tensor"]], "collate_preds() (in module neural_compressor.adaptor.ox_utils.util)": [[42, "neural_compressor.adaptor.ox_utils.util.collate_preds"]], "dequantize_data() (in module neural_compressor.adaptor.ox_utils.util)": [[42, "neural_compressor.adaptor.ox_utils.util.dequantize_data"]], "dequantize_data_with_scale_zero() (in module neural_compressor.adaptor.ox_utils.util)": [[42, "neural_compressor.adaptor.ox_utils.util.dequantize_data_with_scale_zero"]], "dtype_to_name() (in module neural_compressor.adaptor.ox_utils.util)": [[42, "neural_compressor.adaptor.ox_utils.util.dtype_to_name"]], "find_by_name() (in module neural_compressor.adaptor.ox_utils.util)": [[42, "neural_compressor.adaptor.ox_utils.util.find_by_name"]], "float_to_bfloat16() (in module neural_compressor.adaptor.ox_utils.util)": [[42, "neural_compressor.adaptor.ox_utils.util.float_to_bfloat16"]], "float_to_float16() (in module neural_compressor.adaptor.ox_utils.util)": [[42, "neural_compressor.adaptor.ox_utils.util.float_to_float16"]], "get_smooth_scales_per_input() (in module neural_compressor.adaptor.ox_utils.util)": [[42, "neural_compressor.adaptor.ox_utils.util.get_smooth_scales_per_input"]], "get_smooth_scales_per_op() (in module neural_compressor.adaptor.ox_utils.util)": [[42, "neural_compressor.adaptor.ox_utils.util.get_smooth_scales_per_op"]], "insert_smooth_mul_op_per_input() (in module neural_compressor.adaptor.ox_utils.util)": [[42, "neural_compressor.adaptor.ox_utils.util.insert_smooth_mul_op_per_input"]], "insert_smooth_mul_op_per_op() (in module neural_compressor.adaptor.ox_utils.util)": [[42, "neural_compressor.adaptor.ox_utils.util.insert_smooth_mul_op_per_op"]], "is_b_transposed() (in module neural_compressor.adaptor.ox_utils.util)": [[42, "neural_compressor.adaptor.ox_utils.util.is_B_transposed"]], "make_dquant_node() (in module neural_compressor.adaptor.ox_utils.util)": [[42, "neural_compressor.adaptor.ox_utils.util.make_dquant_node"]], "make_quant_node() (in module neural_compressor.adaptor.ox_utils.util)": [[42, "neural_compressor.adaptor.ox_utils.util.make_quant_node"]], "neural_compressor.adaptor.ox_utils.util": [[42, "module-neural_compressor.adaptor.ox_utils.util"]], "quantize_data() (in module neural_compressor.adaptor.ox_utils.util)": [[42, "neural_compressor.adaptor.ox_utils.util.quantize_data"]], "quantize_data_per_channel() (in module neural_compressor.adaptor.ox_utils.util)": [[42, "neural_compressor.adaptor.ox_utils.util.quantize_data_per_channel"]], "quantize_data_with_scale_zero() (in module neural_compressor.adaptor.ox_utils.util)": [[42, "neural_compressor.adaptor.ox_utils.util.quantize_data_with_scale_zero"]], "quantize_nparray() (in module neural_compressor.adaptor.ox_utils.util)": [[42, "neural_compressor.adaptor.ox_utils.util.quantize_nparray"]], "remove_init_from_model_input() (in module neural_compressor.adaptor.ox_utils.util)": [[42, "neural_compressor.adaptor.ox_utils.util.remove_init_from_model_input"]], "split_shared_bias() (in module neural_compressor.adaptor.ox_utils.util)": [[42, "neural_compressor.adaptor.ox_utils.util.split_shared_bias"]], "trt_env_setup() (in module neural_compressor.adaptor.ox_utils.util)": [[42, "neural_compressor.adaptor.ox_utils.util.trt_env_setup"]], "pytorchadaptor (class in neural_compressor.adaptor.pytorch)": [[43, "neural_compressor.adaptor.pytorch.PyTorchAdaptor"]], "pytorch_fxadaptor (class in neural_compressor.adaptor.pytorch)": [[43, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor"]], "pytorch_ipexadaptor (class in neural_compressor.adaptor.pytorch)": [[43, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor"]], "templateadaptor (class in neural_compressor.adaptor.pytorch)": [[43, "neural_compressor.adaptor.pytorch.TemplateAdaptor"]], "get_ops_recursively() (in module neural_compressor.adaptor.pytorch)": [[43, "neural_compressor.adaptor.pytorch.get_ops_recursively"]], "neural_compressor.adaptor.pytorch": [[43, "module-neural_compressor.adaptor.pytorch"]], "querybackendcapability (class in neural_compressor.adaptor.query)": [[44, "neural_compressor.adaptor.query.QueryBackendCapability"]], "neural_compressor.adaptor.query": [[44, "module-neural_compressor.adaptor.query"]], "tensorflowadaptor (class in neural_compressor.adaptor.tensorflow)": [[45, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor"]], "tensorflowquery (class in neural_compressor.adaptor.tensorflow)": [[45, "neural_compressor.adaptor.tensorflow.TensorflowQuery"]], "tensorflow_itexadaptor (class in neural_compressor.adaptor.tensorflow)": [[45, "neural_compressor.adaptor.tensorflow.Tensorflow_ITEXAdaptor"]], "neural_compressor.adaptor.tensorflow": [[45, "module-neural_compressor.adaptor.tensorflow"]], "graphconverter (class in neural_compressor.adaptor.tf_utils.graph_converter)": [[46, "neural_compressor.adaptor.tf_utils.graph_converter.GraphConverter"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[46, "module-neural_compressor.adaptor.tf_utils.graph_converter"]], "graphconverterwithoutcalib (class in neural_compressor.adaptor.tf_utils.graph_converter_without_calib)": [[47, "neural_compressor.adaptor.tf_utils.graph_converter_without_calib.GraphConverterWithoutCalib"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[47, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"]], "bf16convert (class in neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert)": [[48, "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert.BF16Convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[48, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[49, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"]], "convertaddtobiasaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd)": [[50, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd.ConvertAddToBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"]], "convertlayoutoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout)": [[51, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout.ConvertLayoutOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"]], "convertleakyreluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu)": [[52, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu.ConvertLeakyReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"]], "convertnantorandom (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random)": [[53, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random.ConvertNanToRandom"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"]], "convertplaceholdertoconst (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const)": [[54, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"]], "dequantizecastoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer)": [[55, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer.DequantizeCastOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"]], "dilatedcontraction (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction)": [[56, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction.DilatedContraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"]], "injectdummybiasaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd)": [[57, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd.InjectDummyBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"]], "expanddimsoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer)": [[58, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer.ExpandDimsOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"]], "fetchweightfromreshapeoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape)": [[59, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape.FetchWeightFromReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "foldbatchnormnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm)": [[60, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"]], "graphfoldconstantoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant)": [[61, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"]], "fusebiasaddandaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add)": [[62, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add.FuseBiasAddAndAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"]], "fusecolumnwisemuloptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul)": [[63, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul.FuseColumnWiseMulOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"]], "fuseconvwithmathoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math)": [[64, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math.FuseConvWithMathOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"]], "fusedecomposedbnoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[65, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.FuseDecomposedBNOptimizer"]], "bypass_reshape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[65, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.bypass_reshape"]], "get_const_dim_count() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[65, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.get_const_dim_count"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[65, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[65, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_name_from_input"]], "valid_reshape_inputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[65, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.valid_reshape_inputs"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[65, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.values_from_const"]], "fusedecomposedinoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.FuseDecomposedINOptimizer"]], "bypass_reshape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.bypass_reshape"]], "get_const_dim_count() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.get_const_dim_count"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.node_name_from_input"]], "valid_reshape_inputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.valid_reshape_inputs"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.values_from_const"]], "fusegeluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu.FuseGeluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"]], "fuselayernormoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.FuseLayerNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.node_name_from_input"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.values_from_const"]], "fusepadwithconv2doptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv)": [[69, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv.FusePadWithConv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"]], "fusepadwithfp32conv2doptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv)": [[70, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.FusePadWithFP32Conv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "fusetransposereshapeoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose)": [[71, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose.FuseTransposeReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"]], "graphcseoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer)": [[72, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer.GraphCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"]], "grappleroptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass)": [[73, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass.GrapplerOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"]], "insertprintminmaxnode (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node)": [[75, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node.InsertPrintMinMaxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"]], "movesqueezeafterreluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu)": [[76, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu.MoveSqueezeAfterReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"]], "preoptimization (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize)": [[77, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.PreOptimization"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"]], "removetrainingnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes)": [[78, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes.RemoveTrainingNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"]], "renamebatchnormoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm)": [[79, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm.RenameBatchNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"]], "splitsharedinputoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input)": [[80, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input.SplitSharedInputOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"]], "stripequivalentnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes)": [[81, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes.StripEquivalentNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"]], "stripunusednodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes)": [[82, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes.StripUnusedNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"]], "switchoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer)": [[83, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer.SwitchOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"]], "graphrewriterbase (class in neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base)": [[84, "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base.GraphRewriterBase"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"]], "freezefakequantopoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant)": [[86, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant.FreezeFakeQuantOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"]], "freezevaluetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value)": [[87, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"]], "freezevaluewithoutcalibtransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib)": [[88, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"]], "fuseconvredundantdequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize)": [[89, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.FuseConvRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "fuseconvrequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize.FuseConvRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"]], "fusematmulredundantdequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.FuseMatMulRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "fusematmulrequantizedequantizenewapitransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[92, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeNewAPITransformer"]], "fusematmulrequantizedequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[92, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeTransformer"]], "fusematmulrequantizenewapitransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[92, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeNewAPITransformer"]], "fusematmulrequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[92, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"]], "metainfochangingmemopoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer.MetaInfoChangingMemOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"]], "posthostconstconverter (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter)": [[95, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter.PostHostConstConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"]], "postcseoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse.PostCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"]], "quantizedrnnconverter (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert.QuantizedRNNConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"]], "scalepropagationtransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation.ScaleProPagationTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"]], "onnxgraph (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph)": [[100, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"]], "onnxnode (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"]], "onnxopschema (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[102, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.OnnxOpSchema"]], "get_max_supported_opset_version() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[102, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.get_max_supported_opset_version"]], "get_schema() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[102, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.get_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"]], "seqtype (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.SeqType"]], "add_port_to_name() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.add_port_to_name"]], "are_shapes_equal() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.are_shapes_equal"]], "assert_error() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.assert_error"]], "compute_const_folding_using_tf() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.compute_const_folding_using_tf"]], "convert_tensorflow_tensor_to_onnx() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.convert_tensorflow_tensor_to_onnx"]], "find_opset() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.find_opset"]], "get_index_from_strided_slice_of_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_index_from_strided_slice_of_shape"]], "get_subgraphs_from_onnx() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_subgraphs_from_onnx"]], "get_tensorflow_node_attr() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_node_attr"]], "get_tensorflow_node_shape_attr() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_node_shape_attr"]], "get_tensorflow_tensor_data() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_tensor_data"]], "get_tensorflow_tensor_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_tensor_shape"]], "infer_onnx_shape_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.infer_onnx_shape_dtype"]], "initialize_name_counter() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.initialize_name_counter"]], "is_list_or_tuple() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.is_list_or_tuple"]], "is_onnx_domain() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.is_onnx_domain"]], "make_onnx_inputs_outputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.make_onnx_inputs_outputs"]], "make_onnx_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.make_onnx_shape"]], "map_numpy_to_onnx_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_numpy_to_onnx_dtype"]], "map_onnx_to_numpy_type() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_onnx_to_numpy_type"]], "map_tensorflow_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_tensorflow_dtype"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"]], "read_tensorflow_node_attrs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.read_tensorflow_node_attrs"]], "save_protobuf() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.save_protobuf"]], "set_name() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.set_name"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"]], "generategraphwithqdqpattern (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern)": [[105, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern.GenerateGraphWithQDQPattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"]], "mergeduplicatedqdqoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq)": [[106, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq.MergeDuplicatedQDQOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "shareqdqforitexypatternoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern)": [[107, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern.ShareQDQForItexYPatternOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "graphanalyzer (class in neural_compressor.adaptor.tf_utils.graph_util)": [[108, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer"]], "graphrewriterhelper (class in neural_compressor.adaptor.tf_utils.graph_util)": [[108, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper"]], "neural_compressor.adaptor.tf_utils.graph_util": [[108, "module-neural_compressor.adaptor.tf_utils.graph_util"]], "neural_compressor.adaptor.tf_utils": [[109, "module-neural_compressor.adaptor.tf_utils"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[110, "module-neural_compressor.adaptor.tf_utils.quantize_graph"]], "fakequantize (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize)": [[111, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantize"]], "fakequantizebase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize)": [[111, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantizeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[111, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[112, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"]], "quantizeconfig (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config)": [[113, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"]], "init_quantize_config() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper)": [[114, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper.init_quantize_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"]], "qat_clone_function() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper)": [[114, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper.qat_clone_function"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"]], "config_quantizable_layers() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer)": [[116, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer.config_quantizable_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "quantizelayeradd (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add)": [[117, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add.QuantizeLayerAdd"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "quantizelayerbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base)": [[118, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base.QuantizeLayerBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "quantizelayerbatchnormalization (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn)": [[119, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn.QuantizeLayerBatchNormalization"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "quantizewrapper (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper)": [[120, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapper"]], "quantizewrapperbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper)": [[120, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn)": [[121, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2)": [[122, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv)": [[123, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"]], "fusenodestartwithdeconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv)": [[124, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"]], "fusenodestartwithfusedinstancenorm (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in)": [[125, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"]], "fusenodestartwithmatmul (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul)": [[126, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"]], "fusenodestartwithpooling (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling)": [[127, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"]], "optimizeqdqgraph (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq)": [[129, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.OptimizeQDQGraph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"]], "quantizegraphbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base)": [[130, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase"]], "quantizenodebase (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base)": [[130, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn)": [[131, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2)": [[132, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv)": [[133, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"]], "quantizegraphforintel (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu)": [[134, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu.QuantizeGraphForIntel"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"]], "fusenodestartwithmatmul (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul)": [[135, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[135, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"]], "fusenodestartwithpooling (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling)": [[136, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"]], "quantizegraphhelper (class in neural_compressor.adaptor.tf_utils.quantize_graph_common)": [[137, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[137, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"]], "tensorflowqdqtoonnxqdqconverter (class in neural_compressor.adaptor.tf_utils.tf2onnx_converter)": [[138, "neural_compressor.adaptor.tf_utils.tf2onnx_converter.TensorflowQDQToOnnxQDQConverter"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[138, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"]], "biascorrection (class in neural_compressor.adaptor.tf_utils.transform_graph.bias_correction)": [[139, "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction.BiasCorrection"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[139, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"]], "graphtransformbase (class in neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base)": [[140, "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.GraphTransformBase"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[140, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[141, "module-neural_compressor.adaptor.tf_utils.transform_graph"]], "insertlogging (class in neural_compressor.adaptor.tf_utils.transform_graph.insert_logging)": [[142, "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging.InsertLogging"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[142, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"]], "rerangequantizedconcat (class in neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat)": [[143, "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat.RerangeQuantizedConcat"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[143, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"]], "collate_tf_preds() (in module neural_compressor.adaptor.tf_utils.util)": [[144, "neural_compressor.adaptor.tf_utils.util.collate_tf_preds"]], "disable_random() (in module neural_compressor.adaptor.tf_utils.util)": [[144, "neural_compressor.adaptor.tf_utils.util.disable_random"]], "fix_ref_type_of_graph_def() (in module neural_compressor.adaptor.tf_utils.util)": [[144, "neural_compressor.adaptor.tf_utils.util.fix_ref_type_of_graph_def"]], "generate_feed_dict() (in module neural_compressor.adaptor.tf_utils.util)": [[144, "neural_compressor.adaptor.tf_utils.util.generate_feed_dict"]], "get_estimator_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[144, "neural_compressor.adaptor.tf_utils.util.get_estimator_graph"]], "get_graph_def() (in module neural_compressor.adaptor.tf_utils.util)": [[144, "neural_compressor.adaptor.tf_utils.util.get_graph_def"]], "get_input_output_node_names() (in module neural_compressor.adaptor.tf_utils.util)": [[144, "neural_compressor.adaptor.tf_utils.util.get_input_output_node_names"]], "get_model_input_shape() (in module neural_compressor.adaptor.tf_utils.util)": [[144, "neural_compressor.adaptor.tf_utils.util.get_model_input_shape"]], "get_tensor_by_name() (in module neural_compressor.adaptor.tf_utils.util)": [[144, "neural_compressor.adaptor.tf_utils.util.get_tensor_by_name"]], "get_tensor_val_from_graph_node() (in module neural_compressor.adaptor.tf_utils.util)": [[144, "neural_compressor.adaptor.tf_utils.util.get_tensor_val_from_graph_node"]], "int8_node_name_reverse() (in module neural_compressor.adaptor.tf_utils.util)": [[144, "neural_compressor.adaptor.tf_utils.util.int8_node_name_reverse"]], "is_ckpt_format() (in module neural_compressor.adaptor.tf_utils.util)": [[144, "neural_compressor.adaptor.tf_utils.util.is_ckpt_format"]], "is_saved_model_format() (in module neural_compressor.adaptor.tf_utils.util)": [[144, "neural_compressor.adaptor.tf_utils.util.is_saved_model_format"]], "iterator_sess_run() (in module neural_compressor.adaptor.tf_utils.util)": [[144, "neural_compressor.adaptor.tf_utils.util.iterator_sess_run"]], "neural_compressor.adaptor.tf_utils.util": [[144, "module-neural_compressor.adaptor.tf_utils.util"]], "read_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[144, "neural_compressor.adaptor.tf_utils.util.read_graph"]], "strip_equivalent_nodes() (in module neural_compressor.adaptor.tf_utils.util)": [[144, "neural_compressor.adaptor.tf_utils.util.strip_equivalent_nodes"]], "strip_unused_nodes() (in module neural_compressor.adaptor.tf_utils.util)": [[144, "neural_compressor.adaptor.tf_utils.util.strip_unused_nodes"]], "tf_diagnosis_helper() (in module neural_compressor.adaptor.tf_utils.util)": [[144, "neural_compressor.adaptor.tf_utils.util.tf_diagnosis_helper"]], "version1_eq_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[144, "neural_compressor.adaptor.tf_utils.util.version1_eq_version2"]], "version1_gt_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[144, "neural_compressor.adaptor.tf_utils.util.version1_gt_version2"]], "version1_gte_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[144, "neural_compressor.adaptor.tf_utils.util.version1_gte_version2"]], "version1_lt_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[144, "neural_compressor.adaptor.tf_utils.util.version1_lt_version2"]], "version1_lte_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[144, "neural_compressor.adaptor.tf_utils.util.version1_lte_version2"]], "write_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[144, "neural_compressor.adaptor.tf_utils.util.write_graph"]], "bf16modulewrapper (class in neural_compressor.adaptor.torch_utils.bf16_convert)": [[145, "neural_compressor.adaptor.torch_utils.bf16_convert.BF16ModuleWrapper"]], "convert() (in module neural_compressor.adaptor.torch_utils.bf16_convert)": [[145, "neural_compressor.adaptor.torch_utils.bf16_convert.Convert"]], "bf16_symbolic_trace() (in module neural_compressor.adaptor.torch_utils.bf16_convert)": [[145, "neural_compressor.adaptor.torch_utils.bf16_convert.bf16_symbolic_trace"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[145, "module-neural_compressor.adaptor.torch_utils.bf16_convert"]], "hessiantrace (class in neural_compressor.adaptor.torch_utils.hawq_metric)": [[146, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace"]], "node_collector (class in neural_compressor.adaptor.torch_utils.hawq_metric)": [[146, "neural_compressor.adaptor.torch_utils.hawq_metric.Node_collector"]], "compare_weights() (in module neural_compressor.adaptor.torch_utils.hawq_metric)": [[146, "neural_compressor.adaptor.torch_utils.hawq_metric.compare_weights"]], "hawq_top() (in module neural_compressor.adaptor.torch_utils.hawq_metric)": [[146, "neural_compressor.adaptor.torch_utils.hawq_metric.hawq_top"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[146, "module-neural_compressor.adaptor.torch_utils.hawq_metric"]], "neural_compressor.adaptor.torch_utils": [[147, "module-neural_compressor.adaptor.torch_utils"]], "graphtrace (class in neural_compressor.adaptor.torch_utils.smooth_quant)": [[148, "neural_compressor.adaptor.torch_utils.smooth_quant.GraphTrace"]], "torchsmoothquant (class in neural_compressor.adaptor.torch_utils.smooth_quant)": [[148, "neural_compressor.adaptor.torch_utils.smooth_quant.TorchSmoothQuant"]], "neural_compressor.adaptor.torch_utils.smooth_quant": [[148, "module-neural_compressor.adaptor.torch_utils.smooth_quant"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[149, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"]], "symbolic_trace() (in module neural_compressor.adaptor.torch_utils.symbolic_trace)": [[149, "neural_compressor.adaptor.torch_utils.symbolic_trace.symbolic_trace"]], "trace_and_fuse_sub_graph() (in module neural_compressor.adaptor.torch_utils.symbolic_trace)": [[149, "neural_compressor.adaptor.torch_utils.symbolic_trace.trace_and_fuse_sub_graph"]], "append_attr() (in module neural_compressor.adaptor.torch_utils.util)": [[150, "neural_compressor.adaptor.torch_utils.util.append_attr"]], "auto_copy() (in module neural_compressor.adaptor.torch_utils.util)": [[150, "neural_compressor.adaptor.torch_utils.util.auto_copy"]], "calculate_quant_min_max() (in module neural_compressor.adaptor.torch_utils.util)": [[150, "neural_compressor.adaptor.torch_utils.util.calculate_quant_min_max"]], "check_cfg_and_qconfig() (in module neural_compressor.adaptor.torch_utils.util)": [[150, "neural_compressor.adaptor.torch_utils.util.check_cfg_and_qconfig"]], "collate_torch_preds() (in module neural_compressor.adaptor.torch_utils.util)": [[150, "neural_compressor.adaptor.torch_utils.util.collate_torch_preds"]], "fetch_module() (in module neural_compressor.adaptor.torch_utils.util)": [[150, "neural_compressor.adaptor.torch_utils.util.fetch_module"]], "generate_activation_observer() (in module neural_compressor.adaptor.torch_utils.util)": [[150, "neural_compressor.adaptor.torch_utils.util.generate_activation_observer"]], "get_embedding_contiguous() (in module neural_compressor.adaptor.torch_utils.util)": [[150, "neural_compressor.adaptor.torch_utils.util.get_embedding_contiguous"]], "get_example_input() (in module neural_compressor.adaptor.torch_utils.util)": [[150, "neural_compressor.adaptor.torch_utils.util.get_example_input"]], "get_fallback_order() (in module neural_compressor.adaptor.torch_utils.util)": [[150, "neural_compressor.adaptor.torch_utils.util.get_fallback_order"]], "get_mse_order_per_fp32() (in module neural_compressor.adaptor.torch_utils.util)": [[150, "neural_compressor.adaptor.torch_utils.util.get_mse_order_per_fp32"]], "get_mse_order_per_int8() (in module neural_compressor.adaptor.torch_utils.util)": [[150, "neural_compressor.adaptor.torch_utils.util.get_mse_order_per_int8"]], "get_quantizable_ops_from_cfgs() (in module neural_compressor.adaptor.torch_utils.util)": [[150, "neural_compressor.adaptor.torch_utils.util.get_quantizable_ops_from_cfgs"]], "get_torch_version() (in module neural_compressor.adaptor.torch_utils.util)": [[150, "neural_compressor.adaptor.torch_utils.util.get_torch_version"]], "input2tuple() (in module neural_compressor.adaptor.torch_utils.util)": [[150, "neural_compressor.adaptor.torch_utils.util.input2tuple"]], "is_fused_module() (in module neural_compressor.adaptor.torch_utils.util)": [[150, "neural_compressor.adaptor.torch_utils.util.is_fused_module"]], "match_datatype_pattern() (in module neural_compressor.adaptor.torch_utils.util)": [[150, "neural_compressor.adaptor.torch_utils.util.match_datatype_pattern"]], "neural_compressor.adaptor.torch_utils.util": [[150, "module-neural_compressor.adaptor.torch_utils.util"]], "paser_cfgs() (in module neural_compressor.adaptor.torch_utils.util)": [[150, "neural_compressor.adaptor.torch_utils.util.paser_cfgs"]], "set_module() (in module neural_compressor.adaptor.torch_utils.util)": [[150, "neural_compressor.adaptor.torch_utils.util.set_module"]], "simple_inference() (in module neural_compressor.adaptor.torch_utils.util)": [[150, "neural_compressor.adaptor.torch_utils.util.simple_inference"]], "algorithms (class in neural_compressor.algorithm.algorithm)": [[151, "neural_compressor.algorithm.algorithm.ALGORITHMS"]], "algorithm (class in neural_compressor.algorithm.algorithm)": [[151, "neural_compressor.algorithm.algorithm.Algorithm"]], "algorithmscheduler (class in neural_compressor.algorithm.algorithm)": [[151, "neural_compressor.algorithm.algorithm.AlgorithmScheduler"]], "algorithm_registry() (in module neural_compressor.algorithm.algorithm)": [[151, "neural_compressor.algorithm.algorithm.algorithm_registry"]], "neural_compressor.algorithm.algorithm": [[151, "module-neural_compressor.algorithm.algorithm"]], "fastbiascorrection (class in neural_compressor.algorithm.fast_bias_correction)": [[152, "neural_compressor.algorithm.fast_bias_correction.FastBiasCorrection"]], "neural_compressor.algorithm.fast_bias_correction": [[152, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm": [[153, "module-neural_compressor.algorithm"]], "smoothquant (class in neural_compressor.algorithm.smooth_quant)": [[154, "neural_compressor.algorithm.smooth_quant.SmoothQuant"]], "neural_compressor.algorithm.smooth_quant": [[154, "module-neural_compressor.algorithm.smooth_quant"]], "weightcorrection (class in neural_compressor.algorithm.weight_correction)": [[155, "neural_compressor.algorithm.weight_correction.WeightCorrection"]], "neural_compressor.algorithm.weight_correction": [[155, "module-neural_compressor.algorithm.weight_correction"]], "fit() (in module neural_compressor.benchmark)": [[156, "neural_compressor.benchmark.fit"]], "get_architecture() (in module neural_compressor.benchmark)": [[156, "neural_compressor.benchmark.get_architecture"]], "get_bounded_threads() (in module neural_compressor.benchmark)": [[156, "neural_compressor.benchmark.get_bounded_threads"]], "get_core_ids() (in module neural_compressor.benchmark)": [[156, "neural_compressor.benchmark.get_core_ids"]], "get_physical_ids() (in module neural_compressor.benchmark)": [[156, "neural_compressor.benchmark.get_physical_ids"]], "get_threads() (in module neural_compressor.benchmark)": [[156, "neural_compressor.benchmark.get_threads"]], "get_threads_per_core() (in module neural_compressor.benchmark)": [[156, "neural_compressor.benchmark.get_threads_per_core"]], "neural_compressor.benchmark": [[156, "module-neural_compressor.benchmark"]], "set_all_env_var() (in module neural_compressor.benchmark)": [[156, "neural_compressor.benchmark.set_all_env_var"]], "set_env_var() (in module neural_compressor.benchmark)": [[156, "neural_compressor.benchmark.set_env_var"]], "basecallbacks (class in neural_compressor.compression.callbacks)": [[157, "neural_compressor.compression.callbacks.BaseCallbacks"]], "distillationcallbacks (class in neural_compressor.compression.callbacks)": [[157, "neural_compressor.compression.callbacks.DistillationCallbacks"]], "pruningcallbacks (class in neural_compressor.compression.callbacks)": [[157, "neural_compressor.compression.callbacks.PruningCallbacks"]], "quantizationawaretrainingcallbacks (class in neural_compressor.compression.callbacks)": [[157, "neural_compressor.compression.callbacks.QuantizationAwareTrainingCallbacks"]], "_epoch_ran (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[157, "neural_compressor.compression.callbacks.DistillationCallbacks._epoch_ran"]], "best_model (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[157, "neural_compressor.compression.callbacks.DistillationCallbacks.best_model"]], "best_score (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[157, "neural_compressor.compression.callbacks.DistillationCallbacks.best_score"]], "eval_frequency (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[157, "neural_compressor.compression.callbacks.DistillationCallbacks.eval_frequency"]], "neural_compressor.compression.callbacks": [[157, "module-neural_compressor.compression.callbacks"]], "criterions (class in neural_compressor.compression.distillation.criterions)": [[158, "neural_compressor.compression.distillation.criterions.Criterions"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[158, "neural_compressor.compression.distillation.criterions.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationframework (class in neural_compressor.compression.distillation.criterions)": [[158, "neural_compressor.compression.distillation.criterions.KnowledgeDistillationFramework"]], "knowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[158, "neural_compressor.compression.distillation.criterions.KnowledgeDistillationLoss"]], "pytorchcriterions (class in neural_compressor.compression.distillation.criterions)": [[158, "neural_compressor.compression.distillation.criterions.PyTorchCriterions"]], "pytorchintermediatelayersknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[158, "neural_compressor.compression.distillation.criterions.PyTorchIntermediateLayersKnowledgeDistillationLoss"]], "pytorchintermediatelayersknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[158, "neural_compressor.compression.distillation.criterions.PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"]], "pytorchknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[158, "neural_compressor.compression.distillation.criterions.PyTorchKnowledgeDistillationLoss"]], "pytorchknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[158, "neural_compressor.compression.distillation.criterions.PyTorchKnowledgeDistillationLossWrapper"]], "pytorchselfknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[158, "neural_compressor.compression.distillation.criterions.PyTorchSelfKnowledgeDistillationLoss"]], "pytorchselfknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[158, "neural_compressor.compression.distillation.criterions.PyTorchSelfKnowledgeDistillationLossWrapper"]], "selfknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[158, "neural_compressor.compression.distillation.criterions.SelfKnowledgeDistillationLoss"]], "tensorflowcriterions (class in neural_compressor.compression.distillation.criterions)": [[158, "neural_compressor.compression.distillation.criterions.TensorflowCriterions"]], "tensorflowknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[158, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLoss"]], "tensorflowknowledgedistillationlossexternal (class in neural_compressor.compression.distillation.criterions)": [[158, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLossExternal"]], "tensorflowknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[158, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLossWrapper"]], "criterion_registry() (in module neural_compressor.compression.distillation.criterions)": [[158, "neural_compressor.compression.distillation.criterions.criterion_registry"]], "neural_compressor.compression.distillation.criterions": [[158, "module-neural_compressor.compression.distillation.criterions"]], "neural_compressor.compression.distillation": [[159, "module-neural_compressor.compression.distillation"]], "neural_compressor.compression": [[160, "module-neural_compressor.compression"]], "gradientcriterion (class in neural_compressor.compression.pruner.criteria)": [[161, "neural_compressor.compression.pruner.criteria.GradientCriterion"]], "magnitudecriterion (class in neural_compressor.compression.pruner.criteria)": [[161, "neural_compressor.compression.pruner.criteria.MagnitudeCriterion"]], "pruningcriterion (class in neural_compressor.compression.pruner.criteria)": [[161, "neural_compressor.compression.pruner.criteria.PruningCriterion"]], "snipcriterion (class in neural_compressor.compression.pruner.criteria)": [[161, "neural_compressor.compression.pruner.criteria.SnipCriterion"]], "snipmomentumcriterion (class in neural_compressor.compression.pruner.criteria)": [[161, "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion"]], "get_criterion() (in module neural_compressor.compression.pruner.criteria)": [[161, "neural_compressor.compression.pruner.criteria.get_criterion"]], "neural_compressor.compression.pruner.criteria": [[161, "module-neural_compressor.compression.pruner.criteria"]], "register_criterion() (in module neural_compressor.compression.pruner.criteria)": [[161, "neural_compressor.compression.pruner.criteria.register_criterion"]], "scores (neural_compressor.compression.pruner.criteria.gradientcriterion attribute)": [[161, "neural_compressor.compression.pruner.criteria.GradientCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.magnitudecriterion attribute)": [[161, "neural_compressor.compression.pruner.criteria.MagnitudeCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.pruningcriterion attribute)": [[161, "neural_compressor.compression.pruner.criteria.PruningCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.snipcriterion attribute)": [[161, "neural_compressor.compression.pruner.criteria.SnipCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.snipmomentumcriterion attribute)": [[161, "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion.scores"]], "neural_compressor.compression.pruner": [[162, "module-neural_compressor.compression.pruner"]], "neural_compressor.compression.pruner.model_slim": [[163, "module-neural_compressor.compression.pruner.model_slim"]], "jitbasicsearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[164, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher"]], "linear2linearsearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[164, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher"]], "pathsearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[164, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.PathSearcher"]], "recipesearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[164, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher"]], "selfmhasearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[164, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher"]], "current_pattern (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[164, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.current_pattern"]], "current_pattern (neural_compressor.compression.pruner.model_slim.pattern_analyzer.pathsearcher attribute)": [[164, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.PathSearcher.current_pattern"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[164, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[164, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.pathsearcher attribute)": [[164, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.PathSearcher.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[164, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.device"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[164, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[164, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.pathsearcher attribute)": [[164, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.PathSearcher.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[164, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.flatten_static_graph"]], "get_attributes() (in module neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[164, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.get_attributes"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[164, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[164, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.pathsearcher attribute)": [[164, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.PathSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[164, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[164, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.model"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer": [[164, "module-neural_compressor.compression.pruner.model_slim.pattern_analyzer"]], "recipe (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[164, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.recipe"]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[164, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.searching_results"]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[164, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.searching_results"]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.pathsearcher attribute)": [[164, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.PathSearcher.searching_results"]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[164, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.searching_results"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[164, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[164, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.pathsearcher attribute)": [[164, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.PathSearcher.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[164, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.static_graph"]], "target_layers (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[164, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.target_layers"]], "target_layers (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[164, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.target_layers"]], "target_layers (neural_compressor.compression.pruner.model_slim.pattern_analyzer.pathsearcher attribute)": [[164, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.PathSearcher.target_layers"]], "target_op (neural_compressor.compression.pruner.model_slim.pattern_analyzer.pathsearcher attribute)": [[164, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.PathSearcher.target_op"]], "target_op_lut (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[164, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.target_op_lut"]], "target_op_lut (neural_compressor.compression.pruner.model_slim.pattern_analyzer.pathsearcher attribute)": [[164, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.PathSearcher.target_op_lut"]], "target_path (neural_compressor.compression.pruner.model_slim.pattern_analyzer.pathsearcher attribute)": [[164, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.PathSearcher.target_path"]], "targets (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[164, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.targets"]], "linearcompression (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[165, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression"]], "linearcompressioniterator (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[165, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompressionIterator"]], "mhacompression (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[165, "neural_compressor.compression.pruner.model_slim.weight_slim.MHACompression"]], "postcompressionutils (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[165, "neural_compressor.compression.pruner.model_slim.weight_slim.PostCompressionUtils"]], "device (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompression attribute)": [[165, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression.device"]], "layer_1 (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompression attribute)": [[165, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression.layer_1"]], "layer_2 (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompression attribute)": [[165, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression.layer_2"]], "linear_patterns (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompressioniterator attribute)": [[165, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompressionIterator.linear_patterns"]], "neural_compressor.compression.pruner.model_slim.weight_slim": [[165, "module-neural_compressor.compression.pruner.model_slim.weight_slim"]], "basepattern (class in neural_compressor.compression.pruner.patterns)": [[166, "neural_compressor.compression.pruner.patterns.BasePattern"]], "m (neural_compressor.compression.pruner.patterns.patternninm attribute)": [[166, "neural_compressor.compression.pruner.patterns.PatternNInM.M"]], "n (neural_compressor.compression.pruner.patterns.patternninm attribute)": [[166, "neural_compressor.compression.pruner.patterns.PatternNInM.N"]], "patternninm (class in neural_compressor.compression.pruner.patterns)": [[166, "neural_compressor.compression.pruner.patterns.PatternNInM"]], "patternnxm (class in neural_compressor.compression.pruner.patterns)": [[166, "neural_compressor.compression.pruner.patterns.PatternNxM"]], "block_size (neural_compressor.compression.pruner.patterns.patternnxm attribute)": [[166, "neural_compressor.compression.pruner.patterns.PatternNxM.block_size"]], "config (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[166, "neural_compressor.compression.pruner.patterns.BasePattern.config"]], "get_pattern() (in module neural_compressor.compression.pruner.patterns)": [[166, "neural_compressor.compression.pruner.patterns.get_pattern"]], "invalid_layers (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[166, "neural_compressor.compression.pruner.patterns.BasePattern.invalid_layers"]], "is_global (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[166, "neural_compressor.compression.pruner.patterns.BasePattern.is_global"]], "keep_mask_layers (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[166, "neural_compressor.compression.pruner.patterns.BasePattern.keep_mask_layers"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[166, "neural_compressor.compression.pruner.patterns.BasePattern.max_sparsity_ratio_per_op"]], "min_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[166, "neural_compressor.compression.pruner.patterns.BasePattern.min_sparsity_ratio_per_op"]], "modules (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[166, "neural_compressor.compression.pruner.patterns.BasePattern.modules"]], "neural_compressor.compression.pruner.patterns": [[166, "module-neural_compressor.compression.pruner.patterns"]], "pattern (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[166, "neural_compressor.compression.pruner.patterns.BasePattern.pattern"]], "register_pattern() (in module neural_compressor.compression.pruner.patterns)": [[166, "neural_compressor.compression.pruner.patterns.register_pattern"]], "target_sparsity (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[166, "neural_compressor.compression.pruner.patterns.BasePattern.target_sparsity"]], "basepruner (class in neural_compressor.compression.pruner.pruners)": [[167, "neural_compressor.compression.pruner.pruners.BasePruner"]], "basicpruner (class in neural_compressor.compression.pruner.pruners)": [[167, "neural_compressor.compression.pruner.pruners.BasicPruner"]], "patternlockpruner (class in neural_compressor.compression.pruner.pruners)": [[167, "neural_compressor.compression.pruner.pruners.PatternLockPruner"]], "progressivepruner (class in neural_compressor.compression.pruner.pruners)": [[167, "neural_compressor.compression.pruner.pruners.ProgressivePruner"]], "config (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[167, "neural_compressor.compression.pruner.pruners.BasePruner.config"]], "criterion (neural_compressor.compression.pruner.pruners.basicpruner attribute)": [[167, "neural_compressor.compression.pruner.pruners.BasicPruner.criterion"]], "current_sparsity_ratio (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[167, "neural_compressor.compression.pruner.pruners.BasePruner.current_sparsity_ratio"]], "end_step (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[167, "neural_compressor.compression.pruner.pruners.BasePruner.end_step"]], "get_pruner() (in module neural_compressor.compression.pruner.pruners)": [[167, "neural_compressor.compression.pruner.pruners.get_pruner"]], "global_step (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[167, "neural_compressor.compression.pruner.pruners.BasePruner.global_step"]], "masks (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[167, "neural_compressor.compression.pruner.pruners.BasePruner.masks"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[167, "neural_compressor.compression.pruner.pruners.BasePruner.max_sparsity_ratio_per_op"]], "model_slim() (in module neural_compressor.compression.pruner.pruners)": [[167, "neural_compressor.compression.pruner.pruners.model_slim"]], "model_slim_ffn2() (in module neural_compressor.compression.pruner.pruners)": [[167, "neural_compressor.compression.pruner.pruners.model_slim_ffn2"]], "model_slim_mha() (in module neural_compressor.compression.pruner.pruners)": [[167, "neural_compressor.compression.pruner.pruners.model_slim_mha"]], "modules (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[167, "neural_compressor.compression.pruner.pruners.BasePruner.modules"]], "neural_compressor.compression.pruner.pruners": [[167, "module-neural_compressor.compression.pruner.pruners"]], "parse_valid_pruner_types() (in module neural_compressor.compression.pruner.pruners)": [[167, "neural_compressor.compression.pruner.pruners.parse_valid_pruner_types"]], "pattern (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[167, "neural_compressor.compression.pruner.pruners.BasePruner.pattern"]], "pattern (neural_compressor.compression.pruner.pruners.basicpruner attribute)": [[167, "neural_compressor.compression.pruner.pruners.BasicPruner.pattern"]], "pruning_frequency (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[167, "neural_compressor.compression.pruner.pruners.BasePruner.pruning_frequency"]], "reg (neural_compressor.compression.pruner.pruners.basicpruner attribute)": [[167, "neural_compressor.compression.pruner.pruners.BasicPruner.reg"]], "register_pruner() (in module neural_compressor.compression.pruner.pruners)": [[167, "neural_compressor.compression.pruner.pruners.register_pruner"]], "scheduler (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[167, "neural_compressor.compression.pruner.pruners.BasePruner.scheduler"]], "scheduler (neural_compressor.compression.pruner.pruners.basicpruner attribute)": [[167, "neural_compressor.compression.pruner.pruners.BasicPruner.scheduler"]], "scores (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[167, "neural_compressor.compression.pruner.pruners.BasePruner.scores"]], "start_step (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[167, "neural_compressor.compression.pruner.pruners.BasePruner.start_step"]], "target_sparsity_ratio (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[167, "neural_compressor.compression.pruner.pruners.BasePruner.target_sparsity_ratio"]], "basereg (class in neural_compressor.compression.pruner.regs)": [[168, "neural_compressor.compression.pruner.regs.BaseReg"]], "grouplasso (class in neural_compressor.compression.pruner.regs)": [[168, "neural_compressor.compression.pruner.regs.GroupLasso"]], "alpha (neural_compressor.compression.pruner.regs.grouplasso attribute)": [[168, "neural_compressor.compression.pruner.regs.GroupLasso.alpha"]], "get_reg() (in module neural_compressor.compression.pruner.regs)": [[168, "neural_compressor.compression.pruner.regs.get_reg"]], "get_reg_type() (in module neural_compressor.compression.pruner.regs)": [[168, "neural_compressor.compression.pruner.regs.get_reg_type"]], "neural_compressor.compression.pruner.regs": [[168, "module-neural_compressor.compression.pruner.regs"]], "reg_terms (neural_compressor.compression.pruner.regs.grouplasso attribute)": [[168, "neural_compressor.compression.pruner.regs.GroupLasso.reg_terms"]], "register_reg() (in module neural_compressor.compression.pruner.regs)": [[168, "neural_compressor.compression.pruner.regs.register_reg"]], "iterativescheduler (class in neural_compressor.compression.pruner.schedulers)": [[169, "neural_compressor.compression.pruner.schedulers.IterativeScheduler"]], "oneshotscheduler (class in neural_compressor.compression.pruner.schedulers)": [[169, "neural_compressor.compression.pruner.schedulers.OneshotScheduler"]], "pruningscheduler (class in neural_compressor.compression.pruner.schedulers)": [[169, "neural_compressor.compression.pruner.schedulers.PruningScheduler"]], "config (neural_compressor.compression.pruner.schedulers.pruningscheduler attribute)": [[169, "neural_compressor.compression.pruner.schedulers.PruningScheduler.config"]], "get_scheduler() (in module neural_compressor.compression.pruner.schedulers)": [[169, "neural_compressor.compression.pruner.schedulers.get_scheduler"]], "neural_compressor.compression.pruner.schedulers": [[169, "module-neural_compressor.compression.pruner.schedulers"]], "register_scheduler() (in module neural_compressor.compression.pruner.schedulers)": [[169, "neural_compressor.compression.pruner.schedulers.register_scheduler"]], "check_config() (in module neural_compressor.compression.pruner.utils)": [[170, "neural_compressor.compression.pruner.utils.check_config"]], "check_key_validity() (in module neural_compressor.compression.pruner.utils)": [[170, "neural_compressor.compression.pruner.utils.check_key_validity"]], "generate_ffn2_pruning_config() (in module neural_compressor.compression.pruner.utils)": [[170, "neural_compressor.compression.pruner.utils.generate_ffn2_pruning_config"]], "generate_mha_pruning_config() (in module neural_compressor.compression.pruner.utils)": [[170, "neural_compressor.compression.pruner.utils.generate_mha_pruning_config"]], "generate_pruner_config() (in module neural_compressor.compression.pruner.utils)": [[170, "neural_compressor.compression.pruner.utils.generate_pruner_config"]], "get_sparsity_ratio() (in module neural_compressor.compression.pruner.utils)": [[170, "neural_compressor.compression.pruner.utils.get_sparsity_ratio"]], "neural_compressor.compression.pruner.utils": [[170, "module-neural_compressor.compression.pruner.utils"]], "parse_auto_slim_config() (in module neural_compressor.compression.pruner.utils)": [[170, "neural_compressor.compression.pruner.utils.parse_auto_slim_config"]], "parse_to_prune() (in module neural_compressor.compression.pruner.utils)": [[170, "neural_compressor.compression.pruner.utils.parse_to_prune"]], "process_and_check_config() (in module neural_compressor.compression.pruner.utils)": [[170, "neural_compressor.compression.pruner.utils.process_and_check_config"]], "process_config() (in module neural_compressor.compression.pruner.utils)": [[170, "neural_compressor.compression.pruner.utils.process_config"]], "process_weight_config() (in module neural_compressor.compression.pruner.utils)": [[170, "neural_compressor.compression.pruner.utils.process_weight_config"]], "process_yaml_config() (in module neural_compressor.compression.pruner.utils)": [[170, "neural_compressor.compression.pruner.utils.process_yaml_config"]], "reset_none_to_default() (in module neural_compressor.compression.pruner.utils)": [[170, "neural_compressor.compression.pruner.utils.reset_none_to_default"]], "update_params() (in module neural_compressor.compression.pruner.utils)": [[170, "neural_compressor.compression.pruner.utils.update_params"]], "benchmark_conf (class in neural_compressor.conf.config)": [[171, "neural_compressor.conf.config.Benchmark_Conf"]], "conf (class in neural_compressor.conf.config)": [[171, "neural_compressor.conf.config.Conf"]], "distillation_conf (class in neural_compressor.conf.config)": [[171, "neural_compressor.conf.config.Distillation_Conf"]], "graph_optimization_conf (class in neural_compressor.conf.config)": [[171, "neural_compressor.conf.config.Graph_Optimization_Conf"]], "mixedprecision_conf (class in neural_compressor.conf.config)": [[171, "neural_compressor.conf.config.MixedPrecision_Conf"]], "nasconfig (class in neural_compressor.conf.config)": [[171, "neural_compressor.conf.config.NASConfig"]], "prunerv2 (class in neural_compressor.conf.config)": [[171, "neural_compressor.conf.config.PrunerV2"]], "pruning_conf (class in neural_compressor.conf.config)": [[171, "neural_compressor.conf.config.Pruning_Conf"]], "quantization_conf (class in neural_compressor.conf.config)": [[171, "neural_compressor.conf.config.Quantization_Conf"]], "neural_compressor.conf.config": [[171, "module-neural_compressor.conf.config"]], "dotdict (class in neural_compressor.conf.dotdict)": [[172, "neural_compressor.conf.dotdict.DotDict"]], "deep_get() (in module neural_compressor.conf.dotdict)": [[172, "neural_compressor.conf.dotdict.deep_get"]], "deep_set() (in module neural_compressor.conf.dotdict)": [[172, "neural_compressor.conf.dotdict.deep_set"]], "neural_compressor.conf.dotdict": [[172, "module-neural_compressor.conf.dotdict"]], "neural_compressor.conf": [[173, "module-neural_compressor.conf"]], "quantizationconfig (class in neural_compressor.conf.pythonic_config)": [[174, "neural_compressor.conf.pythonic_config.QuantizationConfig"]], "neural_compressor.conf.pythonic_config": [[174, "module-neural_compressor.conf.pythonic_config"]], "accuracycriterion (class in neural_compressor.config)": [[175, "neural_compressor.config.AccuracyCriterion"]], "benchmarkconfig (class in neural_compressor.config)": [[175, "neural_compressor.config.BenchmarkConfig"]], "distillationconfig (class in neural_compressor.config)": [[175, "neural_compressor.config.DistillationConfig"]], "exportconfig (class in neural_compressor.config)": [[175, "neural_compressor.config.ExportConfig"]], "intermediatelayersknowledgedistillationlossconfig (class in neural_compressor.config)": [[175, "neural_compressor.config.IntermediateLayersKnowledgeDistillationLossConfig"]], "knowledgedistillationlossconfig (class in neural_compressor.config)": [[175, "neural_compressor.config.KnowledgeDistillationLossConfig"]], "mixedprecisionconfig (class in neural_compressor.config)": [[175, "neural_compressor.config.MixedPrecisionConfig"]], "onnxqlinear2qdqconfig (class in neural_compressor.config)": [[175, "neural_compressor.config.ONNXQlinear2QDQConfig"]], "options (class in neural_compressor.config)": [[175, "neural_compressor.config.Options"]], "posttrainingquantconfig (class in neural_compressor.config)": [[175, "neural_compressor.config.PostTrainingQuantConfig"]], "quantizationawaretrainingconfig (class in neural_compressor.config)": [[175, "neural_compressor.config.QuantizationAwareTrainingConfig"]], "selfknowledgedistillationlossconfig (class in neural_compressor.config)": [[175, "neural_compressor.config.SelfKnowledgeDistillationLossConfig"]], "tf2onnxconfig (class in neural_compressor.config)": [[175, "neural_compressor.config.TF2ONNXConfig"]], "torch2onnxconfig (class in neural_compressor.config)": [[175, "neural_compressor.config.Torch2ONNXConfig"]], "tuningcriterion (class in neural_compressor.config)": [[175, "neural_compressor.config.TuningCriterion"]], "weightpruningconfig (class in neural_compressor.config)": [[175, "neural_compressor.config.WeightPruningConfig"]], "neural_compressor.config": [[175, "module-neural_compressor.config"]], "neural_compressor.contrib": [[176, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[177, "module-neural_compressor.contrib.strategy"]], "sigopttunestrategy (class in neural_compressor.contrib.strategy.sigopt)": [[178, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.sigopt": [[178, "module-neural_compressor.contrib.strategy.sigopt"]], "tpetunestrategy (class in neural_compressor.contrib.strategy.tpe)": [[179, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy"]], "neural_compressor.contrib.strategy.tpe": [[179, "module-neural_compressor.contrib.strategy.tpe"]], "basedataloader (class in neural_compressor.data.dataloaders.base_dataloader)": [[180, "neural_compressor.data.dataloaders.base_dataloader.BaseDataLoader"]], "neural_compressor.data.dataloaders.base_dataloader": [[180, "module-neural_compressor.data.dataloaders.base_dataloader"]], "dataloader (class in neural_compressor.data.dataloaders.dataloader)": [[181, "neural_compressor.data.dataloaders.dataloader.DataLoader"]], "neural_compressor.data.dataloaders.dataloader": [[181, "module-neural_compressor.data.dataloaders.dataloader"]], "defaultdataloader (class in neural_compressor.data.dataloaders.default_dataloader)": [[182, "neural_compressor.data.dataloaders.default_dataloader.DefaultDataLoader"]], "default_collate() (in module neural_compressor.data.dataloaders.default_dataloader)": [[182, "neural_compressor.data.dataloaders.default_dataloader.default_collate"]], "neural_compressor.data.dataloaders.default_dataloader": [[182, "module-neural_compressor.data.dataloaders.default_dataloader"]], "fetcher (class in neural_compressor.data.dataloaders.fetcher)": [[183, "neural_compressor.data.dataloaders.fetcher.Fetcher"]], "indexfetcher (class in neural_compressor.data.dataloaders.fetcher)": [[183, "neural_compressor.data.dataloaders.fetcher.IndexFetcher"]], "iterablefetcher (class in neural_compressor.data.dataloaders.fetcher)": [[183, "neural_compressor.data.dataloaders.fetcher.IterableFetcher"]], "neural_compressor.data.dataloaders.fetcher": [[183, "module-neural_compressor.data.dataloaders.fetcher"]], "neural_compressor.data.dataloaders": [[184, "module-neural_compressor.data.dataloaders"]], "mxnetdataloader (class in neural_compressor.data.dataloaders.mxnet_dataloader)": [[185, "neural_compressor.data.dataloaders.mxnet_dataloader.MXNetDataLoader"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[185, "module-neural_compressor.data.dataloaders.mxnet_dataloader"]], "onnxrtbertdataloader (class in neural_compressor.data.dataloaders.onnxrt_dataloader)": [[186, "neural_compressor.data.dataloaders.onnxrt_dataloader.ONNXRTBertDataLoader"]], "onnxrtdataloader (class in neural_compressor.data.dataloaders.onnxrt_dataloader)": [[186, "neural_compressor.data.dataloaders.onnxrt_dataloader.ONNXRTDataLoader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[186, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"]], "pytorchdataloader (class in neural_compressor.data.dataloaders.pytorch_dataloader)": [[187, "neural_compressor.data.dataloaders.pytorch_dataloader.PyTorchDataLoader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[187, "module-neural_compressor.data.dataloaders.pytorch_dataloader"]], "batchsampler (class in neural_compressor.data.dataloaders.sampler)": [[188, "neural_compressor.data.dataloaders.sampler.BatchSampler"]], "iterablesampler (class in neural_compressor.data.dataloaders.sampler)": [[188, "neural_compressor.data.dataloaders.sampler.IterableSampler"]], "sampler (class in neural_compressor.data.dataloaders.sampler)": [[188, "neural_compressor.data.dataloaders.sampler.Sampler"]], "sequentialsampler (class in neural_compressor.data.dataloaders.sampler)": [[188, "neural_compressor.data.dataloaders.sampler.SequentialSampler"]], "neural_compressor.data.dataloaders.sampler": [[188, "module-neural_compressor.data.dataloaders.sampler"]], "tfdatadataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[189, "neural_compressor.data.dataloaders.tensorflow_dataloader.TFDataDataLoader"]], "tensorflowbertdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[189, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowBertDataLoader"]], "tensorflowdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[189, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowDataLoader"]], "tensorflowmodelzoobertdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[189, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowModelZooBertDataLoader"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[189, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"]], "inputfeatures (class in neural_compressor.data.datasets.bert_dataset)": [[190, "neural_compressor.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[190, "neural_compressor.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.data.datasets.bert_dataset)": [[190, "neural_compressor.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[190, "neural_compressor.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[190, "neural_compressor.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[190, "neural_compressor.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.data.datasets.bert_dataset)": [[190, "neural_compressor.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.data.datasets.bert_dataset)": [[190, "neural_compressor.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.data.datasets.bert_dataset": [[190, "module-neural_compressor.data.datasets.bert_dataset"]], "coconpy (class in neural_compressor.data.datasets.coco_dataset)": [[191, "neural_compressor.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.data.datasets.coco_dataset)": [[191, "neural_compressor.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.data.datasets.coco_dataset)": [[191, "neural_compressor.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.data.datasets.coco_dataset)": [[191, "neural_compressor.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.data.datasets.coco_dataset": [[191, "module-neural_compressor.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.data.datasets.dataset)": [[192, "neural_compressor.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.data.datasets.dataset)": [[192, "neural_compressor.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.data.datasets.dataset)": [[192, "neural_compressor.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.data.datasets.dataset)": [[192, "neural_compressor.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.data.datasets.dataset)": [[192, "neural_compressor.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.data.datasets.dataset)": [[192, "neural_compressor.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.data.datasets.dataset)": [[192, "neural_compressor.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.data.datasets.dataset)": [[192, "neural_compressor.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.data.datasets.dataset)": [[192, "neural_compressor.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.data.datasets.dataset)": [[192, "neural_compressor.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.data.datasets.dataset)": [[192, "neural_compressor.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.data.datasets.dataset)": [[192, "neural_compressor.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.data.datasets.dataset)": [[192, "neural_compressor.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.data.datasets.dataset)": [[192, "neural_compressor.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.data.datasets.dataset)": [[192, "neural_compressor.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.data.datasets.dataset)": [[192, "neural_compressor.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.data.datasets.dataset)": [[192, "neural_compressor.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.data.datasets.dataset)": [[192, "neural_compressor.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.data.datasets.dataset)": [[192, "neural_compressor.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.data.datasets.dataset)": [[192, "neural_compressor.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.data.datasets.dataset)": [[192, "neural_compressor.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.data.datasets.dataset)": [[192, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.datasets.dataset)": [[192, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflow (class in neural_compressor.data.datasets.dataset)": [[192, "neural_compressor.data.datasets.dataset.Tensorflow"]], "tensorflowcifar10 (class in neural_compressor.data.datasets.dataset)": [[192, "neural_compressor.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.data.datasets.dataset)": [[192, "neural_compressor.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.data.datasets.dataset)": [[192, "neural_compressor.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.data.datasets.dataset)": [[192, "neural_compressor.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagerecord (class in neural_compressor.data.datasets.dataset)": [[192, "neural_compressor.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.data.datasets.dataset)": [[192, "neural_compressor.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.data.datasets.dataset)": [[192, "neural_compressor.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.data.datasets.dataset)": [[192, "neural_compressor.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.data.datasets.dataset)": [[192, "neural_compressor.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.data.datasets.dataset)": [[192, "neural_compressor.data.datasets.dataset.check_integrity"]], "dataset_registry() (in module neural_compressor.data.datasets.dataset)": [[192, "neural_compressor.data.datasets.dataset.dataset_registry"]], "download_url() (in module neural_compressor.data.datasets.dataset)": [[192, "neural_compressor.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.data.datasets.dataset)": [[192, "neural_compressor.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.data.datasets.dataset)": [[192, "neural_compressor.data.datasets.dataset.gen_bar_updater"]], "neural_compressor.data.datasets.dataset": [[192, "module-neural_compressor.data.datasets.dataset"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset)": [[193, "neural_compressor.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset": [[193, "module-neural_compressor.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[194, "neural_compressor.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[194, "neural_compressor.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[194, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[195, "neural_compressor.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[195, "neural_compressor.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[195, "neural_compressor.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[195, "neural_compressor.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[195, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[195, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.data.datasets.imagenet_dataset": [[195, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[196, "module-neural_compressor.data.datasets"]], "styletransferdataset (class in neural_compressor.data.datasets.style_transfer_dataset)": [[197, "neural_compressor.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.data.datasets.style_transfer_dataset": [[197, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.data.filters.coco_filter)": [[198, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.data.filters.coco_filter)": [[198, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.coco_filter": [[198, "module-neural_compressor.data.filters.coco_filter"]], "filters (class in neural_compressor.data.filters.filter)": [[199, "neural_compressor.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.data.filters.filter)": [[199, "neural_compressor.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.data.filters.filter)": [[199, "neural_compressor.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.data.filters.filter)": [[199, "neural_compressor.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.data.filters.filter)": [[199, "neural_compressor.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.data.filters.filter)": [[199, "neural_compressor.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.data.filters.filter)": [[199, "neural_compressor.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.data.filters.filter)": [[199, "neural_compressor.data.filters.filter.filter_registry"]], "neural_compressor.data.filters.filter": [[199, "module-neural_compressor.data.filters.filter"]], "neural_compressor.data.filters": [[200, "module-neural_compressor.data.filters"]], "neural_compressor.data": [[201, "module-neural_compressor.data"]], "parsedecodecocotransform (class in neural_compressor.data.transforms.coco_transform)": [[202, "neural_compressor.data.transforms.coco_transform.ParseDecodeCocoTransform"]], "neural_compressor.data.transforms.coco_transform": [[202, "module-neural_compressor.data.transforms.coco_transform"]], "bilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[203, "neural_compressor.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.data.transforms.imagenet_transform)": [[203, "neural_compressor.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[203, "neural_compressor.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[203, "neural_compressor.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.data.transforms.imagenet_transform)": [[203, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[203, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.data.transforms.imagenet_transform)": [[203, "neural_compressor.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.data.transforms.imagenet_transform)": [[203, "neural_compressor.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[203, "neural_compressor.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "neural_compressor.data.transforms.imagenet_transform": [[203, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[204, "module-neural_compressor.data.transforms"]], "postprocess (class in neural_compressor.data.transforms.postprocess)": [[205, "neural_compressor.data.transforms.postprocess.Postprocess"]], "neural_compressor.data.transforms.postprocess": [[205, "module-neural_compressor.data.transforms.postprocess"]], "basictokenizer (class in neural_compressor.data.transforms.tokenization)": [[206, "neural_compressor.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.data.transforms.tokenization)": [[206, "neural_compressor.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.data.transforms.tokenization)": [[206, "neural_compressor.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.data.transforms.tokenization)": [[206, "neural_compressor.data.transforms.tokenization.convert_by_vocab"]], "convert_to_unicode() (in module neural_compressor.data.transforms.tokenization)": [[206, "neural_compressor.data.transforms.tokenization.convert_to_unicode"]], "load_vocab() (in module neural_compressor.data.transforms.tokenization)": [[206, "neural_compressor.data.transforms.tokenization.load_vocab"]], "neural_compressor.data.transforms.tokenization": [[206, "module-neural_compressor.data.transforms.tokenization"]], "whitespace_tokenize() (in module neural_compressor.data.transforms.tokenization)": [[206, "neural_compressor.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.TRANSFORMS"], [207, "neural_compressor.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.get_final_text"]], "get_torchvision_map() (in module neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.get_torchvision_map"]], "neural_compressor.data.transforms.transform": [[207, "module-neural_compressor.data.transforms.transform"]], "read_squad_examples() (in module neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.read_squad_examples"]], "transform_registry() (in module neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.transform_registry"]], "benchmark (class in neural_compressor.experimental.benchmark)": [[208, "neural_compressor.experimental.benchmark.Benchmark"]], "get_architecture() (in module neural_compressor.experimental.benchmark)": [[208, "neural_compressor.experimental.benchmark.get_architecture"]], "get_bounded_threads() (in module neural_compressor.experimental.benchmark)": [[208, "neural_compressor.experimental.benchmark.get_bounded_threads"]], "get_core_ids() (in module neural_compressor.experimental.benchmark)": [[208, "neural_compressor.experimental.benchmark.get_core_ids"]], "get_physical_ids() (in module neural_compressor.experimental.benchmark)": [[208, "neural_compressor.experimental.benchmark.get_physical_ids"]], "get_threads() (in module neural_compressor.experimental.benchmark)": [[208, "neural_compressor.experimental.benchmark.get_threads"]], "get_threads_per_core() (in module neural_compressor.experimental.benchmark)": [[208, "neural_compressor.experimental.benchmark.get_threads_per_core"]], "neural_compressor.experimental.benchmark": [[208, "module-neural_compressor.experimental.benchmark"]], "set_all_env_var() (in module neural_compressor.experimental.benchmark)": [[208, "neural_compressor.experimental.benchmark.set_all_env_var"]], "set_env_var() (in module neural_compressor.experimental.benchmark)": [[208, "neural_compressor.experimental.benchmark.set_env_var"]], "criterions (class in neural_compressor.experimental.common.criterion)": [[209, "neural_compressor.experimental.common.criterion.Criterions"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[209, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationframework (class in neural_compressor.experimental.common.criterion)": [[209, "neural_compressor.experimental.common.criterion.KnowledgeDistillationFramework"]], "knowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[209, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss"]], "pytorchcriterions (class in neural_compressor.experimental.common.criterion)": [[209, "neural_compressor.experimental.common.criterion.PyTorchCriterions"]], "pytorchcrossentropyloss (class in neural_compressor.experimental.common.criterion)": [[209, "neural_compressor.experimental.common.criterion.PyTorchCrossEntropyLoss"]], "pytorchintermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[209, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss"]], "pytorchintermediatelayersknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[209, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"]], "pytorchknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[209, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss"]], "pytorchknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[209, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLossWrapper"]], "pytorchselfknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[209, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss"]], "pytorchselfknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[209, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLossWrapper"]], "selfknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[209, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss"]], "tensorflowcrossentropyloss (class in neural_compressor.experimental.common.criterion)": [[209, "neural_compressor.experimental.common.criterion.TensorFlowCrossEntropyLoss"]], "tensorflowsparsecategoricalcrossentropy (class in neural_compressor.experimental.common.criterion)": [[209, "neural_compressor.experimental.common.criterion.TensorFlowSparseCategoricalCrossentropy"]], "tensorflowcriterions (class in neural_compressor.experimental.common.criterion)": [[209, "neural_compressor.experimental.common.criterion.TensorflowCriterions"]], "tensorflowknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[209, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss"]], "tensorflowknowledgedistillationlossexternal (class in neural_compressor.experimental.common.criterion)": [[209, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal"]], "tensorflowknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[209, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossWrapper"]], "criterion_registry() (in module neural_compressor.experimental.common.criterion)": [[209, "neural_compressor.experimental.common.criterion.criterion_registry"]], "neural_compressor.experimental.common.criterion": [[209, "module-neural_compressor.experimental.common.criterion"]], "dataloader (class in neural_compressor.experimental.common.dataloader)": [[210, "neural_compressor.experimental.common.dataloader.DataLoader"]], "neural_compressor.experimental.common.dataloader": [[210, "module-neural_compressor.experimental.common.dataloader"]], "neural_compressor.experimental.common": [[211, "module-neural_compressor.experimental.common"]], "metric (class in neural_compressor.experimental.common.metric)": [[212, "neural_compressor.experimental.common.metric.Metric"]], "neural_compressor.experimental.common.metric": [[212, "module-neural_compressor.experimental.common.metric"]], "model (class in neural_compressor.experimental.common.model)": [[213, "neural_compressor.experimental.common.model.Model"]], "neural_compressor.experimental.common.model": [[213, "module-neural_compressor.experimental.common.model"]], "set_backend() (in module neural_compressor.experimental.common.model)": [[213, "neural_compressor.experimental.common.model.set_backend"]], "optimizers (class in neural_compressor.experimental.common.optimizer)": [[214, "neural_compressor.experimental.common.optimizer.Optimizers"]], "pytorchoptimizers (class in neural_compressor.experimental.common.optimizer)": [[214, "neural_compressor.experimental.common.optimizer.PyTorchOptimizers"]], "pytorchsgd (class in neural_compressor.experimental.common.optimizer)": [[214, "neural_compressor.experimental.common.optimizer.PyTorchSGD"]], "tensorflowadam (class in neural_compressor.experimental.common.optimizer)": [[214, "neural_compressor.experimental.common.optimizer.TensorFlowAdam"]], "tensorflowadamw (class in neural_compressor.experimental.common.optimizer)": [[214, "neural_compressor.experimental.common.optimizer.TensorFlowAdamW"]], "tensorflowsgd (class in neural_compressor.experimental.common.optimizer)": [[214, "neural_compressor.experimental.common.optimizer.TensorFlowSGD"]], "tensorflowoptimizers (class in neural_compressor.experimental.common.optimizer)": [[214, "neural_compressor.experimental.common.optimizer.TensorflowOptimizers"]], "neural_compressor.experimental.common.optimizer": [[214, "module-neural_compressor.experimental.common.optimizer"]], "optimizer_registry() (in module neural_compressor.experimental.common.optimizer)": [[214, "neural_compressor.experimental.common.optimizer.optimizer_registry"]], "postprocess (class in neural_compressor.experimental.common.postprocess)": [[215, "neural_compressor.experimental.common.postprocess.Postprocess"]], "neural_compressor.experimental.common.postprocess": [[215, "module-neural_compressor.experimental.common.postprocess"]], "get_activation() (in module neural_compressor.experimental.common.torch_utils)": [[216, "neural_compressor.experimental.common.torch_utils.get_activation"]], "neural_compressor.experimental.common.torch_utils": [[216, "module-neural_compressor.experimental.common.torch_utils"]], "record_output() (in module neural_compressor.experimental.common.torch_utils)": [[216, "neural_compressor.experimental.common.torch_utils.record_output"]], "component (class in neural_compressor.experimental.component)": [[217, "neural_compressor.experimental.component.Component"]], "neural_compressor.experimental.component": [[217, "module-neural_compressor.experimental.component"]], "neural_compressor.experimental.compression": [[218, "module-neural_compressor.experimental.compression"]], "neural_compressor.experimental.compression.pruning": [[219, "module-neural_compressor.experimental.compression.pruning"]], "prepare_pruning() (in module neural_compressor.experimental.compression.pruning)": [[219, "neural_compressor.experimental.compression.pruning.prepare_pruning"]], "save() (in module neural_compressor.experimental.compression.pruning)": [[219, "neural_compressor.experimental.compression.pruning.save"]], "basedataloader (class in neural_compressor.experimental.data.dataloaders.base_dataloader)": [[220, "neural_compressor.experimental.data.dataloaders.base_dataloader.BaseDataLoader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[220, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[221, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "defaultdataloader (class in neural_compressor.experimental.data.dataloaders.default_dataloader)": [[222, "neural_compressor.experimental.data.dataloaders.default_dataloader.DefaultDataLoader"]], "default_collate() (in module neural_compressor.experimental.data.dataloaders.default_dataloader)": [[222, "neural_compressor.experimental.data.dataloaders.default_dataloader.default_collate"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[222, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "fetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[223, "neural_compressor.experimental.data.dataloaders.fetcher.Fetcher"]], "indexfetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[223, "neural_compressor.experimental.data.dataloaders.fetcher.IndexFetcher"]], "iterablefetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[223, "neural_compressor.experimental.data.dataloaders.fetcher.IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[223, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[224, "module-neural_compressor.experimental.data.dataloaders"]], "mxnetdataloader (class in neural_compressor.experimental.data.dataloaders.mxnet_dataloader)": [[225, "neural_compressor.experimental.data.dataloaders.mxnet_dataloader.MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[225, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "onnxrtbertdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[226, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTBertDataLoader"]], "onnxrtdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[226, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[226, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "pytorchdataloader (class in neural_compressor.experimental.data.dataloaders.pytorch_dataloader)": [[227, "neural_compressor.experimental.data.dataloaders.pytorch_dataloader.PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[227, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "batchsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[228, "neural_compressor.experimental.data.dataloaders.sampler.BatchSampler"]], "iterablesampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[228, "neural_compressor.experimental.data.dataloaders.sampler.IterableSampler"]], "sampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[228, "neural_compressor.experimental.data.dataloaders.sampler.Sampler"]], "sequentialsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[228, "neural_compressor.experimental.data.dataloaders.sampler.SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.sampler": [[228, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "tfdatadataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[229, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TFDataDataLoader"]], "tensorflowbertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[229, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowBertDataLoader"]], "tensorflowdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[229, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowDataLoader"]], "tensorflowmodelzoobertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[229, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowModelZooBertDataLoader"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[229, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "inputfeatures (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[230, "neural_compressor.experimental.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[230, "neural_compressor.experimental.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[230, "neural_compressor.experimental.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[230, "neural_compressor.experimental.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[230, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[230, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[230, "neural_compressor.experimental.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[230, "neural_compressor.experimental.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[230, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "coconpy (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[231, "neural_compressor.experimental.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[231, "neural_compressor.experimental.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[231, "neural_compressor.experimental.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[231, "neural_compressor.experimental.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[231, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[232, "neural_compressor.experimental.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[232, "neural_compressor.experimental.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.experimental.data.datasets.dataset)": [[232, "neural_compressor.experimental.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.experimental.data.datasets.dataset)": [[232, "neural_compressor.experimental.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[232, "neural_compressor.experimental.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[232, "neural_compressor.experimental.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.experimental.data.datasets.dataset)": [[232, "neural_compressor.experimental.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.experimental.data.datasets.dataset)": [[232, "neural_compressor.experimental.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[232, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[232, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[232, "neural_compressor.experimental.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[232, "neural_compressor.experimental.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[232, "neural_compressor.experimental.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[232, "neural_compressor.experimental.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[232, "neural_compressor.experimental.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[232, "neural_compressor.experimental.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[232, "neural_compressor.experimental.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[232, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[232, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[232, "neural_compressor.experimental.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[232, "neural_compressor.experimental.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.experimental.data.datasets.dataset)": [[232, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.datasets.dataset)": [[232, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflowcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[232, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[232, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[232, "neural_compressor.experimental.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[232, "neural_compressor.experimental.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[232, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageFolder"]], "tensorflowimagerecord (class in neural_compressor.experimental.data.datasets.dataset)": [[232, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[232, "neural_compressor.experimental.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.experimental.data.datasets.dataset)": [[232, "neural_compressor.experimental.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.experimental.data.datasets.dataset)": [[232, "neural_compressor.experimental.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.experimental.data.datasets.dataset)": [[232, "neural_compressor.experimental.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.experimental.data.datasets.dataset)": [[232, "neural_compressor.experimental.data.datasets.dataset.check_integrity"]], "dataset_registry() (in module neural_compressor.experimental.data.datasets.dataset)": [[232, "neural_compressor.experimental.data.datasets.dataset.dataset_registry"]], "download_url() (in module neural_compressor.experimental.data.datasets.dataset)": [[232, "neural_compressor.experimental.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.experimental.data.datasets.dataset)": [[232, "neural_compressor.experimental.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.experimental.data.datasets.dataset)": [[232, "neural_compressor.experimental.data.datasets.dataset.gen_bar_updater"]], "neural_compressor.experimental.data.datasets.dataset": [[232, "module-neural_compressor.experimental.data.datasets.dataset"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset)": [[233, "neural_compressor.experimental.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[233, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[234, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[234, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[234, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[235, "neural_compressor.experimental.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[235, "neural_compressor.experimental.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[235, "neural_compressor.experimental.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[235, "neural_compressor.experimental.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[235, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[235, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[235, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "neural_compressor.experimental.data.datasets": [[236, "module-neural_compressor.experimental.data.datasets"]], "styletransferdataset (class in neural_compressor.experimental.data.datasets.style_transfer_dataset)": [[237, "neural_compressor.experimental.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[237, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[238, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[238, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.coco_filter": [[238, "module-neural_compressor.experimental.data.filters.coco_filter"]], "filters (class in neural_compressor.experimental.data.filters.filter)": [[239, "neural_compressor.experimental.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.experimental.data.filters.filter)": [[239, "neural_compressor.experimental.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.experimental.data.filters.filter)": [[239, "neural_compressor.experimental.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.experimental.data.filters.filter)": [[239, "neural_compressor.experimental.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.experimental.data.filters.filter)": [[239, "neural_compressor.experimental.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.experimental.data.filters.filter)": [[239, "neural_compressor.experimental.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.experimental.data.filters.filter)": [[239, "neural_compressor.experimental.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.experimental.data.filters.filter)": [[239, "neural_compressor.experimental.data.filters.filter.filter_registry"]], "neural_compressor.experimental.data.filters.filter": [[239, "module-neural_compressor.experimental.data.filters.filter"]], "neural_compressor.experimental.data.filters": [[240, "module-neural_compressor.experimental.data.filters"]], "neural_compressor.experimental.data": [[241, "module-neural_compressor.experimental.data"]], "bilinearimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[242, "neural_compressor.experimental.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[242, "neural_compressor.experimental.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[242, "neural_compressor.experimental.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[242, "neural_compressor.experimental.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[242, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[242, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[242, "neural_compressor.experimental.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[242, "neural_compressor.experimental.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[242, "neural_compressor.experimental.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[242, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "neural_compressor.experimental.data.transforms": [[243, "module-neural_compressor.experimental.data.transforms"]], "basictokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[244, "neural_compressor.experimental.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[244, "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[244, "neural_compressor.experimental.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[244, "neural_compressor.experimental.data.transforms.tokenization.convert_by_vocab"]], "convert_to_unicode() (in module neural_compressor.experimental.data.transforms.tokenization)": [[244, "neural_compressor.experimental.data.transforms.tokenization.convert_to_unicode"]], "load_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[244, "neural_compressor.experimental.data.transforms.tokenization.load_vocab"]], "neural_compressor.experimental.data.transforms.tokenization": [[244, "module-neural_compressor.experimental.data.transforms.tokenization"]], "whitespace_tokenize() (in module neural_compressor.experimental.data.transforms.tokenization)": [[244, "neural_compressor.experimental.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.experimental.data.transforms.transform)": [[245, "neural_compressor.experimental.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.experimental.data.transforms.transform)": [[245, "neural_compressor.experimental.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.experimental.data.transforms.transform)": [[245, "neural_compressor.experimental.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[245, "neural_compressor.experimental.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.experimental.data.transforms.transform)": [[245, "neural_compressor.experimental.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[245, "neural_compressor.experimental.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[245, "neural_compressor.experimental.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[245, "neural_compressor.experimental.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.experimental.data.transforms.transform)": [[245, "neural_compressor.experimental.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[245, "neural_compressor.experimental.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[245, "neural_compressor.experimental.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[245, "neural_compressor.experimental.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.experimental.data.transforms.transform)": [[245, "neural_compressor.experimental.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[245, "neural_compressor.experimental.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[245, "neural_compressor.experimental.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[245, "neural_compressor.experimental.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.experimental.data.transforms.transform)": [[245, "neural_compressor.experimental.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.experimental.data.transforms.transform)": [[245, "neural_compressor.experimental.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[245, "neural_compressor.experimental.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[245, "neural_compressor.experimental.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[245, "neural_compressor.experimental.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.experimental.data.transforms.transform)": [[245, "neural_compressor.experimental.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.experimental.data.transforms.transform)": [[245, "neural_compressor.experimental.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[245, "neural_compressor.experimental.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.experimental.data.transforms.transform)": [[245, "neural_compressor.experimental.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.experimental.data.transforms.transform)": [[245, "neural_compressor.experimental.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[245, "neural_compressor.experimental.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[245, "neural_compressor.experimental.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[245, "neural_compressor.experimental.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[245, "neural_compressor.experimental.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[245, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[245, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[245, "neural_compressor.experimental.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[245, "neural_compressor.experimental.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[245, "neural_compressor.experimental.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[245, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[245, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[245, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[245, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[245, "neural_compressor.experimental.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.experimental.data.transforms.transform)": [[245, "neural_compressor.experimental.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.experimental.data.transforms.transform)": [[245, "neural_compressor.experimental.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.experimental.data.transforms.transform)": [[245, "neural_compressor.experimental.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[245, "neural_compressor.experimental.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[245, "neural_compressor.experimental.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[245, "neural_compressor.experimental.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[245, "neural_compressor.experimental.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[245, "neural_compressor.experimental.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.experimental.data.transforms.transform)": [[245, "neural_compressor.experimental.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[245, "neural_compressor.experimental.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.experimental.data.transforms.transform)": [[245, "neural_compressor.experimental.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.experimental.data.transforms.transform)": [[245, "neural_compressor.experimental.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.experimental.data.transforms.transform)": [[245, "neural_compressor.experimental.data.transforms.transform.TRANSFORMS"], [245, "neural_compressor.experimental.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[245, "neural_compressor.experimental.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[245, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[245, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[245, "neural_compressor.experimental.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.experimental.data.transforms.transform)": [[245, "neural_compressor.experimental.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[245, "neural_compressor.experimental.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[245, "neural_compressor.experimental.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[245, "neural_compressor.experimental.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.experimental.data.transforms.transform)": [[245, "neural_compressor.experimental.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.experimental.data.transforms.transform)": [[245, "neural_compressor.experimental.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.experimental.data.transforms.transform)": [[245, "neural_compressor.experimental.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.transforms.transform)": [[245, "neural_compressor.experimental.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.experimental.data.transforms.transform)": [[245, "neural_compressor.experimental.data.transforms.transform.get_final_text"]], "get_torchvision_map() (in module neural_compressor.experimental.data.transforms.transform)": [[245, "neural_compressor.experimental.data.transforms.transform.get_torchvision_map"]], "neural_compressor.experimental.data.transforms.transform": [[245, "module-neural_compressor.experimental.data.transforms.transform"]], "read_squad_examples() (in module neural_compressor.experimental.data.transforms.transform)": [[245, "neural_compressor.experimental.data.transforms.transform.read_squad_examples"]], "transform_registry() (in module neural_compressor.experimental.data.transforms.transform)": [[245, "neural_compressor.experimental.data.transforms.transform.transform_registry"]], "distillation (class in neural_compressor.experimental.distillation)": [[246, "neural_compressor.experimental.distillation.Distillation"]], "_epoch_ran (neural_compressor.experimental.distillation.distillation attribute)": [[246, "neural_compressor.experimental.distillation.Distillation._epoch_ran"]], "best_model (neural_compressor.experimental.distillation.distillation attribute)": [[246, "neural_compressor.experimental.distillation.Distillation.best_model"]], "best_score (neural_compressor.experimental.distillation.distillation attribute)": [[246, "neural_compressor.experimental.distillation.Distillation.best_score"]], "eval_frequency (neural_compressor.experimental.distillation.distillation attribute)": [[246, "neural_compressor.experimental.distillation.Distillation.eval_frequency"]], "neural_compressor.experimental.distillation": [[246, "module-neural_compressor.experimental.distillation"]], "neural_compressor.experimental.export": [[247, "module-neural_compressor.experimental.export"]], "check_model() (in module neural_compressor.experimental.export.qlinear2qdq)": [[248, "neural_compressor.experimental.export.qlinear2qdq.check_model"]], "neural_compressor.experimental.export.qlinear2qdq": [[248, "module-neural_compressor.experimental.export.qlinear2qdq"]], "onnx_qlinear_to_qdq() (in module neural_compressor.experimental.export.qlinear2qdq)": [[248, "neural_compressor.experimental.export.qlinear2qdq.onnx_qlinear_to_qdq"]], "neural_compressor.experimental.export.tf2onnx": [[249, "module-neural_compressor.experimental.export.tf2onnx"]], "tf_to_fp32_onnx() (in module neural_compressor.experimental.export.tf2onnx)": [[249, "neural_compressor.experimental.export.tf2onnx.tf_to_fp32_onnx"]], "tf_to_int8_onnx() (in module neural_compressor.experimental.export.tf2onnx)": [[249, "neural_compressor.experimental.export.tf2onnx.tf_to_int8_onnx"]], "build_scale_mapping() (in module neural_compressor.experimental.export.torch2onnx)": [[250, "neural_compressor.experimental.export.torch2onnx.build_scale_mapping"]], "get_node_mapping() (in module neural_compressor.experimental.export.torch2onnx)": [[250, "neural_compressor.experimental.export.torch2onnx.get_node_mapping"]], "get_quantizable_onnx_ops() (in module neural_compressor.experimental.export.torch2onnx)": [[250, "neural_compressor.experimental.export.torch2onnx.get_quantizable_onnx_ops"]], "neural_compressor.experimental.export.torch2onnx": [[250, "module-neural_compressor.experimental.export.torch2onnx"]], "qdq_fp32_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[250, "neural_compressor.experimental.export.torch2onnx.qdq_fp32_bias"]], "qdq_fp32_bias_qdq() (in module neural_compressor.experimental.export.torch2onnx)": [[250, "neural_compressor.experimental.export.torch2onnx.qdq_fp32_bias_qdq"]], "qdq_int32_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[250, "neural_compressor.experimental.export.torch2onnx.qdq_int32_bias"]], "recalculate_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[250, "neural_compressor.experimental.export.torch2onnx.recalculate_bias"]], "remove_nodes_by_name() (in module neural_compressor.experimental.export.torch2onnx)": [[250, "neural_compressor.experimental.export.torch2onnx.remove_nodes_by_name"]], "set_data_type() (in module neural_compressor.experimental.export.torch2onnx)": [[250, "neural_compressor.experimental.export.torch2onnx.set_data_type"]], "set_scale_info() (in module neural_compressor.experimental.export.torch2onnx)": [[250, "neural_compressor.experimental.export.torch2onnx.set_scale_info"]], "sub_graph_with_int32_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[250, "neural_compressor.experimental.export.torch2onnx.sub_graph_with_int32_bias"]], "torch_to_fp32_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[250, "neural_compressor.experimental.export.torch2onnx.torch_to_fp32_onnx"]], "torch_to_int8_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[250, "neural_compressor.experimental.export.torch2onnx.torch_to_int8_onnx"]], "update_weight_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[250, "neural_compressor.experimental.export.torch2onnx.update_weight_bias"]], "dummydatareader (class in neural_compressor.experimental.export.utils)": [[251, "neural_compressor.experimental.export.utils.DummyDataReader"]], "onnx2numpy_dtype() (in module neural_compressor.experimental.export.utils)": [[251, "neural_compressor.experimental.export.utils.ONNX2Numpy_dtype"]], "neural_compressor.experimental.export.utils": [[251, "module-neural_compressor.experimental.export.utils"]], "graph_optimization (class in neural_compressor.experimental.graph_optimization)": [[252, "neural_compressor.experimental.graph_optimization.Graph_Optimization"]], "neural_compressor.experimental.graph_optimization": [[252, "module-neural_compressor.experimental.graph_optimization"]], "neural_compressor.experimental": [[253, "module-neural_compressor.experimental"]], "bleu (class in neural_compressor.experimental.metric.bleu)": [[254, "neural_compressor.experimental.metric.bleu.BLEU"]], "unicoderegex (class in neural_compressor.experimental.metric.bleu)": [[254, "neural_compressor.experimental.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.experimental.metric.bleu)": [[254, "neural_compressor.experimental.metric.bleu.bleu_tokenize"]], "labels (neural_compressor.experimental.metric.bleu.bleu attribute)": [[254, "neural_compressor.experimental.metric.bleu.BLEU.labels"]], "neural_compressor.experimental.metric.bleu": [[254, "module-neural_compressor.experimental.metric.bleu"]], "nondigit_punct_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[254, "neural_compressor.experimental.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "predictions (neural_compressor.experimental.metric.bleu.bleu attribute)": [[254, "neural_compressor.experimental.metric.bleu.BLEU.predictions"]], "punct_nondigit_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[254, "neural_compressor.experimental.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "symbol_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[254, "neural_compressor.experimental.metric.bleu.UnicodeRegex.symbol_re"]], "compute_bleu() (in module neural_compressor.experimental.metric.bleu_util)": [[255, "neural_compressor.experimental.metric.bleu_util.compute_bleu"]], "neural_compressor.experimental.metric.bleu_util": [[255, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[256, "module-neural_compressor.experimental.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.experimental.metric.coco_tools)": [[257, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.experimental.metric.coco_tools)": [[257, "neural_compressor.experimental.metric.coco_tools.COCOWrapper"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.experimental.metric.coco_tools)": [[257, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.experimental.metric.coco_tools)": [[257, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.experimental.metric.coco_tools)": [[257, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "dataset (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[257, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[257, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.experimental.metric.coco_tools": [[257, "module-neural_compressor.experimental.metric.coco_tools"]], "evaluate() (in module neural_compressor.experimental.metric.evaluate_squad)": [[258, "neural_compressor.experimental.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[258, "neural_compressor.experimental.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[258, "neural_compressor.experimental.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.evaluate_squad)": [[258, "neural_compressor.experimental.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.evaluate_squad": [[258, "module-neural_compressor.experimental.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.experimental.metric.f1)": [[259, "neural_compressor.experimental.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.experimental.metric.f1)": [[259, "neural_compressor.experimental.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.f1)": [[259, "neural_compressor.experimental.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[259, "module-neural_compressor.experimental.metric.f1"]], "normalize_answer() (in module neural_compressor.experimental.metric.f1)": [[259, "neural_compressor.experimental.metric.f1.normalize_answer"]], "neural_compressor.experimental.metric": [[260, "module-neural_compressor.experimental.metric"]], "accuracy (class in neural_compressor.experimental.metric.metric)": [[261, "neural_compressor.experimental.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.experimental.metric.metric)": [[261, "neural_compressor.experimental.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.experimental.metric.metric)": [[261, "neural_compressor.experimental.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.experimental.metric.metric)": [[261, "neural_compressor.experimental.metric.metric.F1"]], "generaltopk (class in neural_compressor.experimental.metric.metric)": [[261, "neural_compressor.experimental.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.experimental.metric.metric)": [[261, "neural_compressor.experimental.metric.metric.Loss"]], "mae (class in neural_compressor.experimental.metric.metric)": [[261, "neural_compressor.experimental.metric.metric.MAE"]], "metrics (class in neural_compressor.experimental.metric.metric)": [[261, "neural_compressor.experimental.metric.metric.METRICS"]], "mse (class in neural_compressor.experimental.metric.metric)": [[261, "neural_compressor.experimental.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.experimental.metric.metric)": [[261, "neural_compressor.experimental.metric.metric.MXNetMetrics"]], "onnxrtglue (class in neural_compressor.experimental.metric.metric)": [[261, "neural_compressor.experimental.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.experimental.metric.metric)": [[261, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.experimental.metric.metric)": [[261, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.experimental.metric.metric)": [[261, "neural_compressor.experimental.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.experimental.metric.metric)": [[261, "neural_compressor.experimental.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.experimental.metric.metric)": [[261, "neural_compressor.experimental.metric.metric.RMSE"]], "roc (class in neural_compressor.experimental.metric.metric)": [[261, "neural_compressor.experimental.metric.metric.ROC"]], "squadf1 (class in neural_compressor.experimental.metric.metric)": [[261, "neural_compressor.experimental.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.experimental.metric.metric)": [[261, "neural_compressor.experimental.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.experimental.metric.metric)": [[261, "neural_compressor.experimental.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.experimental.metric.metric)": [[261, "neural_compressor.experimental.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.experimental.metric.metric)": [[261, "neural_compressor.experimental.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.experimental.metric.metric)": [[261, "neural_compressor.experimental.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.experimental.metric.metric)": [[261, "neural_compressor.experimental.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.experimental.metric.metric)": [[261, "neural_compressor.experimental.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.experimental.metric.metric)": [[261, "neural_compressor.experimental.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.experimental.metric.metric.mae attribute)": [[261, "neural_compressor.experimental.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.experimental.metric.metric.mse attribute)": [[261, "neural_compressor.experimental.metric.metric.MSE.compare_label"]], "k (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[261, "neural_compressor.experimental.metric.metric.GeneralTopK.k"]], "k (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[261, "neural_compressor.experimental.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[261, "neural_compressor.experimental.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mae attribute)": [[261, "neural_compressor.experimental.metric.metric.MAE.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mse attribute)": [[261, "neural_compressor.experimental.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.experimental.metric.metric)": [[261, "neural_compressor.experimental.metric.metric.mIOU"]], "metric_registry() (in module neural_compressor.experimental.metric.metric)": [[261, "neural_compressor.experimental.metric.metric.metric_registry"]], "metrics (neural_compressor.experimental.metric.metric.metrics attribute)": [[261, "neural_compressor.experimental.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.experimental.metric.metric.mxnetmetrics attribute)": [[261, "neural_compressor.experimental.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtitmetrics attribute)": [[261, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtqlmetrics attribute)": [[261, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.pytorchmetrics attribute)": [[261, "neural_compressor.experimental.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.tensorflowmetrics attribute)": [[261, "neural_compressor.experimental.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.experimental.metric.metric.rmse attribute)": [[261, "neural_compressor.experimental.metric.metric.RMSE.mse"]], "neural_compressor.experimental.metric.metric": [[261, "module-neural_compressor.experimental.metric.metric"]], "num_correct (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[261, "neural_compressor.experimental.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[261, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[261, "neural_compressor.experimental.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[261, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[261, "neural_compressor.experimental.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mae attribute)": [[261, "neural_compressor.experimental.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mse attribute)": [[261, "neural_compressor.experimental.metric.metric.MSE.pred_list"]], "sample (neural_compressor.experimental.metric.metric.accuracy attribute)": [[261, "neural_compressor.experimental.metric.metric.Accuracy.sample"]], "sample (neural_compressor.experimental.metric.metric.loss attribute)": [[261, "neural_compressor.experimental.metric.metric.Loss.sample"]], "sum (neural_compressor.experimental.metric.metric.loss attribute)": [[261, "neural_compressor.experimental.metric.metric.Loss.sum"]], "mixedprecision (class in neural_compressor.experimental.mixed_precision)": [[262, "neural_compressor.experimental.mixed_precision.MixedPrecision"]], "neural_compressor.experimental.mixed_precision": [[262, "module-neural_compressor.experimental.mixed_precision"]], "modelconversion (class in neural_compressor.experimental.model_conversion)": [[263, "neural_compressor.experimental.model_conversion.ModelConversion"]], "neural_compressor.experimental.model_conversion": [[263, "module-neural_compressor.experimental.model_conversion"]], "basicnas (class in neural_compressor.experimental.nas.basic_nas)": [[264, "neural_compressor.experimental.nas.basic_nas.BasicNAS"]], "neural_compressor.experimental.nas.basic_nas": [[264, "module-neural_compressor.experimental.nas.basic_nas"]], "dynas (class in neural_compressor.experimental.nas.dynas)": [[265, "neural_compressor.experimental.nas.dynas.DyNAS"]], "neural_compressor.experimental.nas.dynas": [[265, "module-neural_compressor.experimental.nas.dynas"]], "neural_compressor.experimental.nas": [[266, "module-neural_compressor.experimental.nas"]], "nas (class in neural_compressor.experimental.nas.nas)": [[267, "neural_compressor.experimental.nas.nas.NAS"]], "nasbase (class in neural_compressor.experimental.nas.nas)": [[267, "neural_compressor.experimental.nas.nas.NASBase"]], "neural_compressor.experimental.nas.nas": [[267, "module-neural_compressor.experimental.nas.nas"]], "create_search_space_pool() (in module neural_compressor.experimental.nas.nas_utils)": [[268, "neural_compressor.experimental.nas.nas_utils.create_search_space_pool"]], "find_pareto_front() (in module neural_compressor.experimental.nas.nas_utils)": [[268, "neural_compressor.experimental.nas.nas_utils.find_pareto_front"]], "nas_registry() (in module neural_compressor.experimental.nas.nas_utils)": [[268, "neural_compressor.experimental.nas.nas_utils.nas_registry"]], "neural_compressor.experimental.nas.nas_utils": [[268, "module-neural_compressor.experimental.nas.nas_utils"]], "bayesianoptimizationsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[269, "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher"]], "gridsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[269, "neural_compressor.experimental.nas.search_algorithms.GridSearcher"]], "randomsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[269, "neural_compressor.experimental.nas.search_algorithms.RandomSearcher"]], "searcher (class in neural_compressor.experimental.nas.search_algorithms)": [[269, "neural_compressor.experimental.nas.search_algorithms.Searcher"]], "neural_compressor.experimental.nas.search_algorithms": [[269, "module-neural_compressor.experimental.nas.search_algorithms"]], "gradientsensitivitypruner (class in neural_compressor.experimental.pruner_legacy.gradient_sensitivity)": [[270, "neural_compressor.experimental.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[270, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"]], "grouplassopruner (class in neural_compressor.experimental.pruner_legacy.group_lasso)": [[271, "neural_compressor.experimental.pruner_legacy.group_lasso.GroupLassoPruner"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[271, "module-neural_compressor.experimental.pruner_legacy.group_lasso"]], "neural_compressor.experimental.pruner_legacy": [[272, "module-neural_compressor.experimental.pruner_legacy"]], "basicmagnitudepruner (class in neural_compressor.experimental.pruner_legacy.magnitude)": [[273, "neural_compressor.experimental.pruner_legacy.magnitude.BasicMagnitudePruner"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[273, "module-neural_compressor.experimental.pruner_legacy.magnitude"]], "patternlockpruner (class in neural_compressor.experimental.pruner_legacy.pattern_lock)": [[274, "neural_compressor.experimental.pruner_legacy.pattern_lock.PatternLockPruner"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[274, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"]], "pruner (class in neural_compressor.experimental.pruner_legacy.pruner)": [[275, "neural_compressor.experimental.pruner_legacy.pruner.Pruner"]], "neural_compressor.experimental.pruner_legacy.pruner": [[275, "module-neural_compressor.experimental.pruner_legacy.pruner"]], "pruner_registry() (in module neural_compressor.experimental.pruner_legacy.pruner)": [[275, "neural_compressor.experimental.pruner_legacy.pruner.pruner_registry"]], "pruning (class in neural_compressor.experimental.pruning)": [[276, "neural_compressor.experimental.pruning.Pruning"]], "tfpruningcallback (class in neural_compressor.experimental.pruning)": [[276, "neural_compressor.experimental.pruning.TfPruningCallback"]], "conf (neural_compressor.experimental.pruning.pruning attribute)": [[276, "neural_compressor.experimental.pruning.Pruning.conf"]], "neural_compressor.experimental.pruning": [[276, "module-neural_compressor.experimental.pruning"]], "pruners (neural_compressor.experimental.pruning.pruning attribute)": [[276, "neural_compressor.experimental.pruning.Pruning.pruners"]], "neural_compressor.experimental.pruning_recipes": [[277, "module-neural_compressor.experimental.pruning_recipes"]], "neural_compressor.experimental.pruning_recipes.patterns": [[278, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "patterns (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[279, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS"]], "patternbase (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[279, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[279, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "pattern_registry() (in module neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[279, "neural_compressor.experimental.pruning_recipes.patterns.pattern.pattern_registry"]], "patterns (neural_compressor.experimental.pruning_recipes.patterns.pattern.patterns attribute)": [[279, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS.patterns"]], "tilepatternbase (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[280, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePatternBase"]], "tilepattern_1x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[280, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x1"]], "tilepattern_1x16 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[280, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x16"]], "tilepattern_1x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[280, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x2"]], "tilepattern_2x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[280, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_2x2"]], "tilepattern_4x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[280, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_4x1"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[280, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "pruning (class in neural_compressor.experimental.pruning_v2)": [[281, "neural_compressor.experimental.pruning_v2.Pruning"]], "tfpruningcallback (class in neural_compressor.experimental.pruning_v2)": [[281, "neural_compressor.experimental.pruning_v2.TfPruningCallback"]], "conf (neural_compressor.experimental.pruning_v2.pruning attribute)": [[281, "neural_compressor.experimental.pruning_v2.Pruning.conf"]], "neural_compressor.experimental.pruning_v2": [[281, "module-neural_compressor.experimental.pruning_v2"]], "pruners (neural_compressor.experimental.pruning_v2.pruning attribute)": [[281, "neural_compressor.experimental.pruning_v2.Pruning.pruners"]], "neural_compressor.experimental.pytorch_pruner": [[282, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[283, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "m (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[284, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.M"]], "n (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[284, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.N"]], "pattern (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[284, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern"]], "patternninm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[284, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM"]], "patternnxm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[284, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM"]], "block_size (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm attribute)": [[284, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.block_size"]], "get_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[284, "neural_compressor.experimental.pytorch_pruner.patterns.get_pattern"]], "is_global (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[284, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.is_global"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[284, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "pattern (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[284, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.pattern"]], "register_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[284, "neural_compressor.experimental.pytorch_pruner.patterns.register_pattern"]], "check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[285, "neural_compressor.experimental.pytorch_pruner.prune_utils.check_config"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[285, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "parse_not_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[285, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_not_to_prune"]], "parse_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[285, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_to_prune"]], "process_and_check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[285, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_and_check_config"]], "process_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[285, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_config"]], "reset_non_value_to_default() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[285, "neural_compressor.experimental.pytorch_pruner.prune_utils.reset_non_value_to_default"]], "magnitudepruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[286, "neural_compressor.experimental.pytorch_pruner.pruner.MagnitudePruner"]], "patternlockpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[286, "neural_compressor.experimental.pytorch_pruner.pruner.PatternLockPruner"]], "pruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[286, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner"]], "snipmomentumpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[286, "neural_compressor.experimental.pytorch_pruner.pruner.SnipMomentumPruner"]], "snippruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[286, "neural_compressor.experimental.pytorch_pruner.pruner.SnipPruner"]], "config (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[286, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.config"]], "current_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[286, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.current_sparsity_ratio"]], "end_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[286, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.end_step"]], "get_pruner() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[286, "neural_compressor.experimental.pytorch_pruner.pruner.get_pruner"]], "global_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[286, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.global_step"]], "masks (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[286, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.masks"]], "max_sparsity_ratio_per_layer (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[286, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.max_sparsity_ratio_per_layer"]], "modules (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[286, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.modules"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[286, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "pattern (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[286, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.pattern"]], "register_pruners() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[286, "neural_compressor.experimental.pytorch_pruner.pruner.register_pruners"]], "scheduler (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[286, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scheduler"]], "scores (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[286, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scores"]], "start_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[286, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.start_step"]], "target_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[286, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.target_sparsity_ratio"]], "update_frequency_on_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[286, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.update_frequency_on_step"]], "pruning (class in neural_compressor.experimental.pytorch_pruner.pruning)": [[287, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning"]], "config_file_path (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[287, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.config_file_path"]], "model (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[287, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.model"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[287, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "pruner_info (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[287, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruner_info"]], "pruners (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[287, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruners"]], "iterativescheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[288, "neural_compressor.experimental.pytorch_pruner.scheduler.IterativeScheduler"]], "oneshotscheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[288, "neural_compressor.experimental.pytorch_pruner.scheduler.OneshotScheduler"]], "scheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[288, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler"]], "config (neural_compressor.experimental.pytorch_pruner.scheduler.scheduler attribute)": [[288, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler.config"]], "get_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[288, "neural_compressor.experimental.pytorch_pruner.scheduler.get_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[288, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "register_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[288, "neural_compressor.experimental.pytorch_pruner.scheduler.register_scheduler"]], "quantization (class in neural_compressor.experimental.quantization)": [[289, "neural_compressor.experimental.quantization.Quantization"]], "neural_compressor.experimental.quantization": [[289, "module-neural_compressor.experimental.quantization"]], "scheduler (class in neural_compressor.experimental.scheduler)": [[290, "neural_compressor.experimental.scheduler.Scheduler"]], "neural_compressor.experimental.scheduler": [[290, "module-neural_compressor.experimental.scheduler"]], "neural_compressor": [[291, "module-neural_compressor"]], "bleu (class in neural_compressor.metric.bleu)": [[292, "neural_compressor.metric.bleu.BLEU"]], "unicoderegex (class in neural_compressor.metric.bleu)": [[292, "neural_compressor.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.metric.bleu)": [[292, "neural_compressor.metric.bleu.bleu_tokenize"]], "labels (neural_compressor.metric.bleu.bleu attribute)": [[292, "neural_compressor.metric.bleu.BLEU.labels"]], "neural_compressor.metric.bleu": [[292, "module-neural_compressor.metric.bleu"]], "nondigit_punct_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[292, "neural_compressor.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "predictions (neural_compressor.metric.bleu.bleu attribute)": [[292, "neural_compressor.metric.bleu.BLEU.predictions"]], "punct_nondigit_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[292, "neural_compressor.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "symbol_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[292, "neural_compressor.metric.bleu.UnicodeRegex.symbol_re"]], "compute_bleu() (in module neural_compressor.metric.bleu_util)": [[293, "neural_compressor.metric.bleu_util.compute_bleu"]], "neural_compressor.metric.bleu_util": [[293, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[294, "module-neural_compressor.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.metric.coco_tools)": [[295, "neural_compressor.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.metric.coco_tools)": [[295, "neural_compressor.metric.coco_tools.COCOWrapper"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.metric.coco_tools)": [[295, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.metric.coco_tools)": [[295, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.metric.coco_tools)": [[295, "neural_compressor.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "dataset (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[295, "neural_compressor.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[295, "neural_compressor.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.metric.coco_tools": [[295, "module-neural_compressor.metric.coco_tools"]], "evaluate() (in module neural_compressor.metric.evaluate_squad)": [[296, "neural_compressor.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.metric.evaluate_squad)": [[296, "neural_compressor.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.metric.evaluate_squad)": [[296, "neural_compressor.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.evaluate_squad)": [[296, "neural_compressor.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.metric.evaluate_squad": [[296, "module-neural_compressor.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.metric.f1)": [[297, "neural_compressor.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.metric.f1)": [[297, "neural_compressor.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.f1)": [[297, "neural_compressor.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[297, "module-neural_compressor.metric.f1"]], "normalize_answer() (in module neural_compressor.metric.f1)": [[297, "neural_compressor.metric.f1.normalize_answer"]], "neural_compressor.metric": [[298, "module-neural_compressor.metric"]], "accuracy (class in neural_compressor.metric.metric)": [[299, "neural_compressor.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.metric.metric)": [[299, "neural_compressor.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.metric.metric)": [[299, "neural_compressor.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.metric.metric)": [[299, "neural_compressor.metric.metric.F1"]], "generaltopk (class in neural_compressor.metric.metric)": [[299, "neural_compressor.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.metric.metric)": [[299, "neural_compressor.metric.metric.Loss"]], "mae (class in neural_compressor.metric.metric)": [[299, "neural_compressor.metric.metric.MAE"]], "metrics (class in neural_compressor.metric.metric)": [[299, "neural_compressor.metric.metric.METRICS"]], "mse (class in neural_compressor.metric.metric)": [[299, "neural_compressor.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.metric.metric)": [[299, "neural_compressor.metric.metric.MXNetMetrics"]], "metric (class in neural_compressor.metric.metric)": [[299, "neural_compressor.metric.metric.Metric"]], "onnxrtglue (class in neural_compressor.metric.metric)": [[299, "neural_compressor.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.metric.metric)": [[299, "neural_compressor.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.metric.metric)": [[299, "neural_compressor.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.metric.metric)": [[299, "neural_compressor.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.metric.metric)": [[299, "neural_compressor.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.metric.metric)": [[299, "neural_compressor.metric.metric.RMSE"]], "roc (class in neural_compressor.metric.metric)": [[299, "neural_compressor.metric.metric.ROC"]], "squadf1 (class in neural_compressor.metric.metric)": [[299, "neural_compressor.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.metric.metric)": [[299, "neural_compressor.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.metric.metric)": [[299, "neural_compressor.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.metric.metric)": [[299, "neural_compressor.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.metric.metric)": [[299, "neural_compressor.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.metric.metric)": [[299, "neural_compressor.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.metric.metric)": [[299, "neural_compressor.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.metric.metric)": [[299, "neural_compressor.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.metric.metric)": [[299, "neural_compressor.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.metric.metric.mae attribute)": [[299, "neural_compressor.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.metric.metric.mse attribute)": [[299, "neural_compressor.metric.metric.MSE.compare_label"]], "k (neural_compressor.metric.metric.generaltopk attribute)": [[299, "neural_compressor.metric.metric.GeneralTopK.k"]], "k (neural_compressor.metric.metric.tensorflowtopk attribute)": [[299, "neural_compressor.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.metric.metric.accuracy attribute)": [[299, "neural_compressor.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.metric.metric.mae attribute)": [[299, "neural_compressor.metric.metric.MAE.label_list"]], "label_list (neural_compressor.metric.metric.mse attribute)": [[299, "neural_compressor.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.metric.metric)": [[299, "neural_compressor.metric.metric.mIOU"]], "metric_registry() (in module neural_compressor.metric.metric)": [[299, "neural_compressor.metric.metric.metric_registry"]], "metrics (neural_compressor.metric.metric.metrics attribute)": [[299, "neural_compressor.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.metric.metric.mxnetmetrics attribute)": [[299, "neural_compressor.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtitmetrics attribute)": [[299, "neural_compressor.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtqlmetrics attribute)": [[299, "neural_compressor.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.metric.metric.pytorchmetrics attribute)": [[299, "neural_compressor.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.metric.metric.tensorflowmetrics attribute)": [[299, "neural_compressor.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.metric.metric.rmse attribute)": [[299, "neural_compressor.metric.metric.RMSE.mse"]], "neural_compressor.metric.metric": [[299, "module-neural_compressor.metric.metric"]], "num_correct (neural_compressor.metric.metric.generaltopk attribute)": [[299, "neural_compressor.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.metric.metric.tensorflowtopk attribute)": [[299, "neural_compressor.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.metric.metric.generaltopk attribute)": [[299, "neural_compressor.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.metric.metric.tensorflowtopk attribute)": [[299, "neural_compressor.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.metric.metric.accuracy attribute)": [[299, "neural_compressor.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.metric.metric.mae attribute)": [[299, "neural_compressor.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.metric.metric.mse attribute)": [[299, "neural_compressor.metric.metric.MSE.pred_list"]], "sample (neural_compressor.metric.metric.accuracy attribute)": [[299, "neural_compressor.metric.metric.Accuracy.sample"]], "sample (neural_compressor.metric.metric.loss attribute)": [[299, "neural_compressor.metric.metric.Loss.sample"]], "sum (neural_compressor.metric.metric.loss attribute)": [[299, "neural_compressor.metric.metric.Loss.sum"]], "fit() (in module neural_compressor.mix_precision)": [[300, "neural_compressor.mix_precision.fit"]], "neural_compressor.mix_precision": [[300, "module-neural_compressor.mix_precision"]], "basemodel (class in neural_compressor.model.base_model)": [[301, "neural_compressor.model.base_model.BaseModel"]], "neural_compressor.model.base_model": [[301, "module-neural_compressor.model.base_model"]], "neural_compressor.model": [[302, "module-neural_compressor.model"]], "kerasmodel (class in neural_compressor.model.keras_model)": [[303, "neural_compressor.model.keras_model.KerasModel"]], "neural_compressor.model.keras_model": [[303, "module-neural_compressor.model.keras_model"]], "model (class in neural_compressor.model.model)": [[304, "neural_compressor.model.model.Model"]], "get_model_fwk_name() (in module neural_compressor.model.model)": [[304, "neural_compressor.model.model.get_model_fwk_name"]], "neural_compressor.model.model": [[304, "module-neural_compressor.model.model"]], "mxnetmodel (class in neural_compressor.model.mxnet_model)": [[305, "neural_compressor.model.mxnet_model.MXNetModel"]], "neural_compressor.model.mxnet_model": [[305, "module-neural_compressor.model.mxnet_model"]], "tfslimnetsfactory (class in neural_compressor.model.nets_factory)": [[306, "neural_compressor.model.nets_factory.TFSlimNetsFactory"]], "neural_compressor.model.nets_factory": [[306, "module-neural_compressor.model.nets_factory"]], "onnxmodel (class in neural_compressor.model.onnx_model)": [[307, "neural_compressor.model.onnx_model.ONNXModel"]], "neural_compressor.model.onnx_model": [[307, "module-neural_compressor.model.onnx_model"]], "tensorflowbasemodel (class in neural_compressor.model.tensorflow_model)": [[308, "neural_compressor.model.tensorflow_model.TensorflowBaseModel"]], "tensorflowcheckpointmodel (class in neural_compressor.model.tensorflow_model)": [[308, "neural_compressor.model.tensorflow_model.TensorflowCheckpointModel"]], "tensorflowmodel (class in neural_compressor.model.tensorflow_model)": [[308, "neural_compressor.model.tensorflow_model.TensorflowModel"]], "tensorflowqatmodel (class in neural_compressor.model.tensorflow_model)": [[308, "neural_compressor.model.tensorflow_model.TensorflowQATModel"]], "tensorflowsavedmodelmodel (class in neural_compressor.model.tensorflow_model)": [[308, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel"]], "checkpoint_session() (in module neural_compressor.model.tensorflow_model)": [[308, "neural_compressor.model.tensorflow_model.checkpoint_session"]], "estimator_session() (in module neural_compressor.model.tensorflow_model)": [[308, "neural_compressor.model.tensorflow_model.estimator_session"]], "frozen_pb_session() (in module neural_compressor.model.tensorflow_model)": [[308, "neural_compressor.model.tensorflow_model.frozen_pb_session"]], "get_model_type() (in module neural_compressor.model.tensorflow_model)": [[308, "neural_compressor.model.tensorflow_model.get_model_type"]], "graph_def_session() (in module neural_compressor.model.tensorflow_model)": [[308, "neural_compressor.model.tensorflow_model.graph_def_session"]], "graph_session() (in module neural_compressor.model.tensorflow_model)": [[308, "neural_compressor.model.tensorflow_model.graph_session"]], "keras_session() (in module neural_compressor.model.tensorflow_model)": [[308, "neural_compressor.model.tensorflow_model.keras_session"]], "load_saved_model() (in module neural_compressor.model.tensorflow_model)": [[308, "neural_compressor.model.tensorflow_model.load_saved_model"]], "neural_compressor.model.tensorflow_model": [[308, "module-neural_compressor.model.tensorflow_model"]], "saved_model_session() (in module neural_compressor.model.tensorflow_model)": [[308, "neural_compressor.model.tensorflow_model.saved_model_session"]], "slim_session() (in module neural_compressor.model.tensorflow_model)": [[308, "neural_compressor.model.tensorflow_model.slim_session"]], "validate_and_inference_input_output() (in module neural_compressor.model.tensorflow_model)": [[308, "neural_compressor.model.tensorflow_model.validate_and_inference_input_output"]], "validate_graph_node() (in module neural_compressor.model.tensorflow_model)": [[308, "neural_compressor.model.tensorflow_model.validate_graph_node"]], "ipexmodel (class in neural_compressor.model.torch_model)": [[309, "neural_compressor.model.torch_model.IPEXModel"]], "pytorchbasemodel (class in neural_compressor.model.torch_model)": [[309, "neural_compressor.model.torch_model.PyTorchBaseModel"]], "pytorchfxmodel (class in neural_compressor.model.torch_model)": [[309, "neural_compressor.model.torch_model.PyTorchFXModel"]], "pytorchmodel (class in neural_compressor.model.torch_model)": [[309, "neural_compressor.model.torch_model.PyTorchModel"]], "neural_compressor.model.torch_model": [[309, "module-neural_compressor.model.torch_model"]], "accuracy (class in neural_compressor.objective)": [[310, "neural_compressor.objective.Accuracy"]], "footprint (class in neural_compressor.objective)": [[310, "neural_compressor.objective.Footprint"]], "modelsize (class in neural_compressor.objective)": [[310, "neural_compressor.objective.ModelSize"]], "multiobjective (class in neural_compressor.objective)": [[310, "neural_compressor.objective.MultiObjective"]], "objective (class in neural_compressor.objective)": [[310, "neural_compressor.objective.Objective"]], "performance (class in neural_compressor.objective)": [[310, "neural_compressor.objective.Performance"]], "neural_compressor.objective": [[310, "module-neural_compressor.objective"]], "objective_custom_registry() (in module neural_compressor.objective)": [[310, "neural_compressor.objective.objective_custom_registry"]], "objective_registry() (in module neural_compressor.objective)": [[310, "neural_compressor.objective.objective_registry"]], "fit() (in module neural_compressor.quantization)": [[311, "neural_compressor.quantization.fit"]], "neural_compressor.quantization": [[311, "module-neural_compressor.quantization"]], "autotunestrategy (class in neural_compressor.strategy.auto)": [[312, "neural_compressor.strategy.auto.AutoTuneStrategy"]], "neural_compressor.strategy.auto": [[312, "module-neural_compressor.strategy.auto"]], "automixedprecisiontunestrategy (class in neural_compressor.strategy.auto_mixed_precision)": [[313, "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[313, "module-neural_compressor.strategy.auto_mixed_precision"]], "basictunestrategy (class in neural_compressor.strategy.basic)": [[314, "neural_compressor.strategy.basic.BasicTuneStrategy"]], "neural_compressor.strategy.basic": [[314, "module-neural_compressor.strategy.basic"]], "bayesianoptimization (class in neural_compressor.strategy.bayesian)": [[315, "neural_compressor.strategy.bayesian.BayesianOptimization"]], "bayesiantunestrategy (class in neural_compressor.strategy.bayesian)": [[315, "neural_compressor.strategy.bayesian.BayesianTuneStrategy"]], "targetspace (class in neural_compressor.strategy.bayesian)": [[315, "neural_compressor.strategy.bayesian.TargetSpace"]], "acq_max() (in module neural_compressor.strategy.bayesian)": [[315, "neural_compressor.strategy.bayesian.acq_max"]], "neural_compressor.strategy.bayesian": [[315, "module-neural_compressor.strategy.bayesian"]], "conservativetunestrategy (class in neural_compressor.strategy.conservative)": [[316, "neural_compressor.strategy.conservative.ConservativeTuneStrategy"]], "neural_compressor.strategy.conservative": [[316, "module-neural_compressor.strategy.conservative"]], "exhaustivetunestrategy (class in neural_compressor.strategy.exhaustive)": [[317, "neural_compressor.strategy.exhaustive.ExhaustiveTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[317, "module-neural_compressor.strategy.exhaustive"]], "hawq_v2tunestrategy (class in neural_compressor.strategy.hawq_v2)": [[318, "neural_compressor.strategy.hawq_v2.HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.hawq_v2": [[318, "module-neural_compressor.strategy.hawq_v2"]], "neural_compressor.strategy": [[319, "module-neural_compressor.strategy"]], "msetunestrategy (class in neural_compressor.strategy.mse)": [[320, "neural_compressor.strategy.mse.MSETuneStrategy"]], "neural_compressor.strategy.mse": [[320, "module-neural_compressor.strategy.mse"]], "mse_v2tunestrategy (class in neural_compressor.strategy.mse_v2)": [[321, "neural_compressor.strategy.mse_v2.MSE_V2TuneStrategy"]], "neural_compressor.strategy.mse_v2": [[321, "module-neural_compressor.strategy.mse_v2"]], "randomtunestrategy (class in neural_compressor.strategy.random)": [[322, "neural_compressor.strategy.random.RandomTuneStrategy"]], "neural_compressor.strategy.random": [[322, "module-neural_compressor.strategy.random"]], "tunestrategy (class in neural_compressor.strategy.strategy)": [[323, "neural_compressor.strategy.strategy.TuneStrategy"]], "neural_compressor.strategy.strategy": [[323, "module-neural_compressor.strategy.strategy"]], "strategy_registry() (in module neural_compressor.strategy.strategy)": [[323, "neural_compressor.strategy.strategy.strategy_registry"]], "neural_compressor.strategy.utils.constant": [[324, "module-neural_compressor.strategy.utils.constant"]], "neural_compressor.strategy.utils": [[325, "module-neural_compressor.strategy.utils"]], "fallbacktuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[326, "neural_compressor.strategy.utils.tuning_sampler.FallbackTuningSampler"]], "modelwisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[326, "neural_compressor.strategy.utils.tuning_sampler.ModelWiseTuningSampler"]], "optypewisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[326, "neural_compressor.strategy.utils.tuning_sampler.OpTypeWiseTuningSampler"]], "opwisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[326, "neural_compressor.strategy.utils.tuning_sampler.OpWiseTuningSampler"]], "tuningorder (class in neural_compressor.strategy.utils.tuning_sampler)": [[326, "neural_compressor.strategy.utils.tuning_sampler.TuningOrder"]], "tuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[326, "neural_compressor.strategy.utils.tuning_sampler.TuningSampler"]], "tuningsamplerregistry (class in neural_compressor.strategy.utils.tuning_sampler)": [[326, "neural_compressor.strategy.utils.tuning_sampler.TuningSamplerRegistry"]], "neural_compressor.strategy.utils.tuning_sampler": [[326, "module-neural_compressor.strategy.utils.tuning_sampler"]], "tuningitem (class in neural_compressor.strategy.utils.tuning_space)": [[327, "neural_compressor.strategy.utils.tuning_space.TuningItem"]], "tuningspace (class in neural_compressor.strategy.utils.tuning_space)": [[327, "neural_compressor.strategy.utils.tuning_space.TuningSpace"]], "get_op_mode_by_query_order() (in module neural_compressor.strategy.utils.tuning_space)": [[327, "neural_compressor.strategy.utils.tuning_space.get_op_mode_by_query_order"]], "initial_tuning_cfg_with_quant_mode() (in module neural_compressor.strategy.utils.tuning_space)": [[327, "neural_compressor.strategy.utils.tuning_space.initial_tuning_cfg_with_quant_mode"]], "neural_compressor.strategy.utils.tuning_space": [[327, "module-neural_compressor.strategy.utils.tuning_space"]], "pattern_to_internal() (in module neural_compressor.strategy.utils.tuning_space)": [[327, "neural_compressor.strategy.utils.tuning_space.pattern_to_internal"]], "pattern_to_path() (in module neural_compressor.strategy.utils.tuning_space)": [[327, "neural_compressor.strategy.utils.tuning_space.pattern_to_path"]], "quant_mode_from_pattern() (in module neural_compressor.strategy.utils.tuning_space)": [[327, "neural_compressor.strategy.utils.tuning_space.quant_mode_from_pattern"]], "optuningconfig (class in neural_compressor.strategy.utils.tuning_structs)": [[328, "neural_compressor.strategy.utils.tuning_structs.OpTuningConfig"]], "neural_compressor.strategy.utils.tuning_structs": [[328, "module-neural_compressor.strategy.utils.tuning_structs"]], "ordereddefaultdict (class in neural_compressor.strategy.utils.utility)": [[329, "neural_compressor.strategy.utils.utility.OrderedDefaultDict"]], "extract_data_type() (in module neural_compressor.strategy.utils.utility)": [[329, "neural_compressor.strategy.utils.utility.extract_data_type"]], "get_adaptor_name() (in module neural_compressor.strategy.utils.utility)": [[329, "neural_compressor.strategy.utils.utility.get_adaptor_name"]], "neural_compressor.strategy.utils.utility": [[329, "module-neural_compressor.strategy.utils.utility"]], "reverted_data_type() (in module neural_compressor.strategy.utils.utility)": [[329, "neural_compressor.strategy.utils.utility.reverted_data_type"]], "exampleclass (class in neural_compressor.template.api_doc_example)": [[330, "neural_compressor.template.api_doc_example.ExampleClass"]], "attr1 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[330, "neural_compressor.template.api_doc_example.ExampleClass.attr1"]], "attr2 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[330, "neural_compressor.template.api_doc_example.ExampleClass.attr2"]], "attr5 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[330, "neural_compressor.template.api_doc_example.ExampleClass.attr5"]], "attribute1 (in module neural_compressor.template.api_doc_example)": [[330, "neural_compressor.template.api_doc_example.attribute1"]], "function1() (in module neural_compressor.template.api_doc_example)": [[330, "neural_compressor.template.api_doc_example.function1"]], "function2() (in module neural_compressor.template.api_doc_example)": [[330, "neural_compressor.template.api_doc_example.function2"]], "function3() (in module neural_compressor.template.api_doc_example)": [[330, "neural_compressor.template.api_doc_example.function3"]], "generator1() (in module neural_compressor.template.api_doc_example)": [[330, "neural_compressor.template.api_doc_example.generator1"]], "module_debug_level1 (in module neural_compressor.template.api_doc_example)": [[330, "neural_compressor.template.api_doc_example.module_debug_level1"]], "neural_compressor.template.api_doc_example": [[330, "module-neural_compressor.template.api_doc_example"]], "neural_compressor.template": [[331, "module-neural_compressor.template"]], "callbacks (class in neural_compressor.training)": [[332, "neural_compressor.training.CallBacks"]], "compressionmanager (class in neural_compressor.training)": [[332, "neural_compressor.training.CompressionManager"]], "fit() (in module neural_compressor.training)": [[332, "neural_compressor.training.fit"]], "neural_compressor.training": [[332, "module-neural_compressor.training"]], "prepare_compression() (in module neural_compressor.training)": [[332, "neural_compressor.training.prepare_compression"]], "layerhistogramcollector (class in neural_compressor.utils.collect_layer_histogram)": [[333, "neural_compressor.utils.collect_layer_histogram.LayerHistogramCollector"]], "neural_compressor.utils.collect_layer_histogram": [[333, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[334, "module-neural_compressor.utils.constant"]], "create_dataloader() (in module neural_compressor.utils.create_obj_from_config)": [[335, "neural_compressor.utils.create_obj_from_config.create_dataloader"]], "create_dataset() (in module neural_compressor.utils.create_obj_from_config)": [[335, "neural_compressor.utils.create_obj_from_config.create_dataset"]], "create_eval_func() (in module neural_compressor.utils.create_obj_from_config)": [[335, "neural_compressor.utils.create_obj_from_config.create_eval_func"]], "create_train_func() (in module neural_compressor.utils.create_obj_from_config)": [[335, "neural_compressor.utils.create_obj_from_config.create_train_func"]], "get_algorithm() (in module neural_compressor.utils.create_obj_from_config)": [[335, "neural_compressor.utils.create_obj_from_config.get_algorithm"]], "get_func_from_config() (in module neural_compressor.utils.create_obj_from_config)": [[335, "neural_compressor.utils.create_obj_from_config.get_func_from_config"]], "get_metrics() (in module neural_compressor.utils.create_obj_from_config)": [[335, "neural_compressor.utils.create_obj_from_config.get_metrics"]], "get_postprocess() (in module neural_compressor.utils.create_obj_from_config)": [[335, "neural_compressor.utils.create_obj_from_config.get_postprocess"]], "get_preprocess() (in module neural_compressor.utils.create_obj_from_config)": [[335, "neural_compressor.utils.create_obj_from_config.get_preprocess"]], "neural_compressor.utils.create_obj_from_config": [[335, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils": [[336, "module-neural_compressor.utils"]], "kl_divergence (class in neural_compressor.utils.kl_divergence)": [[337, "neural_compressor.utils.kl_divergence.KL_Divergence"]], "neural_compressor.utils.kl_divergence": [[337, "module-neural_compressor.utils.kl_divergence"]], "optimizedmodel (class in neural_compressor.utils.load_huggingface)": [[338, "neural_compressor.utils.load_huggingface.OptimizedModel"]], "neural_compressor.utils.load_huggingface": [[338, "module-neural_compressor.utils.load_huggingface"]], "save_for_huggingface_upstream() (in module neural_compressor.utils.load_huggingface)": [[338, "neural_compressor.utils.load_huggingface.save_for_huggingface_upstream"]], "logger (class in neural_compressor.utils.logger)": [[339, "neural_compressor.utils.logger.Logger"]], "debug() (in module neural_compressor.utils.logger)": [[339, "neural_compressor.utils.logger.debug"]], "error() (in module neural_compressor.utils.logger)": [[339, "neural_compressor.utils.logger.error"]], "fatal() (in module neural_compressor.utils.logger)": [[339, "neural_compressor.utils.logger.fatal"]], "info() (in module neural_compressor.utils.logger)": [[339, "neural_compressor.utils.logger.info"]], "log() (in module neural_compressor.utils.logger)": [[339, "neural_compressor.utils.logger.log"]], "neural_compressor.utils.logger": [[339, "module-neural_compressor.utils.logger"]], "warn() (in module neural_compressor.utils.logger)": [[339, "neural_compressor.utils.logger.warn"]], "warning() (in module neural_compressor.utils.logger)": [[339, "neural_compressor.utils.logger.warning"]], "neural_compressor.utils.options": [[340, "module-neural_compressor.utils.options"]], "onnxrt (class in neural_compressor.utils.options)": [[340, "neural_compressor.utils.options.onnxrt"]], "is_int8_model() (in module neural_compressor.utils.pytorch)": [[341, "neural_compressor.utils.pytorch.is_int8_model"]], "load() (in module neural_compressor.utils.pytorch)": [[341, "neural_compressor.utils.pytorch.load"]], "neural_compressor.utils.pytorch": [[341, "module-neural_compressor.utils.pytorch"]], "captureoutputtofile (class in neural_compressor.utils.utility)": [[342, "neural_compressor.utils.utility.CaptureOutputToFile"]], "cpuinfo (class in neural_compressor.utils.utility)": [[342, "neural_compressor.utils.utility.CpuInfo"]], "dequantize() (in module neural_compressor.utils.utility)": [[342, "neural_compressor.utils.utility.Dequantize"]], "dequantizeweight() (in module neural_compressor.utils.utility)": [[342, "neural_compressor.utils.utility.DequantizeWeight"]], "global_state (class in neural_compressor.utils.utility)": [[342, "neural_compressor.utils.utility.GLOBAL_STATE"]], "lazyimport (class in neural_compressor.utils.utility)": [[342, "neural_compressor.utils.utility.LazyImport"]], "mode (class in neural_compressor.utils.utility)": [[342, "neural_compressor.utils.utility.MODE"]], "statistics (class in neural_compressor.utils.utility)": [[342, "neural_compressor.utils.utility.Statistics"]], "combine_histogram() (in module neural_compressor.utils.utility)": [[342, "neural_compressor.utils.utility.combine_histogram"]], "compute_sparsity() (in module neural_compressor.utils.utility)": [[342, "neural_compressor.utils.utility.compute_sparsity"]], "dump_data_to_local() (in module neural_compressor.utils.utility)": [[342, "neural_compressor.utils.utility.dump_data_to_local"]], "dump_elapsed_time() (in module neural_compressor.utils.utility)": [[342, "neural_compressor.utils.utility.dump_elapsed_time"]], "equal_dicts() (in module neural_compressor.utils.utility)": [[342, "neural_compressor.utils.utility.equal_dicts"]], "fault_tolerant_file() (in module neural_compressor.utils.utility)": [[342, "neural_compressor.utils.utility.fault_tolerant_file"]], "get_all_fp32_data() (in module neural_compressor.utils.utility)": [[342, "neural_compressor.utils.utility.get_all_fp32_data"]], "get_size() (in module neural_compressor.utils.utility)": [[342, "neural_compressor.utils.utility.get_size"]], "get_tensor_histogram() (in module neural_compressor.utils.utility)": [[342, "neural_compressor.utils.utility.get_tensor_histogram"]], "get_tuning_history() (in module neural_compressor.utils.utility)": [[342, "neural_compressor.utils.utility.get_tuning_history"]], "load_data_from_pkl() (in module neural_compressor.utils.utility)": [[342, "neural_compressor.utils.utility.load_data_from_pkl"]], "neural_compressor.utils.utility": [[342, "module-neural_compressor.utils.utility"]], "recover() (in module neural_compressor.utils.utility)": [[342, "neural_compressor.utils.utility.recover"]], "set_random_seed() (in module neural_compressor.utils.utility)": [[342, "neural_compressor.utils.utility.set_random_seed"]], "set_resume_from() (in module neural_compressor.utils.utility)": [[342, "neural_compressor.utils.utility.set_resume_from"]], "set_tensorboard() (in module neural_compressor.utils.utility)": [[342, "neural_compressor.utils.utility.set_tensorboard"]], "set_workspace() (in module neural_compressor.utils.utility)": [[342, "neural_compressor.utils.utility.set_workspace"]], "show_memory_info() (in module neural_compressor.utils.utility)": [[342, "neural_compressor.utils.utility.show_memory_info"]], "singleton() (in module neural_compressor.utils.utility)": [[342, "neural_compressor.utils.utility.singleton"]], "str2array() (in module neural_compressor.utils.utility)": [[342, "neural_compressor.utils.utility.str2array"]], "time_limit() (in module neural_compressor.utils.utility)": [[342, "neural_compressor.utils.utility.time_limit"]], "version1_eq_version2() (in module neural_compressor.utils.utility)": [[342, "neural_compressor.utils.utility.version1_eq_version2"]], "version1_gt_version2() (in module neural_compressor.utils.utility)": [[342, "neural_compressor.utils.utility.version1_gt_version2"]], "version1_gte_version2() (in module neural_compressor.utils.utility)": [[342, "neural_compressor.utils.utility.version1_gte_version2"]], "version1_lt_version2() (in module neural_compressor.utils.utility)": [[342, "neural_compressor.utils.utility.version1_lt_version2"]], "version1_lte_version2() (in module neural_compressor.utils.utility)": [[342, "neural_compressor.utils.utility.version1_lte_version2"]], "benchmark (class in neural_compressor.ux.components.benchmark.benchmark)": [[343, "neural_compressor.ux.components.benchmark.benchmark.Benchmark"]], "dataloaderinterface (class in neural_compressor.ux.components.benchmark.benchmark)": [[343, "neural_compressor.ux.components.benchmark.benchmark.DataloaderInterface"]], "neural_compressor.ux.components.benchmark.benchmark": [[343, "module-neural_compressor.ux.components.benchmark.benchmark"]], "benchmark_model() (in module neural_compressor.ux.components.benchmark.benchmark_model)": [[344, "neural_compressor.ux.components.benchmark.benchmark_model.benchmark_model"]], "neural_compressor.ux.components.benchmark.benchmark_model": [[344, "module-neural_compressor.ux.components.benchmark.benchmark_model"]], "parse_args() (in module neural_compressor.ux.components.benchmark.benchmark_model)": [[344, "neural_compressor.ux.components.benchmark.benchmark_model.parse_args"]], "set_eager_execution() (in module neural_compressor.ux.components.benchmark.benchmark_model)": [[344, "neural_compressor.ux.components.benchmark.benchmark_model.set_eager_execution"]], "benchmark_result_update() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[345, "neural_compressor.ux.components.benchmark.execute_benchmark.benchmark_result_update"]], "benchmark_result_update_pytorch_script() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[345, "neural_compressor.ux.components.benchmark.execute_benchmark.benchmark_result_update_pytorch_script"]], "execute_benchmark() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[345, "neural_compressor.ux.components.benchmark.execute_benchmark.execute_benchmark"]], "execute_real_benchmark() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[345, "neural_compressor.ux.components.benchmark.execute_benchmark.execute_real_benchmark"]], "neural_compressor.ux.components.benchmark.execute_benchmark": [[345, "module-neural_compressor.ux.components.benchmark.execute_benchmark"]], "pytorch_script_bench_optimizations() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[345, "neural_compressor.ux.components.benchmark.execute_benchmark.pytorch_script_bench_optimizations"]], "pytorch_script_bench_original_model() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[345, "neural_compressor.ux.components.benchmark.execute_benchmark.pytorch_script_bench_original_model"]], "benchmarks (class in neural_compressor.ux.components.benchmark)": [[346, "neural_compressor.ux.components.benchmark.Benchmarks"]], "neural_compressor.ux.components.benchmark": [[346, "module-neural_compressor.ux.components.benchmark"]], "benchmarkconfiggenerator (class in neural_compressor.ux.components.config_generator.benchmark_config_generator)": [[347, "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator"]], "neural_compressor.ux.components.config_generator.benchmark_config_generator": [[347, "module-neural_compressor.ux.components.config_generator.benchmark_config_generator"]], "configgenerator (class in neural_compressor.ux.components.config_generator.config_generator)": [[348, "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator"]], "neural_compressor.ux.components.config_generator.config_generator": [[348, "module-neural_compressor.ux.components.config_generator.config_generator"]], "graphoptimizationconfiggenerator (class in neural_compressor.ux.components.config_generator.graph_optimization_config_generator)": [[349, "neural_compressor.ux.components.config_generator.graph_optimization_config_generator.GraphOptimizationConfigGenerator"]], "neural_compressor.ux.components.config_generator.graph_optimization_config_generator": [[349, "module-neural_compressor.ux.components.config_generator.graph_optimization_config_generator"]], "neural_compressor.ux.components.config_generator": [[350, "module-neural_compressor.ux.components.config_generator"]], "mixedprecisionconfiggenerator (class in neural_compressor.ux.components.config_generator.mixed_precision_config_generator)": [[351, "neural_compressor.ux.components.config_generator.mixed_precision_config_generator.MixedPrecisionConfigGenerator"]], "neural_compressor.ux.components.config_generator.mixed_precision_config_generator": [[351, "module-neural_compressor.ux.components.config_generator.mixed_precision_config_generator"]], "profilingconfiggenerator (class in neural_compressor.ux.components.config_generator.profiling_config_generator)": [[352, "neural_compressor.ux.components.config_generator.profiling_config_generator.ProfilingConfigGenerator"]], "neural_compressor.ux.components.config_generator.profiling_config_generator": [[352, "module-neural_compressor.ux.components.config_generator.profiling_config_generator"]], "pruningconfiggenerator (class in neural_compressor.ux.components.config_generator.pruning_config_generator)": [[353, "neural_compressor.ux.components.config_generator.pruning_config_generator.PruningConfigGenerator"]], "neural_compressor.ux.components.config_generator.pruning_config_generator": [[353, "module-neural_compressor.ux.components.config_generator.pruning_config_generator"]], "quantizationconfiggenerator (class in neural_compressor.ux.components.config_generator.quantization_config_generator)": [[354, "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator"]], "neural_compressor.ux.components.config_generator.quantization_config_generator": [[354, "module-neural_compressor.ux.components.config_generator.quantization_config_generator"]], "configurationparser (class in neural_compressor.ux.components.configuration_wizard.configuration_parser)": [[355, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser"]], "neural_compressor.ux.components.configuration_wizard.configuration_parser": [[355, "module-neural_compressor.ux.components.configuration_wizard.configuration_parser"]], "normalize_string_list() (in module neural_compressor.ux.components.configuration_wizard.configuration_parser)": [[355, "neural_compressor.ux.components.configuration_wizard.configuration_parser.normalize_string_list"]], "parse_list_value() (in module neural_compressor.ux.components.configuration_wizard.configuration_parser)": [[355, "neural_compressor.ux.components.configuration_wizard.configuration_parser.parse_list_value"]], "parse_multidim_list() (in module neural_compressor.ux.components.configuration_wizard.configuration_parser)": [[355, "neural_compressor.ux.components.configuration_wizard.configuration_parser.parse_multidim_list"]], "get_boundary_nodes() (in module neural_compressor.ux.components.configuration_wizard.get_boundary_nodes)": [[356, "neural_compressor.ux.components.configuration_wizard.get_boundary_nodes.get_boundary_nodes"]], "neural_compressor.ux.components.configuration_wizard.get_boundary_nodes": [[356, "module-neural_compressor.ux.components.configuration_wizard.get_boundary_nodes"]], "get_predefined_configuration() (in module neural_compressor.ux.components.configuration_wizard.get_configuration)": [[357, "neural_compressor.ux.components.configuration_wizard.get_configuration.get_predefined_configuration"]], "neural_compressor.ux.components.configuration_wizard.get_configuration": [[357, "module-neural_compressor.ux.components.configuration_wizard.get_configuration"]], "update_config_to_machine_specification() (in module neural_compressor.ux.components.configuration_wizard.get_configuration)": [[357, "neural_compressor.ux.components.configuration_wizard.get_configuration.update_config_to_machine_specification"]], "neural_compressor.ux.components.configuration_wizard": [[358, "module-neural_compressor.ux.components.configuration_wizard"]], "feeder (class in neural_compressor.ux.components.configuration_wizard.params_feeder)": [[359, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder"]], "get_possible_values() (in module neural_compressor.ux.components.configuration_wizard.params_feeder)": [[359, "neural_compressor.ux.components.configuration_wizard.params_feeder.get_possible_values"]], "neural_compressor.ux.components.configuration_wizard.params_feeder": [[359, "module-neural_compressor.ux.components.configuration_wizard.params_feeder"]], "pruningconfigparser (class in neural_compressor.ux.components.configuration_wizard.pruning_config_parser)": [[360, "neural_compressor.ux.components.configuration_wizard.pruning_config_parser.PruningConfigParser"]], "neural_compressor.ux.components.configuration_wizard.pruning_config_parser": [[360, "module-neural_compressor.ux.components.configuration_wizard.pruning_config_parser"]], "dbmanager (class in neural_compressor.ux.components.db_manager.db_manager)": [[361, "neural_compressor.ux.components.db_manager.db_manager.DBManager"]], "neural_compressor.ux.components.db_manager.db_manager": [[361, "module-neural_compressor.ux.components.db_manager.db_manager"]], "benchmark (class in neural_compressor.ux.components.db_manager.db_models.benchmark)": [[362, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark"]], "neural_compressor.ux.components.db_manager.db_models.benchmark": [[362, "module-neural_compressor.ux.components.db_manager.db_models.benchmark"]], "benchmarkresult (class in neural_compressor.ux.components.db_manager.db_models.benchmark_result)": [[363, "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult"]], "neural_compressor.ux.components.db_manager.db_models.benchmark_result": [[363, "module-neural_compressor.ux.components.db_manager.db_models.benchmark_result"]], "dataloader (class in neural_compressor.ux.components.db_manager.db_models.dataloader)": [[364, "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.dataloader)": [[364, "neural_compressor.ux.components.db_manager.db_models.dataloader.fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.dataloader": [[364, "module-neural_compressor.ux.components.db_manager.db_models.dataloader"]], "dataset (class in neural_compressor.ux.components.db_manager.db_models.dataset)": [[365, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset"]], "neural_compressor.ux.components.db_manager.db_models.dataset": [[365, "module-neural_compressor.ux.components.db_manager.db_models.dataset"]], "domain (class in neural_compressor.ux.components.db_manager.db_models.domain)": [[366, "neural_compressor.ux.components.db_manager.db_models.domain.Domain"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.domain)": [[366, "neural_compressor.ux.components.db_manager.db_models.domain.fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.domain": [[366, "module-neural_compressor.ux.components.db_manager.db_models.domain"]], "domainflavour (class in neural_compressor.ux.components.db_manager.db_models.domain_flavour)": [[367, "neural_compressor.ux.components.db_manager.db_models.domain_flavour.DomainFlavour"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.domain_flavour)": [[367, "neural_compressor.ux.components.db_manager.db_models.domain_flavour.fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.domain_flavour": [[367, "module-neural_compressor.ux.components.db_manager.db_models.domain_flavour"]], "example (class in neural_compressor.ux.components.db_manager.db_models.example)": [[368, "neural_compressor.ux.components.db_manager.db_models.example.Example"]], "neural_compressor.ux.components.db_manager.db_models.example": [[368, "module-neural_compressor.ux.components.db_manager.db_models.example"]], "framework (class in neural_compressor.ux.components.db_manager.db_models.framework)": [[369, "neural_compressor.ux.components.db_manager.db_models.framework.Framework"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.framework)": [[369, "neural_compressor.ux.components.db_manager.db_models.framework.fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.framework": [[369, "module-neural_compressor.ux.components.db_manager.db_models.framework"]], "neural_compressor.ux.components.db_manager.db_models": [[370, "module-neural_compressor.ux.components.db_manager.db_models"]], "metric (class in neural_compressor.ux.components.db_manager.db_models.metric)": [[371, "neural_compressor.ux.components.db_manager.db_models.metric.Metric"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.metric)": [[371, "neural_compressor.ux.components.db_manager.db_models.metric.fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.metric": [[371, "module-neural_compressor.ux.components.db_manager.db_models.metric"]], "model (class in neural_compressor.ux.components.db_manager.db_models.model)": [[372, "neural_compressor.ux.components.db_manager.db_models.model.Model"]], "neural_compressor.ux.components.db_manager.db_models.model": [[372, "module-neural_compressor.ux.components.db_manager.db_models.model"]], "optimization (class in neural_compressor.ux.components.db_manager.db_models.optimization)": [[373, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization"]], "neural_compressor.ux.components.db_manager.db_models.optimization": [[373, "module-neural_compressor.ux.components.db_manager.db_models.optimization"]], "optimizationtype (class in neural_compressor.ux.components.db_manager.db_models.optimization_type)": [[374, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.optimization_type)": [[374, "neural_compressor.ux.components.db_manager.db_models.optimization_type.fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.optimization_type": [[374, "module-neural_compressor.ux.components.db_manager.db_models.optimization_type"]], "precision (class in neural_compressor.ux.components.db_manager.db_models.precision)": [[375, "neural_compressor.ux.components.db_manager.db_models.precision.Precision"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.precision)": [[375, "neural_compressor.ux.components.db_manager.db_models.precision.fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.precision": [[375, "module-neural_compressor.ux.components.db_manager.db_models.precision"]], "profiling (class in neural_compressor.ux.components.db_manager.db_models.profiling)": [[376, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling"]], "neural_compressor.ux.components.db_manager.db_models.profiling": [[376, "module-neural_compressor.ux.components.db_manager.db_models.profiling"]], "profilingresult (class in neural_compressor.ux.components.db_manager.db_models.profiling_result)": [[377, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult"]], "neural_compressor.ux.components.db_manager.db_models.profiling_result": [[377, "module-neural_compressor.ux.components.db_manager.db_models.profiling_result"]], "project (class in neural_compressor.ux.components.db_manager.db_models.project)": [[378, "neural_compressor.ux.components.db_manager.db_models.project.Project"]], "neural_compressor.ux.components.db_manager.db_models.project": [[378, "module-neural_compressor.ux.components.db_manager.db_models.project"]], "pruningdetails (class in neural_compressor.ux.components.db_manager.db_models.pruning_details)": [[379, "neural_compressor.ux.components.db_manager.db_models.pruning_details.PruningDetails"]], "neural_compressor.ux.components.db_manager.db_models.pruning_details": [[379, "module-neural_compressor.ux.components.db_manager.db_models.pruning_details"]], "transform (class in neural_compressor.ux.components.db_manager.db_models.transform)": [[380, "neural_compressor.ux.components.db_manager.db_models.transform.Transform"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.transform)": [[380, "neural_compressor.ux.components.db_manager.db_models.transform.fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.transform": [[380, "module-neural_compressor.ux.components.db_manager.db_models.transform"]], "tuningdetails (class in neural_compressor.ux.components.db_manager.db_models.tuning_details)": [[381, "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails"]], "neural_compressor.ux.components.db_manager.db_models.tuning_details": [[381, "module-neural_compressor.ux.components.db_manager.db_models.tuning_details"]], "tuninghistory (class in neural_compressor.ux.components.db_manager.db_models.tuning_history)": [[382, "neural_compressor.ux.components.db_manager.db_models.tuning_history.TuningHistory"]], "neural_compressor.ux.components.db_manager.db_models.tuning_history": [[382, "module-neural_compressor.ux.components.db_manager.db_models.tuning_history"]], "benchmarkapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface)": [[383, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface"]], "before_delete_benchmark_entry() (in module neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface)": [[383, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.before_delete_benchmark_entry"]], "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface": [[383, "module-neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface"]], "datasetapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[384, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface"]], "initialize_associations() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[384, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.initialize_associations"]], "initialize_precision_optimization_types_association() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[384, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.initialize_precision_optimization_types_association"]], "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface": [[384, "module-neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface"]], "search_in_list_of_dict() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[384, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.search_in_list_of_dict"]], "search_in_list_of_dict_for_unique_value() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[384, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.search_in_list_of_dict_for_unique_value"]], "set_database_version() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[384, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.set_database_version"]], "initialize_associations() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[385, "neural_compressor.ux.components.db_manager.db_operations.db_operations.initialize_associations"]], "initialize_precision_optimization_types_association() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[385, "neural_compressor.ux.components.db_manager.db_operations.db_operations.initialize_precision_optimization_types_association"]], "neural_compressor.ux.components.db_manager.db_operations.db_operations": [[385, "module-neural_compressor.ux.components.db_manager.db_operations.db_operations"]], "search_in_list_of_dict() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[385, "neural_compressor.ux.components.db_manager.db_operations.db_operations.search_in_list_of_dict"]], "search_in_list_of_dict_for_unique_value() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[385, "neural_compressor.ux.components.db_manager.db_operations.db_operations.search_in_list_of_dict_for_unique_value"]], "set_database_version() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[385, "neural_compressor.ux.components.db_manager.db_operations.db_operations.set_database_version"]], "diagnosisapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface)": [[386, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface": [[386, "module-neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface"]], "dictionariesapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface)": [[387, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface": [[387, "module-neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface"]], "examplesapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.examples_api_interface)": [[388, "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.ExamplesAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface": [[388, "module-neural_compressor.ux.components.db_manager.db_operations.examples_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations": [[389, "module-neural_compressor.ux.components.db_manager.db_operations"]], "modelapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.model_api_interface)": [[390, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.model_api_interface": [[390, "module-neural_compressor.ux.components.db_manager.db_operations.model_api_interface"]], "optimizationapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface)": [[391, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface": [[391, "module-neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface"]], "profilingapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface)": [[392, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface": [[392, "module-neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface"]], "projectapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.project_api_interface)": [[393, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.project_api_interface": [[393, "module-neural_compressor.ux.components.db_manager.db_operations.project_api_interface"]], "neural_compressor.ux.components.db_manager": [[394, "module-neural_compressor.ux.components.db_manager"]], "benchmarkaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[395, "neural_compressor.ux.components.db_manager.params_interfaces.BenchmarkAddParamsInterface"]], "benchmarkeditparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[395, "neural_compressor.ux.components.db_manager.params_interfaces.BenchmarkEditParamsInterface"]], "datasetaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[395, "neural_compressor.ux.components.db_manager.params_interfaces.DatasetAddParamsInterface"]], "diagnosisoptimizationparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[395, "neural_compressor.ux.components.db_manager.params_interfaces.DiagnosisOptimizationParamsInterface"]], "modeladdparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[395, "neural_compressor.ux.components.db_manager.params_interfaces.ModelAddParamsInterface"]], "optimizationaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[395, "neural_compressor.ux.components.db_manager.params_interfaces.OptimizationAddParamsInterface"]], "optimizationeditparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[395, "neural_compressor.ux.components.db_manager.params_interfaces.OptimizationEditParamsInterface"]], "profilingaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[395, "neural_compressor.ux.components.db_manager.params_interfaces.ProfilingAddParamsInterface"]], "profilingeditparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[395, "neural_compressor.ux.components.db_manager.params_interfaces.ProfilingEditParamsInterface"]], "profilingresultaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[395, "neural_compressor.ux.components.db_manager.params_interfaces.ProfilingResultAddParamsInterface"]], "tuninghistoryinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[395, "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryInterface"]], "tuninghistoryiteminterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[395, "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryItemInterface"]], "neural_compressor.ux.components.db_manager.params_interfaces": [[395, "module-neural_compressor.ux.components.db_manager.params_interfaces"]], "get_framework_dataloaders_config() (in module neural_compressor.ux.components.db_manager.utils)": [[396, "neural_compressor.ux.components.db_manager.utils.get_framework_dataloaders_config"]], "get_framework_transforms_config() (in module neural_compressor.ux.components.db_manager.utils)": [[396, "neural_compressor.ux.components.db_manager.utils.get_framework_transforms_config"]], "neural_compressor.ux.components.db_manager.utils": [[396, "module-neural_compressor.ux.components.db_manager.utils"]], "update_dataloaders_params() (in module neural_compressor.ux.components.db_manager.utils)": [[396, "neural_compressor.ux.components.db_manager.utils.update_dataloaders_params"]], "diagnosis (class in neural_compressor.ux.components.diagnosis.diagnosis)": [[397, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis"]], "neural_compressor.ux.components.diagnosis.diagnosis": [[397, "module-neural_compressor.ux.components.diagnosis.diagnosis"]], "diagnosisfactory (class in neural_compressor.ux.components.diagnosis.factory)": [[398, "neural_compressor.ux.components.diagnosis.factory.DiagnosisFactory"]], "neural_compressor.ux.components.diagnosis.factory": [[398, "module-neural_compressor.ux.components.diagnosis.factory"]], "neural_compressor.ux.components.diagnosis": [[399, "module-neural_compressor.ux.components.diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis": [[400, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis"]], "onnxrtdiagnosis (class in neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis)": [[401, "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis.OnnxRtDiagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis": [[401, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis"]], "opactivation (class in neural_compressor.ux.components.diagnosis.op_details)": [[402, "neural_compressor.ux.components.diagnosis.op_details.OpActivation"]], "opdetails (class in neural_compressor.ux.components.diagnosis.op_details)": [[402, "neural_compressor.ux.components.diagnosis.op_details.OpDetails"]], "oppattern (class in neural_compressor.ux.components.diagnosis.op_details)": [[402, "neural_compressor.ux.components.diagnosis.op_details.OpPattern"]], "opweights (class in neural_compressor.ux.components.diagnosis.op_details)": [[402, "neural_compressor.ux.components.diagnosis.op_details.OpWeights"]], "neural_compressor.ux.components.diagnosis.op_details": [[402, "module-neural_compressor.ux.components.diagnosis.op_details"]], "opentry (class in neural_compressor.ux.components.diagnosis.op_entry)": [[403, "neural_compressor.ux.components.diagnosis.op_entry.OpEntry"]], "neural_compressor.ux.components.diagnosis.op_entry": [[403, "module-neural_compressor.ux.components.diagnosis.op_entry"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis": [[404, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis"]], "tensorflowdiagnosis (class in neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis)": [[405, "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis.TensorflowDiagnosis"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis": [[405, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis"]], "create_dir_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[406, "neural_compressor.ux.components.file_browser.file_browser.create_dir_entry"]], "create_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[406, "neural_compressor.ux.components.file_browser.file_browser.create_entry"]], "create_file_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[406, "neural_compressor.ux.components.file_browser.file_browser.create_file_entry"]], "filter_requested_entries() (in module neural_compressor.ux.components.file_browser.file_browser)": [[406, "neural_compressor.ux.components.file_browser.file_browser.filter_requested_entries"]], "get_directory_entries() (in module neural_compressor.ux.components.file_browser.file_browser)": [[406, "neural_compressor.ux.components.file_browser.file_browser.get_directory_entries"]], "get_filter_value() (in module neural_compressor.ux.components.file_browser.file_browser)": [[406, "neural_compressor.ux.components.file_browser.file_browser.get_filter_value"]], "get_non_hidden_directory_entries() (in module neural_compressor.ux.components.file_browser.file_browser)": [[406, "neural_compressor.ux.components.file_browser.file_browser.get_non_hidden_directory_entries"]], "get_requested_path() (in module neural_compressor.ux.components.file_browser.file_browser)": [[406, "neural_compressor.ux.components.file_browser.file_browser.get_requested_path"]], "get_setting_value() (in module neural_compressor.ux.components.file_browser.file_browser)": [[406, "neural_compressor.ux.components.file_browser.file_browser.get_setting_value"]], "is_dataset_or_directory_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[406, "neural_compressor.ux.components.file_browser.file_browser.is_dataset_or_directory_entry"]], "is_directory_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[406, "neural_compressor.ux.components.file_browser.file_browser.is_directory_entry"]], "is_model_or_directory_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[406, "neural_compressor.ux.components.file_browser.file_browser.is_model_or_directory_entry"]], "neural_compressor.ux.components.file_browser.file_browser": [[406, "module-neural_compressor.ux.components.file_browser.file_browser"]], "should_show_files() (in module neural_compressor.ux.components.file_browser.file_browser)": [[406, "neural_compressor.ux.components.file_browser.file_browser.should_show_files"]], "should_show_only_model_files() (in module neural_compressor.ux.components.file_browser.file_browser)": [[406, "neural_compressor.ux.components.file_browser.file_browser.should_show_only_model_files"]], "sort_entries() (in module neural_compressor.ux.components.file_browser.file_browser)": [[406, "neural_compressor.ux.components.file_browser.file_browser.sort_entries"]], "neural_compressor.ux.components.file_browser": [[407, "module-neural_compressor.ux.components.file_browser"]], "attribute (class in neural_compressor.ux.components.graph.attribute)": [[408, "neural_compressor.ux.components.graph.attribute.Attribute"]], "neural_compressor.ux.components.graph.attribute": [[408, "module-neural_compressor.ux.components.graph.attribute"]], "collapser (class in neural_compressor.ux.components.graph.collapser)": [[409, "neural_compressor.ux.components.graph.collapser.Collapser"]], "neural_compressor.ux.components.graph.collapser": [[409, "module-neural_compressor.ux.components.graph.collapser"]], "edge (class in neural_compressor.ux.components.graph.edge)": [[410, "neural_compressor.ux.components.graph.edge.Edge"]], "neural_compressor.ux.components.graph.edge": [[410, "module-neural_compressor.ux.components.graph.edge"]], "graph (class in neural_compressor.ux.components.graph.graph)": [[411, "neural_compressor.ux.components.graph.graph.Graph"]], "neural_compressor.ux.components.graph.graph": [[411, "module-neural_compressor.ux.components.graph.graph"]], "graphreader (class in neural_compressor.ux.components.graph.graph_reader)": [[412, "neural_compressor.ux.components.graph.graph_reader.GraphReader"]], "neural_compressor.ux.components.graph.graph_reader": [[412, "module-neural_compressor.ux.components.graph.graph_reader"]], "neural_compressor.ux.components.graph": [[413, "module-neural_compressor.ux.components.graph"]], "groupnode (class in neural_compressor.ux.components.graph.node)": [[414, "neural_compressor.ux.components.graph.node.GroupNode"]], "node (class in neural_compressor.ux.components.graph.node)": [[414, "neural_compressor.ux.components.graph.node.Node"]], "neural_compressor.ux.components.graph.node": [[414, "module-neural_compressor.ux.components.graph.node"]], "neural_compressor.ux.components.graph.reader": [[415, "module-neural_compressor.ux.components.graph.reader"]], "onnxrtreader (class in neural_compressor.ux.components.graph.reader.onnxrt_reader)": [[416, "neural_compressor.ux.components.graph.reader.onnxrt_reader.OnnxrtReader"]], "neural_compressor.ux.components.graph.reader.onnxrt_reader": [[416, "module-neural_compressor.ux.components.graph.reader.onnxrt_reader"]], "tensorflowreader (class in neural_compressor.ux.components.graph.reader.tensorflow_reader)": [[417, "neural_compressor.ux.components.graph.reader.tensorflow_reader.TensorflowReader"]], "neural_compressor.ux.components.graph.reader.tensorflow_reader": [[417, "module-neural_compressor.ux.components.graph.reader.tensorflow_reader"]], "neural_compressor.ux.components": [[418, "module-neural_compressor.ux.components"]], "neural_compressor.ux.components.jobs_management": [[419, "module-neural_compressor.ux.components.jobs_management"]], "neural_compressor.ux.components.jobs_management.jobs_control_queue": [[420, "module-neural_compressor.ux.components.jobs_management.jobs_control_queue"]], "neural_compressor.ux.components.jobs_management.jobs_manager": [[421, "module-neural_compressor.ux.components.jobs_management.jobs_manager"]], "neural_compressor.ux.components.jobs_management.request": [[422, "module-neural_compressor.ux.components.jobs_management.request"]], "get_default_path() (in module neural_compressor.ux.components.manage_workspace)": [[423, "neural_compressor.ux.components.manage_workspace.get_default_path"]], "neural_compressor.ux.components.manage_workspace": [[423, "module-neural_compressor.ux.components.manage_workspace"]], "domain (class in neural_compressor.ux.components.model.domain)": [[424, "neural_compressor.ux.components.model.domain.Domain"]], "neural_compressor.ux.components.model.domain": [[424, "module-neural_compressor.ux.components.model.domain"]], "neural_compressor.ux.components.model": [[425, "module-neural_compressor.ux.components.model"]], "model (class in neural_compressor.ux.components.model.model)": [[426, "neural_compressor.ux.components.model.model.Model"]], "neural_compressor.ux.components.model.model": [[426, "module-neural_compressor.ux.components.model.model"]], "get_model_type() (in module neural_compressor.ux.components.model.model_type_getter)": [[427, "neural_compressor.ux.components.model.model_type_getter.get_model_type"]], "neural_compressor.ux.components.model.model_type_getter": [[427, "module-neural_compressor.ux.components.model.model_type_getter"]], "neural_compressor.ux.components.model.onnxrt": [[428, "module-neural_compressor.ux.components.model.onnxrt"]], "onnxrtmodel (class in neural_compressor.ux.components.model.onnxrt.model)": [[429, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel"]], "neural_compressor.ux.components.model.onnxrt.model": [[429, "module-neural_compressor.ux.components.model.onnxrt.model"]], "remove_number_of_samples_from_shape() (in module neural_compressor.ux.components.model.onnxrt.model)": [[429, "neural_compressor.ux.components.model.onnxrt.model.remove_number_of_samples_from_shape"]], "neural_compressor.ux.components.model.pytorch": [[430, "module-neural_compressor.ux.components.model.pytorch"]], "pytorchscriptmodel (class in neural_compressor.ux.components.model.pytorch.model)": [[431, "neural_compressor.ux.components.model.pytorch.model.PyTorchScriptModel"]], "neural_compressor.ux.components.model.pytorch.model": [[431, "module-neural_compressor.ux.components.model.pytorch.model"]], "modelrepository (class in neural_compressor.ux.components.model.repository)": [[432, "neural_compressor.ux.components.model.repository.ModelRepository"]], "neural_compressor.ux.components.model.repository": [[432, "module-neural_compressor.ux.components.model.repository"]], "shape (class in neural_compressor.ux.components.model.shape)": [[433, "neural_compressor.ux.components.model.shape.Shape"]], "neural_compressor.ux.components.model.shape": [[433, "module-neural_compressor.ux.components.model.shape"]], "frozenpbmodel (class in neural_compressor.ux.components.model.tensorflow.frozen_pb)": [[434, "neural_compressor.ux.components.model.tensorflow.frozen_pb.FrozenPbModel"]], "neural_compressor.ux.components.model.tensorflow.frozen_pb": [[434, "module-neural_compressor.ux.components.model.tensorflow.frozen_pb"]], "neural_compressor.ux.components.model.tensorflow": [[435, "module-neural_compressor.ux.components.model.tensorflow"]], "kerasmodel (class in neural_compressor.ux.components.model.tensorflow.keras)": [[436, "neural_compressor.ux.components.model.tensorflow.keras.KerasModel"]], "neural_compressor.ux.components.model.tensorflow.keras": [[436, "module-neural_compressor.ux.components.model.tensorflow.keras"]], "metagraphmodel (class in neural_compressor.ux.components.model.tensorflow.meta_graph)": [[437, "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel"]], "neural_compressor.ux.components.model.tensorflow.meta_graph": [[437, "module-neural_compressor.ux.components.model.tensorflow.meta_graph"]], "tensorflowmodel (class in neural_compressor.ux.components.model.tensorflow.model)": [[438, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel"]], "neural_compressor.ux.components.model.tensorflow.model": [[438, "module-neural_compressor.ux.components.model.tensorflow.model"]], "savedmodelmodel (class in neural_compressor.ux.components.model.tensorflow.saved_model)": [[439, "neural_compressor.ux.components.model.tensorflow.saved_model.SavedModelModel"]], "neural_compressor.ux.components.model.tensorflow.saved_model": [[439, "module-neural_compressor.ux.components.model.tensorflow.saved_model"]], "get_input_shape() (in module neural_compressor.ux.components.model.tensorflow.utils)": [[440, "neural_compressor.ux.components.model.tensorflow.utils.get_input_shape"]], "neural_compressor.ux.components.model.tensorflow.utils": [[440, "module-neural_compressor.ux.components.model.tensorflow.utils"]], "download_config() (in module neural_compressor.ux.components.model_zoo.download_config)": [[441, "neural_compressor.ux.components.model_zoo.download_config.download_config"]], "neural_compressor.ux.components.model_zoo.download_config": [[441, "module-neural_compressor.ux.components.model_zoo.download_config"]], "download_model() (in module neural_compressor.ux.components.model_zoo.download_model)": [[442, "neural_compressor.ux.components.model_zoo.download_model.download_model"]], "neural_compressor.ux.components.model_zoo.download_model": [[442, "module-neural_compressor.ux.components.model_zoo.download_model"]], "downloader (class in neural_compressor.ux.components.model_zoo.downloader)": [[443, "neural_compressor.ux.components.model_zoo.downloader.Downloader"]], "neural_compressor.ux.components.model_zoo.downloader": [[443, "module-neural_compressor.ux.components.model_zoo.downloader"]], "neural_compressor.ux.components.model_zoo": [[444, "module-neural_compressor.ux.components.model_zoo"]], "check_version() (in module neural_compressor.ux.components.model_zoo.list_models)": [[445, "neural_compressor.ux.components.model_zoo.list_models.check_version"]], "get_available_models() (in module neural_compressor.ux.components.model_zoo.list_models)": [[445, "neural_compressor.ux.components.model_zoo.list_models.get_available_models"]], "get_framework_module_name() (in module neural_compressor.ux.components.model_zoo.list_models)": [[445, "neural_compressor.ux.components.model_zoo.list_models.get_framework_module_name"]], "get_installed_frameworks() (in module neural_compressor.ux.components.model_zoo.list_models)": [[445, "neural_compressor.ux.components.model_zoo.list_models.get_installed_frameworks"]], "list_models() (in module neural_compressor.ux.components.model_zoo.list_models)": [[445, "neural_compressor.ux.components.model_zoo.list_models.list_models"]], "neural_compressor.ux.components.model_zoo.list_models": [[445, "module-neural_compressor.ux.components.model_zoo.list_models"]], "validate_model_list() (in module neural_compressor.ux.components.model_zoo.list_models)": [[445, "neural_compressor.ux.components.model_zoo.list_models.validate_model_list"]], "neural_compressor.ux.components.names_mapper": [[446, "module-neural_compressor.ux.components.names_mapper"]], "mappingdirection (class in neural_compressor.ux.components.names_mapper.names_mapper)": [[447, "neural_compressor.ux.components.names_mapper.names_mapper.MappingDirection"]], "namesmapper (class in neural_compressor.ux.components.names_mapper.names_mapper)": [[447, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper"]], "neural_compressor.ux.components.names_mapper.names_mapper": [[447, "module-neural_compressor.ux.components.names_mapper.names_mapper"]], "check_if_collect_tuning_history() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[448, "neural_compressor.ux.components.optimization.execute_optimization.check_if_collect_tuning_history"]], "execute_optimization() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[448, "neural_compressor.ux.components.optimization.execute_optimization.execute_optimization"]], "execute_optimization_pytorch_script() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[448, "neural_compressor.ux.components.optimization.execute_optimization.execute_optimization_pytorch_script"]], "execute_optimization_regular() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[448, "neural_compressor.ux.components.optimization.execute_optimization.execute_optimization_regular"]], "neural_compressor.ux.components.optimization.execute_optimization": [[448, "module-neural_compressor.ux.components.optimization.execute_optimization"]], "parse_logs() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[448, "neural_compressor.ux.components.optimization.execute_optimization.parse_logs"]], "parse_model_data_to_bench_names() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[448, "neural_compressor.ux.components.optimization.execute_optimization.parse_model_data_to_bench_names"]], "optimizationfactory (class in neural_compressor.ux.components.optimization.factory)": [[449, "neural_compressor.ux.components.optimization.factory.OptimizationFactory"]], "neural_compressor.ux.components.optimization.factory": [[449, "module-neural_compressor.ux.components.optimization.factory"]], "graphoptimization (class in neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization)": [[450, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization"]], "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization": [[450, "module-neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization"]], "neural_compressor.ux.components.optimization.graph_optimizer": [[451, "module-neural_compressor.ux.components.optimization.graph_optimizer"]], "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model": [[452, "module-neural_compressor.ux.components.optimization.graph_optimizer.optimize_model"]], "optimize_graph() (in module neural_compressor.ux.components.optimization.graph_optimizer.optimize_model)": [[452, "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model.optimize_graph"]], "optimize_graph_config() (in module neural_compressor.ux.components.optimization.graph_optimizer.optimize_model)": [[452, "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model.optimize_graph_config"]], "parse_args() (in module neural_compressor.ux.components.optimization.graph_optimizer.optimize_model)": [[452, "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model.parse_args"]], "set_eager_execution() (in module neural_compressor.ux.components.optimization.graph_optimizer.optimize_model)": [[452, "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model.set_eager_execution"]], "optimizations (class in neural_compressor.ux.components.optimization)": [[453, "neural_compressor.ux.components.optimization.Optimizations"]], "neural_compressor.ux.components.optimization": [[453, "module-neural_compressor.ux.components.optimization"]], "neural_compressor.ux.components.optimization.mixed_precision": [[454, "module-neural_compressor.ux.components.optimization.mixed_precision"]], "mixedprecision (class in neural_compressor.ux.components.optimization.mixed_precision.mixed_precision)": [[455, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision"]], "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision": [[455, "module-neural_compressor.ux.components.optimization.mixed_precision.mixed_precision"]], "neural_compressor.ux.components.optimization.mixed_precision.optimize_model": [[456, "module-neural_compressor.ux.components.optimization.mixed_precision.optimize_model"]], "optimize_graph() (in module neural_compressor.ux.components.optimization.mixed_precision.optimize_model)": [[456, "neural_compressor.ux.components.optimization.mixed_precision.optimize_model.optimize_graph"]], "optimize_graph_config() (in module neural_compressor.ux.components.optimization.mixed_precision.optimize_model)": [[456, "neural_compressor.ux.components.optimization.mixed_precision.optimize_model.optimize_graph_config"]], "parse_args() (in module neural_compressor.ux.components.optimization.mixed_precision.optimize_model)": [[456, "neural_compressor.ux.components.optimization.mixed_precision.optimize_model.parse_args"]], "set_eager_execution() (in module neural_compressor.ux.components.optimization.mixed_precision.optimize_model)": [[456, "neural_compressor.ux.components.optimization.mixed_precision.optimize_model.set_eager_execution"]], "neural_compressor.ux.components.optimization.neural_coder_optimization": [[457, "module-neural_compressor.ux.components.optimization.neural_coder_optimization"]], "neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model": [[458, "module-neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model"]], "optimize_pt_script() (in module neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model)": [[458, "neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model.optimize_pt_script"]], "dataloaderinterface (class in neural_compressor.ux.components.optimization.optimization)": [[459, "neural_compressor.ux.components.optimization.optimization.DataloaderInterface"]], "optimization (class in neural_compressor.ux.components.optimization.optimization)": [[459, "neural_compressor.ux.components.optimization.optimization.Optimization"]], "optimizationinterface (class in neural_compressor.ux.components.optimization.optimization)": [[459, "neural_compressor.ux.components.optimization.optimization.OptimizationInterface"]], "neural_compressor.ux.components.optimization.optimization": [[459, "module-neural_compressor.ux.components.optimization.optimization"]], "neural_compressor.ux.components.optimization.pruning": [[460, "module-neural_compressor.ux.components.optimization.pruning"]], "neural_compressor.ux.components.optimization.pruning.optimize_model": [[461, "module-neural_compressor.ux.components.optimization.pruning.optimize_model"]], "optimize_model() (in module neural_compressor.ux.components.optimization.pruning.optimize_model)": [[461, "neural_compressor.ux.components.optimization.pruning.optimize_model.optimize_model"]], "parse_args() (in module neural_compressor.ux.components.optimization.pruning.optimize_model)": [[461, "neural_compressor.ux.components.optimization.pruning.optimize_model.parse_args"]], "pruning (class in neural_compressor.ux.components.optimization.pruning.pruning)": [[462, "neural_compressor.ux.components.optimization.pruning.pruning.Pruning"]], "neural_compressor.ux.components.optimization.pruning.pruning": [[462, "module-neural_compressor.ux.components.optimization.pruning.pruning"]], "neural_compressor.ux.components.optimization.tune": [[463, "module-neural_compressor.ux.components.optimization.tune"]], "neural_compressor.ux.components.optimization.tune.tune_model": [[464, "module-neural_compressor.ux.components.optimization.tune.tune_model"]], "parse_args() (in module neural_compressor.ux.components.optimization.tune.tune_model)": [[464, "neural_compressor.ux.components.optimization.tune.tune_model.parse_args"]], "set_eager_execution() (in module neural_compressor.ux.components.optimization.tune.tune_model)": [[464, "neural_compressor.ux.components.optimization.tune.tune_model.set_eager_execution"]], "tune_model() (in module neural_compressor.ux.components.optimization.tune.tune_model)": [[464, "neural_compressor.ux.components.optimization.tune.tune_model.tune_model"]], "accuracycriterion (class in neural_compressor.ux.components.optimization.tune.tuning)": [[465, "neural_compressor.ux.components.optimization.tune.tuning.AccuracyCriterion"]], "tuning (class in neural_compressor.ux.components.optimization.tune.tuning)": [[465, "neural_compressor.ux.components.optimization.tune.tuning.Tuning"]], "tuningdetails (class in neural_compressor.ux.components.optimization.tune.tuning)": [[465, "neural_compressor.ux.components.optimization.tune.tuning.TuningDetails"]], "neural_compressor.ux.components.optimization.tune.tuning": [[465, "module-neural_compressor.ux.components.optimization.tune.tuning"]], "tuninghistory (class in neural_compressor.ux.components.optimization.tuning_history)": [[466, "neural_compressor.ux.components.optimization.tuning_history.TuningHistory"]], "watcher (class in neural_compressor.ux.components.optimization.tuning_history)": [[466, "neural_compressor.ux.components.optimization.tuning_history.Watcher"]], "neural_compressor.ux.components.optimization.tuning_history": [[466, "module-neural_compressor.ux.components.optimization.tuning_history"]], "tuning_history() (in module neural_compressor.ux.components.optimization.tuning_history)": [[466, "neural_compressor.ux.components.optimization.tuning_history.tuning_history"]], "tuning_history_path() (in module neural_compressor.ux.components.optimization.tuning_history)": [[466, "neural_compressor.ux.components.optimization.tuning_history.tuning_history_path"]], "execute_profiling() (in module neural_compressor.ux.components.profiling.execute_profiling)": [[467, "neural_compressor.ux.components.profiling.execute_profiling.execute_profiling"]], "execute_real_profiling() (in module neural_compressor.ux.components.profiling.execute_profiling)": [[467, "neural_compressor.ux.components.profiling.execute_profiling.execute_real_profiling"]], "neural_compressor.ux.components.profiling.execute_profiling": [[467, "module-neural_compressor.ux.components.profiling.execute_profiling"]], "profilerfactory (class in neural_compressor.ux.components.profiling.factory)": [[468, "neural_compressor.ux.components.profiling.factory.ProfilerFactory"]], "neural_compressor.ux.components.profiling.factory": [[468, "module-neural_compressor.ux.components.profiling.factory"]], "neural_compressor.ux.components.profiling": [[469, "module-neural_compressor.ux.components.profiling"]], "load_profiling_details() (in module neural_compressor.ux.components.profiling.profile_model)": [[470, "neural_compressor.ux.components.profiling.profile_model.load_profiling_details"]], "neural_compressor.ux.components.profiling.profile_model": [[470, "module-neural_compressor.ux.components.profiling.profile_model"]], "parse_args() (in module neural_compressor.ux.components.profiling.profile_model)": [[470, "neural_compressor.ux.components.profiling.profile_model.parse_args"]], "profiler (class in neural_compressor.ux.components.profiling.profiler)": [[471, "neural_compressor.ux.components.profiling.profiler.Profiler"]], "neural_compressor.ux.components.profiling.profiler": [[471, "module-neural_compressor.ux.components.profiling.profiler"]], "dataloaderinterface (class in neural_compressor.ux.components.profiling.profiling)": [[472, "neural_compressor.ux.components.profiling.profiling.DataloaderInterface"]], "profiling (class in neural_compressor.ux.components.profiling.profiling)": [[472, "neural_compressor.ux.components.profiling.profiling.Profiling"]], "neural_compressor.ux.components.profiling.profiling": [[472, "module-neural_compressor.ux.components.profiling.profiling"]], "profilerfactory (class in neural_compressor.ux.components.profiling.tensorflow_profiler.factory)": [[473, "neural_compressor.ux.components.profiling.tensorflow_profiler.factory.ProfilerFactory"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.factory": [[473, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.factory"]], "neural_compressor.ux.components.profiling.tensorflow_profiler": [[474, "module-neural_compressor.ux.components.profiling.tensorflow_profiler"]], "profiler (class in neural_compressor.ux.components.profiling.tensorflow_profiler.profiler)": [[475, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler": [[475, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.profiler"]], "delete_assign() (in module neural_compressor.ux.components.profiling.tensorflow_profiler.utils)": [[476, "neural_compressor.ux.components.profiling.tensorflow_profiler.utils.delete_assign"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.utils": [[476, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.utils"]], "main() (in module neural_compressor.ux.inc_bench)": [[477, "neural_compressor.ux.inc_bench.main"]], "neural_compressor.ux.inc_bench": [[477, "module-neural_compressor.ux.inc_bench"]], "prepare_environment() (in module neural_compressor.ux.inc_bench)": [[477, "neural_compressor.ux.inc_bench.prepare_environment"]], "neural_compressor.ux": [[478, "module-neural_compressor.ux"]], "domainflavours (class in neural_compressor.ux.utils.consts)": [[479, "neural_compressor.ux.utils.consts.DomainFlavours"]], "domains (class in neural_compressor.ux.utils.consts)": [[479, "neural_compressor.ux.utils.consts.Domains"]], "executionstatus (class in neural_compressor.ux.utils.consts)": [[479, "neural_compressor.ux.utils.consts.ExecutionStatus"]], "frameworks (class in neural_compressor.ux.utils.consts)": [[479, "neural_compressor.ux.utils.consts.Frameworks"]], "optimizationtypes (class in neural_compressor.ux.utils.consts)": [[479, "neural_compressor.ux.utils.consts.OptimizationTypes"]], "precisions (class in neural_compressor.ux.utils.consts)": [[479, "neural_compressor.ux.utils.consts.Precisions"]], "strategies (class in neural_compressor.ux.utils.consts)": [[479, "neural_compressor.ux.utils.consts.Strategies"]], "neural_compressor.ux.utils.consts": [[479, "module-neural_compressor.ux.utils.consts"]], "environment (class in neural_compressor.ux.utils.environment)": [[480, "neural_compressor.ux.utils.environment.Environment"]], "neural_compressor.ux.utils.environment": [[480, "module-neural_compressor.ux.utils.environment"]], "accessdeniedexception": [[481, "neural_compressor.ux.utils.exceptions.AccessDeniedException"]], "clienterrorexception": [[481, "neural_compressor.ux.utils.exceptions.ClientErrorException"]], "internalexception": [[481, "neural_compressor.ux.utils.exceptions.InternalException"]], "notfoundexception": [[481, "neural_compressor.ux.utils.exceptions.NotFoundException"]], "neural_compressor.ux.utils.exceptions": [[481, "module-neural_compressor.ux.utils.exceptions"]], "executor (class in neural_compressor.ux.utils.executor)": [[482, "neural_compressor.ux.utils.executor.Executor"]], "neural_compressor.ux.utils.executor": [[482, "module-neural_compressor.ux.utils.executor"]], "expiringdict (class in neural_compressor.ux.utils.expiring_dict)": [[483, "neural_compressor.ux.utils.expiring_dict.ExpiringDict"]], "expiringdictitem (class in neural_compressor.ux.utils.expiring_dict)": [[483, "neural_compressor.ux.utils.expiring_dict.ExpiringDictItem"]], "neural_compressor.ux.utils.expiring_dict": [[483, "module-neural_compressor.ux.utils.expiring_dict"]], "githubinfo (class in neural_compressor.ux.utils.github_info)": [[484, "neural_compressor.ux.utils.github_info.GithubInfo"]], "neural_compressor.ux.utils.github_info": [[484, "module-neural_compressor.ux.utils.github_info"]], "hwinfo (class in neural_compressor.ux.utils.hw_info)": [[485, "neural_compressor.ux.utils.hw_info.HWInfo"]], "get_bios_version() (in module neural_compressor.ux.utils.hw_info)": [[485, "neural_compressor.ux.utils.hw_info.get_bios_version"]], "get_distribution() (in module neural_compressor.ux.utils.hw_info)": [[485, "neural_compressor.ux.utils.hw_info.get_distribution"]], "get_framework_dependency_info() (in module neural_compressor.ux.utils.hw_info)": [[485, "neural_compressor.ux.utils.hw_info.get_framework_dependency_info"]], "get_framework_info() (in module neural_compressor.ux.utils.hw_info)": [[485, "neural_compressor.ux.utils.hw_info.get_framework_info"]], "get_kernel_version() (in module neural_compressor.ux.utils.hw_info)": [[485, "neural_compressor.ux.utils.hw_info.get_kernel_version"]], "get_number_of_sockets() (in module neural_compressor.ux.utils.hw_info)": [[485, "neural_compressor.ux.utils.hw_info.get_number_of_sockets"]], "is_turbo_boost_enabled() (in module neural_compressor.ux.utils.hw_info)": [[485, "neural_compressor.ux.utils.hw_info.is_turbo_boost_enabled"]], "neural_compressor.ux.utils.hw_info": [[485, "module-neural_compressor.ux.utils.hw_info"]], "neural_compressor.ux.utils": [[486, "module-neural_compressor.ux.utils"]], "jsonserializer (class in neural_compressor.ux.utils.json_serializer)": [[487, "neural_compressor.ux.utils.json_serializer.JsonSerializer"]], "neural_compressor.ux.utils.json_serializer": [[487, "module-neural_compressor.ux.utils.json_serializer"]], "change_log_level() (in module neural_compressor.ux.utils.logger)": [[488, "neural_compressor.ux.utils.logger.change_log_level"]], "neural_compressor.ux.utils.logger": [[488, "module-neural_compressor.ux.utils.logger"]], "accuracyparser (class in neural_compressor.ux.utils.parser)": [[489, "neural_compressor.ux.utils.parser.AccuracyParser"]], "benchmarkparserfactory (class in neural_compressor.ux.utils.parser)": [[489, "neural_compressor.ux.utils.parser.BenchmarkParserFactory"]], "optimizationparser (class in neural_compressor.ux.utils.parser)": [[489, "neural_compressor.ux.utils.parser.OptimizationParser"]], "parser (class in neural_compressor.ux.utils.parser)": [[489, "neural_compressor.ux.utils.parser.Parser"]], "performanceparser (class in neural_compressor.ux.utils.parser)": [[489, "neural_compressor.ux.utils.parser.PerformanceParser"]], "profilingparser (class in neural_compressor.ux.utils.parser)": [[489, "neural_compressor.ux.utils.parser.ProfilingParser"]], "neural_compressor.ux.utils.parser": [[489, "module-neural_compressor.ux.utils.parser"]], "proc (class in neural_compressor.ux.utils.proc)": [[490, "neural_compressor.ux.utils.proc.Proc"]], "neural_compressor.ux.utils.proc": [[490, "module-neural_compressor.ux.utils.proc"]], "ncprocesses (class in neural_compressor.ux.utils.processes)": [[491, "neural_compressor.ux.utils.processes.NCProcesses"]], "neural_compressor.ux.utils.processes": [[491, "module-neural_compressor.ux.utils.processes"]], "singleton (class in neural_compressor.ux.utils.singleton)": [[492, "neural_compressor.ux.utils.singleton.Singleton"]], "neural_compressor.ux.utils.singleton": [[492, "module-neural_compressor.ux.utils.singleton"]], "get_status_update_function() (in module neural_compressor.ux.utils.status_updates)": [[493, "neural_compressor.ux.utils.status_updates.get_status_update_function"]], "neural_compressor.ux.utils.status_updates": [[493, "module-neural_compressor.ux.utils.status_updates"]], "neural_compressor.ux.utils.templates": [[494, "module-neural_compressor.ux.utils.templates"]], "metric (class in neural_compressor.ux.utils.templates.metric)": [[495, "neural_compressor.ux.utils.templates.metric.Metric"]], "neural_compressor.ux.utils.templates.metric": [[495, "module-neural_compressor.ux.utils.templates.metric"]], "workdir (class in neural_compressor.ux.utils.templates.workdir)": [[496, "neural_compressor.ux.utils.templates.workdir.Workdir"]], "neural_compressor.ux.utils.templates.workdir": [[496, "module-neural_compressor.ux.utils.templates.workdir"]], "are_archive_filenames_valid() (in module neural_compressor.ux.utils.utils)": [[497, "neural_compressor.ux.utils.utils.are_archive_filenames_valid"]], "check_module() (in module neural_compressor.ux.utils.utils)": [[497, "neural_compressor.ux.utils.utils.check_module"]], "deprecated() (in module neural_compressor.ux.utils.utils)": [[497, "neural_compressor.ux.utils.utils.deprecated"]], "determine_ip() (in module neural_compressor.ux.utils.utils)": [[497, "neural_compressor.ux.utils.utils.determine_ip"]], "export_to_csv() (in module neural_compressor.ux.utils.utils)": [[497, "neural_compressor.ux.utils.utils.export_to_csv"]], "filter_transforms() (in module neural_compressor.ux.utils.utils)": [[497, "neural_compressor.ux.utils.utils.filter_transforms"]], "get_dataset_path() (in module neural_compressor.ux.utils.utils)": [[497, "neural_compressor.ux.utils.utils.get_dataset_path"]], "get_default_pruning_config_path() (in module neural_compressor.ux.utils.utils)": [[497, "neural_compressor.ux.utils.utils.get_default_pruning_config_path"]], "get_file_extension() (in module neural_compressor.ux.utils.utils)": [[497, "neural_compressor.ux.utils.utils.get_file_extension"]], "get_framework_from_path() (in module neural_compressor.ux.utils.utils)": [[497, "neural_compressor.ux.utils.utils.get_framework_from_path"]], "get_height_width_from_size() (in module neural_compressor.ux.utils.utils)": [[497, "neural_compressor.ux.utils.utils.get_height_width_from_size"]], "get_metrics_dict() (in module neural_compressor.ux.utils.utils)": [[497, "neural_compressor.ux.utils.utils.get_metrics_dict"]], "get_model_zoo_config_path() (in module neural_compressor.ux.utils.utils)": [[497, "neural_compressor.ux.utils.utils.get_model_zoo_config_path"]], "get_model_zoo_model_path() (in module neural_compressor.ux.utils.utils)": [[497, "neural_compressor.ux.utils.utils.get_model_zoo_model_path"]], "get_module_version() (in module neural_compressor.ux.utils.utils)": [[497, "neural_compressor.ux.utils.utils.get_module_version"]], "get_predefined_config_path() (in module neural_compressor.ux.utils.utils)": [[497, "neural_compressor.ux.utils.utils.get_predefined_config_path"]], "get_shape_from_transforms() (in module neural_compressor.ux.utils.utils)": [[497, "neural_compressor.ux.utils.utils.get_shape_from_transforms"]], "get_size() (in module neural_compressor.ux.utils.utils)": [[497, "neural_compressor.ux.utils.utils.get_size"]], "is_dataset_file() (in module neural_compressor.ux.utils.utils)": [[497, "neural_compressor.ux.utils.utils.is_dataset_file"]], "is_development_env() (in module neural_compressor.ux.utils.utils)": [[497, "neural_compressor.ux.utils.utils.is_development_env"]], "is_hidden() (in module neural_compressor.ux.utils.utils)": [[497, "neural_compressor.ux.utils.utils.is_hidden"]], "load_dataloader_config() (in module neural_compressor.ux.utils.utils)": [[497, "neural_compressor.ux.utils.utils.load_dataloader_config"]], "load_help_nc_params() (in module neural_compressor.ux.utils.utils)": [[497, "neural_compressor.ux.utils.utils.load_help_nc_params"]], "load_metrics_config() (in module neural_compressor.ux.utils.utils)": [[497, "neural_compressor.ux.utils.utils.load_metrics_config"]], "load_model_config() (in module neural_compressor.ux.utils.utils)": [[497, "neural_compressor.ux.utils.utils.load_model_config"]], "load_model_wise_params() (in module neural_compressor.ux.utils.utils)": [[497, "neural_compressor.ux.utils.utils.load_model_wise_params"]], "load_precisions_config() (in module neural_compressor.ux.utils.utils)": [[497, "neural_compressor.ux.utils.utils.load_precisions_config"]], "load_pruning_details_config() (in module neural_compressor.ux.utils.utils)": [[497, "neural_compressor.ux.utils.utils.load_pruning_details_config"]], "load_transforms_config() (in module neural_compressor.ux.utils.utils)": [[497, "neural_compressor.ux.utils.utils.load_transforms_config"]], "load_transforms_filter_config() (in module neural_compressor.ux.utils.utils)": [[497, "neural_compressor.ux.utils.utils.load_transforms_filter_config"]], "neural_compressor.ux.utils.utils": [[497, "module-neural_compressor.ux.utils.utils"]], "normalize_domain() (in module neural_compressor.ux.utils.utils)": [[497, "neural_compressor.ux.utils.utils.normalize_domain"]], "normalize_framework() (in module neural_compressor.ux.utils.utils)": [[497, "neural_compressor.ux.utils.utils.normalize_framework"]], "normalize_string() (in module neural_compressor.ux.utils.utils)": [[497, "neural_compressor.ux.utils.utils.normalize_string"]], "parse_bool_value() (in module neural_compressor.ux.utils.utils)": [[497, "neural_compressor.ux.utils.utils.parse_bool_value"]], "parse_to_float_list() (in module neural_compressor.ux.utils.utils)": [[497, "neural_compressor.ux.utils.utils.parse_to_float_list"]], "parse_to_string_list() (in module neural_compressor.ux.utils.utils)": [[497, "neural_compressor.ux.utils.utils.parse_to_string_list"]], "parse_version() (in module neural_compressor.ux.utils.utils)": [[497, "neural_compressor.ux.utils.utils.parse_version"]], "release_tag() (in module neural_compressor.ux.utils.utils)": [[497, "neural_compressor.ux.utils.utils.release_tag"]], "replace_with_values() (in module neural_compressor.ux.utils.utils)": [[497, "neural_compressor.ux.utils.utils.replace_with_values"]], "safe_extract_archive() (in module neural_compressor.ux.utils.utils)": [[497, "neural_compressor.ux.utils.utils.safe_extract_archive"]], "verify_file_path() (in module neural_compressor.ux.utils.utils)": [[497, "neural_compressor.ux.utils.utils.verify_file_path"]], "config (class in neural_compressor.ux.utils.workload.config)": [[498, "neural_compressor.ux.utils.workload.config.Config"]], "neural_compressor.ux.utils.workload.config": [[498, "module-neural_compressor.ux.utils.workload.config"]], "dataloader (class in neural_compressor.ux.utils.workload.dataloader)": [[499, "neural_compressor.ux.utils.workload.dataloader.Dataloader"]], "dataset (class in neural_compressor.ux.utils.workload.dataloader)": [[499, "neural_compressor.ux.utils.workload.dataloader.Dataset"]], "filter (class in neural_compressor.ux.utils.workload.dataloader)": [[499, "neural_compressor.ux.utils.workload.dataloader.Filter"]], "labelbalance (class in neural_compressor.ux.utils.workload.dataloader)": [[499, "neural_compressor.ux.utils.workload.dataloader.LabelBalance"]], "transform (class in neural_compressor.ux.utils.workload.dataloader)": [[499, "neural_compressor.ux.utils.workload.dataloader.Transform"]], "neural_compressor.ux.utils.workload.dataloader": [[499, "module-neural_compressor.ux.utils.workload.dataloader"]], "accuracy (class in neural_compressor.ux.utils.workload.evaluation)": [[500, "neural_compressor.ux.utils.workload.evaluation.Accuracy"]], "configs (class in neural_compressor.ux.utils.workload.evaluation)": [[500, "neural_compressor.ux.utils.workload.evaluation.Configs"]], "evaluation (class in neural_compressor.ux.utils.workload.evaluation)": [[500, "neural_compressor.ux.utils.workload.evaluation.Evaluation"]], "metric (class in neural_compressor.ux.utils.workload.evaluation)": [[500, "neural_compressor.ux.utils.workload.evaluation.Metric"]], "performance (class in neural_compressor.ux.utils.workload.evaluation)": [[500, "neural_compressor.ux.utils.workload.evaluation.Performance"]], "postprocess (class in neural_compressor.ux.utils.workload.evaluation)": [[500, "neural_compressor.ux.utils.workload.evaluation.Postprocess"]], "postprocessschema (class in neural_compressor.ux.utils.workload.evaluation)": [[500, "neural_compressor.ux.utils.workload.evaluation.PostprocessSchema"]], "neural_compressor.ux.utils.workload.evaluation": [[500, "module-neural_compressor.ux.utils.workload.evaluation"]], "graphoptimization (class in neural_compressor.ux.utils.workload.graph_optimization)": [[501, "neural_compressor.ux.utils.workload.graph_optimization.GraphOptimization"]], "neural_compressor.ux.utils.workload.graph_optimization": [[501, "module-neural_compressor.ux.utils.workload.graph_optimization"]], "neural_compressor.ux.utils.workload": [[502, "module-neural_compressor.ux.utils.workload"]], "mixedprecision (class in neural_compressor.ux.utils.workload.mixed_precision)": [[503, "neural_compressor.ux.utils.workload.mixed_precision.MixedPrecision"]], "neural_compressor.ux.utils.workload.mixed_precision": [[503, "module-neural_compressor.ux.utils.workload.mixed_precision"]], "model (class in neural_compressor.ux.utils.workload.model)": [[504, "neural_compressor.ux.utils.workload.model.Model"]], "neural_compressor.ux.utils.workload.model": [[504, "module-neural_compressor.ux.utils.workload.model"]], "adamoptimizer (class in neural_compressor.ux.utils.workload.pruning)": [[505, "neural_compressor.ux.utils.workload.pruning.AdamOptimizer"]], "adamwoptimizer (class in neural_compressor.ux.utils.workload.pruning)": [[505, "neural_compressor.ux.utils.workload.pruning.AdamWOptimizer"]], "approach (class in neural_compressor.ux.utils.workload.pruning)": [[505, "neural_compressor.ux.utils.workload.pruning.Approach"]], "criterion (class in neural_compressor.ux.utils.workload.pruning)": [[505, "neural_compressor.ux.utils.workload.pruning.Criterion"]], "crossentropylosscriterion (class in neural_compressor.ux.utils.workload.pruning)": [[505, "neural_compressor.ux.utils.workload.pruning.CrossEntropyLossCriterion"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.ux.utils.workload.pruning)": [[505, "neural_compressor.ux.utils.workload.pruning.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationlosscriterion (class in neural_compressor.ux.utils.workload.pruning)": [[505, "neural_compressor.ux.utils.workload.pruning.KnowledgeDistillationLossCriterion"]], "optimizer (class in neural_compressor.ux.utils.workload.pruning)": [[505, "neural_compressor.ux.utils.workload.pruning.Optimizer"]], "pruning (class in neural_compressor.ux.utils.workload.pruning)": [[505, "neural_compressor.ux.utils.workload.pruning.Pruning"]], "sgdoptimizer (class in neural_compressor.ux.utils.workload.pruning)": [[505, "neural_compressor.ux.utils.workload.pruning.SGDOptimizer"]], "selfknowledgedistillationloss (class in neural_compressor.ux.utils.workload.pruning)": [[505, "neural_compressor.ux.utils.workload.pruning.SelfKnowledgeDistillationLoss"]], "sparsecategoricalcrossentropycriterion (class in neural_compressor.ux.utils.workload.pruning)": [[505, "neural_compressor.ux.utils.workload.pruning.SparseCategoricalCrossentropyCriterion"]], "train (class in neural_compressor.ux.utils.workload.pruning)": [[505, "neural_compressor.ux.utils.workload.pruning.Train"]], "weightcompressionapproach (class in neural_compressor.ux.utils.workload.pruning)": [[505, "neural_compressor.ux.utils.workload.pruning.WeightCompressionApproach"]], "neural_compressor.ux.utils.workload.pruning": [[505, "module-neural_compressor.ux.utils.workload.pruning"]], "parse_dict_value_to_float() (in module neural_compressor.ux.utils.workload.pruning)": [[505, "neural_compressor.ux.utils.workload.pruning.parse_dict_value_to_float"]], "parse_dict_value_to_int() (in module neural_compressor.ux.utils.workload.pruning)": [[505, "neural_compressor.ux.utils.workload.pruning.parse_dict_value_to_int"]], "advance (class in neural_compressor.ux.utils.workload.quantization)": [[506, "neural_compressor.ux.utils.workload.quantization.Advance"]], "calibration (class in neural_compressor.ux.utils.workload.quantization)": [[506, "neural_compressor.ux.utils.workload.quantization.Calibration"]], "quantization (class in neural_compressor.ux.utils.workload.quantization)": [[506, "neural_compressor.ux.utils.workload.quantization.Quantization"]], "wiseconfig (class in neural_compressor.ux.utils.workload.quantization)": [[506, "neural_compressor.ux.utils.workload.quantization.WiseConfig"]], "wiseconfigdetails (class in neural_compressor.ux.utils.workload.quantization)": [[506, "neural_compressor.ux.utils.workload.quantization.WiseConfigDetails"]], "neural_compressor.ux.utils.workload.quantization": [[506, "module-neural_compressor.ux.utils.workload.quantization"]], "acccriterion (class in neural_compressor.ux.utils.workload.tuning)": [[507, "neural_compressor.ux.utils.workload.tuning.AccCriterion"]], "diagnosis (class in neural_compressor.ux.utils.workload.tuning)": [[507, "neural_compressor.ux.utils.workload.tuning.Diagnosis"]], "exitpolicy (class in neural_compressor.ux.utils.workload.tuning)": [[507, "neural_compressor.ux.utils.workload.tuning.ExitPolicy"]], "multiobjectives (class in neural_compressor.ux.utils.workload.tuning)": [[507, "neural_compressor.ux.utils.workload.tuning.MultiObjectives"]], "strategy (class in neural_compressor.ux.utils.workload.tuning)": [[507, "neural_compressor.ux.utils.workload.tuning.Strategy"]], "tuning (class in neural_compressor.ux.utils.workload.tuning)": [[507, "neural_compressor.ux.utils.workload.tuning.Tuning"]], "workspace (class in neural_compressor.ux.utils.workload.tuning)": [[507, "neural_compressor.ux.utils.workload.tuning.Workspace"]], "neural_compressor.ux.utils.workload.tuning": [[507, "module-neural_compressor.ux.utils.workload.tuning"]], "float_representer() (in module neural_compressor.ux.utils.yaml_utils)": [[508, "neural_compressor.ux.utils.yaml_utils.float_representer"]], "neural_compressor.ux.utils.yaml_utils": [[508, "module-neural_compressor.ux.utils.yaml_utils"]], "pruner_representer() (in module neural_compressor.ux.utils.yaml_utils)": [[508, "neural_compressor.ux.utils.yaml_utils.pruner_representer"]], "message (class in neural_compressor.ux.web.communication)": [[509, "neural_compressor.ux.web.communication.Message"]], "messagequeue (class in neural_compressor.ux.web.communication)": [[509, "neural_compressor.ux.web.communication.MessageQueue"]], "request (class in neural_compressor.ux.web.communication)": [[509, "neural_compressor.ux.web.communication.Request"]], "response (class in neural_compressor.ux.web.communication)": [[509, "neural_compressor.ux.web.communication.Response"]], "create_simple_response() (in module neural_compressor.ux.web.communication)": [[509, "neural_compressor.ux.web.communication.create_simple_response"]], "neural_compressor.ux.web.communication": [[509, "module-neural_compressor.ux.web.communication"]], "configuration (class in neural_compressor.ux.web.configuration)": [[510, "neural_compressor.ux.web.configuration.Configuration"]], "neural_compressor.ux.web.configuration": [[510, "module-neural_compressor.ux.web.configuration"]], "servicenotfoundexception": [[511, "neural_compressor.ux.web.exceptions.ServiceNotFoundException"]], "neural_compressor.ux.web.exceptions": [[511, "module-neural_compressor.ux.web.exceptions"]], "neural_compressor.ux.web": [[512, "module-neural_compressor.ux.web"]], "deferredroutingdefinition (class in neural_compressor.ux.web.router)": [[513, "neural_compressor.ux.web.router.DeferredRoutingDefinition"]], "deferredsubprocessroutingdefinition (class in neural_compressor.ux.web.router)": [[513, "neural_compressor.ux.web.router.DeferredSubprocessRoutingDefinition"]], "realtimeroutingdefinition (class in neural_compressor.ux.web.router)": [[513, "neural_compressor.ux.web.router.RealtimeRoutingDefinition"]], "router (class in neural_compressor.ux.web.router)": [[513, "neural_compressor.ux.web.router.Router"]], "routingdefinition (class in neural_compressor.ux.web.router)": [[513, "neural_compressor.ux.web.router.RoutingDefinition"]], "find_pattern_in_graph() (in module neural_compressor.ux.web.router)": [[513, "neural_compressor.ux.web.router.find_pattern_in_graph"]], "get_model_graph() (in module neural_compressor.ux.web.router)": [[513, "neural_compressor.ux.web.router.get_model_graph"]], "get_system_info() (in module neural_compressor.ux.web.router)": [[513, "neural_compressor.ux.web.router.get_system_info"]], "neural_compressor.ux.web.router": [[513, "module-neural_compressor.ux.web.router"]], "allow_api_call() (in module neural_compressor.ux.web.server)": [[514, "neural_compressor.ux.web.server.allow_api_call"]], "block_iframe() (in module neural_compressor.ux.web.server)": [[514, "neural_compressor.ux.web.server.block_iframe"]], "block_sniffing() (in module neural_compressor.ux.web.server)": [[514, "neural_compressor.ux.web.server.block_sniffing"]], "build_parameters() (in module neural_compressor.ux.web.server)": [[514, "neural_compressor.ux.web.server.build_parameters"]], "disable_cache() (in module neural_compressor.ux.web.server)": [[514, "neural_compressor.ux.web.server.disable_cache"]], "get_tls_args() (in module neural_compressor.ux.web.server)": [[514, "neural_compressor.ux.web.server.get_tls_args"]], "handle_api_call() (in module neural_compressor.ux.web.server)": [[514, "neural_compressor.ux.web.server.handle_api_call"]], "neural_compressor.ux.web.server": [[514, "module-neural_compressor.ux.web.server"]], "page_not_found() (in module neural_compressor.ux.web.server)": [[514, "neural_compressor.ux.web.server.page_not_found"]], "require_api_token() (in module neural_compressor.ux.web.server)": [[514, "neural_compressor.ux.web.server.require_api_token"]], "root() (in module neural_compressor.ux.web.server)": [[514, "neural_compressor.ux.web.server.root"]], "run_server() (in module neural_compressor.ux.web.server)": [[514, "neural_compressor.ux.web.server.run_server"]], "web_socket_publisher() (in module neural_compressor.ux.web.server)": [[514, "neural_compressor.ux.web.server.web_socket_publisher"]], "benchmarkservice (class in neural_compressor.ux.web.service.benchmark)": [[515, "neural_compressor.ux.web.service.benchmark.BenchmarkService"]], "neural_compressor.ux.web.service.benchmark": [[515, "module-neural_compressor.ux.web.service.benchmark"]], "historysnapshotparser (class in neural_compressor.ux.web.service.history_snapshot_parser)": [[516, "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser"]], "neural_compressor.ux.web.service.history_snapshot_parser": [[516, "module-neural_compressor.ux.web.service.history_snapshot_parser"]], "neural_compressor.ux.web.service": [[517, "module-neural_compressor.ux.web.service"]], "modelservice (class in neural_compressor.ux.web.service.model)": [[518, "neural_compressor.ux.web.service.model.ModelService"]], "neural_compressor.ux.web.service.model": [[518, "module-neural_compressor.ux.web.service.model"]], "optimizationservice (class in neural_compressor.ux.web.service.optimization)": [[519, "neural_compressor.ux.web.service.optimization.OptimizationService"]], "neural_compressor.ux.web.service.optimization": [[519, "module-neural_compressor.ux.web.service.optimization"]], "profilingservice (class in neural_compressor.ux.web.service.profiling)": [[520, "neural_compressor.ux.web.service.profiling.ProfilingService"]], "neural_compressor.ux.web.service.profiling": [[520, "module-neural_compressor.ux.web.service.profiling"]], "requestdataprocessor (class in neural_compressor.ux.web.service.request_data_processor)": [[521, "neural_compressor.ux.web.service.request_data_processor.RequestDataProcessor"]], "neural_compressor.ux.web.service.request_data_processor": [[521, "module-neural_compressor.ux.web.service.request_data_processor"]], "responsegenerator (class in neural_compressor.ux.web.service.response_generator)": [[522, "neural_compressor.ux.web.service.response_generator.ResponseGenerator"]], "neural_compressor.ux.web.service.response_generator": [[522, "module-neural_compressor.ux.web.service.response_generator"]], "workloadservice (class in neural_compressor.ux.web.service.workload)": [[523, "neural_compressor.ux.web.service.workload.WorkloadService"]], "neural_compressor.ux.web.service.workload": [[523, "module-neural_compressor.ux.web.service.workload"]], "neural_compressor.version": [[524, "module-neural_compressor.version"]]}})