Search.setIndex({"docnames": ["autoapi/block_mask/index", "autoapi/neural_compressor/adaptor/adaptor/index", "autoapi/neural_compressor/adaptor/index", "autoapi/neural_compressor/adaptor/keras/index", "autoapi/neural_compressor/adaptor/keras_utils/conv2d/index", "autoapi/neural_compressor/adaptor/keras_utils/dense/index", "autoapi/neural_compressor/adaptor/keras_utils/depthwise_conv2d/index", "autoapi/neural_compressor/adaptor/keras_utils/index", "autoapi/neural_compressor/adaptor/keras_utils/pool2d/index", "autoapi/neural_compressor/adaptor/keras_utils/quantizer/index", "autoapi/neural_compressor/adaptor/keras_utils/separable_conv2d/index", "autoapi/neural_compressor/adaptor/mxnet/index", "autoapi/neural_compressor/adaptor/mxnet_utils/index", "autoapi/neural_compressor/adaptor/mxnet_utils/util/index", "autoapi/neural_compressor/adaptor/onnxrt/index", "autoapi/neural_compressor/adaptor/ox_utils/calibration/index", "autoapi/neural_compressor/adaptor/ox_utils/calibrator/index", "autoapi/neural_compressor/adaptor/ox_utils/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/activation/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/argmax/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/attention/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/binary_op/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/concat/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/conv/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/direct_q8/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/embed_layernorm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gather/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gavgpool/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gemm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/lstm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/matmul/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/maxpool/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/ops/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/pad/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/pooling/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/resize/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/split/index", "autoapi/neural_compressor/adaptor/ox_utils/quantizer/index", "autoapi/neural_compressor/adaptor/ox_utils/util/index", "autoapi/neural_compressor/adaptor/pytorch/index", "autoapi/neural_compressor/adaptor/query/index", "autoapi/neural_compressor/adaptor/tensorflow/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter_without_calib/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/bf16_convert/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_add_to_biasadd/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_layout/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_leakyrelu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_nan_to_random/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_placeholder_to_const/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dequantize_cast_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dilated_contraction/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dummy_biasadd/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/expanddims_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fetch_weight_from_reshape/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_batch_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_constant/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_biasadd_add/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_column_wise_mul/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_conv_with_math/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_in/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_gelu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_layer_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_reshape_transpose/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/graph_cse_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/grappler_pass/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/insert_print_node/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/move_squeeze_after_relu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/pre_optimize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/remove_training_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/rename_batch_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/split_shared_input/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_equivalent_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_unused_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/switch_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/graph_base/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_fake_quant/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value_without_calib/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_requantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_requantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/meta_op_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_hostconst_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_quantized_op_cse/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/rnn_convert/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/scale_propagation/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_node/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_schema/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/tf2onnx_utils/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/insert_qdq_pattern/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/merge_duplicated_qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/share_qdq_y_pattern/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_util/index", "autoapi/neural_compressor/adaptor/tf_utils/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/fake_quantize/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_config/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_helper/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/optimize_layer/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_wrapper/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_concatv2/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_deconv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_in/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_matmul/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_pooling/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/optimize_qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_base/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_concatv2/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_for_intel_cpu/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_matmul/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_pooling/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph_common/index", "autoapi/neural_compressor/adaptor/tf_utils/tf2onnx_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/bias_correction/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/graph_transform_base/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/insert_logging/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/rerange_quantized_concat/index", "autoapi/neural_compressor/adaptor/tf_utils/util/index", "autoapi/neural_compressor/adaptor/torch_utils/bf16_convert/index", "autoapi/neural_compressor/adaptor/torch_utils/hawq_metric/index", "autoapi/neural_compressor/adaptor/torch_utils/index", "autoapi/neural_compressor/adaptor/torch_utils/model_wrapper/index", "autoapi/neural_compressor/adaptor/torch_utils/pattern_detector/index", "autoapi/neural_compressor/adaptor/torch_utils/smooth_quant/index", "autoapi/neural_compressor/adaptor/torch_utils/symbolic_trace/index", "autoapi/neural_compressor/adaptor/torch_utils/util/index", "autoapi/neural_compressor/algorithm/algorithm/index", "autoapi/neural_compressor/algorithm/fast_bias_correction/index", "autoapi/neural_compressor/algorithm/index", "autoapi/neural_compressor/algorithm/smooth_quant/index", "autoapi/neural_compressor/algorithm/weight_correction/index", "autoapi/neural_compressor/benchmark/index", "autoapi/neural_compressor/compression/callbacks/index", "autoapi/neural_compressor/compression/distillation/criterions/index", "autoapi/neural_compressor/compression/distillation/index", "autoapi/neural_compressor/compression/index", "autoapi/neural_compressor/compression/pruner/criteria/index", "autoapi/neural_compressor/compression/pruner/index", "autoapi/neural_compressor/compression/pruner/model_slim/auto_slim/index", "autoapi/neural_compressor/compression/pruner/model_slim/index", "autoapi/neural_compressor/compression/pruner/model_slim/pattern_analyzer/index", "autoapi/neural_compressor/compression/pruner/model_slim/weight_slim/index", "autoapi/neural_compressor/compression/pruner/patterns/index", "autoapi/neural_compressor/compression/pruner/pruners/index", "autoapi/neural_compressor/compression/pruner/regs/index", "autoapi/neural_compressor/compression/pruner/schedulers/index", "autoapi/neural_compressor/compression/pruner/utils/index", "autoapi/neural_compressor/conf/config/index", "autoapi/neural_compressor/conf/dotdict/index", "autoapi/neural_compressor/conf/index", "autoapi/neural_compressor/conf/pythonic_config/index", "autoapi/neural_compressor/config/index", "autoapi/neural_compressor/contrib/index", "autoapi/neural_compressor/contrib/strategy/index", "autoapi/neural_compressor/contrib/strategy/sigopt/index", "autoapi/neural_compressor/contrib/strategy/tpe/index", "autoapi/neural_compressor/data/dataloaders/base_dataloader/index", "autoapi/neural_compressor/data/dataloaders/dataloader/index", "autoapi/neural_compressor/data/dataloaders/default_dataloader/index", "autoapi/neural_compressor/data/dataloaders/fetcher/index", "autoapi/neural_compressor/data/dataloaders/index", "autoapi/neural_compressor/data/dataloaders/mxnet_dataloader/index", "autoapi/neural_compressor/data/dataloaders/onnxrt_dataloader/index", "autoapi/neural_compressor/data/dataloaders/pytorch_dataloader/index", "autoapi/neural_compressor/data/dataloaders/sampler/index", "autoapi/neural_compressor/data/dataloaders/tensorflow_dataloader/index", "autoapi/neural_compressor/data/datasets/bert_dataset/index", "autoapi/neural_compressor/data/datasets/coco_dataset/index", "autoapi/neural_compressor/data/datasets/dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/data/datasets/index", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/data/filters/coco_filter/index", "autoapi/neural_compressor/data/filters/filter/index", "autoapi/neural_compressor/data/filters/index", "autoapi/neural_compressor/data/index", "autoapi/neural_compressor/data/transforms/coco_transform/index", "autoapi/neural_compressor/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/data/transforms/index", "autoapi/neural_compressor/data/transforms/postprocess/index", "autoapi/neural_compressor/data/transforms/tokenization/index", "autoapi/neural_compressor/data/transforms/transform/index", "autoapi/neural_compressor/experimental/benchmark/index", "autoapi/neural_compressor/experimental/common/criterion/index", "autoapi/neural_compressor/experimental/common/dataloader/index", "autoapi/neural_compressor/experimental/common/index", "autoapi/neural_compressor/experimental/common/metric/index", "autoapi/neural_compressor/experimental/common/model/index", "autoapi/neural_compressor/experimental/common/optimizer/index", "autoapi/neural_compressor/experimental/common/postprocess/index", "autoapi/neural_compressor/experimental/common/torch_utils/index", "autoapi/neural_compressor/experimental/component/index", "autoapi/neural_compressor/experimental/compression/index", "autoapi/neural_compressor/experimental/compression/pruning/index", "autoapi/neural_compressor/experimental/contrib/index", "autoapi/neural_compressor/experimental/contrib/strategy/index", "autoapi/neural_compressor/experimental/contrib/strategy/sigopt/index", "autoapi/neural_compressor/experimental/contrib/strategy/tpe/index", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index", "autoapi/neural_compressor/experimental/data/dataloaders/index", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/index", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index", "autoapi/neural_compressor/experimental/data/filters/filter/index", "autoapi/neural_compressor/experimental/data/filters/index", "autoapi/neural_compressor/experimental/data/index", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/experimental/data/transforms/index", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index", "autoapi/neural_compressor/experimental/data/transforms/transform/index", "autoapi/neural_compressor/experimental/distillation/index", "autoapi/neural_compressor/experimental/export/index", "autoapi/neural_compressor/experimental/export/qlinear2qdq/index", "autoapi/neural_compressor/experimental/export/tf2onnx/index", "autoapi/neural_compressor/experimental/export/torch2onnx/index", "autoapi/neural_compressor/experimental/export/utils/index", "autoapi/neural_compressor/experimental/graph_optimization/index", "autoapi/neural_compressor/experimental/index", "autoapi/neural_compressor/experimental/metric/bleu/index", "autoapi/neural_compressor/experimental/metric/bleu_util/index", "autoapi/neural_compressor/experimental/metric/coco_label_map/index", "autoapi/neural_compressor/experimental/metric/coco_tools/index", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index", "autoapi/neural_compressor/experimental/metric/f1/index", "autoapi/neural_compressor/experimental/metric/index", "autoapi/neural_compressor/experimental/metric/metric/index", "autoapi/neural_compressor/experimental/mixed_precision/index", "autoapi/neural_compressor/experimental/model_conversion/index", "autoapi/neural_compressor/experimental/nas/basic_nas/index", "autoapi/neural_compressor/experimental/nas/dynas/index", "autoapi/neural_compressor/experimental/nas/index", "autoapi/neural_compressor/experimental/nas/nas/index", "autoapi/neural_compressor/experimental/nas/nas_utils/index", "autoapi/neural_compressor/experimental/nas/search_algorithms/index", "autoapi/neural_compressor/experimental/pruner_legacy/gradient_sensitivity/index", "autoapi/neural_compressor/experimental/pruner_legacy/group_lasso/index", "autoapi/neural_compressor/experimental/pruner_legacy/index", "autoapi/neural_compressor/experimental/pruner_legacy/magnitude/index", "autoapi/neural_compressor/experimental/pruner_legacy/pattern_lock/index", "autoapi/neural_compressor/experimental/pruner_legacy/pruner/index", "autoapi/neural_compressor/experimental/pruning/index", "autoapi/neural_compressor/experimental/pruning_recipes/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index", "autoapi/neural_compressor/experimental/pruning_v2/index", "autoapi/neural_compressor/experimental/pytorch_pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index", "autoapi/neural_compressor/experimental/quantization/index", "autoapi/neural_compressor/experimental/scheduler/index", "autoapi/neural_compressor/experimental/strategy/auto_mixed_precision/index", "autoapi/neural_compressor/experimental/strategy/basic/index", "autoapi/neural_compressor/experimental/strategy/bayesian/index", "autoapi/neural_compressor/experimental/strategy/exhaustive/index", "autoapi/neural_compressor/experimental/strategy/index", "autoapi/neural_compressor/experimental/strategy/mse/index", "autoapi/neural_compressor/experimental/strategy/mse_v2/index", "autoapi/neural_compressor/experimental/strategy/random/index", "autoapi/neural_compressor/experimental/strategy/strategy/index", "autoapi/neural_compressor/experimental/strategy/utils/constant/index", "autoapi/neural_compressor/experimental/strategy/utils/index", "autoapi/neural_compressor/experimental/strategy/utils/tuning_sampler/index", "autoapi/neural_compressor/experimental/strategy/utils/tuning_space/index", "autoapi/neural_compressor/experimental/strategy/utils/tuning_structs/index", "autoapi/neural_compressor/experimental/strategy/utils/utility/index", "autoapi/neural_compressor/index", "autoapi/neural_compressor/metric/bleu/index", "autoapi/neural_compressor/metric/bleu_util/index", "autoapi/neural_compressor/metric/coco_label_map/index", "autoapi/neural_compressor/metric/coco_tools/index", "autoapi/neural_compressor/metric/evaluate_squad/index", "autoapi/neural_compressor/metric/f1/index", "autoapi/neural_compressor/metric/index", "autoapi/neural_compressor/metric/metric/index", "autoapi/neural_compressor/mix_precision/index", "autoapi/neural_compressor/model/base_model/index", "autoapi/neural_compressor/model/index", "autoapi/neural_compressor/model/keras_model/index", "autoapi/neural_compressor/model/model/index", "autoapi/neural_compressor/model/mxnet_model/index", "autoapi/neural_compressor/model/nets_factory/index", "autoapi/neural_compressor/model/onnx_model/index", "autoapi/neural_compressor/model/tensorflow_model/index", "autoapi/neural_compressor/model/torch_model/index", "autoapi/neural_compressor/objective/index", "autoapi/neural_compressor/profiling/index", "autoapi/neural_compressor/profiling/parser/factory/index", "autoapi/neural_compressor/profiling/parser/index", "autoapi/neural_compressor/profiling/parser/onnx_parser/factory/index", "autoapi/neural_compressor/profiling/parser/onnx_parser/index", "autoapi/neural_compressor/profiling/parser/onnx_parser/parser/index", "autoapi/neural_compressor/profiling/parser/parser/index", "autoapi/neural_compressor/profiling/parser/result/index", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/factory/index", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/index", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/parser/index", "autoapi/neural_compressor/profiling/profiler/factory/index", "autoapi/neural_compressor/profiling/profiler/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/factory/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/profiler/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/utils/index", "autoapi/neural_compressor/profiling/profiler/profiler/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/factory/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/profiler/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/utils/index", "autoapi/neural_compressor/quantization/index", "autoapi/neural_compressor/strategy/auto/index", "autoapi/neural_compressor/strategy/auto_mixed_precision/index", "autoapi/neural_compressor/strategy/basic/index", "autoapi/neural_compressor/strategy/bayesian/index", "autoapi/neural_compressor/strategy/conservative/index", "autoapi/neural_compressor/strategy/exhaustive/index", "autoapi/neural_compressor/strategy/hawq_v2/index", "autoapi/neural_compressor/strategy/index", "autoapi/neural_compressor/strategy/mse/index", "autoapi/neural_compressor/strategy/mse_v2/index", "autoapi/neural_compressor/strategy/random/index", "autoapi/neural_compressor/strategy/strategy/index", "autoapi/neural_compressor/strategy/utils/constant/index", "autoapi/neural_compressor/strategy/utils/index", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index", "autoapi/neural_compressor/strategy/utils/tuning_space/index", "autoapi/neural_compressor/strategy/utils/tuning_structs/index", "autoapi/neural_compressor/strategy/utils/utility/index", "autoapi/neural_compressor/template/api_doc_example/index", "autoapi/neural_compressor/template/index", "autoapi/neural_compressor/training/index", "autoapi/neural_compressor/utils/collect_layer_histogram/index", "autoapi/neural_compressor/utils/constant/index", "autoapi/neural_compressor/utils/create_obj_from_config/index", "autoapi/neural_compressor/utils/index", "autoapi/neural_compressor/utils/kl_divergence/index", "autoapi/neural_compressor/utils/load_huggingface/index", "autoapi/neural_compressor/utils/logger/index", "autoapi/neural_compressor/utils/neural_insights_utils/index", "autoapi/neural_compressor/utils/options/index", "autoapi/neural_compressor/utils/pytorch/index", "autoapi/neural_compressor/utils/utility/index", "autoapi/neural_compressor/utils/weights_details/index", "autoapi/neural_compressor/version/index", "docs/build_docs/source/index", "docs/source/CODE_OF_CONDUCT", "docs/source/CONTRIBUTING", "docs/source/FX", "docs/source/NAS", "docs/source/SECURITY", "docs/source/Welcome", "docs/source/adaptor", "docs/source/api-doc/adaptor", "docs/source/api-doc/adaptor/onnxrt", "docs/source/api-doc/adaptor/torch_utils", "docs/source/api-doc/api_doc_example", "docs/source/api-doc/apis", "docs/source/api-doc/benchmark", "docs/source/api-doc/compression", "docs/source/api-doc/config", "docs/source/api-doc/mix_precision", "docs/source/api-doc/model", "docs/source/api-doc/objective", "docs/source/api-doc/quantization", "docs/source/api-doc/strategy", "docs/source/api-doc/training", "docs/source/benchmark", "docs/source/dataloader", "docs/source/dataset", "docs/source/design", "docs/source/distillation", "docs/source/distillation_quantization", "docs/source/distributed", "docs/source/examples_readme", "docs/source/export", "docs/source/faq", "docs/source/framework_yaml", "docs/source/get_started", "docs/source/incompatible_changes", "docs/source/infrastructure", "docs/source/installation_guide", "docs/source/legal_information", "docs/source/metric", "docs/source/migration", "docs/source/mixed_precision", "docs/source/model", "docs/source/neural_coder/README", "docs/source/neural_coder/docs/AWSSageMakerSupport", "docs/source/neural_coder/docs/BigDLNanoSupport", "docs/source/neural_coder/docs/IntelCPU_PerformanceSetting", "docs/source/neural_coder/docs/PythonAPI", "docs/source/neural_coder/docs/PythonLauncher", "docs/source/neural_coder/docs/Quantization", "docs/source/neural_coder/docs/SupportMatrix", "docs/source/neural_coder/docs/release_notes/v0.4", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/DEVELOP", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/README", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/RELEASE", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/DEVELOP", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/RELEASE", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/README", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/vsc-extension-quickstart", "docs/source/objective", "docs/source/orchestration", "docs/source/platform_configuration", "docs/source/pruning", "docs/source/publication_list", "docs/source/pythonic_style", "docs/source/quantization", "docs/source/quantization_mixed_precision", "docs/source/releases_info", "docs/source/sigopt_strategy", "docs/source/smooth_quant", "docs/source/tensorboard", "docs/source/transform", "docs/source/tuning_strategies", "docs/source/user_guide", "docs/source/user_yaml", "docs/source/validated_model_list", "index"], "filenames": ["autoapi/block_mask/index.rst", "autoapi/neural_compressor/adaptor/adaptor/index.rst", "autoapi/neural_compressor/adaptor/index.rst", "autoapi/neural_compressor/adaptor/keras/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/conv2d/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/dense/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/depthwise_conv2d/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/pool2d/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/quantizer/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/separable_conv2d/index.rst", "autoapi/neural_compressor/adaptor/mxnet/index.rst", "autoapi/neural_compressor/adaptor/mxnet_utils/index.rst", "autoapi/neural_compressor/adaptor/mxnet_utils/util/index.rst", "autoapi/neural_compressor/adaptor/onnxrt/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/calibration/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/calibrator/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/activation/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/argmax/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/attention/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/binary_op/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/concat/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/conv/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/direct_q8/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/embed_layernorm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gather/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gavgpool/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gemm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/lstm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/matmul/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/maxpool/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/ops/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/pad/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/pooling/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/resize/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/split/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/quantizer/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/util/index.rst", "autoapi/neural_compressor/adaptor/pytorch/index.rst", "autoapi/neural_compressor/adaptor/query/index.rst", "autoapi/neural_compressor/adaptor/tensorflow/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter_without_calib/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/bf16_convert/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_add_to_biasadd/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_layout/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_leakyrelu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_nan_to_random/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_placeholder_to_const/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dequantize_cast_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dilated_contraction/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dummy_biasadd/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/expanddims_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fetch_weight_from_reshape/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_batch_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_constant/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_biasadd_add/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_column_wise_mul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_conv_with_math/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_in/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_gelu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_layer_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_reshape_transpose/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/graph_cse_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/grappler_pass/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/insert_print_node/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/move_squeeze_after_relu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/pre_optimize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/remove_training_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/rename_batch_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/split_shared_input/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_equivalent_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_unused_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/switch_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/graph_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_fake_quant/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value_without_calib/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_requantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_requantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/meta_op_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_hostconst_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_quantized_op_cse/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/rnn_convert/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/scale_propagation/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_node/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_schema/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/tf2onnx_utils/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/insert_qdq_pattern/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/merge_duplicated_qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/share_qdq_y_pattern/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_util/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/fake_quantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_config/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_helper/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/optimize_layer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_wrapper/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_concatv2/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_deconv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_in/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_matmul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_pooling/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/optimize_qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_concatv2/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_for_intel_cpu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_matmul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_pooling/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph_common/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/tf2onnx_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/bias_correction/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/graph_transform_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/insert_logging/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/rerange_quantized_concat/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/util/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/bf16_convert/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/hawq_metric/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/model_wrapper/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/pattern_detector/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/smooth_quant/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/symbolic_trace/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/util/index.rst", "autoapi/neural_compressor/algorithm/algorithm/index.rst", "autoapi/neural_compressor/algorithm/fast_bias_correction/index.rst", "autoapi/neural_compressor/algorithm/index.rst", "autoapi/neural_compressor/algorithm/smooth_quant/index.rst", "autoapi/neural_compressor/algorithm/weight_correction/index.rst", "autoapi/neural_compressor/benchmark/index.rst", "autoapi/neural_compressor/compression/callbacks/index.rst", "autoapi/neural_compressor/compression/distillation/criterions/index.rst", "autoapi/neural_compressor/compression/distillation/index.rst", "autoapi/neural_compressor/compression/index.rst", "autoapi/neural_compressor/compression/pruner/criteria/index.rst", "autoapi/neural_compressor/compression/pruner/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/auto_slim/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/pattern_analyzer/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/weight_slim/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/index.rst", "autoapi/neural_compressor/compression/pruner/regs/index.rst", "autoapi/neural_compressor/compression/pruner/schedulers/index.rst", "autoapi/neural_compressor/compression/pruner/utils/index.rst", "autoapi/neural_compressor/conf/config/index.rst", "autoapi/neural_compressor/conf/dotdict/index.rst", "autoapi/neural_compressor/conf/index.rst", "autoapi/neural_compressor/conf/pythonic_config/index.rst", "autoapi/neural_compressor/config/index.rst", "autoapi/neural_compressor/contrib/index.rst", "autoapi/neural_compressor/contrib/strategy/index.rst", "autoapi/neural_compressor/contrib/strategy/sigopt/index.rst", "autoapi/neural_compressor/contrib/strategy/tpe/index.rst", "autoapi/neural_compressor/data/dataloaders/base_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/default_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/fetcher/index.rst", "autoapi/neural_compressor/data/dataloaders/index.rst", "autoapi/neural_compressor/data/dataloaders/mxnet_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/onnxrt_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/pytorch_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/sampler/index.rst", "autoapi/neural_compressor/data/dataloaders/tensorflow_dataloader/index.rst", "autoapi/neural_compressor/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/data/datasets/index.rst", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/data/filters/filter/index.rst", "autoapi/neural_compressor/data/filters/index.rst", "autoapi/neural_compressor/data/index.rst", "autoapi/neural_compressor/data/transforms/coco_transform/index.rst", "autoapi/neural_compressor/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/data/transforms/index.rst", "autoapi/neural_compressor/data/transforms/postprocess/index.rst", "autoapi/neural_compressor/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/benchmark/index.rst", "autoapi/neural_compressor/experimental/common/criterion/index.rst", "autoapi/neural_compressor/experimental/common/dataloader/index.rst", "autoapi/neural_compressor/experimental/common/index.rst", "autoapi/neural_compressor/experimental/common/metric/index.rst", "autoapi/neural_compressor/experimental/common/model/index.rst", "autoapi/neural_compressor/experimental/common/optimizer/index.rst", "autoapi/neural_compressor/experimental/common/postprocess/index.rst", "autoapi/neural_compressor/experimental/common/torch_utils/index.rst", "autoapi/neural_compressor/experimental/component/index.rst", "autoapi/neural_compressor/experimental/compression/index.rst", "autoapi/neural_compressor/experimental/compression/pruning/index.rst", "autoapi/neural_compressor/experimental/contrib/index.rst", "autoapi/neural_compressor/experimental/contrib/strategy/index.rst", "autoapi/neural_compressor/experimental/contrib/strategy/sigopt/index.rst", "autoapi/neural_compressor/experimental/contrib/strategy/tpe/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/index.rst", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/index.rst", "autoapi/neural_compressor/experimental/data/index.rst", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/experimental/data/transforms/index.rst", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/experimental/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/distillation/index.rst", "autoapi/neural_compressor/experimental/export/index.rst", "autoapi/neural_compressor/experimental/export/qlinear2qdq/index.rst", "autoapi/neural_compressor/experimental/export/tf2onnx/index.rst", "autoapi/neural_compressor/experimental/export/torch2onnx/index.rst", "autoapi/neural_compressor/experimental/export/utils/index.rst", "autoapi/neural_compressor/experimental/graph_optimization/index.rst", "autoapi/neural_compressor/experimental/index.rst", "autoapi/neural_compressor/experimental/metric/bleu/index.rst", "autoapi/neural_compressor/experimental/metric/bleu_util/index.rst", "autoapi/neural_compressor/experimental/metric/coco_label_map/index.rst", "autoapi/neural_compressor/experimental/metric/coco_tools/index.rst", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/experimental/metric/f1/index.rst", "autoapi/neural_compressor/experimental/metric/index.rst", "autoapi/neural_compressor/experimental/metric/metric/index.rst", "autoapi/neural_compressor/experimental/mixed_precision/index.rst", "autoapi/neural_compressor/experimental/model_conversion/index.rst", "autoapi/neural_compressor/experimental/nas/basic_nas/index.rst", "autoapi/neural_compressor/experimental/nas/dynas/index.rst", "autoapi/neural_compressor/experimental/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas_utils/index.rst", "autoapi/neural_compressor/experimental/nas/search_algorithms/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/gradient_sensitivity/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/group_lasso/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/magnitude/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/pattern_lock/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/pruner/index.rst", "autoapi/neural_compressor/experimental/pruning/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_v2/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index.rst", "autoapi/neural_compressor/experimental/quantization/index.rst", "autoapi/neural_compressor/experimental/scheduler/index.rst", "autoapi/neural_compressor/experimental/strategy/auto_mixed_precision/index.rst", "autoapi/neural_compressor/experimental/strategy/basic/index.rst", "autoapi/neural_compressor/experimental/strategy/bayesian/index.rst", "autoapi/neural_compressor/experimental/strategy/exhaustive/index.rst", "autoapi/neural_compressor/experimental/strategy/index.rst", "autoapi/neural_compressor/experimental/strategy/mse/index.rst", "autoapi/neural_compressor/experimental/strategy/mse_v2/index.rst", "autoapi/neural_compressor/experimental/strategy/random/index.rst", "autoapi/neural_compressor/experimental/strategy/strategy/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/constant/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/tuning_sampler/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/tuning_space/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/tuning_structs/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/utility/index.rst", "autoapi/neural_compressor/index.rst", "autoapi/neural_compressor/metric/bleu/index.rst", "autoapi/neural_compressor/metric/bleu_util/index.rst", "autoapi/neural_compressor/metric/coco_label_map/index.rst", "autoapi/neural_compressor/metric/coco_tools/index.rst", "autoapi/neural_compressor/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/metric/f1/index.rst", "autoapi/neural_compressor/metric/index.rst", "autoapi/neural_compressor/metric/metric/index.rst", "autoapi/neural_compressor/mix_precision/index.rst", "autoapi/neural_compressor/model/base_model/index.rst", "autoapi/neural_compressor/model/index.rst", "autoapi/neural_compressor/model/keras_model/index.rst", "autoapi/neural_compressor/model/model/index.rst", "autoapi/neural_compressor/model/mxnet_model/index.rst", "autoapi/neural_compressor/model/nets_factory/index.rst", "autoapi/neural_compressor/model/onnx_model/index.rst", "autoapi/neural_compressor/model/tensorflow_model/index.rst", "autoapi/neural_compressor/model/torch_model/index.rst", "autoapi/neural_compressor/objective/index.rst", "autoapi/neural_compressor/profiling/index.rst", "autoapi/neural_compressor/profiling/parser/factory/index.rst", "autoapi/neural_compressor/profiling/parser/index.rst", "autoapi/neural_compressor/profiling/parser/onnx_parser/factory/index.rst", "autoapi/neural_compressor/profiling/parser/onnx_parser/index.rst", "autoapi/neural_compressor/profiling/parser/onnx_parser/parser/index.rst", "autoapi/neural_compressor/profiling/parser/parser/index.rst", "autoapi/neural_compressor/profiling/parser/result/index.rst", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/factory/index.rst", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/index.rst", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/parser/index.rst", "autoapi/neural_compressor/profiling/profiler/factory/index.rst", "autoapi/neural_compressor/profiling/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/factory/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/utils/index.rst", "autoapi/neural_compressor/profiling/profiler/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/factory/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/utils/index.rst", "autoapi/neural_compressor/quantization/index.rst", "autoapi/neural_compressor/strategy/auto/index.rst", "autoapi/neural_compressor/strategy/auto_mixed_precision/index.rst", "autoapi/neural_compressor/strategy/basic/index.rst", "autoapi/neural_compressor/strategy/bayesian/index.rst", "autoapi/neural_compressor/strategy/conservative/index.rst", "autoapi/neural_compressor/strategy/exhaustive/index.rst", "autoapi/neural_compressor/strategy/hawq_v2/index.rst", "autoapi/neural_compressor/strategy/index.rst", "autoapi/neural_compressor/strategy/mse/index.rst", "autoapi/neural_compressor/strategy/mse_v2/index.rst", "autoapi/neural_compressor/strategy/random/index.rst", "autoapi/neural_compressor/strategy/strategy/index.rst", "autoapi/neural_compressor/strategy/utils/constant/index.rst", "autoapi/neural_compressor/strategy/utils/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_space/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_structs/index.rst", "autoapi/neural_compressor/strategy/utils/utility/index.rst", "autoapi/neural_compressor/template/api_doc_example/index.rst", "autoapi/neural_compressor/template/index.rst", "autoapi/neural_compressor/training/index.rst", "autoapi/neural_compressor/utils/collect_layer_histogram/index.rst", "autoapi/neural_compressor/utils/constant/index.rst", "autoapi/neural_compressor/utils/create_obj_from_config/index.rst", "autoapi/neural_compressor/utils/index.rst", "autoapi/neural_compressor/utils/kl_divergence/index.rst", "autoapi/neural_compressor/utils/load_huggingface/index.rst", "autoapi/neural_compressor/utils/logger/index.rst", "autoapi/neural_compressor/utils/neural_insights_utils/index.rst", "autoapi/neural_compressor/utils/options/index.rst", "autoapi/neural_compressor/utils/pytorch/index.rst", "autoapi/neural_compressor/utils/utility/index.rst", "autoapi/neural_compressor/utils/weights_details/index.rst", "autoapi/neural_compressor/version/index.rst", "docs/build_docs/source/index.rst", "docs/source/CODE_OF_CONDUCT.md", "docs/source/CONTRIBUTING.md", "docs/source/FX.md", "docs/source/NAS.md", "docs/source/SECURITY.md", "docs/source/Welcome.md", "docs/source/adaptor.md", "docs/source/api-doc/adaptor.rst", "docs/source/api-doc/adaptor/onnxrt.rst", "docs/source/api-doc/adaptor/torch_utils.rst", "docs/source/api-doc/api_doc_example.rst", "docs/source/api-doc/apis.rst", "docs/source/api-doc/benchmark.rst", "docs/source/api-doc/compression.rst", "docs/source/api-doc/config.rst", "docs/source/api-doc/mix_precision.rst", "docs/source/api-doc/model.rst", "docs/source/api-doc/objective.rst", "docs/source/api-doc/quantization.rst", "docs/source/api-doc/strategy.rst", "docs/source/api-doc/training.rst", "docs/source/benchmark.md", "docs/source/dataloader.md", "docs/source/dataset.md", "docs/source/design.md", "docs/source/distillation.md", "docs/source/distillation_quantization.md", "docs/source/distributed.md", "docs/source/examples_readme.md", "docs/source/export.md", "docs/source/faq.md", "docs/source/framework_yaml.md", "docs/source/get_started.md", "docs/source/incompatible_changes.md", "docs/source/infrastructure.md", "docs/source/installation_guide.md", "docs/source/legal_information.md", "docs/source/metric.md", "docs/source/migration.md", "docs/source/mixed_precision.md", "docs/source/model.md", "docs/source/neural_coder/README.md", "docs/source/neural_coder/docs/AWSSageMakerSupport.md", "docs/source/neural_coder/docs/BigDLNanoSupport.md", "docs/source/neural_coder/docs/IntelCPU_PerformanceSetting.md", "docs/source/neural_coder/docs/PythonAPI.md", "docs/source/neural_coder/docs/PythonLauncher.md", "docs/source/neural_coder/docs/Quantization.md", "docs/source/neural_coder/docs/SupportMatrix.md", "docs/source/neural_coder/docs/release_notes/v0.4.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/DEVELOP.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/README.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/RELEASE.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/DEVELOP.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/RELEASE.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/README.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/vsc-extension-quickstart.md", "docs/source/objective.md", "docs/source/orchestration.md", "docs/source/platform_configuration.md", "docs/source/pruning.md", "docs/source/publication_list.md", "docs/source/pythonic_style.md", "docs/source/quantization.md", "docs/source/quantization_mixed_precision.md", "docs/source/releases_info.md", "docs/source/sigopt_strategy.md", "docs/source/smooth_quant.md", "docs/source/tensorboard.md", "docs/source/transform.md", "docs/source/tuning_strategies.md", "docs/source/user_guide.md", "docs/source/user_yaml.md", "docs/source/validated_model_list.md", "index.rst"], "titles": ["<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">block_mask</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.adaptor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.dense</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.depthwise_conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.pool2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.separable_conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.onnxrt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.calibration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.calibrator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.activation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.argmax</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.attention</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.binary_op</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.concat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.direct_q8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.embed_layernorm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gather</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gavgpool</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gemm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.lstm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.maxpool</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.ops</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.pad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.resize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.split</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.query</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tensorflow</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_converter_without_calib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph_common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.tf2onnx_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.bias_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.insert_logging</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.bf16_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.hawq_metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.model_wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.pattern_detector</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.smooth_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.symbolic_trace</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.algorithm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.fast_bias_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.smooth_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.weight_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.callbacks</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.distillation.criterions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.distillation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.criteria</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim.auto_slim</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim.pattern_analyzer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim.weight_slim</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.regs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.schedulers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.dotdict</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.pythonic_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy.sigopt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy.tpe</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.base_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.default_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.fetcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.mxnet_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.onnxrt_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.pytorch_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.tensorflow_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.bert_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.coco_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dummy_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dummy_dataset_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.imagenet_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.style_transfer_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters.coco_filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters.filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.coco_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.imagenet_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.postprocess</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.tokenization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.criterion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.postprocess</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.torch_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.component</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.compression</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.compression.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib.strategy.sigopt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib.strategy.tpe</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.base_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.default_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.fetcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.mxnet_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.onnxrt_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.pytorch_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.tensorflow_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.bert_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.coco_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dummy_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dummy_dataset_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.imagenet_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.style_transfer_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters.coco_filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters.filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.imagenet_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.tokenization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.distillation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.qlinear2qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.tf2onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.torch2onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.graph_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.bleu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.bleu_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.coco_label_map</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.coco_tools</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.evaluate_squad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.f1</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.model_conversion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.basic_nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.nas_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.search_algorithms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.gradient_sensitivity</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.group_lasso</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.magnitude</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.pattern_lock</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns.pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns.tile_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.prune_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.scheduler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.scheduler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.auto_mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.basic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.bayesian</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.exhaustive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.mse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.mse_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.tuning_sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.tuning_space</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.tuning_structs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.bleu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.bleu_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.coco_label_map</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.coco_tools</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.evaluate_squad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.f1</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.mix_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.base_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.keras_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.mxnet_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.nets_factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.onnx_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.tensorflow_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.torch_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.objective</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.onnx_parser.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.onnx_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.onnx_parser.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.result</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.tensorflow_parser.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.tensorflow_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.tensorflow_parser.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.onnxrt_profiler.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.onnxrt_profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.onnxrt_profiler.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.onnxrt_profiler.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.tensorflow_profiler.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.tensorflow_profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.tensorflow_profiler.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.tensorflow_profiler.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.auto</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.auto_mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.basic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.bayesian</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.conservative</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.exhaustive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.hawq_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.mse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.mse_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_space</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_structs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.template.api_doc_example</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.template</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.training</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.collect_layer_histogram</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.create_obj_from_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.kl_divergence</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.load_huggingface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.neural_insights_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.options</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.weights_details</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.version</span></code>", "Intel\u00ae Neural Compressor Documentation", "Contributor Covenant Code of Conduct", "Contribution Guidelines", "FX", "Neural Architecture Search", "Security Policy", "Intel\u00ae Neural Compressor", "Adaptor", "Adaptor", "ONNX Runtime", "Torch Utils", "API Document Example", "APIs", "Benchmark", "Compression", "Config", "Mix Precision", "Model", "Objective", "Quantization", "Strategy", "Training", "Benchmarking", "DataLoader", "Dataset", "Design", "Distillation", "Distillation for Quantization", "Distributed Training and Inference (Evaluation)", "Examples", "Export", "Frequently Asked Questions", "Framework YAML Configuration Files", "Getting Started", "Incompatible changes between v1.2 and v1.1", "Infrastructure of Intel\u00ae Neural Compressor", "Installation", "Legal Information", "Metrics", "Code Migration from Intel Neural Compressor 1.X to Intel Neural Compressor 2.X", "Mixed Precision", "Model", "Neural Coder", "AWS Amazon SageMaker Support", "BigDL Nano Support", "Intel CPU Platforms: Best Performance Setting", "Neural Coder as Python API", "Python Launcher", "Neural Coder for Quantization", "Supported Optimization Features", "v0.4", "Changelog", "neural_compressor_ext_lab", "Intel\u00ae Neural Compressor as JupyterLab Extension", "Making a new release of neural_compressor_ext_lab", "Changelog", "neural_compressor_ext_lab_alibaba", "Making a new release of neural_compressor_ext_lab_alibaba", "Change Log", "Neural Coder", "Welcome to your VS Code Extension", "Objective", "Optimization Orchestration", "SYSTEM CONFIGURATION", "Pruning", "Full Publications/Events (60)", "Pythonic Style Access for Configurations", "Quantization", "Turn OFF Auto Mixed Precision during Quantization", "Release", "SigOpt Strategy", "Smooth Quant", "TensorBoard", "Transform", "Tuning Strategies", "User Guide", "User YAML Configuration Files", "Validated Models", "Intel\u00ae Neural Compressor Documentation"], "terms": {"block": [0, 146, 160, 166, 167, 170, 288, 329, 371, 422, 448, 451, 458], "mask": [0, 165, 166, 167, 190, 234, 261, 290, 314, 451, 464], "adaptor_registri": [1, 394], "cl": [1, 150, 157, 166, 167, 168, 169, 192, 199, 207, 209, 214, 236, 243, 249, 272, 279, 283, 288, 290, 292, 303, 318, 329, 364, 384], "sourc": [1, 3, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 108, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 146, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 160, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 222, 223, 224, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 246, 248, 249, 250, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 277, 278, 279, 280, 283, 284, 285, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 300, 301, 302, 303, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 331, 333, 335, 336, 337, 338, 340, 341, 343, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 367, 368, 369, 370, 371, 373, 374, 376, 378, 379, 380, 381, 382, 383, 384, 385, 386, 390, 393, 424, 426, 439, 441, 443, 444, 446, 452], "The": [1, 3, 11, 14, 16, 33, 39, 48, 69, 108, 114, 116, 141, 149, 150, 155, 156, 157, 160, 164, 166, 167, 168, 169, 170, 171, 172, 174, 175, 178, 179, 180, 190, 191, 192, 193, 194, 198, 199, 207, 209, 212, 214, 217, 219, 222, 223, 224, 234, 235, 236, 237, 238, 242, 243, 249, 250, 256, 258, 259, 260, 262, 263, 265, 267, 268, 269, 271, 272, 274, 275, 277, 278, 279, 280, 283, 285, 288, 289, 290, 291, 292, 293, 295, 296, 297, 298, 300, 301, 302, 303, 307, 309, 311, 312, 313, 315, 316, 318, 319, 327, 329, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 368, 370, 371, 373, 374, 376, 378, 379, 383, 384, 385, 388, 390, 391, 394, 395, 397, 401, 404, 407, 409, 410, 411, 413, 415, 417, 419, 421, 422, 423, 425, 426, 427, 428, 431, 432, 434, 437, 439, 440, 441, 443, 444, 446, 447, 448, 449, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464], "decor": [1, 16, 33, 62, 63, 65, 141, 150, 166, 167, 169, 207, 214, 249, 265, 272, 279, 283, 288, 290, 292, 303, 306, 318, 329, 364, 367, 384, 390, 391, 394, 461], "us": [1, 13, 16, 33, 39, 43, 44, 65, 98, 100, 111, 143, 149, 155, 157, 160, 164, 165, 166, 167, 169, 172, 174, 175, 178, 179, 188, 189, 190, 191, 192, 193, 194, 197, 206, 207, 208, 209, 214, 222, 223, 232, 233, 234, 235, 236, 237, 238, 241, 248, 249, 253, 254, 256, 258, 259, 261, 265, 266, 267, 272, 279, 280, 283, 285, 288, 290, 291, 292, 293, 294, 297, 300, 303, 306, 307, 311, 312, 314, 318, 329, 346, 351, 352, 356, 359, 361, 364, 367, 368, 371, 374, 375, 376, 377, 384, 388, 389, 390, 391, 394, 409, 410, 411, 413, 414, 415, 417, 419, 421, 423, 424, 425, 426, 427, 428, 429, 430, 431, 433, 434, 437, 439, 441, 443, 444, 446, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464], "regist": [1, 16, 33, 150, 157, 160, 166, 167, 168, 169, 192, 199, 207, 209, 214, 236, 243, 249, 265, 272, 279, 283, 288, 290, 292, 303, 306, 318, 329, 364, 367, 381, 391, 394, 411, 415, 425, 426, 447, 448, 458, 461], "all": [1, 13, 16, 33, 40, 58, 92, 149, 150, 152, 155, 156, 166, 167, 170, 174, 175, 180, 181, 188, 192, 199, 207, 208, 214, 217, 219, 224, 232, 236, 243, 249, 254, 258, 261, 263, 265, 272, 279, 283, 284, 288, 294, 303, 306, 311, 314, 316, 318, 320, 329, 364, 367, 370, 376, 384, 388, 393, 394, 410, 411, 415, 419, 423, 426, 429, 437, 440, 441, 444, 445, 446, 447, 449, 450, 451, 452, 454, 455, 458, 460, 461], "subclass": [1, 16, 33, 150, 166, 167, 169, 185, 189, 192, 199, 207, 214, 229, 233, 236, 243, 249, 265, 272, 279, 283, 288, 290, 292, 303, 306, 318, 329, 364, 367, 394], "paramet": [1, 11, 13, 14, 16, 39, 40, 62, 63, 65, 81, 100, 111, 127, 141, 142, 143, 147, 148, 149, 150, 155, 156, 157, 160, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 178, 179, 189, 190, 192, 199, 203, 207, 209, 214, 219, 222, 223, 233, 234, 236, 243, 246, 249, 250, 252, 253, 254, 255, 256, 258, 259, 261, 262, 263, 265, 267, 268, 269, 271, 272, 273, 274, 275, 277, 278, 279, 280, 283, 285, 288, 289, 290, 291, 292, 293, 297, 303, 307, 309, 311, 312, 314, 315, 316, 318, 319, 323, 327, 329, 346, 351, 352, 356, 364, 368, 370, 371, 373, 376, 380, 381, 383, 384, 390, 410, 411, 413, 415, 422, 425, 426, 440, 446, 447, 451, 454, 457, 458, 460, 461, 463], "framework_specific_info": [1, 3, 11, 14, 40, 42, 394], "base": [1, 3, 13, 16, 33, 40, 41, 42, 81, 100, 111, 115, 117, 127, 137, 143, 146, 149, 150, 156, 160, 175, 180, 183, 188, 190, 192, 199, 207, 217, 224, 227, 232, 234, 236, 243, 249, 265, 271, 273, 279, 280, 283, 285, 290, 300, 303, 307, 318, 320, 327, 328, 329, 361, 364, 368, 391, 393, 394, 411, 414, 415, 419, 426, 434, 435, 437, 446, 450, 451, 454, 457, 459, 461, 464], "framework": [1, 3, 11, 13, 14, 40, 155, 157, 167, 176, 177, 181, 182, 186, 189, 190, 191, 192, 193, 194, 195, 196, 197, 199, 201, 204, 207, 209, 210, 214, 220, 221, 225, 226, 228, 230, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 245, 247, 249, 256, 265, 266, 293, 301, 307, 318, 319, 320, 321, 323, 362, 368, 376, 393, 394, 415, 416, 420, 421, 422, 423, 425, 426, 427, 451, 452, 454, 459, 460, 461, 462, 463], "layer": [1, 3, 11, 14, 39, 40, 41, 42, 111, 112, 113, 114, 116, 117, 147, 153, 157, 162, 164, 165, 166, 170, 174, 175, 209, 216, 288, 289, 374, 376, 384, 394, 414, 422, 451, 456], "mxnet_util": 2, "util": [2, 12, 17, 100, 105, 106, 134, 135, 142, 143, 144, 148, 159, 161, 164, 174, 175, 216, 251, 257, 259, 289, 299, 310, 312, 344, 349, 360, 395, 415, 426, 429, 454, 461, 462], "ox_util": 2, "oper": [2, 17, 39, 99, 105, 141, 164, 165, 166, 174, 175, 203, 246, 288, 346, 351, 390, 409, 410, 417, 446, 454, 458, 460, 461], "activ": [2, 17, 29, 149, 174, 175, 216, 254, 307, 368, 394, 414, 419, 426, 447, 450, 453, 454, 458, 459, 463], "argmax": [2, 17, 29], "attent": [2, 17, 29, 146, 162, 164, 174, 175, 190, 234, 388, 413, 451], "binary_op": [2, 17, 29], "concat": [2, 17, 29, 140], "conv": [2, 17, 29, 53, 57, 61, 66, 67, 68, 87, 104, 153, 174, 175, 390, 426, 451, 453, 454, 461], "direct_q8": [2, 17, 29], "embed_layernorm": [2, 17, 29], "gather": [2, 13, 17, 29, 174, 175, 288], "gavgpool": [2, 17, 29], "gemm": [2, 17, 29, 174, 175], "lstm": [2, 17, 29], "matmul": [2, 17, 29, 47, 54, 60, 68, 89, 104, 123, 132, 166, 174, 175, 254, 288, 417, 419, 461], "maxpool": [2, 17, 29, 124, 133, 419], "op": [2, 13, 17, 29, 39, 40, 47, 52, 60, 61, 62, 63, 64, 65, 66, 67, 69, 73, 76, 80, 83, 86, 87, 88, 89, 91, 100, 102, 104, 118, 119, 120, 126, 128, 129, 130, 131, 136, 139, 141, 142, 143, 148, 149, 153, 164, 174, 175, 254, 300, 307, 308, 346, 351, 357, 359, 361, 368, 369, 378, 384, 394, 419, 426, 427, 451, 454, 455, 456, 458, 459, 461, 463], "pad": [2, 17, 29, 66, 67, 190, 207, 234, 249, 411, 460], "pool": [2, 17, 29], "resiz": [2, 17, 29, 190, 191, 203, 207, 234, 235, 246, 249, 410, 411, 460], "split": [2, 17, 29, 39, 77, 206, 207, 248, 249, 390, 458, 460], "calibr": [2, 11, 13, 14, 17, 39, 44, 84, 85, 149, 155, 174, 175, 178, 179, 222, 223, 256, 293, 352, 378, 394, 410, 411, 421, 422, 454, 461, 463], "quantiz": [2, 11, 13, 14, 16, 17, 39, 43, 44, 83, 87, 89, 91, 94, 102, 107, 108, 109, 110, 111, 112, 113, 114, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 142, 143, 147, 149, 153, 155, 156, 174, 175, 178, 179, 203, 210, 217, 222, 223, 246, 254, 255, 256, 257, 267, 294, 300, 306, 310, 357, 359, 361, 373, 374, 378, 383, 384, 394, 399, 410, 411, 415, 416, 417, 419, 421, 422, 425, 427, 428, 429, 434, 436, 437, 440, 449, 452, 456, 459, 460, 461, 462, 463], "tf_util": 2, "graph_rewrit": [2, 106], "bf16": [2, 52, 82, 106, 142, 174, 175, 307, 368, 394, 419, 426, 427, 431, 436, 440, 446, 455, 461], "gener": [2, 13, 43, 44, 82, 106, 117, 141, 149, 155, 164, 170, 178, 179, 180, 189, 192, 193, 194, 195, 207, 222, 223, 224, 233, 236, 237, 238, 239, 249, 254, 258, 266, 297, 311, 319, 347, 352, 356, 371, 373, 390, 394, 410, 413, 425, 426, 427, 429, 434, 439, 441, 443, 444, 446, 448, 450, 451, 452, 454, 455, 458, 459, 460, 461], "int8": [2, 18, 19, 39, 82, 106, 118, 119, 120, 126, 128, 129, 130, 131, 136, 141, 154, 155, 174, 175, 203, 246, 252, 253, 254, 307, 309, 368, 370, 383, 384, 390, 394, 409, 411, 414, 419, 426, 431, 434, 436, 437, 440, 446, 453, 454, 455, 456, 457, 458, 459, 460, 463], "onnx": [2, 14, 15, 16, 29, 38, 39, 82, 106, 135, 153, 174, 175, 186, 230, 252, 253, 254, 255, 319, 326, 346, 382, 393, 394, 395, 410, 416, 417, 419, 420, 422, 428, 431, 436, 437, 452, 453, 458, 461], "qdq": [2, 82, 106, 107, 108, 135, 149, 174, 175, 252, 253, 254, 394, 417, 422, 436, 437, 454, 458], "graph_bas": [2, 82, 106], "quantize_graph": [2, 106], "qat": [2, 106, 107, 148, 175, 254, 267, 327, 414, 415, 417, 422, 426, 454], "quantize_graph_bas": [2, 106, 107], "quantize_graph_bn": [2, 106, 107], "quantize_graph_concatv2": [2, 106, 107], "quantize_graph_conv": [2, 106, 107], "quantize_graph_for_intel_cpu": [2, 106, 107], "quantize_graph_matmul": [2, 106, 107], "quantize_graph_pool": [2, 106, 107], "transform_graph": [2, 106], "bias_correct": [2, 106, 138], "graph_transform_bas": [2, 106, 138], "insert_log": [2, 106, 138], "rerange_quantized_concat": [2, 106, 138], "graph_convert": [2, 106], "graph_converter_without_calib": [2, 106], "graph_util": [2, 106], "quantize_graph_common": [2, 106], "tf2onnx_convert": [2, 106], "torch_util": [2, 211, 257, 310, 458], "bf16_convert": [2, 46, 82, 106, 144], "hawq_metr": [2, 144], "model_wrapp": [2, 15, 144], "pattern_detector": [2, 144], "symbolic_trac": [2, 144], "tensorflow": [2, 46, 48, 70, 71, 72, 82, 90, 96, 97, 98, 99, 100, 101, 105, 106, 107, 109, 112, 125, 135, 138, 141, 174, 175, 189, 190, 191, 192, 195, 197, 199, 207, 209, 214, 233, 234, 235, 236, 239, 241, 243, 249, 253, 254, 255, 256, 259, 261, 265, 266, 267, 293, 301, 312, 314, 318, 319, 327, 345, 346, 350, 351, 352, 362, 384, 391, 393, 394, 410, 413, 414, 416, 417, 419, 420, 422, 423, 426, 428, 436, 437, 451, 452, 453, 457, 461, 463], "kerasadaptor": 3, "kerasqueri": 3, "local_config_fil": [3, 40, 42], "none": [3, 13, 38, 39, 40, 42, 43, 44, 58, 84, 97, 99, 100, 105, 111, 135, 141, 143, 147, 149, 155, 156, 157, 162, 164, 170, 171, 172, 174, 175, 178, 179, 180, 182, 186, 188, 190, 191, 192, 193, 194, 195, 197, 203, 207, 208, 209, 210, 217, 219, 222, 223, 224, 226, 230, 232, 234, 235, 236, 237, 238, 239, 241, 246, 249, 250, 253, 254, 256, 261, 265, 266, 267, 268, 271, 280, 285, 289, 293, 297, 298, 300, 301, 302, 303, 307, 314, 318, 319, 329, 345, 350, 351, 352, 353, 356, 357, 358, 359, 361, 362, 363, 364, 368, 371, 373, 374, 376, 381, 383, 384, 394, 411, 425, 454, 459, 460, 461], "defin": [3, 40, 41, 81, 143, 145, 164, 166, 167, 168, 169, 174, 175, 178, 179, 222, 223, 268, 269, 271, 272, 273, 280, 285, 288, 289, 290, 292, 319, 352, 373, 383, 388, 391, 394, 410, 411, 413, 414, 419, 422, 425, 426, 447, 449, 451, 454, 457, 458, 459, 461, 463], "queri": [3, 13, 40, 42, 141, 149, 164, 174, 175, 454], "interfac": [3, 40, 41, 81, 108, 171, 256, 280, 285, 293, 294, 376, 422, 426, 437, 450, 454, 456], "each": [3, 39, 40, 41, 143, 174, 175, 188, 192, 195, 203, 207, 232, 236, 239, 246, 249, 259, 261, 262, 263, 300, 312, 314, 315, 316, 361, 389, 394, 411, 413, 414, 419, 426, 427, 431, 437, 440, 446, 448, 451, 457, 458, 459, 460, 461, 462], "adapt": [3, 40, 41, 388, 393, 411, 437, 452], "should": [3, 40, 41, 49, 110, 111, 156, 162, 164, 174, 175, 178, 179, 188, 190, 192, 207, 212, 222, 223, 232, 234, 236, 249, 254, 259, 312, 318, 319, 352, 371, 373, 384, 390, 391, 394, 411, 413, 415, 425, 426, 427, 432, 441, 444, 446, 448, 451, 454, 460, 461, 463], "implement": [3, 40, 41, 105, 136, 140, 178, 179, 185, 188, 189, 190, 192, 222, 223, 229, 232, 233, 234, 236, 258, 311, 319, 329, 352, 359, 373, 410, 411, 426, 437, 447, 451, 454, 456, 459, 461, 463], "inherit": [3, 40, 41, 156, 157, 167, 169, 174, 187, 207, 209, 217, 231, 249, 290, 292, 391, 394, 411], "specif": [3, 11, 14, 40, 41, 99, 111, 155, 170, 174, 175, 190, 191, 192, 193, 197, 199, 214, 234, 235, 236, 237, 241, 243, 267, 274, 275, 277, 278, 279, 318, 352, 381, 388, 391, 394, 413, 419, 421, 425, 426, 427, 428, 429, 433, 434, 436, 440, 446, 448, 451, 453, 461, 463], "backend": [3, 15, 38, 40, 41, 153, 174, 175, 176, 177, 181, 182, 186, 190, 191, 193, 194, 195, 196, 197, 201, 204, 207, 213, 214, 220, 221, 225, 226, 228, 230, 234, 235, 237, 238, 239, 240, 241, 245, 247, 249, 266, 301, 319, 320, 321, 323, 362, 390, 415, 421, 422, 426, 427, 435, 453, 460, 463], "own": [3, 40, 41, 69, 188, 207, 232, 249, 329, 391, 410, 411, 422, 425, 448, 457, 462], "mxnetadaptor": 11, "do": [11, 14, 156, 174, 175, 189, 190, 233, 234, 250, 254, 258, 261, 291, 311, 314, 383, 388, 411, 415, 419, 422, 425, 426, 441, 444, 451, 455, 456, 458, 461], "inspect": [11, 14, 456, 459], "tensor": [11, 13, 14, 15, 16, 39, 65, 100, 141, 143, 149, 160, 166, 167, 168, 175, 207, 249, 252, 254, 288, 290, 300, 327, 361, 384, 390, 411, 451, 454, 456, 459, 460, 461], "dict": [11, 13, 14, 39, 40, 111, 141, 142, 143, 149, 150, 155, 160, 164, 165, 166, 167, 168, 169, 170, 172, 174, 175, 178, 179, 189, 208, 214, 222, 223, 233, 252, 254, 260, 261, 262, 263, 265, 268, 271, 272, 273, 280, 283, 285, 288, 289, 290, 291, 292, 297, 300, 306, 309, 313, 314, 315, 316, 318, 319, 327, 352, 367, 370, 371, 373, 374, 376, 383, 384, 390, 425, 451, 453, 454, 458, 459, 461], "configur": [11, 13, 14, 40, 113, 142, 149, 155, 170, 171, 174, 175, 178, 179, 181, 192, 195, 208, 213, 222, 223, 236, 239, 250, 254, 256, 267, 268, 269, 271, 280, 285, 289, 293, 294, 300, 318, 319, 329, 352, 361, 373, 375, 376, 382, 383, 390, 391, 394, 411, 425, 426, 433, 447, 448, 451, 454, 456, 460, 461, 464], "mxnet": [12, 13, 16, 175, 185, 189, 192, 195, 199, 207, 229, 233, 236, 239, 243, 249, 256, 265, 293, 318, 319, 324, 352, 393, 394, 410, 416, 419, 422, 423, 426, 427, 428, 453, 461, 463], "init": [12, 17, 152, 158, 161, 163, 411, 425], "optyp": [13, 174, 175, 252], "enum": 13, "type": [13, 16, 39, 40, 69, 91, 100, 111, 117, 127, 141, 142, 143, 149, 150, 157, 164, 165, 166, 167, 168, 169, 170, 172, 174, 175, 188, 190, 192, 199, 207, 209, 214, 232, 234, 236, 243, 249, 254, 255, 258, 259, 261, 265, 272, 279, 283, 288, 290, 292, 297, 303, 307, 309, 311, 312, 314, 318, 327, 329, 356, 357, 364, 368, 370, 371, 383, 384, 389, 394, 411, 415, 419, 422, 426, 427, 447, 454, 457, 460, 461, 463], "isiter": 13, "obj": [13, 100, 170, 189, 219, 233, 250, 256, 267, 268, 269, 271, 280, 285, 289, 293, 319, 329, 352, 373, 376, 384], "bool": [13, 141, 148, 149, 166, 174, 175, 190, 192, 203, 207, 234, 236, 246, 249, 254, 259, 265, 288, 306, 312, 318, 367, 371, 383, 384, 411, 425, 453, 460], "check": [13, 62, 63, 100, 141, 149, 170, 181, 192, 236, 252, 289, 383, 384, 389, 393, 415, 423, 430, 432, 434, 441, 444, 445, 456], "whether": [13, 100, 111, 141, 166, 174, 175, 188, 190, 203, 207, 232, 234, 246, 249, 259, 261, 265, 288, 312, 314, 318, 376, 383, 384, 394, 411, 425, 454, 458, 460], "object": [13, 39, 40, 69, 81, 100, 111, 127, 142, 143, 148, 149, 155, 156, 160, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 178, 179, 180, 190, 191, 192, 207, 208, 210, 219, 222, 223, 224, 234, 235, 236, 249, 250, 254, 256, 261, 269, 271, 274, 275, 277, 278, 279, 280, 285, 288, 289, 290, 291, 292, 293, 297, 310, 314, 318, 319, 327, 328, 346, 351, 352, 356, 370, 373, 376, 383, 384, 390, 391, 399, 409, 410, 411, 418, 425, 426, 428, 449, 451, 453, 454, 460, 461, 462, 464], "i": [13, 39, 40, 43, 44, 48, 49, 52, 55, 59, 65, 77, 80, 100, 127, 136, 141, 143, 148, 149, 154, 155, 156, 160, 164, 165, 167, 168, 170, 174, 175, 178, 179, 180, 188, 189, 190, 191, 192, 193, 194, 197, 199, 203, 207, 208, 210, 214, 216, 217, 222, 223, 224, 232, 233, 234, 235, 236, 237, 238, 241, 243, 246, 249, 258, 261, 263, 265, 267, 272, 280, 285, 289, 290, 294, 301, 311, 314, 316, 318, 319, 329, 335, 336, 340, 352, 357, 362, 371, 373, 383, 384, 388, 389, 390, 391, 394, 395, 397, 401, 404, 407, 409, 410, 411, 413, 414, 415, 417, 418, 419, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 435, 437, 439, 440, 441, 443, 444, 446, 447, 448, 449, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464], "iter": [13, 15, 100, 141, 155, 165, 167, 169, 174, 175, 178, 179, 183, 188, 192, 193, 210, 222, 223, 227, 232, 236, 237, 290, 292, 319, 352, 373, 376, 390, 391, 394, 409, 411, 426, 451, 453, 454, 459, 461, 463], "return": [13, 16, 39, 40, 48, 62, 63, 65, 69, 100, 111, 141, 142, 143, 148, 149, 150, 155, 157, 164, 166, 167, 168, 169, 170, 172, 178, 179, 192, 199, 203, 207, 208, 209, 214, 219, 222, 223, 236, 243, 246, 249, 254, 255, 258, 259, 261, 262, 263, 265, 271, 272, 279, 283, 288, 289, 290, 292, 297, 303, 307, 309, 311, 312, 314, 315, 316, 318, 319, 323, 327, 329, 346, 351, 352, 356, 364, 368, 370, 371, 373, 376, 381, 383, 384, 390, 391, 411, 415, 425, 428, 448, 451, 454, 458, 459, 461], "true": [13, 80, 108, 139, 141, 155, 174, 175, 188, 190, 192, 193, 206, 207, 208, 232, 234, 236, 237, 248, 249, 254, 259, 265, 283, 306, 312, 318, 329, 352, 367, 371, 376, 383, 384, 411, 415, 419, 425, 426, 429, 432, 433, 453, 454, 458, 459, 460, 461, 463], "els": [13, 141, 175, 188, 232, 329, 381, 434, 459], "fals": [13, 15, 38, 42, 43, 44, 66, 67, 84, 87, 94, 97, 98, 100, 108, 126, 131, 136, 139, 140, 141, 148, 149, 155, 157, 174, 175, 180, 182, 186, 190, 192, 203, 207, 208, 209, 210, 216, 224, 226, 230, 234, 236, 246, 249, 261, 265, 314, 318, 329, 352, 371, 376, 384, 394, 411, 419, 425, 426, 439, 443, 453, 454, 458, 459, 460, 463], "boolean": 13, "ensure_list": 13, "x": [13, 49, 69, 165, 174, 175, 189, 207, 233, 249, 297, 356, 371, 415, 417, 427, 428, 454, 458, 459, 460, 462], "ensur": [13, 207, 249, 297, 356, 415, 417, 454, 460], "list": [13, 39, 48, 100, 141, 142, 143, 146, 149, 155, 164, 165, 166, 174, 175, 178, 179, 183, 190, 203, 207, 208, 222, 223, 227, 234, 246, 249, 253, 254, 258, 259, 261, 262, 263, 265, 272, 280, 285, 288, 291, 306, 311, 312, 314, 315, 316, 318, 319, 327, 335, 336, 340, 352, 367, 371, 373, 374, 384, 390, 393, 394, 411, 419, 423, 426, 429, 434, 436, 439, 440, 443, 448, 451, 453, 454, 455, 458, 459, 461], "input": [13, 15, 39, 40, 48, 55, 59, 62, 63, 65, 66, 67, 69, 77, 78, 80, 81, 100, 104, 105, 111, 117, 141, 142, 147, 148, 149, 153, 164, 165, 174, 175, 178, 179, 190, 191, 192, 194, 203, 206, 207, 212, 222, 223, 234, 235, 236, 238, 246, 248, 249, 252, 253, 254, 318, 319, 323, 327, 352, 373, 381, 383, 384, 391, 394, 409, 410, 411, 413, 414, 415, 417, 419, 421, 425, 426, 428, 429, 434, 451, 453, 454, 458, 459, 460, 463], "check_mx_vers": 13, "version": [13, 48, 99, 149, 164, 175, 253, 254, 310, 388, 390, 394, 419, 423, 424, 426, 439, 441, 443, 444, 450, 452, 458, 461, 462], "str": [13, 142, 143, 146, 147, 148, 149, 150, 157, 164, 174, 175, 190, 191, 192, 199, 203, 207, 209, 213, 214, 234, 235, 236, 243, 246, 249, 253, 254, 255, 258, 259, 261, 263, 265, 272, 283, 306, 309, 311, 312, 314, 316, 318, 337, 345, 347, 350, 351, 367, 370, 371, 376, 381, 384, 385, 411, 425, 453, 459, 460], "mx": 13, "__version__": 13, "combine_cap": 13, "current": [13, 39, 65, 99, 147, 160, 164, 166, 167, 174, 175, 267, 274, 275, 277, 278, 279, 288, 290, 297, 301, 356, 362, 384, 390, 391, 394, 415, 419, 425, 426, 429, 433, 446, 448, 451, 454, 458, 461], "new": [13, 16, 141, 147, 155, 180, 192, 207, 208, 224, 236, 249, 289, 329, 389, 415, 426, 427, 440, 446, 447, 451, 452, 454, 456, 457, 460, 462, 463], "combin": [13, 149, 174, 175, 178, 179, 203, 217, 222, 223, 246, 319, 352, 373, 384, 390, 394, 422, 426, 449, 452, 454, 455, 460, 461], "capabl": [13, 42, 307, 368, 409, 419, 426, 427, 437, 451, 453, 454, 461, 463], "contain": [13, 62, 63, 65, 69, 134, 141, 143, 149, 155, 156, 164, 166, 167, 169, 170, 174, 175, 178, 179, 190, 191, 192, 222, 223, 234, 235, 236, 250, 254, 256, 261, 262, 263, 267, 280, 283, 285, 288, 289, 290, 291, 292, 293, 314, 315, 316, 319, 352, 373, 376, 383, 411, 413, 422, 425, 447, 451, 459, 461, 462], "make_nc_model": 13, "target": [13, 39, 97, 164, 169, 170, 175, 289, 292, 297, 356, 411, 415, 426, 451, 459, 460, 461, 463], "sym_model": 13, "ctx": 13, "input_desc": 13, "convert": [13, 39, 43, 44, 45, 47, 48, 49, 50, 51, 61, 69, 81, 94, 95, 97, 98, 99, 100, 126, 131, 135, 142, 149, 164, 174, 175, 190, 203, 206, 207, 234, 246, 248, 249, 253, 261, 267, 289, 307, 314, 368, 371, 390, 426, 427, 431, 454, 455, 458, 460, 461], "symbol": [13, 142, 148, 149, 258, 311, 319, 352, 390, 428], "model": [13, 15, 16, 29, 38, 39, 40, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 102, 103, 104, 111, 113, 135, 141, 142, 143, 146, 147, 148, 149, 153, 155, 156, 162, 164, 167, 169, 170, 174, 175, 178, 179, 186, 189, 190, 192, 207, 208, 211, 212, 219, 222, 223, 230, 233, 234, 236, 249, 250, 252, 253, 254, 255, 256, 257, 265, 266, 267, 268, 271, 274, 275, 277, 278, 279, 280, 285, 289, 290, 291, 292, 293, 294, 297, 298, 300, 301, 302, 303, 310, 318, 319, 329, 345, 350, 351, 352, 353, 356, 357, 358, 359, 361, 362, 363, 364, 370, 371, 373, 379, 381, 383, 384, 386, 390, 391, 393, 394, 399, 409, 410, 411, 413, 414, 415, 416, 421, 422, 424, 425, 427, 429, 434, 436, 437, 440, 446, 448, 449, 450, 452, 454, 456, 457, 459, 460, 461, 462, 463], "an": [13, 62, 63, 65, 100, 136, 143, 149, 154, 167, 174, 175, 183, 188, 192, 207, 211, 216, 227, 232, 236, 249, 257, 258, 262, 263, 271, 272, 294, 310, 311, 315, 316, 319, 346, 351, 352, 371, 373, 384, 386, 388, 390, 391, 393, 394, 410, 411, 412, 417, 425, 426, 427, 429, 433, 434, 437, 446, 448, 451, 452, 454, 457, 458, 459, 460, 461], "neural": [13, 143, 155, 156, 166, 174, 175, 202, 203, 204, 207, 208, 211, 214, 217, 246, 247, 249, 251, 257, 264, 265, 267, 280, 285, 288, 291, 293, 294, 299, 305, 310, 317, 318, 319, 323, 330, 352, 359, 360, 366, 381, 386, 389, 394, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 424, 425, 427, 428, 430, 431, 434, 436, 437, 439, 441, 443, 444, 445, 448, 449, 452, 454, 456, 458, 459, 460, 461, 463, 464], "compressor": [13, 155, 156, 166, 174, 175, 202, 203, 204, 207, 208, 211, 214, 217, 246, 247, 249, 251, 257, 264, 265, 267, 288, 291, 293, 294, 299, 305, 310, 317, 318, 319, 323, 330, 352, 360, 366, 386, 389, 391, 394, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 424, 425, 427, 428, 429, 430, 434, 436, 437, 439, 441, 443, 444, 445, 448, 449, 451, 452, 454, 456, 458, 459, 460, 461, 462, 463, 464], "tupl": [13, 100, 149, 175, 178, 179, 203, 207, 222, 223, 246, 249, 254, 306, 319, 352, 367, 373, 411, 425, 426, 454, 460], "symnet": 13, "arg": [13, 48, 100, 190, 191, 192, 234, 235, 236, 288, 297, 356, 371, 379, 380, 410, 411, 415, 426, 435, 454, 458, 459, 460], "aux": 13, "data": [13, 39, 50, 100, 141, 143, 147, 149, 153, 164, 174, 175, 178, 179, 208, 210, 222, 223, 254, 255, 257, 297, 307, 309, 310, 319, 345, 350, 352, 356, 368, 370, 373, 376, 381, 384, 393, 394, 410, 411, 415, 419, 420, 423, 425, 426, 427, 454, 455, 456, 457, 458, 459, 460, 461], "descript": [13, 127, 254, 255, 371, 389, 390, 458], "ncmodel": 13, "fuse": [13, 53, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 86, 87, 88, 89, 91, 126, 131, 148, 149, 153, 390, 458, 459], "suppli": 13, "get_framework_nam": 13, "get": [13, 39, 40, 62, 63, 65, 99, 100, 141, 147, 149, 155, 160, 162, 164, 166, 167, 168, 169, 172, 175, 183, 207, 208, 214, 216, 227, 249, 254, 255, 288, 290, 292, 300, 307, 309, 318, 327, 352, 361, 368, 370, 376, 384, 418, 422, 423, 426, 432, 458, 461, 462, 465], "name": [13, 39, 40, 48, 62, 63, 65, 99, 100, 105, 111, 141, 142, 143, 147, 148, 149, 150, 155, 160, 164, 166, 167, 168, 169, 172, 174, 175, 190, 191, 192, 195, 199, 205, 207, 208, 212, 215, 216, 234, 235, 236, 239, 243, 249, 252, 253, 254, 260, 265, 283, 288, 290, 292, 307, 309, 313, 318, 323, 327, 329, 352, 368, 370, 374, 376, 384, 390, 411, 415, 419, 424, 425, 426, 428, 432, 439, 443, 447, 450, 451, 454, 456, 457, 459, 461, 463, 464], "context": [13, 384, 453], "prepare_model_data": 13, "nc_model": [13, 280, 285], "data_x": 13, "prepar": [13, 149, 390, 393, 411, 415, 420, 454], "dataload": [13, 15, 143, 147, 149, 155, 162, 164, 178, 179, 190, 201, 211, 222, 223, 234, 245, 250, 257, 280, 285, 294, 310, 345, 350, 352, 373, 376, 390, 393, 394, 413, 414, 415, 420, 421, 425, 426, 427, 449, 454, 455, 458, 459, 460, 463], "need": [13, 39, 100, 104, 147, 155, 164, 175, 178, 179, 180, 188, 189, 192, 199, 207, 210, 212, 213, 222, 223, 224, 232, 233, 236, 243, 249, 294, 300, 318, 319, 329, 352, 361, 373, 383, 384, 390, 394, 410, 411, 413, 415, 422, 426, 427, 429, 431, 432, 435, 439, 440, 441, 443, 444, 446, 447, 451, 453, 454, 455, 456, 458, 460, 461, 463], "run": [13, 141, 155, 167, 170, 174, 175, 178, 179, 189, 206, 208, 222, 223, 233, 248, 289, 290, 297, 319, 352, 356, 373, 389, 394, 409, 415, 418, 419, 426, 427, 429, 431, 433, 434, 435, 437, 439, 440, 441, 443, 444, 446, 452, 454, 456, 457, 459, 461, 463], "loader": [13, 178, 179, 222, 223, 319, 352, 373, 379, 454], "dataloaderwrap": 13, "prepare_model": 13, "create_data_exampl": 13, "creat": [13, 16, 100, 174, 175, 180, 190, 192, 210, 224, 234, 236, 261, 271, 272, 307, 314, 346, 351, 368, 371, 376, 388, 391, 394, 411, 428, 439, 441, 443, 444, 447, 454, 457, 459, 461], "exampl": [13, 143, 149, 155, 164, 165, 174, 175, 190, 191, 192, 203, 207, 234, 235, 236, 246, 249, 261, 262, 263, 265, 291, 314, 315, 316, 318, 319, 329, 352, 371, 373, 388, 389, 393, 399, 421, 422, 429, 432, 433, 434, 437, 455, 456, 460, 461, 462, 465], "prepare_dataload": 13, "io": 13, "ndarray_to_devic": 13, "ndarrai": [13, 62, 63, 65, 207, 249, 374, 418, 460], "devic": [13, 74, 84, 85, 86, 87, 88, 89, 92, 102, 126, 131, 140, 164, 165, 174, 175, 413, 426, 427, 429, 432, 437, 446, 453], "is_model_quant": 13, "query_quantizable_nod": 13, "node": [13, 39, 45, 48, 49, 50, 51, 55, 57, 59, 62, 63, 65, 69, 72, 75, 77, 78, 79, 93, 97, 98, 100, 105, 127, 141, 252, 254, 327, 351, 394, 415, 459, 461], "given": [13, 16, 62, 63, 65, 99, 100, 111, 141, 149, 207, 249, 261, 314, 352, 391, 451, 458, 460], "map": [13, 39, 100, 175, 207, 249, 252, 254, 256, 260, 262, 263, 265, 280, 285, 290, 293, 313, 315, 316, 318, 411, 415, 425, 426, 439, 443, 451, 454], "quantize_sym_model": 13, "qconfig": [13, 459], "accord": [13, 117, 149, 155, 174, 175, 190, 191, 192, 207, 234, 235, 236, 249, 300, 359, 361, 376, 391, 394, 411, 415, 451, 455, 458, 460, 461], "run_forward": 13, "b_filter": 13, "collector": [13, 143, 374], "pre_batch": 13, "post_batch": 13, "forward": [13, 393, 426, 451, 453, 454, 458, 459], "propag": [13, 95], "filter": [13, 190, 191, 192, 193, 194, 195, 197, 201, 234, 235, 236, 237, 238, 239, 241, 245, 257, 310, 384, 410, 411, 422, 451, 459], "which": [13, 50, 78, 105, 143, 147, 160, 164, 165, 166, 167, 169, 170, 174, 175, 190, 191, 192, 203, 208, 234, 235, 236, 246, 258, 263, 272, 274, 275, 277, 278, 279, 283, 288, 289, 290, 292, 297, 311, 316, 318, 323, 329, 352, 356, 384, 388, 390, 391, 394, 410, 411, 413, 415, 418, 419, 422, 425, 426, 427, 428, 430, 434, 437, 440, 446, 447, 449, 451, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463], "batch": [13, 149, 180, 182, 183, 188, 189, 210, 224, 226, 227, 232, 233, 373, 410, 413, 414, 426, 449, 451, 460, 461, 464], "infer": [13, 100, 164, 256, 293, 327, 329, 352, 373, 394, 413, 414, 426, 427, 446, 448, 451, 452, 454, 458, 459, 461], "collect": [13, 16, 39, 205, 207, 210, 212, 213, 215, 249, 263, 265, 316, 318, 374, 384, 417, 454, 459, 461], "inform": [13, 39, 143, 160, 164, 166, 167, 168, 169, 170, 175, 178, 179, 210, 212, 213, 222, 223, 288, 290, 291, 292, 294, 318, 384, 388, 389, 392, 393, 394, 395, 397, 401, 404, 407, 413, 417, 419, 426, 428, 441, 444, 447, 451, 455, 456, 459, 463, 464, 465], "dure": [13, 166, 169, 174, 175, 288, 292, 329, 384, 426, 427, 428, 448, 449, 451, 454, 458, 459, 463], "call": [13, 147, 150, 164, 167, 261, 290, 314, 390, 391, 394, 410, 421, 435, 437, 447, 454, 458, 459, 460], "prior": [13, 83, 461], "after": [13, 39, 73, 149, 162, 166, 167, 174, 175, 190, 203, 207, 210, 234, 246, 249, 254, 290, 357, 371, 391, 410, 411, 413, 414, 417, 422, 425, 426, 439, 440, 443, 447, 448, 449, 451, 454, 455, 457, 458, 459, 460, 461], "count": [13, 391, 411], "int": [13, 16, 39, 100, 141, 146, 149, 162, 174, 175, 189, 190, 191, 203, 207, 233, 234, 235, 246, 249, 253, 254, 259, 261, 265, 272, 312, 314, 318, 337, 346, 351, 371, 384, 411, 425, 426, 453, 460], "make_symbol_block": 13, "gluon": [13, 319, 352, 428], "symbolblock": 13, "make_modul": 13, "parse_tune_config": 13, "tune_cfg": [13, 141, 142, 149, 394, 461], "quantizable_nod": 13, "strategi": [13, 149, 167, 174, 175, 176, 192, 220, 236, 257, 310, 393, 394, 399, 415, 422, 426, 434, 446, 452, 453, 454, 455, 456, 462, 463], "config": [13, 110, 111, 113, 117, 149, 155, 160, 162, 166, 167, 168, 169, 170, 174, 178, 179, 190, 219, 222, 223, 234, 274, 275, 277, 278, 279, 280, 285, 288, 289, 290, 291, 292, 307, 308, 310, 319, 346, 351, 368, 369, 371, 373, 376, 383, 384, 391, 393, 399, 409, 413, 414, 415, 417, 420, 422, 426, 427, 428, 449, 451, 453, 454, 455, 457, 459, 461], "tune": [13, 40, 155, 174, 175, 178, 179, 190, 192, 222, 223, 234, 236, 256, 293, 295, 296, 297, 298, 300, 301, 302, 303, 306, 307, 308, 309, 319, 329, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 367, 368, 369, 370, 373, 384, 394, 410, 411, 415, 422, 424, 426, 427, 446, 448, 451, 452, 455, 456, 457, 459, 463], "from": [13, 39, 40, 56, 62, 63, 65, 100, 141, 147, 149, 155, 156, 157, 160, 166, 167, 168, 169, 170, 174, 175, 178, 179, 180, 183, 187, 190, 191, 192, 193, 194, 195, 197, 202, 203, 209, 210, 213, 222, 223, 224, 227, 231, 234, 235, 236, 237, 238, 239, 241, 246, 250, 252, 253, 254, 255, 258, 261, 262, 263, 267, 272, 288, 289, 290, 292, 307, 309, 311, 314, 315, 316, 319, 327, 329, 352, 368, 370, 371, 373, 376, 383, 384, 388, 390, 391, 394, 409, 410, 411, 413, 414, 415, 416, 417, 418, 420, 422, 425, 427, 428, 429, 433, 434, 435, 437, 447, 448, 449, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462], "distribute_calib_tensor": 13, "calib_tensor": 13, "calib_cfg": 13, "tensor_to_nod": 13, "distribut": [13, 16, 136, 154, 174, 175, 180, 182, 183, 186, 188, 210, 224, 226, 227, 230, 232, 378, 393, 413, 423, 441, 444, 452, 454, 456, 458, 462, 464], "depend": [13, 178, 179, 208, 222, 223, 319, 352, 373, 389, 418, 419, 453, 454, 461], "algorithm": [13, 149, 171, 258, 265, 273, 310, 311, 318, 376, 378, 391, 394, 413, 414, 419, 422, 435, 440, 451, 454, 459, 463], "set": [13, 39, 52, 91, 100, 110, 141, 147, 149, 155, 170, 172, 174, 175, 178, 179, 180, 190, 192, 195, 207, 208, 213, 214, 222, 223, 224, 234, 236, 239, 249, 254, 261, 267, 280, 285, 289, 294, 314, 318, 319, 327, 351, 352, 371, 373, 381, 384, 388, 391, 409, 411, 413, 415, 419, 421, 422, 423, 425, 426, 427, 429, 431, 433, 447, 451, 453, 454, 457, 458, 461, 463], "kl": [13, 16, 174, 175, 374, 378, 419, 426, 461, 463], "minmax": [13, 16, 419, 454, 463], "calib_model": 13, "qsym_model": 13, "calib_data": 13, "calibdata": 13, "threshold": [13, 151, 374, 378, 425], "amp_convert": 13, "amp_cfg": 13, "support": [13, 39, 92, 99, 147, 153, 157, 166, 167, 174, 175, 178, 179, 189, 190, 192, 199, 203, 207, 209, 210, 211, 214, 219, 222, 223, 233, 234, 236, 243, 246, 249, 257, 265, 267, 272, 288, 290, 294, 301, 307, 310, 318, 319, 323, 329, 352, 362, 368, 371, 373, 376, 378, 384, 386, 393, 426, 429, 434, 437, 440, 446, 452, 455, 457, 461, 462], "amp": [13, 429, 436, 450], "wrap": [13, 100, 111, 157, 209, 261, 314, 390, 415, 441, 444], "dataiterload": 13, "data_it": [13, 164], "collectorbas": 13, "calibcollector": 13, "include_tensors_kl": 13, "include_tensors_minmax": 13, "num_bin": [13, 16, 374], "8001": [13, 374], "tensorcollector": 13, "include_nod": 13, "qtensor_to_tensor": 13, "build": [13, 110, 150, 151, 153, 154, 165, 254, 255, 268, 271, 322, 324, 326, 327, 328, 394, 423, 428, 439, 441, 443, 444, 447, 452, 457, 461], "up": [13, 95, 207, 249, 289, 415, 416, 419, 422, 437, 441, 444, 446, 452, 453, 454, 457, 460, 461, 463], "namecollector": 13, "cache_kl": 13, "cache_minmax": 13, "tensors_kl": 13, "tensors_minmax": 13, "onnxruntimeadaptor": 14, "rt": 14, "onnxrt_qlinearopsadaptor": [14, 394], "onnxrt_integeropsadaptor": 14, "onnxrt_qdqadaptor": 14, "onnxrtaug": 15, "dump_op_typ": 15, "black_nod": 15, "white_nod": 15, "cpuexecutionprovid": [15, 38, 454], "reduce_rang": [15, 38, 174, 175, 453], "augment": 15, "dump": [15, 155, 254, 384, 454, 459], "calib_registri": 16, "calib_method": 16, "calibratorbas": 16, "minmaxcalibr": 16, "percentilecalibr": 16, "2048": [16, 384], "percentil": 16, "99": [16, 458, 464], "999": [16, 463, 464], "option": [16, 100, 166, 174, 175, 178, 179, 190, 207, 222, 223, 234, 249, 253, 254, 261, 267, 288, 294, 307, 310, 314, 318, 319, 352, 368, 371, 373, 377, 384, 411, 419, 423, 426, 440, 451, 454, 457, 460, 461, 463], "number": [16, 62, 63, 100, 149, 162, 165, 166, 174, 175, 188, 191, 203, 207, 232, 235, 246, 249, 262, 263, 265, 288, 297, 315, 316, 318, 346, 351, 356, 371, 376, 384, 409, 411, 415, 425, 451, 454, 457, 460, 461], "bin": [16, 384, 418], "histogram": [16, 374, 384, 459], "valu": [16, 39, 50, 62, 63, 65, 84, 85, 100, 136, 141, 149, 154, 155, 160, 164, 165, 170, 172, 174, 175, 178, 179, 190, 193, 194, 203, 207, 208, 222, 223, 234, 237, 238, 246, 249, 261, 265, 289, 297, 300, 307, 314, 318, 319, 352, 356, 361, 368, 371, 373, 374, 376, 384, 390, 411, 419, 425, 426, 432, 448, 451, 453, 454, 458, 460, 461, 463], "default": [16, 92, 141, 170, 172, 174, 175, 178, 179, 182, 190, 191, 192, 203, 207, 222, 223, 226, 234, 235, 236, 246, 249, 253, 254, 258, 267, 289, 309, 311, 318, 327, 370, 376, 384, 390, 394, 411, 417, 419, 422, 423, 425, 426, 427, 434, 437, 439, 443, 448, 451, 453, 454, 455, 457, 458, 460, 461, 463], "float": [16, 39, 143, 166, 167, 168, 170, 174, 175, 190, 203, 234, 246, 259, 261, 262, 263, 290, 312, 314, 315, 316, 371, 381, 384, 411, 425, 453, 454, 458, 460], "A": [16, 39, 49, 69, 70, 98, 111, 141, 149, 156, 160, 164, 166, 167, 168, 169, 170, 174, 175, 192, 207, 210, 212, 213, 219, 236, 249, 250, 258, 261, 262, 263, 265, 268, 271, 272, 273, 280, 283, 285, 288, 289, 290, 291, 292, 297, 311, 314, 315, 316, 318, 319, 323, 327, 356, 373, 384, 411, 416, 419, 425, 426, 428, 439, 440, 443, 446, 451, 452, 454, 458, 460, 461, 463], "between": [16, 136, 154, 167, 174, 175, 207, 249, 262, 265, 315, 318, 346, 351, 384, 390, 394, 413, 417, 422, 425, 426, 437, 454, 456, 457, 458, 460, 461], "0": [16, 39, 48, 85, 100, 141, 149, 151, 153, 157, 162, 174, 175, 180, 182, 186, 190, 193, 194, 197, 203, 207, 209, 210, 224, 226, 230, 234, 237, 238, 241, 246, 249, 254, 256, 265, 272, 280, 285, 293, 318, 329, 352, 357, 371, 390, 411, 413, 415, 417, 418, 419, 423, 424, 425, 426, 427, 432, 434, 439, 443, 450, 451, 453, 454, 456, 457, 458, 459, 460, 461, 463], "100": [16, 155, 174, 175, 192, 236, 371, 409, 411, 415, 421, 426, 453, 454, 458, 460, 461, 463, 464], "klcalibr": 16, "128": [16, 190, 193, 194, 207, 234, 237, 238, 249, 411, 426, 454, 460], "num_quantized_bin": 16, "histogramcollector": 16, "collctor": 16, "smooth_distribut": 16, "p": [16, 447], "ep": [16, 154, 427], "0001": [16, 174, 175, 413, 426, 453], "smooth": [16, 39, 147, 153, 174, 175, 306, 451], "discret": [16, 461], "mai": [16, 141, 274, 275, 277, 278, 279, 371, 388, 389, 393, 410, 418, 424, 427, 439, 443, 450, 452, 454, 461], "have": [16, 39, 69, 78, 141, 165, 166, 167, 188, 210, 232, 258, 261, 288, 290, 311, 314, 318, 352, 370, 371, 388, 389, 410, 411, 415, 419, 424, 425, 426, 427, 429, 446, 448, 451, 454, 458, 461], "been": [16, 166, 167, 258, 288, 290, 311, 389, 391, 413, 426, 427, 446, 458], "normal": [16, 207, 249, 263, 316, 426, 448, 458, 460], "1": [16, 39, 49, 69, 84, 100, 104, 108, 139, 141, 147, 149, 151, 153, 154, 155, 157, 167, 174, 175, 180, 182, 186, 189, 190, 191, 193, 194, 197, 198, 203, 207, 208, 209, 210, 224, 226, 230, 233, 234, 235, 237, 238, 241, 242, 246, 249, 256, 261, 262, 263, 265, 280, 285, 290, 293, 294, 314, 315, 316, 318, 329, 352, 371, 376, 388, 390, 393, 394, 410, 411, 413, 417, 419, 420, 423, 425, 427, 430, 432, 448, 449, 450, 451, 453, 454, 456, 457, 458, 459, 460, 461, 462, 463], "replac": [16, 147, 263, 316, 415, 426, 437, 456], "zero": [16, 39, 167, 170, 207, 249, 290, 384, 393, 451, 454, 458, 460, 461], "multipli": 16, "scale": [16, 39, 95, 136, 147, 149, 153, 154, 203, 207, 246, 249, 254, 417, 454, 457, 458, 460, 461], "factor": [16, 450, 458, 464], "take": [16, 166, 175, 178, 179, 183, 207, 212, 222, 223, 227, 249, 288, 297, 318, 319, 352, 356, 373, 388, 390, 391, 410, 413, 419, 426, 446, 451, 454, 455, 460, 461, 463], "correspond": [16, 39, 143, 164, 174, 175, 190, 234, 258, 261, 265, 311, 314, 318, 376, 384, 394, 419, 426, 451, 453, 454, 457, 458, 461], "amount": 16, "off": [16, 62, 63, 65, 389], "non": [16, 289, 384, 390, 450, 461], "ref": [16, 141], "http": [16, 143, 160, 166, 167, 190, 192, 234, 236, 258, 259, 261, 262, 263, 288, 290, 291, 311, 312, 314, 315, 316, 318, 352, 390, 393, 411, 420, 423, 424, 426, 435, 441, 444, 456], "hanj": 16, "c": [16, 69, 192, 236, 411, 418, 423, 461], "illinoi": 16, "edu": [16, 192, 236, 411], "cs412": 16, "bk3": 16, "diverg": [16, 374, 378, 413, 461], "pdf": 16, "github": [16, 143, 166, 190, 234, 258, 259, 262, 263, 288, 291, 311, 312, 315, 316, 318, 352, 389, 411, 416, 423, 424, 426, 435, 441, 444, 456], "com": [16, 143, 166, 190, 234, 258, 259, 262, 263, 288, 291, 311, 312, 315, 316, 318, 352, 388, 393, 411, 420, 423, 424, 426, 429, 435, 456, 457, 464], "apach": [16, 424], "incub": 16, "blob": [16, 143, 166, 258, 259, 262, 263, 288, 311, 312, 315, 316, 318, 352, 426, 435], "master": [16, 166, 258, 259, 262, 263, 288, 291, 311, 312, 315, 316, 318, 352, 426, 461], "python": [16, 70, 141, 192, 211, 236, 257, 310, 371, 384, 386, 389, 390, 411, 415, 418, 423, 426, 431, 437, 440, 446, 452, 460], "contrib": [16, 257, 310], "py": [16, 141, 143, 155, 167, 174, 175, 259, 261, 262, 263, 290, 312, 314, 315, 316, 371, 390, 394, 415, 423, 426, 431, 433, 434, 435, 441, 444, 454, 456, 459], "microsoft": [16, 394], "onnxruntim": [16, 174, 175, 186, 192, 199, 230, 236, 243, 266, 346, 394, 422, 423, 427, 453], "main": [16, 214, 291, 390, 415, 426, 433, 435, 447, 451, 454], "tool": [16, 141, 253, 384, 393, 394, 426, 439, 443, 451, 452, 454], "arrai": [16, 39, 141, 207, 249, 261, 272, 314, 384, 460], "small": [16, 62, 63, 64, 359, 391, 451, 461], "probabl": [16, 174, 175, 378], "activationoper": 18, "onnx_quant": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37], "onnx_nod": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 82, 96, 106], "removableactivationoper": 18, "remov": [18, 39, 51, 52, 55, 69, 75, 78, 79, 80, 91, 93, 162, 254, 263, 316, 388, 389, 426, 439, 443, 451, 459], "qactivationoper": 18, "children": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 33, 34, 35, 36, 37], "initi": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 33, 34, 35, 36, 37, 39, 100, 111, 141, 157, 167, 178, 179, 187, 190, 209, 222, 223, 231, 234, 289, 290, 307, 352, 368, 373, 391, 410, 411, 425, 445, 451, 454, 458, 461], "qoper": [18, 33, 174, 175], "format": [18, 39, 48, 141, 174, 175, 190, 191, 192, 234, 235, 236, 254, 261, 267, 307, 314, 368, 371, 411, 415, 417, 425, 426, 427, 428, 429, 454], "argmaxoper": 19, "qargmaxoper": 19, "attentionoper": 20, "qattentionoper": 20, "qattent": 20, "binari": [21, 141, 265, 318, 418, 425, 441, 444], "binaryoper": 21, "qbinaryoper": 21, "qbinari": 21, "concatoper": 22, "qconcatoper": 22, "qconcat": 22, "convoper": 23, "qconvoper": 23, "qlinearconv": 23, "direct8bit": 24, "direct8bitoper": 24, "qdirectoper": 24, "qdirect": 24, "embedlayernorm": 25, "embedlayernormalizationoper": 25, "qembedlayernormalizationoper": 25, "qembedlayernorm": 25, "gatheroper": 26, "qgatheroper": 26, "qgather": 26, "globalaveragepool": 27, "globalaveragepooloper": 27, "qglobalaveragepooloper": 27, "qlinearglobalaveragepool": 27, "gemmoper": 28, "qgemmoper": 28, "qgemm": 28, "lstmoper": 30, "matmuloper": 31, "qmatmuloper": 31, "qlinearmatmul": 31, "maxpooloper": 32, "qmaxpooloper": 32, "qmaxpool": 32, "op_registri": 33, "op_typ": [33, 308, 369], "qop_registri": 33, "padoper": 34, "qpadoper": 34, "qpad": 34, "averagepool": 35, "pooloper": 35, "qpooloper": 35, "qlinearaveragepool": 35, "resizeoper": 36, "qresizeoper": 36, "qresiz": 36, "splitoper": 37, "qsplitoper": 37, "qsplit": 37, "q_config": [38, 254, 394], "mode": [38, 39, 40, 105, 147, 199, 243, 261, 307, 314, 327, 368, 381, 384, 394, 422, 439, 443, 454, 455, 461], "static": [38, 42, 147, 153, 164, 175, 255, 307, 352, 368, 394, 422, 426, 429, 434, 435, 436, 437, 440, 446, 458, 461, 464], "quantization_param": 38, "op_types_to_quant": 38, "fallback_list": 38, "fp32": [38, 74, 126, 131, 136, 149, 154, 174, 175, 178, 179, 222, 223, 253, 254, 265, 300, 307, 318, 357, 361, 368, 376, 383, 384, 393, 394, 419, 420, 425, 426, 427, 436, 453, 454, 455, 456, 457, 458, 459, 461, 463, 464], "add_qdq_pair_to_weight": [38, 174, 175, 454], "optypes_to_exclude_output_qu": [38, 174, 175, 454], "dedicated_qdq_pair": [38, 174, 175, 454], "helper": [39, 40, 105, 111, 141, 149, 190, 191, 192, 206, 234, 235, 236, 248, 252, 253, 254, 327, 382], "onnxrt": [39, 190, 192, 199, 207, 234, 236, 243, 249, 265, 318, 345, 382, 394, 427, 454], "dtype_to_nam": 39, "dtype_map": 39, "dtype": [39, 97, 100, 174, 175, 193, 194, 203, 207, 237, 238, 246, 249, 254, 255, 411, 417, 419, 429, 453, 454, 458, 459, 460, 463], "its": [39, 55, 91, 143, 164, 167, 175, 186, 192, 207, 230, 236, 249, 252, 259, 260, 290, 297, 312, 313, 356, 388, 411, 413, 424, 425, 427, 437, 439, 443, 446, 447, 450, 451, 457, 460, 461], "string": [39, 40, 111, 141, 155, 157, 164, 166, 167, 168, 169, 170, 171, 174, 175, 192, 209, 214, 236, 250, 254, 256, 258, 261, 267, 268, 269, 271, 272, 280, 285, 288, 289, 290, 291, 292, 293, 311, 314, 323, 327, 376, 381, 384, 425, 458, 460], "represent": [39, 388, 390, 414, 451, 454], "quanttyp": 39, "repres": [39, 166, 167, 168, 170, 192, 197, 236, 241, 261, 263, 265, 314, 316, 318, 388, 411, 417, 451, 454, 461], "make_quant_nod": 39, "output": [39, 48, 52, 54, 69, 93, 100, 105, 141, 149, 164, 165, 166, 172, 174, 175, 178, 179, 212, 216, 222, 223, 253, 254, 258, 288, 311, 318, 319, 327, 352, 373, 379, 380, 384, 390, 394, 413, 414, 415, 417, 419, 421, 425, 426, 428, 437, 446, 447, 449, 451, 453, 454, 458, 459, 460, 461, 463], "make": [39, 100, 136, 154, 166, 167, 169, 188, 232, 288, 290, 292, 384, 388, 389, 394, 409, 410, 419, 425, 426, 434, 439, 443, 446, 454, 455, 457, 458, 461], "quantizelinear": [39, 417], "make_dquant_nod": 39, "axi": [39, 175], "dequantizelinear": [39, 417], "is_b_transpos": 39, "wheter": 39, "inuput": 39, "b": [39, 69, 190, 234, 254, 411, 425, 451, 458, 461], "transpos": [39, 68, 166, 207, 249, 253, 288, 460], "split_shared_bia": 39, "share": [39, 77, 93, 104, 418, 419, 458, 461], "float_to_float16": 39, "float16": [39, 411], "float_to_bfloat16": 39, "bfloat16": [39, 427, 429, 437, 455], "cast_tensor": 39, "tensorproto": [39, 100], "remove_init_from_model_input": 39, "collate_pr": 39, "result": [39, 141, 143, 149, 203, 207, 246, 249, 258, 261, 262, 263, 265, 311, 314, 315, 316, 318, 332, 352, 359, 373, 383, 384, 388, 391, 393, 410, 413, 415, 422, 424, 425, 426, 434, 435, 446, 447, 448, 451, 452, 454, 457, 458, 459, 460, 461, 462, 464], "quantize_data_with_scale_zero": 39, "qtype": [39, 394], "scheme": [39, 149, 394, 410, 419, 437, 461, 463], "zero_point": [39, 254], "point": [39, 203, 246, 262, 263, 272, 297, 315, 316, 356, 425, 446, 454, 458, 460, 461], "To": [39, 261, 314, 329, 389, 411, 415, 417, 427, 430, 433, 439, 441, 443, 444, 453, 455, 456, 458, 461, 463], "pack": [39, 56], "weight": [39, 55, 56, 117, 136, 143, 147, 154, 160, 165, 166, 167, 168, 174, 175, 254, 288, 290, 307, 318, 352, 359, 368, 384, 385, 394, 414, 417, 419, 421, 425, 426, 448, 451, 453, 454, 458, 459, 461, 463], "we": [39, 62, 63, 65, 69, 81, 136, 147, 153, 154, 155, 164, 174, 175, 189, 208, 210, 233, 258, 261, 311, 314, 359, 388, 390, 394, 410, 415, 417, 419, 425, 426, 433, 434, 437, 441, 444, 446, 447, 448, 449, 451, 453, 454, 457, 458, 459, 461, 462], "comput": [39, 100, 143, 149, 258, 259, 262, 263, 265, 311, 312, 315, 316, 318, 373, 384, 414, 417, 425, 426, 427, 429, 440, 451, 452, 454, 458, 461], "linear": [39, 153, 162, 164, 165, 166, 170, 174, 175, 254, 288, 390, 413, 417, 426, 451, 458, 461], "transform": [39, 45, 136, 138, 139, 140, 146, 167, 190, 191, 192, 193, 194, 195, 197, 199, 201, 234, 235, 236, 237, 238, 239, 241, 243, 245, 257, 310, 390, 391, 410, 411, 413, 414, 415, 416, 420, 426, 429, 434, 435, 436, 437, 451, 452, 455, 458, 459, 463, 464], "when": [39, 48, 59, 65, 141, 165, 167, 170, 174, 175, 190, 191, 199, 207, 234, 235, 243, 249, 259, 289, 290, 312, 352, 373, 388, 391, 410, 411, 426, 437, 439, 440, 443, 447, 451, 454, 458, 460, 461], "uint8": [39, 203, 246, 261, 309, 314, 370, 394, 411, 419, 453, 454, 460, 463], "rmin": [39, 454], "rmax": [39, 454], "2": [39, 48, 69, 100, 104, 147, 151, 153, 155, 166, 167, 174, 175, 191, 208, 235, 261, 263, 265, 290, 297, 314, 316, 318, 329, 356, 371, 390, 394, 411, 413, 419, 420, 422, 423, 424, 425, 427, 448, 450, 451, 454, 456, 457, 458, 460, 461, 462], "m": [39, 143, 166, 174, 175, 288, 413, 423, 429, 431, 434, 437, 441, 444, 451, 464], "where": [39, 174, 175, 261, 265, 314, 318, 370, 384, 413, 439, 443, 447, 458, 459], "max": [39, 99, 136, 154, 174, 175, 207, 249, 262, 263, 297, 315, 316, 356, 384, 393, 423, 426, 451, 454, 458, 460, 461], "ab": [39, 160, 167, 290, 454, 458], "np": [39, 207, 249, 297, 356, 415, 460, 461], "sym": [39, 419, 454, 463], "asym": [39, 419, 463], "calculate_scale_zp": 39, "quantize_rang": 39, "calcul": [39, 55, 149, 160, 170, 175, 193, 194, 237, 238, 262, 263, 288, 290, 300, 315, 316, 361, 374, 384, 411, 425, 426, 437, 448, 451, 454, 457, 458, 461, 463], "quantize_data": 39, "add": [39, 47, 59, 104, 114, 141, 170, 174, 175, 190, 192, 214, 234, 236, 289, 307, 368, 389, 390, 410, 411, 415, 417, 419, 425, 426, 427, 441, 444, 457, 459, 461], "necessari": [39, 388, 391, 428, 447, 451, 457, 461], "intermedi": [39, 143, 157, 174, 175, 209, 390, 422, 454], "trasnform": 39, "full": [39, 190, 191, 192, 234, 235, 236, 384, 393, 411, 418, 424, 447, 451], "equat": [39, 263, 265, 316, 318, 454, 458], "r": [39, 136, 154, 423, 447, 450, 454, 464], "": [39, 100, 136, 141, 154, 164, 165, 166, 167, 171, 172, 174, 175, 189, 192, 206, 207, 208, 210, 212, 219, 233, 236, 248, 249, 263, 288, 290, 316, 318, 319, 323, 352, 384, 388, 391, 413, 415, 419, 422, 426, 427, 434, 437, 439, 443, 446, 449, 450, 451, 452, 453, 454, 456, 457, 458, 461, 463], "q": [39, 102, 104, 126, 458], "z": [39, 413, 458], "real": [39, 193, 210, 237, 415, 452, 454], "origin": [39, 147, 149, 164, 167, 170, 175, 190, 207, 208, 234, 249, 274, 275, 277, 278, 279, 289, 290, 309, 357, 370, 384, 389, 411, 434, 451, 454, 460, 461, 463], "quantize_data_per_channel": 39, "per": [39, 147, 153, 155, 174, 175, 208, 378, 394, 450, 455, 464], "channel": [39, 136, 147, 153, 154, 162, 165, 166, 174, 175, 203, 207, 246, 249, 288, 394, 422, 423, 429, 431, 436, 451, 460, 464], "dequantize_data_with_scale_zero": 39, "tensor_valu": 39, "scale_valu": 39, "zo_valu": 39, "dequant": [39, 52, 83, 86, 87, 88, 89, 91, 143, 149, 384, 390, 458, 459], "sacal": 39, "dequantize_data": 39, "valueinfo": 39, "tensor_nam": [39, 141], "new_dtyp": 39, "cast": [39, 52, 417, 455, 460], "info": [39, 149, 166, 170, 205, 210, 215, 254, 288, 323, 380, 384, 390, 417, 428], "quantizedvalu": 39, "new_quantized_nam": 39, "scale_nam": 39, "zero_point_nam": 39, "quantized_value_typ": 39, "quint8": 39, "linearli": 39, "intial": 39, "quantizediniti": 39, "quantized_data": 39, "quantizationmod": 39, "quantizedvaluetyp": 39, "quantformat": [39, 254], "quantize_nparrai": 39, "arr": [39, 384], "low": [39, 178, 179, 193, 194, 222, 223, 237, 238, 256, 266, 293, 319, 394, 409, 411, 415, 426, 427, 452, 454, 458, 461], "high": [39, 193, 194, 237, 238, 411, 423, 452, 461], "numpi": [39, 62, 63, 65, 100, 141, 207, 249, 255, 261, 272, 314, 418, 460], "attribute_to_kwarg": 39, "attribut": [39, 78, 99, 100, 149, 164, 172, 175, 384, 394, 410, 419, 421, 426, 453, 463], "kwarg": [39, 100, 117, 118, 119, 120, 121, 122, 123, 124, 127, 128, 130, 132, 162, 174, 175, 192, 205, 207, 212, 215, 236, 249, 306, 308, 318, 319, 320, 322, 324, 326, 327, 328, 352, 367, 369, 371, 373, 379, 380, 383, 384, 410], "make_nod": 39, "find_by_nam": 39, "item_list": 39, "find": [39, 62, 63, 65, 100, 141, 265, 272, 297, 318, 356, 384, 394, 432, 439, 443, 446, 447, 457, 459, 461], "item": [39, 170, 172, 174, 175, 206, 248, 289, 307, 368, 415, 451, 458, 461], "get_smooth_scales_per_op": 39, "max_vals_per_channel": 39, "input_tensors_2_weight": 39, "input_tensors_2_weights_nod": 39, "alpha": [39, 153, 160, 168, 454], "same": [39, 78, 141, 165, 167, 175, 190, 207, 234, 249, 261, 314, 384, 394, 409, 410, 411, 413, 415, 419, 426, 430, 434, 439, 443, 450, 451, 453, 454, 458, 459, 460, 461], "one": [39, 104, 105, 110, 149, 155, 165, 166, 167, 169, 207, 217, 249, 258, 261, 265, 267, 288, 291, 292, 311, 314, 318, 391, 394, 413, 414, 415, 419, 420, 422, 423, 425, 426, 427, 429, 430, 434, 435, 437, 439, 440, 443, 446, 447, 448, 449, 451, 453, 454, 456, 458, 460, 461], "mul": [39, 49, 60, 61, 64, 153, 417, 458], "todo": [39, 190, 193, 234, 237, 261, 307, 314, 368], "individu": [39, 166, 288, 346, 351, 388, 451, 458], "save": [39, 100, 170, 174, 175, 192, 219, 236, 253, 254, 294, 327, 352, 373, 374, 379, 384, 390, 394, 410, 421, 426, 427, 428, 430, 434, 439, 443, 449, 454, 458], "paper": [39, 413, 451, 458], "onli": [39, 48, 58, 65, 81, 104, 110, 136, 147, 153, 154, 155, 165, 166, 167, 174, 175, 190, 208, 210, 214, 234, 267, 288, 290, 301, 352, 362, 371, 384, 393, 394, 409, 410, 413, 415, 417, 418, 419, 426, 427, 434, 447, 451, 452, 453, 454, 458, 459, 461, 463], "get_smooth_scales_per_input": 39, "insert_smooth_mul_op_per_input": 39, "shape_info": 39, "insert": [39, 72, 100, 102, 104, 108, 139, 147, 153, 254, 390, 422, 426, 429, 451, 454, 455, 458, 459], "inupt": 39, "shape": [39, 100, 141, 166, 193, 194, 203, 207, 237, 238, 246, 249, 261, 314, 393, 411, 419, 420, 426, 458, 460], "ad": [39, 167, 190, 234, 258, 297, 311, 356, 427, 429, 434, 437, 441, 444, 451, 459], "new_init_tensor": 39, "new_added_mul_nod": 39, "adjust_weights_per_op": 39, "adjust": [39, 437, 454, 458], "ha": [39, 62, 63, 65, 69, 166, 167, 208, 258, 288, 290, 311, 371, 389, 391, 394, 410, 417, 422, 426, 427, 432, 446, 451, 453, 454, 455, 457, 458, 461], "whose": [39, 147, 153, 166, 289, 421, 458, 461], "adjustd": 39, "adjust_weights_per_input": 39, "insert_smooth_mul_op_per_op": 39, "befor": [39, 102, 104, 153, 166, 167, 169, 174, 175, 190, 234, 254, 288, 290, 292, 389, 411, 413, 414, 415, 418, 419, 423, 426, 441, 444, 454, 457, 459, 461], "name_2_nod": 39, "kei": [39, 141, 143, 147, 164, 170, 172, 174, 175, 272, 289, 327, 371, 374, 376, 384, 393, 417, 452, 459, 461], "fold_scal": 39, "fold": [39, 57, 58, 254, 419, 458], "quant": [39, 149, 174, 175, 307, 368, 390, 426, 454], "trt_env_setup": 39, "environ": [39, 155, 208, 388, 409, 439, 443, 446, 461], "variabl": [39, 155, 168, 174, 175, 192, 208, 236, 297, 356, 423, 451, 461], "tensorrt": [39, 454], "execut": [39, 48, 155, 167, 174, 175, 290, 294, 296, 351, 352, 353, 355, 373, 376, 383, 384, 413, 414, 426, 427, 431, 432, 439, 440, 443, 446, 447, 449, 451, 454, 457, 461, 464], "provid": [39, 97, 100, 105, 164, 178, 179, 207, 222, 223, 249, 256, 261, 280, 285, 293, 294, 314, 319, 352, 373, 377, 379, 391, 393, 394, 409, 410, 414, 415, 416, 417, 422, 423, 426, 427, 428, 429, 433, 437, 440, 446, 447, 451, 453, 454, 459, 461, 462, 463, 464], "get_ops_recurs": 40, "prefix": [40, 141, 142, 148, 155, 429, 434, 459], "thi": [40, 81, 105, 127, 134, 136, 140, 143, 149, 154, 156, 162, 164, 166, 167, 168, 169, 174, 175, 178, 179, 189, 190, 191, 192, 193, 194, 195, 197, 207, 210, 216, 217, 222, 223, 233, 234, 235, 236, 237, 238, 239, 241, 249, 258, 261, 262, 263, 265, 274, 275, 277, 278, 279, 280, 285, 288, 290, 292, 293, 294, 297, 300, 311, 314, 315, 316, 318, 319, 329, 352, 356, 361, 371, 373, 383, 384, 388, 389, 390, 391, 394, 410, 411, 413, 414, 415, 418, 419, 422, 424, 425, 426, 427, 428, 429, 431, 432, 434, 435, 437, 439, 441, 443, 444, 445, 446, 447, 451, 454, 455, 456, 457, 458, 459, 460, 461, 462], "graph_info": 40, "templateadaptor": 40, "tampl": 40, "dictionari": [40, 62, 63, 65, 142, 143, 149, 172, 174, 175, 206, 248, 261, 268, 271, 273, 314, 384], "yaml": [40, 170, 172, 175, 178, 179, 190, 192, 208, 222, 223, 234, 236, 250, 256, 267, 268, 269, 271, 280, 285, 293, 294, 383, 384, 394, 421, 425, 426, 448, 453, 459, 460], "file": [40, 100, 141, 149, 152, 170, 171, 174, 175, 178, 179, 190, 191, 192, 195, 206, 207, 213, 216, 222, 223, 234, 235, 236, 239, 248, 249, 250, 254, 256, 261, 267, 268, 269, 271, 280, 285, 289, 291, 293, 294, 314, 319, 329, 335, 336, 340, 352, 383, 384, 391, 394, 415, 418, 421, 424, 425, 426, 428, 432, 441, 444, 445, 446, 447, 448, 453, 454, 459, 460], "pytorchadaptor": 40, "api": [40, 65, 70, 105, 218, 256, 261, 293, 306, 307, 314, 318, 352, 367, 368, 371, 384, 389, 390, 395, 397, 401, 404, 407, 417, 422, 426, 431, 435, 436, 437, 456, 457, 461, 465], "pytorch_ipexadaptor": 40, "intel": [40, 166, 211, 214, 251, 257, 264, 265, 288, 291, 299, 305, 310, 317, 318, 330, 352, 360, 366, 386, 388, 389, 391, 392, 394, 410, 411, 412, 413, 414, 416, 417, 419, 420, 424, 427, 428, 429, 434, 436, 437, 448, 449, 450, 451, 452, 454, 455, 456, 458, 459, 461, 462, 463], "extens": [40, 384, 391, 393, 394, 419, 422, 423, 426, 427, 428, 430, 435, 436, 437, 441, 444, 445, 451, 452, 454, 458, 461, 462, 463], "ipex": [40, 149, 174, 175, 422, 426, 431, 435, 436, 458, 464], "pytorch_fxadaptor": 40, "fx": [40, 149, 174, 301, 362, 422, 435, 436, 452, 454, 455, 464], "graph": [40, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 100, 101, 102, 103, 104, 105, 107, 108, 109, 112, 125, 127, 131, 134, 135, 136, 138, 139, 140, 141, 164, 189, 233, 254, 256, 320, 327, 351, 390, 394, 411, 413, 415, 421, 425, 428, 429, 454, 455, 459], "pytorchqueri": 40, "querybackendcap": [41, 394], "tensorflowadaptor": 42, "stock": [42, 435, 458], "spr": 42, "tensorflow_itexadaptor": 42, "itex": [42, 104, 174, 175, 253, 454], "tensorflowqueri": [42, 394], "performance_onli": [42, 43, 44, 102, 126, 131, 140, 174, 426], "itex_mod": [42, 43, 84, 102, 126, 131], "quant_mod": [42, 307, 368], "graphconvert": 43, "qt_config": 43, "recip": [43, 164, 174, 175, 254, 256, 293, 417, 426, 458, 461], "int8_sequ": 43, "fp32_op": [43, 45, 102], "bf16_op": [43, 45, 102, 455], "data_load": [43, 44, 394], "fake_qu": [43, 83, 102, 126, 131], "qdq_enabl": 43, "new_api": [43, 44, 66, 67, 72, 74, 87, 94, 126, 131, 136], "use_bf16": [43, 44, 174, 453], "without": [44, 85, 141, 167, 207, 249, 290, 309, 370, 388, 410, 413, 415, 425, 426, 437, 451, 452, 453, 461, 462], "graphconverterwithoutcalib": 44, "recover_config": 44, "rewrit": [45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 101, 102, 103, 104, 219], "bf16convert": [45, 455], "biasadd": [47, 54, 59, 61, 104, 419], "convertaddtobiasaddoptim": 47, "conv2d": [47, 54, 55, 56, 60, 61, 66, 120, 130, 136, 419, 458, 459, 461], "addv2": [47, 64, 419], "layout": 48, "convertlayoutoptim": 48, "optim": [48, 69, 70, 74, 75, 111, 113, 164, 167, 171, 174, 175, 211, 217, 219, 256, 257, 273, 293, 297, 310, 356, 373, 374, 381, 384, 391, 393, 409, 413, 414, 415, 419, 420, 422, 423, 426, 428, 429, 431, 433, 434, 437, 440, 450, 451, 452, 453, 454, 455, 457, 458, 459, 461, 463], "nchw": 48, "nhwc": 48, "It": [48, 156, 166, 178, 179, 216, 222, 223, 263, 265, 272, 288, 293, 300, 316, 318, 319, 352, 357, 361, 373, 394, 413, 426, 432, 435, 440, 446, 447, 451, 454, 457, 461, 463], "exist": [48, 155, 172, 208, 327, 417, 425, 433, 461], "4": [48, 155, 166, 174, 175, 199, 202, 203, 207, 243, 246, 249, 258, 259, 261, 311, 312, 314, 371, 388, 394, 409, 415, 416, 419, 422, 423, 425, 426, 434, 450, 451, 454, 458, 460, 461, 464], "abov": [48, 394, 413, 451, 454, 458], "graph_def": [48, 141, 253, 319, 327, 351, 352], "leakyrelu": [49, 458], "convertleakyreluoptim": 49, "below": [49, 61, 69, 174, 175, 294, 318, 352, 389, 390, 393, 394, 410, 413, 415, 421, 425, 429, 431, 439, 440, 443, 446, 448, 449, 451, 453, 454, 457, 458, 459, 461, 462], "subgraph": [49, 61, 100, 148, 417], "maximum": [49, 166, 167, 174, 175, 190, 207, 234, 249, 259, 290, 297, 312, 356, 411, 426, 451, 454, 460], "note": [49, 166, 261, 301, 314, 362, 391, 415, 417, 419, 423, 426, 431, 434, 439, 443, 446, 451, 454, 458, 459, 461, 462, 463], "coeffici": [49, 451], "less": [49, 141, 174, 175, 384, 409, 413, 426, 451], "than": [49, 141, 190, 207, 234, 249, 384, 391, 393, 409, 411, 421, 425, 448, 449, 451, 454, 457, 460, 461], "convers": [49, 175, 267, 394, 426, 427, 454, 455, 458], "valid": [49, 62, 63, 100, 167, 170, 174, 175, 192, 236, 261, 289, 290, 314, 327, 389, 391, 393, 394, 411, 413, 416, 419, 422, 424, 426, 437, 451, 454, 456], "nan": 50, "random": [50, 141, 174, 175, 203, 207, 246, 249, 257, 273, 297, 299, 310, 356, 360, 384, 389, 391, 426, 453, 460, 463], "convertnantorandom": 50, "const": [50, 51, 58, 59, 62, 63, 65, 77, 93], "consist": [50, 58, 389, 390, 417, 458, 461], "placehold": [51, 188, 232], "convertplaceholdertoconst": 51, "train": [51, 75, 147, 153, 156, 165, 167, 174, 175, 178, 179, 190, 192, 207, 217, 222, 223, 234, 236, 249, 250, 267, 290, 310, 352, 376, 391, 393, 394, 399, 411, 413, 414, 417, 422, 427, 429, 435, 446, 449, 451, 452, 457, 458, 461, 463], "rerewrit": 52, "dequantizecastoptim": 52, "b16": 52, "dilat": 53, "contract": 53, "dilatedcontract": 53, "spacetobatchnd": 53, "batchtospacend": 53, "pattern": [53, 54, 56, 73, 91, 102, 103, 104, 126, 131, 149, 159, 161, 164, 165, 167, 168, 171, 174, 175, 192, 236, 257, 278, 279, 281, 286, 290, 307, 310, 368, 394, 411, 419, 422, 426, 447, 449, 453, 458, 464], "inject": [54, 426], "dummi": [54, 164, 193, 194, 237, 238, 255, 265, 318, 393, 411, 420, 425, 426], "injectdummybiasaddoptim": 54, "fusion": [54, 56, 65, 73, 104, 121, 122, 123, 126, 127, 128, 132, 390, 394, 419], "expanddim": 55, "expanddimsoptim": 55, "next": [55, 183, 227, 371, 391, 453, 461], "featch": 56, "reshap": [56, 62, 63, 68, 458], "fetchweightfromreshapeoptim": 56, "handl": [56, 141, 147, 153, 380, 390, 392, 410, 458], "batchnorm": [57, 62, 116, 390, 458], "foldbatchnormnodesoptim": 57, "graphfoldconstantoptim": 58, "sequenc": [58, 100, 165, 166, 174, 175, 190, 206, 207, 234, 248, 249, 259, 263, 288, 312, 316, 394, 411, 419, 451, 460], "self": [58, 164, 174, 175, 329, 394, 410, 411, 422, 425, 457, 459, 461], "supported_op_typ": 58, "fusebiasaddandaddoptim": 59, "second": [59, 165, 174, 175, 190, 234, 357, 384, 426, 439, 443, 447, 458, 461, 463], "columnwis": 60, "fusecolumnwisemuloptim": 60, "depthwiseconv2dn": [60, 66, 120, 130, 419], "math": [61, 454], "fuseconvwithmathoptim": 61, "elimin": 61, "sub": [61, 149, 155, 164, 208, 254, 391, 461], "realdiv": [61, 64], "decompos": [62, 63], "fusedecomposedbnoptim": 62, "input_graph_def": [62, 63, 65], "node_name_from_input": [62, 63, 65], "node_nam": [62, 63, 65, 141, 254, 327, 337], "strip": [62, 63, 65, 78, 79, 141, 459], "port": [62, 63, 65], "other": [62, 63, 65, 147, 153, 189, 233, 263, 316, 327, 388, 389, 390, 419, 422, 424, 426, 428, 448, 450, 451, 454, 458, 460, 461, 464], "underli": [62, 63, 65], "node_from_map": [62, 63, 65], "node_map": [62, 63, 65], "pull": [62, 63, 65], "def": [62, 63, 65, 178, 179, 222, 223, 352, 371, 373, 390, 394, 410, 411, 413, 414, 415, 425, 426, 454, 458, 459, 461], "entri": [62, 63, 65, 143, 214, 256, 294, 384, 424], "index": [62, 63, 65, 100, 155, 175, 183, 188, 192, 227, 232, 236, 272, 384, 411, 425, 447, 458], "everi": [62, 63, 65, 166, 167, 174, 175, 288, 290, 394, 434, 439, 443, 461], "identifi": [62, 63, 65, 261, 314, 327, 451], "want": [62, 63, 65, 164, 174, 175, 188, 190, 232, 234, 290, 357, 373, 390, 394, 411, 415, 425, 426, 427, 434, 446, 447, 448, 457, 459, 461], "nodedef": [62, 63, 65], "rais": [62, 63, 65, 100, 166, 167, 170, 261, 288, 289, 290, 314, 319, 371, 393, 451, 452], "valueerror": [62, 63, 65, 261, 314, 371, 418], "If": [62, 63, 65, 69, 155, 174, 175, 178, 179, 192, 207, 222, 223, 236, 249, 289, 319, 352, 371, 373, 389, 390, 409, 411, 415, 417, 423, 424, 425, 426, 427, 432, 440, 441, 444, 446, 448, 454, 457, 458, 459, 460, 461], "isn": [62, 63, 65], "t": [62, 63, 65, 136, 154, 166, 174, 175, 207, 210, 249, 263, 316, 390, 394, 413, 415, 426, 447, 451, 454, 461, 463], "present": [62, 63, 65, 452, 458], "values_from_const": [62, 63, 65], "node_def": [62, 63, 65], "extract": [62, 63, 65, 164, 192, 236, 309, 370, 411], "access": [62, 63, 65, 172, 175, 379, 384, 441, 444], "valid_reshape_input": [62, 63], "reshape_in0_ndef": [62, 63], "reshape_in1_ndef": [62, 63], "ar": [62, 63, 100, 149, 166, 167, 174, 175, 190, 207, 234, 249, 261, 265, 272, 288, 289, 290, 294, 296, 297, 314, 318, 353, 355, 356, 370, 371, 376, 383, 384, 388, 389, 390, 391, 393, 394, 410, 411, 413, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 429, 432, 434, 437, 440, 446, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 463], "bypass_reshap": [62, 63], "input_node_map": [62, 63], "input_nam": [62, 63, 97, 135, 175, 253, 254, 417], "get_const_dim_count": [62, 63], "dimens": [62, 63, 100, 182, 207, 226, 249, 411, 413, 460], "instancenorm": [63, 458], "fusedecomposedinoptim": 63, "gelu": 64, "fusegeluoptim": 64, "sqrt": 64, "erf": 64, "samll": 65, "layernorm": [65, 458], "fuselayernormoptim": 65, "remap": 65, "smaller": [65, 207, 249, 413, 426, 451, 460], "case": [65, 69, 155, 175, 189, 206, 207, 208, 233, 248, 249, 256, 280, 285, 293, 329, 410, 413, 414, 415, 419, 421, 425, 430, 434, 446, 447, 448, 451, 452, 454, 456, 460, 462, 463, 464], "fusedbatcnormv3": 65, "And": [65, 390, 409, 426, 432, 458], "further": [65, 175, 388, 427, 428, 429, 431, 440, 446, 454], "restrict": [65, 174, 175, 451, 457], "2d": [65, 458], "3d": [65, 452, 458], "kera": [65, 111, 175, 192, 199, 214, 236, 243, 322, 327, 415, 428, 436, 437, 464], "fusepadwithconv2doptim": 66, "excluded_op_nam": [66, 67, 171, 174, 175, 426, 451], "cfg": [66, 67, 149, 171, 307, 368, 376], "itex_qdq_mod": [66, 67], "conv3d": [66, 120], "fusepadwithfp32conv2doptim": 67, "fusetransposereshapeoptim": 68, "cse": [69, 93], "graphcseoptim": 69, "introduc": [69, 389, 394, 417, 419, 426, 454, 456, 458, 462], "ident": [69, 75, 165, 388, 413], "three": [69, 170, 190, 234, 296, 353, 355, 390, 394, 410, 417, 423, 427, 440, 449, 454, 455, 457, 458, 459], "d": [69, 149, 413, 421, 447, 464], "those": [69, 300, 361, 384, 413, 414, 421, 426, 449, 451, 454, 461], "child": [69, 459], "b1": 69, "c1c2": 69, "d1": [69, 384], "c1": 69, "c2": 69, "memori": [69, 256, 280, 285, 293, 329, 384, 410, 414, 426, 427, 429, 448, 451, 454, 458, 461], "bound": [69, 155, 207, 249, 261, 297, 314, 356, 425, 460], "like": [69, 91, 93, 141, 164, 170, 175, 178, 179, 180, 192, 222, 223, 224, 236, 256, 265, 290, 293, 294, 318, 327, 352, 373, 389, 390, 391, 394, 413, 414, 422, 434, 449, 451, 454, 456, 458, 461], "relu": [69, 73, 104, 390, 419, 458, 459], "relu6": [69, 419], "updat": [69, 149, 160, 166, 170, 254, 290, 318, 352, 381, 417, 418, 425, 426, 432, 437, 440, 450, 451, 458, 461, 462], "graphdef": [69, 141, 327, 351, 428], "grappler": [70, 419], "grappleroptim": 70, "input_output_nam": 70, "opt_cfg": 70, "wrapper": [70, 97, 98, 99, 100, 117, 142, 157, 189, 207, 209, 210, 212, 213, 219, 233, 249, 261, 265, 314, 318, 323, 327, 455], "leverag": [70, 391, 393, 413, 417, 429, 446, 449, 454, 461], "built": [70, 176, 177, 181, 186, 190, 191, 196, 198, 200, 201, 203, 204, 207, 212, 214, 220, 221, 225, 228, 230, 234, 235, 240, 242, 244, 245, 246, 247, 249, 294, 318, 321, 329, 352, 373, 391, 394, 411, 415, 426, 439, 443, 448, 454, 460, 461, 463], "convert_add_to_biasadd": [71, 82, 106], "convert_layout": [71, 82, 106], "convert_leakyrelu": [71, 82, 106], "convert_nan_to_random": [71, 82, 106], "convert_placeholder_to_const": [71, 82, 106], "dequantize_cast_optim": [71, 82, 106], "dilated_contract": [71, 82, 106], "dummy_biasadd": [71, 82, 106], "expanddims_optim": [71, 82, 106], "fetch_weight_from_reshap": [71, 82, 106], "fold_batch_norm": [71, 82, 106], "fold_const": [71, 82, 106], "fuse_biasadd_add": [71, 82, 106], "fuse_column_wise_mul": [71, 82, 106], "fuse_conv_with_math": [71, 82, 106], "fuse_decomposed_bn": [71, 82, 106], "fuse_decomposed_in": [71, 82, 106], "fuse_gelu": [71, 82, 106], "fuse_layer_norm": [71, 82, 106], "fuse_pad_with_conv": [71, 82, 106], "fuse_pad_with_fp32_conv": [71, 82, 106], "fuse_reshape_transpos": [71, 82, 106], "graph_cse_optim": [71, 82, 106], "grappler_pass": [71, 82, 106], "insert_print_nod": [71, 82, 106], "move_squeeze_after_relu": [71, 82, 106], "pre_optim": [71, 82, 106], "remove_training_nod": [71, 82, 106], "rename_batch_norm": [71, 82, 106], "split_shared_input": [71, 82, 106], "strip_equivalent_nod": [71, 82, 106, 141], "strip_unused_nod": [71, 82, 106, 141], "switch_optim": [71, 82, 106], "print": [72, 143, 164, 265, 318, 371, 384, 415, 425, 426, 451, 458, 461], "insertprintminmaxnod": 72, "pre_node_nam": 72, "post_node_nam": 72, "pass": [72, 141, 155, 318, 352, 384, 390, 394, 409, 411, 413, 414, 415, 417, 421, 425, 426, 447, 451, 453, 454, 455, 458, 463], "sampl": [72, 174, 175, 183, 188, 190, 191, 192, 203, 207, 227, 232, 234, 235, 236, 246, 249, 265, 272, 297, 318, 356, 391, 393, 411, 416, 422, 447, 454, 460, 461, 463, 464], "move": [73, 390, 453, 456], "squeez": [73, 390], "movesqueezeafterreluoptim": 73, "match": [73, 97, 164, 261, 262, 314, 315, 413, 447], "pre": [74, 111, 164, 178, 179, 190, 222, 223, 234, 319, 352, 373, 411, 413, 414, 426, 427, 434, 451, 452, 454, 459, 461], "entranc": [74, 181], "preoptim": 74, "removetrainingnodesoptim": 75, "protected_nod": 75, "types_to_splic": 75, "checknumer": 75, "stopgradi": 75, "renam": [76, 456], "fusedbatchnorm": 76, "fusedbatchnormv2": 76, "renamebatchnormoptim": 76, "splitsharedinputoptim": 77, "equival": [78, 458], "stripequivalentnodesoptim": 78, "output_node_nam": [78, 79, 126, 127, 131, 141], "unus": [79, 141], "stripunusednodesoptim": 79, "input_node_nam": [79, 126, 131, 141], "switch": [80, 429, 459], "switchoptim": 80, "condit": [80, 190, 191, 192, 207, 234, 235, 236, 249, 296, 353, 355, 411, 424, 460, 461], "graphrewriterbas": 81, "abstract": [81, 156, 207, 249, 250, 256, 293, 394, 421], "freeze_fake_qu": [82, 90, 106], "freeze_valu": [82, 90, 106], "freeze_value_without_calib": [82, 90, 106], "fuse_conv_redundant_dequant": [82, 90, 106], "fuse_conv_requant": [82, 90, 106], "fuse_matmul_redundant_dequant": [82, 90, 106], "fuse_matmul_requant": [82, 90, 106], "meta_op_optim": [82, 90, 106], "post_hostconst_convert": [82, 90, 106], "post_quantized_op_cs": [82, 90, 106], "rnn_convert": [82, 90, 106], "scale_propag": [82, 90, 106], "onnx_graph": [82, 96, 106], "onnx_schema": [82, 96, 106], "tf2onnx_util": [82, 96, 106], "insert_qdq_pattern": [82, 101, 106], "merge_duplicated_qdq": [82, 101, 106], "share_qdq_y_pattern": [82, 101, 106], "freez": [83, 84, 85, 429, 451], "fakequ": 83, "freezefakequantopoptim": 83, "follow": [83, 105, 165, 192, 236, 258, 261, 311, 314, 388, 389, 390, 391, 394, 410, 411, 413, 414, 415, 417, 419, 423, 424, 425, 426, 427, 428, 429, 430, 431, 439, 443, 449, 451, 453, 454, 458, 459, 461], "freezevaluetransform": 84, "max_min_data": [84, 85], "postfix": [84, 85], "tensor_data": [84, 384, 385], "th": [84, 85], "gpu": [84, 85, 92, 174, 175, 393, 409, 422, 426, 427, 431, 437, 446, 453, 454], "freezevaluewithoutcalibtransform": 85, "95": [85, 265, 318, 425, 458, 464], "quantizedconv": [86, 87], "quantizeddeconv": 86, "redund": [86, 88], "fuseconvredundantdequantizetransform": 86, "cpu": [86, 87, 88, 89, 174, 175, 384, 393, 409, 422, 426, 427, 429, 431, 437, 446, 450, 452, 453, 454, 455, 459], "_quantizedconv": 86, "_quantizeddeconv": 86, "successor": [86, 87, 88, 89], "requant": [87, 89, 459], "fuseconvrequantizetransform": 87, "quantizedmatmul": [88, 89], "fusematmulredundantdequantizetransform": 88, "_quantizedmatmul": [88, 89], "fusematmulrequantizedequantizetransform": 89, "quantizedmatmulwithbiasanddequant": 89, "fusematmulrequantizetransform": 89, "fusematmulrequantizedequantizenewapitransform": 89, "fusematmulrequantizenewapitransform": 89, "newapi": 89, "meta": [91, 452], "metainfochangingmemopoptim": 91, "metaop": 91, "With": [91, 329, 390, 393, 394, 410, 426, 434, 439, 443, 447, 448, 451, 452, 457, 458, 461, 464], "chang": [91, 136, 147, 154, 167, 169, 174, 175, 290, 292, 359, 384, 389, 410, 415, 418, 424, 425, 426, 429, 439, 440, 443, 446, 451, 459, 460, 461], "better": [91, 174, 175, 178, 179, 222, 223, 272, 319, 352, 373, 414, 425, 427, 451, 452, 454, 457, 461], "perform": [91, 155, 168, 174, 175, 190, 202, 203, 208, 234, 246, 256, 280, 285, 293, 300, 318, 329, 352, 357, 361, 390, 391, 394, 409, 410, 411, 412, 414, 416, 417, 422, 423, 425, 426, 427, 428, 429, 431, 435, 437, 440, 446, 448, 449, 450, 451, 452, 453, 454, 455, 458, 459, 461, 463, 464], "post": [92, 93, 147, 153, 167, 175, 178, 179, 222, 223, 254, 352, 388, 393, 394, 414, 415, 422, 423, 429, 435, 446, 451, 452, 458, 459, 461], "hostconst": 92, "posthostconstconvert": 92, "just": [92, 180, 205, 207, 210, 212, 213, 215, 224, 249, 329, 391, 426, 436, 440, 446, 449, 454, 458, 460, 461], "postcseoptim": 93, "duplic": [93, 103, 297, 356], "quantizev2": 93, "decreas": [93, 451], "size": [93, 166, 182, 183, 189, 192, 198, 203, 207, 226, 227, 233, 236, 242, 246, 249, 288, 329, 384, 388, 410, 411, 415, 418, 426, 446, 447, 448, 451, 458, 460, 463, 464], "rnn": 94, "quantizedrnnconvert": 94, "calibration_data": [94, 102], "rnn_detail": 94, "scalepropagationtransform": 95, "direct": [95, 166, 288, 451], "export": [96, 175, 257, 261, 310, 314, 393, 420, 432, 447, 459, 462], "onnxgraph": 97, "output_shap": 97, "opset": [97, 99, 100, 175, 253, 254], "extra_opset": 97, "output_nam": [97, 135, 175, 253, 254, 417], "is_subgraph": 97, "graph_nam": 97, "manipul": [97, 98], "onnxnod": 98, "skip_convers": 98, "schema": 99, "onnxopschema": 99, "domain": [99, 100, 174, 175, 451, 461], "since_vers": 99, "get_schema": 99, "max_inclusive_opset_vers": 99, "within": [99, 167, 256, 261, 293, 314, 327, 346, 351, 388, 390, 427, 439, 443, 446, 452, 458], "get_max_supported_opset_vers": 99, "packag": [99, 394, 418, 423, 446, 447, 452, 456, 461], "set_nam": 100, "find_opset": 100, "assert_error": 100, "bool_val": 100, "error_msg": 100, "error": [100, 143, 265, 300, 318, 361, 380, 425, 430, 458, 461], "messag": [100, 139, 461], "map_numpy_to_onnx_dtyp": 100, "np_dtype": 100, "map_onnx_to_numpy_typ": 100, "onnx_typ": 100, "add_port_to_nam": 100, "nr": 100, "get_tensorflow_node_attr": 100, "pars": [100, 149, 190, 191, 203, 207, 234, 235, 246, 249, 335, 336, 340, 460], "get_tensorflow_tensor_shap": 100, "get_tensorflow_node_shape_attr": 100, "attr": [100, 141, 164], "map_tensorflow_dtyp": 100, "get_tensorflow_tensor_data": 100, "convert_tensorflow_tensor_to_onnx": 100, "read_tensorflow_node_attr": 100, "read": [100, 141, 195, 207, 239, 249, 289, 411, 455, 457], "infer_onnx_shape_dtyp": 100, "opset_vers": [100, 135, 175, 253, 254, 417], "input_shap": [100, 194, 238, 410, 411], "input_dtyp": 100, "sometim": [100, 390, 454], "so": [100, 207, 249, 370, 390, 394, 418, 422, 425, 432, 434, 454, 455, 458, 459, 460, 462], "make_onnx_shap": 100, "seqtyp": 100, "tensor_dtyp": 100, "around": 100, "signifi": 100, "make_onnx_inputs_output": 100, "elem_typ": 100, "text": [100, 206, 207, 248, 249, 258, 263, 291, 311, 316, 417, 424, 435, 451, 452, 458, 460, 464], "datatyp": [100, 149, 455, 461], "save_protobuf": 100, "path": [100, 141, 149, 164, 170, 171, 190, 191, 192, 207, 234, 235, 236, 249, 250, 253, 254, 256, 267, 268, 269, 271, 280, 285, 289, 291, 293, 294, 307, 319, 327, 351, 352, 368, 381, 384, 390, 391, 394, 410, 411, 415, 421, 425, 426, 427, 428, 432, 435, 446, 449, 460, 463], "as_text": 100, "protobuf": 100, "is_onnx_domain": 100, "is_list_or_tupl": 100, "are_shapes_equ": 100, "src": [100, 447], "dest": 100, "equal": [100, 136, 141, 154, 371, 384, 425, 451], "get_subgraphs_from_onnx": 100, "model_proto": 100, "over": [100, 192, 236, 265, 318, 416, 420, 422, 425, 437, 446, 453, 458, 461], "df": 100, "initialize_name_count": 100, "avoid": [100, 190, 234, 390, 459], "conflict": [100, 418], "counter": 100, "make_nam": 100, "get_index_from_strided_slice_of_shap": 100, "outputs_to_valu": 100, "stride": [100, 207, 249, 460], "slice": 100, "compute_const_folding_using_tf": 100, "g": [100, 166, 174, 175, 413, 416, 420, 429, 434, 451, 456, 458, 461], "const_node_valu": 100, "graph_output": 100, "constant": [100, 254, 257, 297, 299, 305, 310, 356, 360, 366, 377, 410, 419, 460], "tf": [100, 111, 141, 189, 190, 191, 192, 207, 233, 234, 235, 236, 249, 325, 327, 415, 428, 452, 455, 460], "generategraphwithqdqpattern": 102, "op_wise_config": [102, 126, 131], "quantized_nod": 102, "dq": [102, 104, 126, 458], "pair": [102, 174, 175, 410, 426, 427], "merg": [103, 182, 226, 307, 368, 441, 444, 459, 461], "mergeduplicatedqdqoptim": 103, "y": [104, 174, 175, 207, 249, 297, 356, 418, 432, 458, 460], "shareqdqforitexypatternoptim": 104, "enabl": [104, 143, 167, 174, 175, 290, 415, 423, 427, 429, 431, 434, 435, 437, 450, 451, 452, 461], "break": [104, 415, 426], "graphanalyz": 105, "extend_engin": 105, "analyz": [105, 164, 327, 457, 458, 459], "under": [105, 174, 175, 192, 236, 383, 391, 411, 424, 425, 426, 429, 434, 435, 446, 449, 451, 458, 459, 461], "singleton": [105, 384], "specifi": [105, 149, 155, 174, 175, 178, 179, 207, 208, 222, 223, 249, 256, 261, 265, 268, 271, 280, 285, 293, 294, 314, 318, 319, 352, 371, 373, 383, 384, 415, 419, 425, 426, 434, 448, 453, 460, 461, 463], "graphrewriterhelp": 105, "encapsul": [105, 178, 179, 222, 223, 319, 352, 373, 428], "quantize_lay": [106, 107, 109], "fake_quant": [106, 107, 109], "quantize_config": [106, 107, 109], "quantize_help": [106, 107, 109], "quantize_wrapp": [106, 107, 109], "fuse_qdq_bn": [106, 107, 125], "fuse_qdq_concatv2": [106, 107, 125], "fuse_qdq_conv": [106, 107, 125], "fuse_qdq_deconv": [106, 107, 125], "fuse_qdq_in": [106, 107, 125], "fuse_qdq_matmul": [106, 107, 125], "fuse_qdq_pool": [106, 107, 125], "optimize_qdq": [106, 107, 125], "optimize_lay": [107, 109, 112], "quantize_layer_add": [107, 109, 112], "quantize_layer_bas": [107, 109, 112], "quantize_layer_bn": [107, 109, 112], "fake": [108, 147, 153, 370, 426, 454, 458], "fakequantizebas": 108, "abc": [108, 263, 316, 394, 459, 461], "appli": [108, 121, 122, 123, 126, 128, 132, 156, 167, 217, 259, 312, 388, 426, 429, 431, 437, 446, 449, 451, 454, 455, 457, 458, 461, 462, 463], "fakequant": 108, "per_channel": [108, 419, 454, 463], "num_bit": [108, 149, 458], "8": [108, 174, 175, 206, 248, 390, 419, 423, 451, 452, 458, 461, 464], "channel_axi": [108, 151, 154], "symmetr": [108, 454, 460, 461], "narrow_rang": 108, "quantizeconfig": [110, 111], "custom": [110, 155, 294, 318, 329, 383, 409, 413, 414, 429, 451, 457], "There": [110, 294, 296, 353, 355, 413, 419, 422, 425, 426, 427, 429, 458, 461, 463], "instanc": [110, 111, 155, 174, 175, 178, 179, 208, 222, 223, 262, 263, 265, 268, 271, 274, 275, 277, 278, 279, 297, 309, 315, 316, 318, 319, 352, 356, 370, 373, 384, 388, 390, 394, 409, 426, 431, 437, 463, 464], "global": [110, 166, 174, 175, 274, 275, 277, 278, 279, 288, 384, 390, 426, 451, 453, 461], "class": [111, 145, 149, 272, 319, 352, 390, 391, 410, 411, 413, 425, 426, 437, 448, 449, 454, 456, 459, 461, 463], "init_quantize_config": 111, "quantize_recip": 111, "begin": [111, 167, 290, 413, 414, 426, 451, 461], "process": [111, 143, 155, 166, 167, 169, 170, 174, 175, 178, 179, 190, 191, 192, 203, 207, 208, 222, 223, 234, 235, 236, 246, 249, 254, 288, 290, 292, 296, 297, 319, 352, 353, 355, 356, 373, 383, 384, 391, 394, 410, 411, 413, 414, 415, 417, 426, 430, 449, 451, 454, 458, 459, 460, 463], "model_nam": [111, 174, 175], "special": [111, 164, 329, 390, 410, 425, 426, 448, 451, 462], "decid": [111, 174, 175, 259, 290, 312, 394, 426, 454, 456, 461], "qat_clone_funct": 111, "leav": [111, 440], "quantizewrapp": [111, 117], "wrapped_lay": 111, "config_quantizable_lay": 113, "quantizelayeradd": 114, "quantizelay": 115, "quantizelayerbas": 115, "quantizelayerbatchnorm": 116, "quantizewrapperbas": 117, "fusedbatchnormv3": [118, 128], "fusenodestartwithfusedbatchnormv3": [118, 128], "_quantizedfusedbatchnorm": 118, "concatv2": [119, 129, 140, 419], "fusenodestartwithconcatv2": [119, 129], "quantizedconcatv2": [119, 129], "fusenodestartwithconv2d": [120, 130], "conv2dbackpropinput": 121, "conv3dbackpropinputv2": 121, "fusenodestartwithdeconv2d": 121, "fusedinstancenorm": 122, "fusenodestartwithfusedinstancenorm": 122, "batchmatmul": 123, "batchmatmulv2": 123, "fusenodestartwithmatmul": [123, 132], "avgpool": [124, 133, 419], "fusenodestartwithpool": [124, 133], "optimizeqdqgraph": 126, "input_graph": [126, 131, 136, 347, 351, 394], "op_wise_sequ": [126, 131], "quantizegraph": 127, "quantizegraphbas": 127, "quantizenodebas": 127, "quantizegraphforintel": 131, "common": [134, 175, 205, 257, 267, 271, 272, 273, 310, 376, 388, 411, 414, 415, 417, 421, 423, 426, 454, 458], "herlper": 134, "quantizegraphhelp": 134, "sever": [134, 169, 207, 249, 292, 391, 413, 414, 422, 426, 427, 439, 443, 451, 453, 458, 460, 461, 463], "staticmethod": 134, "function": [134, 174, 175, 178, 179, 191, 222, 223, 235, 268, 271, 280, 285, 390, 391, 394, 409, 410, 413, 414, 421, 422, 423, 425, 426, 427, 437, 447, 451, 454, 457, 458, 459, 461, 462], "tensorflowqdqtoonnxqdqconvert": 135, "shape_overrid": 135, "inputs_as_nchw": [135, 253], "default_opset_vers": 135, "bia": [136, 174, 175, 254, 459], "correct": [136, 154, 170, 174, 175, 261, 262, 263, 265, 289, 314, 315, 316, 318, 388, 429], "biascorrect": 136, "fp32_graph": 136, "method": [136, 149, 168, 174, 175, 183, 188, 189, 190, 192, 199, 207, 210, 227, 232, 233, 234, 236, 243, 249, 271, 272, 273, 307, 368, 370, 376, 377, 379, 380, 390, 391, 393, 411, 413, 414, 425, 426, 449, 451, 454, 455, 458, 460, 461], "weight_empir": 136, "Will": [136, 413, 422], "our": [136, 149, 174, 175, 391, 393, 417, 426, 447, 457, 462], "task": [136, 190, 197, 234, 241, 265, 318, 411, 413, 414, 417, 422, 425, 426, 451, 458], "close": [136, 154], "w_int8": [136, 154], "u": [136, 154, 393, 429], "w_fp32": [136, 154], "varianc": [136, 154], "ratio": [136, 154, 166, 167, 170, 174, 175, 203, 207, 246, 249, 290, 411, 426, 451, 460, 464], "differ": [136, 150, 154, 157, 165, 174, 175, 183, 192, 207, 209, 227, 236, 249, 256, 265, 271, 273, 282, 293, 318, 329, 378, 388, 390, 391, 410, 411, 413, 415, 416, 417, 421, 422, 425, 426, 428, 439, 443, 448, 451, 454, 458, 459, 460, 461], "wise": [136, 154, 174, 175, 297, 300, 356, 357, 361, 422, 451, 459, 461, 463], "minim": [136, 154, 297, 356, 413, 416, 425, 426, 439, 443, 451, 454, 461], "round": [136, 154, 454, 458], "scale_c": [136, 154], "shift": [136, 154, 203, 246, 447, 460], "notic": [136, 154, 208, 424, 456], "can": [136, 143, 147, 154, 164, 165, 166, 167, 169, 174, 175, 178, 179, 189, 192, 207, 208, 210, 222, 223, 233, 236, 249, 261, 263, 265, 288, 290, 292, 314, 316, 318, 319, 329, 352, 373, 384, 390, 391, 393, 394, 409, 410, 411, 413, 414, 415, 417, 419, 422, 423, 425, 426, 427, 428, 429, 430, 431, 433, 434, 435, 437, 439, 440, 441, 443, 444, 446, 447, 448, 449, 450, 451, 453, 454, 455, 457, 458, 459, 460, 461, 463, 464], "first": [136, 154, 165, 172, 174, 175, 190, 234, 261, 307, 314, 357, 368, 384, 390, 391, 394, 411, 417, 423, 427, 431, 440, 441, 444, 447, 453, 454, 455, 457, 458, 459, 461, 463], "empir": [136, 154], "solut": [136, 154, 393, 394, 418, 431, 435, 440, 452, 458, 461], "don": [136, 154, 166, 174, 175, 390, 451, 461], "min": [136, 154, 384, 451, 454, 458, 460, 461], "graphtransform": 137, "graphtransformbas": 137, "input_pb": [137, 139, 140], "log": [139, 155, 164, 335, 336, 340, 380, 390, 437, 457, 459, 461], "insertlog": 139, "node_name_list": 139, "show_nam": 139, "show_op": 139, "first_n": 139, "summar": [139, 413], "1024": [139, 192, 236, 432], "dump_fp32": 139, "rerang": 140, "rerangequantizedconcat": 140, "rerange_quant": 140, "version1_lt_version2": [141, 384], "version1": [141, 384], "version2": [141, 384], "version1_gt_version2": [141, 384], "greater": [141, 384, 451, 461], "version1_eq_version2": [141, 384], "version1_gte_version2": [141, 384], "version1_lte_version2": [141, 384], "disable_random": 141, "seed": [141, 174, 175, 273, 384, 426, 463], "disabl": [141, 174, 175, 388, 446, 455], "read_graph": 141, "in_graph": 141, "in_graph_is_binari": 141, "write_graph": 141, "out_graph_def": 141, "out_graph_fil": 141, "write": [141, 199, 243, 384, 415, 421, 426, 429, 459], "is_ckpt_format": 141, "model_path": 141, "ckpt": [141, 319, 327, 352, 464], "folder": [141, 192, 197, 236, 241, 319, 352, 383, 411, 434, 439, 443, 459], "is_saved_model_format": 141, "saved_model": [141, 267], "get_estimator_graph": 141, "estim": [141, 265, 318, 327, 461], "input_fn": [141, 327], "get_tensor_by_nam": 141, "try_cnt": 141, "3": [141, 167, 175, 192, 207, 236, 249, 261, 314, 371, 390, 391, 393, 410, 411, 413, 415, 417, 419, 420, 423, 425, 426, 427, 429, 433, 437, 439, 443, 448, 453, 454, 457, 458, 460, 461, 464], "consid": [141, 265, 318, 388, 413, 447, 461], "import": [141, 155, 174, 175, 267, 319, 329, 352, 371, 373, 384, 390, 391, 393, 409, 410, 411, 413, 414, 415, 417, 420, 425, 426, 427, 428, 429, 433, 435, 448, 449, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461], "scope": [141, 426], "more": [141, 147, 153, 166, 207, 249, 288, 391, 392, 393, 411, 413, 415, 420, 422, 423, 425, 426, 427, 429, 437, 441, 444, 448, 449, 451, 455, 458, 461, 462, 464], "onc": [141, 169, 214, 292, 296, 353, 355, 410, 446, 451, 452, 461, 464], "both": [141, 175, 388, 391, 394, 414, 426, 430, 451, 453, 454, 458, 461], "compat": [141, 327, 415, 428, 441, 444, 446, 456], "v1": [141, 202, 203, 246, 262, 263, 265, 315, 316, 318, 327, 415, 418, 425, 428, 451, 456, 457, 464], "suffix": 141, "time": [141, 174, 175, 207, 249, 265, 297, 318, 329, 356, 384, 415, 418, 426, 434, 436, 439, 443, 446, 447, 448, 451, 452, 454, 457, 459, 460, 461], "got": [141, 418, 459], "iterator_sess_run": 141, "sess": [141, 327], "iter_op": 141, "feed_dict": [141, 189, 233], "output_tensor": [141, 327], "measur": [141, 208, 319, 378, 391, 394, 409, 413, 425, 426, 459, 461], "integr": [141, 157, 209, 394, 426, 447], "session": [141, 189, 233, 327, 426, 459], "makeiter": 141, "feed": [141, 189, 233, 413, 451], "end": [141, 167, 174, 175, 190, 206, 207, 234, 248, 249, 290, 296, 353, 355, 394, 413, 414, 419, 423, 426, 440, 448, 451, 459, 460, 461], "predict": [141, 207, 212, 249, 258, 262, 263, 265, 311, 315, 316, 318, 352, 391, 413, 425, 437, 458, 459, 460], "pred": [141, 265, 318, 425], "collate_tf_pr": 141, "collat": [141, 149], "tbe": 141, "get_input_output_node_nam": 141, "fix_ref_type_of_graph_def": 141, "fix": [141, 167, 190, 234, 290, 389, 411, 433, 451, 458, 461], "strip_unused_lib": 141, "offici": [141, 258, 262, 263, 311, 315, 316, 388, 425, 458], "r1": 141, "15": [141, 419, 464], "branch": 141, "get_graph_def": 141, "auto_input_output": 141, "get_model_input_shap": 141, "inout": 141, "get_tensor_val_from_graph_nod": 141, "graph_node_name_map": 141, "val": [141, 170, 192, 195, 236, 239, 289, 426], "tensor_v": 141, "int8_node_name_revers": 141, "revers": 141, "tf_diagnosis_help": 141, "fp32_model": [141, 143, 149, 254, 384, 394], "quan_model": 141, "save_path": [141, 253, 254, 394, 428], "diagnosi": [141, 174, 175, 426], "generate_feed_dict": 141, "input_tensor": [141, 327], "torch": [142, 143, 144, 145, 146, 147, 148, 149, 153, 164, 165, 166, 171, 174, 175, 219, 254, 319, 352, 383, 390, 393, 395, 413, 415, 417, 426, 427, 428, 429, 434, 437, 454, 458, 459], "bf16modulewrapp": 142, "bf16modul": 142, "mix": [142, 174, 175, 295, 307, 319, 354, 368, 393, 394, 399, 422, 429, 435, 436, 437, 462], "precis": [142, 174, 175, 178, 179, 222, 223, 256, 263, 265, 266, 293, 295, 307, 316, 318, 319, 329, 354, 357, 368, 393, 394, 399, 409, 414, 415, 419, 422, 429, 435, 436, 437, 452, 453, 454, 458, 461, 462], "mixed_precision_model": 142, "bf16_symbolic_trac": 142, "fx_sub_module_list": 142, "trace": [142, 143, 148, 149, 164, 174, 175, 254, 359, 390, 436, 461], "_description_": 142, "hessian": [143, 359, 461], "awar": [143, 156, 175, 217, 267, 288, 359, 373, 394, 414, 415, 417, 422, 427, 446, 449, 461], "node_collector": 143, "hook": [143, 156, 216, 217, 280, 285, 376, 413, 414, 426, 451, 458, 459], "record": [143, 149, 157, 190, 191, 192, 198, 209, 216, 234, 235, 236, 242, 384, 411, 457, 459, 461], "hessiantrac": 143, "q_model": [143, 175, 267, 352, 390, 393, 410, 411, 415, 417, 420, 421, 425, 426, 428, 454, 455], "criterion": [143, 156, 158, 159, 160, 166, 167, 174, 175, 211, 214, 257, 310, 413, 414, 417, 426, 451, 454, 461, 463], "pleas": [143, 147, 153, 160, 166, 167, 174, 175, 190, 191, 192, 195, 234, 235, 236, 239, 288, 290, 291, 318, 352, 371, 390, 391, 392, 393, 394, 409, 411, 414, 415, 423, 425, 427, 429, 430, 434, 437, 451, 454, 455, 456, 457, 458, 462], "refer": [143, 147, 153, 160, 166, 167, 170, 174, 175, 190, 234, 258, 259, 265, 288, 290, 291, 311, 312, 318, 352, 371, 390, 394, 409, 410, 411, 414, 415, 421, 423, 424, 425, 426, 427, 429, 434, 437, 448, 453, 456, 460, 461], "yao": 143, "zhewei": 143, "et": [143, 458], "al": [143, 458], "pyhessian": 143, "network": [143, 160, 166, 290, 359, 391, 413, 414, 417, 426, 450, 452, 454, 458, 461], "through": [143, 178, 179, 222, 223, 318, 319, 352, 393, 409, 419, 421, 422, 425, 432, 448, 449, 451, 453, 454, 458], "len": [143, 175, 207, 249, 411, 415, 460], "2020": 143, "ieee": [143, 427, 458], "intern": [143, 307, 368, 410, 411, 451], "confer": [143, 451, 458], "big": 143, "dong": 143, "zhen": 143, "hawq": [143, 359, 461], "v2": [143, 359, 415, 418, 423, 435, 456, 461, 464], "advanc": [143, 174, 175, 388, 393, 399, 454, 463], "system": [143, 155, 208, 384, 409, 432], "33": [143, 464], "18518": 143, "18529": 143, "openvinotoolkit": 143, "nncf": 143, "develop": [143, 329, 389, 390, 423, 426, 427, 429, 435, 446, 451, 452, 455, 457], "hessian_trac": 143, "compare_weight": 143, "float_dict": 143, "ani": [143, 261, 263, 306, 314, 316, 346, 351, 367, 371, 381, 384, 388, 389, 393, 410, 415, 429, 434, 447, 451, 457], "quantized_dict": 143, "compar": [143, 265, 318, 384, 414, 425, 451, 454, 457, 459, 461], "being": [143, 261, 314], "two": [143, 155, 165, 166, 167, 169, 192, 197, 208, 236, 241, 261, 288, 292, 294, 301, 314, 362, 384, 390, 391, 411, 413, 415, 417, 419, 425, 426, 427, 454, 455, 457, 461, 463], "wt_compare_dict": 143, "float_model": 143, "state_dict": [143, 415, 459], "qmodel": 143, "compute_error": 143, "state": [143, 165, 432, 451], "weight_dict": 143, "hawq_top": 143, "enable_act": 143, "modul": [144, 145, 270, 276, 286, 287, 390, 410, 413, 417, 422, 425, 426, 428, 451, 453, 455, 459, 462], "nn": [145, 147, 149, 164, 165, 174, 175, 219, 254, 319, 352, 383, 390, 413, 417, 426, 428, 458, 459], "detector": 146, "transformerbasedmodelblockpatterndetector": 146, "pattern_lst": 146, "block_pattern": 146, "detect": [146, 149, 164, 174, 175, 261, 265, 314, 318, 323, 390, 429, 436, 437, 451], "ffn": 146, "get_modul": 147, "set_modul": [147, 149], "new_modul": [147, 149], "torchsmoothqu": [147, 458], "example_input": [147, 149, 174, 175, 254, 417], "q_func": [147, 178, 179, 222, 223, 297, 298, 300, 301, 302, 303, 353, 356, 357, 358, 359, 361, 362, 363, 364, 394, 426, 461], "traced_model": [147, 148], "detail": [147, 153, 164, 207, 249, 384, 385, 388, 389, 393, 413, 419, 420, 421, 425, 426, 427, 429, 437, 446, 451, 456, 457, 459, 461, 462, 464], "smoothquant": [147, 149, 153, 393, 452, 462], "accur": [147, 153, 458], "effici": [147, 153, 391, 410, 413, 429, 449, 452, 458, 461], "larg": [147, 153, 393, 410, 413, 426, 451, 452, 458, 464], "languag": [147, 153, 258, 311, 388, 393, 417, 451, 452, 458], "spiq": [147, 153, 458], "free": [147, 153, 165, 167, 178, 179, 222, 223, 352, 388, 393, 425, 435, 440, 448, 457, 458], "could": [147, 153, 166, 178, 179, 192, 222, 223, 236, 294, 319, 352, 373, 388, 390, 414, 426, 449, 451, 454, 458, 462], "absorb": [147, 153], "later": [147, 153, 459], "inplac": 147, "mean": [147, 166, 174, 175, 203, 207, 246, 249, 263, 265, 288, 300, 316, 318, 361, 390, 410, 415, 419, 425, 426, 432, 451, 454, 458, 460, 461, 463], "you": [147, 174, 175, 188, 190, 232, 234, 290, 318, 352, 389, 390, 411, 415, 417, 423, 424, 425, 429, 431, 432, 434, 439, 443, 446, 447, 451, 454, 456, 457, 458, 459, 462], "recov": [147, 384, 394, 414, 458], "graphtrac": 147, "trace_and_fuse_sub_graph": 148, "is_qat": 148, "get_embedding_contigu": 149, "embed": [149, 451], "contigu": 149, "is_fused_modul": 149, "_propagate_qconfig_help": 149, "collate_torch_pr": 149, "fetch": [149, 152, 183, 227, 411], "collate_result": 149, "input2tupl": 149, "append_attr": 149, "fx_model": 149, "fx_white_list": 149, "append": [149, 294, 297, 356, 390, 414, 426, 449], "graphmodul": [149, 390, 455], "addit": [149, 175, 373, 413, 440, 456], "dir": [149, 190, 234, 383, 411, 418, 421], "generate_activation_observ": 149, "observ": [149, 457, 459, 461], "what": [149, 167, 188, 232, 318, 352, 373, 388], "check_cfg_and_qconfig": 149, "op_infos_from_cfg": 149, "output_tensor_ids_op_nam": 149, "paser_cfg": 149, "ops_nam": 149, "get_quantizable_ops_from_cfg": 149, "input_tensor_ids_op_nam": 149, "update_sq_scal": 149, "ipex_config_path": 149, "smoothquant_scale_info": 149, "ipex_config": 149, "json": [149, 191, 207, 235, 249, 411, 428, 447, 460], "temporari": [149, 384, 388], "auto_copi": 149, "fetch_modul": 149, "op_nam": [149, 171, 174, 175, 308, 369, 384, 385, 426, 451, 459], "simple_infer": 149, "get_example_input": 149, "dataset": [149, 178, 179, 180, 182, 183, 186, 187, 188, 189, 201, 210, 222, 223, 224, 226, 227, 230, 231, 232, 233, 245, 257, 261, 262, 263, 265, 294, 310, 314, 315, 316, 318, 319, 352, 373, 376, 391, 393, 394, 410, 415, 420, 425, 426, 434, 451, 454, 456, 458, 461, 463, 464], "example_inp": 149, "get_fallback_ord": 149, "confidence_batch": [149, 461], "fallback": [149, 300, 301, 359, 361, 362, 427, 455, 461], "requantize_cfg": 149, "fall": 149, "back": [149, 207, 213, 249, 446], "order": [149, 258, 259, 294, 297, 300, 309, 311, 312, 356, 361, 370, 390, 425, 453, 458, 459, 461], "confid": 149, "ordered_op": 149, "get_mse_order_per_fp32": 149, "mse": [149, 174, 175, 257, 265, 299, 310, 318, 352, 360, 384, 425, 453, 456], "influenc": [149, 451], "last": [149, 160, 170, 174, 175, 427, 429, 431, 436, 440, 454, 458], "fallback_ord": 149, "get_mse_order_per_int8": 149, "get_torch_vers": 149, "match_datatype_pattern": 149, "calculate_quant_min_max": 149, "unsign": [149, 309, 370], "qmin": 149, "qmax": 149, "get_depth": 149, "depth": [149, 413, 455], "get_dict_at_depth": 149, "target_depth": 149, "nest": [149, 172], "get_element_under_depth": 149, "ops_lst": 149, "get_op_type_by_nam": 149, "quantizable_op": 149, "algorithm_registri": 150, "algorithm_typ": 150, "locat": [150, 170, 207, 249, 415, 432, 439, 443, 446, 454, 456, 460, 463], "registr": [150, 192, 199, 207, 236, 243, 249, 283], "algorithmschedul": 150, "conf": [150, 155, 156, 175, 178, 179, 208, 222, 223, 267, 274, 275, 277, 278, 279, 280, 285, 297, 298, 300, 301, 302, 303, 307, 319, 329, 352, 353, 356, 357, 358, 359, 361, 362, 363, 364, 368, 371, 373, 390, 391, 393, 409, 413, 420, 421, 426, 427, 428, 449, 454, 455, 457, 458, 461], "control": [150, 174, 175, 390, 426, 451, 461], "phase": [150, 391, 426, 451, 454, 455, 461], "fastbiascorrect": [151, 154], "fast_bias_correct": [152, 174, 175, 310, 454], "smooth_quant": [152, 174, 175, 310, 454, 458], "weight_correct": [152, 174, 175, 310, 454], "5": [153, 157, 174, 175, 194, 203, 209, 238, 246, 265, 318, 352, 394, 411, 419, 425, 426, 450, 451, 453, 454, 458, 460, 461, 463, 464], "For": [153, 164, 165, 166, 175, 192, 207, 236, 249, 262, 263, 265, 288, 291, 315, 316, 318, 319, 352, 388, 390, 392, 394, 413, 414, 415, 417, 419, 422, 429, 431, 432, 434, 437, 451, 455, 458, 459, 461, 463, 464], "kernel": [153, 174, 175, 394, 450, 461], "futur": [153, 178, 179, 210, 222, 223, 422, 426, 437, 462], "weightcorrect": 154, "1e": [154, 458, 463], "05": [154, 175, 265, 318, 425, 458, 464], "evalu": [155, 156, 166, 174, 178, 179, 190, 208, 222, 223, 234, 250, 258, 261, 262, 263, 265, 267, 311, 314, 315, 316, 318, 319, 329, 352, 373, 376, 391, 394, 410, 411, 413, 414, 421, 422, 425, 426, 427, 429, 435, 437, 440, 446, 448, 451, 454, 457, 459, 461, 463], "set_env_var": [155, 208], "env_var": [155, 208], "overwrite_exist": [155, 208], "env": [155, 208, 418], "alreadi": [155, 192, 206, 208, 236, 248, 394, 411, 422, 441, 444, 461], "param": [155, 180, 208, 214, 224, 265, 297, 318, 356, 384, 394, 428, 461], "set_all_env_var": [155, 208], "physic": [155, 208, 388, 409], "core": [155, 174, 175, 208, 409, 424, 439, 443, 450, 464], "get_architectur": [155, 208], "architectur": [155, 208, 268, 271, 393, 409, 413, 426, 451, 452, 462], "get_threads_per_cor": [155, 208], "thread": [155, 174, 175, 208, 346, 351, 410, 450], "get_thread": [155, 208], "get_physical_id": [155, 208], "socket": [155, 208, 384, 450, 464], "get_core_id": [155, 208], "id": [155, 206, 208, 248, 258, 260, 261, 262, 263, 311, 313, 314, 315, 316, 425, 457, 461], "get_bounded_thread": [155, 208], "core_id": [155, 208], "bind": [155, 208], "run_inst": 155, "b_dataload": [155, 174, 175, 409, 426], "b_func": [155, 409], "benchmarkconfig": [155, 174, 175, 409, 426], "accuraci": [155, 170, 174, 175, 178, 179, 222, 223, 250, 256, 265, 280, 285, 293, 318, 319, 329, 352, 357, 371, 373, 381, 390, 393, 410, 411, 414, 415, 416, 417, 425, 426, 427, 437, 446, 448, 449, 451, 452, 453, 456, 457, 458, 459, 463, 464], "goal": [155, 250, 256, 280, 285, 293, 319, 352, 410, 449, 454, 461], "prefer": [155, 256, 293, 352, 451], "space": [155, 167, 174, 175, 178, 179, 222, 223, 256, 263, 268, 271, 272, 273, 293, 297, 300, 307, 316, 319, 352, 356, 361, 368, 388, 389, 391, 394, 451, 454, 463], "etc": [155, 156, 206, 248, 250, 256, 263, 280, 285, 293, 316, 319, 352, 383, 413, 422, 451, 457, 461], "user": [155, 164, 167, 170, 174, 175, 178, 179, 192, 195, 199, 207, 208, 214, 219, 222, 223, 236, 239, 243, 249, 256, 280, 285, 291, 293, 294, 318, 319, 329, 352, 357, 373, 384, 390, 391, 394, 399, 409, 413, 414, 417, 419, 422, 425, 426, 427, 428, 429, 430, 431, 433, 434, 435, 437, 440, 446, 448, 449, 451, 452, 454, 455, 456, 458, 459, 460, 461, 465], "generate_prefix": 155, "core_list": 155, "command": [155, 208, 373, 415, 429, 431, 434, 439, 443, 447], "numactl": [155, 418, 432, 440], "call_on": 155, "cmd": [155, 447], "log_fil": [155, 345, 350], "window": [155, 409, 446, 447], "config_inst": 155, "raw_cmd": 155, "multi": [155, 162, 164, 261, 314, 318, 352, 391, 410, 411, 422, 426, 448, 451, 454, 461], "trigger": [155, 167, 290, 389], "raw": [155, 191, 195, 198, 235, 239, 242, 300, 361, 425, 461], "summary_benchmark": 155, "summari": [155, 373, 441, 444, 450, 459], "profil": [155, 310], "benchmark_with_raw_cmd": 155, "commend": 155, "fit_with_raw_cmd": 155, "cores_per_inst": [155, 174, 175, 409, 426, 453], "num_of_inst": [155, 174, 175, 409, 426, 453], "7": [155, 174, 175, 329, 409, 418, 419, 423, 426, 451, 454, 456, 458, 461, 464], "test": [155, 165, 174, 175, 207, 249, 389, 393, 423, 464], "fit": [155, 166, 174, 175, 297, 319, 352, 356, 371, 373, 390, 393, 409, 410, 411, 415, 420, 421, 425, 426, 427, 428, 451, 454, 455], "pb": [155, 174, 175, 319, 327, 352, 393, 409, 415, 420, 426, 428, 459, 464], "eval_dataload": [155, 174, 175, 178, 179, 222, 223, 294, 297, 298, 300, 301, 302, 303, 319, 352, 353, 356, 357, 358, 359, 361, 362, 363, 364, 373, 393, 409, 420, 421, 426, 454, 461], "compon": [156, 250, 257, 294, 310, 390, 415, 423, 424, 429, 446, 449, 450], "quantizationawaretrainingcallback": 156, "pruningcallback": 156, "distillationcallback": 156, "basecallback": 156, "design": [156, 189, 212, 217, 233, 318, 357, 391, 393, 426, 434, 437, 451, 454, 462], "mainli": [156, 169, 217, 292, 426, 451, 454], "prune": [156, 160, 161, 162, 165, 166, 167, 168, 169, 170, 174, 175, 217, 218, 257, 274, 275, 277, 278, 279, 283, 285, 286, 288, 289, 290, 292, 294, 310, 384, 393, 415, 416, 419, 420, 422, 449, 452, 462, 463], "distil": [156, 159, 174, 175, 209, 216, 217, 257, 310, 393, 416, 420, 422, 449, 462, 463], "In": [156, 166, 167, 168, 175, 189, 217, 233, 261, 288, 290, 314, 329, 388, 390, 391, 393, 394, 410, 411, 413, 414, 415, 425, 426, 436, 439, 440, 443, 448, 449, 451, 454, 455, 457, 458, 459, 460, 461], "adaptor": [156, 174, 175, 309, 370, 376, 393, 422, 455, 456, 458, 459, 462], "deriv": [156, 160, 166, 167, 168, 169, 250, 288, 290, 292], "pipelin": [156, 250, 268, 269, 294, 414, 426, 449], "knowledg": [156, 157, 174, 175, 209, 250, 414, 416, 420, 422, 426, 428, 463], "transfer": [156, 197, 241, 250, 411, 413, 414, 426, 458], "teacher": [156, 174, 175, 250, 413, 414, 426, 464], "student": [156, 174, 175, 190, 216, 234, 250, 411, 413, 414, 464], "distillation_conf": [156, 171, 250], "_epoch_ran": [156, 250], "integ": [156, 166, 167, 174, 175, 250, 261, 265, 272, 288, 290, 314, 318, 371, 394, 454, 458, 461], "indic": [156, 174, 175, 183, 188, 190, 227, 232, 234, 250, 261, 272, 314, 390, 418, 459], "how": [156, 160, 166, 167, 174, 175, 207, 249, 250, 288, 389, 390, 392, 394, 410, 411, 413, 414, 415, 421, 426, 440, 441, 444, 445, 446, 451, 454, 458, 460, 461, 462, 463], "much": [156, 160, 174, 175, 207, 249, 250, 413, 440, 458, 460], "epoch": [156, 167, 250, 290, 373, 413, 414, 415, 426, 449, 451, 463], "ran": [156, 250], "eval_frequ": [156, 250], "frequenc": [156, 167, 174, 175, 250, 290, 426, 450, 451, 463], "term": [156, 167, 168, 250, 389, 413, 424, 425, 448, 449, 461], "best_scor": [156, 250], "best": [156, 207, 249, 250, 256, 293, 300, 361, 388, 391, 423, 429, 435, 446, 448, 454, 460, 461], "metric": [156, 174, 175, 178, 179, 211, 222, 223, 250, 256, 257, 272, 280, 285, 293, 294, 310, 319, 352, 373, 376, 391, 394, 410, 411, 415, 426, 427, 454, 457, 459, 461, 462, 463, 464], "best_model": [156, 250], "found": [156, 250, 393, 413, 427, 434, 458, 461, 464], "critet": [157, 209], "includ": [157, 160, 164, 166, 168, 174, 175, 190, 192, 199, 207, 209, 234, 236, 243, 249, 256, 266, 288, 293, 371, 384, 388, 389, 394, 411, 423, 424, 425, 426, 427, 429, 432, 435, 440, 451, 454, 455, 459, 461], "tensorflowknowledgedistillationloss": [157, 209], "pytorchknowledgedistillationloss": [157, 209, 426], "pytorchintermediatelayersknowledgedistillationloss": [157, 209], "tensorflowcriterion": [157, 209], "pytorchcriterion": [157, 209], "criterion_registri": [157, 209], "criterion_typ": [157, 209], "registry_criterion": [157, 209], "knowledgedistillationframework": [157, 209], "student_model": [157, 175, 209, 426], "teacher_model": [157, 174, 175, 209, 413, 414, 426], "knowledgedistillationloss": [157, 209, 426, 463], "temperatur": [157, 174, 175, 209, 426, 463], "loss_typ": [157, 174, 175, 209, 426, 463], "ce": [157, 174, 175, 209, 426, 463], "loss_weight": [157, 174, 175, 209, 426, 463], "pytorchknowledgedistillationlosswrapp": [157, 209], "param_dict": [157, 209, 214], "tensorflowknowledgedistillationlosswrapp": [157, 209], "tensorflowknowledgedistillationlossextern": [157, 209], "intermediatelayersknowledgedistillationloss": [157, 209], "layer_map": [157, 175, 209, 413], "add_origin_loss": [157, 175, 209], "pytorch": [157, 164, 166, 174, 175, 189, 190, 192, 195, 199, 207, 209, 214, 216, 233, 234, 236, 239, 243, 249, 254, 255, 256, 265, 266, 286, 288, 291, 293, 301, 310, 318, 319, 328, 352, 362, 377, 384, 390, 391, 393, 394, 410, 413, 414, 416, 417, 419, 422, 423, 426, 428, 429, 431, 434, 435, 436, 437, 446, 451, 452, 453, 456, 458, 461, 463], "loss": [157, 174, 175, 209, 256, 265, 280, 285, 293, 318, 373, 413, 414, 415, 416, 425, 426, 427, 437, 449, 451, 454, 458, 461, 463], "pytorchintermediatelayersknowledgedistillationlosswrapp": [157, 209], "selfknowledgedistillationloss": [157, 209], "selfknowledg": [157, 209], "pytorchselfknowledgedistillationloss": [157, 209], "pytorchselfknowledgedistillationlosswrapp": [157, 209], "pruner": [159, 257, 274, 275, 276, 277, 278, 280, 285, 286, 288, 291, 310, 426, 451, 463], "model_slim": [159, 161], "auto_slim": [159, 161, 163], "pattern_analyz": [159, 161, 163], "weight_slim": [159, 161, 163], "criteria": [159, 161, 174, 175, 256, 280, 285, 288, 290, 293, 390, 446, 458], "reg": [159, 161, 167], "schedul": [159, 161, 167, 168, 174, 175, 257, 286, 290, 310, 426, 449], "callback": [159, 280, 285, 373, 376, 390, 426, 449, 451, 454], "register_criterion": 160, "registri": [160, 166, 167, 168, 169, 288, 290, 292, 391], "get_criterion": 160, "pruningcriterion": 160, "about": [160, 384, 388, 410, 426, 455, 461, 462, 464], "module_nam": [160, 167, 168, 290, 384], "store": [160, 164, 167, 168, 174, 175, 192, 236, 283, 290, 421], "score": [160, 166, 167, 174, 175, 258, 259, 261, 262, 263, 265, 290, 311, 312, 314, 315, 316, 318, 359, 376, 390, 425, 448, 451, 457, 461], "magnitudecriterion": 160, "magnitud": [160, 174, 175, 257, 265, 276, 310, 318, 422, 451], "criterion_class": 160, "determin": [160, 166, 167, 174, 175, 378, 388, 390, 451, 454, 458], "gradientcriterion": 160, "gradient": [160, 274, 422, 426, 451, 464], "absolut": [160, 174, 175, 265, 318, 425, 426, 450, 451, 454, 461], "snipcriterion": 160, "snip": [160, 174, 175, 290, 422, 451, 464], "product": [160, 393, 422, 427, 429, 430, 446, 450, 452, 454, 457, 461], "singl": [160, 169, 174, 175, 183, 190, 207, 227, 234, 249, 261, 290, 292, 314, 318, 352, 390, 411, 423, 451], "shot": [160, 167, 169, 217, 290, 292, 391, 422, 426, 451, 452], "connect": [160, 290, 446, 450, 451, 457], "sensit": [160, 274, 290, 422, 451], "arxiv": [160, 167, 290, 451, 458], "org": [160, 167, 261, 290, 314, 389, 390, 423, 441, 444], "1810": [160, 290], "02340": [160, 290], "snipmomentumcriterion": 160, "snip_momentum": [160, 174, 175, 426, 451], "momentum": [160, 290, 422, 426, 451, 463], "mechan": [160, 451, 457, 462], "preserv": 160, "step": [160, 166, 167, 169, 174, 175, 288, 290, 292, 373, 413, 414, 415, 426, 441, 444, 446, 449, 451, 453, 455, 457, 458, 459, 461], "beta": 160, "snipmomentumblockcriterion": 160, "snip_momentum_block": 160, "retrainfreecriterion": 160, "retrain_fre": [160, 167], "auto": [162, 164, 174, 175, 295, 310, 354, 360, 384, 390, 429, 432, 434, 436, 437, 451, 454], "slim": [162, 163, 164, 261, 314, 325, 327, 428, 451], "round_multipli": 162, "32": [162, 415, 421, 450, 458, 464], "spars": [162, 167, 290, 411, 452], "automat": [162, 164, 165, 174, 175, 192, 195, 202, 203, 236, 239, 246, 256, 266, 293, 390, 393, 409, 411, 422, 426, 427, 429, 431, 434, 435, 437, 439, 440, 441, 443, 444, 446, 449, 451, 454, 458, 460, 461], "model_slim_ffn2": 162, "some": [162, 164, 174, 175, 190, 234, 289, 411, 423, 425, 426, 427, 448, 451, 454, 455, 458, 459, 461], "part": [162, 167, 288, 290, 390, 423, 427, 441, 444, 451, 458, 462], "perman": [162, 388, 451], "obtain": [162, 164, 167, 168, 170, 289, 390, 417, 451, 457, 458, 461], "acceler": [162, 413, 426, 429, 437, 446, 451, 452, 455, 458, 461], "directli": [162, 174, 175, 189, 233, 261, 265, 289, 314, 318, 417, 425, 426, 433, 451, 453, 454, 459], "sprase": 162, "multipl": [162, 174, 175, 176, 177, 181, 182, 190, 191, 193, 194, 195, 196, 197, 201, 204, 207, 214, 220, 221, 225, 226, 228, 234, 235, 237, 238, 239, 240, 241, 245, 247, 249, 266, 319, 320, 321, 323, 329, 409, 411, 417, 426, 449, 451, 457, 458, 461], "model_slim_mha": 162, "parse_auto_slim_config": 162, "ffn2_sparsiti": 162, "mha_spars": 162, "generate_ffn2_pruning_config": 162, "consecut": [162, 164, 165, 451], "generate_mha_pruning_config": 162, "head": [162, 164, 165, 170, 451], "get_attribut": 164, "level": [164, 357, 371, 380, 388, 458, 461], "descent": 164, "print_iter": 164, "recipesearch": 164, "searcher": [164, 273], "search": [164, 167, 171, 178, 179, 222, 223, 256, 258, 268, 271, 272, 273, 293, 297, 311, 356, 393, 420, 422, 425, 429, 430, 440, 452, 459, 461, 462], "root": [164, 190, 191, 192, 195, 234, 235, 236, 239, 265, 318, 410, 411, 415, 425, 426, 463], "levelwis": 164, "wai": [164, 191, 192, 195, 235, 236, 239, 391, 410, 411, 425, 426, 429, 432, 447, 449, 451, 454, 458, 461, 463], "huggingfac": [164, 165, 190, 234, 379, 411, 416, 420, 434, 435, 436, 437, 458], "bert": [164, 175, 186, 189, 190, 207, 230, 233, 234, 249, 393, 411, 413, 425, 434, 451, 460, 464], "recipe_sampl": 164, "bertattent": 164, "dens": [164, 169, 174, 175, 292, 451, 464], "infom": [164, 210, 254], "basic": [164, 166, 174, 175, 206, 248, 257, 268, 288, 299, 303, 306, 310, 360, 364, 367, 373, 422, 423, 426, 453, 457], "searching_result": 164, "jitbasicsearch": 164, "placeholder_shap": 164, "placeholder_dtyp": 164, "By": [164, 174, 175, 258, 311, 393, 425, 428, 439, 440, 443, 452, 461], "jit": [164, 174, 429, 431, 436, 458, 459], "script": [164, 258, 259, 262, 263, 311, 312, 315, 316, 415, 422, 429, 433, 436, 437, 440, 452], "them": [164, 190, 234, 390, 410, 417, 419, 421, 449, 451, 461], "static_graph": 164, "flatten_static_graph": 164, "target_lay": 164, "linear2linearsearch": 164, "target_op_lut": 164, "lookup": 164, "tabl": [164, 384, 464], "code": [164, 178, 179, 208, 222, 223, 267, 291, 294, 352, 373, 390, 393, 394, 410, 411, 413, 414, 415, 421, 422, 424, 425, 429, 431, 433, 434, 435, 437, 440, 446, 448, 449, 451, 452, 453, 454, 457, 458, 459, 460], "current_pattern": 164, "statu": [164, 381, 388, 410, 448, 451], "selfmhasearch": 164, "classifierheadsearch": 164, "final": [164, 167, 170, 290, 426, 432, 448, 451, 454, 456, 461], "classifi": [164, 170, 190, 234, 265, 318, 411, 413], "squeezer": 165, "postcompressionutil": 165, "librari": [165, 211, 257, 310, 346, 386, 389, 393, 423, 426, 431, 440, 446, 452, 454], "relat": [165, 168, 250, 261, 280, 285, 288, 314, 376, 429, 451, 463], "linearcompress": 165, "root_linear": 165, "target_linear": 165, "also": [165, 189, 192, 207, 233, 236, 249, 258, 311, 318, 329, 352, 389, 391, 394, 410, 416, 420, 422, 425, 426, 429, 434, 439, 440, 443, 446, 447, 448, 451, 452, 454, 455, 458, 461], "while": [165, 167, 170, 290, 297, 356, 394, 411, 416, 422, 427, 429, 434, 446, 453, 454, 458], "hidden": [165, 166, 288, 394], "structur": [165, 167, 174, 175, 290, 308, 369, 422, 445, 447, 451, 454, 459, 462, 464], "layer_1": 165, "act_fn": 165, "layer_2": 165, "linearcompressioniter": 165, "linear_pattern": 165, "mhacompress": 165, "mha": 165, "head_num": 165, "head_siz": 165, "progress": [165, 192, 236, 440, 446, 451, 454], "register_pattern": [166, 288], "sure": [166, 167, 169, 288, 290, 292, 409], "get_pattern": [166, 288], "assertionerror": [166, 167, 170, 288, 289, 290, 319], "basepattern": [166, 168], "unit": [166, 288, 389, 451], "e": [166, 174, 175, 388, 413, 416, 420, 429, 434, 435, 439, 443, 451, 458, 461], "4x1": [166, 174, 175, 284, 426, 451, 464], "is_glob": [166, 288], "local": [166, 174, 175, 288, 384, 439, 443, 451, 457], "contrast": [166, 288, 460], "keep_mask_lay": 166, "invalid_lay": 166, "max_sparsity_ratio_per_op": [166, 167, 171, 174, 175, 426, 451], "sparsiti": [166, 167, 169, 170, 174, 175, 290, 292, 384, 393, 411, 422, 426, 462, 464], "reach": [166, 169, 174, 175, 292, 389, 393, 410, 451, 461], "min_sparsity_ratio_per_op": [166, 171, 174, 175, 426, 451], "minimum": [166, 174, 175, 426, 437, 451, 461], "target_spars": [166, 171, 174, 175, 426, 451, 453, 463], "patternnxm": [166, 288], "nxm": [166, 167, 174, 175, 284, 288, 451], "kept": [166, 288], "block_siz": [166, 288], "height": [166, 203, 207, 246, 249, 288, 415, 460, 463], "width": [166, 203, 207, 246, 249, 288, 415, 451, 454, 460, 463], "vertic": [166, 207, 249, 288, 460], "becaus": [166, 207, 249, 288, 390, 454, 458, 460, 461], "patternninm": [166, 288], "n": [166, 174, 175, 191, 207, 235, 249, 259, 288, 312, 371, 411, 413, 451, 454, 458, 460], "out": [166, 174, 175, 190, 191, 192, 234, 235, 236, 256, 288, 293, 389, 390, 393, 411, 429, 434, 439, 440, 441, 443, 444, 446, 451, 453, 454], "continu": [166, 261, 288, 314, 391, 426, 447, 451], "doc": [166, 174, 175, 288, 306, 307, 318, 352, 367, 368, 371, 384, 425, 426, 441, 444], "md": [166, 174, 175, 288, 318, 352, 415, 454], "element": [166, 170, 188, 232, 261, 288, 314, 384, 411, 422, 425, 451, 458], "register_prun": [167, 290], "parse_valid_pruner_typ": 167, "get_prun": [167, 290], "cuurent": [167, 290], "baseprun": 167, "current_sparsity_ratio": [167, 290], "global_step": [167, 290], "total": [167, 207, 249, 265, 290, 318, 411, 451, 460], "start_step": [167, 171, 174, 175, 290, 426, 451, 453], "end_step": [167, 171, 174, 175, 290, 426, 451, 453], "pruning_frequ": [167, 171, 174, 175, 426, 451], "target_sparsity_ratio": [167, 290], "show": [167, 384, 388, 413, 415, 426, 432, 447, 458, 461, 462], "basicprun": 167, "arrang": [167, 191, 192, 195, 235, 236, 239, 411, 451], "proce": 167, "regul": 167, "patternlockprun": [167, 278, 290], "parent": [167, 169, 284, 290, 292, 459], "blockmaskprun": 167, "grad": 167, "retrainfreeprun": 167, "pruner_class": 167, "rearrang": 167, "fast": [167, 174, 175, 393, 452], "retrain": [167, 414, 451], "effect": [167, 393, 394, 452], "2204": 167, "09656": 167, "progressiveprun": 167, "interpol": [167, 207, 249, 425, 451, 460], "fine": [167, 190, 234, 411, 432, 451, 452, 454], "grain": [167, 451, 452, 461], "improv": [167, 389, 426, 429, 446, 447, 451, 452, 454, 455, 461, 464], "interv": [167, 451], "regular": [168, 258, 289, 311], "register_reg": 168, "regulariz": 168, "get_reg_typ": 168, "get_reg": 168, "basereg": 168, "grouplasso": 168, "coeff": 168, "group": [168, 275, 422, 451, 459, 460, 461, 464], "lasso": [168, 275, 422, 451], "select": [168, 175, 190, 234, 390, 391, 422, 423, 446, 451, 454, 459, 461], "reg_term": 168, "coeffient": 168, "register_schedul": [169, 292], "get_schedul": [169, 292], "pruningschedul": 169, "gradual": [169, 292, 451], "oneshotschedul": [169, 292], "iterativeschedul": [169, 292], "get_sparsity_ratio": 170, "elementwise_over_matmul_gemm_conv": 170, "elementwise_over_al": 170, "blockwise_over_matmul_gemm_conv": 170, "check_config": [170, 289], "prune_config": [170, 289], "everyth": [170, 289, 434], "reset_none_to_default": 170, "undefin": [170, 289], "update_param": 170, "process_weight_config": 170, "global_config": [170, 274, 275, 277, 278, 279], "local_config": [170, 174, 175, 274, 275, 277, 278, 279], "default_config": 170, "pruners_info": 170, "process_yaml_config": 170, "check_key_valid": 170, "template_config": 170, "user_config": 170, "process_and_check_config": [170, 289], "process_config": [170, 289], "parse_last_linear": 170, "often": [170, 410, 413, 449, 451], "act": [170, 188, 232, 388], "might": [170, 390, 461], "caus": [170, 430, 451], "drop": [170, 261, 289, 314, 426, 427, 440, 451, 464], "parse_to_prun": [170, 289], "keep": [170, 289, 357, 390, 394, 445, 446, 456], "generate_pruner_config": 170, "dotdict": [170, 171, 175, 329, 384], "prunerv2": 171, "pruning_typ": [171, 174, 175, 426, 451], "pruning_scop": [171, 174, 175, 426, 451], "sparsity_decay_typ": [171, 174, 175, 426, 451], "pruning_op_typ": [171, 174, 175, 426, 451], "reg_typ": 171, "criterion_reduce_typ": 171, "resume_from_pruned_checkpoint": 171, "similiar": 171, "cfg_fname": 171, "parser": 171, "quantization_conf": 171, "pruning_conf": 171, "graph_optimization_conf": [171, 256], "mixedprecision_conf": 171, "benchmark_conf": 171, "nasconfig": [171, 175, 269, 271, 391], "approach": [171, 174, 175, 268, 269, 271, 390, 391, 393, 410, 411, 413, 422, 426, 434, 446, 452, 453, 461, 463], "search_spac": [171, 175, 268, 271, 272, 273], "search_algorithm": [171, 175, 257, 270, 310, 391], "na": [171, 175, 257, 310, 323, 422], "procedur": [171, 391, 451], "deep_get": [172, 329], "dot": [172, 427, 454], "eg": [172, 192, 236, 411, 453], "person": [172, 388, 452], "john": 172, "deep": [172, 393, 394, 410, 422, 423, 426, 427, 429, 431, 434, 435, 437, 440, 446, 452, 454, 461, 462, 464], "deep_set": [172, 329], "sex": [172, 388], "male": 172, "instead": [172, 175, 189, 233, 384, 432, 434, 437, 451], "notat": [172, 175, 384], "pythonic_config": 173, "random_se": [174, 175, 297, 356, 426, 463], "1978": [174, 175], "workspac": [174, 175, 383, 384, 428], "default_workspac": [174, 175], "resume_from": [174, 175, 384], "tensorboard": [174, 175, 376, 384, 394, 426], "set_random_se": [174, 175, 384], "set_workspac": [174, 175, 384], "set_resume_from": [174, 175, 384], "set_tensorboard": [174, 175, 384], "directori": [174, 175, 191, 192, 235, 236, 327, 379, 381, 383, 384, 411, 415, 418, 439, 441, 443, 444, 459], "histori": [174, 175, 383, 384, 446, 461], "nc_workspac": [174, 175], "datetim": [174, 175], "now": [174, 175, 207, 249, 390, 391, 411, 415, 437, 453, 460, 461], "strftime": [174, 175], "d_": [174, 175], "h": [174, 175, 207, 249, 415, 460], "resum": [174, 175, 178, 179, 222, 223, 298, 301, 302, 303, 353, 356, 357, 358, 359, 361, 362, 363, 364], "wa": [174, 175, 394, 426, 452, 461], "flag": [174, 175, 259, 312], "visual": [174, 175, 393, 437, 446, 457, 459, 461, 462], "displai": [174, 175, 306, 307, 367, 368, 384, 446], "2022": [174, 175, 393, 424, 458], "workspace_path": [174, 175], "accuracycriterion": [174, 175, 426, 461], "higher_is_bett": [174, 175, 318, 352, 425, 461, 463], "rel": [174, 175, 329, 426, 453, 461, 463, 464], "tolerable_loss": [174, 175, 426, 461], "01": [174, 175, 426, 450, 453, 461, 463, 464], "higher": [174, 175, 178, 179, 222, 223, 272, 319, 352, 373, 390, 413, 417, 425, 451, 454, 457], "accept": [174, 175, 371, 388, 409], "accuracy_criterion": [174, 175, 329, 426, 448, 453, 461, 463], "avail": [174, 175, 323, 395, 397, 401, 404, 407, 416, 418, 420, 422, 439, 443, 450, 451, 461, 464], "warmup": [174, 175, 409, 426, 453], "inter_num_of_thread": [174, 175, 346, 351, 426, 453], "intra_num_of_thread": [174, 175, 346, 351, 426, 453], "benchmark": [174, 175, 210, 257, 294, 310, 329, 384, 393, 399, 428, 429, 433, 437, 440, 446, 461, 462, 463, 464], "empti": [174, 175, 432], "onnxrt_trt_ep": [174, 175, 454], "onnxrt_cuda_ep": [174, 175, 427, 454], "inter": [174, 175, 188, 192, 232, 236], "intra": [174, 175], "quantizationconfig": 174, "post_training_static_qu": [174, 410, 411, 426, 453, 461], "calibration_sampling_s": [174, 175, 426], "op_type_dict": [174, 175, 453, 454, 461], "op_name_dict": [174, 175, 426, 454, 461], "strategy_kwarg": [174, 175, 457, 461], "timeout": [174, 175, 426, 453, 461, 463], "max_trial": [174, 175, 426, 461], "quant_level": [174, 175, 461], "posttrainingquantconfig": [174, 175, 352, 390, 393, 410, 420, 426, 428, 454, 455, 457, 458, 461], "quantizationawaretrainingconfig": [174, 175, 373, 390, 414, 426, 454, 455, 461], "requir": [174, 175, 181, 294, 327, 351, 390, 394, 409, 410, 414, 415, 419, 426, 427, 428, 430, 440, 446, 450, 451, 454, 456, 457, 458, 459, 461, 463], "cv": [174, 175, 451], "object_detect": [174, 175, 261, 314], "nlp": [174, 175, 291, 434, 451, 454], "recommendation_system": [174, 175], "explicitli": [174, 175, 421, 451], "overrid": [174, 175, 384], "quantiztaion": [174, 175], "smooth_quant_arg": [174, 175, 454, 458], "gemm_to_matmul": [174, 175, 454], "graph_optimization_level": [174, 175, 453, 454], "disable_al": [174, 175, 453], "enable_bas": [174, 175], "enable_extend": [174, 175], "enable_al": [174, 175], "first_conv_or_matmul_quant": [174, 175, 454], "last_conv_or_matmul_quant": [174, 175, 454], "pre_post_process_quant": [174, 175, 454], "preprocess": [174, 175, 190, 207, 234, 249, 376, 415, 460], "postprocess": [174, 175, 201, 204, 207, 211, 249, 257, 310, 318, 352, 376, 394, 426, 459, 460], "vaild": [174, 175], "dedic": [174, 175], "quant_format": [174, 175, 254, 417], "constraint": [174, 175, 256, 293, 426, 451, 457, 461, 463], "reduc": [174, 175, 394, 414, 426, 427, 446, 447, 451, 452, 454, 455, 458, 461, 463], "layer1": [174, 175, 426, 451, 454], "conv1": [174, 175, 454, 463], "tuning_strategi": [174, 175], "guarante": [174, 175, 426], "models": [174, 175, 329, 426, 448, 453], "footprint": [174, 175, 256, 280, 285, 293, 329, 414, 426, 448, 451, 453], "earli": [174, 175, 426, 454, 461, 463], "stop": [174, 175, 426, 461, 462, 463], "field": [174, 175, 192, 236, 261, 314, 390, 394, 415, 426, 457, 461, 463], "exit": [174, 175, 296, 353, 355, 426, 427, 463], "bit": [174, 175, 414, 427, 452, 454, 458], "excluded_precis": [174, 175, 455], "exclud": [174, 175, 394, 427, 455], "conserv": [174, 175, 310, 360], "use_distributed_tun": 174, "weightpruningconfig": [174, 175, 219, 426, 449, 451], "pruning_config": [174, 175, 426], "9": [174, 175, 390, 423, 426, 451, 453, 458, 461, 463], "98": [174, 175, 426, 451, 453, 464], "exp": [174, 175, 426, 451], "link": [174, 175, 190, 234, 318, 352, 411, 439, 443, 446, 464], "90": [174, 175, 463, 464], "magnitude_progress": [174, 175], "snip_progress": [174, 175], "snip_momentum_progress": [174, 175], "pattern_lock": [174, 175, 257, 276, 310], "most": [174, 175, 265, 318, 426, 427, 451, 454, 458, 461], "feasibl": [174, 175], "situat": [174, 175, 415, 451], "unstructur": [174, 175, 284, 422, 451, 464], "8x1": [174, 175], "channelx1": [174, 175, 451], "1xchannel": [174, 175, 451], "itrex": [174, 175], "start": [174, 175, 207, 249, 261, 314, 357, 423, 460, 461, 462, 465], "togeth": [174, 175, 207, 249, 413, 423, 433, 452, 459, 460], "sort": [174, 175, 300, 361, 461], "sinc": [174, 175, 256, 258, 280, 285, 293, 311, 413, 417, 423, 425, 440, 446, 449], "lead": [174, 175, 413, 426, 427, 451, 458], "increas": [174, 175, 412, 422, 429, 446, 461], "cube": [174, 175, 451], "6": [174, 175, 393, 419, 454, 458, 461, 464], "update_config": [174, 175], "10": [174, 175, 192, 236, 297, 356, 393, 409, 411, 423, 426, 451, 453, 460, 461, 464], "knowledgedistillationlossconfig": [174, 175, 413, 414, 426, 449], "hyperparamet": [174, 175, 306, 457, 458, 461], "entropi": [174, 175, 461], "length": [174, 175, 190, 207, 234, 249, 261, 314, 393, 411, 425, 452, 454, 460], "groundtruth": [174, 175, 261, 314], "label": [174, 175, 178, 179, 190, 192, 193, 194, 195, 198, 203, 207, 212, 222, 223, 234, 236, 237, 238, 239, 242, 246, 249, 258, 260, 265, 311, 313, 318, 319, 352, 373, 390, 410, 411, 425, 426, 454, 460], "tpye": [174, 175], "sum": [174, 175, 265, 318, 413], "distillationconfig": [174, 175, 373, 413, 414, 426, 449], "prepare_compress": [174, 175, 373, 390, 413, 414, 426, 449, 451, 454], "criterion_conf": [174, 175], "d_conf": [174, 175, 414, 426, 449], "compression_manag": [174, 175, 373, 390, 413, 414, 426, 449, 451, 454], "sgd": [174, 175, 214, 413, 426, 453, 463], "learning_r": [174, 175, 426, 453, 463], "callabl": [174, 175, 263, 316, 373], "featur": [174, 175, 190, 191, 203, 207, 234, 235, 246, 249, 389, 393, 409, 410, 412, 413, 426, 427, 428, 429, 433, 434, 437, 446, 451, 452, 456, 460], "altern": [174, 175, 352], "distil_loss": [174, 175, 426], "crossentropyloss": [174, 175, 209, 413, 426], "lr": [174, 175, 413, 415, 426], "tuningcriterion": [175, 426, 448, 457, 461], "tuning_criterion": [175, 426, 448, 457, 461], "dynam": [175, 180, 224, 254, 307, 368, 394, 410, 413, 422, 426, 429, 434, 435, 436, 437, 440, 446, 452, 461, 464], "ptq": [175, 352, 390, 415, 422, 426, 454, 458, 459, 461], "tri": [175, 461], "meet": [175, 181, 294, 296, 353, 355, 390, 417, 448, 452, 453, 454, 459, 461], "bayesian": [175, 257, 273, 299, 310, 360, 391, 453], "mse_v2": [175, 257, 299, 310, 360], "hawq_v2": [175, 310, 360], "exhaust": [175, 257, 273, 299, 310, 360, 453], "docstr": [175, 371], "copi": [175, 289, 384], "deepcopi": 175, "model_origin": [175, 352, 455], "qat_op_name_dict": 175, "intermediatelayersknowledgedistillationlossconfig": [175, 413], "relationship": 175, "student_layer_nam": 175, "student_layer_output_process": 175, "teacher_layer_nam": 175, "teacher_layer_output_process": 175, "desir": [175, 203, 207, 246, 249, 460], "either": [175, 261, 314, 430, 434, 449, 453, 454], "serv": [175, 327], "numer": [175, 265, 318, 427, 452, 454], "abbrevi": 175, "layer_nam": 175, "l1": 175, "selfknowledgedistillationlossconfig": [175, 413, 426], "student1_layer_name1": 175, "teacher_layer_name1": 175, "student2_layer_name1": 175, "student1_layer_name2": 175, "teacher_layer_name2": 175, "student2_layer_name2": 175, "soft": 175, "l2": [175, 451], "hard": [175, 410], "resblock": 175, "deepst": 175, "fc": 175, "02": [175, 458, 464], "mixedprecisionconfig": [175, 319, 371, 426, 427], "mixedprecis": [175, 266, 426], "fp16": [175, 307, 368, 427, 454], "won": [175, 454], "work": [175, 256, 293, 392, 410, 413, 441, 444, 451, 455, 456, 458, 459], "mix_precis": [175, 310, 371, 426, 427], "converted_model": [175, 319, 426, 427], "exportconfig": 175, "14": [175, 253, 254, 417, 423, 458, 464], "dynamic_ax": [175, 254, 417], "qlinear": [175, 192, 199, 236, 243, 265, 318, 394, 417, 436, 464], "ax": [175, 254], "onnxqlinear2qdqconfig": 175, "onnxqlinear2qdq": 175, "torch2onnxconfig": [175, 417], "qdq_op_fp32_bia": [175, 254, 417], "torch2onnx": [175, 251, 257, 310], "qdq_op_int32_bia": [175, 254, 417], "qdq_op_fp32_bias_qdq": [175, 254, 417], "resnet50": [175, 393, 415, 429, 433, 451, 454, 457, 464], "int8_onnx_config": [175, 417], "randn": [175, 417], "224": [175, 203, 246, 393, 410, 411, 415, 417, 420, 426, 429, 460, 463, 464], "batch_siz": [175, 180, 182, 186, 188, 189, 190, 191, 210, 224, 226, 230, 232, 233, 234, 235, 254, 391, 410, 411, 415, 417, 421, 426, 429, 454], "tf2onnxconfig": 175, "tf2onnx": [175, 251, 257, 310], "keyword": 175, "argument": [175, 371, 391], "output_graph": 175, "42": [175, 273, 450, 464], "dyna": [175, 257, 270, 310, 391, 422, 453], "sigopt": [176, 177, 220, 221, 257, 310, 452], "tpe": [176, 177, 220, 221, 257, 310], "sigopttunestrategi": [178, 222], "q_dataload": [178, 179, 222, 223, 297, 298, 300, 301, 302, 303, 353, 356, 357, 358, 359, 361, 362, 363, 364, 421, 461], "eval_func": [178, 179, 222, 223, 294, 297, 298, 300, 301, 302, 303, 319, 352, 353, 356, 357, 358, 359, 361, 362, 363, 364, 371, 373, 390, 410, 411, 413, 414, 415, 426, 454, 455, 461, 463], "eval_metr": [178, 179, 319, 352, 353, 356, 357, 358, 359, 361, 362, 363, 364, 373, 454], "q_hook": [178, 179, 222, 223, 297, 298, 300, 301, 302, 303, 353, 356, 357, 358, 359, 361, 362, 363, 364], "hpo": [178, 222], "mandatori": [178, 179, 222, 223, 352, 426, 463], "yield": [178, 179, 188, 210, 222, 223, 232, 297, 319, 352, 356, 371, 373, 410, 454, 461], "_": [178, 179, 222, 223, 352, 390, 391, 394, 413, 415, 419, 425, 426, 427, 428, 429, 435, 439, 441, 443, 444, 448, 451, 454, 456, 457, 458, 459, 461, 463], "well": [178, 179, 222, 223, 319, 352, 373, 391, 393, 411, 451, 454, 456, 458, 463], "taken": [178, 179, 222, 223, 319, 352, 373, 454], "reserv": [178, 179, 222, 223], "abl": [178, 179, 222, 223, 319, 352, 373, 437, 446, 454], "tuner": [178, 179, 222, 223, 256, 293, 319, 352, 373, 454], "scalar": [178, 179, 222, 223, 319, 352, 373, 425, 454], "pseudo": [178, 179, 222, 223, 352, 373, 459], "someth": [178, 179, 192, 222, 223, 236, 352, 373], "fefin": [179, 223], "tpetunestrategi": [179, 223], "basedatalod": [180, 224], "basedataload": [180, 185, 187, 224, 229, 231], "last_batch": [180, 182, 186, 189, 210, 224, 226, 230, 233], "rollov": [180, 182, 186, 189, 210, 224, 226, 230, 233], "collate_fn": [180, 182, 183, 186, 210, 224, 226, 227, 230, 411], "sampler": [180, 182, 184, 186, 210, 224, 226, 228, 230, 245, 257, 306, 367, 415], "batch_sampl": [180, 182, 186, 210, 224, 226, 230], "num_work": [180, 182, 186, 210, 224, 226, 230, 426, 454], "pin_memori": [180, 182, 186, 210, 224, 226, 230], "shuffl": [180, 182, 186, 210, 224, 226, 230, 426, 454], "_generate_dataload": [180, 224], "check_dataload": 181, "default_col": [182, 226], "outer": [182, 226], "defaultdataload": [182, 189, 226, 233], "definit": [183, 188, 227, 232], "style": [183, 197, 227, 241, 371, 389, 411, 421], "drop_last": [183, 188, 227, 232], "iterablefetch": [183, 227], "indexfetch": [183, 227], "base_dataload": [184, 228, 245, 257], "default_dataload": [184, 228, 245, 257], "fetcher": [184, 228, 245, 257], "mxnet_dataload": [184, 228, 245, 257], "onnxrt_dataload": [184, 228, 245, 257, 345], "pytorch_dataload": [184, 228, 245, 257], "tensorflow_dataload": [184, 228, 245, 257, 350], "mxnetdataload": [185, 229], "onnxrtbertdataload": [186, 230], "varient": [186, 230], "onnxrtdataload": [186, 230, 345], "pytorchdataload": [187, 231], "data_sourc": [188, 232, 376], "__iter__": [188, 192, 232, 236, 410, 411, 426], "matter": [188, 232, 455], "iterablesampl": [188, 232], "squential": [188, 232], "your": [188, 190, 232, 234, 389, 411, 415, 417, 424, 426, 429, 432, 433, 434, 439, 440, 441, 443, 444, 446, 451, 457, 459, 461], "clear": [188, 232, 394, 419, 425, 426], "iterabledataset": [188, 192, 232, 236], "try": [188, 232, 390, 417, 451, 454, 458, 461], "indexdataset": [188, 232], "__getitem__": [188, 192, 207, 232, 236, 249, 411, 426], "__len__": [188, 192, 232, 236, 411], "retriev": [188, 232], "sequentialsampl": [188, 232], "sequenti": [188, 232, 294, 296, 353, 355, 461], "batchsampl": [188, 232], "tfdatadataload": [189, 233], "tensorflow1": [189, 233], "coupl": [189, 233], "satisfi": [189, 233, 423], "usag": [189, 233, 261, 267, 294, 314, 371, 411, 415, 416, 425, 429, 437, 448, 453, 460], "tf1": [189, 233, 428], "although": [189, 233, 457], "tensorflowbertdataload": [189, 233], "tensorflowmodelzoobertdataload": [189, 233], "zoo": [189, 207, 233, 249, 393, 416, 420, 464], "tensorflowdataload": [189, 233, 350], "pytorchbertdataset": [190, 234], "model_typ": [190, 234, 384, 411], "construct": [190, 193, 194, 197, 205, 210, 212, 213, 215, 234, 237, 238, 241, 318, 323, 327, 370, 376, 388, 411, 415, 451, 461], "tensordataset": [190, 234, 411], "repo": [190, 234, 387, 411, 416, 439, 441, 443, 444, 465], "easi": [190, 234, 293, 410, 417, 426, 452, 454, 457], "load": [190, 206, 207, 234, 248, 249, 319, 327, 352, 383, 384, 410, 439, 443, 447, 453, 454, 458], "squad": [190, 207, 234, 249, 262, 263, 265, 315, 316, 318, 411, 425, 451, 460, 464], "distilbert": [190, 234, 393, 411, 452, 464], "xlnet": [190, 234, 411], "xlm": [190, 234, 411, 464], "101": [190, 234, 265, 318, 425, 458, 464], "2043": [190, 234], "2001": [190, 234], "onnxrtbertdataset": [190, 234], "data_dir": [190, 234, 411], "model_name_or_path": [190, 234, 411, 426, 434, 435], "max_seq_length": [190, 207, 234, 249, 411, 460], "do_lower_cas": [190, 206, 207, 234, 248, 249, 411, 460], "mrpc": [190, 234, 265, 318, 411, 425, 434, 451, 461, 464], "dynamic_length": [190, 234, 411], "shortcut": [190, 234, 411], "token": [190, 201, 204, 207, 234, 245, 247, 249, 257, 258, 259, 310, 311, 312, 379, 411, 425, 426, 457, 458, 460, 461], "longer": [190, 207, 234, 249, 411, 460], "truncat": [190, 207, 234, 249, 411, 460], "shorter": [190, 207, 234, 249, 411, 460], "lowercas": [190, 234, 411], "choic": [190, 234, 394, 411, 425, 458], "qqp": [190, 234, 411, 425, 464], "qnli": [190, 234, 411, 425, 464], "rte": [190, 234, 411, 425, 464], "st": [190, 234, 411, 425], "cola": [190, 234, 411, 425, 464], "mnli": [190, 234, 411, 425, 464], "wnli": [190, 234, 411, 425, 464], "mobilebert": [190, 234, 411, 413, 464], "roberta": [190, 234, 411, 464], "uncas": [190, 207, 234, 249, 411, 460, 464], "load_and_cache_exampl": [190, 234], "cach": [190, 234, 418, 454], "convert_examples_to_featur": [190, 207, 234, 249], "max_length": [190, 234], "label_list": [190, 234, 265, 318], "output_mod": [190, 234], "classif": [190, 207, 234, 249, 265, 291, 318, 413, 417, 425, 435, 451, 452], "pad_token": [190, 234], "pad_token_segment_id": [190, 234], "mask_padding_with_zero": [190, 234], "inputfeatur": [190, 207, 234, 249], "properti": [190, 234, 370, 424, 450], "input_id": [190, 207, 234, 249, 426], "vocabulari": [190, 206, 207, 234, 248, 249, 460], "attention_mask": [190, 234, 426], "usual": [190, 234, 413, 449, 451, 454, 458], "NOT": [190, 234, 419], "token_type_id": [190, 234, 426], "segment": [190, 234, 259, 261, 312, 314], "portion": [190, 234], "problem": [190, 234, 265, 318, 425, 427, 447], "regress": [190, 234], "seq_length": [190, 234], "tensorflowbertdataset": [190, 234], "label_fil": [190, 207, 234, 249, 411, 460], "tfrecord": [190, 191, 192, 234, 235, 236, 411], "guid": [190, 234, 390, 393, 411, 413, 423, 429, 437, 446, 465], "parsedecodebert": [190, 234], "tensorflowmodelzoobertdataset": [190, 191, 234, 235], "num_cor": [190, 191, 195, 234, 235, 239, 411], "28": [190, 191, 195, 234, 235, 239, 411, 464], "coco": [191, 198, 202, 235, 242, 261, 265, 314, 318, 425, 451], "parsedecodecoco": [191, 235], "cocorecorddataset": [191, 235], "interleav": [191, 235, 411], "parallel": [191, 235, 346, 351, 411, 426, 461], "cocoraw": [191, 235, 410, 411], "img_dir": [191, 235, 411], "val2017": [191, 235, 411], "anno_dir": [191, 235, 411], "annot": [191, 235, 261, 314, 371, 411, 425, 451], "instances_val2017": [191, 235, 411], "jpg": [191, 195, 197, 235, 239, 241, 411], "imag": [191, 192, 195, 197, 203, 207, 235, 236, 239, 241, 246, 249, 261, 314, 411, 415, 417, 451, 453, 458, 459, 460, 464], "coconpi": [191, 235, 411], "npy_dir": [191, 235, 411], "npy": [191, 235, 411], "tensorflowdataset": [192, 236], "pytorchdataset": [192, 236], "mxnetdataset": [192, 236], "onnxrtqldataset": [192, 236], "onnxrtitdataset": [192, 236], "IT": [192, 199, 236, 243, 452], "pytorchmxnetwrapdataset": [192, 236], "datafunc": [192, 236], "pytorchmxnetwrapfunct": [192, 207, 236, 249], "framework_dataset": [192, 236], "convent": [192, 236, 261, 314, 413], "imageclassifi": [192, 236], "choos": [192, 236, 422, 434, 456, 458, 461, 463], "tensorflow_itex": [192, 195, 197, 199, 236, 239, 241, 243, 453], "onnxrt_qdq": [192, 199, 236, 243, 453], "onnxrt_qlinearop": [192, 199, 207, 236, 243, 249, 453], "onnxrt_integerop": [192, 199, 207, 236, 243, 249, 453], "pytorch_ipex": [192, 199, 236, 243, 426, 453, 463], "pytorch_fx": [192, 199, 236, 243, 426, 453], "dataset_registri": [192, 236], "dataset_typ": [192, 236], "dataset_format": [192, 236], "data_format": [192, 203, 236, 246], "raw_imag": [192, 236], "overwrit": [192, 236, 439, 443], "download_url": [192, 236], "url": [192, 236, 424], "filenam": [192, 236, 384, 411], "md5": [192, 236], "download": [192, 236, 411, 423, 456], "address": [192, 236, 388, 427, 452], "gen_bar_updat": [192, 236], "bar": [192, 236, 393, 446, 452], "check_integr": [192, 236], "fpath": [192, 236], "checksum": [192, 236], "calculate_md5": [192, 236], "chunk_siz": [192, 236], "cifar10": [192, 236, 411], "cifar100": [192, 236, 411], "databas": [192, 236], "otherwis": [192, 207, 236, 249, 384, 388, 411, 441, 444, 453, 460], "www": [192, 236, 411, 464], "toronto": [192, 236, 411], "kriz": [192, 236, 411], "cifar": [192, 236, 411, 464], "tar": [192, 236, 411, 441, 444], "gz": [192, 236, 411, 441, 444], "manual": [192, 236, 411, 429, 435, 437, 440], "subset": [192, 195, 236, 239, 411], "internet": [192, 236, 411], "put": [192, 236, 411, 413], "again": [192, 236, 411, 455], "pytorchcifar10": [192, 236], "mxnetcifar10": [192, 236], "tensorflowcifar10": [192, 236], "pytorchcifar100": [192, 236], "mxnetcifar100": [192, 236], "tensorflowcifar100": [192, 236], "mnist": [192, 236, 411, 415], "modifi": [192, 219, 236, 351, 390, 415, 419, 451, 463], "nation": [192, 236, 388], "institut": [192, 236], "standard": [192, 207, 236, 249, 417, 425, 460, 461], "technologi": [192, 236, 426, 450], "fashionmnist": [192, 236, 411], "npz": [192, 236, 411], "idx1": [192, 236, 411], "ubyt": [192, 236, 411], "idx3": [192, 236, 411], "t10k": [192, 236, 411], "pytorchmnist": [192, 236], "mxnetmnist": [192, 236], "tensorflowmnist": [192, 236], "pytorchfashionmnist": [192, 236], "mxnetfashionmnist": [192, 236], "tensorflowfashionmnist": [192, 236], "imagefold": [192, 236, 411, 415, 426], "expect": [192, 236, 388, 389, 418, 446, 454, 461], "subfold": [192, 236], "belong": [192, 236, 254, 323, 454], "class_1": [192, 236, 411], "xxx": [192, 236, 389, 411, 426], "png": [192, 236, 411], "xxy": [192, 236, 411], "xxz": [192, 236, 411], "class_n": [192, 236, 411], "123": [192, 236, 411, 460], "nsdf3": [192, 236, 411], "asd932_": [192, 236, 411], "categori": [192, 236, 260, 313, 409, 411, 436], "mxnetimagefold": [192, 236], "tensorflowtfrecorddataset": [192, 236], "tensorflowimagerecord": [192, 236], "imagenet": [192, 195, 203, 236, 239, 246, 391, 426, 435, 451, 459, 460, 463, 464], "000": [192, 236, 393, 411], "001": [192, 236, 411, 415, 458, 463], "099": [192, 236, 411], "tensorflowvocrecord": [192, 236], "pascal": [192, 236], "voc": [192, 236, 265, 318], "2012": [192, 236], "00000": [192, 236], "00004": [192, 236], "00001": [192, 236], "00003": [192, 236], "dummydataset": [193, 194, 237, 238], "127": [193, 194, 237, 238, 411, 454, 458], "float32": [193, 194, 207, 237, 238, 249, 261, 314, 394, 409, 411, 426, 454, 458, 460], "rang": [193, 194, 207, 237, 238, 249, 371, 373, 393, 394, 411, 413, 414, 415, 426, 449, 451, 454, 458, 460], "stand_norm": [193, 194, 237, 238, 411], "dummy_v2": [194, 238, 410, 411], "sparse_dummy_v2": [194, 238, 411], "label_shap": [194, 238, 411], "sparsedummydataset": [194, 238], "dense_shap": [194, 238, 411], "sparse_ratio": [194, 238, 411], "imagenetraw": [195, 239, 411], "data_path": [195, 239, 411], "image_list": [195, 239, 411], "img1": [195, 239, 411], "img2": [195, 239, 411], "imgx": [195, 239, 411], "val_map": [195, 239, 411], "txt": [195, 239, 411, 423], "pytorchimagenetraw": [195, 239], "mxnetimagenetraw": [195, 239], "tensorflowimagenetraw": [195, 239], "inteltensorflow": [195, 197, 239, 241, 423], "tensorflowimagenetdataset": [195, 239], "onnxrtimagenetdataset": [195, 239], "bert_dataset": [196, 201, 240, 245, 257, 310], "coco_dataset": [196, 201, 240, 245, 257, 310], "dummy_dataset": [196, 201, 240, 245, 257, 310], "dummy_dataset_v2": [196, 201, 240, 245, 257, 310], "imagenet_dataset": [196, 201, 240, 245, 257, 310], "style_transfer_dataset": [196, 201, 240, 245, 257, 310], "styletransferdataset": [197, 241], "content_fold": [197, 241, 411], "style_fold": [197, 241, 411], "crop_ratio": [197, 241, 411], "resize_shap": [197, 241, 411], "256": [197, 203, 241, 246, 411, 415, 426, 460], "image_format": [197, 241, 411], "holder": [197, 241, 411], "labelbalancecocorecordfilt": [198, 242], "balanc": [198, 242, 450, 458], "labelbalancecocorawfilt": [198, 242], "tensorflowfilt": [199, 243], "onnxrtqlfilt": [199, 243], "onnxrtitfilt": [199, 243], "pytorchfilt": [199, 243], "mxnetfilt": [199, 243], "filter_registri": [199, 243], "filter_typ": [199, 243], "__call__": [199, 243], "coco_filt": [200, 201, 244, 245, 257, 310], "imagenet_transform": [201, 204, 245, 247, 257, 310], "parsedecodecocotransform": 202, "decod": [202, 203, 246, 258, 311, 425, 460], "quantizedinput": [203, 246, 460], "labelshift": [203, 246, 460], "label_shift": [203, 246, 460], "parsedecodeimagenet": [203, 246, 460], "proto": [203, 207, 246, 249, 460], "parsedecodeimagenettransform": [203, 246], "tensorflowresizecropimagenettransform": [203, 246], "random_crop": [203, 246, 460], "resize_sid": [203, 246, 460], "resize_method": [203, 246], "bilinear": [203, 207, 246, 249, 460], "random_flip_left_right": [203, 246, 460], "mean_valu": [203, 246, 460], "channels_last": [203, 246, 429], "subpixel": [203, 246], "rgb": [203, 246], "seri": [203, 246, 393, 423, 426, 460], "applic": [203, 246, 417, 429, 446, 452, 458, 459, 460], "crop": [203, 207, 246, 249, 411, 460], "flip": [203, 207, 246, 249, 460], "left": [203, 207, 246, 249, 440, 446, 458, 460], "right": [203, 246, 261, 314, 388, 390, 446, 458, 460], "std": [203, 207, 246, 249, 426, 460], "bilinearimagenettransform": [203, 246], "central_fract": [203, 246, 460], "875": [203, 246, 460], "fraction": [203, 246, 460], "onnxbilinearimagenettransform": [203, 246], "onnxresizecropimagenettransform": [203, 246], "std_valu": [203, 246], "229": [203, 246, 426, 464], "225": [203, 246, 426, 464], "resizewithaspectratio": [203, 246], "87": [203, 246, 464], "inter_pol": [203, 246], "cv2": [203, 246], "inter_area": [203, 246], "aspect": [203, 207, 246, 249, 460], "postprocess_cl": [205, 215, 426], "user_postprocess": [205, 215], "convert_to_unicod": [206, 248], "unicod": [206, 248], "assum": [206, 248, 261, 272, 314, 394, 419, 446], "utf": [206, 248], "load_vocab": [206, 248], "vocab_fil": [206, 207, 248, 249, 460], "convert_by_vocab": [206, 248], "vocab": [206, 248], "whitespace_token": [206, 248], "whitespac": [206, 248, 263, 316], "clean": [206, 248, 389, 426], "piec": [206, 248, 258, 311, 417, 425], "fulltoken": [206, 248], "tokenzi": [206, 248], "basictoken": [206, 248], "punctuat": [206, 248, 258, 263, 311, 316], "lower": [206, 207, 248, 249, 263, 316, 357, 414, 451, 452, 454, 458, 460, 461], "wordpiecetoken": [206, 248], "unk_token": [206, 248], "unk": [206, 248], "max_input_chars_per_word": [206, 248], "200": [206, 248, 390, 461], "wordpiec": [206, 207, 248, 249, 460], "concat_gener": [207, 249], "inc": [207, 249, 388, 393, 429, 436, 446, 452, 453, 456], "tensorflowtransform": [207, 249], "mxnettransform": [207, 249], "pytorchtransform": [207, 249], "onnxrtqltransform": [207, 249], "onnxrtittransform": [207, 249], "transform_registri": [207, 249], "transform_typ": [207, 249], "basetransform": [207, 249], "tensorflowwrapfunct": [207, 249], "transform_func": [207, 249], "pytorchmxnettransform": [207, 249], "get_torchvision_map": [207, 249], "torchvis": [207, 249, 416, 420, 429, 435], "composetransform": [207, 249], "transform_list": [207, 249, 460], "compos": [207, 249, 376, 460], "croptoboundingbox": [207, 249, 460], "offset_height": [207, 249, 460], "offset_width": [207, 249, 460], "target_height": [207, 249, 460], "target_width": [207, 249, 460], "box": [207, 249, 261, 265, 314, 318, 390, 425, 429, 440, 446, 459, 460, 461], "coordin": [207, 249, 297, 356, 460, 461], "top": [207, 249, 256, 265, 280, 285, 293, 318, 425, 446, 460], "corner": [207, 249, 394, 460], "horizont": [207, 249, 460], "mxnetcroptoboundingbox": [207, 249], "onnxrtcroptoboundingbox": [207, 249], "tensorflowcroptoboundingbox": [207, 249], "resizewithratio": [207, 249, 460], "min_dim": [207, 249, 460], "800": [207, 249, 460], "max_dim": [207, 249, 460], "1365": [207, 249, 460, 464], "constant_valu": [207, 249], "longest": [207, 249, 460], "side": [207, 249, 411, 440, 460], "doesn": [207, 249, 394, 415, 426, 447, 463], "exce": [207, 249, 460], "tensorflowresizewithratio": [207, 249], "perm": [207, 249, 460], "permut": [207, 249, 460], "tensorflowtranspos": [207, 249], "mxnettranspos": [207, 249], "pytorchtranspos": [207, 249], "randomverticalflip": [207, 249, 460], "randomli": [207, 249, 273, 297, 356, 391, 458, 460, 461], "tensorflowrandomverticalflip": [207, 249], "randomhorizontalflip": [207, 249, 426, 460], "tensorflowrandomhorizontalflip": [207, 249], "toarrai": [207, 249, 460], "pil": [207, 249, 460], "casttftransform": [207, 249], "castonnxtransform": [207, 249], "castpytorchtransform": [207, 249], "centercroptftransform": [207, 249], "center": [207, 249, 392, 393, 423, 460, 461], "paddedcentercroptransform": [207, 249], "crop_pad": [207, 249], "resizetftransform": [207, 249], "nearest": [207, 249, 460], "bicub": [207, 249, 460], "resizepytorchtransform": [207, 249], "randomcroptftransform": [207, 249], "randomresizedcroppytorchtransform": [207, 249], "08": [207, 249, 460, 464], "randomresizedcropmxnettransform": [207, 249], "randomresizedcroptftransform": [207, 249], "normalizetftransform": [207, 249], "rescal": [207, 249, 460], "deviat": [207, 249, 460], "broadcast": [207, 249, 415, 460], "rescalekeraspretraintransform": [207, 249], "rescaletftransform": [207, 249], "rescaletransform": [207, 249], "alignimagechanneltransform": [207, 249], "dim": [207, 249, 458, 460], "align": [207, 249, 388, 460], "w": [207, 249, 451, 458, 460], "must": [207, 249, 261, 314, 389, 390, 409, 410, 423, 454, 460], "pytorchalignimagechannel": [207, 249], "tondarraytransform": [207, 249], "resizemxnettransform": [207, 249], "resizetransform": [207, 249], "cropresizetftransform": [207, 249], "boundari": [207, 249, 460], "area": [207, 249, 261, 314, 425, 460], "pytorchcropresizetransform": [207, 249], "mxnetcropresizetransform": [207, 249], "cropresizetransform": [207, 249], "centercroptransform": [207, 249], "mxnetnormalizetransform": [207, 249], "pytorchnormalizetransform": [207, 249], "normalizetransform": [207, 249], "randomcroptransform": [207, 249], "randomresizedcroptransform": [207, 249], "get_final_text": [207, 249], "pred_text": [207, 249], "orig_text": [207, 249], "project": [207, 249, 387, 388, 389, 452, 457, 461, 465], "squadexampl": [207, 249], "qas_id": [207, 249], "question_text": [207, 249], "doc_token": [207, 249], "orig_answer_text": [207, 249], "start_posit": [207, 249], "end_posit": [207, 249], "is_imposs": [207, 249], "simpl": [207, 249, 423, 426, 457, 458, 461], "answer": [207, 249, 262, 263, 315, 316, 388, 451, 460, 464], "posit": [207, 249, 388, 425, 429], "unique_id": [207, 249], "example_index": [207, 249], "doc_span_index": [207, 249], "token_to_orig_map": [207, 249], "token_is_max_context": [207, 249], "input_mask": [207, 249, 426], "segment_id": [207, 249, 426], "read_squad_exampl": [207, 249], "input_fil": [207, 249], "doc_strid": [207, 249, 460], "max_query_length": [207, 249, 460], "output_fn": [207, 249], "inputbatch": [207, 249], "collecttransform": [207, 249], "10833": [207, 249], "tfsquadv1posttransform": [207, 249], "n_best_siz": [207, 249, 460], "20": [207, 249, 450, 458, 460, 463, 464], "384": [207, 249, 460], "64": [207, 249, 391, 458, 460, 464], "max_answer_length": [207, 249, 460], "30": [207, 249, 416, 420, 422, 458, 460, 464], "nbest_predict": [207, 249, 460], "question": [207, 249, 262, 263, 315, 316, 388, 389, 394, 423, 429, 451, 458, 460, 464], "anoth": [207, 249, 258, 267, 311, 384, 413, 427, 439, 443, 460, 461], "long": [207, 249, 418, 460], "document": [207, 249, 371, 389, 399, 415, 427, 431, 441, 444, 445, 456, 460, 462], "chunk": [207, 249, 460], "tfmodelzoocollecttransform": [207, 249], "tfsquadv1modelzooposttransform": [207, 249], "squadv1": [207, 249, 460], "see": [207, 249, 258, 311, 388, 390, 392, 424, 426, 439, 440, 443, 446, 447, 458, 459, 461, 464], "parsedecodevoctransform": [207, 249], "conf_fname_or_obj": [208, 217, 250, 256, 266, 267, 268, 269, 271, 280, 285, 293], "thei": [208, 371, 388, 413, 419, 425, 426, 427, 434, 448], "possibl": [208, 449, 451, 455, 461], "unnecessari": [208, 426], "tensorflowcrossentropyloss": 209, "pytorchcrossentropyloss": 209, "tensorflowsparsecategoricalcrossentropi": 209, "sparsecategoricalcrossentropyloss": 209, "setter": 210, "calib_dataload": [210, 294, 352, 390, 393, 410, 411, 420, 421, 425, 426, 454, 455], "reason": [210, 388, 410, 459, 461], "know": [210, 415, 456], "known": [210, 297, 356, 417, 426, 459, 461], "open": [211, 257, 310, 376, 386, 388, 393, 417, 418, 426, 441, 444, 447, 452], "metric_cl": [212, 318, 352, 426], "user_metr": [212, 318, 352], "alwai": [212, 261, 314, 318, 352, 425, 426], "recommend": [212, 318, 394, 411, 417, 419, 437, 440, 445, 447, 451, 453, 461], "set_backend": 213, "tensorflowoptim": 214, "pytorchoptim": 214, "optimizer_registri": 214, "optimizer_typ": 214, "cross": [214, 265, 318, 421, 461], "tensorflowsgd": 214, "tensorflowadamw": 214, "tensorflow_addon": 214, "adamw": 214, "tensorflowadam": 214, "adam": [214, 463], "pytorchsgd": 214, "record_output": 216, "output_process": 216, "help": [216, 267, 428, 429, 435, 446, 461, 462], "get_activ": 216, "f": [219, 413, 415, 454, 458], "pickle_modul": 219, "pickle_protocol": 219, "_use_new_zipfile_seri": 219, "prepare_prun": [219, 451], "opt": [219, 393, 434, 458], "tensorflowimagefold": 236, "qlinear2qdq": [251, 257, 310], "qlinearop": [252, 422, 437, 454], "check_model": 252, "modelproto": [252, 254, 319, 428], "onnx_qlinear_to_qdq": 252, "input_name_to_nod": 252, "destin": [252, 267], "tf_to_fp32_onnx": 253, "tf_to_int8_onnx": 253, "int8_model": [253, 254, 394], "update_weight_bia": 254, "fp32_onnx_path": [254, 255], "wegiht": 254, "set_data_typ": 254, "weight_typ": 254, "activation_typ": 254, "get_node_map": 254, "module_node_map": 254, "get_quantizable_onnx_op": 254, "quantize_nod": 254, "build_scale_map": 254, "int8_scale_info": 254, "scale_zp_dict": 254, "set_scale_info": 254, "int8_onnx_model": 254, "int8_onnx_path": 254, "recalculate_bia": 254, "recalcul": [254, 458], "remove_nodes_by_nam": 254, "sub_graph_with_int32_bia": 254, "a_info": 254, "b_info": 254, "bias_nam": 254, "int32": [254, 411], "nodeproto": 254, "_type_": 254, "qdq_fp32_bia": 254, "excut": 254, "qdq_int32_bia": 254, "qdq_fp32_bias_qdq": 254, "torch_to_fp32_onnx": 254, "do_constant_fold": 254, "verbos": [254, 297, 356], "torch_to_int8_onnx": 254, "u8s8": 254, "optionl": 254, "onnx2numpy_dtyp": 255, "onnx_node_typ": 255, "dummydataread": 255, "dataread": 255, "achiev": [256, 293, 417, 425, 426, 449, 451, 452, 454, 459, 461], "across": [256, 266, 293, 319, 412, 426, 451, 458, 461], "variou": [256, 266, 293, 319, 422, 429, 451, 453], "dl": [256, 266, 280, 285, 293, 319, 421, 433, 446, 452], "bring": [256, 293, 440, 458], "unifi": [256, 293, 394, 410, 421, 422, 426, 428], "vari": [256, 280, 285, 293, 450, 451, 458, 464], "roc": [256, 265, 280, 285, 293, 318], "flexibl": [256, 280, 285, 293, 413, 451], "via": [256, 280, 285, 293, 388, 415, 422, 426, 429, 446, 451], "popular": [257, 310, 386, 393, 394, 413, 416, 417, 420, 426, 451, 454, 461, 462], "compress": [257, 280, 285, 310, 329, 373, 386, 393, 399, 413, 422, 426, 446, 448, 449, 451, 452, 454, 458, 462, 464], "techniqu": [257, 310, 386, 393, 422, 426, 429, 449, 451, 453, 454, 462, 463, 464], "bleu": [257, 259, 264, 310, 312, 317, 425, 451], "bleu_util": [257, 264, 310, 317], "coco_label_map": [257, 264, 310, 317], "coco_tool": [257, 264, 310, 317], "evaluate_squad": [257, 264, 310, 317], "f1": [257, 262, 264, 265, 310, 315, 317, 318, 415, 425, 426, 457, 464], "basic_na": [257, 270, 310], "nas_util": [257, 270, 310], "pruner_legaci": [257, 310], "gradient_sensit": [257, 276, 310], "group_lasso": [257, 276, 310], "pruning_recip": [257, 310], "tile_pattern": [257, 281, 282], "pytorch_prun": [257, 310], "logger": [257, 286, 310, 374, 377, 384], "prune_util": [257, 286, 310], "tuning_sampl": [257, 299, 305, 310, 360, 366], "tuning_spac": [257, 299, 305, 306, 308, 310, 360, 366, 367, 369], "tuning_struct": [257, 299, 305, 306, 307, 310, 360, 366, 367, 368], "auto_mixed_precis": [257, 299, 310, 360], "graph_optim": [257, 310], "mixed_precis": [257, 310, 319, 426], "model_convers": [257, 310], "pruning_v2": [257, 310], "unicoderegex": [258, 311], "hoc": [258, 311], "hack": [258, 311], "recogn": [258, 311, 461], "nondigit_punct_r": [258, 311], "compil": [258, 311, 426, 450], "express": [258, 311, 388], "preced": [258, 311, 458], "digit": [258, 311, 452], "punct_nondigit_r": [258, 311], "symbol_r": [258, 311], "bleu_token": [258, 311], "mose": [258, 311], "smt": [258, 311], "mosesdecod": [258, 311], "mteval": [258, 311], "v14": [258, 311], "pl": [258, 311], "l954": [258, 311], "l983": [258, 311], "bilingu": [258, 311], "understudi": [258, 311], "qualiti": [258, 311], "machin": [258, 311, 417, 423, 432, 446, 452, 458, 459], "translat": [258, 259, 311, 312, 451, 461], "natur": [258, 311, 417], "approxim": [258, 259, 311, 312, 425], "glue": [258, 265, 311, 318, 411, 425, 426, 435], "word": [258, 311, 425, 451], "ngram": [258, 311, 425], "breviti": [258, 259, 311, 312, 425], "penalti": [258, 259, 311, 312, 425], "doe": [258, 311, 370, 411, 425, 426, 456, 460], "beam": [258, 311, 425], "tensor2tensor": [259, 312], "bleu_hook": [259, 312], "compute_bleu": [259, 312], "reference_corpu": [259, 312], "translation_corpu": [259, 312], "max_ord": [259, 312], "use_bp": [259, 312], "against": [259, 312], "gram": [259, 312], "bleu_scor": [259, 312], "third": [261, 314, 424], "parti": [261, 314, 424, 454], "pycocotool": [261, 314, 418, 423], "noth": [261, 314, 461], "thu": [261, 314, 426, 451, 454], "cannot": [261, 314, 390, 417, 418, 427, 459], "jonathanhuang": [261, 314], "image_id": [261, 314, 425], "encod": [261, 314, 460], "invok": [261, 314], "groundtruth_dict": [261, 314], "exportgroundtruthtococo": [261, 314], "groundtruth_boxes_list": [261, 314], "groundtruth_classes_list": [261, 314], "max_num_class": [261, 314], "output_path": [261, 314], "detections_list": [261, 314], "exportdetectionstococo": [261, 314], "detection_boxes_list": [261, 314], "detection_scores_list": [261, 314], "detection_classes_list": [261, 314], "cocowrapp": [261, 314], "loadannot": [261, 314], "cocoevalwrapp": [261, 314], "agnostic_mod": [261, 314], "computemetr": [261, 314], "detection_typ": [261, 314], "bbox": [261, 314, 390, 425], "hold": [261, 297, 314, 356, 411], "iou_typ": [261, 314], "iou_thr": [261, 265, 314, 318, 425], "map_point": [261, 265, 314, 318, 425], "cocoev": [261, 314], "mscoco": [261, 314], "Then": [261, 314, 439, 441, 443, 444, 458, 461], "exportsingleimagegroundtruthtococo": [261, 314], "next_annotation_id": [261, 314], "category_id_set": [261, 314], "groundtruth_box": [261, 314], "groundtruth_class": [261, 314], "groundtruth_mask": [261, 314], "groundtruth_is_crowd": [261, 314], "ingest": [261, 314], "here": [261, 314, 371, 411, 415, 416, 417, 419, 420, 425, 434, 441, 444, 446, 454, 456, 457, 464], "ones": [261, 314, 451], "exportsingleimagedetectionstococo": [261, 314], "associ": [261, 314], "uniqu": [261, 294, 314, 454], "assign": [261, 314, 384, 415, 453], "num_gt_box": [261, 314], "num_detect": [261, 265, 314, 318, 425, 426, 463], "image_height": [261, 314], "image_width": [261, 314], "detection_mask": [261, 314], "crowd": [261, 314], "insid": [261, 314, 413, 414, 447, 451, 461], "exportsingleimagedetectionboxestococo": [261, 314], "detection_box": [261, 314, 426, 463], "detection_scor": [261, 314, 426, 463], "detection_class": [261, 314, 426, 463], "exporsingleimagedetectionboxestococo": [261, 314], "exportsingleimagedetectionmaskstococo": [261, 314], "allenai": [262, 263, 315, 316], "bi": [262, 263, 315, 316], "att": [262, 263, 315, 316], "flow": [262, 263, 315, 316, 390, 391, 426], "f1_score": [262, 263, 315, 316], "ground_truth": [262, 263, 315, 316], "ground": [262, 263, 315, 316], "truth": [262, 263, 315, 316], "metric_max_over_ground_truth": [262, 263, 315, 316], "metric_fn": [262, 263, 315, 316], "exact_match_scor": [262, 315], "exact": [262, 315], "averag": [262, 263, 265, 315, 316, 318, 425, 426, 461], "articl": [262, 263, 315, 316], "paragraph": [262, 263, 315, 316], "qa": [262, 263, 315, 316], "cantain": [262, 263, 315, 316], "normalize_answ": [263, 316], "extra": [263, 316, 426], "newlin": [263, 316], "tab": [263, 316, 446, 459], "harmon": [263, 265, 316, 318], "recal": [263, 265, 316, 318], "answer_start": [263, 316], "177": [263, 316], "denver": [263, 316], "bronco": [263, 316], "nfl": [263, 316], "team": [263, 316, 388, 455], "afc": [263, 316], "super": [263, 316, 391], "bowl": [263, 316], "50": [263, 316, 391, 458, 464], "56be4db0acb8001400a502ec": [263, 316], "form": [263, 316, 413, 446], "percentag": [263, 316, 463], "tensorflowmetr": [265, 318], "maintain": [265, 318, 388, 389, 393, 428, 429, 441, 444, 456], "pytorchmetr": [265, 318], "mxnetmetr": [265, 318], "onnxrtqlmetr": [265, 318], "onnxrtitmetr": [265, 318], "metric_registri": [265, 318], "metric_typ": [265, 318], "decorator_metr": [265, 318], "basemetr": [265, 318, 352], "single_output": [265, 318], "hvd": [265, 318, 415], "wrappytorchmetr": [265, 318], "wrapmxnetmetr": [265, 318], "wraponnxrtmetr": [265, 318], "proport": [265, 318], "were": [265, 318, 432, 451], "pred_list": [265, 318], "pytorchloss": [265, 318], "mae": [265, 318, 425], "compare_label": [265, 318, 352, 425], "actual": [265, 318, 415, 458], "rmse": [265, 318, 425, 461], "squar": [265, 300, 318, 361, 425, 458, 461], "tensorflowtopk": [265, 318], "k": [265, 318, 352, 425], "among": [265, 318, 440, 458], "outcom": [265, 318], "num_correct": [265, 318], "num_sampl": [265, 318], "generaltopk": [265, 318], "cocomapv2": [265, 318, 425], "anno_path": [265, 318, 425], "map_kei": [265, 318], "detectionboxes_precis": [265, 318], "output_index_map": [265, 318, 425], "tensorflowmap": [265, 318], "tensorflowcocomap": [265, 318], "tensorflowvocmap": [265, 318], "squadf1": [265, 318, 425], "miou": [265, 318], "num_class": [265, 318], "21": [265, 318, 434, 435, 452, 458, 464], "iou": [265, 318], "intersect": [265, 318, 394, 425], "union": [265, 318, 373, 425], "onnxrtglu": [265, 318], "dlrm": [265, 318], "modelconvers": 267, "typic": [267, 294, 391, 393, 414, 416, 420, 451, 464], "basicna": 268, "model_build": [268, 271], "conf_fnam": 268, "nasbas": [271, 391], "nas_registri": 272, "nas_method": 272, "create_search_space_pool": 272, "idx": [272, 411], "enumer": [272, 373, 394, 413, 414, 415, 426, 449, 451, 459], "find_pareto_front": 272, "pareto": [272, 391], "front": [272, 391], "n_point": 272, "n_metric": 272, "n_pareto_point": 272, "gridsearch": 273, "grid": [273, 391], "whole": [273, 454], "randomsearch": 273, "bayesianoptimizationsearch": 273, "gradientsensitivityprun": 274, "pytorchmodel": [274, 275, 277, 278, 279, 328], "overwritten": [274, 275, 277, 278, 279, 434], "grouplassoprun": 275, "legaci": 276, "basicmagnitudeprun": 277, "lock": [278, 279, 422, 449, 451], "pruner_registri": 279, "clase": 279, "pruningconf": [280, 285], "tfpruningcallback": [280, 285], "input_model": [280, 285, 428, 459], "pure": [280, 285, 427, 451], "pattern_registri": 283, "pattern_typ": 283, "patternbas": 283, "mask_shap": [283, 284], "is_contigu": 283, "tile": 284, "tilepatternbas": 284, "tilepattern_1x1": 284, "1x1": [284, 413, 426, 451], "tilepattern_2x2": 284, "2x2": [284, 458], "tilepattern_1x16": 284, "1x16": 284, "tilepattern_4x1": 284, "tilepattern_1x2": 284, "1x2": [284, 458], "reset_non_value_to_default": 289, "obejct": 289, "parse_not_to_prun": 289, "update_frequency_on_step": [290, 453], "max_sparsity_ratio_per_lay": [290, 453], "magnitudeprun": 290, "snipprun": 290, "snipmomentumprun": 290, "moreoev": 290, "least": [291, 426, 451, 461], "templat": [291, 426, 451], "tree": [291, 307, 368], "huggingface_model": 291, "eager": [291, 351, 415, 422, 454, 455, 459, 464], "config_file_path": 291, "pruner_info": 291, "quantconf": 293, "server": [294, 446], "seper": 294, "opt_model": [294, 426], "fulli": [294, 426, 454, 458], "train_func": [294, 373, 415, 426, 454], "automixedprecisiontunestrategi": [295, 354], "basictunestrategi": [296, 355], "stage": [296, 301, 353, 355, 362, 413, 451, 459, 461], "polici": [296, 300, 353, 355, 361, 388, 393, 450, 463, 465], "bayesiantunestrategi": [297, 356], "acq_max": [297, 356], "ac": [297, 356], "gp": [297, 356], "y_max": [297, 356], "n_warmup": [297, 356], "10000": [297, 356, 451], "n_iter": [297, 356], "acquisit": [297, 356], "gaussian": [297, 356, 461], "relev": [297, 356], "limit": [297, 356, 384, 393, 413, 459], "acq": [297, 356], "randomst": [297, 356], "scipi": [297, 356], "x_max": [297, 356], "targetspac": [297, 356], "pbound": [297, 356], "9527": [297, 356, 426, 463], "allow": [297, 356, 413, 415, 425, 426, 427, 453, 458, 461, 463], "bayesianoptim": [297, 356], "exhaustivetunestrategi": [298, 358], "msetunestrategi": [300, 361], "mse_v2tunestrategi": [301, 362], "revert": [301, 309, 362, 370, 461], "randomtunestrategi": [302, 363], "strategy_registri": [303, 364, 461], "tunestrategi": [303, 364, 461], "tuningsamplerregistri": [306, 367], "tuningsampl": [306, 367], "tuningord": [306, 367], "Not": [306, 307, 367, 368, 384, 391], "tuningspac": [306, 307, 367, 368], "tuning_order_lst": [306, 367], "initial_op_tuning_cfg": [306, 367], "modelwisetuningsampl": [306, 367], "tuning_items_prior": [306, 367], "op_dtype_dict": [306, 367], "optuningconfig": [306, 307, 308, 367, 368, 369], "optypewisetuningsampl": [306, 367], "opwisetuningsampl": [306, 367], "fallbacktuningsampl": [306, 367], "op_dtyp": [306, 367], "accumul": [306, 367, 461], "skip_first": [306, 367], "smoothquantsampl": 306, "tuningitem": [307, 368], "item_typ": [307, 368], "pattern_to_intern": [307, 368], "default_dtyp": [307, 368], "pattern_to_path": [307, 368], "quant_mode_from_pattern": [307, 368], "internal_pattern": [307, 368], "initial_tuning_cfg_with_quant_mod": [307, 368], "op_name_typ": [307, 368], "step1": [307, 368], "step2": [307, 368], "complet": [307, 368, 394, 454, 461, 463, 464], "step3": [307, 368], "step4": [307, 368], "step5": [307, 368], "op_quant_mod": [308, 369], "ordereddefaultdict": [309, 370], "extract_data_typ": [309, 370], "data_typ": [309, 370], "sign": [309, 370, 389, 454, 457], "reverted_data_typ": [309, 370], "signed_flag": [309, 370], "get_adaptor_nam": [309, 370], "experiment": [310, 345, 350, 391, 411, 414, 415, 417, 426, 451, 453, 456, 460], "base_model": [310, 321], "keras_model": [310, 321], "mxnet_model": [310, 321], "nets_factori": [310, 321], "onnx_model": [310, 321, 345], "tensorflow_model": [310, 321, 350], "torch_model": [310, 321], "collect_layer_histogram": [310, 377], "create_obj_from_config": [310, 377], "kl_diverg": [310, 377], "load_huggingfac": [310, 377, 426], "neural_insights_util": [310, 377], "weights_detail": [310, 377], "sub_class": [318, 352], "register_customer_metr": 318, "mani": [318, 352, 423, 461, 463], "tell": [318, 352, 453], "topk": [318, 352, 415, 425, 426, 454], "matrix": [318, 352, 393, 437, 462], "frozen": [319, 327, 352, 428], "savedmodel": [319, 327, 352, 464], "chould": 319, "onnx_ml_pb2": [319, 428], "hybirdblock": [319, 352], "paramt": [319, 373], "basemodel": 320, "plai": [320, 452, 458], "role": [320, 458], "kerasmodel": 322, "get_model_fwk_nam": 323, "fwk": 323, "mxnetmodel": 324, "net": 325, "factori": [325, 332, 334, 339, 342, 344, 349], "tfslimnetsfactori": 325, "onnxmodel": [326, 345], "get_model_typ": 327, "validate_graph_nod": 327, "validate_and_inference_input_output": 327, "input_tensor_nam": 327, "output_tensor_nam": 327, "graph_sess": 327, "graph_def_sess": 327, "frozen_pb_sess": 327, "load_saved_model": 327, "saved_model_tag": 327, "signatur": 327, "saved_model_dir": 327, "tag": [327, 458, 459], "metagraphdef": 327, "keras_sess": 327, "slim_sess": 327, "checkpoint_sess": 327, "estimator_sess": 327, "saved_model_sess": 327, "tensorflowbasemodel": [327, 350], "tensorflowsavedmodelmodel": 327, "tensorflowqatmodel": 327, "tensorflowcheckpointmodel": 327, "checkpoint": [327, 383, 428], "tensorflowmodel": 327, "pytorchbasemodel": 328, "pytorchfxmodel": 328, "ipexmodel": 328, "driven": [329, 393, 426, 427, 446, 448, 459], "objective_registri": 329, "objective_custom_registri": 329, "obj_cl": 329, "eural_compressor": 329, "objective_cl": 329, "user_object": 329, "__class__": 329, "__name__": 329, "objective_cfg": 329, "usr_cfg": 329, "user_obj_cfg": 329, "easili": [329, 394, 430, 434, 446, 448, 458], "peak": [329, 448], "multiobject": 329, "metric_criterion": 329, "metric_weight": 329, "obj_criterion": 329, "obj_weight": 329, "is_measur": 329, "parserfactori": 331, "onnxrtparserfactori": 333, "onnxprofilingpars": 335, "respons": [335, 336, 340, 454], "profilingpars": 336, "profilingresult": 337, "total_execution_tim": 337, "accelerator_execution_tim": 337, "cpu_execution_tim": 337, "op_run": 337, "op_defin": 337, "tensorflowparserfactori": 338, "tensorflowprofilingpars": 340, "profilerfactori": [341, 343, 348], "create_onnx_config": 346, "ort": 346, "independ": [346, 351], "sessionopt": 346, "delete_assign": 351, "create_tf_config": 351, "tf_modul": 351, "configproto": 351, "set_eager_execut": 351, "calib_func": [352, 455], "entir": [352, 373, 390, 451, 458], "autotunestrategi": 353, "conservativetunestrategi": 357, "o0": [357, 461], "who": [357, 388], "hawq_v2tunestrategi": 359, "made": [359, 394, 454, 456, 461], "impact": [359, 456, 461], "tunestrategymeta": 364, "metaclass": 364, "blockfallbacktuningsampl": 367, "op_block_lst": 367, "target_dtyp": 367, "build_slave_faker_model": 370, "slave": [370, 461], "virtual": [370, 452], "fun": 371, "attribute1": 371, "module_debug_level1": 371, "debug": [371, 380, 439, 443, 447, 461], "function1": 371, "param1": 371, "param2": 371, "parameter1": 371, "parameter2": 371, "o": [371, 423, 431, 450, 458], "function2": 371, "pep": 371, "484": 371, "output_model": [371, 410, 426, 459], "function3": 371, "section": [371, 413, 414, 446, 451, 453, 463], "restructuredtext": 371, "liter": 371, "attributeerror": 371, "except": [371, 384], "generator1": 371, "example_gener": 371, "exampleclass": 371, "param3": 371, "public": [371, 388, 441, 444], "attr1": 371, "attr2": 371, "attr5": 371, "api_doc_exampl": 372, "loop": [373, 390, 391, 419, 457, 461], "compressionmanag": 373, "uesd": 373, "deal": 373, "pruningconfig": 373, "orchestr": [373, 393, 422, 462], "on_train_begin": [373, 390, 413, 414, 426, 449, 451, 454], "train_loop": [373, 426, 449], "on_epoch_begin": [373, 376, 413, 414, 426, 449], "on_step_begin": [373, 376, 413, 414, 426, 449, 451], "on_after_compute_loss": [373, 413, 414, 426, 449], "backward": [373, 413, 414, 415, 426, 449, 451, 454, 456], "on_before_optimizer_step": [373, 413, 414, 426, 449, 451], "on_step_end": [373, 376, 413, 414, 426, 449], "on_epoch_end": [373, 376, 413, 414, 426, 449], "on_train_end": [373, 413, 414, 426, 449, 451, 454], "path_to_sav": 373, "manag": [373, 376, 420, 426, 429, 430, 440], "top1": [373, 451, 454, 464], "callbacks_list": 373, "layerhistogramcollector": 374, "layer_tensor": 374, "include_lay": 374, "get_func_from_config": 376, "func_dict": 376, "get_preprocess": 376, "get_metr": 376, "get_postprocess": 376, "get_algorithm": 376, "algo": 376, "create_dataset": 376, "cfg_preprocess": 376, "cfg_filter": 376, "create_dataload": 376, "dataloader_cfg": 376, "create_eval_func": 376, "postprocess_cfg": 376, "fp32_baselin": [376, 394], "baselin": [376, 457, 459], "create_train_func": 376, "train_cfg": 376, "Their": 376, "auxiliari": 377, "pretrain": [379, 429, 435], "optimizedmodel": 379, "from_pretrain": [379, 426], "save_for_huggingface_upstream": [379, 426], "output_dir": [379, 426, 434, 435], "msg": 380, "fatal": 380, "warn": 380, "warin": 380, "alia": [380, 384, 431, 436], "insight": [381, 393, 461], "register_neural_insights_workload": 381, "workload_loc": [381, 384], "workload_mod": 381, "workload": [381, 384, 452], "uuid": 381, "update_neural_insights_workload": 381, "workload_uuid": 381, "update_neural_insights_workload_accuracy_data": 381, "baseline_accuraci": 381, "optimized_accuraci": 381, "is_int8_model": 383, "checkpoint_dir": 383, "history_cfg": 383, "best_configur": 383, "best_model_weight": 383, "pt": [383, 428, 452, 454, 455], "snapshot": 383, "cfg_from_fil": 384, "yaml_fil": [384, 411, 415, 425], "lazyimport": 384, "lazi": 384, "till": [384, 461], "decorat": 384, "time_limit": 384, "get_siz": 384, "seen": [384, 394], "recurs": 384, "compute_spars": 384, "fault_tolerant_fil": 384, "equal_dict": 384, "d2": 384, "compare_kei": 384, "ignore_kei": 384, "ignor": [384, 411, 458], "cpuinfo": 384, "dump_elapsed_tim": [384, 394], "customized_msg": 384, "elaps": 384, "combine_histogram": 384, "old_hist": 384, "old": [384, 426, 456], "get_tensor_histogram": 384, "get_all_fp32_data": 384, "get_tuning_histori": 384, "tuning_history_path": 384, "num": [384, 425], "offlin": [384, 388, 426, 454, 458], "str2arrai": 384, "dequantizeweight": 384, "weight_tensor": 384, "min_filter_tensor": 384, "max_filter_tensor": 384, "scale_info": 384, "captureoutputtofil": 384, "tmp_file_path": 384, "stream": 384, "sy": [384, 432], "stderr": 384, "captur": 384, "statist": [384, 385], "header": [384, 418], "field_nam": 384, "output_handl": 384, "printer": 384, "global_st": 384, "load_data_from_pkl": 384, "pkl": 384, "dump_data_to_loc": 384, "show_memory_info": 384, "hint": 384, "dump_class_attr": 384, "compare_object": 384, "obj1": 384, "obj2": 384, "ignore_attr": 384, "comparison": [384, 456, 459], "alias_param": 384, "param_nam": 384, "param_alia": 384, "alias": 384, "print_tabl": 384, "column_map": 384, "table_entri": 384, "titl": [384, 424, 447], "insert_newlin": 384, "prettyt": 384, "column": [384, 458], "func": [384, 454, 463], "handler": [384, 461], "get_tensors_info": 384, "get_weights_detail": 384, "weightdetail": 384, "dump_tabl": 384, "filepath": 384, "file_typ": 384, "csv": [384, 391], "dump_table_to_csv": 384, "get_number_of_socket": 384, "platform": [384, 393, 422, 429, 437, 452, 454, 464], "opentri": 384, "activation_min": 384, "activation_max": 384, "print_op_list": 384, "get_op_list": 384, "minmax_file_path": 384, "input_model_tensor": 384, "optimized_model_tensor": 384, "dequan_min_max": 384, "calculate_ms": 384, "mse_metric_gap": 384, "fp32_tensor": 384, "dequantize_tensor": 384, "euclidean": [384, 413], "distanc": [384, 413], "weightsdetail": 385, "input_tensor_data": 385, "optimized_tensor_data": 385, "weightsstatist": 385, "welcom": [387, 388, 389, 393, 465], "interest": [388, 393, 459], "foster": 388, "particip": 388, "commun": 388, "harass": 388, "experi": [388, 429, 457, 458, 461], "everyon": 388, "regardless": 388, "ag": 388, "bodi": 388, "ethnic": 388, "characterist": 388, "gender": 388, "educ": 388, "socio": 388, "econom": 388, "appear": [388, 440, 446], "race": 388, "religion": 388, "sexual": 388, "orient": 388, "behavior": [388, 389, 394, 419, 428, 459, 461, 463], "contribut": [388, 393, 451], "inclus": 388, "Being": 388, "respect": [388, 419, 451, 458, 463], "viewpoint": 388, "gracefulli": 388, "critic": 388, "focus": [388, 394], "empathi": 388, "toward": [388, 413], "member": [388, 394], "unaccept": 388, "imageri": 388, "unwelcom": 388, "troll": 388, "insult": 388, "derogatori": 388, "comment": [388, 411, 425, 426, 460], "polit": 388, "attack": 388, "privat": 388, "publish": [388, 424, 427, 447, 458], "electron": 388, "explicit": 388, "permiss": 388, "inappropri": 388, "profession": 388, "clarifi": 388, "appropri": [388, 458], "fair": 388, "action": [388, 441, 444], "edit": 388, "reject": 388, "commit": [388, 389], "wiki": 388, "issu": [388, 389, 392, 423, 454, 459], "ban": 388, "temporarili": 388, "deem": 388, "threaten": 388, "offens": 388, "harm": 388, "mail": 388, "social": [388, 452], "media": [388, 452], "account": [388, 457, 461], "appoint": 388, "onlin": [388, 457], "event": [388, 459], "abus": 388, "report": [388, 389, 457], "contact": [388, 456, 457], "complaint": 388, "review": [388, 389], "investig": 388, "circumst": [388, 453], "oblig": 388, "confidenti": 388, "regard": [388, 455], "incid": 388, "separ": [388, 421, 424, 449, 453], "good": [388, 454, 461], "faith": 388, "face": [388, 393, 399, 429, 433, 452, 456], "repercuss": 388, "leadership": 388, "faq": [388, 393], "page": [388, 389, 393], "send": 389, "view": [389, 393, 416, 437, 446, 456], "pylint": 389, "flake8": 389, "autopep8": 389, "cover": [389, 417, 421, 452], "would": [389, 426, 427, 451, 454, 458], "adopt": [389, 429, 451, 452, 458], "certif": 389, "agre": 389, "j": [389, 393, 458, 464], "bug": 389, "jira": 389, "ticket": 389, "potenti": [389, 391], "risk": 389, "pr": [389, 425, 441, 444, 456], "reproduc": 389, "hardwar": [389, 393, 394, 413, 422, 426, 427, 446, 450, 451, 452, 453], "submit": [389, 452], "intend": 389, "safe": 389, "collabor": [389, 431, 437], "adher": 389, "toolkit": [390, 423, 429, 437, 452, 462], "tracer": 390, "resolv": [390, 392], "floatfunct": 390, "cat": [390, 432], "done": [390, 413, 414, 430, 446, 451, 454], "10004": [390, 391, 394, 410, 413, 414, 417, 419, 422, 427, 449, 453, 463], "neural_compressor": [390, 391, 393, 409, 410, 411, 413, 414, 415, 417, 420, 421, 425, 426, 427, 428, 448, 449, 451, 453, 454, 455, 456, 457, 458, 460, 461, 463], "eval": [390, 410, 429, 454, 459], "fail": 390, "conduct": [390, 426, 434, 446, 462], "imper": 390, "therefor": [390, 426, 451, 454, 456, 458], "lot": [390, 458], "As": [390, 410, 413, 426, 440, 451, 461], "failur": 390, "successfulli": [390, 415, 452], "suggest": [390, 457], "traceabl": 390, "proxi": 390, "tutori": [390, 437, 452, 462], "prototyp": 390, "html": [390, 393, 441, 444], "highlight": 390, "untrac": 390, "ssd": [390, 464], "resnet34": [390, 464], "r34": 390, "bboxes_labels_scor": 390, "prob": 390, "45": [390, 458, 464], "max_output": 390, "zip": 390, "dbox": 390, "dlabel": 390, "dscore": 390, "decode_singl": 390, "autom": [391, 429, 446, 447, 458], "artifici": 391, "ann": 391, "par": 391, "outperform": 391, "hand": 391, "propos": [391, 394, 413, 427, 458], "lie": 391, "predictor": 391, "4x": [391, 454], "shown": [391, 410, 413, 425, 426, 440, 448, 449, 451, 458, 461], "figur": [391, 439, 440, 443], "popul": 391, "inner": 391, "evolutionari": 391, "cycl": 391, "until": [391, 461], "conclud": 391, "met": [391, 419, 427, 454, 459], "yet": [391, 441, 444, 447], "simplest": [391, 432], "launcher": [391, 393, 413, 414, 437, 462], "agent": 391, "nsga2": 391, "supernet": 391, "ofa_mbv3_d234_e346_k357_w1": 391, "acc": [391, 451, 459, 464], "mac": [391, 447], "num_ev": 391, "250": [391, 451], "results_csv_path": 391, "search_result": 391, "dataset_path": 391, "ilsvrc2012": 391, "aim": [391, 393, 429, 451, 458, 461, 462], "mobilenetv3": 391, "lt": [391, 411, 450, 464], "wmt": 391, "en": 391, "de": 391, "guidelin": [392, 393], "mainstream": [393, 462], "learn": [393, 394, 410, 411, 417, 421, 422, 423, 426, 427, 429, 431, 434, 435, 437, 440, 441, 444, 446, 451, 452, 454, 458, 459, 461, 462], "runtim": [393, 394, 395, 410, 416, 419, 422, 431, 436, 437, 453], "workflow": [393, 413, 423, 427, 441, 444, 459, 462], "particular": [393, 451], "wide": [393, 416, 427, 451, 454, 464], "xeon": [393, 423, 424, 427, 450, 452, 454, 455, 464], "scalabl": [393, 423, 427, 450, 452, 454, 455, 464], "processor": [393, 427, 450, 452, 454, 455, 464], "flex": [393, 423], "amd": [393, 422, 423, 464], "arm": [393, 422, 423, 464], "nvidia": [393, 422, 423, 464], "bloom": [393, 458], "176b": [393, 458], "7b": [393, 458], "stabl": [393, 423, 451, 452], "diffus": [393, 452, 464], "gpt": [393, 451, 458, 464], "hub": [393, 416, 420, 437], "hug": [393, 452], "vision": [393, 417, 433, 458], "coder": [393, 422, 430, 431, 434, 437, 440, 452], "cloud": [393, 452], "marketplac": [393, 447, 452], "googl": [393, 427, 452], "amazon": [393, 429, 437], "web": [393, 459], "servic": [393, 446, 450], "azur": [393, 452], "softwar": [393, 424, 427, 450, 451, 452, 456], "alibaba": [393, 436, 443, 444, 452], "tencent": [393, 452], "taco": [393, 452], "ai": [393, 429, 452, 455, 462], "ecosystem": [393, 452], "lightn": [393, 436], "pip": [393, 415, 418, 420, 423, 431, 434, 439, 441, 443, 444, 456], "wget": [393, 418, 420], "storag": [393, 420, 425, 458], "googleapi": [393, 420], "v1_6": [393, 420], "mobilenet_v1_1": [393, 420], "0_224_frozen": [393, 420], "quick": [393, 419, 462, 463], "overview": 393, "jupyterlab": [393, 429, 435, 437, 439, 443, 462], "studio": [393, 437, 446, 462], "topic": 393, "innov": [393, 437, 452, 462], "come": [393, 461], "soon": 393, "blog": [393, 452], "medium": [393, 452], "netflix": [393, 452], "2023": [393, 458, 464], "enhanc": [393, 429, 452, 455], "apr": [393, 452], "still": [393, 426, 452, 454, 455], "mlperf": [393, 452, 464], "5x": [393, 452], "neurip": [393, 452], "oct": [393, 452], "quala": [393, 452], "minilm": [393, 452, 464], "releas": [393, 423, 435, 437, 439, 443, 445, 465], "legal": [393, 465], "secur": [393, 450, 452, 465], "idea": [393, 451, 458, 461], "feel": 393, "look": [393, 394, 419, 425, 463], "bridg": [394, 422], "vanilla": [394, 422], "abcadaptor": 394, "__init__": [394, 410, 411, 425, 461], "query_fw_cap": 394, "query_fused_pattern": 394, "he": 394, "besid": [394, 413], "describ": [394, 419, 459], "past": 394, "mainten": 394, "difficult": [394, 458], "abil": [394, 411, 419, 458], "modif": [394, 410, 419, 434], "fragment": 394, "scenario": [394, 409, 413, 426, 451], "granular": [394, 419, 422, 432, 454, 458, 463], "semant": [394, 419], "mla": [394, 454], "becom": [394, 417, 451], "explor": 394, "inspect_tensor": 394, "op_list": [394, 459], "iteration_list": 394, "inspect_typ": 394, "save_to_disk": 394, "quantization_cfg": 394, "set_tensor": 394, "tensor_dict": 394, "diagnosis_help": 394, "linux": [409, 418, 440, 446], "x86_64": 409, "aarch64": 409, "encount": 410, "consum": 410, "previous": 410, "lack": [410, 418], "faster": [410, 412, 452, 461, 464], "treat": 410, "manner": [410, 413, 428], "labelbal": [410, 411], "300": [410, 411], "16": [410, 411, 458, 464], "input_data": 410, "customis": [410, 411], "One": [411, 415, 422, 451, 452, 461], "ensp": [411, 425, 460], "imagerecord": [411, 415, 463], "image_nam": 411, "cocorecord": 411, "gt": [411, 417, 458, 460], "int64": 411, "offer": 411, "style_transf": 411, "content": 411, "tfrecorddataset": 411, "helloworld": [411, 460], "aid": 412, "deploy": [412, 429, 446, 458], "infrastructur": 412, "expens": [413, 426, 461], "deploi": [413, 426, 461], "power": [413, 426, 440, 450, 452], "mobil": [413, 426, 464], "produc": 413, "instruct": [413, 423, 427, 441, 444, 452, 453, 454], "logit": 413, "softmax": 413, "l": [413, 459, 461], "kd": 413, "kullback": 413, "leibler": 413, "patient": 413, "compact": [413, 426, 432, 451], "agnost": 413, "resourc": [413, 461], "convolut": [413, 452], "ia": 413, "attach": [413, 426, 458], "shallow": 413, "deepest": 413, "deeper": 413, "10006": [413, 414], "student_output": [413, 414], "student_loss": [413, 414], "training_func_for_nc": [413, 414], "distil_loss_conf": 413, "accordingli": [413, 437], "promis": [414, 426, 451], "huge": [414, 451], "heavi": 414, "light": 414, "booster": 414, "degrad": [414, 451, 461], "incorpor": [414, 461], "novel": [414, 429, 440, 446], "place": [414, 423, 451, 459], "illustr": 414, "comb": 414, "distillation_criterion": [414, 426, 449], "q_conf": 414, "horovod": 415, "instal": [415, 418, 420, 429, 431, 434, 437, 441, 444, 446, 447, 450, 465], "builtin": 415, "program": [415, 424, 427, 429, 446], "addition": [415, 461], "enable_eager_execut": 415, "yaml_file_path": 415, "pre_process": 415, "simpli": [415, 428, 429, 431, 434, 446], "evaluation_result": 415, "evaluation_time_cost": 415, "partit": [415, 451], "distributedsampl": 415, "train_sampl": 415, "train_dataset": [415, 454], "num_replica": 415, "rank": 415, "train_load": 415, "train_kwarg": 415, "adadelta": 415, "distributedoptim": 415, "named_paramet": 415, "broadcast_paramet": 415, "root_rank": 415, "broadcast_optimizer_st": 415, "set_epoch": 415, "batch_idx": 415, "zero_grad": [415, 426, 451], "nll_loss": 415, "log_interv": 415, "0f": 415, "tloss": 415, "6f": 415, "dry_run": 415, "test_func": 415, "host": 415, "num_of_process": 415, "002": 415, "ssh": [415, 446], "prompt": 415, "readm": 415, "exactli": [415, 430], "cd": [415, 423], "recognit": [415, 417, 451, 459], "line": [415, 422, 429, 434, 435, 459], "resnet50_v1": [415, 426], "resizecropimagenet": [415, 460], "realiz": [415, 425, 448, 455, 457], "tow": 415, "node1": 415, "node2": 415, "TO": [415, 431], "your_node1_nam": 415, "your_node2_nam": 415, "resnet50_fp32_pretrained_model": 415, "nc_resnet50_v1": 415, "resnet": [415, 464], "varieti": [416, 453, 461], "demonstr": [416, 429, 459], "10k": [416, 420], "speedup": [416, 422, 454], "2x": [416, 422, 450], "vnni": [416, 422, 453, 454], "exchang": 417, "howev": [417, 451, 458], "hope": 417, "briefli": [417, 426, 458], "matur": 417, "major": [417, 421, 454, 458], "reus": 417, "inc_model": [417, 428], "fp32_onnx_config": 417, "verifi": 417, "gap": [417, 428], "matmulintegertofloat": 417, "matmulinteg": 417, "toolchain": 418, "bare": 418, "metal": 418, "sudo": [418, 432], "apt": [418, 423, 432, 440], "python3": 418, "dev": [418, 439, 443], "distutil": 418, "essenti": 418, "git": [418, 423], "libgl1": 418, "mesa": 418, "glx": 418, "libglib2": 418, "ln": 418, "sf": 418, "usr": 418, "incompat": 418, "88": [418, 457, 464], "80": [418, 458, 459, 464], "pyobject": 418, "reinstal": 418, "importerror": 418, "libgl": 418, "No": [418, 426, 450, 452], "yum": [418, 423], "opencv": [418, 440], "conda": [418, 423, 432, 440, 456], "13": [418, 423, 458], "pend": 418, "sqlalchemi": 418, "27": [418, 464], "alemb": 418, "forg": [418, 423], "friendli": [419, 426, 458, 463], "dive": [419, 462], "unless": 419, "purpos": [419, 427, 446, 453, 454], "setup": [419, 423, 441, 444, 451], "let": [419, 434, 451, 453, 463], "syntax": 419, "go": [419, 441, 444, 453, 460], "up1": 419, "up2": 419, "valid_mixed_precis": 419, "per_tensor": [419, 454, 463], "addn": 419, "grappler_optim": 419, "constfold": 419, "arithmet": 419, "debug_stripp": 419, "jupyt": [420, 437, 439, 440, 443], "lab": [420, 439, 440, 441, 443, 444], "click": [420, 422, 429, 430, 437, 440, 446, 452, 459], "concept": [421, 457, 462], "rather": 421, "custom_metr": 421, "refin": [421, 451], "These": 422, "broad": [422, 435, 462], "420": 422, "geomean": 422, "snippet": 422, "gui": [422, 451], "upload": [422, 441, 444], "button": [422, 440, 446], "dispatch": 422, "qintegerop": [422, 454], "plan": 422, "oneapi": [423, 452, 462], "analyt": [423, 452, 462], "success": 423, "frequent": 423, "ask": 423, "pypi": [423, 441, 444], "nightli": 423, "clone": [423, 439, 443], "consolid": 423, "latest": [423, 452, 456], "eas": [423, 431, 452], "along": [423, 451], "streamlin": 423, "scienc": 423, "websit": 423, "anaconda": 423, "suit": [423, 447, 459], "esri": 423, "formerli": 423, "skylak": 423, "cascad": 423, "lake": [423, 427, 452], "cooper": [423, 427, 452], "ic": [423, 452], "sapphir": 423, "rapid": 423, "hbm": 423, "arctic": 423, "sound": 423, "pont": 423, "vecchio": 423, "cento": 423, "ubuntu": [423, 450], "22": [423, 464], "04": [423, 450, 464], "fortensorflow": 423, "forpytorch": 423, "12": [423, 464], "11": [423, 425, 427, 458, 461], "tf_enable_onednn_opt": 423, "onednn": [423, 454], "newer": 423, "copyright": 424, "subject": 424, "accompani": 424, "research": [424, 458], "wish": 424, "bibtex": 424, "misc": 424, "author": 424, "feng": 424, "tian": 424, "hanwen": 424, "haihao": [424, 451], "shen": [424, 451], "suyu": 424, "chen": 424, "howpublish": 424, "year": 424, "logo": [424, 450], "atom": 424, "phi": 424, "pentium": 424, "vtune": 424, "corpor": [424, 450], "subsidiari": [424, 450], "brand": [424, 450], "claim": [424, 450], "popularli": 425, "industri": [425, 452], "label_map": 425, "decis": 425, "ap": 425, "curv": 425, "turn": [425, 440], "target_boxes_num": 425, "str_label": 425, "int_label": 425, "inturn": 425, "cocomap": 425, "vocmap": 425, "categor": 425, "multiclass": 425, "multilabel": 425, "multi_metr": 425, "newmetr": 425, "reset": 425, "reflect": [425, 450, 460], "deliv": [426, 452], "conveni": 426, "upgrad": 426, "veri": [426, 447, 454, 461], "speed": [426, 437, 451, 452, 454, 461], "fundament": 426, "comprehens": [426, 462], "kind": 426, "resort": 426, "automodelforsequenceclassif": 426, "autotoken": 426, "val_dataset": [426, 454], "val_dataload": [426, 454], "worker": [426, 454], "ping_memori": [426, 454], "formul": 426, "effort": 426, "written": 426, "onnxrt_integ": [426, 463], "onnxrt_qlinear": [426, 463], "unsupport": [426, 451], "image_tensor": [426, 463], "post_training_dynamic_qu": [426, 453, 461], "1000": [426, 463], "2000": 426, "sampling_s": [426, 463], "model_wis": [426, 463], "op_dict": 426, "op_wis": [426, 459, 463], "sigopt_api_token": [426, 457, 461], "sigopt_project_id": [426, 457, 461], "sigopt_experiment_nam": [426, 457, 461], "demo": 426, "600": [426, 464], "training_arg": 426, "emul": [426, 454], "trainer": [426, 437], "similar": [426, 453, 458, 461, 463], "maxim": [426, 451, 461], "pruning_func": 426, "num_train_epoch": [426, 451], "train_dataload": [426, 451, 454], "n_gpu": 426, "gradient_accumulation_step": 426, "clip_grad_norm_": 426, "max_grad_norm": 426, "rate": [426, 451, 454], "start_epoch": [426, 453, 463], "end_epoch": [426, 453, 463], "97": [426, 458, 464], "newli": [426, 451], "on_after_optimizer_step": [426, 451], "layer3": [426, 451], "layer2": [426, 451, 454], "lr_schedul": [426, 451], "weight_decai": [426, 463], "0004": 426, "nesterov": [426, 463], "randomresizedcrop": [426, 460], "totensor": [426, 460], "485": 426, "456": 426, "406": 426, "nepoch": 426, "cnt": 426, "loss_sum": 426, "iter_bar": 426, "tqdm": 426, "desc": 426, "teacher_logit": 426, "train_fun": 426, "training_func": 426, "recent": [426, 427], "growth": [426, 427, 451], "complex": [426, 427, 451], "significantli": [426, 427, 451, 461], "bandwidth": [426, 427], "exit_polici": [426, 463], "determinist": 426, "arbitrari": [426, 449], "meaning": [426, 449], "reli": [426, 458], "prune_conf": 426, "quantization_aware_training_conf": 426, "aforement": 426, "previou": [426, 451, 456, 458, 459, 461, 462], "inset": 426, "p_conf": [426, 449], "ssd_mobilenet_v1": 426, "benchmarkconf": 426, "half": [427, 437], "sixteen": 427, "launch": [427, 447], "3rd": [427, 452, 454, 455], "gen": [427, 452, 454, 455], "codenam": 427, "boost": [427, 430, 446, 451, 452], "x86": 427, "avx512": [427, 454], "vcvtne2ps2bf16": 427, "vcvtneps2bf16": 427, "vdpbf16p": 427, "consequ": 427, "avx512_bf16": 427, "cuda": [427, 429, 431, 454], "persist": 428, "brought": [428, 430, 437, 454], "tf2": 428, "h5": 428, "hybridblock": 428, "0000": 428, "saved_result": 428, "simplifi": [429, 440, 446, 451], "subsequ": [429, 446], "acquir": 429, "analysi": [429, 446, 451, 457], "heurist": [429, 446], "rule": [429, 451], "great": 429, "facilit": 429, "autocast": 429, "simultan": [429, 449, 453], "my_model": 429, "no_grad": 429, "memory_format": 429, "112": [429, 464], "rand": [429, 458], "plugin": [429, 447], "aw": [429, 437, 452, 464], "sagemak": [429, 437], "inlin": [429, 434, 437], "neural_cod": [429, 431, 433, 434, 435, 437], "bench": 429, "superbench": 429, "enjoi": [430, 434, 437], "rebuild": [430, 439, 443], "reload": [430, 447], "modern": 431, "democrat": [431, 452], "programm": [431, 437, 446], "nano_bf16_channels_last": 431, "resnet18": [431, 464], "nano_bf16_ipex_channels_last": 431, "nano_bf16_ipex": 431, "nano_bf16": 431, "nano_fp32_channels_last": 431, "nano_fp32_ipex_channels_last": 431, "nano_fp32_ipex": 431, "nano_gpu_to_cpu": 431, "nano_int8": 431, "nano_jit_bf16_channels_last": 431, "nano_jit_bf16_ipex_channels_last": 431, "nano_jit_bf16_ipex": 431, "nano_jit_bf16": 431, "nano_jit_fp32_channels_last": 431, "nano_jit_fp32_ipex_channels_last": 431, "nano_jit_fp32_ipex": 431, "nano_jit_fp32": 431, "nano_onnxruntime_fp32": 431, "nano_onnxruntime_int8_qlinear": 431, "openvino": 431, "nano_openvino_fp32": 431, "nano_openvino_int8": 431, "bc": [432, 440], "conda_prefix": 432, "echo": 432, "tradit": [432, 451], "libjemalloc": 432, "libiomp5": 432, "home": 432, "lib": 432, "ld_preload": 432, "malloc_conf": 432, "oversize_threshold": 432, "background_thread": 432, "metadata_thp": 432, "dirty_decay_m": 432, "9000000000": 432, "muzzy_decay_m": 432, "kmp_affin": 432, "kmp_blocktim": 432, "dnnl_primitive_cache_capac": 432, "cpufreq": 432, "scaling_governor": 432, "powersav": 432, "tee": 432, "pytorch_jit_script": [433, 436], "pytorch_channels_last": [433, 436], "run_bench": 433, "patch": [433, 446], "patch_path": 433, "your_patch_path": 433, "sweep": 433, "sweep_object": 433, "bench_config": 433, "bench_featur": 433, "sai": 434, "run_glu": [434, 435], "requisit": 434, "task_nam": [434, 435], "do_ev": [434, 435], "remain": 434, "itself": 434, "run_glue_optim": 434, "static_ipex": 434, "auto_qu": 435, "v4": [435, 464], "albert": [435, 464], "sst2": 435, "alexnet": [435, 464], "pytorch_amp": 436, "optimize_for_infer": 436, "pytorch_jit_trac": 436, "pytorch_jit_script_ofi": 436, "pytorch_jit_trace_ofi": 436, "torchdynamo": 436, "pytorch_torchdynamo_jit_script": 436, "pytorch_torchdynamo_jit_trac": 436, "pytorch_torchdynamo_jit_script_ofi": 436, "pytorch_torchdynamo_jit_trace_ofi": 436, "pytorch_inc_bf16": 436, "pytorch_inc_static_quant_fx": 436, "pytorch_inc_static_quant_ipex": 436, "pytorch_inc_dynamic_qu": 436, "pytorch_ipex_fp32": 436, "pytorch_ipex_bf16": 436, "pytorch_ipex_int8_static_qu": 436, "pytorch_ipex_int8_dynamic_qu": 436, "blade": 436, "disc": 436, "pytorch_aliblad": 436, "pytorch_lightning_bf16_cpu": 436, "tensorflow_amp": 436, "keras_amp": 436, "tensorflow_inc": 436, "keras_inc": 436, "onnx_inc_static_quant_qlinear": 436, "onnx_inc_static_quant_qdq": 436, "onnx_inc_dynamic_qu": 436, "optimum": [436, 437], "pytorch_inc_huggingface_optimum_stat": 436, "pytorch_inc_huggingface_optimum_dynam": 436, "intel_extension_for_transform": 436, "bigdl": [436, 437], "nano": [436, 437], "nano_": 436, "inc_auto": 436, "delight": 437, "announc": 437, "v": [437, 446, 451, 461, 463], "500": 437, "isa": 437, "xpu": 437, "delta": 437, "acc_delta": 437, "int8_acc": 437, "fp32_acc": 437, "ext": [439, 441, 443, 444, 445], "nodej": [439, 443], "jlpm": [439, 443], "pin": [439, 443], "yarn": [439, 443], "npm": [439, 440, 443], "lieu": [439, 443], "labextens": [439, 440, 443], "typescript": [439, 443], "watch": [439, 443], "termin": [439, 440, 443], "immedi": [439, 443, 451], "refresh": [439, 443], "browser": [439, 443], "wait": [439, 443, 446], "rebuilt": [439, 443], "easier": [439, 443, 446, 452], "symlink": [439, 443], "down": 440, "finish": 440, "enter": [440, 446], "blank": 440, "cell": 440, "gain": [440, 449, 452], "mkl": 440, "jemalloc": 440, "pip3": 440, "headless": 440, "pyproject": [441, 444], "toml": [441, 444], "twine": [441, 444], "whl": [441, 444], "dist": [441, 444], "sdist": [441, 444], "bdist_wheel": [441, 444], "deprec": [441, 444, 460], "frontend": [441, 444], "login": [441, 444, 457], "repositori": [441, 444], "cut": [441, 444], "fork": [441, 444], "admin_github_token": [441, 444], "pypi_token": [441, 444], "npm_token": [441, 444], "secret": [441, 444], "panel": [441, 444, 446], "draft": [441, 444], "changelog": [441, 444, 445], "pkg": [441, 444], "bot": [441, 444], "pick": [441, 444, 447], "feedstock": [441, 444], "hatch": 444, "notabl": 445, "vscode": [445, 447], "daili": 446, "give": [446, 461], "advantag": [446, 451, 453, 461], "remot": 446, "re": 446, "market": 446, "uninstal": 446, "fill": [446, 457, 460], "upper": 446, "sidebar": 446, "hover": 446, "track": [446, 457], "argpars": 446, "pop": 446, "diff": 446, "manifest": 447, "declar": 447, "palett": 447, "registercommand": 447, "amodio": 447, "tsl": 447, "matcher": 447, "dbaeumer": 447, "eslint": 447, "press": 447, "f5": 447, "ctrl": [447, 464], "hello": 447, "world": 447, "breakpoint": 447, "consol": 447, "relaunch": 447, "toolbar": 447, "node_modul": 447, "viewlet": 447, "dropdown": 447, "runner": 447, "startup": 447, "bundl": 447, "multi_object": 448, "benefit": 449, "instanti": 449, "platinum": [450, 464], "8358": 450, "manufactur": 450, "m50cyp2sbstd": 450, "bio": 450, "se5c620": 450, "86b": 450, "0005": 450, "2202160810": 450, "microcod": 450, "0xd000332": 450, "irq": 450, "60ghz": 450, "6chz": 450, "turbo": 450, "perf": 450, "512gb": 450, "16x32gb": 450, "ddr4": 450, "3200": 450, "mt": 450, "nic": 450, "1x": 450, "ethernet": 450, "100mb": 450, "i350": 450, "gigabit": 450, "drive": 450, "intel_ssdsckkb48": 450, "447": 450, "1g": 450, "publicli": 450, "degre": 450, "mark": 450, "trademark": 450, "neuron": 451, "art": 451, "grown": 451, "unpreced": 451, "increasingli": 451, "crucial": 451, "stand": 451, "delet": 451, "due": [451, 454, 458, 459], "commonli": 451, "salient": 451, "shrink": 451, "contextu": 451, "scene": 451, "haven": 451, "color": 451, "lowest": [451, 461], "formula": [451, 458], "emsp": 451, "partial": [451, 454], "downstream": 451, "finetun": 451, "prone": 451, "larger": [451, 458], "co": 451, "discourag": 451, "push": [451, 458], "penal": 451, "parameter": 451, "exemplifi": 451, "complement": 451, "fortieth": 451, "miss": [451, 454], "pruner2": 451, "mention": 451, "readi": 451, "hesit": 451, "sst": [451, 464], "25": [451, 458, 464], "63": [451, 458, 464], "24": [451, 458, 461, 464], "35": [451, 464], "flan": 451, "t5": 451, "english": 451, "romanian": 451, "404": [451, 464], "381": 451, "yolov5": 451, "75": [451, 458, 464], "2x1": [451, 464], "801": 451, "7895": 451, "signific": [451, 452, 458], "reduct": [451, 463], "namhoon": 451, "lee": 451, "thalaiyasingam": 451, "ajanthan": 451, "philip": 451, "torr": 451, "2019": 451, "zafrir": 451, "ofir": 451, "ariel": 451, "larei": 451, "boudoukh": 451, "mosh": 451, "wasserblat": 451, "preprint": [451, 458], "2111": 451, "05754": 451, "2021": 451, "heterogen": 452, "mar": 452, "busi": 452, "jan": 452, "amx": 452, "4th": [452, 454], "mleffici": 452, "dec": 452, "wechat": 452, "deepen": 452, "foundat": 452, "intellig": 452, "vmware": 452, "applianc": 452, "bitnami": 452, "nov": 452, "sota": 452, "few": [452, 461], "plug": 452, "twitter": 452, "linkedin": 452, "zone": 452, "land": 452, "gcp": 452, "pat": 452, "keynot": 452, "intelon": 452, "sep": 452, "chines": 452, "aug": 452, "purif": 452, "sacrif": 452, "jun": 452, "partner": 452, "feb": 452, "joint": 452, "msft": 452, "bilibili": 452, "gestalt": 452, "ml": 452, "doubl": 452, "reconstruct": 452, "abound": 452, "lpot": [452, 456], "nextplatform": 452, "cern": 452, "gan": 452, "3dgan": 452, "iml": 452, "workshop": 452, "asplo": 452, "18": [452, 464], "highli": 452, "intelcaff": 452, "aris": 453, "henc": 453, "onnxrt_qoper": 453, "quant_aware_train": 453, "weight_compress": [453, 463], "initial_spars": [453, 463], "prune_typ": [453, 463], "basic_magnitud": [453, 463], "update_frequ": 453, "prune_domain": 453, "tile_pattern_1x1": 453, "invent": 454, "int4": 454, "cost": 454, "On": 454, "theoret": 454, "affin": 454, "zeropoint": 454, "asymmetr": [454, 461], "255": [454, 458], "overflow": 454, "solv": [454, 456], "fbgemm": 454, "unseen": 454, "enough": 454, "peopl": 454, "mimic": 454, "fact": 454, "ultim": 454, "pain": 454, "lossi": 454, "chart": [454, 457, 459], "understand": [454, 459, 462], "philosophi": 454, "request": 454, "neither": 454, "nor": 454, "val_load": 454, "avg": 454, "themselv": 454, "tensorrtexecutionprovid": 454, "cudaexecutionprovid": 454, "ON": 455, "forc": 455, "postposttrainingquantconfig": 455, "bf16wrapper": 455, "retrac": 455, "site": 456, "assist": 456, "sed": 456, "your_script": 456, "backbon": 457, "interact": 457, "sigopt_experiment_id": 457, "nc": [457, 461], "certain": 457, "suffici": 457, "ordinari": 457, "capac": 457, "receiv": 457, "latenc": [457, 461], "draw": [457, 461], "mobilenet": [457, 464], "durat": 457, "8266": 457, "8372": 457, "2132": 457, "83": [457, 458, 464], "7495": 457, "8299": 457, "8294": 457, "85": [457, 458, 464], "0837": 457, "8291": 457, "4469": 457, "llm": 458, "gigant": 458, "systemat": 458, "outlier": 458, "quantif": 458, "migrat": [458, 462], "difficulti": 458, "mathemat": 458, "allevi": 458, "coarsest": 458, "finer": [458, 461], "row": 458, "matric": 458, "similarli": 458, "finest": 458, "consumpt": 458, "why": [458, 459], "suppos": 458, "6839": 458, "4741": 458, "7451": 458, "9301": 458, "1742": 458, "6835": 458, "frac": 458, "q_min": 458, "q_max": 458, "clip": 458, "zp": 458, "q_x": 458, "clamp_": 458, "round_": 458, "w_q": 458, "00296431384049356": 458, "59": [458, 464], "172": 458, "192": 458, "w_dq": 458, "1220": 458, "0500": 458, "1430": 458, "2570": 458, "1890": 458, "mseloss": 458, "1983354538679123": 458, "6848": 458, "4743": 458, "7440": 458, "9308": 458, "1749": 458, "385297635664756e": 458, "07": [458, 463, 464], "affect": 458, "quantize_per_channel": 458, "x_tmp": 458, "detach": 458, "keepdim": 458, "divid": [458, 461], "dequantize_per_channel": 458, "0029": [458, 464], "0036": 458, "162": [458, 464], "48": [458, 464], "72": [458, 464], "93": [458, 464], "207": [458, 464], "139": [458, 464], "6837": 458, "4734": 458, "1751": 458, "6821": 458, "637690492221736e": 458, "6376e": 458, "3852e": 458, "cdot": 458, "quantize_per_tensor_absmax": 458, "n_bit": 458, "div_": 458, "0806": 458, "7589": 458, "6038": 458, "3815": 458, "5040": 458, "7174": 458, "5444": 458, "5826": 458, "7772": 458, "5555": 458, "3740": 458, "3253": 458, "0698": 458, "1381": 458, "5972": 458, "0086": 458, "0737": 458, "8298": 458, "6883": 458, "2991": 458, "1601": 458, "6506": 458, "8246": 458, "3924": 458, "3845": 458, "8768": 458, "w_scale": 458, "x_q": 458, "x_scale": 458, "84": [458, 464], "120": 458, "0059755356051027775": 458, "89": [458, 464], "119": [458, 464], "57": [458, 464], "91": [458, 464], "006533813662827015": 458, "y_q": 458, "17509": 458, "7608": 458, "4055": 458, "16599": 458, "21020": 458, "10016": 458, "9860": 458, "22444": 458, "y_dq": 458, "6836": 458, "2970": 458, "1583": 458, "6481": 458, "8207": 458, "3911": 458, "3850": 458, "8763": 458, "though": 458, "prove": 458, "simplic": 458, "middl": 458, "denot": 458, "fp1": 458, "fp2": 458, "subsect": [458, 463], "explain": 458, "even": 458, "suppress": 458, "straightforward": 458, "intuit": 458, "x1": [458, 461], "x2": [458, 461], "herebi": 458, "sq": 458, "torchscript": 458, "overhead": 458, "stai": 458, "hardtanh": 458, "t5norm": 458, "llamanorm": 458, "groupnorm": 458, "lambada": 458, "sweet": 458, "spot": 458, "region": 458, "bigscienc": 458, "560m": 458, "65": [458, 464], "44": [458, 464], "66": [458, 464], "76": [458, 464], "1b7": 458, "71": [458, 464], "43": [458, 464], "67": [458, 464], "78": [458, 460, 464], "56": [458, 464], "58": [458, 464], "55": [458, 464], "3b": 458, "73": [458, 464], "69": [458, 464], "74": [458, 464], "7b1": 458, "77": [458, 464], "46": [458, 464], "17": [458, 464], "82": [458, 464], "52": [458, 464], "facebook": 458, "125m": 458, "41": [458, 464], "70": [458, 464], "94": [458, 460, 464], "79": [458, 459, 464], "60": [458, 464], "81": [458, 464], "26": [458, 464], "39": [458, 464], "68": [458, 460, 464], "eleutherai": 458, "6b": 458, "29": [458, 464], "96": [458, 464], "jason": 458, "wei": 458, "emerg": 458, "transact": 458, "yvinec": 458, "edouard": 458, "proceed": 458, "cvf": 458, "winter": 458, "xiui": 458, "2209": 458, "13325": 458, "xiao": 458, "guangxuan": 458, "2211": 458, "10438": 458, "discov": 459, "valuabl": 459, "instrument": 459, "writer": 459, "_pre_eval_hook": 459, "_post_eval_hook": 459, "submodul": 459, "whitelist": 459, "_recordingobserv": 459, "output_tensors_dict": 459, "current_it": 459, "get_tensor_valu": 459, "_observer_forward_hook": 459, "activation_post_process": 459, "_add_observer_": 459, "named_children": 459, "leaf": 459, "add_modul": 459, "register_forward_hook": 459, "dump_tim": 459, "summarywrit": 459, "_acc": 459, "tune_": 459, "add_graph": 459, "get_observer_dict": 459, "observer_dict": 459, "is_quant": 459, "add_histogram": 459, "shell": 459, "bind_al": 459, "logdir_spec": 459, "tune_0_acc0": 459, "tune_1": 459, "tune_1_acc0": 459, "four": 459, "baseline_acc_0": 459, "776": 459, "tune_1_acc_0": 459, "095": 459, "runs_v3": 459, "image_recognit": 459, "run_tuning_dump_tensor": 459, "sh": 459, "inceptionv3": 459, "skip": [459, 461], "v0": 459, "cg": 459, "conv0": 459, "bash": 459, "run_tun": 459, "topologi": 459, "inception_v3": 459, "dataset_loc": 459, "inceptionv3_fp32_pretrained_model": 459, "nc_inceptionv3": 459, "inceptionv3_dump_tensor": 459, "poor": 459, "eightbit": 459, "disappear": 459, "centercrop": 460, "randomcrop": 460, "cropres": 460, "decodeimag": 460, "jpeg": 460, "encodejp": 460, "alignimagechannel": 460, "116": 460, "103": 460, "017": 460, "bilinearimagenet": [460, 463], "topilimag": 460, "padding_mod": 460, "border": 460, "pixel": 460, "edg": 460, "colorjitt": 460, "bright": 460, "satur": 460, "hue": 460, "jitter": 460, "tondarrai": 460, "quickli": [461, 462], "travers": 461, "human": 461, "concret": 461, "aggress": 461, "classic": 461, "six": 461, "At": 461, "ii": 461, "iii": 461, "post_training_auto_qu": 461, "iv": 461, "vi": 461, "increment": 461, "primari": 461, "highest": 461, "spent": 461, "hawq_v2_loss": 461, "model_loss": 461, "black": 461, "compli": 461, "posterior": 461, "focu": 461, "short": 461, "never": 461, "loglevel": 461, "endlessli": 461, "perspect": 461, "smbo": 461, "trial": 461, "appl": 461, "surrog": 461, "repeat": 461, "quantil": 461, "densiti": 461, "parzen": 461, "greatest": 461, "hour": 461, "dai": 461, "next_tune_cfg": 461, "overridden": 461, "cluster": 461, "seamlessli": 461, "mpi": 461, "replic": 461, "replica": 461, "fed": 461, "synchron": 461, "mpirun": 461, "number_of_process": 461, "run_cmd": 461, "abctunestrategi": 461, "familiar": 462, "notebook": 462, "organ": 463, "logic": 463, "mobilenet_v1": 463, "hyper": 463, "40": [463, 464], "06": [463, 464], "beta_1": 463, "beta_2": 463, "epsilon": 463, "sparsecategoricalcrossentropi": 463, "sum_over_batch_s": 463, "from_logit": 463, "54": [463, 464], "19": [463, 464], "overal": 463, "8380": 464, "visit": 464, "performancethroughput": 464, "sec": 464, "86": 464, "00": 464, "170": 464, "82x": 464, "92": 464, "85x": 464, "61": 464, "83x": 464, "densenet": 464, "121": 464, "274": 464, "148": 464, "161": 464, "132": 464, "39x": 464, "169": 464, "38": 464, "36": 464, "191": 464, "31": 464, "118": 464, "61x": 464, "cnn": 464, "incept": 464, "37": 464, "84x": 464, "resnet101": 464, "21x": 464, "70x": 464, "51": 464, "14x": 464, "34": 464, "955": 464, "328": 464, "91x": 464, "709": 464, "282": 464, "51x": 464, "v3": 464, "337": 464, "09": 464, "160": 464, "11x": 464, "438": 464, "204": 464, "223": 464, "105": 464, "12x": 464, "10x": 464, "47": 464, "1347": 464, "439": 464, "07x": 464, "1192": 464, "492": 464, "42x": 464, "412": 464, "376": 464, "662": 464, "397": 464, "66x": 464, "299": 464, "23": 464, "154": 464, "93x": 464, "476": 464, "227": 464, "fashion": 464, "2734": 464, "1299": 464, "498": 464, "178": 464, "79x": 464, "427": 464, "173": 464, "47x": 464, "resnetv2": 464, "194": 464, "146": 464, "33x": 464, "237": 464, "187": 464, "27x": 464, "152": 464, "155": 464, "38x": 464, "302": 464, "215": 464, "40x": 464, "03": 464, "346": 464, "312": 464, "277": 464, "60x": 464, "273": 464, "31x": 464, "18x": 464, "53x": 464, "24x": 464, "vgg16": 464, "219": 464, "vgg19": 464, "193": 464, "11506": 464, "9665": 464, "19x": 464, "xception": 464, "262": 464, "137": 464, "barthez": 464, "143": 464, "02x": 464, "20x": 464, "209": 464, "08x": 464, "221": 464, "stsb": 464, "218": 464, "16x": 464, "62": 464, "57x": 464, "55x": 464, "56x": 464, "53": 464, "89x": 464, "blendcnn": 464, "4885": 464, "3715": 464, "camembert": 464, "206": 464, "09x": 464, "deberta": 464, "125": 464, "366": 464, "197": 464, "399": 464, "flaubert": 464, "592": 464, "385": 464, "54x": 464, "wikitext": 464, "hubert": 464, "446": 464, "181": 464, "46x": 464, "layoutlm": 464, "longform": 464, "49": 464, "mbart": 464, "625": 464, "451": 464, "lvwerra": 464, "pegasu": 464, "samsum": 464, "peleenet": 464, "402": 464, "29x": 464, "pokemon": 464, "275": 464, "334": 464, "48x": 464, "reform": 464, "crime": 464, "punish": 464, "153": 464, "06x": 464, "657": 464, "327": 464, "01x": 464, "812": 464, "344": 464, "36x": 464, "360": 464, "23x": 464, "resnext101": 464, "32x8d": 464, "182": 464, "squeezebert": 464, "195": 464, "150": 464, "30x": 464, "75x": 464, "transfo": 464, "xl": 464, "41x": 464, "wave2vec2": 464, "22x": 464, "102": 464, "00x": 464, "115": 464, "17x": 464, "yolo": 464, "232": 464, "28x": 464, "664": 464, "329": 464, "832": 464, "338": 464, "433": 464, "164": 464, "63x": 464, "836": 464, "1396": 464, "463": 464, "90x": 464, "159": 464, "32x": 464, "968": 464, "473": 464, "05x": 464, "958": 464, "477": 464, "arcfac": 464, "126": 464, "78x": 464, "298": 464, "124": 464, "624": 464, "254": 464, "45x": 464, "caffenet": 464, "1432": 464, "540": 464, "65x": 464, "1460": 464, "357": 464, "265": 464, "35x": 464, "86x": 464, "524": 464, "duc": 464, "efficientnet": 464, "1211": 464, "758": 464, "856": 464, "762": 464, "emot": 464, "ferplu": 464, "925": 464, "694": 464, "fcn": 464, "25x": 464, "googlenet": 464, "771": 464, "571": 464, "763": 464, "579": 464, "hf": 464, "156": 464, "multilingu": 464, "99x": 464, "199": 464, "104": 464, "73x": 464, "449": 464, "74x": 464, "l12": 464, "h384": 464, "466": 464, "247": 464, "88x": 464, "l6": 464, "523": 464, "354": 464, "183": 464, "107": 464, "spanbert": 464, "208": 464, "795": 464, "780": 464, "591": 464, "515": 464, "15x": 464, "2370": 464, "1526": 464, "2216": 464, "1506": 464, "2078": 464, "1028": 464, "1762": 464, "76x": 464, "mobilenetv2": 464, "2615": 464, "1645": 464, "59x": 464, "2461": 464, "1674": 464, "766": 464, "431": 464, "77x": 464, "575": 464, "430": 464, "34x": 464, "747": 464, "564": 464, "594": 464, "590": 464, "643": 464, "253": 464, "shufflenet": 464, "2354": 464, "1461": 464, "1850": 464, "1368": 464, "squeezenet": 464, "2484": 464, "1912": 464, "2526": 464, "1911": 464, "710": 464, "549": 464, "622": 464, "497": 464, "652": 464, "507": 464, "573": 464, "470": 464, "527": 464, "396": 464, "68x": 464, "tini": 464, "647": 464, "514": 464, "26x": 464, "ultrafac": 464, "314": 464, "50x": 464, "304": 464, "316": 464, "315": 464, "zfnet": 464, "462": 464, "268": 464, "72x": 464, "465": 464, "62x": 464, "436": 464, "270": 464, "429": 464, "92x": 464, "94x": 464, "331": 464, "242": 464, "37x": 464, "98x": 464, "taskdataset": 464, "accuracyspars": 464, "ratiospars": 464, "commentsbalancedor": 464, "unbalanc": 464, "mini": 464, "answeringsquad": 464, "87f1": 464, "momentumunbalanc": 464, "momentumbalanc": 464, "90f1": 464, "59f1": 464, "23f1": 464, "classificationmrpc": 464, "52f1": 464, "26f1": 464, "classificationsst": 464, "61accuraci": 464, "recognitionimagenet": 464, "95top1": 464, "v5s6": 464, "detectioncoco": 464, "ap0": 464, "6ap0": 464, "393": 464, "584": 464, "34f1": 464, "lassounbalanc": 464, "classificationmnli": 464, "mm": 464, "allbalanc": 464, "32accuraci": 464, "sensitivitybalanc": 464, "classificationqqp": 464, "classificationqnli": 464, "54accuraci": 464, "em": 464, "7965": 464, "wideresnet40": 464, "9522": 464, "8178": 464, "0213": 464, "8235": 464, "027": 464, "5494": 464, "7153": 464, "5540": 464, "0046": 464, "5523": 464, "vgg": 464, "bn": 464, "7022": 464, "7415": 464, "7025": 464, "0003": 464, "wip": 464, "6739": 464, "7399": 464, "6845": 464, "0106": 464, "7034": 464, "8382": 464, "bilstm": 464, "8314": 464, "9403": 464, "9048": 464, "0734": 464, "7323": 464, "8256": 464, "8084": 464, "8814": 464, "7442": 464, "8371": 464, "0119": 464, "0115": 464, "tinybert": 464, "8018": 464, "8044": 464, "8363": 464, "8411": 464, "8025": 464, "8074": 464, "0007": 464, "0030": 464, "8626": 464, "8213": 464, "9091": 464, "8782": 464, "8684": 464, "8259": 464, "0058": 464, "distilroberta": 464, "6057": 464, "6455": 464, "6187": 464, "0130": 464, "c6i": 464, "2xlarg": 464, "c6a": 464, "c6g": 464, "a100cuda": 464, "executionprovid": 464}, "objects": {"": [[0, 0, 0, "-", "block_mask"], [310, 0, 0, "-", "neural_compressor"]], "neural_compressor": [[2, 0, 0, "-", "adaptor"], [152, 0, 0, "-", "algorithm"], [155, 0, 0, "-", "benchmark"], [159, 0, 0, "-", "compression"], [173, 0, 0, "-", "conf"], [175, 0, 0, "-", "config"], [176, 0, 0, "-", "contrib"], [201, 0, 0, "-", "data"], [257, 0, 0, "-", "experimental"], [317, 0, 0, "-", "metric"], [319, 0, 0, "-", "mix_precision"], [321, 0, 0, "-", "model"], [329, 0, 0, "-", "objective"], [330, 0, 0, "-", "profiling"], [352, 0, 0, "-", "quantization"], [360, 0, 0, "-", "strategy"], [372, 0, 0, "-", "template"], [373, 0, 0, "-", "training"], [377, 0, 0, "-", "utils"], [386, 0, 0, "-", "version"]], "neural_compressor.adaptor": [[1, 0, 0, "-", "adaptor"], [3, 0, 0, "-", "keras"], [7, 0, 0, "-", "keras_utils"], [11, 0, 0, "-", "mxnet"], [12, 0, 0, "-", "mxnet_utils"], [14, 0, 0, "-", "onnxrt"], [17, 0, 0, "-", "ox_utils"], [40, 0, 0, "-", "pytorch"], [41, 0, 0, "-", "query"], [42, 0, 0, "-", "tensorflow"], [106, 0, 0, "-", "tf_utils"], [144, 0, 0, "-", "torch_utils"]], "neural_compressor.adaptor.adaptor": [[1, 1, 1, "", "Adaptor"], [1, 2, 1, "", "adaptor_registry"]], "neural_compressor.adaptor.keras": [[3, 1, 1, "", "KerasAdaptor"], [3, 1, 1, "", "KerasQuery"]], "neural_compressor.adaptor.keras_utils": [[4, 0, 0, "-", "conv2d"], [5, 0, 0, "-", "dense"], [6, 0, 0, "-", "depthwise_conv2d"], [8, 0, 0, "-", "pool2d"], [9, 0, 0, "-", "quantizer"], [10, 0, 0, "-", "separable_conv2d"]], "neural_compressor.adaptor.mxnet": [[11, 1, 1, "", "MxNetAdaptor"]], "neural_compressor.adaptor.mxnet_utils": [[13, 0, 0, "-", "util"]], "neural_compressor.adaptor.mxnet_utils.util": [[13, 1, 1, "", "CalibCollector"], [13, 1, 1, "", "CalibData"], [13, 1, 1, "", "CollectorBase"], [13, 1, 1, "", "DataIterLoader"], [13, 1, 1, "", "DataLoaderWrap"], [13, 1, 1, "", "NameCollector"], [13, 1, 1, "", "OpType"], [13, 1, 1, "", "TensorCollector"], [13, 2, 1, "", "amp_convert"], [13, 2, 1, "", "calib_model"], [13, 2, 1, "", "check_mx_version"], [13, 2, 1, "", "combine_capabilities"], [13, 2, 1, "", "create_data_example"], [13, 2, 1, "", "distribute_calib_tensors"], [13, 2, 1, "", "ensure_list"], [13, 2, 1, "", "fuse"], [13, 2, 1, "", "get_framework_name"], [13, 2, 1, "", "is_model_quantized"], [13, 2, 1, "", "isiterable"], [13, 2, 1, "", "make_module"], [13, 2, 1, "", "make_nc_model"], [13, 2, 1, "", "make_symbol_block"], [13, 2, 1, "", "ndarray_to_device"], [13, 2, 1, "", "parse_tune_config"], [13, 2, 1, "", "prepare_dataloader"], [13, 2, 1, "", "prepare_model"], [13, 2, 1, "", "prepare_model_data"], [13, 2, 1, "", "quantize_sym_model"], [13, 2, 1, "", "query_quantizable_nodes"], [13, 2, 1, "", "run_forward"]], "neural_compressor.adaptor.onnxrt": [[14, 1, 1, "", "ONNXRT_IntegerOpsAdaptor"], [14, 1, 1, "", "ONNXRT_QDQAdaptor"], [14, 1, 1, "", "ONNXRT_QLinearOpsAdaptor"], [14, 1, 1, "", "ONNXRUNTIMEAdaptor"]], "neural_compressor.adaptor.ox_utils": [[15, 0, 0, "-", "calibration"], [16, 0, 0, "-", "calibrator"], [29, 0, 0, "-", "operators"], [38, 0, 0, "-", "quantizer"], [39, 0, 0, "-", "util"]], "neural_compressor.adaptor.ox_utils.calibration": [[15, 1, 1, "", "ONNXRTAugment"]], "neural_compressor.adaptor.ox_utils.calibrator": [[16, 1, 1, "", "CalibratorBase"], [16, 1, 1, "", "HistogramCollector"], [16, 1, 1, "", "KLCalibrator"], [16, 1, 1, "", "MinMaxCalibrator"], [16, 1, 1, "", "PercentileCalibrator"], [16, 2, 1, "", "calib_registry"], [16, 2, 1, "", "smooth_distribution"]], "neural_compressor.adaptor.ox_utils.operators": [[18, 0, 0, "-", "activation"], [19, 0, 0, "-", "argmax"], [20, 0, 0, "-", "attention"], [21, 0, 0, "-", "binary_op"], [22, 0, 0, "-", "concat"], [23, 0, 0, "-", "conv"], [24, 0, 0, "-", "direct_q8"], [25, 0, 0, "-", "embed_layernorm"], [26, 0, 0, "-", "gather"], [27, 0, 0, "-", "gavgpool"], [28, 0, 0, "-", "gemm"], [30, 0, 0, "-", "lstm"], [31, 0, 0, "-", "matmul"], [32, 0, 0, "-", "maxpool"], [33, 0, 0, "-", "ops"], [34, 0, 0, "-", "pad"], [35, 0, 0, "-", "pooling"], [36, 0, 0, "-", "resize"], [37, 0, 0, "-", "split"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[18, 1, 1, "", "ActivationOperator"], [18, 1, 1, "", "QActivationOperator"], [18, 1, 1, "", "RemovableActivationOperator"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[19, 1, 1, "", "ArgMaxOperator"], [19, 1, 1, "", "QArgMaxOperator"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[20, 1, 1, "", "AttentionOperator"], [20, 1, 1, "", "QAttentionOperator"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[21, 1, 1, "", "BinaryOperator"], [21, 1, 1, "", "QBinaryOperator"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[22, 1, 1, "", "ConcatOperator"], [22, 1, 1, "", "QConcatOperator"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[23, 1, 1, "", "ConvOperator"], [23, 1, 1, "", "QConvOperator"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[24, 1, 1, "", "Direct8BitOperator"], [24, 1, 1, "", "QDirectOperator"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[25, 1, 1, "", "EmbedLayerNormalizationOperator"], [25, 1, 1, "", "QEmbedLayerNormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[26, 1, 1, "", "GatherOperator"], [26, 1, 1, "", "QGatherOperator"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[27, 1, 1, "", "GlobalAveragePoolOperator"], [27, 1, 1, "", "QGlobalAveragePoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[28, 1, 1, "", "GemmOperator"], [28, 1, 1, "", "QGemmOperator"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[30, 1, 1, "", "LSTMOperator"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[31, 1, 1, "", "MatMulOperator"], [31, 1, 1, "", "QMatMulOperator"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[32, 1, 1, "", "MaxPoolOperator"], [32, 1, 1, "", "QMaxPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[33, 1, 1, "", "Operator"], [33, 1, 1, "", "QOperator"], [33, 2, 1, "", "op_registry"], [33, 2, 1, "", "qop_registry"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[34, 1, 1, "", "PadOperator"], [34, 1, 1, "", "QPadOperator"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[35, 1, 1, "", "PoolOperator"], [35, 1, 1, "", "QPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[36, 1, 1, "", "QResizeOperator"], [36, 1, 1, "", "ResizeOperator"]], "neural_compressor.adaptor.ox_utils.operators.split": [[37, 1, 1, "", "QSplitOperator"], [37, 1, 1, "", "SplitOperator"]], "neural_compressor.adaptor.ox_utils.quantizer": [[38, 1, 1, "", "Quantizer"]], "neural_compressor.adaptor.ox_utils.util": [[39, 1, 1, "", "QuantFormat"], [39, 1, 1, "", "QuantType"], [39, 1, 1, "", "QuantizationMode"], [39, 1, 1, "", "QuantizedInitializer"], [39, 1, 1, "", "QuantizedValue"], [39, 1, 1, "", "QuantizedValueType"], [39, 1, 1, "", "ValueInfo"], [39, 2, 1, "", "adjust_weights_per_input"], [39, 2, 1, "", "adjust_weights_per_op"], [39, 2, 1, "", "attribute_to_kwarg"], [39, 2, 1, "", "calculate_scale_zp"], [39, 2, 1, "", "cast_tensor"], [39, 2, 1, "", "collate_preds"], [39, 2, 1, "", "dequantize_data"], [39, 2, 1, "", "dequantize_data_with_scale_zero"], [39, 2, 1, "", "dtype_to_name"], [39, 2, 1, "", "find_by_name"], [39, 2, 1, "", "float_to_bfloat16"], [39, 2, 1, "", "float_to_float16"], [39, 2, 1, "", "fold_scale"], [39, 2, 1, "", "get_smooth_scales_per_input"], [39, 2, 1, "", "get_smooth_scales_per_op"], [39, 2, 1, "", "insert_smooth_mul_op_per_input"], [39, 2, 1, "", "insert_smooth_mul_op_per_op"], [39, 2, 1, "", "is_B_transposed"], [39, 2, 1, "", "make_dquant_node"], [39, 2, 1, "", "make_quant_node"], [39, 2, 1, "", "quantize_data"], [39, 2, 1, "", "quantize_data_per_channel"], [39, 2, 1, "", "quantize_data_with_scale_zero"], [39, 2, 1, "", "quantize_nparray"], [39, 2, 1, "", "remove_init_from_model_input"], [39, 2, 1, "", "split_shared_bias"], [39, 2, 1, "", "trt_env_setup"]], "neural_compressor.adaptor.pytorch": [[40, 1, 1, "", "PyTorchAdaptor"], [40, 1, 1, "", "PyTorchQuery"], [40, 1, 1, "", "PyTorch_FXAdaptor"], [40, 1, 1, "", "PyTorch_IPEXAdaptor"], [40, 1, 1, "", "TemplateAdaptor"], [40, 2, 1, "", "get_ops_recursively"]], "neural_compressor.adaptor.query": [[41, 1, 1, "", "QueryBackendCapability"]], "neural_compressor.adaptor.tensorflow": [[42, 1, 1, "", "TensorFlowAdaptor"], [42, 1, 1, "", "TensorflowQuery"], [42, 1, 1, "", "Tensorflow_ITEXAdaptor"]], "neural_compressor.adaptor.tf_utils": [[43, 0, 0, "-", "graph_converter"], [44, 0, 0, "-", "graph_converter_without_calib"], [82, 0, 0, "-", "graph_rewriter"], [105, 0, 0, "-", "graph_util"], [107, 0, 0, "-", "quantize_graph"], [134, 0, 0, "-", "quantize_graph_common"], [135, 0, 0, "-", "tf2onnx_converter"], [138, 0, 0, "-", "transform_graph"], [141, 0, 0, "-", "util"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[43, 1, 1, "", "GraphConverter"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[44, 1, 1, "", "GraphConverterWithoutCalib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[46, 0, 0, "-", "bf16"], [71, 0, 0, "-", "generic"], [81, 0, 0, "-", "graph_base"], [90, 0, 0, "-", "int8"], [96, 0, 0, "-", "onnx"], [101, 0, 0, "-", "qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[45, 0, 0, "-", "bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[45, 1, 1, "", "BF16Convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[47, 0, 0, "-", "convert_add_to_biasadd"], [48, 0, 0, "-", "convert_layout"], [49, 0, 0, "-", "convert_leakyrelu"], [50, 0, 0, "-", "convert_nan_to_random"], [51, 0, 0, "-", "convert_placeholder_to_const"], [52, 0, 0, "-", "dequantize_cast_optimizer"], [53, 0, 0, "-", "dilated_contraction"], [54, 0, 0, "-", "dummy_biasadd"], [55, 0, 0, "-", "expanddims_optimizer"], [56, 0, 0, "-", "fetch_weight_from_reshape"], [57, 0, 0, "-", "fold_batch_norm"], [58, 0, 0, "-", "fold_constant"], [59, 0, 0, "-", "fuse_biasadd_add"], [60, 0, 0, "-", "fuse_column_wise_mul"], [61, 0, 0, "-", "fuse_conv_with_math"], [62, 0, 0, "-", "fuse_decomposed_bn"], [63, 0, 0, "-", "fuse_decomposed_in"], [64, 0, 0, "-", "fuse_gelu"], [65, 0, 0, "-", "fuse_layer_norm"], [66, 0, 0, "-", "fuse_pad_with_conv"], [67, 0, 0, "-", "fuse_pad_with_fp32_conv"], [68, 0, 0, "-", "fuse_reshape_transpose"], [69, 0, 0, "-", "graph_cse_optimizer"], [70, 0, 0, "-", "grappler_pass"], [72, 0, 0, "-", "insert_print_node"], [73, 0, 0, "-", "move_squeeze_after_relu"], [74, 0, 0, "-", "pre_optimize"], [75, 0, 0, "-", "remove_training_nodes"], [76, 0, 0, "-", "rename_batch_norm"], [77, 0, 0, "-", "split_shared_input"], [78, 0, 0, "-", "strip_equivalent_nodes"], [79, 0, 0, "-", "strip_unused_nodes"], [80, 0, 0, "-", "switch_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[47, 1, 1, "", "ConvertAddToBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[48, 1, 1, "", "ConvertLayoutOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[49, 1, 1, "", "ConvertLeakyReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[50, 1, 1, "", "ConvertNanToRandom"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[51, 1, 1, "", "ConvertPlaceholderToConst"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[52, 1, 1, "", "DequantizeCastOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[53, 1, 1, "", "DilatedContraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[54, 1, 1, "", "InjectDummyBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[55, 1, 1, "", "ExpandDimsOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[56, 1, 1, "", "FetchWeightFromReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[57, 1, 1, "", "FoldBatchNormNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[58, 1, 1, "", "GraphFoldConstantOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[59, 1, 1, "", "FuseBiasAddAndAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[60, 1, 1, "", "FuseColumnWiseMulOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[61, 1, 1, "", "FuseConvWithMathOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[62, 1, 1, "", "FuseDecomposedBNOptimizer"], [62, 2, 1, "", "bypass_reshape"], [62, 2, 1, "", "get_const_dim_count"], [62, 2, 1, "", "node_from_map"], [62, 2, 1, "", "node_name_from_input"], [62, 2, 1, "", "valid_reshape_inputs"], [62, 2, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[63, 1, 1, "", "FuseDecomposedINOptimizer"], [63, 2, 1, "", "bypass_reshape"], [63, 2, 1, "", "get_const_dim_count"], [63, 2, 1, "", "node_from_map"], [63, 2, 1, "", "node_name_from_input"], [63, 2, 1, "", "valid_reshape_inputs"], [63, 2, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[64, 1, 1, "", "FuseGeluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[65, 1, 1, "", "FuseLayerNormOptimizer"], [65, 2, 1, "", "node_from_map"], [65, 2, 1, "", "node_name_from_input"], [65, 2, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[66, 1, 1, "", "FusePadWithConv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[67, 1, 1, "", "FusePadWithFP32Conv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[68, 1, 1, "", "FuseTransposeReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[69, 1, 1, "", "GraphCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[70, 1, 1, "", "GrapplerOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[72, 1, 1, "", "InsertPrintMinMaxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[73, 1, 1, "", "MoveSqueezeAfterReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[74, 1, 1, "", "PreOptimization"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[75, 1, 1, "", "RemoveTrainingNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[76, 1, 1, "", "RenameBatchNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[77, 1, 1, "", "SplitSharedInputOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[78, 1, 1, "", "StripEquivalentNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[79, 1, 1, "", "StripUnusedNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[80, 1, 1, "", "SwitchOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[81, 1, 1, "", "GraphRewriterBase"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[83, 0, 0, "-", "freeze_fake_quant"], [84, 0, 0, "-", "freeze_value"], [85, 0, 0, "-", "freeze_value_without_calib"], [86, 0, 0, "-", "fuse_conv_redundant_dequantize"], [87, 0, 0, "-", "fuse_conv_requantize"], [88, 0, 0, "-", "fuse_matmul_redundant_dequantize"], [89, 0, 0, "-", "fuse_matmul_requantize"], [91, 0, 0, "-", "meta_op_optimizer"], [92, 0, 0, "-", "post_hostconst_converter"], [93, 0, 0, "-", "post_quantized_op_cse"], [94, 0, 0, "-", "rnn_convert"], [95, 0, 0, "-", "scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[83, 1, 1, "", "FreezeFakeQuantOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[84, 1, 1, "", "FreezeValueTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[85, 1, 1, "", "FreezeValueWithoutCalibTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[86, 1, 1, "", "FuseConvRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[87, 1, 1, "", "FuseConvRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[88, 1, 1, "", "FuseMatMulRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[89, 1, 1, "", "FuseMatMulRequantizeDequantizeNewAPITransformer"], [89, 1, 1, "", "FuseMatMulRequantizeDequantizeTransformer"], [89, 1, 1, "", "FuseMatMulRequantizeNewAPITransformer"], [89, 1, 1, "", "FuseMatMulRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[91, 1, 1, "", "MetaInfoChangingMemOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[92, 1, 1, "", "PostHostConstConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[93, 1, 1, "", "PostCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[94, 1, 1, "", "QuantizedRNNConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[95, 1, 1, "", "ScaleProPagationTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[97, 0, 0, "-", "onnx_graph"], [98, 0, 0, "-", "onnx_node"], [99, 0, 0, "-", "onnx_schema"], [100, 0, 0, "-", "tf2onnx_utils"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[97, 1, 1, "", "OnnxGraph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[98, 1, 1, "", "OnnxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[99, 1, 1, "", "OnnxOpSchema"], [99, 2, 1, "", "get_max_supported_opset_version"], [99, 2, 1, "", "get_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[100, 1, 1, "", "SeqType"], [100, 2, 1, "", "add_port_to_name"], [100, 2, 1, "", "are_shapes_equal"], [100, 2, 1, "", "assert_error"], [100, 2, 1, "", "compute_const_folding_using_tf"], [100, 2, 1, "", "convert_tensorflow_tensor_to_onnx"], [100, 2, 1, "", "find_opset"], [100, 2, 1, "", "get_index_from_strided_slice_of_shape"], [100, 2, 1, "", "get_subgraphs_from_onnx"], [100, 2, 1, "", "get_tensorflow_node_attr"], [100, 2, 1, "", "get_tensorflow_node_shape_attr"], [100, 2, 1, "", "get_tensorflow_tensor_data"], [100, 2, 1, "", "get_tensorflow_tensor_shape"], [100, 2, 1, "", "infer_onnx_shape_dtype"], [100, 2, 1, "", "initialize_name_counter"], [100, 2, 1, "", "is_list_or_tuple"], [100, 2, 1, "", "is_onnx_domain"], [100, 2, 1, "", "make_onnx_inputs_outputs"], [100, 2, 1, "", "make_onnx_shape"], [100, 2, 1, "", "map_numpy_to_onnx_dtype"], [100, 2, 1, "", "map_onnx_to_numpy_type"], [100, 2, 1, "", "map_tensorflow_dtype"], [100, 2, 1, "", "read_tensorflow_node_attrs"], [100, 2, 1, "", "save_protobuf"], [100, 2, 1, "", "set_name"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[102, 0, 0, "-", "insert_qdq_pattern"], [103, 0, 0, "-", "merge_duplicated_qdq"], [104, 0, 0, "-", "share_qdq_y_pattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[102, 1, 1, "", "GenerateGraphWithQDQPattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[103, 1, 1, "", "MergeDuplicatedQDQOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[104, 1, 1, "", "ShareQDQForItexYPatternOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_util": [[105, 1, 1, "", "GraphAnalyzer"], [105, 1, 1, "", "GraphRewriterHelper"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[109, 0, 0, "-", "qat"], [125, 0, 0, "-", "qdq"], [127, 0, 0, "-", "quantize_graph_base"], [128, 0, 0, "-", "quantize_graph_bn"], [129, 0, 0, "-", "quantize_graph_concatv2"], [130, 0, 0, "-", "quantize_graph_conv"], [131, 0, 0, "-", "quantize_graph_for_intel_cpu"], [132, 0, 0, "-", "quantize_graph_matmul"], [133, 0, 0, "-", "quantize_graph_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[108, 0, 0, "-", "fake_quantize"], [110, 0, 0, "-", "quantize_config"], [111, 0, 0, "-", "quantize_helper"], [112, 0, 0, "-", "quantize_layers"], [117, 0, 0, "-", "quantize_wrapper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[108, 1, 1, "", "FakeQuantize"], [108, 1, 1, "", "FakeQuantizeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[110, 1, 1, "", "QuantizeConfig"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[111, 2, 1, "", "init_quantize_config"], [111, 2, 1, "", "qat_clone_function"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[113, 0, 0, "-", "optimize_layer"], [114, 0, 0, "-", "quantize_layer_add"], [115, 0, 0, "-", "quantize_layer_base"], [116, 0, 0, "-", "quantize_layer_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[113, 2, 1, "", "config_quantizable_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[114, 1, 1, "", "QuantizeLayerAdd"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[115, 1, 1, "", "QuantizeLayerBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[116, 1, 1, "", "QuantizeLayerBatchNormalization"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[117, 1, 1, "", "QuantizeWrapper"], [117, 1, 1, "", "QuantizeWrapperBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[118, 0, 0, "-", "fuse_qdq_bn"], [119, 0, 0, "-", "fuse_qdq_concatv2"], [120, 0, 0, "-", "fuse_qdq_conv"], [121, 0, 0, "-", "fuse_qdq_deconv"], [122, 0, 0, "-", "fuse_qdq_in"], [123, 0, 0, "-", "fuse_qdq_matmul"], [124, 0, 0, "-", "fuse_qdq_pooling"], [126, 0, 0, "-", "optimize_qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[118, 1, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[119, 1, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[120, 1, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[121, 1, 1, "", "FuseNodeStartWithDeconv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[122, 1, 1, "", "FuseNodeStartWithFusedInstanceNorm"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[123, 1, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[124, 1, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[126, 1, 1, "", "OptimizeQDQGraph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[127, 1, 1, "", "QuantizeGraphBase"], [127, 1, 1, "", "QuantizeNodeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[128, 1, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[129, 1, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[130, 1, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[131, 1, 1, "", "QuantizeGraphForIntel"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[132, 1, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[133, 1, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[134, 1, 1, "", "QuantizeGraphHelper"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[135, 1, 1, "", "TensorflowQDQToOnnxQDQConverter"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[136, 0, 0, "-", "bias_correction"], [137, 0, 0, "-", "graph_transform_base"], [139, 0, 0, "-", "insert_logging"], [140, 0, 0, "-", "rerange_quantized_concat"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[136, 1, 1, "", "BiasCorrection"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[137, 1, 1, "", "GraphTransformBase"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[139, 1, 1, "", "InsertLogging"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[140, 1, 1, "", "RerangeQuantizedConcat"]], "neural_compressor.adaptor.tf_utils.util": [[141, 2, 1, "", "collate_tf_preds"], [141, 2, 1, "", "disable_random"], [141, 2, 1, "", "fix_ref_type_of_graph_def"], [141, 2, 1, "", "generate_feed_dict"], [141, 2, 1, "", "get_estimator_graph"], [141, 2, 1, "", "get_graph_def"], [141, 2, 1, "", "get_input_output_node_names"], [141, 2, 1, "", "get_model_input_shape"], [141, 2, 1, "", "get_tensor_by_name"], [141, 2, 1, "", "get_tensor_val_from_graph_node"], [141, 2, 1, "", "int8_node_name_reverse"], [141, 2, 1, "", "is_ckpt_format"], [141, 2, 1, "", "is_saved_model_format"], [141, 2, 1, "", "iterator_sess_run"], [141, 2, 1, "", "read_graph"], [141, 2, 1, "", "strip_equivalent_nodes"], [141, 2, 1, "", "strip_unused_nodes"], [141, 2, 1, "", "tf_diagnosis_helper"], [141, 2, 1, "", "version1_eq_version2"], [141, 2, 1, "", "version1_gt_version2"], [141, 2, 1, "", "version1_gte_version2"], [141, 2, 1, "", "version1_lt_version2"], [141, 2, 1, "", "version1_lte_version2"], [141, 2, 1, "", "write_graph"]], "neural_compressor.adaptor.torch_utils": [[142, 0, 0, "-", "bf16_convert"], [143, 0, 0, "-", "hawq_metric"], [145, 0, 0, "-", "model_wrapper"], [146, 0, 0, "-", "pattern_detector"], [147, 0, 0, "-", "smooth_quant"], [148, 0, 0, "-", "symbolic_trace"], [149, 0, 0, "-", "util"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[142, 1, 1, "", "BF16ModuleWrapper"], [142, 2, 1, "", "Convert"], [142, 2, 1, "", "bf16_symbolic_trace"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[143, 1, 1, "", "HessianTrace"], [143, 1, 1, "", "Node_collector"], [143, 2, 1, "", "compare_weights"], [143, 2, 1, "", "hawq_top"]], "neural_compressor.adaptor.torch_utils.pattern_detector": [[146, 1, 1, "", "TransformerBasedModelBlockPatternDetector"]], "neural_compressor.adaptor.torch_utils.smooth_quant": [[147, 1, 1, "", "GraphTrace"], [147, 1, 1, "", "TorchSmoothQuant"], [147, 2, 1, "", "get_module"], [147, 2, 1, "", "set_module"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[148, 2, 1, "", "symbolic_trace"], [148, 2, 1, "", "trace_and_fuse_sub_graph"]], "neural_compressor.adaptor.torch_utils.util": [[149, 2, 1, "", "append_attr"], [149, 2, 1, "", "auto_copy"], [149, 2, 1, "", "calculate_quant_min_max"], [149, 2, 1, "", "check_cfg_and_qconfig"], [149, 2, 1, "", "collate_torch_preds"], [149, 2, 1, "", "fetch_module"], [149, 2, 1, "", "generate_activation_observer"], [149, 2, 1, "", "get_depth"], [149, 2, 1, "", "get_dict_at_depth"], [149, 2, 1, "", "get_element_under_depth"], [149, 2, 1, "", "get_embedding_contiguous"], [149, 2, 1, "", "get_example_input"], [149, 2, 1, "", "get_fallback_order"], [149, 2, 1, "", "get_mse_order_per_fp32"], [149, 2, 1, "", "get_mse_order_per_int8"], [149, 2, 1, "", "get_op_type_by_name"], [149, 2, 1, "", "get_quantizable_ops_from_cfgs"], [149, 2, 1, "", "get_torch_version"], [149, 2, 1, "", "input2tuple"], [149, 2, 1, "", "is_fused_module"], [149, 2, 1, "", "match_datatype_pattern"], [149, 2, 1, "", "paser_cfgs"], [149, 2, 1, "", "set_module"], [149, 2, 1, "", "simple_inference"], [149, 2, 1, "", "update_sq_scale"]], "neural_compressor.algorithm": [[150, 0, 0, "-", "algorithm"], [151, 0, 0, "-", "fast_bias_correction"], [153, 0, 0, "-", "smooth_quant"], [154, 0, 0, "-", "weight_correction"]], "neural_compressor.algorithm.algorithm": [[150, 1, 1, "", "ALGORITHMS"], [150, 1, 1, "", "Algorithm"], [150, 1, 1, "", "AlgorithmScheduler"], [150, 2, 1, "", "algorithm_registry"]], "neural_compressor.algorithm.fast_bias_correction": [[151, 1, 1, "", "FastBiasCorrection"]], "neural_compressor.algorithm.smooth_quant": [[153, 1, 1, "", "SmoothQuant"]], "neural_compressor.algorithm.weight_correction": [[154, 1, 1, "", "WeightCorrection"]], "neural_compressor.benchmark": [[155, 2, 1, "", "benchmark_with_raw_cmd"], [155, 2, 1, "", "call_one"], [155, 2, 1, "", "config_instance"], [155, 2, 1, "", "fit"], [155, 2, 1, "", "generate_prefix"], [155, 2, 1, "", "get_architecture"], [155, 2, 1, "", "get_bounded_threads"], [155, 2, 1, "", "get_core_ids"], [155, 2, 1, "", "get_physical_ids"], [155, 2, 1, "", "get_threads"], [155, 2, 1, "", "get_threads_per_core"], [155, 2, 1, "", "profile"], [155, 2, 1, "", "run_instance"], [155, 2, 1, "", "set_all_env_var"], [155, 2, 1, "", "set_env_var"], [155, 2, 1, "", "summary_benchmark"]], "neural_compressor.compression": [[156, 0, 0, "-", "callbacks"], [158, 0, 0, "-", "distillation"], [161, 0, 0, "-", "pruner"]], "neural_compressor.compression.callbacks": [[156, 1, 1, "", "BaseCallbacks"], [156, 1, 1, "", "DistillationCallbacks"], [156, 1, 1, "", "PruningCallbacks"], [156, 1, 1, "", "QuantizationAwareTrainingCallbacks"]], "neural_compressor.compression.callbacks.DistillationCallbacks": [[156, 3, 1, "", "_epoch_ran"], [156, 3, 1, "", "best_model"], [156, 3, 1, "", "best_score"], [156, 3, 1, "", "eval_frequency"]], "neural_compressor.compression.distillation": [[157, 0, 0, "-", "criterions"]], "neural_compressor.compression.distillation.criterions": [[157, 1, 1, "", "Criterions"], [157, 1, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [157, 1, 1, "", "KnowledgeDistillationFramework"], [157, 1, 1, "", "KnowledgeDistillationLoss"], [157, 1, 1, "", "PyTorchCriterions"], [157, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLoss"], [157, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"], [157, 1, 1, "", "PyTorchKnowledgeDistillationLoss"], [157, 1, 1, "", "PyTorchKnowledgeDistillationLossWrapper"], [157, 1, 1, "", "PyTorchSelfKnowledgeDistillationLoss"], [157, 1, 1, "", "PyTorchSelfKnowledgeDistillationLossWrapper"], [157, 1, 1, "", "SelfKnowledgeDistillationLoss"], [157, 1, 1, "", "TensorflowCriterions"], [157, 1, 1, "", "TensorflowKnowledgeDistillationLoss"], [157, 1, 1, "", "TensorflowKnowledgeDistillationLossExternal"], [157, 1, 1, "", "TensorflowKnowledgeDistillationLossWrapper"], [157, 2, 1, "", "criterion_registry"]], "neural_compressor.compression.pruner": [[160, 0, 0, "-", "criteria"], [163, 0, 0, "-", "model_slim"], [166, 0, 0, "-", "patterns"], [167, 0, 0, "-", "pruners"], [168, 0, 0, "-", "regs"], [169, 0, 0, "-", "schedulers"], [170, 0, 0, "-", "utils"]], "neural_compressor.compression.pruner.criteria": [[160, 1, 1, "", "GradientCriterion"], [160, 1, 1, "", "MagnitudeCriterion"], [160, 1, 1, "", "PruningCriterion"], [160, 1, 1, "", "RetrainFreeCriterion"], [160, 1, 1, "", "SnipCriterion"], [160, 1, 1, "", "SnipMomentumBlockCriterion"], [160, 1, 1, "", "SnipMomentumCriterion"], [160, 2, 1, "", "get_criterion"], [160, 2, 1, "", "register_criterion"]], "neural_compressor.compression.pruner.criteria.GradientCriterion": [[160, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.MagnitudeCriterion": [[160, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.PruningCriterion": [[160, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.RetrainFreeCriterion": [[160, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.SnipCriterion": [[160, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.SnipMomentumBlockCriterion": [[160, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion": [[160, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.model_slim": [[162, 0, 0, "-", "auto_slim"], [164, 0, 0, "-", "pattern_analyzer"], [165, 0, 0, "-", "weight_slim"]], "neural_compressor.compression.pruner.model_slim.auto_slim": [[162, 2, 1, "", "generate_ffn2_pruning_config"], [162, 2, 1, "", "generate_mha_pruning_config"], [162, 2, 1, "", "model_slim"], [162, 2, 1, "", "model_slim_ffn2"], [162, 2, 1, "", "model_slim_mha"], [162, 2, 1, "", "parse_auto_slim_config"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer": [[164, 1, 1, "", "ClassifierHeadSearcher"], [164, 1, 1, "", "JitBasicSearcher"], [164, 1, 1, "", "Linear2LinearSearcher"], [164, 1, 1, "", "RecipeSearcher"], [164, 1, 1, "", "SelfMHASearcher"], [164, 2, 1, "", "get_attributes"], [164, 2, 1, "", "print_iterables"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher": [[164, 3, 1, "", "device"], [164, 3, 1, "", "flatten_static_graph"], [164, 3, 1, "", "model"], [164, 3, 1, "", "static_graph"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher": [[164, 3, 1, "", "device"], [164, 3, 1, "", "flatten_static_graph"], [164, 3, 1, "", "model"], [164, 3, 1, "", "searching_results"], [164, 3, 1, "", "static_graph"], [164, 3, 1, "", "target_layers"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher": [[164, 3, 1, "", "current_pattern"], [164, 3, 1, "", "device"], [164, 3, 1, "", "flatten_static_graph"], [164, 3, 1, "", "model"], [164, 3, 1, "", "searching_results"], [164, 3, 1, "", "static_graph"], [164, 3, 1, "", "target_layers"], [164, 3, 1, "", "target_op_lut"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher": [[164, 3, 1, "", "model"], [164, 3, 1, "", "recipe"], [164, 3, 1, "", "searching_results"], [164, 3, 1, "", "targets"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher": [[164, 3, 1, "", "device"], [164, 3, 1, "", "flatten_static_graph"], [164, 3, 1, "", "model"], [164, 3, 1, "", "static_graph"]], "neural_compressor.compression.pruner.model_slim.weight_slim": [[165, 1, 1, "", "LinearCompression"], [165, 1, 1, "", "LinearCompressionIterator"], [165, 1, 1, "", "MHACompression"], [165, 1, 1, "", "PostCompressionUtils"]], "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression": [[165, 3, 1, "", "device"], [165, 3, 1, "", "layer_1"], [165, 3, 1, "", "layer_2"]], "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompressionIterator": [[165, 3, 1, "", "linear_patterns"]], "neural_compressor.compression.pruner.patterns": [[166, 1, 1, "", "BasePattern"], [166, 1, 1, "", "PatternNInM"], [166, 1, 1, "", "PatternNxM"], [166, 2, 1, "", "get_pattern"], [166, 2, 1, "", "register_pattern"]], "neural_compressor.compression.pruner.patterns.BasePattern": [[166, 3, 1, "", "config"], [166, 3, 1, "", "invalid_layers"], [166, 3, 1, "", "is_global"], [166, 3, 1, "", "keep_mask_layers"], [166, 3, 1, "", "max_sparsity_ratio_per_op"], [166, 3, 1, "", "min_sparsity_ratio_per_op"], [166, 3, 1, "", "modules"], [166, 3, 1, "", "pattern"], [166, 3, 1, "", "target_sparsity"]], "neural_compressor.compression.pruner.patterns.PatternNInM": [[166, 3, 1, "", "M"], [166, 3, 1, "", "N"]], "neural_compressor.compression.pruner.patterns.PatternNxM": [[166, 3, 1, "", "block_size"]], "neural_compressor.compression.pruner.pruners": [[167, 1, 1, "", "BasePruner"], [167, 1, 1, "", "BasicPruner"], [167, 1, 1, "", "BlockMaskPruner"], [167, 1, 1, "", "PatternLockPruner"], [167, 1, 1, "", "ProgressivePruner"], [167, 1, 1, "", "RetrainFreePruner"], [167, 2, 1, "", "get_pruner"], [167, 2, 1, "", "parse_valid_pruner_types"], [167, 2, 1, "", "register_pruner"]], "neural_compressor.compression.pruner.pruners.BasePruner": [[167, 3, 1, "", "config"], [167, 3, 1, "", "current_sparsity_ratio"], [167, 3, 1, "", "end_step"], [167, 3, 1, "", "global_step"], [167, 3, 1, "", "masks"], [167, 3, 1, "", "max_sparsity_ratio_per_op"], [167, 3, 1, "", "modules"], [167, 3, 1, "", "pattern"], [167, 3, 1, "", "pruning_frequency"], [167, 3, 1, "", "scheduler"], [167, 3, 1, "", "scores"], [167, 3, 1, "", "start_step"], [167, 3, 1, "", "target_sparsity_ratio"]], "neural_compressor.compression.pruner.pruners.BasicPruner": [[167, 3, 1, "", "criterion"], [167, 3, 1, "", "pattern"], [167, 3, 1, "", "reg"], [167, 3, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruners.BlockMaskPruner": [[167, 3, 1, "", "criterion"], [167, 3, 1, "", "pattern"], [167, 3, 1, "", "reg"], [167, 3, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruners.RetrainFreePruner": [[167, 3, 1, "", "criterion"], [167, 3, 1, "", "pattern"], [167, 3, 1, "", "reg"], [167, 3, 1, "", "scheduler"]], "neural_compressor.compression.pruner.regs": [[168, 1, 1, "", "BaseReg"], [168, 1, 1, "", "GroupLasso"], [168, 2, 1, "", "get_reg"], [168, 2, 1, "", "get_reg_type"], [168, 2, 1, "", "register_reg"]], "neural_compressor.compression.pruner.regs.GroupLasso": [[168, 3, 1, "", "alpha"], [168, 3, 1, "", "reg_terms"]], "neural_compressor.compression.pruner.schedulers": [[169, 1, 1, "", "IterativeScheduler"], [169, 1, 1, "", "OneshotScheduler"], [169, 1, 1, "", "PruningScheduler"], [169, 2, 1, "", "get_scheduler"], [169, 2, 1, "", "register_scheduler"]], "neural_compressor.compression.pruner.schedulers.PruningScheduler": [[169, 3, 1, "", "config"]], "neural_compressor.compression.pruner.utils": [[170, 2, 1, "", "check_config"], [170, 2, 1, "", "check_key_validity"], [170, 2, 1, "", "generate_pruner_config"], [170, 2, 1, "", "get_sparsity_ratio"], [170, 2, 1, "", "parse_last_linear"], [170, 2, 1, "", "parse_to_prune"], [170, 2, 1, "", "process_and_check_config"], [170, 2, 1, "", "process_config"], [170, 2, 1, "", "process_weight_config"], [170, 2, 1, "", "process_yaml_config"], [170, 2, 1, "", "reset_none_to_default"], [170, 2, 1, "", "update_params"]], "neural_compressor.conf": [[171, 0, 0, "-", "config"], [172, 0, 0, "-", "dotdict"], [174, 0, 0, "-", "pythonic_config"]], "neural_compressor.conf.config": [[171, 1, 1, "", "Benchmark_Conf"], [171, 1, 1, "", "Conf"], [171, 1, 1, "", "Distillation_Conf"], [171, 1, 1, "", "Graph_Optimization_Conf"], [171, 1, 1, "", "MixedPrecision_Conf"], [171, 1, 1, "", "NASConfig"], [171, 1, 1, "", "PrunerV2"], [171, 1, 1, "", "Pruning_Conf"], [171, 1, 1, "", "Quantization_Conf"]], "neural_compressor.conf.dotdict": [[172, 1, 1, "", "DotDict"], [172, 2, 1, "", "deep_get"], [172, 2, 1, "", "deep_set"]], "neural_compressor.conf.pythonic_config": [[174, 1, 1, "", "AccuracyCriterion"], [174, 1, 1, "", "BenchmarkConfig"], [174, 1, 1, "", "DistillationConfig"], [174, 1, 1, "", "KnowledgeDistillationLossConfig"], [174, 1, 1, "", "Options"], [174, 1, 1, "", "QuantizationConfig"], [174, 1, 1, "", "WeightPruningConfig"]], "neural_compressor.config": [[175, 1, 1, "", "AccuracyCriterion"], [175, 1, 1, "", "BenchmarkConfig"], [175, 1, 1, "", "DistillationConfig"], [175, 1, 1, "", "DotDict"], [175, 1, 1, "", "ExportConfig"], [175, 1, 1, "", "IntermediateLayersKnowledgeDistillationLossConfig"], [175, 1, 1, "", "Keras"], [175, 1, 1, "", "KnowledgeDistillationLossConfig"], [175, 1, 1, "", "MXNet"], [175, 1, 1, "", "MixedPrecisionConfig"], [175, 1, 1, "", "NASConfig"], [175, 1, 1, "", "ONNX"], [175, 1, 1, "", "ONNXQlinear2QDQConfig"], [175, 1, 1, "", "Options"], [175, 1, 1, "", "PostTrainingQuantConfig"], [175, 1, 1, "", "PyTorch"], [175, 1, 1, "", "QuantizationAwareTrainingConfig"], [175, 1, 1, "", "SelfKnowledgeDistillationLossConfig"], [175, 1, 1, "", "TF2ONNXConfig"], [175, 1, 1, "", "TensorFlow"], [175, 1, 1, "", "Torch2ONNXConfig"], [175, 1, 1, "", "TuningCriterion"], [175, 1, 1, "", "WeightPruningConfig"]], "neural_compressor.contrib": [[177, 0, 0, "-", "strategy"]], "neural_compressor.contrib.strategy": [[178, 0, 0, "-", "sigopt"], [179, 0, 0, "-", "tpe"]], "neural_compressor.contrib.strategy.sigopt": [[178, 1, 1, "", "SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.tpe": [[179, 1, 1, "", "TpeTuneStrategy"]], "neural_compressor.data": [[184, 0, 0, "-", "dataloaders"], [196, 0, 0, "-", "datasets"], [200, 0, 0, "-", "filters"], [204, 0, 0, "-", "transforms"]], "neural_compressor.data.dataloaders": [[180, 0, 0, "-", "base_dataloader"], [181, 0, 0, "-", "dataloader"], [182, 0, 0, "-", "default_dataloader"], [183, 0, 0, "-", "fetcher"], [185, 0, 0, "-", "mxnet_dataloader"], [186, 0, 0, "-", "onnxrt_dataloader"], [187, 0, 0, "-", "pytorch_dataloader"], [188, 0, 0, "-", "sampler"], [189, 0, 0, "-", "tensorflow_dataloader"]], "neural_compressor.data.dataloaders.base_dataloader": [[180, 1, 1, "", "BaseDataLoader"]], "neural_compressor.data.dataloaders.dataloader": [[181, 1, 1, "", "DataLoader"], [181, 2, 1, "", "check_dataloader"]], "neural_compressor.data.dataloaders.default_dataloader": [[182, 1, 1, "", "DefaultDataLoader"], [182, 2, 1, "", "default_collate"]], "neural_compressor.data.dataloaders.fetcher": [[183, 1, 1, "", "Fetcher"], [183, 1, 1, "", "IndexFetcher"], [183, 1, 1, "", "IterableFetcher"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[185, 1, 1, "", "MXNetDataLoader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[186, 1, 1, "", "ONNXRTBertDataLoader"], [186, 1, 1, "", "ONNXRTDataLoader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[187, 1, 1, "", "PyTorchDataLoader"]], "neural_compressor.data.dataloaders.sampler": [[188, 1, 1, "", "BatchSampler"], [188, 1, 1, "", "IterableSampler"], [188, 1, 1, "", "Sampler"], [188, 1, 1, "", "SequentialSampler"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[189, 1, 1, "", "TFDataDataLoader"], [189, 1, 1, "", "TensorflowBertDataLoader"], [189, 1, 1, "", "TensorflowDataLoader"], [189, 1, 1, "", "TensorflowModelZooBertDataLoader"]], "neural_compressor.data.datasets": [[190, 0, 0, "-", "bert_dataset"], [191, 0, 0, "-", "coco_dataset"], [192, 0, 0, "-", "dataset"], [193, 0, 0, "-", "dummy_dataset"], [194, 0, 0, "-", "dummy_dataset_v2"], [195, 0, 0, "-", "imagenet_dataset"], [197, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.data.datasets.bert_dataset": [[190, 1, 1, "", "InputFeatures"], [190, 1, 1, "", "ONNXRTBertDataset"], [190, 1, 1, "", "ParseDecodeBert"], [190, 1, 1, "", "PytorchBertDataset"], [190, 1, 1, "", "TensorflowBertDataset"], [190, 1, 1, "", "TensorflowModelZooBertDataset"], [190, 2, 1, "", "convert_examples_to_features"], [190, 2, 1, "", "load_and_cache_examples"]], "neural_compressor.data.datasets.coco_dataset": [[191, 1, 1, "", "COCONpy"], [191, 1, 1, "", "COCORaw"], [191, 1, 1, "", "COCORecordDataset"], [191, 1, 1, "", "ParseDecodeCoco"]], "neural_compressor.data.datasets.dataset": [[192, 1, 1, "", "CIFAR10"], [192, 1, 1, "", "CIFAR100"], [192, 1, 1, "", "Dataset"], [192, 1, 1, "", "Datasets"], [192, 1, 1, "", "FashionMNIST"], [192, 1, 1, "", "ImageFolder"], [192, 1, 1, "", "IterableDataset"], [192, 1, 1, "", "MNIST"], [192, 1, 1, "", "MXNetCIFAR10"], [192, 1, 1, "", "MXNetCIFAR100"], [192, 1, 1, "", "MXNetDatasets"], [192, 1, 1, "", "MXNetFashionMNIST"], [192, 1, 1, "", "MXNetImageFolder"], [192, 1, 1, "", "MXNetMNIST"], [192, 1, 1, "", "ONNXRTITDatasets"], [192, 1, 1, "", "ONNXRTQLDatasets"], [192, 1, 1, "", "PyTorchDatasets"], [192, 1, 1, "", "PytorchCIFAR10"], [192, 1, 1, "", "PytorchCIFAR100"], [192, 1, 1, "", "PytorchFashionMNIST"], [192, 1, 1, "", "PytorchMNIST"], [192, 1, 1, "", "PytorchMxnetWrapDataset"], [192, 1, 1, "", "PytorchMxnetWrapFunction"], [192, 1, 1, "", "Tensorflow"], [192, 1, 1, "", "TensorflowCIFAR10"], [192, 1, 1, "", "TensorflowCIFAR100"], [192, 1, 1, "", "TensorflowDatasets"], [192, 1, 1, "", "TensorflowFashionMNIST"], [192, 1, 1, "", "TensorflowImageRecord"], [192, 1, 1, "", "TensorflowMNIST"], [192, 1, 1, "", "TensorflowTFRecordDataset"], [192, 1, 1, "", "TensorflowVOCRecord"], [192, 2, 1, "", "calculate_md5"], [192, 2, 1, "", "check_integrity"], [192, 2, 1, "", "dataset_registry"], [192, 2, 1, "", "download_url"], [192, 4, 1, "", "framework_datasets"], [192, 2, 1, "", "gen_bar_updater"]], "neural_compressor.data.datasets.dummy_dataset": [[193, 1, 1, "", "DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[194, 1, 1, "", "DummyDataset"], [194, 1, 1, "", "SparseDummyDataset"]], "neural_compressor.data.datasets.imagenet_dataset": [[195, 1, 1, "", "ImagenetRaw"], [195, 1, 1, "", "MXNetImagenetRaw"], [195, 1, 1, "", "ONNXRTImagenetDataset"], [195, 1, 1, "", "PytorchImagenetRaw"], [195, 1, 1, "", "TensorflowImagenetDataset"], [195, 1, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.data.datasets.style_transfer_dataset": [[197, 1, 1, "", "StyleTransferDataset"]], "neural_compressor.data.filters": [[198, 0, 0, "-", "coco_filter"], [199, 0, 0, "-", "filter"]], "neural_compressor.data.filters.coco_filter": [[198, 1, 1, "", "LabelBalanceCOCORawFilter"], [198, 1, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.filter": [[199, 1, 1, "", "FILTERS"], [199, 1, 1, "", "Filter"], [199, 1, 1, "", "MXNetFilters"], [199, 1, 1, "", "ONNXRTITFilters"], [199, 1, 1, "", "ONNXRTQLFilters"], [199, 1, 1, "", "PyTorchFilters"], [199, 1, 1, "", "TensorflowFilters"], [199, 2, 1, "", "filter_registry"]], "neural_compressor.data.transforms": [[202, 0, 0, "-", "coco_transform"], [203, 0, 0, "-", "imagenet_transform"], [205, 0, 0, "-", "postprocess"], [206, 0, 0, "-", "tokenization"], [207, 0, 0, "-", "transform"]], "neural_compressor.data.transforms.coco_transform": [[202, 1, 1, "", "ParseDecodeCocoTransform"]], "neural_compressor.data.transforms.imagenet_transform": [[203, 1, 1, "", "BilinearImagenetTransform"], [203, 1, 1, "", "LabelShift"], [203, 1, 1, "", "ONNXResizeCropImagenetTransform"], [203, 1, 1, "", "OnnxBilinearImagenetTransform"], [203, 1, 1, "", "ParseDecodeImagenet"], [203, 1, 1, "", "ParseDecodeImagenetTransform"], [203, 1, 1, "", "QuantizedInput"], [203, 1, 1, "", "ResizeWithAspectRatio"], [203, 1, 1, "", "TensorflowResizeCropImagenetTransform"]], "neural_compressor.data.transforms.postprocess": [[205, 1, 1, "", "Postprocess"]], "neural_compressor.data.transforms.tokenization": [[206, 1, 1, "", "BasicTokenizer"], [206, 1, 1, "", "FullTokenizer"], [206, 1, 1, "", "WordpieceTokenizer"], [206, 2, 1, "", "convert_by_vocab"], [206, 2, 1, "", "convert_to_unicode"], [206, 2, 1, "", "load_vocab"], [206, 2, 1, "", "whitespace_tokenize"]], "neural_compressor.data.transforms.transform": [[207, 1, 1, "", "AlignImageChannelTransform"], [207, 1, 1, "", "BaseTransform"], [207, 1, 1, "", "CastONNXTransform"], [207, 1, 1, "", "CastPyTorchTransform"], [207, 1, 1, "", "CastTFTransform"], [207, 1, 1, "", "CenterCropTFTransform"], [207, 1, 1, "", "CenterCropTransform"], [207, 1, 1, "", "CollectTransform"], [207, 1, 1, "", "ComposeTransform"], [207, 1, 1, "", "CropResizeTFTransform"], [207, 1, 1, "", "CropResizeTransform"], [207, 1, 1, "", "CropToBoundingBox"], [207, 1, 1, "", "InputFeatures"], [207, 1, 1, "", "MXNetCropResizeTransform"], [207, 1, 1, "", "MXNetCropToBoundingBox"], [207, 1, 1, "", "MXNetNormalizeTransform"], [207, 1, 1, "", "MXNetTransforms"], [207, 1, 1, "", "MXNetTranspose"], [207, 1, 1, "", "NormalizeTFTransform"], [207, 1, 1, "", "NormalizeTransform"], [207, 1, 1, "", "ONNXRTCropToBoundingBox"], [207, 1, 1, "", "ONNXRTITTransforms"], [207, 1, 1, "", "ONNXRTQLTransforms"], [207, 1, 1, "", "PaddedCenterCropTransform"], [207, 1, 1, "", "ParseDecodeVocTransform"], [207, 1, 1, "", "PyTorchAlignImageChannel"], [207, 1, 1, "", "PyTorchCropResizeTransform"], [207, 1, 1, "", "PyTorchNormalizeTransform"], [207, 1, 1, "", "PyTorchTransforms"], [207, 1, 1, "", "PyTorchTranspose"], [207, 1, 1, "", "PytorchMxnetTransform"], [207, 1, 1, "", "PytorchMxnetWrapFunction"], [207, 1, 1, "", "RandomCropTFTransform"], [207, 1, 1, "", "RandomCropTransform"], [207, 1, 1, "", "RandomHorizontalFlip"], [207, 1, 1, "", "RandomResizedCropMXNetTransform"], [207, 1, 1, "", "RandomResizedCropPytorchTransform"], [207, 1, 1, "", "RandomResizedCropTFTransform"], [207, 1, 1, "", "RandomResizedCropTransform"], [207, 1, 1, "", "RandomVerticalFlip"], [207, 1, 1, "", "RescaleKerasPretrainTransform"], [207, 1, 1, "", "RescaleTFTransform"], [207, 1, 1, "", "RescaleTransform"], [207, 1, 1, "", "ResizeMXNetTransform"], [207, 1, 1, "", "ResizePytorchTransform"], [207, 1, 1, "", "ResizeTFTransform"], [207, 1, 1, "", "ResizeTransform"], [207, 1, 1, "", "ResizeWithRatio"], [207, 1, 1, "", "SquadExample"], [207, 1, 1, "", "TFModelZooCollectTransform"], [207, 1, 1, "", "TFSquadV1ModelZooPostTransform"], [207, 1, 1, "", "TFSquadV1PostTransform"], [207, 1, 1, "", "TRANSFORMS"], [207, 1, 1, "", "TensorflowCropToBoundingBox"], [207, 1, 1, "", "TensorflowRandomHorizontalFlip"], [207, 1, 1, "", "TensorflowRandomVerticalFlip"], [207, 1, 1, "", "TensorflowResizeWithRatio"], [207, 1, 1, "", "TensorflowTransform"], [207, 1, 1, "", "TensorflowTransforms"], [207, 1, 1, "", "TensorflowTranspose"], [207, 1, 1, "", "TensorflowWrapFunction"], [207, 1, 1, "", "ToArray"], [207, 1, 1, "", "ToNDArrayTransform"], [207, 1, 1, "", "Transforms"], [207, 1, 1, "", "Transpose"], [207, 2, 1, "", "convert_examples_to_features"], [207, 2, 1, "", "get_final_text"], [207, 2, 1, "", "get_torchvision_map"], [207, 2, 1, "", "read_squad_examples"], [207, 2, 1, "", "transform_registry"]], "neural_compressor.experimental": [[208, 0, 0, "-", "benchmark"], [211, 0, 0, "-", "common"], [217, 0, 0, "-", "component"], [218, 0, 0, "-", "compression"], [220, 0, 0, "-", "contrib"], [245, 0, 0, "-", "data"], [250, 0, 0, "-", "distillation"], [251, 0, 0, "-", "export"], [256, 0, 0, "-", "graph_optimization"], [264, 0, 0, "-", "metric"], [266, 0, 0, "-", "mixed_precision"], [267, 0, 0, "-", "model_conversion"], [270, 0, 0, "-", "nas"], [276, 0, 0, "-", "pruner_legacy"], [280, 0, 0, "-", "pruning"], [281, 0, 0, "-", "pruning_recipes"], [285, 0, 0, "-", "pruning_v2"], [286, 0, 0, "-", "pytorch_pruner"], [293, 0, 0, "-", "quantization"], [294, 0, 0, "-", "scheduler"], [299, 0, 0, "-", "strategy"]], "neural_compressor.experimental.benchmark": [[208, 1, 1, "", "Benchmark"], [208, 2, 1, "", "get_architecture"], [208, 2, 1, "", "get_bounded_threads"], [208, 2, 1, "", "get_core_ids"], [208, 2, 1, "", "get_physical_ids"], [208, 2, 1, "", "get_threads"], [208, 2, 1, "", "get_threads_per_core"], [208, 2, 1, "", "set_all_env_var"], [208, 2, 1, "", "set_env_var"]], "neural_compressor.experimental.common": [[209, 0, 0, "-", "criterion"], [210, 0, 0, "-", "dataloader"], [212, 0, 0, "-", "metric"], [213, 0, 0, "-", "model"], [214, 0, 0, "-", "optimizer"], [215, 0, 0, "-", "postprocess"], [216, 0, 0, "-", "torch_utils"]], "neural_compressor.experimental.common.criterion": [[209, 1, 1, "", "Criterions"], [209, 1, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [209, 1, 1, "", "KnowledgeDistillationFramework"], [209, 1, 1, "", "KnowledgeDistillationLoss"], [209, 1, 1, "", "PyTorchCriterions"], [209, 1, 1, "", "PyTorchCrossEntropyLoss"], [209, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLoss"], [209, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"], [209, 1, 1, "", "PyTorchKnowledgeDistillationLoss"], [209, 1, 1, "", "PyTorchKnowledgeDistillationLossWrapper"], [209, 1, 1, "", "PyTorchSelfKnowledgeDistillationLoss"], [209, 1, 1, "", "PyTorchSelfKnowledgeDistillationLossWrapper"], [209, 1, 1, "", "SelfKnowledgeDistillationLoss"], [209, 1, 1, "", "TensorFlowCrossEntropyLoss"], [209, 1, 1, "", "TensorFlowSparseCategoricalCrossentropy"], [209, 1, 1, "", "TensorflowCriterions"], [209, 1, 1, "", "TensorflowKnowledgeDistillationLoss"], [209, 1, 1, "", "TensorflowKnowledgeDistillationLossExternal"], [209, 1, 1, "", "TensorflowKnowledgeDistillationLossWrapper"], [209, 2, 1, "", "criterion_registry"]], "neural_compressor.experimental.common.dataloader": [[210, 1, 1, "", "DataLoader"]], "neural_compressor.experimental.common.metric": [[212, 1, 1, "", "Metric"]], "neural_compressor.experimental.common.model": [[213, 1, 1, "", "Model"], [213, 2, 1, "", "set_backend"]], "neural_compressor.experimental.common.optimizer": [[214, 1, 1, "", "Optimizers"], [214, 1, 1, "", "PyTorchOptimizers"], [214, 1, 1, "", "PyTorchSGD"], [214, 1, 1, "", "TensorFlowAdam"], [214, 1, 1, "", "TensorFlowAdamW"], [214, 1, 1, "", "TensorFlowSGD"], [214, 1, 1, "", "TensorflowOptimizers"], [214, 2, 1, "", "optimizer_registry"]], "neural_compressor.experimental.common.postprocess": [[215, 1, 1, "", "Postprocess"]], "neural_compressor.experimental.common.torch_utils": [[216, 2, 1, "", "get_activation"], [216, 2, 1, "", "record_output"]], "neural_compressor.experimental.component": [[217, 1, 1, "", "Component"]], "neural_compressor.experimental.compression": [[219, 0, 0, "-", "pruning"]], "neural_compressor.experimental.compression.pruning": [[219, 2, 1, "", "prepare_pruning"], [219, 2, 1, "", "save"]], "neural_compressor.experimental.contrib": [[221, 0, 0, "-", "strategy"]], "neural_compressor.experimental.contrib.strategy": [[222, 0, 0, "-", "sigopt"], [223, 0, 0, "-", "tpe"]], "neural_compressor.experimental.contrib.strategy.sigopt": [[222, 1, 1, "", "SigOptTuneStrategy"]], "neural_compressor.experimental.contrib.strategy.tpe": [[223, 1, 1, "", "TpeTuneStrategy"]], "neural_compressor.experimental.data": [[228, 0, 0, "-", "dataloaders"], [240, 0, 0, "-", "datasets"], [244, 0, 0, "-", "filters"], [247, 0, 0, "-", "transforms"]], "neural_compressor.experimental.data.dataloaders": [[224, 0, 0, "-", "base_dataloader"], [225, 0, 0, "-", "dataloader"], [226, 0, 0, "-", "default_dataloader"], [227, 0, 0, "-", "fetcher"], [229, 0, 0, "-", "mxnet_dataloader"], [230, 0, 0, "-", "onnxrt_dataloader"], [231, 0, 0, "-", "pytorch_dataloader"], [232, 0, 0, "-", "sampler"], [233, 0, 0, "-", "tensorflow_dataloader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[224, 1, 1, "", "BaseDataLoader"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[226, 1, 1, "", "DefaultDataLoader"], [226, 2, 1, "", "default_collate"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[227, 1, 1, "", "Fetcher"], [227, 1, 1, "", "IndexFetcher"], [227, 1, 1, "", "IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[229, 1, 1, "", "MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[230, 1, 1, "", "ONNXRTBertDataLoader"], [230, 1, 1, "", "ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[231, 1, 1, "", "PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[232, 1, 1, "", "BatchSampler"], [232, 1, 1, "", "IterableSampler"], [232, 1, 1, "", "Sampler"], [232, 1, 1, "", "SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[233, 1, 1, "", "TFDataDataLoader"], [233, 1, 1, "", "TensorflowBertDataLoader"], [233, 1, 1, "", "TensorflowDataLoader"], [233, 1, 1, "", "TensorflowModelZooBertDataLoader"]], "neural_compressor.experimental.data.datasets": [[234, 0, 0, "-", "bert_dataset"], [235, 0, 0, "-", "coco_dataset"], [236, 0, 0, "-", "dataset"], [237, 0, 0, "-", "dummy_dataset"], [238, 0, 0, "-", "dummy_dataset_v2"], [239, 0, 0, "-", "imagenet_dataset"], [241, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[234, 1, 1, "", "InputFeatures"], [234, 1, 1, "", "ONNXRTBertDataset"], [234, 1, 1, "", "ParseDecodeBert"], [234, 1, 1, "", "PytorchBertDataset"], [234, 1, 1, "", "TensorflowBertDataset"], [234, 1, 1, "", "TensorflowModelZooBertDataset"], [234, 2, 1, "", "convert_examples_to_features"], [234, 2, 1, "", "load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[235, 1, 1, "", "COCONpy"], [235, 1, 1, "", "COCORaw"], [235, 1, 1, "", "COCORecordDataset"], [235, 1, 1, "", "ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.dataset": [[236, 1, 1, "", "CIFAR10"], [236, 1, 1, "", "CIFAR100"], [236, 1, 1, "", "Dataset"], [236, 1, 1, "", "Datasets"], [236, 1, 1, "", "FashionMNIST"], [236, 1, 1, "", "ImageFolder"], [236, 1, 1, "", "IterableDataset"], [236, 1, 1, "", "MNIST"], [236, 1, 1, "", "MXNetCIFAR10"], [236, 1, 1, "", "MXNetCIFAR100"], [236, 1, 1, "", "MXNetDatasets"], [236, 1, 1, "", "MXNetFashionMNIST"], [236, 1, 1, "", "MXNetImageFolder"], [236, 1, 1, "", "MXNetMNIST"], [236, 1, 1, "", "ONNXRTITDatasets"], [236, 1, 1, "", "ONNXRTQLDatasets"], [236, 1, 1, "", "PyTorchDatasets"], [236, 1, 1, "", "PytorchCIFAR10"], [236, 1, 1, "", "PytorchCIFAR100"], [236, 1, 1, "", "PytorchFashionMNIST"], [236, 1, 1, "", "PytorchMNIST"], [236, 1, 1, "", "PytorchMxnetWrapDataset"], [236, 1, 1, "", "PytorchMxnetWrapFunction"], [236, 1, 1, "", "TensorflowCIFAR10"], [236, 1, 1, "", "TensorflowCIFAR100"], [236, 1, 1, "", "TensorflowDatasets"], [236, 1, 1, "", "TensorflowFashionMNIST"], [236, 1, 1, "", "TensorflowImageFolder"], [236, 1, 1, "", "TensorflowImageRecord"], [236, 1, 1, "", "TensorflowMNIST"], [236, 1, 1, "", "TensorflowTFRecordDataset"], [236, 1, 1, "", "TensorflowVOCRecord"], [236, 2, 1, "", "calculate_md5"], [236, 2, 1, "", "check_integrity"], [236, 2, 1, "", "dataset_registry"], [236, 2, 1, "", "download_url"], [236, 4, 1, "", "framework_datasets"], [236, 2, 1, "", "gen_bar_updater"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[237, 1, 1, "", "DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[238, 1, 1, "", "DummyDataset"], [238, 1, 1, "", "SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[239, 1, 1, "", "ImagenetRaw"], [239, 1, 1, "", "MXNetImagenetRaw"], [239, 1, 1, "", "ONNXRTImagenetDataset"], [239, 1, 1, "", "PytorchImagenetRaw"], [239, 1, 1, "", "TensorflowImagenetDataset"], [239, 1, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[241, 1, 1, "", "StyleTransferDataset"]], "neural_compressor.experimental.data.filters": [[242, 0, 0, "-", "coco_filter"], [243, 0, 0, "-", "filter"]], "neural_compressor.experimental.data.filters.coco_filter": [[242, 1, 1, "", "LabelBalanceCOCORawFilter"], [242, 1, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.filter": [[243, 1, 1, "", "FILTERS"], [243, 1, 1, "", "Filter"], [243, 1, 1, "", "MXNetFilters"], [243, 1, 1, "", "ONNXRTITFilters"], [243, 1, 1, "", "ONNXRTQLFilters"], [243, 1, 1, "", "PyTorchFilters"], [243, 1, 1, "", "TensorflowFilters"], [243, 2, 1, "", "filter_registry"]], "neural_compressor.experimental.data.transforms": [[246, 0, 0, "-", "imagenet_transform"], [248, 0, 0, "-", "tokenization"], [249, 0, 0, "-", "transform"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[246, 1, 1, "", "BilinearImagenetTransform"], [246, 1, 1, "", "LabelShift"], [246, 1, 1, "", "ONNXResizeCropImagenetTransform"], [246, 1, 1, "", "OnnxBilinearImagenetTransform"], [246, 1, 1, "", "ParseDecodeImagenet"], [246, 1, 1, "", "ParseDecodeImagenetTransform"], [246, 1, 1, "", "QuantizedInput"], [246, 1, 1, "", "ResizeWithAspectRatio"], [246, 1, 1, "", "TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental.data.transforms.tokenization": [[248, 1, 1, "", "BasicTokenizer"], [248, 1, 1, "", "FullTokenizer"], [248, 1, 1, "", "WordpieceTokenizer"], [248, 2, 1, "", "convert_by_vocab"], [248, 2, 1, "", "convert_to_unicode"], [248, 2, 1, "", "load_vocab"], [248, 2, 1, "", "whitespace_tokenize"]], "neural_compressor.experimental.data.transforms.transform": [[249, 1, 1, "", "AlignImageChannelTransform"], [249, 1, 1, "", "BaseTransform"], [249, 1, 1, "", "CastONNXTransform"], [249, 1, 1, "", "CastPyTorchTransform"], [249, 1, 1, "", "CastTFTransform"], [249, 1, 1, "", "CenterCropTFTransform"], [249, 1, 1, "", "CenterCropTransform"], [249, 1, 1, "", "CollectTransform"], [249, 1, 1, "", "ComposeTransform"], [249, 1, 1, "", "CropResizeTFTransform"], [249, 1, 1, "", "CropResizeTransform"], [249, 1, 1, "", "CropToBoundingBox"], [249, 1, 1, "", "InputFeatures"], [249, 1, 1, "", "MXNetCropResizeTransform"], [249, 1, 1, "", "MXNetCropToBoundingBox"], [249, 1, 1, "", "MXNetNormalizeTransform"], [249, 1, 1, "", "MXNetTransforms"], [249, 1, 1, "", "MXNetTranspose"], [249, 1, 1, "", "NormalizeTFTransform"], [249, 1, 1, "", "NormalizeTransform"], [249, 1, 1, "", "ONNXRTCropToBoundingBox"], [249, 1, 1, "", "ONNXRTITTransforms"], [249, 1, 1, "", "ONNXRTQLTransforms"], [249, 1, 1, "", "PaddedCenterCropTransform"], [249, 1, 1, "", "ParseDecodeVocTransform"], [249, 1, 1, "", "PyTorchAlignImageChannel"], [249, 1, 1, "", "PyTorchCropResizeTransform"], [249, 1, 1, "", "PyTorchNormalizeTransform"], [249, 1, 1, "", "PyTorchTransforms"], [249, 1, 1, "", "PyTorchTranspose"], [249, 1, 1, "", "PytorchMxnetTransform"], [249, 1, 1, "", "PytorchMxnetWrapFunction"], [249, 1, 1, "", "RandomCropTFTransform"], [249, 1, 1, "", "RandomCropTransform"], [249, 1, 1, "", "RandomHorizontalFlip"], [249, 1, 1, "", "RandomResizedCropMXNetTransform"], [249, 1, 1, "", "RandomResizedCropPytorchTransform"], [249, 1, 1, "", "RandomResizedCropTFTransform"], [249, 1, 1, "", "RandomResizedCropTransform"], [249, 1, 1, "", "RandomVerticalFlip"], [249, 1, 1, "", "RescaleKerasPretrainTransform"], [249, 1, 1, "", "RescaleTFTransform"], [249, 1, 1, "", "RescaleTransform"], [249, 1, 1, "", "ResizeMXNetTransform"], [249, 1, 1, "", "ResizePytorchTransform"], [249, 1, 1, "", "ResizeTFTransform"], [249, 1, 1, "", "ResizeTransform"], [249, 1, 1, "", "ResizeWithRatio"], [249, 1, 1, "", "SquadExample"], [249, 1, 1, "", "TFModelZooCollectTransform"], [249, 1, 1, "", "TFSquadV1ModelZooPostTransform"], [249, 1, 1, "", "TFSquadV1PostTransform"], [249, 1, 1, "", "TRANSFORMS"], [249, 1, 1, "", "TensorflowCropToBoundingBox"], [249, 1, 1, "", "TensorflowRandomHorizontalFlip"], [249, 1, 1, "", "TensorflowRandomVerticalFlip"], [249, 1, 1, "", "TensorflowResizeWithRatio"], [249, 1, 1, "", "TensorflowTransform"], [249, 1, 1, "", "TensorflowTransforms"], [249, 1, 1, "", "TensorflowTranspose"], [249, 1, 1, "", "TensorflowWrapFunction"], [249, 1, 1, "", "ToArray"], [249, 1, 1, "", "ToNDArrayTransform"], [249, 1, 1, "", "Transforms"], [249, 1, 1, "", "Transpose"], [249, 2, 1, "", "convert_examples_to_features"], [249, 2, 1, "", "get_final_text"], [249, 2, 1, "", "get_torchvision_map"], [249, 2, 1, "", "read_squad_examples"], [249, 2, 1, "", "transform_registry"]], "neural_compressor.experimental.distillation": [[250, 1, 1, "", "Distillation"]], "neural_compressor.experimental.distillation.Distillation": [[250, 3, 1, "", "_epoch_ran"], [250, 3, 1, "", "best_model"], [250, 3, 1, "", "best_score"], [250, 3, 1, "", "eval_frequency"]], "neural_compressor.experimental.export": [[252, 0, 0, "-", "qlinear2qdq"], [253, 0, 0, "-", "tf2onnx"], [254, 0, 0, "-", "torch2onnx"], [255, 0, 0, "-", "utils"]], "neural_compressor.experimental.export.qlinear2qdq": [[252, 2, 1, "", "check_model"], [252, 2, 1, "", "onnx_qlinear_to_qdq"]], "neural_compressor.experimental.export.tf2onnx": [[253, 2, 1, "", "tf_to_fp32_onnx"], [253, 2, 1, "", "tf_to_int8_onnx"]], "neural_compressor.experimental.export.torch2onnx": [[254, 2, 1, "", "build_scale_mapping"], [254, 2, 1, "", "get_node_mapping"], [254, 2, 1, "", "get_quantizable_onnx_ops"], [254, 2, 1, "", "qdq_fp32_bias"], [254, 2, 1, "", "qdq_fp32_bias_qdq"], [254, 2, 1, "", "qdq_int32_bias"], [254, 2, 1, "", "recalculate_bias"], [254, 2, 1, "", "remove_nodes_by_name"], [254, 2, 1, "", "set_data_type"], [254, 2, 1, "", "set_scale_info"], [254, 2, 1, "", "sub_graph_with_int32_bias"], [254, 2, 1, "", "torch_to_fp32_onnx"], [254, 2, 1, "", "torch_to_int8_onnx"], [254, 2, 1, "", "update_weight_bias"]], "neural_compressor.experimental.export.utils": [[255, 1, 1, "", "DummyDataReader"], [255, 2, 1, "", "ONNX2Numpy_dtype"]], "neural_compressor.experimental.graph_optimization": [[256, 1, 1, "", "Graph_Optimization"]], "neural_compressor.experimental.metric": [[258, 0, 0, "-", "bleu"], [259, 0, 0, "-", "bleu_util"], [260, 0, 0, "-", "coco_label_map"], [261, 0, 0, "-", "coco_tools"], [262, 0, 0, "-", "evaluate_squad"], [263, 0, 0, "-", "f1"], [265, 0, 0, "-", "metric"]], "neural_compressor.experimental.metric.bleu": [[258, 1, 1, "", "BLEU"], [258, 1, 1, "", "UnicodeRegex"], [258, 2, 1, "", "bleu_tokenize"]], "neural_compressor.experimental.metric.bleu.BLEU": [[258, 3, 1, "", "labels"], [258, 3, 1, "", "predictions"]], "neural_compressor.experimental.metric.bleu.UnicodeRegex": [[258, 3, 1, "", "nondigit_punct_re"], [258, 3, 1, "", "punct_nondigit_re"], [258, 3, 1, "", "symbol_re"]], "neural_compressor.experimental.metric.bleu_util": [[259, 2, 1, "", "compute_bleu"]], "neural_compressor.experimental.metric.coco_tools": [[261, 1, 1, "", "COCOEvalWrapper"], [261, 1, 1, "", "COCOWrapper"], [261, 2, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [261, 2, 1, "", "ExportSingleImageDetectionMasksToCoco"], [261, 2, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.experimental.metric.coco_tools.COCOWrapper": [[261, 3, 1, "", "dataset"], [261, 3, 1, "", "detection_type"]], "neural_compressor.experimental.metric.evaluate_squad": [[262, 2, 1, "", "evaluate"], [262, 2, 1, "", "exact_match_score"], [262, 2, 1, "", "f1_score"], [262, 2, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[263, 2, 1, "", "evaluate"], [263, 2, 1, "", "f1_score"], [263, 2, 1, "", "metric_max_over_ground_truths"], [263, 2, 1, "", "normalize_answer"]], "neural_compressor.experimental.metric.metric": [[265, 1, 1, "", "Accuracy"], [265, 1, 1, "", "BaseMetric"], [265, 1, 1, "", "COCOmAPv2"], [265, 1, 1, "", "F1"], [265, 1, 1, "", "GeneralTopK"], [265, 1, 1, "", "Loss"], [265, 1, 1, "", "MAE"], [265, 1, 1, "", "METRICS"], [265, 1, 1, "", "MSE"], [265, 1, 1, "", "MXNetMetrics"], [265, 1, 1, "", "ONNXRTGLUE"], [265, 1, 1, "", "ONNXRTITMetrics"], [265, 1, 1, "", "ONNXRTQLMetrics"], [265, 1, 1, "", "PyTorchLoss"], [265, 1, 1, "", "PyTorchMetrics"], [265, 1, 1, "", "RMSE"], [265, 1, 1, "", "ROC"], [265, 1, 1, "", "SquadF1"], [265, 1, 1, "", "TensorflowCOCOMAP"], [265, 1, 1, "", "TensorflowMAP"], [265, 1, 1, "", "TensorflowMetrics"], [265, 1, 1, "", "TensorflowTopK"], [265, 1, 1, "", "TensorflowVOCMAP"], [265, 1, 1, "", "WrapMXNetMetric"], [265, 1, 1, "", "WrapONNXRTMetric"], [265, 1, 1, "", "WrapPyTorchMetric"], [265, 1, 1, "", "mIOU"], [265, 2, 1, "", "metric_registry"]], "neural_compressor.experimental.metric.metric.Accuracy": [[265, 3, 1, "", "label_list"], [265, 3, 1, "", "pred_list"], [265, 3, 1, "", "sample"]], "neural_compressor.experimental.metric.metric.GeneralTopK": [[265, 3, 1, "", "k"], [265, 3, 1, "", "num_correct"], [265, 3, 1, "", "num_sample"]], "neural_compressor.experimental.metric.metric.Loss": [[265, 3, 1, "", "sample"], [265, 3, 1, "", "sum"]], "neural_compressor.experimental.metric.metric.MAE": [[265, 3, 1, "", "compare_label"], [265, 3, 1, "", "label_list"], [265, 3, 1, "", "pred_list"]], "neural_compressor.experimental.metric.metric.METRICS": [[265, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.MSE": [[265, 3, 1, "", "compare_label"], [265, 3, 1, "", "label_list"], [265, 3, 1, "", "pred_list"]], "neural_compressor.experimental.metric.metric.MXNetMetrics": [[265, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTITMetrics": [[265, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics": [[265, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.PyTorchMetrics": [[265, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.RMSE": [[265, 3, 1, "", "mse"]], "neural_compressor.experimental.metric.metric.TensorflowMetrics": [[265, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.TensorflowTopK": [[265, 3, 1, "", "k"], [265, 3, 1, "", "num_correct"], [265, 3, 1, "", "num_sample"]], "neural_compressor.experimental.mixed_precision": [[266, 1, 1, "", "MixedPrecision"]], "neural_compressor.experimental.model_conversion": [[267, 1, 1, "", "ModelConversion"]], "neural_compressor.experimental.nas": [[268, 0, 0, "-", "basic_nas"], [269, 0, 0, "-", "dynas"], [271, 0, 0, "-", "nas"], [272, 0, 0, "-", "nas_utils"], [273, 0, 0, "-", "search_algorithms"]], "neural_compressor.experimental.nas.basic_nas": [[268, 1, 1, "", "BasicNAS"]], "neural_compressor.experimental.nas.dynas": [[269, 1, 1, "", "DyNAS"]], "neural_compressor.experimental.nas.nas": [[271, 1, 1, "", "NAS"], [271, 1, 1, "", "NASBase"]], "neural_compressor.experimental.nas.nas_utils": [[272, 2, 1, "", "create_search_space_pool"], [272, 2, 1, "", "find_pareto_front"], [272, 2, 1, "", "nas_registry"]], "neural_compressor.experimental.nas.search_algorithms": [[273, 1, 1, "", "BayesianOptimizationSearcher"], [273, 1, 1, "", "GridSearcher"], [273, 1, 1, "", "RandomSearcher"], [273, 1, 1, "", "Searcher"]], "neural_compressor.experimental.pruner_legacy": [[274, 0, 0, "-", "gradient_sensitivity"], [275, 0, 0, "-", "group_lasso"], [277, 0, 0, "-", "magnitude"], [278, 0, 0, "-", "pattern_lock"], [279, 0, 0, "-", "pruner"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[274, 1, 1, "", "GradientSensitivityPruner"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[275, 1, 1, "", "GroupLassoPruner"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[277, 1, 1, "", "BasicMagnitudePruner"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[278, 1, 1, "", "PatternLockPruner"]], "neural_compressor.experimental.pruner_legacy.pruner": [[279, 1, 1, "", "Pruner"], [279, 2, 1, "", "pruner_registry"]], "neural_compressor.experimental.pruning": [[280, 1, 1, "", "Pruning"], [280, 1, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning.Pruning": [[280, 3, 1, "", "conf"], [280, 3, 1, "", "pruners"]], "neural_compressor.experimental.pruning_recipes": [[282, 0, 0, "-", "patterns"]], "neural_compressor.experimental.pruning_recipes.patterns": [[283, 0, 0, "-", "pattern"], [284, 0, 0, "-", "tile_pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[283, 1, 1, "", "PATTERNS"], [283, 1, 1, "", "PatternBase"], [283, 2, 1, "", "pattern_registry"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS": [[283, 3, 1, "", "patterns"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[284, 1, 1, "", "TilePatternBase"], [284, 1, 1, "", "TilePattern_1x1"], [284, 1, 1, "", "TilePattern_1x16"], [284, 1, 1, "", "TilePattern_1x2"], [284, 1, 1, "", "TilePattern_2x2"], [284, 1, 1, "", "TilePattern_4x1"]], "neural_compressor.experimental.pruning_v2": [[285, 1, 1, "", "Pruning"], [285, 1, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning_v2.Pruning": [[285, 3, 1, "", "conf"], [285, 3, 1, "", "pruners"]], "neural_compressor.experimental.pytorch_pruner": [[287, 0, 0, "-", "logger"], [288, 0, 0, "-", "patterns"], [289, 0, 0, "-", "prune_utils"], [290, 0, 0, "-", "pruner"], [291, 0, 0, "-", "pruning"], [292, 0, 0, "-", "scheduler"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[288, 1, 1, "", "Pattern"], [288, 1, 1, "", "PatternNInM"], [288, 1, 1, "", "PatternNxM"], [288, 2, 1, "", "get_pattern"], [288, 2, 1, "", "register_pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.Pattern": [[288, 3, 1, "", "is_global"], [288, 3, 1, "", "pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM": [[288, 3, 1, "", "M"], [288, 3, 1, "", "N"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM": [[288, 3, 1, "", "block_size"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[289, 2, 1, "", "check_config"], [289, 2, 1, "", "parse_not_to_prune"], [289, 2, 1, "", "parse_to_prune"], [289, 2, 1, "", "process_and_check_config"], [289, 2, 1, "", "process_config"], [289, 2, 1, "", "reset_non_value_to_default"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[290, 1, 1, "", "MagnitudePruner"], [290, 1, 1, "", "PatternLockPruner"], [290, 1, 1, "", "Pruner"], [290, 1, 1, "", "SnipMomentumPruner"], [290, 1, 1, "", "SnipPruner"], [290, 2, 1, "", "get_pruner"], [290, 2, 1, "", "register_pruners"]], "neural_compressor.experimental.pytorch_pruner.pruner.Pruner": [[290, 3, 1, "", "config"], [290, 3, 1, "", "current_sparsity_ratio"], [290, 3, 1, "", "end_step"], [290, 3, 1, "", "global_step"], [290, 3, 1, "", "masks"], [290, 3, 1, "", "max_sparsity_ratio_per_layer"], [290, 3, 1, "", "modules"], [290, 3, 1, "", "pattern"], [290, 3, 1, "", "scheduler"], [290, 3, 1, "", "scores"], [290, 3, 1, "", "start_step"], [290, 3, 1, "", "target_sparsity_ratio"], [290, 3, 1, "", "update_frequency_on_step"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[291, 1, 1, "", "Pruning"]], "neural_compressor.experimental.pytorch_pruner.pruning.Pruning": [[291, 3, 1, "", "config_file_path"], [291, 3, 1, "", "model"], [291, 3, 1, "", "pruner_info"], [291, 3, 1, "", "pruners"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[292, 1, 1, "", "IterativeScheduler"], [292, 1, 1, "", "OneshotScheduler"], [292, 1, 1, "", "Scheduler"], [292, 2, 1, "", "get_scheduler"], [292, 2, 1, "", "register_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler": [[292, 3, 1, "", "config"]], "neural_compressor.experimental.quantization": [[293, 1, 1, "", "Quantization"]], "neural_compressor.experimental.scheduler": [[294, 1, 1, "", "Scheduler"]], "neural_compressor.experimental.strategy": [[295, 0, 0, "-", "auto_mixed_precision"], [296, 0, 0, "-", "basic"], [297, 0, 0, "-", "bayesian"], [298, 0, 0, "-", "exhaustive"], [300, 0, 0, "-", "mse"], [301, 0, 0, "-", "mse_v2"], [302, 0, 0, "-", "random"], [303, 0, 0, "-", "strategy"], [305, 0, 0, "-", "utils"]], "neural_compressor.experimental.strategy.auto_mixed_precision": [[295, 1, 1, "", "AutoMixedPrecisionTuneStrategy"]], "neural_compressor.experimental.strategy.basic": [[296, 1, 1, "", "BasicTuneStrategy"]], "neural_compressor.experimental.strategy.bayesian": [[297, 1, 1, "", "BayesianOptimization"], [297, 1, 1, "", "BayesianTuneStrategy"], [297, 1, 1, "", "TargetSpace"], [297, 2, 1, "", "acq_max"]], "neural_compressor.experimental.strategy.exhaustive": [[298, 1, 1, "", "ExhaustiveTuneStrategy"]], "neural_compressor.experimental.strategy.mse": [[300, 1, 1, "", "MSETuneStrategy"]], "neural_compressor.experimental.strategy.mse_v2": [[301, 1, 1, "", "MSE_V2TuneStrategy"]], "neural_compressor.experimental.strategy.random": [[302, 1, 1, "", "RandomTuneStrategy"]], "neural_compressor.experimental.strategy.strategy": [[303, 1, 1, "", "TuneStrategy"], [303, 2, 1, "", "strategy_registry"]], "neural_compressor.experimental.strategy.utils": [[304, 0, 0, "-", "constant"], [306, 0, 0, "-", "tuning_sampler"], [307, 0, 0, "-", "tuning_space"], [308, 0, 0, "-", "tuning_structs"], [309, 0, 0, "-", "utility"]], "neural_compressor.experimental.strategy.utils.tuning_sampler": [[306, 1, 1, "", "FallbackTuningSampler"], [306, 1, 1, "", "ModelWiseTuningSampler"], [306, 1, 1, "", "OpTypeWiseTuningSampler"], [306, 1, 1, "", "OpWiseTuningSampler"], [306, 1, 1, "", "SmoothQuantSampler"], [306, 1, 1, "", "TuningOrder"], [306, 1, 1, "", "TuningSampler"], [306, 1, 1, "", "TuningSamplerRegistry"]], "neural_compressor.experimental.strategy.utils.tuning_space": [[307, 1, 1, "", "TuningItem"], [307, 1, 1, "", "TuningSpace"], [307, 2, 1, "", "initial_tuning_cfg_with_quant_mode"], [307, 2, 1, "", "pattern_to_internal"], [307, 2, 1, "", "pattern_to_path"], [307, 2, 1, "", "quant_mode_from_pattern"]], "neural_compressor.experimental.strategy.utils.tuning_structs": [[308, 1, 1, "", "OpTuningConfig"]], "neural_compressor.experimental.strategy.utils.utility": [[309, 1, 1, "", "OrderedDefaultDict"], [309, 2, 1, "", "extract_data_type"], [309, 2, 1, "", "get_adaptor_name"], [309, 2, 1, "", "reverted_data_type"]], "neural_compressor.metric": [[311, 0, 0, "-", "bleu"], [312, 0, 0, "-", "bleu_util"], [313, 0, 0, "-", "coco_label_map"], [314, 0, 0, "-", "coco_tools"], [315, 0, 0, "-", "evaluate_squad"], [316, 0, 0, "-", "f1"], [318, 0, 0, "-", "metric"]], "neural_compressor.metric.bleu": [[311, 1, 1, "", "BLEU"], [311, 1, 1, "", "UnicodeRegex"], [311, 2, 1, "", "bleu_tokenize"]], "neural_compressor.metric.bleu.BLEU": [[311, 3, 1, "", "labels"], [311, 3, 1, "", "predictions"]], "neural_compressor.metric.bleu.UnicodeRegex": [[311, 3, 1, "", "nondigit_punct_re"], [311, 3, 1, "", "punct_nondigit_re"], [311, 3, 1, "", "symbol_re"]], "neural_compressor.metric.bleu_util": [[312, 2, 1, "", "compute_bleu"]], "neural_compressor.metric.coco_tools": [[314, 1, 1, "", "COCOEvalWrapper"], [314, 1, 1, "", "COCOWrapper"], [314, 2, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [314, 2, 1, "", "ExportSingleImageDetectionMasksToCoco"], [314, 2, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.metric.coco_tools.COCOWrapper": [[314, 3, 1, "", "dataset"], [314, 3, 1, "", "detection_type"]], "neural_compressor.metric.evaluate_squad": [[315, 2, 1, "", "evaluate"], [315, 2, 1, "", "exact_match_score"], [315, 2, 1, "", "f1_score"], [315, 2, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[316, 2, 1, "", "evaluate"], [316, 2, 1, "", "f1_score"], [316, 2, 1, "", "metric_max_over_ground_truths"], [316, 2, 1, "", "normalize_answer"]], "neural_compressor.metric.metric": [[318, 1, 1, "", "Accuracy"], [318, 1, 1, "", "BaseMetric"], [318, 1, 1, "", "COCOmAPv2"], [318, 1, 1, "", "F1"], [318, 1, 1, "", "GeneralTopK"], [318, 1, 1, "", "Loss"], [318, 1, 1, "", "MAE"], [318, 1, 1, "", "METRICS"], [318, 1, 1, "", "MSE"], [318, 1, 1, "", "MXNetMetrics"], [318, 1, 1, "", "Metric"], [318, 1, 1, "", "ONNXRTGLUE"], [318, 1, 1, "", "ONNXRTITMetrics"], [318, 1, 1, "", "ONNXRTQLMetrics"], [318, 1, 1, "", "PyTorchLoss"], [318, 1, 1, "", "PyTorchMetrics"], [318, 1, 1, "", "RMSE"], [318, 1, 1, "", "ROC"], [318, 1, 1, "", "SquadF1"], [318, 1, 1, "", "TensorflowCOCOMAP"], [318, 1, 1, "", "TensorflowMAP"], [318, 1, 1, "", "TensorflowMetrics"], [318, 1, 1, "", "TensorflowTopK"], [318, 1, 1, "", "TensorflowVOCMAP"], [318, 1, 1, "", "WrapMXNetMetric"], [318, 1, 1, "", "WrapONNXRTMetric"], [318, 1, 1, "", "WrapPyTorchMetric"], [318, 1, 1, "", "mIOU"], [318, 2, 1, "", "metric_registry"], [318, 2, 1, "", "register_customer_metric"]], "neural_compressor.metric.metric.Accuracy": [[318, 3, 1, "", "label_list"], [318, 3, 1, "", "pred_list"], [318, 3, 1, "", "sample"]], "neural_compressor.metric.metric.GeneralTopK": [[318, 3, 1, "", "k"], [318, 3, 1, "", "num_correct"], [318, 3, 1, "", "num_sample"]], "neural_compressor.metric.metric.Loss": [[318, 3, 1, "", "sample"], [318, 3, 1, "", "sum"]], "neural_compressor.metric.metric.MAE": [[318, 3, 1, "", "compare_label"], [318, 3, 1, "", "label_list"], [318, 3, 1, "", "pred_list"]], "neural_compressor.metric.metric.METRICS": [[318, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.MSE": [[318, 3, 1, "", "compare_label"], [318, 3, 1, "", "label_list"], [318, 3, 1, "", "pred_list"]], "neural_compressor.metric.metric.MXNetMetrics": [[318, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTITMetrics": [[318, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTQLMetrics": [[318, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.PyTorchMetrics": [[318, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.RMSE": [[318, 3, 1, "", "mse"]], "neural_compressor.metric.metric.TensorflowMetrics": [[318, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.TensorflowTopK": [[318, 3, 1, "", "k"], [318, 3, 1, "", "num_correct"], [318, 3, 1, "", "num_sample"]], "neural_compressor.mix_precision": [[319, 2, 1, "", "fit"]], "neural_compressor.model": [[320, 0, 0, "-", "base_model"], [322, 0, 0, "-", "keras_model"], [323, 0, 0, "-", "model"], [324, 0, 0, "-", "mxnet_model"], [325, 0, 0, "-", "nets_factory"], [326, 0, 0, "-", "onnx_model"], [327, 0, 0, "-", "tensorflow_model"], [328, 0, 0, "-", "torch_model"]], "neural_compressor.model.base_model": [[320, 1, 1, "", "BaseModel"]], "neural_compressor.model.keras_model": [[322, 1, 1, "", "KerasModel"]], "neural_compressor.model.model": [[323, 1, 1, "", "Model"], [323, 2, 1, "", "get_model_fwk_name"]], "neural_compressor.model.mxnet_model": [[324, 1, 1, "", "MXNetModel"]], "neural_compressor.model.nets_factory": [[325, 1, 1, "", "TFSlimNetsFactory"]], "neural_compressor.model.onnx_model": [[326, 1, 1, "", "ONNXModel"]], "neural_compressor.model.tensorflow_model": [[327, 1, 1, "", "TensorflowBaseModel"], [327, 1, 1, "", "TensorflowCheckpointModel"], [327, 1, 1, "", "TensorflowModel"], [327, 1, 1, "", "TensorflowQATModel"], [327, 1, 1, "", "TensorflowSavedModelModel"], [327, 2, 1, "", "checkpoint_session"], [327, 2, 1, "", "estimator_session"], [327, 2, 1, "", "frozen_pb_session"], [327, 2, 1, "", "get_model_type"], [327, 2, 1, "", "graph_def_session"], [327, 2, 1, "", "graph_session"], [327, 2, 1, "", "keras_session"], [327, 2, 1, "", "load_saved_model"], [327, 2, 1, "", "saved_model_session"], [327, 2, 1, "", "slim_session"], [327, 2, 1, "", "validate_and_inference_input_output"], [327, 2, 1, "", "validate_graph_node"]], "neural_compressor.model.torch_model": [[328, 1, 1, "", "IPEXModel"], [328, 1, 1, "", "PyTorchBaseModel"], [328, 1, 1, "", "PyTorchFXModel"], [328, 1, 1, "", "PyTorchModel"]], "neural_compressor.objective": [[329, 1, 1, "", "Accuracy"], [329, 1, 1, "", "Footprint"], [329, 1, 1, "", "ModelSize"], [329, 1, 1, "", "MultiObjective"], [329, 1, 1, "", "Objective"], [329, 1, 1, "", "Performance"], [329, 2, 1, "", "objective_custom_registry"], [329, 2, 1, "", "objective_registry"]], "neural_compressor.profiling": [[332, 0, 0, "-", "parser"], [342, 0, 0, "-", "profiler"]], "neural_compressor.profiling.parser": [[331, 0, 0, "-", "factory"], [334, 0, 0, "-", "onnx_parser"], [336, 0, 0, "-", "parser"], [337, 0, 0, "-", "result"], [339, 0, 0, "-", "tensorflow_parser"]], "neural_compressor.profiling.parser.factory": [[331, 1, 1, "", "ParserFactory"]], "neural_compressor.profiling.parser.onnx_parser": [[333, 0, 0, "-", "factory"], [335, 0, 0, "-", "parser"]], "neural_compressor.profiling.parser.onnx_parser.factory": [[333, 1, 1, "", "OnnxrtParserFactory"]], "neural_compressor.profiling.parser.onnx_parser.parser": [[335, 1, 1, "", "OnnxProfilingParser"]], "neural_compressor.profiling.parser.parser": [[336, 1, 1, "", "ProfilingParser"]], "neural_compressor.profiling.parser.result": [[337, 1, 1, "", "ProfilingResult"]], "neural_compressor.profiling.parser.tensorflow_parser": [[338, 0, 0, "-", "factory"], [340, 0, 0, "-", "parser"]], "neural_compressor.profiling.parser.tensorflow_parser.factory": [[338, 1, 1, "", "TensorFlowParserFactory"]], "neural_compressor.profiling.parser.tensorflow_parser.parser": [[340, 1, 1, "", "TensorFlowProfilingParser"]], "neural_compressor.profiling.profiler": [[341, 0, 0, "-", "factory"], [344, 0, 0, "-", "onnxrt_profiler"], [347, 0, 0, "-", "profiler"], [349, 0, 0, "-", "tensorflow_profiler"]], "neural_compressor.profiling.profiler.factory": [[341, 1, 1, "", "ProfilerFactory"]], "neural_compressor.profiling.profiler.onnxrt_profiler": [[343, 0, 0, "-", "factory"], [345, 0, 0, "-", "profiler"], [346, 0, 0, "-", "utils"]], "neural_compressor.profiling.profiler.onnxrt_profiler.factory": [[343, 1, 1, "", "ProfilerFactory"]], "neural_compressor.profiling.profiler.onnxrt_profiler.profiler": [[345, 1, 1, "", "Profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.utils": [[346, 2, 1, "", "create_onnx_config"]], "neural_compressor.profiling.profiler.profiler": [[347, 1, 1, "", "Profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler": [[348, 0, 0, "-", "factory"], [350, 0, 0, "-", "profiler"], [351, 0, 0, "-", "utils"]], "neural_compressor.profiling.profiler.tensorflow_profiler.factory": [[348, 1, 1, "", "ProfilerFactory"]], "neural_compressor.profiling.profiler.tensorflow_profiler.profiler": [[350, 1, 1, "", "Profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.utils": [[351, 2, 1, "", "create_tf_config"], [351, 2, 1, "", "delete_assign"], [351, 2, 1, "", "set_eager_execution"]], "neural_compressor.quantization": [[352, 2, 1, "", "fit"]], "neural_compressor.strategy": [[353, 0, 0, "-", "auto"], [354, 0, 0, "-", "auto_mixed_precision"], [355, 0, 0, "-", "basic"], [356, 0, 0, "-", "bayesian"], [357, 0, 0, "-", "conservative"], [358, 0, 0, "-", "exhaustive"], [359, 0, 0, "-", "hawq_v2"], [361, 0, 0, "-", "mse"], [362, 0, 0, "-", "mse_v2"], [363, 0, 0, "-", "random"], [364, 0, 0, "-", "strategy"], [366, 0, 0, "-", "utils"]], "neural_compressor.strategy.auto": [[353, 1, 1, "", "AutoTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[354, 1, 1, "", "AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.basic": [[355, 1, 1, "", "BasicTuneStrategy"]], "neural_compressor.strategy.bayesian": [[356, 1, 1, "", "BayesianOptimization"], [356, 1, 1, "", "BayesianTuneStrategy"], [356, 1, 1, "", "TargetSpace"], [356, 2, 1, "", "acq_max"]], "neural_compressor.strategy.conservative": [[357, 1, 1, "", "ConservativeTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[358, 1, 1, "", "ExhaustiveTuneStrategy"]], "neural_compressor.strategy.hawq_v2": [[359, 1, 1, "", "HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.mse": [[361, 1, 1, "", "MSETuneStrategy"]], "neural_compressor.strategy.mse_v2": [[362, 1, 1, "", "MSE_V2TuneStrategy"]], "neural_compressor.strategy.random": [[363, 1, 1, "", "RandomTuneStrategy"]], "neural_compressor.strategy.strategy": [[364, 1, 1, "", "TuneStrategy"], [364, 1, 1, "", "TuneStrategyMeta"], [364, 2, 1, "", "strategy_registry"]], "neural_compressor.strategy.utils": [[365, 0, 0, "-", "constant"], [367, 0, 0, "-", "tuning_sampler"], [368, 0, 0, "-", "tuning_space"], [369, 0, 0, "-", "tuning_structs"], [370, 0, 0, "-", "utility"]], "neural_compressor.strategy.utils.tuning_sampler": [[367, 1, 1, "", "BlockFallbackTuningSampler"], [367, 1, 1, "", "FallbackTuningSampler"], [367, 1, 1, "", "ModelWiseTuningSampler"], [367, 1, 1, "", "OpTypeWiseTuningSampler"], [367, 1, 1, "", "OpWiseTuningSampler"], [367, 1, 1, "", "TuningOrder"], [367, 1, 1, "", "TuningSampler"], [367, 1, 1, "", "TuningSamplerRegistry"]], "neural_compressor.strategy.utils.tuning_space": [[368, 1, 1, "", "TuningItem"], [368, 1, 1, "", "TuningSpace"], [368, 2, 1, "", "initial_tuning_cfg_with_quant_mode"], [368, 2, 1, "", "pattern_to_internal"], [368, 2, 1, "", "pattern_to_path"], [368, 2, 1, "", "quant_mode_from_pattern"]], "neural_compressor.strategy.utils.tuning_structs": [[369, 1, 1, "", "OpTuningConfig"]], "neural_compressor.strategy.utils.utility": [[370, 1, 1, "", "OrderedDefaultDict"], [370, 2, 1, "", "build_slave_faker_model"], [370, 2, 1, "", "extract_data_type"], [370, 2, 1, "", "get_adaptor_name"], [370, 2, 1, "", "reverted_data_type"]], "neural_compressor.template": [[371, 0, 0, "-", "api_doc_example"]], "neural_compressor.template.api_doc_example": [[371, 1, 1, "", "ExampleClass"], [371, 3, 1, "", "attribute1"], [371, 2, 1, "", "function1"], [371, 2, 1, "", "function2"], [371, 2, 1, "", "function3"], [371, 2, 1, "", "generator1"], [371, 4, 1, "", "module_debug_level1"]], "neural_compressor.template.api_doc_example.ExampleClass": [[371, 3, 1, "", "attr1"], [371, 3, 1, "", "attr2"], [371, 3, 1, "", "attr5"]], "neural_compressor.training": [[373, 1, 1, "", "CallBacks"], [373, 1, 1, "", "CompressionManager"], [373, 2, 1, "", "fit"], [373, 2, 1, "", "prepare_compression"]], "neural_compressor.utils": [[374, 0, 0, "-", "collect_layer_histogram"], [375, 0, 0, "-", "constant"], [376, 0, 0, "-", "create_obj_from_config"], [378, 0, 0, "-", "kl_divergence"], [379, 0, 0, "-", "load_huggingface"], [380, 0, 0, "-", "logger"], [381, 0, 0, "-", "neural_insights_utils"], [382, 0, 0, "-", "options"], [383, 0, 0, "-", "pytorch"], [384, 0, 0, "-", "utility"], [385, 0, 0, "-", "weights_details"]], "neural_compressor.utils.collect_layer_histogram": [[374, 1, 1, "", "LayerHistogramCollector"]], "neural_compressor.utils.create_obj_from_config": [[376, 2, 1, "", "create_dataloader"], [376, 2, 1, "", "create_dataset"], [376, 2, 1, "", "create_eval_func"], [376, 2, 1, "", "create_train_func"], [376, 2, 1, "", "get_algorithm"], [376, 2, 1, "", "get_func_from_config"], [376, 2, 1, "", "get_metrics"], [376, 2, 1, "", "get_postprocess"], [376, 2, 1, "", "get_preprocess"]], "neural_compressor.utils.kl_divergence": [[378, 1, 1, "", "KL_Divergence"]], "neural_compressor.utils.load_huggingface": [[379, 1, 1, "", "OptimizedModel"], [379, 2, 1, "", "save_for_huggingface_upstream"]], "neural_compressor.utils.logger": [[380, 1, 1, "", "Logger"], [380, 2, 1, "", "debug"], [380, 2, 1, "", "error"], [380, 2, 1, "", "fatal"], [380, 2, 1, "", "info"], [380, 2, 1, "", "log"], [380, 2, 1, "", "warn"], [380, 2, 1, "", "warning"]], "neural_compressor.utils.neural_insights_utils": [[381, 2, 1, "", "register_neural_insights_workload"], [381, 2, 1, "", "update_neural_insights_workload"], [381, 2, 1, "", "update_neural_insights_workload_accuracy_data"]], "neural_compressor.utils.options": [[382, 1, 1, "", "onnxrt"]], "neural_compressor.utils.pytorch": [[383, 2, 1, "", "is_int8_model"], [383, 2, 1, "", "load"]], "neural_compressor.utils.utility": [[384, 1, 1, "", "CaptureOutputToFile"], [384, 1, 1, "", "CpuInfo"], [384, 2, 1, "", "Dequantize"], [384, 2, 1, "", "DequantizeWeight"], [384, 1, 1, "", "DotDict"], [384, 1, 1, "", "GLOBAL_STATE"], [384, 1, 1, "", "LazyImport"], [384, 1, 1, "", "MODE"], [384, 1, 1, "", "OpEntry"], [384, 1, 1, "", "Statistics"], [384, 2, 1, "", "alias_param"], [384, 2, 1, "", "calculate_mse"], [384, 2, 1, "", "combine_histogram"], [384, 2, 1, "", "compare_objects"], [384, 2, 1, "", "compute_sparsity"], [384, 2, 1, "", "dump_class_attrs"], [384, 2, 1, "", "dump_data_to_local"], [384, 2, 1, "", "dump_elapsed_time"], [384, 2, 1, "", "dump_table"], [384, 2, 1, "", "dump_table_to_csv"], [384, 2, 1, "", "equal_dicts"], [384, 2, 1, "", "fault_tolerant_file"], [384, 2, 1, "", "get_all_fp32_data"], [384, 2, 1, "", "get_number_of_sockets"], [384, 2, 1, "", "get_op_list"], [384, 2, 1, "", "get_size"], [384, 2, 1, "", "get_tensor_histogram"], [384, 2, 1, "", "get_tensors_info"], [384, 2, 1, "", "get_tuning_history"], [384, 2, 1, "", "get_weights_details"], [384, 2, 1, "", "load_data_from_pkl"], [384, 2, 1, "", "mse_metric_gap"], [384, 2, 1, "", "print_op_list"], [384, 2, 1, "", "print_table"], [384, 2, 1, "", "recover"], [384, 2, 1, "", "set_random_seed"], [384, 2, 1, "", "set_resume_from"], [384, 2, 1, "", "set_tensorboard"], [384, 2, 1, "", "set_workspace"], [384, 2, 1, "", "show_memory_info"], [384, 2, 1, "", "singleton"], [384, 2, 1, "", "str2array"], [384, 2, 1, "", "time_limit"], [384, 2, 1, "", "version1_eq_version2"], [384, 2, 1, "", "version1_gt_version2"], [384, 2, 1, "", "version1_gte_version2"], [384, 2, 1, "", "version1_lt_version2"], [384, 2, 1, "", "version1_lte_version2"]], "neural_compressor.utils.weights_details": [[385, 1, 1, "", "WeightsDetails"], [385, 1, 1, "", "WeightsStatistics"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:function", "3": "py:attribute", "4": "py:data"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "function", "Python function"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "data", "Python data"]}, "titleterms": {"block_mask": 0, "neural_compressor": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386], "adaptor": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 394, 395], "modul": [1, 3, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 108, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 146, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 160, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 202, 203, 205, 206, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 219, 222, 223, 224, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 241, 242, 243, 246, 248, 249, 250, 252, 253, 254, 255, 256, 258, 259, 261, 262, 263, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 277, 278, 279, 280, 283, 284, 285, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 300, 301, 302, 303, 306, 307, 308, 309, 311, 312, 314, 315, 316, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 331, 333, 335, 336, 337, 338, 340, 341, 343, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 367, 368, 369, 370, 371, 373, 374, 376, 378, 379, 380, 381, 382, 383, 384, 385], "content": [1, 2, 3, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 108, 110, 111, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 306, 307, 308, 309, 311, 312, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 333, 335, 336, 337, 338, 340, 341, 343, 345, 346, 347, 348, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 367, 368, 369, 370, 371, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 393], "class": [1, 3, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 91, 92, 93, 94, 95, 97, 98, 99, 100, 102, 103, 104, 105, 108, 110, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 142, 143, 146, 147, 150, 151, 152, 153, 154, 156, 157, 160, 164, 165, 166, 167, 168, 169, 171, 172, 174, 175, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 217, 222, 223, 224, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 255, 256, 257, 258, 261, 264, 265, 266, 267, 268, 269, 271, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 288, 290, 291, 292, 293, 294, 295, 296, 297, 298, 300, 301, 302, 303, 306, 307, 308, 309, 311, 314, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 333, 335, 336, 337, 338, 340, 341, 343, 345, 347, 348, 350, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 367, 368, 369, 370, 371, 373, 374, 377, 378, 379, 380, 382, 384, 385, 394], "function": [1, 13, 16, 33, 39, 40, 62, 63, 65, 99, 100, 111, 113, 141, 142, 143, 147, 148, 149, 150, 152, 155, 157, 160, 162, 164, 166, 167, 168, 169, 170, 172, 181, 182, 190, 192, 196, 199, 200, 201, 204, 206, 207, 208, 209, 211, 213, 214, 216, 219, 226, 234, 236, 240, 243, 244, 245, 247, 248, 249, 252, 253, 254, 255, 258, 259, 261, 262, 263, 264, 265, 272, 279, 283, 288, 289, 290, 292, 297, 303, 307, 309, 311, 312, 314, 315, 316, 317, 318, 319, 323, 327, 329, 346, 351, 352, 356, 364, 368, 370, 371, 373, 376, 377, 379, 380, 381, 383, 384, 415], "subpackag": [2, 17, 82, 106, 107, 109, 159, 161, 176, 201, 220, 245, 257, 281, 299, 310, 360], "submodul": [2, 12, 17, 29, 46, 71, 82, 90, 96, 101, 106, 107, 109, 112, 125, 138, 144, 152, 158, 159, 161, 163, 173, 177, 184, 196, 200, 204, 211, 218, 221, 228, 240, 244, 247, 251, 257, 264, 270, 276, 282, 286, 299, 305, 310, 317, 321, 332, 334, 339, 342, 344, 349, 360, 366, 372, 377], "packag": [2, 29, 152, 184, 196, 200, 201, 204, 211, 228, 240, 244, 245, 247, 257, 264, 276, 281, 282, 299, 317, 321, 360, 377, 439, 441, 443, 444], "kera": 3, "keras_util": [4, 5, 6, 7, 8, 9, 10], "conv2d": 4, "dens": 5, "depthwise_conv2d": 6, "pool2d": 8, "quantiz": [9, 38, 293, 352, 390, 393, 406, 414, 420, 423, 426, 435, 446, 453, 454, 455, 458, 464], "separable_conv2d": 10, "mxnet": [11, 411, 425, 454, 460, 464], "mxnet_util": [12, 13], "util": [13, 39, 141, 149, 170, 255, 304, 305, 306, 307, 308, 309, 346, 351, 365, 366, 367, 368, 369, 370, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 397], "onnxrt": [14, 411, 425, 460], "ox_util": [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39], "calibr": [15, 16], "oper": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37], "activ": 18, "argmax": 19, "attent": 20, "binary_op": 21, "concat": 22, "conv": 23, "direct_q8": 24, "embed_layernorm": 25, "gather": 26, "gavgpool": 27, "gemm": 28, "lstm": 30, "matmul": [31, 458], "maxpool": 32, "op": 33, "pad": 34, "pool": 35, "resiz": 36, "split": 37, "pytorch": [40, 383, 411, 415, 425, 427, 454, 455, 459, 460, 464], "queri": [41, 394], "tensorflow": [42, 411, 415, 425, 427, 454, 455, 459, 460, 464], "tf_util": [43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141], "graph_convert": 43, "graph_converter_without_calib": 44, "graph_rewrit": [45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104], "bf16": [45, 46], "bf16_convert": [45, 142], "gener": [47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80], "convert_add_to_biasadd": 47, "convert_layout": 48, "convert_leakyrelu": 49, "convert_nan_to_random": 50, "convert_placeholder_to_const": 51, "dequantize_cast_optim": 52, "dilated_contract": 53, "dummy_biasadd": 54, "expanddims_optim": 55, "fetch_weight_from_reshap": 56, "fold_batch_norm": 57, "fold_const": 58, "fuse_biasadd_add": 59, "fuse_column_wise_mul": 60, "fuse_conv_with_math": 61, "fuse_decomposed_bn": 62, "fuse_decomposed_in": 63, "fuse_gelu": 64, "fuse_layer_norm": 65, "fuse_pad_with_conv": 66, "fuse_pad_with_fp32_conv": 67, "fuse_reshape_transpos": 68, "graph_cse_optim": 69, "grappler_pass": 70, "insert_print_nod": 72, "move_squeeze_after_relu": 73, "pre_optim": 74, "remove_training_nod": 75, "rename_batch_norm": 76, "split_shared_input": 77, "strip_equivalent_nod": 78, "strip_unused_nod": 79, "switch_optim": 80, "graph_bas": 81, "int8": [83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 417, 464], "freeze_fake_qu": 83, "freeze_valu": 84, "freeze_value_without_calib": 85, "fuse_conv_redundant_dequant": 86, "fuse_conv_requant": 87, "fuse_matmul_redundant_dequant": 88, "fuse_matmul_requant": 89, "meta_op_optim": 91, "post_hostconst_convert": 92, "post_quantized_op_cs": 93, "rnn_convert": 94, "scale_propag": 95, "onnx": [96, 97, 98, 99, 100, 396, 423, 427, 454, 464], "onnx_graph": 97, "onnx_nod": 98, "onnx_schema": 99, "tf2onnx_util": 100, "qdq": [101, 102, 103, 104, 118, 119, 120, 121, 122, 123, 124, 125, 126, 464], "insert_qdq_pattern": 102, "merge_duplicated_qdq": 103, "share_qdq_y_pattern": 104, "graph_util": 105, "quantize_graph": [107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133], "qat": [108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 464], "fake_quant": 108, "quantize_config": 110, "quantize_help": 111, "quantize_lay": [112, 113, 114, 115, 116], "optimize_lay": 113, "quantize_layer_add": 114, "quantize_layer_bas": 115, "quantize_layer_bn": 116, "quantize_wrapp": 117, "fuse_qdq_bn": 118, "fuse_qdq_concatv2": 119, "fuse_qdq_conv": 120, "fuse_qdq_deconv": 121, "fuse_qdq_in": 122, "fuse_qdq_matmul": 123, "fuse_qdq_pool": 124, "optimize_qdq": 126, "quantize_graph_bas": 127, "quantize_graph_bn": 128, "quantize_graph_concatv2": 129, "quantize_graph_conv": 130, "quantize_graph_for_intel_cpu": 131, "quantize_graph_matmul": 132, "quantize_graph_pool": 133, "quantize_graph_common": 134, "tf2onnx_convert": 135, "transform_graph": [136, 137, 138, 139, 140], "bias_correct": 136, "graph_transform_bas": 137, "insert_log": 139, "rerange_quantized_concat": 140, "torch_util": [142, 143, 144, 145, 146, 147, 148, 149, 216], "hawq_metr": 143, "model_wrapp": 145, "pattern_detector": 146, "smooth_quant": [147, 153], "symbolic_trac": 148, "algorithm": [150, 151, 152, 153, 154, 458, 461], "fast_bias_correct": 151, "weight_correct": 154, "benchmark": [155, 208, 400, 409, 426, 453], "compress": [156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 218, 219, 401], "callback": 156, "distil": [157, 158, 250, 413, 414, 426, 453, 464], "criterion": [157, 209], "pruner": [160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 279, 290], "criteria": [160, 451, 461], "model_slim": [162, 163, 164, 165], "auto_slim": 162, "pattern_analyz": 164, "weight_slim": 165, "pattern": [166, 282, 283, 284, 288, 451], "reg": 168, "schedul": [169, 292, 294, 451], "conf": [171, 172, 173, 174], "config": [171, 175, 402, 410, 411, 448], "dotdict": 172, "pythonic_config": 174, "contrib": [176, 177, 178, 179, 220, 221, 222, 223], "strategi": [177, 178, 179, 221, 222, 223, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 407, 457, 461], "sigopt": [178, 222, 457, 461], "tpe": [179, 223, 461], "data": [180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 416], "dataload": [180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 210, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 410, 411], "base_dataload": [180, 224], "default_dataload": [182, 226], "fetcher": [183, 227], "attribut": [184, 192, 201, 236, 245, 257, 281, 321, 371, 377, 388], "mxnet_dataload": [185, 229], "onnxrt_dataload": [186, 230], "pytorch_dataload": [187, 231], "sampler": [188, 232], "tensorflow_dataload": [189, 233], "dataset": [190, 191, 192, 193, 194, 195, 196, 197, 234, 235, 236, 237, 238, 239, 240, 241, 411, 421], "bert_dataset": [190, 234], "coco_dataset": [191, 235], "dummy_dataset": [193, 237], "dummy_dataset_v2": [194, 238], "imagenet_dataset": [195, 239], "style_transfer_dataset": [197, 241], "filter": [198, 199, 200, 242, 243, 244], "coco_filt": [198, 242], "transform": [202, 203, 204, 205, 206, 207, 246, 247, 248, 249, 421, 460], "coco_transform": 202, "imagenet_transform": [203, 246], "postprocess": [205, 215], "token": [206, 248], "experiment": [208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309], "common": [209, 210, 211, 212, 213, 214, 215, 216, 390, 418], "metric": [212, 258, 259, 260, 261, 262, 263, 264, 265, 311, 312, 313, 314, 315, 316, 317, 318, 421, 425], "model": [213, 320, 321, 322, 323, 324, 325, 326, 327, 328, 404, 417, 420, 423, 426, 428, 435, 451, 458, 464], "optim": [214, 436, 446, 449, 462], "compon": 217, "prune": [219, 280, 291, 426, 451, 453, 464], "export": [251, 252, 253, 254, 255, 417], "qlinear2qdq": 252, "tf2onnx": 253, "torch2onnx": 254, "graph_optim": 256, "bleu": [258, 311], "bleu_util": [259, 312], "coco_label_map": [260, 313], "coco_tool": [261, 314], "evaluate_squad": [262, 315], "f1": [263, 316], "mixed_precis": 266, "model_convers": 267, "na": [268, 269, 270, 271, 272, 273, 391, 453], "basic_na": 268, "dyna": 269, "nas_util": 272, "search_algorithm": 273, "pruner_legaci": [274, 275, 276, 277, 278, 279], "gradient_sensit": 274, "group_lasso": 275, "magnitud": 277, "pattern_lock": 278, "pruning_recip": [281, 282, 283, 284], "tile_pattern": 284, "pruning_v2": 285, "pytorch_prun": [286, 287, 288, 289, 290, 291, 292], "logger": [287, 380], "prune_util": 289, "auto_mixed_precis": [295, 354], "basic": [296, 355, 391, 461], "bayesian": [297, 356, 461], "exhaust": [298, 358, 461], "mse": [300, 361, 461], "mse_v2": [301, 362, 461], "random": [302, 363, 461], "constant": [304, 365, 375], "tuning_sampl": [306, 367], "tuning_spac": [307, 368], "tuning_struct": [308, 369], "mix_precis": 319, "base_model": 320, "keras_model": 322, "mxnet_model": 324, "nets_factori": 325, "onnx_model": 326, "tensorflow_model": 327, "torch_model": 328, "object": [329, 405, 448], "profil": [330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351], "parser": [331, 332, 333, 334, 335, 336, 337, 338, 339, 340], "factori": [331, 333, 338, 341, 343, 348], "onnx_pars": [333, 334, 335], "result": 337, "tensorflow_pars": [338, 339, 340], "onnxrt_profil": [343, 344, 345, 346], "tensorflow_profil": [348, 349, 350, 351], "auto": [353, 440, 446, 455, 458, 461], "conserv": [357, 461], "hawq_v2": [359, 461], "templat": [371, 372, 389], "api_doc_exampl": 371, "train": [373, 390, 408, 415, 426, 454], "collect_layer_histogram": 374, "create_obj_from_config": 376, "kl_diverg": 378, "load_huggingfac": 379, "neural_insights_util": 381, "option": [382, 415, 434], "weights_detail": 385, "version": 386, "intel": [387, 393, 422, 423, 426, 432, 440, 446, 464, 465], "neural": [387, 390, 391, 393, 422, 423, 426, 429, 433, 435, 440, 446, 451, 457, 462, 465], "compressor": [387, 390, 393, 422, 423, 426, 440, 446, 457, 465], "document": [387, 393, 398, 465], "section": [387, 465], "contributor": [388, 389], "coven": [388, 389], "code": [388, 389, 391, 426, 447, 462], "conduct": [388, 389], "our": [388, 458], "pledg": 388, "standard": 388, "respons": 388, "scope": [388, 451], "enforc": 388, "contribut": [389, 439, 443], "guidelin": 389, "pull": 389, "request": 389, "checklist": 389, "support": [389, 390, 391, 394, 409, 410, 411, 413, 414, 415, 417, 419, 422, 423, 425, 427, 428, 430, 431, 435, 436, 448, 449, 451, 453, 454, 458, 459, 460, 463], "fx": 390, "introduct": [390, 391, 394, 409, 410, 411, 413, 414, 415, 417, 419, 422, 425, 427, 428, 446, 448, 449, 451, 453, 454, 457, 458, 459, 460, 461, 463], "mode": [390, 464], "matrix": [390, 391, 394, 409, 410, 411, 413, 414, 415, 417, 419, 422, 425, 427, 428, 431, 448, 449, 451, 453, 454, 458, 459, 463], "get": [390, 391, 393, 394, 409, 410, 411, 413, 414, 415, 419, 420, 425, 427, 429, 440, 447, 448, 449, 451, 453, 454, 459, 463], "start": [390, 391, 393, 394, 409, 410, 411, 413, 414, 415, 419, 420, 425, 427, 429, 430, 434, 440, 448, 449, 451, 453, 454, 459, 463], "post": [390, 426, 454], "static": [390, 454], "dynam": [390, 391, 454], "awar": [390, 426, 454], "exampl": [390, 391, 394, 398, 409, 410, 411, 413, 414, 415, 416, 417, 426, 427, 428, 431, 435, 448, 449, 451, 454, 458, 459, 464], "note": [390, 456], "detail": 390, "problem": 390, "architectur": [391, 412, 422, 423], "search": [391, 446], "api": [391, 393, 394, 398, 399, 409, 410, 411, 413, 414, 415, 420, 421, 425, 427, 429, 433, 447, 448, 449, 451, 453, 462], "usag": [391, 435, 446, 459, 461], "1": [391, 415, 418, 421, 426, 446, 464], "python": [391, 393, 420, 425, 429, 433, 434, 441, 444, 453, 462], "yaml": [391, 410, 411, 415, 419, 463], "2": [391, 415, 418, 421, 426, 446, 464], "onli": 391, "advanc": [391, 462], "custom": [391, 425, 461], "secur": [392, 415], "polici": [392, 461], "report": 392, "vulner": 392, "instal": [393, 423, 430, 432, 439, 440, 443], "from": [393, 423, 426], "pypi": [393, 435], "select": [393, 440], "public": [393, 452], "event": [393, 452], "addit": 393, "research": 393, "collabor": 393, "work": [394, 454], "flow": [394, 454], "background": [394, 446], "ad": 394, "new": [394, 441, 444, 461], "backend": [394, 454], "capabl": 394, "implement": 394, "onnxrtadaptor": 394, "runtim": [396, 423, 427, 454, 464], "torch": [397, 464], "mix": [403, 426, 427, 455], "precis": [403, 426, 427, 455], "framework": [410, 411, 417, 419, 428, 453, 458], "file": [410, 411, 419, 463], "creat": 410, "user": [410, 411, 415, 421, 453, 462, 463], "specif": [410, 411], "design": [412, 461], "workflow": 412, "knowledg": [413, 464], "intermedi": 413, "layer": [413, 458], "self": 413, "distribut": [415, 435, 461], "infer": 415, "evalu": 415, "featur": [415, 419, 422, 435, 436, 440, 453, 454, 459, 463], "pure": 415, "configur": [415, 419, 450, 453, 457, 463], "defin": 415, "horovodrun": 415, "execut": 415, "list": [416, 460], "releas": [416, 441, 444, 456], "fp32": 417, "appendix": 417, "frequent": 418, "ask": 418, "question": 418, "build": [418, 425], "issu": [418, 456], "3": [418, 430, 446], "4": [418, 437, 446, 452], "quick": [420, 434], "sampl": 420, "jupyterlab": [420, 440], "extens": [420, 429, 439, 440, 443, 446, 447, 464], "valid": [420, 423, 458, 464], "incompat": [421, 456], "chang": [421, 445, 447, 456], "between": 421, "v1": 421, "face": 421, "built": [421, 423, 425], "infrastructur": 422, "linux": 423, "prerequisit": 423, "binari": 423, "sourc": 423, "ai": 423, "kit": 423, "window": 423, "system": [423, 450], "requir": [423, 439, 443], "hardwar": [423, 464], "environ": [423, 432], "cpu": [423, 432, 464], "base": [423, 462], "64": 423, "compat": 423, "processor": 423, "gpu": 423, "": [423, 447], "xe": 423, "multipl": [423, 448, 464], "vendor": 423, "through": [423, 464], "softwar": 423, "legal": 424, "inform": 424, "licens": 424, "citat": 424, "trademark": 424, "singl": [425, 448], "multi": 425, "migrat": 426, "x": 426, "orchestr": [426, 449], "coder": [429, 433, 435, 446, 462], "what": [429, 447], "do": 429, "we": 429, "offer": 429, "jupyt": [429, 430, 441, 444], "lab": [429, 430], "launcher": [429, 434], "contact": 429, "aw": 430, "amazon": 430, "sagemak": 430, "For": 430, "studio": 430, "notebook": 430, "instanc": 430, "guid": [430, 462], "bigdl": 431, "nano": 431, "platform": [432, 457], "best": [432, 440], "perform": [432, 457], "set": [432, 446], "mkl": 432, "openmp": 432, "jemalloc": 432, "numa": 432, "control": 432, "variabl": 432, "frequenc": 432, "govern": 432, "enabl": [433, 440, 446], "bench": 433, "superbench": 433, "argument": 434, "v0": 437, "highlight": 437, "other": 437, "changelog": [438, 442], "neural_compressor_ext_lab": [439, 441], "uninstal": [439, 443], "develop": [439, 443], "Or": 440, "let": 440, "u": 440, "help": 440, "you": 440, "pre": 440, "requisit": 440, "make": [441, 444, 447], "manual": [441, 444], "npm": [441, 444], "autom": [441, 444], "publish": [441, 444], "conda": [441, 444], "forg": [441, 444], "neural_compressor_ext_lab_alibaba": [443, 444], "log": 445, "unreleas": 445, "vscode": 446, "open": 446, "icon": 446, "5": 446, "welcom": 447, "your": 447, "v": 447, "folder": 447, "setup": 447, "up": 447, "run": 447, "straight": 447, "awai": 447, "explor": 447, "test": 447, "go": 447, "further": 447, "One": 449, "shot": 449, "network": 451, "type": 451, "sparsiti": 451, "decai": 451, "regular": 451, "spars": 451, "deploy": 451, "refer": [451, 454, 458], "full": 452, "60": 452, "2023": 452, "7": 452, "2022": 452, "34": 452, "2021": 452, "15": 452, "2018": 452, "2020": 452, "style": 453, "access": 453, "fundament": [454, 458], "scheme": 454, "ipex": 454, "approach": 454, "With": 454, "without": 454, "accuraci": [454, 461], "tune": [454, 458, 461], "specifi": 454, "rule": 454, "recip": 454, "devic": 454, "turn": 455, "off": 455, "dure": 455, "known": 456, "prepar": 457, "benefit": 457, "comparison": 457, "differ": 457, "smooth": 458, "quant": 458, "per": 458, "tensor": 458, "channel": 458, "limit": 458, "smoothquant": 458, "enhanc": 458, "wise": 458, "alpha": 458, "engin": 458, "tensorboard": 459, "space": 461, "exit": 461, "process": 461, "overview": 462, "zero": 462, "topic": 462, "11": 464, "0": 464, "13": 464, "ptq": 464, "9": 464}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"block_mask": [[0, "module-block_mask"]], "neural_compressor.adaptor.adaptor": [[1, "module-neural_compressor.adaptor.adaptor"]], "Module Contents": [[1, "module-contents"], [3, "module-contents"], [11, "module-contents"], [13, "module-contents"], [14, "module-contents"], [15, "module-contents"], [16, "module-contents"], [18, "module-contents"], [19, "module-contents"], [20, "module-contents"], [21, "module-contents"], [22, "module-contents"], [23, "module-contents"], [24, "module-contents"], [25, "module-contents"], [26, "module-contents"], [27, "module-contents"], [28, "module-contents"], [30, "module-contents"], [31, "module-contents"], [32, "module-contents"], [33, "module-contents"], [34, "module-contents"], [35, "module-contents"], [36, "module-contents"], [37, "module-contents"], [38, "module-contents"], [39, "module-contents"], [40, "module-contents"], [41, "module-contents"], [42, "module-contents"], [43, "module-contents"], [44, "module-contents"], [45, "module-contents"], [47, "module-contents"], [48, "module-contents"], [49, "module-contents"], [50, "module-contents"], [51, "module-contents"], [52, "module-contents"], [53, "module-contents"], [54, "module-contents"], [55, "module-contents"], [56, "module-contents"], [57, "module-contents"], [58, "module-contents"], [59, "module-contents"], [60, "module-contents"], [61, "module-contents"], [62, "module-contents"], [63, "module-contents"], [64, "module-contents"], [65, "module-contents"], [66, "module-contents"], [67, "module-contents"], [68, "module-contents"], [69, "module-contents"], [70, "module-contents"], [72, "module-contents"], [73, "module-contents"], [74, "module-contents"], [75, "module-contents"], [76, "module-contents"], [77, "module-contents"], [78, "module-contents"], [79, "module-contents"], [80, "module-contents"], [81, "module-contents"], [83, "module-contents"], [84, "module-contents"], [85, "module-contents"], [86, "module-contents"], [87, "module-contents"], [88, "module-contents"], [89, "module-contents"], [91, "module-contents"], [92, "module-contents"], [93, "module-contents"], [94, "module-contents"], [95, "module-contents"], [97, "module-contents"], [98, "module-contents"], [99, "module-contents"], [100, "module-contents"], [102, "module-contents"], [103, "module-contents"], [104, "module-contents"], [105, "module-contents"], [108, "module-contents"], [110, "module-contents"], [111, "module-contents"], [113, "module-contents"], [114, "module-contents"], [115, "module-contents"], [116, "module-contents"], [117, "module-contents"], [118, "module-contents"], [119, "module-contents"], [120, "module-contents"], [121, "module-contents"], [122, "module-contents"], [123, "module-contents"], [124, "module-contents"], [126, "module-contents"], [127, "module-contents"], [128, "module-contents"], [129, "module-contents"], [130, "module-contents"], [131, "module-contents"], [132, "module-contents"], [133, "module-contents"], [134, "module-contents"], [135, "module-contents"], [136, "module-contents"], [137, "module-contents"], [139, "module-contents"], [140, "module-contents"], [141, "module-contents"], [142, "module-contents"], [143, "module-contents"], [146, "module-contents"], [147, "module-contents"], [148, "module-contents"], [149, "module-contents"], [150, "module-contents"], [151, "module-contents"], [153, "module-contents"], [154, "module-contents"], [155, "module-contents"], [156, "module-contents"], [157, "module-contents"], [160, "module-contents"], [162, "module-contents"], [164, "module-contents"], [165, "module-contents"], [166, "module-contents"], [167, "module-contents"], [168, "module-contents"], [169, "module-contents"], [170, "module-contents"], [171, "module-contents"], [172, "module-contents"], [174, "module-contents"], [175, "module-contents"], [178, "module-contents"], [179, "module-contents"], [180, "module-contents"], [181, "module-contents"], [182, "module-contents"], [183, "module-contents"], [185, "module-contents"], [186, "module-contents"], [187, "module-contents"], [188, "module-contents"], [189, "module-contents"], [190, "module-contents"], [191, "module-contents"], [192, "module-contents"], [193, "module-contents"], [194, "module-contents"], [195, "module-contents"], [197, "module-contents"], [198, "module-contents"], [199, "module-contents"], [202, "module-contents"], [203, "module-contents"], [205, "module-contents"], [206, "module-contents"], [207, "module-contents"], [208, "module-contents"], [209, "module-contents"], [210, "module-contents"], [212, "module-contents"], [213, "module-contents"], [214, "module-contents"], [215, "module-contents"], [216, "module-contents"], [217, "module-contents"], [219, "module-contents"], [222, "module-contents"], [223, "module-contents"], [224, "module-contents"], [226, "module-contents"], [227, "module-contents"], [229, "module-contents"], [230, "module-contents"], [231, "module-contents"], [232, "module-contents"], [233, "module-contents"], [234, "module-contents"], [235, "module-contents"], [236, "module-contents"], [237, "module-contents"], [238, "module-contents"], [239, "module-contents"], [241, "module-contents"], [242, "module-contents"], [243, "module-contents"], [246, "module-contents"], [248, "module-contents"], [249, "module-contents"], [250, "module-contents"], [252, "module-contents"], [253, "module-contents"], [254, "module-contents"], [255, "module-contents"], [256, "module-contents"], [258, "module-contents"], [259, "module-contents"], [261, "module-contents"], [262, "module-contents"], [263, "module-contents"], [265, "module-contents"], [266, "module-contents"], [267, "module-contents"], [268, "module-contents"], [269, "module-contents"], [271, "module-contents"], [272, "module-contents"], [273, "module-contents"], [274, "module-contents"], [275, "module-contents"], [277, "module-contents"], [278, "module-contents"], [279, "module-contents"], [280, "module-contents"], [283, "module-contents"], [284, "module-contents"], [285, "module-contents"], [288, "module-contents"], [289, "module-contents"], [290, "module-contents"], [291, "module-contents"], [292, "module-contents"], [293, "module-contents"], [294, "module-contents"], [295, "module-contents"], [296, "module-contents"], [297, "module-contents"], [298, "module-contents"], [300, "module-contents"], [301, "module-contents"], [302, "module-contents"], [303, "module-contents"], [306, "module-contents"], [307, "module-contents"], [308, "module-contents"], [309, "module-contents"], [311, "module-contents"], [312, "module-contents"], [314, "module-contents"], [315, "module-contents"], [316, "module-contents"], [318, "module-contents"], [319, "module-contents"], [320, "module-contents"], [322, "module-contents"], [323, "module-contents"], [324, "module-contents"], [325, "module-contents"], [326, "module-contents"], [327, "module-contents"], [328, "module-contents"], [329, "module-contents"], [331, "module-contents"], [333, "module-contents"], [335, "module-contents"], [336, "module-contents"], [337, "module-contents"], [338, "module-contents"], [340, "module-contents"], [341, "module-contents"], [343, "module-contents"], [345, "module-contents"], [346, "module-contents"], [347, "module-contents"], [348, "module-contents"], [350, "module-contents"], [351, "module-contents"], [352, "module-contents"], [353, "module-contents"], [354, "module-contents"], [355, "module-contents"], [356, "module-contents"], [357, "module-contents"], [358, "module-contents"], [359, "module-contents"], [361, "module-contents"], [362, "module-contents"], [363, "module-contents"], [364, "module-contents"], [367, "module-contents"], [368, "module-contents"], [369, "module-contents"], [370, "module-contents"], [371, "module-contents"], [373, "module-contents"], [374, "module-contents"], [376, "module-contents"], [378, "module-contents"], [379, "module-contents"], [380, "module-contents"], [381, "module-contents"], [382, "module-contents"], [383, "module-contents"], [384, "module-contents"], [385, "module-contents"]], "Classes": [[1, "classes"], [3, "classes"], [11, "classes"], [13, "classes"], [14, "classes"], [15, "classes"], [16, "classes"], [18, "classes"], [19, "classes"], [20, "classes"], [21, "classes"], [22, "classes"], [23, "classes"], [24, "classes"], [25, "classes"], [26, "classes"], [27, "classes"], [28, "classes"], [30, "classes"], [31, "classes"], [32, "classes"], [33, "classes"], [34, "classes"], [35, "classes"], [36, "classes"], [37, "classes"], [38, "classes"], [39, "classes"], [40, "classes"], [41, "classes"], [42, "classes"], [43, "classes"], [44, "classes"], [45, "classes"], [47, "classes"], [48, "classes"], [49, "classes"], [50, "classes"], [51, "classes"], [52, "classes"], [53, "classes"], [54, "classes"], [55, "classes"], [56, "classes"], [57, "classes"], [58, "classes"], [59, "classes"], [60, "classes"], [61, "classes"], [62, "classes"], [63, "classes"], [64, "classes"], [65, "classes"], [66, "classes"], [67, "classes"], [68, "classes"], [69, "classes"], [70, "classes"], [72, "classes"], [73, "classes"], [74, "classes"], [75, "classes"], [76, "classes"], [77, "classes"], [78, "classes"], [79, "classes"], [80, "classes"], [81, "classes"], [83, "classes"], [84, "classes"], [85, "classes"], [86, "classes"], [87, "classes"], [88, "classes"], [89, "classes"], [91, "classes"], [92, "classes"], [93, "classes"], [94, "classes"], [95, "classes"], [97, "classes"], [98, "classes"], [99, "classes"], [100, "classes"], [102, "classes"], [103, "classes"], [104, "classes"], [105, "classes"], [108, "classes"], [110, "classes"], [114, "classes"], [115, "classes"], [116, "classes"], [117, "classes"], [118, "classes"], [119, "classes"], [120, "classes"], [121, "classes"], [122, "classes"], [123, "classes"], [124, "classes"], [126, "classes"], [127, "classes"], [128, "classes"], [129, "classes"], [130, "classes"], [131, "classes"], [132, "classes"], [133, "classes"], [134, "classes"], [135, "classes"], [136, "classes"], [137, "classes"], [139, "classes"], [140, "classes"], [142, "classes"], [143, "classes"], [146, "classes"], [147, "classes"], [150, "classes"], [151, "classes"], [152, "classes"], [153, "classes"], [154, "classes"], [156, "classes"], [157, "classes"], [160, "classes"], [164, "classes"], [165, "classes"], [166, "classes"], [167, "classes"], [168, "classes"], [169, "classes"], [171, "classes"], [172, "classes"], [174, "classes"], [175, "classes"], [178, "classes"], [179, "classes"], [180, "classes"], [181, "classes"], [182, "classes"], [183, "classes"], [184, "classes"], [185, "classes"], [186, "classes"], [187, "classes"], [188, "classes"], [189, "classes"], [190, "classes"], [191, "classes"], [192, "classes"], [193, "classes"], [194, "classes"], [195, "classes"], [196, "classes"], [197, "classes"], [198, "classes"], [199, "classes"], [200, "classes"], [201, "classes"], [202, "classes"], [203, "classes"], [204, "classes"], [205, "classes"], [206, "classes"], [207, "classes"], [208, "classes"], [209, "classes"], [210, "classes"], [211, "classes"], [212, "classes"], [213, "classes"], [214, "classes"], [215, "classes"], [217, "classes"], [222, "classes"], [223, "classes"], [224, "classes"], [226, "classes"], [227, "classes"], [229, "classes"], [230, "classes"], [231, "classes"], [232, "classes"], [233, "classes"], [234, "classes"], [235, "classes"], [236, "classes"], [237, "classes"], [238, "classes"], [239, "classes"], [240, "classes"], [241, "classes"], [242, "classes"], [243, "classes"], [244, "classes"], [245, "classes"], [246, "classes"], [247, "classes"], [248, "classes"], [249, "classes"], [250, "classes"], [255, "classes"], [256, "classes"], [257, "classes"], [258, "classes"], [261, "classes"], [264, "classes"], [265, "classes"], [266, "classes"], [267, "classes"], [268, "classes"], [269, "classes"], [271, "classes"], [273, "classes"], [274, "classes"], [275, "classes"], [277, "classes"], [278, "classes"], [279, "classes"], [280, "classes"], [281, "classes"], [282, "classes"], [283, "classes"], [284, "classes"], [285, "classes"], [288, "classes"], [290, "classes"], [291, "classes"], [292, "classes"], [293, "classes"], [294, "classes"], [295, "classes"], [296, "classes"], [297, "classes"], [298, "classes"], [300, "classes"], [301, "classes"], [302, "classes"], [303, "classes"], [306, "classes"], [307, "classes"], [308, "classes"], [309, "classes"], [311, "classes"], [314, "classes"], [317, "classes"], [318, "classes"], [320, "classes"], [321, "classes"], [322, "classes"], [323, "classes"], [324, "classes"], [325, "classes"], [326, "classes"], [327, "classes"], [328, "classes"], [329, "classes"], [331, "classes"], [333, "classes"], [335, "classes"], [336, "classes"], [337, "classes"], [338, "classes"], [340, "classes"], [341, "classes"], [343, "classes"], [345, "classes"], [347, "classes"], [348, "classes"], [350, "classes"], [353, "classes"], [354, "classes"], [355, "classes"], [356, "classes"], [357, "classes"], [358, "classes"], [359, "classes"], [361, "classes"], [362, "classes"], [363, "classes"], [364, "classes"], [367, "classes"], [368, "classes"], [369, "classes"], [370, "classes"], [371, "classes"], [373, "classes"], [374, "classes"], [377, "classes"], [378, "classes"], [379, "classes"], [380, "classes"], [382, "classes"], [384, "classes"], [385, "classes"]], "Functions": [[1, "functions"], [13, "functions"], [16, "functions"], [33, "functions"], [39, "functions"], [40, "functions"], [62, "functions"], [63, "functions"], [65, "functions"], [99, "functions"], [100, "functions"], [111, "functions"], [113, "functions"], [141, "functions"], [142, "functions"], [143, "functions"], [147, "functions"], [148, "functions"], [149, "functions"], [150, "functions"], [152, "functions"], [155, "functions"], [157, "functions"], [160, "functions"], [162, "functions"], [164, "functions"], [166, "functions"], [167, "functions"], [168, "functions"], [169, "functions"], [170, "functions"], [172, "functions"], [181, "functions"], [182, "functions"], [190, "functions"], [192, "functions"], [196, "functions"], [199, "functions"], [200, "functions"], [201, "functions"], [204, "functions"], [206, "functions"], [207, "functions"], [208, "functions"], [209, "functions"], [211, "functions"], [213, "functions"], [214, "functions"], [216, "functions"], [219, "functions"], [226, "functions"], [234, "functions"], [236, "functions"], [240, "functions"], [243, "functions"], [244, "functions"], [245, "functions"], [247, "functions"], [248, "functions"], [249, "functions"], [252, "functions"], [253, "functions"], [254, "functions"], [255, "functions"], [258, "functions"], [259, "functions"], [261, "functions"], [262, "functions"], [263, "functions"], [264, "functions"], [265, "functions"], [272, "functions"], [279, "functions"], [283, "functions"], [288, "functions"], [289, "functions"], [290, "functions"], [292, "functions"], [297, "functions"], [303, "functions"], [307, "functions"], [309, "functions"], [311, "functions"], [312, "functions"], [314, "functions"], [315, "functions"], [316, "functions"], [317, "functions"], [318, "functions"], [319, "functions"], [323, "functions"], [327, "functions"], [329, "functions"], [346, "functions"], [351, "functions"], [352, "functions"], [356, "functions"], [364, "functions"], [368, "functions"], [370, "functions"], [371, "functions"], [373, "functions"], [376, "functions"], [377, "functions"], [379, "functions"], [380, "functions"], [381, "functions"], [383, "functions"], [384, "functions"]], "neural_compressor.adaptor": [[2, "module-neural_compressor.adaptor"]], "Subpackages": [[2, "subpackages"], [17, "subpackages"], [82, "subpackages"], [106, "subpackages"], [107, "subpackages"], [109, "subpackages"], [159, "subpackages"], [161, "subpackages"], [176, "subpackages"], [201, "subpackages"], [220, "subpackages"], [245, "subpackages"], [257, "subpackages"], [281, "subpackages"], [299, "subpackages"], [310, "subpackages"], [360, "subpackages"]], "Submodules": [[2, "submodules"], [12, "submodules"], [17, "submodules"], [29, "submodules"], [46, "submodules"], [71, "submodules"], [82, "submodules"], [90, "submodules"], [96, "submodules"], [101, "submodules"], [106, "submodules"], [107, "submodules"], [109, "submodules"], [112, "submodules"], [125, "submodules"], [138, "submodules"], [144, "submodules"], [152, "submodules"], [158, "submodules"], [159, "submodules"], [161, "submodules"], [163, "submodules"], [173, "submodules"], [177, "submodules"], [184, "submodules"], [196, "submodules"], [200, "submodules"], [204, "submodules"], [211, "submodules"], [218, "submodules"], [221, "submodules"], [228, "submodules"], [240, "submodules"], [244, "submodules"], [247, "submodules"], [251, "submodules"], [257, "submodules"], [264, "submodules"], [270, "submodules"], [276, "submodules"], [282, "submodules"], [286, "submodules"], [299, "submodules"], [305, "submodules"], [310, "submodules"], [317, "submodules"], [321, "submodules"], [332, "submodules"], [334, "submodules"], [339, "submodules"], [342, "submodules"], [344, "submodules"], [349, "submodules"], [360, "submodules"], [366, "submodules"], [372, "submodules"], [377, "submodules"]], "Package Contents": [[2, "package-contents"], [29, "package-contents"], [152, "package-contents"], [184, "package-contents"], [196, "package-contents"], [200, "package-contents"], [201, "package-contents"], [204, "package-contents"], [211, "package-contents"], [228, "package-contents"], [240, "package-contents"], [244, "package-contents"], [245, "package-contents"], [247, "package-contents"], [257, "package-contents"], [264, "package-contents"], [276, "package-contents"], [281, "package-contents"], [282, "package-contents"], [299, "package-contents"], [317, "package-contents"], [321, "package-contents"], [360, "package-contents"], [377, "package-contents"]], "neural_compressor.adaptor.keras": [[3, "module-neural_compressor.adaptor.keras"]], "neural_compressor.adaptor.keras_utils.conv2d": [[4, "module-neural_compressor.adaptor.keras_utils.conv2d"]], "neural_compressor.adaptor.keras_utils.dense": [[5, "module-neural_compressor.adaptor.keras_utils.dense"]], "neural_compressor.adaptor.keras_utils.depthwise_conv2d": [[6, "module-neural_compressor.adaptor.keras_utils.depthwise_conv2d"]], "neural_compressor.adaptor.keras_utils": [[7, "module-neural_compressor.adaptor.keras_utils"]], "neural_compressor.adaptor.keras_utils.pool2d": [[8, "module-neural_compressor.adaptor.keras_utils.pool2d"]], "neural_compressor.adaptor.keras_utils.quantizer": [[9, "module-neural_compressor.adaptor.keras_utils.quantizer"]], "neural_compressor.adaptor.keras_utils.separable_conv2d": [[10, "module-neural_compressor.adaptor.keras_utils.separable_conv2d"]], "neural_compressor.adaptor.mxnet": [[11, "module-neural_compressor.adaptor.mxnet"]], "neural_compressor.adaptor.mxnet_utils": [[12, "module-neural_compressor.adaptor.mxnet_utils"]], "neural_compressor.adaptor.mxnet_utils.util": [[13, "module-neural_compressor.adaptor.mxnet_utils.util"]], "neural_compressor.adaptor.onnxrt": [[14, "module-neural_compressor.adaptor.onnxrt"]], "neural_compressor.adaptor.ox_utils.calibration": [[15, "module-neural_compressor.adaptor.ox_utils.calibration"]], "neural_compressor.adaptor.ox_utils.calibrator": [[16, "module-neural_compressor.adaptor.ox_utils.calibrator"]], "neural_compressor.adaptor.ox_utils": [[17, "module-neural_compressor.adaptor.ox_utils"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[18, "module-neural_compressor.adaptor.ox_utils.operators.activation"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[19, "module-neural_compressor.adaptor.ox_utils.operators.argmax"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[20, "module-neural_compressor.adaptor.ox_utils.operators.attention"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[21, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[22, "module-neural_compressor.adaptor.ox_utils.operators.concat"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[23, "module-neural_compressor.adaptor.ox_utils.operators.conv"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[24, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[25, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[26, "module-neural_compressor.adaptor.ox_utils.operators.gather"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[27, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[28, "module-neural_compressor.adaptor.ox_utils.operators.gemm"]], "neural_compressor.adaptor.ox_utils.operators": [[29, "module-neural_compressor.adaptor.ox_utils.operators"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[30, "module-neural_compressor.adaptor.ox_utils.operators.lstm"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[31, "module-neural_compressor.adaptor.ox_utils.operators.matmul"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[32, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[33, "module-neural_compressor.adaptor.ox_utils.operators.ops"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[34, "module-neural_compressor.adaptor.ox_utils.operators.pad"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[35, "module-neural_compressor.adaptor.ox_utils.operators.pooling"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[36, "module-neural_compressor.adaptor.ox_utils.operators.resize"]], "neural_compressor.adaptor.ox_utils.operators.split": [[37, "module-neural_compressor.adaptor.ox_utils.operators.split"]], "neural_compressor.adaptor.ox_utils.quantizer": [[38, "module-neural_compressor.adaptor.ox_utils.quantizer"]], "neural_compressor.adaptor.ox_utils.util": [[39, "module-neural_compressor.adaptor.ox_utils.util"]], "neural_compressor.adaptor.pytorch": [[40, "module-neural_compressor.adaptor.pytorch"]], "neural_compressor.adaptor.query": [[41, "module-neural_compressor.adaptor.query"]], "neural_compressor.adaptor.tensorflow": [[42, "module-neural_compressor.adaptor.tensorflow"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[43, "module-neural_compressor.adaptor.tf_utils.graph_converter"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[44, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[45, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[46, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[47, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[48, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[49, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "neural_compressor.adaptor.tf_utils.graph_util": [[105, "module-neural_compressor.adaptor.tf_utils.graph_util"]], "neural_compressor.adaptor.tf_utils": [[106, "module-neural_compressor.adaptor.tf_utils"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[107, "module-neural_compressor.adaptor.tf_utils.quantize_graph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[108, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[109, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[110, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[111, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[112, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[134, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[135, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[136, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[137, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[138, "module-neural_compressor.adaptor.tf_utils.transform_graph"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[139, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[140, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"]], "neural_compressor.adaptor.tf_utils.util": [[141, "module-neural_compressor.adaptor.tf_utils.util"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[142, "module-neural_compressor.adaptor.torch_utils.bf16_convert"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[143, "module-neural_compressor.adaptor.torch_utils.hawq_metric"]], "neural_compressor.adaptor.torch_utils": [[144, "module-neural_compressor.adaptor.torch_utils"]], "neural_compressor.adaptor.torch_utils.model_wrapper": [[145, "module-neural_compressor.adaptor.torch_utils.model_wrapper"]], "neural_compressor.adaptor.torch_utils.pattern_detector": [[146, "module-neural_compressor.adaptor.torch_utils.pattern_detector"]], "neural_compressor.adaptor.torch_utils.smooth_quant": [[147, "module-neural_compressor.adaptor.torch_utils.smooth_quant"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[148, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"]], "neural_compressor.adaptor.torch_utils.util": [[149, "module-neural_compressor.adaptor.torch_utils.util"]], "neural_compressor.algorithm.algorithm": [[150, "module-neural_compressor.algorithm.algorithm"]], "neural_compressor.algorithm.fast_bias_correction": [[151, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm": [[152, "module-neural_compressor.algorithm"]], "neural_compressor.algorithm.smooth_quant": [[153, "module-neural_compressor.algorithm.smooth_quant"]], "neural_compressor.algorithm.weight_correction": [[154, "module-neural_compressor.algorithm.weight_correction"]], "neural_compressor.benchmark": [[155, "module-neural_compressor.benchmark"]], "neural_compressor.compression.callbacks": [[156, "module-neural_compressor.compression.callbacks"]], "neural_compressor.compression.distillation.criterions": [[157, "module-neural_compressor.compression.distillation.criterions"]], "neural_compressor.compression.distillation": [[158, "module-neural_compressor.compression.distillation"]], "neural_compressor.compression": [[159, "module-neural_compressor.compression"]], "neural_compressor.compression.pruner.criteria": [[160, "module-neural_compressor.compression.pruner.criteria"]], "neural_compressor.compression.pruner": [[161, "module-neural_compressor.compression.pruner"]], "neural_compressor.compression.pruner.model_slim.auto_slim": [[162, "module-neural_compressor.compression.pruner.model_slim.auto_slim"]], "neural_compressor.compression.pruner.model_slim": [[163, "module-neural_compressor.compression.pruner.model_slim"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer": [[164, "module-neural_compressor.compression.pruner.model_slim.pattern_analyzer"]], "neural_compressor.compression.pruner.model_slim.weight_slim": [[165, "module-neural_compressor.compression.pruner.model_slim.weight_slim"]], "neural_compressor.compression.pruner.patterns": [[166, "module-neural_compressor.compression.pruner.patterns"]], "neural_compressor.compression.pruner.pruners": [[167, "module-neural_compressor.compression.pruner.pruners"]], "neural_compressor.compression.pruner.regs": [[168, "module-neural_compressor.compression.pruner.regs"]], "neural_compressor.compression.pruner.schedulers": [[169, "module-neural_compressor.compression.pruner.schedulers"]], "neural_compressor.compression.pruner.utils": [[170, "module-neural_compressor.compression.pruner.utils"]], "neural_compressor.conf.config": [[171, "module-neural_compressor.conf.config"]], "neural_compressor.conf.dotdict": [[172, "module-neural_compressor.conf.dotdict"]], "neural_compressor.conf": [[173, "module-neural_compressor.conf"]], "neural_compressor.conf.pythonic_config": [[174, "module-neural_compressor.conf.pythonic_config"]], "neural_compressor.config": [[175, "module-neural_compressor.config"]], "neural_compressor.contrib": [[176, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[177, "module-neural_compressor.contrib.strategy"]], "neural_compressor.contrib.strategy.sigopt": [[178, "module-neural_compressor.contrib.strategy.sigopt"]], "neural_compressor.contrib.strategy.tpe": [[179, "module-neural_compressor.contrib.strategy.tpe"]], "neural_compressor.data.dataloaders.base_dataloader": [[180, "module-neural_compressor.data.dataloaders.base_dataloader"]], "neural_compressor.data.dataloaders.dataloader": [[181, "module-neural_compressor.data.dataloaders.dataloader"]], "neural_compressor.data.dataloaders.default_dataloader": [[182, "module-neural_compressor.data.dataloaders.default_dataloader"]], "neural_compressor.data.dataloaders.fetcher": [[183, "module-neural_compressor.data.dataloaders.fetcher"]], "neural_compressor.data.dataloaders": [[184, "module-neural_compressor.data.dataloaders"]], "Attributes": [[184, "attributes"], [192, "attributes"], [201, "attributes"], [236, "attributes"], [245, "attributes"], [257, "attributes"], [281, "attributes"], [321, "attributes"], [371, "attributes"], [377, "attributes"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[185, "module-neural_compressor.data.dataloaders.mxnet_dataloader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[186, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[187, "module-neural_compressor.data.dataloaders.pytorch_dataloader"]], "neural_compressor.data.dataloaders.sampler": [[188, "module-neural_compressor.data.dataloaders.sampler"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[189, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"]], "neural_compressor.data.datasets.bert_dataset": [[190, "module-neural_compressor.data.datasets.bert_dataset"]], "neural_compressor.data.datasets.coco_dataset": [[191, "module-neural_compressor.data.datasets.coco_dataset"]], "neural_compressor.data.datasets.dataset": [[192, "module-neural_compressor.data.datasets.dataset"]], "neural_compressor.data.datasets.dummy_dataset": [[193, "module-neural_compressor.data.datasets.dummy_dataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[194, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "neural_compressor.data.datasets.imagenet_dataset": [[195, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[196, "module-neural_compressor.data.datasets"]], "neural_compressor.data.datasets.style_transfer_dataset": [[197, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "neural_compressor.data.filters.coco_filter": [[198, "module-neural_compressor.data.filters.coco_filter"]], "neural_compressor.data.filters.filter": [[199, "module-neural_compressor.data.filters.filter"]], "neural_compressor.data.filters": [[200, "module-neural_compressor.data.filters"]], "neural_compressor.data": [[201, "module-neural_compressor.data"]], "neural_compressor.data.transforms.coco_transform": [[202, "module-neural_compressor.data.transforms.coco_transform"]], "neural_compressor.data.transforms.imagenet_transform": [[203, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[204, "module-neural_compressor.data.transforms"]], "neural_compressor.data.transforms.postprocess": [[205, "module-neural_compressor.data.transforms.postprocess"]], "neural_compressor.data.transforms.tokenization": [[206, "module-neural_compressor.data.transforms.tokenization"]], "neural_compressor.data.transforms.transform": [[207, "module-neural_compressor.data.transforms.transform"]], "neural_compressor.experimental.benchmark": [[208, "module-neural_compressor.experimental.benchmark"]], "neural_compressor.experimental.common.criterion": [[209, "module-neural_compressor.experimental.common.criterion"]], "neural_compressor.experimental.common.dataloader": [[210, "module-neural_compressor.experimental.common.dataloader"]], "neural_compressor.experimental.common": [[211, "module-neural_compressor.experimental.common"]], "neural_compressor.experimental.common.metric": [[212, "module-neural_compressor.experimental.common.metric"]], "neural_compressor.experimental.common.model": [[213, "module-neural_compressor.experimental.common.model"]], "neural_compressor.experimental.common.optimizer": [[214, "module-neural_compressor.experimental.common.optimizer"]], "neural_compressor.experimental.common.postprocess": [[215, "module-neural_compressor.experimental.common.postprocess"]], "neural_compressor.experimental.common.torch_utils": [[216, "module-neural_compressor.experimental.common.torch_utils"]], "neural_compressor.experimental.component": [[217, "module-neural_compressor.experimental.component"]], "neural_compressor.experimental.compression": [[218, "module-neural_compressor.experimental.compression"]], "neural_compressor.experimental.compression.pruning": [[219, "module-neural_compressor.experimental.compression.pruning"]], "neural_compressor.experimental.contrib": [[220, "module-neural_compressor.experimental.contrib"]], "neural_compressor.experimental.contrib.strategy": [[221, "module-neural_compressor.experimental.contrib.strategy"]], "neural_compressor.experimental.contrib.strategy.sigopt": [[222, "module-neural_compressor.experimental.contrib.strategy.sigopt"]], "neural_compressor.experimental.contrib.strategy.tpe": [[223, "module-neural_compressor.experimental.contrib.strategy.tpe"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[224, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[225, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[226, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[227, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[228, "module-neural_compressor.experimental.data.dataloaders"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[229, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[230, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[231, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[232, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[233, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[234, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[235, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "neural_compressor.experimental.data.datasets.dataset": [[236, "module-neural_compressor.experimental.data.datasets.dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[237, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[238, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[239, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "neural_compressor.experimental.data.datasets": [[240, "module-neural_compressor.experimental.data.datasets"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[241, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "neural_compressor.experimental.data.filters.coco_filter": [[242, "module-neural_compressor.experimental.data.filters.coco_filter"]], "neural_compressor.experimental.data.filters.filter": [[243, "module-neural_compressor.experimental.data.filters.filter"]], "neural_compressor.experimental.data.filters": [[244, "module-neural_compressor.experimental.data.filters"]], "neural_compressor.experimental.data": [[245, "module-neural_compressor.experimental.data"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[246, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "neural_compressor.experimental.data.transforms": [[247, "module-neural_compressor.experimental.data.transforms"]], "neural_compressor.experimental.data.transforms.tokenization": [[248, "module-neural_compressor.experimental.data.transforms.tokenization"]], "neural_compressor.experimental.data.transforms.transform": [[249, "module-neural_compressor.experimental.data.transforms.transform"]], "neural_compressor.experimental.distillation": [[250, "module-neural_compressor.experimental.distillation"]], "neural_compressor.experimental.export": [[251, "module-neural_compressor.experimental.export"]], "neural_compressor.experimental.export.qlinear2qdq": [[252, "module-neural_compressor.experimental.export.qlinear2qdq"]], "neural_compressor.experimental.export.tf2onnx": [[253, "module-neural_compressor.experimental.export.tf2onnx"]], "neural_compressor.experimental.export.torch2onnx": [[254, "module-neural_compressor.experimental.export.torch2onnx"]], "neural_compressor.experimental.export.utils": [[255, "module-neural_compressor.experimental.export.utils"]], "neural_compressor.experimental.graph_optimization": [[256, "module-neural_compressor.experimental.graph_optimization"]], "neural_compressor.experimental": [[257, "module-neural_compressor.experimental"]], "neural_compressor.experimental.metric.bleu": [[258, "module-neural_compressor.experimental.metric.bleu"]], "neural_compressor.experimental.metric.bleu_util": [[259, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[260, "module-neural_compressor.experimental.metric.coco_label_map"]], "neural_compressor.experimental.metric.coco_tools": [[261, "module-neural_compressor.experimental.metric.coco_tools"]], "neural_compressor.experimental.metric.evaluate_squad": [[262, "module-neural_compressor.experimental.metric.evaluate_squad"]], "neural_compressor.experimental.metric.f1": [[263, "module-neural_compressor.experimental.metric.f1"]], "neural_compressor.experimental.metric": [[264, "module-neural_compressor.experimental.metric"]], "neural_compressor.experimental.metric.metric": [[265, "module-neural_compressor.experimental.metric.metric"]], "neural_compressor.experimental.mixed_precision": [[266, "module-neural_compressor.experimental.mixed_precision"]], "neural_compressor.experimental.model_conversion": [[267, "module-neural_compressor.experimental.model_conversion"]], "neural_compressor.experimental.nas.basic_nas": [[268, "module-neural_compressor.experimental.nas.basic_nas"]], "neural_compressor.experimental.nas.dynas": [[269, "module-neural_compressor.experimental.nas.dynas"]], "neural_compressor.experimental.nas": [[270, "module-neural_compressor.experimental.nas"]], "neural_compressor.experimental.nas.nas": [[271, "module-neural_compressor.experimental.nas.nas"]], "neural_compressor.experimental.nas.nas_utils": [[272, "module-neural_compressor.experimental.nas.nas_utils"]], "neural_compressor.experimental.nas.search_algorithms": [[273, "module-neural_compressor.experimental.nas.search_algorithms"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[274, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[275, "module-neural_compressor.experimental.pruner_legacy.group_lasso"]], "neural_compressor.experimental.pruner_legacy": [[276, "module-neural_compressor.experimental.pruner_legacy"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[277, "module-neural_compressor.experimental.pruner_legacy.magnitude"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[278, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"]], "neural_compressor.experimental.pruner_legacy.pruner": [[279, "module-neural_compressor.experimental.pruner_legacy.pruner"]], "neural_compressor.experimental.pruning": [[280, "module-neural_compressor.experimental.pruning"]], "neural_compressor.experimental.pruning_recipes": [[281, "module-neural_compressor.experimental.pruning_recipes"]], "neural_compressor.experimental.pruning_recipes.patterns": [[282, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[283, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[284, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "neural_compressor.experimental.pruning_v2": [[285, "module-neural_compressor.experimental.pruning_v2"]], "neural_compressor.experimental.pytorch_pruner": [[286, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[287, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[288, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[289, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[290, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[291, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[292, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "neural_compressor.experimental.quantization": [[293, "module-neural_compressor.experimental.quantization"]], "neural_compressor.experimental.scheduler": [[294, "module-neural_compressor.experimental.scheduler"]], "neural_compressor.experimental.strategy.auto_mixed_precision": [[295, "module-neural_compressor.experimental.strategy.auto_mixed_precision"]], "neural_compressor.experimental.strategy.basic": [[296, "module-neural_compressor.experimental.strategy.basic"]], "neural_compressor.experimental.strategy.bayesian": [[297, "module-neural_compressor.experimental.strategy.bayesian"]], "neural_compressor.experimental.strategy.exhaustive": [[298, "module-neural_compressor.experimental.strategy.exhaustive"]], "neural_compressor.experimental.strategy": [[299, "module-neural_compressor.experimental.strategy"]], "neural_compressor.experimental.strategy.mse": [[300, "module-neural_compressor.experimental.strategy.mse"]], "neural_compressor.experimental.strategy.mse_v2": [[301, "module-neural_compressor.experimental.strategy.mse_v2"]], "neural_compressor.experimental.strategy.random": [[302, "module-neural_compressor.experimental.strategy.random"]], "neural_compressor.experimental.strategy.strategy": [[303, "module-neural_compressor.experimental.strategy.strategy"]], "neural_compressor.experimental.strategy.utils.constant": [[304, "module-neural_compressor.experimental.strategy.utils.constant"]], "neural_compressor.experimental.strategy.utils": [[305, "module-neural_compressor.experimental.strategy.utils"]], "neural_compressor.experimental.strategy.utils.tuning_sampler": [[306, "module-neural_compressor.experimental.strategy.utils.tuning_sampler"]], "neural_compressor.experimental.strategy.utils.tuning_space": [[307, "module-neural_compressor.experimental.strategy.utils.tuning_space"]], "neural_compressor.experimental.strategy.utils.tuning_structs": [[308, "module-neural_compressor.experimental.strategy.utils.tuning_structs"]], "neural_compressor.experimental.strategy.utils.utility": [[309, "module-neural_compressor.experimental.strategy.utils.utility"]], "neural_compressor": [[310, "module-neural_compressor"]], "neural_compressor.metric.bleu": [[311, "module-neural_compressor.metric.bleu"]], "neural_compressor.metric.bleu_util": [[312, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[313, "module-neural_compressor.metric.coco_label_map"]], "neural_compressor.metric.coco_tools": [[314, "module-neural_compressor.metric.coco_tools"]], "neural_compressor.metric.evaluate_squad": [[315, "module-neural_compressor.metric.evaluate_squad"]], "neural_compressor.metric.f1": [[316, "module-neural_compressor.metric.f1"]], "neural_compressor.metric": [[317, "module-neural_compressor.metric"]], "neural_compressor.metric.metric": [[318, "module-neural_compressor.metric.metric"]], "neural_compressor.mix_precision": [[319, "module-neural_compressor.mix_precision"]], "neural_compressor.model.base_model": [[320, "module-neural_compressor.model.base_model"]], "neural_compressor.model": [[321, "module-neural_compressor.model"]], "neural_compressor.model.keras_model": [[322, "module-neural_compressor.model.keras_model"]], "neural_compressor.model.model": [[323, "module-neural_compressor.model.model"]], "neural_compressor.model.mxnet_model": [[324, "module-neural_compressor.model.mxnet_model"]], "neural_compressor.model.nets_factory": [[325, "module-neural_compressor.model.nets_factory"]], "neural_compressor.model.onnx_model": [[326, "module-neural_compressor.model.onnx_model"]], "neural_compressor.model.tensorflow_model": [[327, "module-neural_compressor.model.tensorflow_model"]], "neural_compressor.model.torch_model": [[328, "module-neural_compressor.model.torch_model"]], "neural_compressor.objective": [[329, "module-neural_compressor.objective"]], "neural_compressor.profiling": [[330, "module-neural_compressor.profiling"]], "neural_compressor.profiling.parser.factory": [[331, "module-neural_compressor.profiling.parser.factory"]], "neural_compressor.profiling.parser": [[332, "module-neural_compressor.profiling.parser"]], "neural_compressor.profiling.parser.onnx_parser.factory": [[333, "module-neural_compressor.profiling.parser.onnx_parser.factory"]], "neural_compressor.profiling.parser.onnx_parser": [[334, "module-neural_compressor.profiling.parser.onnx_parser"]], "neural_compressor.profiling.parser.onnx_parser.parser": [[335, "module-neural_compressor.profiling.parser.onnx_parser.parser"]], "neural_compressor.profiling.parser.parser": [[336, "module-neural_compressor.profiling.parser.parser"]], "neural_compressor.profiling.parser.result": [[337, "module-neural_compressor.profiling.parser.result"]], "neural_compressor.profiling.parser.tensorflow_parser.factory": [[338, "module-neural_compressor.profiling.parser.tensorflow_parser.factory"]], "neural_compressor.profiling.parser.tensorflow_parser": [[339, "module-neural_compressor.profiling.parser.tensorflow_parser"]], "neural_compressor.profiling.parser.tensorflow_parser.parser": [[340, "module-neural_compressor.profiling.parser.tensorflow_parser.parser"]], "neural_compressor.profiling.profiler.factory": [[341, "module-neural_compressor.profiling.profiler.factory"]], "neural_compressor.profiling.profiler": [[342, "module-neural_compressor.profiling.profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.factory": [[343, "module-neural_compressor.profiling.profiler.onnxrt_profiler.factory"]], "neural_compressor.profiling.profiler.onnxrt_profiler": [[344, "module-neural_compressor.profiling.profiler.onnxrt_profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.profiler": [[345, "module-neural_compressor.profiling.profiler.onnxrt_profiler.profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.utils": [[346, "module-neural_compressor.profiling.profiler.onnxrt_profiler.utils"]], "neural_compressor.profiling.profiler.profiler": [[347, "module-neural_compressor.profiling.profiler.profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.factory": [[348, "module-neural_compressor.profiling.profiler.tensorflow_profiler.factory"]], "neural_compressor.profiling.profiler.tensorflow_profiler": [[349, "module-neural_compressor.profiling.profiler.tensorflow_profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.profiler": [[350, "module-neural_compressor.profiling.profiler.tensorflow_profiler.profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.utils": [[351, "module-neural_compressor.profiling.profiler.tensorflow_profiler.utils"]], "neural_compressor.quantization": [[352, "module-neural_compressor.quantization"]], "neural_compressor.strategy.auto": [[353, "module-neural_compressor.strategy.auto"]], "neural_compressor.strategy.auto_mixed_precision": [[354, "module-neural_compressor.strategy.auto_mixed_precision"]], "neural_compressor.strategy.basic": [[355, "module-neural_compressor.strategy.basic"]], "neural_compressor.strategy.bayesian": [[356, "module-neural_compressor.strategy.bayesian"]], "neural_compressor.strategy.conservative": [[357, "module-neural_compressor.strategy.conservative"]], "neural_compressor.strategy.exhaustive": [[358, "module-neural_compressor.strategy.exhaustive"]], "neural_compressor.strategy.hawq_v2": [[359, "module-neural_compressor.strategy.hawq_v2"]], "neural_compressor.strategy": [[360, "module-neural_compressor.strategy"]], "neural_compressor.strategy.mse": [[361, "module-neural_compressor.strategy.mse"]], "neural_compressor.strategy.mse_v2": [[362, "module-neural_compressor.strategy.mse_v2"]], "neural_compressor.strategy.random": [[363, "module-neural_compressor.strategy.random"]], "neural_compressor.strategy.strategy": [[364, "module-neural_compressor.strategy.strategy"]], "neural_compressor.strategy.utils.constant": [[365, "module-neural_compressor.strategy.utils.constant"]], "neural_compressor.strategy.utils": [[366, "module-neural_compressor.strategy.utils"]], "neural_compressor.strategy.utils.tuning_sampler": [[367, "module-neural_compressor.strategy.utils.tuning_sampler"]], "neural_compressor.strategy.utils.tuning_space": [[368, "module-neural_compressor.strategy.utils.tuning_space"]], "neural_compressor.strategy.utils.tuning_structs": [[369, "module-neural_compressor.strategy.utils.tuning_structs"]], "neural_compressor.strategy.utils.utility": [[370, "module-neural_compressor.strategy.utils.utility"]], "neural_compressor.template.api_doc_example": [[371, "module-neural_compressor.template.api_doc_example"]], "neural_compressor.template": [[372, "module-neural_compressor.template"]], "neural_compressor.training": [[373, "module-neural_compressor.training"]], "neural_compressor.utils.collect_layer_histogram": [[374, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[375, "module-neural_compressor.utils.constant"]], "neural_compressor.utils.create_obj_from_config": [[376, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils": [[377, "module-neural_compressor.utils"]], "neural_compressor.utils.kl_divergence": [[378, "module-neural_compressor.utils.kl_divergence"]], "neural_compressor.utils.load_huggingface": [[379, "module-neural_compressor.utils.load_huggingface"]], "neural_compressor.utils.logger": [[380, "module-neural_compressor.utils.logger"]], "neural_compressor.utils.neural_insights_utils": [[381, "module-neural_compressor.utils.neural_insights_utils"]], "neural_compressor.utils.options": [[382, "module-neural_compressor.utils.options"]], "neural_compressor.utils.pytorch": [[383, "module-neural_compressor.utils.pytorch"]], "neural_compressor.utils.utility": [[384, "module-neural_compressor.utils.utility"]], "neural_compressor.utils.weights_details": [[385, "module-neural_compressor.utils.weights_details"]], "neural_compressor.version": [[386, "module-neural_compressor.version"]], "Intel\u00ae Neural Compressor Documentation": [[387, "intel-neural-compressor-documentation"], [465, "intel-neural-compressor-documentation"]], "Sections": [[387, "sections"], [465, "sections"]], "Contributor Covenant Code of Conduct": [[388, "contributor-covenant-code-of-conduct"], [389, "contributor-covenant-code-of-conduct"]], "Our Pledge": [[388, "our-pledge"]], "Our Standards": [[388, "our-standards"]], "Our Responsibilities": [[388, "our-responsibilities"]], "Scope": [[388, "scope"]], "Enforcement": [[388, "enforcement"]], "Attribution": [[388, "attribution"]], "Contribution Guidelines": [[389, "contribution-guidelines"]], "Pull Request Checklist": [[389, "pull-request-checklist"]], "Pull Request Template": [[389, "pull-request-template"]], "Support": [[389, "support"]], "FX": [[390, "fx"]], "Introduction": [[390, "introduction"], [391, "introduction"], [394, "introduction"], [409, "introduction"], [410, "introduction"], [411, "introduction"], [413, "introduction"], [414, "introduction"], [415, "introduction"], [417, "introduction"], [419, "introduction"], [422, "introduction"], [425, "introduction"], [427, "introduction"], [428, "introduction"], [448, "introduction"], [449, "introduction"], [451, "introduction"], [453, "introduction"], [457, "introduction"], [458, "introduction"], [459, "introduction"], [460, "introduction"], [461, "introduction"], [463, "introduction"]], "FX Mode Support Matrix in Neural Compressor": [[390, "fx-mode-support-matrix-in-neural-compressor"]], "Get Start": [[390, "get-start"]], "Post Training Static Quantization": [[390, "post-training-static-quantization"], [454, "post-training-static-quantization"]], "Post Training Dynamic Quantization": [[390, "post-training-dynamic-quantization"], [454, "post-training-dynamic-quantization"]], "Quantization-Aware Training": [[390, "quantization-aware-training"]], "Examples": [[390, "examples"], [391, "examples"], [409, "examples"], [410, "examples"], [411, "examples"], [413, "examples"], [414, "examples"], [415, "examples"], [416, "examples"], [417, "examples"], [426, "examples"], [427, "examples"], [428, "examples"], [449, "examples"], [451, "examples"], [454, "examples"], [459, "examples"]], "Note": [[390, "note"]], "Details": [[390, "details"]], "Common Problem": [[390, "common-problem"]], "Dynamic Quantization": [[390, "dynamic-quantization"]], "Static Quantization & Quantization Aware Training": [[390, "static-quantization-quantization-aware-training"]], "Neural Architecture Search": [[391, "neural-architecture-search"]], "Basic NAS": [[391, "basic-nas"]], "Dynamic NAS": [[391, "dynamic-nas"]], "NAS Support Matrix": [[391, "nas-support-matrix"]], "Get Started with NAS API": [[391, "get-started-with-nas-api"]], "Basic Usage": [[391, "basic-usage"]], "1. Python code + YAML": [[391, "python-code-yaml"]], "2. Python code only": [[391, "python-code-only"]], "Advanced Usage (Custom NAS)": [[391, "advanced-usage-custom-nas"]], "Security Policy": [[392, "security-policy"]], "Report a Vulnerability": [[392, "report-a-vulnerability"]], "Intel\u00ae Neural Compressor": [[393, "intel-neural-compressor"], [446, "intel-neural-compressor"]], "Installation": [[393, "installation"], [423, "installation"], [440, "installation"]], "Install from pypi": [[393, "install-from-pypi"]], "Getting Started": [[393, "getting-started"], [420, "getting-started"]], "Quantization with Python API": [[393, "quantization-with-python-api"], [420, "quantization-with-python-api"]], "Documentation": [[393, "documentation"]], "Selected Publications/Events": [[393, "selected-publications-events"]], "Additional Content": [[393, "additional-content"]], "Research Collaborations": [[393, "research-collaborations"]], "Adaptor": [[394, "adaptor"], [395, "adaptor"]], "Adaptor Support Matrix": [[394, "adaptor-support-matrix"]], "Working Flow": [[394, "working-flow"], [454, "working-flow"]], "Get Start with Adaptor API": [[394, "get-start-with-adaptor-api"]], "Query API": [[394, "query-api"]], "Background": [[394, "background"]], "Query API Introduction": [[394, "query-api-introduction"]], "Example of Adding a New Backend Support": [[394, "example-of-adding-a-new-backend-support"]], "Capability": [[394, "capability"]], "Implement ONNXRTAdaptor Class": [[394, "implement-onnxrtadaptor-class"]], "ONNX Runtime": [[396, "onnx-runtime"], [427, "onnx-runtime"], [427, "id1"]], "Torch Utils": [[397, "torch-utils"]], "API Document Example": [[398, "api-document-example"]], "APIs": [[399, "apis"]], "Benchmark": [[400, "benchmark"], [426, "benchmark"], [453, "benchmark"]], "Compression": [[401, "compression"]], "Config": [[402, "config"]], "Mix Precision": [[403, "mix-precision"], [426, "mix-precision"]], "Model": [[404, "model"], [428, "model"]], "Objective": [[405, "objective"], [448, "objective"]], "Quantization": [[406, "quantization"], [453, "quantization"], [454, "quantization"]], "Strategy": [[407, "strategy"]], "Training": [[408, "training"]], "Benchmarking": [[409, "benchmarking"]], "Benchmark Support Matrix": [[409, "benchmark-support-matrix"]], "Get Started with Benchmark API": [[409, "get-started-with-benchmark-api"]], "DataLoader": [[410, "dataloader"]], "Supported Framework Dataloader Matrix": [[410, "supported-framework-dataloader-matrix"]], "Get Start with Dataloader API": [[410, "get-start-with-dataloader-api"]], "Config Dataloader in a Yaml File": [[410, "config-dataloader-in-a-yaml-file"]], "Create a User-specific Dataloader": [[410, "create-a-user-specific-dataloader"]], "Dataset": [[411, "dataset"]], "Supported Framework Dataset Matrix": [[411, "supported-framework-dataset-matrix"]], "TensorFlow": [[411, "tensorflow"], [425, "tensorflow"], [427, "tensorflow"], [460, "tensorflow"]], "PyTorch": [[411, "pytorch"], [425, "pytorch"], [427, "pytorch"], [455, "pytorch"]], "MXNet": [[411, "mxnet"], [425, "mxnet"], [460, "mxnet"]], "ONNXRT": [[411, "onnxrt"], [425, "onnxrt"], [460, "onnxrt"]], "Get start with Dataset API": [[411, "get-start-with-dataset-api"]], "Config dataloader in a yaml file": [[411, "config-dataloader-in-a-yaml-file"]], "User-specific dataset": [[411, "user-specific-dataset"]], "Design": [[412, "design"], [461, "design"], [461, "id1"], [461, "id3"], [461, "id5"], [461, "id7"], [461, "id9"], [461, "id11"], [461, "id13"], [461, "id15"], [461, "id17"], [461, "id19"], [461, "id21"]], "Architecture": [[412, "architecture"], [422, "architecture"]], "Workflow": [[412, "workflow"]], "Distillation": [[413, "distillation"], [426, "distillation"], [453, "distillation"]], "Knowledge Distillation": [[413, "knowledge-distillation"]], "Intermediate Layer Knowledge Distillation": [[413, "intermediate-layer-knowledge-distillation"]], "Self Distillation": [[413, "self-distillation"]], "Distillation Support Matrix": [[413, "distillation-support-matrix"]], "Get Started with Distillation API": [[413, "get-started-with-distillation-api"]], "Distillation for Quantization": [[414, "distillation-for-quantization"]], "Distillation for Quantization Support Matrix": [[414, "distillation-for-quantization-support-matrix"]], "Get Started with Distillation for Quantization API": [[414, "get-started-with-distillation-for-quantization-api"]], "Distributed Training and Inference (Evaluation)": [[415, "distributed-training-and-inference-evaluation"]], "Supported Feature Matrix": [[415, "supported-feature-matrix"], [419, "supported-feature-matrix"], [422, "supported-feature-matrix"], [453, "supported-feature-matrix"], [454, "supported-feature-matrix"], [459, "supported-feature-matrix"], [463, "supported-feature-matrix"]], "Get Started with Distributed Training and Inference API": [[415, "get-started-with-distributed-training-and-inference-api"]], "Option 1: Pure Yaml Configuration": [[415, "option-1-pure-yaml-configuration"]], "Option 2: User Defined Training Function": [[415, "option-2-user-defined-training-function"]], "Horovodrun Execution": [[415, "horovodrun-execution"]], "Security": [[415, "security"]], "PyTorch Examples:": [[415, "pytorch-examples"]], "TensorFlow Examples:": [[415, "tensorflow-examples"]], "Example List": [[416, "example-list"]], "Release Data": [[416, "release-data"]], "Export": [[417, "export"]], "Supported Framework Model Matrix": [[417, "supported-framework-model-matrix"], [428, "supported-framework-model-matrix"]], "FP32 Model Export": [[417, "fp32-model-export"]], "INT8 Model Export": [[417, "int8-model-export"]], "Appendix": [[417, "appendix"]], "Frequently Asked Questions": [[418, "frequently-asked-questions"]], "Common Build Issues": [[418, "common-build-issues"]], "Issue 1:": [[418, "issue-1"]], "Issue 2:": [[418, "issue-2"]], "Issue 3:": [[418, "issue-3"]], "Issue 4:": [[418, "issue-4"]], "Framework YAML Configuration Files": [[419, "framework-yaml-configuration-files"]], "Get started with Framework YAML Files": [[419, "get-started-with-framework-yaml-files"]], "Quick Samples": [[420, "quick-samples"]], "Quantization with JupyterLab Extension": [[420, "quantization-with-jupyterlab-extension"]], "Validated Models": [[420, "validated-models"], [458, "validated-models"], [464, "validated-models"]], "Incompatible changes between v1.2 and v1.1": [[421, "incompatible-changes-between-v1-2-and-v1-1"]], "User-facing APIs": [[421, "user-facing-apis"]], "Built-in transform/dataset/metric APIs": [[421, "built-in-transform-dataset-metric-apis"]], "Infrastructure of Intel\u00ae Neural Compressor": [[422, "infrastructure-of-intel-neural-compressor"]], "Linux Installation": [[423, "linux-installation"]], "Prerequisites": [[423, "prerequisites"], [423, "id1"]], "Install from Binary": [[423, "install-from-binary"], [423, "id2"]], "Install from Source": [[423, "install-from-source"], [423, "id3"]], "Install from AI Kit": [[423, "install-from-ai-kit"]], "Windows Installation": [[423, "windows-installation"]], "System Requirements": [[423, "system-requirements"]], "Validated Hardware Environment": [[423, "validated-hardware-environment"]], "Intel\u00ae Neural Compressor supports CPUs based on Intel 64 architecture or compatible processors:": [[423, "intel-neural-compressor-supports-cpus-based-on-intel-64-architecture-or-compatible-processors"]], "Intel\u00ae Neural Compressor supports GPUs built on Intel\u2019s Xe architecture:": [[423, "intel-neural-compressor-supports-gpus-built-on-intel-s-xe-architecture"]], "Intel\u00ae Neural Compressor quantized ONNX models support multiple hardware vendors through ONNX Runtime:": [[423, "intel-neural-compressor-quantized-onnx-models-support-multiple-hardware-vendors-through-onnx-runtime"]], "Validated Software Environment": [[423, "validated-software-environment"]], "Legal Information": [[424, "legal-information"]], "License": [[424, "license"]], "Citation": [[424, "citation"]], "Trademarks": [[424, "trademarks"]], "Metrics": [[425, "metrics"]], "Supported Built-in Metric Matrix": [[425, "supported-built-in-metric-matrix"]], "Get Start with Metrics": [[425, "get-start-with-metrics"]], "Support Single-metric and Multi-metrics": [[425, "support-single-metric-and-multi-metrics"]], "Build Custom Metric with Python API": [[425, "build-custom-metric-with-python-api"]], "Code Migration from Intel Neural Compressor 1.X to Intel Neural Compressor 2.X": [[426, "code-migration-from-intel-neural-compressor-1-x-to-intel-neural-compressor-2-x"]], "Model Quantization": [[426, "model-quantization"]], "Post-training Quantization": [[426, "post-training-quantization"]], "Quantization Aware Training": [[426, "quantization-aware-training"], [454, "quantization-aware-training"], [454, "id1"]], "Pruning": [[426, "pruning"], [451, "pruning"], [453, "pruning"]], "Orchestration": [[426, "orchestration"]], "Mixed Precision": [[427, "mixed-precision"]], "Mixed Precision Support Matrix": [[427, "mixed-precision-support-matrix"]], "Get Started with Mixed Precision API": [[427, "get-started-with-mixed-precision-api"]], "Neural Coder": [[429, "neural-coder"], [446, "neural-coder"], [446, "id1"]], "What do we offer?": [[429, "what-do-we-offer"]], "Getting Started!": [[429, "getting-started"], [440, "getting-started"]], "Jupyter Lab Extension": [[429, "jupyter-lab-extension"]], "Python Launcher": [[429, "python-launcher"], [434, "python-launcher"]], "Python API": [[429, "python-api"]], "Contact": [[429, "contact"]], "AWS Amazon SageMaker Support": [[430, "aws-amazon-sagemaker-support"]], "Start Jupyter Lab 3": [[430, "start-jupyter-lab-3"]], "For SageMaker Studio": [[430, "for-sagemaker-studio"]], "For SageMaker Notebook instance": [[430, "for-sagemaker-notebook-instance"]], "Installation Guide": [[430, "installation-guide"]], "BigDL Nano Support": [[431, "bigdl-nano-support"]], "Example": [[431, "example"], [435, "example"], [448, "example"], [458, "example"]], "Support Matrix": [[431, "support-matrix"]], "Intel CPU Platforms: Best Performance Setting": [[432, "intel-cpu-platforms-best-performance-setting"]], "Install MKL, OpenMP and JEMALLOC": [[432, "install-mkl-openmp-and-jemalloc"]], "Install NUMA Controller": [[432, "install-numa-controller"]], "Environment Variables": [[432, "environment-variables"]], "Frequency Governers": [[432, "frequency-governers"]], "Neural Coder as Python API": [[433, "neural-coder-as-python-api"]], "Enable": [[433, "enable"]], "Bench": [[433, "bench"]], "SuperBench": [[433, "superbench"]], "Quick-Start": [[434, "quick-start"]], "Launcher Arguments (Optional)": [[434, "launcher-arguments-optional"]], "Neural Coder for Quantization": [[435, "neural-coder-for-quantization"]], "Features Supported": [[435, "features-supported"]], "Models Supported": [[435, "models-supported"]], "Usage": [[435, "usage"], [459, "usage"], [459, "id1"], [461, "usage"], [461, "id2"], [461, "id4"], [461, "id6"], [461, "id8"], [461, "id10"], [461, "id12"], [461, "id14"], [461, "id16"], [461, "id18"], [461, "id20"], [461, "id22"]], "PyPI distribution:": [[435, "pypi-distribution"]], "Supported Optimization Features": [[436, "supported-optimization-features"]], "v0.4": [[437, "v0-4"]], "Highlights": [[437, "highlights"]], "Others": [[437, "others"]], "Changelog": [[438, "changelog"], [442, "changelog"]], "neural_compressor_ext_lab": [[439, "neural-compressor-ext-lab"]], "Requirements": [[439, "requirements"], [443, "requirements"]], "Install": [[439, "install"], [443, "install"]], "Uninstall": [[439, "uninstall"], [443, "uninstall"]], "Contributing": [[439, "contributing"], [443, "contributing"]], "Development install": [[439, "development-install"], [443, "development-install"]], "Development uninstall": [[439, "development-uninstall"], [443, "development-uninstall"]], "Packaging the extension": [[439, "packaging-the-extension"], [443, "packaging-the-extension"]], "Intel\u00ae Neural Compressor as JupyterLab Extension": [[440, "intel-neural-compressor-as-jupyterlab-extension"]], "Auto-enable a feature": [[440, "auto-enable-a-feature"]], "Or let us help you auto-select the best feature": [[440, "or-let-us-help-you-auto-select-the-best-feature"]], "Pre-requisites": [[440, "pre-requisites"]], "Making a new release of neural_compressor_ext_lab": [[441, "making-a-new-release-of-neural-compressor-ext-lab"]], "Manual release": [[441, "manual-release"], [444, "manual-release"]], "Python package": [[441, "python-package"], [444, "python-package"]], "NPM package": [[441, "npm-package"], [444, "npm-package"]], "Automated releases with the Jupyter Releaser": [[441, "automated-releases-with-the-jupyter-releaser"], [444, "automated-releases-with-the-jupyter-releaser"]], "Publishing to conda-forge": [[441, "publishing-to-conda-forge"], [444, "publishing-to-conda-forge"]], "neural_compressor_ext_lab_alibaba": [[443, "neural-compressor-ext-lab-alibaba"]], "Making a new release of neural_compressor_ext_lab_alibaba": [[444, "making-a-new-release-of-neural-compressor-ext-lab-alibaba"]], "Change Log": [[445, "change-log"]], "[Unreleased]": [[445, "unreleased"]], "Background Introduction": [[446, "background-introduction"]], "Neural Coder Extension in VSCode": [[446, "neural-coder-extension-in-vscode"]], "Neural Coder Extension Usage": [[446, "neural-coder-extension-usage"]], "1. Open": [[446, "open"]], "2. Search": [[446, "search"]], "3. Setting": [[446, "setting"]], "4. Icon": [[446, "icon"]], "5. optimization (quantization)": [[446, "optimization-quantization"]], "5.1 Enable": [[446, "enable"]], "5.2 Auto": [[446, "auto"]], "Welcome to your VS Code Extension": [[447, "welcome-to-your-vs-code-extension"]], "What\u2019s in the folder": [[447, "what-s-in-the-folder"]], "Setup": [[447, "setup"]], "Get up and running straight away": [[447, "get-up-and-running-straight-away"]], "Make changes": [[447, "make-changes"]], "Explore the API": [[447, "explore-the-api"]], "Run tests": [[447, "run-tests"]], "Go further": [[447, "go-further"]], "Single Objective": [[448, "single-objective"]], "Multiple Objectives": [[448, "multiple-objectives"]], "Objective Support Matrix": [[448, "objective-support-matrix"]], "Get Started with Objective API": [[448, "get-started-with-objective-api"]], "Config Single Objective": [[448, "config-single-objective"]], "Config Multiple Objectives": [[448, "config-multiple-objectives"]], "Optimization Orchestration": [[449, "optimization-orchestration"]], "One-shot": [[449, "one-shot"]], "Orchestration Support Matrix": [[449, "orchestration-support-matrix"]], "Get Started with Orchestration API": [[449, "get-started-with-orchestration-api"]], "SYSTEM CONFIGURATION": [[450, "system-configuration"]], "Neural Network Pruning": [[451, "neural-network-pruning"]], "Pruning Patterns": [[451, "pruning-patterns"]], "Pruning Criteria": [[451, "pruning-criteria"]], "Pruning Types": [[451, "pruning-types"]], "Pruning Schedules": [[451, "pruning-schedules"]], "Pruning Scope": [[451, "pruning-scope"]], "Sparsity Decay Types": [[451, "sparsity-decay-types"]], "Regularization": [[451, "regularization"]], "Pruning Support Matrix": [[451, "pruning-support-matrix"]], "Get Started with Pruning API": [[451, "get-started-with-pruning-api"]], "Sparse Model Deployment": [[451, "sparse-model-deployment"]], "Reference": [[451, "reference"], [454, "reference"], [458, "reference"]], "Full Publications/Events (60)": [[452, "full-publications-events-60"]], "2023 (7)": [[452, "id1"]], "2022 (34)": [[452, "id2"]], "2021 (15)": [[452, "id3"]], "2018 - 2020 (4)": [[452, "id4"]], "Pythonic Style Access for Configurations": [[453, "pythonic-style-access-for-configurations"]], "Pythonic API for User Configurations": [[453, "pythonic-api-for-user-configurations"], [453, "id1"]], "Pythonic API for Framework Configurations": [[453, "pythonic-api-for-framework-configurations"], [453, "id2"]], "Get Started with Pythonic API for Configurations": [[453, "get-started-with-pythonic-api-for-configurations"]], "NAS": [[453, "nas"]], "Quantization Introduction": [[454, "quantization-introduction"]], "Quantization Fundamentals": [[454, "quantization-fundamentals"], [458, "quantization-fundamentals"]], "Quantization Support Matrix": [[454, "quantization-support-matrix"]], "Quantization Scheme in TensorFlow": [[454, "quantization-scheme-in-tensorflow"]], "Quantization Scheme in PyTorch": [[454, "quantization-scheme-in-pytorch"]], "Quantization Scheme in IPEX": [[454, "quantization-scheme-in-ipex"]], "Quantization Scheme in MXNet": [[454, "quantization-scheme-in-mxnet"]], "Quantization Scheme in ONNX Runtime": [[454, "quantization-scheme-in-onnx-runtime"]], "Quantization Approaches": [[454, "quantization-approaches"]], "With or Without Accuracy Aware Tuning": [[454, "with-or-without-accuracy-aware-tuning"]], "Get Started": [[454, "get-started"]], "Post Training Quantization": [[454, "post-training-quantization"]], "Specify Quantization Rules": [[454, "specify-quantization-rules"]], "Specify Quantization Recipes": [[454, "specify-quantization-recipes"]], "Specify Quantization Backend and Device": [[454, "specify-quantization-backend-and-device"]], "Turn OFF Auto Mixed Precision during Quantization": [[455, "turn-off-auto-mixed-precision-during-quantization"]], "Tensorflow": [[455, "tensorflow"]], "Release": [[456, "release"]], "Release Notes": [[456, "release-notes"]], "Known Issues": [[456, "known-issues"]], "Incompatible Changes": [[456, "incompatible-changes"]], "SigOpt Strategy": [[457, "sigopt-strategy"]], "Preparation": [[457, "preparation"]], "SigOpt Platform": [[457, "sigopt-platform"]], "Neural Compressor Configuration": [[457, "neural-compressor-configuration"]], "Performance": [[457, "performance"]], "Benefit of SigOpt Strategy": [[457, "benefit-of-sigopt-strategy"]], "Performance Comparison of Different Strategies": [[457, "performance-comparison-of-different-strategies"]], "Smooth Quant": [[458, "smooth-quant"]], "Per-tensor & Per-channel": [[458, "per-tensor-per-channel"]], "Per-tensor example": [[458, "per-tensor-example"]], "Per-channel example": [[458, "per-channel-example"]], "Matmul quantization example": [[458, "matmul-quantization-example"]], "Per-channel limitation": [[458, "per-channel-limitation"]], "SmoothQuant and Our Enhancement": [[458, "smoothquant-and-our-enhancement"]], "SmoothQuant": [[458, "smoothquant"]], "Our enhancement:": [[458, "our-enhancement"]], "Algorithm: Layer-wise Auto-tuning of $\\alpha$.": [[458, "algorithm-layer-wise-auto-tuning-of-alpha"]], "Engineering": [[458, "engineering"]], "Supported Framework Matrix": [[458, "supported-framework-matrix"]], "TensorBoard": [[459, "tensorboard"]], "Get Started with TensorBoard": [[459, "get-started-with-tensorboard"]], "PyTorch TensorBoard": [[459, "pytorch-tensorboard"]], "TensorFlow Tensorboard": [[459, "tensorflow-tensorboard"]], "PyTorch Examples": [[459, "pytorch-examples"]], "TensorFlow Examples": [[459, "tensorflow-examples"]], "Transform": [[460, "transform"]], "Transform Support List": [[460, "transform-support-list"]], "Pytorch": [[460, "pytorch"]], "Tuning Strategies": [[461, "tuning-strategies"]], "Strategy Design": [[461, "strategy-design"]], "Tuning Space": [[461, "tuning-space"]], "Exit Policy": [[461, "exit-policy"]], "Accuracy Criteria": [[461, "accuracy-criteria"]], "Tuning Process": [[461, "tuning-process"]], "Tuning Algorithms": [[461, "tuning-algorithms"]], "Auto": [[461, "auto"]], "Conservative Tuning": [[461, "conservative-tuning"]], "Basic": [[461, "basic"]], "MSE": [[461, "mse"]], "MSE_V2": [[461, "mse-v2"]], "HAWQ_V2": [[461, "hawq-v2"]], "Bayesian": [[461, "bayesian"]], "Exhaustive": [[461, "exhaustive"]], "Random": [[461, "random"]], "SigOpt": [[461, "sigopt"]], "TPE": [[461, "tpe"]], "Distributed Tuning": [[461, "distributed-tuning"]], "Customize a New Tuning Strategy": [[461, "customize-a-new-tuning-strategy"]], "User Guide": [[462, "user-guide"]], "Overview": [[462, "overview"]], "Python-based APIs": [[462, "python-based-apis"]], "Neural Coder (Zero-code Optimization)": [[462, "neural-coder-zero-code-optimization"]], "Advanced Topics": [[462, "advanced-topics"]], "User YAML Configuration Files": [[463, "user-yaml-configuration-files"]], "Get started with User YAML Files": [[463, "get-started-with-user-yaml-files"]], "Validated Quantization Examples": [[464, "validated-quantization-examples"]], "TensorFlow Models with Intel TensorFlow 2.11.0": [[464, "tensorflow-models-with-intel-tensorflow-2-11-0"]], "PyTorch Models with Torch 1.13.0+cpu in PTQ Mode": [[464, "pytorch-models-with-torch-1-13-0-cpu-in-ptq-mode"]], "PyTorch Models with Torch 1.13.0+cpu in QAT Mode": [[464, "pytorch-models-with-torch-1-13-0-cpu-in-qat-mode"]], "PyTorch Models with Torch and Intel\u00ae Extension for PyTorch* 1.13.0+cpu": [[464, "pytorch-models-with-torch-and-intel-extension-for-pytorch-1-13-0-cpu"]], "ONNX Models with ONNX Runtime 1.13.1": [[464, "onnx-models-with-onnx-runtime-1-13-1"]], "MXNet Models with MXNet 1.9.1": [[464, "mxnet-models-with-mxnet-1-9-1"]], "Validated Pruning Examples": [[464, "validated-pruning-examples"]], "Validated Knowledge Distillation Examples": [[464, "validated-knowledge-distillation-examples"]], "Validated ONNX QDQ INT8 Models on Multiple Hardware through ONNX Runtime": [[464, "validated-onnx-qdq-int8-models-on-multiple-hardware-through-onnx-runtime"]]}, "indexentries": {"block_mask": [[0, "module-block_mask"]], "module": [[0, "module-block_mask"], [1, "module-neural_compressor.adaptor.adaptor"], [2, "module-neural_compressor.adaptor"], [3, "module-neural_compressor.adaptor.keras"], [4, "module-neural_compressor.adaptor.keras_utils.conv2d"], [5, "module-neural_compressor.adaptor.keras_utils.dense"], [6, "module-neural_compressor.adaptor.keras_utils.depthwise_conv2d"], [7, "module-neural_compressor.adaptor.keras_utils"], [8, "module-neural_compressor.adaptor.keras_utils.pool2d"], [9, "module-neural_compressor.adaptor.keras_utils.quantizer"], [10, "module-neural_compressor.adaptor.keras_utils.separable_conv2d"], [11, "module-neural_compressor.adaptor.mxnet"], [12, "module-neural_compressor.adaptor.mxnet_utils"], [13, "module-neural_compressor.adaptor.mxnet_utils.util"], [14, "module-neural_compressor.adaptor.onnxrt"], [15, "module-neural_compressor.adaptor.ox_utils.calibration"], [16, "module-neural_compressor.adaptor.ox_utils.calibrator"], [17, "module-neural_compressor.adaptor.ox_utils"], [18, "module-neural_compressor.adaptor.ox_utils.operators.activation"], [19, "module-neural_compressor.adaptor.ox_utils.operators.argmax"], [20, "module-neural_compressor.adaptor.ox_utils.operators.attention"], [21, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"], [22, "module-neural_compressor.adaptor.ox_utils.operators.concat"], [23, "module-neural_compressor.adaptor.ox_utils.operators.conv"], [24, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"], [25, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"], [26, "module-neural_compressor.adaptor.ox_utils.operators.gather"], [27, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"], [28, "module-neural_compressor.adaptor.ox_utils.operators.gemm"], [29, "module-neural_compressor.adaptor.ox_utils.operators"], [30, "module-neural_compressor.adaptor.ox_utils.operators.lstm"], [31, "module-neural_compressor.adaptor.ox_utils.operators.matmul"], [32, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"], [33, "module-neural_compressor.adaptor.ox_utils.operators.ops"], [34, "module-neural_compressor.adaptor.ox_utils.operators.pad"], [35, "module-neural_compressor.adaptor.ox_utils.operators.pooling"], [36, "module-neural_compressor.adaptor.ox_utils.operators.resize"], [37, "module-neural_compressor.adaptor.ox_utils.operators.split"], [38, "module-neural_compressor.adaptor.ox_utils.quantizer"], [39, "module-neural_compressor.adaptor.ox_utils.util"], [40, "module-neural_compressor.adaptor.pytorch"], [41, "module-neural_compressor.adaptor.query"], [42, "module-neural_compressor.adaptor.tensorflow"], [43, "module-neural_compressor.adaptor.tf_utils.graph_converter"], [44, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"], [45, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"], [46, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"], [47, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"], [48, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"], [49, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"], [50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"], [51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"], [52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"], [53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"], [54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"], [55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"], [56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"], [57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"], [58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"], [59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"], [60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"], [61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"], [62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"], [63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"], [64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"], [65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"], [66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"], [67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"], [68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"], [69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"], [70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"], [71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"], [72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"], [73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"], [74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"], [75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"], [76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"], [77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"], [78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"], [79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"], [80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"], [81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"], [82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"], [83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"], [84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"], [85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"], [86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"], [87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"], [88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"], [89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"], [90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"], [91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"], [92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"], [93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"], [94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"], [95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"], [96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"], [97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"], [98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"], [99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"], [100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"], [101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"], [102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"], [103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"], [104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"], [105, "module-neural_compressor.adaptor.tf_utils.graph_util"], [106, "module-neural_compressor.adaptor.tf_utils"], [107, "module-neural_compressor.adaptor.tf_utils.quantize_graph"], [108, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"], [109, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"], [110, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"], [111, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"], [112, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"], [113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"], [114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"], [115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"], [116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"], [117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"], [118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"], [119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"], [120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"], [121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"], [122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"], [123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"], [124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"], [125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"], [126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"], [127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"], [128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"], [129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"], [130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"], [131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"], [132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"], [133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"], [134, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"], [135, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"], [136, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"], [137, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"], [138, "module-neural_compressor.adaptor.tf_utils.transform_graph"], [139, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"], [140, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"], [141, "module-neural_compressor.adaptor.tf_utils.util"], [142, "module-neural_compressor.adaptor.torch_utils.bf16_convert"], [143, "module-neural_compressor.adaptor.torch_utils.hawq_metric"], [144, "module-neural_compressor.adaptor.torch_utils"], [145, "module-neural_compressor.adaptor.torch_utils.model_wrapper"], [146, "module-neural_compressor.adaptor.torch_utils.pattern_detector"], [147, "module-neural_compressor.adaptor.torch_utils.smooth_quant"], [148, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"], [149, "module-neural_compressor.adaptor.torch_utils.util"], [150, "module-neural_compressor.algorithm.algorithm"], [151, "module-neural_compressor.algorithm.fast_bias_correction"], [152, "module-neural_compressor.algorithm"], [153, "module-neural_compressor.algorithm.smooth_quant"], [154, "module-neural_compressor.algorithm.weight_correction"], [155, "module-neural_compressor.benchmark"], [156, "module-neural_compressor.compression.callbacks"], [157, "module-neural_compressor.compression.distillation.criterions"], [158, "module-neural_compressor.compression.distillation"], [159, "module-neural_compressor.compression"], [160, "module-neural_compressor.compression.pruner.criteria"], [161, "module-neural_compressor.compression.pruner"], [162, "module-neural_compressor.compression.pruner.model_slim.auto_slim"], [163, "module-neural_compressor.compression.pruner.model_slim"], [164, "module-neural_compressor.compression.pruner.model_slim.pattern_analyzer"], [165, "module-neural_compressor.compression.pruner.model_slim.weight_slim"], [166, "module-neural_compressor.compression.pruner.patterns"], [167, "module-neural_compressor.compression.pruner.pruners"], [168, "module-neural_compressor.compression.pruner.regs"], [169, "module-neural_compressor.compression.pruner.schedulers"], [170, "module-neural_compressor.compression.pruner.utils"], [171, "module-neural_compressor.conf.config"], [172, "module-neural_compressor.conf.dotdict"], [173, "module-neural_compressor.conf"], [174, "module-neural_compressor.conf.pythonic_config"], [175, "module-neural_compressor.config"], [176, "module-neural_compressor.contrib"], [177, "module-neural_compressor.contrib.strategy"], [178, "module-neural_compressor.contrib.strategy.sigopt"], [179, "module-neural_compressor.contrib.strategy.tpe"], [180, "module-neural_compressor.data.dataloaders.base_dataloader"], [181, "module-neural_compressor.data.dataloaders.dataloader"], [182, "module-neural_compressor.data.dataloaders.default_dataloader"], [183, "module-neural_compressor.data.dataloaders.fetcher"], [184, "module-neural_compressor.data.dataloaders"], [185, "module-neural_compressor.data.dataloaders.mxnet_dataloader"], [186, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"], [187, "module-neural_compressor.data.dataloaders.pytorch_dataloader"], [188, "module-neural_compressor.data.dataloaders.sampler"], [189, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"], [190, "module-neural_compressor.data.datasets.bert_dataset"], [191, "module-neural_compressor.data.datasets.coco_dataset"], [192, "module-neural_compressor.data.datasets.dataset"], [193, "module-neural_compressor.data.datasets.dummy_dataset"], [194, "module-neural_compressor.data.datasets.dummy_dataset_v2"], [195, "module-neural_compressor.data.datasets.imagenet_dataset"], [196, "module-neural_compressor.data.datasets"], [197, "module-neural_compressor.data.datasets.style_transfer_dataset"], [198, "module-neural_compressor.data.filters.coco_filter"], [199, "module-neural_compressor.data.filters.filter"], [200, "module-neural_compressor.data.filters"], [201, "module-neural_compressor.data"], [202, "module-neural_compressor.data.transforms.coco_transform"], [203, "module-neural_compressor.data.transforms.imagenet_transform"], [204, "module-neural_compressor.data.transforms"], [205, "module-neural_compressor.data.transforms.postprocess"], [206, "module-neural_compressor.data.transforms.tokenization"], [207, "module-neural_compressor.data.transforms.transform"], [208, "module-neural_compressor.experimental.benchmark"], [209, "module-neural_compressor.experimental.common.criterion"], [210, "module-neural_compressor.experimental.common.dataloader"], [211, "module-neural_compressor.experimental.common"], [212, "module-neural_compressor.experimental.common.metric"], [213, "module-neural_compressor.experimental.common.model"], [214, "module-neural_compressor.experimental.common.optimizer"], [215, "module-neural_compressor.experimental.common.postprocess"], [216, "module-neural_compressor.experimental.common.torch_utils"], [217, "module-neural_compressor.experimental.component"], [218, "module-neural_compressor.experimental.compression"], [219, "module-neural_compressor.experimental.compression.pruning"], [220, "module-neural_compressor.experimental.contrib"], [221, "module-neural_compressor.experimental.contrib.strategy"], [222, "module-neural_compressor.experimental.contrib.strategy.sigopt"], [223, "module-neural_compressor.experimental.contrib.strategy.tpe"], [224, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"], [225, "module-neural_compressor.experimental.data.dataloaders.dataloader"], [226, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"], [227, "module-neural_compressor.experimental.data.dataloaders.fetcher"], [228, "module-neural_compressor.experimental.data.dataloaders"], [229, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"], [230, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"], [231, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"], [232, "module-neural_compressor.experimental.data.dataloaders.sampler"], [233, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"], [234, "module-neural_compressor.experimental.data.datasets.bert_dataset"], [235, "module-neural_compressor.experimental.data.datasets.coco_dataset"], [236, "module-neural_compressor.experimental.data.datasets.dataset"], [237, "module-neural_compressor.experimental.data.datasets.dummy_dataset"], [238, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"], [239, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"], [240, "module-neural_compressor.experimental.data.datasets"], [241, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"], [242, "module-neural_compressor.experimental.data.filters.coco_filter"], [243, "module-neural_compressor.experimental.data.filters.filter"], [244, "module-neural_compressor.experimental.data.filters"], [245, "module-neural_compressor.experimental.data"], [246, "module-neural_compressor.experimental.data.transforms.imagenet_transform"], [247, "module-neural_compressor.experimental.data.transforms"], [248, "module-neural_compressor.experimental.data.transforms.tokenization"], [249, "module-neural_compressor.experimental.data.transforms.transform"], [250, "module-neural_compressor.experimental.distillation"], [251, "module-neural_compressor.experimental.export"], [252, "module-neural_compressor.experimental.export.qlinear2qdq"], [253, "module-neural_compressor.experimental.export.tf2onnx"], [254, "module-neural_compressor.experimental.export.torch2onnx"], [255, "module-neural_compressor.experimental.export.utils"], [256, "module-neural_compressor.experimental.graph_optimization"], [257, "module-neural_compressor.experimental"], [258, "module-neural_compressor.experimental.metric.bleu"], [259, "module-neural_compressor.experimental.metric.bleu_util"], [260, "module-neural_compressor.experimental.metric.coco_label_map"], [261, "module-neural_compressor.experimental.metric.coco_tools"], [262, "module-neural_compressor.experimental.metric.evaluate_squad"], [263, "module-neural_compressor.experimental.metric.f1"], [264, "module-neural_compressor.experimental.metric"], [265, "module-neural_compressor.experimental.metric.metric"], [266, "module-neural_compressor.experimental.mixed_precision"], [267, "module-neural_compressor.experimental.model_conversion"], [268, "module-neural_compressor.experimental.nas.basic_nas"], [269, "module-neural_compressor.experimental.nas.dynas"], [270, "module-neural_compressor.experimental.nas"], [271, "module-neural_compressor.experimental.nas.nas"], [272, "module-neural_compressor.experimental.nas.nas_utils"], [273, "module-neural_compressor.experimental.nas.search_algorithms"], [274, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"], [275, "module-neural_compressor.experimental.pruner_legacy.group_lasso"], [276, "module-neural_compressor.experimental.pruner_legacy"], [277, "module-neural_compressor.experimental.pruner_legacy.magnitude"], [278, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"], [279, "module-neural_compressor.experimental.pruner_legacy.pruner"], [280, "module-neural_compressor.experimental.pruning"], [281, "module-neural_compressor.experimental.pruning_recipes"], [282, "module-neural_compressor.experimental.pruning_recipes.patterns"], [283, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"], [284, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"], [285, "module-neural_compressor.experimental.pruning_v2"], [286, "module-neural_compressor.experimental.pytorch_pruner"], [287, "module-neural_compressor.experimental.pytorch_pruner.logger"], [288, "module-neural_compressor.experimental.pytorch_pruner.patterns"], [289, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"], [290, "module-neural_compressor.experimental.pytorch_pruner.pruner"], [291, "module-neural_compressor.experimental.pytorch_pruner.pruning"], [292, "module-neural_compressor.experimental.pytorch_pruner.scheduler"], [293, "module-neural_compressor.experimental.quantization"], [294, "module-neural_compressor.experimental.scheduler"], [295, "module-neural_compressor.experimental.strategy.auto_mixed_precision"], [296, "module-neural_compressor.experimental.strategy.basic"], [297, "module-neural_compressor.experimental.strategy.bayesian"], [298, "module-neural_compressor.experimental.strategy.exhaustive"], [299, "module-neural_compressor.experimental.strategy"], [300, "module-neural_compressor.experimental.strategy.mse"], [301, "module-neural_compressor.experimental.strategy.mse_v2"], [302, "module-neural_compressor.experimental.strategy.random"], [303, "module-neural_compressor.experimental.strategy.strategy"], [304, "module-neural_compressor.experimental.strategy.utils.constant"], [305, "module-neural_compressor.experimental.strategy.utils"], [306, "module-neural_compressor.experimental.strategy.utils.tuning_sampler"], [307, "module-neural_compressor.experimental.strategy.utils.tuning_space"], [308, "module-neural_compressor.experimental.strategy.utils.tuning_structs"], [309, "module-neural_compressor.experimental.strategy.utils.utility"], [310, "module-neural_compressor"], [311, "module-neural_compressor.metric.bleu"], [312, "module-neural_compressor.metric.bleu_util"], [313, "module-neural_compressor.metric.coco_label_map"], [314, "module-neural_compressor.metric.coco_tools"], [315, "module-neural_compressor.metric.evaluate_squad"], [316, "module-neural_compressor.metric.f1"], [317, "module-neural_compressor.metric"], [318, "module-neural_compressor.metric.metric"], [319, "module-neural_compressor.mix_precision"], [320, "module-neural_compressor.model.base_model"], [321, "module-neural_compressor.model"], [322, "module-neural_compressor.model.keras_model"], [323, "module-neural_compressor.model.model"], [324, "module-neural_compressor.model.mxnet_model"], [325, "module-neural_compressor.model.nets_factory"], [326, "module-neural_compressor.model.onnx_model"], [327, "module-neural_compressor.model.tensorflow_model"], [328, "module-neural_compressor.model.torch_model"], [329, "module-neural_compressor.objective"], [330, "module-neural_compressor.profiling"], [331, "module-neural_compressor.profiling.parser.factory"], [332, "module-neural_compressor.profiling.parser"], [333, "module-neural_compressor.profiling.parser.onnx_parser.factory"], [334, "module-neural_compressor.profiling.parser.onnx_parser"], [335, "module-neural_compressor.profiling.parser.onnx_parser.parser"], [336, "module-neural_compressor.profiling.parser.parser"], [337, "module-neural_compressor.profiling.parser.result"], [338, "module-neural_compressor.profiling.parser.tensorflow_parser.factory"], [339, "module-neural_compressor.profiling.parser.tensorflow_parser"], [340, "module-neural_compressor.profiling.parser.tensorflow_parser.parser"], [341, "module-neural_compressor.profiling.profiler.factory"], [342, "module-neural_compressor.profiling.profiler"], [343, "module-neural_compressor.profiling.profiler.onnxrt_profiler.factory"], [344, "module-neural_compressor.profiling.profiler.onnxrt_profiler"], [345, "module-neural_compressor.profiling.profiler.onnxrt_profiler.profiler"], [346, "module-neural_compressor.profiling.profiler.onnxrt_profiler.utils"], [347, "module-neural_compressor.profiling.profiler.profiler"], [348, "module-neural_compressor.profiling.profiler.tensorflow_profiler.factory"], [349, "module-neural_compressor.profiling.profiler.tensorflow_profiler"], [350, "module-neural_compressor.profiling.profiler.tensorflow_profiler.profiler"], [351, "module-neural_compressor.profiling.profiler.tensorflow_profiler.utils"], [352, "module-neural_compressor.quantization"], [353, "module-neural_compressor.strategy.auto"], [354, "module-neural_compressor.strategy.auto_mixed_precision"], [355, "module-neural_compressor.strategy.basic"], [356, "module-neural_compressor.strategy.bayesian"], [357, "module-neural_compressor.strategy.conservative"], [358, "module-neural_compressor.strategy.exhaustive"], [359, "module-neural_compressor.strategy.hawq_v2"], [360, "module-neural_compressor.strategy"], [361, "module-neural_compressor.strategy.mse"], [362, "module-neural_compressor.strategy.mse_v2"], [363, "module-neural_compressor.strategy.random"], [364, "module-neural_compressor.strategy.strategy"], [365, "module-neural_compressor.strategy.utils.constant"], [366, "module-neural_compressor.strategy.utils"], [367, "module-neural_compressor.strategy.utils.tuning_sampler"], [368, "module-neural_compressor.strategy.utils.tuning_space"], [369, "module-neural_compressor.strategy.utils.tuning_structs"], [370, "module-neural_compressor.strategy.utils.utility"], [371, "module-neural_compressor.template.api_doc_example"], [372, "module-neural_compressor.template"], [373, "module-neural_compressor.training"], [374, "module-neural_compressor.utils.collect_layer_histogram"], [375, "module-neural_compressor.utils.constant"], [376, "module-neural_compressor.utils.create_obj_from_config"], [377, "module-neural_compressor.utils"], [378, "module-neural_compressor.utils.kl_divergence"], [379, "module-neural_compressor.utils.load_huggingface"], [380, "module-neural_compressor.utils.logger"], [381, "module-neural_compressor.utils.neural_insights_utils"], [382, "module-neural_compressor.utils.options"], [383, "module-neural_compressor.utils.pytorch"], [384, "module-neural_compressor.utils.utility"], [385, "module-neural_compressor.utils.weights_details"], [386, "module-neural_compressor.version"]], "adaptor (class in neural_compressor.adaptor.adaptor)": [[1, "neural_compressor.adaptor.adaptor.Adaptor"]], "adaptor_registry() (in module neural_compressor.adaptor.adaptor)": [[1, "neural_compressor.adaptor.adaptor.adaptor_registry"]], "neural_compressor.adaptor.adaptor": [[1, "module-neural_compressor.adaptor.adaptor"]], "neural_compressor.adaptor": [[2, "module-neural_compressor.adaptor"]], "kerasadaptor (class in neural_compressor.adaptor.keras)": [[3, "neural_compressor.adaptor.keras.KerasAdaptor"]], "kerasquery (class in neural_compressor.adaptor.keras)": [[3, "neural_compressor.adaptor.keras.KerasQuery"]], "neural_compressor.adaptor.keras": [[3, "module-neural_compressor.adaptor.keras"]], "neural_compressor.adaptor.keras_utils.conv2d": [[4, "module-neural_compressor.adaptor.keras_utils.conv2d"]], "neural_compressor.adaptor.keras_utils.dense": [[5, "module-neural_compressor.adaptor.keras_utils.dense"]], "neural_compressor.adaptor.keras_utils.depthwise_conv2d": [[6, "module-neural_compressor.adaptor.keras_utils.depthwise_conv2d"]], "neural_compressor.adaptor.keras_utils": [[7, "module-neural_compressor.adaptor.keras_utils"]], "neural_compressor.adaptor.keras_utils.pool2d": [[8, "module-neural_compressor.adaptor.keras_utils.pool2d"]], "neural_compressor.adaptor.keras_utils.quantizer": [[9, "module-neural_compressor.adaptor.keras_utils.quantizer"]], "neural_compressor.adaptor.keras_utils.separable_conv2d": [[10, "module-neural_compressor.adaptor.keras_utils.separable_conv2d"]], "mxnetadaptor (class in neural_compressor.adaptor.mxnet)": [[11, "neural_compressor.adaptor.mxnet.MxNetAdaptor"]], "neural_compressor.adaptor.mxnet": [[11, "module-neural_compressor.adaptor.mxnet"]], "neural_compressor.adaptor.mxnet_utils": [[12, "module-neural_compressor.adaptor.mxnet_utils"]], "calibcollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CalibCollector"]], "calibdata (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CalibData"]], "collectorbase (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CollectorBase"]], "dataiterloader (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.DataIterLoader"]], "dataloaderwrap (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.DataLoaderWrap"]], "namecollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.NameCollector"]], "optype (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.OpType"]], "tensorcollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.TensorCollector"]], "amp_convert() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.amp_convert"]], "calib_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.calib_model"]], "check_mx_version() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.check_mx_version"]], "combine_capabilities() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.combine_capabilities"]], "create_data_example() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.create_data_example"]], "distribute_calib_tensors() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.distribute_calib_tensors"]], "ensure_list() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.ensure_list"]], "fuse() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.fuse"]], "get_framework_name() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.get_framework_name"]], "is_model_quantized() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.is_model_quantized"]], "isiterable() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.isiterable"]], "make_module() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.make_module"]], "make_nc_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.make_nc_model"]], "make_symbol_block() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.make_symbol_block"]], "ndarray_to_device() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.ndarray_to_device"]], "neural_compressor.adaptor.mxnet_utils.util": [[13, "module-neural_compressor.adaptor.mxnet_utils.util"]], "parse_tune_config() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.parse_tune_config"]], "prepare_dataloader() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.prepare_dataloader"]], "prepare_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.prepare_model"]], "prepare_model_data() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.prepare_model_data"]], "quantize_sym_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.quantize_sym_model"]], "query_quantizable_nodes() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.query_quantizable_nodes"]], "run_forward() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.run_forward"]], "onnxrt_integeropsadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRT_IntegerOpsAdaptor"]], "onnxrt_qdqadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRT_QDQAdaptor"]], "onnxrt_qlinearopsadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRT_QLinearOpsAdaptor"]], "onnxruntimeadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor"]], "neural_compressor.adaptor.onnxrt": [[14, "module-neural_compressor.adaptor.onnxrt"]], "onnxrtaugment (class in neural_compressor.adaptor.ox_utils.calibration)": [[15, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment"]], "neural_compressor.adaptor.ox_utils.calibration": [[15, "module-neural_compressor.adaptor.ox_utils.calibration"]], "calibratorbase (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.CalibratorBase"]], "histogramcollector (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.HistogramCollector"]], "klcalibrator (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.KLCalibrator"]], "minmaxcalibrator (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.MinMaxCalibrator"]], "percentilecalibrator (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.PercentileCalibrator"]], "calib_registry() (in module neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.calib_registry"]], "neural_compressor.adaptor.ox_utils.calibrator": [[16, "module-neural_compressor.adaptor.ox_utils.calibrator"]], "smooth_distribution() (in module neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.smooth_distribution"]], "neural_compressor.adaptor.ox_utils": [[17, "module-neural_compressor.adaptor.ox_utils"]], "activationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[18, "neural_compressor.adaptor.ox_utils.operators.activation.ActivationOperator"]], "qactivationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[18, "neural_compressor.adaptor.ox_utils.operators.activation.QActivationOperator"]], "removableactivationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[18, "neural_compressor.adaptor.ox_utils.operators.activation.RemovableActivationOperator"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[18, "module-neural_compressor.adaptor.ox_utils.operators.activation"]], "argmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.argmax)": [[19, "neural_compressor.adaptor.ox_utils.operators.argmax.ArgMaxOperator"]], "qargmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.argmax)": [[19, "neural_compressor.adaptor.ox_utils.operators.argmax.QArgMaxOperator"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[19, "module-neural_compressor.adaptor.ox_utils.operators.argmax"]], "attentionoperator (class in neural_compressor.adaptor.ox_utils.operators.attention)": [[20, "neural_compressor.adaptor.ox_utils.operators.attention.AttentionOperator"]], "qattentionoperator (class in neural_compressor.adaptor.ox_utils.operators.attention)": [[20, "neural_compressor.adaptor.ox_utils.operators.attention.QAttentionOperator"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[20, "module-neural_compressor.adaptor.ox_utils.operators.attention"]], "binaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[21, "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryOperator"]], "qbinaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[21, "neural_compressor.adaptor.ox_utils.operators.binary_op.QBinaryOperator"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[21, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"]], "concatoperator (class in neural_compressor.adaptor.ox_utils.operators.concat)": [[22, "neural_compressor.adaptor.ox_utils.operators.concat.ConcatOperator"]], "qconcatoperator (class in neural_compressor.adaptor.ox_utils.operators.concat)": [[22, "neural_compressor.adaptor.ox_utils.operators.concat.QConcatOperator"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[22, "module-neural_compressor.adaptor.ox_utils.operators.concat"]], "convoperator (class in neural_compressor.adaptor.ox_utils.operators.conv)": [[23, "neural_compressor.adaptor.ox_utils.operators.conv.ConvOperator"]], "qconvoperator (class in neural_compressor.adaptor.ox_utils.operators.conv)": [[23, "neural_compressor.adaptor.ox_utils.operators.conv.QConvOperator"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[23, "module-neural_compressor.adaptor.ox_utils.operators.conv"]], "direct8bitoperator (class in neural_compressor.adaptor.ox_utils.operators.direct_q8)": [[24, "neural_compressor.adaptor.ox_utils.operators.direct_q8.Direct8BitOperator"]], "qdirectoperator (class in neural_compressor.adaptor.ox_utils.operators.direct_q8)": [[24, "neural_compressor.adaptor.ox_utils.operators.direct_q8.QDirectOperator"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[24, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"]], "embedlayernormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.embed_layernorm)": [[25, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.EmbedLayerNormalizationOperator"]], "qembedlayernormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.embed_layernorm)": [[25, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.QEmbedLayerNormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[25, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"]], "gatheroperator (class in neural_compressor.adaptor.ox_utils.operators.gather)": [[26, "neural_compressor.adaptor.ox_utils.operators.gather.GatherOperator"]], "qgatheroperator (class in neural_compressor.adaptor.ox_utils.operators.gather)": [[26, "neural_compressor.adaptor.ox_utils.operators.gather.QGatherOperator"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[26, "module-neural_compressor.adaptor.ox_utils.operators.gather"]], "globalaveragepooloperator (class in neural_compressor.adaptor.ox_utils.operators.gavgpool)": [[27, "neural_compressor.adaptor.ox_utils.operators.gavgpool.GlobalAveragePoolOperator"]], "qglobalaveragepooloperator (class in neural_compressor.adaptor.ox_utils.operators.gavgpool)": [[27, "neural_compressor.adaptor.ox_utils.operators.gavgpool.QGlobalAveragePoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[27, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"]], "gemmoperator (class in neural_compressor.adaptor.ox_utils.operators.gemm)": [[28, "neural_compressor.adaptor.ox_utils.operators.gemm.GemmOperator"]], "qgemmoperator (class in neural_compressor.adaptor.ox_utils.operators.gemm)": [[28, "neural_compressor.adaptor.ox_utils.operators.gemm.QGemmOperator"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[28, "module-neural_compressor.adaptor.ox_utils.operators.gemm"]], "neural_compressor.adaptor.ox_utils.operators": [[29, "module-neural_compressor.adaptor.ox_utils.operators"]], "lstmoperator (class in neural_compressor.adaptor.ox_utils.operators.lstm)": [[30, "neural_compressor.adaptor.ox_utils.operators.lstm.LSTMOperator"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[30, "module-neural_compressor.adaptor.ox_utils.operators.lstm"]], "matmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[31, "neural_compressor.adaptor.ox_utils.operators.matmul.MatMulOperator"]], "qmatmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[31, "neural_compressor.adaptor.ox_utils.operators.matmul.QMatMulOperator"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[31, "module-neural_compressor.adaptor.ox_utils.operators.matmul"]], "maxpooloperator (class in neural_compressor.adaptor.ox_utils.operators.maxpool)": [[32, "neural_compressor.adaptor.ox_utils.operators.maxpool.MaxPoolOperator"]], "qmaxpooloperator (class in neural_compressor.adaptor.ox_utils.operators.maxpool)": [[32, "neural_compressor.adaptor.ox_utils.operators.maxpool.QMaxPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[32, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"]], "operator (class in neural_compressor.adaptor.ox_utils.operators.ops)": [[33, "neural_compressor.adaptor.ox_utils.operators.ops.Operator"]], "qoperator (class in neural_compressor.adaptor.ox_utils.operators.ops)": [[33, "neural_compressor.adaptor.ox_utils.operators.ops.QOperator"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[33, "module-neural_compressor.adaptor.ox_utils.operators.ops"]], "op_registry() (in module neural_compressor.adaptor.ox_utils.operators.ops)": [[33, "neural_compressor.adaptor.ox_utils.operators.ops.op_registry"]], "qop_registry() (in module neural_compressor.adaptor.ox_utils.operators.ops)": [[33, "neural_compressor.adaptor.ox_utils.operators.ops.qop_registry"]], "padoperator (class in neural_compressor.adaptor.ox_utils.operators.pad)": [[34, "neural_compressor.adaptor.ox_utils.operators.pad.PadOperator"]], "qpadoperator (class in neural_compressor.adaptor.ox_utils.operators.pad)": [[34, "neural_compressor.adaptor.ox_utils.operators.pad.QPadOperator"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[34, "module-neural_compressor.adaptor.ox_utils.operators.pad"]], "pooloperator (class in neural_compressor.adaptor.ox_utils.operators.pooling)": [[35, "neural_compressor.adaptor.ox_utils.operators.pooling.PoolOperator"]], "qpooloperator (class in neural_compressor.adaptor.ox_utils.operators.pooling)": [[35, "neural_compressor.adaptor.ox_utils.operators.pooling.QPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[35, "module-neural_compressor.adaptor.ox_utils.operators.pooling"]], "qresizeoperator (class in neural_compressor.adaptor.ox_utils.operators.resize)": [[36, "neural_compressor.adaptor.ox_utils.operators.resize.QResizeOperator"]], "resizeoperator (class in neural_compressor.adaptor.ox_utils.operators.resize)": [[36, "neural_compressor.adaptor.ox_utils.operators.resize.ResizeOperator"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[36, "module-neural_compressor.adaptor.ox_utils.operators.resize"]], "qsplitoperator (class in neural_compressor.adaptor.ox_utils.operators.split)": [[37, "neural_compressor.adaptor.ox_utils.operators.split.QSplitOperator"]], "splitoperator (class in neural_compressor.adaptor.ox_utils.operators.split)": [[37, "neural_compressor.adaptor.ox_utils.operators.split.SplitOperator"]], "neural_compressor.adaptor.ox_utils.operators.split": [[37, "module-neural_compressor.adaptor.ox_utils.operators.split"]], "quantizer (class in neural_compressor.adaptor.ox_utils.quantizer)": [[38, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer"]], "neural_compressor.adaptor.ox_utils.quantizer": [[38, "module-neural_compressor.adaptor.ox_utils.quantizer"]], "quantformat (class in neural_compressor.adaptor.ox_utils.util)": [[39, "neural_compressor.adaptor.ox_utils.util.QuantFormat"]], "quanttype (class in neural_compressor.adaptor.ox_utils.util)": [[39, "neural_compressor.adaptor.ox_utils.util.QuantType"]], "quantizationmode (class in neural_compressor.adaptor.ox_utils.util)": [[39, "neural_compressor.adaptor.ox_utils.util.QuantizationMode"]], "quantizedinitializer (class in neural_compressor.adaptor.ox_utils.util)": [[39, "neural_compressor.adaptor.ox_utils.util.QuantizedInitializer"]], "quantizedvalue (class in neural_compressor.adaptor.ox_utils.util)": [[39, "neural_compressor.adaptor.ox_utils.util.QuantizedValue"]], "quantizedvaluetype (class in neural_compressor.adaptor.ox_utils.util)": [[39, "neural_compressor.adaptor.ox_utils.util.QuantizedValueType"]], "valueinfo (class in neural_compressor.adaptor.ox_utils.util)": [[39, "neural_compressor.adaptor.ox_utils.util.ValueInfo"]], "adjust_weights_per_input() (in module neural_compressor.adaptor.ox_utils.util)": [[39, "neural_compressor.adaptor.ox_utils.util.adjust_weights_per_input"]], "adjust_weights_per_op() (in module neural_compressor.adaptor.ox_utils.util)": [[39, "neural_compressor.adaptor.ox_utils.util.adjust_weights_per_op"]], "attribute_to_kwarg() (in module neural_compressor.adaptor.ox_utils.util)": [[39, "neural_compressor.adaptor.ox_utils.util.attribute_to_kwarg"]], "calculate_scale_zp() (in module neural_compressor.adaptor.ox_utils.util)": [[39, "neural_compressor.adaptor.ox_utils.util.calculate_scale_zp"]], "cast_tensor() (in module neural_compressor.adaptor.ox_utils.util)": [[39, "neural_compressor.adaptor.ox_utils.util.cast_tensor"]], "collate_preds() (in module neural_compressor.adaptor.ox_utils.util)": [[39, "neural_compressor.adaptor.ox_utils.util.collate_preds"]], "dequantize_data() (in module neural_compressor.adaptor.ox_utils.util)": [[39, "neural_compressor.adaptor.ox_utils.util.dequantize_data"]], "dequantize_data_with_scale_zero() (in module neural_compressor.adaptor.ox_utils.util)": [[39, "neural_compressor.adaptor.ox_utils.util.dequantize_data_with_scale_zero"]], "dtype_to_name() (in module neural_compressor.adaptor.ox_utils.util)": [[39, "neural_compressor.adaptor.ox_utils.util.dtype_to_name"]], "find_by_name() (in module neural_compressor.adaptor.ox_utils.util)": [[39, "neural_compressor.adaptor.ox_utils.util.find_by_name"]], "float_to_bfloat16() (in module neural_compressor.adaptor.ox_utils.util)": [[39, "neural_compressor.adaptor.ox_utils.util.float_to_bfloat16"]], "float_to_float16() (in module neural_compressor.adaptor.ox_utils.util)": [[39, "neural_compressor.adaptor.ox_utils.util.float_to_float16"]], "fold_scale() (in module neural_compressor.adaptor.ox_utils.util)": [[39, "neural_compressor.adaptor.ox_utils.util.fold_scale"]], "get_smooth_scales_per_input() (in module neural_compressor.adaptor.ox_utils.util)": [[39, "neural_compressor.adaptor.ox_utils.util.get_smooth_scales_per_input"]], "get_smooth_scales_per_op() (in module neural_compressor.adaptor.ox_utils.util)": [[39, "neural_compressor.adaptor.ox_utils.util.get_smooth_scales_per_op"]], "insert_smooth_mul_op_per_input() (in module neural_compressor.adaptor.ox_utils.util)": [[39, "neural_compressor.adaptor.ox_utils.util.insert_smooth_mul_op_per_input"]], "insert_smooth_mul_op_per_op() (in module neural_compressor.adaptor.ox_utils.util)": [[39, "neural_compressor.adaptor.ox_utils.util.insert_smooth_mul_op_per_op"]], "is_b_transposed() (in module neural_compressor.adaptor.ox_utils.util)": [[39, "neural_compressor.adaptor.ox_utils.util.is_B_transposed"]], "make_dquant_node() (in module neural_compressor.adaptor.ox_utils.util)": [[39, "neural_compressor.adaptor.ox_utils.util.make_dquant_node"]], "make_quant_node() (in module neural_compressor.adaptor.ox_utils.util)": [[39, "neural_compressor.adaptor.ox_utils.util.make_quant_node"]], "neural_compressor.adaptor.ox_utils.util": [[39, "module-neural_compressor.adaptor.ox_utils.util"]], "quantize_data() (in module neural_compressor.adaptor.ox_utils.util)": [[39, "neural_compressor.adaptor.ox_utils.util.quantize_data"]], "quantize_data_per_channel() (in module neural_compressor.adaptor.ox_utils.util)": [[39, "neural_compressor.adaptor.ox_utils.util.quantize_data_per_channel"]], "quantize_data_with_scale_zero() (in module neural_compressor.adaptor.ox_utils.util)": [[39, "neural_compressor.adaptor.ox_utils.util.quantize_data_with_scale_zero"]], "quantize_nparray() (in module neural_compressor.adaptor.ox_utils.util)": [[39, "neural_compressor.adaptor.ox_utils.util.quantize_nparray"]], "remove_init_from_model_input() (in module neural_compressor.adaptor.ox_utils.util)": [[39, "neural_compressor.adaptor.ox_utils.util.remove_init_from_model_input"]], "split_shared_bias() (in module neural_compressor.adaptor.ox_utils.util)": [[39, "neural_compressor.adaptor.ox_utils.util.split_shared_bias"]], "trt_env_setup() (in module neural_compressor.adaptor.ox_utils.util)": [[39, "neural_compressor.adaptor.ox_utils.util.trt_env_setup"]], "pytorchadaptor (class in neural_compressor.adaptor.pytorch)": [[40, "neural_compressor.adaptor.pytorch.PyTorchAdaptor"]], "pytorchquery (class in neural_compressor.adaptor.pytorch)": [[40, "neural_compressor.adaptor.pytorch.PyTorchQuery"]], "pytorch_fxadaptor (class in neural_compressor.adaptor.pytorch)": [[40, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor"]], "pytorch_ipexadaptor (class in neural_compressor.adaptor.pytorch)": [[40, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor"]], "templateadaptor (class in neural_compressor.adaptor.pytorch)": [[40, "neural_compressor.adaptor.pytorch.TemplateAdaptor"]], "get_ops_recursively() (in module neural_compressor.adaptor.pytorch)": [[40, "neural_compressor.adaptor.pytorch.get_ops_recursively"]], "neural_compressor.adaptor.pytorch": [[40, "module-neural_compressor.adaptor.pytorch"]], "querybackendcapability (class in neural_compressor.adaptor.query)": [[41, "neural_compressor.adaptor.query.QueryBackendCapability"]], "neural_compressor.adaptor.query": [[41, "module-neural_compressor.adaptor.query"]], "tensorflowadaptor (class in neural_compressor.adaptor.tensorflow)": [[42, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor"]], "tensorflowquery (class in neural_compressor.adaptor.tensorflow)": [[42, "neural_compressor.adaptor.tensorflow.TensorflowQuery"]], "tensorflow_itexadaptor (class in neural_compressor.adaptor.tensorflow)": [[42, "neural_compressor.adaptor.tensorflow.Tensorflow_ITEXAdaptor"]], "neural_compressor.adaptor.tensorflow": [[42, "module-neural_compressor.adaptor.tensorflow"]], "graphconverter (class in neural_compressor.adaptor.tf_utils.graph_converter)": [[43, "neural_compressor.adaptor.tf_utils.graph_converter.GraphConverter"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[43, "module-neural_compressor.adaptor.tf_utils.graph_converter"]], "graphconverterwithoutcalib (class in neural_compressor.adaptor.tf_utils.graph_converter_without_calib)": [[44, "neural_compressor.adaptor.tf_utils.graph_converter_without_calib.GraphConverterWithoutCalib"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[44, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"]], "bf16convert (class in neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert)": [[45, "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert.BF16Convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[45, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[46, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"]], "convertaddtobiasaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd)": [[47, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd.ConvertAddToBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[47, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"]], "convertlayoutoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout)": [[48, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout.ConvertLayoutOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[48, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"]], "convertleakyreluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu)": [[49, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu.ConvertLeakyReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[49, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"]], "convertnantorandom (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random)": [[50, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random.ConvertNanToRandom"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"]], "convertplaceholdertoconst (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const)": [[51, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"]], "dequantizecastoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer)": [[52, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer.DequantizeCastOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"]], "dilatedcontraction (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction)": [[53, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction.DilatedContraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"]], "injectdummybiasaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd)": [[54, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd.InjectDummyBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"]], "expanddimsoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer)": [[55, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer.ExpandDimsOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"]], "fetchweightfromreshapeoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape)": [[56, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape.FetchWeightFromReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "foldbatchnormnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm)": [[57, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"]], "graphfoldconstantoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant)": [[58, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"]], "fusebiasaddandaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add)": [[59, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add.FuseBiasAddAndAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"]], "fusecolumnwisemuloptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul)": [[60, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul.FuseColumnWiseMulOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"]], "fuseconvwithmathoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math)": [[61, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math.FuseConvWithMathOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"]], "fusedecomposedbnoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[62, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.FuseDecomposedBNOptimizer"]], "bypass_reshape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[62, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.bypass_reshape"]], "get_const_dim_count() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[62, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.get_const_dim_count"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[62, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[62, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_name_from_input"]], "valid_reshape_inputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[62, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.valid_reshape_inputs"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[62, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.values_from_const"]], "fusedecomposedinoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[63, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.FuseDecomposedINOptimizer"]], "bypass_reshape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[63, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.bypass_reshape"]], "get_const_dim_count() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[63, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.get_const_dim_count"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[63, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[63, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.node_name_from_input"]], "valid_reshape_inputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[63, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.valid_reshape_inputs"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[63, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.values_from_const"]], "fusegeluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu)": [[64, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu.FuseGeluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"]], "fuselayernormoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[65, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.FuseLayerNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[65, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[65, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.node_name_from_input"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[65, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.values_from_const"]], "fusepadwithconv2doptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv.FusePadWithConv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"]], "fusepadwithfp32conv2doptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.FusePadWithFP32Conv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "fusetransposereshapeoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose.FuseTransposeReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"]], "graphcseoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer)": [[69, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer.GraphCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"]], "grappleroptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass)": [[70, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass.GrapplerOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"]], "insertprintminmaxnode (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node)": [[72, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node.InsertPrintMinMaxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"]], "movesqueezeafterreluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu)": [[73, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu.MoveSqueezeAfterReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"]], "preoptimization (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize)": [[74, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.PreOptimization"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"]], "removetrainingnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes)": [[75, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes.RemoveTrainingNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"]], "renamebatchnormoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm)": [[76, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm.RenameBatchNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"]], "splitsharedinputoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input)": [[77, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input.SplitSharedInputOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"]], "stripequivalentnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes)": [[78, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes.StripEquivalentNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"]], "stripunusednodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes)": [[79, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes.StripUnusedNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"]], "switchoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer)": [[80, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer.SwitchOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"]], "graphrewriterbase (class in neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base)": [[81, "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base.GraphRewriterBase"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"]], "freezefakequantopoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant)": [[83, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant.FreezeFakeQuantOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"]], "freezevaluetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value)": [[84, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"]], "freezevaluewithoutcalibtransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib)": [[85, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"]], "fuseconvredundantdequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize)": [[86, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.FuseConvRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "fuseconvrequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize)": [[87, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize.FuseConvRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"]], "fusematmulredundantdequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize)": [[88, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.FuseMatMulRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "fusematmulrequantizedequantizenewapitransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[89, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeNewAPITransformer"]], "fusematmulrequantizedequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[89, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeTransformer"]], "fusematmulrequantizenewapitransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[89, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeNewAPITransformer"]], "fusematmulrequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[89, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"]], "metainfochangingmemopoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer.MetaInfoChangingMemOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"]], "posthostconstconverter (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter)": [[92, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter.PostHostConstConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"]], "postcseoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse)": [[93, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse.PostCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"]], "quantizedrnnconverter (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert)": [[94, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert.QuantizedRNNConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"]], "scalepropagationtransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation)": [[95, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation.ScaleProPagationTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"]], "onnxgraph (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"]], "onnxnode (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"]], "onnxopschema (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.OnnxOpSchema"]], "get_max_supported_opset_version() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.get_max_supported_opset_version"]], "get_schema() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.get_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"]], "seqtype (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[100, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.SeqType"]], "add_port_to_name() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[100, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.add_port_to_name"]], "are_shapes_equal() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[100, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.are_shapes_equal"]], "assert_error() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[100, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.assert_error"]], "compute_const_folding_using_tf() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[100, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.compute_const_folding_using_tf"]], "convert_tensorflow_tensor_to_onnx() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[100, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.convert_tensorflow_tensor_to_onnx"]], "find_opset() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[100, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.find_opset"]], "get_index_from_strided_slice_of_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[100, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_index_from_strided_slice_of_shape"]], "get_subgraphs_from_onnx() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[100, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_subgraphs_from_onnx"]], "get_tensorflow_node_attr() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[100, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_node_attr"]], "get_tensorflow_node_shape_attr() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[100, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_node_shape_attr"]], "get_tensorflow_tensor_data() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[100, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_tensor_data"]], "get_tensorflow_tensor_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[100, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_tensor_shape"]], "infer_onnx_shape_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[100, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.infer_onnx_shape_dtype"]], "initialize_name_counter() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[100, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.initialize_name_counter"]], "is_list_or_tuple() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[100, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.is_list_or_tuple"]], "is_onnx_domain() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[100, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.is_onnx_domain"]], "make_onnx_inputs_outputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[100, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.make_onnx_inputs_outputs"]], "make_onnx_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[100, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.make_onnx_shape"]], "map_numpy_to_onnx_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[100, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_numpy_to_onnx_dtype"]], "map_onnx_to_numpy_type() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[100, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_onnx_to_numpy_type"]], "map_tensorflow_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[100, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_tensorflow_dtype"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"]], "read_tensorflow_node_attrs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[100, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.read_tensorflow_node_attrs"]], "save_protobuf() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[100, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.save_protobuf"]], "set_name() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[100, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.set_name"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"]], "generategraphwithqdqpattern (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern)": [[102, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern.GenerateGraphWithQDQPattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"]], "mergeduplicatedqdqoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq.MergeDuplicatedQDQOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "shareqdqforitexypatternoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern.ShareQDQForItexYPatternOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "graphanalyzer (class in neural_compressor.adaptor.tf_utils.graph_util)": [[105, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer"]], "graphrewriterhelper (class in neural_compressor.adaptor.tf_utils.graph_util)": [[105, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper"]], "neural_compressor.adaptor.tf_utils.graph_util": [[105, "module-neural_compressor.adaptor.tf_utils.graph_util"]], "neural_compressor.adaptor.tf_utils": [[106, "module-neural_compressor.adaptor.tf_utils"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[107, "module-neural_compressor.adaptor.tf_utils.quantize_graph"]], "fakequantize (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize)": [[108, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantize"]], "fakequantizebase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize)": [[108, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantizeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[108, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[109, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"]], "quantizeconfig (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config)": [[110, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[110, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"]], "init_quantize_config() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper)": [[111, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper.init_quantize_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[111, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"]], "qat_clone_function() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper)": [[111, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper.qat_clone_function"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[112, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"]], "config_quantizable_layers() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer)": [[113, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer.config_quantizable_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "quantizelayeradd (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add)": [[114, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add.QuantizeLayerAdd"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "quantizelayerbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base)": [[115, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base.QuantizeLayerBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "quantizelayerbatchnormalization (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn)": [[116, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn.QuantizeLayerBatchNormalization"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "quantizewrapper (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper)": [[117, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapper"]], "quantizewrapperbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper)": [[117, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn)": [[118, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2)": [[119, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv)": [[120, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"]], "fusenodestartwithdeconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv)": [[121, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"]], "fusenodestartwithfusedinstancenorm (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in)": [[122, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"]], "fusenodestartwithmatmul (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul)": [[123, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"]], "fusenodestartwithpooling (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling)": [[124, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"]], "optimizeqdqgraph (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq)": [[126, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.OptimizeQDQGraph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"]], "quantizegraphbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base)": [[127, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase"]], "quantizenodebase (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base)": [[127, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn)": [[128, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2)": [[129, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv)": [[130, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"]], "quantizegraphforintel (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu)": [[131, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu.QuantizeGraphForIntel"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"]], "fusenodestartwithmatmul (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul)": [[132, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"]], "fusenodestartwithpooling (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling)": [[133, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"]], "quantizegraphhelper (class in neural_compressor.adaptor.tf_utils.quantize_graph_common)": [[134, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[134, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"]], "tensorflowqdqtoonnxqdqconverter (class in neural_compressor.adaptor.tf_utils.tf2onnx_converter)": [[135, "neural_compressor.adaptor.tf_utils.tf2onnx_converter.TensorflowQDQToOnnxQDQConverter"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[135, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"]], "biascorrection (class in neural_compressor.adaptor.tf_utils.transform_graph.bias_correction)": [[136, "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction.BiasCorrection"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[136, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"]], "graphtransformbase (class in neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base)": [[137, "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.GraphTransformBase"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[137, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[138, "module-neural_compressor.adaptor.tf_utils.transform_graph"]], "insertlogging (class in neural_compressor.adaptor.tf_utils.transform_graph.insert_logging)": [[139, "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging.InsertLogging"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[139, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"]], "rerangequantizedconcat (class in neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat)": [[140, "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat.RerangeQuantizedConcat"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[140, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"]], "collate_tf_preds() (in module neural_compressor.adaptor.tf_utils.util)": [[141, "neural_compressor.adaptor.tf_utils.util.collate_tf_preds"]], "disable_random() (in module neural_compressor.adaptor.tf_utils.util)": [[141, "neural_compressor.adaptor.tf_utils.util.disable_random"]], "fix_ref_type_of_graph_def() (in module neural_compressor.adaptor.tf_utils.util)": [[141, "neural_compressor.adaptor.tf_utils.util.fix_ref_type_of_graph_def"]], "generate_feed_dict() (in module neural_compressor.adaptor.tf_utils.util)": [[141, "neural_compressor.adaptor.tf_utils.util.generate_feed_dict"]], "get_estimator_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[141, "neural_compressor.adaptor.tf_utils.util.get_estimator_graph"]], "get_graph_def() (in module neural_compressor.adaptor.tf_utils.util)": [[141, "neural_compressor.adaptor.tf_utils.util.get_graph_def"]], "get_input_output_node_names() (in module neural_compressor.adaptor.tf_utils.util)": [[141, "neural_compressor.adaptor.tf_utils.util.get_input_output_node_names"]], "get_model_input_shape() (in module neural_compressor.adaptor.tf_utils.util)": [[141, "neural_compressor.adaptor.tf_utils.util.get_model_input_shape"]], "get_tensor_by_name() (in module neural_compressor.adaptor.tf_utils.util)": [[141, "neural_compressor.adaptor.tf_utils.util.get_tensor_by_name"]], "get_tensor_val_from_graph_node() (in module neural_compressor.adaptor.tf_utils.util)": [[141, "neural_compressor.adaptor.tf_utils.util.get_tensor_val_from_graph_node"]], "int8_node_name_reverse() (in module neural_compressor.adaptor.tf_utils.util)": [[141, "neural_compressor.adaptor.tf_utils.util.int8_node_name_reverse"]], "is_ckpt_format() (in module neural_compressor.adaptor.tf_utils.util)": [[141, "neural_compressor.adaptor.tf_utils.util.is_ckpt_format"]], "is_saved_model_format() (in module neural_compressor.adaptor.tf_utils.util)": [[141, "neural_compressor.adaptor.tf_utils.util.is_saved_model_format"]], "iterator_sess_run() (in module neural_compressor.adaptor.tf_utils.util)": [[141, "neural_compressor.adaptor.tf_utils.util.iterator_sess_run"]], "neural_compressor.adaptor.tf_utils.util": [[141, "module-neural_compressor.adaptor.tf_utils.util"]], "read_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[141, "neural_compressor.adaptor.tf_utils.util.read_graph"]], "strip_equivalent_nodes() (in module neural_compressor.adaptor.tf_utils.util)": [[141, "neural_compressor.adaptor.tf_utils.util.strip_equivalent_nodes"]], "strip_unused_nodes() (in module neural_compressor.adaptor.tf_utils.util)": [[141, "neural_compressor.adaptor.tf_utils.util.strip_unused_nodes"]], "tf_diagnosis_helper() (in module neural_compressor.adaptor.tf_utils.util)": [[141, "neural_compressor.adaptor.tf_utils.util.tf_diagnosis_helper"]], "version1_eq_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[141, "neural_compressor.adaptor.tf_utils.util.version1_eq_version2"]], "version1_gt_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[141, "neural_compressor.adaptor.tf_utils.util.version1_gt_version2"]], "version1_gte_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[141, "neural_compressor.adaptor.tf_utils.util.version1_gte_version2"]], "version1_lt_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[141, "neural_compressor.adaptor.tf_utils.util.version1_lt_version2"]], "version1_lte_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[141, "neural_compressor.adaptor.tf_utils.util.version1_lte_version2"]], "write_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[141, "neural_compressor.adaptor.tf_utils.util.write_graph"]], "bf16modulewrapper (class in neural_compressor.adaptor.torch_utils.bf16_convert)": [[142, "neural_compressor.adaptor.torch_utils.bf16_convert.BF16ModuleWrapper"]], "convert() (in module neural_compressor.adaptor.torch_utils.bf16_convert)": [[142, "neural_compressor.adaptor.torch_utils.bf16_convert.Convert"]], "bf16_symbolic_trace() (in module neural_compressor.adaptor.torch_utils.bf16_convert)": [[142, "neural_compressor.adaptor.torch_utils.bf16_convert.bf16_symbolic_trace"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[142, "module-neural_compressor.adaptor.torch_utils.bf16_convert"]], "hessiantrace (class in neural_compressor.adaptor.torch_utils.hawq_metric)": [[143, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace"]], "node_collector (class in neural_compressor.adaptor.torch_utils.hawq_metric)": [[143, "neural_compressor.adaptor.torch_utils.hawq_metric.Node_collector"]], "compare_weights() (in module neural_compressor.adaptor.torch_utils.hawq_metric)": [[143, "neural_compressor.adaptor.torch_utils.hawq_metric.compare_weights"]], "hawq_top() (in module neural_compressor.adaptor.torch_utils.hawq_metric)": [[143, "neural_compressor.adaptor.torch_utils.hawq_metric.hawq_top"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[143, "module-neural_compressor.adaptor.torch_utils.hawq_metric"]], "neural_compressor.adaptor.torch_utils": [[144, "module-neural_compressor.adaptor.torch_utils"]], "neural_compressor.adaptor.torch_utils.model_wrapper": [[145, "module-neural_compressor.adaptor.torch_utils.model_wrapper"]], "transformerbasedmodelblockpatterndetector (class in neural_compressor.adaptor.torch_utils.pattern_detector)": [[146, "neural_compressor.adaptor.torch_utils.pattern_detector.TransformerBasedModelBlockPatternDetector"]], "neural_compressor.adaptor.torch_utils.pattern_detector": [[146, "module-neural_compressor.adaptor.torch_utils.pattern_detector"]], "graphtrace (class in neural_compressor.adaptor.torch_utils.smooth_quant)": [[147, "neural_compressor.adaptor.torch_utils.smooth_quant.GraphTrace"]], "torchsmoothquant (class in neural_compressor.adaptor.torch_utils.smooth_quant)": [[147, "neural_compressor.adaptor.torch_utils.smooth_quant.TorchSmoothQuant"]], "get_module() (in module neural_compressor.adaptor.torch_utils.smooth_quant)": [[147, "neural_compressor.adaptor.torch_utils.smooth_quant.get_module"]], "neural_compressor.adaptor.torch_utils.smooth_quant": [[147, "module-neural_compressor.adaptor.torch_utils.smooth_quant"]], "set_module() (in module neural_compressor.adaptor.torch_utils.smooth_quant)": [[147, "neural_compressor.adaptor.torch_utils.smooth_quant.set_module"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[148, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"]], "symbolic_trace() (in module neural_compressor.adaptor.torch_utils.symbolic_trace)": [[148, "neural_compressor.adaptor.torch_utils.symbolic_trace.symbolic_trace"]], "trace_and_fuse_sub_graph() (in module neural_compressor.adaptor.torch_utils.symbolic_trace)": [[148, "neural_compressor.adaptor.torch_utils.symbolic_trace.trace_and_fuse_sub_graph"]], "append_attr() (in module neural_compressor.adaptor.torch_utils.util)": [[149, "neural_compressor.adaptor.torch_utils.util.append_attr"]], "auto_copy() (in module neural_compressor.adaptor.torch_utils.util)": [[149, "neural_compressor.adaptor.torch_utils.util.auto_copy"]], "calculate_quant_min_max() (in module neural_compressor.adaptor.torch_utils.util)": [[149, "neural_compressor.adaptor.torch_utils.util.calculate_quant_min_max"]], "check_cfg_and_qconfig() (in module neural_compressor.adaptor.torch_utils.util)": [[149, "neural_compressor.adaptor.torch_utils.util.check_cfg_and_qconfig"]], "collate_torch_preds() (in module neural_compressor.adaptor.torch_utils.util)": [[149, "neural_compressor.adaptor.torch_utils.util.collate_torch_preds"]], "fetch_module() (in module neural_compressor.adaptor.torch_utils.util)": [[149, "neural_compressor.adaptor.torch_utils.util.fetch_module"]], "generate_activation_observer() (in module neural_compressor.adaptor.torch_utils.util)": [[149, "neural_compressor.adaptor.torch_utils.util.generate_activation_observer"]], "get_depth() (in module neural_compressor.adaptor.torch_utils.util)": [[149, "neural_compressor.adaptor.torch_utils.util.get_depth"]], "get_dict_at_depth() (in module neural_compressor.adaptor.torch_utils.util)": [[149, "neural_compressor.adaptor.torch_utils.util.get_dict_at_depth"]], "get_element_under_depth() (in module neural_compressor.adaptor.torch_utils.util)": [[149, "neural_compressor.adaptor.torch_utils.util.get_element_under_depth"]], "get_embedding_contiguous() (in module neural_compressor.adaptor.torch_utils.util)": [[149, "neural_compressor.adaptor.torch_utils.util.get_embedding_contiguous"]], "get_example_input() (in module neural_compressor.adaptor.torch_utils.util)": [[149, "neural_compressor.adaptor.torch_utils.util.get_example_input"]], "get_fallback_order() (in module neural_compressor.adaptor.torch_utils.util)": [[149, "neural_compressor.adaptor.torch_utils.util.get_fallback_order"]], "get_mse_order_per_fp32() (in module neural_compressor.adaptor.torch_utils.util)": [[149, "neural_compressor.adaptor.torch_utils.util.get_mse_order_per_fp32"]], "get_mse_order_per_int8() (in module neural_compressor.adaptor.torch_utils.util)": [[149, "neural_compressor.adaptor.torch_utils.util.get_mse_order_per_int8"]], "get_op_type_by_name() (in module neural_compressor.adaptor.torch_utils.util)": [[149, "neural_compressor.adaptor.torch_utils.util.get_op_type_by_name"]], "get_quantizable_ops_from_cfgs() (in module neural_compressor.adaptor.torch_utils.util)": [[149, "neural_compressor.adaptor.torch_utils.util.get_quantizable_ops_from_cfgs"]], "get_torch_version() (in module neural_compressor.adaptor.torch_utils.util)": [[149, "neural_compressor.adaptor.torch_utils.util.get_torch_version"]], "input2tuple() (in module neural_compressor.adaptor.torch_utils.util)": [[149, "neural_compressor.adaptor.torch_utils.util.input2tuple"]], "is_fused_module() (in module neural_compressor.adaptor.torch_utils.util)": [[149, "neural_compressor.adaptor.torch_utils.util.is_fused_module"]], "match_datatype_pattern() (in module neural_compressor.adaptor.torch_utils.util)": [[149, "neural_compressor.adaptor.torch_utils.util.match_datatype_pattern"]], "neural_compressor.adaptor.torch_utils.util": [[149, "module-neural_compressor.adaptor.torch_utils.util"]], "paser_cfgs() (in module neural_compressor.adaptor.torch_utils.util)": [[149, "neural_compressor.adaptor.torch_utils.util.paser_cfgs"]], "set_module() (in module neural_compressor.adaptor.torch_utils.util)": [[149, "neural_compressor.adaptor.torch_utils.util.set_module"]], "simple_inference() (in module neural_compressor.adaptor.torch_utils.util)": [[149, "neural_compressor.adaptor.torch_utils.util.simple_inference"]], "update_sq_scale() (in module neural_compressor.adaptor.torch_utils.util)": [[149, "neural_compressor.adaptor.torch_utils.util.update_sq_scale"]], "algorithms (class in neural_compressor.algorithm.algorithm)": [[150, "neural_compressor.algorithm.algorithm.ALGORITHMS"]], "algorithm (class in neural_compressor.algorithm.algorithm)": [[150, "neural_compressor.algorithm.algorithm.Algorithm"]], "algorithmscheduler (class in neural_compressor.algorithm.algorithm)": [[150, "neural_compressor.algorithm.algorithm.AlgorithmScheduler"]], "algorithm_registry() (in module neural_compressor.algorithm.algorithm)": [[150, "neural_compressor.algorithm.algorithm.algorithm_registry"]], "neural_compressor.algorithm.algorithm": [[150, "module-neural_compressor.algorithm.algorithm"]], "fastbiascorrection (class in neural_compressor.algorithm.fast_bias_correction)": [[151, "neural_compressor.algorithm.fast_bias_correction.FastBiasCorrection"]], "neural_compressor.algorithm.fast_bias_correction": [[151, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm": [[152, "module-neural_compressor.algorithm"]], "smoothquant (class in neural_compressor.algorithm.smooth_quant)": [[153, "neural_compressor.algorithm.smooth_quant.SmoothQuant"]], "neural_compressor.algorithm.smooth_quant": [[153, "module-neural_compressor.algorithm.smooth_quant"]], "weightcorrection (class in neural_compressor.algorithm.weight_correction)": [[154, "neural_compressor.algorithm.weight_correction.WeightCorrection"]], "neural_compressor.algorithm.weight_correction": [[154, "module-neural_compressor.algorithm.weight_correction"]], "benchmark_with_raw_cmd() (in module neural_compressor.benchmark)": [[155, "neural_compressor.benchmark.benchmark_with_raw_cmd"]], "call_one() (in module neural_compressor.benchmark)": [[155, "neural_compressor.benchmark.call_one"]], "config_instance() (in module neural_compressor.benchmark)": [[155, "neural_compressor.benchmark.config_instance"]], "fit() (in module neural_compressor.benchmark)": [[155, "neural_compressor.benchmark.fit"]], "generate_prefix() (in module neural_compressor.benchmark)": [[155, "neural_compressor.benchmark.generate_prefix"]], "get_architecture() (in module neural_compressor.benchmark)": [[155, "neural_compressor.benchmark.get_architecture"]], "get_bounded_threads() (in module neural_compressor.benchmark)": [[155, "neural_compressor.benchmark.get_bounded_threads"]], "get_core_ids() (in module neural_compressor.benchmark)": [[155, "neural_compressor.benchmark.get_core_ids"]], "get_physical_ids() (in module neural_compressor.benchmark)": [[155, "neural_compressor.benchmark.get_physical_ids"]], "get_threads() (in module neural_compressor.benchmark)": [[155, "neural_compressor.benchmark.get_threads"]], "get_threads_per_core() (in module neural_compressor.benchmark)": [[155, "neural_compressor.benchmark.get_threads_per_core"]], "neural_compressor.benchmark": [[155, "module-neural_compressor.benchmark"]], "profile() (in module neural_compressor.benchmark)": [[155, "neural_compressor.benchmark.profile"]], "run_instance() (in module neural_compressor.benchmark)": [[155, "neural_compressor.benchmark.run_instance"]], "set_all_env_var() (in module neural_compressor.benchmark)": [[155, "neural_compressor.benchmark.set_all_env_var"]], "set_env_var() (in module neural_compressor.benchmark)": [[155, "neural_compressor.benchmark.set_env_var"]], "summary_benchmark() (in module neural_compressor.benchmark)": [[155, "neural_compressor.benchmark.summary_benchmark"]], "basecallbacks (class in neural_compressor.compression.callbacks)": [[156, "neural_compressor.compression.callbacks.BaseCallbacks"]], "distillationcallbacks (class in neural_compressor.compression.callbacks)": [[156, "neural_compressor.compression.callbacks.DistillationCallbacks"]], "pruningcallbacks (class in neural_compressor.compression.callbacks)": [[156, "neural_compressor.compression.callbacks.PruningCallbacks"]], "quantizationawaretrainingcallbacks (class in neural_compressor.compression.callbacks)": [[156, "neural_compressor.compression.callbacks.QuantizationAwareTrainingCallbacks"]], "_epoch_ran (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[156, "neural_compressor.compression.callbacks.DistillationCallbacks._epoch_ran"]], "best_model (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[156, "neural_compressor.compression.callbacks.DistillationCallbacks.best_model"]], "best_score (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[156, "neural_compressor.compression.callbacks.DistillationCallbacks.best_score"]], "eval_frequency (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[156, "neural_compressor.compression.callbacks.DistillationCallbacks.eval_frequency"]], "neural_compressor.compression.callbacks": [[156, "module-neural_compressor.compression.callbacks"]], "criterions (class in neural_compressor.compression.distillation.criterions)": [[157, "neural_compressor.compression.distillation.criterions.Criterions"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[157, "neural_compressor.compression.distillation.criterions.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationframework (class in neural_compressor.compression.distillation.criterions)": [[157, "neural_compressor.compression.distillation.criterions.KnowledgeDistillationFramework"]], "knowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[157, "neural_compressor.compression.distillation.criterions.KnowledgeDistillationLoss"]], "pytorchcriterions (class in neural_compressor.compression.distillation.criterions)": [[157, "neural_compressor.compression.distillation.criterions.PyTorchCriterions"]], "pytorchintermediatelayersknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[157, "neural_compressor.compression.distillation.criterions.PyTorchIntermediateLayersKnowledgeDistillationLoss"]], "pytorchintermediatelayersknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[157, "neural_compressor.compression.distillation.criterions.PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"]], "pytorchknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[157, "neural_compressor.compression.distillation.criterions.PyTorchKnowledgeDistillationLoss"]], "pytorchknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[157, "neural_compressor.compression.distillation.criterions.PyTorchKnowledgeDistillationLossWrapper"]], "pytorchselfknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[157, "neural_compressor.compression.distillation.criterions.PyTorchSelfKnowledgeDistillationLoss"]], "pytorchselfknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[157, "neural_compressor.compression.distillation.criterions.PyTorchSelfKnowledgeDistillationLossWrapper"]], "selfknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[157, "neural_compressor.compression.distillation.criterions.SelfKnowledgeDistillationLoss"]], "tensorflowcriterions (class in neural_compressor.compression.distillation.criterions)": [[157, "neural_compressor.compression.distillation.criterions.TensorflowCriterions"]], "tensorflowknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[157, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLoss"]], "tensorflowknowledgedistillationlossexternal (class in neural_compressor.compression.distillation.criterions)": [[157, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLossExternal"]], "tensorflowknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[157, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLossWrapper"]], "criterion_registry() (in module neural_compressor.compression.distillation.criterions)": [[157, "neural_compressor.compression.distillation.criterions.criterion_registry"]], "neural_compressor.compression.distillation.criterions": [[157, "module-neural_compressor.compression.distillation.criterions"]], "neural_compressor.compression.distillation": [[158, "module-neural_compressor.compression.distillation"]], "neural_compressor.compression": [[159, "module-neural_compressor.compression"]], "gradientcriterion (class in neural_compressor.compression.pruner.criteria)": [[160, "neural_compressor.compression.pruner.criteria.GradientCriterion"]], "magnitudecriterion (class in neural_compressor.compression.pruner.criteria)": [[160, "neural_compressor.compression.pruner.criteria.MagnitudeCriterion"]], "pruningcriterion (class in neural_compressor.compression.pruner.criteria)": [[160, "neural_compressor.compression.pruner.criteria.PruningCriterion"]], "retrainfreecriterion (class in neural_compressor.compression.pruner.criteria)": [[160, "neural_compressor.compression.pruner.criteria.RetrainFreeCriterion"]], "snipcriterion (class in neural_compressor.compression.pruner.criteria)": [[160, "neural_compressor.compression.pruner.criteria.SnipCriterion"]], "snipmomentumblockcriterion (class in neural_compressor.compression.pruner.criteria)": [[160, "neural_compressor.compression.pruner.criteria.SnipMomentumBlockCriterion"]], "snipmomentumcriterion (class in neural_compressor.compression.pruner.criteria)": [[160, "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion"]], "get_criterion() (in module neural_compressor.compression.pruner.criteria)": [[160, "neural_compressor.compression.pruner.criteria.get_criterion"]], "neural_compressor.compression.pruner.criteria": [[160, "module-neural_compressor.compression.pruner.criteria"]], "register_criterion() (in module neural_compressor.compression.pruner.criteria)": [[160, "neural_compressor.compression.pruner.criteria.register_criterion"]], "scores (neural_compressor.compression.pruner.criteria.gradientcriterion attribute)": [[160, "neural_compressor.compression.pruner.criteria.GradientCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.magnitudecriterion attribute)": [[160, "neural_compressor.compression.pruner.criteria.MagnitudeCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.pruningcriterion attribute)": [[160, "neural_compressor.compression.pruner.criteria.PruningCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.retrainfreecriterion attribute)": [[160, "neural_compressor.compression.pruner.criteria.RetrainFreeCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.snipcriterion attribute)": [[160, "neural_compressor.compression.pruner.criteria.SnipCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.snipmomentumblockcriterion attribute)": [[160, "neural_compressor.compression.pruner.criteria.SnipMomentumBlockCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.snipmomentumcriterion attribute)": [[160, "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion.scores"]], "neural_compressor.compression.pruner": [[161, "module-neural_compressor.compression.pruner"]], "generate_ffn2_pruning_config() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[162, "neural_compressor.compression.pruner.model_slim.auto_slim.generate_ffn2_pruning_config"]], "generate_mha_pruning_config() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[162, "neural_compressor.compression.pruner.model_slim.auto_slim.generate_mha_pruning_config"]], "model_slim() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[162, "neural_compressor.compression.pruner.model_slim.auto_slim.model_slim"]], "model_slim_ffn2() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[162, "neural_compressor.compression.pruner.model_slim.auto_slim.model_slim_ffn2"]], "model_slim_mha() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[162, "neural_compressor.compression.pruner.model_slim.auto_slim.model_slim_mha"]], "neural_compressor.compression.pruner.model_slim.auto_slim": [[162, "module-neural_compressor.compression.pruner.model_slim.auto_slim"]], "parse_auto_slim_config() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[162, "neural_compressor.compression.pruner.model_slim.auto_slim.parse_auto_slim_config"]], "neural_compressor.compression.pruner.model_slim": [[163, "module-neural_compressor.compression.pruner.model_slim"]], "classifierheadsearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[164, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher"]], "jitbasicsearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[164, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher"]], "linear2linearsearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[164, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher"]], "recipesearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[164, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher"]], "selfmhasearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[164, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher"]], "current_pattern (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[164, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.current_pattern"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[164, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[164, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[164, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[164, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.device"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[164, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[164, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[164, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[164, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.flatten_static_graph"]], "get_attributes() (in module neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[164, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.get_attributes"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[164, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[164, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[164, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[164, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[164, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.model"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer": [[164, "module-neural_compressor.compression.pruner.model_slim.pattern_analyzer"]], "print_iterables() (in module neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[164, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.print_iterables"]], "recipe (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[164, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.recipe"]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[164, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.searching_results"]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[164, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.searching_results"]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[164, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.searching_results"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[164, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[164, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[164, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[164, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.static_graph"]], "target_layers (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[164, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.target_layers"]], "target_layers (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[164, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.target_layers"]], "target_op_lut (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[164, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.target_op_lut"]], "targets (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[164, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.targets"]], "linearcompression (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[165, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression"]], "linearcompressioniterator (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[165, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompressionIterator"]], "mhacompression (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[165, "neural_compressor.compression.pruner.model_slim.weight_slim.MHACompression"]], "postcompressionutils (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[165, "neural_compressor.compression.pruner.model_slim.weight_slim.PostCompressionUtils"]], "device (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompression attribute)": [[165, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression.device"]], "layer_1 (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompression attribute)": [[165, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression.layer_1"]], "layer_2 (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompression attribute)": [[165, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression.layer_2"]], "linear_patterns (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompressioniterator attribute)": [[165, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompressionIterator.linear_patterns"]], "neural_compressor.compression.pruner.model_slim.weight_slim": [[165, "module-neural_compressor.compression.pruner.model_slim.weight_slim"]], "basepattern (class in neural_compressor.compression.pruner.patterns)": [[166, "neural_compressor.compression.pruner.patterns.BasePattern"]], "m (neural_compressor.compression.pruner.patterns.patternninm attribute)": [[166, "neural_compressor.compression.pruner.patterns.PatternNInM.M"]], "n (neural_compressor.compression.pruner.patterns.patternninm attribute)": [[166, "neural_compressor.compression.pruner.patterns.PatternNInM.N"]], "patternninm (class in neural_compressor.compression.pruner.patterns)": [[166, "neural_compressor.compression.pruner.patterns.PatternNInM"]], "patternnxm (class in neural_compressor.compression.pruner.patterns)": [[166, "neural_compressor.compression.pruner.patterns.PatternNxM"]], "block_size (neural_compressor.compression.pruner.patterns.patternnxm attribute)": [[166, "neural_compressor.compression.pruner.patterns.PatternNxM.block_size"]], "config (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[166, "neural_compressor.compression.pruner.patterns.BasePattern.config"]], "get_pattern() (in module neural_compressor.compression.pruner.patterns)": [[166, "neural_compressor.compression.pruner.patterns.get_pattern"]], "invalid_layers (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[166, "neural_compressor.compression.pruner.patterns.BasePattern.invalid_layers"]], "is_global (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[166, "neural_compressor.compression.pruner.patterns.BasePattern.is_global"]], "keep_mask_layers (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[166, "neural_compressor.compression.pruner.patterns.BasePattern.keep_mask_layers"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[166, "neural_compressor.compression.pruner.patterns.BasePattern.max_sparsity_ratio_per_op"]], "min_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[166, "neural_compressor.compression.pruner.patterns.BasePattern.min_sparsity_ratio_per_op"]], "modules (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[166, "neural_compressor.compression.pruner.patterns.BasePattern.modules"]], "neural_compressor.compression.pruner.patterns": [[166, "module-neural_compressor.compression.pruner.patterns"]], "pattern (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[166, "neural_compressor.compression.pruner.patterns.BasePattern.pattern"]], "register_pattern() (in module neural_compressor.compression.pruner.patterns)": [[166, "neural_compressor.compression.pruner.patterns.register_pattern"]], "target_sparsity (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[166, "neural_compressor.compression.pruner.patterns.BasePattern.target_sparsity"]], "basepruner (class in neural_compressor.compression.pruner.pruners)": [[167, "neural_compressor.compression.pruner.pruners.BasePruner"]], "basicpruner (class in neural_compressor.compression.pruner.pruners)": [[167, "neural_compressor.compression.pruner.pruners.BasicPruner"]], "blockmaskpruner (class in neural_compressor.compression.pruner.pruners)": [[167, "neural_compressor.compression.pruner.pruners.BlockMaskPruner"]], "patternlockpruner (class in neural_compressor.compression.pruner.pruners)": [[167, "neural_compressor.compression.pruner.pruners.PatternLockPruner"]], "progressivepruner (class in neural_compressor.compression.pruner.pruners)": [[167, "neural_compressor.compression.pruner.pruners.ProgressivePruner"]], "retrainfreepruner (class in neural_compressor.compression.pruner.pruners)": [[167, "neural_compressor.compression.pruner.pruners.RetrainFreePruner"]], "config (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[167, "neural_compressor.compression.pruner.pruners.BasePruner.config"]], "criterion (neural_compressor.compression.pruner.pruners.basicpruner attribute)": [[167, "neural_compressor.compression.pruner.pruners.BasicPruner.criterion"]], "criterion (neural_compressor.compression.pruner.pruners.blockmaskpruner attribute)": [[167, "neural_compressor.compression.pruner.pruners.BlockMaskPruner.criterion"]], "criterion (neural_compressor.compression.pruner.pruners.retrainfreepruner attribute)": [[167, "neural_compressor.compression.pruner.pruners.RetrainFreePruner.criterion"]], "current_sparsity_ratio (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[167, "neural_compressor.compression.pruner.pruners.BasePruner.current_sparsity_ratio"]], "end_step (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[167, "neural_compressor.compression.pruner.pruners.BasePruner.end_step"]], "get_pruner() (in module neural_compressor.compression.pruner.pruners)": [[167, "neural_compressor.compression.pruner.pruners.get_pruner"]], "global_step (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[167, "neural_compressor.compression.pruner.pruners.BasePruner.global_step"]], "masks (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[167, "neural_compressor.compression.pruner.pruners.BasePruner.masks"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[167, "neural_compressor.compression.pruner.pruners.BasePruner.max_sparsity_ratio_per_op"]], "modules (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[167, "neural_compressor.compression.pruner.pruners.BasePruner.modules"]], "neural_compressor.compression.pruner.pruners": [[167, "module-neural_compressor.compression.pruner.pruners"]], "parse_valid_pruner_types() (in module neural_compressor.compression.pruner.pruners)": [[167, "neural_compressor.compression.pruner.pruners.parse_valid_pruner_types"]], "pattern (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[167, "neural_compressor.compression.pruner.pruners.BasePruner.pattern"]], "pattern (neural_compressor.compression.pruner.pruners.basicpruner attribute)": [[167, "neural_compressor.compression.pruner.pruners.BasicPruner.pattern"]], "pattern (neural_compressor.compression.pruner.pruners.blockmaskpruner attribute)": [[167, "neural_compressor.compression.pruner.pruners.BlockMaskPruner.pattern"]], "pattern (neural_compressor.compression.pruner.pruners.retrainfreepruner attribute)": [[167, "neural_compressor.compression.pruner.pruners.RetrainFreePruner.pattern"]], "pruning_frequency (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[167, "neural_compressor.compression.pruner.pruners.BasePruner.pruning_frequency"]], "reg (neural_compressor.compression.pruner.pruners.basicpruner attribute)": [[167, "neural_compressor.compression.pruner.pruners.BasicPruner.reg"]], "reg (neural_compressor.compression.pruner.pruners.blockmaskpruner attribute)": [[167, "neural_compressor.compression.pruner.pruners.BlockMaskPruner.reg"]], "reg (neural_compressor.compression.pruner.pruners.retrainfreepruner attribute)": [[167, "neural_compressor.compression.pruner.pruners.RetrainFreePruner.reg"]], "register_pruner() (in module neural_compressor.compression.pruner.pruners)": [[167, "neural_compressor.compression.pruner.pruners.register_pruner"]], "scheduler (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[167, "neural_compressor.compression.pruner.pruners.BasePruner.scheduler"]], "scheduler (neural_compressor.compression.pruner.pruners.basicpruner attribute)": [[167, "neural_compressor.compression.pruner.pruners.BasicPruner.scheduler"]], "scheduler (neural_compressor.compression.pruner.pruners.blockmaskpruner attribute)": [[167, "neural_compressor.compression.pruner.pruners.BlockMaskPruner.scheduler"]], "scheduler (neural_compressor.compression.pruner.pruners.retrainfreepruner attribute)": [[167, "neural_compressor.compression.pruner.pruners.RetrainFreePruner.scheduler"]], "scores (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[167, "neural_compressor.compression.pruner.pruners.BasePruner.scores"]], "start_step (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[167, "neural_compressor.compression.pruner.pruners.BasePruner.start_step"]], "target_sparsity_ratio (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[167, "neural_compressor.compression.pruner.pruners.BasePruner.target_sparsity_ratio"]], "basereg (class in neural_compressor.compression.pruner.regs)": [[168, "neural_compressor.compression.pruner.regs.BaseReg"]], "grouplasso (class in neural_compressor.compression.pruner.regs)": [[168, "neural_compressor.compression.pruner.regs.GroupLasso"]], "alpha (neural_compressor.compression.pruner.regs.grouplasso attribute)": [[168, "neural_compressor.compression.pruner.regs.GroupLasso.alpha"]], "get_reg() (in module neural_compressor.compression.pruner.regs)": [[168, "neural_compressor.compression.pruner.regs.get_reg"]], "get_reg_type() (in module neural_compressor.compression.pruner.regs)": [[168, "neural_compressor.compression.pruner.regs.get_reg_type"]], "neural_compressor.compression.pruner.regs": [[168, "module-neural_compressor.compression.pruner.regs"]], "reg_terms (neural_compressor.compression.pruner.regs.grouplasso attribute)": [[168, "neural_compressor.compression.pruner.regs.GroupLasso.reg_terms"]], "register_reg() (in module neural_compressor.compression.pruner.regs)": [[168, "neural_compressor.compression.pruner.regs.register_reg"]], "iterativescheduler (class in neural_compressor.compression.pruner.schedulers)": [[169, "neural_compressor.compression.pruner.schedulers.IterativeScheduler"]], "oneshotscheduler (class in neural_compressor.compression.pruner.schedulers)": [[169, "neural_compressor.compression.pruner.schedulers.OneshotScheduler"]], "pruningscheduler (class in neural_compressor.compression.pruner.schedulers)": [[169, "neural_compressor.compression.pruner.schedulers.PruningScheduler"]], "config (neural_compressor.compression.pruner.schedulers.pruningscheduler attribute)": [[169, "neural_compressor.compression.pruner.schedulers.PruningScheduler.config"]], "get_scheduler() (in module neural_compressor.compression.pruner.schedulers)": [[169, "neural_compressor.compression.pruner.schedulers.get_scheduler"]], "neural_compressor.compression.pruner.schedulers": [[169, "module-neural_compressor.compression.pruner.schedulers"]], "register_scheduler() (in module neural_compressor.compression.pruner.schedulers)": [[169, "neural_compressor.compression.pruner.schedulers.register_scheduler"]], "check_config() (in module neural_compressor.compression.pruner.utils)": [[170, "neural_compressor.compression.pruner.utils.check_config"]], "check_key_validity() (in module neural_compressor.compression.pruner.utils)": [[170, "neural_compressor.compression.pruner.utils.check_key_validity"]], "generate_pruner_config() (in module neural_compressor.compression.pruner.utils)": [[170, "neural_compressor.compression.pruner.utils.generate_pruner_config"]], "get_sparsity_ratio() (in module neural_compressor.compression.pruner.utils)": [[170, "neural_compressor.compression.pruner.utils.get_sparsity_ratio"]], "neural_compressor.compression.pruner.utils": [[170, "module-neural_compressor.compression.pruner.utils"]], "parse_last_linear() (in module neural_compressor.compression.pruner.utils)": [[170, "neural_compressor.compression.pruner.utils.parse_last_linear"]], "parse_to_prune() (in module neural_compressor.compression.pruner.utils)": [[170, "neural_compressor.compression.pruner.utils.parse_to_prune"]], "process_and_check_config() (in module neural_compressor.compression.pruner.utils)": [[170, "neural_compressor.compression.pruner.utils.process_and_check_config"]], "process_config() (in module neural_compressor.compression.pruner.utils)": [[170, "neural_compressor.compression.pruner.utils.process_config"]], "process_weight_config() (in module neural_compressor.compression.pruner.utils)": [[170, "neural_compressor.compression.pruner.utils.process_weight_config"]], "process_yaml_config() (in module neural_compressor.compression.pruner.utils)": [[170, "neural_compressor.compression.pruner.utils.process_yaml_config"]], "reset_none_to_default() (in module neural_compressor.compression.pruner.utils)": [[170, "neural_compressor.compression.pruner.utils.reset_none_to_default"]], "update_params() (in module neural_compressor.compression.pruner.utils)": [[170, "neural_compressor.compression.pruner.utils.update_params"]], "benchmark_conf (class in neural_compressor.conf.config)": [[171, "neural_compressor.conf.config.Benchmark_Conf"]], "conf (class in neural_compressor.conf.config)": [[171, "neural_compressor.conf.config.Conf"]], "distillation_conf (class in neural_compressor.conf.config)": [[171, "neural_compressor.conf.config.Distillation_Conf"]], "graph_optimization_conf (class in neural_compressor.conf.config)": [[171, "neural_compressor.conf.config.Graph_Optimization_Conf"]], "mixedprecision_conf (class in neural_compressor.conf.config)": [[171, "neural_compressor.conf.config.MixedPrecision_Conf"]], "nasconfig (class in neural_compressor.conf.config)": [[171, "neural_compressor.conf.config.NASConfig"]], "prunerv2 (class in neural_compressor.conf.config)": [[171, "neural_compressor.conf.config.PrunerV2"]], "pruning_conf (class in neural_compressor.conf.config)": [[171, "neural_compressor.conf.config.Pruning_Conf"]], "quantization_conf (class in neural_compressor.conf.config)": [[171, "neural_compressor.conf.config.Quantization_Conf"]], "neural_compressor.conf.config": [[171, "module-neural_compressor.conf.config"]], "dotdict (class in neural_compressor.conf.dotdict)": [[172, "neural_compressor.conf.dotdict.DotDict"]], "deep_get() (in module neural_compressor.conf.dotdict)": [[172, "neural_compressor.conf.dotdict.deep_get"]], "deep_set() (in module neural_compressor.conf.dotdict)": [[172, "neural_compressor.conf.dotdict.deep_set"]], "neural_compressor.conf.dotdict": [[172, "module-neural_compressor.conf.dotdict"]], "neural_compressor.conf": [[173, "module-neural_compressor.conf"]], "accuracycriterion (class in neural_compressor.conf.pythonic_config)": [[174, "neural_compressor.conf.pythonic_config.AccuracyCriterion"]], "benchmarkconfig (class in neural_compressor.conf.pythonic_config)": [[174, "neural_compressor.conf.pythonic_config.BenchmarkConfig"]], "distillationconfig (class in neural_compressor.conf.pythonic_config)": [[174, "neural_compressor.conf.pythonic_config.DistillationConfig"]], "knowledgedistillationlossconfig (class in neural_compressor.conf.pythonic_config)": [[174, "neural_compressor.conf.pythonic_config.KnowledgeDistillationLossConfig"]], "options (class in neural_compressor.conf.pythonic_config)": [[174, "neural_compressor.conf.pythonic_config.Options"]], "quantizationconfig (class in neural_compressor.conf.pythonic_config)": [[174, "neural_compressor.conf.pythonic_config.QuantizationConfig"]], "weightpruningconfig (class in neural_compressor.conf.pythonic_config)": [[174, "neural_compressor.conf.pythonic_config.WeightPruningConfig"]], "neural_compressor.conf.pythonic_config": [[174, "module-neural_compressor.conf.pythonic_config"]], "accuracycriterion (class in neural_compressor.config)": [[175, "neural_compressor.config.AccuracyCriterion"]], "benchmarkconfig (class in neural_compressor.config)": [[175, "neural_compressor.config.BenchmarkConfig"]], "distillationconfig (class in neural_compressor.config)": [[175, "neural_compressor.config.DistillationConfig"]], "dotdict (class in neural_compressor.config)": [[175, "neural_compressor.config.DotDict"]], "exportconfig (class in neural_compressor.config)": [[175, "neural_compressor.config.ExportConfig"]], "intermediatelayersknowledgedistillationlossconfig (class in neural_compressor.config)": [[175, "neural_compressor.config.IntermediateLayersKnowledgeDistillationLossConfig"]], "keras (class in neural_compressor.config)": [[175, "neural_compressor.config.Keras"]], "knowledgedistillationlossconfig (class in neural_compressor.config)": [[175, "neural_compressor.config.KnowledgeDistillationLossConfig"]], "mxnet (class in neural_compressor.config)": [[175, "neural_compressor.config.MXNet"]], "mixedprecisionconfig (class in neural_compressor.config)": [[175, "neural_compressor.config.MixedPrecisionConfig"]], "nasconfig (class in neural_compressor.config)": [[175, "neural_compressor.config.NASConfig"]], "onnx (class in neural_compressor.config)": [[175, "neural_compressor.config.ONNX"]], "onnxqlinear2qdqconfig (class in neural_compressor.config)": [[175, "neural_compressor.config.ONNXQlinear2QDQConfig"]], "options (class in neural_compressor.config)": [[175, "neural_compressor.config.Options"]], "posttrainingquantconfig (class in neural_compressor.config)": [[175, "neural_compressor.config.PostTrainingQuantConfig"]], "pytorch (class in neural_compressor.config)": [[175, "neural_compressor.config.PyTorch"]], "quantizationawaretrainingconfig (class in neural_compressor.config)": [[175, "neural_compressor.config.QuantizationAwareTrainingConfig"]], "selfknowledgedistillationlossconfig (class in neural_compressor.config)": [[175, "neural_compressor.config.SelfKnowledgeDistillationLossConfig"]], "tf2onnxconfig (class in neural_compressor.config)": [[175, "neural_compressor.config.TF2ONNXConfig"]], "tensorflow (class in neural_compressor.config)": [[175, "neural_compressor.config.TensorFlow"]], "torch2onnxconfig (class in neural_compressor.config)": [[175, "neural_compressor.config.Torch2ONNXConfig"]], "tuningcriterion (class in neural_compressor.config)": [[175, "neural_compressor.config.TuningCriterion"]], "weightpruningconfig (class in neural_compressor.config)": [[175, "neural_compressor.config.WeightPruningConfig"]], "neural_compressor.config": [[175, "module-neural_compressor.config"]], "neural_compressor.contrib": [[176, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[177, "module-neural_compressor.contrib.strategy"]], "sigopttunestrategy (class in neural_compressor.contrib.strategy.sigopt)": [[178, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.sigopt": [[178, "module-neural_compressor.contrib.strategy.sigopt"]], "tpetunestrategy (class in neural_compressor.contrib.strategy.tpe)": [[179, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy"]], "neural_compressor.contrib.strategy.tpe": [[179, "module-neural_compressor.contrib.strategy.tpe"]], "basedataloader (class in neural_compressor.data.dataloaders.base_dataloader)": [[180, "neural_compressor.data.dataloaders.base_dataloader.BaseDataLoader"]], "neural_compressor.data.dataloaders.base_dataloader": [[180, "module-neural_compressor.data.dataloaders.base_dataloader"]], "dataloader (class in neural_compressor.data.dataloaders.dataloader)": [[181, "neural_compressor.data.dataloaders.dataloader.DataLoader"]], "check_dataloader() (in module neural_compressor.data.dataloaders.dataloader)": [[181, "neural_compressor.data.dataloaders.dataloader.check_dataloader"]], "neural_compressor.data.dataloaders.dataloader": [[181, "module-neural_compressor.data.dataloaders.dataloader"]], "defaultdataloader (class in neural_compressor.data.dataloaders.default_dataloader)": [[182, "neural_compressor.data.dataloaders.default_dataloader.DefaultDataLoader"]], "default_collate() (in module neural_compressor.data.dataloaders.default_dataloader)": [[182, "neural_compressor.data.dataloaders.default_dataloader.default_collate"]], "neural_compressor.data.dataloaders.default_dataloader": [[182, "module-neural_compressor.data.dataloaders.default_dataloader"]], "fetcher (class in neural_compressor.data.dataloaders.fetcher)": [[183, "neural_compressor.data.dataloaders.fetcher.Fetcher"]], "indexfetcher (class in neural_compressor.data.dataloaders.fetcher)": [[183, "neural_compressor.data.dataloaders.fetcher.IndexFetcher"]], "iterablefetcher (class in neural_compressor.data.dataloaders.fetcher)": [[183, "neural_compressor.data.dataloaders.fetcher.IterableFetcher"]], "neural_compressor.data.dataloaders.fetcher": [[183, "module-neural_compressor.data.dataloaders.fetcher"]], "neural_compressor.data.dataloaders": [[184, "module-neural_compressor.data.dataloaders"]], "mxnetdataloader (class in neural_compressor.data.dataloaders.mxnet_dataloader)": [[185, "neural_compressor.data.dataloaders.mxnet_dataloader.MXNetDataLoader"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[185, "module-neural_compressor.data.dataloaders.mxnet_dataloader"]], "onnxrtbertdataloader (class in neural_compressor.data.dataloaders.onnxrt_dataloader)": [[186, "neural_compressor.data.dataloaders.onnxrt_dataloader.ONNXRTBertDataLoader"]], "onnxrtdataloader (class in neural_compressor.data.dataloaders.onnxrt_dataloader)": [[186, "neural_compressor.data.dataloaders.onnxrt_dataloader.ONNXRTDataLoader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[186, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"]], "pytorchdataloader (class in neural_compressor.data.dataloaders.pytorch_dataloader)": [[187, "neural_compressor.data.dataloaders.pytorch_dataloader.PyTorchDataLoader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[187, "module-neural_compressor.data.dataloaders.pytorch_dataloader"]], "batchsampler (class in neural_compressor.data.dataloaders.sampler)": [[188, "neural_compressor.data.dataloaders.sampler.BatchSampler"]], "iterablesampler (class in neural_compressor.data.dataloaders.sampler)": [[188, "neural_compressor.data.dataloaders.sampler.IterableSampler"]], "sampler (class in neural_compressor.data.dataloaders.sampler)": [[188, "neural_compressor.data.dataloaders.sampler.Sampler"]], "sequentialsampler (class in neural_compressor.data.dataloaders.sampler)": [[188, "neural_compressor.data.dataloaders.sampler.SequentialSampler"]], "neural_compressor.data.dataloaders.sampler": [[188, "module-neural_compressor.data.dataloaders.sampler"]], "tfdatadataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[189, "neural_compressor.data.dataloaders.tensorflow_dataloader.TFDataDataLoader"]], "tensorflowbertdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[189, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowBertDataLoader"]], "tensorflowdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[189, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowDataLoader"]], "tensorflowmodelzoobertdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[189, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowModelZooBertDataLoader"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[189, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"]], "inputfeatures (class in neural_compressor.data.datasets.bert_dataset)": [[190, "neural_compressor.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[190, "neural_compressor.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.data.datasets.bert_dataset)": [[190, "neural_compressor.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[190, "neural_compressor.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[190, "neural_compressor.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[190, "neural_compressor.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.data.datasets.bert_dataset)": [[190, "neural_compressor.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.data.datasets.bert_dataset)": [[190, "neural_compressor.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.data.datasets.bert_dataset": [[190, "module-neural_compressor.data.datasets.bert_dataset"]], "coconpy (class in neural_compressor.data.datasets.coco_dataset)": [[191, "neural_compressor.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.data.datasets.coco_dataset)": [[191, "neural_compressor.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.data.datasets.coco_dataset)": [[191, "neural_compressor.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.data.datasets.coco_dataset)": [[191, "neural_compressor.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.data.datasets.coco_dataset": [[191, "module-neural_compressor.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.data.datasets.dataset)": [[192, "neural_compressor.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.data.datasets.dataset)": [[192, "neural_compressor.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.data.datasets.dataset)": [[192, "neural_compressor.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.data.datasets.dataset)": [[192, "neural_compressor.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.data.datasets.dataset)": [[192, "neural_compressor.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.data.datasets.dataset)": [[192, "neural_compressor.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.data.datasets.dataset)": [[192, "neural_compressor.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.data.datasets.dataset)": [[192, "neural_compressor.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.data.datasets.dataset)": [[192, "neural_compressor.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.data.datasets.dataset)": [[192, "neural_compressor.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.data.datasets.dataset)": [[192, "neural_compressor.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.data.datasets.dataset)": [[192, "neural_compressor.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.data.datasets.dataset)": [[192, "neural_compressor.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.data.datasets.dataset)": [[192, "neural_compressor.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.data.datasets.dataset)": [[192, "neural_compressor.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.data.datasets.dataset)": [[192, "neural_compressor.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.data.datasets.dataset)": [[192, "neural_compressor.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.data.datasets.dataset)": [[192, "neural_compressor.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.data.datasets.dataset)": [[192, "neural_compressor.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.data.datasets.dataset)": [[192, "neural_compressor.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.data.datasets.dataset)": [[192, "neural_compressor.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.data.datasets.dataset)": [[192, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.datasets.dataset)": [[192, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflow (class in neural_compressor.data.datasets.dataset)": [[192, "neural_compressor.data.datasets.dataset.Tensorflow"]], "tensorflowcifar10 (class in neural_compressor.data.datasets.dataset)": [[192, "neural_compressor.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.data.datasets.dataset)": [[192, "neural_compressor.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.data.datasets.dataset)": [[192, "neural_compressor.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.data.datasets.dataset)": [[192, "neural_compressor.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagerecord (class in neural_compressor.data.datasets.dataset)": [[192, "neural_compressor.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.data.datasets.dataset)": [[192, "neural_compressor.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.data.datasets.dataset)": [[192, "neural_compressor.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.data.datasets.dataset)": [[192, "neural_compressor.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.data.datasets.dataset)": [[192, "neural_compressor.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.data.datasets.dataset)": [[192, "neural_compressor.data.datasets.dataset.check_integrity"]], "dataset_registry() (in module neural_compressor.data.datasets.dataset)": [[192, "neural_compressor.data.datasets.dataset.dataset_registry"]], "download_url() (in module neural_compressor.data.datasets.dataset)": [[192, "neural_compressor.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.data.datasets.dataset)": [[192, "neural_compressor.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.data.datasets.dataset)": [[192, "neural_compressor.data.datasets.dataset.gen_bar_updater"]], "neural_compressor.data.datasets.dataset": [[192, "module-neural_compressor.data.datasets.dataset"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset)": [[193, "neural_compressor.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset": [[193, "module-neural_compressor.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[194, "neural_compressor.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[194, "neural_compressor.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[194, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[195, "neural_compressor.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[195, "neural_compressor.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[195, "neural_compressor.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[195, "neural_compressor.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[195, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[195, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.data.datasets.imagenet_dataset": [[195, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[196, "module-neural_compressor.data.datasets"]], "styletransferdataset (class in neural_compressor.data.datasets.style_transfer_dataset)": [[197, "neural_compressor.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.data.datasets.style_transfer_dataset": [[197, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.data.filters.coco_filter)": [[198, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.data.filters.coco_filter)": [[198, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.coco_filter": [[198, "module-neural_compressor.data.filters.coco_filter"]], "filters (class in neural_compressor.data.filters.filter)": [[199, "neural_compressor.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.data.filters.filter)": [[199, "neural_compressor.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.data.filters.filter)": [[199, "neural_compressor.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.data.filters.filter)": [[199, "neural_compressor.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.data.filters.filter)": [[199, "neural_compressor.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.data.filters.filter)": [[199, "neural_compressor.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.data.filters.filter)": [[199, "neural_compressor.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.data.filters.filter)": [[199, "neural_compressor.data.filters.filter.filter_registry"]], "neural_compressor.data.filters.filter": [[199, "module-neural_compressor.data.filters.filter"]], "neural_compressor.data.filters": [[200, "module-neural_compressor.data.filters"]], "neural_compressor.data": [[201, "module-neural_compressor.data"]], "parsedecodecocotransform (class in neural_compressor.data.transforms.coco_transform)": [[202, "neural_compressor.data.transforms.coco_transform.ParseDecodeCocoTransform"]], "neural_compressor.data.transforms.coco_transform": [[202, "module-neural_compressor.data.transforms.coco_transform"]], "bilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[203, "neural_compressor.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.data.transforms.imagenet_transform)": [[203, "neural_compressor.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[203, "neural_compressor.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[203, "neural_compressor.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.data.transforms.imagenet_transform)": [[203, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[203, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.data.transforms.imagenet_transform)": [[203, "neural_compressor.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.data.transforms.imagenet_transform)": [[203, "neural_compressor.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[203, "neural_compressor.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "neural_compressor.data.transforms.imagenet_transform": [[203, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[204, "module-neural_compressor.data.transforms"]], "postprocess (class in neural_compressor.data.transforms.postprocess)": [[205, "neural_compressor.data.transforms.postprocess.Postprocess"]], "neural_compressor.data.transforms.postprocess": [[205, "module-neural_compressor.data.transforms.postprocess"]], "basictokenizer (class in neural_compressor.data.transforms.tokenization)": [[206, "neural_compressor.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.data.transforms.tokenization)": [[206, "neural_compressor.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.data.transforms.tokenization)": [[206, "neural_compressor.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.data.transforms.tokenization)": [[206, "neural_compressor.data.transforms.tokenization.convert_by_vocab"]], "convert_to_unicode() (in module neural_compressor.data.transforms.tokenization)": [[206, "neural_compressor.data.transforms.tokenization.convert_to_unicode"]], "load_vocab() (in module neural_compressor.data.transforms.tokenization)": [[206, "neural_compressor.data.transforms.tokenization.load_vocab"]], "neural_compressor.data.transforms.tokenization": [[206, "module-neural_compressor.data.transforms.tokenization"]], "whitespace_tokenize() (in module neural_compressor.data.transforms.tokenization)": [[206, "neural_compressor.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.TRANSFORMS"], [207, "neural_compressor.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.get_final_text"]], "get_torchvision_map() (in module neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.get_torchvision_map"]], "neural_compressor.data.transforms.transform": [[207, "module-neural_compressor.data.transforms.transform"]], "read_squad_examples() (in module neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.read_squad_examples"]], "transform_registry() (in module neural_compressor.data.transforms.transform)": [[207, "neural_compressor.data.transforms.transform.transform_registry"]], "benchmark (class in neural_compressor.experimental.benchmark)": [[208, "neural_compressor.experimental.benchmark.Benchmark"]], "get_architecture() (in module neural_compressor.experimental.benchmark)": [[208, "neural_compressor.experimental.benchmark.get_architecture"]], "get_bounded_threads() (in module neural_compressor.experimental.benchmark)": [[208, "neural_compressor.experimental.benchmark.get_bounded_threads"]], "get_core_ids() (in module neural_compressor.experimental.benchmark)": [[208, "neural_compressor.experimental.benchmark.get_core_ids"]], "get_physical_ids() (in module neural_compressor.experimental.benchmark)": [[208, "neural_compressor.experimental.benchmark.get_physical_ids"]], "get_threads() (in module neural_compressor.experimental.benchmark)": [[208, "neural_compressor.experimental.benchmark.get_threads"]], "get_threads_per_core() (in module neural_compressor.experimental.benchmark)": [[208, "neural_compressor.experimental.benchmark.get_threads_per_core"]], "neural_compressor.experimental.benchmark": [[208, "module-neural_compressor.experimental.benchmark"]], "set_all_env_var() (in module neural_compressor.experimental.benchmark)": [[208, "neural_compressor.experimental.benchmark.set_all_env_var"]], "set_env_var() (in module neural_compressor.experimental.benchmark)": [[208, "neural_compressor.experimental.benchmark.set_env_var"]], "criterions (class in neural_compressor.experimental.common.criterion)": [[209, "neural_compressor.experimental.common.criterion.Criterions"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[209, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationframework (class in neural_compressor.experimental.common.criterion)": [[209, "neural_compressor.experimental.common.criterion.KnowledgeDistillationFramework"]], "knowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[209, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss"]], "pytorchcriterions (class in neural_compressor.experimental.common.criterion)": [[209, "neural_compressor.experimental.common.criterion.PyTorchCriterions"]], "pytorchcrossentropyloss (class in neural_compressor.experimental.common.criterion)": [[209, "neural_compressor.experimental.common.criterion.PyTorchCrossEntropyLoss"]], "pytorchintermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[209, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss"]], "pytorchintermediatelayersknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[209, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"]], "pytorchknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[209, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss"]], "pytorchknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[209, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLossWrapper"]], "pytorchselfknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[209, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss"]], "pytorchselfknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[209, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLossWrapper"]], "selfknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[209, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss"]], "tensorflowcrossentropyloss (class in neural_compressor.experimental.common.criterion)": [[209, "neural_compressor.experimental.common.criterion.TensorFlowCrossEntropyLoss"]], "tensorflowsparsecategoricalcrossentropy (class in neural_compressor.experimental.common.criterion)": [[209, "neural_compressor.experimental.common.criterion.TensorFlowSparseCategoricalCrossentropy"]], "tensorflowcriterions (class in neural_compressor.experimental.common.criterion)": [[209, "neural_compressor.experimental.common.criterion.TensorflowCriterions"]], "tensorflowknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[209, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss"]], "tensorflowknowledgedistillationlossexternal (class in neural_compressor.experimental.common.criterion)": [[209, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal"]], "tensorflowknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[209, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossWrapper"]], "criterion_registry() (in module neural_compressor.experimental.common.criterion)": [[209, "neural_compressor.experimental.common.criterion.criterion_registry"]], "neural_compressor.experimental.common.criterion": [[209, "module-neural_compressor.experimental.common.criterion"]], "dataloader (class in neural_compressor.experimental.common.dataloader)": [[210, "neural_compressor.experimental.common.dataloader.DataLoader"]], "neural_compressor.experimental.common.dataloader": [[210, "module-neural_compressor.experimental.common.dataloader"]], "neural_compressor.experimental.common": [[211, "module-neural_compressor.experimental.common"]], "metric (class in neural_compressor.experimental.common.metric)": [[212, "neural_compressor.experimental.common.metric.Metric"]], "neural_compressor.experimental.common.metric": [[212, "module-neural_compressor.experimental.common.metric"]], "model (class in neural_compressor.experimental.common.model)": [[213, "neural_compressor.experimental.common.model.Model"]], "neural_compressor.experimental.common.model": [[213, "module-neural_compressor.experimental.common.model"]], "set_backend() (in module neural_compressor.experimental.common.model)": [[213, "neural_compressor.experimental.common.model.set_backend"]], "optimizers (class in neural_compressor.experimental.common.optimizer)": [[214, "neural_compressor.experimental.common.optimizer.Optimizers"]], "pytorchoptimizers (class in neural_compressor.experimental.common.optimizer)": [[214, "neural_compressor.experimental.common.optimizer.PyTorchOptimizers"]], "pytorchsgd (class in neural_compressor.experimental.common.optimizer)": [[214, "neural_compressor.experimental.common.optimizer.PyTorchSGD"]], "tensorflowadam (class in neural_compressor.experimental.common.optimizer)": [[214, "neural_compressor.experimental.common.optimizer.TensorFlowAdam"]], "tensorflowadamw (class in neural_compressor.experimental.common.optimizer)": [[214, "neural_compressor.experimental.common.optimizer.TensorFlowAdamW"]], "tensorflowsgd (class in neural_compressor.experimental.common.optimizer)": [[214, "neural_compressor.experimental.common.optimizer.TensorFlowSGD"]], "tensorflowoptimizers (class in neural_compressor.experimental.common.optimizer)": [[214, "neural_compressor.experimental.common.optimizer.TensorflowOptimizers"]], "neural_compressor.experimental.common.optimizer": [[214, "module-neural_compressor.experimental.common.optimizer"]], "optimizer_registry() (in module neural_compressor.experimental.common.optimizer)": [[214, "neural_compressor.experimental.common.optimizer.optimizer_registry"]], "postprocess (class in neural_compressor.experimental.common.postprocess)": [[215, "neural_compressor.experimental.common.postprocess.Postprocess"]], "neural_compressor.experimental.common.postprocess": [[215, "module-neural_compressor.experimental.common.postprocess"]], "get_activation() (in module neural_compressor.experimental.common.torch_utils)": [[216, "neural_compressor.experimental.common.torch_utils.get_activation"]], "neural_compressor.experimental.common.torch_utils": [[216, "module-neural_compressor.experimental.common.torch_utils"]], "record_output() (in module neural_compressor.experimental.common.torch_utils)": [[216, "neural_compressor.experimental.common.torch_utils.record_output"]], "component (class in neural_compressor.experimental.component)": [[217, "neural_compressor.experimental.component.Component"]], "neural_compressor.experimental.component": [[217, "module-neural_compressor.experimental.component"]], "neural_compressor.experimental.compression": [[218, "module-neural_compressor.experimental.compression"]], "neural_compressor.experimental.compression.pruning": [[219, "module-neural_compressor.experimental.compression.pruning"]], "prepare_pruning() (in module neural_compressor.experimental.compression.pruning)": [[219, "neural_compressor.experimental.compression.pruning.prepare_pruning"]], "save() (in module neural_compressor.experimental.compression.pruning)": [[219, "neural_compressor.experimental.compression.pruning.save"]], "neural_compressor.experimental.contrib": [[220, "module-neural_compressor.experimental.contrib"]], "neural_compressor.experimental.contrib.strategy": [[221, "module-neural_compressor.experimental.contrib.strategy"]], "sigopttunestrategy (class in neural_compressor.experimental.contrib.strategy.sigopt)": [[222, "neural_compressor.experimental.contrib.strategy.sigopt.SigOptTuneStrategy"]], "neural_compressor.experimental.contrib.strategy.sigopt": [[222, "module-neural_compressor.experimental.contrib.strategy.sigopt"]], "tpetunestrategy (class in neural_compressor.experimental.contrib.strategy.tpe)": [[223, "neural_compressor.experimental.contrib.strategy.tpe.TpeTuneStrategy"]], "neural_compressor.experimental.contrib.strategy.tpe": [[223, "module-neural_compressor.experimental.contrib.strategy.tpe"]], "basedataloader (class in neural_compressor.experimental.data.dataloaders.base_dataloader)": [[224, "neural_compressor.experimental.data.dataloaders.base_dataloader.BaseDataLoader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[224, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[225, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "defaultdataloader (class in neural_compressor.experimental.data.dataloaders.default_dataloader)": [[226, "neural_compressor.experimental.data.dataloaders.default_dataloader.DefaultDataLoader"]], "default_collate() (in module neural_compressor.experimental.data.dataloaders.default_dataloader)": [[226, "neural_compressor.experimental.data.dataloaders.default_dataloader.default_collate"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[226, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "fetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[227, "neural_compressor.experimental.data.dataloaders.fetcher.Fetcher"]], "indexfetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[227, "neural_compressor.experimental.data.dataloaders.fetcher.IndexFetcher"]], "iterablefetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[227, "neural_compressor.experimental.data.dataloaders.fetcher.IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[227, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[228, "module-neural_compressor.experimental.data.dataloaders"]], "mxnetdataloader (class in neural_compressor.experimental.data.dataloaders.mxnet_dataloader)": [[229, "neural_compressor.experimental.data.dataloaders.mxnet_dataloader.MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[229, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "onnxrtbertdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[230, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTBertDataLoader"]], "onnxrtdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[230, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[230, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "pytorchdataloader (class in neural_compressor.experimental.data.dataloaders.pytorch_dataloader)": [[231, "neural_compressor.experimental.data.dataloaders.pytorch_dataloader.PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[231, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "batchsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[232, "neural_compressor.experimental.data.dataloaders.sampler.BatchSampler"]], "iterablesampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[232, "neural_compressor.experimental.data.dataloaders.sampler.IterableSampler"]], "sampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[232, "neural_compressor.experimental.data.dataloaders.sampler.Sampler"]], "sequentialsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[232, "neural_compressor.experimental.data.dataloaders.sampler.SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.sampler": [[232, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "tfdatadataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[233, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TFDataDataLoader"]], "tensorflowbertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[233, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowBertDataLoader"]], "tensorflowdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[233, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowDataLoader"]], "tensorflowmodelzoobertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[233, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowModelZooBertDataLoader"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[233, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "inputfeatures (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[234, "neural_compressor.experimental.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[234, "neural_compressor.experimental.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[234, "neural_compressor.experimental.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[234, "neural_compressor.experimental.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[234, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[234, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[234, "neural_compressor.experimental.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[234, "neural_compressor.experimental.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[234, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "coconpy (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[235, "neural_compressor.experimental.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[235, "neural_compressor.experimental.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[235, "neural_compressor.experimental.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[235, "neural_compressor.experimental.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[235, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflowcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageFolder"]], "tensorflowimagerecord (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.check_integrity"]], "dataset_registry() (in module neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.dataset_registry"]], "download_url() (in module neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.experimental.data.datasets.dataset)": [[236, "neural_compressor.experimental.data.datasets.dataset.gen_bar_updater"]], "neural_compressor.experimental.data.datasets.dataset": [[236, "module-neural_compressor.experimental.data.datasets.dataset"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset)": [[237, "neural_compressor.experimental.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[237, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[238, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[238, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[238, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[239, "neural_compressor.experimental.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[239, "neural_compressor.experimental.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[239, "neural_compressor.experimental.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[239, "neural_compressor.experimental.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[239, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[239, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[239, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "neural_compressor.experimental.data.datasets": [[240, "module-neural_compressor.experimental.data.datasets"]], "styletransferdataset (class in neural_compressor.experimental.data.datasets.style_transfer_dataset)": [[241, "neural_compressor.experimental.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[241, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[242, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[242, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.coco_filter": [[242, "module-neural_compressor.experimental.data.filters.coco_filter"]], "filters (class in neural_compressor.experimental.data.filters.filter)": [[243, "neural_compressor.experimental.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.experimental.data.filters.filter)": [[243, "neural_compressor.experimental.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.experimental.data.filters.filter)": [[243, "neural_compressor.experimental.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.experimental.data.filters.filter)": [[243, "neural_compressor.experimental.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.experimental.data.filters.filter)": [[243, "neural_compressor.experimental.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.experimental.data.filters.filter)": [[243, "neural_compressor.experimental.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.experimental.data.filters.filter)": [[243, "neural_compressor.experimental.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.experimental.data.filters.filter)": [[243, "neural_compressor.experimental.data.filters.filter.filter_registry"]], "neural_compressor.experimental.data.filters.filter": [[243, "module-neural_compressor.experimental.data.filters.filter"]], "neural_compressor.experimental.data.filters": [[244, "module-neural_compressor.experimental.data.filters"]], "neural_compressor.experimental.data": [[245, "module-neural_compressor.experimental.data"]], "bilinearimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[246, "neural_compressor.experimental.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[246, "neural_compressor.experimental.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[246, "neural_compressor.experimental.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[246, "neural_compressor.experimental.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[246, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[246, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[246, "neural_compressor.experimental.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[246, "neural_compressor.experimental.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[246, "neural_compressor.experimental.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[246, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "neural_compressor.experimental.data.transforms": [[247, "module-neural_compressor.experimental.data.transforms"]], "basictokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[248, "neural_compressor.experimental.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[248, "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[248, "neural_compressor.experimental.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[248, "neural_compressor.experimental.data.transforms.tokenization.convert_by_vocab"]], "convert_to_unicode() (in module neural_compressor.experimental.data.transforms.tokenization)": [[248, "neural_compressor.experimental.data.transforms.tokenization.convert_to_unicode"]], "load_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[248, "neural_compressor.experimental.data.transforms.tokenization.load_vocab"]], "neural_compressor.experimental.data.transforms.tokenization": [[248, "module-neural_compressor.experimental.data.transforms.tokenization"]], "whitespace_tokenize() (in module neural_compressor.experimental.data.transforms.tokenization)": [[248, "neural_compressor.experimental.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.TRANSFORMS"], [249, "neural_compressor.experimental.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.get_final_text"]], "get_torchvision_map() (in module neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.get_torchvision_map"]], "neural_compressor.experimental.data.transforms.transform": [[249, "module-neural_compressor.experimental.data.transforms.transform"]], "read_squad_examples() (in module neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.read_squad_examples"]], "transform_registry() (in module neural_compressor.experimental.data.transforms.transform)": [[249, "neural_compressor.experimental.data.transforms.transform.transform_registry"]], "distillation (class in neural_compressor.experimental.distillation)": [[250, "neural_compressor.experimental.distillation.Distillation"]], "_epoch_ran (neural_compressor.experimental.distillation.distillation attribute)": [[250, "neural_compressor.experimental.distillation.Distillation._epoch_ran"]], "best_model (neural_compressor.experimental.distillation.distillation attribute)": [[250, "neural_compressor.experimental.distillation.Distillation.best_model"]], "best_score (neural_compressor.experimental.distillation.distillation attribute)": [[250, "neural_compressor.experimental.distillation.Distillation.best_score"]], "eval_frequency (neural_compressor.experimental.distillation.distillation attribute)": [[250, "neural_compressor.experimental.distillation.Distillation.eval_frequency"]], "neural_compressor.experimental.distillation": [[250, "module-neural_compressor.experimental.distillation"]], "neural_compressor.experimental.export": [[251, "module-neural_compressor.experimental.export"]], "check_model() (in module neural_compressor.experimental.export.qlinear2qdq)": [[252, "neural_compressor.experimental.export.qlinear2qdq.check_model"]], "neural_compressor.experimental.export.qlinear2qdq": [[252, "module-neural_compressor.experimental.export.qlinear2qdq"]], "onnx_qlinear_to_qdq() (in module neural_compressor.experimental.export.qlinear2qdq)": [[252, "neural_compressor.experimental.export.qlinear2qdq.onnx_qlinear_to_qdq"]], "neural_compressor.experimental.export.tf2onnx": [[253, "module-neural_compressor.experimental.export.tf2onnx"]], "tf_to_fp32_onnx() (in module neural_compressor.experimental.export.tf2onnx)": [[253, "neural_compressor.experimental.export.tf2onnx.tf_to_fp32_onnx"]], "tf_to_int8_onnx() (in module neural_compressor.experimental.export.tf2onnx)": [[253, "neural_compressor.experimental.export.tf2onnx.tf_to_int8_onnx"]], "build_scale_mapping() (in module neural_compressor.experimental.export.torch2onnx)": [[254, "neural_compressor.experimental.export.torch2onnx.build_scale_mapping"]], "get_node_mapping() (in module neural_compressor.experimental.export.torch2onnx)": [[254, "neural_compressor.experimental.export.torch2onnx.get_node_mapping"]], "get_quantizable_onnx_ops() (in module neural_compressor.experimental.export.torch2onnx)": [[254, "neural_compressor.experimental.export.torch2onnx.get_quantizable_onnx_ops"]], "neural_compressor.experimental.export.torch2onnx": [[254, "module-neural_compressor.experimental.export.torch2onnx"]], "qdq_fp32_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[254, "neural_compressor.experimental.export.torch2onnx.qdq_fp32_bias"]], "qdq_fp32_bias_qdq() (in module neural_compressor.experimental.export.torch2onnx)": [[254, "neural_compressor.experimental.export.torch2onnx.qdq_fp32_bias_qdq"]], "qdq_int32_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[254, "neural_compressor.experimental.export.torch2onnx.qdq_int32_bias"]], "recalculate_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[254, "neural_compressor.experimental.export.torch2onnx.recalculate_bias"]], "remove_nodes_by_name() (in module neural_compressor.experimental.export.torch2onnx)": [[254, "neural_compressor.experimental.export.torch2onnx.remove_nodes_by_name"]], "set_data_type() (in module neural_compressor.experimental.export.torch2onnx)": [[254, "neural_compressor.experimental.export.torch2onnx.set_data_type"]], "set_scale_info() (in module neural_compressor.experimental.export.torch2onnx)": [[254, "neural_compressor.experimental.export.torch2onnx.set_scale_info"]], "sub_graph_with_int32_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[254, "neural_compressor.experimental.export.torch2onnx.sub_graph_with_int32_bias"]], "torch_to_fp32_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[254, "neural_compressor.experimental.export.torch2onnx.torch_to_fp32_onnx"]], "torch_to_int8_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[254, "neural_compressor.experimental.export.torch2onnx.torch_to_int8_onnx"]], "update_weight_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[254, "neural_compressor.experimental.export.torch2onnx.update_weight_bias"]], "dummydatareader (class in neural_compressor.experimental.export.utils)": [[255, "neural_compressor.experimental.export.utils.DummyDataReader"]], "onnx2numpy_dtype() (in module neural_compressor.experimental.export.utils)": [[255, "neural_compressor.experimental.export.utils.ONNX2Numpy_dtype"]], "neural_compressor.experimental.export.utils": [[255, "module-neural_compressor.experimental.export.utils"]], "graph_optimization (class in neural_compressor.experimental.graph_optimization)": [[256, "neural_compressor.experimental.graph_optimization.Graph_Optimization"]], "neural_compressor.experimental.graph_optimization": [[256, "module-neural_compressor.experimental.graph_optimization"]], "neural_compressor.experimental": [[257, "module-neural_compressor.experimental"]], "bleu (class in neural_compressor.experimental.metric.bleu)": [[258, "neural_compressor.experimental.metric.bleu.BLEU"]], "unicoderegex (class in neural_compressor.experimental.metric.bleu)": [[258, "neural_compressor.experimental.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.experimental.metric.bleu)": [[258, "neural_compressor.experimental.metric.bleu.bleu_tokenize"]], "labels (neural_compressor.experimental.metric.bleu.bleu attribute)": [[258, "neural_compressor.experimental.metric.bleu.BLEU.labels"]], "neural_compressor.experimental.metric.bleu": [[258, "module-neural_compressor.experimental.metric.bleu"]], "nondigit_punct_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[258, "neural_compressor.experimental.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "predictions (neural_compressor.experimental.metric.bleu.bleu attribute)": [[258, "neural_compressor.experimental.metric.bleu.BLEU.predictions"]], "punct_nondigit_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[258, "neural_compressor.experimental.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "symbol_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[258, "neural_compressor.experimental.metric.bleu.UnicodeRegex.symbol_re"]], "compute_bleu() (in module neural_compressor.experimental.metric.bleu_util)": [[259, "neural_compressor.experimental.metric.bleu_util.compute_bleu"]], "neural_compressor.experimental.metric.bleu_util": [[259, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[260, "module-neural_compressor.experimental.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.experimental.metric.coco_tools)": [[261, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.experimental.metric.coco_tools)": [[261, "neural_compressor.experimental.metric.coco_tools.COCOWrapper"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.experimental.metric.coco_tools)": [[261, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.experimental.metric.coco_tools)": [[261, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.experimental.metric.coco_tools)": [[261, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "dataset (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[261, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[261, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.experimental.metric.coco_tools": [[261, "module-neural_compressor.experimental.metric.coco_tools"]], "evaluate() (in module neural_compressor.experimental.metric.evaluate_squad)": [[262, "neural_compressor.experimental.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[262, "neural_compressor.experimental.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[262, "neural_compressor.experimental.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.evaluate_squad)": [[262, "neural_compressor.experimental.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.evaluate_squad": [[262, "module-neural_compressor.experimental.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.experimental.metric.f1)": [[263, "neural_compressor.experimental.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.experimental.metric.f1)": [[263, "neural_compressor.experimental.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.f1)": [[263, "neural_compressor.experimental.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[263, "module-neural_compressor.experimental.metric.f1"]], "normalize_answer() (in module neural_compressor.experimental.metric.f1)": [[263, "neural_compressor.experimental.metric.f1.normalize_answer"]], "neural_compressor.experimental.metric": [[264, "module-neural_compressor.experimental.metric"]], "accuracy (class in neural_compressor.experimental.metric.metric)": [[265, "neural_compressor.experimental.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.experimental.metric.metric)": [[265, "neural_compressor.experimental.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.experimental.metric.metric)": [[265, "neural_compressor.experimental.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.experimental.metric.metric)": [[265, "neural_compressor.experimental.metric.metric.F1"]], "generaltopk (class in neural_compressor.experimental.metric.metric)": [[265, "neural_compressor.experimental.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.experimental.metric.metric)": [[265, "neural_compressor.experimental.metric.metric.Loss"]], "mae (class in neural_compressor.experimental.metric.metric)": [[265, "neural_compressor.experimental.metric.metric.MAE"]], "metrics (class in neural_compressor.experimental.metric.metric)": [[265, "neural_compressor.experimental.metric.metric.METRICS"]], "mse (class in neural_compressor.experimental.metric.metric)": [[265, "neural_compressor.experimental.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.experimental.metric.metric)": [[265, "neural_compressor.experimental.metric.metric.MXNetMetrics"]], "onnxrtglue (class in neural_compressor.experimental.metric.metric)": [[265, "neural_compressor.experimental.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.experimental.metric.metric)": [[265, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.experimental.metric.metric)": [[265, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.experimental.metric.metric)": [[265, "neural_compressor.experimental.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.experimental.metric.metric)": [[265, "neural_compressor.experimental.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.experimental.metric.metric)": [[265, "neural_compressor.experimental.metric.metric.RMSE"]], "roc (class in neural_compressor.experimental.metric.metric)": [[265, "neural_compressor.experimental.metric.metric.ROC"]], "squadf1 (class in neural_compressor.experimental.metric.metric)": [[265, "neural_compressor.experimental.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.experimental.metric.metric)": [[265, "neural_compressor.experimental.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.experimental.metric.metric)": [[265, "neural_compressor.experimental.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.experimental.metric.metric)": [[265, "neural_compressor.experimental.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.experimental.metric.metric)": [[265, "neural_compressor.experimental.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.experimental.metric.metric)": [[265, "neural_compressor.experimental.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.experimental.metric.metric)": [[265, "neural_compressor.experimental.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.experimental.metric.metric)": [[265, "neural_compressor.experimental.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.experimental.metric.metric)": [[265, "neural_compressor.experimental.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.experimental.metric.metric.mae attribute)": [[265, "neural_compressor.experimental.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.experimental.metric.metric.mse attribute)": [[265, "neural_compressor.experimental.metric.metric.MSE.compare_label"]], "k (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[265, "neural_compressor.experimental.metric.metric.GeneralTopK.k"]], "k (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[265, "neural_compressor.experimental.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[265, "neural_compressor.experimental.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mae attribute)": [[265, "neural_compressor.experimental.metric.metric.MAE.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mse attribute)": [[265, "neural_compressor.experimental.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.experimental.metric.metric)": [[265, "neural_compressor.experimental.metric.metric.mIOU"]], "metric_registry() (in module neural_compressor.experimental.metric.metric)": [[265, "neural_compressor.experimental.metric.metric.metric_registry"]], "metrics (neural_compressor.experimental.metric.metric.metrics attribute)": [[265, "neural_compressor.experimental.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.experimental.metric.metric.mxnetmetrics attribute)": [[265, "neural_compressor.experimental.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtitmetrics attribute)": [[265, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtqlmetrics attribute)": [[265, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.pytorchmetrics attribute)": [[265, "neural_compressor.experimental.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.tensorflowmetrics attribute)": [[265, "neural_compressor.experimental.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.experimental.metric.metric.rmse attribute)": [[265, "neural_compressor.experimental.metric.metric.RMSE.mse"]], "neural_compressor.experimental.metric.metric": [[265, "module-neural_compressor.experimental.metric.metric"]], "num_correct (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[265, "neural_compressor.experimental.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[265, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[265, "neural_compressor.experimental.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[265, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[265, "neural_compressor.experimental.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mae attribute)": [[265, "neural_compressor.experimental.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mse attribute)": [[265, "neural_compressor.experimental.metric.metric.MSE.pred_list"]], "sample (neural_compressor.experimental.metric.metric.accuracy attribute)": [[265, "neural_compressor.experimental.metric.metric.Accuracy.sample"]], "sample (neural_compressor.experimental.metric.metric.loss attribute)": [[265, "neural_compressor.experimental.metric.metric.Loss.sample"]], "sum (neural_compressor.experimental.metric.metric.loss attribute)": [[265, "neural_compressor.experimental.metric.metric.Loss.sum"]], "mixedprecision (class in neural_compressor.experimental.mixed_precision)": [[266, "neural_compressor.experimental.mixed_precision.MixedPrecision"]], "neural_compressor.experimental.mixed_precision": [[266, "module-neural_compressor.experimental.mixed_precision"]], "modelconversion (class in neural_compressor.experimental.model_conversion)": [[267, "neural_compressor.experimental.model_conversion.ModelConversion"]], "neural_compressor.experimental.model_conversion": [[267, "module-neural_compressor.experimental.model_conversion"]], "basicnas (class in neural_compressor.experimental.nas.basic_nas)": [[268, "neural_compressor.experimental.nas.basic_nas.BasicNAS"]], "neural_compressor.experimental.nas.basic_nas": [[268, "module-neural_compressor.experimental.nas.basic_nas"]], "dynas (class in neural_compressor.experimental.nas.dynas)": [[269, "neural_compressor.experimental.nas.dynas.DyNAS"]], "neural_compressor.experimental.nas.dynas": [[269, "module-neural_compressor.experimental.nas.dynas"]], "neural_compressor.experimental.nas": [[270, "module-neural_compressor.experimental.nas"]], "nas (class in neural_compressor.experimental.nas.nas)": [[271, "neural_compressor.experimental.nas.nas.NAS"]], "nasbase (class in neural_compressor.experimental.nas.nas)": [[271, "neural_compressor.experimental.nas.nas.NASBase"]], "neural_compressor.experimental.nas.nas": [[271, "module-neural_compressor.experimental.nas.nas"]], "create_search_space_pool() (in module neural_compressor.experimental.nas.nas_utils)": [[272, "neural_compressor.experimental.nas.nas_utils.create_search_space_pool"]], "find_pareto_front() (in module neural_compressor.experimental.nas.nas_utils)": [[272, "neural_compressor.experimental.nas.nas_utils.find_pareto_front"]], "nas_registry() (in module neural_compressor.experimental.nas.nas_utils)": [[272, "neural_compressor.experimental.nas.nas_utils.nas_registry"]], "neural_compressor.experimental.nas.nas_utils": [[272, "module-neural_compressor.experimental.nas.nas_utils"]], "bayesianoptimizationsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[273, "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher"]], "gridsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[273, "neural_compressor.experimental.nas.search_algorithms.GridSearcher"]], "randomsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[273, "neural_compressor.experimental.nas.search_algorithms.RandomSearcher"]], "searcher (class in neural_compressor.experimental.nas.search_algorithms)": [[273, "neural_compressor.experimental.nas.search_algorithms.Searcher"]], "neural_compressor.experimental.nas.search_algorithms": [[273, "module-neural_compressor.experimental.nas.search_algorithms"]], "gradientsensitivitypruner (class in neural_compressor.experimental.pruner_legacy.gradient_sensitivity)": [[274, "neural_compressor.experimental.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[274, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"]], "grouplassopruner (class in neural_compressor.experimental.pruner_legacy.group_lasso)": [[275, "neural_compressor.experimental.pruner_legacy.group_lasso.GroupLassoPruner"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[275, "module-neural_compressor.experimental.pruner_legacy.group_lasso"]], "neural_compressor.experimental.pruner_legacy": [[276, "module-neural_compressor.experimental.pruner_legacy"]], "basicmagnitudepruner (class in neural_compressor.experimental.pruner_legacy.magnitude)": [[277, "neural_compressor.experimental.pruner_legacy.magnitude.BasicMagnitudePruner"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[277, "module-neural_compressor.experimental.pruner_legacy.magnitude"]], "patternlockpruner (class in neural_compressor.experimental.pruner_legacy.pattern_lock)": [[278, "neural_compressor.experimental.pruner_legacy.pattern_lock.PatternLockPruner"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[278, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"]], "pruner (class in neural_compressor.experimental.pruner_legacy.pruner)": [[279, "neural_compressor.experimental.pruner_legacy.pruner.Pruner"]], "neural_compressor.experimental.pruner_legacy.pruner": [[279, "module-neural_compressor.experimental.pruner_legacy.pruner"]], "pruner_registry() (in module neural_compressor.experimental.pruner_legacy.pruner)": [[279, "neural_compressor.experimental.pruner_legacy.pruner.pruner_registry"]], "pruning (class in neural_compressor.experimental.pruning)": [[280, "neural_compressor.experimental.pruning.Pruning"]], "tfpruningcallback (class in neural_compressor.experimental.pruning)": [[280, "neural_compressor.experimental.pruning.TfPruningCallback"]], "conf (neural_compressor.experimental.pruning.pruning attribute)": [[280, "neural_compressor.experimental.pruning.Pruning.conf"]], "neural_compressor.experimental.pruning": [[280, "module-neural_compressor.experimental.pruning"]], "pruners (neural_compressor.experimental.pruning.pruning attribute)": [[280, "neural_compressor.experimental.pruning.Pruning.pruners"]], "neural_compressor.experimental.pruning_recipes": [[281, "module-neural_compressor.experimental.pruning_recipes"]], "neural_compressor.experimental.pruning_recipes.patterns": [[282, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "patterns (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[283, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS"]], "patternbase (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[283, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[283, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "pattern_registry() (in module neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[283, "neural_compressor.experimental.pruning_recipes.patterns.pattern.pattern_registry"]], "patterns (neural_compressor.experimental.pruning_recipes.patterns.pattern.patterns attribute)": [[283, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS.patterns"]], "tilepatternbase (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[284, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePatternBase"]], "tilepattern_1x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[284, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x1"]], "tilepattern_1x16 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[284, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x16"]], "tilepattern_1x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[284, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x2"]], "tilepattern_2x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[284, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_2x2"]], "tilepattern_4x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[284, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_4x1"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[284, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "pruning (class in neural_compressor.experimental.pruning_v2)": [[285, "neural_compressor.experimental.pruning_v2.Pruning"]], "tfpruningcallback (class in neural_compressor.experimental.pruning_v2)": [[285, "neural_compressor.experimental.pruning_v2.TfPruningCallback"]], "conf (neural_compressor.experimental.pruning_v2.pruning attribute)": [[285, "neural_compressor.experimental.pruning_v2.Pruning.conf"]], "neural_compressor.experimental.pruning_v2": [[285, "module-neural_compressor.experimental.pruning_v2"]], "pruners (neural_compressor.experimental.pruning_v2.pruning attribute)": [[285, "neural_compressor.experimental.pruning_v2.Pruning.pruners"]], "neural_compressor.experimental.pytorch_pruner": [[286, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[287, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "m (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[288, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.M"]], "n (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[288, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.N"]], "pattern (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[288, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern"]], "patternninm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[288, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM"]], "patternnxm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[288, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM"]], "block_size (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm attribute)": [[288, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.block_size"]], "get_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[288, "neural_compressor.experimental.pytorch_pruner.patterns.get_pattern"]], "is_global (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[288, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.is_global"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[288, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "pattern (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[288, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.pattern"]], "register_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[288, "neural_compressor.experimental.pytorch_pruner.patterns.register_pattern"]], "check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[289, "neural_compressor.experimental.pytorch_pruner.prune_utils.check_config"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[289, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "parse_not_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[289, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_not_to_prune"]], "parse_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[289, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_to_prune"]], "process_and_check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[289, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_and_check_config"]], "process_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[289, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_config"]], "reset_non_value_to_default() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[289, "neural_compressor.experimental.pytorch_pruner.prune_utils.reset_non_value_to_default"]], "magnitudepruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[290, "neural_compressor.experimental.pytorch_pruner.pruner.MagnitudePruner"]], "patternlockpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[290, "neural_compressor.experimental.pytorch_pruner.pruner.PatternLockPruner"]], "pruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[290, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner"]], "snipmomentumpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[290, "neural_compressor.experimental.pytorch_pruner.pruner.SnipMomentumPruner"]], "snippruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[290, "neural_compressor.experimental.pytorch_pruner.pruner.SnipPruner"]], "config (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[290, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.config"]], "current_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[290, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.current_sparsity_ratio"]], "end_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[290, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.end_step"]], "get_pruner() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[290, "neural_compressor.experimental.pytorch_pruner.pruner.get_pruner"]], "global_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[290, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.global_step"]], "masks (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[290, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.masks"]], "max_sparsity_ratio_per_layer (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[290, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.max_sparsity_ratio_per_layer"]], "modules (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[290, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.modules"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[290, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "pattern (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[290, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.pattern"]], "register_pruners() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[290, "neural_compressor.experimental.pytorch_pruner.pruner.register_pruners"]], "scheduler (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[290, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scheduler"]], "scores (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[290, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scores"]], "start_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[290, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.start_step"]], "target_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[290, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.target_sparsity_ratio"]], "update_frequency_on_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[290, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.update_frequency_on_step"]], "pruning (class in neural_compressor.experimental.pytorch_pruner.pruning)": [[291, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning"]], "config_file_path (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[291, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.config_file_path"]], "model (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[291, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.model"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[291, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "pruner_info (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[291, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruner_info"]], "pruners (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[291, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruners"]], "iterativescheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[292, "neural_compressor.experimental.pytorch_pruner.scheduler.IterativeScheduler"]], "oneshotscheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[292, "neural_compressor.experimental.pytorch_pruner.scheduler.OneshotScheduler"]], "scheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[292, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler"]], "config (neural_compressor.experimental.pytorch_pruner.scheduler.scheduler attribute)": [[292, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler.config"]], "get_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[292, "neural_compressor.experimental.pytorch_pruner.scheduler.get_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[292, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "register_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[292, "neural_compressor.experimental.pytorch_pruner.scheduler.register_scheduler"]], "quantization (class in neural_compressor.experimental.quantization)": [[293, "neural_compressor.experimental.quantization.Quantization"]], "neural_compressor.experimental.quantization": [[293, "module-neural_compressor.experimental.quantization"]], "scheduler (class in neural_compressor.experimental.scheduler)": [[294, "neural_compressor.experimental.scheduler.Scheduler"]], "neural_compressor.experimental.scheduler": [[294, "module-neural_compressor.experimental.scheduler"]], "automixedprecisiontunestrategy (class in neural_compressor.experimental.strategy.auto_mixed_precision)": [[295, "neural_compressor.experimental.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy"]], "neural_compressor.experimental.strategy.auto_mixed_precision": [[295, "module-neural_compressor.experimental.strategy.auto_mixed_precision"]], "basictunestrategy (class in neural_compressor.experimental.strategy.basic)": [[296, "neural_compressor.experimental.strategy.basic.BasicTuneStrategy"]], "neural_compressor.experimental.strategy.basic": [[296, "module-neural_compressor.experimental.strategy.basic"]], "bayesianoptimization (class in neural_compressor.experimental.strategy.bayesian)": [[297, "neural_compressor.experimental.strategy.bayesian.BayesianOptimization"]], "bayesiantunestrategy (class in neural_compressor.experimental.strategy.bayesian)": [[297, "neural_compressor.experimental.strategy.bayesian.BayesianTuneStrategy"]], "targetspace (class in neural_compressor.experimental.strategy.bayesian)": [[297, "neural_compressor.experimental.strategy.bayesian.TargetSpace"]], "acq_max() (in module neural_compressor.experimental.strategy.bayesian)": [[297, "neural_compressor.experimental.strategy.bayesian.acq_max"]], "neural_compressor.experimental.strategy.bayesian": [[297, "module-neural_compressor.experimental.strategy.bayesian"]], "exhaustivetunestrategy (class in neural_compressor.experimental.strategy.exhaustive)": [[298, "neural_compressor.experimental.strategy.exhaustive.ExhaustiveTuneStrategy"]], "neural_compressor.experimental.strategy.exhaustive": [[298, "module-neural_compressor.experimental.strategy.exhaustive"]], "neural_compressor.experimental.strategy": [[299, "module-neural_compressor.experimental.strategy"]], "msetunestrategy (class in neural_compressor.experimental.strategy.mse)": [[300, "neural_compressor.experimental.strategy.mse.MSETuneStrategy"]], "neural_compressor.experimental.strategy.mse": [[300, "module-neural_compressor.experimental.strategy.mse"]], "mse_v2tunestrategy (class in neural_compressor.experimental.strategy.mse_v2)": [[301, "neural_compressor.experimental.strategy.mse_v2.MSE_V2TuneStrategy"]], "neural_compressor.experimental.strategy.mse_v2": [[301, "module-neural_compressor.experimental.strategy.mse_v2"]], "randomtunestrategy (class in neural_compressor.experimental.strategy.random)": [[302, "neural_compressor.experimental.strategy.random.RandomTuneStrategy"]], "neural_compressor.experimental.strategy.random": [[302, "module-neural_compressor.experimental.strategy.random"]], "tunestrategy (class in neural_compressor.experimental.strategy.strategy)": [[303, "neural_compressor.experimental.strategy.strategy.TuneStrategy"]], "neural_compressor.experimental.strategy.strategy": [[303, "module-neural_compressor.experimental.strategy.strategy"]], "strategy_registry() (in module neural_compressor.experimental.strategy.strategy)": [[303, "neural_compressor.experimental.strategy.strategy.strategy_registry"]], "neural_compressor.experimental.strategy.utils.constant": [[304, "module-neural_compressor.experimental.strategy.utils.constant"]], "neural_compressor.experimental.strategy.utils": [[305, "module-neural_compressor.experimental.strategy.utils"]], "fallbacktuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[306, "neural_compressor.experimental.strategy.utils.tuning_sampler.FallbackTuningSampler"]], "modelwisetuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[306, "neural_compressor.experimental.strategy.utils.tuning_sampler.ModelWiseTuningSampler"]], "optypewisetuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[306, "neural_compressor.experimental.strategy.utils.tuning_sampler.OpTypeWiseTuningSampler"]], "opwisetuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[306, "neural_compressor.experimental.strategy.utils.tuning_sampler.OpWiseTuningSampler"]], "smoothquantsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[306, "neural_compressor.experimental.strategy.utils.tuning_sampler.SmoothQuantSampler"]], "tuningorder (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[306, "neural_compressor.experimental.strategy.utils.tuning_sampler.TuningOrder"]], "tuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[306, "neural_compressor.experimental.strategy.utils.tuning_sampler.TuningSampler"]], "tuningsamplerregistry (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[306, "neural_compressor.experimental.strategy.utils.tuning_sampler.TuningSamplerRegistry"]], "neural_compressor.experimental.strategy.utils.tuning_sampler": [[306, "module-neural_compressor.experimental.strategy.utils.tuning_sampler"]], "tuningitem (class in neural_compressor.experimental.strategy.utils.tuning_space)": [[307, "neural_compressor.experimental.strategy.utils.tuning_space.TuningItem"]], "tuningspace (class in neural_compressor.experimental.strategy.utils.tuning_space)": [[307, "neural_compressor.experimental.strategy.utils.tuning_space.TuningSpace"]], "initial_tuning_cfg_with_quant_mode() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[307, "neural_compressor.experimental.strategy.utils.tuning_space.initial_tuning_cfg_with_quant_mode"]], "neural_compressor.experimental.strategy.utils.tuning_space": [[307, "module-neural_compressor.experimental.strategy.utils.tuning_space"]], "pattern_to_internal() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[307, "neural_compressor.experimental.strategy.utils.tuning_space.pattern_to_internal"]], "pattern_to_path() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[307, "neural_compressor.experimental.strategy.utils.tuning_space.pattern_to_path"]], "quant_mode_from_pattern() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[307, "neural_compressor.experimental.strategy.utils.tuning_space.quant_mode_from_pattern"]], "optuningconfig (class in neural_compressor.experimental.strategy.utils.tuning_structs)": [[308, "neural_compressor.experimental.strategy.utils.tuning_structs.OpTuningConfig"]], "neural_compressor.experimental.strategy.utils.tuning_structs": [[308, "module-neural_compressor.experimental.strategy.utils.tuning_structs"]], "ordereddefaultdict (class in neural_compressor.experimental.strategy.utils.utility)": [[309, "neural_compressor.experimental.strategy.utils.utility.OrderedDefaultDict"]], "extract_data_type() (in module neural_compressor.experimental.strategy.utils.utility)": [[309, "neural_compressor.experimental.strategy.utils.utility.extract_data_type"]], "get_adaptor_name() (in module neural_compressor.experimental.strategy.utils.utility)": [[309, "neural_compressor.experimental.strategy.utils.utility.get_adaptor_name"]], "neural_compressor.experimental.strategy.utils.utility": [[309, "module-neural_compressor.experimental.strategy.utils.utility"]], "reverted_data_type() (in module neural_compressor.experimental.strategy.utils.utility)": [[309, "neural_compressor.experimental.strategy.utils.utility.reverted_data_type"]], "neural_compressor": [[310, "module-neural_compressor"]], "bleu (class in neural_compressor.metric.bleu)": [[311, "neural_compressor.metric.bleu.BLEU"]], "unicoderegex (class in neural_compressor.metric.bleu)": [[311, "neural_compressor.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.metric.bleu)": [[311, "neural_compressor.metric.bleu.bleu_tokenize"]], "labels (neural_compressor.metric.bleu.bleu attribute)": [[311, "neural_compressor.metric.bleu.BLEU.labels"]], "neural_compressor.metric.bleu": [[311, "module-neural_compressor.metric.bleu"]], "nondigit_punct_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[311, "neural_compressor.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "predictions (neural_compressor.metric.bleu.bleu attribute)": [[311, "neural_compressor.metric.bleu.BLEU.predictions"]], "punct_nondigit_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[311, "neural_compressor.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "symbol_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[311, "neural_compressor.metric.bleu.UnicodeRegex.symbol_re"]], "compute_bleu() (in module neural_compressor.metric.bleu_util)": [[312, "neural_compressor.metric.bleu_util.compute_bleu"]], "neural_compressor.metric.bleu_util": [[312, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[313, "module-neural_compressor.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.metric.coco_tools)": [[314, "neural_compressor.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.metric.coco_tools)": [[314, "neural_compressor.metric.coco_tools.COCOWrapper"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.metric.coco_tools)": [[314, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.metric.coco_tools)": [[314, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.metric.coco_tools)": [[314, "neural_compressor.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "dataset (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[314, "neural_compressor.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[314, "neural_compressor.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.metric.coco_tools": [[314, "module-neural_compressor.metric.coco_tools"]], "evaluate() (in module neural_compressor.metric.evaluate_squad)": [[315, "neural_compressor.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.metric.evaluate_squad)": [[315, "neural_compressor.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.metric.evaluate_squad)": [[315, "neural_compressor.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.evaluate_squad)": [[315, "neural_compressor.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.metric.evaluate_squad": [[315, "module-neural_compressor.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.metric.f1)": [[316, "neural_compressor.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.metric.f1)": [[316, "neural_compressor.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.f1)": [[316, "neural_compressor.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[316, "module-neural_compressor.metric.f1"]], "normalize_answer() (in module neural_compressor.metric.f1)": [[316, "neural_compressor.metric.f1.normalize_answer"]], "neural_compressor.metric": [[317, "module-neural_compressor.metric"]], "accuracy (class in neural_compressor.metric.metric)": [[318, "neural_compressor.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.metric.metric)": [[318, "neural_compressor.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.metric.metric)": [[318, "neural_compressor.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.metric.metric)": [[318, "neural_compressor.metric.metric.F1"]], "generaltopk (class in neural_compressor.metric.metric)": [[318, "neural_compressor.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.metric.metric)": [[318, "neural_compressor.metric.metric.Loss"]], "mae (class in neural_compressor.metric.metric)": [[318, "neural_compressor.metric.metric.MAE"]], "metrics (class in neural_compressor.metric.metric)": [[318, "neural_compressor.metric.metric.METRICS"]], "mse (class in neural_compressor.metric.metric)": [[318, "neural_compressor.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.metric.metric)": [[318, "neural_compressor.metric.metric.MXNetMetrics"]], "metric (class in neural_compressor.metric.metric)": [[318, "neural_compressor.metric.metric.Metric"]], "onnxrtglue (class in neural_compressor.metric.metric)": [[318, "neural_compressor.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.metric.metric)": [[318, "neural_compressor.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.metric.metric)": [[318, "neural_compressor.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.metric.metric)": [[318, "neural_compressor.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.metric.metric)": [[318, "neural_compressor.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.metric.metric)": [[318, "neural_compressor.metric.metric.RMSE"]], "roc (class in neural_compressor.metric.metric)": [[318, "neural_compressor.metric.metric.ROC"]], "squadf1 (class in neural_compressor.metric.metric)": [[318, "neural_compressor.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.metric.metric)": [[318, "neural_compressor.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.metric.metric)": [[318, "neural_compressor.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.metric.metric)": [[318, "neural_compressor.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.metric.metric)": [[318, "neural_compressor.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.metric.metric)": [[318, "neural_compressor.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.metric.metric)": [[318, "neural_compressor.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.metric.metric)": [[318, "neural_compressor.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.metric.metric)": [[318, "neural_compressor.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.metric.metric.mae attribute)": [[318, "neural_compressor.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.metric.metric.mse attribute)": [[318, "neural_compressor.metric.metric.MSE.compare_label"]], "k (neural_compressor.metric.metric.generaltopk attribute)": [[318, "neural_compressor.metric.metric.GeneralTopK.k"]], "k (neural_compressor.metric.metric.tensorflowtopk attribute)": [[318, "neural_compressor.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.metric.metric.accuracy attribute)": [[318, "neural_compressor.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.metric.metric.mae attribute)": [[318, "neural_compressor.metric.metric.MAE.label_list"]], "label_list (neural_compressor.metric.metric.mse attribute)": [[318, "neural_compressor.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.metric.metric)": [[318, "neural_compressor.metric.metric.mIOU"]], "metric_registry() (in module neural_compressor.metric.metric)": [[318, "neural_compressor.metric.metric.metric_registry"]], "metrics (neural_compressor.metric.metric.metrics attribute)": [[318, "neural_compressor.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.metric.metric.mxnetmetrics attribute)": [[318, "neural_compressor.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtitmetrics attribute)": [[318, "neural_compressor.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtqlmetrics attribute)": [[318, "neural_compressor.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.metric.metric.pytorchmetrics attribute)": [[318, "neural_compressor.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.metric.metric.tensorflowmetrics attribute)": [[318, "neural_compressor.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.metric.metric.rmse attribute)": [[318, "neural_compressor.metric.metric.RMSE.mse"]], "neural_compressor.metric.metric": [[318, "module-neural_compressor.metric.metric"]], "num_correct (neural_compressor.metric.metric.generaltopk attribute)": [[318, "neural_compressor.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.metric.metric.tensorflowtopk attribute)": [[318, "neural_compressor.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.metric.metric.generaltopk attribute)": [[318, "neural_compressor.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.metric.metric.tensorflowtopk attribute)": [[318, "neural_compressor.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.metric.metric.accuracy attribute)": [[318, "neural_compressor.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.metric.metric.mae attribute)": [[318, "neural_compressor.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.metric.metric.mse attribute)": [[318, "neural_compressor.metric.metric.MSE.pred_list"]], "register_customer_metric() (in module neural_compressor.metric.metric)": [[318, "neural_compressor.metric.metric.register_customer_metric"]], "sample (neural_compressor.metric.metric.accuracy attribute)": [[318, "neural_compressor.metric.metric.Accuracy.sample"]], "sample (neural_compressor.metric.metric.loss attribute)": [[318, "neural_compressor.metric.metric.Loss.sample"]], "sum (neural_compressor.metric.metric.loss attribute)": [[318, "neural_compressor.metric.metric.Loss.sum"]], "fit() (in module neural_compressor.mix_precision)": [[319, "neural_compressor.mix_precision.fit"]], "neural_compressor.mix_precision": [[319, "module-neural_compressor.mix_precision"]], "basemodel (class in neural_compressor.model.base_model)": [[320, "neural_compressor.model.base_model.BaseModel"]], "neural_compressor.model.base_model": [[320, "module-neural_compressor.model.base_model"]], "neural_compressor.model": [[321, "module-neural_compressor.model"]], "kerasmodel (class in neural_compressor.model.keras_model)": [[322, "neural_compressor.model.keras_model.KerasModel"]], "neural_compressor.model.keras_model": [[322, "module-neural_compressor.model.keras_model"]], "model (class in neural_compressor.model.model)": [[323, "neural_compressor.model.model.Model"]], "get_model_fwk_name() (in module neural_compressor.model.model)": [[323, "neural_compressor.model.model.get_model_fwk_name"]], "neural_compressor.model.model": [[323, "module-neural_compressor.model.model"]], "mxnetmodel (class in neural_compressor.model.mxnet_model)": [[324, "neural_compressor.model.mxnet_model.MXNetModel"]], "neural_compressor.model.mxnet_model": [[324, "module-neural_compressor.model.mxnet_model"]], "tfslimnetsfactory (class in neural_compressor.model.nets_factory)": [[325, "neural_compressor.model.nets_factory.TFSlimNetsFactory"]], "neural_compressor.model.nets_factory": [[325, "module-neural_compressor.model.nets_factory"]], "onnxmodel (class in neural_compressor.model.onnx_model)": [[326, "neural_compressor.model.onnx_model.ONNXModel"]], "neural_compressor.model.onnx_model": [[326, "module-neural_compressor.model.onnx_model"]], "tensorflowbasemodel (class in neural_compressor.model.tensorflow_model)": [[327, "neural_compressor.model.tensorflow_model.TensorflowBaseModel"]], "tensorflowcheckpointmodel (class in neural_compressor.model.tensorflow_model)": [[327, "neural_compressor.model.tensorflow_model.TensorflowCheckpointModel"]], "tensorflowmodel (class in neural_compressor.model.tensorflow_model)": [[327, "neural_compressor.model.tensorflow_model.TensorflowModel"]], "tensorflowqatmodel (class in neural_compressor.model.tensorflow_model)": [[327, "neural_compressor.model.tensorflow_model.TensorflowQATModel"]], "tensorflowsavedmodelmodel (class in neural_compressor.model.tensorflow_model)": [[327, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel"]], "checkpoint_session() (in module neural_compressor.model.tensorflow_model)": [[327, "neural_compressor.model.tensorflow_model.checkpoint_session"]], "estimator_session() (in module neural_compressor.model.tensorflow_model)": [[327, "neural_compressor.model.tensorflow_model.estimator_session"]], "frozen_pb_session() (in module neural_compressor.model.tensorflow_model)": [[327, "neural_compressor.model.tensorflow_model.frozen_pb_session"]], "get_model_type() (in module neural_compressor.model.tensorflow_model)": [[327, "neural_compressor.model.tensorflow_model.get_model_type"]], "graph_def_session() (in module neural_compressor.model.tensorflow_model)": [[327, "neural_compressor.model.tensorflow_model.graph_def_session"]], "graph_session() (in module neural_compressor.model.tensorflow_model)": [[327, "neural_compressor.model.tensorflow_model.graph_session"]], "keras_session() (in module neural_compressor.model.tensorflow_model)": [[327, "neural_compressor.model.tensorflow_model.keras_session"]], "load_saved_model() (in module neural_compressor.model.tensorflow_model)": [[327, "neural_compressor.model.tensorflow_model.load_saved_model"]], "neural_compressor.model.tensorflow_model": [[327, "module-neural_compressor.model.tensorflow_model"]], "saved_model_session() (in module neural_compressor.model.tensorflow_model)": [[327, "neural_compressor.model.tensorflow_model.saved_model_session"]], "slim_session() (in module neural_compressor.model.tensorflow_model)": [[327, "neural_compressor.model.tensorflow_model.slim_session"]], "validate_and_inference_input_output() (in module neural_compressor.model.tensorflow_model)": [[327, "neural_compressor.model.tensorflow_model.validate_and_inference_input_output"]], "validate_graph_node() (in module neural_compressor.model.tensorflow_model)": [[327, "neural_compressor.model.tensorflow_model.validate_graph_node"]], "ipexmodel (class in neural_compressor.model.torch_model)": [[328, "neural_compressor.model.torch_model.IPEXModel"]], "pytorchbasemodel (class in neural_compressor.model.torch_model)": [[328, "neural_compressor.model.torch_model.PyTorchBaseModel"]], "pytorchfxmodel (class in neural_compressor.model.torch_model)": [[328, "neural_compressor.model.torch_model.PyTorchFXModel"]], "pytorchmodel (class in neural_compressor.model.torch_model)": [[328, "neural_compressor.model.torch_model.PyTorchModel"]], "neural_compressor.model.torch_model": [[328, "module-neural_compressor.model.torch_model"]], "accuracy (class in neural_compressor.objective)": [[329, "neural_compressor.objective.Accuracy"]], "footprint (class in neural_compressor.objective)": [[329, "neural_compressor.objective.Footprint"]], "modelsize (class in neural_compressor.objective)": [[329, "neural_compressor.objective.ModelSize"]], "multiobjective (class in neural_compressor.objective)": [[329, "neural_compressor.objective.MultiObjective"]], "objective (class in neural_compressor.objective)": [[329, "neural_compressor.objective.Objective"]], "performance (class in neural_compressor.objective)": [[329, "neural_compressor.objective.Performance"]], "neural_compressor.objective": [[329, "module-neural_compressor.objective"]], "objective_custom_registry() (in module neural_compressor.objective)": [[329, "neural_compressor.objective.objective_custom_registry"]], "objective_registry() (in module neural_compressor.objective)": [[329, "neural_compressor.objective.objective_registry"]], "neural_compressor.profiling": [[330, "module-neural_compressor.profiling"]], "parserfactory (class in neural_compressor.profiling.parser.factory)": [[331, "neural_compressor.profiling.parser.factory.ParserFactory"]], "neural_compressor.profiling.parser.factory": [[331, "module-neural_compressor.profiling.parser.factory"]], "neural_compressor.profiling.parser": [[332, "module-neural_compressor.profiling.parser"]], "onnxrtparserfactory (class in neural_compressor.profiling.parser.onnx_parser.factory)": [[333, "neural_compressor.profiling.parser.onnx_parser.factory.OnnxrtParserFactory"]], "neural_compressor.profiling.parser.onnx_parser.factory": [[333, "module-neural_compressor.profiling.parser.onnx_parser.factory"]], "neural_compressor.profiling.parser.onnx_parser": [[334, "module-neural_compressor.profiling.parser.onnx_parser"]], "onnxprofilingparser (class in neural_compressor.profiling.parser.onnx_parser.parser)": [[335, "neural_compressor.profiling.parser.onnx_parser.parser.OnnxProfilingParser"]], "neural_compressor.profiling.parser.onnx_parser.parser": [[335, "module-neural_compressor.profiling.parser.onnx_parser.parser"]], "profilingparser (class in neural_compressor.profiling.parser.parser)": [[336, "neural_compressor.profiling.parser.parser.ProfilingParser"]], "neural_compressor.profiling.parser.parser": [[336, "module-neural_compressor.profiling.parser.parser"]], "profilingresult (class in neural_compressor.profiling.parser.result)": [[337, "neural_compressor.profiling.parser.result.ProfilingResult"]], "neural_compressor.profiling.parser.result": [[337, "module-neural_compressor.profiling.parser.result"]], "tensorflowparserfactory (class in neural_compressor.profiling.parser.tensorflow_parser.factory)": [[338, "neural_compressor.profiling.parser.tensorflow_parser.factory.TensorFlowParserFactory"]], "neural_compressor.profiling.parser.tensorflow_parser.factory": [[338, "module-neural_compressor.profiling.parser.tensorflow_parser.factory"]], "neural_compressor.profiling.parser.tensorflow_parser": [[339, "module-neural_compressor.profiling.parser.tensorflow_parser"]], "tensorflowprofilingparser (class in neural_compressor.profiling.parser.tensorflow_parser.parser)": [[340, "neural_compressor.profiling.parser.tensorflow_parser.parser.TensorFlowProfilingParser"]], "neural_compressor.profiling.parser.tensorflow_parser.parser": [[340, "module-neural_compressor.profiling.parser.tensorflow_parser.parser"]], "profilerfactory (class in neural_compressor.profiling.profiler.factory)": [[341, "neural_compressor.profiling.profiler.factory.ProfilerFactory"]], "neural_compressor.profiling.profiler.factory": [[341, "module-neural_compressor.profiling.profiler.factory"]], "neural_compressor.profiling.profiler": [[342, "module-neural_compressor.profiling.profiler"]], "profilerfactory (class in neural_compressor.profiling.profiler.onnxrt_profiler.factory)": [[343, "neural_compressor.profiling.profiler.onnxrt_profiler.factory.ProfilerFactory"]], "neural_compressor.profiling.profiler.onnxrt_profiler.factory": [[343, "module-neural_compressor.profiling.profiler.onnxrt_profiler.factory"]], "neural_compressor.profiling.profiler.onnxrt_profiler": [[344, "module-neural_compressor.profiling.profiler.onnxrt_profiler"]], "profiler (class in neural_compressor.profiling.profiler.onnxrt_profiler.profiler)": [[345, "neural_compressor.profiling.profiler.onnxrt_profiler.profiler.Profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.profiler": [[345, "module-neural_compressor.profiling.profiler.onnxrt_profiler.profiler"]], "create_onnx_config() (in module neural_compressor.profiling.profiler.onnxrt_profiler.utils)": [[346, "neural_compressor.profiling.profiler.onnxrt_profiler.utils.create_onnx_config"]], "neural_compressor.profiling.profiler.onnxrt_profiler.utils": [[346, "module-neural_compressor.profiling.profiler.onnxrt_profiler.utils"]], "profiler (class in neural_compressor.profiling.profiler.profiler)": [[347, "neural_compressor.profiling.profiler.profiler.Profiler"]], "neural_compressor.profiling.profiler.profiler": [[347, "module-neural_compressor.profiling.profiler.profiler"]], "profilerfactory (class in neural_compressor.profiling.profiler.tensorflow_profiler.factory)": [[348, "neural_compressor.profiling.profiler.tensorflow_profiler.factory.ProfilerFactory"]], "neural_compressor.profiling.profiler.tensorflow_profiler.factory": [[348, "module-neural_compressor.profiling.profiler.tensorflow_profiler.factory"]], "neural_compressor.profiling.profiler.tensorflow_profiler": [[349, "module-neural_compressor.profiling.profiler.tensorflow_profiler"]], "profiler (class in neural_compressor.profiling.profiler.tensorflow_profiler.profiler)": [[350, "neural_compressor.profiling.profiler.tensorflow_profiler.profiler.Profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.profiler": [[350, "module-neural_compressor.profiling.profiler.tensorflow_profiler.profiler"]], "create_tf_config() (in module neural_compressor.profiling.profiler.tensorflow_profiler.utils)": [[351, "neural_compressor.profiling.profiler.tensorflow_profiler.utils.create_tf_config"]], "delete_assign() (in module neural_compressor.profiling.profiler.tensorflow_profiler.utils)": [[351, "neural_compressor.profiling.profiler.tensorflow_profiler.utils.delete_assign"]], "neural_compressor.profiling.profiler.tensorflow_profiler.utils": [[351, "module-neural_compressor.profiling.profiler.tensorflow_profiler.utils"]], "set_eager_execution() (in module neural_compressor.profiling.profiler.tensorflow_profiler.utils)": [[351, "neural_compressor.profiling.profiler.tensorflow_profiler.utils.set_eager_execution"]], "fit() (in module neural_compressor.quantization)": [[352, "neural_compressor.quantization.fit"]], "neural_compressor.quantization": [[352, "module-neural_compressor.quantization"]], "autotunestrategy (class in neural_compressor.strategy.auto)": [[353, "neural_compressor.strategy.auto.AutoTuneStrategy"]], "neural_compressor.strategy.auto": [[353, "module-neural_compressor.strategy.auto"]], "automixedprecisiontunestrategy (class in neural_compressor.strategy.auto_mixed_precision)": [[354, "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[354, "module-neural_compressor.strategy.auto_mixed_precision"]], "basictunestrategy (class in neural_compressor.strategy.basic)": [[355, "neural_compressor.strategy.basic.BasicTuneStrategy"]], "neural_compressor.strategy.basic": [[355, "module-neural_compressor.strategy.basic"]], "bayesianoptimization (class in neural_compressor.strategy.bayesian)": [[356, "neural_compressor.strategy.bayesian.BayesianOptimization"]], "bayesiantunestrategy (class in neural_compressor.strategy.bayesian)": [[356, "neural_compressor.strategy.bayesian.BayesianTuneStrategy"]], "targetspace (class in neural_compressor.strategy.bayesian)": [[356, "neural_compressor.strategy.bayesian.TargetSpace"]], "acq_max() (in module neural_compressor.strategy.bayesian)": [[356, "neural_compressor.strategy.bayesian.acq_max"]], "neural_compressor.strategy.bayesian": [[356, "module-neural_compressor.strategy.bayesian"]], "conservativetunestrategy (class in neural_compressor.strategy.conservative)": [[357, "neural_compressor.strategy.conservative.ConservativeTuneStrategy"]], "neural_compressor.strategy.conservative": [[357, "module-neural_compressor.strategy.conservative"]], "exhaustivetunestrategy (class in neural_compressor.strategy.exhaustive)": [[358, "neural_compressor.strategy.exhaustive.ExhaustiveTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[358, "module-neural_compressor.strategy.exhaustive"]], "hawq_v2tunestrategy (class in neural_compressor.strategy.hawq_v2)": [[359, "neural_compressor.strategy.hawq_v2.HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.hawq_v2": [[359, "module-neural_compressor.strategy.hawq_v2"]], "neural_compressor.strategy": [[360, "module-neural_compressor.strategy"]], "msetunestrategy (class in neural_compressor.strategy.mse)": [[361, "neural_compressor.strategy.mse.MSETuneStrategy"]], "neural_compressor.strategy.mse": [[361, "module-neural_compressor.strategy.mse"]], "mse_v2tunestrategy (class in neural_compressor.strategy.mse_v2)": [[362, "neural_compressor.strategy.mse_v2.MSE_V2TuneStrategy"]], "neural_compressor.strategy.mse_v2": [[362, "module-neural_compressor.strategy.mse_v2"]], "randomtunestrategy (class in neural_compressor.strategy.random)": [[363, "neural_compressor.strategy.random.RandomTuneStrategy"]], "neural_compressor.strategy.random": [[363, "module-neural_compressor.strategy.random"]], "tunestrategy (class in neural_compressor.strategy.strategy)": [[364, "neural_compressor.strategy.strategy.TuneStrategy"]], "tunestrategymeta (class in neural_compressor.strategy.strategy)": [[364, "neural_compressor.strategy.strategy.TuneStrategyMeta"]], "neural_compressor.strategy.strategy": [[364, "module-neural_compressor.strategy.strategy"]], "strategy_registry() (in module neural_compressor.strategy.strategy)": [[364, "neural_compressor.strategy.strategy.strategy_registry"]], "neural_compressor.strategy.utils.constant": [[365, "module-neural_compressor.strategy.utils.constant"]], "neural_compressor.strategy.utils": [[366, "module-neural_compressor.strategy.utils"]], "blockfallbacktuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[367, "neural_compressor.strategy.utils.tuning_sampler.BlockFallbackTuningSampler"]], "fallbacktuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[367, "neural_compressor.strategy.utils.tuning_sampler.FallbackTuningSampler"]], "modelwisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[367, "neural_compressor.strategy.utils.tuning_sampler.ModelWiseTuningSampler"]], "optypewisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[367, "neural_compressor.strategy.utils.tuning_sampler.OpTypeWiseTuningSampler"]], "opwisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[367, "neural_compressor.strategy.utils.tuning_sampler.OpWiseTuningSampler"]], "tuningorder (class in neural_compressor.strategy.utils.tuning_sampler)": [[367, "neural_compressor.strategy.utils.tuning_sampler.TuningOrder"]], "tuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[367, "neural_compressor.strategy.utils.tuning_sampler.TuningSampler"]], "tuningsamplerregistry (class in neural_compressor.strategy.utils.tuning_sampler)": [[367, "neural_compressor.strategy.utils.tuning_sampler.TuningSamplerRegistry"]], "neural_compressor.strategy.utils.tuning_sampler": [[367, "module-neural_compressor.strategy.utils.tuning_sampler"]], "tuningitem (class in neural_compressor.strategy.utils.tuning_space)": [[368, "neural_compressor.strategy.utils.tuning_space.TuningItem"]], "tuningspace (class in neural_compressor.strategy.utils.tuning_space)": [[368, "neural_compressor.strategy.utils.tuning_space.TuningSpace"]], "initial_tuning_cfg_with_quant_mode() (in module neural_compressor.strategy.utils.tuning_space)": [[368, "neural_compressor.strategy.utils.tuning_space.initial_tuning_cfg_with_quant_mode"]], "neural_compressor.strategy.utils.tuning_space": [[368, "module-neural_compressor.strategy.utils.tuning_space"]], "pattern_to_internal() (in module neural_compressor.strategy.utils.tuning_space)": [[368, "neural_compressor.strategy.utils.tuning_space.pattern_to_internal"]], "pattern_to_path() (in module neural_compressor.strategy.utils.tuning_space)": [[368, "neural_compressor.strategy.utils.tuning_space.pattern_to_path"]], "quant_mode_from_pattern() (in module neural_compressor.strategy.utils.tuning_space)": [[368, "neural_compressor.strategy.utils.tuning_space.quant_mode_from_pattern"]], "optuningconfig (class in neural_compressor.strategy.utils.tuning_structs)": [[369, "neural_compressor.strategy.utils.tuning_structs.OpTuningConfig"]], "neural_compressor.strategy.utils.tuning_structs": [[369, "module-neural_compressor.strategy.utils.tuning_structs"]], "ordereddefaultdict (class in neural_compressor.strategy.utils.utility)": [[370, "neural_compressor.strategy.utils.utility.OrderedDefaultDict"]], "build_slave_faker_model() (in module neural_compressor.strategy.utils.utility)": [[370, "neural_compressor.strategy.utils.utility.build_slave_faker_model"]], "extract_data_type() (in module neural_compressor.strategy.utils.utility)": [[370, "neural_compressor.strategy.utils.utility.extract_data_type"]], "get_adaptor_name() (in module neural_compressor.strategy.utils.utility)": [[370, "neural_compressor.strategy.utils.utility.get_adaptor_name"]], "neural_compressor.strategy.utils.utility": [[370, "module-neural_compressor.strategy.utils.utility"]], "reverted_data_type() (in module neural_compressor.strategy.utils.utility)": [[370, "neural_compressor.strategy.utils.utility.reverted_data_type"]], "exampleclass (class in neural_compressor.template.api_doc_example)": [[371, "neural_compressor.template.api_doc_example.ExampleClass"]], "attr1 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[371, "neural_compressor.template.api_doc_example.ExampleClass.attr1"]], "attr2 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[371, "neural_compressor.template.api_doc_example.ExampleClass.attr2"]], "attr5 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[371, "neural_compressor.template.api_doc_example.ExampleClass.attr5"]], "attribute1 (in module neural_compressor.template.api_doc_example)": [[371, "neural_compressor.template.api_doc_example.attribute1"]], "function1() (in module neural_compressor.template.api_doc_example)": [[371, "neural_compressor.template.api_doc_example.function1"]], "function2() (in module neural_compressor.template.api_doc_example)": [[371, "neural_compressor.template.api_doc_example.function2"]], "function3() (in module neural_compressor.template.api_doc_example)": [[371, "neural_compressor.template.api_doc_example.function3"]], "generator1() (in module neural_compressor.template.api_doc_example)": [[371, "neural_compressor.template.api_doc_example.generator1"]], "module_debug_level1 (in module neural_compressor.template.api_doc_example)": [[371, "neural_compressor.template.api_doc_example.module_debug_level1"]], "neural_compressor.template.api_doc_example": [[371, "module-neural_compressor.template.api_doc_example"]], "neural_compressor.template": [[372, "module-neural_compressor.template"]], "callbacks (class in neural_compressor.training)": [[373, "neural_compressor.training.CallBacks"]], "compressionmanager (class in neural_compressor.training)": [[373, "neural_compressor.training.CompressionManager"]], "fit() (in module neural_compressor.training)": [[373, "neural_compressor.training.fit"]], "neural_compressor.training": [[373, "module-neural_compressor.training"]], "prepare_compression() (in module neural_compressor.training)": [[373, "neural_compressor.training.prepare_compression"]], "layerhistogramcollector (class in neural_compressor.utils.collect_layer_histogram)": [[374, "neural_compressor.utils.collect_layer_histogram.LayerHistogramCollector"]], "neural_compressor.utils.collect_layer_histogram": [[374, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[375, "module-neural_compressor.utils.constant"]], "create_dataloader() (in module neural_compressor.utils.create_obj_from_config)": [[376, "neural_compressor.utils.create_obj_from_config.create_dataloader"]], "create_dataset() (in module neural_compressor.utils.create_obj_from_config)": [[376, "neural_compressor.utils.create_obj_from_config.create_dataset"]], "create_eval_func() (in module neural_compressor.utils.create_obj_from_config)": [[376, "neural_compressor.utils.create_obj_from_config.create_eval_func"]], "create_train_func() (in module neural_compressor.utils.create_obj_from_config)": [[376, "neural_compressor.utils.create_obj_from_config.create_train_func"]], "get_algorithm() (in module neural_compressor.utils.create_obj_from_config)": [[376, "neural_compressor.utils.create_obj_from_config.get_algorithm"]], "get_func_from_config() (in module neural_compressor.utils.create_obj_from_config)": [[376, "neural_compressor.utils.create_obj_from_config.get_func_from_config"]], "get_metrics() (in module neural_compressor.utils.create_obj_from_config)": [[376, "neural_compressor.utils.create_obj_from_config.get_metrics"]], "get_postprocess() (in module neural_compressor.utils.create_obj_from_config)": [[376, "neural_compressor.utils.create_obj_from_config.get_postprocess"]], "get_preprocess() (in module neural_compressor.utils.create_obj_from_config)": [[376, "neural_compressor.utils.create_obj_from_config.get_preprocess"]], "neural_compressor.utils.create_obj_from_config": [[376, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils": [[377, "module-neural_compressor.utils"]], "kl_divergence (class in neural_compressor.utils.kl_divergence)": [[378, "neural_compressor.utils.kl_divergence.KL_Divergence"]], "neural_compressor.utils.kl_divergence": [[378, "module-neural_compressor.utils.kl_divergence"]], "optimizedmodel (class in neural_compressor.utils.load_huggingface)": [[379, "neural_compressor.utils.load_huggingface.OptimizedModel"]], "neural_compressor.utils.load_huggingface": [[379, "module-neural_compressor.utils.load_huggingface"]], "save_for_huggingface_upstream() (in module neural_compressor.utils.load_huggingface)": [[379, "neural_compressor.utils.load_huggingface.save_for_huggingface_upstream"]], "logger (class in neural_compressor.utils.logger)": [[380, "neural_compressor.utils.logger.Logger"]], "debug() (in module neural_compressor.utils.logger)": [[380, "neural_compressor.utils.logger.debug"]], "error() (in module neural_compressor.utils.logger)": [[380, "neural_compressor.utils.logger.error"]], "fatal() (in module neural_compressor.utils.logger)": [[380, "neural_compressor.utils.logger.fatal"]], "info() (in module neural_compressor.utils.logger)": [[380, "neural_compressor.utils.logger.info"]], "log() (in module neural_compressor.utils.logger)": [[380, "neural_compressor.utils.logger.log"]], "neural_compressor.utils.logger": [[380, "module-neural_compressor.utils.logger"]], "warn() (in module neural_compressor.utils.logger)": [[380, "neural_compressor.utils.logger.warn"]], "warning() (in module neural_compressor.utils.logger)": [[380, "neural_compressor.utils.logger.warning"]], "neural_compressor.utils.neural_insights_utils": [[381, "module-neural_compressor.utils.neural_insights_utils"]], "register_neural_insights_workload() (in module neural_compressor.utils.neural_insights_utils)": [[381, "neural_compressor.utils.neural_insights_utils.register_neural_insights_workload"]], "update_neural_insights_workload() (in module neural_compressor.utils.neural_insights_utils)": [[381, "neural_compressor.utils.neural_insights_utils.update_neural_insights_workload"]], "update_neural_insights_workload_accuracy_data() (in module neural_compressor.utils.neural_insights_utils)": [[381, "neural_compressor.utils.neural_insights_utils.update_neural_insights_workload_accuracy_data"]], "neural_compressor.utils.options": [[382, "module-neural_compressor.utils.options"]], "onnxrt (class in neural_compressor.utils.options)": [[382, "neural_compressor.utils.options.onnxrt"]], "is_int8_model() (in module neural_compressor.utils.pytorch)": [[383, "neural_compressor.utils.pytorch.is_int8_model"]], "load() (in module neural_compressor.utils.pytorch)": [[383, "neural_compressor.utils.pytorch.load"]], "neural_compressor.utils.pytorch": [[383, "module-neural_compressor.utils.pytorch"]], "captureoutputtofile (class in neural_compressor.utils.utility)": [[384, "neural_compressor.utils.utility.CaptureOutputToFile"]], "cpuinfo (class in neural_compressor.utils.utility)": [[384, "neural_compressor.utils.utility.CpuInfo"]], "dequantize() (in module neural_compressor.utils.utility)": [[384, "neural_compressor.utils.utility.Dequantize"]], "dequantizeweight() (in module neural_compressor.utils.utility)": [[384, "neural_compressor.utils.utility.DequantizeWeight"]], "dotdict (class in neural_compressor.utils.utility)": [[384, "neural_compressor.utils.utility.DotDict"]], "global_state (class in neural_compressor.utils.utility)": [[384, "neural_compressor.utils.utility.GLOBAL_STATE"]], "lazyimport (class in neural_compressor.utils.utility)": [[384, "neural_compressor.utils.utility.LazyImport"]], "mode (class in neural_compressor.utils.utility)": [[384, "neural_compressor.utils.utility.MODE"]], "opentry (class in neural_compressor.utils.utility)": [[384, "neural_compressor.utils.utility.OpEntry"]], "statistics (class in neural_compressor.utils.utility)": [[384, "neural_compressor.utils.utility.Statistics"]], "alias_param() (in module neural_compressor.utils.utility)": [[384, "neural_compressor.utils.utility.alias_param"]], "calculate_mse() (in module neural_compressor.utils.utility)": [[384, "neural_compressor.utils.utility.calculate_mse"]], "combine_histogram() (in module neural_compressor.utils.utility)": [[384, "neural_compressor.utils.utility.combine_histogram"]], "compare_objects() (in module neural_compressor.utils.utility)": [[384, "neural_compressor.utils.utility.compare_objects"]], "compute_sparsity() (in module neural_compressor.utils.utility)": [[384, "neural_compressor.utils.utility.compute_sparsity"]], "dump_class_attrs() (in module neural_compressor.utils.utility)": [[384, "neural_compressor.utils.utility.dump_class_attrs"]], "dump_data_to_local() (in module neural_compressor.utils.utility)": [[384, "neural_compressor.utils.utility.dump_data_to_local"]], "dump_elapsed_time() (in module neural_compressor.utils.utility)": [[384, "neural_compressor.utils.utility.dump_elapsed_time"]], "dump_table() (in module neural_compressor.utils.utility)": [[384, "neural_compressor.utils.utility.dump_table"]], "dump_table_to_csv() (in module neural_compressor.utils.utility)": [[384, "neural_compressor.utils.utility.dump_table_to_csv"]], "equal_dicts() (in module neural_compressor.utils.utility)": [[384, "neural_compressor.utils.utility.equal_dicts"]], "fault_tolerant_file() (in module neural_compressor.utils.utility)": [[384, "neural_compressor.utils.utility.fault_tolerant_file"]], "get_all_fp32_data() (in module neural_compressor.utils.utility)": [[384, "neural_compressor.utils.utility.get_all_fp32_data"]], "get_number_of_sockets() (in module neural_compressor.utils.utility)": [[384, "neural_compressor.utils.utility.get_number_of_sockets"]], "get_op_list() (in module neural_compressor.utils.utility)": [[384, "neural_compressor.utils.utility.get_op_list"]], "get_size() (in module neural_compressor.utils.utility)": [[384, "neural_compressor.utils.utility.get_size"]], "get_tensor_histogram() (in module neural_compressor.utils.utility)": [[384, "neural_compressor.utils.utility.get_tensor_histogram"]], "get_tensors_info() (in module neural_compressor.utils.utility)": [[384, "neural_compressor.utils.utility.get_tensors_info"]], "get_tuning_history() (in module neural_compressor.utils.utility)": [[384, "neural_compressor.utils.utility.get_tuning_history"]], "get_weights_details() (in module neural_compressor.utils.utility)": [[384, "neural_compressor.utils.utility.get_weights_details"]], "load_data_from_pkl() (in module neural_compressor.utils.utility)": [[384, "neural_compressor.utils.utility.load_data_from_pkl"]], "mse_metric_gap() (in module neural_compressor.utils.utility)": [[384, "neural_compressor.utils.utility.mse_metric_gap"]], "neural_compressor.utils.utility": [[384, "module-neural_compressor.utils.utility"]], "print_op_list() (in module neural_compressor.utils.utility)": [[384, "neural_compressor.utils.utility.print_op_list"]], "print_table() (in module neural_compressor.utils.utility)": [[384, "neural_compressor.utils.utility.print_table"]], "recover() (in module neural_compressor.utils.utility)": [[384, "neural_compressor.utils.utility.recover"]], "set_random_seed() (in module neural_compressor.utils.utility)": [[384, "neural_compressor.utils.utility.set_random_seed"]], "set_resume_from() (in module neural_compressor.utils.utility)": [[384, "neural_compressor.utils.utility.set_resume_from"]], "set_tensorboard() (in module neural_compressor.utils.utility)": [[384, "neural_compressor.utils.utility.set_tensorboard"]], "set_workspace() (in module neural_compressor.utils.utility)": [[384, "neural_compressor.utils.utility.set_workspace"]], "show_memory_info() (in module neural_compressor.utils.utility)": [[384, "neural_compressor.utils.utility.show_memory_info"]], "singleton() (in module neural_compressor.utils.utility)": [[384, "neural_compressor.utils.utility.singleton"]], "str2array() (in module neural_compressor.utils.utility)": [[384, "neural_compressor.utils.utility.str2array"]], "time_limit() (in module neural_compressor.utils.utility)": [[384, "neural_compressor.utils.utility.time_limit"]], "version1_eq_version2() (in module neural_compressor.utils.utility)": [[384, "neural_compressor.utils.utility.version1_eq_version2"]], "version1_gt_version2() (in module neural_compressor.utils.utility)": [[384, "neural_compressor.utils.utility.version1_gt_version2"]], "version1_gte_version2() (in module neural_compressor.utils.utility)": [[384, "neural_compressor.utils.utility.version1_gte_version2"]], "version1_lt_version2() (in module neural_compressor.utils.utility)": [[384, "neural_compressor.utils.utility.version1_lt_version2"]], "version1_lte_version2() (in module neural_compressor.utils.utility)": [[384, "neural_compressor.utils.utility.version1_lte_version2"]], "weightsdetails (class in neural_compressor.utils.weights_details)": [[385, "neural_compressor.utils.weights_details.WeightsDetails"]], "weightsstatistics (class in neural_compressor.utils.weights_details)": [[385, "neural_compressor.utils.weights_details.WeightsStatistics"]], "neural_compressor.utils.weights_details": [[385, "module-neural_compressor.utils.weights_details"]], "neural_compressor.version": [[386, "module-neural_compressor.version"]]}})