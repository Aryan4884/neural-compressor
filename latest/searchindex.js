Search.setIndex({"docnames": ["autoapi/block_mask/index", "autoapi/neural_compressor/adaptor/adaptor/index", "autoapi/neural_compressor/adaptor/index", "autoapi/neural_compressor/adaptor/keras/index", "autoapi/neural_compressor/adaptor/keras_utils/conv2d/index", "autoapi/neural_compressor/adaptor/keras_utils/dense/index", "autoapi/neural_compressor/adaptor/keras_utils/depthwise_conv2d/index", "autoapi/neural_compressor/adaptor/keras_utils/index", "autoapi/neural_compressor/adaptor/keras_utils/pool2d/index", "autoapi/neural_compressor/adaptor/keras_utils/quantizer/index", "autoapi/neural_compressor/adaptor/keras_utils/separable_conv2d/index", "autoapi/neural_compressor/adaptor/mxnet/index", "autoapi/neural_compressor/adaptor/mxnet_utils/index", "autoapi/neural_compressor/adaptor/mxnet_utils/util/index", "autoapi/neural_compressor/adaptor/onnxrt/index", "autoapi/neural_compressor/adaptor/ox_utils/calibration/index", "autoapi/neural_compressor/adaptor/ox_utils/calibrator/index", "autoapi/neural_compressor/adaptor/ox_utils/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/activation/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/argmax/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/attention/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/binary_op/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/concat/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/conv/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/direct_q8/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/embed_layernorm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gather/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gavgpool/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gemm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/lstm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/matmul/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/maxpool/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/norm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/ops/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/pad/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/pooling/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/reduce/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/resize/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/split/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/unary_op/index", "autoapi/neural_compressor/adaptor/ox_utils/quantizer/index", "autoapi/neural_compressor/adaptor/ox_utils/smooth_quant/index", "autoapi/neural_compressor/adaptor/ox_utils/util/index", "autoapi/neural_compressor/adaptor/pytorch/index", "autoapi/neural_compressor/adaptor/query/index", "autoapi/neural_compressor/adaptor/tensorflow/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter_without_calib/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/bf16_convert/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_add_to_biasadd/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_layout/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_leakyrelu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_nan_to_random/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_placeholder_to_const/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dequantize_cast_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dilated_contraction/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dummy_biasadd/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/expanddims_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fetch_weight_from_reshape/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_batch_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_constant/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_biasadd_add/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_column_wise_mul/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_conv_with_math/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_in/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_gelu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_layer_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_reshape_transpose/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/graph_cse_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/grappler_pass/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/insert_print_node/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/move_squeeze_after_relu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/pre_optimize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/remove_training_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/rename_batch_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/split_shared_input/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_equivalent_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_unused_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/switch_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/graph_base/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_fake_quant/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value_without_calib/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_requantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_requantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/meta_op_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_hostconst_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_quantized_op_cse/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/rnn_convert/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/scale_propagation/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_node/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_schema/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/tf2onnx_utils/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/insert_qdq_pattern/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/merge_duplicated_qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/share_qdq_y_pattern/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_util/index", "autoapi/neural_compressor/adaptor/tf_utils/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/fake_quantize/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_config/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_helper/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/optimize_layer/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_wrapper/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_concatv2/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_deconv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_in/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_matmul/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_pooling/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/optimize_qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_base/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_concatv2/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_for_intel_cpu/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_matmul/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_pooling/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph_common/index", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_calibration/index", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_scaler/index", "autoapi/neural_compressor/adaptor/tf_utils/tf2onnx_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/bias_correction/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/graph_transform_base/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/insert_logging/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/rerange_quantized_concat/index", "autoapi/neural_compressor/adaptor/tf_utils/util/index", "autoapi/neural_compressor/adaptor/torch_utils/bf16_convert/index", "autoapi/neural_compressor/adaptor/torch_utils/gptq/index", "autoapi/neural_compressor/adaptor/torch_utils/hawq_metric/index", "autoapi/neural_compressor/adaptor/torch_utils/index", "autoapi/neural_compressor/adaptor/torch_utils/mixed_precision/index", "autoapi/neural_compressor/adaptor/torch_utils/model_wrapper/index", "autoapi/neural_compressor/adaptor/torch_utils/pattern_detector/index", "autoapi/neural_compressor/adaptor/torch_utils/smooth_quant/index", "autoapi/neural_compressor/adaptor/torch_utils/symbolic_trace/index", "autoapi/neural_compressor/adaptor/torch_utils/util/index", "autoapi/neural_compressor/adaptor/torch_utils/weight_only/index", "autoapi/neural_compressor/algorithm/algorithm/index", "autoapi/neural_compressor/algorithm/fast_bias_correction/index", "autoapi/neural_compressor/algorithm/index", "autoapi/neural_compressor/algorithm/smooth_quant/index", "autoapi/neural_compressor/algorithm/weight_correction/index", "autoapi/neural_compressor/benchmark/index", "autoapi/neural_compressor/compression/callbacks/index", "autoapi/neural_compressor/compression/distillation/criterions/index", "autoapi/neural_compressor/compression/distillation/index", "autoapi/neural_compressor/compression/index", "autoapi/neural_compressor/compression/pruner/criteria/index", "autoapi/neural_compressor/compression/pruner/index", "autoapi/neural_compressor/compression/pruner/model_slim/auto_slim/index", "autoapi/neural_compressor/compression/pruner/model_slim/index", "autoapi/neural_compressor/compression/pruner/model_slim/pattern_analyzer/index", "autoapi/neural_compressor/compression/pruner/model_slim/weight_slim/index", "autoapi/neural_compressor/compression/pruner/patterns/index", "autoapi/neural_compressor/compression/pruner/pruners/index", "autoapi/neural_compressor/compression/pruner/regs/index", "autoapi/neural_compressor/compression/pruner/schedulers/index", "autoapi/neural_compressor/compression/pruner/utils/index", "autoapi/neural_compressor/conf/config/index", "autoapi/neural_compressor/conf/dotdict/index", "autoapi/neural_compressor/conf/index", "autoapi/neural_compressor/conf/pythonic_config/index", "autoapi/neural_compressor/config/index", "autoapi/neural_compressor/contrib/index", "autoapi/neural_compressor/contrib/strategy/index", "autoapi/neural_compressor/contrib/strategy/sigopt/index", "autoapi/neural_compressor/contrib/strategy/tpe/index", "autoapi/neural_compressor/data/dataloaders/base_dataloader/index", "autoapi/neural_compressor/data/dataloaders/dataloader/index", "autoapi/neural_compressor/data/dataloaders/default_dataloader/index", "autoapi/neural_compressor/data/dataloaders/fetcher/index", "autoapi/neural_compressor/data/dataloaders/index", "autoapi/neural_compressor/data/dataloaders/mxnet_dataloader/index", "autoapi/neural_compressor/data/dataloaders/onnxrt_dataloader/index", "autoapi/neural_compressor/data/dataloaders/pytorch_dataloader/index", "autoapi/neural_compressor/data/dataloaders/sampler/index", "autoapi/neural_compressor/data/dataloaders/tensorflow_dataloader/index", "autoapi/neural_compressor/data/datasets/bert_dataset/index", "autoapi/neural_compressor/data/datasets/coco_dataset/index", "autoapi/neural_compressor/data/datasets/dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/data/datasets/index", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/data/filters/coco_filter/index", "autoapi/neural_compressor/data/filters/filter/index", "autoapi/neural_compressor/data/filters/index", "autoapi/neural_compressor/data/index", "autoapi/neural_compressor/data/transforms/coco_transform/index", "autoapi/neural_compressor/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/data/transforms/index", "autoapi/neural_compressor/data/transforms/postprocess/index", "autoapi/neural_compressor/data/transforms/tokenization/index", "autoapi/neural_compressor/data/transforms/transform/index", "autoapi/neural_compressor/experimental/benchmark/index", "autoapi/neural_compressor/experimental/common/criterion/index", "autoapi/neural_compressor/experimental/common/dataloader/index", "autoapi/neural_compressor/experimental/common/index", "autoapi/neural_compressor/experimental/common/metric/index", "autoapi/neural_compressor/experimental/common/model/index", "autoapi/neural_compressor/experimental/common/optimizer/index", "autoapi/neural_compressor/experimental/common/postprocess/index", "autoapi/neural_compressor/experimental/common/torch_utils/index", "autoapi/neural_compressor/experimental/component/index", "autoapi/neural_compressor/experimental/compression/index", "autoapi/neural_compressor/experimental/compression/pruning/index", "autoapi/neural_compressor/experimental/contrib/index", "autoapi/neural_compressor/experimental/contrib/strategy/index", "autoapi/neural_compressor/experimental/contrib/strategy/sigopt/index", "autoapi/neural_compressor/experimental/contrib/strategy/tpe/index", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index", "autoapi/neural_compressor/experimental/data/dataloaders/index", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/index", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index", "autoapi/neural_compressor/experimental/data/filters/filter/index", "autoapi/neural_compressor/experimental/data/filters/index", "autoapi/neural_compressor/experimental/data/index", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/experimental/data/transforms/index", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index", "autoapi/neural_compressor/experimental/data/transforms/transform/index", "autoapi/neural_compressor/experimental/distillation/index", "autoapi/neural_compressor/experimental/export/index", "autoapi/neural_compressor/experimental/export/qlinear2qdq/index", "autoapi/neural_compressor/experimental/export/tf2onnx/index", "autoapi/neural_compressor/experimental/export/torch2onnx/index", "autoapi/neural_compressor/experimental/graph_optimization/index", "autoapi/neural_compressor/experimental/index", "autoapi/neural_compressor/experimental/metric/bleu/index", "autoapi/neural_compressor/experimental/metric/bleu_util/index", "autoapi/neural_compressor/experimental/metric/coco_label_map/index", "autoapi/neural_compressor/experimental/metric/coco_tools/index", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index", "autoapi/neural_compressor/experimental/metric/f1/index", "autoapi/neural_compressor/experimental/metric/index", "autoapi/neural_compressor/experimental/metric/metric/index", "autoapi/neural_compressor/experimental/mixed_precision/index", "autoapi/neural_compressor/experimental/model_conversion/index", "autoapi/neural_compressor/experimental/nas/basic_nas/index", "autoapi/neural_compressor/experimental/nas/dynas/index", "autoapi/neural_compressor/experimental/nas/index", "autoapi/neural_compressor/experimental/nas/nas/index", "autoapi/neural_compressor/experimental/nas/nas_utils/index", "autoapi/neural_compressor/experimental/nas/search_algorithms/index", "autoapi/neural_compressor/experimental/pruner_legacy/gradient_sensitivity/index", "autoapi/neural_compressor/experimental/pruner_legacy/group_lasso/index", "autoapi/neural_compressor/experimental/pruner_legacy/index", "autoapi/neural_compressor/experimental/pruner_legacy/magnitude/index", "autoapi/neural_compressor/experimental/pruner_legacy/pattern_lock/index", "autoapi/neural_compressor/experimental/pruner_legacy/pruner/index", "autoapi/neural_compressor/experimental/pruning/index", "autoapi/neural_compressor/experimental/pruning_recipes/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index", "autoapi/neural_compressor/experimental/pruning_v2/index", "autoapi/neural_compressor/experimental/pytorch_pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index", "autoapi/neural_compressor/experimental/quantization/index", "autoapi/neural_compressor/experimental/scheduler/index", "autoapi/neural_compressor/experimental/strategy/auto_mixed_precision/index", "autoapi/neural_compressor/experimental/strategy/basic/index", "autoapi/neural_compressor/experimental/strategy/bayesian/index", "autoapi/neural_compressor/experimental/strategy/exhaustive/index", "autoapi/neural_compressor/experimental/strategy/index", "autoapi/neural_compressor/experimental/strategy/mse/index", "autoapi/neural_compressor/experimental/strategy/mse_v2/index", "autoapi/neural_compressor/experimental/strategy/random/index", "autoapi/neural_compressor/experimental/strategy/strategy/index", "autoapi/neural_compressor/experimental/strategy/utils/constant/index", "autoapi/neural_compressor/experimental/strategy/utils/index", "autoapi/neural_compressor/experimental/strategy/utils/tuning_sampler/index", "autoapi/neural_compressor/experimental/strategy/utils/tuning_space/index", "autoapi/neural_compressor/experimental/strategy/utils/tuning_structs/index", "autoapi/neural_compressor/experimental/strategy/utils/utility/index", "autoapi/neural_compressor/index", "autoapi/neural_compressor/metric/bleu/index", "autoapi/neural_compressor/metric/bleu_util/index", "autoapi/neural_compressor/metric/coco_label_map/index", "autoapi/neural_compressor/metric/coco_tools/index", "autoapi/neural_compressor/metric/evaluate_squad/index", "autoapi/neural_compressor/metric/f1/index", "autoapi/neural_compressor/metric/index", "autoapi/neural_compressor/metric/metric/index", "autoapi/neural_compressor/mix_precision/index", "autoapi/neural_compressor/model/base_model/index", "autoapi/neural_compressor/model/index", "autoapi/neural_compressor/model/keras_model/index", "autoapi/neural_compressor/model/model/index", "autoapi/neural_compressor/model/mxnet_model/index", "autoapi/neural_compressor/model/nets_factory/index", "autoapi/neural_compressor/model/onnx_model/index", "autoapi/neural_compressor/model/tensorflow_model/index", "autoapi/neural_compressor/model/torch_model/index", "autoapi/neural_compressor/objective/index", "autoapi/neural_compressor/profiling/index", "autoapi/neural_compressor/profiling/parser/factory/index", "autoapi/neural_compressor/profiling/parser/index", "autoapi/neural_compressor/profiling/parser/onnx_parser/factory/index", "autoapi/neural_compressor/profiling/parser/onnx_parser/index", "autoapi/neural_compressor/profiling/parser/onnx_parser/parser/index", "autoapi/neural_compressor/profiling/parser/parser/index", "autoapi/neural_compressor/profiling/parser/result/index", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/factory/index", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/index", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/parser/index", "autoapi/neural_compressor/profiling/profiler/factory/index", "autoapi/neural_compressor/profiling/profiler/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/factory/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/profiler/index", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/utils/index", "autoapi/neural_compressor/profiling/profiler/profiler/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/factory/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/profiler/index", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/utils/index", "autoapi/neural_compressor/quantization/index", "autoapi/neural_compressor/strategy/auto/index", "autoapi/neural_compressor/strategy/auto_mixed_precision/index", "autoapi/neural_compressor/strategy/basic/index", "autoapi/neural_compressor/strategy/bayesian/index", "autoapi/neural_compressor/strategy/conservative/index", "autoapi/neural_compressor/strategy/exhaustive/index", "autoapi/neural_compressor/strategy/hawq_v2/index", "autoapi/neural_compressor/strategy/index", "autoapi/neural_compressor/strategy/mse/index", "autoapi/neural_compressor/strategy/mse_v2/index", "autoapi/neural_compressor/strategy/random/index", "autoapi/neural_compressor/strategy/strategy/index", "autoapi/neural_compressor/strategy/utils/constant/index", "autoapi/neural_compressor/strategy/utils/index", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index", "autoapi/neural_compressor/strategy/utils/tuning_space/index", "autoapi/neural_compressor/strategy/utils/tuning_structs/index", "autoapi/neural_compressor/strategy/utils/utility/index", "autoapi/neural_compressor/template/api_doc_example/index", "autoapi/neural_compressor/template/index", "autoapi/neural_compressor/training/index", "autoapi/neural_compressor/utils/collect_layer_histogram/index", "autoapi/neural_compressor/utils/constant/index", "autoapi/neural_compressor/utils/create_obj_from_config/index", "autoapi/neural_compressor/utils/index", "autoapi/neural_compressor/utils/kl_divergence/index", "autoapi/neural_compressor/utils/load_huggingface/index", "autoapi/neural_compressor/utils/logger/index", "autoapi/neural_compressor/utils/neural_insights_utils/index", "autoapi/neural_compressor/utils/options/index", "autoapi/neural_compressor/utils/pytorch/index", "autoapi/neural_compressor/utils/utility/index", "autoapi/neural_compressor/utils/weights_details/index", "autoapi/neural_compressor/version/index", "docs/build_docs/source/index", "docs/source/CODE_OF_CONDUCT", "docs/source/CONTRIBUTING", "docs/source/FX", "docs/source/NAS", "docs/source/SECURITY", "docs/source/Welcome", "docs/source/adaptor", "docs/source/add_new_adaptor", "docs/source/add_new_data_type", "docs/source/api-doc/adaptor", "docs/source/api-doc/adaptor/onnxrt", "docs/source/api-doc/adaptor/torch_utils", "docs/source/api-doc/api_doc_example", "docs/source/api-doc/apis", "docs/source/api-doc/benchmark", "docs/source/api-doc/compression", "docs/source/api-doc/config", "docs/source/api-doc/mix_precision", "docs/source/api-doc/model", "docs/source/api-doc/objective", "docs/source/api-doc/quantization", "docs/source/api-doc/strategy", "docs/source/api-doc/training", "docs/source/benchmark", "docs/source/dataloader", "docs/source/dataset", "docs/source/design", "docs/source/diagnosis", "docs/source/distillation", "docs/source/distillation_quantization", "docs/source/distributed", "docs/source/examples_readme", "docs/source/export", "docs/source/faq", "docs/source/framework_yaml", "docs/source/get_started", "docs/source/incompatible_changes", "docs/source/infrastructure", "docs/source/installation_guide", "docs/source/legal_information", "docs/source/metric", "docs/source/migration", "docs/source/mixed_precision", "docs/source/model", "docs/source/neural_coder/README", "docs/source/neural_coder/docs/AWSSageMakerSupport", "docs/source/neural_coder/docs/BigDLNanoSupport", "docs/source/neural_coder/docs/IntelCPU_PerformanceSetting", "docs/source/neural_coder/docs/PythonAPI", "docs/source/neural_coder/docs/PythonLauncher", "docs/source/neural_coder/docs/Quantization", "docs/source/neural_coder/docs/SupportMatrix", "docs/source/neural_coder/docs/release_notes/v0.4", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/DEVELOP", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/README", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/RELEASE", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/DEVELOP", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/RELEASE", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/README", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/vsc-extension-quickstart", "docs/source/objective", "docs/source/orchestration", "docs/source/pruning", "docs/source/publication_list", "docs/source/pythonic_style", "docs/source/quantization", "docs/source/quantization_mixed_precision", "docs/source/quantization_weight_only", "docs/source/releases_info", "docs/source/sigopt_strategy", "docs/source/smooth_quant", "docs/source/tensorboard", "docs/source/transform", "docs/source/tuning_strategies", "docs/source/user_guide", "docs/source/user_yaml", "docs/source/validated_model_list", "index"], "filenames": ["autoapi/block_mask/index.rst", "autoapi/neural_compressor/adaptor/adaptor/index.rst", "autoapi/neural_compressor/adaptor/index.rst", "autoapi/neural_compressor/adaptor/keras/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/conv2d/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/dense/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/depthwise_conv2d/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/pool2d/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/quantizer/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/separable_conv2d/index.rst", "autoapi/neural_compressor/adaptor/mxnet/index.rst", "autoapi/neural_compressor/adaptor/mxnet_utils/index.rst", "autoapi/neural_compressor/adaptor/mxnet_utils/util/index.rst", "autoapi/neural_compressor/adaptor/onnxrt/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/calibration/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/calibrator/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/activation/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/argmax/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/attention/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/binary_op/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/concat/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/conv/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/direct_q8/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/embed_layernorm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gather/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gavgpool/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gemm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/lstm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/matmul/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/maxpool/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/norm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/ops/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/pad/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/pooling/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/reduce/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/resize/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/split/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/unary_op/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/quantizer/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/smooth_quant/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/util/index.rst", "autoapi/neural_compressor/adaptor/pytorch/index.rst", "autoapi/neural_compressor/adaptor/query/index.rst", "autoapi/neural_compressor/adaptor/tensorflow/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter_without_calib/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/bf16_convert/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_add_to_biasadd/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_layout/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_leakyrelu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_nan_to_random/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_placeholder_to_const/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dequantize_cast_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dilated_contraction/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dummy_biasadd/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/expanddims_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fetch_weight_from_reshape/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_batch_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_constant/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_biasadd_add/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_column_wise_mul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_conv_with_math/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_in/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_gelu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_layer_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_reshape_transpose/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/graph_cse_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/grappler_pass/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/insert_print_node/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/move_squeeze_after_relu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/pre_optimize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/remove_training_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/rename_batch_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/split_shared_input/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_equivalent_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_unused_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/switch_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/graph_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_fake_quant/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value_without_calib/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_requantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_requantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/meta_op_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_hostconst_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_quantized_op_cse/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/rnn_convert/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/scale_propagation/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_node/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_schema/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/tf2onnx_utils/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/insert_qdq_pattern/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/merge_duplicated_qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/share_qdq_y_pattern/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_util/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/fake_quantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_config/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_helper/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/optimize_layer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_wrapper/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_concatv2/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_deconv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_in/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_matmul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_pooling/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/optimize_qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_concatv2/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_for_intel_cpu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_matmul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_pooling/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph_common/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_calibration/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/smooth_quant_scaler/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/tf2onnx_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/bias_correction/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/graph_transform_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/insert_logging/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/rerange_quantized_concat/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/util/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/bf16_convert/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/gptq/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/hawq_metric/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/mixed_precision/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/model_wrapper/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/pattern_detector/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/smooth_quant/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/symbolic_trace/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/util/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/weight_only/index.rst", "autoapi/neural_compressor/algorithm/algorithm/index.rst", "autoapi/neural_compressor/algorithm/fast_bias_correction/index.rst", "autoapi/neural_compressor/algorithm/index.rst", "autoapi/neural_compressor/algorithm/smooth_quant/index.rst", "autoapi/neural_compressor/algorithm/weight_correction/index.rst", "autoapi/neural_compressor/benchmark/index.rst", "autoapi/neural_compressor/compression/callbacks/index.rst", "autoapi/neural_compressor/compression/distillation/criterions/index.rst", "autoapi/neural_compressor/compression/distillation/index.rst", "autoapi/neural_compressor/compression/index.rst", "autoapi/neural_compressor/compression/pruner/criteria/index.rst", "autoapi/neural_compressor/compression/pruner/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/auto_slim/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/pattern_analyzer/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/weight_slim/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/index.rst", "autoapi/neural_compressor/compression/pruner/regs/index.rst", "autoapi/neural_compressor/compression/pruner/schedulers/index.rst", "autoapi/neural_compressor/compression/pruner/utils/index.rst", "autoapi/neural_compressor/conf/config/index.rst", "autoapi/neural_compressor/conf/dotdict/index.rst", "autoapi/neural_compressor/conf/index.rst", "autoapi/neural_compressor/conf/pythonic_config/index.rst", "autoapi/neural_compressor/config/index.rst", "autoapi/neural_compressor/contrib/index.rst", "autoapi/neural_compressor/contrib/strategy/index.rst", "autoapi/neural_compressor/contrib/strategy/sigopt/index.rst", "autoapi/neural_compressor/contrib/strategy/tpe/index.rst", "autoapi/neural_compressor/data/dataloaders/base_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/default_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/fetcher/index.rst", "autoapi/neural_compressor/data/dataloaders/index.rst", "autoapi/neural_compressor/data/dataloaders/mxnet_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/onnxrt_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/pytorch_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/sampler/index.rst", "autoapi/neural_compressor/data/dataloaders/tensorflow_dataloader/index.rst", "autoapi/neural_compressor/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/data/datasets/index.rst", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/data/filters/filter/index.rst", "autoapi/neural_compressor/data/filters/index.rst", "autoapi/neural_compressor/data/index.rst", "autoapi/neural_compressor/data/transforms/coco_transform/index.rst", "autoapi/neural_compressor/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/data/transforms/index.rst", "autoapi/neural_compressor/data/transforms/postprocess/index.rst", "autoapi/neural_compressor/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/benchmark/index.rst", "autoapi/neural_compressor/experimental/common/criterion/index.rst", "autoapi/neural_compressor/experimental/common/dataloader/index.rst", "autoapi/neural_compressor/experimental/common/index.rst", "autoapi/neural_compressor/experimental/common/metric/index.rst", "autoapi/neural_compressor/experimental/common/model/index.rst", "autoapi/neural_compressor/experimental/common/optimizer/index.rst", "autoapi/neural_compressor/experimental/common/postprocess/index.rst", "autoapi/neural_compressor/experimental/common/torch_utils/index.rst", "autoapi/neural_compressor/experimental/component/index.rst", "autoapi/neural_compressor/experimental/compression/index.rst", "autoapi/neural_compressor/experimental/compression/pruning/index.rst", "autoapi/neural_compressor/experimental/contrib/index.rst", "autoapi/neural_compressor/experimental/contrib/strategy/index.rst", "autoapi/neural_compressor/experimental/contrib/strategy/sigopt/index.rst", "autoapi/neural_compressor/experimental/contrib/strategy/tpe/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/index.rst", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/index.rst", "autoapi/neural_compressor/experimental/data/index.rst", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/experimental/data/transforms/index.rst", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/experimental/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/distillation/index.rst", "autoapi/neural_compressor/experimental/export/index.rst", "autoapi/neural_compressor/experimental/export/qlinear2qdq/index.rst", "autoapi/neural_compressor/experimental/export/tf2onnx/index.rst", "autoapi/neural_compressor/experimental/export/torch2onnx/index.rst", "autoapi/neural_compressor/experimental/graph_optimization/index.rst", "autoapi/neural_compressor/experimental/index.rst", "autoapi/neural_compressor/experimental/metric/bleu/index.rst", "autoapi/neural_compressor/experimental/metric/bleu_util/index.rst", "autoapi/neural_compressor/experimental/metric/coco_label_map/index.rst", "autoapi/neural_compressor/experimental/metric/coco_tools/index.rst", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/experimental/metric/f1/index.rst", "autoapi/neural_compressor/experimental/metric/index.rst", "autoapi/neural_compressor/experimental/metric/metric/index.rst", "autoapi/neural_compressor/experimental/mixed_precision/index.rst", "autoapi/neural_compressor/experimental/model_conversion/index.rst", "autoapi/neural_compressor/experimental/nas/basic_nas/index.rst", "autoapi/neural_compressor/experimental/nas/dynas/index.rst", "autoapi/neural_compressor/experimental/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas_utils/index.rst", "autoapi/neural_compressor/experimental/nas/search_algorithms/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/gradient_sensitivity/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/group_lasso/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/magnitude/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/pattern_lock/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/pruner/index.rst", "autoapi/neural_compressor/experimental/pruning/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_v2/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index.rst", "autoapi/neural_compressor/experimental/quantization/index.rst", "autoapi/neural_compressor/experimental/scheduler/index.rst", "autoapi/neural_compressor/experimental/strategy/auto_mixed_precision/index.rst", "autoapi/neural_compressor/experimental/strategy/basic/index.rst", "autoapi/neural_compressor/experimental/strategy/bayesian/index.rst", "autoapi/neural_compressor/experimental/strategy/exhaustive/index.rst", "autoapi/neural_compressor/experimental/strategy/index.rst", "autoapi/neural_compressor/experimental/strategy/mse/index.rst", "autoapi/neural_compressor/experimental/strategy/mse_v2/index.rst", "autoapi/neural_compressor/experimental/strategy/random/index.rst", "autoapi/neural_compressor/experimental/strategy/strategy/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/constant/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/tuning_sampler/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/tuning_space/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/tuning_structs/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/utility/index.rst", "autoapi/neural_compressor/index.rst", "autoapi/neural_compressor/metric/bleu/index.rst", "autoapi/neural_compressor/metric/bleu_util/index.rst", "autoapi/neural_compressor/metric/coco_label_map/index.rst", "autoapi/neural_compressor/metric/coco_tools/index.rst", "autoapi/neural_compressor/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/metric/f1/index.rst", "autoapi/neural_compressor/metric/index.rst", "autoapi/neural_compressor/metric/metric/index.rst", "autoapi/neural_compressor/mix_precision/index.rst", "autoapi/neural_compressor/model/base_model/index.rst", "autoapi/neural_compressor/model/index.rst", "autoapi/neural_compressor/model/keras_model/index.rst", "autoapi/neural_compressor/model/model/index.rst", "autoapi/neural_compressor/model/mxnet_model/index.rst", "autoapi/neural_compressor/model/nets_factory/index.rst", "autoapi/neural_compressor/model/onnx_model/index.rst", "autoapi/neural_compressor/model/tensorflow_model/index.rst", "autoapi/neural_compressor/model/torch_model/index.rst", "autoapi/neural_compressor/objective/index.rst", "autoapi/neural_compressor/profiling/index.rst", "autoapi/neural_compressor/profiling/parser/factory/index.rst", "autoapi/neural_compressor/profiling/parser/index.rst", "autoapi/neural_compressor/profiling/parser/onnx_parser/factory/index.rst", "autoapi/neural_compressor/profiling/parser/onnx_parser/index.rst", "autoapi/neural_compressor/profiling/parser/onnx_parser/parser/index.rst", "autoapi/neural_compressor/profiling/parser/parser/index.rst", "autoapi/neural_compressor/profiling/parser/result/index.rst", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/factory/index.rst", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/index.rst", "autoapi/neural_compressor/profiling/parser/tensorflow_parser/parser/index.rst", "autoapi/neural_compressor/profiling/profiler/factory/index.rst", "autoapi/neural_compressor/profiling/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/factory/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/onnxrt_profiler/utils/index.rst", "autoapi/neural_compressor/profiling/profiler/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/factory/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/profiler/index.rst", "autoapi/neural_compressor/profiling/profiler/tensorflow_profiler/utils/index.rst", "autoapi/neural_compressor/quantization/index.rst", "autoapi/neural_compressor/strategy/auto/index.rst", "autoapi/neural_compressor/strategy/auto_mixed_precision/index.rst", "autoapi/neural_compressor/strategy/basic/index.rst", "autoapi/neural_compressor/strategy/bayesian/index.rst", "autoapi/neural_compressor/strategy/conservative/index.rst", "autoapi/neural_compressor/strategy/exhaustive/index.rst", "autoapi/neural_compressor/strategy/hawq_v2/index.rst", "autoapi/neural_compressor/strategy/index.rst", "autoapi/neural_compressor/strategy/mse/index.rst", "autoapi/neural_compressor/strategy/mse_v2/index.rst", "autoapi/neural_compressor/strategy/random/index.rst", "autoapi/neural_compressor/strategy/strategy/index.rst", "autoapi/neural_compressor/strategy/utils/constant/index.rst", "autoapi/neural_compressor/strategy/utils/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_space/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_structs/index.rst", "autoapi/neural_compressor/strategy/utils/utility/index.rst", "autoapi/neural_compressor/template/api_doc_example/index.rst", "autoapi/neural_compressor/template/index.rst", "autoapi/neural_compressor/training/index.rst", "autoapi/neural_compressor/utils/collect_layer_histogram/index.rst", "autoapi/neural_compressor/utils/constant/index.rst", "autoapi/neural_compressor/utils/create_obj_from_config/index.rst", "autoapi/neural_compressor/utils/index.rst", "autoapi/neural_compressor/utils/kl_divergence/index.rst", "autoapi/neural_compressor/utils/load_huggingface/index.rst", "autoapi/neural_compressor/utils/logger/index.rst", "autoapi/neural_compressor/utils/neural_insights_utils/index.rst", "autoapi/neural_compressor/utils/options/index.rst", "autoapi/neural_compressor/utils/pytorch/index.rst", "autoapi/neural_compressor/utils/utility/index.rst", "autoapi/neural_compressor/utils/weights_details/index.rst", "autoapi/neural_compressor/version/index.rst", "docs/build_docs/source/index.rst", "docs/source/CODE_OF_CONDUCT.md", "docs/source/CONTRIBUTING.md", "docs/source/FX.md", "docs/source/NAS.md", "docs/source/SECURITY.md", "docs/source/Welcome.md", "docs/source/adaptor.md", "docs/source/add_new_adaptor.md", "docs/source/add_new_data_type.md", "docs/source/api-doc/adaptor.rst", "docs/source/api-doc/adaptor/onnxrt.rst", "docs/source/api-doc/adaptor/torch_utils.rst", "docs/source/api-doc/api_doc_example.rst", "docs/source/api-doc/apis.rst", "docs/source/api-doc/benchmark.rst", "docs/source/api-doc/compression.rst", "docs/source/api-doc/config.rst", "docs/source/api-doc/mix_precision.rst", "docs/source/api-doc/model.rst", "docs/source/api-doc/objective.rst", "docs/source/api-doc/quantization.rst", "docs/source/api-doc/strategy.rst", "docs/source/api-doc/training.rst", "docs/source/benchmark.md", "docs/source/dataloader.md", "docs/source/dataset.md", "docs/source/design.md", "docs/source/diagnosis.md", "docs/source/distillation.md", "docs/source/distillation_quantization.md", "docs/source/distributed.md", "docs/source/examples_readme.md", "docs/source/export.md", "docs/source/faq.md", "docs/source/framework_yaml.md", "docs/source/get_started.md", "docs/source/incompatible_changes.md", "docs/source/infrastructure.md", "docs/source/installation_guide.md", "docs/source/legal_information.md", "docs/source/metric.md", "docs/source/migration.md", "docs/source/mixed_precision.md", "docs/source/model.md", "docs/source/neural_coder/README.md", "docs/source/neural_coder/docs/AWSSageMakerSupport.md", "docs/source/neural_coder/docs/BigDLNanoSupport.md", "docs/source/neural_coder/docs/IntelCPU_PerformanceSetting.md", "docs/source/neural_coder/docs/PythonAPI.md", "docs/source/neural_coder/docs/PythonLauncher.md", "docs/source/neural_coder/docs/Quantization.md", "docs/source/neural_coder/docs/SupportMatrix.md", "docs/source/neural_coder/docs/release_notes/v0.4.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/DEVELOP.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/README.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/RELEASE.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/DEVELOP.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/RELEASE.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/README.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/vsc-extension-quickstart.md", "docs/source/objective.md", "docs/source/orchestration.md", "docs/source/pruning.md", "docs/source/publication_list.md", "docs/source/pythonic_style.md", "docs/source/quantization.md", "docs/source/quantization_mixed_precision.md", "docs/source/quantization_weight_only.md", "docs/source/releases_info.md", "docs/source/sigopt_strategy.md", "docs/source/smooth_quant.md", "docs/source/tensorboard.md", "docs/source/transform.md", "docs/source/tuning_strategies.md", "docs/source/user_guide.md", "docs/source/user_yaml.md", "docs/source/validated_model_list.md", "index.rst"], "titles": ["<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">block_mask</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.adaptor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.dense</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.depthwise_conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.pool2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.separable_conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.onnxrt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.calibration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.calibrator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.activation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.argmax</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.attention</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.binary_op</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.concat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.direct_q8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.embed_layernorm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gather</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gavgpool</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gemm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.lstm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.maxpool</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.ops</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.pad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.reduce</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.resize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.split</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.unary_op</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.smooth_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.query</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tensorflow</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_converter_without_calib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph_common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.smooth_quant_calibration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.smooth_quant_scaler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.tf2onnx_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.bias_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.insert_logging</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.bf16_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.gptq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.hawq_metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.model_wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.pattern_detector</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.smooth_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.symbolic_trace</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.weight_only</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.algorithm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.fast_bias_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.smooth_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.weight_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.callbacks</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.distillation.criterions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.distillation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.criteria</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim.auto_slim</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim.pattern_analyzer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim.weight_slim</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.regs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.schedulers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.dotdict</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.pythonic_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy.sigopt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy.tpe</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.base_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.default_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.fetcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.mxnet_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.onnxrt_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.pytorch_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.tensorflow_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.bert_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.coco_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dummy_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dummy_dataset_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.imagenet_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.style_transfer_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters.coco_filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters.filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.coco_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.imagenet_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.postprocess</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.tokenization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.criterion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.postprocess</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.torch_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.component</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.compression</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.compression.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib.strategy.sigopt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib.strategy.tpe</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.base_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.default_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.fetcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.mxnet_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.onnxrt_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.pytorch_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.tensorflow_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.bert_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.coco_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dummy_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dummy_dataset_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.imagenet_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.style_transfer_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters.coco_filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters.filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.imagenet_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.tokenization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.distillation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.qlinear2qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.tf2onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.torch2onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.graph_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.bleu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.bleu_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.coco_label_map</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.coco_tools</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.evaluate_squad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.f1</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.model_conversion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.basic_nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.nas_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.search_algorithms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.gradient_sensitivity</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.group_lasso</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.magnitude</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.pattern_lock</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns.pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns.tile_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.prune_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.scheduler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.scheduler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.auto_mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.basic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.bayesian</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.exhaustive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.mse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.mse_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.tuning_sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.tuning_space</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.tuning_structs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.bleu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.bleu_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.coco_label_map</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.coco_tools</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.evaluate_squad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.f1</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.mix_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.base_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.keras_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.mxnet_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.nets_factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.onnx_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.tensorflow_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.torch_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.objective</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.onnx_parser.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.onnx_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.onnx_parser.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.result</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.tensorflow_parser.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.tensorflow_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.parser.tensorflow_parser.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.onnxrt_profiler.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.onnxrt_profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.onnxrt_profiler.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.onnxrt_profiler.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.tensorflow_profiler.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.tensorflow_profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.tensorflow_profiler.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.profiling.profiler.tensorflow_profiler.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.auto</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.auto_mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.basic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.bayesian</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.conservative</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.exhaustive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.hawq_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.mse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.mse_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_space</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_structs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.template.api_doc_example</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.template</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.training</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.collect_layer_histogram</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.create_obj_from_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.kl_divergence</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.load_huggingface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.neural_insights_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.options</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.weights_details</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.version</span></code>", "Intel\u00ae Neural Compressor Documentation", "Contributor Covenant Code of Conduct", "Contribution Guidelines", "FX", "Neural Architecture Search", "Security Policy", "Intel\u00ae Neural Compressor", "Adaptor", "How to Add An Adaptor", "How to Support New Data Type, Like Int4, with a Few Line Changes", "Adaptor", "ONNX Runtime", "Torch Utils", "API Document Example", "APIs", "Benchmark", "Compression", "Config", "Mix Precision", "Model", "Objective", "Quantization", "Strategy", "Training", "Benchmarking", "DataLoader", "Dataset", "Design", "Diagnosis", "Distillation", "Distillation for Quantization", "Distributed Training and Inference (Evaluation)", "Examples", "Export", "Frequently Asked Questions", "Framework YAML Configuration Files", "Getting Started", "Incompatible changes between v1.2 and v1.1", "Infrastructure of Intel\u00ae Neural Compressor", "Installation", "Legal Information", "Metrics", "Code Migration from Intel Neural Compressor 1.X to Intel Neural Compressor 2.X", "Mixed Precision", "Model", "Neural Coder", "AWS Amazon SageMaker Support", "BigDL Nano Support", "Intel CPU Platforms: Best Performance Setting", "Neural Coder as Python API", "Python Launcher", "Neural Coder for Quantization", "Supported Optimization Features", "v0.4", "Changelog", "neural_compressor_ext_lab", "Intel\u00ae Neural Compressor as JupyterLab Extension", "Making a new release of neural_compressor_ext_lab", "Changelog", "neural_compressor_ext_lab_alibaba", "Making a new release of neural_compressor_ext_lab_alibaba", "Change Log", "Neural Coder", "Welcome to your VS Code Extension", "Objective", "Optimization Orchestration", "Pruning", "Full Publications/Events (68)", "Pythonic Style Access for Configurations", "Quantization", "Turn OFF Auto Mixed Precision during Quantization", "Weight Only Quantization", "Release", "SigOpt Strategy", "Smooth Quant", "TensorBoard", "Transform", "Tuning Strategies", "User Guide", "User YAML Configuration Files", "Validated Models", "Intel\u00ae Neural Compressor Documentation"], "terms": {"block": [0, 154, 158, 169, 175, 176, 179, 296, 337, 379, 433, 459, 461, 466, 469, 472], "mask": [0, 175, 176, 199, 243, 269, 298, 322, 461, 475], "adaptor_registri": [1, 402], "cl": [1, 159, 166, 175, 176, 177, 178, 201, 208, 216, 218, 223, 245, 252, 258, 280, 287, 291, 296, 298, 300, 311, 326, 337, 372, 392], "sourc": [1, 3, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 108, 109, 112, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 152, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 169, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 228, 231, 232, 233, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 255, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 273, 274, 275, 276, 277, 279, 280, 281, 282, 283, 285, 286, 287, 288, 291, 292, 293, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 339, 341, 343, 344, 345, 346, 348, 349, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 369, 370, 371, 372, 375, 376, 377, 378, 379, 381, 382, 384, 386, 387, 388, 389, 390, 391, 392, 393, 394, 398, 401, 435, 437, 450, 452, 454, 455, 457, 462], "The": [1, 3, 11, 14, 16, 34, 52, 73, 112, 118, 120, 139, 147, 152, 157, 159, 164, 165, 166, 169, 173, 175, 176, 177, 178, 179, 180, 181, 183, 184, 187, 188, 189, 199, 200, 201, 202, 203, 207, 208, 216, 218, 221, 223, 226, 228, 231, 232, 233, 243, 244, 245, 246, 247, 251, 252, 258, 259, 264, 266, 267, 268, 270, 271, 273, 275, 276, 277, 279, 280, 282, 283, 285, 286, 287, 288, 291, 293, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 308, 309, 310, 311, 315, 317, 319, 320, 321, 323, 324, 326, 327, 335, 337, 360, 361, 362, 363, 364, 365, 366, 367, 369, 370, 371, 372, 376, 378, 379, 381, 382, 384, 386, 387, 391, 392, 393, 396, 398, 399, 402, 403, 404, 405, 407, 411, 414, 417, 419, 420, 421, 423, 424, 426, 428, 430, 432, 433, 434, 436, 437, 438, 439, 442, 443, 445, 448, 450, 451, 452, 454, 455, 457, 458, 459, 460, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475], "decor": [1, 16, 34, 66, 67, 69, 147, 159, 175, 176, 178, 216, 223, 258, 273, 280, 287, 291, 296, 298, 300, 311, 314, 326, 337, 372, 375, 392, 398, 399, 402, 472], "us": [1, 13, 16, 34, 42, 43, 47, 48, 69, 102, 104, 115, 140, 150, 152, 157, 158, 164, 166, 169, 173, 175, 176, 178, 181, 183, 184, 187, 188, 197, 198, 199, 200, 201, 202, 203, 206, 215, 216, 217, 218, 223, 231, 232, 241, 242, 243, 244, 245, 246, 247, 250, 257, 258, 262, 263, 264, 266, 267, 269, 273, 274, 275, 280, 287, 288, 291, 293, 296, 298, 299, 300, 301, 302, 305, 308, 311, 314, 315, 319, 320, 322, 326, 337, 354, 359, 360, 364, 367, 369, 372, 375, 376, 378, 379, 382, 383, 384, 385, 392, 396, 397, 398, 399, 402, 403, 419, 421, 423, 424, 425, 426, 428, 430, 432, 434, 435, 437, 438, 439, 440, 441, 442, 444, 445, 448, 450, 452, 454, 455, 457, 459, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475], "regist": [1, 16, 34, 159, 166, 169, 175, 176, 177, 178, 201, 208, 216, 218, 223, 245, 252, 258, 273, 280, 287, 291, 296, 298, 300, 311, 314, 326, 337, 372, 375, 389, 399, 402, 421, 426, 436, 437, 458, 459, 469, 472], "all": [1, 13, 16, 34, 44, 62, 96, 149, 157, 158, 159, 161, 164, 165, 175, 176, 179, 183, 184, 189, 190, 197, 201, 208, 216, 217, 223, 226, 228, 233, 241, 245, 252, 258, 263, 266, 269, 271, 273, 280, 287, 291, 292, 296, 302, 311, 314, 319, 322, 324, 326, 328, 337, 372, 375, 378, 384, 392, 396, 401, 402, 403, 404, 420, 421, 426, 430, 434, 437, 440, 448, 451, 452, 455, 456, 457, 458, 460, 461, 462, 464, 465, 469, 471, 472], "subclass": [1, 16, 34, 159, 175, 176, 178, 194, 198, 201, 208, 216, 223, 238, 242, 245, 252, 258, 273, 280, 287, 291, 296, 298, 300, 311, 314, 326, 337, 372, 375, 402], "paramet": [1, 11, 13, 14, 16, 42, 43, 44, 66, 67, 69, 85, 104, 115, 131, 139, 140, 147, 148, 149, 150, 155, 156, 157, 158, 159, 164, 165, 166, 169, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 187, 188, 198, 199, 201, 208, 212, 216, 218, 223, 228, 231, 232, 242, 243, 245, 252, 255, 258, 259, 261, 262, 263, 264, 266, 267, 269, 270, 271, 273, 275, 276, 277, 279, 280, 281, 282, 283, 285, 286, 287, 288, 291, 293, 296, 297, 298, 299, 300, 301, 305, 311, 315, 317, 319, 320, 322, 323, 324, 326, 327, 331, 335, 337, 354, 359, 360, 364, 372, 376, 378, 379, 381, 384, 388, 389, 391, 392, 398, 403, 420, 421, 424, 426, 433, 436, 437, 451, 457, 458, 461, 464, 466, 468, 469, 471, 472, 474], "framework_specific_info": [1, 3, 11, 14, 44, 46, 402], "base": [1, 3, 11, 13, 14, 16, 34, 45, 46, 85, 104, 115, 119, 121, 131, 143, 150, 154, 157, 159, 165, 169, 184, 189, 192, 197, 199, 201, 208, 216, 226, 233, 236, 241, 243, 245, 252, 258, 273, 279, 281, 287, 288, 291, 293, 298, 308, 311, 315, 326, 328, 335, 336, 337, 369, 372, 376, 399, 401, 402, 403, 404, 421, 425, 426, 430, 437, 438, 445, 446, 448, 457, 461, 464, 466, 468, 470, 472, 475], "framework": [1, 3, 11, 13, 14, 44, 164, 166, 169, 175, 176, 185, 186, 190, 191, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 210, 213, 216, 218, 219, 223, 229, 230, 234, 235, 237, 239, 242, 243, 244, 245, 246, 247, 248, 249, 250, 252, 254, 256, 258, 264, 273, 274, 301, 309, 315, 326, 327, 328, 329, 331, 370, 376, 384, 401, 402, 404, 423, 426, 427, 431, 432, 433, 434, 436, 437, 438, 461, 462, 464, 467, 470, 471, 472, 473, 474, 475], "layer": [1, 3, 11, 14, 45, 46, 115, 116, 117, 118, 120, 121, 149, 155, 158, 162, 166, 171, 173, 174, 175, 176, 179, 183, 184, 218, 225, 296, 297, 382, 384, 392, 402, 403, 404, 425, 433, 461, 467], "mxnet_util": 2, "util": [2, 12, 17, 104, 109, 110, 138, 141, 148, 150, 151, 156, 168, 170, 183, 184, 225, 265, 267, 297, 307, 318, 320, 352, 357, 368, 403, 404, 405, 426, 437, 440, 464, 472, 473], "ox_util": 2, "oper": [2, 17, 43, 103, 109, 139, 147, 173, 174, 175, 183, 184, 212, 255, 296, 354, 359, 398, 419, 420, 423, 428, 457, 464, 466, 469, 471, 472], "activ": [2, 17, 29, 140, 157, 158, 183, 184, 225, 315, 376, 378, 402, 403, 404, 423, 425, 430, 437, 458, 463, 464, 466, 469, 470, 474], "argmax": [2, 17, 29], "attent": [2, 17, 29, 154, 171, 173, 176, 183, 184, 199, 243, 396, 424, 461], "binary_op": [2, 17, 29], "concat": [2, 17, 29, 146], "conv": [2, 17, 29, 57, 61, 65, 70, 71, 72, 91, 108, 162, 183, 184, 398, 403, 404, 437, 461, 463, 464, 472], "direct_q8": [2, 17, 29], "embed_layernorm": [2, 17, 29], "gather": [2, 13, 17, 29, 183, 184, 296], "gavgpool": [2, 17, 29], "gemm": [2, 17, 29, 183, 184], "lstm": [2, 17, 29], "matmul": [2, 17, 29, 51, 58, 64, 72, 93, 108, 127, 136, 175, 183, 184, 296, 430, 472], "maxpool": [2, 17, 29, 128, 137, 430], "norm": [2, 17, 29], "op": [2, 13, 17, 29, 44, 51, 56, 64, 65, 66, 67, 68, 69, 70, 71, 73, 77, 80, 84, 87, 90, 91, 92, 93, 95, 104, 106, 108, 122, 123, 124, 130, 132, 133, 134, 135, 140, 142, 145, 147, 148, 150, 156, 157, 162, 173, 183, 184, 263, 308, 315, 316, 354, 359, 365, 367, 369, 376, 377, 378, 386, 392, 402, 403, 404, 423, 430, 437, 438, 461, 464, 465, 467, 469, 470, 472, 474], "pad": [2, 17, 29, 70, 71, 199, 216, 243, 258, 421, 471], "pool": [2, 17, 29], "reduc": [2, 17, 29, 183, 184, 402, 425, 437, 438, 457, 458, 461, 462, 464, 465, 466, 469, 472, 474], "resiz": [2, 17, 29, 199, 200, 212, 216, 243, 244, 255, 258, 421, 471], "split": [2, 17, 29, 43, 81, 158, 215, 216, 257, 258, 398, 466, 469, 471], "unary_op": [2, 17, 29], "calibr": [2, 11, 13, 14, 17, 48, 88, 89, 139, 157, 158, 164, 183, 184, 187, 188, 231, 232, 264, 301, 360, 386, 402, 404, 421, 432, 433, 464, 472, 474], "quantiz": [2, 11, 13, 14, 16, 17, 42, 43, 47, 48, 87, 91, 93, 95, 98, 106, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 148, 149, 150, 152, 155, 157, 158, 162, 164, 165, 183, 184, 187, 188, 212, 219, 226, 231, 232, 255, 263, 264, 265, 275, 302, 308, 314, 318, 365, 367, 369, 378, 381, 382, 386, 391, 392, 402, 409, 420, 421, 426, 427, 430, 432, 433, 436, 439, 440, 445, 447, 448, 451, 460, 462, 467, 470, 471, 472, 473, 474], "smooth_quant": [2, 17, 161, 183, 184, 318, 464, 469], "tf_util": 2, "graph_rewrit": [2, 110], "bf16": [2, 56, 86, 110, 148, 183, 184, 315, 376, 402, 403, 430, 437, 442, 447, 451, 457, 465, 472, 475], "gener": [2, 13, 47, 48, 86, 110, 121, 147, 149, 157, 164, 173, 179, 187, 188, 189, 198, 201, 202, 203, 204, 216, 231, 232, 233, 242, 245, 246, 247, 248, 258, 266, 274, 305, 319, 327, 355, 360, 364, 379, 381, 398, 402, 404, 420, 424, 436, 437, 438, 440, 445, 450, 452, 454, 455, 457, 459, 461, 462, 464, 465, 466, 469, 470, 471, 472], "int8": [2, 18, 19, 43, 86, 110, 122, 123, 124, 130, 132, 133, 134, 135, 142, 147, 158, 163, 164, 183, 184, 212, 255, 261, 262, 263, 315, 317, 376, 378, 391, 392, 398, 402, 403, 404, 419, 421, 425, 430, 437, 438, 442, 445, 447, 448, 451, 457, 463, 464, 465, 467, 468, 469, 470, 471, 474], "onnx": [2, 14, 15, 16, 29, 41, 43, 86, 110, 141, 162, 183, 184, 195, 239, 261, 262, 263, 327, 334, 354, 390, 401, 402, 403, 405, 420, 423, 427, 428, 430, 431, 433, 438, 439, 442, 447, 448, 462, 463, 466, 467, 469, 472], "qdq": [2, 42, 86, 110, 111, 112, 141, 157, 158, 183, 184, 261, 262, 263, 402, 423, 428, 433, 447, 448, 464, 467, 469], "graph_bas": [2, 86, 110], "quantize_graph": [2, 110], "qat": [2, 110, 111, 156, 184, 275, 335, 425, 426, 433, 437, 464], "quantize_graph_bas": [2, 110, 111], "quantize_graph_bn": [2, 110, 111], "quantize_graph_concatv2": [2, 110, 111], "quantize_graph_conv": [2, 110, 111], "quantize_graph_for_intel_cpu": [2, 110, 111], "quantize_graph_matmul": [2, 110, 111], "quantize_graph_pool": [2, 110, 111], "transform_graph": [2, 110], "bias_correct": [2, 110, 144], "graph_transform_bas": [2, 110, 144], "insert_log": [2, 110, 144], "rerange_quantized_concat": [2, 110, 144], "graph_convert": [2, 110], "graph_converter_without_calib": [2, 110], "graph_util": [2, 110], "quantize_graph_common": [2, 110], "smooth_quant_calibr": [2, 110], "smooth_quant_scal": [2, 110], "tf2onnx_convert": [2, 110], "torch_util": [2, 220, 265, 318, 469], "bf16_convert": [2, 50, 86, 110, 151], "hawq_metr": [2, 151], "model_wrapp": [2, 15, 151], "pattern_detector": [2, 151], "symbolic_trac": [2, 151], "tensorflow": [2, 50, 52, 74, 75, 76, 86, 94, 100, 101, 102, 103, 104, 105, 109, 110, 111, 113, 116, 129, 139, 140, 141, 144, 147, 183, 184, 198, 199, 200, 201, 204, 206, 208, 216, 218, 223, 242, 243, 244, 245, 248, 250, 252, 258, 262, 263, 264, 267, 269, 273, 274, 275, 301, 309, 320, 322, 326, 327, 335, 353, 354, 358, 359, 360, 370, 392, 399, 401, 402, 403, 420, 423, 424, 425, 427, 430, 431, 433, 434, 437, 438, 439, 447, 448, 461, 462, 463, 468, 469, 472, 474], "kerasadaptor": 3, "kerasqueri": 3, "local_config_fil": [3, 11, 14, 46], "none": [3, 13, 14, 41, 43, 44, 46, 47, 48, 62, 88, 101, 103, 104, 109, 115, 141, 147, 149, 150, 152, 155, 157, 158, 164, 165, 166, 171, 173, 175, 179, 180, 181, 183, 184, 187, 188, 189, 191, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 206, 212, 216, 217, 218, 219, 226, 228, 231, 232, 233, 235, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 255, 258, 259, 262, 263, 264, 269, 273, 274, 275, 276, 279, 288, 293, 297, 301, 305, 308, 310, 311, 315, 322, 326, 327, 337, 353, 358, 359, 360, 361, 364, 365, 369, 371, 372, 376, 379, 381, 382, 384, 389, 391, 392, 402, 403, 420, 421, 436, 464, 470, 471, 472], "defin": [3, 11, 14, 45, 85, 150, 153, 173, 175, 176, 177, 178, 183, 184, 187, 188, 231, 232, 276, 277, 279, 280, 281, 288, 293, 296, 297, 298, 300, 327, 360, 381, 391, 396, 399, 402, 403, 420, 421, 424, 425, 430, 433, 436, 437, 458, 460, 461, 464, 468, 469, 470, 472, 474], "queri": [3, 11, 13, 14, 46, 147, 157, 173, 176, 183, 184, 403, 404, 464], "interfac": [3, 11, 14, 45, 85, 112, 180, 264, 288, 293, 301, 302, 384, 433, 437, 448, 464, 467], "each": [3, 11, 14, 45, 140, 147, 150, 183, 184, 197, 201, 204, 212, 216, 241, 245, 248, 255, 258, 267, 269, 270, 271, 308, 320, 322, 323, 324, 369, 392, 397, 402, 403, 404, 421, 423, 424, 425, 430, 437, 442, 448, 451, 457, 459, 461, 468, 469, 470, 471, 472, 473], "adapt": [3, 11, 14, 45, 396, 401, 403, 421, 448, 462], "should": [3, 11, 14, 45, 53, 114, 115, 165, 171, 173, 176, 183, 184, 187, 188, 197, 199, 201, 216, 221, 231, 232, 241, 243, 245, 258, 263, 267, 320, 326, 327, 360, 379, 381, 392, 398, 399, 402, 403, 404, 421, 424, 426, 436, 437, 443, 452, 455, 457, 459, 461, 464, 471, 472, 474], "implement": [3, 11, 14, 45, 109, 142, 146, 187, 188, 194, 197, 198, 199, 201, 231, 232, 238, 241, 242, 243, 245, 266, 319, 327, 337, 360, 367, 381, 404, 420, 421, 436, 437, 448, 458, 461, 464, 467, 470, 472, 474], "inherit": [3, 11, 14, 45, 165, 166, 176, 178, 183, 196, 216, 218, 226, 240, 258, 298, 300, 399, 402, 403, 421], "specif": [3, 11, 14, 42, 45, 103, 115, 158, 164, 179, 183, 184, 199, 200, 201, 202, 206, 208, 223, 243, 244, 245, 246, 250, 252, 275, 282, 283, 285, 286, 287, 326, 360, 389, 396, 399, 402, 403, 420, 423, 424, 430, 432, 436, 437, 438, 439, 440, 444, 445, 447, 451, 457, 459, 461, 463, 472, 474], "backend": [3, 11, 14, 15, 41, 42, 45, 162, 183, 184, 185, 186, 190, 191, 195, 199, 200, 202, 203, 204, 205, 206, 210, 213, 216, 222, 223, 229, 230, 234, 235, 237, 239, 243, 244, 246, 247, 248, 249, 250, 254, 256, 258, 274, 309, 327, 328, 329, 331, 370, 398, 404, 423, 426, 432, 433, 437, 438, 446, 463, 471, 474], "own": [3, 11, 14, 45, 73, 197, 216, 241, 258, 337, 399, 403, 420, 421, 433, 436, 459, 466, 468, 473], "mxnetadaptor": 11, "do": [11, 14, 149, 165, 183, 184, 198, 199, 242, 243, 259, 263, 266, 269, 299, 319, 322, 391, 396, 403, 421, 426, 430, 433, 436, 437, 452, 455, 461, 465, 467, 469, 472], "inspect": [11, 14, 467, 470], "tensor": [11, 13, 14, 15, 16, 43, 69, 104, 147, 150, 157, 158, 169, 175, 176, 177, 184, 216, 258, 261, 263, 296, 298, 308, 335, 369, 392, 398, 404, 420, 421, 423, 461, 464, 467, 470, 471, 472], "dict": [11, 13, 14, 44, 115, 147, 148, 149, 150, 157, 158, 159, 164, 169, 173, 174, 175, 176, 177, 178, 179, 181, 183, 184, 187, 188, 198, 217, 223, 231, 232, 242, 261, 263, 268, 269, 270, 271, 273, 276, 279, 280, 281, 288, 291, 293, 296, 297, 298, 299, 300, 305, 308, 314, 317, 321, 322, 323, 324, 326, 327, 335, 360, 375, 378, 379, 381, 382, 384, 391, 392, 398, 403, 428, 436, 461, 463, 464, 469, 470, 472], "configur": [11, 13, 14, 44, 117, 148, 157, 164, 179, 180, 183, 184, 187, 188, 190, 201, 204, 217, 222, 231, 232, 245, 248, 259, 263, 264, 275, 276, 277, 279, 288, 293, 297, 301, 302, 308, 326, 327, 337, 360, 369, 378, 381, 383, 384, 390, 391, 398, 399, 402, 403, 421, 423, 437, 444, 458, 459, 461, 464, 467, 471, 472, 475], "mxnetqueri": 11, "mxnet": [12, 13, 16, 184, 194, 198, 201, 204, 208, 216, 238, 242, 245, 248, 252, 258, 264, 273, 301, 326, 327, 332, 360, 401, 402, 403, 420, 427, 430, 433, 434, 437, 438, 439, 463, 472, 474], "init": [12, 17, 42, 161, 167, 170, 172, 421, 436, 472], "optyp": [13, 183, 184, 261, 403], "enum": 13, "type": [13, 16, 42, 43, 44, 73, 95, 104, 115, 121, 131, 139, 147, 148, 149, 150, 157, 158, 159, 166, 173, 174, 175, 176, 177, 178, 179, 181, 183, 184, 197, 199, 201, 208, 216, 218, 223, 241, 243, 245, 252, 258, 263, 266, 267, 269, 273, 280, 287, 291, 296, 298, 300, 305, 311, 315, 317, 319, 320, 322, 326, 335, 337, 364, 365, 372, 376, 378, 379, 391, 392, 397, 402, 403, 421, 423, 426, 428, 430, 433, 437, 438, 458, 464, 468, 471, 472, 473, 474], "isiter": 13, "obj": [13, 104, 179, 198, 228, 242, 259, 264, 275, 276, 277, 279, 288, 293, 297, 301, 327, 337, 360, 381, 384, 392], "bool": [13, 42, 140, 147, 149, 156, 157, 158, 175, 183, 184, 199, 201, 212, 216, 243, 245, 255, 258, 263, 267, 273, 296, 314, 320, 326, 375, 379, 391, 392, 420, 421, 436, 463, 471], "check": [13, 66, 67, 104, 147, 157, 158, 179, 190, 201, 245, 261, 297, 391, 392, 397, 401, 423, 426, 434, 441, 443, 445, 452, 455, 456, 467], "whether": [13, 104, 115, 147, 149, 158, 175, 183, 184, 197, 199, 212, 216, 241, 243, 255, 258, 267, 269, 273, 296, 320, 322, 326, 384, 391, 392, 402, 421, 436, 464, 466, 469, 471], "object": [13, 42, 43, 44, 73, 85, 104, 115, 131, 148, 150, 156, 157, 164, 165, 169, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 187, 188, 189, 199, 200, 201, 216, 217, 219, 228, 231, 232, 233, 243, 244, 245, 258, 259, 264, 269, 277, 279, 282, 283, 285, 286, 287, 288, 293, 296, 297, 298, 299, 300, 301, 305, 318, 322, 326, 327, 335, 336, 354, 359, 360, 364, 378, 381, 384, 391, 392, 398, 399, 403, 409, 419, 420, 421, 429, 436, 437, 439, 460, 461, 463, 464, 471, 472, 473, 475], "i": [13, 43, 44, 47, 48, 52, 53, 56, 59, 63, 69, 81, 84, 104, 131, 142, 147, 149, 150, 152, 156, 157, 163, 164, 165, 169, 173, 174, 176, 177, 179, 183, 184, 187, 188, 189, 197, 198, 199, 200, 201, 202, 203, 206, 208, 212, 216, 217, 219, 223, 225, 226, 231, 232, 233, 241, 242, 243, 244, 245, 246, 247, 250, 252, 255, 258, 266, 269, 271, 273, 275, 280, 288, 293, 297, 298, 302, 309, 319, 322, 324, 326, 327, 337, 343, 344, 348, 360, 365, 370, 378, 379, 381, 391, 392, 396, 397, 398, 399, 401, 402, 403, 404, 405, 407, 411, 414, 417, 419, 420, 421, 423, 424, 425, 426, 428, 429, 430, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 448, 450, 451, 452, 454, 455, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475], "iter": [13, 15, 104, 139, 147, 158, 164, 174, 176, 178, 183, 184, 187, 188, 192, 197, 201, 202, 219, 231, 232, 236, 241, 245, 246, 298, 300, 327, 360, 381, 384, 398, 399, 402, 419, 420, 421, 437, 461, 463, 464, 470, 472, 474], "return": [13, 16, 44, 52, 66, 67, 69, 73, 104, 115, 147, 148, 149, 150, 156, 157, 158, 159, 164, 166, 173, 175, 176, 177, 178, 179, 181, 187, 188, 201, 208, 212, 216, 217, 218, 223, 228, 231, 232, 245, 252, 255, 258, 263, 266, 267, 269, 270, 271, 273, 279, 280, 287, 291, 296, 297, 298, 300, 305, 311, 315, 317, 319, 320, 322, 323, 324, 326, 327, 331, 335, 337, 354, 359, 360, 364, 372, 376, 378, 379, 381, 384, 389, 391, 392, 398, 399, 403, 404, 420, 421, 426, 436, 439, 459, 461, 464, 469, 470, 472], "true": [13, 84, 112, 145, 147, 158, 164, 183, 184, 197, 199, 201, 202, 215, 216, 217, 241, 243, 245, 246, 257, 258, 263, 267, 273, 291, 314, 320, 326, 337, 360, 375, 379, 384, 391, 392, 403, 420, 421, 423, 426, 430, 436, 437, 440, 443, 444, 463, 464, 466, 469, 470, 471, 472, 474], "els": [13, 147, 158, 184, 197, 241, 337, 389, 445, 470], "fals": [13, 14, 15, 41, 42, 46, 47, 48, 70, 71, 88, 91, 98, 101, 102, 104, 112, 130, 135, 142, 145, 146, 147, 156, 157, 158, 164, 166, 183, 184, 189, 191, 194, 195, 196, 198, 199, 201, 212, 216, 217, 218, 219, 225, 233, 235, 238, 239, 240, 242, 243, 245, 255, 258, 269, 273, 322, 326, 337, 360, 379, 384, 392, 402, 403, 420, 421, 430, 436, 437, 450, 454, 463, 464, 469, 470, 471, 472, 474], "boolean": 13, "ensure_list": 13, "x": [13, 53, 73, 149, 174, 183, 184, 198, 216, 242, 258, 305, 364, 379, 423, 426, 438, 439, 464, 469, 470, 471, 473], "ensur": [13, 216, 258, 305, 364, 426, 464, 471], "list": [13, 42, 43, 52, 104, 139, 147, 148, 149, 150, 154, 157, 164, 173, 174, 175, 176, 183, 184, 187, 188, 192, 199, 212, 216, 217, 231, 232, 236, 243, 255, 258, 262, 263, 266, 267, 269, 270, 271, 273, 280, 288, 293, 296, 299, 314, 319, 320, 322, 323, 324, 326, 327, 335, 343, 344, 348, 360, 375, 379, 381, 382, 392, 398, 401, 402, 421, 428, 430, 434, 437, 440, 445, 447, 450, 451, 454, 459, 461, 463, 464, 465, 469, 470, 472], "input": [13, 15, 42, 43, 44, 52, 59, 63, 66, 67, 69, 70, 71, 73, 81, 82, 84, 85, 104, 108, 109, 115, 121, 140, 147, 148, 155, 156, 157, 158, 162, 173, 174, 183, 184, 187, 188, 199, 200, 201, 203, 212, 215, 216, 221, 231, 232, 243, 244, 245, 247, 255, 257, 258, 261, 262, 263, 326, 327, 331, 335, 360, 381, 389, 391, 392, 399, 402, 403, 419, 420, 421, 423, 424, 425, 426, 428, 430, 432, 436, 437, 438, 439, 440, 445, 461, 463, 464, 466, 469, 470, 471, 474], "check_mx_vers": 13, "version": [13, 52, 103, 157, 173, 184, 262, 263, 318, 396, 398, 402, 430, 434, 435, 437, 450, 452, 454, 455, 462, 469, 472, 473], "str": [13, 42, 139, 148, 150, 154, 155, 156, 157, 158, 159, 166, 173, 183, 184, 199, 200, 201, 208, 212, 216, 218, 222, 223, 243, 244, 245, 252, 255, 258, 262, 263, 266, 267, 269, 271, 273, 280, 291, 314, 317, 319, 320, 322, 324, 326, 345, 353, 355, 358, 359, 375, 378, 379, 384, 389, 392, 393, 420, 421, 436, 463, 470, 471], "mx": 13, "__version__": 13, "combine_cap": 13, "current": [13, 69, 103, 155, 169, 173, 175, 176, 183, 184, 275, 282, 283, 285, 286, 287, 296, 298, 305, 309, 364, 370, 392, 398, 399, 402, 404, 426, 430, 437, 440, 444, 457, 459, 461, 464, 469, 472], "new": [13, 16, 147, 155, 164, 189, 201, 216, 217, 233, 245, 258, 297, 337, 397, 403, 426, 437, 438, 451, 457, 458, 461, 462, 464, 466, 467, 468, 471, 473, 474], "combin": [13, 157, 183, 184, 187, 188, 212, 226, 231, 232, 255, 327, 360, 381, 392, 398, 402, 433, 437, 460, 462, 464, 465, 471, 472], "capabl": [13, 46, 315, 376, 403, 404, 419, 430, 437, 438, 448, 461, 463, 464, 472, 474], "contain": [13, 66, 67, 69, 73, 138, 147, 150, 157, 158, 164, 165, 173, 175, 176, 178, 179, 183, 184, 187, 188, 199, 200, 201, 231, 232, 243, 244, 245, 259, 263, 264, 269, 270, 271, 275, 288, 291, 293, 296, 297, 298, 299, 300, 301, 322, 323, 324, 327, 360, 381, 384, 391, 421, 424, 433, 436, 458, 461, 466, 470, 472, 473], "make_nc_model": 13, "target": [13, 42, 43, 101, 149, 173, 178, 179, 184, 297, 300, 305, 364, 421, 426, 437, 461, 470, 471, 472, 474], "sym_model": 13, "ctx": 13, "input_desc": 13, "convert": [13, 43, 47, 48, 49, 51, 52, 53, 54, 55, 65, 73, 85, 98, 99, 101, 102, 103, 104, 130, 135, 141, 148, 157, 173, 183, 184, 199, 212, 215, 216, 243, 255, 257, 258, 262, 269, 275, 297, 315, 322, 376, 379, 398, 403, 437, 438, 442, 464, 465, 469, 471, 472], "symbol": [13, 148, 156, 157, 266, 319, 327, 360, 398, 439], "model": [13, 15, 16, 29, 41, 42, 43, 44, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 115, 117, 139, 140, 141, 147, 148, 149, 150, 152, 154, 155, 156, 157, 158, 162, 164, 165, 171, 173, 176, 178, 179, 183, 184, 187, 188, 195, 198, 199, 201, 216, 217, 220, 221, 228, 231, 232, 239, 242, 243, 245, 258, 259, 261, 262, 263, 264, 265, 273, 274, 275, 276, 279, 282, 283, 285, 286, 287, 288, 293, 297, 298, 299, 300, 301, 302, 305, 308, 310, 311, 318, 326, 327, 337, 353, 358, 359, 360, 361, 364, 365, 369, 371, 372, 378, 379, 381, 387, 389, 391, 392, 394, 398, 399, 401, 402, 404, 409, 419, 420, 421, 423, 424, 425, 426, 427, 432, 433, 435, 436, 438, 440, 445, 447, 448, 451, 457, 459, 460, 462, 464, 467, 468, 470, 471, 472, 473, 474], "an": [13, 66, 67, 69, 104, 140, 142, 150, 157, 163, 176, 183, 184, 192, 197, 201, 216, 220, 225, 236, 241, 245, 258, 265, 266, 270, 271, 279, 280, 302, 318, 319, 323, 324, 327, 354, 359, 360, 379, 381, 392, 394, 396, 398, 399, 401, 402, 404, 420, 421, 422, 423, 428, 436, 437, 438, 440, 444, 445, 448, 457, 459, 461, 462, 464, 468, 469, 470, 471, 472], "neural": [13, 150, 164, 165, 175, 183, 184, 211, 212, 213, 216, 217, 220, 223, 226, 255, 256, 258, 260, 265, 272, 273, 275, 288, 293, 296, 299, 301, 302, 307, 313, 318, 325, 326, 327, 331, 338, 360, 367, 368, 374, 389, 394, 397, 402, 403, 404, 419, 421, 422, 424, 425, 426, 427, 428, 429, 430, 431, 432, 435, 438, 439, 441, 442, 445, 447, 448, 450, 452, 454, 455, 456, 459, 460, 462, 464, 466, 467, 469, 470, 471, 472, 474, 475], "compressor": [13, 164, 165, 175, 183, 184, 211, 212, 213, 216, 217, 220, 223, 226, 255, 256, 258, 260, 265, 272, 273, 275, 296, 299, 301, 302, 307, 313, 318, 325, 326, 327, 331, 338, 360, 368, 374, 389, 394, 397, 399, 402, 403, 404, 419, 421, 422, 424, 425, 426, 427, 428, 429, 430, 431, 432, 435, 438, 439, 440, 441, 445, 447, 448, 450, 452, 454, 455, 456, 459, 460, 461, 462, 464, 466, 467, 469, 470, 471, 472, 473, 474, 475], "tupl": [13, 104, 147, 157, 184, 187, 188, 212, 216, 231, 232, 255, 258, 263, 314, 327, 360, 375, 381, 403, 421, 436, 437, 464, 471], "symnet": 13, "arg": [13, 52, 104, 199, 200, 201, 243, 244, 245, 296, 305, 364, 379, 387, 388, 421, 426, 437, 446, 464, 466, 469, 470, 471], "aux": 13, "data": [13, 42, 43, 54, 104, 139, 147, 150, 155, 157, 158, 162, 173, 183, 184, 187, 188, 217, 219, 231, 232, 263, 265, 305, 315, 317, 318, 327, 353, 358, 360, 364, 376, 378, 381, 384, 389, 392, 401, 402, 420, 421, 426, 430, 431, 434, 436, 437, 438, 464, 465, 467, 468, 469, 470, 471, 472, 473], "descript": [13, 131, 379, 397, 398, 403, 404, 420, 469], "ncmodel": 13, "fuse": [13, 57, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 90, 91, 92, 93, 95, 130, 135, 156, 157, 162, 398, 469, 470], "suppli": 13, "get_framework_nam": 13, "get": [13, 42, 44, 66, 67, 69, 103, 104, 147, 149, 155, 157, 158, 164, 169, 171, 173, 175, 176, 177, 178, 181, 184, 192, 216, 217, 223, 225, 236, 258, 263, 296, 298, 300, 308, 315, 317, 326, 335, 360, 369, 376, 378, 384, 392, 403, 429, 433, 434, 437, 443, 462, 466, 469, 472, 473, 476], "name": [13, 43, 44, 52, 66, 67, 69, 103, 104, 109, 115, 139, 147, 148, 149, 150, 155, 156, 157, 158, 159, 164, 169, 173, 175, 176, 177, 178, 181, 183, 184, 199, 200, 201, 204, 208, 214, 216, 217, 221, 224, 225, 243, 244, 245, 248, 252, 258, 261, 262, 263, 268, 273, 291, 296, 298, 300, 315, 317, 321, 326, 331, 335, 337, 360, 376, 378, 382, 384, 392, 398, 403, 404, 421, 423, 426, 428, 430, 435, 436, 437, 439, 443, 450, 454, 458, 461, 464, 467, 468, 470, 472, 474, 475], "context": [13, 392, 463, 466], "prepare_model_data": 13, "nc_model": [13, 288, 293], "data_x": 13, "prepar": [13, 157, 398, 401, 421, 426, 431, 464], "dataload": [13, 15, 42, 139, 140, 149, 150, 155, 157, 158, 164, 171, 173, 187, 188, 199, 210, 220, 231, 232, 243, 254, 259, 265, 288, 293, 302, 318, 353, 358, 360, 381, 384, 398, 401, 402, 403, 423, 424, 425, 426, 431, 432, 437, 438, 460, 464, 465, 469, 470, 471, 473, 474], "need": [13, 42, 104, 108, 155, 158, 164, 173, 184, 187, 188, 189, 197, 198, 201, 208, 216, 219, 221, 222, 231, 232, 233, 241, 242, 245, 252, 258, 263, 302, 308, 326, 327, 337, 360, 369, 381, 391, 392, 398, 402, 420, 421, 423, 424, 426, 433, 437, 440, 442, 443, 446, 450, 451, 452, 454, 455, 457, 458, 461, 463, 464, 465, 466, 467, 469, 471, 472, 474], "run": [13, 139, 147, 158, 164, 176, 179, 183, 184, 187, 188, 198, 215, 217, 231, 232, 242, 257, 297, 298, 305, 327, 360, 364, 381, 397, 402, 419, 426, 429, 430, 437, 440, 442, 444, 445, 446, 448, 450, 451, 452, 454, 455, 457, 462, 464, 467, 468, 470, 472, 474], "loader": [13, 139, 187, 188, 231, 232, 327, 360, 381, 387, 420, 464], "dataloaderwrap": 13, "prepare_model": 13, "create_data_exampl": 13, "creat": [13, 16, 104, 183, 184, 189, 199, 201, 219, 233, 243, 245, 269, 279, 280, 315, 322, 354, 359, 376, 378, 379, 384, 396, 399, 402, 421, 439, 450, 452, 454, 455, 458, 464, 468, 470, 472, 473], "exampl": [13, 150, 157, 158, 164, 173, 174, 183, 184, 199, 200, 201, 212, 216, 243, 244, 245, 255, 258, 269, 270, 271, 273, 299, 322, 323, 324, 326, 327, 337, 360, 378, 379, 381, 396, 397, 401, 403, 404, 409, 432, 433, 440, 443, 444, 445, 448, 465, 467, 471, 472, 473, 476], "prepare_dataload": 13, "io": 13, "ndarray_to_devic": 13, "ndarrai": [13, 42, 43, 66, 67, 69, 216, 258, 382, 429, 471], "devic": [13, 78, 88, 89, 90, 91, 92, 93, 96, 106, 130, 135, 146, 149, 158, 173, 174, 183, 184, 403, 420, 424, 437, 438, 440, 443, 448, 457, 463, 466], "is_model_quant": 13, "query_quantizable_nod": 13, "node": [13, 42, 43, 49, 52, 53, 54, 55, 59, 61, 63, 66, 67, 69, 73, 76, 79, 81, 82, 83, 97, 101, 102, 104, 109, 131, 139, 147, 173, 261, 263, 335, 359, 402, 403, 423, 426, 470, 472, 475], "given": [13, 16, 66, 67, 69, 103, 104, 115, 147, 157, 216, 258, 269, 322, 360, 399, 404, 461, 469, 471], "map": [13, 43, 104, 147, 184, 216, 258, 261, 263, 264, 268, 270, 271, 273, 288, 293, 298, 301, 321, 323, 324, 326, 421, 426, 436, 437, 450, 454, 461, 464, 466], "quantize_sym_model": 13, "qconfig": [13, 470], "accord": [13, 121, 157, 164, 183, 184, 199, 200, 201, 216, 243, 244, 245, 258, 308, 367, 369, 384, 399, 402, 421, 426, 461, 465, 469, 471, 472], "run_forward": 13, "b_filter": 13, "collector": [13, 150, 382], "pre_batch": 13, "post_batch": 13, "forward": [13, 401, 403, 437, 461, 463, 464, 466, 469, 470], "propag": [13, 99], "filter": [13, 199, 200, 201, 202, 203, 204, 206, 210, 243, 244, 245, 246, 247, 248, 250, 254, 265, 318, 392, 404, 421, 433, 461, 470], "which": [13, 42, 54, 82, 109, 149, 150, 155, 169, 173, 174, 175, 176, 178, 179, 183, 184, 199, 200, 201, 212, 217, 243, 244, 245, 255, 266, 271, 280, 282, 283, 285, 286, 287, 291, 296, 297, 298, 300, 305, 319, 324, 326, 331, 337, 360, 364, 392, 396, 398, 399, 402, 403, 404, 420, 421, 423, 424, 426, 429, 430, 433, 436, 437, 438, 439, 441, 445, 448, 451, 457, 458, 460, 461, 463, 464, 465, 466, 467, 469, 470, 471, 472, 473, 474], "batch": [13, 157, 189, 191, 192, 197, 198, 219, 233, 235, 236, 241, 242, 381, 420, 424, 425, 437, 460, 461, 471, 472, 475], "infer": [13, 104, 158, 173, 264, 301, 335, 337, 360, 381, 402, 403, 424, 425, 437, 438, 457, 459, 461, 462, 464, 466, 469, 470, 472], "collect": [13, 16, 43, 157, 214, 216, 219, 221, 222, 224, 258, 271, 273, 324, 326, 382, 392, 403, 464, 470, 472], "inform": [13, 150, 169, 173, 175, 176, 177, 178, 179, 184, 187, 188, 219, 221, 222, 231, 232, 296, 298, 299, 300, 302, 326, 392, 396, 397, 400, 401, 402, 403, 404, 405, 407, 411, 414, 417, 424, 430, 437, 439, 452, 455, 458, 461, 465, 467, 470, 474, 475, 476], "dure": [13, 139, 175, 178, 183, 184, 296, 300, 337, 392, 403, 423, 437, 439, 459, 460, 461, 464, 469, 470, 474], "call": [13, 42, 155, 159, 173, 176, 269, 298, 322, 398, 399, 402, 420, 432, 446, 448, 458, 464, 469, 470, 471], "prior": [13, 87, 472], "after": [13, 77, 157, 171, 175, 176, 183, 184, 199, 212, 216, 219, 243, 255, 258, 298, 365, 379, 392, 399, 403, 421, 423, 424, 425, 428, 433, 436, 437, 450, 451, 454, 458, 459, 460, 461, 464, 465, 468, 469, 470, 471, 472], "count": [13, 399, 421, 466], "int": [13, 16, 42, 43, 104, 139, 147, 154, 157, 158, 171, 183, 184, 198, 199, 200, 212, 216, 242, 243, 244, 255, 258, 262, 263, 267, 269, 273, 280, 320, 322, 326, 345, 354, 359, 378, 379, 392, 420, 421, 436, 437, 463, 471], "make_symbol_block": 13, "gluon": [13, 327, 360, 439], "symbolblock": 13, "make_modul": 13, "parse_tune_config": 13, "tune_cfg": [13, 147, 148, 157, 402, 404, 472], "quantizable_nod": 13, "strategi": [13, 157, 176, 183, 184, 185, 201, 229, 245, 265, 318, 401, 402, 403, 404, 409, 420, 426, 433, 437, 445, 457, 462, 463, 464, 465, 467, 473, 474], "config": [13, 114, 115, 117, 121, 157, 164, 169, 171, 175, 176, 177, 178, 179, 183, 187, 188, 199, 228, 231, 232, 243, 282, 283, 285, 286, 287, 288, 293, 296, 297, 298, 299, 300, 315, 316, 318, 327, 354, 359, 376, 377, 378, 379, 381, 384, 391, 392, 399, 401, 403, 404, 409, 419, 420, 423, 424, 425, 426, 428, 431, 433, 436, 437, 438, 439, 460, 461, 463, 464, 465, 466, 468, 470, 472], "tune": [13, 44, 164, 183, 184, 187, 188, 199, 201, 231, 232, 243, 245, 264, 301, 303, 304, 305, 306, 308, 309, 310, 311, 314, 315, 316, 317, 327, 337, 360, 361, 362, 363, 364, 365, 366, 367, 369, 370, 371, 372, 375, 376, 377, 378, 381, 392, 402, 403, 420, 421, 423, 426, 433, 435, 437, 438, 457, 459, 461, 462, 465, 466, 467, 468, 470, 474], "from": [13, 43, 44, 60, 66, 67, 69, 104, 147, 155, 157, 164, 165, 166, 169, 175, 176, 177, 178, 179, 183, 184, 187, 188, 189, 192, 196, 199, 200, 201, 202, 203, 204, 206, 211, 212, 218, 219, 222, 231, 232, 233, 236, 240, 243, 244, 245, 246, 247, 248, 250, 255, 259, 261, 262, 263, 266, 269, 270, 271, 275, 280, 296, 297, 298, 300, 315, 317, 319, 322, 323, 324, 327, 335, 337, 360, 376, 378, 379, 381, 384, 391, 392, 396, 398, 399, 402, 404, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 431, 433, 436, 438, 439, 440, 444, 445, 446, 448, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473], "distribute_calib_tensor": 13, "calib_tensor": 13, "calib_cfg": 13, "tensor_to_nod": 13, "distribut": [13, 16, 142, 163, 183, 184, 189, 191, 192, 194, 195, 196, 197, 198, 219, 233, 235, 236, 238, 239, 240, 241, 242, 386, 401, 403, 420, 424, 434, 452, 455, 462, 464, 466, 467, 469, 473, 475], "depend": [13, 187, 188, 217, 231, 232, 327, 360, 381, 397, 429, 430, 463, 464, 472], "algorithm": [13, 149, 157, 180, 266, 273, 281, 318, 319, 326, 384, 386, 399, 402, 403, 404, 424, 425, 430, 433, 446, 451, 461, 464, 466, 470, 474], "set": [13, 43, 56, 95, 104, 114, 147, 155, 157, 164, 179, 181, 183, 184, 187, 188, 189, 199, 201, 204, 216, 217, 222, 223, 231, 232, 233, 243, 245, 248, 258, 269, 275, 288, 293, 297, 302, 322, 326, 327, 335, 359, 360, 379, 381, 389, 392, 396, 399, 403, 419, 420, 421, 424, 426, 428, 430, 432, 433, 434, 436, 437, 438, 440, 442, 444, 458, 461, 463, 464, 468, 469, 472, 474], "kl": [13, 16, 183, 184, 382, 386, 403, 404, 430, 437, 472, 474], "minmax": [13, 16, 403, 404, 430, 464, 474], "calib_model": 13, "qsym_model": 13, "calib_data": 13, "calibdata": 13, "threshold": [13, 160, 382, 386, 436], "amp_convert": 13, "amp_cfg": 13, "support": [13, 42, 43, 96, 103, 155, 162, 166, 175, 176, 183, 184, 187, 188, 198, 199, 201, 208, 212, 216, 218, 219, 220, 223, 228, 231, 232, 242, 243, 245, 252, 255, 258, 265, 273, 275, 280, 296, 298, 302, 309, 315, 318, 326, 327, 331, 337, 360, 370, 376, 379, 381, 384, 386, 392, 394, 401, 403, 437, 440, 445, 448, 451, 457, 462, 465, 468, 472, 473], "amp": [13, 440, 447], "wrap": [13, 104, 115, 166, 218, 269, 322, 398, 426, 452, 455], "dataiterload": 13, "data_it": [13, 173], "collectorbas": 13, "calibcollector": 13, "include_tensors_kl": 13, "include_tensors_minmax": 13, "num_bin": [13, 16, 382], "8001": [13, 382], "tensorcollector": 13, "include_nod": 13, "qtensor_to_tensor": 13, "build": [13, 42, 114, 159, 160, 162, 163, 176, 276, 279, 330, 332, 334, 335, 336, 402, 403, 404, 434, 439, 450, 452, 454, 455, 458, 462, 468, 472], "up": [13, 99, 176, 216, 258, 297, 426, 427, 430, 433, 448, 452, 455, 457, 462, 463, 464, 468, 471, 472, 474], "namecollector": 13, "cache_kl": 13, "cache_minmax": 13, "tensors_kl": 13, "tensors_minmax": 13, "onnxruntimeadaptor": 14, "rt": 14, "onnxrt_qlinearopsadaptor": [14, 402], "onnxrt_integeropsadaptor": 14, "onnxrt_qdqadaptor": 14, "onnxrtqueri": 14, "dynam": [14, 184, 189, 233, 263, 315, 376, 401, 402, 420, 424, 428, 433, 437, 440, 445, 446, 447, 448, 451, 457, 462, 472, 475], "static": [14, 41, 42, 46, 155, 162, 173, 184, 263, 315, 360, 376, 402, 403, 404, 423, 428, 433, 437, 440, 445, 446, 447, 448, 451, 457, 469, 472, 475], "format": [14, 18, 43, 52, 147, 183, 184, 199, 200, 201, 243, 244, 245, 263, 269, 275, 315, 322, 376, 379, 403, 404, 421, 426, 428, 436, 437, 438, 439, 440, 464, 467], "onnxrtaug": 15, "dump_op_typ": 15, "black_nod": [15, 139], "white_nod": 15, "cpuexecutionprovid": [15, 41, 42, 438, 464], "reduce_rang": [15, 41, 42, 183, 184, 404, 463], "augment": 15, "dump": [15, 157, 164, 263, 392, 464, 467, 470], "calib_registri": 16, "calib_method": 16, "calibratorbas": 16, "minmaxcalibr": 16, "percentilecalibr": 16, "2048": [16, 392], "percentil": [16, 139, 158], "99": [16, 469, 475], "999": [16, 474], "option": [16, 104, 158, 175, 183, 184, 187, 188, 199, 216, 231, 232, 243, 258, 262, 263, 269, 275, 296, 302, 315, 318, 322, 326, 327, 360, 376, 378, 379, 381, 385, 392, 403, 404, 420, 421, 430, 434, 437, 451, 461, 464, 466, 468, 471, 472, 474], "number": [16, 66, 67, 104, 139, 157, 158, 171, 175, 183, 184, 197, 200, 212, 216, 241, 244, 255, 258, 270, 271, 273, 296, 305, 323, 324, 326, 354, 359, 364, 379, 384, 392, 419, 420, 421, 426, 436, 461, 464, 466, 468, 471, 472], "bin": [16, 392, 429], "histogram": [16, 382, 392, 470], "valu": [16, 43, 54, 66, 67, 69, 88, 89, 104, 142, 147, 157, 163, 164, 169, 173, 174, 176, 179, 181, 183, 184, 187, 188, 199, 202, 203, 212, 216, 217, 231, 232, 243, 246, 247, 255, 258, 269, 273, 297, 305, 308, 315, 322, 326, 327, 360, 364, 369, 376, 378, 379, 381, 382, 384, 392, 398, 403, 404, 421, 423, 430, 436, 437, 438, 443, 459, 461, 463, 464, 466, 467, 469, 471, 472, 474], "default": [16, 96, 147, 158, 179, 181, 183, 184, 187, 188, 191, 199, 200, 201, 212, 216, 231, 232, 235, 243, 244, 245, 255, 258, 262, 263, 266, 275, 297, 317, 319, 326, 335, 378, 384, 392, 398, 402, 420, 421, 430, 433, 434, 436, 437, 438, 445, 448, 450, 454, 459, 461, 463, 464, 465, 466, 468, 469, 471, 472, 474], "float": [16, 43, 139, 140, 150, 158, 175, 176, 177, 179, 183, 184, 199, 212, 243, 255, 267, 269, 270, 271, 298, 320, 322, 323, 324, 379, 389, 392, 421, 436, 463, 464, 469, 471], "A": [16, 53, 73, 74, 102, 115, 139, 140, 147, 157, 158, 165, 169, 173, 175, 176, 177, 178, 179, 183, 184, 201, 216, 219, 221, 222, 228, 245, 258, 259, 266, 269, 270, 271, 273, 276, 279, 280, 281, 288, 291, 293, 296, 297, 298, 299, 300, 305, 319, 322, 323, 324, 326, 327, 331, 335, 364, 381, 392, 401, 403, 420, 421, 427, 430, 436, 437, 439, 450, 451, 454, 457, 461, 462, 464, 466, 469, 471, 472, 474], "between": [16, 42, 142, 163, 176, 183, 184, 216, 258, 270, 273, 323, 326, 354, 359, 392, 398, 402, 403, 404, 423, 424, 433, 436, 437, 448, 464, 467, 468, 469, 471, 472], "0": [16, 43, 52, 89, 104, 147, 157, 158, 160, 162, 166, 171, 183, 184, 189, 191, 194, 195, 196, 198, 199, 202, 203, 206, 212, 216, 218, 219, 233, 235, 238, 239, 240, 242, 243, 246, 247, 250, 255, 258, 263, 264, 273, 280, 288, 293, 301, 326, 337, 360, 365, 379, 398, 420, 421, 424, 426, 428, 429, 430, 434, 435, 436, 437, 438, 443, 445, 450, 454, 461, 463, 464, 466, 467, 468, 469, 470, 471, 472, 474], "100": [16, 164, 183, 184, 201, 245, 379, 419, 421, 426, 432, 437, 463, 464, 469, 471, 472, 474, 475], "klcalibr": 16, "128": [16, 157, 158, 199, 202, 203, 216, 243, 246, 247, 258, 421, 437, 464, 471], "num_quantized_bin": 16, "histogramcollector": 16, "collctor": 16, "smooth_distribut": 16, "p": [16, 458, 466], "ep": [16, 163, 438], "0001": [16, 183, 184, 424, 437, 463], "smooth": [16, 139, 140, 147, 155, 162, 183, 184, 314, 461], "discret": [16, 472], "mai": [16, 147, 282, 283, 285, 286, 287, 379, 396, 397, 403, 423, 428, 429, 435, 438, 450, 454, 462, 464, 472], "have": [16, 73, 82, 140, 147, 174, 175, 176, 197, 219, 241, 266, 269, 296, 298, 319, 322, 326, 360, 378, 379, 396, 397, 403, 404, 420, 421, 423, 426, 430, 435, 436, 437, 438, 440, 457, 459, 461, 464, 466, 469, 472, 473], "been": [16, 175, 176, 266, 296, 298, 319, 397, 399, 404, 424, 437, 438, 457, 466, 469], "normal": [16, 33, 216, 258, 271, 324, 437, 459, 466, 469, 471], "1": [16, 42, 43, 53, 73, 88, 104, 108, 112, 145, 147, 155, 157, 158, 160, 162, 163, 164, 166, 176, 183, 184, 189, 191, 194, 195, 196, 198, 199, 200, 202, 203, 206, 207, 212, 216, 217, 218, 219, 233, 235, 238, 239, 240, 242, 243, 244, 246, 247, 250, 251, 255, 258, 264, 269, 270, 271, 273, 288, 293, 298, 301, 302, 322, 323, 324, 326, 337, 360, 378, 379, 384, 396, 398, 401, 402, 404, 420, 421, 423, 424, 428, 430, 431, 434, 436, 438, 441, 443, 459, 460, 461, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474], "replac": [16, 155, 158, 271, 324, 426, 437, 448, 467], "zero": [16, 43, 149, 176, 179, 216, 258, 298, 392, 401, 461, 464, 469, 471, 472], "multipli": 16, "scale": [16, 43, 99, 140, 142, 149, 155, 157, 158, 162, 163, 212, 216, 255, 258, 464, 466, 468, 469, 471, 472], "factor": [16, 140, 466, 469, 475], "take": [16, 175, 184, 187, 188, 192, 216, 221, 231, 232, 236, 258, 296, 305, 326, 327, 360, 364, 381, 396, 398, 399, 420, 423, 424, 430, 437, 457, 461, 464, 465, 471, 472, 474], "correspond": [16, 150, 173, 176, 183, 184, 199, 243, 266, 269, 273, 319, 322, 326, 384, 392, 402, 430, 437, 461, 463, 464, 468, 469, 472], "amount": 16, "off": [16, 66, 67, 69, 397, 466], "non": [16, 297, 392, 398, 423, 472], "ref": [16, 147], "http": [16, 149, 150, 169, 175, 176, 199, 201, 243, 245, 266, 267, 269, 270, 271, 296, 298, 299, 319, 320, 322, 323, 324, 326, 360, 398, 401, 421, 423, 431, 434, 435, 437, 446, 452, 455, 467], "hanj": 16, "c": [16, 73, 201, 245, 421, 429, 434, 466, 472], "illinoi": 16, "edu": [16, 201, 245, 421], "cs412": 16, "bk3": 16, "diverg": [16, 382, 386, 404, 424, 472], "pdf": 16, "github": [16, 150, 175, 199, 243, 266, 267, 270, 271, 296, 299, 319, 320, 323, 324, 326, 360, 397, 421, 423, 427, 434, 435, 437, 446, 452, 455, 467], "com": [16, 150, 175, 199, 243, 266, 267, 270, 271, 296, 299, 319, 320, 323, 324, 326, 360, 396, 401, 421, 423, 431, 434, 435, 437, 440, 446, 467, 468, 475], "apach": [16, 435], "incub": 16, "blob": [16, 150, 175, 266, 267, 270, 271, 296, 319, 320, 323, 324, 326, 360, 437, 446], "master": [16, 175, 266, 267, 270, 271, 296, 299, 319, 320, 323, 324, 326, 360, 437, 472], "python": [16, 74, 147, 201, 220, 245, 265, 318, 379, 392, 394, 397, 398, 421, 423, 426, 429, 434, 437, 442, 448, 451, 457, 462, 471], "contrib": [16, 265, 318], "py": [16, 147, 150, 164, 176, 183, 184, 267, 269, 270, 271, 298, 320, 322, 323, 324, 379, 398, 402, 423, 426, 434, 437, 442, 444, 445, 446, 452, 455, 464, 467, 470], "microsoft": [16, 402], "onnxruntim": [16, 183, 184, 195, 201, 208, 239, 245, 252, 274, 354, 402, 420, 433, 434, 438, 463], "main": [16, 149, 176, 223, 299, 398, 420, 423, 426, 437, 444, 446, 458, 461, 464, 466], "tool": [16, 147, 262, 392, 401, 402, 437, 450, 454, 461, 462, 464], "arrai": [16, 43, 147, 216, 258, 269, 280, 322, 392, 471], "small": [16, 66, 67, 68, 367, 399, 461, 466, 472, 475], "probabl": [16, 183, 184, 386, 466], "activationoper": 18, "onnx_quant": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40], "onnx_nod": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 86, 100, 110], "removableactivationoper": 18, "remov": [18, 43, 55, 56, 59, 73, 79, 82, 83, 84, 95, 97, 139, 171, 176, 271, 324, 396, 397, 437, 450, 454, 461, 470], "qactivationoper": 18, "children": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 34, 35, 36, 38, 39], "initi": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 31, 32, 34, 35, 36, 38, 39, 42, 43, 104, 115, 147, 166, 176, 187, 188, 196, 199, 218, 231, 232, 240, 243, 297, 298, 315, 360, 376, 381, 399, 404, 421, 436, 456, 461, 464, 469, 472], "qoper": [18, 34, 183, 184, 428], "float16activationoper": 18, "float16": [18, 21, 43, 421], "argmaxoper": 19, "qargmaxoper": 19, "attentionoper": 20, "qattentionoper": 20, "qattent": 20, "binari": [21, 147, 273, 326, 429, 436, 452, 455, 467], "binaryoper": 21, "qbinaryoper": 21, "qbinari": 21, "float16binaryoper": 21, "concatoper": 22, "qconcatoper": 22, "qconcat": 22, "convoper": 23, "qconvoper": 23, "qlinearconv": 23, "direct8bit": 24, "direct8bitoper": 24, "qdirectoper": 24, "qdirect": 24, "embedlayernorm": 25, "embedlayernormalizationoper": 25, "qembedlayernormalizationoper": 25, "qembedlayernorm": 25, "gatheroper": 26, "qgatheroper": 26, "qgather": 26, "globalaveragepool": 27, "globalaveragepooloper": 27, "qglobalaveragepooloper": 27, "qlinearglobalaveragepool": 27, "gemmoper": 28, "qgemmoper": 28, "qgemm": 28, "lstmoper": 30, "matmuloper": 31, "qmatmuloper": 31, "qlinearmatmul": 31, "fusedmatmuloper": 31, "fusedmatmul": 31, "maxpooloper": 32, "qmaxpooloper": 32, "qmaxpool": 32, "batchnormalizationoper": 33, "batchnorm": [33, 61, 66, 120, 398, 469], "normalizationoper": 33, "op_registri": 34, "op_typ": [34, 139, 147, 316, 377], "qop_registri": 34, "padoper": 35, "qpadoper": 35, "qpad": 35, "averagepool": 36, "pooloper": 36, "qpooloper": 36, "qlinearaveragepool": 36, "reduceoper": 37, "resizeoper": 38, "qresizeoper": 38, "qresiz": 38, "splitoper": 39, "qsplitoper": 39, "qsplit": 39, "unari": 40, "unaryoper": 40, "q_config": [41, 157, 263, 402], "mode": [41, 42, 43, 44, 109, 155, 208, 252, 269, 315, 322, 335, 376, 389, 392, 402, 403, 423, 433, 450, 454, 464, 465, 472], "quantization_param": 41, "op_types_to_quant": 41, "fallback_list": 41, "fp32": [41, 42, 78, 130, 135, 142, 157, 158, 163, 183, 184, 187, 188, 231, 232, 262, 263, 273, 308, 315, 326, 365, 369, 376, 384, 391, 392, 401, 402, 404, 423, 430, 431, 436, 437, 438, 447, 463, 464, 465, 467, 468, 469, 470, 472, 474, 475], "add_qdq_pair_to_weight": [41, 183, 184, 464], "optypes_to_exclude_output_qu": [41, 183, 184, 464], "dedicated_qdq_pair": [41, 183, 184, 464], "smoothquant": [42, 155, 157, 162, 401, 462, 466, 473], "onnxrt": [42, 43, 199, 201, 208, 216, 243, 245, 252, 258, 273, 326, 353, 390, 402, 423, 438, 464, 475], "get_quant_dequant_output": 42, "input_data": [42, 420], "output_data": 42, "loss": [42, 166, 183, 184, 218, 264, 273, 288, 293, 301, 326, 381, 423, 424, 425, 426, 427, 436, 437, 438, 448, 460, 461, 464, 466, 469, 472, 474], "output": [42, 43, 52, 56, 58, 73, 97, 104, 109, 147, 157, 158, 173, 174, 175, 181, 183, 184, 187, 188, 221, 225, 231, 232, 262, 263, 266, 296, 319, 326, 327, 335, 360, 381, 387, 388, 392, 398, 402, 403, 424, 425, 426, 428, 430, 432, 436, 437, 439, 448, 457, 458, 460, 461, 463, 464, 466, 467, 469, 470, 471, 472, 474], "numpi": [42, 43, 66, 67, 69, 104, 147, 216, 258, 269, 280, 322, 429, 471], "7": [42, 158, 164, 183, 184, 337, 404, 419, 429, 430, 434, 437, 461, 464, 467, 469, 472, 475], "bit": [42, 157, 158, 183, 184, 378, 404, 425, 438, 462, 464, 466, 469], "execut": [42, 43, 52, 149, 164, 176, 183, 184, 298, 302, 304, 359, 360, 361, 363, 381, 384, 391, 392, 423, 424, 425, 437, 438, 442, 443, 450, 451, 454, 457, 458, 460, 461, 464, 468, 472, 475], "provid": [42, 43, 101, 104, 109, 173, 187, 188, 216, 231, 232, 258, 264, 269, 288, 293, 301, 302, 322, 327, 360, 381, 385, 387, 399, 401, 402, 403, 404, 419, 420, 423, 425, 426, 427, 433, 434, 436, 437, 438, 439, 440, 444, 448, 451, 457, 458, 461, 463, 464, 470, 472, 473, 474, 475], "make_sub_graph": 42, "opset": [42, 101, 103, 104, 184, 262, 263, 428], "ir_vers": 42, "thi": [42, 44, 85, 109, 131, 138, 142, 146, 150, 157, 158, 163, 165, 171, 173, 175, 176, 177, 178, 183, 184, 187, 188, 198, 199, 200, 201, 202, 203, 204, 206, 216, 219, 225, 226, 231, 232, 242, 243, 244, 245, 246, 247, 248, 250, 258, 266, 269, 270, 271, 273, 282, 283, 285, 286, 287, 288, 293, 296, 298, 300, 301, 302, 305, 308, 319, 322, 323, 324, 326, 327, 337, 360, 364, 369, 378, 379, 381, 391, 392, 396, 397, 398, 399, 402, 403, 404, 420, 421, 424, 425, 426, 428, 429, 430, 433, 435, 436, 437, 438, 439, 440, 442, 443, 445, 446, 448, 450, 452, 454, 455, 456, 457, 458, 461, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473], "quant_dequant_data": 42, "qtype": [42, 43, 402], "3": [42, 147, 176, 184, 201, 216, 245, 258, 269, 322, 379, 398, 399, 401, 420, 421, 424, 426, 428, 430, 431, 434, 436, 437, 438, 440, 444, 448, 450, 454, 459, 463, 464, 466, 467, 468, 469, 471, 472, 475], "scheme": [42, 43, 157, 158, 402, 403, 404, 420, 430, 448, 466, 472, 474], "sym": [42, 43, 158, 403, 404, 430, 464, 466, 474], "dequant": [42, 43, 56, 87, 90, 91, 92, 93, 95, 150, 157, 158, 392, 398, 403, 469, 470], "asym": [42, 43, 157, 158, 404, 430, 466, 474], "ortsmoothqu": 42, "fake": [42, 112, 155, 158, 162, 378, 437, 464, 466, 469], "channel": [42, 43, 142, 155, 158, 162, 163, 171, 174, 175, 183, 184, 212, 216, 255, 258, 296, 402, 404, 433, 434, 440, 442, 447, 461, 466, 471, 475], "For": [42, 158, 162, 173, 174, 175, 184, 201, 216, 245, 258, 270, 271, 273, 296, 299, 323, 324, 326, 327, 360, 396, 398, 400, 402, 404, 424, 425, 426, 428, 430, 433, 440, 442, 443, 445, 448, 461, 465, 469, 470, 472, 474, 475], "more": [42, 147, 155, 162, 175, 216, 258, 296, 399, 400, 401, 403, 421, 424, 426, 428, 431, 433, 434, 437, 438, 440, 448, 452, 455, 459, 460, 461, 465, 466, 469, 472, 473, 475], "detail": [42, 155, 162, 173, 216, 258, 392, 393, 396, 397, 401, 403, 404, 424, 430, 431, 432, 436, 437, 438, 440, 448, 457, 461, 467, 468, 470, 472, 473], "pleas": [42, 149, 150, 155, 162, 169, 175, 176, 183, 184, 199, 200, 201, 204, 243, 244, 245, 248, 296, 298, 299, 326, 360, 379, 398, 399, 400, 401, 402, 419, 421, 425, 426, 428, 434, 436, 438, 440, 441, 445, 448, 461, 464, 465, 467, 468, 469, 473], "refer": [42, 149, 150, 155, 162, 169, 175, 176, 179, 183, 184, 199, 243, 266, 267, 273, 296, 298, 299, 319, 320, 326, 360, 379, 398, 402, 403, 419, 420, 421, 423, 425, 426, 428, 432, 434, 435, 436, 437, 438, 440, 445, 448, 459, 463, 467, 471, 472], "accur": [42, 149, 155, 162, 466, 469], "effici": [42, 155, 162, 399, 420, 424, 440, 460, 462, 466, 469, 472], "post": [42, 96, 97, 149, 155, 162, 176, 184, 187, 188, 231, 232, 360, 396, 401, 402, 403, 423, 425, 426, 428, 433, 434, 440, 446, 457, 461, 462, 466, 469, 470, 472], "train": [42, 55, 79, 149, 155, 162, 165, 176, 183, 184, 187, 188, 199, 201, 216, 226, 231, 232, 243, 245, 258, 259, 275, 298, 318, 360, 384, 399, 401, 402, 403, 409, 421, 423, 424, 425, 428, 433, 438, 440, 446, 457, 460, 461, 462, 466, 468, 469, 472, 474], "larg": [42, 155, 162, 401, 420, 424, 437, 461, 462, 466, 469, 475], "languag": [42, 155, 162, 266, 319, 396, 428, 461, 462, 466, 469], "2": [42, 43, 52, 73, 104, 108, 155, 158, 160, 162, 164, 175, 176, 183, 184, 200, 217, 244, 269, 271, 273, 298, 305, 322, 324, 326, 337, 364, 379, 398, 402, 420, 421, 423, 424, 430, 433, 434, 435, 436, 438, 459, 461, 464, 466, 467, 468, 469, 471, 472, 473], "spiq": [42, 155, 162, 469], "free": [42, 155, 162, 176, 187, 188, 231, 232, 360, 396, 401, 446, 451, 459, 468, 469], "per": [42, 43, 155, 158, 162, 164, 183, 184, 217, 386, 402, 404, 420, 465, 466, 475], "we": [42, 43, 66, 67, 69, 73, 85, 142, 155, 162, 163, 164, 173, 175, 176, 183, 184, 198, 217, 219, 242, 266, 269, 319, 322, 367, 396, 398, 402, 403, 404, 420, 423, 426, 428, 430, 436, 437, 444, 445, 448, 452, 455, 457, 458, 459, 460, 461, 463, 464, 466, 467, 468, 469, 470, 472, 473], "onli": [42, 52, 62, 69, 85, 108, 114, 142, 155, 158, 162, 163, 164, 175, 176, 183, 184, 199, 217, 219, 223, 243, 263, 275, 296, 298, 309, 360, 370, 378, 379, 392, 401, 402, 403, 404, 419, 420, 423, 424, 426, 429, 430, 437, 438, 445, 458, 461, 462, 463, 464, 469, 470, 472, 473, 474], "inplac": [42, 155], "mean": [42, 155, 175, 176, 183, 184, 212, 216, 255, 258, 271, 273, 296, 308, 324, 326, 369, 398, 403, 404, 420, 423, 426, 430, 436, 437, 443, 461, 464, 469, 471, 472, 474], "weight": [42, 43, 59, 60, 121, 140, 142, 147, 150, 155, 157, 158, 163, 169, 174, 175, 176, 177, 183, 184, 263, 296, 298, 315, 326, 360, 367, 376, 378, 392, 393, 401, 402, 403, 404, 423, 425, 430, 432, 437, 459, 461, 463, 464, 469, 470, 472, 473, 474], "chang": [42, 95, 142, 155, 163, 176, 178, 183, 184, 298, 300, 367, 392, 397, 403, 420, 426, 429, 435, 437, 440, 450, 451, 454, 457, 461, 470, 471, 472], "you": [42, 155, 183, 184, 197, 199, 241, 243, 298, 326, 360, 397, 398, 403, 420, 421, 423, 426, 434, 435, 436, 438, 440, 442, 443, 445, 450, 454, 457, 458, 461, 464, 467, 468, 469, 470, 473], "can": [42, 142, 150, 155, 163, 173, 174, 175, 176, 178, 183, 184, 187, 188, 198, 201, 216, 217, 219, 231, 232, 242, 245, 258, 269, 271, 273, 296, 298, 300, 322, 324, 326, 327, 337, 360, 381, 392, 398, 399, 401, 402, 403, 404, 419, 420, 421, 423, 424, 425, 426, 428, 430, 433, 434, 436, 437, 438, 439, 440, 441, 442, 444, 445, 446, 448, 450, 451, 452, 454, 455, 457, 458, 459, 460, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475], "recov": [42, 155, 392, 402, 425, 469], "helper": [43, 44, 109, 115, 147, 157, 199, 200, 201, 215, 243, 244, 245, 257, 261, 262, 263, 335, 390], "dtype_to_nam": 43, "dtype_map": 43, "dtype": [43, 101, 104, 183, 184, 202, 203, 212, 216, 246, 247, 255, 258, 403, 404, 421, 423, 428, 430, 440, 463, 464, 469, 470, 471, 474], "its": [43, 59, 95, 147, 150, 173, 176, 184, 195, 201, 216, 239, 245, 258, 261, 267, 268, 298, 305, 320, 321, 364, 396, 421, 424, 435, 436, 438, 448, 450, 454, 457, 458, 461, 466, 468, 471, 472], "string": [43, 44, 115, 147, 149, 164, 166, 173, 175, 176, 177, 178, 179, 180, 183, 184, 201, 218, 223, 245, 259, 264, 266, 269, 275, 276, 277, 279, 280, 288, 293, 296, 297, 298, 299, 300, 301, 319, 322, 331, 335, 384, 389, 392, 436, 469, 471], "represent": [43, 396, 398, 425, 461, 464], "quanttyp": [43, 378], "repres": [43, 175, 176, 177, 179, 201, 206, 245, 250, 269, 271, 273, 322, 324, 326, 396, 404, 421, 428, 461, 464, 472], "make_quant_nod": 43, "make": [43, 104, 142, 163, 175, 176, 178, 197, 241, 296, 298, 300, 392, 396, 397, 402, 403, 419, 420, 430, 436, 437, 445, 450, 454, 457, 464, 465, 466, 468, 469, 472], "quantizelinear": 43, "make_dquant_nod": 43, "axi": [43, 184], "dequantizelinear": 43, "is_b_transpos": 43, "wheter": 43, "inuput": 43, "b": [43, 73, 199, 243, 421, 436, 461, 466, 469, 472], "transpos": [43, 72, 175, 212, 216, 258, 262, 296, 471], "split_shared_bia": 43, "share": [43, 81, 97, 108, 140, 158, 429, 430, 469, 472], "float_to_float16": 43, "float_to_bfloat16": 43, "bfloat16": [43, 438, 440, 448, 465], "cast_tensor": 43, "tensorproto": [43, 104], "remove_init_from_model_input": 43, "collate_pr": 43, "result": [43, 147, 150, 157, 212, 216, 255, 258, 266, 269, 270, 271, 273, 319, 322, 323, 324, 326, 340, 360, 367, 381, 391, 392, 396, 399, 401, 420, 423, 424, 426, 433, 435, 436, 437, 445, 446, 457, 458, 459, 461, 462, 464, 466, 468, 469, 470, 471, 472, 473, 475], "quantize_data_with_scale_zero": 43, "zero_point": 43, "point": [43, 212, 255, 270, 271, 280, 305, 323, 324, 364, 392, 436, 457, 464, 469, 471, 472], "To": [43, 269, 322, 337, 397, 403, 404, 421, 423, 426, 438, 441, 444, 450, 452, 454, 455, 463, 465, 466, 467, 469, 472, 474], "pack": [43, 60], "comput": [43, 104, 150, 157, 266, 267, 270, 271, 273, 319, 320, 323, 324, 326, 381, 392, 420, 425, 428, 436, 437, 438, 440, 451, 461, 462, 464, 466, 469, 472], "linear": [43, 149, 162, 171, 173, 174, 175, 176, 179, 183, 184, 296, 398, 424, 428, 437, 461, 469, 472], "transform": [43, 49, 142, 144, 145, 146, 149, 154, 176, 199, 200, 201, 202, 203, 204, 206, 208, 210, 243, 244, 245, 246, 247, 248, 250, 252, 254, 265, 318, 398, 399, 401, 421, 424, 425, 426, 427, 431, 437, 440, 445, 446, 447, 448, 461, 462, 465, 466, 469, 470, 472, 474, 475], "when": [43, 52, 63, 69, 147, 174, 176, 179, 183, 184, 199, 200, 208, 216, 243, 244, 252, 258, 267, 297, 298, 320, 360, 381, 396, 399, 403, 420, 421, 437, 448, 450, 451, 454, 458, 461, 464, 466, 469, 471, 472], "uint8": [43, 158, 212, 255, 269, 317, 322, 378, 402, 421, 430, 463, 464, 471, 474], "rmin": [43, 464], "rmax": [43, 464], "m": [43, 150, 175, 183, 184, 296, 424, 434, 440, 442, 445, 448, 452, 455, 461, 475], "where": [43, 183, 184, 269, 273, 322, 326, 378, 392, 404, 423, 424, 450, 454, 458, 469, 470], "max": [43, 103, 142, 158, 163, 183, 184, 216, 258, 270, 271, 305, 323, 324, 364, 392, 401, 423, 434, 437, 461, 464, 469, 471, 472], "ab": [43, 149, 158, 169, 176, 298, 464, 469], "np": [43, 216, 258, 305, 364, 426, 471, 472], "calculate_scale_zp": 43, "quantize_rang": 43, "calcul": [43, 59, 157, 169, 175, 179, 184, 202, 203, 246, 247, 270, 271, 296, 298, 308, 323, 324, 369, 382, 392, 421, 436, 437, 448, 459, 461, 464, 468, 469, 472, 474], "quantize_data": 43, "add": [43, 51, 63, 108, 118, 147, 179, 183, 184, 199, 201, 223, 243, 245, 297, 315, 376, 392, 397, 398, 404, 420, 421, 426, 428, 430, 436, 437, 452, 455, 468, 470, 472, 473], "necessari": [43, 396, 399, 403, 439, 458, 461, 468, 472], "intermedi": [43, 150, 166, 183, 184, 218, 398, 433, 464], "trasnform": 43, "full": [43, 199, 200, 201, 243, 244, 245, 392, 401, 421, 423, 429, 435, 458, 461, 467], "equat": [43, 271, 273, 324, 326, 464, 469], "r": [43, 142, 163, 423, 434, 458, 464, 475], "": [43, 104, 142, 147, 163, 173, 174, 175, 176, 180, 181, 183, 184, 198, 201, 215, 216, 217, 219, 221, 228, 242, 245, 257, 258, 271, 296, 298, 324, 326, 327, 331, 360, 389, 392, 396, 399, 403, 404, 423, 424, 426, 428, 430, 433, 437, 438, 445, 448, 450, 454, 457, 460, 461, 462, 463, 464, 466, 467, 468, 469, 472, 473, 474, 475], "q": [43, 106, 108, 130, 403, 466, 469], "z": [43, 424, 469], "real": [43, 202, 219, 246, 403, 426, 462, 464], "origin": [43, 155, 157, 173, 176, 179, 184, 199, 216, 217, 243, 258, 282, 283, 285, 286, 287, 297, 298, 317, 365, 378, 392, 397, 421, 445, 461, 464, 471, 472, 474], "quantize_data_per_channel": 43, "dequantize_data_with_scale_zero": 43, "tensor_valu": 43, "scale_valu": 43, "zo_valu": 43, "sacal": 43, "dequantize_data": 43, "valueinfo": 43, "tensor_nam": [43, 147], "new_dtyp": 43, "cast": [43, 56, 465, 471], "info": [43, 157, 158, 175, 179, 214, 219, 224, 296, 331, 388, 392, 398, 423, 439], "quantizedvalu": 43, "new_quantized_nam": 43, "scale_nam": 43, "zero_point_nam": 43, "quantized_value_typ": 43, "quint8": 43, "linearli": 43, "intial": 43, "quantizediniti": 43, "quantized_data": 43, "quantizationmod": 43, "quantizedvaluetyp": 43, "quantformat": 43, "quantize_nparrai": 43, "arr": [43, 392], "low": [43, 187, 188, 202, 203, 231, 232, 246, 247, 264, 274, 301, 327, 402, 403, 419, 421, 426, 437, 438, 462, 464, 466, 469, 472], "high": [43, 202, 203, 246, 247, 421, 423, 434, 462, 472], "attribute_to_kwarg": 43, "attribut": [43, 82, 103, 104, 147, 157, 173, 176, 181, 184, 392, 402, 420, 430, 432, 437, 463, 474], "kwarg": [43, 104, 121, 122, 123, 124, 125, 126, 127, 128, 131, 132, 133, 134, 136, 137, 171, 183, 184, 201, 214, 216, 221, 224, 245, 258, 314, 316, 326, 327, 328, 330, 332, 334, 335, 336, 360, 375, 377, 379, 381, 387, 388, 391, 392, 420], "make_nod": 43, "find_by_nam": 43, "item_list": 43, "find": [43, 66, 67, 69, 104, 147, 273, 280, 305, 326, 364, 392, 402, 423, 443, 450, 454, 457, 458, 468, 470, 472], "item": [43, 179, 181, 183, 184, 215, 257, 297, 315, 376, 426, 461, 469, 472], "trt_env_setup": 43, "environ": [43, 164, 217, 396, 419, 450, 454, 457, 472], "variabl": [43, 164, 177, 183, 184, 201, 217, 245, 305, 364, 378, 434, 461, 472], "tensorrt": [43, 438, 464], "to_numpi": 43, "get_ops_recurs": 44, "prefix": [44, 147, 148, 156, 164, 440, 445, 470], "graph_info": 44, "templateadaptor": 44, "tampl": 44, "dictionari": [44, 66, 67, 69, 147, 148, 150, 157, 181, 183, 184, 215, 257, 269, 276, 279, 281, 322, 392], "yaml": [44, 179, 181, 184, 187, 188, 199, 201, 217, 231, 232, 243, 245, 259, 264, 275, 276, 277, 279, 288, 293, 301, 302, 391, 392, 402, 404, 432, 436, 437, 459, 463, 470, 471], "file": [44, 104, 147, 157, 161, 179, 180, 183, 184, 187, 188, 199, 200, 201, 204, 215, 216, 222, 225, 231, 232, 243, 244, 245, 248, 257, 258, 259, 264, 269, 275, 276, 277, 279, 288, 293, 297, 299, 301, 302, 322, 327, 337, 343, 344, 348, 360, 391, 392, 399, 402, 403, 404, 426, 429, 432, 435, 436, 437, 439, 443, 452, 455, 456, 457, 458, 459, 463, 464, 466, 470, 471], "pytorchadaptor": 44, "api": [44, 69, 74, 109, 149, 227, 264, 269, 301, 314, 315, 322, 326, 360, 375, 376, 379, 392, 397, 398, 405, 407, 411, 414, 417, 423, 428, 433, 437, 442, 446, 447, 448, 467, 468, 472, 476], "pytorch_ipexadaptor": 44, "intel": [44, 175, 220, 223, 260, 265, 272, 273, 296, 299, 307, 313, 318, 325, 326, 338, 360, 368, 374, 394, 396, 397, 399, 400, 402, 403, 404, 421, 422, 424, 425, 427, 428, 430, 431, 435, 438, 439, 440, 445, 447, 448, 459, 460, 461, 462, 464, 465, 467, 469, 470, 472, 473, 474], "extens": [44, 392, 399, 401, 402, 430, 433, 434, 437, 438, 439, 441, 446, 447, 448, 452, 455, 456, 461, 462, 464, 469, 472, 473, 474], "ipex": [44, 152, 157, 183, 184, 433, 437, 438, 442, 446, 447, 469], "pytorch_fxadaptor": 44, "fx": [44, 157, 183, 309, 370, 433, 438, 446, 447, 462, 464, 465], "graph": [44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 116, 129, 131, 135, 138, 141, 142, 144, 145, 146, 147, 173, 198, 242, 264, 328, 335, 359, 398, 402, 421, 424, 426, 432, 439, 440, 464, 465, 470], "pytorchweightonlyadaptor": 44, "querybackendcap": [45, 402, 403], "tensorflowadaptor": 46, "stock": [46, 446, 469], "spr": 46, "tensorflow_itexadaptor": 46, "itex": [46, 108, 183, 184, 262, 438, 464, 469], "tensorflowqueri": [46, 402], "performance_onli": [46, 47, 48, 106, 130, 135, 146, 183, 437], "itex_mod": [46, 47, 88, 106, 130, 135], "quant_mod": [46, 315, 376, 403, 404], "graphconvert": 47, "qt_config": 47, "recip": [47, 173, 183, 184, 264, 301, 437, 466, 469, 472], "int8_sequ": 47, "fp32_op": [47, 49, 106], "bf16_op": [47, 49, 106, 403, 465], "data_load": [47, 48, 402], "fake_qu": [47, 87, 106, 130, 135], "qdq_enabl": 47, "new_api": [47, 48, 70, 71, 76, 78, 91, 98, 130, 135, 142], "use_bf16": [47, 48, 183, 463], "without": [48, 89, 147, 176, 216, 258, 298, 317, 378, 396, 424, 426, 437, 448, 461, 462, 463, 472, 473], "graphconverterwithoutcalib": 48, "recover_config": 48, "rewrit": [49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 105, 106, 107, 108, 228], "bf16convert": [49, 465], "biasadd": [51, 58, 63, 65, 108, 430], "convertaddtobiasaddoptim": 51, "conv2d": [51, 58, 59, 60, 64, 65, 70, 124, 134, 142, 149, 403, 404, 423, 428, 430, 469, 470, 472], "addv2": [51, 68, 430], "layout": 52, "convertlayoutoptim": 52, "optim": [52, 73, 74, 78, 79, 115, 117, 173, 176, 180, 183, 184, 220, 226, 228, 264, 265, 281, 301, 305, 318, 364, 381, 382, 389, 392, 399, 401, 419, 423, 424, 425, 426, 430, 431, 433, 434, 437, 439, 440, 442, 444, 445, 448, 451, 461, 462, 463, 464, 465, 468, 469, 470, 472, 474], "nchw": [52, 212], "nhwc": [52, 212], "It": [52, 165, 175, 187, 188, 225, 231, 232, 271, 273, 280, 296, 301, 308, 324, 326, 327, 360, 365, 369, 381, 402, 403, 404, 423, 424, 437, 443, 446, 451, 457, 458, 461, 464, 467, 468, 472, 474], "exist": [52, 164, 181, 217, 335, 428, 436, 444, 472], "4": [52, 157, 158, 164, 175, 176, 183, 184, 208, 211, 212, 216, 252, 255, 258, 266, 267, 269, 319, 320, 322, 378, 379, 396, 402, 404, 419, 426, 427, 430, 433, 434, 436, 437, 445, 461, 464, 466, 469, 471, 472, 475], "abov": [52, 402, 403, 404, 424, 461, 464, 469, 472], "graph_def": [52, 147, 262, 327, 335, 359, 360], "leakyrelu": [53, 469], "convertleakyreluoptim": 53, "below": [53, 65, 73, 183, 184, 302, 326, 360, 397, 398, 401, 402, 403, 404, 420, 423, 424, 426, 432, 436, 440, 442, 450, 451, 454, 457, 459, 460, 461, 463, 464, 466, 468, 469, 470, 472, 473], "subgraph": [53, 65, 104, 156, 472], "mul": [53, 64, 65, 68, 162, 428, 469], "maximum": [53, 175, 176, 183, 184, 199, 216, 243, 258, 267, 298, 305, 320, 364, 404, 421, 423, 437, 461, 464, 471], "note": [53, 175, 269, 309, 322, 370, 399, 403, 404, 420, 423, 426, 428, 430, 434, 437, 442, 445, 450, 454, 457, 461, 464, 466, 469, 470, 472, 473, 474], "coeffici": [53, 461], "less": [53, 147, 183, 184, 392, 419, 424, 437, 461], "than": [53, 147, 199, 216, 243, 258, 392, 399, 401, 419, 421, 432, 459, 460, 461, 464, 466, 468, 471, 472], "convers": [53, 184, 275, 402, 403, 437, 438, 464, 465, 469], "valid": [53, 66, 67, 104, 176, 179, 183, 184, 201, 245, 269, 297, 298, 322, 335, 397, 399, 401, 402, 421, 423, 424, 427, 430, 433, 435, 437, 448, 461, 464, 467], "nan": 54, "random": [54, 147, 183, 184, 212, 216, 255, 258, 265, 281, 305, 307, 318, 364, 368, 392, 397, 399, 437, 463, 471, 474], "convertnantorandom": 54, "const": [54, 55, 62, 63, 66, 67, 69, 81, 97], "consist": [54, 62, 397, 398, 469, 472], "placehold": [55, 197, 241], "convertplaceholdertoconst": 55, "rerewrit": 56, "dequantizecastoptim": 56, "b16": 56, "dilat": 57, "contract": 57, "dilatedcontract": 57, "spacetobatchnd": 57, "batchtospacend": 57, "pattern": [57, 58, 60, 77, 95, 106, 107, 108, 130, 135, 157, 168, 170, 173, 174, 176, 177, 180, 183, 184, 201, 245, 265, 286, 287, 289, 294, 298, 315, 318, 376, 402, 421, 430, 433, 437, 458, 460, 463, 469, 472, 475], "inject": [58, 437], "dummi": [58, 173, 202, 203, 246, 247, 273, 326, 401, 421, 431, 436, 437], "injectdummybiasaddoptim": 58, "fusion": [58, 60, 69, 77, 108, 125, 126, 127, 130, 131, 132, 136, 398, 402, 430], "expanddim": 59, "expanddimsoptim": 59, "next": [59, 192, 236, 379, 399, 403, 404, 420, 463, 466, 472], "featch": 60, "reshap": [60, 66, 67, 72, 469], "fetchweightfromreshapeoptim": 60, "handl": [60, 147, 155, 162, 388, 398, 400, 420, 469], "fold": [61, 62, 263, 430, 469], "foldbatchnormnodesoptim": 61, "graphfoldconstantoptim": 62, "sequenc": [62, 104, 174, 175, 183, 184, 199, 215, 216, 243, 257, 258, 267, 271, 296, 320, 324, 402, 421, 430, 461, 466, 471], "self": [62, 173, 183, 184, 337, 402, 403, 420, 421, 433, 436, 468, 470, 472], "supported_op_typ": 62, "fusebiasaddandaddoptim": 63, "second": [63, 174, 183, 184, 199, 243, 365, 392, 423, 437, 450, 454, 458, 466, 469, 472, 474], "columnwis": 64, "fusecolumnwisemuloptim": 64, "depthwiseconv2dn": [64, 70, 124, 134, 430], "math": [65, 464], "fuseconvwithmathoptim": 65, "elimin": 65, "sub": [65, 157, 164, 173, 217, 399, 472], "realdiv": [65, 68], "decompos": [66, 67], "fusedecomposedbnoptim": 66, "input_graph_def": [66, 67, 69], "node_name_from_input": [66, 67, 69], "node_nam": [66, 67, 69, 147, 335, 345, 403], "strip": [66, 67, 69, 82, 83, 147, 470], "port": [66, 67, 69], "other": [66, 67, 69, 155, 162, 198, 242, 271, 324, 335, 396, 397, 398, 403, 404, 423, 430, 433, 435, 437, 439, 459, 461, 464, 469, 471, 472, 475], "underli": [66, 67, 69], "node_from_map": [66, 67, 69], "node_map": [66, 67, 69], "pull": [66, 67, 69], "def": [66, 67, 69, 187, 188, 231, 232, 360, 379, 381, 398, 402, 420, 421, 424, 425, 426, 436, 437, 464, 469, 470, 472], "entri": [66, 67, 69, 150, 223, 264, 302, 392, 435], "index": [66, 67, 69, 104, 164, 184, 192, 197, 201, 236, 241, 245, 280, 392, 421, 436, 458, 469], "everi": [66, 67, 69, 175, 176, 183, 184, 296, 298, 402, 420, 445, 450, 454, 472], "identifi": [66, 67, 69, 269, 322, 335, 461], "want": [66, 67, 69, 173, 183, 184, 197, 199, 241, 243, 298, 365, 381, 398, 402, 420, 421, 426, 437, 445, 457, 458, 459, 468, 470, 472], "nodedef": [66, 67, 69], "rais": [66, 67, 69, 104, 175, 176, 179, 269, 296, 297, 298, 322, 327, 379, 401, 461, 462], "valueerror": [66, 67, 69, 269, 322, 379, 429], "If": [66, 67, 69, 73, 158, 164, 183, 184, 187, 188, 201, 216, 231, 232, 245, 258, 297, 327, 360, 379, 381, 397, 398, 403, 419, 420, 421, 426, 434, 435, 436, 437, 443, 451, 452, 455, 457, 459, 464, 468, 469, 470, 471, 472], "isn": [66, 67, 69], "t": [66, 67, 69, 142, 163, 175, 183, 184, 216, 219, 258, 271, 324, 398, 402, 423, 424, 426, 437, 438, 458, 461, 464, 472, 474], "present": [66, 67, 69, 423, 462, 469], "values_from_const": [66, 67, 69], "node_def": [66, 67, 69], "extract": [66, 67, 69, 147, 173, 201, 245, 317, 378, 421], "ha": [66, 67, 69, 73, 149, 175, 176, 217, 266, 296, 298, 319, 379, 397, 399, 402, 403, 404, 420, 428, 433, 437, 438, 443, 457, 461, 463, 464, 465, 468, 469, 472], "access": [66, 67, 69, 181, 184, 387, 392, 452, 455], "valid_reshape_input": [66, 67], "reshape_in0_ndef": [66, 67], "reshape_in1_ndef": [66, 67], "ar": [66, 67, 104, 157, 175, 176, 183, 184, 199, 216, 243, 258, 269, 273, 280, 296, 297, 298, 302, 304, 305, 322, 326, 361, 363, 364, 378, 379, 384, 391, 392, 396, 397, 398, 399, 402, 403, 420, 421, 423, 424, 425, 426, 427, 428, 430, 431, 432, 433, 434, 435, 436, 437, 438, 440, 443, 445, 448, 451, 457, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474], "bypass_reshap": [66, 67], "input_node_map": [66, 67], "input_nam": [66, 67, 101, 141, 184, 262, 263, 428], "get_const_dim_count": [66, 67], "dimens": [66, 67, 104, 191, 216, 235, 258, 421, 424, 471], "instancenorm": [67, 469], "fusedecomposedinoptim": 67, "gelu": 68, "fusegeluoptim": 68, "sqrt": [68, 423], "erf": 68, "samll": 69, "layernorm": [69, 469], "fuselayernormoptim": 69, "remap": 69, "smaller": [69, 216, 258, 424, 437, 461, 471], "case": [69, 73, 158, 164, 184, 198, 215, 216, 217, 242, 257, 258, 264, 288, 293, 301, 337, 404, 420, 424, 425, 426, 430, 432, 436, 441, 445, 457, 458, 459, 461, 462, 464, 466, 467, 471, 473, 474, 475], "fusedbatcnormv3": 69, "And": [69, 398, 419, 437, 443, 469], "further": [69, 184, 396, 438, 439, 440, 442, 451, 457, 464], "restrict": [69, 183, 184, 461, 468], "2d": [69, 469], "3d": [69, 462, 469], "kera": [69, 115, 173, 179, 184, 201, 208, 223, 245, 252, 330, 335, 403, 420, 426, 439, 447, 448], "fusepadwithconv2doptim": 70, "excluded_op_nam": [70, 71, 180, 183, 184, 437, 461], "cfg": [70, 71, 157, 180, 315, 376, 384, 403, 404], "itex_qdq_mod": [70, 71], "conv3d": [70, 124], "fusepadwithfp32conv2doptim": 71, "fusetransposereshapeoptim": 72, "cse": [73, 97], "graphcseoptim": 73, "introduc": [73, 397, 402, 403, 404, 430, 437, 464, 466, 467, 469, 473], "ident": [73, 79, 174, 396, 424], "three": [73, 179, 199, 243, 304, 361, 363, 398, 402, 403, 434, 438, 451, 460, 464, 465, 468, 469, 470], "d": [73, 157, 424, 432, 458, 475], "those": [73, 308, 369, 392, 423, 424, 425, 432, 437, 438, 460, 461, 464, 472], "child": [73, 149, 470], "b1": 73, "c1c2": 73, "d1": [73, 392], "c1": 73, "c2": 73, "memori": [73, 264, 288, 293, 301, 337, 392, 420, 425, 437, 438, 440, 459, 461, 464, 466, 469, 472, 475], "bound": [73, 164, 216, 258, 269, 305, 322, 364, 436, 471], "like": [73, 95, 97, 147, 173, 179, 184, 187, 188, 189, 201, 231, 232, 233, 245, 264, 273, 298, 301, 302, 326, 335, 360, 381, 397, 398, 399, 402, 403, 423, 424, 425, 433, 445, 460, 461, 464, 466, 467, 469, 472], "relu": [73, 77, 108, 398, 430, 469, 470], "relu6": [73, 430], "updat": [73, 157, 169, 175, 179, 298, 326, 360, 389, 429, 436, 437, 443, 448, 451, 461, 469, 472, 473], "graphdef": [73, 147, 335, 359, 439], "grappler": [74, 430], "grappleroptim": 74, "input_output_nam": 74, "opt_cfg": 74, "wrapper": [74, 101, 102, 103, 104, 121, 139, 148, 166, 198, 216, 218, 219, 221, 222, 228, 242, 258, 269, 273, 322, 326, 331, 335, 465], "leverag": [74, 399, 401, 424, 428, 440, 457, 460, 464, 466, 472], "built": [74, 185, 186, 190, 195, 199, 200, 205, 207, 209, 210, 212, 213, 216, 221, 223, 229, 230, 234, 237, 239, 243, 244, 249, 251, 253, 254, 255, 256, 258, 302, 326, 329, 337, 360, 381, 399, 402, 421, 426, 437, 450, 454, 459, 464, 471, 472, 474], "convert_add_to_biasadd": [75, 86, 110], "convert_layout": [75, 86, 110], "convert_leakyrelu": [75, 86, 110], "convert_nan_to_random": [75, 86, 110], "convert_placeholder_to_const": [75, 86, 110], "dequantize_cast_optim": [75, 86, 110], "dilated_contract": [75, 86, 110], "dummy_biasadd": [75, 86, 110], "expanddims_optim": [75, 86, 110], "fetch_weight_from_reshap": [75, 86, 110], "fold_batch_norm": [75, 86, 110], "fold_const": [75, 86, 110], "fuse_biasadd_add": [75, 86, 110], "fuse_column_wise_mul": [75, 86, 110], "fuse_conv_with_math": [75, 86, 110], "fuse_decomposed_bn": [75, 86, 110], "fuse_decomposed_in": [75, 86, 110], "fuse_gelu": [75, 86, 110], "fuse_layer_norm": [75, 86, 110], "fuse_pad_with_conv": [75, 86, 110], "fuse_pad_with_fp32_conv": [75, 86, 110], "fuse_reshape_transpos": [75, 86, 110], "graph_cse_optim": [75, 86, 110], "grappler_pass": [75, 86, 110], "insert_print_nod": [75, 86, 110], "move_squeeze_after_relu": [75, 86, 110], "pre_optim": [75, 86, 110], "remove_training_nod": [75, 86, 110], "rename_batch_norm": [75, 86, 110], "split_shared_input": [75, 86, 110], "strip_equivalent_nod": [75, 86, 110, 147], "strip_unused_nod": [75, 86, 110, 147], "switch_optim": [75, 86, 110], "insert": [76, 104, 106, 108, 112, 145, 155, 162, 398, 403, 420, 433, 437, 440, 461, 464, 465, 469, 470], "print": [76, 149, 150, 173, 273, 326, 379, 392, 426, 436, 437, 461, 469, 472], "insertprintminmaxnod": 76, "pre_node_nam": 76, "post_node_nam": 76, "pass": [76, 147, 164, 326, 360, 392, 398, 402, 419, 421, 424, 425, 426, 432, 436, 437, 458, 461, 463, 464, 465, 469, 474], "sampl": [76, 158, 183, 184, 192, 197, 199, 200, 201, 212, 216, 236, 241, 243, 244, 245, 255, 258, 273, 280, 305, 326, 364, 399, 420, 421, 427, 433, 458, 464, 471, 472, 474, 475], "move": [77, 398, 463, 466, 467], "squeez": [77, 398], "movesqueezeafterreluoptim": 77, "match": [77, 101, 173, 269, 270, 322, 323, 424, 458, 466], "pre": [78, 115, 173, 187, 188, 199, 231, 232, 243, 327, 360, 381, 421, 424, 425, 437, 445, 461, 462, 464, 466, 470, 472], "entranc": [78, 190], "preoptim": 78, "removetrainingnodesoptim": 79, "protected_nod": 79, "types_to_splic": 79, "checknumer": 79, "stopgradi": 79, "renam": [80, 467], "fusedbatchnorm": 80, "fusedbatchnormv2": 80, "renamebatchnormoptim": 80, "splitsharedinputoptim": 81, "equival": [82, 469], "stripequivalentnodesoptim": 82, "output_node_nam": [82, 83, 130, 131, 135, 147], "same": [82, 140, 147, 158, 176, 184, 199, 216, 243, 258, 269, 322, 392, 402, 404, 419, 420, 421, 424, 426, 430, 437, 441, 445, 450, 454, 461, 463, 464, 466, 469, 470, 471, 472], "unus": [83, 147], "stripunusednodesoptim": 83, "input_node_nam": [83, 130, 135, 147], "switch": [84, 440, 470], "switchoptim": 84, "condit": [84, 199, 200, 201, 216, 243, 244, 245, 258, 304, 361, 363, 421, 435, 471, 472], "graphrewriterbas": 85, "abstract": [85, 165, 216, 258, 259, 264, 301, 402, 404, 432], "freeze_fake_qu": [86, 94, 110], "freeze_valu": [86, 94, 110], "freeze_value_without_calib": [86, 94, 110], "fuse_conv_redundant_dequant": [86, 94, 110], "fuse_conv_requant": [86, 94, 110], "fuse_matmul_redundant_dequant": [86, 94, 110], "fuse_matmul_requant": [86, 94, 110], "meta_op_optim": [86, 94, 110], "post_hostconst_convert": [86, 94, 110], "post_quantized_op_cs": [86, 94, 110], "rnn_convert": [86, 94, 110], "scale_propag": [86, 94, 110], "onnx_graph": [86, 100, 110], "onnx_schema": [86, 100, 110], "tf2onnx_util": [86, 100, 110], "insert_qdq_pattern": [86, 105, 110], "merge_duplicated_qdq": [86, 105, 110], "share_qdq_y_pattern": [86, 105, 110], "freez": [87, 88, 89, 440, 461], "fakequ": 87, "freezefakequantopoptim": 87, "follow": [87, 109, 174, 201, 245, 266, 269, 319, 322, 396, 397, 398, 399, 402, 403, 404, 420, 421, 424, 425, 426, 430, 434, 435, 436, 437, 438, 439, 440, 441, 442, 450, 454, 460, 461, 463, 464, 469, 470, 472], "freezevaluetransform": 88, "max_min_data": [88, 89], "postfix": [88, 89], "tensor_data": [88, 392, 393], "th": [88, 89], "gpu": [88, 89, 96, 183, 184, 401, 419, 433, 437, 438, 442, 448, 457, 463, 464], "freezevaluewithoutcalibtransform": 89, "95": [89, 273, 326, 436, 469, 475], "quantizedconv": [90, 91], "quantizeddeconv": 90, "redund": [90, 92], "fuseconvredundantdequantizetransform": 90, "cpu": [90, 91, 92, 93, 183, 184, 392, 401, 403, 419, 433, 437, 438, 440, 442, 448, 457, 462, 463, 464, 465, 470], "_quantizedconv": 90, "_quantizeddeconv": 90, "successor": [90, 91, 92, 93], "requant": [91, 93, 470], "fuseconvrequantizetransform": 91, "quantizedmatmul": [92, 93], "fusematmulredundantdequantizetransform": 92, "_quantizedmatmul": [92, 93], "fusematmulrequantizedequantizetransform": 93, "quantizedmatmulwithbiasanddequant": 93, "fusematmulrequantizetransform": 93, "fusematmulrequantizedequantizenewapitransform": 93, "fusematmulrequantizenewapitransform": 93, "newapi": 93, "meta": [95, 462], "metainfochangingmemopoptim": 95, "metaop": 95, "With": [95, 337, 398, 402, 404, 420, 437, 445, 450, 454, 458, 459, 461, 462, 468, 469, 472, 475], "better": [95, 183, 184, 187, 188, 231, 232, 280, 327, 360, 381, 425, 436, 438, 461, 462, 464, 466, 468, 472], "perform": [95, 139, 164, 177, 183, 184, 199, 211, 212, 217, 243, 255, 264, 288, 293, 301, 308, 326, 337, 360, 365, 369, 398, 399, 402, 403, 419, 421, 422, 423, 425, 427, 428, 433, 434, 436, 437, 438, 439, 440, 442, 446, 448, 451, 457, 459, 460, 461, 462, 463, 464, 465, 466, 469, 470, 472, 474, 475], "hostconst": 96, "posthostconstconvert": 96, "just": [96, 189, 214, 216, 219, 221, 222, 224, 233, 258, 337, 399, 437, 447, 451, 457, 460, 464, 469, 471, 472], "postcseoptim": 97, "duplic": [97, 107, 305, 364], "quantizev2": 97, "decreas": [97, 461], "size": [97, 158, 175, 191, 192, 198, 201, 207, 212, 216, 235, 236, 242, 245, 251, 255, 258, 296, 337, 392, 396, 403, 420, 421, 426, 429, 437, 457, 458, 459, 461, 466, 469, 471, 474, 475], "rnn": 98, "quantizedrnnconvert": 98, "calibration_data": [98, 106], "rnn_detail": 98, "scalepropagationtransform": 99, "direct": [99, 175, 296, 461], "export": [100, 184, 265, 269, 318, 322, 401, 431, 443, 458, 470, 473], "onnxgraph": 101, "output_shap": 101, "extra_opset": 101, "output_nam": [101, 141, 184, 262, 263, 428], "is_subgraph": 101, "graph_nam": 101, "manipul": [101, 102], "onnxnod": 102, "skip_convers": 102, "schema": [103, 158], "onnxopschema": 103, "domain": [103, 104, 183, 184, 461, 472], "since_vers": 103, "get_schema": 103, "max_inclusive_opset_vers": 103, "within": [103, 176, 264, 269, 301, 322, 335, 354, 359, 396, 398, 404, 438, 450, 454, 457, 462, 469, 472], "get_max_supported_opset_vers": 103, "packag": [103, 402, 429, 434, 457, 458, 462, 467, 472], "set_nam": 104, "find_opset": 104, "assert_error": 104, "bool_val": 104, "error_msg": 104, "error": [104, 150, 273, 308, 326, 369, 388, 423, 436, 441, 469, 472], "messag": [104, 145, 472], "map_numpy_to_onnx_dtyp": 104, "np_dtype": 104, "map_onnx_to_numpy_typ": 104, "onnx_typ": 104, "add_port_to_nam": 104, "nr": 104, "get_tensorflow_node_attr": 104, "pars": [104, 157, 199, 200, 212, 216, 243, 244, 255, 258, 343, 344, 348, 403, 404, 471], "get_tensorflow_tensor_shap": 104, "shape": [104, 147, 175, 202, 203, 212, 216, 246, 247, 255, 258, 269, 322, 401, 421, 430, 431, 437, 469, 471], "get_tensorflow_node_shape_attr": 104, "attr": [104, 147, 173], "map_tensorflow_dtyp": 104, "get_tensorflow_tensor_data": 104, "convert_tensorflow_tensor_to_onnx": 104, "read_tensorflow_node_attr": 104, "read": [104, 147, 204, 216, 248, 258, 297, 421, 465, 468], "infer_onnx_shape_dtyp": 104, "opset_vers": [104, 141, 184, 262, 263, 428], "input_shap": [104, 203, 247, 421], "input_dtyp": 104, "sometim": [104, 398, 423, 464], "so": [104, 216, 258, 378, 398, 402, 423, 429, 433, 438, 443, 445, 464, 465, 466, 469, 470, 471, 473], "make_onnx_shap": 104, "seqtyp": 104, "tensor_dtyp": 104, "around": 104, "signifi": 104, "make_onnx_inputs_output": 104, "elem_typ": 104, "text": [104, 215, 216, 257, 258, 266, 271, 299, 319, 324, 428, 435, 446, 461, 462, 466, 469, 471, 475], "datatyp": [104, 157, 465, 472, 475], "save_protobuf": 104, "path": [104, 147, 157, 173, 179, 180, 199, 200, 201, 216, 243, 244, 245, 258, 259, 262, 263, 264, 275, 276, 277, 279, 288, 293, 297, 299, 301, 302, 315, 327, 335, 359, 360, 376, 389, 392, 398, 399, 402, 421, 423, 426, 432, 436, 437, 438, 439, 443, 446, 457, 460, 471, 474], "as_text": 104, "save": [104, 179, 183, 184, 201, 228, 245, 262, 263, 302, 335, 360, 381, 382, 387, 392, 398, 402, 432, 437, 438, 439, 441, 445, 450, 454, 460, 464, 466, 469], "protobuf": 104, "is_onnx_domain": 104, "is_list_or_tupl": 104, "are_shapes_equ": 104, "src": [104, 458], "dest": 104, "equal": [104, 142, 147, 163, 379, 392, 461], "get_subgraphs_from_onnx": 104, "model_proto": 104, "over": [104, 201, 245, 273, 326, 403, 427, 431, 433, 436, 448, 457, 463, 469, 472], "df": 104, "initialize_name_count": 104, "avoid": [104, 158, 199, 243, 398, 466, 470], "conflict": [104, 429], "counter": 104, "make_nam": 104, "get_index_from_strided_slice_of_shap": 104, "outputs_to_valu": 104, "stride": [104, 216, 258, 471], "slice": 104, "compute_const_folding_using_tf": 104, "g": [104, 175, 183, 184, 424, 427, 431, 440, 445, 461, 466, 467, 469, 472], "const_node_valu": 104, "graph_output": 104, "constant": [104, 263, 265, 305, 307, 313, 318, 364, 368, 374, 385, 420, 430, 471], "tf": [104, 115, 147, 173, 179, 198, 199, 200, 201, 216, 242, 243, 244, 245, 258, 333, 335, 426, 439, 462, 465, 471], "generategraphwithqdqpattern": 106, "op_wise_config": [106, 130, 135, 403], "quantized_nod": 106, "dq": [106, 108, 130, 469], "pair": [106, 183, 184, 403, 420, 437, 438, 467], "befor": [106, 108, 149, 162, 175, 176, 178, 183, 184, 199, 243, 296, 298, 300, 397, 404, 420, 421, 424, 425, 426, 429, 430, 434, 437, 452, 455, 464, 468, 470, 472], "merg": [107, 191, 235, 315, 376, 452, 455, 470, 472], "mergeduplicatedqdqoptim": 107, "y": [108, 183, 184, 216, 258, 305, 364, 423, 429, 443, 469, 471], "shareqdqforitexypatternoptim": 108, "one": [108, 109, 114, 157, 158, 164, 175, 176, 178, 216, 226, 258, 266, 269, 273, 275, 296, 299, 300, 319, 322, 326, 399, 402, 424, 425, 426, 430, 433, 434, 436, 437, 438, 440, 441, 445, 446, 448, 450, 451, 454, 457, 458, 459, 460, 461, 463, 464, 466, 467, 469, 471, 472], "enabl": [108, 150, 158, 176, 183, 184, 298, 403, 404, 426, 434, 438, 440, 442, 445, 446, 448, 461, 462, 472], "break": [108, 426, 437], "graphanalyz": 109, "extend_engin": 109, "analyz": [109, 173, 335, 468, 469, 470], "under": [109, 183, 184, 201, 245, 391, 399, 421, 435, 436, 437, 440, 445, 446, 457, 460, 461, 469, 470, 472], "singleton": [109, 392], "specifi": [109, 157, 164, 183, 184, 187, 188, 216, 217, 231, 232, 258, 264, 269, 273, 276, 279, 288, 293, 301, 302, 322, 326, 327, 360, 379, 381, 391, 392, 403, 404, 426, 430, 436, 437, 445, 459, 463, 471, 472, 474], "graphrewriterhelp": 109, "encapsul": [109, 187, 188, 231, 232, 327, 360, 381, 439], "quantize_lay": [110, 111, 113], "fake_quant": [110, 111, 113], "quantize_config": [110, 111, 113, 403], "quantize_help": [110, 111, 113], "quantize_wrapp": [110, 111, 113], "fuse_qdq_bn": [110, 111, 129], "fuse_qdq_concatv2": [110, 111, 129], "fuse_qdq_conv": [110, 111, 129], "fuse_qdq_deconv": [110, 111, 129], "fuse_qdq_in": [110, 111, 129], "fuse_qdq_matmul": [110, 111, 129], "fuse_qdq_pool": [110, 111, 129], "optimize_qdq": [110, 111, 129], "optimize_lay": [111, 113, 116], "quantize_layer_add": [111, 113, 116], "quantize_layer_bas": [111, 113, 116], "quantize_layer_bn": [111, 113, 116], "fakequantizebas": 112, "abc": [112, 271, 324, 402, 470, 472], "appli": [112, 125, 126, 127, 130, 132, 136, 165, 176, 226, 267, 320, 396, 403, 404, 437, 440, 442, 448, 457, 460, 461, 464, 465, 468, 469, 472, 473, 474], "fakequant": 112, "per_channel": [112, 403, 404, 430, 464, 474], "num_bit": [112, 157, 158, 469], "8": [112, 158, 183, 184, 215, 257, 398, 403, 430, 434, 461, 462, 466, 469, 472, 475], "channel_axi": [112, 160, 163], "symmetr": [112, 404, 464, 471, 472], "narrow_rang": 112, "quantizeconfig": [114, 115], "custom": [114, 158, 164, 302, 326, 337, 391, 419, 424, 425, 440, 461, 462, 466, 468], "There": [114, 302, 304, 361, 363, 423, 424, 430, 433, 437, 440, 466, 469, 472, 474], "instanc": [114, 115, 164, 183, 184, 187, 188, 217, 231, 232, 270, 271, 273, 276, 279, 282, 283, 285, 286, 287, 305, 317, 323, 324, 326, 327, 360, 364, 378, 381, 389, 392, 396, 398, 402, 419, 437, 442, 448, 472, 474, 475], "global": [114, 175, 183, 184, 282, 283, 285, 286, 287, 296, 378, 392, 398, 437, 461, 463, 472], "class": [115, 153, 157, 280, 327, 360, 398, 399, 403, 420, 421, 424, 436, 437, 448, 459, 460, 464, 467, 470, 472, 474], "init_quantize_config": 115, "quantize_recip": 115, "begin": [115, 176, 298, 420, 424, 425, 437, 461, 472], "process": [115, 139, 150, 164, 175, 176, 178, 179, 183, 184, 187, 188, 199, 200, 201, 212, 216, 217, 231, 232, 243, 244, 245, 255, 258, 296, 298, 300, 304, 305, 327, 360, 361, 363, 364, 381, 391, 392, 399, 402, 403, 404, 420, 421, 424, 425, 426, 428, 437, 441, 460, 461, 464, 469, 470, 471, 474], "model_nam": [115, 183, 184], "special": [115, 173, 337, 398, 420, 436, 437, 459, 461, 473], "decid": [115, 183, 184, 267, 298, 320, 402, 403, 437, 464, 467, 472], "qat_clone_funct": 115, "leav": [115, 451], "quantizewrapp": [115, 121], "wrapped_lay": 115, "config_quantizable_lay": 117, "quantizelayeradd": 118, "quantizelay": 119, "quantizelayerbas": 119, "quantizelayerbatchnorm": 120, "quantizewrapperbas": 121, "fusedbatchnormv3": [122, 132], "fusenodestartwithfusedbatchnormv3": [122, 132], "_quantizedfusedbatchnorm": 122, "concatv2": [123, 133, 146, 430], "fusenodestartwithconcatv2": [123, 133], "quantizedconcatv2": [123, 133], "fusenodestartwithconv2d": [124, 134], "conv2dbackpropinput": 125, "conv3dbackpropinputv2": 125, "fusenodestartwithdeconv2d": 125, "fusedinstancenorm": 126, "fusenodestartwithfusedinstancenorm": 126, "batchmatmul": 127, "batchmatmulv2": 127, "fusenodestartwithmatmul": [127, 136], "avgpool": [128, 137, 430], "fusenodestartwithpool": [128, 137], "optimizeqdqgraph": 130, "input_graph": [130, 135, 142, 355, 359, 402], "op_wise_sequ": [130, 135], "quantizegraph": 131, "quantizegraphbas": 131, "quantizenodebas": 131, "quantizegraphforintel": 135, "common": [138, 184, 214, 265, 275, 279, 280, 281, 318, 384, 396, 421, 425, 426, 428, 432, 434, 437, 464, 469], "herlper": 138, "quantizegraphhelp": 138, "sever": [138, 178, 216, 258, 300, 399, 423, 424, 425, 433, 437, 438, 450, 454, 461, 463, 469, 471, 472, 474], "staticmethod": 138, "function": [138, 183, 184, 187, 188, 200, 231, 232, 244, 276, 279, 288, 293, 398, 399, 402, 403, 404, 419, 420, 424, 425, 428, 432, 433, 434, 436, 437, 438, 448, 458, 461, 464, 467, 468, 469, 470, 472, 473], "smoothquantcalibr": 139, "dataset": [139, 140, 157, 187, 188, 189, 191, 192, 194, 195, 196, 197, 198, 210, 219, 231, 232, 233, 235, 236, 238, 239, 240, 241, 242, 254, 265, 269, 270, 271, 273, 302, 318, 322, 323, 324, 326, 327, 360, 381, 384, 399, 401, 402, 403, 420, 426, 431, 436, 437, 445, 461, 464, 467, 469, 472, 474, 475], "outlier": [139, 403, 423, 466, 469], "ignor": [139, 392, 421, 466, 469], "smoothquantscal": 140, "alpha": [140, 162, 169, 177, 464], "scales_per_op": 140, "method": [140, 142, 157, 158, 177, 183, 184, 192, 197, 198, 199, 201, 208, 216, 219, 236, 241, 242, 243, 245, 252, 258, 279, 280, 281, 315, 376, 378, 384, 385, 387, 388, 398, 399, 401, 420, 421, 423, 424, 425, 436, 437, 460, 461, 464, 465, 466, 469, 471, 472], "individu": [140, 175, 296, 354, 359, 396, 461, 469], "tensorflowqdqtoonnxqdqconvert": 141, "shape_overrid": 141, "inputs_as_nchw": [141, 262], "default_opset_vers": 141, "bia": [142, 183, 184, 470], "correct": [142, 163, 179, 183, 184, 269, 270, 271, 273, 297, 322, 323, 324, 326, 396, 440], "biascorrect": 142, "fp32_graph": 142, "weight_empir": 142, "Will": [142, 424, 433], "our": [142, 157, 183, 184, 399, 401, 428, 437, 458, 468, 473], "task": [142, 199, 206, 243, 250, 273, 326, 421, 424, 425, 428, 433, 436, 437, 461, 466, 469], "close": [142, 163], "w_int8": [142, 163], "u": [142, 163, 401, 440], "w_fp32": [142, 163], "varianc": [142, 163, 423], "ratio": [142, 163, 175, 176, 179, 183, 184, 212, 216, 255, 258, 298, 421, 437, 461, 471, 475], "differ": [142, 159, 163, 166, 176, 183, 184, 192, 201, 216, 218, 236, 245, 258, 264, 273, 279, 281, 290, 301, 326, 337, 386, 396, 398, 399, 403, 420, 421, 423, 424, 426, 427, 432, 433, 436, 437, 439, 450, 454, 459, 461, 464, 469, 470, 471, 472], "wise": [142, 158, 163, 183, 184, 305, 308, 364, 365, 369, 403, 433, 461, 470, 472, 474], "minim": [142, 163, 305, 364, 403, 404, 424, 427, 436, 437, 450, 454, 461, 464, 472], "round": [142, 158, 163, 464, 466, 469], "scale_c": [142, 163], "shift": [142, 163, 212, 255, 458, 471], "notic": [142, 163, 217, 435, 438, 467], "first": [142, 163, 174, 181, 183, 184, 199, 243, 269, 315, 322, 365, 376, 392, 398, 399, 402, 403, 404, 421, 423, 434, 438, 442, 451, 452, 455, 458, 463, 464, 465, 466, 468, 469, 470, 472, 474], "empir": [142, 163], "solut": [142, 163, 401, 402, 403, 429, 442, 446, 451, 462, 467, 469, 472, 473], "don": [142, 163, 175, 183, 184, 398, 461, 472], "min": [142, 158, 163, 392, 423, 461, 464, 469, 471, 472], "graphtransform": 143, "graphtransformbas": 143, "input_pb": [143, 145, 146], "log": [145, 164, 173, 343, 344, 348, 388, 398, 448, 468, 470, 472], "insertlog": 145, "node_name_list": 145, "show_nam": 145, "show_op": 145, "first_n": 145, "summar": [145, 424], "1024": [145, 201, 245, 443], "dump_fp32": 145, "rerang": 146, "rerangequantizedconcat": 146, "rerange_quant": 146, "version1_lt_version2": [147, 392], "version1": [147, 392], "version2": [147, 392], "version1_gt_version2": [147, 392], "greater": [147, 392, 461, 472], "version1_eq_version2": [147, 392], "version1_gte_version2": [147, 392], "version1_lte_version2": [147, 392], "disable_random": 147, "seed": [147, 183, 184, 281, 392, 437, 474], "disabl": [147, 183, 184, 396, 457, 465], "read_graph": 147, "in_graph": 147, "in_graph_is_binari": 147, "write_graph": 147, "out_graph_def": 147, "out_graph_fil": 147, "write": [147, 208, 252, 392, 426, 432, 437, 440, 470], "is_ckpt_format": 147, "model_path": [147, 423], "ckpt": [147, 327, 335, 360, 475], "folder": [147, 201, 206, 245, 250, 327, 360, 391, 421, 445, 450, 454, 466, 470], "is_saved_model_format": 147, "saved_model": [147, 275], "get_estimator_graph": 147, "estim": [147, 273, 326, 335, 472], "input_fn": [147, 335], "get_tensor_by_nam": 147, "try_cnt": 147, "consid": [147, 273, 326, 396, 424, 458, 472], "import": [147, 164, 183, 184, 275, 327, 337, 360, 379, 381, 392, 398, 399, 401, 404, 419, 420, 421, 423, 424, 425, 426, 428, 431, 436, 437, 438, 439, 440, 444, 446, 459, 460, 461, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473], "scope": [147, 403, 437], "onc": [147, 178, 223, 300, 304, 361, 363, 403, 404, 420, 457, 461, 462, 472, 475], "both": [147, 184, 396, 399, 402, 425, 437, 441, 461, 463, 464, 469, 472], "compat": [147, 335, 426, 439, 452, 455, 457, 467], "v1": [147, 211, 212, 255, 270, 271, 273, 323, 324, 326, 335, 426, 428, 429, 436, 439, 461, 467, 468, 475], "suffix": 147, "time": [147, 183, 184, 216, 258, 273, 305, 326, 337, 364, 392, 403, 420, 423, 426, 429, 437, 445, 447, 450, 454, 457, 458, 459, 461, 462, 464, 466, 468, 470, 471, 472], "got": [147, 403, 429, 470], "iterator_sess_run": 147, "sess": [147, 335], "iter_op": 147, "feed_dict": [147, 198, 242], "output_tensor": [147, 335], "measur": [147, 217, 327, 386, 399, 402, 419, 423, 424, 436, 437, 466, 470, 472, 475], "integr": [147, 166, 218, 402, 437, 458, 466], "session": [147, 198, 242, 335, 437, 470], "makeiter": 147, "feed": [147, 198, 242, 424, 461], "end": [147, 176, 183, 184, 199, 215, 216, 243, 257, 258, 298, 304, 361, 363, 402, 403, 404, 424, 425, 430, 434, 437, 451, 459, 461, 470, 471, 472], "predict": [147, 216, 221, 258, 266, 270, 271, 273, 319, 323, 324, 326, 360, 399, 424, 436, 448, 466, 469, 470, 471], "pred": [147, 273, 326, 436], "collate_tf_pr": 147, "collat": [147, 157, 420], "tbe": 147, "get_input_output_node_nam": 147, "fix_ref_type_of_graph_def": 147, "fix": [147, 176, 199, 243, 298, 397, 420, 421, 444, 461, 469, 472], "strip_unused_lib": 147, "offici": [147, 266, 270, 271, 319, 323, 324, 396, 469], "r1": 147, "15": [147, 430, 434], "branch": 147, "get_graph_def": 147, "auto_input_output": 147, "get_model_input_shap": 147, "inout": 147, "get_tensor_val_from_graph_nod": 147, "graph_node_name_map": 147, "kei": [147, 150, 155, 173, 176, 179, 181, 183, 184, 280, 297, 335, 379, 382, 384, 392, 401, 403, 462, 466, 470, 472], "val": [147, 179, 201, 204, 245, 248, 297, 423, 437], "tensor_v": 147, "int8_node_name_revers": 147, "revers": 147, "tf_diagnosis_help": 147, "fp32_model": [147, 150, 157, 263, 392, 402], "quan_model": 147, "save_path": [147, 262, 263, 402, 439], "diagnosi": [147, 183, 184, 437, 462, 467, 473], "generate_feed_dict": 147, "input_tensor": [147, 335], "get_weight_from_input_tensor": 147, "input_tensor_nam": [147, 335], "associ": [147, 269, 322], "quant": [147, 157, 158, 183, 184, 315, 376, 398, 437, 464], "search": [147, 149, 173, 176, 180, 187, 188, 231, 232, 264, 266, 276, 279, 280, 281, 301, 305, 319, 364, 401, 433, 436, 440, 441, 451, 462, 466, 470, 472, 473], "look": [147, 176, 401, 402, 404, 430, 436, 474], "sq_weight_tensor": 147, "sq_weights_nod": 147, "two": [147, 150, 164, 174, 175, 176, 178, 201, 206, 217, 245, 250, 269, 296, 300, 302, 309, 322, 370, 392, 398, 399, 420, 421, 424, 426, 428, 430, 437, 438, 464, 465, 466, 468, 472, 474], "torch": [148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 162, 173, 174, 175, 176, 180, 183, 184, 228, 263, 327, 360, 391, 398, 401, 404, 405, 424, 426, 428, 437, 438, 439, 440, 445, 448, 464, 469, 470], "bf16modulewrapp": 148, "bf16modul": 148, "mix": [148, 152, 183, 184, 303, 315, 327, 362, 376, 401, 402, 409, 433, 440, 446, 447, 448, 473], "precis": [148, 152, 183, 184, 187, 188, 231, 232, 264, 271, 273, 274, 301, 303, 315, 324, 326, 327, 337, 362, 365, 376, 392, 401, 402, 403, 409, 419, 425, 426, 430, 433, 440, 446, 447, 448, 462, 463, 464, 469, 472, 473], "mixed_precision_model": 148, "bf16_symbolic_trac": 148, "fx_sub_module_list": 148, "trace": [148, 150, 156, 157, 173, 183, 184, 263, 367, 398, 447, 472], "_description_": 148, "is_leaf": 149, "judg": 149, "nn": [149, 153, 155, 157, 158, 173, 174, 176, 183, 184, 228, 263, 327, 360, 391, 398, 424, 437, 439, 469, 470], "trace_gptq_target_block": 149, "module_typ": 149, "modulelist": 149, "stack": 149, "structur": [149, 174, 176, 183, 184, 298, 316, 377, 433, 456, 458, 461, 464, 470, 473, 475], "critic": [149, 176, 396], "llm": [149, 466, 469], "gptq_related_block": 149, "embed": [149, 157, 461], "transfrom": 149, "transformers_pr": 149, "todo": [149, 199, 202, 243, 246, 269, 315, 322, 376], "transformers_nam": 149, "find_lay": 149, "conv1d": [149, 404], "find_layers_nam": 149, "log_quantizable_layers_per_transform": 149, "transformer_block": 149, "maxq": 149, "gptquantiz": 149, "weight_config": [149, 157, 158, 466], "compress": [149, 265, 288, 293, 318, 337, 381, 394, 401, 409, 424, 433, 437, 457, 459, 460, 461, 462, 464, 466, 469, 473, 475], "pretrain": [149, 387, 440, 446], "url": [149, 201, 245, 435], "arxiv": [149, 169, 176, 298, 461, 466, 469], "org": [149, 169, 176, 269, 298, 322, 397, 398, 423, 434, 452, 455], "2210": [149, 466], "17323": [149, 466], "hessian": [150, 367, 472], "awar": [150, 158, 165, 184, 226, 275, 296, 367, 381, 401, 402, 403, 404, 425, 426, 428, 433, 457, 460, 462, 466, 472], "node_collector": 150, "hook": [150, 165, 176, 225, 226, 288, 293, 384, 424, 425, 437, 461, 469, 470], "record": [150, 157, 158, 166, 199, 200, 201, 207, 218, 225, 243, 244, 245, 251, 392, 421, 468, 470, 472], "hessiantrac": 150, "q_model": [150, 184, 275, 360, 398, 401, 420, 421, 423, 426, 428, 431, 432, 436, 437, 439, 464, 465, 466], "criterion": [150, 165, 167, 168, 169, 175, 176, 183, 184, 220, 223, 265, 318, 424, 425, 437, 461, 464, 472, 474], "yao": 150, "zhewei": 150, "et": [150, 466, 469], "al": [150, 466, 469], "pyhessian": 150, "network": [150, 169, 175, 298, 367, 399, 424, 425, 428, 437, 462, 464, 469, 472], "through": [150, 187, 188, 231, 232, 326, 327, 360, 401, 419, 430, 432, 433, 436, 443, 459, 460, 461, 463, 464, 469], "len": [150, 184, 216, 258, 421, 426, 471], "2020": 150, "ieee": [150, 438, 469], "intern": [150, 315, 376, 420, 421, 436, 461], "confer": [150, 461, 469], "big": [150, 423], "dong": 150, "zhen": 150, "hawq": [150, 367, 472], "v2": [150, 367, 420, 426, 428, 429, 434, 446, 467, 472, 473, 475], "advanc": [150, 183, 184, 396, 401, 403, 409, 464, 474], "system": [150, 164, 217, 392, 419, 443, 475], "33": [150, 475], "18518": 150, "18529": 150, "openvinotoolkit": 150, "nncf": 150, "develop": [150, 337, 397, 398, 434, 437, 438, 440, 446, 457, 461, 462, 465, 468], "hessian_trac": 150, "compare_weight": 150, "float_dict": 150, "ani": [150, 269, 271, 314, 322, 324, 354, 359, 375, 379, 389, 392, 396, 397, 401, 404, 426, 440, 445, 458, 461, 468], "quantized_dict": 150, "compar": [150, 273, 326, 392, 425, 436, 461, 464, 466, 468, 470, 472], "being": [150, 269, 322, 404], "wt_compare_dict": 150, "float_model": 150, "state_dict": [150, 426, 470], "qmodel": 150, "compute_error": 150, "state": [150, 174, 404, 443, 461], "weight_dict": 150, "hawq_top": 150, "enable_act": 150, "modul": [151, 153, 278, 284, 294, 295, 398, 420, 424, 433, 436, 437, 439, 461, 463, 465, 470, 473], "ipex_mixed_precis": 152, "example_input": [152, 155, 157, 183, 184, 263, 428], "detector": 154, "transformerbasedmodelblockpatterndetector": 154, "pattern_lst": 154, "block_pattern": 154, "detect": [154, 157, 173, 183, 184, 269, 273, 322, 326, 331, 398, 440, 447, 448, 461, 472], "ffn": [154, 176], "get_modul": 155, "set_modul": [155, 157], "new_modul": [155, 157], "torchsmoothqu": [155, 469], "q_func": [155, 187, 188, 231, 232, 305, 308, 310, 311, 361, 364, 365, 369, 371, 372, 402, 437, 472], "traced_model": [155, 156], "whose": [155, 162, 175, 297, 432, 469, 472], "could": [155, 162, 175, 187, 188, 201, 231, 232, 245, 302, 327, 360, 381, 396, 398, 425, 437, 460, 461, 464, 466, 469, 473], "absorb": [155, 158, 162], "later": [155, 162, 470], "graphtrac": 155, "trace_and_fuse_sub_graph": 156, "is_qat": 156, "get_embedding_contigu": 157, "contigu": 157, "is_fused_modul": 157, "_propagate_qconfig_help": 157, "collate_torch_pr": 157, "fetch": [157, 161, 192, 236, 403, 421], "collate_result": 157, "input2tupl": 157, "append_attr": 157, "fx_model": 157, "fx_white_list": 157, "append": [157, 302, 305, 364, 398, 425, 437, 460], "graphmodul": [157, 398, 465], "addit": [157, 184, 381, 403, 404, 424, 451, 467, 472], "dir": [157, 199, 243, 391, 421, 429, 432], "generate_activation_observ": 157, "observ": [157, 404, 468, 470, 472], "what": [157, 176, 197, 241, 326, 360, 381, 396, 401, 462], "check_cfg_and_qconfig": 157, "op_infos_from_cfg": 157, "output_tensor_ids_op_nam": 157, "paser_cfg": 157, "ops_nam": 157, "get_quantizable_ops_from_cfg": 157, "input_tensor_ids_op_nam": 157, "update_sq_scal": 157, "ipex_config_path": 157, "smoothquant_scale_info": 157, "ipex_config": 157, "json": [157, 200, 216, 244, 258, 421, 439, 458, 466, 471], "temporari": [157, 392, 396], "auto_copi": 157, "fetch_modul": 157, "op_nam": [157, 180, 183, 184, 316, 377, 392, 393, 403, 437, 461, 470], "simple_infer": 157, "get_example_input": 157, "example_inp": 157, "get_fallback_ord": 157, "confidence_batch": [157, 472], "fallback": [157, 184, 308, 309, 367, 369, 370, 428, 438, 465, 472], "requantize_cfg": 157, "fall": 157, "back": [157, 216, 222, 258, 423, 457], "order": [157, 266, 267, 302, 305, 308, 317, 319, 320, 364, 369, 378, 398, 423, 436, 463, 469, 470, 472], "confid": 157, "ordered_op": 157, "get_mse_order_per_fp32": 157, "mse": [157, 158, 183, 184, 265, 273, 307, 318, 326, 360, 368, 392, 423, 436, 463, 466, 467], "influenc": [157, 461], "last": [157, 169, 179, 183, 184, 420, 438, 440, 442, 447, 451, 464, 469], "fallback_ord": 157, "get_mse_order_per_int8": 157, "get_torch_vers": 157, "match_datatype_pattern": 157, "calculate_quant_min_max": 157, "unsign": [157, 317, 378, 404], "qmin": 157, "qmax": 157, "get_depth": 157, "depth": [157, 424, 465], "get_dict_at_depth": 157, "target_depth": 157, "nest": [157, 181], "get_element_under_depth": 157, "ops_lst": 157, "get_op_type_by_nam": 157, "quantizable_op": 157, "collect_weight_info": 157, "fc": [157, 184], "group_siz": [157, 158, 378, 466], "rtn": [157, 466], "param": [157, 164, 189, 217, 223, 233, 273, 305, 326, 364, 392, 402, 439, 472], "configu": 157, "_type_": 157, "qdq_weight_asym": 158, "quantil": [158, 472], "return_int": 158, "clip": [158, 466, 469], "choos": [158, 201, 245, 401, 433, 445, 462, 467, 469, 472, 474], "qdq_weight_sym": 158, "full_rang": 158, "rang": [158, 202, 203, 216, 246, 247, 258, 379, 381, 401, 402, 404, 421, 423, 424, 425, 426, 437, 460, 461, 464, 466, 469, 471], "amax": 158, "qdq_weight_actor": 158, "quant_weight": 158, "group": [158, 177, 283, 433, 461, 466, 470, 471, 472, 475], "how": [158, 165, 169, 175, 176, 183, 184, 216, 258, 259, 296, 397, 398, 400, 401, 402, 420, 421, 424, 425, 426, 432, 436, 437, 451, 452, 455, 456, 457, 461, 462, 464, 469, 471, 472, 473, 474], "mani": [158, 326, 360, 420, 434, 466, 472, 474], "element": [158, 175, 179, 197, 241, 269, 296, 322, 392, 421, 433, 436, 461, 466, 469], "zp": [158, 469], "rtn_quantiz": 158, "32": [158, 171, 378, 426, 432, 469, 475], "nearst": 158, "num": [158, 392, 420], "configir": 158, "fc2": 158, "int32": [158, 421], "gptq_quantiz": 158, "get_module_input_output": 158, "module_hook_config": 158, "calib_func": [158, 360, 465], "help": [158, 225, 275, 439, 440, 446, 457, 466, 472, 473], "module_name_list": 158, "requir": [158, 183, 184, 190, 302, 335, 359, 398, 402, 403, 419, 420, 423, 425, 426, 430, 437, 438, 439, 441, 451, 457, 461, 464, 466, 467, 468, 469, 470, 472, 474], "fc1": 158, "input_valu": 158, "output_valu": 158, "awq_quant": 158, "absorb_dict": 158, "n_sampl": 158, "auto_scal": [158, 466], "mse_rang": [158, 466], "n_block": [158, 466], "5": [158, 162, 166, 183, 184, 203, 212, 218, 247, 255, 273, 326, 360, 402, 421, 428, 430, 436, 437, 461, 463, 464, 466, 469, 471, 472, 474, 475], "awq": [158, 466], "absorb_lay": 158, "absorbed_lay": 158, "fc3": 158, "salient": [158, 461], "oom": 158, "algorithm_registri": 159, "algorithm_typ": 159, "locat": [159, 179, 216, 258, 426, 443, 450, 454, 457, 464, 467, 471, 474], "registr": [159, 201, 208, 216, 245, 252, 258, 291], "algorithmschedul": 159, "conf": [159, 164, 165, 184, 187, 188, 217, 231, 232, 275, 282, 283, 285, 286, 287, 288, 293, 305, 308, 310, 311, 315, 327, 337, 360, 361, 364, 365, 369, 371, 372, 376, 379, 381, 398, 399, 401, 404, 419, 424, 431, 432, 437, 438, 439, 460, 464, 465, 466, 468, 469, 472], "control": [159, 183, 184, 398, 437, 461, 472], "phase": [159, 399, 437, 461, 464, 465, 472], "fastbiascorrect": [160, 163], "fast_bias_correct": [161, 183, 184, 318, 464], "weight_correct": [161, 183, 184, 318, 464], "kernel": [162, 183, 184, 402, 403, 472], "futur": [162, 187, 188, 219, 231, 232, 433, 437, 448, 473], "weightcorrect": 163, "1e": [163, 469, 474], "05": [163, 184, 273, 326, 436, 469, 475], "evalu": [164, 165, 175, 183, 187, 188, 199, 217, 231, 232, 243, 259, 266, 269, 270, 271, 273, 275, 319, 322, 323, 324, 326, 327, 337, 360, 381, 384, 399, 402, 403, 421, 424, 425, 432, 433, 436, 437, 438, 440, 446, 448, 451, 457, 459, 461, 464, 468, 470, 472, 474], "set_env_var": [164, 217], "env_var": [164, 217], "overwrite_exist": [164, 217], "env": [164, 217, 429], "alreadi": [164, 201, 215, 217, 245, 257, 402, 421, 433, 452, 455, 472], "set_all_env_var": [164, 217], "physic": [164, 217, 396, 419], "core": [164, 183, 184, 217, 419, 435, 450, 454, 475], "get_architectur": [164, 217], "architectur": [164, 217, 276, 279, 401, 419, 424, 437, 461, 462, 466, 473], "get_threads_per_cor": [164, 217], "thread": [164, 183, 184, 217, 354, 359, 420], "get_thread": [164, 217], "get_physical_id": [164, 217], "socket": [164, 217, 392, 475], "get_core_id": [164, 217], "id": [164, 215, 217, 257, 266, 268, 269, 270, 271, 319, 321, 322, 323, 324, 436, 468, 472], "get_bounded_thread": [164, 217], "core_id": [164, 217], "bind": [164, 217], "run_inst": 164, "b_dataload": [164, 183, 184, 419, 437], "b_func": [164, 419], "benchmarkconfig": [164, 183, 184, 419, 423, 437], "accuraci": [164, 179, 183, 184, 187, 188, 231, 232, 259, 264, 273, 288, 293, 301, 326, 327, 337, 360, 365, 379, 381, 389, 398, 401, 403, 404, 420, 421, 423, 425, 426, 427, 428, 436, 437, 448, 457, 459, 460, 461, 462, 463, 466, 467, 468, 469, 470, 473, 474, 475], "goal": [164, 259, 264, 288, 293, 301, 327, 360, 403, 420, 460, 464, 472], "prefer": [164, 264, 301, 360, 461, 466], "space": [164, 176, 183, 184, 187, 188, 231, 232, 264, 271, 276, 279, 280, 281, 301, 305, 308, 315, 324, 327, 360, 364, 369, 376, 396, 397, 399, 402, 403, 404, 461, 464, 474], "etc": [164, 165, 215, 257, 259, 264, 271, 288, 293, 301, 324, 327, 360, 391, 424, 433, 461, 468, 472], "user": [164, 173, 176, 179, 183, 184, 187, 188, 201, 204, 208, 216, 217, 223, 228, 231, 232, 245, 248, 252, 258, 264, 288, 293, 299, 301, 302, 326, 327, 337, 360, 365, 378, 381, 392, 398, 399, 401, 402, 403, 404, 409, 419, 420, 424, 425, 428, 430, 433, 436, 437, 438, 439, 440, 441, 442, 444, 445, 446, 448, 451, 457, 459, 460, 461, 462, 464, 465, 467, 469, 470, 471, 472, 476], "generate_prefix": 164, "core_list": 164, "command": [164, 217, 381, 423, 426, 440, 442, 445, 450, 454, 458], "numactl": [164, 429, 443, 451], "call_on": 164, "cmd": [164, 458], "log_fil": [164, 353, 358], "window": [164, 419, 457, 458], "config_inst": 164, "raw_cmd": 164, "multi": [164, 171, 173, 176, 269, 322, 326, 360, 399, 420, 421, 433, 437, 459, 461, 464, 472], "trigger": [164, 176, 298, 397], "raw": [164, 200, 204, 207, 244, 248, 251, 308, 369, 436, 472], "summary_benchmark": 164, "summari": [164, 381, 423, 452, 455, 470, 475], "profil": [164, 318], "benchmark_with_raw_cmd": 164, "commend": 164, "fit_with_raw_cmd": 164, "cores_per_inst": [164, 183, 184, 419, 437, 463], "num_of_inst": [164, 183, 184, 419, 437, 463], "test": [164, 183, 184, 216, 258, 397, 401, 423, 434, 475], "fit": [164, 175, 183, 184, 305, 327, 360, 364, 379, 381, 398, 401, 419, 420, 421, 423, 426, 431, 432, 436, 437, 438, 439, 461, 464, 465, 466], "pb": [164, 183, 184, 327, 335, 360, 401, 419, 426, 431, 437, 439, 470, 475], "eval_dataload": [164, 183, 184, 187, 188, 231, 232, 302, 305, 308, 310, 311, 327, 360, 361, 364, 365, 369, 371, 372, 381, 419, 432, 436, 437, 464, 472], "compon": [165, 259, 265, 302, 318, 398, 423, 426, 434, 435, 440, 457, 460], "quantizationawaretrainingcallback": 165, "pruningcallback": 165, "distillationcallback": 165, "basecallback": 165, "design": [165, 198, 221, 226, 242, 326, 365, 399, 401, 437, 445, 448, 461, 464, 473], "mainli": [165, 178, 226, 300, 437, 461, 464], "prune": [165, 169, 170, 171, 174, 175, 176, 177, 178, 179, 183, 184, 226, 227, 265, 282, 283, 285, 286, 287, 291, 293, 294, 296, 297, 298, 300, 302, 318, 392, 401, 426, 427, 430, 431, 433, 460, 462, 473, 474], "distil": [165, 168, 183, 184, 218, 225, 226, 265, 318, 401, 427, 431, 433, 460, 473, 474], "In": [165, 175, 176, 177, 184, 198, 226, 242, 269, 296, 298, 322, 337, 396, 398, 399, 401, 402, 403, 420, 421, 423, 424, 425, 426, 436, 437, 447, 450, 451, 454, 459, 460, 461, 464, 465, 466, 468, 469, 470, 471, 472, 473], "adaptor": [165, 183, 184, 317, 378, 384, 401, 404, 433, 465, 467, 469, 470, 473], "deriv": [165, 169, 175, 176, 177, 178, 259, 296, 298, 300], "pipelin": [165, 259, 276, 277, 302, 425, 437, 460], "knowledg": [165, 166, 183, 184, 218, 259, 425, 427, 431, 433, 437, 439, 474], "transfer": [165, 206, 250, 259, 421, 424, 425, 437, 469], "teacher": [165, 183, 184, 259, 424, 425, 437, 475], "student": [165, 183, 184, 199, 225, 243, 259, 421, 424, 425, 475], "distillation_conf": [165, 180, 259], "_epoch_ran": [165, 259], "integ": [165, 175, 176, 183, 184, 259, 269, 273, 280, 296, 298, 322, 326, 379, 402, 404, 464, 469, 472], "indic": [165, 183, 184, 192, 197, 199, 236, 241, 243, 259, 269, 280, 322, 398, 420, 429, 466, 470], "much": [165, 169, 183, 184, 216, 258, 259, 424, 451, 469, 471], "epoch": [165, 176, 259, 298, 381, 420, 424, 425, 426, 437, 460, 461, 474], "ran": [165, 259], "eval_frequ": [165, 259], "frequenc": [165, 176, 183, 184, 259, 298, 437, 461, 474], "term": [165, 176, 177, 259, 397, 424, 435, 436, 459, 460, 472], "best_scor": [165, 259], "best": [165, 216, 258, 259, 264, 301, 308, 369, 396, 399, 434, 440, 446, 457, 459, 464, 466, 471, 472], "metric": [165, 183, 184, 187, 188, 220, 231, 232, 259, 264, 265, 280, 288, 293, 301, 302, 318, 327, 360, 381, 384, 399, 402, 403, 421, 423, 426, 437, 438, 464, 468, 470, 472, 473, 474, 475], "best_model": [165, 259, 466], "found": [165, 259, 401, 424, 438, 445, 469, 472, 475], "critet": [166, 218], "includ": [166, 169, 173, 175, 177, 183, 184, 199, 201, 208, 216, 218, 243, 245, 252, 258, 264, 274, 296, 301, 379, 392, 396, 397, 402, 403, 404, 420, 421, 423, 434, 435, 436, 437, 440, 443, 446, 451, 461, 464, 465, 470, 472], "tensorflowknowledgedistillationloss": [166, 218], "pytorchknowledgedistillationloss": [166, 218, 437], "pytorchintermediatelayersknowledgedistillationloss": [166, 218], "tensorflowcriterion": [166, 218], "pytorchcriterion": [166, 218], "criterion_registri": [166, 218], "criterion_typ": [166, 218], "registry_criterion": [166, 218], "knowledgedistillationframework": [166, 218], "student_model": [166, 184, 218, 437], "teacher_model": [166, 183, 184, 218, 424, 425, 437], "knowledgedistillationloss": [166, 218, 437, 474], "temperatur": [166, 183, 184, 218, 437, 474], "loss_typ": [166, 183, 184, 218, 437, 474], "ce": [166, 183, 184, 218, 437, 474], "loss_weight": [166, 183, 184, 218, 437, 474], "pytorchknowledgedistillationlosswrapp": [166, 218], "param_dict": [166, 218, 223], "tensorflowknowledgedistillationlosswrapp": [166, 218], "tensorflowknowledgedistillationlossextern": [166, 218], "intermediatelayersknowledgedistillationloss": [166, 218], "layer_map": [166, 184, 218, 424], "add_origin_loss": [166, 184, 218], "pytorch": [166, 169, 173, 175, 176, 183, 184, 198, 199, 201, 204, 208, 216, 218, 223, 225, 242, 243, 245, 248, 252, 258, 263, 264, 273, 274, 294, 296, 299, 301, 309, 318, 326, 327, 336, 360, 370, 385, 392, 398, 399, 401, 402, 403, 404, 420, 424, 425, 427, 430, 433, 434, 437, 438, 439, 440, 442, 445, 446, 447, 448, 457, 461, 462, 463, 466, 467, 469, 472, 474], "pytorchintermediatelayersknowledgedistillationlosswrapp": [166, 218], "selfknowledgedistillationloss": [166, 218], "selfknowledg": [166, 218], "pytorchselfknowledgedistillationloss": [166, 218], "pytorchselfknowledgedistillationlosswrapp": [166, 218], "pruner": [168, 265, 282, 283, 284, 285, 286, 288, 293, 294, 296, 299, 318, 437, 461, 474], "model_slim": [168, 170, 176], "auto_slim": [168, 170, 172], "pattern_analyz": [168, 170, 172], "weight_slim": [168, 170, 172, 176], "criteria": [168, 170, 183, 184, 264, 288, 293, 296, 298, 301, 398, 457, 469], "reg": [168, 170, 176], "schedul": [168, 170, 176, 177, 183, 184, 265, 294, 298, 318, 437, 460], "callback": [168, 288, 293, 381, 384, 398, 437, 460, 461, 464], "register_criterion": 169, "registri": [169, 175, 176, 177, 178, 296, 298, 300, 399], "get_criterion": 169, "pruningcriterion": 169, "about": [169, 392, 396, 420, 437, 465, 472, 473, 475], "module_nam": [169, 176, 177, 298, 392], "store": [169, 173, 176, 177, 183, 184, 201, 245, 291, 298, 432], "score": [169, 175, 176, 183, 184, 266, 267, 269, 270, 271, 273, 298, 319, 320, 322, 323, 324, 326, 367, 384, 398, 436, 459, 461, 468, 472], "magnitudecriterion": 169, "magnitud": [169, 183, 184, 265, 273, 284, 318, 326, 433, 461], "criterion_class": 169, "determin": [169, 175, 176, 183, 184, 386, 396, 398, 461, 464, 469], "gradientcriterion": 169, "gradient": [169, 282, 433, 437, 461, 475], "absolut": [169, 183, 184, 273, 326, 436, 437, 461, 464, 472], "snipcriterion": 169, "snip": [169, 183, 184, 298, 433, 461, 475], "product": [169, 401, 433, 438, 440, 441, 457, 462, 464, 468, 472], "singl": [169, 178, 183, 184, 192, 199, 216, 236, 243, 258, 269, 298, 300, 322, 326, 360, 398, 421, 423, 434, 461], "shot": [169, 176, 178, 226, 298, 300, 399, 433, 437, 461, 462], "connect": [169, 298, 457, 461, 468], "sensit": [169, 282, 298, 433, 461], "1810": [169, 298], "02340": [169, 298], "snipmomentumcriterion": 169, "snip_momentum": [169, 183, 184, 437, 461], "momentum": [169, 298, 433, 437, 461, 474], "mechan": [169, 461, 468, 473], "preserv": 169, "step": [169, 175, 176, 178, 183, 184, 296, 298, 300, 381, 403, 404, 423, 424, 425, 426, 437, 452, 455, 457, 460, 461, 463, 465, 466, 468, 469, 470, 472], "beta": 169, "snipmomentumblockcriterion": 169, "snip_momentum_block": 169, "retrainfreecriterion": 169, "retrain_fre": [169, 176], "auto": [171, 173, 183, 184, 303, 318, 362, 368, 392, 398, 440, 443, 445, 447, 448, 461, 464, 466], "slim": [171, 172, 173, 269, 322, 333, 335, 439, 461], "round_multipli": 171, "spars": [171, 176, 298, 421, 462], "automat": [171, 173, 174, 183, 184, 201, 204, 211, 212, 245, 248, 255, 264, 274, 301, 398, 401, 419, 421, 433, 437, 438, 440, 442, 445, 446, 448, 450, 451, 452, 454, 455, 457, 460, 461, 464, 469, 471, 472], "model_slim_ffn2": 171, "some": [171, 173, 183, 184, 199, 243, 297, 403, 404, 421, 423, 428, 434, 436, 437, 459, 461, 464, 465, 466, 469, 470, 472, 473, 475], "part": [171, 176, 296, 298, 398, 434, 438, 452, 455, 461, 469, 473], "perman": [171, 396, 461], "obtain": [171, 173, 176, 177, 179, 297, 398, 403, 461, 468, 469, 472], "acceler": [171, 424, 437, 440, 448, 457, 461, 462, 465, 466, 469, 472], "directli": [171, 183, 184, 198, 242, 269, 273, 297, 322, 326, 436, 437, 444, 461, 463, 464, 470], "sprase": 171, "multipl": [171, 183, 184, 185, 186, 190, 191, 199, 200, 202, 203, 204, 205, 206, 210, 213, 216, 223, 229, 230, 234, 235, 237, 243, 244, 246, 247, 248, 249, 250, 254, 256, 258, 274, 327, 328, 329, 331, 337, 419, 421, 428, 437, 460, 461, 468, 469, 472], "model_slim_mha": 171, "parse_auto_slim_config": 171, "ffn2_sparsiti": 171, "mha_spars": 171, "generate_ffn2_pruning_config": 171, "consecut": [171, 173, 174, 461], "generate_mha_pruning_config": 171, "head": [171, 173, 175, 176, 179, 461, 475], "get_attribut": 173, "level": [173, 365, 379, 388, 396, 469, 472], "descent": 173, "get_common_modul": 173, "layer1": [173, 183, 184, 437, 461, 464], "layer2": [173, 437, 461, 464], "nearest": [173, 216, 258, 466, 471], "father": 173, "print_iter": 173, "recipesearch": 173, "searcher": [173, 281], "root": [173, 199, 200, 201, 204, 243, 244, 245, 248, 273, 326, 421, 426, 436, 437, 474], "levelwis": 173, "wai": [173, 200, 201, 204, 244, 245, 248, 399, 404, 420, 421, 423, 436, 437, 440, 443, 458, 460, 461, 464, 466, 469, 472, 474], "huggingfac": [173, 176, 199, 243, 387, 421, 427, 431, 445, 446, 447, 448, 469, 475], "bert": [173, 184, 195, 198, 199, 216, 239, 242, 243, 258, 401, 421, 424, 436, 438, 445, 461, 471, 475], "recipe_sampl": 173, "bertattent": 173, "dens": [173, 178, 183, 184, 300, 461, 475], "infom": [173, 219], "basic": [173, 175, 183, 184, 215, 257, 265, 276, 296, 307, 311, 314, 318, 368, 372, 375, 381, 433, 434, 437, 463, 468], "searching_result": 173, "jitbasicsearch": 173, "placeholder_shap": 173, "placeholder_dtyp": 173, "By": [173, 183, 184, 266, 319, 403, 404, 436, 439, 450, 451, 454, 462, 472], "jit": [173, 183, 440, 442, 447, 469, 470], "script": [173, 266, 267, 270, 271, 319, 320, 323, 324, 426, 433, 440, 444, 447, 448, 451, 462], "them": [173, 199, 243, 398, 404, 420, 423, 428, 430, 432, 460, 461, 466, 472], "static_graph": 173, "flatten_static_graph": 173, "target_lay": 173, "linear2linearsearch": 173, "target_op_lut": 173, "lookup": 173, "tabl": [173, 176, 392, 404, 423, 428, 475], "code": [173, 187, 188, 217, 231, 232, 275, 299, 302, 360, 381, 398, 401, 402, 403, 404, 421, 424, 425, 426, 432, 433, 435, 436, 440, 442, 444, 445, 446, 448, 451, 457, 459, 460, 461, 462, 463, 464, 468, 469, 470, 471], "current_pattern": 173, "statu": [173, 389, 396, 420, 459, 461], "selfmhasearch": 173, "classifierheadsearch": 173, "final": [173, 176, 179, 298, 403, 437, 443, 459, 461, 464, 467, 472], "classifi": [173, 179, 199, 243, 273, 326, 421, 424], "classifierheadsearchertf": 173, "squeezer": 174, "postcompressionutil": 174, "librari": [174, 220, 265, 318, 354, 394, 397, 401, 434, 437, 438, 442, 451, 457, 462, 464], "relat": [174, 177, 259, 269, 288, 293, 296, 322, 378, 384, 404, 440, 461, 474], "linearcompress": 174, "root_linear": 174, "target_linear": 174, "also": [174, 198, 201, 216, 242, 245, 258, 266, 319, 326, 337, 360, 397, 399, 402, 403, 404, 420, 423, 427, 431, 433, 436, 437, 440, 445, 450, 451, 454, 457, 458, 459, 461, 462, 464, 465, 469, 472], "while": [174, 176, 179, 298, 305, 364, 402, 403, 421, 427, 433, 438, 440, 445, 457, 463, 464, 466, 469], "hidden": [174, 175, 296, 402], "layer_1": 174, "act_fn": 174, "layer_2": 174, "linearcompressioniter": 174, "linear_pattern": 174, "register_pattern": [175, 296], "sure": [175, 176, 178, 296, 298, 300, 419], "get_pattern": [175, 296], "assertionerror": [175, 176, 179, 296, 297, 298, 327], "basepattern": [175, 177], "unit": [175, 296, 397, 461], "e": [175, 183, 184, 396, 424, 427, 431, 440, 445, 446, 450, 454, 461, 466, 469, 472], "4x1": [175, 183, 184, 292, 437, 461, 475], "is_glob": [175, 296], "local": [175, 183, 184, 296, 392, 450, 454, 461, 468], "contrast": [175, 296, 471], "keep_mask_lay": 175, "invalid_lay": 175, "max_sparsity_ratio_per_op": [175, 176, 180, 183, 184, 437, 461], "sparsiti": [175, 176, 178, 179, 183, 184, 298, 300, 392, 401, 421, 433, 437, 473, 475], "reach": [175, 178, 183, 184, 300, 397, 401, 420, 461, 472], "min_sparsity_ratio_per_op": [175, 180, 183, 184, 437, 461], "minimum": [175, 183, 184, 404, 423, 437, 448, 461, 472], "target_spars": [175, 180, 183, 184, 437, 461, 463, 474], "patternnxm": [175, 296], "nxm": [175, 176, 183, 184, 292, 296, 461], "kept": [175, 296], "block_siz": [175, 296], "height": [175, 212, 216, 255, 258, 296, 426, 471, 474], "width": [175, 212, 216, 255, 258, 296, 426, 461, 464, 471, 474], "vertic": [175, 216, 258, 296, 471], "becaus": [175, 176, 216, 258, 296, 398, 464, 469, 471, 472], "patternninm": [175, 296], "n": [175, 183, 184, 200, 216, 244, 258, 267, 296, 320, 379, 404, 421, 423, 424, 461, 464, 466, 469, 471], "out": [175, 183, 184, 199, 200, 201, 243, 244, 245, 264, 296, 301, 397, 398, 401, 421, 440, 445, 450, 451, 452, 454, 455, 457, 461, 463, 464, 466], "continu": [175, 269, 296, 322, 399, 437, 458, 461, 473], "doc": [175, 183, 184, 296, 314, 315, 326, 360, 375, 376, 379, 392, 436, 437, 452, 455], "md": [175, 183, 184, 296, 326, 360, 403, 426, 464], "patternmha": 175, "mha": [175, 176], "register_prun": [176, 298], "parse_valid_pruner_typ": 176, "get_prun": [176, 298], "cuurent": [176, 298], "baseprun": 176, "current_sparsity_ratio": [176, 298], "global_step": [176, 298], "total": [176, 216, 258, 273, 298, 326, 421, 423, 461, 471, 475], "start_step": [176, 180, 183, 184, 298, 437, 461, 463], "end_step": [176, 180, 183, 184, 298, 437, 461, 463], "pruning_frequ": [176, 180, 183, 184, 437, 461], "target_sparsity_ratio": [176, 298], "show": [176, 392, 396, 424, 426, 437, 443, 458, 469, 472, 473], "basicprun": 176, "arrang": [176, 200, 201, 204, 244, 245, 248, 421, 461], "proce": 176, "regul": 176, "patternlockprun": [176, 286, 298], "parent": [176, 178, 292, 298, 300, 470], "blockmaskprun": 176, "grad": 176, "retrainfreeprun": 176, "pruner_class": 176, "rearrang": 176, "fast": [176, 183, 184, 401, 462], "retrain": [176, 425, 461], "effect": [176, 402, 462], "2204": 176, "09656": 176, "progressiveprun": 176, "interpol": [176, 216, 258, 436, 461, 471], "fine": [176, 199, 243, 421, 443, 461, 462, 464], "grain": [176, 461, 462, 472], "improv": [176, 397, 437, 440, 457, 458, 461, 462, 464, 465, 466, 472, 473, 475], "ad": [176, 199, 243, 266, 305, 319, 364, 403, 404, 423, 438, 440, 445, 448, 452, 455, 461, 470], "interv": [176, 461], "multiheadattentionprun": 176, "mha_modul": 176, "partial": [176, 461, 464], "qkv": 176, "feedward": 176, "simultan": [176, 440, 460, 463], "qkv_name": 176, "query_layer_nam": 176, "key_layer_nam": 176, "value_layer_nam": 176, "ffn_name": 176, "attention_ffn_nam": 176, "mha_nam": 176, "keep": [176, 179, 297, 365, 398, 402, 456, 457, 467], "qkv_modul": 176, "ffn_modul": 176, "mha_compress": 176, "mhacompress": 176, "modifi": [176, 201, 228, 245, 359, 378, 398, 404, 426, 430, 461, 474], "linear_lay": 176, "independ": [176, 354, 359, 404], "length": [176, 183, 184, 199, 216, 243, 258, 269, 322, 401, 421, 436, 462, 464, 471], "4x": [176, 399, 464], "subsequ": [176, 403, 440, 457], "head_mask": 176, "mha_head_s": 176, "similar": [176, 437, 463, 469, 472, 474], "mha_scor": 176, "regular": [177, 266, 297, 319], "register_reg": 177, "regulariz": 177, "get_reg_typ": 177, "get_reg": 177, "basereg": 177, "grouplasso": 177, "coeff": 177, "lasso": [177, 283, 433, 461], "select": [177, 184, 199, 243, 398, 399, 433, 434, 457, 461, 464, 470, 472], "reg_term": 177, "coeffient": 177, "register_schedul": [178, 300], "get_schedul": [178, 300], "pruningschedul": 178, "gradual": [178, 300, 461], "oneshotschedul": [178, 300], "iterativeschedul": [178, 300], "get_sparsity_ratio": 179, "elementwise_over_matmul_gemm_conv": 179, "elementwise_over_al": 179, "blockwise_over_matmul_gemm_conv": 179, "get_sparsity_ratio_tf": 179, "check_config": [179, 297], "prune_config": [179, 297], "everyth": [179, 297, 445], "reset_none_to_default": 179, "undefin": [179, 297], "update_param": 179, "process_weight_config": 179, "global_config": [179, 282, 283, 285, 286, 287], "local_config": [179, 183, 184, 282, 283, 285, 286, 287], "default_config": 179, "pruners_info": 179, "process_yaml_config": 179, "check_key_valid": 179, "template_config": 179, "user_config": 179, "process_and_check_config": [179, 297], "process_config": [179, 297], "parse_last_linear": 179, "often": [179, 420, 424, 460, 461], "act": [179, 197, 241, 396], "might": [179, 398, 472], "caus": [179, 403, 420, 441, 461, 466], "drop": [179, 269, 297, 322, 437, 438, 451, 461, 466, 475], "parse_last_linear_tf": 179, "parse_to_prun": [179, 297], "parse_to_prune_tf": 179, "generate_pruner_config": 179, "dotdict": [179, 180, 184, 337, 392], "prunerv2": 180, "pruning_typ": [180, 183, 184, 437, 461], "pruning_scop": [180, 183, 184, 437, 461], "sparsity_decay_typ": [180, 183, 184, 437, 461], "pruning_op_typ": [180, 183, 184, 437, 461], "reg_typ": 180, "criterion_reduce_typ": 180, "resume_from_pruned_checkpoint": 180, "similiar": 180, "cfg_fname": 180, "parser": 180, "quantization_conf": 180, "pruning_conf": 180, "graph_optimization_conf": [180, 264], "mixedprecision_conf": 180, "benchmark_conf": 180, "nasconfig": [180, 184, 277, 279, 399], "approach": [180, 183, 184, 276, 277, 279, 398, 399, 421, 424, 433, 437, 445, 457, 462, 463, 466, 472, 474], "search_spac": [180, 184, 276, 279, 280, 281], "search_algorithm": [180, 184, 265, 278, 318, 399], "na": [180, 184, 265, 318, 331, 433, 475], "procedur": [180, 399, 461], "deep_get": [181, 337], "dot": [181, 438, 464], "eg": [181, 201, 245, 421, 463], "person": [181, 396, 462], "john": 181, "deep": [181, 401, 402, 403, 420, 433, 434, 437, 438, 440, 442, 445, 446, 448, 451, 457, 462, 464, 472, 473, 475], "deep_set": [181, 337], "sex": [181, 396], "male": 181, "instead": [181, 184, 198, 242, 392, 443, 445, 448, 461], "notat": [181, 184, 392], "pythonic_config": 182, "random_se": [183, 184, 305, 364, 437, 474], "1978": [183, 184], "workspac": [183, 184, 391, 392, 439], "default_workspac": [183, 184], "resume_from": [183, 184, 392], "tensorboard": [183, 184, 384, 392, 402, 437], "set_random_se": [183, 184, 392], "set_workspac": [183, 184, 392], "set_resume_from": [183, 184, 392], "set_tensorboard": [183, 184, 392], "directori": [183, 184, 200, 201, 244, 245, 335, 387, 389, 391, 392, 421, 426, 429, 450, 452, 454, 455, 470], "histori": [183, 184, 391, 392, 457, 472], "nc_workspac": [183, 184], "datetim": [183, 184], "now": [183, 184, 216, 258, 398, 399, 404, 421, 426, 448, 463, 471, 472], "strftime": [183, 184], "d_": [183, 184], "h": [183, 184, 216, 258, 426, 471], "resum": [183, 184, 187, 188, 231, 232, 310, 311, 361, 364, 365, 369, 371, 372], "wa": [183, 184, 402, 437, 462, 472], "flag": [183, 184, 267, 320, 423], "visual": [183, 184, 401, 448, 457, 468, 470, 472, 473], "displai": [183, 184, 314, 315, 375, 376, 392, 457], "2022": [183, 184, 401, 435, 466, 469, 475], "workspace_path": [183, 184], "accuracycriterion": [183, 184, 437, 472], "higher_is_bett": [183, 184, 326, 360, 472, 474], "rel": [183, 184, 337, 437, 463, 472, 474, 475], "tolerable_loss": [183, 184, 437, 472], "01": [183, 184, 437, 463, 466, 472, 474, 475], "higher": [183, 184, 187, 188, 231, 232, 280, 327, 360, 381, 398, 423, 424, 428, 436, 461, 464, 468], "accept": [183, 184, 379, 396, 419, 420], "accuracy_criterion": [183, 184, 337, 437, 459, 463, 472, 474], "avail": [183, 184, 331, 405, 407, 411, 414, 417, 427, 429, 431, 433, 450, 454, 461, 472, 475], "warmup": [183, 184, 419, 437, 463], "inter_num_of_thread": [183, 184, 354, 359, 437, 463], "intra_num_of_thread": [183, 184, 354, 359, 437, 463], "benchmark": [183, 184, 219, 265, 302, 318, 337, 392, 401, 409, 439, 440, 444, 448, 451, 457, 472, 473, 474, 475], "empti": [183, 184, 443], "onnxrt_trt_ep": [183, 184, 438, 464], "onnxrt_cuda_ep": [183, 184, 438, 464], "inter": [183, 184, 197, 201, 241, 245], "intra": [183, 184], "quantizationconfig": 183, "post_training_static_qu": [183, 421, 437, 463, 472], "calibration_sampling_s": [183, 184, 437], "op_type_dict": [183, 184, 404, 463, 464, 466, 472], "op_name_dict": [183, 184, 423, 437, 464, 472], "strategy_kwarg": [183, 184, 468, 472], "timeout": [183, 184, 437, 463, 472, 474], "max_trial": [183, 184, 437, 472], "quant_level": [183, 184, 472], "posttrainingquantconfig": [183, 184, 360, 398, 401, 404, 420, 423, 428, 431, 436, 437, 439, 464, 465, 466, 468, 469, 472], "quantizationawaretrainingconfig": [183, 184, 381, 398, 425, 428, 437, 464, 465, 472], "cv": [183, 184, 461], "object_detect": [183, 184, 269, 322], "nlp": [183, 184, 299, 445, 461, 464], "recommendation_system": [183, 184], "explicitli": [183, 184, 432, 461], "overrid": [183, 184, 392], "quantiztaion": [183, 184], "smooth_quant_arg": [183, 184, 464, 469], "gemm_to_matmul": [183, 184, 464], "graph_optimization_level": [183, 184, 463, 464], "disable_al": [183, 184, 463], "enable_bas": [183, 184], "enable_extend": [183, 184], "enable_al": [183, 184], "first_conv_or_matmul_quant": [183, 184, 464], "last_conv_or_matmul_quant": [183, 184, 464], "pre_post_process_quant": [183, 184, 464], "preprocess": [183, 184, 199, 216, 243, 258, 378, 384, 426, 471], "postprocess": [183, 184, 210, 213, 216, 220, 258, 265, 318, 326, 360, 384, 402, 437, 470, 471], "vaild": [183, 184], "dedic": [183, 184], "quant_format": [183, 184, 263, 428], "constraint": [183, 184, 264, 301, 437, 461, 468, 472, 474], "conv1": [183, 184, 464, 474], "tuning_strategi": [183, 184], "guarante": [183, 184, 437], "models": [183, 184, 337, 437, 459, 463], "footprint": [183, 184, 264, 288, 293, 301, 337, 425, 437, 459, 461, 463], "earli": [183, 184, 437, 464, 472, 474], "stop": [183, 184, 437, 472, 473, 474], "field": [183, 184, 201, 245, 269, 322, 398, 402, 404, 426, 437, 468, 472, 474], "exit": [183, 184, 304, 361, 363, 437, 474], "excluded_precis": [183, 184, 465], "exclud": [183, 184, 402, 465], "conserv": [183, 184, 318, 368], "use_distributed_tun": 183, "weightpruningconfig": [183, 184, 228, 437, 460, 461], "pruning_config": [183, 184, 437], "9": [183, 184, 398, 434, 437, 461, 463, 469, 472, 474, 475], "98": [183, 184, 437, 461, 463, 475], "exp": [183, 184, 437, 461], "link": [183, 184, 199, 243, 326, 360, 421, 428, 450, 454, 457, 475], "90": [183, 184, 474, 475], "magnitude_progress": [183, 184], "snip_progress": [183, 184], "snip_momentum_progress": [183, 184], "pattern_lock": [183, 184, 265, 284, 318], "most": [183, 184, 273, 326, 423, 437, 438, 461, 464, 466, 469, 472, 475], "feasibl": [183, 184], "situat": [183, 184, 426, 461], "unstructur": [183, 184, 292, 433, 461, 475], "8x1": [183, 184], "channelx1": [183, 184, 461], "1xchannel": [183, 184, 461], "itrex": [183, 184], "start": [183, 184, 216, 258, 269, 322, 365, 434, 462, 471, 472, 473, 476], "togeth": [183, 184, 216, 258, 424, 434, 444, 462, 470, 471], "sort": [183, 184, 308, 369, 423, 472], "sinc": [183, 184, 264, 266, 288, 293, 301, 319, 424, 428, 434, 436, 451, 457, 460, 466, 467], "lead": [183, 184, 424, 437, 438, 461, 466, 469], "increas": [183, 184, 422, 433, 440, 457, 472], "cube": [183, 184, 461], "6": [183, 184, 401, 430, 464, 469, 472, 475], "update_config": [183, 184], "10": [183, 184, 201, 245, 305, 364, 401, 419, 421, 428, 434, 437, 461, 463, 471, 472, 475], "knowledgedistillationlossconfig": [183, 184, 424, 425, 437, 460], "hyperparamet": [183, 184, 314, 468, 469, 472], "entropi": [183, 184, 472], "groundtruth": [183, 184, 269, 322], "label": [183, 184, 187, 188, 199, 201, 202, 203, 204, 207, 212, 216, 221, 231, 232, 243, 245, 246, 247, 248, 251, 255, 258, 266, 268, 273, 319, 321, 326, 327, 360, 381, 398, 420, 421, 423, 436, 437, 464, 471], "tpye": [183, 184], "sum": [183, 184, 273, 326, 423, 424], "distillationconfig": [183, 184, 381, 424, 425, 437, 460], "prepare_compress": [183, 184, 381, 398, 424, 425, 437, 460, 461, 464], "criterion_conf": [183, 184], "d_conf": [183, 184, 425, 437, 460], "compression_manag": [183, 184, 381, 398, 424, 425, 437, 460, 461, 464], "sgd": [183, 184, 223, 424, 437, 463, 474], "learning_r": [183, 184, 437, 463, 474], "callabl": [183, 184, 271, 324, 381, 420], "featur": [183, 184, 199, 200, 212, 216, 243, 244, 255, 258, 397, 401, 419, 420, 422, 424, 437, 438, 439, 440, 444, 445, 448, 457, 461, 462, 467, 471], "altern": [183, 184, 360], "distil_loss": [183, 184, 437], "crossentropyloss": [183, 184, 218, 424, 437], "lr": [183, 184, 424, 426, 437], "onnxrt_dnnl_ep": [184, 438, 464], "tuningcriterion": [184, 437, 459, 468, 472], "tuning_criterion": [184, 437, 459, 468, 472], "weight_onli": [184, 466], "ptq": [184, 360, 398, 423, 426, 433, 437, 464, 469, 470, 472], "tri": [184, 472], "meet": [184, 190, 302, 304, 361, 363, 398, 403, 459, 462, 463, 464, 466, 470, 472], "bayesian": [184, 265, 281, 307, 318, 368, 399, 463], "mse_v2": [184, 265, 307, 318, 368], "hawq_v2": [184, 318, 368], "exhaust": [184, 265, 281, 307, 318, 368, 463], "docstr": [184, 379], "copi": [184, 297, 392, 420], "deepcopi": 184, "model_origin": [184, 360, 465], "qat_op_name_dict": 184, "intermediatelayersknowledgedistillationlossconfig": [184, 424], "relationship": 184, "student_layer_nam": 184, "student_layer_output_process": 184, "teacher_layer_nam": 184, "teacher_layer_output_process": 184, "desir": [184, 212, 216, 255, 258, 403, 404, 471], "either": [184, 269, 322, 441, 445, 460, 463, 464], "serv": [184, 335], "numer": [184, 273, 326, 404, 438, 462, 464], "abbrevi": 184, "layer_nam": 184, "l1": 184, "selfknowledgedistillationlossconfig": [184, 424, 437], "student1_layer_name1": 184, "teacher_layer_name1": 184, "student2_layer_name1": 184, "student1_layer_name2": 184, "teacher_layer_name2": 184, "student2_layer_name2": 184, "soft": 184, "l2": [184, 461], "hard": [184, 420, 423], "resblock": 184, "deepst": 184, "02": [184, 469, 475], "mixedprecisionconfig": [184, 327, 379, 437, 438], "mixedprecis": [184, 274, 437], "fp16": [184, 315, 376, 464], "won": [184, 464], "work": [184, 264, 301, 400, 403, 420, 424, 452, 455, 461, 465, 466, 467, 469, 470], "mix_precis": [184, 318, 379, 437, 438], "converted_model": [184, 327, 437, 438], "exportconfig": 184, "14": [184, 262, 263, 428, 434, 469, 475], "dynamic_ax": [184, 263, 428], "qlinear": [184, 201, 208, 245, 252, 273, 326, 402, 447], "ax": [184, 263], "onnxqlinear2qdqconfig": 184, "onnxqlinear2qdq": 184, "torch2onnxconfig": [184, 428], "torch2onnx": [184, 260, 265, 318], "qdq_op_fp32_bia": 184, "qdq_op_int32_bia": 184, "qdq_op_fp32_bias_qdq": 184, "resnet50": [184, 401, 423, 426, 428, 438, 440, 444, 461, 464, 468, 475], "int8_onnx_config": [184, 428], "randn": [184, 428], "224": [184, 212, 255, 401, 421, 426, 428, 431, 437, 440, 471, 474], "batch_siz": [184, 189, 191, 194, 195, 196, 197, 198, 199, 200, 219, 233, 235, 238, 239, 240, 241, 242, 243, 244, 263, 399, 420, 421, 426, 428, 432, 437, 440, 464], "tf2onnxconfig": [184, 428], "tf2onnx": [184, 260, 265, 318], "keyword": 184, "argument": [184, 379, 399, 423, 466], "output_graph": 184, "42": [184, 281, 475], "dyna": [184, 265, 278, 318, 399, 433, 463], "sigopt": [185, 186, 229, 230, 265, 318, 462], "tpe": [185, 186, 229, 230, 265, 318], "sigopttunestrategi": [187, 231], "q_dataload": [187, 188, 231, 232, 305, 308, 310, 311, 361, 364, 365, 369, 371, 372, 432, 472], "eval_func": [187, 188, 231, 232, 302, 305, 308, 310, 311, 327, 360, 361, 364, 365, 369, 371, 372, 379, 381, 398, 420, 421, 423, 424, 425, 426, 437, 464, 465, 466, 472, 474], "eval_metr": [187, 188, 327, 360, 361, 364, 365, 369, 371, 372, 381, 436, 464], "q_hook": [187, 188, 231, 232, 305, 308, 310, 311, 361, 364, 365, 369, 371, 372], "hpo": [187, 231], "mandatori": [187, 188, 231, 232, 360, 437, 474], "yield": [187, 188, 197, 219, 231, 232, 241, 305, 327, 360, 364, 379, 381, 420, 464, 472], "_": [187, 188, 231, 232, 360, 398, 399, 402, 403, 420, 423, 424, 426, 428, 430, 437, 438, 439, 440, 446, 450, 452, 454, 455, 459, 461, 464, 466, 467, 468, 469, 470, 472, 474], "well": [187, 188, 231, 232, 327, 360, 381, 399, 401, 421, 461, 464, 467, 469, 474], "taken": [187, 188, 231, 232, 327, 360, 381, 464], "reserv": [187, 188, 231, 232], "abl": [187, 188, 231, 232, 327, 360, 381, 448, 457, 464], "tuner": [187, 188, 231, 232, 264, 301, 327, 360, 381, 464], "scalar": [187, 188, 231, 232, 327, 360, 381, 436, 464], "pseudo": [187, 188, 231, 232, 360, 381, 470], "someth": [187, 188, 201, 231, 232, 245, 360, 381], "fefin": [188, 232], "tpetunestrategi": [188, 232], "basedatalod": [189, 233], "basedataload": [189, 194, 196, 233, 238, 240], "last_batch": [189, 191, 194, 195, 196, 198, 219, 233, 235, 238, 239, 240, 242], "rollov": [189, 191, 194, 195, 196, 198, 219, 233, 235, 238, 239, 240, 242, 420], "collate_fn": [189, 191, 192, 194, 195, 196, 198, 219, 233, 235, 236, 238, 239, 240, 242, 421], "sampler": [189, 191, 193, 194, 195, 196, 198, 219, 233, 235, 237, 238, 239, 240, 242, 254, 265, 314, 375, 420, 426], "batch_sampl": [189, 191, 194, 195, 196, 198, 219, 233, 235, 238, 239, 240, 242], "num_work": [189, 191, 194, 195, 196, 198, 219, 233, 235, 238, 239, 240, 242, 437, 464], "pin_memori": [189, 191, 194, 195, 196, 198, 219, 233, 235, 238, 239, 240, 242], "shuffl": [189, 191, 194, 195, 196, 198, 219, 233, 235, 238, 239, 240, 242, 420, 437, 464], "_generate_dataload": [189, 233], "check_dataload": 190, "default_col": [191, 235], "outer": [191, 235], "defaultdataload": [191, 198, 235, 242], "definit": [192, 197, 236, 241], "style": [192, 206, 236, 250, 379, 397, 421, 432], "drop_last": [192, 197, 236, 241], "iterablefetch": [192, 236], "indexfetch": [192, 236], "base_dataload": [193, 237, 254, 265], "default_dataload": [193, 237, 254, 265], "fetcher": [193, 237, 254, 265], "mxnet_dataload": [193, 237, 254, 265], "onnxrt_dataload": [193, 237, 254, 265, 353], "pytorch_dataload": [193, 237, 254, 265], "tensorflow_dataload": [193, 237, 254, 265, 358], "mxnetdataload": [194, 238], "onnxrtbertdataload": [195, 239], "varient": [195, 239], "onnxrtdataload": [195, 239, 353], "pytorchdataload": [196, 240], "data_sourc": [197, 241, 384], "__iter__": [197, 201, 241, 245, 420, 421, 437], "matter": [197, 241, 465], "iterablesampl": [197, 241], "squential": [197, 241], "your": [197, 199, 241, 243, 397, 420, 421, 423, 426, 435, 437, 440, 443, 444, 445, 450, 451, 452, 454, 455, 457, 461, 462, 468, 470, 472, 473], "clear": [197, 241, 402, 430, 436, 437], "iterabledataset": [197, 201, 241, 245], "try": [197, 241, 398, 423, 461, 464, 469, 472], "indexdataset": [197, 241], "__getitem__": [197, 201, 216, 241, 245, 258, 421, 437], "__len__": [197, 201, 241, 245, 421], "retriev": [197, 241], "sequentialsampl": [197, 241], "sequenti": [197, 241, 302, 304, 361, 363, 472], "batchsampl": [197, 241], "tfdatadataload": [198, 242], "tensorflow1": [198, 242], "coupl": [198, 242], "satisfi": [198, 242, 423, 434], "usag": [198, 242, 269, 275, 302, 322, 379, 403, 421, 426, 427, 440, 448, 459, 463, 471], "tf1": [198, 242, 439], "although": [198, 242, 468], "tensorflowbertdataload": [198, 242], "tensorflowmodelzoobertdataload": [198, 242], "zoo": [198, 216, 242, 258, 401, 427, 431, 475], "tensorflowdataload": [198, 242, 358], "pytorchbertdataset": [199, 243], "model_typ": [199, 243, 392, 421], "construct": [199, 202, 203, 206, 214, 219, 221, 222, 224, 243, 246, 247, 250, 326, 331, 335, 378, 384, 396, 403, 404, 421, 426, 461, 472], "tensordataset": [199, 243, 421], "repo": [199, 243, 395, 421, 427, 450, 452, 454, 455, 476], "easi": [199, 243, 301, 428, 437, 462, 464, 468], "load": [199, 215, 216, 243, 257, 258, 327, 335, 360, 391, 392, 403, 420, 450, 454, 458, 463, 464, 469], "squad": [199, 216, 243, 258, 270, 271, 273, 323, 324, 326, 421, 436, 461, 471, 475], "distilbert": [199, 243, 401, 421, 438, 462, 475], "xlnet": [199, 243, 421, 475], "xlm": [199, 243, 421, 475], "101": [199, 243, 273, 326, 436, 469, 475], "2043": [199, 243], "2001": [199, 243], "onnxrtbertdataset": [199, 243], "data_dir": [199, 243, 421], "model_name_or_path": [199, 243, 421, 437, 445, 446], "max_seq_length": [199, 216, 243, 258, 421, 471], "do_lower_cas": [199, 215, 216, 243, 257, 258, 421, 471], "mrpc": [199, 243, 273, 326, 421, 436, 445, 461, 472, 475], "dynamic_length": [199, 243, 421], "shortcut": [199, 243, 421], "token": [199, 210, 213, 216, 243, 254, 256, 258, 265, 266, 267, 318, 319, 320, 387, 421, 436, 437, 466, 468, 469, 471, 472], "longer": [199, 216, 243, 258, 421, 471], "truncat": [199, 216, 243, 258, 421, 471], "shorter": [199, 216, 243, 258, 421, 471], "lowercas": [199, 243, 421], "choic": [199, 243, 402, 421, 436, 469], "qqp": [199, 243, 421, 436, 475], "qnli": [199, 243, 421, 436, 475], "rte": [199, 243, 421, 436, 475], "st": [199, 243, 421, 436], "cola": [199, 243, 421, 436, 475], "mnli": [199, 243, 421, 436, 475], "wnli": [199, 243, 421, 436], "mobilebert": [199, 243, 421, 424, 475], "roberta": [199, 243, 421, 475], "uncas": [199, 216, 243, 258, 421, 471, 475], "load_and_cache_exampl": [199, 243], "cach": [199, 243, 429, 464, 466], "convert_examples_to_featur": [199, 216, 243, 258], "max_length": [199, 243], "label_list": [199, 243, 273, 326], "output_mod": [199, 243], "classif": [199, 216, 243, 258, 273, 299, 326, 424, 428, 436, 446, 461, 462], "pad_token": [199, 243], "pad_token_segment_id": [199, 243], "mask_padding_with_zero": [199, 243], "inputfeatur": [199, 216, 243, 258], "properti": [199, 243, 378, 435], "input_id": [199, 216, 243, 258, 437], "vocabulari": [199, 215, 216, 243, 257, 258, 471], "attention_mask": [199, 243, 437], "usual": [199, 243, 403, 423, 424, 460, 461, 464, 469], "NOT": [199, 243, 430], "token_type_id": [199, 243, 437], "segment": [199, 243, 267, 269, 320, 322], "portion": [199, 243], "problem": [199, 243, 273, 326, 436, 438, 458], "regress": [199, 243, 423], "seq_length": [199, 243], "tensorflowbertdataset": [199, 243], "label_fil": [199, 216, 243, 258, 421, 471], "tfrecord": [199, 200, 201, 243, 244, 245, 421], "guid": [199, 243, 398, 401, 421, 424, 434, 440, 448, 457, 476], "parsedecodebert": [199, 243], "tensorflowmodelzoobertdataset": [199, 200, 243, 244], "num_cor": [199, 200, 204, 243, 244, 248, 421], "28": [199, 200, 204, 243, 244, 248, 421, 475], "coco": [200, 207, 211, 244, 251, 269, 273, 322, 326, 436, 461], "parsedecodecoco": [200, 244], "cocorecorddataset": [200, 244], "interleav": [200, 244, 421], "parallel": [200, 244, 354, 359, 421, 437, 472], "cocoraw": [200, 244, 421], "img_dir": [200, 244, 421], "val2017": [200, 244, 421], "anno_dir": [200, 244, 421], "annot": [200, 244, 269, 322, 379, 403, 404, 421, 436, 461, 472], "instances_val2017": [200, 244, 421], "jpg": [200, 204, 206, 244, 248, 250, 421], "imag": [200, 201, 204, 206, 212, 216, 244, 245, 248, 250, 255, 258, 269, 322, 421, 426, 428, 461, 463, 469, 470, 471, 475], "coconpi": [200, 244, 421], "npy_dir": [200, 244, 421], "npy": [200, 244, 421], "tensorflowdataset": [201, 245], "pytorchdataset": [201, 245], "mxnetdataset": [201, 245], "onnxrtqldataset": [201, 245], "onnxrtitdataset": [201, 245], "IT": [201, 208, 245, 252, 462], "pytorchmxnetwrapdataset": [201, 245], "datafunc": [201, 245], "pytorchmxnetwrapfunct": [201, 216, 245, 258], "framework_dataset": [201, 245], "convent": [201, 245, 269, 322, 424], "imageclassifi": [201, 245], "tensorflow_itex": [201, 204, 206, 208, 245, 248, 250, 252, 420, 463], "onnxrt_qdq": [201, 208, 245, 252, 463], "onnxrt_qlinearop": [201, 208, 216, 245, 252, 258, 463], "onnxrt_integerop": [201, 208, 216, 245, 252, 258, 463], "pytorch_ipex": [201, 208, 245, 252, 437, 463, 474], "pytorch_fx": [201, 208, 245, 252, 437, 463], "dataset_registri": [201, 245], "dataset_typ": [201, 245], "dataset_format": [201, 245], "data_format": [201, 212, 245, 255], "raw_imag": [201, 245], "overwrit": [201, 245, 450, 454], "download_url": [201, 245], "filenam": [201, 245, 392, 421], "md5": [201, 245], "download": [201, 245, 421, 423, 434, 467], "address": [201, 245, 396, 438, 462], "gen_bar_updat": [201, 245], "progress": [201, 245, 451, 457, 461, 464], "bar": [201, 245, 457, 462], "check_integr": [201, 245], "fpath": [201, 245], "checksum": [201, 245], "calculate_md5": [201, 245], "chunk_siz": [201, 245], "cifar10": [201, 245, 421], "cifar100": [201, 245, 421], "databas": [201, 245], "otherwis": [201, 216, 245, 258, 392, 396, 403, 421, 452, 455, 463, 471], "www": [201, 245, 421, 475], "toronto": [201, 245, 421], "kriz": [201, 245, 421], "cifar": [201, 245, 421, 475], "tar": [201, 245, 421, 423, 452, 455], "gz": [201, 245, 421, 423, 452, 455], "manual": [201, 245, 421, 440, 446, 448, 451], "subset": [201, 204, 245, 248, 421], "internet": [201, 245, 421], "put": [201, 245, 421, 424], "again": [201, 245, 421, 465], "pytorchcifar10": [201, 245], "mxnetcifar10": [201, 245], "tensorflowcifar10": [201, 245], "pytorchcifar100": [201, 245], "mxnetcifar100": [201, 245], "tensorflowcifar100": [201, 245], "mnist": [201, 245, 421, 426], "nation": [201, 245, 396], "institut": [201, 245], "standard": [201, 216, 245, 258, 403, 423, 428, 436, 471, 472], "technologi": [201, 245, 437], "fashionmnist": [201, 245, 421], "npz": [201, 245, 421], "idx1": [201, 245, 421], "ubyt": [201, 245, 421], "idx3": [201, 245, 421], "t10k": [201, 245, 421], "pytorchmnist": [201, 245], "mxnetmnist": [201, 245], "tensorflowmnist": [201, 245], "pytorchfashionmnist": [201, 245], "mxnetfashionmnist": [201, 245], "tensorflowfashionmnist": [201, 245], "imagefold": [201, 245, 421, 426, 437], "expect": [201, 245, 396, 397, 429, 457, 464, 466, 472], "subfold": [201, 245], "belong": [201, 245, 331, 464], "class_1": [201, 245, 421], "xxx": [201, 245, 397, 421, 437], "png": [201, 245, 421], "xxy": [201, 245, 421], "xxz": [201, 245, 421], "class_n": [201, 245, 421], "123": [201, 245, 421, 471], "nsdf3": [201, 245, 421], "asd932_": [201, 245, 421], "categori": [201, 245, 268, 321, 419, 421, 447], "mxnetimagefold": [201, 245], "tensorflowtfrecorddataset": [201, 245], "tensorflowimagerecord": [201, 245], "imagenet": [201, 204, 212, 245, 248, 255, 399, 423, 437, 446, 461, 470, 471, 474, 475], "000": [201, 245, 401, 421], "001": [201, 245, 421, 426, 469, 474], "099": [201, 245, 421], "tensorflowvocrecord": [201, 245], "pascal": [201, 245], "voc": [201, 245, 273, 326], "2012": [201, 245], "00000": [201, 245], "00004": [201, 245], "00001": [201, 245], "00003": [201, 245], "dummydataset": [202, 203, 246, 247], "127": [202, 203, 246, 247, 421, 464, 469], "float32": [202, 203, 216, 246, 247, 258, 269, 322, 402, 419, 421, 437, 464, 469, 471], "stand_norm": [202, 203, 246, 247, 421], "dummy_v2": [203, 247, 421], "sparse_dummy_v2": [203, 247, 421], "label_shap": [203, 247, 421], "sparsedummydataset": [203, 247], "dense_shap": [203, 247, 421], "sparse_ratio": [203, 247, 421], "imagenetraw": [204, 248, 421], "data_path": [204, 248, 421], "image_list": [204, 248, 421], "img1": [204, 248, 421], "img2": [204, 248, 421], "imgx": [204, 248, 421], "val_map": [204, 248, 421], "txt": [204, 248, 421, 423, 434], "pytorchimagenetraw": [204, 248], "mxnetimagenetraw": [204, 248], "tensorflowimagenetraw": [204, 248], "inteltensorflow": [204, 206, 248, 250, 434], "tensorflowimagenetdataset": [204, 248], "onnxrtimagenetdataset": [204, 248], "bert_dataset": [205, 210, 249, 254, 265, 318], "coco_dataset": [205, 210, 249, 254, 265, 318], "dummy_dataset": [205, 210, 249, 254, 265, 318], "dummy_dataset_v2": [205, 210, 249, 254, 265, 318], "imagenet_dataset": [205, 210, 249, 254, 265, 318], "style_transfer_dataset": [205, 210, 249, 254, 265, 318], "styletransferdataset": [206, 250], "content_fold": [206, 250, 421], "style_fold": [206, 250, 421], "crop_ratio": [206, 250, 421], "resize_shap": [206, 250, 421], "256": [206, 212, 250, 255, 421, 426, 437, 471], "image_format": [206, 250, 421], "holder": [206, 250, 421], "labelbalancecocorecordfilt": [207, 251], "balanc": [207, 251, 466, 469], "labelbalancecocorawfilt": [207, 251], "tensorflowfilt": [208, 252], "onnxrtqlfilt": [208, 252], "onnxrtitfilt": [208, 252], "pytorchfilt": [208, 252], "mxnetfilt": [208, 252], "filter_registri": [208, 252], "filter_typ": [208, 252], "__call__": [208, 252], "coco_filt": [209, 210, 253, 254, 265, 318], "imagenet_transform": [210, 213, 254, 256, 265, 318], "parsedecodecocotransform": 211, "decod": [211, 212, 255, 266, 319, 436, 471], "quantizedinput": [212, 255, 471], "labelshift": [212, 255, 471], "label_shift": [212, 255, 471], "parsedecodeimagenet": [212, 255, 471], "proto": [212, 216, 255, 258, 471], "parsedecodeimagenettransform": [212, 255], "tensorflowtransposelastchannel": 212, "tensorflowshiftrescal": 212, "rescal": [212, 216, 258, 471], "tensorflowresizecropimagenettransform": [212, 255], "random_crop": [212, 255, 471], "resize_sid": [212, 255, 471], "resize_method": [212, 255], "bilinear": [212, 216, 255, 258, 471], "random_flip_left_right": [212, 255, 471], "mean_valu": [212, 255, 471], "channels_last": [212, 255, 440], "subpixel": [212, 255], "rgb": [212, 255], "seri": [212, 255, 401, 434, 437, 471], "applic": [212, 255, 404, 428, 440, 457, 462, 466, 469, 470, 471, 473], "crop": [212, 216, 255, 258, 421, 471], "flip": [212, 216, 255, 258, 471], "left": [212, 216, 255, 258, 451, 457, 469, 471], "right": [212, 255, 269, 322, 396, 398, 457, 469, 471], "std": [212, 216, 255, 258, 437, 471], "bilinearimagenettransform": [212, 255], "central_fract": [212, 255, 471], "875": [212, 255, 471], "fraction": [212, 255, 471], "onnxbilinearimagenettransform": [212, 255], "onnxresizecropimagenettransform": [212, 255], "std_valu": [212, 255], "229": [212, 255, 437], "225": [212, 255, 437], "resizewithaspectratio": [212, 255], "87": [212, 255, 475], "inter_pol": [212, 255], "cv2": [212, 255], "inter_area": [212, 255], "aspect": [212, 216, 255, 258, 471], "postprocess_cl": [214, 224, 437], "user_postprocess": [214, 224], "convert_to_unicod": [215, 257], "unicod": [215, 257], "assum": [215, 257, 269, 280, 322, 402, 430, 457], "utf": [215, 257], "load_vocab": [215, 257], "vocab_fil": [215, 216, 257, 258, 471], "convert_by_vocab": [215, 257], "vocab": [215, 257], "whitespace_token": [215, 257], "whitespac": [215, 257, 271, 324], "clean": [215, 257, 397, 437], "piec": [215, 257, 266, 319, 436, 466], "fulltoken": [215, 257], "tokenzi": [215, 257], "basictoken": [215, 257], "punctuat": [215, 257, 266, 271, 319, 324], "lower": [215, 216, 257, 258, 271, 324, 365, 425, 461, 462, 464, 469, 471, 472], "wordpiecetoken": [215, 257], "unk_token": [215, 257], "unk": [215, 257], "max_input_chars_per_word": [215, 257], "200": [215, 257, 398, 472], "wordpiec": [215, 216, 257, 258, 471], "concat_gener": [216, 258], "inc": [216, 258, 396, 401, 403, 440, 447, 457, 462, 463, 467, 472], "tensorflowtransform": [216, 258], "mxnettransform": [216, 258], "pytorchtransform": [216, 258], "onnxrtqltransform": [216, 258], "onnxrtittransform": [216, 258], "transform_registri": [216, 258], "transform_typ": [216, 258], "basetransform": [216, 258], "tensorflowwrapfunct": [216, 258], "transform_func": [216, 258], "pytorchmxnettransform": [216, 258], "get_torchvision_map": [216, 258], "torchvis": [216, 258, 427, 431, 440, 446], "composetransform": [216, 258], "transform_list": [216, 258, 471], "compos": [216, 258, 384, 471], "croptoboundingbox": [216, 258, 471], "offset_height": [216, 258, 471], "offset_width": [216, 258, 471], "target_height": [216, 258, 471], "target_width": [216, 258, 471], "box": [216, 258, 269, 273, 322, 326, 398, 436, 440, 451, 457, 470, 471, 472], "coordin": [216, 258, 305, 364, 471, 472], "top": [216, 258, 264, 273, 288, 293, 301, 326, 436, 457, 471], "corner": [216, 258, 402, 404, 471], "horizont": [216, 258, 471], "mxnetcroptoboundingbox": [216, 258], "onnxrtcroptoboundingbox": [216, 258], "tensorflowcroptoboundingbox": [216, 258], "resizewithratio": [216, 258, 471], "min_dim": [216, 258, 471], "800": [216, 258, 471], "max_dim": [216, 258, 471], "1365": [216, 258, 471], "constant_valu": [216, 258], "longest": [216, 258, 471], "side": [216, 258, 421, 451, 471], "doesn": [216, 258, 402, 426, 437, 438, 458, 474], "exce": [216, 258, 471], "tensorflowresizewithratio": [216, 258], "perm": [216, 258, 471], "permut": [216, 258, 471], "tensorflowtranspos": [216, 258], "mxnettranspos": [216, 258], "pytorchtranspos": [216, 258], "randomverticalflip": [216, 258, 471], "randomli": [216, 258, 281, 305, 364, 399, 469, 471, 472], "tensorflowrandomverticalflip": [216, 258], "randomhorizontalflip": [216, 258, 437, 471], "tensorflowrandomhorizontalflip": [216, 258], "toarrai": [216, 258, 471], "pil": [216, 258, 471], "casttftransform": [216, 258], "castonnxtransform": [216, 258], "castpytorchtransform": [216, 258], "centercroptftransform": [216, 258], "center": [216, 258, 400, 401, 434, 471, 472], "paddedcentercroptransform": [216, 258], "crop_pad": [216, 258], "resizetftransform": [216, 258], "bicub": [216, 258, 471], "resizepytorchtransform": [216, 258], "randomcroptftransform": [216, 258], "randomresizedcroppytorchtransform": [216, 258], "08": [216, 258, 471, 475], "randomresizedcropmxnettransform": [216, 258], "randomresizedcroptftransform": [216, 258], "normalizetftransform": [216, 258], "deviat": [216, 258, 423, 471], "broadcast": [216, 258, 426, 471], "rescalekeraspretraintransform": [216, 258], "rescaletftransform": [216, 258], "rescaletransform": [216, 258], "alignimagechanneltransform": [216, 258], "dim": [216, 258, 469, 471], "align": [216, 258, 396, 471], "w": [216, 258, 461, 469, 471], "must": [216, 258, 269, 322, 397, 398, 403, 419, 420, 434, 464, 471], "pytorchalignimagechannel": [216, 258], "tondarraytransform": [216, 258], "resizemxnettransform": [216, 258], "resizetransform": [216, 258], "cropresizetftransform": [216, 258], "boundari": [216, 258, 471], "area": [216, 258, 269, 322, 436, 471], "pytorchcropresizetransform": [216, 258], "mxnetcropresizetransform": [216, 258], "cropresizetransform": [216, 258], "centercroptransform": [216, 258], "mxnetnormalizetransform": [216, 258], "pytorchnormalizetransform": [216, 258], "normalizetransform": [216, 258], "randomcroptransform": [216, 258], "randomresizedcroptransform": [216, 258], "get_final_text": [216, 258], "pred_text": [216, 258], "orig_text": [216, 258], "project": [216, 258, 395, 396, 397, 462, 468, 472, 476], "squadexampl": [216, 258], "qas_id": [216, 258], "question_text": [216, 258], "doc_token": [216, 258], "orig_answer_text": [216, 258], "start_posit": [216, 258], "end_posit": [216, 258], "is_imposs": [216, 258], "simpl": [216, 258, 434, 437, 468, 469, 472], "answer": [216, 258, 270, 271, 323, 324, 396, 461, 471, 475], "posit": [216, 258, 396, 436, 440], "unique_id": [216, 258], "example_index": [216, 258], "doc_span_index": [216, 258], "token_to_orig_map": [216, 258], "token_is_max_context": [216, 258], "input_mask": [216, 258, 437], "segment_id": [216, 258, 437], "read_squad_exampl": [216, 258], "input_fil": [216, 258], "doc_strid": [216, 258, 471], "max_query_length": [216, 258, 471], "output_fn": [216, 258], "inputbatch": [216, 258], "collecttransform": [216, 258], "10833": [216, 258], "tfsquadv1posttransform": [216, 258], "n_best_siz": [216, 258, 471], "20": [216, 258, 469, 471, 474, 475], "384": [216, 258, 471], "64": [216, 258, 399, 469, 471, 475], "max_answer_length": [216, 258, 471], "30": [216, 258, 427, 431, 433, 469, 471, 475], "nbest_predict": [216, 258, 471], "question": [216, 258, 270, 271, 323, 324, 396, 397, 402, 434, 440, 461, 469, 471, 475], "anoth": [216, 258, 266, 275, 319, 392, 423, 424, 450, 454, 471, 472], "long": [216, 258, 429, 471], "document": [216, 258, 379, 397, 403, 404, 409, 426, 438, 442, 452, 455, 456, 467, 471, 473], "chunk": [216, 258, 471], "tfmodelzoocollecttransform": [216, 258], "tfsquadv1modelzooposttransform": [216, 258], "squadv1": [216, 258, 471], "see": [216, 258, 266, 319, 396, 398, 400, 435, 437, 450, 451, 454, 457, 458, 466, 469, 470, 472], "parsedecodevoctransform": [216, 258], "conf_fname_or_obj": [217, 226, 259, 264, 274, 275, 276, 277, 279, 288, 293, 301], "thei": [217, 379, 396, 424, 430, 437, 445, 459], "possibl": [217, 423, 460, 461, 465, 472], "unnecessari": [217, 437], "tensorflowcrossentropyloss": 218, "pytorchcrossentropyloss": 218, "tensorflowsparsecategoricalcrossentropi": 218, "sparsecategoricalcrossentropyloss": 218, "setter": 219, "calib_dataload": [219, 302, 360, 398, 401, 420, 421, 423, 431, 432, 436, 437, 464, 465], "reason": [219, 396, 403, 420, 466, 470, 472], "know": [219, 426, 467], "known": [219, 305, 364, 437, 470, 472], "open": [220, 265, 318, 384, 394, 396, 401, 428, 429, 437, 452, 455, 458, 462], "metric_cl": [221, 326, 360, 437], "user_metr": [221, 326, 360], "alwai": [221, 269, 322, 326, 360, 423, 436, 437], "recommend": [221, 326, 402, 421, 430, 448, 451, 456, 458, 461, 463, 472], "set_backend": 222, "tensorflowoptim": 223, "pytorchoptim": 223, "optimizer_registri": 223, "optimizer_typ": 223, "cross": [223, 273, 326, 432, 472], "tensorflowsgd": 223, "tensorflowadamw": 223, "tensorflow_addon": 223, "adamw": 223, "tensorflowadam": 223, "adam": [223, 474], "pytorchsgd": 223, "record_output": 225, "output_process": 225, "get_activ": 225, "f": [228, 424, 426, 464, 466, 469], "pickle_modul": 228, "pickle_protocol": 228, "_use_new_zipfile_seri": 228, "prepare_prun": [228, 461], "opt": [228, 401, 445, 469, 472], "tensorflowimagefold": 245, "qlinear2qdq": [260, 265, 318], "qlinearop": [261, 423, 433, 448, 464, 475], "check_model": 261, "modelproto": [261, 327, 439], "onnx_qlinear_to_qdq": 261, "input_name_to_nod": 261, "destin": [261, 275], "tf_to_fp32_onnx": 262, "tf_to_int8_onnx": 262, "int8_model": [262, 263, 402], "get_node_map": 263, "fp32_onnx_path": 263, "module_node_map": 263, "get_quantizable_onnx_op": 263, "quantize_nod": 263, "dynamic_quant_export": 263, "pt_fp32_model": 263, "pt_int8_model": 263, "weight_typ": 263, "s8": 263, "static_quant_export": 263, "_quantiz": 263, "torch_to_fp32_onnx": 263, "do_constant_fold": 263, "verbos": [263, 305, 364], "torch_to_int8_onnx": 263, "achiev": [264, 301, 428, 437, 460, 461, 462, 464, 470, 472], "across": [264, 274, 301, 327, 422, 437, 461, 469, 472], "variou": [264, 274, 301, 327, 404, 433, 440, 461, 463], "dl": [264, 274, 288, 293, 301, 327, 423, 432, 444, 457, 462, 475], "bring": [264, 301, 451, 469], "unifi": [264, 301, 402, 403, 404, 420, 432, 433, 436, 437, 439], "vari": [264, 288, 293, 301, 461, 469, 475], "roc": [264, 273, 288, 293, 301, 326], "flexibl": [264, 288, 293, 301, 424, 461], "via": [264, 288, 293, 301, 396, 426, 433, 437, 440, 457, 461], "popular": [265, 318, 394, 401, 402, 403, 424, 427, 428, 431, 437, 461, 464, 466, 472, 473], "techniqu": [265, 318, 394, 401, 433, 437, 440, 460, 461, 462, 463, 464, 473, 474, 475], "bleu": [265, 267, 272, 318, 320, 325, 436, 461], "bleu_util": [265, 272, 318, 325], "coco_label_map": [265, 272, 318, 325], "coco_tool": [265, 272, 318, 325], "evaluate_squad": [265, 272, 318, 325], "f1": [265, 270, 272, 273, 318, 323, 325, 326, 426, 436, 437, 468, 475], "basic_na": [265, 278, 318], "nas_util": [265, 278, 318], "pruner_legaci": [265, 318], "gradient_sensit": [265, 284, 318], "group_lasso": [265, 284, 318], "pruning_recip": [265, 318], "tile_pattern": [265, 289, 290], "pytorch_prun": [265, 318], "logger": [265, 294, 318, 382, 385, 392], "prune_util": [265, 294, 318], "tuning_sampl": [265, 307, 313, 318, 368, 374], "tuning_spac": [265, 307, 313, 314, 316, 318, 368, 374, 375, 377], "tuning_struct": [265, 307, 313, 314, 315, 318, 368, 374, 375, 376], "auto_mixed_precis": [265, 307, 318, 368], "graph_optim": [265, 318], "mixed_precis": [265, 318, 327, 437], "model_convers": [265, 318], "pruning_v2": [265, 318], "unicoderegex": [266, 319], "hoc": [266, 319], "hack": [266, 319], "recogn": [266, 319, 472], "nondigit_punct_r": [266, 319], "compil": [266, 319, 437], "express": [266, 319, 396], "preced": [266, 319, 469], "digit": [266, 319, 392, 462], "punct_nondigit_r": [266, 319], "symbol_r": [266, 319], "bleu_token": [266, 319], "mose": [266, 319, 466], "smt": [266, 319], "mosesdecod": [266, 319], "mteval": [266, 319], "v14": [266, 319], "pl": [266, 319], "l954": [266, 319], "l983": [266, 319], "bilingu": [266, 319], "understudi": [266, 319], "qualiti": [266, 319], "machin": [266, 319, 428, 434, 443, 457, 462, 469, 470], "translat": [266, 267, 319, 320, 461, 472], "natur": [266, 319, 428], "approxim": [266, 267, 319, 320, 403, 436], "glue": [266, 273, 319, 326, 421, 436, 437, 446], "word": [266, 319, 436, 461, 466, 475], "ngram": [266, 319, 436], "breviti": [266, 267, 319, 320, 436], "penalti": [266, 267, 319, 320, 436], "doe": [266, 319, 378, 420, 421, 436, 437, 467, 471], "beam": [266, 319, 436], "tensor2tensor": [267, 320], "bleu_hook": [267, 320], "compute_bleu": [267, 320], "reference_corpu": [267, 320], "translation_corpu": [267, 320], "max_ord": [267, 320], "use_bp": [267, 320], "against": [267, 320], "gram": [267, 320], "bleu_scor": [267, 320], "third": [269, 322, 435], "parti": [269, 322, 435, 464], "pycocotool": [269, 322, 429, 434], "noth": [269, 322, 472], "thu": [269, 322, 437, 461, 464], "cannot": [269, 322, 398, 429, 470], "jonathanhuang": [269, 322], "image_id": [269, 322, 436], "encod": [269, 322, 471], "invok": [269, 322, 403], "groundtruth_dict": [269, 322], "exportgroundtruthtococo": [269, 322], "groundtruth_boxes_list": [269, 322], "groundtruth_classes_list": [269, 322], "max_num_class": [269, 322], "output_path": [269, 322], "detections_list": [269, 322], "exportdetectionstococo": [269, 322], "detection_boxes_list": [269, 322], "detection_scores_list": [269, 322], "detection_classes_list": [269, 322], "cocowrapp": [269, 322], "loadannot": [269, 322], "cocoevalwrapp": [269, 322], "agnostic_mod": [269, 322], "computemetr": [269, 322], "detection_typ": [269, 322], "bbox": [269, 322, 398, 436], "hold": [269, 305, 322, 364, 421], "iou_typ": [269, 322], "iou_thr": [269, 273, 322, 326, 436], "map_point": [269, 273, 322, 326, 436], "cocoev": [269, 322], "mscoco": [269, 322], "Then": [269, 322, 403, 423, 450, 452, 454, 455, 469, 472], "exportsingleimagegroundtruthtococo": [269, 322], "next_annotation_id": [269, 322], "category_id_set": [269, 322], "groundtruth_box": [269, 322], "groundtruth_class": [269, 322], "groundtruth_mask": [269, 322], "groundtruth_is_crowd": [269, 322], "ingest": [269, 322], "here": [269, 322, 379, 403, 421, 426, 427, 428, 430, 431, 436, 445, 452, 455, 457, 464, 467, 468, 475], "ones": [269, 322, 461], "exportsingleimagedetectionstococo": [269, 322], "uniqu": [269, 302, 322, 464], "assign": [269, 322, 392, 426, 463, 472], "num_gt_box": [269, 322], "num_detect": [269, 273, 322, 326, 436, 437, 474], "image_height": [269, 322], "image_width": [269, 322], "detection_mask": [269, 322], "crowd": [269, 322], "insid": [269, 322, 424, 425, 458, 461, 472], "exportsingleimagedetectionboxestococo": [269, 322], "detection_box": [269, 322, 437, 474], "detection_scor": [269, 322, 437, 474], "detection_class": [269, 322, 437, 474], "exporsingleimagedetectionboxestococo": [269, 322], "exportsingleimagedetectionmaskstococo": [269, 322], "allenai": [270, 271, 323, 324], "bi": [270, 271, 323, 324], "att": [270, 271, 323, 324], "flow": [270, 271, 323, 324, 398, 399, 437], "f1_score": [270, 271, 323, 324], "ground_truth": [270, 271, 323, 324], "ground": [270, 271, 323, 324], "truth": [270, 271, 323, 324], "metric_max_over_ground_truth": [270, 271, 323, 324], "metric_fn": [270, 271, 323, 324], "exact_match_scor": [270, 323], "exact": [270, 323], "averag": [270, 271, 273, 323, 324, 326, 436, 437, 472], "articl": [270, 271, 323, 324], "paragraph": [270, 271, 323, 324], "qa": [270, 271, 323, 324], "cantain": [270, 271, 323, 324], "normalize_answ": [271, 324], "extra": [271, 324, 437], "newlin": [271, 324, 392], "tab": [271, 324, 457, 470], "harmon": [271, 273, 324, 326], "recal": [271, 273, 324, 326], "answer_start": [271, 324], "177": [271, 324], "denver": [271, 324], "bronco": [271, 324], "nfl": [271, 324], "team": [271, 324, 396, 465], "afc": [271, 324], "super": [271, 324, 399], "bowl": [271, 324], "50": [271, 324, 399, 403, 469, 475], "56be4db0acb8001400a502ec": [271, 324], "form": [271, 324, 423, 424, 457], "percentag": [271, 324, 474], "tensorflowmetr": [273, 326], "maintain": [273, 326, 396, 397, 401, 439, 440, 452, 455, 466, 467], "pytorchmetr": [273, 326], "mxnetmetr": [273, 326], "onnxrtqlmetr": [273, 326], "onnxrtitmetr": [273, 326], "metric_registri": [273, 326], "metric_typ": [273, 326], "decorator_metr": [273, 326], "basemetr": [273, 326, 360], "single_output": [273, 326], "hvd": [273, 326, 426], "wrappytorchmetr": [273, 326], "wrapmxnetmetr": [273, 326], "wraponnxrtmetr": [273, 326], "proport": [273, 326], "were": [273, 326, 443, 461], "pred_list": [273, 326], "pytorchloss": [273, 326], "mae": [273, 326, 436], "compare_label": [273, 326, 360, 436], "actual": [273, 326, 426, 469], "rmse": [273, 326, 436, 472], "squar": [273, 308, 326, 369, 423, 436, 469, 472], "tensorflowtopk": [273, 326], "k": [273, 326, 360, 436], "among": [273, 326, 451, 469], "outcom": [273, 326], "num_correct": [273, 326], "num_sampl": [273, 326], "generaltopk": [273, 326], "cocomapv2": [273, 326, 436], "anno_path": [273, 326, 436], "map_kei": [273, 326], "detectionboxes_precis": [273, 326], "output_index_map": [273, 326, 436], "tensorflowmap": [273, 326], "tensorflowcocomap": [273, 326], "tensorflowvocmap": [273, 326], "squadf1": [273, 326, 436], "miou": [273, 326], "num_class": [273, 326], "21": [273, 326, 445, 446, 462, 469, 475], "iou": [273, 326], "intersect": [273, 326, 402, 436], "union": [273, 326, 381, 436], "onnxrtglu": [273, 326], "dlrm": [273, 326], "modelconvers": 275, "typic": [275, 302, 399, 401, 425, 427, 431, 461, 475], "basicna": 276, "model_build": [276, 279], "conf_fnam": 276, "nasbas": [279, 399], "nas_registri": 280, "nas_method": 280, "create_search_space_pool": 280, "idx": [280, 421], "enumer": [280, 381, 402, 424, 425, 426, 437, 460, 461, 470], "find_pareto_front": 280, "pareto": [280, 399], "front": [280, 399], "n_point": 280, "n_metric": 280, "n_pareto_point": 280, "gridsearch": 281, "grid": [281, 399], "whole": [281, 404, 464, 475], "randomsearch": 281, "bayesianoptimizationsearch": 281, "gradientsensitivityprun": 282, "pytorchmodel": [282, 283, 285, 286, 287, 336], "overwritten": [282, 283, 285, 286, 287, 445], "grouplassoprun": 283, "legaci": 284, "basicmagnitudeprun": 285, "lock": [286, 287, 433, 460, 461], "pruner_registri": 287, "clase": 287, "pruningconf": [288, 293], "tfpruningcallback": [288, 293], "input_model": [288, 293, 439, 470], "pure": [288, 293, 461], "pattern_registri": 291, "pattern_typ": 291, "patternbas": 291, "mask_shap": [291, 292], "is_contigu": 291, "tile": 292, "tilepatternbas": 292, "tilepattern_1x1": 292, "1x1": [292, 424, 437, 461], "tilepattern_2x2": 292, "2x2": [292, 469], "tilepattern_1x16": 292, "1x16": 292, "tilepattern_4x1": 292, "tilepattern_1x2": 292, "1x2": [292, 469], "reset_non_value_to_default": 297, "obejct": 297, "parse_not_to_prun": 297, "update_frequency_on_step": [298, 463], "max_sparsity_ratio_per_lay": [298, 463], "magnitudeprun": 298, "snipprun": 298, "snipmomentumprun": 298, "moreoev": 298, "least": [299, 437, 461, 472], "templat": [299, 437, 461], "tree": [299, 315, 376], "huggingface_model": 299, "eager": [299, 359, 426, 433, 464, 465, 470], "config_file_path": 299, "pruner_info": 299, "quantconf": 301, "server": [302, 457], "seper": 302, "opt_model": [302, 437], "fulli": [302, 437, 464, 469], "train_func": [302, 381, 426, 437, 464], "automixedprecisiontunestrategi": [303, 362], "basictunestrategi": [304, 363], "stage": [304, 309, 361, 363, 370, 424, 461, 470, 472], "polici": [304, 308, 361, 363, 369, 396, 401, 474, 476], "bayesiantunestrategi": [305, 364], "acq_max": [305, 364], "ac": [305, 364], "gp": [305, 364], "y_max": [305, 364], "n_warmup": [305, 364], "10000": [305, 364, 461], "n_iter": [305, 364], "acquisit": [305, 364], "gaussian": [305, 364, 472], "relev": [305, 364, 403, 404], "limit": [305, 364, 392, 401, 423, 424, 466, 467, 470], "acq": [305, 364], "randomst": [305, 364], "scipi": [305, 364], "x_max": [305, 364], "targetspac": [305, 364], "pbound": [305, 364], "9527": [305, 364, 437, 474], "allow": [305, 364, 424, 426, 436, 437, 438, 463, 469, 472, 474], "bayesianoptim": [305, 364], "exhaustivetunestrategi": [306, 366], "msetunestrategi": [308, 369], "mse_v2tunestrategi": [309, 370], "revert": [309, 317, 370, 378, 472], "randomtunestrategi": [310, 371], "strategy_registri": [311, 372, 472], "tunestrategi": [311, 372, 472], "tuningsamplerregistri": [314, 375], "tuningsampl": [314, 375], "tuningord": [314, 375], "Not": [314, 315, 375, 376, 392, 399], "tuningspac": [314, 315, 375, 376], "tuning_order_lst": [314, 375], "initial_op_tuning_cfg": [314, 375], "modelwisetuningsampl": [314, 375], "tuning_items_prior": [314, 375], "op_dtype_dict": [314, 375], "optuningconfig": [314, 315, 316, 375, 376, 377], "optypewisetuningsampl": [314, 375], "opwisetuningsampl": [314, 375], "fallbacktuningsampl": [314, 375], "op_dtyp": [314, 375], "accumul": [314, 375, 472], "skip_first": [314, 375], "smoothquantsampl": 314, "tuningitem": [315, 376], "item_typ": [315, 376], "pattern_to_intern": [315, 376], "default_dtyp": [315, 376], "pattern_to_path": [315, 376], "quant_mode_from_pattern": [315, 376], "internal_pattern": [315, 376], "initial_tuning_cfg_with_quant_mod": [315, 376], "op_name_typ": [315, 376], "step1": [315, 376], "step2": [315, 376], "complet": [315, 376, 402, 403, 464, 472, 474, 475], "step3": [315, 376], "step4": [315, 376], "step5": [315, 376], "op_quant_mod": [316, 377], "ordereddefaultdict": [317, 378], "extract_data_typ": [317, 378], "data_typ": [317, 378], "sign": [317, 378, 397, 404, 464, 468], "reverted_data_typ": [317, 378], "signed_flag": [317, 378], "get_adaptor_nam": [317, 378], "experiment": [318, 353, 358, 399, 421, 425, 426, 428, 437, 461, 463, 467, 471], "base_model": [318, 329], "keras_model": [318, 329], "mxnet_model": [318, 329], "nets_factori": [318, 329], "onnx_model": [318, 329, 353], "tensorflow_model": [318, 329, 358], "torch_model": [318, 329], "collect_layer_histogram": [318, 385], "create_obj_from_config": [318, 385], "kl_diverg": [318, 385], "load_huggingfac": [318, 385, 437], "neural_insights_util": [318, 385], "weights_detail": [318, 385], "sub_class": [326, 360], "register_customer_metr": 326, "tell": [326, 360, 463], "topk": [326, 360, 426, 436, 437, 464], "matrix": [326, 360, 401, 448, 473], "frozen": [327, 335, 360, 439], "savedmodel": [327, 335, 360, 475], "chould": 327, "onnx_ml_pb2": [327, 439], "hybirdblock": [327, 360], "paramt": [327, 381], "basemodel": 328, "plai": [328, 462, 466, 469], "role": [328, 466, 469], "kerasmodel": 330, "get_model_fwk_nam": 331, "fwk": 331, "mxnetmodel": 332, "net": 333, "factori": [333, 340, 342, 347, 350, 352, 357], "tfslimnetsfactori": 333, "onnxmodel": [334, 353], "get_model_typ": 335, "validate_graph_nod": 335, "validate_and_inference_input_output": 335, "output_tensor_nam": 335, "graph_sess": 335, "graph_def_sess": 335, "frozen_pb_sess": 335, "load_saved_model": 335, "saved_model_tag": 335, "signatur": 335, "saved_model_dir": 335, "tag": [335, 469, 470], "metagraphdef": 335, "keras_sess": 335, "slim_sess": 335, "checkpoint_sess": 335, "estimator_sess": 335, "saved_model_sess": 335, "tensorflowbasemodel": [335, 358], "tensorflowsavedmodelmodel": 335, "tensorflowqatmodel": 335, "tensorflowcheckpointmodel": 335, "checkpoint": [335, 391, 439], "tensorflowmodel": 335, "pytorchbasemodel": 336, "pytorchfxmodel": 336, "ipexmodel": 336, "driven": [337, 401, 437, 457, 459, 470], "objective_registri": 337, "objective_custom_registri": 337, "obj_cl": 337, "eural_compressor": 337, "objective_cl": 337, "user_object": 337, "__class__": 337, "__name__": 337, "objective_cfg": 337, "usr_cfg": 337, "user_obj_cfg": 337, "easili": [337, 402, 441, 445, 457, 459, 469], "peak": [337, 459], "multiobject": 337, "metric_criterion": 337, "metric_weight": 337, "obj_criterion": 337, "obj_weight": 337, "is_measur": 337, "parserfactori": 339, "onnxrtparserfactori": 341, "onnxprofilingpars": 343, "respons": [343, 344, 348, 464], "profilingpars": 344, "profilingresult": 345, "total_execution_tim": 345, "accelerator_execution_tim": 345, "cpu_execution_tim": 345, "op_run": 345, "op_defin": 345, "tensorflowparserfactori": 346, "tensorflowprofilingpars": 348, "profilerfactori": [349, 351, 356], "create_onnx_config": 354, "ort": 354, "sessionopt": 354, "delete_assign": 359, "create_tf_config": 359, "tf_modul": 359, "configproto": 359, "set_eager_execut": 359, "entir": [360, 381, 398, 403, 404, 461, 469], "autotunestrategi": 361, "conservativetunestrategi": 365, "o0": [365, 472], "who": [365, 396], "hawq_v2tunestrategi": 367, "made": [367, 402, 464, 467, 472], "impact": [367, 467, 472], "tunestrategymeta": 372, "metaclass": 372, "lowerbitssampl": 375, "blockfallbacktuningsampl": 375, "op_block_lst": 375, "target_dtyp": 375, "quantopt": 378, "quant_typ": 378, "quant_opt": 378, "preprocess_user_cfg": 378, "op_user_cfg": 378, "op_user_cfg_modifi": 378, "build_slave_faker_model": 378, "slave": [378, 472], "virtual": [378, 462], "fun": 379, "attribute1": 379, "module_debug_level1": 379, "debug": [379, 388, 423, 450, 454, 458, 472, 473], "function1": 379, "param1": 379, "param2": 379, "parameter1": 379, "parameter2": 379, "o": [379, 434, 442, 469], "function2": 379, "pep": 379, "484": 379, "output_model": [379, 437, 470], "function3": 379, "section": [379, 404, 423, 424, 425, 457, 461, 463, 474], "restructuredtext": 379, "liter": 379, "attributeerror": 379, "except": [379, 392], "generator1": 379, "example_gener": 379, "exampleclass": 379, "param3": 379, "public": [379, 396, 452, 455], "attr1": 379, "attr2": 379, "attr5": 379, "api_doc_exampl": 380, "loop": [381, 398, 399, 403, 404, 430, 468, 472], "compressionmanag": 381, "uesd": 381, "deal": 381, "pruningconfig": 381, "orchestr": [381, 401, 433, 473], "on_train_begin": [381, 398, 424, 425, 437, 460, 461, 464], "train_loop": [381, 437, 460], "on_epoch_begin": [381, 384, 424, 425, 437, 460], "on_step_begin": [381, 384, 424, 425, 437, 460, 461], "on_after_compute_loss": [381, 424, 425, 437, 460], "backward": [381, 424, 425, 426, 437, 460, 461, 464, 467], "on_before_optimizer_step": [381, 424, 425, 437, 460, 461], "on_step_end": [381, 384, 424, 425, 437, 460], "on_epoch_end": [381, 384, 424, 425, 437, 460], "on_train_end": [381, 424, 425, 437, 460, 461, 464], "path_to_sav": 381, "manag": [381, 384, 437, 440, 441, 451], "top1": [381, 436, 461, 464, 475], "callbacks_list": 381, "layerhistogramcollector": 382, "layer_tensor": 382, "include_lay": 382, "get_func_from_config": 384, "func_dict": 384, "get_preprocess": 384, "get_metr": 384, "get_postprocess": 384, "get_algorithm": 384, "algo": 384, "create_dataset": 384, "cfg_preprocess": 384, "cfg_filter": 384, "create_dataload": 384, "dataloader_cfg": 384, "create_eval_func": 384, "postprocess_cfg": 384, "fp32_baselin": [384, 402], "baselin": [384, 468, 470], "create_train_func": 384, "train_cfg": 384, "Their": 384, "auxiliari": 385, "optimizedmodel": 387, "from_pretrain": [387, 437], "save_for_huggingface_upstream": [387, 437], "output_dir": [387, 437, 445, 446], "msg": 388, "fatal": 388, "warn": 388, "warin": 388, "alia": [388, 392, 442, 447], "insight": [389, 401, 423, 462, 467, 472, 473], "register_neural_insights_workload": 389, "workload_loc": [389, 392], "workload_mod": 389, "workload": [389, 392, 462], "uuid": 389, "update_neural_insights_workload": 389, "workload_uuid": 389, "update_neural_insights_workload_accuracy_data": 389, "baseline_accuraci": 389, "optimized_accuraci": 389, "is_int8_model": 391, "checkpoint_dir": 391, "history_cfg": 391, "best_configur": 391, "best_model_weight": 391, "pt": [391, 439, 462, 464, 465, 466], "snapshot": 391, "cfg_from_fil": 392, "yaml_fil": [392, 421, 426], "lazyimport": 392, "lazi": 392, "till": [392, 472], "decorat": 392, "time_limit": 392, "get_siz": 392, "seen": [392, 402], "recurs": 392, "compute_spars": 392, "fault_tolerant_fil": 392, "equal_dict": 392, "d2": 392, "compare_kei": 392, "ignore_kei": 392, "cpuinfo": 392, "dump_elapsed_tim": [392, 402], "customized_msg": 392, "elaps": 392, "combine_histogram": 392, "old_hist": 392, "old": [392, 437, 467], "get_tensor_histogram": 392, "get_all_fp32_data": 392, "get_tuning_histori": 392, "tuning_history_path": 392, "offlin": [392, 396, 437, 464, 469], "str2arrai": 392, "dequantize_weight": 392, "weight_tensor": 392, "min_filter_tensor": 392, "max_filter_tensor": 392, "scale_info": 392, "captureoutputtofil": 392, "tmp_file_path": 392, "stream": [392, 475], "sy": [392, 443], "stderr": 392, "captur": 392, "statist": [392, 393], "header": [392, 429], "field_nam": 392, "output_handl": 392, "printer": 392, "global_st": 392, "load_data_from_pkl": 392, "pkl": 392, "dump_data_to_loc": 392, "show_memory_info": 392, "hint": 392, "dump_class_attr": 392, "compare_object": 392, "obj1": 392, "obj2": 392, "ignore_attr": 392, "comparison": [392, 467, 470], "alias_param": 392, "param_nam": 392, "param_alia": 392, "alias": 392, "print_tabl": 392, "column_map": 392, "table_entri": 392, "titl": [392, 435, 458, 472], "insert_newlin": 392, "prettyt": 392, "column": [392, 469], "func": [392, 403, 464, 474], "handler": [392, 472], "row": [392, 423, 469], "decim": 392, "get_tensors_info": 392, "get_weights_detail": 392, "weightdetail": 392, "dump_tabl": 392, "filepath": 392, "file_typ": 392, "csv": [392, 399], "dump_table_to_csv": 392, "get_number_of_socket": 392, "platform": [392, 401, 433, 440, 448, 462, 464], "opentri": 392, "activation_min": 392, "activation_max": 392, "print_op_list": 392, "get_op_list": 392, "minmax_file_path": 392, "input_model_tensor": 392, "optimized_model_tensor": 392, "activation_min_max": 392, "calculate_ms": 392, "mse_metric_gap": 392, "fp32_tensor": 392, "dequantize_tensor": 392, "euclidean": [392, 424], "distanc": [392, 424], "weightsdetail": 393, "input_tensor_data": 393, "optimized_tensor_data": 393, "weightsstatist": 393, "welcom": [395, 396, 397, 401, 476], "interest": [396, 401, 470], "foster": 396, "particip": 396, "commun": 396, "harass": 396, "experi": [396, 440, 468, 469, 472], "everyon": 396, "regardless": 396, "ag": 396, "bodi": 396, "ethnic": 396, "characterist": 396, "gender": 396, "educ": 396, "socio": 396, "econom": 396, "appear": [396, 451, 457], "race": 396, "religion": 396, "sexual": 396, "orient": 396, "behavior": [396, 397, 402, 403, 404, 430, 439, 470, 472, 474], "contribut": [396, 401, 461], "inclus": 396, "Being": 396, "respect": [396, 430, 461, 469, 474], "viewpoint": 396, "gracefulli": 396, "focus": [396, 402], "empathi": 396, "toward": [396, 424], "member": [396, 402], "unaccept": 396, "imageri": 396, "unwelcom": 396, "troll": 396, "insult": 396, "derogatori": 396, "comment": [396, 403, 421, 436, 437, 466, 471], "polit": 396, "attack": 396, "privat": 396, "publish": [396, 435, 438, 458, 469], "electron": 396, "explicit": 396, "permiss": 396, "inappropri": 396, "profession": 396, "clarifi": 396, "appropri": [396, 469], "fair": 396, "action": [396, 452, 455], "edit": 396, "reject": 396, "commit": [396, 397], "wiki": 396, "issu": [396, 397, 400, 434, 464, 470], "ban": 396, "temporarili": 396, "deem": 396, "threaten": 396, "offens": 396, "harm": 396, "mail": 396, "social": [396, 401, 462], "media": [396, 401, 462], "account": [396, 468, 472], "appoint": 396, "onlin": [396, 468], "event": [396, 470], "abus": 396, "report": [396, 397, 468], "contact": [396, 467, 468], "complaint": 396, "review": [396, 397], "investig": 396, "circumst": [396, 463], "oblig": 396, "confidenti": 396, "regard": [396, 465], "incid": 396, "separ": [396, 432, 435, 460, 463], "good": [396, 464, 472], "faith": 396, "face": [396, 401, 409, 440, 444, 462, 467, 475], "repercuss": 396, "leadership": 396, "faq": [396, 401], "page": [396, 397], "send": [397, 403], "view": [397, 401, 427, 448, 457, 467], "pylint": 397, "flake8": 397, "autopep8": 397, "cover": [397, 428, 432, 462], "would": [397, 437, 461, 464, 469], "adopt": [397, 440, 461, 462, 469], "certif": 397, "agre": 397, "j": [397, 401, 469, 475], "bug": 397, "jira": 397, "ticket": 397, "potenti": [397, 399, 423], "risk": 397, "pr": [397, 420, 436, 452, 455, 467], "reproduc": 397, "hardwar": [397, 401, 402, 424, 433, 437, 457, 461, 462, 463], "submit": [397, 462], "intend": 397, "safe": 397, "collabor": [397, 442, 448], "adher": 397, "toolkit": [398, 434, 440, 448, 462, 473], "tracer": 398, "resolv": [398, 400], "floatfunct": 398, "cat": [398, 428, 443], "done": [398, 424, 425, 441, 457, 461, 464], "10004": [398, 399, 402, 420, 424, 425, 430, 433, 438, 460, 463, 466, 474], "neural_compressor": [398, 399, 401, 404, 419, 420, 421, 423, 424, 425, 426, 428, 431, 432, 436, 437, 438, 439, 459, 460, 461, 463, 464, 465, 467, 468, 469, 471, 472, 474], "eval": [398, 420, 423, 440, 464, 470], "fail": [398, 420, 428], "conduct": [398, 437, 445, 457, 472, 473], "imper": 398, "therefor": [398, 437, 461, 464, 467, 469], "lot": [398, 469], "As": [398, 403, 420, 424, 436, 437, 451, 461, 466, 472], "failur": 398, "successfulli": [398, 426, 462], "suggest": [398, 468], "traceabl": 398, "proxi": 398, "tutori": [398, 448, 462, 473], "prototyp": 398, "html": [398, 401, 452, 455], "highlight": 398, "untrac": 398, "ssd": [398, 428, 475], "resnet34": [398, 475], "r34": 398, "bboxes_labels_scor": 398, "prob": 398, "45": [398, 469, 475], "max_output": 398, "zip": 398, "dbox": 398, "dlabel": 398, "dscore": 398, "decode_singl": 398, "autom": [399, 401, 440, 457, 458, 462, 469], "artifici": 399, "ann": 399, "par": 399, "outperform": 399, "hand": 399, "propos": [399, 402, 424, 438, 469], "lie": 399, "predictor": 399, "shown": [399, 420, 423, 424, 436, 437, 451, 459, 460, 461, 469, 472], "figur": [399, 450, 451, 454], "popul": 399, "inner": 399, "evolutionari": 399, "cycl": 399, "until": [399, 403, 472], "conclud": 399, "met": [399, 430, 464, 470], "yet": [399, 452, 455, 458], "simplest": [399, 443], "launcher": [399, 401, 424, 425, 448, 473], "agent": 399, "nsga2": 399, "supernet": 399, "ofa_mbv3_d234_e346_k357_w1": 399, "acc": [399, 461, 470, 475], "mac": [399, 458], "num_ev": 399, "250": [399, 461], "results_csv_path": 399, "search_result": 399, "dataset_path": 399, "ilsvrc2012": 399, "aim": [399, 401, 440, 461, 469, 472, 473], "mobilenetv3": 399, "lt": [399, 421, 475], "wmt": 399, "en": 399, "de": 399, "guidelin": [400, 401], "mainstream": [401, 473], "learn": [401, 402, 403, 420, 421, 428, 432, 433, 434, 437, 438, 440, 442, 445, 446, 448, 451, 452, 455, 457, 461, 462, 464, 469, 470, 472, 473], "runtim": [401, 402, 403, 405, 420, 423, 427, 430, 433, 438, 442, 447, 448, 463, 467], "workflow": [401, 403, 404, 423, 424, 428, 434, 438, 452, 455, 470, 473], "particular": [401, 461], "wide": [401, 427, 438, 461, 464, 475], "xeon": [401, 434, 435, 438, 462, 464, 465, 475], "scalabl": [401, 434, 438, 462, 464, 465], "processor": [401, 438, 462, 464, 465], "flex": [401, 434], "amd": [401, 433, 434, 475], "arm": [401, 433, 434, 475], "nvidia": [401, 433, 434, 475], "bloom": [401, 469], "176b": [401, 469], "7b": [401, 469, 475], "stabl": [401, 434, 461, 462], "diffus": [401, 462], "gpt": [401, 461, 469, 475], "hub": [401, 427, 431, 448], "hug": [401, 462], "vision": [401, 428, 444, 469], "coder": [401, 433, 441, 442, 445, 448, 451, 462], "cloud": [401, 462], "marketplac": [401, 458, 462], "googl": [401, 438, 462], "amazon": [401, 440, 448], "web": [401, 470], "servic": [401, 457, 462], "azur": [401, 462], "softwar": [401, 435, 461, 462, 467], "alibaba": [401, 447, 454, 455, 462], "tencent": [401, 462], "taco": [401, 462], "ai": [401, 440, 462, 465, 473], "ecosystem": [401, 462], "lightn": [401, 447], "pip": [401, 423, 426, 429, 431, 434, 442, 445, 450, 452, 454, 455, 467], "wget": [401, 423, 429, 431], "storag": [401, 431, 436, 469], "googleapi": [401, 431], "v1_6": [401, 431], "mobilenet_v1_1": [401, 431], "0_224_frozen": [401, 431], "overview": [401, 472], "jupyterlab": [401, 440, 446, 448, 450, 454, 473], "studio": [401, 448, 457, 473], "topic": 401, "innov": [401, 448, 462], "blog": [401, 462], "msft": [401, 462], "oliv": [401, 462], "friendli": [401, 430, 437, 462, 469, 473, 474], "toolchain": [401, 429, 462], "june": [401, 462], "2023": [401, 466, 469, 475], "neurip": [401, 462], "oct": [401, 462], "quala": [401, 462], "minilm": [401, 462, 475], "releas": [401, 434, 446, 448, 450, 454, 456, 476], "legal": [401, 476], "secur": [401, 462, 476], "idea": [401, 461, 469, 472], "feel": 401, "bridg": [402, 403, 433], "vanilla": [402, 403, 433], "abcadaptor": 402, "__init__": [402, 420, 421, 436, 472], "query_fw_cap": [402, 404], "query_fused_pattern": 402, "he": 402, "besid": [402, 424, 466], "describ": [402, 404, 423, 430, 470], "past": [402, 466], "mainten": 402, "difficult": [402, 469], "abil": [402, 403, 421, 430, 469], "modif": [402, 430, 445], "fragment": 402, "scenario": [402, 419, 424, 437, 461, 466], "granular": [402, 403, 404, 430, 433, 443, 464, 469, 474], "semant": [402, 430], "mla": [402, 438, 464], "becom": [402, 428, 461, 466], "explor": 402, "inspect_tensor": 402, "op_list": [402, 470], "iteration_list": 402, "inspect_typ": 402, "save_to_disk": 402, "quantization_cfg": 402, "set_tensor": 402, "tensor_dict": 402, "diagnosis_help": 402, "fw": 403, "outlin": [403, 404], "instruct": [403, 404, 424, 434, 438, 452, 455, 462, 463, 464], "extend": [403, 404], "accommod": [403, 404], "incorpor": [403, 404, 425, 472], "give": [403, 457, 472], "diagram": [403, 404, 423, 472], "illustr": [403, 404, 425, 472], "sequencediagram": [403, 404], "autonumb": [403, 404], "query_framework_cap": 403, "opwis": 403, "optypewis": 403, "travers": [403, 404, 472], "\u2776": 403, "\u2777": 403, "\u2778": 403, "\u2779": 403, "\u277a": 403, "\u277b": 403, "previou": [403, 404, 437, 461, 467, 469, 470, 472, 473], "\u277c": 403, "These": [403, 433], "chapter": 403, "confirm": 403, "chosen": 403, "framework_yaml": 403, "int8_conv_config": 403, "node_op": 403, "optype_wise_": 403, "per_tensor": [403, 404, 430, 464, 474], "exmapl": 403, "tuning_cfg_to_fw": 403, "Its": 403, "calib_iter": 403, "dispatch": [403, 433], "is_perchannel": 403, "is_asymmetr": 403, "weight_bit": 403, "convert_bf16": 403, "calib": 403, "larger": [403, 461, 466, 469], "somewhat": 403, "distort": 403, "line": [403, 426, 433, 440, 445, 446, 470], "At": [403, 472], "explain": [404, 423, 469], "let": [404, 430, 445, 461, 463, 474], "overal": [404, 474], "drive": 404, "uint4": 404, "asymmetr": [404, 464, 472], "kullback": [404, 424], "leibler": [404, 424], "pytorch_cpu": 404, "1_11_capabl": 404, "cap_s8_1_11": 404, "cap_s8_1_11_conv1d": 404, "per_channel_symmetr": 404, "addition": [404, 426, 472], "per_tensor_symmetr": 404, "One": [404, 421, 426, 433, 461, 462, 472], "due": [404, 428, 461, 464, 469, 470], "nativ": 404, "simul": 404, "with_arg": 404, "qscheme": 404, "torch_dtyp": 404, "quant_min": 404, "quant_max": 404, "linux": [419, 429, 451, 457], "x86_64": 419, "aarch64": 419, "encount": 420, "consum": 420, "previous": 420, "lack": [420, 429], "faster": [420, 422, 428, 462, 472, 475], "treat": 420, "Of": 420, "getitem": 420, "fn": 420, "evenli": 420, "divid": [420, 469, 472], "discard": 420, "throw": 420, "awai": 420, "draw": [420, 468, 472], "worker": [420, 437, 464], "subprocess": 420, "pin": [420, 450, 454], "reshuffl": 420, "manner": [420, 424, 439], "newdataload": 420, "customis": [420, 421, 436], "ensp": [421, 471], "imagerecord": [421, 426, 474], "image_nam": 421, "cocorecord": 421, "gt": [421, 469, 471], "int64": 421, "offer": 421, "style_transf": 421, "content": 421, "tfrecorddataset": 421, "labelbal": 421, "300": 421, "16": [421, 469, 475], "helloworld": [421, 438, 471], "aid": 422, "deploy": [422, 440, 457, 462, 469], "infrastructur": 422, "gap": [423, 439], "diagnos": 423, "gui": [423, 433, 461], "termin": [423, 450, 451, 454], "repeat": [423, 472], "durat": [423, 468], "git": [423, 429, 434], "clone": [423, 434, 450, 454], "cd": [423, 426, 434], "setup": [423, 430, 434, 452, 455, 461], "ilsvr2012": 423, "caff": 423, "berkeleyvis": 423, "caffe_ilsvrc12": 423, "xvzf": 423, "image_recognit": [423, 470], "resnet50_torchvis": 423, "ptq_static": 423, "resnet50_v1": [423, 426, 437], "dataset_loc": [423, 470], "label_path": 423, "quantiti": 423, "vec": 423, "mu": 423, "frac": [423, 469], "sigma": 423, "var": 423, "happen": 423, "dispers": 423, "trust": 423, "rule": [423, 440, 461], "v0": [423, 470], "cg": [423, 470], "conv0": [423, 470], "expens": [424, 437, 472], "deploi": [424, 437, 466, 472], "power": [424, 437, 451, 462], "mobil": [424, 437, 475], "produc": 424, "logit": 424, "softmax": 424, "l": [424, 470, 472], "kd": 424, "patient": 424, "compact": [424, 437, 443, 461], "agnost": 424, "resourc": [424, 472], "convolut": [424, 462], "ia": 424, "attach": [424, 437, 469], "shallow": 424, "deepest": 424, "deeper": 424, "paper": [424, 461, 466, 469], "10006": [424, 425], "student_output": [424, 425], "student_loss": [424, 425], "training_func_for_nc": [424, 425], "distil_loss_conf": 424, "accordingli": [424, 448], "promis": [425, 437, 461], "huge": [425, 461], "heavi": 425, "light": 425, "booster": 425, "degrad": [425, 461, 472], "novel": [425, 440, 451, 457], "place": [425, 434, 461, 470], "comb": 425, "distillation_criterion": [425, 437, 460], "q_conf": 425, "horovod": 426, "instal": [426, 429, 431, 440, 442, 445, 448, 452, 455, 457, 458, 476], "builtin": 426, "program": [426, 435, 440, 457], "enable_eager_execut": 426, "yaml_file_path": 426, "pre_process": 426, "simpli": [426, 439, 440, 442, 445, 457], "evaluation_result": 426, "evaluation_time_cost": 426, "partit": [426, 461], "distributedsampl": 426, "train_sampl": 426, "train_dataset": [426, 464], "num_replica": 426, "rank": 426, "train_load": 426, "train_kwarg": 426, "adadelta": 426, "distributedoptim": 426, "named_paramet": 426, "broadcast_paramet": 426, "root_rank": 426, "broadcast_optimizer_st": 426, "set_epoch": 426, "batch_idx": 426, "zero_grad": [426, 437, 461], "nll_loss": 426, "log_interv": 426, "0f": 426, "tloss": 426, "6f": 426, "dry_run": 426, "test_func": 426, "host": 426, "num_of_process": 426, "002": 426, "ssh": [426, 457], "prompt": 426, "readm": 426, "exactli": [426, 441], "recognit": [426, 428, 461, 470], "resizecropimagenet": [426, 471], "realiz": [426, 459, 465, 468], "tow": 426, "node1": 426, "node2": 426, "TO": [426, 442], "your_node1_nam": 426, "your_node2_nam": 426, "resnet50_fp32_pretrained_model": 426, "nc_resnet50_v1": 426, "resnet": [426, 475], "varieti": [427, 463, 472], "demonstr": [427, 440, 470], "10k": [427, 431], "speedup": [427, 433, 464], "2x": [427, 433], "vnni": [427, 433, 463, 464], "exchang": 428, "hope": 428, "inc_model": [428, 439], "fp32_onnx_config": 428, "verifi": 428, "vgg16": [428, 475], "mobilenet": [428, 468, 475], "rcnn": 428, "torchscript": [428, 469], "unsupport": [428, 437, 461], "add_relu": 428, "conv1d_relu": 428, "conv2d_relu": 428, "group_norm": 428, "hardswish": 428, "instance_norm": 428, "layer_norm": 428, "leaky_relu": 428, "sigmoid": 428, "bare": 429, "metal": 429, "sudo": [429, 443], "apt": [429, 434, 443, 451], "python3": 429, "dev": [429, 450, 454], "distutil": 429, "essenti": 429, "libgl1": 429, "mesa": 429, "glx": 429, "libglib2": 429, "ln": 429, "sf": 429, "usr": 429, "incompat": 429, "88": [429, 468, 475], "80": [429, 469, 470, 475], "pyobject": 429, "reinstal": 429, "importerror": 429, "libgl": 429, "No": [429, 437, 462], "yum": [429, 434], "opencv": [429, 451], "conda": [429, 434, 443, 451, 467], "13": [429, 434, 467, 469, 475], "pend": 429, "sqlalchemi": 429, "27": [429, 475], "alemb": 429, "forg": [429, 434], "quick": [430, 438, 473, 474], "dive": [430, 473], "unless": 430, "purpos": [430, 438, 457, 463, 464], "syntax": 430, "go": [430, 452, 455, 463, 471], "up1": 430, "up2": 430, "valid_mixed_precis": 430, "addn": 430, "grappler_optim": 430, "constfold": 430, "arithmet": 430, "debug_stripp": 430, "major": [432, 464, 469], "concept": [432, 468, 473], "rather": 432, "custom_metr": 432, "refin": [432, 461], "broad": [433, 446, 473], "420": 433, "geomean": 433, "snippet": 433, "upload": [433, 452, 455], "click": [433, 440, 441, 448, 451, 457, 462, 470], "button": [433, 451, 457], "qintegerop": [433, 464], "plan": 433, "oneapi": [434, 462, 473], "analyt": [434, 462, 473], "success": 434, "11": [434, 436, 438, 469, 472, 475], "frequent": 434, "ask": 434, "pypi": [434, 452, 455], "nightli": 434, "consolid": 434, "latest": [434, 462, 467], "eas": [434, 442, 462], "along": [434, 461], "streamlin": [434, 462], "scienc": 434, "websit": 434, "anaconda": 434, "suit": [434, 458, 470], "esri": 434, "formerli": 434, "skylak": 434, "cascad": 434, "lake": [434, 438, 462], "cooper": [434, 438, 462], "ic": [434, 462], "sapphir": 434, "rapid": 434, "hbm": 434, "arctic": 434, "sound": 434, "pont": 434, "vecchio": 434, "cento": [434, 475], "ubuntu": 434, "22": [434, 475], "04": [434, 475], "fortensorflow": 434, "forpytorch": 434, "12": 434, "tf_enable_onednn_opt": 434, "onednn": [434, 438, 464], "newer": 434, "copyright": 435, "subject": 435, "accompani": [435, 472], "research": [435, 469], "wish": 435, "bibtex": 435, "misc": 435, "author": 435, "feng": 435, "tian": 435, "hanwen": 435, "haihao": [435, 461], "shen": [435, 461], "suyu": 435, "chen": 435, "howpublish": 435, "year": 435, "logo": 435, "atom": 435, "phi": 435, "pentium": 435, "vtune": 435, "corpor": 435, "subsidiari": 435, "brand": 435, "claim": 435, "popularli": 436, "industri": [436, 462], "label_map": 436, "decis": 436, "ap": 436, "curv": 436, "turn": [436, 451], "target_boxes_num": 436, "str_label": 436, "int_label": 436, "inturn": 436, "cocomap": 436, "vocmap": 436, "categor": 436, "multiclass": 436, "multilabel": 436, "newmetr": 436, "reset": 436, "reflect": [436, 471], "new_metr": 436, "deliv": [437, 462, 467], "conveni": 437, "upgrad": 437, "veri": [437, 458, 464, 472, 473], "speed": [437, 448, 461, 462, 464, 472], "fundament": 437, "comprehens": [437, 473], "kind": 437, "resort": 437, "automodelforsequenceclassif": 437, "autotoken": 437, "val_dataset": [437, 464], "val_dataload": [437, 464], "ping_memori": [437, 464], "formul": 437, "effort": 437, "written": 437, "onnxrt_integ": [437, 474], "onnxrt_qlinear": [437, 474], "image_tensor": [437, 474], "post_training_dynamic_qu": [437, 463, 472], "1000": [437, 474], "2000": 437, "sampling_s": [437, 474], "model_wis": [437, 474], "op_dict": 437, "op_wis": [437, 470, 474], "sigopt_api_token": [437, 468, 472], "sigopt_project_id": [437, 468, 472], "sigopt_experiment_nam": [437, 468, 472], "demo": 437, "600": 437, "training_arg": 437, "emul": [437, 464], "trainer": [437, 448], "briefli": [437, 469], "maxim": [437, 461, 472], "still": [437, 462, 464, 465], "pruning_func": 437, "num_train_epoch": [437, 461], "train_dataload": [437, 461, 464], "n_gpu": 437, "gradient_accumulation_step": 437, "clip_grad_norm_": 437, "max_grad_norm": 437, "rate": [437, 461, 464], "start_epoch": [437, 463, 474], "end_epoch": [437, 463, 474], "97": [437, 469, 475], "newli": [437, 461], "on_after_optimizer_step": [437, 461], "layer3": [437, 461], "lr_schedul": [437, 461], "weight_decai": [437, 474], "0004": 437, "nesterov": [437, 474], "randomresizedcrop": [437, 471], "totensor": [437, 471], "485": [437, 475], "456": [437, 475], "406": 437, "nepoch": 437, "cnt": 437, "loss_sum": 437, "iter_bar": 437, "tqdm": 437, "desc": 437, "teacher_logit": 437, "train_fun": 437, "training_func": 437, "recent": [437, 438], "growth": [437, 438, 461], "complex": [437, 438, 461], "significantli": [437, 438, 461, 472], "bandwidth": [437, 438, 466], "exit_polici": [437, 474], "determinist": 437, "arbitrari": [437, 460], "meaning": [437, 460], "reli": [437, 469], "prune_conf": 437, "quantization_aware_training_conf": 437, "aforement": 437, "inset": 437, "p_conf": [437, 460], "ssd_mobilenet_v1": 437, "benchmarkconf": 437, "half": [438, 448], "sixteen": 438, "launch": [438, 458], "3rd": [438, 462, 464, 465], "gen": [438, 462, 464, 465], "codenam": 438, "boost": [438, 441, 457, 461, 462], "x86": 438, "avx512": [438, 464], "vcvtne2ps2bf16": 438, "vcvtneps2bf16": 438, "vdpbf16p": 438, "fbgemm": [438, 464], "tensorrtexecutionprovid": [438, 464], "cudaexecutionprovid": [438, 464], "cuda": [438, 440, 442, 464], "dnnlexecutionprovid": [438, 464], "avx512_bf16": 438, "plu": 438, "resnet18": [438, 442, 475], "persist": 439, "brought": [439, 441, 448, 464], "tf2": 439, "h5": 439, "hybridblock": 439, "0000": 439, "saved_result": [439, 466], "simplifi": [440, 451, 457, 461, 462], "acquir": 440, "analysi": [440, 457, 461, 468], "heurist": [440, 457], "great": 440, "facilit": 440, "enhanc": [440, 462, 465], "autocast": 440, "my_model": 440, "no_grad": 440, "memory_format": 440, "112": [440, 475], "rand": [440, 469], "plugin": [440, 458], "aw": [440, 448, 462, 475], "sagemak": [440, 448], "inlin": [440, 445, 448], "neural_cod": [440, 442, 444, 445, 446, 448], "bench": 440, "superbench": 440, "enjoi": [441, 445, 448], "rebuild": [441, 450, 454], "reload": [441, 458], "modern": [442, 466], "democrat": [442, 462], "programm": [442, 448, 457], "nano_bf16_channels_last": 442, "nano_bf16_ipex_channels_last": 442, "nano_bf16_ipex": 442, "nano_bf16": 442, "nano_fp32_channels_last": 442, "nano_fp32_ipex_channels_last": 442, "nano_fp32_ipex": 442, "nano_gpu_to_cpu": 442, "nano_int8": 442, "nano_jit_bf16_channels_last": 442, "nano_jit_bf16_ipex_channels_last": 442, "nano_jit_bf16_ipex": 442, "nano_jit_bf16": 442, "nano_jit_fp32_channels_last": 442, "nano_jit_fp32_ipex_channels_last": 442, "nano_jit_fp32_ipex": 442, "nano_jit_fp32": 442, "nano_onnxruntime_fp32": 442, "nano_onnxruntime_int8_qlinear": 442, "openvino": 442, "nano_openvino_fp32": 442, "nano_openvino_int8": 442, "bc": [443, 451], "conda_prefix": 443, "echo": 443, "tradit": [443, 461], "libjemalloc": 443, "libiomp5": 443, "home": 443, "lib": 443, "ld_preload": 443, "malloc_conf": 443, "oversize_threshold": 443, "background_thread": 443, "metadata_thp": 443, "dirty_decay_m": 443, "9000000000": 443, "muzzy_decay_m": 443, "kmp_affin": 443, "kmp_blocktim": 443, "dnnl_primitive_cache_capac": 443, "cpufreq": 443, "scaling_governor": 443, "powersav": 443, "tee": 443, "pytorch_jit_script": [444, 447], "pytorch_channels_last": [444, 447], "run_bench": 444, "patch": [444, 457], "patch_path": 444, "your_patch_path": 444, "sweep": 444, "sweep_object": 444, "bench_config": 444, "bench_featur": 444, "sai": 445, "run_glu": [445, 446], "requisit": 445, "task_nam": [445, 446], "do_ev": [445, 446], "remain": 445, "itself": 445, "run_glue_optim": 445, "static_ipex": 445, "auto_qu": 446, "v4": [446, 475], "albert": [446, 475], "sst2": 446, "alexnet": [446, 475], "pytorch_amp": 447, "optimize_for_infer": 447, "pytorch_jit_trac": 447, "pytorch_jit_script_ofi": 447, "pytorch_jit_trace_ofi": 447, "torchdynamo": 447, "pytorch_torchdynamo_jit_script": 447, "pytorch_torchdynamo_jit_trac": 447, "pytorch_torchdynamo_jit_script_ofi": 447, "pytorch_torchdynamo_jit_trace_ofi": 447, "pytorch_inc_bf16": 447, "pytorch_inc_static_quant_fx": 447, "pytorch_inc_static_quant_ipex": 447, "pytorch_inc_dynamic_qu": 447, "pytorch_ipex_fp32": 447, "pytorch_ipex_bf16": 447, "pytorch_ipex_int8_static_qu": 447, "pytorch_ipex_int8_dynamic_qu": 447, "blade": 447, "disc": 447, "pytorch_aliblad": 447, "pytorch_lightning_bf16_cpu": 447, "tensorflow_amp": 447, "keras_amp": 447, "tensorflow_inc": 447, "keras_inc": 447, "onnx_inc_static_quant_qlinear": 447, "onnx_inc_static_quant_qdq": 447, "onnx_inc_dynamic_qu": 447, "optimum": [447, 448], "pytorch_inc_huggingface_optimum_stat": 447, "pytorch_inc_huggingface_optimum_dynam": 447, "intel_extension_for_transform": 447, "bigdl": [447, 448], "nano": [447, 448], "nano_": 447, "inc_auto": 447, "delight": 448, "announc": 448, "v": [448, 457, 461, 472, 474], "500": 448, "jupyt": [448, 450, 451, 454], "isa": 448, "adjust": [448, 464, 469], "xpu": 448, "delta": 448, "acc_delta": 448, "int8_acc": 448, "fp32_acc": 448, "ext": [450, 452, 454, 455, 456], "lab": [450, 451, 452, 454, 455], "nodej": [450, 454], "jlpm": [450, 454], "yarn": [450, 454], "npm": [450, 451, 454], "lieu": [450, 454], "labextens": [450, 451, 454], "typescript": [450, 454], "watch": [450, 454], "immedi": [450, 454, 461], "refresh": [450, 454], "browser": [450, 454], "wait": [450, 454, 457], "rebuilt": [450, 454], "easier": [450, 454, 457, 462], "symlink": [450, 454], "down": 451, "finish": 451, "enter": [451, 457], "blank": 451, "cell": 451, "gain": [451, 460, 462], "mkl": 451, "jemalloc": 451, "pip3": 451, "headless": 451, "pyproject": [452, 455], "toml": [452, 455], "twine": [452, 455], "whl": [452, 455], "dist": [452, 455], "sdist": [452, 455], "bdist_wheel": [452, 455], "deprec": [452, 455, 467, 471], "frontend": [452, 455], "login": [452, 455, 468], "repositori": [452, 455], "cut": [452, 455], "fork": [452, 455], "admin_github_token": [452, 455], "pypi_token": [452, 455], "npm_token": [452, 455], "secret": [452, 455], "panel": [452, 455, 457], "draft": [452, 455], "changelog": [452, 455, 456], "pkg": [452, 455], "bot": [452, 455], "pick": [452, 455, 458], "feedstock": [452, 455], "hatch": 455, "notabl": 456, "vscode": [456, 458], "daili": 457, "advantag": [457, 461, 463, 472], "remot": 457, "re": [457, 466], "market": 457, "uninstal": 457, "fill": [457, 468, 471, 472], "upper": 457, "sidebar": 457, "hover": 457, "track": [457, 468], "argpars": 457, "pop": 457, "diff": 457, "manifest": 458, "declar": 458, "palett": 458, "registercommand": 458, "amodio": 458, "tsl": 458, "matcher": 458, "dbaeumer": 458, "eslint": 458, "press": 458, "f5": 458, "ctrl": 458, "hello": 458, "world": 458, "breakpoint": 458, "consol": 458, "relaunch": 458, "toolbar": 458, "node_modul": 458, "viewlet": 458, "dropdown": 458, "runner": 458, "startup": 458, "bundl": 458, "multi_object": 459, "benefit": 460, "instanti": 460, "neuron": 461, "art": 461, "grown": 461, "unpreced": 461, "increasingli": 461, "crucial": 461, "stand": [461, 472], "delet": 461, "commonli": 461, "shrink": 461, "contextu": 461, "howev": [461, 466, 469], "scene": 461, "haven": 461, "color": 461, "lowest": [461, 472], "formula": [461, 469], "emsp": 461, "downstream": 461, "finetun": [461, 475], "prone": 461, "co": 461, "discourag": 461, "push": [461, 466, 469], "penal": 461, "parameter": 461, "exemplifi": 461, "complement": 461, "fortieth": 461, "miss": [461, 464], "pruner2": 461, "mention": [461, 466], "readi": 461, "hesit": 461, "sst": [461, 475], "25": [461, 469, 475], "63": [461, 469, 475], "24": [461, 469, 472, 475], "35": [461, 475], "flan": 461, "t5": 461, "english": 461, "romanian": 461, "404": [461, 475], "381": 461, "yolov5": 461, "75": [461, 469, 475], "2x1": [461, 475], "801": 461, "7895": 461, "signific": [461, 462, 469], "reduct": [461, 474], "namhoon": 461, "lee": 461, "thalaiyasingam": 461, "ajanthan": 461, "philip": 461, "torr": 461, "2019": 461, "zafrir": 461, "ofir": 461, "ariel": 461, "larei": 461, "boudoukh": 461, "mosh": 461, "wasserblat": 461, "preprint": [461, 466, 469], "2111": 461, "05754": 461, "2021": 461, "medium": 462, "juli": 462, "chatbot": 462, "netflix": 462, "apr": 462, "mlperf": [462, 475], "5x": 462, "heterogen": 462, "mar": 462, "busi": 462, "jan": 462, "amx": 462, "4th": [462, 464], "mleffici": 462, "dec": 462, "wechat": 462, "deepen": 462, "foundat": 462, "intellig": 462, "vmware": 462, "applianc": 462, "bitnami": 462, "nov": 462, "sota": 462, "few": [462, 472], "plug": 462, "twitter": 462, "linkedin": 462, "zone": 462, "land": 462, "gcp": 462, "pat": 462, "keynot": 462, "intelon": 462, "sep": 462, "chines": 462, "aug": 462, "purif": 462, "sacrif": 462, "jun": 462, "partner": 462, "feb": 462, "joint": 462, "bilibili": 462, "gestalt": 462, "ml": 462, "doubl": 462, "reconstruct": 462, "abound": 462, "lpot": [462, 467], "nextplatform": 462, "cern": 462, "gan": 462, "3dgan": 462, "iml": 462, "workshop": 462, "asplo": 462, "18": [462, 475], "highli": 462, "intelcaff": 462, "aris": 463, "henc": 463, "onnxrt_qoper": 463, "quant_aware_train": 463, "weight_compress": [463, 474], "initial_spars": [463, 474], "prune_typ": [463, 474], "basic_magnitud": [463, 474], "update_frequ": 463, "prune_domain": 463, "tile_pattern_1x1": 463, "invent": 464, "int4": 464, "cost": [464, 466], "On": [464, 475], "theoret": [464, 466], "affin": 464, "zeropoint": 464, "255": [464, 469], "overflow": 464, "solv": [464, 467], "unseen": 464, "enough": 464, "peopl": 464, "mimic": 464, "fact": 464, "ultim": 464, "pain": 464, "lossi": 464, "chart": [464, 468, 470], "understand": [464, 470, 473], "philosophi": 464, "request": 464, "neither": 464, "nor": 464, "val_load": 464, "avg": 464, "themselv": 464, "ON": 465, "forc": 465, "postposttrainingquantconfig": 465, "bf16wrapper": 465, "retrac": 465, "preval": 466, "grow": 466, "demand": 466, "w8a8": 466, "trade": 466, "bottleneck": 466, "roughli": 466, "speak": 466, "capac": [466, 468], "flop": 466, "famou": 466, "approx": 466, "bmm": 466, "100x": 466, "straightforward": [466, 469], "excel": 466, "gptq": 466, "stai": [466, 469], "89": [466, 469, 475], "wip": 466, "gptq_arg": 466, "percdamp": 466, "awq_arg": 466, "xiao": [466, 469], "guangxuan": [466, 469], "2211": [466, 469], "10438": [466, 469], "wei": [466, 469], "xiui": [466, 469], "suppress": [466, 469], "2209": [466, 469], "13325": [466, 469], "lin": 466, "ji": 466, "2306": 466, "00978": 466, "frantar": 466, "elia": 466, "site": 467, "assist": 467, "sed": 467, "your_script": 467, "backbon": 468, "interact": 468, "sigopt_experiment_id": 468, "nc": [468, 472], "certain": 468, "suffici": 468, "ordinari": 468, "receiv": 468, "latenc": [468, 472], "8266": 468, "8372": 468, "2132": 468, "83": [468, 469, 475], "7495": 468, "8299": 468, "8294": 468, "85": [468, 469, 475], "0837": 468, "8291": 468, "4469": 468, "gigant": 469, "systemat": 469, "quantif": 469, "migrat": [469, 473], "difficulti": 469, "mathemat": 469, "allevi": 469, "coarsest": 469, "finer": [469, 472], "matric": 469, "similarli": 469, "finest": 469, "consumpt": 469, "why": [469, 470], "suppos": 469, "6839": 469, "4741": 469, "7451": 469, "9301": 469, "1742": 469, "6835": 469, "q_min": 469, "q_max": 469, "q_x": 469, "clamp_": 469, "round_": 469, "w_q": 469, "00296431384049356": 469, "59": [469, 475], "172": 469, "192": 469, "w_dq": 469, "1220": 469, "0500": 469, "1430": 469, "2570": 469, "1890": 469, "mseloss": 469, "1983354538679123": 469, "6848": 469, "4743": 469, "7440": 469, "9308": 469, "1749": 469, "385297635664756e": 469, "07": [469, 474, 475], "affect": 469, "quantize_per_channel": 469, "x_tmp": 469, "detach": 469, "keepdim": 469, "dequantize_per_channel": 469, "0029": [469, 475], "0036": 469, "162": [469, 475], "48": [469, 475], "72": [469, 475], "93": [469, 475], "207": 469, "139": 469, "6837": 469, "4734": 469, "1751": 469, "6821": 469, "637690492221736e": 469, "6376e": 469, "3852e": 469, "cdot": 469, "quantize_per_tensor_absmax": 469, "n_bit": 469, "div_": 469, "0806": 469, "7589": 469, "6038": 469, "3815": 469, "5040": 469, "7174": 469, "5444": 469, "5826": 469, "7772": 469, "5555": 469, "3740": 469, "3253": 469, "0698": 469, "1381": 469, "5972": 469, "0086": 469, "0737": 469, "8298": 469, "6883": 469, "2991": 469, "1601": 469, "6506": 469, "8246": 469, "3924": 469, "3845": 469, "8768": 469, "w_scale": 469, "x_q": 469, "x_scale": 469, "84": [469, 475], "120": 469, "0059755356051027775": 469, "119": 469, "57": [469, 475], "91": [469, 475], "006533813662827015": 469, "y_q": 469, "17509": 469, "7608": 469, "4055": 469, "16599": 469, "21020": 469, "10016": 469, "9860": 469, "22444": 469, "y_dq": 469, "6836": 469, "2970": 469, "1583": 469, "6481": 469, "8207": 469, "3911": 469, "3850": 469, "8763": 469, "though": 469, "prove": 469, "simplic": 469, "middl": 469, "denot": 469, "fp1": 469, "fp2": 469, "subsect": [469, 474], "even": 469, "intuit": 469, "x1": [469, 472], "x2": [469, 472], "herebi": 469, "recalcul": 469, "sq": 469, "overhead": 469, "hardtanh": 469, "t5norm": 469, "llamanorm": 469, "groupnorm": 469, "lambada": 469, "sweet": 469, "spot": 469, "region": 469, "bigscienc": 469, "560m": 469, "65": [469, 475], "44": [469, 475], "66": [469, 475], "76": [469, 475], "1b7": 469, "71": [469, 475], "43": [469, 475], "67": [469, 475], "78": [469, 471, 475], "56": [469, 475], "58": [469, 475], "55": [469, 475], "3b": 469, "73": [469, 475], "69": [469, 475], "74": [469, 475], "7b1": 469, "77": [469, 475], "46": [469, 475], "17": [469, 475], "82": [469, 475], "52": [469, 475], "facebook": 469, "125m": 469, "41": [469, 475], "70": [469, 475], "94": [469, 471, 475], "79": [469, 470, 475], "60": [469, 475], "81": [469, 475], "26": [469, 475], "39": [469, 475], "68": [469, 471, 475], "eleutherai": [469, 475], "6b": [469, 475], "29": [469, 475], "96": [469, 475], "jason": 469, "emerg": 469, "transact": 469, "yvinec": 469, "edouard": 469, "proceed": 469, "cvf": 469, "winter": 469, "discov": 470, "valuabl": 470, "instrument": 470, "writer": 470, "_pre_eval_hook": 470, "_post_eval_hook": 470, "submodul": 470, "whitelist": 470, "_recordingobserv": 470, "output_tensors_dict": 470, "current_it": 470, "get_tensor_valu": 470, "_observer_forward_hook": 470, "activation_post_process": 470, "_add_observer_": 470, "named_children": 470, "leaf": 470, "add_modul": 470, "register_forward_hook": 470, "dump_tim": 470, "summarywrit": 470, "_acc": 470, "tune_": 470, "add_graph": 470, "get_observer_dict": 470, "observer_dict": 470, "is_quant": 470, "add_histogram": 470, "shell": 470, "bind_al": 470, "logdir_spec": 470, "tune_0_acc0": 470, "tune_1": 470, "tune_1_acc0": 470, "four": 470, "baseline_acc_0": 470, "776": 470, "tune_1_acc_0": 470, "095": 470, "runs_v3": 470, "run_tuning_dump_tensor": 470, "sh": 470, "inceptionv3": 470, "skip": [470, 472], "bash": 470, "run_tun": 470, "topologi": 470, "inception_v3": 470, "inceptionv3_fp32_pretrained_model": 470, "nc_inceptionv3": 470, "inceptionv3_dump_tensor": 470, "poor": 470, "eightbit": 470, "disappear": 470, "centercrop": 471, "randomcrop": 471, "cropres": 471, "decodeimag": 471, "jpeg": 471, "encodejp": 471, "alignimagechannel": 471, "116": 471, "103": 471, "017": 471, "bilinearimagenet": [471, 474], "topilimag": 471, "padding_mod": 471, "border": 471, "pixel": 471, "edg": 471, "colorjitt": 471, "bright": 471, "satur": 471, "hue": 471, "jitter": 471, "tondarrai": 471, "quickli": [472, 473], "human": 472, "concret": 472, "aggress": 472, "classic": 472, "flowchart": 472, "htmllabel": 472, "td": 472, "classdef": 472, "itemstyl": 472, "cce5ff": 472, "stroke": 472, "99ccff": 472, "s1": 472, "s2": 472, "s3": 472, "s4": 472, "s5": 472, "s6": 472, "s7": 472, "nbsp": 472, "subgraphstyl": 472, "ffffff": 472, "attempt": 472, "post_training_auto_qu": 472, "trial": 472, "increment": 472, "primari": 472, "ii": 472, "highest": 472, "spent": 472, "hawq_v2_loss": 472, "model_loss": 472, "black": 472, "come": 472, "compli": 472, "posterior": 472, "focu": 472, "short": 472, "never": 472, "loglevel": 472, "endlessli": 472, "perspect": 472, "smbo": 472, "appl": 472, "surrog": 472, "densiti": 472, "parzen": 472, "greatest": 472, "hour": 472, "dai": 472, "next_tune_cfg": 472, "overridden": 472, "cluster": 472, "seamlessli": 472, "mpi": 472, "replic": 472, "replica": 472, "fed": 472, "synchron": 472, "mpirun": 472, "number_of_process": 472, "run_cmd": 472, "abctunestrategi": 472, "familiar": 473, "notebook": 473, "introduct": 473, "organ": 474, "logic": 474, "mobilenet_v1": 474, "hyper": 474, "40": [474, 475], "06": [474, 475], "beta_1": 474, "beta_2": 474, "epsilon": 474, "sparsecategoricalcrossentropi": 474, "sum_over_batch_s": 474, "from_logit": 474, "54": [474, 475], "19": [474, 475], "1x": 475, "platinum": 475, "8480": 475, "8ghz": 475, "ht": 475, "turbo": 475, "256gb": 475, "16x16gb": 475, "ddr5": 475, "4800": 475, "mt": 475, "bio": 475, "3a14": 475, "tel2p1": 475, "microcod": 475, "0x2b0001b0": 475, "gcc": 475, "20210514": 475, "red": 475, "hat": 475, "visit": 475, "1s4c14ins1bsthroughput": 475, "sec": 475, "2721": 475, "638": 475, "26x": 475, "23": 475, "31": 475, "2123": 475, "552": 475, "84x": 475, "resnet101": 475, "37": 475, "1477": 475, "432": 475, "42x": 475, "incept": 475, "3267": 475, "92": 475, "1266": 475, "03": 475, "58x": 475, "38": 475, "2399": 475, "1098": 475, "18x": 475, "v3": 475, "1593": 475, "508": 475, "13x": 475, "1032": 475, "249": 475, "14x": 475, "34": 475, "427": 475, "185": 475, "30x": 475, "5503": 475, "1791": 475, "62": 475, "07x": 475, "3639": 475, "1864": 475, "95x": 475, "47": 475, "1538": 475, "236": 475, "51x": 475, "vgg19": 475, "1368": 475, "196": 475, "resnetv2": 475, "1105": 475, "657": 475, "68x": 475, "716": 475, "49": 475, "369": 475, "94x": 475, "152": 475, "269": 475, "89x": 475, "densenet": 475, "121": 475, "617": 475, "498": 475, "24x": 475, "161": 475, "372": 475, "242": 475, "54x": 475, "169": 475, "496": 475, "411": 475, "21x": 475, "efficientnet": 475, "b0": 475, "748": 475, "709": 475, "05x": 475, "00": 475, "134": 475, "34x": 475, "1273": 475, "671": 475, "90x": 475, "136": 475, "53": 475, "1235": 475, "477": 475, "09": 475, "179": 475, "85x": 475, "cnn": 475, "79x": 475, "83x": 475, "156": 475, "67x": 475, "23x": 475, "173": 475, "00x": 475, "yolov3": 475, "211": 475, "41x": 475, "82x": 475, "61": 475, "49x": 475, "86": 475, "424": 475, "174": 475, "44x": 475, "29x": 475, "55612": 475, "43479": 475, "28x": 475, "1s56c1ins1bsthroughput": 475, "65x": 475, "gpt2": 475, "2716": 475, "569": 475, "77x": 475, "2683": 475, "476": 475, "64x": 475, "2349": 475, "1035": 475, "27x": 475, "930": 475, "763": 475, "262": 475, "91x": 475, "4003": 475, "1677": 475, "39x": 475, "2766": 475, "36": 475, "2643": 475, "1495": 475, "238": 475, "1372": 475, "199": 475, "88x": 475, "1457": 475, "630": 475, "31x": 475, "842": 475, "338": 475, "645": 475, "231": 475, "938": 475, "707": 475, "33x": 475, "1533": 475, "1258": 475, "22x": 475, "981": 475, "647": 475, "52x": 475, "850": 475, "444": 475, "37x": 475, "543": 475, "74x": 475, "93x": 475, "947": 475, "233": 475, "788": 475, "462": 475, "71x": 475, "15x": 475, "51958": 475, "39974": 475, "1631": 475, "662": 475, "46x": 475, "1162": 475, "330": 475, "968": 475, "334": 475, "resnest50": 475, "394": 475, "resnext101_32x8d": 475, "558": 475, "108": 475, "efficientnet_b0": 475, "703": 475, "656": 475, "efficientnet_b3": 475, "510": 475, "391": 475, "efficientnet_b7": 475, "150": 475, "55x": 475, "peleenet": 475, "857": 475, "585": 475, "yolo": 475, "160": 475, "66x": 475, "141": 475, "407": 475, "camembert": 475, "402": 475, "32x": 475, "343": 475, "804": 475, "352": 475, "17x": 475, "302": 475, "183": 475, "382": 475, "19x": 475, "35x": 475, "51": 475, "414": 475, "stsb": 475, "413": 475, "410": 475, "138": 475, "69x": 475, "385": 475, "76x": 475, "126": 475, "wikitext": 475, "reform": 475, "crime": 475, "punish": 475, "449": 475, "364": 475, "lvwerra": 475, "pegasu": 475, "samsum": 475, "openai": 475, "whisper": 475, "abeja": 475, "neox": 475, "japanes": 475, "1723": 475, "654": 475, "63x": 475, "1141": 475, "306": 475, "73x": 475, "106": 475, "1379": 475, "729": 475, "389": 475, "25x": 475, "1980": 475, "672": 475, "5032": 475, "1500": 475, "resnext101_32x16d_wsl": 475, "533": 475, "36x": 475, "556": 475, "149": 475, "1412": 475, "710": 475, "99x": 475, "1564": 475, "712": 475, "20x": 475, "1377": 475, "719": 475, "1446": 475, "06x": 475, "1579": 475, "747": 475, "11x": 475, "1508": 475, "749": 475, "01x": 475, "6950": 475, "4214": 475, "6881": 475, "4192": 475, "6563": 475, "3804": 475, "6631": 475, "3922": 475, "423": 475, "158": 475, "571": 475, "53x": 475, "598": 475, "163": 475, "594": 475, "164": 475, "62x": 475, "5473": 475, "2567": 475, "5455": 475, "2563": 475, "shufflenet": 475, "6818": 475, "3839": 475, "78x": 475, "5750": 475, "3861": 475, "googlenet": 475, "1783": 475, "1095": 475, "1755": 475, "1071": 475, "squeezenet": 475, "9918": 475, "5639": 475, "9423": 475, "5501": 475, "caffenet": 475, "3363": 475, "1015": 475, "3276": 475, "798": 475, "10x": 475, "2104": 475, "985": 475, "2054": 475, "745": 475, "zfnet": 475, "864": 475, "866": 475, "455": 475, "1802": 475, "1170": 475, "1813": 475, "1164": 475, "56x": 475, "2615": 475, "1349": 475, "2343": 475, "1322": 475, "499": 475, "1288": 475, "878": 475, "47x": 475, "1173": 475, "851": 475, "38x": 475, "1114": 475, "825": 475, "1056": 475, "792": 475, "669": 475, "140": 475, "110": 475, "yolov4": 475, "12x": 475, "duc": 475, "tini": 475, "1163": 475, "993": 475, "ultra": 475, "8501": 475, "1922": 475, "emot": 475, "ferplu": 475, "3552": 475, "3114": 475, "arcfac": 475, "246": 475, "399": 475, "226": 475, "392": 475, "223": 475, "integerop": 475, "474": 475, "222": 475, "557": 475, "963": 475, "529": 475, "603": 475, "398": 475, "187": 475, "96x": 475, "144": 475, "124": 475, "bidaf": 475, "2757": 475, "2279": 475, "lm": 475, "357": 475, "472": 475, "365": 475, "214": 475, "70x": 475, "489": 475, "212": 475, "213": 475, "61x": 475, "270": 475, "215": 475, "491": 475, "l12": 475, "h384": 475, "1051": 475, "583": 475, "80x": 475, "1076": 475, "589": 475, "896": 475, "396": 475, "753": 475, "274": 475, "210": 475, "271": 475, "l6": 475, "1124": 475, "2010": 475, "1127": 475, "401": 475, "494": 475, "electra": 475, "discrimin": 475, "1804": 475, "1154": 475, "1961": 475, "1158": 475, "mini": 475, "4986": 475, "3444": 475, "45x": 475, "5603": 475, "3320": 475, "bart": 475, "deberta": 475, "147": 475, "170": 475, "16x": 475, "spanbert": 475, "multilingu": 475, "159": 475, "distilgpt2": 475, "layoutlm": 475, "funsd": 475, "50x": 475, "layoutlmv3": 475, "fcn": 475, "taskdataset": 475, "accuracyspars": 475, "ratiospars": 475, "commentsbalancedor": 475, "unbalanc": 475, "answeringsquad": 475, "87f1": 475, "momentumunbalanc": 475, "momentumbalanc": 475, "90f1": 475, "59f1": 475, "23f1": 475, "classificationmrpc": 475, "52f1": 475, "26f1": 475, "classificationsst": 475, "61accuraci": 475, "recognitionimagenet": 475, "95top1": 475, "v5s6": 475, "detectioncoco": 475, "ap0": 475, "6ap0": 475, "393": 475, "584": 475, "34f1": 475, "lassounbalanc": 475, "classificationmnli": 475, "mm": 475, "allbalanc": 475, "32accuraci": 475, "sensitivitybalanc": 475, "classificationqqp": 475, "classificationqnli": 475, "54accuraci": 475, "em": 475, "mobilenetv2": 475, "7965": 475, "wideresnet40": 475, "9522": 475, "8178": 475, "0213": 475, "8235": 475, "027": 475, "5494": 475, "7153": 475, "5540": 475, "0046": 475, "5523": 475, "vgg": 475, "bn": 475, "7022": 475, "7415": 475, "7025": 475, "0003": 475, "6739": 475, "7399": 475, "6845": 475, "0106": 475, "blendcnn": 475, "7034": 475, "8382": 475, "bilstm": 475, "8314": 475, "9403": 475, "9048": 475, "0734": 475, "7323": 475, "8256": 475, "8084": 475, "8814": 475, "7442": 475, "8371": 475, "0119": 475, "0115": 475, "tinybert": 475, "8018": 475, "8044": 475, "8363": 475, "8411": 475, "8025": 475, "8074": 475, "0007": 475, "0030": 475, "8626": 475, "8213": 475, "9091": 475, "8782": 475, "8684": 475, "8259": 475, "0058": 475, "distilroberta": 475, "6057": 475, "6455": 475, "6187": 475, "0130": 475, "c6i": 475, "2xlarg": 475, "c6a": 475, "c6g": 475, "a100cuda": 475, "executionprovid": 475}, "objects": {"": [[0, 0, 0, "-", "block_mask"], [318, 0, 0, "-", "neural_compressor"]], "neural_compressor": [[2, 0, 0, "-", "adaptor"], [161, 0, 0, "-", "algorithm"], [164, 0, 0, "-", "benchmark"], [168, 0, 0, "-", "compression"], [182, 0, 0, "-", "conf"], [184, 0, 0, "-", "config"], [185, 0, 0, "-", "contrib"], [210, 0, 0, "-", "data"], [265, 0, 0, "-", "experimental"], [325, 0, 0, "-", "metric"], [327, 0, 0, "-", "mix_precision"], [329, 0, 0, "-", "model"], [337, 0, 0, "-", "objective"], [338, 0, 0, "-", "profiling"], [360, 0, 0, "-", "quantization"], [368, 0, 0, "-", "strategy"], [380, 0, 0, "-", "template"], [381, 0, 0, "-", "training"], [385, 0, 0, "-", "utils"], [394, 0, 0, "-", "version"]], "neural_compressor.adaptor": [[1, 0, 0, "-", "adaptor"], [3, 0, 0, "-", "keras"], [7, 0, 0, "-", "keras_utils"], [11, 0, 0, "-", "mxnet"], [12, 0, 0, "-", "mxnet_utils"], [14, 0, 0, "-", "onnxrt"], [17, 0, 0, "-", "ox_utils"], [44, 0, 0, "-", "pytorch"], [45, 0, 0, "-", "query"], [46, 0, 0, "-", "tensorflow"], [110, 0, 0, "-", "tf_utils"], [151, 0, 0, "-", "torch_utils"]], "neural_compressor.adaptor.adaptor": [[1, 1, 1, "", "Adaptor"], [1, 2, 1, "", "adaptor_registry"]], "neural_compressor.adaptor.keras": [[3, 1, 1, "", "KerasAdaptor"], [3, 1, 1, "", "KerasQuery"]], "neural_compressor.adaptor.keras_utils": [[4, 0, 0, "-", "conv2d"], [5, 0, 0, "-", "dense"], [6, 0, 0, "-", "depthwise_conv2d"], [8, 0, 0, "-", "pool2d"], [9, 0, 0, "-", "quantizer"], [10, 0, 0, "-", "separable_conv2d"]], "neural_compressor.adaptor.mxnet": [[11, 1, 1, "", "MXNetQuery"], [11, 1, 1, "", "MxNetAdaptor"]], "neural_compressor.adaptor.mxnet_utils": [[13, 0, 0, "-", "util"]], "neural_compressor.adaptor.mxnet_utils.util": [[13, 1, 1, "", "CalibCollector"], [13, 1, 1, "", "CalibData"], [13, 1, 1, "", "CollectorBase"], [13, 1, 1, "", "DataIterLoader"], [13, 1, 1, "", "DataLoaderWrap"], [13, 1, 1, "", "NameCollector"], [13, 1, 1, "", "OpType"], [13, 1, 1, "", "TensorCollector"], [13, 2, 1, "", "amp_convert"], [13, 2, 1, "", "calib_model"], [13, 2, 1, "", "check_mx_version"], [13, 2, 1, "", "combine_capabilities"], [13, 2, 1, "", "create_data_example"], [13, 2, 1, "", "distribute_calib_tensors"], [13, 2, 1, "", "ensure_list"], [13, 2, 1, "", "fuse"], [13, 2, 1, "", "get_framework_name"], [13, 2, 1, "", "is_model_quantized"], [13, 2, 1, "", "isiterable"], [13, 2, 1, "", "make_module"], [13, 2, 1, "", "make_nc_model"], [13, 2, 1, "", "make_symbol_block"], [13, 2, 1, "", "ndarray_to_device"], [13, 2, 1, "", "parse_tune_config"], [13, 2, 1, "", "prepare_dataloader"], [13, 2, 1, "", "prepare_model"], [13, 2, 1, "", "prepare_model_data"], [13, 2, 1, "", "quantize_sym_model"], [13, 2, 1, "", "query_quantizable_nodes"], [13, 2, 1, "", "run_forward"]], "neural_compressor.adaptor.onnxrt": [[14, 1, 1, "", "ONNXRTQuery"], [14, 1, 1, "", "ONNXRT_IntegerOpsAdaptor"], [14, 1, 1, "", "ONNXRT_QDQAdaptor"], [14, 1, 1, "", "ONNXRT_QLinearOpsAdaptor"], [14, 1, 1, "", "ONNXRUNTIMEAdaptor"]], "neural_compressor.adaptor.ox_utils": [[15, 0, 0, "-", "calibration"], [16, 0, 0, "-", "calibrator"], [29, 0, 0, "-", "operators"], [41, 0, 0, "-", "quantizer"], [42, 0, 0, "-", "smooth_quant"], [43, 0, 0, "-", "util"]], "neural_compressor.adaptor.ox_utils.calibration": [[15, 1, 1, "", "ONNXRTAugment"]], "neural_compressor.adaptor.ox_utils.calibrator": [[16, 1, 1, "", "CalibratorBase"], [16, 1, 1, "", "HistogramCollector"], [16, 1, 1, "", "KLCalibrator"], [16, 1, 1, "", "MinMaxCalibrator"], [16, 1, 1, "", "PercentileCalibrator"], [16, 2, 1, "", "calib_registry"], [16, 2, 1, "", "smooth_distribution"]], "neural_compressor.adaptor.ox_utils.operators": [[18, 0, 0, "-", "activation"], [19, 0, 0, "-", "argmax"], [20, 0, 0, "-", "attention"], [21, 0, 0, "-", "binary_op"], [22, 0, 0, "-", "concat"], [23, 0, 0, "-", "conv"], [24, 0, 0, "-", "direct_q8"], [25, 0, 0, "-", "embed_layernorm"], [26, 0, 0, "-", "gather"], [27, 0, 0, "-", "gavgpool"], [28, 0, 0, "-", "gemm"], [30, 0, 0, "-", "lstm"], [31, 0, 0, "-", "matmul"], [32, 0, 0, "-", "maxpool"], [33, 0, 0, "-", "norm"], [34, 0, 0, "-", "ops"], [35, 0, 0, "-", "pad"], [36, 0, 0, "-", "pooling"], [37, 0, 0, "-", "reduce"], [38, 0, 0, "-", "resize"], [39, 0, 0, "-", "split"], [40, 0, 0, "-", "unary_op"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[18, 1, 1, "", "ActivationOperator"], [18, 1, 1, "", "Float16ActivationOperator"], [18, 1, 1, "", "QActivationOperator"], [18, 1, 1, "", "RemovableActivationOperator"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[19, 1, 1, "", "ArgMaxOperator"], [19, 1, 1, "", "QArgMaxOperator"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[20, 1, 1, "", "AttentionOperator"], [20, 1, 1, "", "QAttentionOperator"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[21, 1, 1, "", "BinaryOperator"], [21, 1, 1, "", "Float16BinaryOperator"], [21, 1, 1, "", "QBinaryOperator"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[22, 1, 1, "", "ConcatOperator"], [22, 1, 1, "", "QConcatOperator"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[23, 1, 1, "", "ConvOperator"], [23, 1, 1, "", "QConvOperator"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[24, 1, 1, "", "Direct8BitOperator"], [24, 1, 1, "", "QDirectOperator"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[25, 1, 1, "", "EmbedLayerNormalizationOperator"], [25, 1, 1, "", "QEmbedLayerNormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[26, 1, 1, "", "GatherOperator"], [26, 1, 1, "", "QGatherOperator"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[27, 1, 1, "", "GlobalAveragePoolOperator"], [27, 1, 1, "", "QGlobalAveragePoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[28, 1, 1, "", "GemmOperator"], [28, 1, 1, "", "QGemmOperator"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[30, 1, 1, "", "LSTMOperator"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[31, 1, 1, "", "FusedMatMulOperator"], [31, 1, 1, "", "MatMulOperator"], [31, 1, 1, "", "QMatMulOperator"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[32, 1, 1, "", "MaxPoolOperator"], [32, 1, 1, "", "QMaxPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.norm": [[33, 1, 1, "", "BatchNormalizationOperator"], [33, 1, 1, "", "NormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[34, 1, 1, "", "Operator"], [34, 1, 1, "", "QOperator"], [34, 2, 1, "", "op_registry"], [34, 2, 1, "", "qop_registry"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[35, 1, 1, "", "PadOperator"], [35, 1, 1, "", "QPadOperator"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[36, 1, 1, "", "PoolOperator"], [36, 1, 1, "", "QPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.reduce": [[37, 1, 1, "", "ReduceOperator"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[38, 1, 1, "", "QResizeOperator"], [38, 1, 1, "", "ResizeOperator"]], "neural_compressor.adaptor.ox_utils.operators.split": [[39, 1, 1, "", "QSplitOperator"], [39, 1, 1, "", "SplitOperator"]], "neural_compressor.adaptor.ox_utils.operators.unary_op": [[40, 1, 1, "", "UnaryOperator"]], "neural_compressor.adaptor.ox_utils.quantizer": [[41, 1, 1, "", "Quantizer"]], "neural_compressor.adaptor.ox_utils.smooth_quant": [[42, 1, 1, "", "ORTSmoothQuant"], [42, 2, 1, "", "get_quant_dequant_output"], [42, 2, 1, "", "make_sub_graph"], [42, 2, 1, "", "quant_dequant_data"]], "neural_compressor.adaptor.ox_utils.util": [[43, 1, 1, "", "QuantFormat"], [43, 1, 1, "", "QuantType"], [43, 1, 1, "", "QuantizationMode"], [43, 1, 1, "", "QuantizedInitializer"], [43, 1, 1, "", "QuantizedValue"], [43, 1, 1, "", "QuantizedValueType"], [43, 1, 1, "", "ValueInfo"], [43, 2, 1, "", "attribute_to_kwarg"], [43, 2, 1, "", "calculate_scale_zp"], [43, 2, 1, "", "cast_tensor"], [43, 2, 1, "", "collate_preds"], [43, 2, 1, "", "dequantize_data"], [43, 2, 1, "", "dequantize_data_with_scale_zero"], [43, 2, 1, "", "dtype_to_name"], [43, 2, 1, "", "find_by_name"], [43, 2, 1, "", "float_to_bfloat16"], [43, 2, 1, "", "float_to_float16"], [43, 2, 1, "", "is_B_transposed"], [43, 2, 1, "", "make_dquant_node"], [43, 2, 1, "", "make_quant_node"], [43, 2, 1, "", "quantize_data"], [43, 2, 1, "", "quantize_data_per_channel"], [43, 2, 1, "", "quantize_data_with_scale_zero"], [43, 2, 1, "", "quantize_nparray"], [43, 2, 1, "", "remove_init_from_model_input"], [43, 2, 1, "", "split_shared_bias"], [43, 2, 1, "", "to_numpy"], [43, 2, 1, "", "trt_env_setup"]], "neural_compressor.adaptor.pytorch": [[44, 1, 1, "", "PyTorchAdaptor"], [44, 1, 1, "", "PyTorchWeightOnlyAdaptor"], [44, 1, 1, "", "PyTorch_FXAdaptor"], [44, 1, 1, "", "PyTorch_IPEXAdaptor"], [44, 1, 1, "", "TemplateAdaptor"], [44, 2, 1, "", "get_ops_recursively"]], "neural_compressor.adaptor.query": [[45, 1, 1, "", "QueryBackendCapability"]], "neural_compressor.adaptor.tensorflow": [[46, 1, 1, "", "TensorFlowAdaptor"], [46, 1, 1, "", "TensorflowQuery"], [46, 1, 1, "", "Tensorflow_ITEXAdaptor"]], "neural_compressor.adaptor.tf_utils": [[47, 0, 0, "-", "graph_converter"], [48, 0, 0, "-", "graph_converter_without_calib"], [86, 0, 0, "-", "graph_rewriter"], [109, 0, 0, "-", "graph_util"], [111, 0, 0, "-", "quantize_graph"], [138, 0, 0, "-", "quantize_graph_common"], [139, 0, 0, "-", "smooth_quant_calibration"], [140, 0, 0, "-", "smooth_quant_scaler"], [141, 0, 0, "-", "tf2onnx_converter"], [144, 0, 0, "-", "transform_graph"], [147, 0, 0, "-", "util"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[47, 1, 1, "", "GraphConverter"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[48, 1, 1, "", "GraphConverterWithoutCalib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[50, 0, 0, "-", "bf16"], [75, 0, 0, "-", "generic"], [85, 0, 0, "-", "graph_base"], [94, 0, 0, "-", "int8"], [100, 0, 0, "-", "onnx"], [105, 0, 0, "-", "qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[49, 0, 0, "-", "bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[49, 1, 1, "", "BF16Convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[51, 0, 0, "-", "convert_add_to_biasadd"], [52, 0, 0, "-", "convert_layout"], [53, 0, 0, "-", "convert_leakyrelu"], [54, 0, 0, "-", "convert_nan_to_random"], [55, 0, 0, "-", "convert_placeholder_to_const"], [56, 0, 0, "-", "dequantize_cast_optimizer"], [57, 0, 0, "-", "dilated_contraction"], [58, 0, 0, "-", "dummy_biasadd"], [59, 0, 0, "-", "expanddims_optimizer"], [60, 0, 0, "-", "fetch_weight_from_reshape"], [61, 0, 0, "-", "fold_batch_norm"], [62, 0, 0, "-", "fold_constant"], [63, 0, 0, "-", "fuse_biasadd_add"], [64, 0, 0, "-", "fuse_column_wise_mul"], [65, 0, 0, "-", "fuse_conv_with_math"], [66, 0, 0, "-", "fuse_decomposed_bn"], [67, 0, 0, "-", "fuse_decomposed_in"], [68, 0, 0, "-", "fuse_gelu"], [69, 0, 0, "-", "fuse_layer_norm"], [70, 0, 0, "-", "fuse_pad_with_conv"], [71, 0, 0, "-", "fuse_pad_with_fp32_conv"], [72, 0, 0, "-", "fuse_reshape_transpose"], [73, 0, 0, "-", "graph_cse_optimizer"], [74, 0, 0, "-", "grappler_pass"], [76, 0, 0, "-", "insert_print_node"], [77, 0, 0, "-", "move_squeeze_after_relu"], [78, 0, 0, "-", "pre_optimize"], [79, 0, 0, "-", "remove_training_nodes"], [80, 0, 0, "-", "rename_batch_norm"], [81, 0, 0, "-", "split_shared_input"], [82, 0, 0, "-", "strip_equivalent_nodes"], [83, 0, 0, "-", "strip_unused_nodes"], [84, 0, 0, "-", "switch_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[51, 1, 1, "", "ConvertAddToBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[52, 1, 1, "", "ConvertLayoutOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[53, 1, 1, "", "ConvertLeakyReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[54, 1, 1, "", "ConvertNanToRandom"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[55, 1, 1, "", "ConvertPlaceholderToConst"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[56, 1, 1, "", "DequantizeCastOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[57, 1, 1, "", "DilatedContraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[58, 1, 1, "", "InjectDummyBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[59, 1, 1, "", "ExpandDimsOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[60, 1, 1, "", "FetchWeightFromReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[61, 1, 1, "", "FoldBatchNormNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[62, 1, 1, "", "GraphFoldConstantOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[63, 1, 1, "", "FuseBiasAddAndAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[64, 1, 1, "", "FuseColumnWiseMulOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[65, 1, 1, "", "FuseConvWithMathOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[66, 1, 1, "", "FuseDecomposedBNOptimizer"], [66, 2, 1, "", "bypass_reshape"], [66, 2, 1, "", "get_const_dim_count"], [66, 2, 1, "", "node_from_map"], [66, 2, 1, "", "node_name_from_input"], [66, 2, 1, "", "valid_reshape_inputs"], [66, 2, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[67, 1, 1, "", "FuseDecomposedINOptimizer"], [67, 2, 1, "", "bypass_reshape"], [67, 2, 1, "", "get_const_dim_count"], [67, 2, 1, "", "node_from_map"], [67, 2, 1, "", "node_name_from_input"], [67, 2, 1, "", "valid_reshape_inputs"], [67, 2, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[68, 1, 1, "", "FuseGeluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[69, 1, 1, "", "FuseLayerNormOptimizer"], [69, 2, 1, "", "node_from_map"], [69, 2, 1, "", "node_name_from_input"], [69, 2, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[70, 1, 1, "", "FusePadWithConv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[71, 1, 1, "", "FusePadWithFP32Conv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[72, 1, 1, "", "FuseTransposeReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[73, 1, 1, "", "GraphCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[74, 1, 1, "", "GrapplerOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[76, 1, 1, "", "InsertPrintMinMaxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[77, 1, 1, "", "MoveSqueezeAfterReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[78, 1, 1, "", "PreOptimization"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[79, 1, 1, "", "RemoveTrainingNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[80, 1, 1, "", "RenameBatchNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[81, 1, 1, "", "SplitSharedInputOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[82, 1, 1, "", "StripEquivalentNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[83, 1, 1, "", "StripUnusedNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[84, 1, 1, "", "SwitchOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[85, 1, 1, "", "GraphRewriterBase"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[87, 0, 0, "-", "freeze_fake_quant"], [88, 0, 0, "-", "freeze_value"], [89, 0, 0, "-", "freeze_value_without_calib"], [90, 0, 0, "-", "fuse_conv_redundant_dequantize"], [91, 0, 0, "-", "fuse_conv_requantize"], [92, 0, 0, "-", "fuse_matmul_redundant_dequantize"], [93, 0, 0, "-", "fuse_matmul_requantize"], [95, 0, 0, "-", "meta_op_optimizer"], [96, 0, 0, "-", "post_hostconst_converter"], [97, 0, 0, "-", "post_quantized_op_cse"], [98, 0, 0, "-", "rnn_convert"], [99, 0, 0, "-", "scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[87, 1, 1, "", "FreezeFakeQuantOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[88, 1, 1, "", "FreezeValueTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[89, 1, 1, "", "FreezeValueWithoutCalibTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[90, 1, 1, "", "FuseConvRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[91, 1, 1, "", "FuseConvRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[92, 1, 1, "", "FuseMatMulRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[93, 1, 1, "", "FuseMatMulRequantizeDequantizeNewAPITransformer"], [93, 1, 1, "", "FuseMatMulRequantizeDequantizeTransformer"], [93, 1, 1, "", "FuseMatMulRequantizeNewAPITransformer"], [93, 1, 1, "", "FuseMatMulRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[95, 1, 1, "", "MetaInfoChangingMemOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[96, 1, 1, "", "PostHostConstConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[97, 1, 1, "", "PostCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[98, 1, 1, "", "QuantizedRNNConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[99, 1, 1, "", "ScaleProPagationTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[101, 0, 0, "-", "onnx_graph"], [102, 0, 0, "-", "onnx_node"], [103, 0, 0, "-", "onnx_schema"], [104, 0, 0, "-", "tf2onnx_utils"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[101, 1, 1, "", "OnnxGraph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[102, 1, 1, "", "OnnxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[103, 1, 1, "", "OnnxOpSchema"], [103, 2, 1, "", "get_max_supported_opset_version"], [103, 2, 1, "", "get_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[104, 1, 1, "", "SeqType"], [104, 2, 1, "", "add_port_to_name"], [104, 2, 1, "", "are_shapes_equal"], [104, 2, 1, "", "assert_error"], [104, 2, 1, "", "compute_const_folding_using_tf"], [104, 2, 1, "", "convert_tensorflow_tensor_to_onnx"], [104, 2, 1, "", "find_opset"], [104, 2, 1, "", "get_index_from_strided_slice_of_shape"], [104, 2, 1, "", "get_subgraphs_from_onnx"], [104, 2, 1, "", "get_tensorflow_node_attr"], [104, 2, 1, "", "get_tensorflow_node_shape_attr"], [104, 2, 1, "", "get_tensorflow_tensor_data"], [104, 2, 1, "", "get_tensorflow_tensor_shape"], [104, 2, 1, "", "infer_onnx_shape_dtype"], [104, 2, 1, "", "initialize_name_counter"], [104, 2, 1, "", "is_list_or_tuple"], [104, 2, 1, "", "is_onnx_domain"], [104, 2, 1, "", "make_onnx_inputs_outputs"], [104, 2, 1, "", "make_onnx_shape"], [104, 2, 1, "", "map_numpy_to_onnx_dtype"], [104, 2, 1, "", "map_onnx_to_numpy_type"], [104, 2, 1, "", "map_tensorflow_dtype"], [104, 2, 1, "", "read_tensorflow_node_attrs"], [104, 2, 1, "", "save_protobuf"], [104, 2, 1, "", "set_name"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[106, 0, 0, "-", "insert_qdq_pattern"], [107, 0, 0, "-", "merge_duplicated_qdq"], [108, 0, 0, "-", "share_qdq_y_pattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[106, 1, 1, "", "GenerateGraphWithQDQPattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[107, 1, 1, "", "MergeDuplicatedQDQOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[108, 1, 1, "", "ShareQDQForItexYPatternOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_util": [[109, 1, 1, "", "GraphAnalyzer"], [109, 1, 1, "", "GraphRewriterHelper"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[113, 0, 0, "-", "qat"], [129, 0, 0, "-", "qdq"], [131, 0, 0, "-", "quantize_graph_base"], [132, 0, 0, "-", "quantize_graph_bn"], [133, 0, 0, "-", "quantize_graph_concatv2"], [134, 0, 0, "-", "quantize_graph_conv"], [135, 0, 0, "-", "quantize_graph_for_intel_cpu"], [136, 0, 0, "-", "quantize_graph_matmul"], [137, 0, 0, "-", "quantize_graph_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[112, 0, 0, "-", "fake_quantize"], [114, 0, 0, "-", "quantize_config"], [115, 0, 0, "-", "quantize_helper"], [116, 0, 0, "-", "quantize_layers"], [121, 0, 0, "-", "quantize_wrapper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[112, 1, 1, "", "FakeQuantize"], [112, 1, 1, "", "FakeQuantizeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[114, 1, 1, "", "QuantizeConfig"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[115, 2, 1, "", "init_quantize_config"], [115, 2, 1, "", "qat_clone_function"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[117, 0, 0, "-", "optimize_layer"], [118, 0, 0, "-", "quantize_layer_add"], [119, 0, 0, "-", "quantize_layer_base"], [120, 0, 0, "-", "quantize_layer_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[117, 2, 1, "", "config_quantizable_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[118, 1, 1, "", "QuantizeLayerAdd"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[119, 1, 1, "", "QuantizeLayerBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[120, 1, 1, "", "QuantizeLayerBatchNormalization"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[121, 1, 1, "", "QuantizeWrapper"], [121, 1, 1, "", "QuantizeWrapperBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[122, 0, 0, "-", "fuse_qdq_bn"], [123, 0, 0, "-", "fuse_qdq_concatv2"], [124, 0, 0, "-", "fuse_qdq_conv"], [125, 0, 0, "-", "fuse_qdq_deconv"], [126, 0, 0, "-", "fuse_qdq_in"], [127, 0, 0, "-", "fuse_qdq_matmul"], [128, 0, 0, "-", "fuse_qdq_pooling"], [130, 0, 0, "-", "optimize_qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[122, 1, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[123, 1, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[124, 1, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[125, 1, 1, "", "FuseNodeStartWithDeconv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[126, 1, 1, "", "FuseNodeStartWithFusedInstanceNorm"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[127, 1, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[128, 1, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[130, 1, 1, "", "OptimizeQDQGraph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[131, 1, 1, "", "QuantizeGraphBase"], [131, 1, 1, "", "QuantizeNodeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[132, 1, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[133, 1, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[134, 1, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[135, 1, 1, "", "QuantizeGraphForIntel"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[136, 1, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[137, 1, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[138, 1, 1, "", "QuantizeGraphHelper"]], "neural_compressor.adaptor.tf_utils.smooth_quant_calibration": [[139, 1, 1, "", "SmoothQuantCalibration"]], "neural_compressor.adaptor.tf_utils.smooth_quant_scaler": [[140, 1, 1, "", "SmoothQuantScaler"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[141, 1, 1, "", "TensorflowQDQToOnnxQDQConverter"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[142, 0, 0, "-", "bias_correction"], [143, 0, 0, "-", "graph_transform_base"], [145, 0, 0, "-", "insert_logging"], [146, 0, 0, "-", "rerange_quantized_concat"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[142, 1, 1, "", "BiasCorrection"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[143, 1, 1, "", "GraphTransformBase"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[145, 1, 1, "", "InsertLogging"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[146, 1, 1, "", "RerangeQuantizedConcat"]], "neural_compressor.adaptor.tf_utils.util": [[147, 2, 1, "", "collate_tf_preds"], [147, 2, 1, "", "disable_random"], [147, 2, 1, "", "fix_ref_type_of_graph_def"], [147, 2, 1, "", "generate_feed_dict"], [147, 2, 1, "", "get_estimator_graph"], [147, 2, 1, "", "get_graph_def"], [147, 2, 1, "", "get_input_output_node_names"], [147, 2, 1, "", "get_model_input_shape"], [147, 2, 1, "", "get_tensor_by_name"], [147, 2, 1, "", "get_tensor_val_from_graph_node"], [147, 2, 1, "", "get_weight_from_input_tensor"], [147, 2, 1, "", "int8_node_name_reverse"], [147, 2, 1, "", "is_ckpt_format"], [147, 2, 1, "", "is_saved_model_format"], [147, 2, 1, "", "iterator_sess_run"], [147, 2, 1, "", "read_graph"], [147, 2, 1, "", "strip_equivalent_nodes"], [147, 2, 1, "", "strip_unused_nodes"], [147, 2, 1, "", "tf_diagnosis_helper"], [147, 2, 1, "", "version1_eq_version2"], [147, 2, 1, "", "version1_gt_version2"], [147, 2, 1, "", "version1_gte_version2"], [147, 2, 1, "", "version1_lt_version2"], [147, 2, 1, "", "version1_lte_version2"], [147, 2, 1, "", "write_graph"]], "neural_compressor.adaptor.torch_utils": [[148, 0, 0, "-", "bf16_convert"], [149, 0, 0, "-", "gptq"], [150, 0, 0, "-", "hawq_metric"], [152, 0, 0, "-", "mixed_precision"], [153, 0, 0, "-", "model_wrapper"], [154, 0, 0, "-", "pattern_detector"], [155, 0, 0, "-", "smooth_quant"], [156, 0, 0, "-", "symbolic_trace"], [157, 0, 0, "-", "util"], [158, 0, 0, "-", "weight_only"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[148, 1, 1, "", "BF16ModuleWrapper"], [148, 2, 1, "", "Convert"], [148, 2, 1, "", "bf16_symbolic_trace"]], "neural_compressor.adaptor.torch_utils.gptq": [[149, 1, 1, "", "GPTQ"], [149, 1, 1, "", "GPTQuantizer"], [149, 2, 1, "", "find_layers"], [149, 2, 1, "", "find_layers_name"], [149, 2, 1, "", "is_leaf"], [149, 2, 1, "", "log_quantizable_layers_per_transformer"], [149, 2, 1, "", "quantize"], [149, 2, 1, "", "trace_gptq_target_blocks"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[150, 1, 1, "", "HessianTrace"], [150, 1, 1, "", "Node_collector"], [150, 2, 1, "", "compare_weights"], [150, 2, 1, "", "hawq_top"]], "neural_compressor.adaptor.torch_utils.mixed_precision": [[152, 2, 1, "", "ipex_mixed_precision"]], "neural_compressor.adaptor.torch_utils.pattern_detector": [[154, 1, 1, "", "TransformerBasedModelBlockPatternDetector"]], "neural_compressor.adaptor.torch_utils.smooth_quant": [[155, 1, 1, "", "GraphTrace"], [155, 1, 1, "", "TorchSmoothQuant"], [155, 2, 1, "", "get_module"], [155, 2, 1, "", "set_module"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[156, 2, 1, "", "symbolic_trace"], [156, 2, 1, "", "trace_and_fuse_sub_graph"]], "neural_compressor.adaptor.torch_utils.util": [[157, 2, 1, "", "append_attr"], [157, 2, 1, "", "auto_copy"], [157, 2, 1, "", "calculate_quant_min_max"], [157, 2, 1, "", "check_cfg_and_qconfig"], [157, 2, 1, "", "collate_torch_preds"], [157, 2, 1, "", "collect_weight_info"], [157, 2, 1, "", "fetch_module"], [157, 2, 1, "", "generate_activation_observer"], [157, 2, 1, "", "get_depth"], [157, 2, 1, "", "get_dict_at_depth"], [157, 2, 1, "", "get_element_under_depth"], [157, 2, 1, "", "get_embedding_contiguous"], [157, 2, 1, "", "get_example_input"], [157, 2, 1, "", "get_fallback_order"], [157, 2, 1, "", "get_mse_order_per_fp32"], [157, 2, 1, "", "get_mse_order_per_int8"], [157, 2, 1, "", "get_op_type_by_name"], [157, 2, 1, "", "get_quantizable_ops_from_cfgs"], [157, 2, 1, "", "get_torch_version"], [157, 2, 1, "", "input2tuple"], [157, 2, 1, "", "is_fused_module"], [157, 2, 1, "", "match_datatype_pattern"], [157, 2, 1, "", "paser_cfgs"], [157, 2, 1, "", "set_module"], [157, 2, 1, "", "simple_inference"], [157, 2, 1, "", "update_sq_scale"]], "neural_compressor.adaptor.torch_utils.weight_only": [[158, 2, 1, "", "awq_quantize"], [158, 2, 1, "", "get_module_input_output"], [158, 2, 1, "", "gptq_quantize"], [158, 2, 1, "", "qdq_weight_actor"], [158, 2, 1, "", "qdq_weight_asym"], [158, 2, 1, "", "qdq_weight_sym"], [158, 2, 1, "", "quant_weight"], [158, 2, 1, "", "rtn_quantize"]], "neural_compressor.algorithm": [[159, 0, 0, "-", "algorithm"], [160, 0, 0, "-", "fast_bias_correction"], [162, 0, 0, "-", "smooth_quant"], [163, 0, 0, "-", "weight_correction"]], "neural_compressor.algorithm.algorithm": [[159, 1, 1, "", "ALGORITHMS"], [159, 1, 1, "", "Algorithm"], [159, 1, 1, "", "AlgorithmScheduler"], [159, 2, 1, "", "algorithm_registry"]], "neural_compressor.algorithm.fast_bias_correction": [[160, 1, 1, "", "FastBiasCorrection"]], "neural_compressor.algorithm.smooth_quant": [[162, 1, 1, "", "SmoothQuant"]], "neural_compressor.algorithm.weight_correction": [[163, 1, 1, "", "WeightCorrection"]], "neural_compressor.benchmark": [[164, 2, 1, "", "benchmark_with_raw_cmd"], [164, 2, 1, "", "call_one"], [164, 2, 1, "", "config_instance"], [164, 2, 1, "", "fit"], [164, 2, 1, "", "generate_prefix"], [164, 2, 1, "", "get_architecture"], [164, 2, 1, "", "get_bounded_threads"], [164, 2, 1, "", "get_core_ids"], [164, 2, 1, "", "get_physical_ids"], [164, 2, 1, "", "get_threads"], [164, 2, 1, "", "get_threads_per_core"], [164, 2, 1, "", "profile"], [164, 2, 1, "", "run_instance"], [164, 2, 1, "", "set_all_env_var"], [164, 2, 1, "", "set_env_var"], [164, 2, 1, "", "summary_benchmark"]], "neural_compressor.compression": [[165, 0, 0, "-", "callbacks"], [167, 0, 0, "-", "distillation"], [170, 0, 0, "-", "pruner"]], "neural_compressor.compression.callbacks": [[165, 1, 1, "", "BaseCallbacks"], [165, 1, 1, "", "DistillationCallbacks"], [165, 1, 1, "", "PruningCallbacks"], [165, 1, 1, "", "QuantizationAwareTrainingCallbacks"]], "neural_compressor.compression.callbacks.DistillationCallbacks": [[165, 3, 1, "", "_epoch_ran"], [165, 3, 1, "", "best_model"], [165, 3, 1, "", "best_score"], [165, 3, 1, "", "eval_frequency"]], "neural_compressor.compression.distillation": [[166, 0, 0, "-", "criterions"]], "neural_compressor.compression.distillation.criterions": [[166, 1, 1, "", "Criterions"], [166, 1, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [166, 1, 1, "", "KnowledgeDistillationFramework"], [166, 1, 1, "", "KnowledgeDistillationLoss"], [166, 1, 1, "", "PyTorchCriterions"], [166, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLoss"], [166, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"], [166, 1, 1, "", "PyTorchKnowledgeDistillationLoss"], [166, 1, 1, "", "PyTorchKnowledgeDistillationLossWrapper"], [166, 1, 1, "", "PyTorchSelfKnowledgeDistillationLoss"], [166, 1, 1, "", "PyTorchSelfKnowledgeDistillationLossWrapper"], [166, 1, 1, "", "SelfKnowledgeDistillationLoss"], [166, 1, 1, "", "TensorflowCriterions"], [166, 1, 1, "", "TensorflowKnowledgeDistillationLoss"], [166, 1, 1, "", "TensorflowKnowledgeDistillationLossExternal"], [166, 1, 1, "", "TensorflowKnowledgeDistillationLossWrapper"], [166, 2, 1, "", "criterion_registry"]], "neural_compressor.compression.pruner": [[169, 0, 0, "-", "criteria"], [172, 0, 0, "-", "model_slim"], [175, 0, 0, "-", "patterns"], [176, 0, 0, "-", "pruners"], [177, 0, 0, "-", "regs"], [178, 0, 0, "-", "schedulers"], [179, 0, 0, "-", "utils"]], "neural_compressor.compression.pruner.criteria": [[169, 1, 1, "", "GradientCriterion"], [169, 1, 1, "", "MagnitudeCriterion"], [169, 1, 1, "", "PruningCriterion"], [169, 1, 1, "", "RetrainFreeCriterion"], [169, 1, 1, "", "SnipCriterion"], [169, 1, 1, "", "SnipMomentumBlockCriterion"], [169, 1, 1, "", "SnipMomentumCriterion"], [169, 2, 1, "", "get_criterion"], [169, 2, 1, "", "register_criterion"]], "neural_compressor.compression.pruner.criteria.GradientCriterion": [[169, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.MagnitudeCriterion": [[169, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.PruningCriterion": [[169, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.RetrainFreeCriterion": [[169, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.SnipCriterion": [[169, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.SnipMomentumBlockCriterion": [[169, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion": [[169, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.model_slim": [[171, 0, 0, "-", "auto_slim"], [173, 0, 0, "-", "pattern_analyzer"], [174, 0, 0, "-", "weight_slim"]], "neural_compressor.compression.pruner.model_slim.auto_slim": [[171, 2, 1, "", "generate_ffn2_pruning_config"], [171, 2, 1, "", "generate_mha_pruning_config"], [171, 2, 1, "", "model_slim"], [171, 2, 1, "", "model_slim_ffn2"], [171, 2, 1, "", "model_slim_mha"], [171, 2, 1, "", "parse_auto_slim_config"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer": [[173, 1, 1, "", "ClassifierHeadSearcher"], [173, 1, 1, "", "ClassifierHeadSearcherTF"], [173, 1, 1, "", "JitBasicSearcher"], [173, 1, 1, "", "Linear2LinearSearcher"], [173, 1, 1, "", "RecipeSearcher"], [173, 1, 1, "", "SelfMHASearcher"], [173, 2, 1, "", "get_attributes"], [173, 2, 1, "", "get_common_module"], [173, 2, 1, "", "print_iterables"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher": [[173, 3, 1, "", "device"], [173, 3, 1, "", "flatten_static_graph"], [173, 3, 1, "", "model"], [173, 3, 1, "", "static_graph"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF": [[173, 3, 1, "", "device"], [173, 3, 1, "", "flatten_static_graph"], [173, 3, 1, "", "model"], [173, 3, 1, "", "static_graph"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher": [[173, 3, 1, "", "device"], [173, 3, 1, "", "flatten_static_graph"], [173, 3, 1, "", "model"], [173, 3, 1, "", "searching_results"], [173, 3, 1, "", "static_graph"], [173, 3, 1, "", "target_layers"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher": [[173, 3, 1, "", "current_pattern"], [173, 3, 1, "", "device"], [173, 3, 1, "", "flatten_static_graph"], [173, 3, 1, "", "model"], [173, 3, 1, "", "searching_results"], [173, 3, 1, "", "static_graph"], [173, 3, 1, "", "target_layers"], [173, 3, 1, "", "target_op_lut"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher": [[173, 3, 1, "", "model"], [173, 3, 1, "", "recipe"], [173, 3, 1, "", "searching_results"], [173, 3, 1, "", "targets"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher": [[173, 3, 1, "", "device"], [173, 3, 1, "", "flatten_static_graph"], [173, 3, 1, "", "model"], [173, 3, 1, "", "static_graph"]], "neural_compressor.compression.pruner.model_slim.weight_slim": [[174, 1, 1, "", "LinearCompression"], [174, 1, 1, "", "LinearCompressionIterator"], [174, 1, 1, "", "PostCompressionUtils"]], "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression": [[174, 3, 1, "", "device"], [174, 3, 1, "", "layer_1"], [174, 3, 1, "", "layer_2"]], "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompressionIterator": [[174, 3, 1, "", "linear_patterns"]], "neural_compressor.compression.pruner.patterns": [[175, 1, 1, "", "BasePattern"], [175, 1, 1, "", "PatternMHA"], [175, 1, 1, "", "PatternNInM"], [175, 1, 1, "", "PatternNxM"], [175, 2, 1, "", "get_pattern"], [175, 2, 1, "", "register_pattern"]], "neural_compressor.compression.pruner.patterns.BasePattern": [[175, 3, 1, "", "config"], [175, 3, 1, "", "invalid_layers"], [175, 3, 1, "", "is_global"], [175, 3, 1, "", "keep_mask_layers"], [175, 3, 1, "", "max_sparsity_ratio_per_op"], [175, 3, 1, "", "min_sparsity_ratio_per_op"], [175, 3, 1, "", "modules"], [175, 3, 1, "", "pattern"], [175, 3, 1, "", "target_sparsity"]], "neural_compressor.compression.pruner.patterns.PatternMHA": [[175, 3, 1, "", "M"], [175, 3, 1, "", "N"]], "neural_compressor.compression.pruner.patterns.PatternNInM": [[175, 3, 1, "", "M"], [175, 3, 1, "", "N"]], "neural_compressor.compression.pruner.patterns.PatternNxM": [[175, 3, 1, "", "block_size"]], "neural_compressor.compression.pruner.pruners": [[176, 1, 1, "", "BasePruner"], [176, 1, 1, "", "BasicPruner"], [176, 1, 1, "", "BlockMaskPruner"], [176, 1, 1, "", "MultiheadAttentionPruner"], [176, 1, 1, "", "PatternLockPruner"], [176, 1, 1, "", "ProgressivePruner"], [176, 1, 1, "", "RetrainFreePruner"], [176, 2, 1, "", "get_pruner"], [176, 2, 1, "", "parse_valid_pruner_types"], [176, 2, 1, "", "register_pruner"]], "neural_compressor.compression.pruner.pruners.BasePruner": [[176, 3, 1, "", "config"], [176, 3, 1, "", "current_sparsity_ratio"], [176, 3, 1, "", "end_step"], [176, 3, 1, "", "global_step"], [176, 3, 1, "", "masks"], [176, 3, 1, "", "max_sparsity_ratio_per_op"], [176, 3, 1, "", "modules"], [176, 3, 1, "", "pattern"], [176, 3, 1, "", "pruning_frequency"], [176, 3, 1, "", "scheduler"], [176, 3, 1, "", "scores"], [176, 3, 1, "", "start_step"], [176, 3, 1, "", "target_sparsity_ratio"]], "neural_compressor.compression.pruner.pruners.BasicPruner": [[176, 3, 1, "", "criterion"], [176, 3, 1, "", "pattern"], [176, 3, 1, "", "reg"], [176, 3, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruners.BlockMaskPruner": [[176, 3, 1, "", "criterion"], [176, 3, 1, "", "pattern"], [176, 3, 1, "", "reg"], [176, 3, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruners.MultiheadAttentionPruner": [[176, 3, 1, "", "head_masks"], [176, 3, 1, "", "linear_layers"], [176, 3, 1, "", "mha_compressions"], [176, 3, 1, "", "mha_scores"]], "neural_compressor.compression.pruner.pruners.RetrainFreePruner": [[176, 3, 1, "", "criterion"], [176, 3, 1, "", "pattern"], [176, 3, 1, "", "reg"], [176, 3, 1, "", "scheduler"]], "neural_compressor.compression.pruner.regs": [[177, 1, 1, "", "BaseReg"], [177, 1, 1, "", "GroupLasso"], [177, 2, 1, "", "get_reg"], [177, 2, 1, "", "get_reg_type"], [177, 2, 1, "", "register_reg"]], "neural_compressor.compression.pruner.regs.GroupLasso": [[177, 3, 1, "", "alpha"], [177, 3, 1, "", "reg_terms"]], "neural_compressor.compression.pruner.schedulers": [[178, 1, 1, "", "IterativeScheduler"], [178, 1, 1, "", "OneshotScheduler"], [178, 1, 1, "", "PruningScheduler"], [178, 2, 1, "", "get_scheduler"], [178, 2, 1, "", "register_scheduler"]], "neural_compressor.compression.pruner.schedulers.PruningScheduler": [[178, 3, 1, "", "config"]], "neural_compressor.compression.pruner.utils": [[179, 2, 1, "", "check_config"], [179, 2, 1, "", "check_key_validity"], [179, 2, 1, "", "generate_pruner_config"], [179, 2, 1, "", "get_sparsity_ratio"], [179, 2, 1, "", "get_sparsity_ratio_tf"], [179, 2, 1, "", "parse_last_linear"], [179, 2, 1, "", "parse_last_linear_tf"], [179, 2, 1, "", "parse_to_prune"], [179, 2, 1, "", "parse_to_prune_tf"], [179, 2, 1, "", "process_and_check_config"], [179, 2, 1, "", "process_config"], [179, 2, 1, "", "process_weight_config"], [179, 2, 1, "", "process_yaml_config"], [179, 2, 1, "", "reset_none_to_default"], [179, 2, 1, "", "update_params"]], "neural_compressor.conf": [[180, 0, 0, "-", "config"], [181, 0, 0, "-", "dotdict"], [183, 0, 0, "-", "pythonic_config"]], "neural_compressor.conf.config": [[180, 1, 1, "", "Benchmark_Conf"], [180, 1, 1, "", "Conf"], [180, 1, 1, "", "Distillation_Conf"], [180, 1, 1, "", "Graph_Optimization_Conf"], [180, 1, 1, "", "MixedPrecision_Conf"], [180, 1, 1, "", "NASConfig"], [180, 1, 1, "", "PrunerV2"], [180, 1, 1, "", "Pruning_Conf"], [180, 1, 1, "", "Quantization_Conf"]], "neural_compressor.conf.dotdict": [[181, 1, 1, "", "DotDict"], [181, 2, 1, "", "deep_get"], [181, 2, 1, "", "deep_set"]], "neural_compressor.conf.pythonic_config": [[183, 1, 1, "", "AccuracyCriterion"], [183, 1, 1, "", "BenchmarkConfig"], [183, 1, 1, "", "DistillationConfig"], [183, 1, 1, "", "KnowledgeDistillationLossConfig"], [183, 1, 1, "", "Options"], [183, 1, 1, "", "QuantizationConfig"], [183, 1, 1, "", "WeightPruningConfig"]], "neural_compressor.config": [[184, 1, 1, "", "AccuracyCriterion"], [184, 1, 1, "", "BenchmarkConfig"], [184, 1, 1, "", "DistillationConfig"], [184, 1, 1, "", "DotDict"], [184, 1, 1, "", "ExportConfig"], [184, 1, 1, "", "IntermediateLayersKnowledgeDistillationLossConfig"], [184, 1, 1, "", "Keras"], [184, 1, 1, "", "KnowledgeDistillationLossConfig"], [184, 1, 1, "", "MXNet"], [184, 1, 1, "", "MixedPrecisionConfig"], [184, 1, 1, "", "NASConfig"], [184, 1, 1, "", "ONNX"], [184, 1, 1, "", "ONNXQlinear2QDQConfig"], [184, 1, 1, "", "Options"], [184, 1, 1, "", "PostTrainingQuantConfig"], [184, 1, 1, "", "PyTorch"], [184, 1, 1, "", "QuantizationAwareTrainingConfig"], [184, 1, 1, "", "SelfKnowledgeDistillationLossConfig"], [184, 1, 1, "", "TF2ONNXConfig"], [184, 1, 1, "", "TensorFlow"], [184, 1, 1, "", "Torch2ONNXConfig"], [184, 1, 1, "", "TuningCriterion"], [184, 1, 1, "", "WeightPruningConfig"]], "neural_compressor.contrib": [[186, 0, 0, "-", "strategy"]], "neural_compressor.contrib.strategy": [[187, 0, 0, "-", "sigopt"], [188, 0, 0, "-", "tpe"]], "neural_compressor.contrib.strategy.sigopt": [[187, 1, 1, "", "SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.tpe": [[188, 1, 1, "", "TpeTuneStrategy"]], "neural_compressor.data": [[193, 0, 0, "-", "dataloaders"], [205, 0, 0, "-", "datasets"], [209, 0, 0, "-", "filters"], [213, 0, 0, "-", "transforms"]], "neural_compressor.data.dataloaders": [[189, 0, 0, "-", "base_dataloader"], [190, 0, 0, "-", "dataloader"], [191, 0, 0, "-", "default_dataloader"], [192, 0, 0, "-", "fetcher"], [194, 0, 0, "-", "mxnet_dataloader"], [195, 0, 0, "-", "onnxrt_dataloader"], [196, 0, 0, "-", "pytorch_dataloader"], [197, 0, 0, "-", "sampler"], [198, 0, 0, "-", "tensorflow_dataloader"]], "neural_compressor.data.dataloaders.base_dataloader": [[189, 1, 1, "", "BaseDataLoader"]], "neural_compressor.data.dataloaders.dataloader": [[190, 1, 1, "", "DataLoader"], [190, 2, 1, "", "check_dataloader"]], "neural_compressor.data.dataloaders.default_dataloader": [[191, 1, 1, "", "DefaultDataLoader"], [191, 2, 1, "", "default_collate"]], "neural_compressor.data.dataloaders.fetcher": [[192, 1, 1, "", "Fetcher"], [192, 1, 1, "", "IndexFetcher"], [192, 1, 1, "", "IterableFetcher"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[194, 1, 1, "", "MXNetDataLoader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[195, 1, 1, "", "ONNXRTBertDataLoader"], [195, 1, 1, "", "ONNXRTDataLoader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[196, 1, 1, "", "PyTorchDataLoader"]], "neural_compressor.data.dataloaders.sampler": [[197, 1, 1, "", "BatchSampler"], [197, 1, 1, "", "IterableSampler"], [197, 1, 1, "", "Sampler"], [197, 1, 1, "", "SequentialSampler"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[198, 1, 1, "", "TFDataDataLoader"], [198, 1, 1, "", "TensorflowBertDataLoader"], [198, 1, 1, "", "TensorflowDataLoader"], [198, 1, 1, "", "TensorflowModelZooBertDataLoader"]], "neural_compressor.data.datasets": [[199, 0, 0, "-", "bert_dataset"], [200, 0, 0, "-", "coco_dataset"], [201, 0, 0, "-", "dataset"], [202, 0, 0, "-", "dummy_dataset"], [203, 0, 0, "-", "dummy_dataset_v2"], [204, 0, 0, "-", "imagenet_dataset"], [206, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.data.datasets.bert_dataset": [[199, 1, 1, "", "InputFeatures"], [199, 1, 1, "", "ONNXRTBertDataset"], [199, 1, 1, "", "ParseDecodeBert"], [199, 1, 1, "", "PytorchBertDataset"], [199, 1, 1, "", "TensorflowBertDataset"], [199, 1, 1, "", "TensorflowModelZooBertDataset"], [199, 2, 1, "", "convert_examples_to_features"], [199, 2, 1, "", "load_and_cache_examples"]], "neural_compressor.data.datasets.coco_dataset": [[200, 1, 1, "", "COCONpy"], [200, 1, 1, "", "COCORaw"], [200, 1, 1, "", "COCORecordDataset"], [200, 1, 1, "", "ParseDecodeCoco"]], "neural_compressor.data.datasets.dataset": [[201, 1, 1, "", "CIFAR10"], [201, 1, 1, "", "CIFAR100"], [201, 1, 1, "", "Dataset"], [201, 1, 1, "", "Datasets"], [201, 1, 1, "", "FashionMNIST"], [201, 1, 1, "", "ImageFolder"], [201, 1, 1, "", "IterableDataset"], [201, 1, 1, "", "MNIST"], [201, 1, 1, "", "MXNetCIFAR10"], [201, 1, 1, "", "MXNetCIFAR100"], [201, 1, 1, "", "MXNetDatasets"], [201, 1, 1, "", "MXNetFashionMNIST"], [201, 1, 1, "", "MXNetImageFolder"], [201, 1, 1, "", "MXNetMNIST"], [201, 1, 1, "", "ONNXRTITDatasets"], [201, 1, 1, "", "ONNXRTQLDatasets"], [201, 1, 1, "", "PyTorchDatasets"], [201, 1, 1, "", "PytorchCIFAR10"], [201, 1, 1, "", "PytorchCIFAR100"], [201, 1, 1, "", "PytorchFashionMNIST"], [201, 1, 1, "", "PytorchMNIST"], [201, 1, 1, "", "PytorchMxnetWrapDataset"], [201, 1, 1, "", "PytorchMxnetWrapFunction"], [201, 1, 1, "", "Tensorflow"], [201, 1, 1, "", "TensorflowCIFAR10"], [201, 1, 1, "", "TensorflowCIFAR100"], [201, 1, 1, "", "TensorflowDatasets"], [201, 1, 1, "", "TensorflowFashionMNIST"], [201, 1, 1, "", "TensorflowImageRecord"], [201, 1, 1, "", "TensorflowMNIST"], [201, 1, 1, "", "TensorflowTFRecordDataset"], [201, 1, 1, "", "TensorflowVOCRecord"], [201, 2, 1, "", "calculate_md5"], [201, 2, 1, "", "check_integrity"], [201, 2, 1, "", "dataset_registry"], [201, 2, 1, "", "download_url"], [201, 4, 1, "", "framework_datasets"], [201, 2, 1, "", "gen_bar_updater"]], "neural_compressor.data.datasets.dummy_dataset": [[202, 1, 1, "", "DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[203, 1, 1, "", "DummyDataset"], [203, 1, 1, "", "SparseDummyDataset"]], "neural_compressor.data.datasets.imagenet_dataset": [[204, 1, 1, "", "ImagenetRaw"], [204, 1, 1, "", "MXNetImagenetRaw"], [204, 1, 1, "", "ONNXRTImagenetDataset"], [204, 1, 1, "", "PytorchImagenetRaw"], [204, 1, 1, "", "TensorflowImagenetDataset"], [204, 1, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.data.datasets.style_transfer_dataset": [[206, 1, 1, "", "StyleTransferDataset"]], "neural_compressor.data.filters": [[207, 0, 0, "-", "coco_filter"], [208, 0, 0, "-", "filter"]], "neural_compressor.data.filters.coco_filter": [[207, 1, 1, "", "LabelBalanceCOCORawFilter"], [207, 1, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.filter": [[208, 1, 1, "", "FILTERS"], [208, 1, 1, "", "Filter"], [208, 1, 1, "", "MXNetFilters"], [208, 1, 1, "", "ONNXRTITFilters"], [208, 1, 1, "", "ONNXRTQLFilters"], [208, 1, 1, "", "PyTorchFilters"], [208, 1, 1, "", "TensorflowFilters"], [208, 2, 1, "", "filter_registry"]], "neural_compressor.data.transforms": [[211, 0, 0, "-", "coco_transform"], [212, 0, 0, "-", "imagenet_transform"], [214, 0, 0, "-", "postprocess"], [215, 0, 0, "-", "tokenization"], [216, 0, 0, "-", "transform"]], "neural_compressor.data.transforms.coco_transform": [[211, 1, 1, "", "ParseDecodeCocoTransform"]], "neural_compressor.data.transforms.imagenet_transform": [[212, 1, 1, "", "BilinearImagenetTransform"], [212, 1, 1, "", "LabelShift"], [212, 1, 1, "", "ONNXResizeCropImagenetTransform"], [212, 1, 1, "", "OnnxBilinearImagenetTransform"], [212, 1, 1, "", "ParseDecodeImagenet"], [212, 1, 1, "", "ParseDecodeImagenetTransform"], [212, 1, 1, "", "QuantizedInput"], [212, 1, 1, "", "ResizeWithAspectRatio"], [212, 1, 1, "", "TensorflowResizeCropImagenetTransform"], [212, 1, 1, "", "TensorflowShiftRescale"], [212, 1, 1, "", "TensorflowTransposeLastChannel"]], "neural_compressor.data.transforms.postprocess": [[214, 1, 1, "", "Postprocess"]], "neural_compressor.data.transforms.tokenization": [[215, 1, 1, "", "BasicTokenizer"], [215, 1, 1, "", "FullTokenizer"], [215, 1, 1, "", "WordpieceTokenizer"], [215, 2, 1, "", "convert_by_vocab"], [215, 2, 1, "", "convert_to_unicode"], [215, 2, 1, "", "load_vocab"], [215, 2, 1, "", "whitespace_tokenize"]], "neural_compressor.data.transforms.transform": [[216, 1, 1, "", "AlignImageChannelTransform"], [216, 1, 1, "", "BaseTransform"], [216, 1, 1, "", "CastONNXTransform"], [216, 1, 1, "", "CastPyTorchTransform"], [216, 1, 1, "", "CastTFTransform"], [216, 1, 1, "", "CenterCropTFTransform"], [216, 1, 1, "", "CenterCropTransform"], [216, 1, 1, "", "CollectTransform"], [216, 1, 1, "", "ComposeTransform"], [216, 1, 1, "", "CropResizeTFTransform"], [216, 1, 1, "", "CropResizeTransform"], [216, 1, 1, "", "CropToBoundingBox"], [216, 1, 1, "", "InputFeatures"], [216, 1, 1, "", "MXNetCropResizeTransform"], [216, 1, 1, "", "MXNetCropToBoundingBox"], [216, 1, 1, "", "MXNetNormalizeTransform"], [216, 1, 1, "", "MXNetTransforms"], [216, 1, 1, "", "MXNetTranspose"], [216, 1, 1, "", "NormalizeTFTransform"], [216, 1, 1, "", "NormalizeTransform"], [216, 1, 1, "", "ONNXRTCropToBoundingBox"], [216, 1, 1, "", "ONNXRTITTransforms"], [216, 1, 1, "", "ONNXRTQLTransforms"], [216, 1, 1, "", "PaddedCenterCropTransform"], [216, 1, 1, "", "ParseDecodeVocTransform"], [216, 1, 1, "", "PyTorchAlignImageChannel"], [216, 1, 1, "", "PyTorchCropResizeTransform"], [216, 1, 1, "", "PyTorchNormalizeTransform"], [216, 1, 1, "", "PyTorchTransforms"], [216, 1, 1, "", "PyTorchTranspose"], [216, 1, 1, "", "PytorchMxnetTransform"], [216, 1, 1, "", "PytorchMxnetWrapFunction"], [216, 1, 1, "", "RandomCropTFTransform"], [216, 1, 1, "", "RandomCropTransform"], [216, 1, 1, "", "RandomHorizontalFlip"], [216, 1, 1, "", "RandomResizedCropMXNetTransform"], [216, 1, 1, "", "RandomResizedCropPytorchTransform"], [216, 1, 1, "", "RandomResizedCropTFTransform"], [216, 1, 1, "", "RandomResizedCropTransform"], [216, 1, 1, "", "RandomVerticalFlip"], [216, 1, 1, "", "RescaleKerasPretrainTransform"], [216, 1, 1, "", "RescaleTFTransform"], [216, 1, 1, "", "RescaleTransform"], [216, 1, 1, "", "ResizeMXNetTransform"], [216, 1, 1, "", "ResizePytorchTransform"], [216, 1, 1, "", "ResizeTFTransform"], [216, 1, 1, "", "ResizeTransform"], [216, 1, 1, "", "ResizeWithRatio"], [216, 1, 1, "", "SquadExample"], [216, 1, 1, "", "TFModelZooCollectTransform"], [216, 1, 1, "", "TFSquadV1ModelZooPostTransform"], [216, 1, 1, "", "TFSquadV1PostTransform"], [216, 1, 1, "", "TRANSFORMS"], [216, 1, 1, "", "TensorflowCropToBoundingBox"], [216, 1, 1, "", "TensorflowRandomHorizontalFlip"], [216, 1, 1, "", "TensorflowRandomVerticalFlip"], [216, 1, 1, "", "TensorflowResizeWithRatio"], [216, 1, 1, "", "TensorflowTransform"], [216, 1, 1, "", "TensorflowTransforms"], [216, 1, 1, "", "TensorflowTranspose"], [216, 1, 1, "", "TensorflowWrapFunction"], [216, 1, 1, "", "ToArray"], [216, 1, 1, "", "ToNDArrayTransform"], [216, 1, 1, "", "Transforms"], [216, 1, 1, "", "Transpose"], [216, 2, 1, "", "convert_examples_to_features"], [216, 2, 1, "", "get_final_text"], [216, 2, 1, "", "get_torchvision_map"], [216, 2, 1, "", "read_squad_examples"], [216, 2, 1, "", "transform_registry"]], "neural_compressor.experimental": [[217, 0, 0, "-", "benchmark"], [220, 0, 0, "-", "common"], [226, 0, 0, "-", "component"], [227, 0, 0, "-", "compression"], [229, 0, 0, "-", "contrib"], [254, 0, 0, "-", "data"], [259, 0, 0, "-", "distillation"], [260, 0, 0, "-", "export"], [264, 0, 0, "-", "graph_optimization"], [272, 0, 0, "-", "metric"], [274, 0, 0, "-", "mixed_precision"], [275, 0, 0, "-", "model_conversion"], [278, 0, 0, "-", "nas"], [284, 0, 0, "-", "pruner_legacy"], [288, 0, 0, "-", "pruning"], [289, 0, 0, "-", "pruning_recipes"], [293, 0, 0, "-", "pruning_v2"], [294, 0, 0, "-", "pytorch_pruner"], [301, 0, 0, "-", "quantization"], [302, 0, 0, "-", "scheduler"], [307, 0, 0, "-", "strategy"]], "neural_compressor.experimental.benchmark": [[217, 1, 1, "", "Benchmark"], [217, 2, 1, "", "get_architecture"], [217, 2, 1, "", "get_bounded_threads"], [217, 2, 1, "", "get_core_ids"], [217, 2, 1, "", "get_physical_ids"], [217, 2, 1, "", "get_threads"], [217, 2, 1, "", "get_threads_per_core"], [217, 2, 1, "", "set_all_env_var"], [217, 2, 1, "", "set_env_var"]], "neural_compressor.experimental.common": [[218, 0, 0, "-", "criterion"], [219, 0, 0, "-", "dataloader"], [221, 0, 0, "-", "metric"], [222, 0, 0, "-", "model"], [223, 0, 0, "-", "optimizer"], [224, 0, 0, "-", "postprocess"], [225, 0, 0, "-", "torch_utils"]], "neural_compressor.experimental.common.criterion": [[218, 1, 1, "", "Criterions"], [218, 1, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [218, 1, 1, "", "KnowledgeDistillationFramework"], [218, 1, 1, "", "KnowledgeDistillationLoss"], [218, 1, 1, "", "PyTorchCriterions"], [218, 1, 1, "", "PyTorchCrossEntropyLoss"], [218, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLoss"], [218, 1, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"], [218, 1, 1, "", "PyTorchKnowledgeDistillationLoss"], [218, 1, 1, "", "PyTorchKnowledgeDistillationLossWrapper"], [218, 1, 1, "", "PyTorchSelfKnowledgeDistillationLoss"], [218, 1, 1, "", "PyTorchSelfKnowledgeDistillationLossWrapper"], [218, 1, 1, "", "SelfKnowledgeDistillationLoss"], [218, 1, 1, "", "TensorFlowCrossEntropyLoss"], [218, 1, 1, "", "TensorFlowSparseCategoricalCrossentropy"], [218, 1, 1, "", "TensorflowCriterions"], [218, 1, 1, "", "TensorflowKnowledgeDistillationLoss"], [218, 1, 1, "", "TensorflowKnowledgeDistillationLossExternal"], [218, 1, 1, "", "TensorflowKnowledgeDistillationLossWrapper"], [218, 2, 1, "", "criterion_registry"]], "neural_compressor.experimental.common.dataloader": [[219, 1, 1, "", "DataLoader"]], "neural_compressor.experimental.common.metric": [[221, 1, 1, "", "Metric"]], "neural_compressor.experimental.common.model": [[222, 1, 1, "", "Model"], [222, 2, 1, "", "set_backend"]], "neural_compressor.experimental.common.optimizer": [[223, 1, 1, "", "Optimizers"], [223, 1, 1, "", "PyTorchOptimizers"], [223, 1, 1, "", "PyTorchSGD"], [223, 1, 1, "", "TensorFlowAdam"], [223, 1, 1, "", "TensorFlowAdamW"], [223, 1, 1, "", "TensorFlowSGD"], [223, 1, 1, "", "TensorflowOptimizers"], [223, 2, 1, "", "optimizer_registry"]], "neural_compressor.experimental.common.postprocess": [[224, 1, 1, "", "Postprocess"]], "neural_compressor.experimental.common.torch_utils": [[225, 2, 1, "", "get_activation"], [225, 2, 1, "", "record_output"]], "neural_compressor.experimental.component": [[226, 1, 1, "", "Component"]], "neural_compressor.experimental.compression": [[228, 0, 0, "-", "pruning"]], "neural_compressor.experimental.compression.pruning": [[228, 2, 1, "", "prepare_pruning"], [228, 2, 1, "", "save"]], "neural_compressor.experimental.contrib": [[230, 0, 0, "-", "strategy"]], "neural_compressor.experimental.contrib.strategy": [[231, 0, 0, "-", "sigopt"], [232, 0, 0, "-", "tpe"]], "neural_compressor.experimental.contrib.strategy.sigopt": [[231, 1, 1, "", "SigOptTuneStrategy"]], "neural_compressor.experimental.contrib.strategy.tpe": [[232, 1, 1, "", "TpeTuneStrategy"]], "neural_compressor.experimental.data": [[237, 0, 0, "-", "dataloaders"], [249, 0, 0, "-", "datasets"], [253, 0, 0, "-", "filters"], [256, 0, 0, "-", "transforms"]], "neural_compressor.experimental.data.dataloaders": [[233, 0, 0, "-", "base_dataloader"], [234, 0, 0, "-", "dataloader"], [235, 0, 0, "-", "default_dataloader"], [236, 0, 0, "-", "fetcher"], [238, 0, 0, "-", "mxnet_dataloader"], [239, 0, 0, "-", "onnxrt_dataloader"], [240, 0, 0, "-", "pytorch_dataloader"], [241, 0, 0, "-", "sampler"], [242, 0, 0, "-", "tensorflow_dataloader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[233, 1, 1, "", "BaseDataLoader"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[235, 1, 1, "", "DefaultDataLoader"], [235, 2, 1, "", "default_collate"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[236, 1, 1, "", "Fetcher"], [236, 1, 1, "", "IndexFetcher"], [236, 1, 1, "", "IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[238, 1, 1, "", "MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[239, 1, 1, "", "ONNXRTBertDataLoader"], [239, 1, 1, "", "ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[240, 1, 1, "", "PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[241, 1, 1, "", "BatchSampler"], [241, 1, 1, "", "IterableSampler"], [241, 1, 1, "", "Sampler"], [241, 1, 1, "", "SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[242, 1, 1, "", "TFDataDataLoader"], [242, 1, 1, "", "TensorflowBertDataLoader"], [242, 1, 1, "", "TensorflowDataLoader"], [242, 1, 1, "", "TensorflowModelZooBertDataLoader"]], "neural_compressor.experimental.data.datasets": [[243, 0, 0, "-", "bert_dataset"], [244, 0, 0, "-", "coco_dataset"], [245, 0, 0, "-", "dataset"], [246, 0, 0, "-", "dummy_dataset"], [247, 0, 0, "-", "dummy_dataset_v2"], [248, 0, 0, "-", "imagenet_dataset"], [250, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[243, 1, 1, "", "InputFeatures"], [243, 1, 1, "", "ONNXRTBertDataset"], [243, 1, 1, "", "ParseDecodeBert"], [243, 1, 1, "", "PytorchBertDataset"], [243, 1, 1, "", "TensorflowBertDataset"], [243, 1, 1, "", "TensorflowModelZooBertDataset"], [243, 2, 1, "", "convert_examples_to_features"], [243, 2, 1, "", "load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[244, 1, 1, "", "COCONpy"], [244, 1, 1, "", "COCORaw"], [244, 1, 1, "", "COCORecordDataset"], [244, 1, 1, "", "ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.dataset": [[245, 1, 1, "", "CIFAR10"], [245, 1, 1, "", "CIFAR100"], [245, 1, 1, "", "Dataset"], [245, 1, 1, "", "Datasets"], [245, 1, 1, "", "FashionMNIST"], [245, 1, 1, "", "ImageFolder"], [245, 1, 1, "", "IterableDataset"], [245, 1, 1, "", "MNIST"], [245, 1, 1, "", "MXNetCIFAR10"], [245, 1, 1, "", "MXNetCIFAR100"], [245, 1, 1, "", "MXNetDatasets"], [245, 1, 1, "", "MXNetFashionMNIST"], [245, 1, 1, "", "MXNetImageFolder"], [245, 1, 1, "", "MXNetMNIST"], [245, 1, 1, "", "ONNXRTITDatasets"], [245, 1, 1, "", "ONNXRTQLDatasets"], [245, 1, 1, "", "PyTorchDatasets"], [245, 1, 1, "", "PytorchCIFAR10"], [245, 1, 1, "", "PytorchCIFAR100"], [245, 1, 1, "", "PytorchFashionMNIST"], [245, 1, 1, "", "PytorchMNIST"], [245, 1, 1, "", "PytorchMxnetWrapDataset"], [245, 1, 1, "", "PytorchMxnetWrapFunction"], [245, 1, 1, "", "TensorflowCIFAR10"], [245, 1, 1, "", "TensorflowCIFAR100"], [245, 1, 1, "", "TensorflowDatasets"], [245, 1, 1, "", "TensorflowFashionMNIST"], [245, 1, 1, "", "TensorflowImageFolder"], [245, 1, 1, "", "TensorflowImageRecord"], [245, 1, 1, "", "TensorflowMNIST"], [245, 1, 1, "", "TensorflowTFRecordDataset"], [245, 1, 1, "", "TensorflowVOCRecord"], [245, 2, 1, "", "calculate_md5"], [245, 2, 1, "", "check_integrity"], [245, 2, 1, "", "dataset_registry"], [245, 2, 1, "", "download_url"], [245, 4, 1, "", "framework_datasets"], [245, 2, 1, "", "gen_bar_updater"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[246, 1, 1, "", "DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[247, 1, 1, "", "DummyDataset"], [247, 1, 1, "", "SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[248, 1, 1, "", "ImagenetRaw"], [248, 1, 1, "", "MXNetImagenetRaw"], [248, 1, 1, "", "ONNXRTImagenetDataset"], [248, 1, 1, "", "PytorchImagenetRaw"], [248, 1, 1, "", "TensorflowImagenetDataset"], [248, 1, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[250, 1, 1, "", "StyleTransferDataset"]], "neural_compressor.experimental.data.filters": [[251, 0, 0, "-", "coco_filter"], [252, 0, 0, "-", "filter"]], "neural_compressor.experimental.data.filters.coco_filter": [[251, 1, 1, "", "LabelBalanceCOCORawFilter"], [251, 1, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.filter": [[252, 1, 1, "", "FILTERS"], [252, 1, 1, "", "Filter"], [252, 1, 1, "", "MXNetFilters"], [252, 1, 1, "", "ONNXRTITFilters"], [252, 1, 1, "", "ONNXRTQLFilters"], [252, 1, 1, "", "PyTorchFilters"], [252, 1, 1, "", "TensorflowFilters"], [252, 2, 1, "", "filter_registry"]], "neural_compressor.experimental.data.transforms": [[255, 0, 0, "-", "imagenet_transform"], [257, 0, 0, "-", "tokenization"], [258, 0, 0, "-", "transform"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[255, 1, 1, "", "BilinearImagenetTransform"], [255, 1, 1, "", "LabelShift"], [255, 1, 1, "", "ONNXResizeCropImagenetTransform"], [255, 1, 1, "", "OnnxBilinearImagenetTransform"], [255, 1, 1, "", "ParseDecodeImagenet"], [255, 1, 1, "", "ParseDecodeImagenetTransform"], [255, 1, 1, "", "QuantizedInput"], [255, 1, 1, "", "ResizeWithAspectRatio"], [255, 1, 1, "", "TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental.data.transforms.tokenization": [[257, 1, 1, "", "BasicTokenizer"], [257, 1, 1, "", "FullTokenizer"], [257, 1, 1, "", "WordpieceTokenizer"], [257, 2, 1, "", "convert_by_vocab"], [257, 2, 1, "", "convert_to_unicode"], [257, 2, 1, "", "load_vocab"], [257, 2, 1, "", "whitespace_tokenize"]], "neural_compressor.experimental.data.transforms.transform": [[258, 1, 1, "", "AlignImageChannelTransform"], [258, 1, 1, "", "BaseTransform"], [258, 1, 1, "", "CastONNXTransform"], [258, 1, 1, "", "CastPyTorchTransform"], [258, 1, 1, "", "CastTFTransform"], [258, 1, 1, "", "CenterCropTFTransform"], [258, 1, 1, "", "CenterCropTransform"], [258, 1, 1, "", "CollectTransform"], [258, 1, 1, "", "ComposeTransform"], [258, 1, 1, "", "CropResizeTFTransform"], [258, 1, 1, "", "CropResizeTransform"], [258, 1, 1, "", "CropToBoundingBox"], [258, 1, 1, "", "InputFeatures"], [258, 1, 1, "", "MXNetCropResizeTransform"], [258, 1, 1, "", "MXNetCropToBoundingBox"], [258, 1, 1, "", "MXNetNormalizeTransform"], [258, 1, 1, "", "MXNetTransforms"], [258, 1, 1, "", "MXNetTranspose"], [258, 1, 1, "", "NormalizeTFTransform"], [258, 1, 1, "", "NormalizeTransform"], [258, 1, 1, "", "ONNXRTCropToBoundingBox"], [258, 1, 1, "", "ONNXRTITTransforms"], [258, 1, 1, "", "ONNXRTQLTransforms"], [258, 1, 1, "", "PaddedCenterCropTransform"], [258, 1, 1, "", "ParseDecodeVocTransform"], [258, 1, 1, "", "PyTorchAlignImageChannel"], [258, 1, 1, "", "PyTorchCropResizeTransform"], [258, 1, 1, "", "PyTorchNormalizeTransform"], [258, 1, 1, "", "PyTorchTransforms"], [258, 1, 1, "", "PyTorchTranspose"], [258, 1, 1, "", "PytorchMxnetTransform"], [258, 1, 1, "", "PytorchMxnetWrapFunction"], [258, 1, 1, "", "RandomCropTFTransform"], [258, 1, 1, "", "RandomCropTransform"], [258, 1, 1, "", "RandomHorizontalFlip"], [258, 1, 1, "", "RandomResizedCropMXNetTransform"], [258, 1, 1, "", "RandomResizedCropPytorchTransform"], [258, 1, 1, "", "RandomResizedCropTFTransform"], [258, 1, 1, "", "RandomResizedCropTransform"], [258, 1, 1, "", "RandomVerticalFlip"], [258, 1, 1, "", "RescaleKerasPretrainTransform"], [258, 1, 1, "", "RescaleTFTransform"], [258, 1, 1, "", "RescaleTransform"], [258, 1, 1, "", "ResizeMXNetTransform"], [258, 1, 1, "", "ResizePytorchTransform"], [258, 1, 1, "", "ResizeTFTransform"], [258, 1, 1, "", "ResizeTransform"], [258, 1, 1, "", "ResizeWithRatio"], [258, 1, 1, "", "SquadExample"], [258, 1, 1, "", "TFModelZooCollectTransform"], [258, 1, 1, "", "TFSquadV1ModelZooPostTransform"], [258, 1, 1, "", "TFSquadV1PostTransform"], [258, 1, 1, "", "TRANSFORMS"], [258, 1, 1, "", "TensorflowCropToBoundingBox"], [258, 1, 1, "", "TensorflowRandomHorizontalFlip"], [258, 1, 1, "", "TensorflowRandomVerticalFlip"], [258, 1, 1, "", "TensorflowResizeWithRatio"], [258, 1, 1, "", "TensorflowTransform"], [258, 1, 1, "", "TensorflowTransforms"], [258, 1, 1, "", "TensorflowTranspose"], [258, 1, 1, "", "TensorflowWrapFunction"], [258, 1, 1, "", "ToArray"], [258, 1, 1, "", "ToNDArrayTransform"], [258, 1, 1, "", "Transforms"], [258, 1, 1, "", "Transpose"], [258, 2, 1, "", "convert_examples_to_features"], [258, 2, 1, "", "get_final_text"], [258, 2, 1, "", "get_torchvision_map"], [258, 2, 1, "", "read_squad_examples"], [258, 2, 1, "", "transform_registry"]], "neural_compressor.experimental.distillation": [[259, 1, 1, "", "Distillation"]], "neural_compressor.experimental.distillation.Distillation": [[259, 3, 1, "", "_epoch_ran"], [259, 3, 1, "", "best_model"], [259, 3, 1, "", "best_score"], [259, 3, 1, "", "eval_frequency"]], "neural_compressor.experimental.export": [[261, 0, 0, "-", "qlinear2qdq"], [262, 0, 0, "-", "tf2onnx"], [263, 0, 0, "-", "torch2onnx"]], "neural_compressor.experimental.export.qlinear2qdq": [[261, 2, 1, "", "check_model"], [261, 2, 1, "", "onnx_qlinear_to_qdq"]], "neural_compressor.experimental.export.tf2onnx": [[262, 2, 1, "", "tf_to_fp32_onnx"], [262, 2, 1, "", "tf_to_int8_onnx"]], "neural_compressor.experimental.export.torch2onnx": [[263, 2, 1, "", "dynamic_quant_export"], [263, 2, 1, "", "get_node_mapping"], [263, 2, 1, "", "get_quantizable_onnx_ops"], [263, 2, 1, "", "static_quant_export"], [263, 2, 1, "", "torch_to_fp32_onnx"], [263, 2, 1, "", "torch_to_int8_onnx"]], "neural_compressor.experimental.graph_optimization": [[264, 1, 1, "", "Graph_Optimization"]], "neural_compressor.experimental.metric": [[266, 0, 0, "-", "bleu"], [267, 0, 0, "-", "bleu_util"], [268, 0, 0, "-", "coco_label_map"], [269, 0, 0, "-", "coco_tools"], [270, 0, 0, "-", "evaluate_squad"], [271, 0, 0, "-", "f1"], [273, 0, 0, "-", "metric"]], "neural_compressor.experimental.metric.bleu": [[266, 1, 1, "", "BLEU"], [266, 1, 1, "", "UnicodeRegex"], [266, 2, 1, "", "bleu_tokenize"]], "neural_compressor.experimental.metric.bleu.BLEU": [[266, 3, 1, "", "labels"], [266, 3, 1, "", "predictions"]], "neural_compressor.experimental.metric.bleu.UnicodeRegex": [[266, 3, 1, "", "nondigit_punct_re"], [266, 3, 1, "", "punct_nondigit_re"], [266, 3, 1, "", "symbol_re"]], "neural_compressor.experimental.metric.bleu_util": [[267, 2, 1, "", "compute_bleu"]], "neural_compressor.experimental.metric.coco_tools": [[269, 1, 1, "", "COCOEvalWrapper"], [269, 1, 1, "", "COCOWrapper"], [269, 2, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [269, 2, 1, "", "ExportSingleImageDetectionMasksToCoco"], [269, 2, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.experimental.metric.coco_tools.COCOWrapper": [[269, 3, 1, "", "dataset"], [269, 3, 1, "", "detection_type"]], "neural_compressor.experimental.metric.evaluate_squad": [[270, 2, 1, "", "evaluate"], [270, 2, 1, "", "exact_match_score"], [270, 2, 1, "", "f1_score"], [270, 2, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[271, 2, 1, "", "evaluate"], [271, 2, 1, "", "f1_score"], [271, 2, 1, "", "metric_max_over_ground_truths"], [271, 2, 1, "", "normalize_answer"]], "neural_compressor.experimental.metric.metric": [[273, 1, 1, "", "Accuracy"], [273, 1, 1, "", "BaseMetric"], [273, 1, 1, "", "COCOmAPv2"], [273, 1, 1, "", "F1"], [273, 1, 1, "", "GeneralTopK"], [273, 1, 1, "", "Loss"], [273, 1, 1, "", "MAE"], [273, 1, 1, "", "METRICS"], [273, 1, 1, "", "MSE"], [273, 1, 1, "", "MXNetMetrics"], [273, 1, 1, "", "ONNXRTGLUE"], [273, 1, 1, "", "ONNXRTITMetrics"], [273, 1, 1, "", "ONNXRTQLMetrics"], [273, 1, 1, "", "PyTorchLoss"], [273, 1, 1, "", "PyTorchMetrics"], [273, 1, 1, "", "RMSE"], [273, 1, 1, "", "ROC"], [273, 1, 1, "", "SquadF1"], [273, 1, 1, "", "TensorflowCOCOMAP"], [273, 1, 1, "", "TensorflowMAP"], [273, 1, 1, "", "TensorflowMetrics"], [273, 1, 1, "", "TensorflowTopK"], [273, 1, 1, "", "TensorflowVOCMAP"], [273, 1, 1, "", "WrapMXNetMetric"], [273, 1, 1, "", "WrapONNXRTMetric"], [273, 1, 1, "", "WrapPyTorchMetric"], [273, 1, 1, "", "mIOU"], [273, 2, 1, "", "metric_registry"]], "neural_compressor.experimental.metric.metric.Accuracy": [[273, 3, 1, "", "label_list"], [273, 3, 1, "", "pred_list"], [273, 3, 1, "", "sample"]], "neural_compressor.experimental.metric.metric.GeneralTopK": [[273, 3, 1, "", "k"], [273, 3, 1, "", "num_correct"], [273, 3, 1, "", "num_sample"]], "neural_compressor.experimental.metric.metric.Loss": [[273, 3, 1, "", "sample"], [273, 3, 1, "", "sum"]], "neural_compressor.experimental.metric.metric.MAE": [[273, 3, 1, "", "compare_label"], [273, 3, 1, "", "label_list"], [273, 3, 1, "", "pred_list"]], "neural_compressor.experimental.metric.metric.METRICS": [[273, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.MSE": [[273, 3, 1, "", "compare_label"], [273, 3, 1, "", "label_list"], [273, 3, 1, "", "pred_list"]], "neural_compressor.experimental.metric.metric.MXNetMetrics": [[273, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTITMetrics": [[273, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics": [[273, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.PyTorchMetrics": [[273, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.RMSE": [[273, 3, 1, "", "mse"]], "neural_compressor.experimental.metric.metric.TensorflowMetrics": [[273, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.TensorflowTopK": [[273, 3, 1, "", "k"], [273, 3, 1, "", "num_correct"], [273, 3, 1, "", "num_sample"]], "neural_compressor.experimental.mixed_precision": [[274, 1, 1, "", "MixedPrecision"]], "neural_compressor.experimental.model_conversion": [[275, 1, 1, "", "ModelConversion"]], "neural_compressor.experimental.nas": [[276, 0, 0, "-", "basic_nas"], [277, 0, 0, "-", "dynas"], [279, 0, 0, "-", "nas"], [280, 0, 0, "-", "nas_utils"], [281, 0, 0, "-", "search_algorithms"]], "neural_compressor.experimental.nas.basic_nas": [[276, 1, 1, "", "BasicNAS"]], "neural_compressor.experimental.nas.dynas": [[277, 1, 1, "", "DyNAS"]], "neural_compressor.experimental.nas.nas": [[279, 1, 1, "", "NAS"], [279, 1, 1, "", "NASBase"]], "neural_compressor.experimental.nas.nas_utils": [[280, 2, 1, "", "create_search_space_pool"], [280, 2, 1, "", "find_pareto_front"], [280, 2, 1, "", "nas_registry"]], "neural_compressor.experimental.nas.search_algorithms": [[281, 1, 1, "", "BayesianOptimizationSearcher"], [281, 1, 1, "", "GridSearcher"], [281, 1, 1, "", "RandomSearcher"], [281, 1, 1, "", "Searcher"]], "neural_compressor.experimental.pruner_legacy": [[282, 0, 0, "-", "gradient_sensitivity"], [283, 0, 0, "-", "group_lasso"], [285, 0, 0, "-", "magnitude"], [286, 0, 0, "-", "pattern_lock"], [287, 0, 0, "-", "pruner"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[282, 1, 1, "", "GradientSensitivityPruner"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[283, 1, 1, "", "GroupLassoPruner"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[285, 1, 1, "", "BasicMagnitudePruner"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[286, 1, 1, "", "PatternLockPruner"]], "neural_compressor.experimental.pruner_legacy.pruner": [[287, 1, 1, "", "Pruner"], [287, 2, 1, "", "pruner_registry"]], "neural_compressor.experimental.pruning": [[288, 1, 1, "", "Pruning"], [288, 1, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning.Pruning": [[288, 3, 1, "", "conf"], [288, 3, 1, "", "pruners"]], "neural_compressor.experimental.pruning_recipes": [[290, 0, 0, "-", "patterns"]], "neural_compressor.experimental.pruning_recipes.patterns": [[291, 0, 0, "-", "pattern"], [292, 0, 0, "-", "tile_pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[291, 1, 1, "", "PATTERNS"], [291, 1, 1, "", "PatternBase"], [291, 2, 1, "", "pattern_registry"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS": [[291, 3, 1, "", "patterns"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[292, 1, 1, "", "TilePatternBase"], [292, 1, 1, "", "TilePattern_1x1"], [292, 1, 1, "", "TilePattern_1x16"], [292, 1, 1, "", "TilePattern_1x2"], [292, 1, 1, "", "TilePattern_2x2"], [292, 1, 1, "", "TilePattern_4x1"]], "neural_compressor.experimental.pruning_v2": [[293, 1, 1, "", "Pruning"], [293, 1, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning_v2.Pruning": [[293, 3, 1, "", "conf"], [293, 3, 1, "", "pruners"]], "neural_compressor.experimental.pytorch_pruner": [[295, 0, 0, "-", "logger"], [296, 0, 0, "-", "patterns"], [297, 0, 0, "-", "prune_utils"], [298, 0, 0, "-", "pruner"], [299, 0, 0, "-", "pruning"], [300, 0, 0, "-", "scheduler"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[296, 1, 1, "", "Pattern"], [296, 1, 1, "", "PatternNInM"], [296, 1, 1, "", "PatternNxM"], [296, 2, 1, "", "get_pattern"], [296, 2, 1, "", "register_pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.Pattern": [[296, 3, 1, "", "is_global"], [296, 3, 1, "", "pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM": [[296, 3, 1, "", "M"], [296, 3, 1, "", "N"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM": [[296, 3, 1, "", "block_size"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[297, 2, 1, "", "check_config"], [297, 2, 1, "", "parse_not_to_prune"], [297, 2, 1, "", "parse_to_prune"], [297, 2, 1, "", "process_and_check_config"], [297, 2, 1, "", "process_config"], [297, 2, 1, "", "reset_non_value_to_default"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[298, 1, 1, "", "MagnitudePruner"], [298, 1, 1, "", "PatternLockPruner"], [298, 1, 1, "", "Pruner"], [298, 1, 1, "", "SnipMomentumPruner"], [298, 1, 1, "", "SnipPruner"], [298, 2, 1, "", "get_pruner"], [298, 2, 1, "", "register_pruners"]], "neural_compressor.experimental.pytorch_pruner.pruner.Pruner": [[298, 3, 1, "", "config"], [298, 3, 1, "", "current_sparsity_ratio"], [298, 3, 1, "", "end_step"], [298, 3, 1, "", "global_step"], [298, 3, 1, "", "masks"], [298, 3, 1, "", "max_sparsity_ratio_per_layer"], [298, 3, 1, "", "modules"], [298, 3, 1, "", "pattern"], [298, 3, 1, "", "scheduler"], [298, 3, 1, "", "scores"], [298, 3, 1, "", "start_step"], [298, 3, 1, "", "target_sparsity_ratio"], [298, 3, 1, "", "update_frequency_on_step"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[299, 1, 1, "", "Pruning"]], "neural_compressor.experimental.pytorch_pruner.pruning.Pruning": [[299, 3, 1, "", "config_file_path"], [299, 3, 1, "", "model"], [299, 3, 1, "", "pruner_info"], [299, 3, 1, "", "pruners"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[300, 1, 1, "", "IterativeScheduler"], [300, 1, 1, "", "OneshotScheduler"], [300, 1, 1, "", "Scheduler"], [300, 2, 1, "", "get_scheduler"], [300, 2, 1, "", "register_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler": [[300, 3, 1, "", "config"]], "neural_compressor.experimental.quantization": [[301, 1, 1, "", "Quantization"]], "neural_compressor.experimental.scheduler": [[302, 1, 1, "", "Scheduler"]], "neural_compressor.experimental.strategy": [[303, 0, 0, "-", "auto_mixed_precision"], [304, 0, 0, "-", "basic"], [305, 0, 0, "-", "bayesian"], [306, 0, 0, "-", "exhaustive"], [308, 0, 0, "-", "mse"], [309, 0, 0, "-", "mse_v2"], [310, 0, 0, "-", "random"], [311, 0, 0, "-", "strategy"], [313, 0, 0, "-", "utils"]], "neural_compressor.experimental.strategy.auto_mixed_precision": [[303, 1, 1, "", "AutoMixedPrecisionTuneStrategy"]], "neural_compressor.experimental.strategy.basic": [[304, 1, 1, "", "BasicTuneStrategy"]], "neural_compressor.experimental.strategy.bayesian": [[305, 1, 1, "", "BayesianOptimization"], [305, 1, 1, "", "BayesianTuneStrategy"], [305, 1, 1, "", "TargetSpace"], [305, 2, 1, "", "acq_max"]], "neural_compressor.experimental.strategy.exhaustive": [[306, 1, 1, "", "ExhaustiveTuneStrategy"]], "neural_compressor.experimental.strategy.mse": [[308, 1, 1, "", "MSETuneStrategy"]], "neural_compressor.experimental.strategy.mse_v2": [[309, 1, 1, "", "MSE_V2TuneStrategy"]], "neural_compressor.experimental.strategy.random": [[310, 1, 1, "", "RandomTuneStrategy"]], "neural_compressor.experimental.strategy.strategy": [[311, 1, 1, "", "TuneStrategy"], [311, 2, 1, "", "strategy_registry"]], "neural_compressor.experimental.strategy.utils": [[312, 0, 0, "-", "constant"], [314, 0, 0, "-", "tuning_sampler"], [315, 0, 0, "-", "tuning_space"], [316, 0, 0, "-", "tuning_structs"], [317, 0, 0, "-", "utility"]], "neural_compressor.experimental.strategy.utils.tuning_sampler": [[314, 1, 1, "", "FallbackTuningSampler"], [314, 1, 1, "", "ModelWiseTuningSampler"], [314, 1, 1, "", "OpTypeWiseTuningSampler"], [314, 1, 1, "", "OpWiseTuningSampler"], [314, 1, 1, "", "SmoothQuantSampler"], [314, 1, 1, "", "TuningOrder"], [314, 1, 1, "", "TuningSampler"], [314, 1, 1, "", "TuningSamplerRegistry"]], "neural_compressor.experimental.strategy.utils.tuning_space": [[315, 1, 1, "", "TuningItem"], [315, 1, 1, "", "TuningSpace"], [315, 2, 1, "", "initial_tuning_cfg_with_quant_mode"], [315, 2, 1, "", "pattern_to_internal"], [315, 2, 1, "", "pattern_to_path"], [315, 2, 1, "", "quant_mode_from_pattern"]], "neural_compressor.experimental.strategy.utils.tuning_structs": [[316, 1, 1, "", "OpTuningConfig"]], "neural_compressor.experimental.strategy.utils.utility": [[317, 1, 1, "", "OrderedDefaultDict"], [317, 2, 1, "", "extract_data_type"], [317, 2, 1, "", "get_adaptor_name"], [317, 2, 1, "", "reverted_data_type"]], "neural_compressor.metric": [[319, 0, 0, "-", "bleu"], [320, 0, 0, "-", "bleu_util"], [321, 0, 0, "-", "coco_label_map"], [322, 0, 0, "-", "coco_tools"], [323, 0, 0, "-", "evaluate_squad"], [324, 0, 0, "-", "f1"], [326, 0, 0, "-", "metric"]], "neural_compressor.metric.bleu": [[319, 1, 1, "", "BLEU"], [319, 1, 1, "", "UnicodeRegex"], [319, 2, 1, "", "bleu_tokenize"]], "neural_compressor.metric.bleu.BLEU": [[319, 3, 1, "", "labels"], [319, 3, 1, "", "predictions"]], "neural_compressor.metric.bleu.UnicodeRegex": [[319, 3, 1, "", "nondigit_punct_re"], [319, 3, 1, "", "punct_nondigit_re"], [319, 3, 1, "", "symbol_re"]], "neural_compressor.metric.bleu_util": [[320, 2, 1, "", "compute_bleu"]], "neural_compressor.metric.coco_tools": [[322, 1, 1, "", "COCOEvalWrapper"], [322, 1, 1, "", "COCOWrapper"], [322, 2, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [322, 2, 1, "", "ExportSingleImageDetectionMasksToCoco"], [322, 2, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.metric.coco_tools.COCOWrapper": [[322, 3, 1, "", "dataset"], [322, 3, 1, "", "detection_type"]], "neural_compressor.metric.evaluate_squad": [[323, 2, 1, "", "evaluate"], [323, 2, 1, "", "exact_match_score"], [323, 2, 1, "", "f1_score"], [323, 2, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[324, 2, 1, "", "evaluate"], [324, 2, 1, "", "f1_score"], [324, 2, 1, "", "metric_max_over_ground_truths"], [324, 2, 1, "", "normalize_answer"]], "neural_compressor.metric.metric": [[326, 1, 1, "", "Accuracy"], [326, 1, 1, "", "BaseMetric"], [326, 1, 1, "", "COCOmAPv2"], [326, 1, 1, "", "F1"], [326, 1, 1, "", "GeneralTopK"], [326, 1, 1, "", "Loss"], [326, 1, 1, "", "MAE"], [326, 1, 1, "", "METRICS"], [326, 1, 1, "", "MSE"], [326, 1, 1, "", "MXNetMetrics"], [326, 1, 1, "", "Metric"], [326, 1, 1, "", "ONNXRTGLUE"], [326, 1, 1, "", "ONNXRTITMetrics"], [326, 1, 1, "", "ONNXRTQLMetrics"], [326, 1, 1, "", "PyTorchLoss"], [326, 1, 1, "", "PyTorchMetrics"], [326, 1, 1, "", "RMSE"], [326, 1, 1, "", "ROC"], [326, 1, 1, "", "SquadF1"], [326, 1, 1, "", "TensorflowCOCOMAP"], [326, 1, 1, "", "TensorflowMAP"], [326, 1, 1, "", "TensorflowMetrics"], [326, 1, 1, "", "TensorflowTopK"], [326, 1, 1, "", "TensorflowVOCMAP"], [326, 1, 1, "", "WrapMXNetMetric"], [326, 1, 1, "", "WrapONNXRTMetric"], [326, 1, 1, "", "WrapPyTorchMetric"], [326, 1, 1, "", "mIOU"], [326, 2, 1, "", "metric_registry"], [326, 2, 1, "", "register_customer_metric"]], "neural_compressor.metric.metric.Accuracy": [[326, 3, 1, "", "label_list"], [326, 3, 1, "", "pred_list"], [326, 3, 1, "", "sample"]], "neural_compressor.metric.metric.GeneralTopK": [[326, 3, 1, "", "k"], [326, 3, 1, "", "num_correct"], [326, 3, 1, "", "num_sample"]], "neural_compressor.metric.metric.Loss": [[326, 3, 1, "", "sample"], [326, 3, 1, "", "sum"]], "neural_compressor.metric.metric.MAE": [[326, 3, 1, "", "compare_label"], [326, 3, 1, "", "label_list"], [326, 3, 1, "", "pred_list"]], "neural_compressor.metric.metric.METRICS": [[326, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.MSE": [[326, 3, 1, "", "compare_label"], [326, 3, 1, "", "label_list"], [326, 3, 1, "", "pred_list"]], "neural_compressor.metric.metric.MXNetMetrics": [[326, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTITMetrics": [[326, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTQLMetrics": [[326, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.PyTorchMetrics": [[326, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.RMSE": [[326, 3, 1, "", "mse"]], "neural_compressor.metric.metric.TensorflowMetrics": [[326, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.TensorflowTopK": [[326, 3, 1, "", "k"], [326, 3, 1, "", "num_correct"], [326, 3, 1, "", "num_sample"]], "neural_compressor.mix_precision": [[327, 2, 1, "", "fit"]], "neural_compressor.model": [[328, 0, 0, "-", "base_model"], [330, 0, 0, "-", "keras_model"], [331, 0, 0, "-", "model"], [332, 0, 0, "-", "mxnet_model"], [333, 0, 0, "-", "nets_factory"], [334, 0, 0, "-", "onnx_model"], [335, 0, 0, "-", "tensorflow_model"], [336, 0, 0, "-", "torch_model"]], "neural_compressor.model.base_model": [[328, 1, 1, "", "BaseModel"]], "neural_compressor.model.keras_model": [[330, 1, 1, "", "KerasModel"]], "neural_compressor.model.model": [[331, 1, 1, "", "Model"], [331, 2, 1, "", "get_model_fwk_name"]], "neural_compressor.model.mxnet_model": [[332, 1, 1, "", "MXNetModel"]], "neural_compressor.model.nets_factory": [[333, 1, 1, "", "TFSlimNetsFactory"]], "neural_compressor.model.onnx_model": [[334, 1, 1, "", "ONNXModel"]], "neural_compressor.model.tensorflow_model": [[335, 1, 1, "", "TensorflowBaseModel"], [335, 1, 1, "", "TensorflowCheckpointModel"], [335, 1, 1, "", "TensorflowModel"], [335, 1, 1, "", "TensorflowQATModel"], [335, 1, 1, "", "TensorflowSavedModelModel"], [335, 2, 1, "", "checkpoint_session"], [335, 2, 1, "", "estimator_session"], [335, 2, 1, "", "frozen_pb_session"], [335, 2, 1, "", "get_model_type"], [335, 2, 1, "", "graph_def_session"], [335, 2, 1, "", "graph_session"], [335, 2, 1, "", "keras_session"], [335, 2, 1, "", "load_saved_model"], [335, 2, 1, "", "saved_model_session"], [335, 2, 1, "", "slim_session"], [335, 2, 1, "", "validate_and_inference_input_output"], [335, 2, 1, "", "validate_graph_node"]], "neural_compressor.model.torch_model": [[336, 1, 1, "", "IPEXModel"], [336, 1, 1, "", "PyTorchBaseModel"], [336, 1, 1, "", "PyTorchFXModel"], [336, 1, 1, "", "PyTorchModel"]], "neural_compressor.objective": [[337, 1, 1, "", "Accuracy"], [337, 1, 1, "", "Footprint"], [337, 1, 1, "", "ModelSize"], [337, 1, 1, "", "MultiObjective"], [337, 1, 1, "", "Objective"], [337, 1, 1, "", "Performance"], [337, 2, 1, "", "objective_custom_registry"], [337, 2, 1, "", "objective_registry"]], "neural_compressor.profiling": [[340, 0, 0, "-", "parser"], [350, 0, 0, "-", "profiler"]], "neural_compressor.profiling.parser": [[339, 0, 0, "-", "factory"], [342, 0, 0, "-", "onnx_parser"], [344, 0, 0, "-", "parser"], [345, 0, 0, "-", "result"], [347, 0, 0, "-", "tensorflow_parser"]], "neural_compressor.profiling.parser.factory": [[339, 1, 1, "", "ParserFactory"]], "neural_compressor.profiling.parser.onnx_parser": [[341, 0, 0, "-", "factory"], [343, 0, 0, "-", "parser"]], "neural_compressor.profiling.parser.onnx_parser.factory": [[341, 1, 1, "", "OnnxrtParserFactory"]], "neural_compressor.profiling.parser.onnx_parser.parser": [[343, 1, 1, "", "OnnxProfilingParser"]], "neural_compressor.profiling.parser.parser": [[344, 1, 1, "", "ProfilingParser"]], "neural_compressor.profiling.parser.result": [[345, 1, 1, "", "ProfilingResult"]], "neural_compressor.profiling.parser.tensorflow_parser": [[346, 0, 0, "-", "factory"], [348, 0, 0, "-", "parser"]], "neural_compressor.profiling.parser.tensorflow_parser.factory": [[346, 1, 1, "", "TensorFlowParserFactory"]], "neural_compressor.profiling.parser.tensorflow_parser.parser": [[348, 1, 1, "", "TensorFlowProfilingParser"]], "neural_compressor.profiling.profiler": [[349, 0, 0, "-", "factory"], [352, 0, 0, "-", "onnxrt_profiler"], [355, 0, 0, "-", "profiler"], [357, 0, 0, "-", "tensorflow_profiler"]], "neural_compressor.profiling.profiler.factory": [[349, 1, 1, "", "ProfilerFactory"]], "neural_compressor.profiling.profiler.onnxrt_profiler": [[351, 0, 0, "-", "factory"], [353, 0, 0, "-", "profiler"], [354, 0, 0, "-", "utils"]], "neural_compressor.profiling.profiler.onnxrt_profiler.factory": [[351, 1, 1, "", "ProfilerFactory"]], "neural_compressor.profiling.profiler.onnxrt_profiler.profiler": [[353, 1, 1, "", "Profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.utils": [[354, 2, 1, "", "create_onnx_config"]], "neural_compressor.profiling.profiler.profiler": [[355, 1, 1, "", "Profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler": [[356, 0, 0, "-", "factory"], [358, 0, 0, "-", "profiler"], [359, 0, 0, "-", "utils"]], "neural_compressor.profiling.profiler.tensorflow_profiler.factory": [[356, 1, 1, "", "ProfilerFactory"]], "neural_compressor.profiling.profiler.tensorflow_profiler.profiler": [[358, 1, 1, "", "Profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.utils": [[359, 2, 1, "", "create_tf_config"], [359, 2, 1, "", "delete_assign"], [359, 2, 1, "", "set_eager_execution"]], "neural_compressor.quantization": [[360, 2, 1, "", "fit"]], "neural_compressor.strategy": [[361, 0, 0, "-", "auto"], [362, 0, 0, "-", "auto_mixed_precision"], [363, 0, 0, "-", "basic"], [364, 0, 0, "-", "bayesian"], [365, 0, 0, "-", "conservative"], [366, 0, 0, "-", "exhaustive"], [367, 0, 0, "-", "hawq_v2"], [369, 0, 0, "-", "mse"], [370, 0, 0, "-", "mse_v2"], [371, 0, 0, "-", "random"], [372, 0, 0, "-", "strategy"], [374, 0, 0, "-", "utils"]], "neural_compressor.strategy.auto": [[361, 1, 1, "", "AutoTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[362, 1, 1, "", "AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.basic": [[363, 1, 1, "", "BasicTuneStrategy"]], "neural_compressor.strategy.bayesian": [[364, 1, 1, "", "BayesianOptimization"], [364, 1, 1, "", "BayesianTuneStrategy"], [364, 1, 1, "", "TargetSpace"], [364, 2, 1, "", "acq_max"]], "neural_compressor.strategy.conservative": [[365, 1, 1, "", "ConservativeTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[366, 1, 1, "", "ExhaustiveTuneStrategy"]], "neural_compressor.strategy.hawq_v2": [[367, 1, 1, "", "HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.mse": [[369, 1, 1, "", "MSETuneStrategy"]], "neural_compressor.strategy.mse_v2": [[370, 1, 1, "", "MSE_V2TuneStrategy"]], "neural_compressor.strategy.random": [[371, 1, 1, "", "RandomTuneStrategy"]], "neural_compressor.strategy.strategy": [[372, 1, 1, "", "TuneStrategy"], [372, 1, 1, "", "TuneStrategyMeta"], [372, 2, 1, "", "strategy_registry"]], "neural_compressor.strategy.utils": [[373, 0, 0, "-", "constant"], [375, 0, 0, "-", "tuning_sampler"], [376, 0, 0, "-", "tuning_space"], [377, 0, 0, "-", "tuning_structs"], [378, 0, 0, "-", "utility"]], "neural_compressor.strategy.utils.tuning_sampler": [[375, 1, 1, "", "BlockFallbackTuningSampler"], [375, 1, 1, "", "FallbackTuningSampler"], [375, 1, 1, "", "LowerBitsSampler"], [375, 1, 1, "", "ModelWiseTuningSampler"], [375, 1, 1, "", "OpTypeWiseTuningSampler"], [375, 1, 1, "", "OpWiseTuningSampler"], [375, 1, 1, "", "TuningOrder"], [375, 1, 1, "", "TuningSampler"], [375, 1, 1, "", "TuningSamplerRegistry"]], "neural_compressor.strategy.utils.tuning_space": [[376, 1, 1, "", "TuningItem"], [376, 1, 1, "", "TuningSpace"], [376, 2, 1, "", "initial_tuning_cfg_with_quant_mode"], [376, 2, 1, "", "pattern_to_internal"], [376, 2, 1, "", "pattern_to_path"], [376, 2, 1, "", "quant_mode_from_pattern"]], "neural_compressor.strategy.utils.tuning_structs": [[377, 1, 1, "", "OpTuningConfig"]], "neural_compressor.strategy.utils.utility": [[378, 1, 1, "", "OrderedDefaultDict"], [378, 1, 1, "", "QuantOptions"], [378, 1, 1, "", "QuantType"], [378, 2, 1, "", "build_slave_faker_model"], [378, 2, 1, "", "extract_data_type"], [378, 2, 1, "", "get_adaptor_name"], [378, 2, 1, "", "preprocess_user_cfg"], [378, 2, 1, "", "reverted_data_type"]], "neural_compressor.template": [[379, 0, 0, "-", "api_doc_example"]], "neural_compressor.template.api_doc_example": [[379, 1, 1, "", "ExampleClass"], [379, 3, 1, "", "attribute1"], [379, 2, 1, "", "function1"], [379, 2, 1, "", "function2"], [379, 2, 1, "", "function3"], [379, 2, 1, "", "generator1"], [379, 4, 1, "", "module_debug_level1"]], "neural_compressor.template.api_doc_example.ExampleClass": [[379, 3, 1, "", "attr1"], [379, 3, 1, "", "attr2"], [379, 3, 1, "", "attr5"]], "neural_compressor.training": [[381, 1, 1, "", "CallBacks"], [381, 1, 1, "", "CompressionManager"], [381, 2, 1, "", "fit"], [381, 2, 1, "", "prepare_compression"]], "neural_compressor.utils": [[382, 0, 0, "-", "collect_layer_histogram"], [383, 0, 0, "-", "constant"], [384, 0, 0, "-", "create_obj_from_config"], [386, 0, 0, "-", "kl_divergence"], [387, 0, 0, "-", "load_huggingface"], [388, 0, 0, "-", "logger"], [389, 0, 0, "-", "neural_insights_utils"], [390, 0, 0, "-", "options"], [391, 0, 0, "-", "pytorch"], [392, 0, 0, "-", "utility"], [393, 0, 0, "-", "weights_details"]], "neural_compressor.utils.collect_layer_histogram": [[382, 1, 1, "", "LayerHistogramCollector"]], "neural_compressor.utils.create_obj_from_config": [[384, 2, 1, "", "create_dataloader"], [384, 2, 1, "", "create_dataset"], [384, 2, 1, "", "create_eval_func"], [384, 2, 1, "", "create_train_func"], [384, 2, 1, "", "get_algorithm"], [384, 2, 1, "", "get_func_from_config"], [384, 2, 1, "", "get_metrics"], [384, 2, 1, "", "get_postprocess"], [384, 2, 1, "", "get_preprocess"]], "neural_compressor.utils.kl_divergence": [[386, 1, 1, "", "KL_Divergence"]], "neural_compressor.utils.load_huggingface": [[387, 1, 1, "", "OptimizedModel"], [387, 2, 1, "", "save_for_huggingface_upstream"]], "neural_compressor.utils.logger": [[388, 1, 1, "", "Logger"], [388, 2, 1, "", "debug"], [388, 2, 1, "", "error"], [388, 2, 1, "", "fatal"], [388, 2, 1, "", "info"], [388, 2, 1, "", "log"], [388, 2, 1, "", "warn"], [388, 2, 1, "", "warning"]], "neural_compressor.utils.neural_insights_utils": [[389, 2, 1, "", "register_neural_insights_workload"], [389, 2, 1, "", "update_neural_insights_workload"], [389, 2, 1, "", "update_neural_insights_workload_accuracy_data"]], "neural_compressor.utils.options": [[390, 1, 1, "", "onnxrt"]], "neural_compressor.utils.pytorch": [[391, 2, 1, "", "is_int8_model"], [391, 2, 1, "", "load"]], "neural_compressor.utils.utility": [[392, 1, 1, "", "CaptureOutputToFile"], [392, 1, 1, "", "CpuInfo"], [392, 2, 1, "", "Dequantize"], [392, 1, 1, "", "DotDict"], [392, 1, 1, "", "GLOBAL_STATE"], [392, 1, 1, "", "LazyImport"], [392, 1, 1, "", "MODE"], [392, 1, 1, "", "OpEntry"], [392, 1, 1, "", "Statistics"], [392, 2, 1, "", "alias_param"], [392, 2, 1, "", "calculate_mse"], [392, 2, 1, "", "combine_histogram"], [392, 2, 1, "", "compare_objects"], [392, 2, 1, "", "compute_sparsity"], [392, 2, 1, "", "dequantize_weight"], [392, 2, 1, "", "dump_class_attrs"], [392, 2, 1, "", "dump_data_to_local"], [392, 2, 1, "", "dump_elapsed_time"], [392, 2, 1, "", "dump_table"], [392, 2, 1, "", "dump_table_to_csv"], [392, 2, 1, "", "equal_dicts"], [392, 2, 1, "", "fault_tolerant_file"], [392, 2, 1, "", "get_all_fp32_data"], [392, 2, 1, "", "get_number_of_sockets"], [392, 2, 1, "", "get_op_list"], [392, 2, 1, "", "get_size"], [392, 2, 1, "", "get_tensor_histogram"], [392, 2, 1, "", "get_tensors_info"], [392, 2, 1, "", "get_tuning_history"], [392, 2, 1, "", "get_weights_details"], [392, 2, 1, "", "load_data_from_pkl"], [392, 2, 1, "", "mse_metric_gap"], [392, 2, 1, "", "print_op_list"], [392, 2, 1, "", "print_table"], [392, 2, 1, "", "recover"], [392, 2, 1, "", "set_random_seed"], [392, 2, 1, "", "set_resume_from"], [392, 2, 1, "", "set_tensorboard"], [392, 2, 1, "", "set_workspace"], [392, 2, 1, "", "show_memory_info"], [392, 2, 1, "", "singleton"], [392, 2, 1, "", "str2array"], [392, 2, 1, "", "time_limit"], [392, 2, 1, "", "version1_eq_version2"], [392, 2, 1, "", "version1_gt_version2"], [392, 2, 1, "", "version1_gte_version2"], [392, 2, 1, "", "version1_lt_version2"], [392, 2, 1, "", "version1_lte_version2"]], "neural_compressor.utils.weights_details": [[393, 1, 1, "", "WeightsDetails"], [393, 1, 1, "", "WeightsStatistics"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:function", "3": "py:attribute", "4": "py:data"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "function", "Python function"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "data", "Python data"]}, "titleterms": {"block_mask": 0, "neural_compressor": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394], "adaptor": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 402, 403, 405], "modul": [1, 3, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 108, 109, 112, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 152, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 166, 169, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 211, 212, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 226, 228, 231, 232, 233, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 255, 257, 258, 259, 261, 262, 263, 264, 266, 267, 269, 270, 271, 273, 274, 275, 276, 277, 279, 280, 281, 282, 283, 285, 286, 287, 288, 291, 292, 293, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 314, 315, 316, 317, 319, 320, 322, 323, 324, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 339, 341, 343, 344, 345, 346, 348, 349, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 369, 370, 371, 372, 375, 376, 377, 378, 379, 381, 382, 384, 386, 387, 388, 389, 390, 391, 392, 393], "content": [1, 2, 3, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 108, 109, 112, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 169, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 228, 231, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 314, 315, 316, 317, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 341, 343, 344, 345, 346, 348, 349, 351, 353, 354, 355, 356, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 375, 376, 377, 378, 379, 381, 382, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 401], "class": [1, 3, 11, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 108, 109, 112, 114, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 148, 149, 150, 154, 155, 159, 160, 161, 162, 163, 165, 166, 169, 173, 174, 175, 176, 177, 178, 180, 181, 183, 184, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 231, 232, 233, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 264, 265, 266, 269, 272, 273, 274, 275, 276, 277, 279, 281, 282, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 314, 315, 316, 317, 319, 322, 325, 326, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 341, 343, 344, 345, 346, 348, 349, 351, 353, 355, 356, 358, 361, 362, 363, 364, 365, 366, 367, 369, 370, 371, 372, 375, 376, 377, 378, 379, 381, 382, 385, 386, 387, 388, 390, 392, 393, 402], "function": [1, 13, 16, 34, 42, 43, 44, 66, 67, 69, 103, 104, 115, 117, 147, 148, 149, 150, 152, 155, 156, 157, 158, 159, 161, 164, 166, 169, 171, 173, 175, 176, 177, 178, 179, 181, 190, 191, 199, 201, 205, 208, 209, 210, 213, 215, 216, 217, 218, 220, 222, 223, 225, 228, 235, 243, 245, 249, 252, 253, 254, 256, 257, 258, 261, 262, 263, 266, 267, 269, 270, 271, 272, 273, 280, 287, 291, 296, 297, 298, 300, 305, 311, 315, 317, 319, 320, 322, 323, 324, 325, 326, 327, 331, 335, 337, 354, 359, 360, 364, 372, 376, 378, 379, 381, 384, 385, 387, 388, 389, 391, 392, 426], "subpackag": [2, 17, 86, 110, 111, 113, 168, 170, 185, 210, 229, 254, 265, 289, 307, 318, 368], "submodul": [2, 12, 17, 29, 50, 75, 86, 94, 100, 105, 110, 111, 113, 116, 129, 144, 151, 161, 167, 168, 170, 172, 182, 186, 193, 205, 209, 213, 220, 227, 230, 237, 249, 253, 256, 260, 265, 272, 278, 284, 290, 294, 307, 313, 318, 325, 329, 340, 342, 347, 350, 352, 357, 368, 374, 380, 385], "packag": [2, 29, 161, 193, 205, 209, 210, 213, 220, 237, 249, 253, 254, 256, 265, 272, 284, 289, 290, 307, 325, 329, 368, 385, 450, 452, 454, 455], "kera": 3, "keras_util": [4, 5, 6, 7, 8, 9, 10], "conv2d": 4, "dens": 5, "depthwise_conv2d": 6, "pool2d": 8, "quantiz": [9, 41, 301, 360, 398, 401, 403, 404, 416, 423, 425, 428, 431, 434, 437, 438, 446, 457, 463, 464, 465, 466, 469, 475], "separable_conv2d": 10, "mxnet": [11, 421, 436, 464, 471], "mxnet_util": [12, 13], "util": [13, 43, 147, 157, 179, 312, 313, 314, 315, 316, 317, 354, 359, 373, 374, 375, 376, 377, 378, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 407], "onnxrt": [14, 421, 436, 471], "ox_util": [15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43], "calibr": [15, 16, 403], "oper": [18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 403, 404], "activ": 18, "argmax": 19, "attent": 20, "binary_op": 21, "concat": 22, "conv": 23, "direct_q8": 24, "embed_layernorm": 25, "gather": 26, "gavgpool": 27, "gemm": 28, "lstm": 30, "matmul": [31, 469], "maxpool": 32, "norm": 33, "op": [34, 428], "pad": 35, "pool": 36, "reduc": 37, "resiz": 38, "split": 39, "unary_op": 40, "smooth_quant": [42, 155, 162], "pytorch": [44, 391, 421, 426, 428, 436, 464, 465, 470, 471, 475], "queri": [45, 402], "tensorflow": [46, 421, 426, 428, 436, 464, 465, 470, 471, 475], "tf_util": [47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147], "graph_convert": 47, "graph_converter_without_calib": 48, "graph_rewrit": [49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108], "bf16": [49, 50, 438], "bf16_convert": [49, 148], "gener": [51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 403], "convert_add_to_biasadd": 51, "convert_layout": 52, "convert_leakyrelu": 53, "convert_nan_to_random": 54, "convert_placeholder_to_const": 55, "dequantize_cast_optim": 56, "dilated_contract": 57, "dummy_biasadd": 58, "expanddims_optim": 59, "fetch_weight_from_reshap": 60, "fold_batch_norm": 61, "fold_const": 62, "fuse_biasadd_add": 63, "fuse_column_wise_mul": 64, "fuse_conv_with_math": 65, "fuse_decomposed_bn": 66, "fuse_decomposed_in": 67, "fuse_gelu": 68, "fuse_layer_norm": 69, "fuse_pad_with_conv": 70, "fuse_pad_with_fp32_conv": 71, "fuse_reshape_transpos": 72, "graph_cse_optim": 73, "grappler_pass": 74, "insert_print_nod": 76, "move_squeeze_after_relu": 77, "pre_optim": 78, "remove_training_nod": 79, "rename_batch_norm": 80, "split_shared_input": 81, "strip_equivalent_nod": 82, "strip_unused_nod": 83, "switch_optim": 84, "graph_bas": 85, "int8": [87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 428, 475], "freeze_fake_qu": 87, "freeze_valu": 88, "freeze_value_without_calib": 89, "fuse_conv_redundant_dequant": 90, "fuse_conv_requant": 91, "fuse_matmul_redundant_dequant": 92, "fuse_matmul_requant": 93, "meta_op_optim": 95, "post_hostconst_convert": 96, "post_quantized_op_cs": 97, "rnn_convert": 98, "scale_propag": 99, "onnx": [100, 101, 102, 103, 104, 406, 434, 464, 475], "onnx_graph": 101, "onnx_nod": 102, "onnx_schema": 103, "tf2onnx_util": 104, "qdq": [105, 106, 107, 108, 122, 123, 124, 125, 126, 127, 128, 129, 130, 475], "insert_qdq_pattern": 106, "merge_duplicated_qdq": 107, "share_qdq_y_pattern": 108, "graph_util": 109, "quantize_graph": [111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137], "qat": [112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 475], "fake_quant": 112, "quantize_config": 114, "quantize_help": 115, "quantize_lay": [116, 117, 118, 119, 120], "optimize_lay": 117, "quantize_layer_add": 118, "quantize_layer_bas": 119, "quantize_layer_bn": 120, "quantize_wrapp": 121, "fuse_qdq_bn": 122, "fuse_qdq_concatv2": 123, "fuse_qdq_conv": 124, "fuse_qdq_deconv": 125, "fuse_qdq_in": 126, "fuse_qdq_matmul": 127, "fuse_qdq_pool": 128, "optimize_qdq": 130, "quantize_graph_bas": 131, "quantize_graph_bn": 132, "quantize_graph_concatv2": 133, "quantize_graph_conv": 134, "quantize_graph_for_intel_cpu": 135, "quantize_graph_matmul": 136, "quantize_graph_pool": 137, "quantize_graph_common": 138, "smooth_quant_calibr": 139, "smooth_quant_scal": 140, "tf2onnx_convert": 141, "transform_graph": [142, 143, 144, 145, 146], "bias_correct": 142, "graph_transform_bas": 143, "insert_log": 145, "rerange_quantized_concat": 146, "torch_util": [148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 225], "gptq": 149, "hawq_metr": 150, "mixed_precis": [152, 274], "model_wrapp": 153, "pattern_detector": 154, "symbolic_trac": 156, "weight_onli": 158, "algorithm": [159, 160, 161, 162, 163, 469, 472], "fast_bias_correct": 160, "weight_correct": 163, "benchmark": [164, 217, 410, 419, 423, 437, 463], "compress": [165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 227, 228, 411], "callback": 165, "distil": [166, 167, 259, 424, 425, 437, 463, 475], "criterion": [166, 218], "pruner": [169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 287, 298], "criteria": [169, 461, 472], "model_slim": [171, 172, 173, 174], "auto_slim": 171, "pattern_analyz": 173, "weight_slim": 174, "pattern": [175, 290, 291, 292, 296, 461], "reg": 177, "schedul": [178, 300, 302, 461], "conf": [180, 181, 182, 183], "config": [180, 184, 412, 421, 459], "dotdict": 181, "pythonic_config": 183, "contrib": [185, 186, 187, 188, 229, 230, 231, 232], "strategi": [186, 187, 188, 230, 231, 232, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 417, 468, 472], "sigopt": [187, 231, 468, 472], "tpe": [188, 232, 472], "data": [189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 403, 404, 423, 427], "dataload": [189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 219, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 420, 421], "base_dataload": [189, 233], "default_dataload": [191, 235], "fetcher": [192, 236], "attribut": [193, 201, 210, 245, 254, 265, 289, 329, 379, 385, 396], "mxnet_dataload": [194, 238], "onnxrt_dataload": [195, 239], "pytorch_dataload": [196, 240], "sampler": [197, 241], "tensorflow_dataload": [198, 242], "dataset": [199, 200, 201, 202, 203, 204, 205, 206, 243, 244, 245, 246, 247, 248, 249, 250, 421, 423, 432], "bert_dataset": [199, 243], "coco_dataset": [200, 244], "dummy_dataset": [202, 246], "dummy_dataset_v2": [203, 247], "imagenet_dataset": [204, 248], "style_transfer_dataset": [206, 250], "filter": [207, 208, 209, 251, 252, 253], "coco_filt": [207, 251], "transform": [211, 212, 213, 214, 215, 216, 255, 256, 257, 258, 432, 471], "coco_transform": 211, "imagenet_transform": [212, 255], "postprocess": [214, 224], "token": [215, 257], "experiment": [217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317], "common": [218, 219, 220, 221, 222, 223, 224, 225, 398, 429], "metric": [221, 266, 267, 268, 269, 270, 271, 272, 273, 319, 320, 321, 322, 323, 324, 325, 326, 432, 436], "model": [222, 328, 329, 330, 331, 332, 333, 334, 335, 336, 403, 414, 428, 431, 434, 437, 439, 446, 461, 466, 469, 475], "optim": [223, 447, 457, 460, 473], "compon": 226, "prune": [228, 288, 299, 437, 461, 463, 475], "export": [260, 261, 262, 263, 428], "qlinear2qdq": 261, "tf2onnx": 262, "torch2onnx": 263, "graph_optim": 264, "bleu": [266, 319], "bleu_util": [267, 320], "coco_label_map": [268, 321], "coco_tool": [269, 322], "evaluate_squad": [270, 323], "f1": [271, 324], "model_convers": 275, "na": [276, 277, 278, 279, 280, 281, 399, 463], "basic_na": 276, "dyna": 277, "nas_util": 280, "search_algorithm": 281, "pruner_legaci": [282, 283, 284, 285, 286, 287], "gradient_sensit": 282, "group_lasso": 283, "magnitud": 285, "pattern_lock": 286, "pruning_recip": [289, 290, 291, 292], "tile_pattern": 292, "pruning_v2": 293, "pytorch_prun": [294, 295, 296, 297, 298, 299, 300], "logger": [295, 388], "prune_util": 297, "auto_mixed_precis": [303, 362], "basic": [304, 363, 399, 472], "bayesian": [305, 364, 472], "exhaust": [306, 366, 472], "mse": [308, 369, 472], "mse_v2": [309, 370, 472], "random": [310, 371, 472], "constant": [312, 373, 383], "tuning_sampl": [314, 375], "tuning_spac": [315, 376], "tuning_struct": [316, 377], "mix_precis": 327, "base_model": 328, "keras_model": 330, "mxnet_model": 332, "nets_factori": 333, "onnx_model": 334, "tensorflow_model": 335, "torch_model": 336, "object": [337, 415, 459], "profil": [338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 423], "parser": [339, 340, 341, 342, 343, 344, 345, 346, 347, 348], "factori": [339, 341, 346, 349, 351, 356], "onnx_pars": [341, 342, 343], "result": 345, "tensorflow_pars": [346, 347, 348], "onnxrt_profil": [351, 352, 353, 354], "tensorflow_profil": [356, 357, 358, 359], "auto": [361, 451, 457, 465, 469, 472], "conserv": [365, 472], "hawq_v2": [367, 472], "templat": [379, 380, 397], "api_doc_exampl": 379, "train": [381, 398, 418, 426, 437, 464], "collect_layer_histogram": 382, "create_obj_from_config": 384, "kl_diverg": 386, "load_huggingfac": 387, "neural_insights_util": 389, "option": [390, 426, 445], "weights_detail": 393, "version": 394, "intel": [395, 401, 420, 423, 433, 434, 436, 437, 443, 451, 457, 475, 476], "neural": [395, 398, 399, 401, 420, 423, 433, 434, 436, 437, 440, 444, 446, 451, 457, 461, 468, 473, 476], "compressor": [395, 398, 401, 420, 423, 433, 434, 436, 437, 451, 457, 468, 476], "document": [395, 401, 408, 476], "section": [395, 476], "contributor": [396, 397], "coven": [396, 397], "code": [396, 397, 399, 437, 458, 466, 473], "conduct": [396, 397], "our": [396, 469], "pledg": 396, "standard": 396, "respons": 396, "scope": [396, 461], "enforc": 396, "contribut": [397, 450, 454], "guidelin": 397, "pull": 397, "request": [397, 438], "checklist": 397, "support": [397, 398, 399, 402, 404, 419, 420, 421, 423, 424, 425, 426, 428, 430, 433, 434, 436, 438, 439, 441, 442, 446, 447, 459, 460, 461, 463, 464, 466, 469, 470, 471, 474], "fx": 398, "introduct": [398, 399, 402, 403, 404, 419, 420, 421, 423, 424, 425, 426, 428, 430, 433, 436, 438, 439, 457, 459, 460, 461, 463, 464, 466, 468, 469, 470, 471, 472, 474], "mode": [398, 475], "matrix": [398, 399, 402, 419, 420, 421, 423, 424, 425, 426, 428, 430, 433, 436, 438, 439, 442, 459, 460, 461, 463, 464, 466, 469, 470, 474], "get": [398, 399, 401, 402, 419, 420, 421, 423, 424, 425, 426, 430, 431, 436, 438, 440, 451, 458, 459, 460, 461, 463, 464, 470, 474], "start": [398, 399, 401, 402, 419, 420, 421, 423, 424, 425, 426, 430, 431, 436, 438, 440, 441, 445, 451, 459, 460, 461, 463, 464, 470, 474], "post": [398, 437, 464], "static": [398, 464], "dynam": [398, 399, 464], "awar": [398, 437, 464], "exampl": [398, 399, 402, 408, 419, 420, 421, 423, 424, 425, 426, 427, 428, 436, 437, 438, 439, 442, 446, 459, 460, 461, 464, 466, 469, 470, 475], "note": [398, 467], "detail": 398, "problem": 398, "architectur": [399, 422, 433, 434], "search": [399, 457], "api": [399, 401, 402, 403, 408, 409, 419, 420, 421, 424, 425, 426, 431, 432, 436, 438, 440, 444, 458, 459, 460, 461, 463, 473], "usag": [399, 446, 457, 470, 472], "1": [399, 426, 429, 432, 437, 457, 475], "python": [399, 401, 420, 431, 436, 440, 444, 445, 452, 455, 463, 473], "yaml": [399, 403, 421, 426, 430, 474], "2": [399, 426, 429, 432, 437, 457, 475], "onli": [399, 466], "advanc": [399, 473], "custom": [399, 420, 436, 472], "secur": [400, 426], "polici": [400, 472], "report": 400, "vulner": 400, "instal": [401, 423, 434, 441, 443, 450, 451, 454], "from": [401, 403, 434, 437], "pypi": [401, 446], "select": [401, 451], "public": [401, 462], "event": [401, 462], "addit": 401, "research": 401, "collabor": 401, "work": [402, 464], "flow": [402, 464], "background": [402, 457], "ad": 402, "new": [402, 404, 452, 455, 472], "backend": [402, 464], "capabl": [402, 466], "implement": [402, 403], "onnxrtadaptor": 402, "how": [403, 404, 423], "add": 403, "an": 403, "list": [403, 427, 471], "need": 403, "design": [403, 422, 472], "framework": [403, 420, 421, 428, 430, 439, 463, 466, 469], "query_fw_cap": 403, "accord": [403, 404], "tune_cfg": 403, "prepar": [403, 423, 468], "fp32": [403, 428], "graph": 403, "run": [403, 423, 458], "sampl": [403, 431], "iter": 403, "calcul": 403, "rang": 403, "type": [404, 461], "like": 404, "int4": 404, "few": 404, "line": 404, "chang": [404, 432, 456, 458, 467], "defin": [404, 426], "abil": 404, "specif": [404, 421], "invok": 404, "kernel": 404, "tune": [404, 464, 469, 472], "configur": [404, 426, 430, 463, 468, 474], "us": [404, 420, 436], "summari": 404, "runtim": [406, 434, 464, 475], "torch": [407, 475], "mix": [413, 437, 438, 465], "precis": [413, 437, 438, 465], "build": [420, 429, 436], "file": [421, 430, 474], "user": [421, 426, 432, 463, 466, 473, 474], "workflow": 422, "diagnosi": 423, "featur": [423, 426, 430, 433, 446, 447, 451, 463, 464, 470, 474], "modifi": 423, "script": 423, "see": 423, "do": [423, 440], "paramet": 423, "descript": 423, "suggest": 423, "fallback": 423, "set": [423, 443, 457], "knowledg": [424, 475], "intermedi": 424, "layer": [424, 469], "self": 424, "distribut": [426, 446, 472], "infer": 426, "evalu": 426, "pure": 426, "horovodrun": 426, "execut": 426, "releas": [427, 452, 455, 467], "appendix": 428, "frequent": 429, "ask": 429, "question": 429, "issu": [429, 467], "3": [429, 441, 457], "4": [429, 448, 457, 462], "quick": [431, 445], "valid": [431, 434, 469, 475], "incompat": [432, 467], "between": 432, "v1": 432, "face": 432, "built": [432, 434, 436], "infrastructur": 433, "linux": 434, "prerequisit": 434, "binari": 434, "sourc": 434, "ai": 434, "kit": 434, "window": 434, "system": 434, "requir": [434, 450, 454], "hardwar": [434, 438, 475], "environ": [434, 443], "cpu": [434, 443, 475], "base": [434, 473], "64": 434, "compat": 434, "processor": 434, "gpu": 434, "": [434, 458], "xe": 434, "multipl": [434, 459, 475], "vendor": 434, "through": [434, 475], "softwar": [434, 438], "legal": 435, "inform": 435, "licens": 435, "citat": 435, "trademark": 435, "migrat": 437, "x": 437, "orchestr": [437, 460], "fp16": 438, "dure": [438, 465], "accuraci": [438, 464, 472], "driven": 438, "coder": [440, 444, 446, 457, 473], "what": [440, 458], "we": 440, "offer": 440, "jupyt": [440, 441, 452, 455], "lab": [440, 441], "extens": [440, 450, 451, 454, 457, 458, 475], "launcher": [440, 445], "contact": 440, "aw": 441, "amazon": 441, "sagemak": 441, "For": 441, "studio": 441, "notebook": 441, "instanc": 441, "guid": [441, 473], "bigdl": 442, "nano": 442, "platform": [443, 468], "best": [443, 451], "perform": [443, 468], "mkl": 443, "openmp": 443, "jemalloc": 443, "numa": 443, "control": 443, "variabl": 443, "frequenc": 443, "govern": 443, "enabl": [444, 451, 457], "bench": 444, "superbench": 444, "argument": 445, "v0": 448, "highlight": 448, "other": 448, "changelog": [449, 453], "neural_compressor_ext_lab": [450, 452], "uninstal": [450, 454], "develop": [450, 454], "jupyterlab": 451, "Or": 451, "let": 451, "u": 451, "help": 451, "you": 451, "pre": 451, "requisit": 451, "make": [452, 455, 458], "manual": [452, 455], "npm": [452, 455], "autom": [452, 455], "publish": [452, 455], "conda": [452, 455], "forg": [452, 455], "neural_compressor_ext_lab_alibaba": [454, 455], "log": 456, "unreleas": 456, "vscode": 457, "open": 457, "icon": 457, "5": 457, "welcom": 458, "your": 458, "v": 458, "folder": 458, "setup": 458, "up": 458, "straight": 458, "awai": 458, "explor": 458, "test": 458, "go": 458, "further": 458, "singl": 459, "One": 460, "shot": 460, "network": 461, "sparsiti": 461, "decai": 461, "regular": 461, "spars": 461, "deploy": 461, "refer": [461, 464, 466, 469], "full": 462, "68": 462, "2023": 462, "15": [462, 475], "2022": 462, "34": 462, "2021": 462, "2018": 462, "2020": 462, "style": 463, "access": 463, "fundament": [464, 469], "scheme": 464, "ipex": 464, "approach": 464, "With": 464, "without": 464, "specifi": 464, "rule": 464, "recip": 464, "devic": 464, "turn": 465, "off": 465, "weight": 466, "known": 467, "benefit": 468, "comparison": 468, "differ": 468, "smooth": 469, "quant": 469, "per": 469, "tensor": 469, "channel": 469, "limit": 469, "smoothquant": 469, "enhanc": 469, "wise": 469, "alpha": 469, "engin": 469, "tensorboard": 470, "space": 472, "exit": 472, "process": 472, "overview": 473, "zero": 473, "topic": 473, "innov": 473, "product": 473, "12": 475, "0": 475, "ptq": 475}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"block_mask": [[0, "module-block_mask"]], "neural_compressor.adaptor.adaptor": [[1, "module-neural_compressor.adaptor.adaptor"]], "Module Contents": [[1, "module-contents"], [3, "module-contents"], [11, "module-contents"], [13, "module-contents"], [14, "module-contents"], [15, "module-contents"], [16, "module-contents"], [18, "module-contents"], [19, "module-contents"], [20, "module-contents"], [21, "module-contents"], [22, "module-contents"], [23, "module-contents"], [24, "module-contents"], [25, "module-contents"], [26, "module-contents"], [27, "module-contents"], [28, "module-contents"], [30, "module-contents"], [31, "module-contents"], [32, "module-contents"], [33, "module-contents"], [34, "module-contents"], [35, "module-contents"], [36, "module-contents"], [37, "module-contents"], [38, "module-contents"], [39, "module-contents"], [40, "module-contents"], [41, "module-contents"], [42, "module-contents"], [43, "module-contents"], [44, "module-contents"], [45, "module-contents"], [46, "module-contents"], [47, "module-contents"], [48, "module-contents"], [49, "module-contents"], [51, "module-contents"], [52, "module-contents"], [53, "module-contents"], [54, "module-contents"], [55, "module-contents"], [56, "module-contents"], [57, "module-contents"], [58, "module-contents"], [59, "module-contents"], [60, "module-contents"], [61, "module-contents"], [62, "module-contents"], [63, "module-contents"], [64, "module-contents"], [65, "module-contents"], [66, "module-contents"], [67, "module-contents"], [68, "module-contents"], [69, "module-contents"], [70, "module-contents"], [71, "module-contents"], [72, "module-contents"], [73, "module-contents"], [74, "module-contents"], [76, "module-contents"], [77, "module-contents"], [78, "module-contents"], [79, "module-contents"], [80, "module-contents"], [81, "module-contents"], [82, "module-contents"], [83, "module-contents"], [84, "module-contents"], [85, "module-contents"], [87, "module-contents"], [88, "module-contents"], [89, "module-contents"], [90, "module-contents"], [91, "module-contents"], [92, "module-contents"], [93, "module-contents"], [95, "module-contents"], [96, "module-contents"], [97, "module-contents"], [98, "module-contents"], [99, "module-contents"], [101, "module-contents"], [102, "module-contents"], [103, "module-contents"], [104, "module-contents"], [106, "module-contents"], [107, "module-contents"], [108, "module-contents"], [109, "module-contents"], [112, "module-contents"], [114, "module-contents"], [115, "module-contents"], [117, "module-contents"], [118, "module-contents"], [119, "module-contents"], [120, "module-contents"], [121, "module-contents"], [122, "module-contents"], [123, "module-contents"], [124, "module-contents"], [125, "module-contents"], [126, "module-contents"], [127, "module-contents"], [128, "module-contents"], [130, "module-contents"], [131, "module-contents"], [132, "module-contents"], [133, "module-contents"], [134, "module-contents"], [135, "module-contents"], [136, "module-contents"], [137, "module-contents"], [138, "module-contents"], [139, "module-contents"], [140, "module-contents"], [141, "module-contents"], [142, "module-contents"], [143, "module-contents"], [145, "module-contents"], [146, "module-contents"], [147, "module-contents"], [148, "module-contents"], [149, "module-contents"], [150, "module-contents"], [152, "module-contents"], [154, "module-contents"], [155, "module-contents"], [156, "module-contents"], [157, "module-contents"], [158, "module-contents"], [159, "module-contents"], [160, "module-contents"], [162, "module-contents"], [163, "module-contents"], [164, "module-contents"], [165, "module-contents"], [166, "module-contents"], [169, "module-contents"], [171, "module-contents"], [173, "module-contents"], [174, "module-contents"], [175, "module-contents"], [176, "module-contents"], [177, "module-contents"], [178, "module-contents"], [179, "module-contents"], [180, "module-contents"], [181, "module-contents"], [183, "module-contents"], [184, "module-contents"], [187, "module-contents"], [188, "module-contents"], [189, "module-contents"], [190, "module-contents"], [191, "module-contents"], [192, "module-contents"], [194, "module-contents"], [195, "module-contents"], [196, "module-contents"], [197, "module-contents"], [198, "module-contents"], [199, "module-contents"], [200, "module-contents"], [201, "module-contents"], [202, "module-contents"], [203, "module-contents"], [204, "module-contents"], [206, "module-contents"], [207, "module-contents"], [208, "module-contents"], [211, "module-contents"], [212, "module-contents"], [214, "module-contents"], [215, "module-contents"], [216, "module-contents"], [217, "module-contents"], [218, "module-contents"], [219, "module-contents"], [221, "module-contents"], [222, "module-contents"], [223, "module-contents"], [224, "module-contents"], [225, "module-contents"], [226, "module-contents"], [228, "module-contents"], [231, "module-contents"], [232, "module-contents"], [233, "module-contents"], [235, "module-contents"], [236, "module-contents"], [238, "module-contents"], [239, "module-contents"], [240, "module-contents"], [241, "module-contents"], [242, "module-contents"], [243, "module-contents"], [244, "module-contents"], [245, "module-contents"], [246, "module-contents"], [247, "module-contents"], [248, "module-contents"], [250, "module-contents"], [251, "module-contents"], [252, "module-contents"], [255, "module-contents"], [257, "module-contents"], [258, "module-contents"], [259, "module-contents"], [261, "module-contents"], [262, "module-contents"], [263, "module-contents"], [264, "module-contents"], [266, "module-contents"], [267, "module-contents"], [269, "module-contents"], [270, "module-contents"], [271, "module-contents"], [273, "module-contents"], [274, "module-contents"], [275, "module-contents"], [276, "module-contents"], [277, "module-contents"], [279, "module-contents"], [280, "module-contents"], [281, "module-contents"], [282, "module-contents"], [283, "module-contents"], [285, "module-contents"], [286, "module-contents"], [287, "module-contents"], [288, "module-contents"], [291, "module-contents"], [292, "module-contents"], [293, "module-contents"], [296, "module-contents"], [297, "module-contents"], [298, "module-contents"], [299, "module-contents"], [300, "module-contents"], [301, "module-contents"], [302, "module-contents"], [303, "module-contents"], [304, "module-contents"], [305, "module-contents"], [306, "module-contents"], [308, "module-contents"], [309, "module-contents"], [310, "module-contents"], [311, "module-contents"], [314, "module-contents"], [315, "module-contents"], [316, "module-contents"], [317, "module-contents"], [319, "module-contents"], [320, "module-contents"], [322, "module-contents"], [323, "module-contents"], [324, "module-contents"], [326, "module-contents"], [327, "module-contents"], [328, "module-contents"], [330, "module-contents"], [331, "module-contents"], [332, "module-contents"], [333, "module-contents"], [334, "module-contents"], [335, "module-contents"], [336, "module-contents"], [337, "module-contents"], [339, "module-contents"], [341, "module-contents"], [343, "module-contents"], [344, "module-contents"], [345, "module-contents"], [346, "module-contents"], [348, "module-contents"], [349, "module-contents"], [351, "module-contents"], [353, "module-contents"], [354, "module-contents"], [355, "module-contents"], [356, "module-contents"], [358, "module-contents"], [359, "module-contents"], [360, "module-contents"], [361, "module-contents"], [362, "module-contents"], [363, "module-contents"], [364, "module-contents"], [365, "module-contents"], [366, "module-contents"], [367, "module-contents"], [369, "module-contents"], [370, "module-contents"], [371, "module-contents"], [372, "module-contents"], [375, "module-contents"], [376, "module-contents"], [377, "module-contents"], [378, "module-contents"], [379, "module-contents"], [381, "module-contents"], [382, "module-contents"], [384, "module-contents"], [386, "module-contents"], [387, "module-contents"], [388, "module-contents"], [389, "module-contents"], [390, "module-contents"], [391, "module-contents"], [392, "module-contents"], [393, "module-contents"]], "Classes": [[1, "classes"], [3, "classes"], [11, "classes"], [13, "classes"], [14, "classes"], [15, "classes"], [16, "classes"], [18, "classes"], [19, "classes"], [20, "classes"], [21, "classes"], [22, "classes"], [23, "classes"], [24, "classes"], [25, "classes"], [26, "classes"], [27, "classes"], [28, "classes"], [30, "classes"], [31, "classes"], [32, "classes"], [33, "classes"], [34, "classes"], [35, "classes"], [36, "classes"], [37, "classes"], [38, "classes"], [39, "classes"], [40, "classes"], [41, "classes"], [42, "classes"], [43, "classes"], [44, "classes"], [45, "classes"], [46, "classes"], [47, "classes"], [48, "classes"], [49, "classes"], [51, "classes"], [52, "classes"], [53, "classes"], [54, "classes"], [55, "classes"], [56, "classes"], [57, "classes"], [58, "classes"], [59, "classes"], [60, "classes"], [61, "classes"], [62, "classes"], [63, "classes"], [64, "classes"], [65, "classes"], [66, "classes"], [67, "classes"], [68, "classes"], [69, "classes"], [70, "classes"], [71, "classes"], [72, "classes"], [73, "classes"], [74, "classes"], [76, "classes"], [77, "classes"], [78, "classes"], [79, "classes"], [80, "classes"], [81, "classes"], [82, "classes"], [83, "classes"], [84, "classes"], [85, "classes"], [87, "classes"], [88, "classes"], [89, "classes"], [90, "classes"], [91, "classes"], [92, "classes"], [93, "classes"], [95, "classes"], [96, "classes"], [97, "classes"], [98, "classes"], [99, "classes"], [101, "classes"], [102, "classes"], [103, "classes"], [104, "classes"], [106, "classes"], [107, "classes"], [108, "classes"], [109, "classes"], [112, "classes"], [114, "classes"], [118, "classes"], [119, "classes"], [120, "classes"], [121, "classes"], [122, "classes"], [123, "classes"], [124, "classes"], [125, "classes"], [126, "classes"], [127, "classes"], [128, "classes"], [130, "classes"], [131, "classes"], [132, "classes"], [133, "classes"], [134, "classes"], [135, "classes"], [136, "classes"], [137, "classes"], [138, "classes"], [139, "classes"], [140, "classes"], [141, "classes"], [142, "classes"], [143, "classes"], [145, "classes"], [146, "classes"], [148, "classes"], [149, "classes"], [150, "classes"], [154, "classes"], [155, "classes"], [159, "classes"], [160, "classes"], [161, "classes"], [162, "classes"], [163, "classes"], [165, "classes"], [166, "classes"], [169, "classes"], [173, "classes"], [174, "classes"], [175, "classes"], [176, "classes"], [177, "classes"], [178, "classes"], [180, "classes"], [181, "classes"], [183, "classes"], [184, "classes"], [187, "classes"], [188, "classes"], [189, "classes"], [190, "classes"], [191, "classes"], [192, "classes"], [193, "classes"], [194, "classes"], [195, "classes"], [196, "classes"], [197, "classes"], [198, "classes"], [199, "classes"], [200, "classes"], [201, "classes"], [202, "classes"], [203, "classes"], [204, "classes"], [205, "classes"], [206, "classes"], [207, "classes"], [208, "classes"], [209, "classes"], [210, "classes"], [211, "classes"], [212, "classes"], [213, "classes"], [214, "classes"], [215, "classes"], [216, "classes"], [217, "classes"], [218, "classes"], [219, "classes"], [220, "classes"], [221, "classes"], [222, "classes"], [223, "classes"], [224, "classes"], [226, "classes"], [231, "classes"], [232, "classes"], [233, "classes"], [235, "classes"], [236, "classes"], [238, "classes"], [239, "classes"], [240, "classes"], [241, "classes"], [242, "classes"], [243, "classes"], [244, "classes"], [245, "classes"], [246, "classes"], [247, "classes"], [248, "classes"], [249, "classes"], [250, "classes"], [251, "classes"], [252, "classes"], [253, "classes"], [254, "classes"], [255, "classes"], [256, "classes"], [257, "classes"], [258, "classes"], [259, "classes"], [264, "classes"], [265, "classes"], [266, "classes"], [269, "classes"], [272, "classes"], [273, "classes"], [274, "classes"], [275, "classes"], [276, "classes"], [277, "classes"], [279, "classes"], [281, "classes"], [282, "classes"], [283, "classes"], [285, "classes"], [286, "classes"], [287, "classes"], [288, "classes"], [289, "classes"], [290, "classes"], [291, "classes"], [292, "classes"], [293, "classes"], [296, "classes"], [298, "classes"], [299, "classes"], [300, "classes"], [301, "classes"], [302, "classes"], [303, "classes"], [304, "classes"], [305, "classes"], [306, "classes"], [308, "classes"], [309, "classes"], [310, "classes"], [311, "classes"], [314, "classes"], [315, "classes"], [316, "classes"], [317, "classes"], [319, "classes"], [322, "classes"], [325, "classes"], [326, "classes"], [328, "classes"], [329, "classes"], [330, "classes"], [331, "classes"], [332, "classes"], [333, "classes"], [334, "classes"], [335, "classes"], [336, "classes"], [337, "classes"], [339, "classes"], [341, "classes"], [343, "classes"], [344, "classes"], [345, "classes"], [346, "classes"], [348, "classes"], [349, "classes"], [351, "classes"], [353, "classes"], [355, "classes"], [356, "classes"], [358, "classes"], [361, "classes"], [362, "classes"], [363, "classes"], [364, "classes"], [365, "classes"], [366, "classes"], [367, "classes"], [369, "classes"], [370, "classes"], [371, "classes"], [372, "classes"], [375, "classes"], [376, "classes"], [377, "classes"], [378, "classes"], [379, "classes"], [381, "classes"], [382, "classes"], [385, "classes"], [386, "classes"], [387, "classes"], [388, "classes"], [390, "classes"], [392, "classes"], [393, "classes"]], "Functions": [[1, "functions"], [13, "functions"], [16, "functions"], [34, "functions"], [42, "functions"], [43, "functions"], [44, "functions"], [66, "functions"], [67, "functions"], [69, "functions"], [103, "functions"], [104, "functions"], [115, "functions"], [117, "functions"], [147, "functions"], [148, "functions"], [149, "functions"], [150, "functions"], [152, "functions"], [155, "functions"], [156, "functions"], [157, "functions"], [158, "functions"], [159, "functions"], [161, "functions"], [164, "functions"], [166, "functions"], [169, "functions"], [171, "functions"], [173, "functions"], [175, "functions"], [176, "functions"], [177, "functions"], [178, "functions"], [179, "functions"], [181, "functions"], [190, "functions"], [191, "functions"], [199, "functions"], [201, "functions"], [205, "functions"], [208, "functions"], [209, "functions"], [210, "functions"], [213, "functions"], [215, "functions"], [216, "functions"], [217, "functions"], [218, "functions"], [220, "functions"], [222, "functions"], [223, "functions"], [225, "functions"], [228, "functions"], [235, "functions"], [243, "functions"], [245, "functions"], [249, "functions"], [252, "functions"], [253, "functions"], [254, "functions"], [256, "functions"], [257, "functions"], [258, "functions"], [261, "functions"], [262, "functions"], [263, "functions"], [266, "functions"], [267, "functions"], [269, "functions"], [270, "functions"], [271, "functions"], [272, "functions"], [273, "functions"], [280, "functions"], [287, "functions"], [291, "functions"], [296, "functions"], [297, "functions"], [298, "functions"], [300, "functions"], [305, "functions"], [311, "functions"], [315, "functions"], [317, "functions"], [319, "functions"], [320, "functions"], [322, "functions"], [323, "functions"], [324, "functions"], [325, "functions"], [326, "functions"], [327, "functions"], [331, "functions"], [335, "functions"], [337, "functions"], [354, "functions"], [359, "functions"], [360, "functions"], [364, "functions"], [372, "functions"], [376, "functions"], [378, "functions"], [379, "functions"], [381, "functions"], [384, "functions"], [385, "functions"], [387, "functions"], [388, "functions"], [389, "functions"], [391, "functions"], [392, "functions"]], "neural_compressor.adaptor": [[2, "module-neural_compressor.adaptor"]], "Subpackages": [[2, "subpackages"], [17, "subpackages"], [86, "subpackages"], [110, "subpackages"], [111, "subpackages"], [113, "subpackages"], [168, "subpackages"], [170, "subpackages"], [185, "subpackages"], [210, "subpackages"], [229, "subpackages"], [254, "subpackages"], [265, "subpackages"], [289, "subpackages"], [307, "subpackages"], [318, "subpackages"], [368, "subpackages"]], "Submodules": [[2, "submodules"], [12, "submodules"], [17, "submodules"], [29, "submodules"], [50, "submodules"], [75, "submodules"], [86, "submodules"], [94, "submodules"], [100, "submodules"], [105, "submodules"], [110, "submodules"], [111, "submodules"], [113, "submodules"], [116, "submodules"], [129, "submodules"], [144, "submodules"], [151, "submodules"], [161, "submodules"], [167, "submodules"], [168, "submodules"], [170, "submodules"], [172, "submodules"], [182, "submodules"], [186, "submodules"], [193, "submodules"], [205, "submodules"], [209, "submodules"], [213, "submodules"], [220, "submodules"], [227, "submodules"], [230, "submodules"], [237, "submodules"], [249, "submodules"], [253, "submodules"], [256, "submodules"], [260, "submodules"], [265, "submodules"], [272, "submodules"], [278, "submodules"], [284, "submodules"], [290, "submodules"], [294, "submodules"], [307, "submodules"], [313, "submodules"], [318, "submodules"], [325, "submodules"], [329, "submodules"], [340, "submodules"], [342, "submodules"], [347, "submodules"], [350, "submodules"], [352, "submodules"], [357, "submodules"], [368, "submodules"], [374, "submodules"], [380, "submodules"], [385, "submodules"]], "Package Contents": [[2, "package-contents"], [29, "package-contents"], [161, "package-contents"], [193, "package-contents"], [205, "package-contents"], [209, "package-contents"], [210, "package-contents"], [213, "package-contents"], [220, "package-contents"], [237, "package-contents"], [249, "package-contents"], [253, "package-contents"], [254, "package-contents"], [256, "package-contents"], [265, "package-contents"], [272, "package-contents"], [284, "package-contents"], [289, "package-contents"], [290, "package-contents"], [307, "package-contents"], [325, "package-contents"], [329, "package-contents"], [368, "package-contents"], [385, "package-contents"]], "neural_compressor.adaptor.keras": [[3, "module-neural_compressor.adaptor.keras"]], "neural_compressor.adaptor.keras_utils.conv2d": [[4, "module-neural_compressor.adaptor.keras_utils.conv2d"]], "neural_compressor.adaptor.keras_utils.dense": [[5, "module-neural_compressor.adaptor.keras_utils.dense"]], "neural_compressor.adaptor.keras_utils.depthwise_conv2d": [[6, "module-neural_compressor.adaptor.keras_utils.depthwise_conv2d"]], "neural_compressor.adaptor.keras_utils": [[7, "module-neural_compressor.adaptor.keras_utils"]], "neural_compressor.adaptor.keras_utils.pool2d": [[8, "module-neural_compressor.adaptor.keras_utils.pool2d"]], "neural_compressor.adaptor.keras_utils.quantizer": [[9, "module-neural_compressor.adaptor.keras_utils.quantizer"]], "neural_compressor.adaptor.keras_utils.separable_conv2d": [[10, "module-neural_compressor.adaptor.keras_utils.separable_conv2d"]], "neural_compressor.adaptor.mxnet": [[11, "module-neural_compressor.adaptor.mxnet"]], "neural_compressor.adaptor.mxnet_utils": [[12, "module-neural_compressor.adaptor.mxnet_utils"]], "neural_compressor.adaptor.mxnet_utils.util": [[13, "module-neural_compressor.adaptor.mxnet_utils.util"]], "neural_compressor.adaptor.onnxrt": [[14, "module-neural_compressor.adaptor.onnxrt"]], "neural_compressor.adaptor.ox_utils.calibration": [[15, "module-neural_compressor.adaptor.ox_utils.calibration"]], "neural_compressor.adaptor.ox_utils.calibrator": [[16, "module-neural_compressor.adaptor.ox_utils.calibrator"]], "neural_compressor.adaptor.ox_utils": [[17, "module-neural_compressor.adaptor.ox_utils"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[18, "module-neural_compressor.adaptor.ox_utils.operators.activation"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[19, "module-neural_compressor.adaptor.ox_utils.operators.argmax"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[20, "module-neural_compressor.adaptor.ox_utils.operators.attention"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[21, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[22, "module-neural_compressor.adaptor.ox_utils.operators.concat"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[23, "module-neural_compressor.adaptor.ox_utils.operators.conv"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[24, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[25, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[26, "module-neural_compressor.adaptor.ox_utils.operators.gather"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[27, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[28, "module-neural_compressor.adaptor.ox_utils.operators.gemm"]], "neural_compressor.adaptor.ox_utils.operators": [[29, "module-neural_compressor.adaptor.ox_utils.operators"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[30, "module-neural_compressor.adaptor.ox_utils.operators.lstm"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[31, "module-neural_compressor.adaptor.ox_utils.operators.matmul"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[32, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"]], "neural_compressor.adaptor.ox_utils.operators.norm": [[33, "module-neural_compressor.adaptor.ox_utils.operators.norm"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[34, "module-neural_compressor.adaptor.ox_utils.operators.ops"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[35, "module-neural_compressor.adaptor.ox_utils.operators.pad"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[36, "module-neural_compressor.adaptor.ox_utils.operators.pooling"]], "neural_compressor.adaptor.ox_utils.operators.reduce": [[37, "module-neural_compressor.adaptor.ox_utils.operators.reduce"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[38, "module-neural_compressor.adaptor.ox_utils.operators.resize"]], "neural_compressor.adaptor.ox_utils.operators.split": [[39, "module-neural_compressor.adaptor.ox_utils.operators.split"]], "neural_compressor.adaptor.ox_utils.operators.unary_op": [[40, "module-neural_compressor.adaptor.ox_utils.operators.unary_op"]], "neural_compressor.adaptor.ox_utils.quantizer": [[41, "module-neural_compressor.adaptor.ox_utils.quantizer"]], "neural_compressor.adaptor.ox_utils.smooth_quant": [[42, "module-neural_compressor.adaptor.ox_utils.smooth_quant"]], "neural_compressor.adaptor.ox_utils.util": [[43, "module-neural_compressor.adaptor.ox_utils.util"]], "neural_compressor.adaptor.pytorch": [[44, "module-neural_compressor.adaptor.pytorch"]], "neural_compressor.adaptor.query": [[45, "module-neural_compressor.adaptor.query"]], "neural_compressor.adaptor.tensorflow": [[46, "module-neural_compressor.adaptor.tensorflow"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[47, "module-neural_compressor.adaptor.tf_utils.graph_converter"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[48, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[49, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "neural_compressor.adaptor.tf_utils.graph_util": [[109, "module-neural_compressor.adaptor.tf_utils.graph_util"]], "neural_compressor.adaptor.tf_utils": [[110, "module-neural_compressor.adaptor.tf_utils"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[111, "module-neural_compressor.adaptor.tf_utils.quantize_graph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[112, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[135, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[137, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[138, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"]], "neural_compressor.adaptor.tf_utils.smooth_quant_calibration": [[139, "module-neural_compressor.adaptor.tf_utils.smooth_quant_calibration"]], "neural_compressor.adaptor.tf_utils.smooth_quant_scaler": [[140, "module-neural_compressor.adaptor.tf_utils.smooth_quant_scaler"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[141, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[142, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[143, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[144, "module-neural_compressor.adaptor.tf_utils.transform_graph"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[145, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[146, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"]], "neural_compressor.adaptor.tf_utils.util": [[147, "module-neural_compressor.adaptor.tf_utils.util"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[148, "module-neural_compressor.adaptor.torch_utils.bf16_convert"]], "neural_compressor.adaptor.torch_utils.gptq": [[149, "module-neural_compressor.adaptor.torch_utils.gptq"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[150, "module-neural_compressor.adaptor.torch_utils.hawq_metric"]], "neural_compressor.adaptor.torch_utils": [[151, "module-neural_compressor.adaptor.torch_utils"]], "neural_compressor.adaptor.torch_utils.mixed_precision": [[152, "module-neural_compressor.adaptor.torch_utils.mixed_precision"]], "neural_compressor.adaptor.torch_utils.model_wrapper": [[153, "module-neural_compressor.adaptor.torch_utils.model_wrapper"]], "neural_compressor.adaptor.torch_utils.pattern_detector": [[154, "module-neural_compressor.adaptor.torch_utils.pattern_detector"]], "neural_compressor.adaptor.torch_utils.smooth_quant": [[155, "module-neural_compressor.adaptor.torch_utils.smooth_quant"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[156, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"]], "neural_compressor.adaptor.torch_utils.util": [[157, "module-neural_compressor.adaptor.torch_utils.util"]], "}": [[157, "id3"]], "neural_compressor.adaptor.torch_utils.weight_only": [[158, "module-neural_compressor.adaptor.torch_utils.weight_only"]], "neural_compressor.algorithm.algorithm": [[159, "module-neural_compressor.algorithm.algorithm"]], "neural_compressor.algorithm.fast_bias_correction": [[160, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm": [[161, "module-neural_compressor.algorithm"]], "neural_compressor.algorithm.smooth_quant": [[162, "module-neural_compressor.algorithm.smooth_quant"]], "neural_compressor.algorithm.weight_correction": [[163, "module-neural_compressor.algorithm.weight_correction"]], "neural_compressor.benchmark": [[164, "module-neural_compressor.benchmark"]], "neural_compressor.compression.callbacks": [[165, "module-neural_compressor.compression.callbacks"]], "neural_compressor.compression.distillation.criterions": [[166, "module-neural_compressor.compression.distillation.criterions"]], "neural_compressor.compression.distillation": [[167, "module-neural_compressor.compression.distillation"]], "neural_compressor.compression": [[168, "module-neural_compressor.compression"]], "neural_compressor.compression.pruner.criteria": [[169, "module-neural_compressor.compression.pruner.criteria"]], "neural_compressor.compression.pruner": [[170, "module-neural_compressor.compression.pruner"]], "neural_compressor.compression.pruner.model_slim.auto_slim": [[171, "module-neural_compressor.compression.pruner.model_slim.auto_slim"]], "neural_compressor.compression.pruner.model_slim": [[172, "module-neural_compressor.compression.pruner.model_slim"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer": [[173, "module-neural_compressor.compression.pruner.model_slim.pattern_analyzer"]], "neural_compressor.compression.pruner.model_slim.weight_slim": [[174, "module-neural_compressor.compression.pruner.model_slim.weight_slim"]], "neural_compressor.compression.pruner.patterns": [[175, "module-neural_compressor.compression.pruner.patterns"]], "neural_compressor.compression.pruner.pruners": [[176, "module-neural_compressor.compression.pruner.pruners"]], "neural_compressor.compression.pruner.regs": [[177, "module-neural_compressor.compression.pruner.regs"]], "neural_compressor.compression.pruner.schedulers": [[178, "module-neural_compressor.compression.pruner.schedulers"]], "neural_compressor.compression.pruner.utils": [[179, "module-neural_compressor.compression.pruner.utils"]], "neural_compressor.conf.config": [[180, "module-neural_compressor.conf.config"]], "neural_compressor.conf.dotdict": [[181, "module-neural_compressor.conf.dotdict"]], "neural_compressor.conf": [[182, "module-neural_compressor.conf"]], "neural_compressor.conf.pythonic_config": [[183, "module-neural_compressor.conf.pythonic_config"]], "neural_compressor.config": [[184, "module-neural_compressor.config"]], "neural_compressor.contrib": [[185, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[186, "module-neural_compressor.contrib.strategy"]], "neural_compressor.contrib.strategy.sigopt": [[187, "module-neural_compressor.contrib.strategy.sigopt"]], "neural_compressor.contrib.strategy.tpe": [[188, "module-neural_compressor.contrib.strategy.tpe"]], "neural_compressor.data.dataloaders.base_dataloader": [[189, "module-neural_compressor.data.dataloaders.base_dataloader"]], "neural_compressor.data.dataloaders.dataloader": [[190, "module-neural_compressor.data.dataloaders.dataloader"]], "neural_compressor.data.dataloaders.default_dataloader": [[191, "module-neural_compressor.data.dataloaders.default_dataloader"]], "neural_compressor.data.dataloaders.fetcher": [[192, "module-neural_compressor.data.dataloaders.fetcher"]], "neural_compressor.data.dataloaders": [[193, "module-neural_compressor.data.dataloaders"]], "Attributes": [[193, "attributes"], [201, "attributes"], [210, "attributes"], [245, "attributes"], [254, "attributes"], [265, "attributes"], [289, "attributes"], [329, "attributes"], [379, "attributes"], [385, "attributes"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[194, "module-neural_compressor.data.dataloaders.mxnet_dataloader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[195, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[196, "module-neural_compressor.data.dataloaders.pytorch_dataloader"]], "neural_compressor.data.dataloaders.sampler": [[197, "module-neural_compressor.data.dataloaders.sampler"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[198, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"]], "neural_compressor.data.datasets.bert_dataset": [[199, "module-neural_compressor.data.datasets.bert_dataset"]], "neural_compressor.data.datasets.coco_dataset": [[200, "module-neural_compressor.data.datasets.coco_dataset"]], "neural_compressor.data.datasets.dataset": [[201, "module-neural_compressor.data.datasets.dataset"]], "neural_compressor.data.datasets.dummy_dataset": [[202, "module-neural_compressor.data.datasets.dummy_dataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[203, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "neural_compressor.data.datasets.imagenet_dataset": [[204, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[205, "module-neural_compressor.data.datasets"]], "neural_compressor.data.datasets.style_transfer_dataset": [[206, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "neural_compressor.data.filters.coco_filter": [[207, "module-neural_compressor.data.filters.coco_filter"]], "neural_compressor.data.filters.filter": [[208, "module-neural_compressor.data.filters.filter"]], "neural_compressor.data.filters": [[209, "module-neural_compressor.data.filters"]], "neural_compressor.data": [[210, "module-neural_compressor.data"]], "neural_compressor.data.transforms.coco_transform": [[211, "module-neural_compressor.data.transforms.coco_transform"]], "neural_compressor.data.transforms.imagenet_transform": [[212, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[213, "module-neural_compressor.data.transforms"]], "neural_compressor.data.transforms.postprocess": [[214, "module-neural_compressor.data.transforms.postprocess"]], "neural_compressor.data.transforms.tokenization": [[215, "module-neural_compressor.data.transforms.tokenization"]], "neural_compressor.data.transforms.transform": [[216, "module-neural_compressor.data.transforms.transform"]], "neural_compressor.experimental.benchmark": [[217, "module-neural_compressor.experimental.benchmark"]], "neural_compressor.experimental.common.criterion": [[218, "module-neural_compressor.experimental.common.criterion"]], "neural_compressor.experimental.common.dataloader": [[219, "module-neural_compressor.experimental.common.dataloader"]], "neural_compressor.experimental.common": [[220, "module-neural_compressor.experimental.common"]], "neural_compressor.experimental.common.metric": [[221, "module-neural_compressor.experimental.common.metric"]], "neural_compressor.experimental.common.model": [[222, "module-neural_compressor.experimental.common.model"]], "neural_compressor.experimental.common.optimizer": [[223, "module-neural_compressor.experimental.common.optimizer"]], "neural_compressor.experimental.common.postprocess": [[224, "module-neural_compressor.experimental.common.postprocess"]], "neural_compressor.experimental.common.torch_utils": [[225, "module-neural_compressor.experimental.common.torch_utils"]], "neural_compressor.experimental.component": [[226, "module-neural_compressor.experimental.component"]], "neural_compressor.experimental.compression": [[227, "module-neural_compressor.experimental.compression"]], "neural_compressor.experimental.compression.pruning": [[228, "module-neural_compressor.experimental.compression.pruning"]], "neural_compressor.experimental.contrib": [[229, "module-neural_compressor.experimental.contrib"]], "neural_compressor.experimental.contrib.strategy": [[230, "module-neural_compressor.experimental.contrib.strategy"]], "neural_compressor.experimental.contrib.strategy.sigopt": [[231, "module-neural_compressor.experimental.contrib.strategy.sigopt"]], "neural_compressor.experimental.contrib.strategy.tpe": [[232, "module-neural_compressor.experimental.contrib.strategy.tpe"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[233, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[234, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[235, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[236, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[237, "module-neural_compressor.experimental.data.dataloaders"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[238, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[239, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[240, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[241, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[242, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[243, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[244, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "neural_compressor.experimental.data.datasets.dataset": [[245, "module-neural_compressor.experimental.data.datasets.dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[246, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[247, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[248, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "neural_compressor.experimental.data.datasets": [[249, "module-neural_compressor.experimental.data.datasets"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[250, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "neural_compressor.experimental.data.filters.coco_filter": [[251, "module-neural_compressor.experimental.data.filters.coco_filter"]], "neural_compressor.experimental.data.filters.filter": [[252, "module-neural_compressor.experimental.data.filters.filter"]], "neural_compressor.experimental.data.filters": [[253, "module-neural_compressor.experimental.data.filters"]], "neural_compressor.experimental.data": [[254, "module-neural_compressor.experimental.data"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[255, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "neural_compressor.experimental.data.transforms": [[256, "module-neural_compressor.experimental.data.transforms"]], "neural_compressor.experimental.data.transforms.tokenization": [[257, "module-neural_compressor.experimental.data.transforms.tokenization"]], "neural_compressor.experimental.data.transforms.transform": [[258, "module-neural_compressor.experimental.data.transforms.transform"]], "neural_compressor.experimental.distillation": [[259, "module-neural_compressor.experimental.distillation"]], "neural_compressor.experimental.export": [[260, "module-neural_compressor.experimental.export"]], "neural_compressor.experimental.export.qlinear2qdq": [[261, "module-neural_compressor.experimental.export.qlinear2qdq"]], "neural_compressor.experimental.export.tf2onnx": [[262, "module-neural_compressor.experimental.export.tf2onnx"]], "neural_compressor.experimental.export.torch2onnx": [[263, "module-neural_compressor.experimental.export.torch2onnx"]], "neural_compressor.experimental.graph_optimization": [[264, "module-neural_compressor.experimental.graph_optimization"]], "neural_compressor.experimental": [[265, "module-neural_compressor.experimental"]], "neural_compressor.experimental.metric.bleu": [[266, "module-neural_compressor.experimental.metric.bleu"]], "neural_compressor.experimental.metric.bleu_util": [[267, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[268, "module-neural_compressor.experimental.metric.coco_label_map"]], "neural_compressor.experimental.metric.coco_tools": [[269, "module-neural_compressor.experimental.metric.coco_tools"]], "neural_compressor.experimental.metric.evaluate_squad": [[270, "module-neural_compressor.experimental.metric.evaluate_squad"]], "neural_compressor.experimental.metric.f1": [[271, "module-neural_compressor.experimental.metric.f1"]], "neural_compressor.experimental.metric": [[272, "module-neural_compressor.experimental.metric"]], "neural_compressor.experimental.metric.metric": [[273, "module-neural_compressor.experimental.metric.metric"]], "neural_compressor.experimental.mixed_precision": [[274, "module-neural_compressor.experimental.mixed_precision"]], "neural_compressor.experimental.model_conversion": [[275, "module-neural_compressor.experimental.model_conversion"]], "neural_compressor.experimental.nas.basic_nas": [[276, "module-neural_compressor.experimental.nas.basic_nas"]], "neural_compressor.experimental.nas.dynas": [[277, "module-neural_compressor.experimental.nas.dynas"]], "neural_compressor.experimental.nas": [[278, "module-neural_compressor.experimental.nas"]], "neural_compressor.experimental.nas.nas": [[279, "module-neural_compressor.experimental.nas.nas"]], "neural_compressor.experimental.nas.nas_utils": [[280, "module-neural_compressor.experimental.nas.nas_utils"]], "neural_compressor.experimental.nas.search_algorithms": [[281, "module-neural_compressor.experimental.nas.search_algorithms"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[282, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[283, "module-neural_compressor.experimental.pruner_legacy.group_lasso"]], "neural_compressor.experimental.pruner_legacy": [[284, "module-neural_compressor.experimental.pruner_legacy"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[285, "module-neural_compressor.experimental.pruner_legacy.magnitude"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[286, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"]], "neural_compressor.experimental.pruner_legacy.pruner": [[287, "module-neural_compressor.experimental.pruner_legacy.pruner"]], "neural_compressor.experimental.pruning": [[288, "module-neural_compressor.experimental.pruning"]], "neural_compressor.experimental.pruning_recipes": [[289, "module-neural_compressor.experimental.pruning_recipes"]], "neural_compressor.experimental.pruning_recipes.patterns": [[290, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[291, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[292, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "neural_compressor.experimental.pruning_v2": [[293, "module-neural_compressor.experimental.pruning_v2"]], "neural_compressor.experimental.pytorch_pruner": [[294, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[295, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[296, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[297, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[298, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[299, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[300, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "neural_compressor.experimental.quantization": [[301, "module-neural_compressor.experimental.quantization"]], "neural_compressor.experimental.scheduler": [[302, "module-neural_compressor.experimental.scheduler"]], "neural_compressor.experimental.strategy.auto_mixed_precision": [[303, "module-neural_compressor.experimental.strategy.auto_mixed_precision"]], "neural_compressor.experimental.strategy.basic": [[304, "module-neural_compressor.experimental.strategy.basic"]], "neural_compressor.experimental.strategy.bayesian": [[305, "module-neural_compressor.experimental.strategy.bayesian"]], "neural_compressor.experimental.strategy.exhaustive": [[306, "module-neural_compressor.experimental.strategy.exhaustive"]], "neural_compressor.experimental.strategy": [[307, "module-neural_compressor.experimental.strategy"]], "neural_compressor.experimental.strategy.mse": [[308, "module-neural_compressor.experimental.strategy.mse"]], "neural_compressor.experimental.strategy.mse_v2": [[309, "module-neural_compressor.experimental.strategy.mse_v2"]], "neural_compressor.experimental.strategy.random": [[310, "module-neural_compressor.experimental.strategy.random"]], "neural_compressor.experimental.strategy.strategy": [[311, "module-neural_compressor.experimental.strategy.strategy"]], "neural_compressor.experimental.strategy.utils.constant": [[312, "module-neural_compressor.experimental.strategy.utils.constant"]], "neural_compressor.experimental.strategy.utils": [[313, "module-neural_compressor.experimental.strategy.utils"]], "neural_compressor.experimental.strategy.utils.tuning_sampler": [[314, "module-neural_compressor.experimental.strategy.utils.tuning_sampler"]], "neural_compressor.experimental.strategy.utils.tuning_space": [[315, "module-neural_compressor.experimental.strategy.utils.tuning_space"]], "neural_compressor.experimental.strategy.utils.tuning_structs": [[316, "module-neural_compressor.experimental.strategy.utils.tuning_structs"]], "neural_compressor.experimental.strategy.utils.utility": [[317, "module-neural_compressor.experimental.strategy.utils.utility"]], "neural_compressor": [[318, "module-neural_compressor"]], "neural_compressor.metric.bleu": [[319, "module-neural_compressor.metric.bleu"]], "neural_compressor.metric.bleu_util": [[320, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[321, "module-neural_compressor.metric.coco_label_map"]], "neural_compressor.metric.coco_tools": [[322, "module-neural_compressor.metric.coco_tools"]], "neural_compressor.metric.evaluate_squad": [[323, "module-neural_compressor.metric.evaluate_squad"]], "neural_compressor.metric.f1": [[324, "module-neural_compressor.metric.f1"]], "neural_compressor.metric": [[325, "module-neural_compressor.metric"]], "neural_compressor.metric.metric": [[326, "module-neural_compressor.metric.metric"]], "neural_compressor.mix_precision": [[327, "module-neural_compressor.mix_precision"]], "neural_compressor.model.base_model": [[328, "module-neural_compressor.model.base_model"]], "neural_compressor.model": [[329, "module-neural_compressor.model"]], "neural_compressor.model.keras_model": [[330, "module-neural_compressor.model.keras_model"]], "neural_compressor.model.model": [[331, "module-neural_compressor.model.model"]], "neural_compressor.model.mxnet_model": [[332, "module-neural_compressor.model.mxnet_model"]], "neural_compressor.model.nets_factory": [[333, "module-neural_compressor.model.nets_factory"]], "neural_compressor.model.onnx_model": [[334, "module-neural_compressor.model.onnx_model"]], "neural_compressor.model.tensorflow_model": [[335, "module-neural_compressor.model.tensorflow_model"]], "neural_compressor.model.torch_model": [[336, "module-neural_compressor.model.torch_model"]], "neural_compressor.objective": [[337, "module-neural_compressor.objective"]], "neural_compressor.profiling": [[338, "module-neural_compressor.profiling"]], "neural_compressor.profiling.parser.factory": [[339, "module-neural_compressor.profiling.parser.factory"]], "neural_compressor.profiling.parser": [[340, "module-neural_compressor.profiling.parser"]], "neural_compressor.profiling.parser.onnx_parser.factory": [[341, "module-neural_compressor.profiling.parser.onnx_parser.factory"]], "neural_compressor.profiling.parser.onnx_parser": [[342, "module-neural_compressor.profiling.parser.onnx_parser"]], "neural_compressor.profiling.parser.onnx_parser.parser": [[343, "module-neural_compressor.profiling.parser.onnx_parser.parser"]], "neural_compressor.profiling.parser.parser": [[344, "module-neural_compressor.profiling.parser.parser"]], "neural_compressor.profiling.parser.result": [[345, "module-neural_compressor.profiling.parser.result"]], "neural_compressor.profiling.parser.tensorflow_parser.factory": [[346, "module-neural_compressor.profiling.parser.tensorflow_parser.factory"]], "neural_compressor.profiling.parser.tensorflow_parser": [[347, "module-neural_compressor.profiling.parser.tensorflow_parser"]], "neural_compressor.profiling.parser.tensorflow_parser.parser": [[348, "module-neural_compressor.profiling.parser.tensorflow_parser.parser"]], "neural_compressor.profiling.profiler.factory": [[349, "module-neural_compressor.profiling.profiler.factory"]], "neural_compressor.profiling.profiler": [[350, "module-neural_compressor.profiling.profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.factory": [[351, "module-neural_compressor.profiling.profiler.onnxrt_profiler.factory"]], "neural_compressor.profiling.profiler.onnxrt_profiler": [[352, "module-neural_compressor.profiling.profiler.onnxrt_profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.profiler": [[353, "module-neural_compressor.profiling.profiler.onnxrt_profiler.profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.utils": [[354, "module-neural_compressor.profiling.profiler.onnxrt_profiler.utils"]], "neural_compressor.profiling.profiler.profiler": [[355, "module-neural_compressor.profiling.profiler.profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.factory": [[356, "module-neural_compressor.profiling.profiler.tensorflow_profiler.factory"]], "neural_compressor.profiling.profiler.tensorflow_profiler": [[357, "module-neural_compressor.profiling.profiler.tensorflow_profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.profiler": [[358, "module-neural_compressor.profiling.profiler.tensorflow_profiler.profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.utils": [[359, "module-neural_compressor.profiling.profiler.tensorflow_profiler.utils"]], "neural_compressor.quantization": [[360, "module-neural_compressor.quantization"]], "neural_compressor.strategy.auto": [[361, "module-neural_compressor.strategy.auto"]], "neural_compressor.strategy.auto_mixed_precision": [[362, "module-neural_compressor.strategy.auto_mixed_precision"]], "neural_compressor.strategy.basic": [[363, "module-neural_compressor.strategy.basic"]], "neural_compressor.strategy.bayesian": [[364, "module-neural_compressor.strategy.bayesian"]], "neural_compressor.strategy.conservative": [[365, "module-neural_compressor.strategy.conservative"]], "neural_compressor.strategy.exhaustive": [[366, "module-neural_compressor.strategy.exhaustive"]], "neural_compressor.strategy.hawq_v2": [[367, "module-neural_compressor.strategy.hawq_v2"]], "neural_compressor.strategy": [[368, "module-neural_compressor.strategy"]], "neural_compressor.strategy.mse": [[369, "module-neural_compressor.strategy.mse"]], "neural_compressor.strategy.mse_v2": [[370, "module-neural_compressor.strategy.mse_v2"]], "neural_compressor.strategy.random": [[371, "module-neural_compressor.strategy.random"]], "neural_compressor.strategy.strategy": [[372, "module-neural_compressor.strategy.strategy"]], "neural_compressor.strategy.utils.constant": [[373, "module-neural_compressor.strategy.utils.constant"]], "neural_compressor.strategy.utils": [[374, "module-neural_compressor.strategy.utils"]], "neural_compressor.strategy.utils.tuning_sampler": [[375, "module-neural_compressor.strategy.utils.tuning_sampler"]], "neural_compressor.strategy.utils.tuning_space": [[376, "module-neural_compressor.strategy.utils.tuning_space"]], "neural_compressor.strategy.utils.tuning_structs": [[377, "module-neural_compressor.strategy.utils.tuning_structs"]], "neural_compressor.strategy.utils.utility": [[378, "module-neural_compressor.strategy.utils.utility"]], "neural_compressor.template.api_doc_example": [[379, "module-neural_compressor.template.api_doc_example"]], "neural_compressor.template": [[380, "module-neural_compressor.template"]], "neural_compressor.training": [[381, "module-neural_compressor.training"]], "neural_compressor.utils.collect_layer_histogram": [[382, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[383, "module-neural_compressor.utils.constant"]], "neural_compressor.utils.create_obj_from_config": [[384, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils": [[385, "module-neural_compressor.utils"]], "neural_compressor.utils.kl_divergence": [[386, "module-neural_compressor.utils.kl_divergence"]], "neural_compressor.utils.load_huggingface": [[387, "module-neural_compressor.utils.load_huggingface"]], "neural_compressor.utils.logger": [[388, "module-neural_compressor.utils.logger"]], "neural_compressor.utils.neural_insights_utils": [[389, "module-neural_compressor.utils.neural_insights_utils"]], "neural_compressor.utils.options": [[390, "module-neural_compressor.utils.options"]], "neural_compressor.utils.pytorch": [[391, "module-neural_compressor.utils.pytorch"]], "neural_compressor.utils.utility": [[392, "module-neural_compressor.utils.utility"]], "neural_compressor.utils.weights_details": [[393, "module-neural_compressor.utils.weights_details"]], "neural_compressor.version": [[394, "module-neural_compressor.version"]], "Intel\u00ae Neural Compressor Documentation": [[395, "intel-neural-compressor-documentation"], [476, "intel-neural-compressor-documentation"]], "Sections": [[395, "sections"], [476, "sections"]], "Contributor Covenant Code of Conduct": [[396, "contributor-covenant-code-of-conduct"], [397, "contributor-covenant-code-of-conduct"]], "Our Pledge": [[396, "our-pledge"]], "Our Standards": [[396, "our-standards"]], "Our Responsibilities": [[396, "our-responsibilities"]], "Scope": [[396, "scope"]], "Enforcement": [[396, "enforcement"]], "Attribution": [[396, "attribution"]], "Contribution Guidelines": [[397, "contribution-guidelines"]], "Pull Request Checklist": [[397, "pull-request-checklist"]], "Pull Request Template": [[397, "pull-request-template"]], "Support": [[397, "support"]], "FX": [[398, "fx"]], "Introduction": [[398, "introduction"], [399, "introduction"], [402, "introduction"], [403, "introduction"], [404, "introduction"], [419, "introduction"], [420, "introduction"], [421, "introduction"], [424, "introduction"], [425, "introduction"], [426, "introduction"], [428, "introduction"], [430, "introduction"], [433, "introduction"], [436, "introduction"], [438, "introduction"], [439, "introduction"], [459, "introduction"], [460, "introduction"], [461, "introduction"], [463, "introduction"], [466, "introduction"], [468, "introduction"], [469, "introduction"], [470, "introduction"], [471, "introduction"], [472, "introduction"], [474, "introduction"]], "FX Mode Support Matrix in Neural Compressor": [[398, "fx-mode-support-matrix-in-neural-compressor"]], "Get Started": [[398, "get-started"], [464, "get-started"]], "Post Training Static Quantization": [[398, "post-training-static-quantization"], [464, "post-training-static-quantization"]], "Post Training Dynamic Quantization": [[398, "post-training-dynamic-quantization"], [464, "post-training-dynamic-quantization"]], "Quantization-Aware Training": [[398, "quantization-aware-training"]], "Examples": [[398, "examples"], [399, "examples"], [419, "examples"], [420, "examples"], [421, "examples"], [424, "examples"], [425, "examples"], [426, "examples"], [427, "examples"], [428, "examples"], [437, "examples"], [438, "examples"], [439, "examples"], [460, "examples"], [461, "examples"], [464, "examples"], [466, "examples"], [470, "examples"]], "Note": [[398, "note"]], "Details": [[398, "details"]], "Common Problem": [[398, "common-problem"]], "Dynamic Quantization": [[398, "dynamic-quantization"]], "Static Quantization & Quantization Aware Training": [[398, "static-quantization-quantization-aware-training"]], "Neural Architecture Search": [[399, "neural-architecture-search"]], "Basic NAS": [[399, "basic-nas"]], "Dynamic NAS": [[399, "dynamic-nas"]], "NAS Support Matrix": [[399, "nas-support-matrix"]], "Get Started with NAS API": [[399, "get-started-with-nas-api"]], "Basic Usage": [[399, "basic-usage"]], "1. Python code + YAML": [[399, "python-code-yaml"]], "2. Python code only": [[399, "python-code-only"]], "Advanced Usage (Custom NAS)": [[399, "advanced-usage-custom-nas"]], "Security Policy": [[400, "security-policy"]], "Report a Vulnerability": [[400, "report-a-vulnerability"]], "Intel\u00ae Neural Compressor": [[401, "intel-neural-compressor"], [457, "intel-neural-compressor"]], "Installation": [[401, "installation"], [434, "installation"], [451, "installation"]], "Install from pypi": [[401, "install-from-pypi"]], "Getting Started": [[401, "getting-started"], [431, "getting-started"]], "Quantization with Python API": [[401, "quantization-with-python-api"], [431, "quantization-with-python-api"]], "Documentation": [[401, "documentation"]], "Selected Publications/Events": [[401, "selected-publications-events"]], "Additional Content": [[401, "additional-content"]], "Research Collaborations": [[401, "research-collaborations"]], "Adaptor": [[402, "adaptor"], [405, "adaptor"]], "Adaptor Support Matrix": [[402, "adaptor-support-matrix"]], "Working Flow": [[402, "working-flow"], [464, "working-flow"]], "Get Started with Adaptor API": [[402, "get-started-with-adaptor-api"]], "Query API": [[402, "query-api"]], "Background": [[402, "background"]], "Query API Introduction": [[402, "query-api-introduction"]], "Example of Adding a New Backend Support": [[402, "example-of-adding-a-new-backend-support"]], "Capability": [[402, "capability"]], "Implement ONNXRTAdaptor Class": [[402, "implement-onnxrtadaptor-class"]], "How to Add An Adaptor": [[403, "how-to-add-an-adaptor"]], "API List that Need to Implement": [[403, "api-list-that-need-to-implement"]], "Design the framework YAML": [[403, "design-the-framework-yaml"]], "Add query_fw_capability to Adaptor": [[403, "add-query-fw-capability-to-adaptor"]], "Add quantize API according to tune_cfg": [[403, "add-quantize-api-according-to-tune-cfg"]], "Prepare calibration model from fp32 graph": [[403, "prepare-calibration-model-from-fp32-graph"]], "Run sampling iterations of the fp32 graph to calibrate quantizable operators.": [[403, "run-sampling-iterations-of-the-fp32-graph-to-calibrate-quantizable-operators"]], "Calculate the data range and generate quantized model": [[403, "calculate-the-data-range-and-generate-quantized-model"]], "How to Support New Data Type, Like Int4, with a Few Line Changes": [[404, "how-to-support-new-data-type-like-int4-with-a-few-line-changes"]], "Define the Quantization Ability of the Specific Operator": [[404, "define-the-quantization-ability-of-the-specific-operator"]], "Invoke the Operator Kernel According to the Tuning Configuration": [[404, "invoke-the-operator-kernel-according-to-the-tuning-configuration"]], "Use the New Data Type": [[404, "use-the-new-data-type"]], "Summary": [[404, "summary"]], "ONNX Runtime": [[406, "onnx-runtime"]], "Torch Utils": [[407, "torch-utils"]], "API Document Example": [[408, "api-document-example"]], "APIs": [[409, "apis"]], "Benchmark": [[410, "benchmark"], [437, "benchmark"], [463, "benchmark"]], "Compression": [[411, "compression"]], "Config": [[412, "config"]], "Mix Precision": [[413, "mix-precision"], [437, "mix-precision"]], "Model": [[414, "model"], [439, "model"]], "Objective": [[415, "objective"], [459, "objective"]], "Quantization": [[416, "quantization"], [463, "quantization"], [464, "quantization"]], "Strategy": [[417, "strategy"]], "Training": [[418, "training"]], "Benchmarking": [[419, "benchmarking"]], "Benchmark Support Matrix": [[419, "benchmark-support-matrix"]], "Get Started with Benchmark API": [[419, "get-started-with-benchmark-api"]], "DataLoader": [[420, "dataloader"]], "Supported Framework Dataloader Matrix": [[420, "supported-framework-dataloader-matrix"]], "Get Started with DataLoader": [[420, "get-started-with-dataloader"]], "Use Intel\u00ae Neural Compressor DataLoader API": [[420, "use-intel-neural-compressor-dataloader-api"]], "Build Custom Dataloader with Python API": [[420, "build-custom-dataloader-with-python-api"]], "Dataset": [[421, "dataset"]], "Supported Framework Dataset Matrix": [[421, "supported-framework-dataset-matrix"]], "TensorFlow": [[421, "tensorflow"], [436, "tensorflow"], [471, "tensorflow"]], "PyTorch": [[421, "pytorch"], [436, "pytorch"], [465, "pytorch"]], "MXNet": [[421, "mxnet"], [436, "mxnet"], [471, "mxnet"]], "ONNXRT": [[421, "onnxrt"], [436, "onnxrt"], [471, "onnxrt"]], "Get start with Dataset API": [[421, "get-start-with-dataset-api"]], "Config dataloader in a yaml file": [[421, "config-dataloader-in-a-yaml-file"]], "User-specific dataset": [[421, "user-specific-dataset"]], "Design": [[422, "design"], [472, "design"], [472, "id1"], [472, "id3"], [472, "id5"], [472, "id7"], [472, "id9"], [472, "id11"], [472, "id13"], [472, "id15"], [472, "id17"], [472, "id19"], [472, "id21"]], "Architecture": [[422, "architecture"], [433, "architecture"]], "Workflow": [[422, "workflow"]], "Diagnosis": [[423, "diagnosis"]], "Diagnosis introduction": [[423, "diagnosis-introduction"]], "Supported feature matrix": [[423, "supported-feature-matrix"]], "Get started": [[423, "get-started"]], "Install Intel\u00ae Neural Compressor": [[423, "install-intel-neural-compressor"]], "Modify script": [[423, "modify-script"]], "Quantization diagnosis": [[423, "quantization-diagnosis"]], "Benchmark diagnosis": [[423, "benchmark-diagnosis"]], "Example": [[423, "example"], [436, "example"], [442, "example"], [446, "example"], [459, "example"], [469, "example"]], "Prepare dataset": [[423, "prepare-dataset"]], "Run quantization script": [[423, "run-quantization-script"]], "Run benchmark script": [[423, "run-benchmark-script"]], "See quantization data": [[423, "see-quantization-data"]], "How to do diagnosis": [[423, "how-to-do-diagnosis"]], "Parameter description": [[423, "parameter-description"]], "Diagnosis suggestions": [[423, "diagnosis-suggestions"]], "Fallback setting example": [[423, "fallback-setting-example"]], "See profiling data": [[423, "see-profiling-data"]], "Distillation": [[424, "distillation"], [437, "distillation"], [463, "distillation"]], "Knowledge Distillation": [[424, "knowledge-distillation"]], "Intermediate Layer Knowledge Distillation": [[424, "intermediate-layer-knowledge-distillation"]], "Self Distillation": [[424, "self-distillation"]], "Distillation Support Matrix": [[424, "distillation-support-matrix"]], "Get Started with Distillation API": [[424, "get-started-with-distillation-api"]], "Distillation for Quantization": [[425, "distillation-for-quantization"]], "Distillation for Quantization Support Matrix": [[425, "distillation-for-quantization-support-matrix"]], "Get Started with Distillation for Quantization API": [[425, "get-started-with-distillation-for-quantization-api"]], "Distributed Training and Inference (Evaluation)": [[426, "distributed-training-and-inference-evaluation"]], "Supported Feature Matrix": [[426, "supported-feature-matrix"], [430, "supported-feature-matrix"], [433, "supported-feature-matrix"], [463, "supported-feature-matrix"], [464, "supported-feature-matrix"], [470, "supported-feature-matrix"], [474, "supported-feature-matrix"]], "Get Started with Distributed Training and Inference API": [[426, "get-started-with-distributed-training-and-inference-api"]], "Option 1: Pure Yaml Configuration": [[426, "option-1-pure-yaml-configuration"]], "Option 2: User Defined Training Function": [[426, "option-2-user-defined-training-function"]], "Horovodrun Execution": [[426, "horovodrun-execution"]], "Security": [[426, "security"]], "PyTorch Examples:": [[426, "pytorch-examples"]], "TensorFlow Examples:": [[426, "tensorflow-examples"]], "Example List": [[427, "example-list"]], "Release Data": [[427, "release-data"]], "Export": [[428, "export"]], "Supported Framework Model Matrix": [[428, "supported-framework-model-matrix"], [439, "supported-framework-model-matrix"], [466, "supported-framework-model-matrix"]], "PyTorch Model": [[428, "pytorch-model"]], "FP32 Model Export": [[428, "fp32-model-export"], [428, "id1"]], "INT8 Model Export": [[428, "int8-model-export"], [428, "id2"]], "Tensorflow Model": [[428, "tensorflow-model"]], "Appendix": [[428, "appendix"]], "Supported quantized ops": [[428, "supported-quantized-ops"]], "Frequently Asked Questions": [[429, "frequently-asked-questions"]], "Common Build Issues": [[429, "common-build-issues"]], "Issue 1:": [[429, "issue-1"]], "Issue 2:": [[429, "issue-2"]], "Issue 3:": [[429, "issue-3"]], "Issue 4:": [[429, "issue-4"]], "Framework YAML Configuration Files": [[430, "framework-yaml-configuration-files"]], "Get started with Framework YAML Files": [[430, "get-started-with-framework-yaml-files"]], "Quick Samples": [[431, "quick-samples"]], "Validated Models": [[431, "validated-models"], [469, "validated-models"], [475, "validated-models"]], "Incompatible changes between v1.2 and v1.1": [[432, "incompatible-changes-between-v1-2-and-v1-1"]], "User-facing APIs": [[432, "user-facing-apis"]], "Built-in transform/dataset/metric APIs": [[432, "built-in-transform-dataset-metric-apis"]], "Infrastructure of Intel\u00ae Neural Compressor": [[433, "infrastructure-of-intel-neural-compressor"]], "Linux Installation": [[434, "linux-installation"]], "Prerequisites": [[434, "prerequisites"], [434, "id1"]], "Install from Binary": [[434, "install-from-binary"], [434, "id2"]], "Install from Source": [[434, "install-from-source"], [434, "id3"]], "Install from AI Kit": [[434, "install-from-ai-kit"]], "Windows Installation": [[434, "windows-installation"]], "System Requirements": [[434, "system-requirements"]], "Validated Hardware Environment": [[434, "validated-hardware-environment"]], "Intel\u00ae Neural Compressor supports CPUs based on Intel 64 architecture or compatible processors:": [[434, "intel-neural-compressor-supports-cpus-based-on-intel-64-architecture-or-compatible-processors"]], "Intel\u00ae Neural Compressor supports GPUs built on Intel\u2019s Xe architecture:": [[434, "intel-neural-compressor-supports-gpus-built-on-intel-s-xe-architecture"]], "Intel\u00ae Neural Compressor quantized ONNX models support multiple hardware vendors through ONNX Runtime:": [[434, "intel-neural-compressor-quantized-onnx-models-support-multiple-hardware-vendors-through-onnx-runtime"]], "Validated Software Environment": [[434, "validated-software-environment"]], "Legal Information": [[435, "legal-information"]], "License": [[435, "license"]], "Citation": [[435, "citation"]], "Trademarks": [[435, "trademarks"]], "Metrics": [[436, "metrics"]], "Supported Built-in Metric Matrix": [[436, "supported-built-in-metric-matrix"]], "Get Started with Metric": [[436, "get-started-with-metric"]], "Use Intel\u00ae Neural Compressor Metric API": [[436, "use-intel-neural-compressor-metric-api"]], "Build Custom Metric with Python API": [[436, "build-custom-metric-with-python-api"]], "Code Migration from Intel Neural Compressor 1.X to Intel Neural Compressor 2.X": [[437, "code-migration-from-intel-neural-compressor-1-x-to-intel-neural-compressor-2-x"]], "Model Quantization": [[437, "model-quantization"]], "Post-training Quantization": [[437, "post-training-quantization"]], "Quantization Aware Training": [[437, "quantization-aware-training"], [464, "quantization-aware-training"], [464, "id1"]], "Pruning": [[437, "pruning"], [461, "pruning"], [463, "pruning"]], "Orchestration": [[437, "orchestration"]], "Mixed Precision": [[438, "mixed-precision"]], "Mixed Precision Support Matrix": [[438, "mixed-precision-support-matrix"]], "Hardware and Software requests for BF16": [[438, "hardware-and-software-requests-for-bf16"]], "Hardware and Software requests for FP16": [[438, "hardware-and-software-requests-for-fp16"]], "During quantization mixed precision": [[438, "during-quantization-mixed-precision"]], "Accuracy-driven mixed precision": [[438, "accuracy-driven-mixed-precision"]], "Get Started with Mixed Precision API": [[438, "get-started-with-mixed-precision-api"]], "Neural Coder": [[440, "neural-coder"], [457, "neural-coder"], [457, "id1"]], "What do we offer?": [[440, "what-do-we-offer"]], "Getting Started!": [[440, "getting-started"], [451, "getting-started"]], "Jupyter Lab Extension": [[440, "jupyter-lab-extension"]], "Python Launcher": [[440, "python-launcher"], [445, "python-launcher"]], "Python API": [[440, "python-api"]], "Contact": [[440, "contact"]], "AWS Amazon SageMaker Support": [[441, "aws-amazon-sagemaker-support"]], "Start Jupyter Lab 3": [[441, "start-jupyter-lab-3"]], "For SageMaker Studio": [[441, "for-sagemaker-studio"]], "For SageMaker Notebook instance": [[441, "for-sagemaker-notebook-instance"]], "Installation Guide": [[441, "installation-guide"]], "BigDL Nano Support": [[442, "bigdl-nano-support"]], "Support Matrix": [[442, "support-matrix"]], "Intel CPU Platforms: Best Performance Setting": [[443, "intel-cpu-platforms-best-performance-setting"]], "Install MKL, OpenMP and JEMALLOC": [[443, "install-mkl-openmp-and-jemalloc"]], "Install NUMA Controller": [[443, "install-numa-controller"]], "Environment Variables": [[443, "environment-variables"]], "Frequency Governers": [[443, "frequency-governers"]], "Neural Coder as Python API": [[444, "neural-coder-as-python-api"]], "Enable": [[444, "enable"]], "Bench": [[444, "bench"]], "SuperBench": [[444, "superbench"]], "Quick-Start": [[445, "quick-start"]], "Launcher Arguments (Optional)": [[445, "launcher-arguments-optional"]], "Neural Coder for Quantization": [[446, "neural-coder-for-quantization"]], "Features Supported": [[446, "features-supported"]], "Models Supported": [[446, "models-supported"]], "Usage": [[446, "usage"], [470, "usage"], [470, "id1"], [472, "usage"], [472, "id2"], [472, "id4"], [472, "id6"], [472, "id8"], [472, "id10"], [472, "id12"], [472, "id14"], [472, "id16"], [472, "id18"], [472, "id20"], [472, "id22"]], "PyPI distribution:": [[446, "pypi-distribution"]], "Supported Optimization Features": [[447, "supported-optimization-features"]], "v0.4": [[448, "v0-4"]], "Highlights": [[448, "highlights"]], "Others": [[448, "others"]], "Changelog": [[449, "changelog"], [453, "changelog"]], "neural_compressor_ext_lab": [[450, "neural-compressor-ext-lab"]], "Requirements": [[450, "requirements"], [454, "requirements"]], "Install": [[450, "install"], [454, "install"]], "Uninstall": [[450, "uninstall"], [454, "uninstall"]], "Contributing": [[450, "contributing"], [454, "contributing"]], "Development install": [[450, "development-install"], [454, "development-install"]], "Development uninstall": [[450, "development-uninstall"], [454, "development-uninstall"]], "Packaging the extension": [[450, "packaging-the-extension"], [454, "packaging-the-extension"]], "Intel\u00ae Neural Compressor as JupyterLab Extension": [[451, "intel-neural-compressor-as-jupyterlab-extension"]], "Auto-enable a feature": [[451, "auto-enable-a-feature"]], "Or let us help you auto-select the best feature": [[451, "or-let-us-help-you-auto-select-the-best-feature"]], "Pre-requisites": [[451, "pre-requisites"]], "Making a new release of neural_compressor_ext_lab": [[452, "making-a-new-release-of-neural-compressor-ext-lab"]], "Manual release": [[452, "manual-release"], [455, "manual-release"]], "Python package": [[452, "python-package"], [455, "python-package"]], "NPM package": [[452, "npm-package"], [455, "npm-package"]], "Automated releases with the Jupyter Releaser": [[452, "automated-releases-with-the-jupyter-releaser"], [455, "automated-releases-with-the-jupyter-releaser"]], "Publishing to conda-forge": [[452, "publishing-to-conda-forge"], [455, "publishing-to-conda-forge"]], "neural_compressor_ext_lab_alibaba": [[454, "neural-compressor-ext-lab-alibaba"]], "Making a new release of neural_compressor_ext_lab_alibaba": [[455, "making-a-new-release-of-neural-compressor-ext-lab-alibaba"]], "Change Log": [[456, "change-log"]], "[Unreleased]": [[456, "unreleased"]], "Background Introduction": [[457, "background-introduction"]], "Neural Coder Extension in VSCode": [[457, "neural-coder-extension-in-vscode"]], "Neural Coder Extension Usage": [[457, "neural-coder-extension-usage"]], "1. Open": [[457, "open"]], "2. Search": [[457, "search"]], "3. Setting": [[457, "setting"]], "4. Icon": [[457, "icon"]], "5. optimization (quantization)": [[457, "optimization-quantization"]], "5.1 Enable": [[457, "enable"]], "5.2 Auto": [[457, "auto"]], "Welcome to your VS Code Extension": [[458, "welcome-to-your-vs-code-extension"]], "What\u2019s in the folder": [[458, "what-s-in-the-folder"]], "Setup": [[458, "setup"]], "Get up and running straight away": [[458, "get-up-and-running-straight-away"]], "Make changes": [[458, "make-changes"]], "Explore the API": [[458, "explore-the-api"]], "Run tests": [[458, "run-tests"]], "Go further": [[458, "go-further"]], "Single Objective": [[459, "single-objective"]], "Multiple Objectives": [[459, "multiple-objectives"]], "Objective Support Matrix": [[459, "objective-support-matrix"]], "Get Started with Objective API": [[459, "get-started-with-objective-api"]], "Config Single Objective": [[459, "config-single-objective"]], "Config Multiple Objectives": [[459, "config-multiple-objectives"]], "Optimization Orchestration": [[460, "optimization-orchestration"]], "One-shot": [[460, "one-shot"]], "Orchestration Support Matrix": [[460, "orchestration-support-matrix"]], "Get Started with Orchestration API": [[460, "get-started-with-orchestration-api"]], "Neural Network Pruning": [[461, "neural-network-pruning"]], "Pruning Patterns": [[461, "pruning-patterns"]], "Pruning Criteria": [[461, "pruning-criteria"]], "Pruning Types": [[461, "pruning-types"]], "Pruning Schedules": [[461, "pruning-schedules"]], "Pruning Scope": [[461, "pruning-scope"]], "Sparsity Decay Types": [[461, "sparsity-decay-types"]], "Regularization": [[461, "regularization"]], "Pruning Support Matrix": [[461, "pruning-support-matrix"]], "Get Started with Pruning API": [[461, "get-started-with-pruning-api"]], "Sparse Model Deployment": [[461, "sparse-model-deployment"]], "Reference": [[461, "reference"], [464, "reference"], [466, "reference"], [469, "reference"]], "Full Publications/Events (68)": [[462, "full-publications-events-68"]], "2023 (15)": [[462, "id1"]], "2022 (34)": [[462, "id2"]], "2021 (15)": [[462, "id3"]], "2018 - 2020 (4)": [[462, "id4"]], "Pythonic Style Access for Configurations": [[463, "pythonic-style-access-for-configurations"]], "Pythonic API for User Configurations": [[463, "pythonic-api-for-user-configurations"], [463, "id1"]], "Pythonic API for Framework Configurations": [[463, "pythonic-api-for-framework-configurations"], [463, "id2"]], "Get Started with Pythonic API for Configurations": [[463, "get-started-with-pythonic-api-for-configurations"]], "NAS": [[463, "nas"]], "Quantization Introduction": [[464, "quantization-introduction"]], "Quantization Fundamentals": [[464, "quantization-fundamentals"], [469, "quantization-fundamentals"]], "Quantization Support Matrix": [[464, "quantization-support-matrix"]], "Quantization Scheme in TensorFlow": [[464, "quantization-scheme-in-tensorflow"]], "Quantization Scheme in PyTorch": [[464, "quantization-scheme-in-pytorch"]], "Quantization Scheme in IPEX": [[464, "quantization-scheme-in-ipex"]], "Quantization Scheme in MXNet": [[464, "quantization-scheme-in-mxnet"]], "Quantization Scheme in ONNX Runtime": [[464, "quantization-scheme-in-onnx-runtime"]], "Quantization Approaches": [[464, "quantization-approaches"]], "With or Without Accuracy Aware Tuning": [[464, "with-or-without-accuracy-aware-tuning"]], "Post Training Quantization": [[464, "post-training-quantization"]], "Specify Quantization Rules": [[464, "specify-quantization-rules"]], "Specify Quantization Recipes": [[464, "specify-quantization-recipes"]], "Specify Quantization Backend and Device": [[464, "specify-quantization-backend-and-device"]], "Turn OFF Auto Mixed Precision during Quantization": [[465, "turn-off-auto-mixed-precision-during-quantization"]], "Tensorflow": [[465, "tensorflow"]], "Weight Only Quantization": [[466, "weight-only-quantization"]], "Quantization Capability:": [[466, "quantization-capability"]], "User code:": [[466, "user-code"]], "Release": [[467, "release"]], "Release Notes": [[467, "release-notes"]], "Known Issues": [[467, "known-issues"]], "Incompatible Changes": [[467, "incompatible-changes"]], "SigOpt Strategy": [[468, "sigopt-strategy"]], "Preparation": [[468, "preparation"]], "SigOpt Platform": [[468, "sigopt-platform"]], "Neural Compressor Configuration": [[468, "neural-compressor-configuration"]], "Performance": [[468, "performance"]], "Benefit of SigOpt Strategy": [[468, "benefit-of-sigopt-strategy"]], "Performance Comparison of Different Strategies": [[468, "performance-comparison-of-different-strategies"]], "Smooth Quant": [[469, "smooth-quant"]], "Per-tensor & Per-channel": [[469, "per-tensor-per-channel"]], "Per-tensor example": [[469, "per-tensor-example"]], "Per-channel example": [[469, "per-channel-example"]], "Matmul quantization example": [[469, "matmul-quantization-example"]], "Per-channel limitation": [[469, "per-channel-limitation"]], "SmoothQuant and Our Enhancement": [[469, "smoothquant-and-our-enhancement"]], "SmoothQuant": [[469, "smoothquant"]], "Our enhancement:": [[469, "our-enhancement"]], "Algorithm: Layer-wise Auto-tuning of $\\alpha$.": [[469, "algorithm-layer-wise-auto-tuning-of-alpha"]], "Engineering": [[469, "engineering"]], "Supported Framework Matrix": [[469, "supported-framework-matrix"]], "TensorBoard": [[470, "tensorboard"]], "Get Started with TensorBoard": [[470, "get-started-with-tensorboard"]], "PyTorch TensorBoard": [[470, "pytorch-tensorboard"]], "TensorFlow Tensorboard": [[470, "tensorflow-tensorboard"]], "PyTorch Examples": [[470, "pytorch-examples"]], "TensorFlow Examples": [[470, "tensorflow-examples"]], "Transform": [[471, "transform"]], "Transform Support List": [[471, "transform-support-list"]], "Pytorch": [[471, "pytorch"]], "Tuning Strategies": [[472, "tuning-strategies"]], "Strategy Design": [[472, "strategy-design"]], "Tuning Space": [[472, "tuning-space"]], "Exit Policy": [[472, "exit-policy"]], "Accuracy Criteria": [[472, "accuracy-criteria"]], "Tuning Process": [[472, "tuning-process"]], "Tuning Algorithms": [[472, "tuning-algorithms"]], "Auto": [[472, "auto"]], "Conservative Tuning": [[472, "conservative-tuning"]], "Basic": [[472, "basic"]], "MSE": [[472, "mse"]], "MSE_V2": [[472, "mse-v2"]], "HAWQ_V2": [[472, "hawq-v2"]], "Bayesian": [[472, "bayesian"]], "Exhaustive": [[472, "exhaustive"]], "Random": [[472, "random"]], "SigOpt": [[472, "sigopt"]], "TPE": [[472, "tpe"]], "Distributed Tuning": [[472, "distributed-tuning"]], "Customize a New Tuning Strategy": [[472, "customize-a-new-tuning-strategy"]], "User Guide": [[473, "user-guide"]], "Overview": [[473, "overview"]], "Python-based APIs": [[473, "python-based-apis"]], "Neural Coder (Zero-code Optimization)": [[473, "neural-coder-zero-code-optimization"]], "Advanced Topics": [[473, "advanced-topics"]], "Innovations for Productivity": [[473, "innovations-for-productivity"]], "User YAML Configuration Files": [[474, "user-yaml-configuration-files"]], "Get started with User YAML Files": [[474, "get-started-with-user-yaml-files"]], "Validated Quantization Examples": [[475, "validated-quantization-examples"]], "TensorFlow Models with Intel TensorFlow 2.12.0": [[475, "tensorflow-models-with-intel-tensorflow-2-12-0"]], "TensorFlow Models with Intel\u00ae Extension for TensorFlow* 1.2.0": [[475, "tensorflow-models-with-intel-extension-for-tensorflow-1-2-0"]], "PyTorch Models with Torch 2.0.1+cpu in PTQ Mode": [[475, "pytorch-models-with-torch-2-0-1-cpu-in-ptq-mode"]], "PyTorch Models with Torch 2.0.1+cpu in QAT Mode": [[475, "pytorch-models-with-torch-2-0-1-cpu-in-qat-mode"]], "PyTorch Models with Intel\u00ae Extension for PyTorch* 2.0.1+cpu": [[475, "pytorch-models-with-intel-extension-for-pytorch-2-0-1-cpu"]], "ONNX Models with ONNX Runtime 1.15.0": [[475, "onnx-models-with-onnx-runtime-1-15-0"]], "Validated Pruning Examples": [[475, "validated-pruning-examples"]], "Validated Knowledge Distillation Examples": [[475, "validated-knowledge-distillation-examples"]], "Validated ONNX QDQ INT8 Models on Multiple Hardware through ONNX Runtime": [[475, "validated-onnx-qdq-int8-models-on-multiple-hardware-through-onnx-runtime"]]}, "indexentries": {"block_mask": [[0, "module-block_mask"]], "module": [[0, "module-block_mask"], [1, "module-neural_compressor.adaptor.adaptor"], [2, "module-neural_compressor.adaptor"], [3, "module-neural_compressor.adaptor.keras"], [4, "module-neural_compressor.adaptor.keras_utils.conv2d"], [5, "module-neural_compressor.adaptor.keras_utils.dense"], [6, "module-neural_compressor.adaptor.keras_utils.depthwise_conv2d"], [7, "module-neural_compressor.adaptor.keras_utils"], [8, "module-neural_compressor.adaptor.keras_utils.pool2d"], [9, "module-neural_compressor.adaptor.keras_utils.quantizer"], [10, "module-neural_compressor.adaptor.keras_utils.separable_conv2d"], [11, "module-neural_compressor.adaptor.mxnet"], [12, "module-neural_compressor.adaptor.mxnet_utils"], [13, "module-neural_compressor.adaptor.mxnet_utils.util"], [14, "module-neural_compressor.adaptor.onnxrt"], [15, "module-neural_compressor.adaptor.ox_utils.calibration"], [16, "module-neural_compressor.adaptor.ox_utils.calibrator"], [17, "module-neural_compressor.adaptor.ox_utils"], [18, "module-neural_compressor.adaptor.ox_utils.operators.activation"], [19, "module-neural_compressor.adaptor.ox_utils.operators.argmax"], [20, "module-neural_compressor.adaptor.ox_utils.operators.attention"], [21, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"], [22, "module-neural_compressor.adaptor.ox_utils.operators.concat"], [23, "module-neural_compressor.adaptor.ox_utils.operators.conv"], [24, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"], [25, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"], [26, "module-neural_compressor.adaptor.ox_utils.operators.gather"], [27, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"], [28, "module-neural_compressor.adaptor.ox_utils.operators.gemm"], [29, "module-neural_compressor.adaptor.ox_utils.operators"], [30, "module-neural_compressor.adaptor.ox_utils.operators.lstm"], [31, "module-neural_compressor.adaptor.ox_utils.operators.matmul"], [32, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"], [33, "module-neural_compressor.adaptor.ox_utils.operators.norm"], [34, "module-neural_compressor.adaptor.ox_utils.operators.ops"], [35, "module-neural_compressor.adaptor.ox_utils.operators.pad"], [36, "module-neural_compressor.adaptor.ox_utils.operators.pooling"], [37, "module-neural_compressor.adaptor.ox_utils.operators.reduce"], [38, "module-neural_compressor.adaptor.ox_utils.operators.resize"], [39, "module-neural_compressor.adaptor.ox_utils.operators.split"], [40, "module-neural_compressor.adaptor.ox_utils.operators.unary_op"], [41, "module-neural_compressor.adaptor.ox_utils.quantizer"], [42, "module-neural_compressor.adaptor.ox_utils.smooth_quant"], [43, "module-neural_compressor.adaptor.ox_utils.util"], [44, "module-neural_compressor.adaptor.pytorch"], [45, "module-neural_compressor.adaptor.query"], [46, "module-neural_compressor.adaptor.tensorflow"], [47, "module-neural_compressor.adaptor.tf_utils.graph_converter"], [48, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"], [49, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"], [50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"], [51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"], [52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"], [53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"], [54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"], [55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"], [56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"], [57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"], [58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"], [59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"], [60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"], [61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"], [62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"], [63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"], [64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"], [65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"], [66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"], [67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"], [68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"], [69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"], [70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"], [71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"], [72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"], [73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"], [74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"], [75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"], [76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"], [77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"], [78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"], [79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"], [80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"], [81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"], [82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"], [83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"], [84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"], [85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"], [86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"], [87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"], [88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"], [89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"], [90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"], [91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"], [92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"], [93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"], [94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"], [95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"], [96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"], [97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"], [98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"], [99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"], [100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"], [101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"], [102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"], [103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"], [104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"], [105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"], [106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"], [107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"], [108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"], [109, "module-neural_compressor.adaptor.tf_utils.graph_util"], [110, "module-neural_compressor.adaptor.tf_utils"], [111, "module-neural_compressor.adaptor.tf_utils.quantize_graph"], [112, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"], [113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"], [114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"], [115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"], [116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"], [117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"], [118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"], [119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"], [120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"], [121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"], [122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"], [123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"], [124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"], [125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"], [126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"], [127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"], [128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"], [129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"], [130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"], [131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"], [132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"], [133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"], [134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"], [135, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"], [136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"], [137, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"], [138, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"], [139, "module-neural_compressor.adaptor.tf_utils.smooth_quant_calibration"], [140, "module-neural_compressor.adaptor.tf_utils.smooth_quant_scaler"], [141, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"], [142, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"], [143, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"], [144, "module-neural_compressor.adaptor.tf_utils.transform_graph"], [145, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"], [146, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"], [147, "module-neural_compressor.adaptor.tf_utils.util"], [148, "module-neural_compressor.adaptor.torch_utils.bf16_convert"], [149, "module-neural_compressor.adaptor.torch_utils.gptq"], [150, "module-neural_compressor.adaptor.torch_utils.hawq_metric"], [151, "module-neural_compressor.adaptor.torch_utils"], [152, "module-neural_compressor.adaptor.torch_utils.mixed_precision"], [153, "module-neural_compressor.adaptor.torch_utils.model_wrapper"], [154, "module-neural_compressor.adaptor.torch_utils.pattern_detector"], [155, "module-neural_compressor.adaptor.torch_utils.smooth_quant"], [156, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"], [157, "module-neural_compressor.adaptor.torch_utils.util"], [158, "module-neural_compressor.adaptor.torch_utils.weight_only"], [159, "module-neural_compressor.algorithm.algorithm"], [160, "module-neural_compressor.algorithm.fast_bias_correction"], [161, "module-neural_compressor.algorithm"], [162, "module-neural_compressor.algorithm.smooth_quant"], [163, "module-neural_compressor.algorithm.weight_correction"], [164, "module-neural_compressor.benchmark"], [165, "module-neural_compressor.compression.callbacks"], [166, "module-neural_compressor.compression.distillation.criterions"], [167, "module-neural_compressor.compression.distillation"], [168, "module-neural_compressor.compression"], [169, "module-neural_compressor.compression.pruner.criteria"], [170, "module-neural_compressor.compression.pruner"], [171, "module-neural_compressor.compression.pruner.model_slim.auto_slim"], [172, "module-neural_compressor.compression.pruner.model_slim"], [173, "module-neural_compressor.compression.pruner.model_slim.pattern_analyzer"], [174, "module-neural_compressor.compression.pruner.model_slim.weight_slim"], [175, "module-neural_compressor.compression.pruner.patterns"], [176, "module-neural_compressor.compression.pruner.pruners"], [177, "module-neural_compressor.compression.pruner.regs"], [178, "module-neural_compressor.compression.pruner.schedulers"], [179, "module-neural_compressor.compression.pruner.utils"], [180, "module-neural_compressor.conf.config"], [181, "module-neural_compressor.conf.dotdict"], [182, "module-neural_compressor.conf"], [183, "module-neural_compressor.conf.pythonic_config"], [184, "module-neural_compressor.config"], [185, "module-neural_compressor.contrib"], [186, "module-neural_compressor.contrib.strategy"], [187, "module-neural_compressor.contrib.strategy.sigopt"], [188, "module-neural_compressor.contrib.strategy.tpe"], [189, "module-neural_compressor.data.dataloaders.base_dataloader"], [190, "module-neural_compressor.data.dataloaders.dataloader"], [191, "module-neural_compressor.data.dataloaders.default_dataloader"], [192, "module-neural_compressor.data.dataloaders.fetcher"], [193, "module-neural_compressor.data.dataloaders"], [194, "module-neural_compressor.data.dataloaders.mxnet_dataloader"], [195, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"], [196, "module-neural_compressor.data.dataloaders.pytorch_dataloader"], [197, "module-neural_compressor.data.dataloaders.sampler"], [198, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"], [199, "module-neural_compressor.data.datasets.bert_dataset"], [200, "module-neural_compressor.data.datasets.coco_dataset"], [201, "module-neural_compressor.data.datasets.dataset"], [202, "module-neural_compressor.data.datasets.dummy_dataset"], [203, "module-neural_compressor.data.datasets.dummy_dataset_v2"], [204, "module-neural_compressor.data.datasets.imagenet_dataset"], [205, "module-neural_compressor.data.datasets"], [206, "module-neural_compressor.data.datasets.style_transfer_dataset"], [207, "module-neural_compressor.data.filters.coco_filter"], [208, "module-neural_compressor.data.filters.filter"], [209, "module-neural_compressor.data.filters"], [210, "module-neural_compressor.data"], [211, "module-neural_compressor.data.transforms.coco_transform"], [212, "module-neural_compressor.data.transforms.imagenet_transform"], [213, "module-neural_compressor.data.transforms"], [214, "module-neural_compressor.data.transforms.postprocess"], [215, "module-neural_compressor.data.transforms.tokenization"], [216, "module-neural_compressor.data.transforms.transform"], [217, "module-neural_compressor.experimental.benchmark"], [218, "module-neural_compressor.experimental.common.criterion"], [219, "module-neural_compressor.experimental.common.dataloader"], [220, "module-neural_compressor.experimental.common"], [221, "module-neural_compressor.experimental.common.metric"], [222, "module-neural_compressor.experimental.common.model"], [223, "module-neural_compressor.experimental.common.optimizer"], [224, "module-neural_compressor.experimental.common.postprocess"], [225, "module-neural_compressor.experimental.common.torch_utils"], [226, "module-neural_compressor.experimental.component"], [227, "module-neural_compressor.experimental.compression"], [228, "module-neural_compressor.experimental.compression.pruning"], [229, "module-neural_compressor.experimental.contrib"], [230, "module-neural_compressor.experimental.contrib.strategy"], [231, "module-neural_compressor.experimental.contrib.strategy.sigopt"], [232, "module-neural_compressor.experimental.contrib.strategy.tpe"], [233, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"], [234, "module-neural_compressor.experimental.data.dataloaders.dataloader"], [235, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"], [236, "module-neural_compressor.experimental.data.dataloaders.fetcher"], [237, "module-neural_compressor.experimental.data.dataloaders"], [238, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"], [239, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"], [240, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"], [241, "module-neural_compressor.experimental.data.dataloaders.sampler"], [242, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"], [243, "module-neural_compressor.experimental.data.datasets.bert_dataset"], [244, "module-neural_compressor.experimental.data.datasets.coco_dataset"], [245, "module-neural_compressor.experimental.data.datasets.dataset"], [246, "module-neural_compressor.experimental.data.datasets.dummy_dataset"], [247, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"], [248, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"], [249, "module-neural_compressor.experimental.data.datasets"], [250, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"], [251, "module-neural_compressor.experimental.data.filters.coco_filter"], [252, "module-neural_compressor.experimental.data.filters.filter"], [253, "module-neural_compressor.experimental.data.filters"], [254, "module-neural_compressor.experimental.data"], [255, "module-neural_compressor.experimental.data.transforms.imagenet_transform"], [256, "module-neural_compressor.experimental.data.transforms"], [257, "module-neural_compressor.experimental.data.transforms.tokenization"], [258, "module-neural_compressor.experimental.data.transforms.transform"], [259, "module-neural_compressor.experimental.distillation"], [260, "module-neural_compressor.experimental.export"], [261, "module-neural_compressor.experimental.export.qlinear2qdq"], [262, "module-neural_compressor.experimental.export.tf2onnx"], [263, "module-neural_compressor.experimental.export.torch2onnx"], [264, "module-neural_compressor.experimental.graph_optimization"], [265, "module-neural_compressor.experimental"], [266, "module-neural_compressor.experimental.metric.bleu"], [267, "module-neural_compressor.experimental.metric.bleu_util"], [268, "module-neural_compressor.experimental.metric.coco_label_map"], [269, "module-neural_compressor.experimental.metric.coco_tools"], [270, "module-neural_compressor.experimental.metric.evaluate_squad"], [271, "module-neural_compressor.experimental.metric.f1"], [272, "module-neural_compressor.experimental.metric"], [273, "module-neural_compressor.experimental.metric.metric"], [274, "module-neural_compressor.experimental.mixed_precision"], [275, "module-neural_compressor.experimental.model_conversion"], [276, "module-neural_compressor.experimental.nas.basic_nas"], [277, "module-neural_compressor.experimental.nas.dynas"], [278, "module-neural_compressor.experimental.nas"], [279, "module-neural_compressor.experimental.nas.nas"], [280, "module-neural_compressor.experimental.nas.nas_utils"], [281, "module-neural_compressor.experimental.nas.search_algorithms"], [282, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"], [283, "module-neural_compressor.experimental.pruner_legacy.group_lasso"], [284, "module-neural_compressor.experimental.pruner_legacy"], [285, "module-neural_compressor.experimental.pruner_legacy.magnitude"], [286, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"], [287, "module-neural_compressor.experimental.pruner_legacy.pruner"], [288, "module-neural_compressor.experimental.pruning"], [289, "module-neural_compressor.experimental.pruning_recipes"], [290, "module-neural_compressor.experimental.pruning_recipes.patterns"], [291, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"], [292, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"], [293, "module-neural_compressor.experimental.pruning_v2"], [294, "module-neural_compressor.experimental.pytorch_pruner"], [295, "module-neural_compressor.experimental.pytorch_pruner.logger"], [296, "module-neural_compressor.experimental.pytorch_pruner.patterns"], [297, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"], [298, "module-neural_compressor.experimental.pytorch_pruner.pruner"], [299, "module-neural_compressor.experimental.pytorch_pruner.pruning"], [300, "module-neural_compressor.experimental.pytorch_pruner.scheduler"], [301, "module-neural_compressor.experimental.quantization"], [302, "module-neural_compressor.experimental.scheduler"], [303, "module-neural_compressor.experimental.strategy.auto_mixed_precision"], [304, "module-neural_compressor.experimental.strategy.basic"], [305, "module-neural_compressor.experimental.strategy.bayesian"], [306, "module-neural_compressor.experimental.strategy.exhaustive"], [307, "module-neural_compressor.experimental.strategy"], [308, "module-neural_compressor.experimental.strategy.mse"], [309, "module-neural_compressor.experimental.strategy.mse_v2"], [310, "module-neural_compressor.experimental.strategy.random"], [311, "module-neural_compressor.experimental.strategy.strategy"], [312, "module-neural_compressor.experimental.strategy.utils.constant"], [313, "module-neural_compressor.experimental.strategy.utils"], [314, "module-neural_compressor.experimental.strategy.utils.tuning_sampler"], [315, "module-neural_compressor.experimental.strategy.utils.tuning_space"], [316, "module-neural_compressor.experimental.strategy.utils.tuning_structs"], [317, "module-neural_compressor.experimental.strategy.utils.utility"], [318, "module-neural_compressor"], [319, "module-neural_compressor.metric.bleu"], [320, "module-neural_compressor.metric.bleu_util"], [321, "module-neural_compressor.metric.coco_label_map"], [322, "module-neural_compressor.metric.coco_tools"], [323, "module-neural_compressor.metric.evaluate_squad"], [324, "module-neural_compressor.metric.f1"], [325, "module-neural_compressor.metric"], [326, "module-neural_compressor.metric.metric"], [327, "module-neural_compressor.mix_precision"], [328, "module-neural_compressor.model.base_model"], [329, "module-neural_compressor.model"], [330, "module-neural_compressor.model.keras_model"], [331, "module-neural_compressor.model.model"], [332, "module-neural_compressor.model.mxnet_model"], [333, "module-neural_compressor.model.nets_factory"], [334, "module-neural_compressor.model.onnx_model"], [335, "module-neural_compressor.model.tensorflow_model"], [336, "module-neural_compressor.model.torch_model"], [337, "module-neural_compressor.objective"], [338, "module-neural_compressor.profiling"], [339, "module-neural_compressor.profiling.parser.factory"], [340, "module-neural_compressor.profiling.parser"], [341, "module-neural_compressor.profiling.parser.onnx_parser.factory"], [342, "module-neural_compressor.profiling.parser.onnx_parser"], [343, "module-neural_compressor.profiling.parser.onnx_parser.parser"], [344, "module-neural_compressor.profiling.parser.parser"], [345, "module-neural_compressor.profiling.parser.result"], [346, "module-neural_compressor.profiling.parser.tensorflow_parser.factory"], [347, "module-neural_compressor.profiling.parser.tensorflow_parser"], [348, "module-neural_compressor.profiling.parser.tensorflow_parser.parser"], [349, "module-neural_compressor.profiling.profiler.factory"], [350, "module-neural_compressor.profiling.profiler"], [351, "module-neural_compressor.profiling.profiler.onnxrt_profiler.factory"], [352, "module-neural_compressor.profiling.profiler.onnxrt_profiler"], [353, "module-neural_compressor.profiling.profiler.onnxrt_profiler.profiler"], [354, "module-neural_compressor.profiling.profiler.onnxrt_profiler.utils"], [355, "module-neural_compressor.profiling.profiler.profiler"], [356, "module-neural_compressor.profiling.profiler.tensorflow_profiler.factory"], [357, "module-neural_compressor.profiling.profiler.tensorflow_profiler"], [358, "module-neural_compressor.profiling.profiler.tensorflow_profiler.profiler"], [359, "module-neural_compressor.profiling.profiler.tensorflow_profiler.utils"], [360, "module-neural_compressor.quantization"], [361, "module-neural_compressor.strategy.auto"], [362, "module-neural_compressor.strategy.auto_mixed_precision"], [363, "module-neural_compressor.strategy.basic"], [364, "module-neural_compressor.strategy.bayesian"], [365, "module-neural_compressor.strategy.conservative"], [366, "module-neural_compressor.strategy.exhaustive"], [367, "module-neural_compressor.strategy.hawq_v2"], [368, "module-neural_compressor.strategy"], [369, "module-neural_compressor.strategy.mse"], [370, "module-neural_compressor.strategy.mse_v2"], [371, "module-neural_compressor.strategy.random"], [372, "module-neural_compressor.strategy.strategy"], [373, "module-neural_compressor.strategy.utils.constant"], [374, "module-neural_compressor.strategy.utils"], [375, "module-neural_compressor.strategy.utils.tuning_sampler"], [376, "module-neural_compressor.strategy.utils.tuning_space"], [377, "module-neural_compressor.strategy.utils.tuning_structs"], [378, "module-neural_compressor.strategy.utils.utility"], [379, "module-neural_compressor.template.api_doc_example"], [380, "module-neural_compressor.template"], [381, "module-neural_compressor.training"], [382, "module-neural_compressor.utils.collect_layer_histogram"], [383, "module-neural_compressor.utils.constant"], [384, "module-neural_compressor.utils.create_obj_from_config"], [385, "module-neural_compressor.utils"], [386, "module-neural_compressor.utils.kl_divergence"], [387, "module-neural_compressor.utils.load_huggingface"], [388, "module-neural_compressor.utils.logger"], [389, "module-neural_compressor.utils.neural_insights_utils"], [390, "module-neural_compressor.utils.options"], [391, "module-neural_compressor.utils.pytorch"], [392, "module-neural_compressor.utils.utility"], [393, "module-neural_compressor.utils.weights_details"], [394, "module-neural_compressor.version"]], "adaptor (class in neural_compressor.adaptor.adaptor)": [[1, "neural_compressor.adaptor.adaptor.Adaptor"]], "adaptor_registry() (in module neural_compressor.adaptor.adaptor)": [[1, "neural_compressor.adaptor.adaptor.adaptor_registry"]], "neural_compressor.adaptor.adaptor": [[1, "module-neural_compressor.adaptor.adaptor"]], "neural_compressor.adaptor": [[2, "module-neural_compressor.adaptor"]], "kerasadaptor (class in neural_compressor.adaptor.keras)": [[3, "neural_compressor.adaptor.keras.KerasAdaptor"]], "kerasquery (class in neural_compressor.adaptor.keras)": [[3, "neural_compressor.adaptor.keras.KerasQuery"]], "neural_compressor.adaptor.keras": [[3, "module-neural_compressor.adaptor.keras"]], "neural_compressor.adaptor.keras_utils.conv2d": [[4, "module-neural_compressor.adaptor.keras_utils.conv2d"]], "neural_compressor.adaptor.keras_utils.dense": [[5, "module-neural_compressor.adaptor.keras_utils.dense"]], "neural_compressor.adaptor.keras_utils.depthwise_conv2d": [[6, "module-neural_compressor.adaptor.keras_utils.depthwise_conv2d"]], "neural_compressor.adaptor.keras_utils": [[7, "module-neural_compressor.adaptor.keras_utils"]], "neural_compressor.adaptor.keras_utils.pool2d": [[8, "module-neural_compressor.adaptor.keras_utils.pool2d"]], "neural_compressor.adaptor.keras_utils.quantizer": [[9, "module-neural_compressor.adaptor.keras_utils.quantizer"]], "neural_compressor.adaptor.keras_utils.separable_conv2d": [[10, "module-neural_compressor.adaptor.keras_utils.separable_conv2d"]], "mxnetquery (class in neural_compressor.adaptor.mxnet)": [[11, "neural_compressor.adaptor.mxnet.MXNetQuery"]], "mxnetadaptor (class in neural_compressor.adaptor.mxnet)": [[11, "neural_compressor.adaptor.mxnet.MxNetAdaptor"]], "neural_compressor.adaptor.mxnet": [[11, "module-neural_compressor.adaptor.mxnet"]], "neural_compressor.adaptor.mxnet_utils": [[12, "module-neural_compressor.adaptor.mxnet_utils"]], "calibcollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CalibCollector"]], "calibdata (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CalibData"]], "collectorbase (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.CollectorBase"]], "dataiterloader (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.DataIterLoader"]], "dataloaderwrap (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.DataLoaderWrap"]], "namecollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.NameCollector"]], "optype (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.OpType"]], "tensorcollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.TensorCollector"]], "amp_convert() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.amp_convert"]], "calib_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.calib_model"]], "check_mx_version() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.check_mx_version"]], "combine_capabilities() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.combine_capabilities"]], "create_data_example() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.create_data_example"]], "distribute_calib_tensors() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.distribute_calib_tensors"]], "ensure_list() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.ensure_list"]], "fuse() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.fuse"]], "get_framework_name() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.get_framework_name"]], "is_model_quantized() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.is_model_quantized"]], "isiterable() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.isiterable"]], "make_module() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.make_module"]], "make_nc_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.make_nc_model"]], "make_symbol_block() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.make_symbol_block"]], "ndarray_to_device() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.ndarray_to_device"]], "neural_compressor.adaptor.mxnet_utils.util": [[13, "module-neural_compressor.adaptor.mxnet_utils.util"]], "parse_tune_config() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.parse_tune_config"]], "prepare_dataloader() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.prepare_dataloader"]], "prepare_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.prepare_model"]], "prepare_model_data() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.prepare_model_data"]], "quantize_sym_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.quantize_sym_model"]], "query_quantizable_nodes() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.query_quantizable_nodes"]], "run_forward() (in module neural_compressor.adaptor.mxnet_utils.util)": [[13, "neural_compressor.adaptor.mxnet_utils.util.run_forward"]], "onnxrtquery (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRTQuery"]], "onnxrt_integeropsadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRT_IntegerOpsAdaptor"]], "onnxrt_qdqadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRT_QDQAdaptor"]], "onnxrt_qlinearopsadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRT_QLinearOpsAdaptor"]], "onnxruntimeadaptor (class in neural_compressor.adaptor.onnxrt)": [[14, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor"]], "neural_compressor.adaptor.onnxrt": [[14, "module-neural_compressor.adaptor.onnxrt"]], "onnxrtaugment (class in neural_compressor.adaptor.ox_utils.calibration)": [[15, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment"]], "neural_compressor.adaptor.ox_utils.calibration": [[15, "module-neural_compressor.adaptor.ox_utils.calibration"]], "calibratorbase (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.CalibratorBase"]], "histogramcollector (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.HistogramCollector"]], "klcalibrator (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.KLCalibrator"]], "minmaxcalibrator (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.MinMaxCalibrator"]], "percentilecalibrator (class in neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.PercentileCalibrator"]], "calib_registry() (in module neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.calib_registry"]], "neural_compressor.adaptor.ox_utils.calibrator": [[16, "module-neural_compressor.adaptor.ox_utils.calibrator"]], "smooth_distribution() (in module neural_compressor.adaptor.ox_utils.calibrator)": [[16, "neural_compressor.adaptor.ox_utils.calibrator.smooth_distribution"]], "neural_compressor.adaptor.ox_utils": [[17, "module-neural_compressor.adaptor.ox_utils"]], "activationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[18, "neural_compressor.adaptor.ox_utils.operators.activation.ActivationOperator"]], "float16activationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[18, "neural_compressor.adaptor.ox_utils.operators.activation.Float16ActivationOperator"]], "qactivationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[18, "neural_compressor.adaptor.ox_utils.operators.activation.QActivationOperator"]], "removableactivationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[18, "neural_compressor.adaptor.ox_utils.operators.activation.RemovableActivationOperator"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[18, "module-neural_compressor.adaptor.ox_utils.operators.activation"]], "argmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.argmax)": [[19, "neural_compressor.adaptor.ox_utils.operators.argmax.ArgMaxOperator"]], "qargmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.argmax)": [[19, "neural_compressor.adaptor.ox_utils.operators.argmax.QArgMaxOperator"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[19, "module-neural_compressor.adaptor.ox_utils.operators.argmax"]], "attentionoperator (class in neural_compressor.adaptor.ox_utils.operators.attention)": [[20, "neural_compressor.adaptor.ox_utils.operators.attention.AttentionOperator"]], "qattentionoperator (class in neural_compressor.adaptor.ox_utils.operators.attention)": [[20, "neural_compressor.adaptor.ox_utils.operators.attention.QAttentionOperator"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[20, "module-neural_compressor.adaptor.ox_utils.operators.attention"]], "binaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[21, "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryOperator"]], "float16binaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[21, "neural_compressor.adaptor.ox_utils.operators.binary_op.Float16BinaryOperator"]], "qbinaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[21, "neural_compressor.adaptor.ox_utils.operators.binary_op.QBinaryOperator"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[21, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"]], "concatoperator (class in neural_compressor.adaptor.ox_utils.operators.concat)": [[22, "neural_compressor.adaptor.ox_utils.operators.concat.ConcatOperator"]], "qconcatoperator (class in neural_compressor.adaptor.ox_utils.operators.concat)": [[22, "neural_compressor.adaptor.ox_utils.operators.concat.QConcatOperator"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[22, "module-neural_compressor.adaptor.ox_utils.operators.concat"]], "convoperator (class in neural_compressor.adaptor.ox_utils.operators.conv)": [[23, "neural_compressor.adaptor.ox_utils.operators.conv.ConvOperator"]], "qconvoperator (class in neural_compressor.adaptor.ox_utils.operators.conv)": [[23, "neural_compressor.adaptor.ox_utils.operators.conv.QConvOperator"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[23, "module-neural_compressor.adaptor.ox_utils.operators.conv"]], "direct8bitoperator (class in neural_compressor.adaptor.ox_utils.operators.direct_q8)": [[24, "neural_compressor.adaptor.ox_utils.operators.direct_q8.Direct8BitOperator"]], "qdirectoperator (class in neural_compressor.adaptor.ox_utils.operators.direct_q8)": [[24, "neural_compressor.adaptor.ox_utils.operators.direct_q8.QDirectOperator"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[24, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"]], "embedlayernormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.embed_layernorm)": [[25, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.EmbedLayerNormalizationOperator"]], "qembedlayernormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.embed_layernorm)": [[25, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.QEmbedLayerNormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[25, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"]], "gatheroperator (class in neural_compressor.adaptor.ox_utils.operators.gather)": [[26, "neural_compressor.adaptor.ox_utils.operators.gather.GatherOperator"]], "qgatheroperator (class in neural_compressor.adaptor.ox_utils.operators.gather)": [[26, "neural_compressor.adaptor.ox_utils.operators.gather.QGatherOperator"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[26, "module-neural_compressor.adaptor.ox_utils.operators.gather"]], "globalaveragepooloperator (class in neural_compressor.adaptor.ox_utils.operators.gavgpool)": [[27, "neural_compressor.adaptor.ox_utils.operators.gavgpool.GlobalAveragePoolOperator"]], "qglobalaveragepooloperator (class in neural_compressor.adaptor.ox_utils.operators.gavgpool)": [[27, "neural_compressor.adaptor.ox_utils.operators.gavgpool.QGlobalAveragePoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[27, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"]], "gemmoperator (class in neural_compressor.adaptor.ox_utils.operators.gemm)": [[28, "neural_compressor.adaptor.ox_utils.operators.gemm.GemmOperator"]], "qgemmoperator (class in neural_compressor.adaptor.ox_utils.operators.gemm)": [[28, "neural_compressor.adaptor.ox_utils.operators.gemm.QGemmOperator"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[28, "module-neural_compressor.adaptor.ox_utils.operators.gemm"]], "neural_compressor.adaptor.ox_utils.operators": [[29, "module-neural_compressor.adaptor.ox_utils.operators"]], "lstmoperator (class in neural_compressor.adaptor.ox_utils.operators.lstm)": [[30, "neural_compressor.adaptor.ox_utils.operators.lstm.LSTMOperator"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[30, "module-neural_compressor.adaptor.ox_utils.operators.lstm"]], "fusedmatmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[31, "neural_compressor.adaptor.ox_utils.operators.matmul.FusedMatMulOperator"]], "matmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[31, "neural_compressor.adaptor.ox_utils.operators.matmul.MatMulOperator"]], "qmatmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[31, "neural_compressor.adaptor.ox_utils.operators.matmul.QMatMulOperator"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[31, "module-neural_compressor.adaptor.ox_utils.operators.matmul"]], "maxpooloperator (class in neural_compressor.adaptor.ox_utils.operators.maxpool)": [[32, "neural_compressor.adaptor.ox_utils.operators.maxpool.MaxPoolOperator"]], "qmaxpooloperator (class in neural_compressor.adaptor.ox_utils.operators.maxpool)": [[32, "neural_compressor.adaptor.ox_utils.operators.maxpool.QMaxPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[32, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"]], "batchnormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.norm)": [[33, "neural_compressor.adaptor.ox_utils.operators.norm.BatchNormalizationOperator"]], "normalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.norm)": [[33, "neural_compressor.adaptor.ox_utils.operators.norm.NormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.norm": [[33, "module-neural_compressor.adaptor.ox_utils.operators.norm"]], "operator (class in neural_compressor.adaptor.ox_utils.operators.ops)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.Operator"]], "qoperator (class in neural_compressor.adaptor.ox_utils.operators.ops)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.QOperator"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[34, "module-neural_compressor.adaptor.ox_utils.operators.ops"]], "op_registry() (in module neural_compressor.adaptor.ox_utils.operators.ops)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.op_registry"]], "qop_registry() (in module neural_compressor.adaptor.ox_utils.operators.ops)": [[34, "neural_compressor.adaptor.ox_utils.operators.ops.qop_registry"]], "padoperator (class in neural_compressor.adaptor.ox_utils.operators.pad)": [[35, "neural_compressor.adaptor.ox_utils.operators.pad.PadOperator"]], "qpadoperator (class in neural_compressor.adaptor.ox_utils.operators.pad)": [[35, "neural_compressor.adaptor.ox_utils.operators.pad.QPadOperator"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[35, "module-neural_compressor.adaptor.ox_utils.operators.pad"]], "pooloperator (class in neural_compressor.adaptor.ox_utils.operators.pooling)": [[36, "neural_compressor.adaptor.ox_utils.operators.pooling.PoolOperator"]], "qpooloperator (class in neural_compressor.adaptor.ox_utils.operators.pooling)": [[36, "neural_compressor.adaptor.ox_utils.operators.pooling.QPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[36, "module-neural_compressor.adaptor.ox_utils.operators.pooling"]], "reduceoperator (class in neural_compressor.adaptor.ox_utils.operators.reduce)": [[37, "neural_compressor.adaptor.ox_utils.operators.reduce.ReduceOperator"]], "neural_compressor.adaptor.ox_utils.operators.reduce": [[37, "module-neural_compressor.adaptor.ox_utils.operators.reduce"]], "qresizeoperator (class in neural_compressor.adaptor.ox_utils.operators.resize)": [[38, "neural_compressor.adaptor.ox_utils.operators.resize.QResizeOperator"]], "resizeoperator (class in neural_compressor.adaptor.ox_utils.operators.resize)": [[38, "neural_compressor.adaptor.ox_utils.operators.resize.ResizeOperator"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[38, "module-neural_compressor.adaptor.ox_utils.operators.resize"]], "qsplitoperator (class in neural_compressor.adaptor.ox_utils.operators.split)": [[39, "neural_compressor.adaptor.ox_utils.operators.split.QSplitOperator"]], "splitoperator (class in neural_compressor.adaptor.ox_utils.operators.split)": [[39, "neural_compressor.adaptor.ox_utils.operators.split.SplitOperator"]], "neural_compressor.adaptor.ox_utils.operators.split": [[39, "module-neural_compressor.adaptor.ox_utils.operators.split"]], "unaryoperator (class in neural_compressor.adaptor.ox_utils.operators.unary_op)": [[40, "neural_compressor.adaptor.ox_utils.operators.unary_op.UnaryOperator"]], "neural_compressor.adaptor.ox_utils.operators.unary_op": [[40, "module-neural_compressor.adaptor.ox_utils.operators.unary_op"]], "quantizer (class in neural_compressor.adaptor.ox_utils.quantizer)": [[41, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer"]], "neural_compressor.adaptor.ox_utils.quantizer": [[41, "module-neural_compressor.adaptor.ox_utils.quantizer"]], "ortsmoothquant (class in neural_compressor.adaptor.ox_utils.smooth_quant)": [[42, "neural_compressor.adaptor.ox_utils.smooth_quant.ORTSmoothQuant"]], "get_quant_dequant_output() (in module neural_compressor.adaptor.ox_utils.smooth_quant)": [[42, "neural_compressor.adaptor.ox_utils.smooth_quant.get_quant_dequant_output"]], "make_sub_graph() (in module neural_compressor.adaptor.ox_utils.smooth_quant)": [[42, "neural_compressor.adaptor.ox_utils.smooth_quant.make_sub_graph"]], "neural_compressor.adaptor.ox_utils.smooth_quant": [[42, "module-neural_compressor.adaptor.ox_utils.smooth_quant"]], "quant_dequant_data() (in module neural_compressor.adaptor.ox_utils.smooth_quant)": [[42, "neural_compressor.adaptor.ox_utils.smooth_quant.quant_dequant_data"]], "quantformat (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantFormat"]], "quanttype (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantType"]], "quantizationmode (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantizationMode"]], "quantizedinitializer (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantizedInitializer"]], "quantizedvalue (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantizedValue"]], "quantizedvaluetype (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantizedValueType"]], "valueinfo (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.ValueInfo"]], "attribute_to_kwarg() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.attribute_to_kwarg"]], "calculate_scale_zp() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.calculate_scale_zp"]], "cast_tensor() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.cast_tensor"]], "collate_preds() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.collate_preds"]], "dequantize_data() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.dequantize_data"]], "dequantize_data_with_scale_zero() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.dequantize_data_with_scale_zero"]], "dtype_to_name() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.dtype_to_name"]], "find_by_name() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.find_by_name"]], "float_to_bfloat16() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.float_to_bfloat16"]], "float_to_float16() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.float_to_float16"]], "is_b_transposed() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.is_B_transposed"]], "make_dquant_node() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.make_dquant_node"]], "make_quant_node() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.make_quant_node"]], "neural_compressor.adaptor.ox_utils.util": [[43, "module-neural_compressor.adaptor.ox_utils.util"]], "quantize_data() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.quantize_data"]], "quantize_data_per_channel() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.quantize_data_per_channel"]], "quantize_data_with_scale_zero() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.quantize_data_with_scale_zero"]], "quantize_nparray() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.quantize_nparray"]], "remove_init_from_model_input() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.remove_init_from_model_input"]], "split_shared_bias() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.split_shared_bias"]], "to_numpy() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.to_numpy"]], "trt_env_setup() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.trt_env_setup"]], "pytorchadaptor (class in neural_compressor.adaptor.pytorch)": [[44, "neural_compressor.adaptor.pytorch.PyTorchAdaptor"]], "pytorchweightonlyadaptor (class in neural_compressor.adaptor.pytorch)": [[44, "neural_compressor.adaptor.pytorch.PyTorchWeightOnlyAdaptor"]], "pytorch_fxadaptor (class in neural_compressor.adaptor.pytorch)": [[44, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor"]], "pytorch_ipexadaptor (class in neural_compressor.adaptor.pytorch)": [[44, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor"]], "templateadaptor (class in neural_compressor.adaptor.pytorch)": [[44, "neural_compressor.adaptor.pytorch.TemplateAdaptor"]], "get_ops_recursively() (in module neural_compressor.adaptor.pytorch)": [[44, "neural_compressor.adaptor.pytorch.get_ops_recursively"]], "neural_compressor.adaptor.pytorch": [[44, "module-neural_compressor.adaptor.pytorch"]], "querybackendcapability (class in neural_compressor.adaptor.query)": [[45, "neural_compressor.adaptor.query.QueryBackendCapability"]], "neural_compressor.adaptor.query": [[45, "module-neural_compressor.adaptor.query"]], "tensorflowadaptor (class in neural_compressor.adaptor.tensorflow)": [[46, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor"]], "tensorflowquery (class in neural_compressor.adaptor.tensorflow)": [[46, "neural_compressor.adaptor.tensorflow.TensorflowQuery"]], "tensorflow_itexadaptor (class in neural_compressor.adaptor.tensorflow)": [[46, "neural_compressor.adaptor.tensorflow.Tensorflow_ITEXAdaptor"]], "neural_compressor.adaptor.tensorflow": [[46, "module-neural_compressor.adaptor.tensorflow"]], "graphconverter (class in neural_compressor.adaptor.tf_utils.graph_converter)": [[47, "neural_compressor.adaptor.tf_utils.graph_converter.GraphConverter"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[47, "module-neural_compressor.adaptor.tf_utils.graph_converter"]], "graphconverterwithoutcalib (class in neural_compressor.adaptor.tf_utils.graph_converter_without_calib)": [[48, "neural_compressor.adaptor.tf_utils.graph_converter_without_calib.GraphConverterWithoutCalib"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[48, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"]], "bf16convert (class in neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert)": [[49, "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert.BF16Convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[49, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"]], "convertaddtobiasaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd)": [[51, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd.ConvertAddToBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"]], "convertlayoutoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout)": [[52, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout.ConvertLayoutOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"]], "convertleakyreluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu)": [[53, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu.ConvertLeakyReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"]], "convertnantorandom (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random)": [[54, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random.ConvertNanToRandom"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"]], "convertplaceholdertoconst (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const)": [[55, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"]], "dequantizecastoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer)": [[56, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer.DequantizeCastOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"]], "dilatedcontraction (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction)": [[57, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction.DilatedContraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"]], "injectdummybiasaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd)": [[58, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd.InjectDummyBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"]], "expanddimsoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer)": [[59, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer.ExpandDimsOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"]], "fetchweightfromreshapeoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape)": [[60, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape.FetchWeightFromReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "foldbatchnormnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm)": [[61, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"]], "graphfoldconstantoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant)": [[62, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"]], "fusebiasaddandaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add)": [[63, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add.FuseBiasAddAndAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"]], "fusecolumnwisemuloptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul)": [[64, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul.FuseColumnWiseMulOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"]], "fuseconvwithmathoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math)": [[65, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math.FuseConvWithMathOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"]], "fusedecomposedbnoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.FuseDecomposedBNOptimizer"]], "bypass_reshape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.bypass_reshape"]], "get_const_dim_count() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.get_const_dim_count"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_name_from_input"]], "valid_reshape_inputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.valid_reshape_inputs"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.values_from_const"]], "fusedecomposedinoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.FuseDecomposedINOptimizer"]], "bypass_reshape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.bypass_reshape"]], "get_const_dim_count() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.get_const_dim_count"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.node_name_from_input"]], "valid_reshape_inputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.valid_reshape_inputs"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.values_from_const"]], "fusegeluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu.FuseGeluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"]], "fuselayernormoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[69, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.FuseLayerNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[69, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[69, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.node_name_from_input"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[69, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.values_from_const"]], "fusepadwithconv2doptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv)": [[70, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv.FusePadWithConv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"]], "fusepadwithfp32conv2doptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv)": [[71, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.FusePadWithFP32Conv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "fusetransposereshapeoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose)": [[72, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose.FuseTransposeReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"]], "graphcseoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer)": [[73, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer.GraphCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"]], "grappleroptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass)": [[74, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass.GrapplerOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"]], "insertprintminmaxnode (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node)": [[76, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node.InsertPrintMinMaxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"]], "movesqueezeafterreluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu)": [[77, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu.MoveSqueezeAfterReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"]], "preoptimization (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize)": [[78, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.PreOptimization"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"]], "removetrainingnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes)": [[79, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes.RemoveTrainingNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"]], "renamebatchnormoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm)": [[80, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm.RenameBatchNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"]], "splitsharedinputoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input)": [[81, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input.SplitSharedInputOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"]], "stripequivalentnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes)": [[82, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes.StripEquivalentNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"]], "stripunusednodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes)": [[83, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes.StripUnusedNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"]], "switchoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer)": [[84, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer.SwitchOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"]], "graphrewriterbase (class in neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base)": [[85, "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base.GraphRewriterBase"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"]], "freezefakequantopoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant)": [[87, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant.FreezeFakeQuantOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"]], "freezevaluetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value)": [[88, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"]], "freezevaluewithoutcalibtransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib)": [[89, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"]], "fuseconvredundantdequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.FuseConvRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "fuseconvrequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize.FuseConvRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"]], "fusematmulredundantdequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize)": [[92, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.FuseMatMulRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "fusematmulrequantizedequantizenewapitransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[93, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeNewAPITransformer"]], "fusematmulrequantizedequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[93, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeTransformer"]], "fusematmulrequantizenewapitransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[93, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeNewAPITransformer"]], "fusematmulrequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[93, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"]], "metainfochangingmemopoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer)": [[95, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer.MetaInfoChangingMemOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"]], "posthostconstconverter (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter.PostHostConstConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"]], "postcseoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse.PostCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"]], "quantizedrnnconverter (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert.QuantizedRNNConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"]], "scalepropagationtransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation.ScaleProPagationTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"]], "onnxgraph (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"]], "onnxnode (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node)": [[102, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"]], "onnxopschema (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.OnnxOpSchema"]], "get_max_supported_opset_version() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.get_max_supported_opset_version"]], "get_schema() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.get_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"]], "seqtype (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.SeqType"]], "add_port_to_name() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.add_port_to_name"]], "are_shapes_equal() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.are_shapes_equal"]], "assert_error() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.assert_error"]], "compute_const_folding_using_tf() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.compute_const_folding_using_tf"]], "convert_tensorflow_tensor_to_onnx() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.convert_tensorflow_tensor_to_onnx"]], "find_opset() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.find_opset"]], "get_index_from_strided_slice_of_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_index_from_strided_slice_of_shape"]], "get_subgraphs_from_onnx() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_subgraphs_from_onnx"]], "get_tensorflow_node_attr() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_node_attr"]], "get_tensorflow_node_shape_attr() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_node_shape_attr"]], "get_tensorflow_tensor_data() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_tensor_data"]], "get_tensorflow_tensor_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_tensor_shape"]], "infer_onnx_shape_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.infer_onnx_shape_dtype"]], "initialize_name_counter() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.initialize_name_counter"]], "is_list_or_tuple() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.is_list_or_tuple"]], "is_onnx_domain() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.is_onnx_domain"]], "make_onnx_inputs_outputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.make_onnx_inputs_outputs"]], "make_onnx_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.make_onnx_shape"]], "map_numpy_to_onnx_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_numpy_to_onnx_dtype"]], "map_onnx_to_numpy_type() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_onnx_to_numpy_type"]], "map_tensorflow_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_tensorflow_dtype"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"]], "read_tensorflow_node_attrs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.read_tensorflow_node_attrs"]], "save_protobuf() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.save_protobuf"]], "set_name() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.set_name"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"]], "generategraphwithqdqpattern (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern)": [[106, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern.GenerateGraphWithQDQPattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"]], "mergeduplicatedqdqoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq)": [[107, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq.MergeDuplicatedQDQOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "shareqdqforitexypatternoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern)": [[108, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern.ShareQDQForItexYPatternOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "graphanalyzer (class in neural_compressor.adaptor.tf_utils.graph_util)": [[109, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer"]], "graphrewriterhelper (class in neural_compressor.adaptor.tf_utils.graph_util)": [[109, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper"]], "neural_compressor.adaptor.tf_utils.graph_util": [[109, "module-neural_compressor.adaptor.tf_utils.graph_util"]], "neural_compressor.adaptor.tf_utils": [[110, "module-neural_compressor.adaptor.tf_utils"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[111, "module-neural_compressor.adaptor.tf_utils.quantize_graph"]], "fakequantize (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize)": [[112, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantize"]], "fakequantizebase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize)": [[112, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantizeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[112, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"]], "quantizeconfig (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config)": [[114, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"]], "init_quantize_config() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper)": [[115, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper.init_quantize_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"]], "qat_clone_function() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper)": [[115, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper.qat_clone_function"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"]], "config_quantizable_layers() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer)": [[117, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer.config_quantizable_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "quantizelayeradd (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add)": [[118, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add.QuantizeLayerAdd"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "quantizelayerbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base)": [[119, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base.QuantizeLayerBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "quantizelayerbatchnormalization (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn)": [[120, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn.QuantizeLayerBatchNormalization"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "quantizewrapper (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper)": [[121, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapper"]], "quantizewrapperbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper)": [[121, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn)": [[122, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2)": [[123, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv)": [[124, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"]], "fusenodestartwithdeconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv)": [[125, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"]], "fusenodestartwithfusedinstancenorm (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in)": [[126, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"]], "fusenodestartwithmatmul (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul)": [[127, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"]], "fusenodestartwithpooling (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling)": [[128, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"]], "optimizeqdqgraph (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq)": [[130, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.OptimizeQDQGraph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"]], "quantizegraphbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base)": [[131, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase"]], "quantizenodebase (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base)": [[131, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn)": [[132, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2)": [[133, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv)": [[134, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"]], "quantizegraphforintel (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu)": [[135, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu.QuantizeGraphForIntel"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[135, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"]], "fusenodestartwithmatmul (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul)": [[136, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"]], "fusenodestartwithpooling (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling)": [[137, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[137, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"]], "quantizegraphhelper (class in neural_compressor.adaptor.tf_utils.quantize_graph_common)": [[138, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[138, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"]], "smoothquantcalibration (class in neural_compressor.adaptor.tf_utils.smooth_quant_calibration)": [[139, "neural_compressor.adaptor.tf_utils.smooth_quant_calibration.SmoothQuantCalibration"]], "neural_compressor.adaptor.tf_utils.smooth_quant_calibration": [[139, "module-neural_compressor.adaptor.tf_utils.smooth_quant_calibration"]], "smoothquantscaler (class in neural_compressor.adaptor.tf_utils.smooth_quant_scaler)": [[140, "neural_compressor.adaptor.tf_utils.smooth_quant_scaler.SmoothQuantScaler"]], "neural_compressor.adaptor.tf_utils.smooth_quant_scaler": [[140, "module-neural_compressor.adaptor.tf_utils.smooth_quant_scaler"]], "tensorflowqdqtoonnxqdqconverter (class in neural_compressor.adaptor.tf_utils.tf2onnx_converter)": [[141, "neural_compressor.adaptor.tf_utils.tf2onnx_converter.TensorflowQDQToOnnxQDQConverter"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[141, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"]], "biascorrection (class in neural_compressor.adaptor.tf_utils.transform_graph.bias_correction)": [[142, "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction.BiasCorrection"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[142, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"]], "graphtransformbase (class in neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base)": [[143, "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.GraphTransformBase"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[143, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[144, "module-neural_compressor.adaptor.tf_utils.transform_graph"]], "insertlogging (class in neural_compressor.adaptor.tf_utils.transform_graph.insert_logging)": [[145, "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging.InsertLogging"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[145, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"]], "rerangequantizedconcat (class in neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat)": [[146, "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat.RerangeQuantizedConcat"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[146, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"]], "collate_tf_preds() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.collate_tf_preds"]], "disable_random() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.disable_random"]], "fix_ref_type_of_graph_def() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.fix_ref_type_of_graph_def"]], "generate_feed_dict() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.generate_feed_dict"]], "get_estimator_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.get_estimator_graph"]], "get_graph_def() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.get_graph_def"]], "get_input_output_node_names() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.get_input_output_node_names"]], "get_model_input_shape() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.get_model_input_shape"]], "get_tensor_by_name() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.get_tensor_by_name"]], "get_tensor_val_from_graph_node() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.get_tensor_val_from_graph_node"]], "get_weight_from_input_tensor() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.get_weight_from_input_tensor"]], "int8_node_name_reverse() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.int8_node_name_reverse"]], "is_ckpt_format() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.is_ckpt_format"]], "is_saved_model_format() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.is_saved_model_format"]], "iterator_sess_run() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.iterator_sess_run"]], "neural_compressor.adaptor.tf_utils.util": [[147, "module-neural_compressor.adaptor.tf_utils.util"]], "read_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.read_graph"]], "strip_equivalent_nodes() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.strip_equivalent_nodes"]], "strip_unused_nodes() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.strip_unused_nodes"]], "tf_diagnosis_helper() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.tf_diagnosis_helper"]], "version1_eq_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.version1_eq_version2"]], "version1_gt_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.version1_gt_version2"]], "version1_gte_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.version1_gte_version2"]], "version1_lt_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.version1_lt_version2"]], "version1_lte_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.version1_lte_version2"]], "write_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[147, "neural_compressor.adaptor.tf_utils.util.write_graph"]], "bf16modulewrapper (class in neural_compressor.adaptor.torch_utils.bf16_convert)": [[148, "neural_compressor.adaptor.torch_utils.bf16_convert.BF16ModuleWrapper"]], "convert() (in module neural_compressor.adaptor.torch_utils.bf16_convert)": [[148, "neural_compressor.adaptor.torch_utils.bf16_convert.Convert"]], "bf16_symbolic_trace() (in module neural_compressor.adaptor.torch_utils.bf16_convert)": [[148, "neural_compressor.adaptor.torch_utils.bf16_convert.bf16_symbolic_trace"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[148, "module-neural_compressor.adaptor.torch_utils.bf16_convert"]], "gptq (class in neural_compressor.adaptor.torch_utils.gptq)": [[149, "neural_compressor.adaptor.torch_utils.gptq.GPTQ"]], "gptquantizer (class in neural_compressor.adaptor.torch_utils.gptq)": [[149, "neural_compressor.adaptor.torch_utils.gptq.GPTQuantizer"]], "find_layers() (in module neural_compressor.adaptor.torch_utils.gptq)": [[149, "neural_compressor.adaptor.torch_utils.gptq.find_layers"]], "find_layers_name() (in module neural_compressor.adaptor.torch_utils.gptq)": [[149, "neural_compressor.adaptor.torch_utils.gptq.find_layers_name"]], "is_leaf() (in module neural_compressor.adaptor.torch_utils.gptq)": [[149, "neural_compressor.adaptor.torch_utils.gptq.is_leaf"]], "log_quantizable_layers_per_transformer() (in module neural_compressor.adaptor.torch_utils.gptq)": [[149, "neural_compressor.adaptor.torch_utils.gptq.log_quantizable_layers_per_transformer"]], "neural_compressor.adaptor.torch_utils.gptq": [[149, "module-neural_compressor.adaptor.torch_utils.gptq"]], "quantize() (in module neural_compressor.adaptor.torch_utils.gptq)": [[149, "neural_compressor.adaptor.torch_utils.gptq.quantize"]], "trace_gptq_target_blocks() (in module neural_compressor.adaptor.torch_utils.gptq)": [[149, "neural_compressor.adaptor.torch_utils.gptq.trace_gptq_target_blocks"]], "hessiantrace (class in neural_compressor.adaptor.torch_utils.hawq_metric)": [[150, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace"]], "node_collector (class in neural_compressor.adaptor.torch_utils.hawq_metric)": [[150, "neural_compressor.adaptor.torch_utils.hawq_metric.Node_collector"]], "compare_weights() (in module neural_compressor.adaptor.torch_utils.hawq_metric)": [[150, "neural_compressor.adaptor.torch_utils.hawq_metric.compare_weights"]], "hawq_top() (in module neural_compressor.adaptor.torch_utils.hawq_metric)": [[150, "neural_compressor.adaptor.torch_utils.hawq_metric.hawq_top"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[150, "module-neural_compressor.adaptor.torch_utils.hawq_metric"]], "neural_compressor.adaptor.torch_utils": [[151, "module-neural_compressor.adaptor.torch_utils"]], "ipex_mixed_precision() (in module neural_compressor.adaptor.torch_utils.mixed_precision)": [[152, "neural_compressor.adaptor.torch_utils.mixed_precision.ipex_mixed_precision"]], "neural_compressor.adaptor.torch_utils.mixed_precision": [[152, "module-neural_compressor.adaptor.torch_utils.mixed_precision"]], "neural_compressor.adaptor.torch_utils.model_wrapper": [[153, "module-neural_compressor.adaptor.torch_utils.model_wrapper"]], "transformerbasedmodelblockpatterndetector (class in neural_compressor.adaptor.torch_utils.pattern_detector)": [[154, "neural_compressor.adaptor.torch_utils.pattern_detector.TransformerBasedModelBlockPatternDetector"]], "neural_compressor.adaptor.torch_utils.pattern_detector": [[154, "module-neural_compressor.adaptor.torch_utils.pattern_detector"]], "graphtrace (class in neural_compressor.adaptor.torch_utils.smooth_quant)": [[155, "neural_compressor.adaptor.torch_utils.smooth_quant.GraphTrace"]], "torchsmoothquant (class in neural_compressor.adaptor.torch_utils.smooth_quant)": [[155, "neural_compressor.adaptor.torch_utils.smooth_quant.TorchSmoothQuant"]], "get_module() (in module neural_compressor.adaptor.torch_utils.smooth_quant)": [[155, "neural_compressor.adaptor.torch_utils.smooth_quant.get_module"]], "neural_compressor.adaptor.torch_utils.smooth_quant": [[155, "module-neural_compressor.adaptor.torch_utils.smooth_quant"]], "set_module() (in module neural_compressor.adaptor.torch_utils.smooth_quant)": [[155, "neural_compressor.adaptor.torch_utils.smooth_quant.set_module"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[156, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"]], "symbolic_trace() (in module neural_compressor.adaptor.torch_utils.symbolic_trace)": [[156, "neural_compressor.adaptor.torch_utils.symbolic_trace.symbolic_trace"]], "trace_and_fuse_sub_graph() (in module neural_compressor.adaptor.torch_utils.symbolic_trace)": [[156, "neural_compressor.adaptor.torch_utils.symbolic_trace.trace_and_fuse_sub_graph"]], "append_attr() (in module neural_compressor.adaptor.torch_utils.util)": [[157, "neural_compressor.adaptor.torch_utils.util.append_attr"]], "auto_copy() (in module neural_compressor.adaptor.torch_utils.util)": [[157, "neural_compressor.adaptor.torch_utils.util.auto_copy"]], "calculate_quant_min_max() (in module neural_compressor.adaptor.torch_utils.util)": [[157, "neural_compressor.adaptor.torch_utils.util.calculate_quant_min_max"]], "check_cfg_and_qconfig() (in module neural_compressor.adaptor.torch_utils.util)": [[157, "neural_compressor.adaptor.torch_utils.util.check_cfg_and_qconfig"]], "collate_torch_preds() (in module neural_compressor.adaptor.torch_utils.util)": [[157, "neural_compressor.adaptor.torch_utils.util.collate_torch_preds"]], "collect_weight_info() (in module neural_compressor.adaptor.torch_utils.util)": [[157, "neural_compressor.adaptor.torch_utils.util.collect_weight_info"]], "fetch_module() (in module neural_compressor.adaptor.torch_utils.util)": [[157, "neural_compressor.adaptor.torch_utils.util.fetch_module"]], "generate_activation_observer() (in module neural_compressor.adaptor.torch_utils.util)": [[157, "neural_compressor.adaptor.torch_utils.util.generate_activation_observer"]], "get_depth() (in module neural_compressor.adaptor.torch_utils.util)": [[157, "neural_compressor.adaptor.torch_utils.util.get_depth"]], "get_dict_at_depth() (in module neural_compressor.adaptor.torch_utils.util)": [[157, "neural_compressor.adaptor.torch_utils.util.get_dict_at_depth"]], "get_element_under_depth() (in module neural_compressor.adaptor.torch_utils.util)": [[157, "neural_compressor.adaptor.torch_utils.util.get_element_under_depth"]], "get_embedding_contiguous() (in module neural_compressor.adaptor.torch_utils.util)": [[157, "neural_compressor.adaptor.torch_utils.util.get_embedding_contiguous"]], "get_example_input() (in module neural_compressor.adaptor.torch_utils.util)": [[157, "neural_compressor.adaptor.torch_utils.util.get_example_input"]], "get_fallback_order() (in module neural_compressor.adaptor.torch_utils.util)": [[157, "neural_compressor.adaptor.torch_utils.util.get_fallback_order"]], "get_mse_order_per_fp32() (in module neural_compressor.adaptor.torch_utils.util)": [[157, "neural_compressor.adaptor.torch_utils.util.get_mse_order_per_fp32"]], "get_mse_order_per_int8() (in module neural_compressor.adaptor.torch_utils.util)": [[157, "neural_compressor.adaptor.torch_utils.util.get_mse_order_per_int8"]], "get_op_type_by_name() (in module neural_compressor.adaptor.torch_utils.util)": [[157, "neural_compressor.adaptor.torch_utils.util.get_op_type_by_name"]], "get_quantizable_ops_from_cfgs() (in module neural_compressor.adaptor.torch_utils.util)": [[157, "neural_compressor.adaptor.torch_utils.util.get_quantizable_ops_from_cfgs"]], "get_torch_version() (in module neural_compressor.adaptor.torch_utils.util)": [[157, "neural_compressor.adaptor.torch_utils.util.get_torch_version"]], "input2tuple() (in module neural_compressor.adaptor.torch_utils.util)": [[157, "neural_compressor.adaptor.torch_utils.util.input2tuple"]], "is_fused_module() (in module neural_compressor.adaptor.torch_utils.util)": [[157, "neural_compressor.adaptor.torch_utils.util.is_fused_module"]], "match_datatype_pattern() (in module neural_compressor.adaptor.torch_utils.util)": [[157, "neural_compressor.adaptor.torch_utils.util.match_datatype_pattern"]], "neural_compressor.adaptor.torch_utils.util": [[157, "module-neural_compressor.adaptor.torch_utils.util"]], "paser_cfgs() (in module neural_compressor.adaptor.torch_utils.util)": [[157, "neural_compressor.adaptor.torch_utils.util.paser_cfgs"]], "set_module() (in module neural_compressor.adaptor.torch_utils.util)": [[157, "neural_compressor.adaptor.torch_utils.util.set_module"]], "simple_inference() (in module neural_compressor.adaptor.torch_utils.util)": [[157, "neural_compressor.adaptor.torch_utils.util.simple_inference"]], "update_sq_scale() (in module neural_compressor.adaptor.torch_utils.util)": [[157, "neural_compressor.adaptor.torch_utils.util.update_sq_scale"]], "awq_quantize() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[158, "neural_compressor.adaptor.torch_utils.weight_only.awq_quantize"]], "get_module_input_output() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[158, "neural_compressor.adaptor.torch_utils.weight_only.get_module_input_output"]], "gptq_quantize() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[158, "neural_compressor.adaptor.torch_utils.weight_only.gptq_quantize"]], "neural_compressor.adaptor.torch_utils.weight_only": [[158, "module-neural_compressor.adaptor.torch_utils.weight_only"]], "qdq_weight_actor() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[158, "neural_compressor.adaptor.torch_utils.weight_only.qdq_weight_actor"]], "qdq_weight_asym() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[158, "neural_compressor.adaptor.torch_utils.weight_only.qdq_weight_asym"]], "qdq_weight_sym() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[158, "neural_compressor.adaptor.torch_utils.weight_only.qdq_weight_sym"]], "quant_weight() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[158, "neural_compressor.adaptor.torch_utils.weight_only.quant_weight"]], "rtn_quantize() (in module neural_compressor.adaptor.torch_utils.weight_only)": [[158, "neural_compressor.adaptor.torch_utils.weight_only.rtn_quantize"]], "algorithms (class in neural_compressor.algorithm.algorithm)": [[159, "neural_compressor.algorithm.algorithm.ALGORITHMS"]], "algorithm (class in neural_compressor.algorithm.algorithm)": [[159, "neural_compressor.algorithm.algorithm.Algorithm"]], "algorithmscheduler (class in neural_compressor.algorithm.algorithm)": [[159, "neural_compressor.algorithm.algorithm.AlgorithmScheduler"]], "algorithm_registry() (in module neural_compressor.algorithm.algorithm)": [[159, "neural_compressor.algorithm.algorithm.algorithm_registry"]], "neural_compressor.algorithm.algorithm": [[159, "module-neural_compressor.algorithm.algorithm"]], "fastbiascorrection (class in neural_compressor.algorithm.fast_bias_correction)": [[160, "neural_compressor.algorithm.fast_bias_correction.FastBiasCorrection"]], "neural_compressor.algorithm.fast_bias_correction": [[160, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm": [[161, "module-neural_compressor.algorithm"]], "smoothquant (class in neural_compressor.algorithm.smooth_quant)": [[162, "neural_compressor.algorithm.smooth_quant.SmoothQuant"]], "neural_compressor.algorithm.smooth_quant": [[162, "module-neural_compressor.algorithm.smooth_quant"]], "weightcorrection (class in neural_compressor.algorithm.weight_correction)": [[163, "neural_compressor.algorithm.weight_correction.WeightCorrection"]], "neural_compressor.algorithm.weight_correction": [[163, "module-neural_compressor.algorithm.weight_correction"]], "benchmark_with_raw_cmd() (in module neural_compressor.benchmark)": [[164, "neural_compressor.benchmark.benchmark_with_raw_cmd"]], "call_one() (in module neural_compressor.benchmark)": [[164, "neural_compressor.benchmark.call_one"]], "config_instance() (in module neural_compressor.benchmark)": [[164, "neural_compressor.benchmark.config_instance"]], "fit() (in module neural_compressor.benchmark)": [[164, "neural_compressor.benchmark.fit"]], "generate_prefix() (in module neural_compressor.benchmark)": [[164, "neural_compressor.benchmark.generate_prefix"]], "get_architecture() (in module neural_compressor.benchmark)": [[164, "neural_compressor.benchmark.get_architecture"]], "get_bounded_threads() (in module neural_compressor.benchmark)": [[164, "neural_compressor.benchmark.get_bounded_threads"]], "get_core_ids() (in module neural_compressor.benchmark)": [[164, "neural_compressor.benchmark.get_core_ids"]], "get_physical_ids() (in module neural_compressor.benchmark)": [[164, "neural_compressor.benchmark.get_physical_ids"]], "get_threads() (in module neural_compressor.benchmark)": [[164, "neural_compressor.benchmark.get_threads"]], "get_threads_per_core() (in module neural_compressor.benchmark)": [[164, "neural_compressor.benchmark.get_threads_per_core"]], "neural_compressor.benchmark": [[164, "module-neural_compressor.benchmark"]], "profile() (in module neural_compressor.benchmark)": [[164, "neural_compressor.benchmark.profile"]], "run_instance() (in module neural_compressor.benchmark)": [[164, "neural_compressor.benchmark.run_instance"]], "set_all_env_var() (in module neural_compressor.benchmark)": [[164, "neural_compressor.benchmark.set_all_env_var"]], "set_env_var() (in module neural_compressor.benchmark)": [[164, "neural_compressor.benchmark.set_env_var"]], "summary_benchmark() (in module neural_compressor.benchmark)": [[164, "neural_compressor.benchmark.summary_benchmark"]], "basecallbacks (class in neural_compressor.compression.callbacks)": [[165, "neural_compressor.compression.callbacks.BaseCallbacks"]], "distillationcallbacks (class in neural_compressor.compression.callbacks)": [[165, "neural_compressor.compression.callbacks.DistillationCallbacks"]], "pruningcallbacks (class in neural_compressor.compression.callbacks)": [[165, "neural_compressor.compression.callbacks.PruningCallbacks"]], "quantizationawaretrainingcallbacks (class in neural_compressor.compression.callbacks)": [[165, "neural_compressor.compression.callbacks.QuantizationAwareTrainingCallbacks"]], "_epoch_ran (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[165, "neural_compressor.compression.callbacks.DistillationCallbacks._epoch_ran"]], "best_model (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[165, "neural_compressor.compression.callbacks.DistillationCallbacks.best_model"]], "best_score (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[165, "neural_compressor.compression.callbacks.DistillationCallbacks.best_score"]], "eval_frequency (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[165, "neural_compressor.compression.callbacks.DistillationCallbacks.eval_frequency"]], "neural_compressor.compression.callbacks": [[165, "module-neural_compressor.compression.callbacks"]], "criterions (class in neural_compressor.compression.distillation.criterions)": [[166, "neural_compressor.compression.distillation.criterions.Criterions"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[166, "neural_compressor.compression.distillation.criterions.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationframework (class in neural_compressor.compression.distillation.criterions)": [[166, "neural_compressor.compression.distillation.criterions.KnowledgeDistillationFramework"]], "knowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[166, "neural_compressor.compression.distillation.criterions.KnowledgeDistillationLoss"]], "pytorchcriterions (class in neural_compressor.compression.distillation.criterions)": [[166, "neural_compressor.compression.distillation.criterions.PyTorchCriterions"]], "pytorchintermediatelayersknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[166, "neural_compressor.compression.distillation.criterions.PyTorchIntermediateLayersKnowledgeDistillationLoss"]], "pytorchintermediatelayersknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[166, "neural_compressor.compression.distillation.criterions.PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"]], "pytorchknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[166, "neural_compressor.compression.distillation.criterions.PyTorchKnowledgeDistillationLoss"]], "pytorchknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[166, "neural_compressor.compression.distillation.criterions.PyTorchKnowledgeDistillationLossWrapper"]], "pytorchselfknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[166, "neural_compressor.compression.distillation.criterions.PyTorchSelfKnowledgeDistillationLoss"]], "pytorchselfknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[166, "neural_compressor.compression.distillation.criterions.PyTorchSelfKnowledgeDistillationLossWrapper"]], "selfknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[166, "neural_compressor.compression.distillation.criterions.SelfKnowledgeDistillationLoss"]], "tensorflowcriterions (class in neural_compressor.compression.distillation.criterions)": [[166, "neural_compressor.compression.distillation.criterions.TensorflowCriterions"]], "tensorflowknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[166, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLoss"]], "tensorflowknowledgedistillationlossexternal (class in neural_compressor.compression.distillation.criterions)": [[166, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLossExternal"]], "tensorflowknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[166, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLossWrapper"]], "criterion_registry() (in module neural_compressor.compression.distillation.criterions)": [[166, "neural_compressor.compression.distillation.criterions.criterion_registry"]], "neural_compressor.compression.distillation.criterions": [[166, "module-neural_compressor.compression.distillation.criterions"]], "neural_compressor.compression.distillation": [[167, "module-neural_compressor.compression.distillation"]], "neural_compressor.compression": [[168, "module-neural_compressor.compression"]], "gradientcriterion (class in neural_compressor.compression.pruner.criteria)": [[169, "neural_compressor.compression.pruner.criteria.GradientCriterion"]], "magnitudecriterion (class in neural_compressor.compression.pruner.criteria)": [[169, "neural_compressor.compression.pruner.criteria.MagnitudeCriterion"]], "pruningcriterion (class in neural_compressor.compression.pruner.criteria)": [[169, "neural_compressor.compression.pruner.criteria.PruningCriterion"]], "retrainfreecriterion (class in neural_compressor.compression.pruner.criteria)": [[169, "neural_compressor.compression.pruner.criteria.RetrainFreeCriterion"]], "snipcriterion (class in neural_compressor.compression.pruner.criteria)": [[169, "neural_compressor.compression.pruner.criteria.SnipCriterion"]], "snipmomentumblockcriterion (class in neural_compressor.compression.pruner.criteria)": [[169, "neural_compressor.compression.pruner.criteria.SnipMomentumBlockCriterion"]], "snipmomentumcriterion (class in neural_compressor.compression.pruner.criteria)": [[169, "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion"]], "get_criterion() (in module neural_compressor.compression.pruner.criteria)": [[169, "neural_compressor.compression.pruner.criteria.get_criterion"]], "neural_compressor.compression.pruner.criteria": [[169, "module-neural_compressor.compression.pruner.criteria"]], "register_criterion() (in module neural_compressor.compression.pruner.criteria)": [[169, "neural_compressor.compression.pruner.criteria.register_criterion"]], "scores (neural_compressor.compression.pruner.criteria.gradientcriterion attribute)": [[169, "neural_compressor.compression.pruner.criteria.GradientCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.magnitudecriterion attribute)": [[169, "neural_compressor.compression.pruner.criteria.MagnitudeCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.pruningcriterion attribute)": [[169, "neural_compressor.compression.pruner.criteria.PruningCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.retrainfreecriterion attribute)": [[169, "neural_compressor.compression.pruner.criteria.RetrainFreeCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.snipcriterion attribute)": [[169, "neural_compressor.compression.pruner.criteria.SnipCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.snipmomentumblockcriterion attribute)": [[169, "neural_compressor.compression.pruner.criteria.SnipMomentumBlockCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.snipmomentumcriterion attribute)": [[169, "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion.scores"]], "neural_compressor.compression.pruner": [[170, "module-neural_compressor.compression.pruner"]], "generate_ffn2_pruning_config() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[171, "neural_compressor.compression.pruner.model_slim.auto_slim.generate_ffn2_pruning_config"]], "generate_mha_pruning_config() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[171, "neural_compressor.compression.pruner.model_slim.auto_slim.generate_mha_pruning_config"]], "model_slim() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[171, "neural_compressor.compression.pruner.model_slim.auto_slim.model_slim"]], "model_slim_ffn2() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[171, "neural_compressor.compression.pruner.model_slim.auto_slim.model_slim_ffn2"]], "model_slim_mha() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[171, "neural_compressor.compression.pruner.model_slim.auto_slim.model_slim_mha"]], "neural_compressor.compression.pruner.model_slim.auto_slim": [[171, "module-neural_compressor.compression.pruner.model_slim.auto_slim"]], "parse_auto_slim_config() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[171, "neural_compressor.compression.pruner.model_slim.auto_slim.parse_auto_slim_config"]], "neural_compressor.compression.pruner.model_slim": [[172, "module-neural_compressor.compression.pruner.model_slim"]], "classifierheadsearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[173, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher"]], "classifierheadsearchertf (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[173, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF"]], "jitbasicsearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[173, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher"]], "linear2linearsearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[173, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher"]], "recipesearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[173, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher"]], "selfmhasearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[173, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher"]], "current_pattern (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[173, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.current_pattern"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[173, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearchertf attribute)": [[173, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[173, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[173, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[173, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.device"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[173, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearchertf attribute)": [[173, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[173, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[173, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[173, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.flatten_static_graph"]], "get_attributes() (in module neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[173, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.get_attributes"]], "get_common_module() (in module neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[173, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.get_common_module"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[173, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearchertf attribute)": [[173, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[173, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[173, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[173, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[173, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.model"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer": [[173, "module-neural_compressor.compression.pruner.model_slim.pattern_analyzer"]], "print_iterables() (in module neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[173, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.print_iterables"]], "recipe (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[173, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.recipe"]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[173, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.searching_results"]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[173, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.searching_results"]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[173, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.searching_results"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[173, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearchertf attribute)": [[173, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcherTF.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[173, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[173, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[173, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.static_graph"]], "target_layers (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[173, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.target_layers"]], "target_layers (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[173, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.target_layers"]], "target_op_lut (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[173, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.target_op_lut"]], "targets (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[173, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.targets"]], "linearcompression (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[174, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression"]], "linearcompressioniterator (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[174, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompressionIterator"]], "postcompressionutils (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[174, "neural_compressor.compression.pruner.model_slim.weight_slim.PostCompressionUtils"]], "device (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompression attribute)": [[174, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression.device"]], "layer_1 (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompression attribute)": [[174, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression.layer_1"]], "layer_2 (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompression attribute)": [[174, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression.layer_2"]], "linear_patterns (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompressioniterator attribute)": [[174, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompressionIterator.linear_patterns"]], "neural_compressor.compression.pruner.model_slim.weight_slim": [[174, "module-neural_compressor.compression.pruner.model_slim.weight_slim"]], "basepattern (class in neural_compressor.compression.pruner.patterns)": [[175, "neural_compressor.compression.pruner.patterns.BasePattern"]], "m (neural_compressor.compression.pruner.patterns.patternmha attribute)": [[175, "neural_compressor.compression.pruner.patterns.PatternMHA.M"]], "m (neural_compressor.compression.pruner.patterns.patternninm attribute)": [[175, "neural_compressor.compression.pruner.patterns.PatternNInM.M"]], "n (neural_compressor.compression.pruner.patterns.patternmha attribute)": [[175, "neural_compressor.compression.pruner.patterns.PatternMHA.N"]], "n (neural_compressor.compression.pruner.patterns.patternninm attribute)": [[175, "neural_compressor.compression.pruner.patterns.PatternNInM.N"]], "patternmha (class in neural_compressor.compression.pruner.patterns)": [[175, "neural_compressor.compression.pruner.patterns.PatternMHA"]], "patternninm (class in neural_compressor.compression.pruner.patterns)": [[175, "neural_compressor.compression.pruner.patterns.PatternNInM"]], "patternnxm (class in neural_compressor.compression.pruner.patterns)": [[175, "neural_compressor.compression.pruner.patterns.PatternNxM"]], "block_size (neural_compressor.compression.pruner.patterns.patternnxm attribute)": [[175, "neural_compressor.compression.pruner.patterns.PatternNxM.block_size"]], "config (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[175, "neural_compressor.compression.pruner.patterns.BasePattern.config"]], "get_pattern() (in module neural_compressor.compression.pruner.patterns)": [[175, "neural_compressor.compression.pruner.patterns.get_pattern"]], "invalid_layers (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[175, "neural_compressor.compression.pruner.patterns.BasePattern.invalid_layers"]], "is_global (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[175, "neural_compressor.compression.pruner.patterns.BasePattern.is_global"]], "keep_mask_layers (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[175, "neural_compressor.compression.pruner.patterns.BasePattern.keep_mask_layers"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[175, "neural_compressor.compression.pruner.patterns.BasePattern.max_sparsity_ratio_per_op"]], "min_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[175, "neural_compressor.compression.pruner.patterns.BasePattern.min_sparsity_ratio_per_op"]], "modules (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[175, "neural_compressor.compression.pruner.patterns.BasePattern.modules"]], "neural_compressor.compression.pruner.patterns": [[175, "module-neural_compressor.compression.pruner.patterns"]], "pattern (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[175, "neural_compressor.compression.pruner.patterns.BasePattern.pattern"]], "register_pattern() (in module neural_compressor.compression.pruner.patterns)": [[175, "neural_compressor.compression.pruner.patterns.register_pattern"]], "target_sparsity (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[175, "neural_compressor.compression.pruner.patterns.BasePattern.target_sparsity"]], "basepruner (class in neural_compressor.compression.pruner.pruners)": [[176, "neural_compressor.compression.pruner.pruners.BasePruner"]], "basicpruner (class in neural_compressor.compression.pruner.pruners)": [[176, "neural_compressor.compression.pruner.pruners.BasicPruner"]], "blockmaskpruner (class in neural_compressor.compression.pruner.pruners)": [[176, "neural_compressor.compression.pruner.pruners.BlockMaskPruner"]], "multiheadattentionpruner (class in neural_compressor.compression.pruner.pruners)": [[176, "neural_compressor.compression.pruner.pruners.MultiheadAttentionPruner"]], "patternlockpruner (class in neural_compressor.compression.pruner.pruners)": [[176, "neural_compressor.compression.pruner.pruners.PatternLockPruner"]], "progressivepruner (class in neural_compressor.compression.pruner.pruners)": [[176, "neural_compressor.compression.pruner.pruners.ProgressivePruner"]], "retrainfreepruner (class in neural_compressor.compression.pruner.pruners)": [[176, "neural_compressor.compression.pruner.pruners.RetrainFreePruner"]], "config (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[176, "neural_compressor.compression.pruner.pruners.BasePruner.config"]], "criterion (neural_compressor.compression.pruner.pruners.basicpruner attribute)": [[176, "neural_compressor.compression.pruner.pruners.BasicPruner.criterion"]], "criterion (neural_compressor.compression.pruner.pruners.blockmaskpruner attribute)": [[176, "neural_compressor.compression.pruner.pruners.BlockMaskPruner.criterion"]], "criterion (neural_compressor.compression.pruner.pruners.retrainfreepruner attribute)": [[176, "neural_compressor.compression.pruner.pruners.RetrainFreePruner.criterion"]], "current_sparsity_ratio (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[176, "neural_compressor.compression.pruner.pruners.BasePruner.current_sparsity_ratio"]], "end_step (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[176, "neural_compressor.compression.pruner.pruners.BasePruner.end_step"]], "get_pruner() (in module neural_compressor.compression.pruner.pruners)": [[176, "neural_compressor.compression.pruner.pruners.get_pruner"]], "global_step (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[176, "neural_compressor.compression.pruner.pruners.BasePruner.global_step"]], "head_masks (neural_compressor.compression.pruner.pruners.multiheadattentionpruner attribute)": [[176, "neural_compressor.compression.pruner.pruners.MultiheadAttentionPruner.head_masks"]], "linear_layers (neural_compressor.compression.pruner.pruners.multiheadattentionpruner attribute)": [[176, "neural_compressor.compression.pruner.pruners.MultiheadAttentionPruner.linear_layers"]], "masks (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[176, "neural_compressor.compression.pruner.pruners.BasePruner.masks"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[176, "neural_compressor.compression.pruner.pruners.BasePruner.max_sparsity_ratio_per_op"]], "mha_compressions (neural_compressor.compression.pruner.pruners.multiheadattentionpruner attribute)": [[176, "neural_compressor.compression.pruner.pruners.MultiheadAttentionPruner.mha_compressions"]], "mha_scores (neural_compressor.compression.pruner.pruners.multiheadattentionpruner attribute)": [[176, "neural_compressor.compression.pruner.pruners.MultiheadAttentionPruner.mha_scores"]], "modules (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[176, "neural_compressor.compression.pruner.pruners.BasePruner.modules"]], "neural_compressor.compression.pruner.pruners": [[176, "module-neural_compressor.compression.pruner.pruners"]], "parse_valid_pruner_types() (in module neural_compressor.compression.pruner.pruners)": [[176, "neural_compressor.compression.pruner.pruners.parse_valid_pruner_types"]], "pattern (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[176, "neural_compressor.compression.pruner.pruners.BasePruner.pattern"]], "pattern (neural_compressor.compression.pruner.pruners.basicpruner attribute)": [[176, "neural_compressor.compression.pruner.pruners.BasicPruner.pattern"]], "pattern (neural_compressor.compression.pruner.pruners.blockmaskpruner attribute)": [[176, "neural_compressor.compression.pruner.pruners.BlockMaskPruner.pattern"]], "pattern (neural_compressor.compression.pruner.pruners.retrainfreepruner attribute)": [[176, "neural_compressor.compression.pruner.pruners.RetrainFreePruner.pattern"]], "pruning_frequency (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[176, "neural_compressor.compression.pruner.pruners.BasePruner.pruning_frequency"]], "reg (neural_compressor.compression.pruner.pruners.basicpruner attribute)": [[176, "neural_compressor.compression.pruner.pruners.BasicPruner.reg"]], "reg (neural_compressor.compression.pruner.pruners.blockmaskpruner attribute)": [[176, "neural_compressor.compression.pruner.pruners.BlockMaskPruner.reg"]], "reg (neural_compressor.compression.pruner.pruners.retrainfreepruner attribute)": [[176, "neural_compressor.compression.pruner.pruners.RetrainFreePruner.reg"]], "register_pruner() (in module neural_compressor.compression.pruner.pruners)": [[176, "neural_compressor.compression.pruner.pruners.register_pruner"]], "scheduler (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[176, "neural_compressor.compression.pruner.pruners.BasePruner.scheduler"]], "scheduler (neural_compressor.compression.pruner.pruners.basicpruner attribute)": [[176, "neural_compressor.compression.pruner.pruners.BasicPruner.scheduler"]], "scheduler (neural_compressor.compression.pruner.pruners.blockmaskpruner attribute)": [[176, "neural_compressor.compression.pruner.pruners.BlockMaskPruner.scheduler"]], "scheduler (neural_compressor.compression.pruner.pruners.retrainfreepruner attribute)": [[176, "neural_compressor.compression.pruner.pruners.RetrainFreePruner.scheduler"]], "scores (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[176, "neural_compressor.compression.pruner.pruners.BasePruner.scores"]], "start_step (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[176, "neural_compressor.compression.pruner.pruners.BasePruner.start_step"]], "target_sparsity_ratio (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[176, "neural_compressor.compression.pruner.pruners.BasePruner.target_sparsity_ratio"]], "basereg (class in neural_compressor.compression.pruner.regs)": [[177, "neural_compressor.compression.pruner.regs.BaseReg"]], "grouplasso (class in neural_compressor.compression.pruner.regs)": [[177, "neural_compressor.compression.pruner.regs.GroupLasso"]], "alpha (neural_compressor.compression.pruner.regs.grouplasso attribute)": [[177, "neural_compressor.compression.pruner.regs.GroupLasso.alpha"]], "get_reg() (in module neural_compressor.compression.pruner.regs)": [[177, "neural_compressor.compression.pruner.regs.get_reg"]], "get_reg_type() (in module neural_compressor.compression.pruner.regs)": [[177, "neural_compressor.compression.pruner.regs.get_reg_type"]], "neural_compressor.compression.pruner.regs": [[177, "module-neural_compressor.compression.pruner.regs"]], "reg_terms (neural_compressor.compression.pruner.regs.grouplasso attribute)": [[177, "neural_compressor.compression.pruner.regs.GroupLasso.reg_terms"]], "register_reg() (in module neural_compressor.compression.pruner.regs)": [[177, "neural_compressor.compression.pruner.regs.register_reg"]], "iterativescheduler (class in neural_compressor.compression.pruner.schedulers)": [[178, "neural_compressor.compression.pruner.schedulers.IterativeScheduler"]], "oneshotscheduler (class in neural_compressor.compression.pruner.schedulers)": [[178, "neural_compressor.compression.pruner.schedulers.OneshotScheduler"]], "pruningscheduler (class in neural_compressor.compression.pruner.schedulers)": [[178, "neural_compressor.compression.pruner.schedulers.PruningScheduler"]], "config (neural_compressor.compression.pruner.schedulers.pruningscheduler attribute)": [[178, "neural_compressor.compression.pruner.schedulers.PruningScheduler.config"]], "get_scheduler() (in module neural_compressor.compression.pruner.schedulers)": [[178, "neural_compressor.compression.pruner.schedulers.get_scheduler"]], "neural_compressor.compression.pruner.schedulers": [[178, "module-neural_compressor.compression.pruner.schedulers"]], "register_scheduler() (in module neural_compressor.compression.pruner.schedulers)": [[178, "neural_compressor.compression.pruner.schedulers.register_scheduler"]], "check_config() (in module neural_compressor.compression.pruner.utils)": [[179, "neural_compressor.compression.pruner.utils.check_config"]], "check_key_validity() (in module neural_compressor.compression.pruner.utils)": [[179, "neural_compressor.compression.pruner.utils.check_key_validity"]], "generate_pruner_config() (in module neural_compressor.compression.pruner.utils)": [[179, "neural_compressor.compression.pruner.utils.generate_pruner_config"]], "get_sparsity_ratio() (in module neural_compressor.compression.pruner.utils)": [[179, "neural_compressor.compression.pruner.utils.get_sparsity_ratio"]], "get_sparsity_ratio_tf() (in module neural_compressor.compression.pruner.utils)": [[179, "neural_compressor.compression.pruner.utils.get_sparsity_ratio_tf"]], "neural_compressor.compression.pruner.utils": [[179, "module-neural_compressor.compression.pruner.utils"]], "parse_last_linear() (in module neural_compressor.compression.pruner.utils)": [[179, "neural_compressor.compression.pruner.utils.parse_last_linear"]], "parse_last_linear_tf() (in module neural_compressor.compression.pruner.utils)": [[179, "neural_compressor.compression.pruner.utils.parse_last_linear_tf"]], "parse_to_prune() (in module neural_compressor.compression.pruner.utils)": [[179, "neural_compressor.compression.pruner.utils.parse_to_prune"]], "parse_to_prune_tf() (in module neural_compressor.compression.pruner.utils)": [[179, "neural_compressor.compression.pruner.utils.parse_to_prune_tf"]], "process_and_check_config() (in module neural_compressor.compression.pruner.utils)": [[179, "neural_compressor.compression.pruner.utils.process_and_check_config"]], "process_config() (in module neural_compressor.compression.pruner.utils)": [[179, "neural_compressor.compression.pruner.utils.process_config"]], "process_weight_config() (in module neural_compressor.compression.pruner.utils)": [[179, "neural_compressor.compression.pruner.utils.process_weight_config"]], "process_yaml_config() (in module neural_compressor.compression.pruner.utils)": [[179, "neural_compressor.compression.pruner.utils.process_yaml_config"]], "reset_none_to_default() (in module neural_compressor.compression.pruner.utils)": [[179, "neural_compressor.compression.pruner.utils.reset_none_to_default"]], "update_params() (in module neural_compressor.compression.pruner.utils)": [[179, "neural_compressor.compression.pruner.utils.update_params"]], "benchmark_conf (class in neural_compressor.conf.config)": [[180, "neural_compressor.conf.config.Benchmark_Conf"]], "conf (class in neural_compressor.conf.config)": [[180, "neural_compressor.conf.config.Conf"]], "distillation_conf (class in neural_compressor.conf.config)": [[180, "neural_compressor.conf.config.Distillation_Conf"]], "graph_optimization_conf (class in neural_compressor.conf.config)": [[180, "neural_compressor.conf.config.Graph_Optimization_Conf"]], "mixedprecision_conf (class in neural_compressor.conf.config)": [[180, "neural_compressor.conf.config.MixedPrecision_Conf"]], "nasconfig (class in neural_compressor.conf.config)": [[180, "neural_compressor.conf.config.NASConfig"]], "prunerv2 (class in neural_compressor.conf.config)": [[180, "neural_compressor.conf.config.PrunerV2"]], "pruning_conf (class in neural_compressor.conf.config)": [[180, "neural_compressor.conf.config.Pruning_Conf"]], "quantization_conf (class in neural_compressor.conf.config)": [[180, "neural_compressor.conf.config.Quantization_Conf"]], "neural_compressor.conf.config": [[180, "module-neural_compressor.conf.config"]], "dotdict (class in neural_compressor.conf.dotdict)": [[181, "neural_compressor.conf.dotdict.DotDict"]], "deep_get() (in module neural_compressor.conf.dotdict)": [[181, "neural_compressor.conf.dotdict.deep_get"]], "deep_set() (in module neural_compressor.conf.dotdict)": [[181, "neural_compressor.conf.dotdict.deep_set"]], "neural_compressor.conf.dotdict": [[181, "module-neural_compressor.conf.dotdict"]], "neural_compressor.conf": [[182, "module-neural_compressor.conf"]], "accuracycriterion (class in neural_compressor.conf.pythonic_config)": [[183, "neural_compressor.conf.pythonic_config.AccuracyCriterion"]], "benchmarkconfig (class in neural_compressor.conf.pythonic_config)": [[183, "neural_compressor.conf.pythonic_config.BenchmarkConfig"]], "distillationconfig (class in neural_compressor.conf.pythonic_config)": [[183, "neural_compressor.conf.pythonic_config.DistillationConfig"]], "knowledgedistillationlossconfig (class in neural_compressor.conf.pythonic_config)": [[183, "neural_compressor.conf.pythonic_config.KnowledgeDistillationLossConfig"]], "options (class in neural_compressor.conf.pythonic_config)": [[183, "neural_compressor.conf.pythonic_config.Options"]], "quantizationconfig (class in neural_compressor.conf.pythonic_config)": [[183, "neural_compressor.conf.pythonic_config.QuantizationConfig"]], "weightpruningconfig (class in neural_compressor.conf.pythonic_config)": [[183, "neural_compressor.conf.pythonic_config.WeightPruningConfig"]], "neural_compressor.conf.pythonic_config": [[183, "module-neural_compressor.conf.pythonic_config"]], "accuracycriterion (class in neural_compressor.config)": [[184, "neural_compressor.config.AccuracyCriterion"]], "benchmarkconfig (class in neural_compressor.config)": [[184, "neural_compressor.config.BenchmarkConfig"]], "distillationconfig (class in neural_compressor.config)": [[184, "neural_compressor.config.DistillationConfig"]], "dotdict (class in neural_compressor.config)": [[184, "neural_compressor.config.DotDict"]], "exportconfig (class in neural_compressor.config)": [[184, "neural_compressor.config.ExportConfig"]], "intermediatelayersknowledgedistillationlossconfig (class in neural_compressor.config)": [[184, "neural_compressor.config.IntermediateLayersKnowledgeDistillationLossConfig"]], "keras (class in neural_compressor.config)": [[184, "neural_compressor.config.Keras"]], "knowledgedistillationlossconfig (class in neural_compressor.config)": [[184, "neural_compressor.config.KnowledgeDistillationLossConfig"]], "mxnet (class in neural_compressor.config)": [[184, "neural_compressor.config.MXNet"]], "mixedprecisionconfig (class in neural_compressor.config)": [[184, "neural_compressor.config.MixedPrecisionConfig"]], "nasconfig (class in neural_compressor.config)": [[184, "neural_compressor.config.NASConfig"]], "onnx (class in neural_compressor.config)": [[184, "neural_compressor.config.ONNX"]], "onnxqlinear2qdqconfig (class in neural_compressor.config)": [[184, "neural_compressor.config.ONNXQlinear2QDQConfig"]], "options (class in neural_compressor.config)": [[184, "neural_compressor.config.Options"]], "posttrainingquantconfig (class in neural_compressor.config)": [[184, "neural_compressor.config.PostTrainingQuantConfig"]], "pytorch (class in neural_compressor.config)": [[184, "neural_compressor.config.PyTorch"]], "quantizationawaretrainingconfig (class in neural_compressor.config)": [[184, "neural_compressor.config.QuantizationAwareTrainingConfig"]], "selfknowledgedistillationlossconfig (class in neural_compressor.config)": [[184, "neural_compressor.config.SelfKnowledgeDistillationLossConfig"]], "tf2onnxconfig (class in neural_compressor.config)": [[184, "neural_compressor.config.TF2ONNXConfig"]], "tensorflow (class in neural_compressor.config)": [[184, "neural_compressor.config.TensorFlow"]], "torch2onnxconfig (class in neural_compressor.config)": [[184, "neural_compressor.config.Torch2ONNXConfig"]], "tuningcriterion (class in neural_compressor.config)": [[184, "neural_compressor.config.TuningCriterion"]], "weightpruningconfig (class in neural_compressor.config)": [[184, "neural_compressor.config.WeightPruningConfig"]], "neural_compressor.config": [[184, "module-neural_compressor.config"]], "neural_compressor.contrib": [[185, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[186, "module-neural_compressor.contrib.strategy"]], "sigopttunestrategy (class in neural_compressor.contrib.strategy.sigopt)": [[187, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.sigopt": [[187, "module-neural_compressor.contrib.strategy.sigopt"]], "tpetunestrategy (class in neural_compressor.contrib.strategy.tpe)": [[188, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy"]], "neural_compressor.contrib.strategy.tpe": [[188, "module-neural_compressor.contrib.strategy.tpe"]], "basedataloader (class in neural_compressor.data.dataloaders.base_dataloader)": [[189, "neural_compressor.data.dataloaders.base_dataloader.BaseDataLoader"]], "neural_compressor.data.dataloaders.base_dataloader": [[189, "module-neural_compressor.data.dataloaders.base_dataloader"]], "dataloader (class in neural_compressor.data.dataloaders.dataloader)": [[190, "neural_compressor.data.dataloaders.dataloader.DataLoader"]], "check_dataloader() (in module neural_compressor.data.dataloaders.dataloader)": [[190, "neural_compressor.data.dataloaders.dataloader.check_dataloader"]], "neural_compressor.data.dataloaders.dataloader": [[190, "module-neural_compressor.data.dataloaders.dataloader"]], "defaultdataloader (class in neural_compressor.data.dataloaders.default_dataloader)": [[191, "neural_compressor.data.dataloaders.default_dataloader.DefaultDataLoader"]], "default_collate() (in module neural_compressor.data.dataloaders.default_dataloader)": [[191, "neural_compressor.data.dataloaders.default_dataloader.default_collate"]], "neural_compressor.data.dataloaders.default_dataloader": [[191, "module-neural_compressor.data.dataloaders.default_dataloader"]], "fetcher (class in neural_compressor.data.dataloaders.fetcher)": [[192, "neural_compressor.data.dataloaders.fetcher.Fetcher"]], "indexfetcher (class in neural_compressor.data.dataloaders.fetcher)": [[192, "neural_compressor.data.dataloaders.fetcher.IndexFetcher"]], "iterablefetcher (class in neural_compressor.data.dataloaders.fetcher)": [[192, "neural_compressor.data.dataloaders.fetcher.IterableFetcher"]], "neural_compressor.data.dataloaders.fetcher": [[192, "module-neural_compressor.data.dataloaders.fetcher"]], "neural_compressor.data.dataloaders": [[193, "module-neural_compressor.data.dataloaders"]], "mxnetdataloader (class in neural_compressor.data.dataloaders.mxnet_dataloader)": [[194, "neural_compressor.data.dataloaders.mxnet_dataloader.MXNetDataLoader"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[194, "module-neural_compressor.data.dataloaders.mxnet_dataloader"]], "onnxrtbertdataloader (class in neural_compressor.data.dataloaders.onnxrt_dataloader)": [[195, "neural_compressor.data.dataloaders.onnxrt_dataloader.ONNXRTBertDataLoader"]], "onnxrtdataloader (class in neural_compressor.data.dataloaders.onnxrt_dataloader)": [[195, "neural_compressor.data.dataloaders.onnxrt_dataloader.ONNXRTDataLoader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[195, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"]], "pytorchdataloader (class in neural_compressor.data.dataloaders.pytorch_dataloader)": [[196, "neural_compressor.data.dataloaders.pytorch_dataloader.PyTorchDataLoader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[196, "module-neural_compressor.data.dataloaders.pytorch_dataloader"]], "batchsampler (class in neural_compressor.data.dataloaders.sampler)": [[197, "neural_compressor.data.dataloaders.sampler.BatchSampler"]], "iterablesampler (class in neural_compressor.data.dataloaders.sampler)": [[197, "neural_compressor.data.dataloaders.sampler.IterableSampler"]], "sampler (class in neural_compressor.data.dataloaders.sampler)": [[197, "neural_compressor.data.dataloaders.sampler.Sampler"]], "sequentialsampler (class in neural_compressor.data.dataloaders.sampler)": [[197, "neural_compressor.data.dataloaders.sampler.SequentialSampler"]], "neural_compressor.data.dataloaders.sampler": [[197, "module-neural_compressor.data.dataloaders.sampler"]], "tfdatadataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[198, "neural_compressor.data.dataloaders.tensorflow_dataloader.TFDataDataLoader"]], "tensorflowbertdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[198, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowBertDataLoader"]], "tensorflowdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[198, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowDataLoader"]], "tensorflowmodelzoobertdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[198, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowModelZooBertDataLoader"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[198, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"]], "inputfeatures (class in neural_compressor.data.datasets.bert_dataset)": [[199, "neural_compressor.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[199, "neural_compressor.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.data.datasets.bert_dataset)": [[199, "neural_compressor.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[199, "neural_compressor.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[199, "neural_compressor.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[199, "neural_compressor.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.data.datasets.bert_dataset)": [[199, "neural_compressor.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.data.datasets.bert_dataset)": [[199, "neural_compressor.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.data.datasets.bert_dataset": [[199, "module-neural_compressor.data.datasets.bert_dataset"]], "coconpy (class in neural_compressor.data.datasets.coco_dataset)": [[200, "neural_compressor.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.data.datasets.coco_dataset)": [[200, "neural_compressor.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.data.datasets.coco_dataset)": [[200, "neural_compressor.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.data.datasets.coco_dataset)": [[200, "neural_compressor.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.data.datasets.coco_dataset": [[200, "module-neural_compressor.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.data.datasets.dataset)": [[201, "neural_compressor.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.data.datasets.dataset)": [[201, "neural_compressor.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.data.datasets.dataset)": [[201, "neural_compressor.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.data.datasets.dataset)": [[201, "neural_compressor.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.data.datasets.dataset)": [[201, "neural_compressor.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.data.datasets.dataset)": [[201, "neural_compressor.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.data.datasets.dataset)": [[201, "neural_compressor.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.data.datasets.dataset)": [[201, "neural_compressor.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.data.datasets.dataset)": [[201, "neural_compressor.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.data.datasets.dataset)": [[201, "neural_compressor.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.data.datasets.dataset)": [[201, "neural_compressor.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.data.datasets.dataset)": [[201, "neural_compressor.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.data.datasets.dataset)": [[201, "neural_compressor.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.data.datasets.dataset)": [[201, "neural_compressor.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.data.datasets.dataset)": [[201, "neural_compressor.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.data.datasets.dataset)": [[201, "neural_compressor.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.data.datasets.dataset)": [[201, "neural_compressor.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.data.datasets.dataset)": [[201, "neural_compressor.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.data.datasets.dataset)": [[201, "neural_compressor.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.data.datasets.dataset)": [[201, "neural_compressor.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.data.datasets.dataset)": [[201, "neural_compressor.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.data.datasets.dataset)": [[201, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.datasets.dataset)": [[201, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflow (class in neural_compressor.data.datasets.dataset)": [[201, "neural_compressor.data.datasets.dataset.Tensorflow"]], "tensorflowcifar10 (class in neural_compressor.data.datasets.dataset)": [[201, "neural_compressor.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.data.datasets.dataset)": [[201, "neural_compressor.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.data.datasets.dataset)": [[201, "neural_compressor.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.data.datasets.dataset)": [[201, "neural_compressor.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagerecord (class in neural_compressor.data.datasets.dataset)": [[201, "neural_compressor.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.data.datasets.dataset)": [[201, "neural_compressor.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.data.datasets.dataset)": [[201, "neural_compressor.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.data.datasets.dataset)": [[201, "neural_compressor.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.data.datasets.dataset)": [[201, "neural_compressor.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.data.datasets.dataset)": [[201, "neural_compressor.data.datasets.dataset.check_integrity"]], "dataset_registry() (in module neural_compressor.data.datasets.dataset)": [[201, "neural_compressor.data.datasets.dataset.dataset_registry"]], "download_url() (in module neural_compressor.data.datasets.dataset)": [[201, "neural_compressor.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.data.datasets.dataset)": [[201, "neural_compressor.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.data.datasets.dataset)": [[201, "neural_compressor.data.datasets.dataset.gen_bar_updater"]], "neural_compressor.data.datasets.dataset": [[201, "module-neural_compressor.data.datasets.dataset"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset)": [[202, "neural_compressor.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset": [[202, "module-neural_compressor.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[203, "neural_compressor.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[203, "neural_compressor.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[203, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[204, "neural_compressor.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[204, "neural_compressor.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[204, "neural_compressor.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[204, "neural_compressor.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[204, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[204, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.data.datasets.imagenet_dataset": [[204, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[205, "module-neural_compressor.data.datasets"]], "styletransferdataset (class in neural_compressor.data.datasets.style_transfer_dataset)": [[206, "neural_compressor.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.data.datasets.style_transfer_dataset": [[206, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.data.filters.coco_filter)": [[207, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.data.filters.coco_filter)": [[207, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.coco_filter": [[207, "module-neural_compressor.data.filters.coco_filter"]], "filters (class in neural_compressor.data.filters.filter)": [[208, "neural_compressor.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.data.filters.filter)": [[208, "neural_compressor.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.data.filters.filter)": [[208, "neural_compressor.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.data.filters.filter)": [[208, "neural_compressor.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.data.filters.filter)": [[208, "neural_compressor.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.data.filters.filter)": [[208, "neural_compressor.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.data.filters.filter)": [[208, "neural_compressor.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.data.filters.filter)": [[208, "neural_compressor.data.filters.filter.filter_registry"]], "neural_compressor.data.filters.filter": [[208, "module-neural_compressor.data.filters.filter"]], "neural_compressor.data.filters": [[209, "module-neural_compressor.data.filters"]], "neural_compressor.data": [[210, "module-neural_compressor.data"]], "parsedecodecocotransform (class in neural_compressor.data.transforms.coco_transform)": [[211, "neural_compressor.data.transforms.coco_transform.ParseDecodeCocoTransform"]], "neural_compressor.data.transforms.coco_transform": [[211, "module-neural_compressor.data.transforms.coco_transform"]], "bilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[212, "neural_compressor.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.data.transforms.imagenet_transform)": [[212, "neural_compressor.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[212, "neural_compressor.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[212, "neural_compressor.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.data.transforms.imagenet_transform)": [[212, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[212, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.data.transforms.imagenet_transform)": [[212, "neural_compressor.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.data.transforms.imagenet_transform)": [[212, "neural_compressor.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[212, "neural_compressor.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "tensorflowshiftrescale (class in neural_compressor.data.transforms.imagenet_transform)": [[212, "neural_compressor.data.transforms.imagenet_transform.TensorflowShiftRescale"]], "tensorflowtransposelastchannel (class in neural_compressor.data.transforms.imagenet_transform)": [[212, "neural_compressor.data.transforms.imagenet_transform.TensorflowTransposeLastChannel"]], "neural_compressor.data.transforms.imagenet_transform": [[212, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[213, "module-neural_compressor.data.transforms"]], "postprocess (class in neural_compressor.data.transforms.postprocess)": [[214, "neural_compressor.data.transforms.postprocess.Postprocess"]], "neural_compressor.data.transforms.postprocess": [[214, "module-neural_compressor.data.transforms.postprocess"]], "basictokenizer (class in neural_compressor.data.transforms.tokenization)": [[215, "neural_compressor.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.data.transforms.tokenization)": [[215, "neural_compressor.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.data.transforms.tokenization)": [[215, "neural_compressor.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.data.transforms.tokenization)": [[215, "neural_compressor.data.transforms.tokenization.convert_by_vocab"]], "convert_to_unicode() (in module neural_compressor.data.transforms.tokenization)": [[215, "neural_compressor.data.transforms.tokenization.convert_to_unicode"]], "load_vocab() (in module neural_compressor.data.transforms.tokenization)": [[215, "neural_compressor.data.transforms.tokenization.load_vocab"]], "neural_compressor.data.transforms.tokenization": [[215, "module-neural_compressor.data.transforms.tokenization"]], "whitespace_tokenize() (in module neural_compressor.data.transforms.tokenization)": [[215, "neural_compressor.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.TRANSFORMS"], [216, "neural_compressor.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.get_final_text"]], "get_torchvision_map() (in module neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.get_torchvision_map"]], "neural_compressor.data.transforms.transform": [[216, "module-neural_compressor.data.transforms.transform"]], "read_squad_examples() (in module neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.read_squad_examples"]], "transform_registry() (in module neural_compressor.data.transforms.transform)": [[216, "neural_compressor.data.transforms.transform.transform_registry"]], "benchmark (class in neural_compressor.experimental.benchmark)": [[217, "neural_compressor.experimental.benchmark.Benchmark"]], "get_architecture() (in module neural_compressor.experimental.benchmark)": [[217, "neural_compressor.experimental.benchmark.get_architecture"]], "get_bounded_threads() (in module neural_compressor.experimental.benchmark)": [[217, "neural_compressor.experimental.benchmark.get_bounded_threads"]], "get_core_ids() (in module neural_compressor.experimental.benchmark)": [[217, "neural_compressor.experimental.benchmark.get_core_ids"]], "get_physical_ids() (in module neural_compressor.experimental.benchmark)": [[217, "neural_compressor.experimental.benchmark.get_physical_ids"]], "get_threads() (in module neural_compressor.experimental.benchmark)": [[217, "neural_compressor.experimental.benchmark.get_threads"]], "get_threads_per_core() (in module neural_compressor.experimental.benchmark)": [[217, "neural_compressor.experimental.benchmark.get_threads_per_core"]], "neural_compressor.experimental.benchmark": [[217, "module-neural_compressor.experimental.benchmark"]], "set_all_env_var() (in module neural_compressor.experimental.benchmark)": [[217, "neural_compressor.experimental.benchmark.set_all_env_var"]], "set_env_var() (in module neural_compressor.experimental.benchmark)": [[217, "neural_compressor.experimental.benchmark.set_env_var"]], "criterions (class in neural_compressor.experimental.common.criterion)": [[218, "neural_compressor.experimental.common.criterion.Criterions"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[218, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationframework (class in neural_compressor.experimental.common.criterion)": [[218, "neural_compressor.experimental.common.criterion.KnowledgeDistillationFramework"]], "knowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[218, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss"]], "pytorchcriterions (class in neural_compressor.experimental.common.criterion)": [[218, "neural_compressor.experimental.common.criterion.PyTorchCriterions"]], "pytorchcrossentropyloss (class in neural_compressor.experimental.common.criterion)": [[218, "neural_compressor.experimental.common.criterion.PyTorchCrossEntropyLoss"]], "pytorchintermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[218, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss"]], "pytorchintermediatelayersknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[218, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"]], "pytorchknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[218, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss"]], "pytorchknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[218, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLossWrapper"]], "pytorchselfknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[218, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss"]], "pytorchselfknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[218, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLossWrapper"]], "selfknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[218, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss"]], "tensorflowcrossentropyloss (class in neural_compressor.experimental.common.criterion)": [[218, "neural_compressor.experimental.common.criterion.TensorFlowCrossEntropyLoss"]], "tensorflowsparsecategoricalcrossentropy (class in neural_compressor.experimental.common.criterion)": [[218, "neural_compressor.experimental.common.criterion.TensorFlowSparseCategoricalCrossentropy"]], "tensorflowcriterions (class in neural_compressor.experimental.common.criterion)": [[218, "neural_compressor.experimental.common.criterion.TensorflowCriterions"]], "tensorflowknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[218, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss"]], "tensorflowknowledgedistillationlossexternal (class in neural_compressor.experimental.common.criterion)": [[218, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal"]], "tensorflowknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[218, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossWrapper"]], "criterion_registry() (in module neural_compressor.experimental.common.criterion)": [[218, "neural_compressor.experimental.common.criterion.criterion_registry"]], "neural_compressor.experimental.common.criterion": [[218, "module-neural_compressor.experimental.common.criterion"]], "dataloader (class in neural_compressor.experimental.common.dataloader)": [[219, "neural_compressor.experimental.common.dataloader.DataLoader"]], "neural_compressor.experimental.common.dataloader": [[219, "module-neural_compressor.experimental.common.dataloader"]], "neural_compressor.experimental.common": [[220, "module-neural_compressor.experimental.common"]], "metric (class in neural_compressor.experimental.common.metric)": [[221, "neural_compressor.experimental.common.metric.Metric"]], "neural_compressor.experimental.common.metric": [[221, "module-neural_compressor.experimental.common.metric"]], "model (class in neural_compressor.experimental.common.model)": [[222, "neural_compressor.experimental.common.model.Model"]], "neural_compressor.experimental.common.model": [[222, "module-neural_compressor.experimental.common.model"]], "set_backend() (in module neural_compressor.experimental.common.model)": [[222, "neural_compressor.experimental.common.model.set_backend"]], "optimizers (class in neural_compressor.experimental.common.optimizer)": [[223, "neural_compressor.experimental.common.optimizer.Optimizers"]], "pytorchoptimizers (class in neural_compressor.experimental.common.optimizer)": [[223, "neural_compressor.experimental.common.optimizer.PyTorchOptimizers"]], "pytorchsgd (class in neural_compressor.experimental.common.optimizer)": [[223, "neural_compressor.experimental.common.optimizer.PyTorchSGD"]], "tensorflowadam (class in neural_compressor.experimental.common.optimizer)": [[223, "neural_compressor.experimental.common.optimizer.TensorFlowAdam"]], "tensorflowadamw (class in neural_compressor.experimental.common.optimizer)": [[223, "neural_compressor.experimental.common.optimizer.TensorFlowAdamW"]], "tensorflowsgd (class in neural_compressor.experimental.common.optimizer)": [[223, "neural_compressor.experimental.common.optimizer.TensorFlowSGD"]], "tensorflowoptimizers (class in neural_compressor.experimental.common.optimizer)": [[223, "neural_compressor.experimental.common.optimizer.TensorflowOptimizers"]], "neural_compressor.experimental.common.optimizer": [[223, "module-neural_compressor.experimental.common.optimizer"]], "optimizer_registry() (in module neural_compressor.experimental.common.optimizer)": [[223, "neural_compressor.experimental.common.optimizer.optimizer_registry"]], "postprocess (class in neural_compressor.experimental.common.postprocess)": [[224, "neural_compressor.experimental.common.postprocess.Postprocess"]], "neural_compressor.experimental.common.postprocess": [[224, "module-neural_compressor.experimental.common.postprocess"]], "get_activation() (in module neural_compressor.experimental.common.torch_utils)": [[225, "neural_compressor.experimental.common.torch_utils.get_activation"]], "neural_compressor.experimental.common.torch_utils": [[225, "module-neural_compressor.experimental.common.torch_utils"]], "record_output() (in module neural_compressor.experimental.common.torch_utils)": [[225, "neural_compressor.experimental.common.torch_utils.record_output"]], "component (class in neural_compressor.experimental.component)": [[226, "neural_compressor.experimental.component.Component"]], "neural_compressor.experimental.component": [[226, "module-neural_compressor.experimental.component"]], "neural_compressor.experimental.compression": [[227, "module-neural_compressor.experimental.compression"]], "neural_compressor.experimental.compression.pruning": [[228, "module-neural_compressor.experimental.compression.pruning"]], "prepare_pruning() (in module neural_compressor.experimental.compression.pruning)": [[228, "neural_compressor.experimental.compression.pruning.prepare_pruning"]], "save() (in module neural_compressor.experimental.compression.pruning)": [[228, "neural_compressor.experimental.compression.pruning.save"]], "neural_compressor.experimental.contrib": [[229, "module-neural_compressor.experimental.contrib"]], "neural_compressor.experimental.contrib.strategy": [[230, "module-neural_compressor.experimental.contrib.strategy"]], "sigopttunestrategy (class in neural_compressor.experimental.contrib.strategy.sigopt)": [[231, "neural_compressor.experimental.contrib.strategy.sigopt.SigOptTuneStrategy"]], "neural_compressor.experimental.contrib.strategy.sigopt": [[231, "module-neural_compressor.experimental.contrib.strategy.sigopt"]], "tpetunestrategy (class in neural_compressor.experimental.contrib.strategy.tpe)": [[232, "neural_compressor.experimental.contrib.strategy.tpe.TpeTuneStrategy"]], "neural_compressor.experimental.contrib.strategy.tpe": [[232, "module-neural_compressor.experimental.contrib.strategy.tpe"]], "basedataloader (class in neural_compressor.experimental.data.dataloaders.base_dataloader)": [[233, "neural_compressor.experimental.data.dataloaders.base_dataloader.BaseDataLoader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[233, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[234, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "defaultdataloader (class in neural_compressor.experimental.data.dataloaders.default_dataloader)": [[235, "neural_compressor.experimental.data.dataloaders.default_dataloader.DefaultDataLoader"]], "default_collate() (in module neural_compressor.experimental.data.dataloaders.default_dataloader)": [[235, "neural_compressor.experimental.data.dataloaders.default_dataloader.default_collate"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[235, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "fetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[236, "neural_compressor.experimental.data.dataloaders.fetcher.Fetcher"]], "indexfetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[236, "neural_compressor.experimental.data.dataloaders.fetcher.IndexFetcher"]], "iterablefetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[236, "neural_compressor.experimental.data.dataloaders.fetcher.IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[236, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[237, "module-neural_compressor.experimental.data.dataloaders"]], "mxnetdataloader (class in neural_compressor.experimental.data.dataloaders.mxnet_dataloader)": [[238, "neural_compressor.experimental.data.dataloaders.mxnet_dataloader.MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[238, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "onnxrtbertdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[239, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTBertDataLoader"]], "onnxrtdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[239, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[239, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "pytorchdataloader (class in neural_compressor.experimental.data.dataloaders.pytorch_dataloader)": [[240, "neural_compressor.experimental.data.dataloaders.pytorch_dataloader.PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[240, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "batchsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[241, "neural_compressor.experimental.data.dataloaders.sampler.BatchSampler"]], "iterablesampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[241, "neural_compressor.experimental.data.dataloaders.sampler.IterableSampler"]], "sampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[241, "neural_compressor.experimental.data.dataloaders.sampler.Sampler"]], "sequentialsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[241, "neural_compressor.experimental.data.dataloaders.sampler.SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.sampler": [[241, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "tfdatadataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[242, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TFDataDataLoader"]], "tensorflowbertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[242, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowBertDataLoader"]], "tensorflowdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[242, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowDataLoader"]], "tensorflowmodelzoobertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[242, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowModelZooBertDataLoader"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[242, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "inputfeatures (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[243, "neural_compressor.experimental.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[243, "neural_compressor.experimental.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[243, "neural_compressor.experimental.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[243, "neural_compressor.experimental.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[243, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[243, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[243, "neural_compressor.experimental.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[243, "neural_compressor.experimental.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[243, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "coconpy (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[244, "neural_compressor.experimental.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[244, "neural_compressor.experimental.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[244, "neural_compressor.experimental.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[244, "neural_compressor.experimental.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[244, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[245, "neural_compressor.experimental.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[245, "neural_compressor.experimental.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.experimental.data.datasets.dataset)": [[245, "neural_compressor.experimental.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.experimental.data.datasets.dataset)": [[245, "neural_compressor.experimental.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[245, "neural_compressor.experimental.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[245, "neural_compressor.experimental.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.experimental.data.datasets.dataset)": [[245, "neural_compressor.experimental.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.experimental.data.datasets.dataset)": [[245, "neural_compressor.experimental.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[245, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[245, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[245, "neural_compressor.experimental.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[245, "neural_compressor.experimental.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[245, "neural_compressor.experimental.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[245, "neural_compressor.experimental.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[245, "neural_compressor.experimental.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[245, "neural_compressor.experimental.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[245, "neural_compressor.experimental.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[245, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[245, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[245, "neural_compressor.experimental.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[245, "neural_compressor.experimental.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.experimental.data.datasets.dataset)": [[245, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.datasets.dataset)": [[245, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflowcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[245, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[245, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[245, "neural_compressor.experimental.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[245, "neural_compressor.experimental.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[245, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageFolder"]], "tensorflowimagerecord (class in neural_compressor.experimental.data.datasets.dataset)": [[245, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[245, "neural_compressor.experimental.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.experimental.data.datasets.dataset)": [[245, "neural_compressor.experimental.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.experimental.data.datasets.dataset)": [[245, "neural_compressor.experimental.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.experimental.data.datasets.dataset)": [[245, "neural_compressor.experimental.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.experimental.data.datasets.dataset)": [[245, "neural_compressor.experimental.data.datasets.dataset.check_integrity"]], "dataset_registry() (in module neural_compressor.experimental.data.datasets.dataset)": [[245, "neural_compressor.experimental.data.datasets.dataset.dataset_registry"]], "download_url() (in module neural_compressor.experimental.data.datasets.dataset)": [[245, "neural_compressor.experimental.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.experimental.data.datasets.dataset)": [[245, "neural_compressor.experimental.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.experimental.data.datasets.dataset)": [[245, "neural_compressor.experimental.data.datasets.dataset.gen_bar_updater"]], "neural_compressor.experimental.data.datasets.dataset": [[245, "module-neural_compressor.experimental.data.datasets.dataset"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset)": [[246, "neural_compressor.experimental.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[246, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[247, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[247, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[247, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[248, "neural_compressor.experimental.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[248, "neural_compressor.experimental.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[248, "neural_compressor.experimental.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[248, "neural_compressor.experimental.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[248, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[248, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[248, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "neural_compressor.experimental.data.datasets": [[249, "module-neural_compressor.experimental.data.datasets"]], "styletransferdataset (class in neural_compressor.experimental.data.datasets.style_transfer_dataset)": [[250, "neural_compressor.experimental.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[250, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[251, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[251, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.coco_filter": [[251, "module-neural_compressor.experimental.data.filters.coco_filter"]], "filters (class in neural_compressor.experimental.data.filters.filter)": [[252, "neural_compressor.experimental.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.experimental.data.filters.filter)": [[252, "neural_compressor.experimental.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.experimental.data.filters.filter)": [[252, "neural_compressor.experimental.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.experimental.data.filters.filter)": [[252, "neural_compressor.experimental.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.experimental.data.filters.filter)": [[252, "neural_compressor.experimental.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.experimental.data.filters.filter)": [[252, "neural_compressor.experimental.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.experimental.data.filters.filter)": [[252, "neural_compressor.experimental.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.experimental.data.filters.filter)": [[252, "neural_compressor.experimental.data.filters.filter.filter_registry"]], "neural_compressor.experimental.data.filters.filter": [[252, "module-neural_compressor.experimental.data.filters.filter"]], "neural_compressor.experimental.data.filters": [[253, "module-neural_compressor.experimental.data.filters"]], "neural_compressor.experimental.data": [[254, "module-neural_compressor.experimental.data"]], "bilinearimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[255, "neural_compressor.experimental.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[255, "neural_compressor.experimental.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[255, "neural_compressor.experimental.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[255, "neural_compressor.experimental.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[255, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[255, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[255, "neural_compressor.experimental.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[255, "neural_compressor.experimental.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[255, "neural_compressor.experimental.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[255, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "neural_compressor.experimental.data.transforms": [[256, "module-neural_compressor.experimental.data.transforms"]], "basictokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[257, "neural_compressor.experimental.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[257, "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[257, "neural_compressor.experimental.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[257, "neural_compressor.experimental.data.transforms.tokenization.convert_by_vocab"]], "convert_to_unicode() (in module neural_compressor.experimental.data.transforms.tokenization)": [[257, "neural_compressor.experimental.data.transforms.tokenization.convert_to_unicode"]], "load_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[257, "neural_compressor.experimental.data.transforms.tokenization.load_vocab"]], "neural_compressor.experimental.data.transforms.tokenization": [[257, "module-neural_compressor.experimental.data.transforms.tokenization"]], "whitespace_tokenize() (in module neural_compressor.experimental.data.transforms.tokenization)": [[257, "neural_compressor.experimental.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.experimental.data.transforms.transform)": [[258, "neural_compressor.experimental.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.experimental.data.transforms.transform)": [[258, "neural_compressor.experimental.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.experimental.data.transforms.transform)": [[258, "neural_compressor.experimental.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[258, "neural_compressor.experimental.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.experimental.data.transforms.transform)": [[258, "neural_compressor.experimental.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[258, "neural_compressor.experimental.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[258, "neural_compressor.experimental.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[258, "neural_compressor.experimental.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.experimental.data.transforms.transform)": [[258, "neural_compressor.experimental.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[258, "neural_compressor.experimental.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[258, "neural_compressor.experimental.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[258, "neural_compressor.experimental.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.experimental.data.transforms.transform)": [[258, "neural_compressor.experimental.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[258, "neural_compressor.experimental.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[258, "neural_compressor.experimental.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[258, "neural_compressor.experimental.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.experimental.data.transforms.transform)": [[258, "neural_compressor.experimental.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.experimental.data.transforms.transform)": [[258, "neural_compressor.experimental.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[258, "neural_compressor.experimental.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[258, "neural_compressor.experimental.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[258, "neural_compressor.experimental.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.experimental.data.transforms.transform)": [[258, "neural_compressor.experimental.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.experimental.data.transforms.transform)": [[258, "neural_compressor.experimental.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[258, "neural_compressor.experimental.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.experimental.data.transforms.transform)": [[258, "neural_compressor.experimental.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.experimental.data.transforms.transform)": [[258, "neural_compressor.experimental.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[258, "neural_compressor.experimental.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[258, "neural_compressor.experimental.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[258, "neural_compressor.experimental.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[258, "neural_compressor.experimental.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[258, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[258, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[258, "neural_compressor.experimental.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[258, "neural_compressor.experimental.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[258, "neural_compressor.experimental.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[258, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[258, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[258, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[258, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[258, "neural_compressor.experimental.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.experimental.data.transforms.transform)": [[258, "neural_compressor.experimental.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.experimental.data.transforms.transform)": [[258, "neural_compressor.experimental.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.experimental.data.transforms.transform)": [[258, "neural_compressor.experimental.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[258, "neural_compressor.experimental.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[258, "neural_compressor.experimental.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[258, "neural_compressor.experimental.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[258, "neural_compressor.experimental.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[258, "neural_compressor.experimental.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.experimental.data.transforms.transform)": [[258, "neural_compressor.experimental.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[258, "neural_compressor.experimental.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.experimental.data.transforms.transform)": [[258, "neural_compressor.experimental.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.experimental.data.transforms.transform)": [[258, "neural_compressor.experimental.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.experimental.data.transforms.transform)": [[258, "neural_compressor.experimental.data.transforms.transform.TRANSFORMS"], [258, "neural_compressor.experimental.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[258, "neural_compressor.experimental.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[258, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[258, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[258, "neural_compressor.experimental.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.experimental.data.transforms.transform)": [[258, "neural_compressor.experimental.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[258, "neural_compressor.experimental.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[258, "neural_compressor.experimental.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[258, "neural_compressor.experimental.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.experimental.data.transforms.transform)": [[258, "neural_compressor.experimental.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.experimental.data.transforms.transform)": [[258, "neural_compressor.experimental.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.experimental.data.transforms.transform)": [[258, "neural_compressor.experimental.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.transforms.transform)": [[258, "neural_compressor.experimental.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.experimental.data.transforms.transform)": [[258, "neural_compressor.experimental.data.transforms.transform.get_final_text"]], "get_torchvision_map() (in module neural_compressor.experimental.data.transforms.transform)": [[258, "neural_compressor.experimental.data.transforms.transform.get_torchvision_map"]], "neural_compressor.experimental.data.transforms.transform": [[258, "module-neural_compressor.experimental.data.transforms.transform"]], "read_squad_examples() (in module neural_compressor.experimental.data.transforms.transform)": [[258, "neural_compressor.experimental.data.transforms.transform.read_squad_examples"]], "transform_registry() (in module neural_compressor.experimental.data.transforms.transform)": [[258, "neural_compressor.experimental.data.transforms.transform.transform_registry"]], "distillation (class in neural_compressor.experimental.distillation)": [[259, "neural_compressor.experimental.distillation.Distillation"]], "_epoch_ran (neural_compressor.experimental.distillation.distillation attribute)": [[259, "neural_compressor.experimental.distillation.Distillation._epoch_ran"]], "best_model (neural_compressor.experimental.distillation.distillation attribute)": [[259, "neural_compressor.experimental.distillation.Distillation.best_model"]], "best_score (neural_compressor.experimental.distillation.distillation attribute)": [[259, "neural_compressor.experimental.distillation.Distillation.best_score"]], "eval_frequency (neural_compressor.experimental.distillation.distillation attribute)": [[259, "neural_compressor.experimental.distillation.Distillation.eval_frequency"]], "neural_compressor.experimental.distillation": [[259, "module-neural_compressor.experimental.distillation"]], "neural_compressor.experimental.export": [[260, "module-neural_compressor.experimental.export"]], "check_model() (in module neural_compressor.experimental.export.qlinear2qdq)": [[261, "neural_compressor.experimental.export.qlinear2qdq.check_model"]], "neural_compressor.experimental.export.qlinear2qdq": [[261, "module-neural_compressor.experimental.export.qlinear2qdq"]], "onnx_qlinear_to_qdq() (in module neural_compressor.experimental.export.qlinear2qdq)": [[261, "neural_compressor.experimental.export.qlinear2qdq.onnx_qlinear_to_qdq"]], "neural_compressor.experimental.export.tf2onnx": [[262, "module-neural_compressor.experimental.export.tf2onnx"]], "tf_to_fp32_onnx() (in module neural_compressor.experimental.export.tf2onnx)": [[262, "neural_compressor.experimental.export.tf2onnx.tf_to_fp32_onnx"]], "tf_to_int8_onnx() (in module neural_compressor.experimental.export.tf2onnx)": [[262, "neural_compressor.experimental.export.tf2onnx.tf_to_int8_onnx"]], "dynamic_quant_export() (in module neural_compressor.experimental.export.torch2onnx)": [[263, "neural_compressor.experimental.export.torch2onnx.dynamic_quant_export"]], "get_node_mapping() (in module neural_compressor.experimental.export.torch2onnx)": [[263, "neural_compressor.experimental.export.torch2onnx.get_node_mapping"]], "get_quantizable_onnx_ops() (in module neural_compressor.experimental.export.torch2onnx)": [[263, "neural_compressor.experimental.export.torch2onnx.get_quantizable_onnx_ops"]], "neural_compressor.experimental.export.torch2onnx": [[263, "module-neural_compressor.experimental.export.torch2onnx"]], "static_quant_export() (in module neural_compressor.experimental.export.torch2onnx)": [[263, "neural_compressor.experimental.export.torch2onnx.static_quant_export"]], "torch_to_fp32_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[263, "neural_compressor.experimental.export.torch2onnx.torch_to_fp32_onnx"]], "torch_to_int8_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[263, "neural_compressor.experimental.export.torch2onnx.torch_to_int8_onnx"]], "graph_optimization (class in neural_compressor.experimental.graph_optimization)": [[264, "neural_compressor.experimental.graph_optimization.Graph_Optimization"]], "neural_compressor.experimental.graph_optimization": [[264, "module-neural_compressor.experimental.graph_optimization"]], "neural_compressor.experimental": [[265, "module-neural_compressor.experimental"]], "bleu (class in neural_compressor.experimental.metric.bleu)": [[266, "neural_compressor.experimental.metric.bleu.BLEU"]], "unicoderegex (class in neural_compressor.experimental.metric.bleu)": [[266, "neural_compressor.experimental.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.experimental.metric.bleu)": [[266, "neural_compressor.experimental.metric.bleu.bleu_tokenize"]], "labels (neural_compressor.experimental.metric.bleu.bleu attribute)": [[266, "neural_compressor.experimental.metric.bleu.BLEU.labels"]], "neural_compressor.experimental.metric.bleu": [[266, "module-neural_compressor.experimental.metric.bleu"]], "nondigit_punct_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[266, "neural_compressor.experimental.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "predictions (neural_compressor.experimental.metric.bleu.bleu attribute)": [[266, "neural_compressor.experimental.metric.bleu.BLEU.predictions"]], "punct_nondigit_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[266, "neural_compressor.experimental.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "symbol_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[266, "neural_compressor.experimental.metric.bleu.UnicodeRegex.symbol_re"]], "compute_bleu() (in module neural_compressor.experimental.metric.bleu_util)": [[267, "neural_compressor.experimental.metric.bleu_util.compute_bleu"]], "neural_compressor.experimental.metric.bleu_util": [[267, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[268, "module-neural_compressor.experimental.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.experimental.metric.coco_tools)": [[269, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.experimental.metric.coco_tools)": [[269, "neural_compressor.experimental.metric.coco_tools.COCOWrapper"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.experimental.metric.coco_tools)": [[269, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.experimental.metric.coco_tools)": [[269, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.experimental.metric.coco_tools)": [[269, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "dataset (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[269, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[269, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.experimental.metric.coco_tools": [[269, "module-neural_compressor.experimental.metric.coco_tools"]], "evaluate() (in module neural_compressor.experimental.metric.evaluate_squad)": [[270, "neural_compressor.experimental.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[270, "neural_compressor.experimental.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[270, "neural_compressor.experimental.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.evaluate_squad)": [[270, "neural_compressor.experimental.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.evaluate_squad": [[270, "module-neural_compressor.experimental.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.experimental.metric.f1)": [[271, "neural_compressor.experimental.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.experimental.metric.f1)": [[271, "neural_compressor.experimental.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.f1)": [[271, "neural_compressor.experimental.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[271, "module-neural_compressor.experimental.metric.f1"]], "normalize_answer() (in module neural_compressor.experimental.metric.f1)": [[271, "neural_compressor.experimental.metric.f1.normalize_answer"]], "neural_compressor.experimental.metric": [[272, "module-neural_compressor.experimental.metric"]], "accuracy (class in neural_compressor.experimental.metric.metric)": [[273, "neural_compressor.experimental.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.experimental.metric.metric)": [[273, "neural_compressor.experimental.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.experimental.metric.metric)": [[273, "neural_compressor.experimental.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.experimental.metric.metric)": [[273, "neural_compressor.experimental.metric.metric.F1"]], "generaltopk (class in neural_compressor.experimental.metric.metric)": [[273, "neural_compressor.experimental.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.experimental.metric.metric)": [[273, "neural_compressor.experimental.metric.metric.Loss"]], "mae (class in neural_compressor.experimental.metric.metric)": [[273, "neural_compressor.experimental.metric.metric.MAE"]], "metrics (class in neural_compressor.experimental.metric.metric)": [[273, "neural_compressor.experimental.metric.metric.METRICS"]], "mse (class in neural_compressor.experimental.metric.metric)": [[273, "neural_compressor.experimental.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.experimental.metric.metric)": [[273, "neural_compressor.experimental.metric.metric.MXNetMetrics"]], "onnxrtglue (class in neural_compressor.experimental.metric.metric)": [[273, "neural_compressor.experimental.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.experimental.metric.metric)": [[273, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.experimental.metric.metric)": [[273, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.experimental.metric.metric)": [[273, "neural_compressor.experimental.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.experimental.metric.metric)": [[273, "neural_compressor.experimental.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.experimental.metric.metric)": [[273, "neural_compressor.experimental.metric.metric.RMSE"]], "roc (class in neural_compressor.experimental.metric.metric)": [[273, "neural_compressor.experimental.metric.metric.ROC"]], "squadf1 (class in neural_compressor.experimental.metric.metric)": [[273, "neural_compressor.experimental.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.experimental.metric.metric)": [[273, "neural_compressor.experimental.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.experimental.metric.metric)": [[273, "neural_compressor.experimental.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.experimental.metric.metric)": [[273, "neural_compressor.experimental.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.experimental.metric.metric)": [[273, "neural_compressor.experimental.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.experimental.metric.metric)": [[273, "neural_compressor.experimental.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.experimental.metric.metric)": [[273, "neural_compressor.experimental.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.experimental.metric.metric)": [[273, "neural_compressor.experimental.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.experimental.metric.metric)": [[273, "neural_compressor.experimental.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.experimental.metric.metric.mae attribute)": [[273, "neural_compressor.experimental.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.experimental.metric.metric.mse attribute)": [[273, "neural_compressor.experimental.metric.metric.MSE.compare_label"]], "k (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[273, "neural_compressor.experimental.metric.metric.GeneralTopK.k"]], "k (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[273, "neural_compressor.experimental.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[273, "neural_compressor.experimental.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mae attribute)": [[273, "neural_compressor.experimental.metric.metric.MAE.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mse attribute)": [[273, "neural_compressor.experimental.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.experimental.metric.metric)": [[273, "neural_compressor.experimental.metric.metric.mIOU"]], "metric_registry() (in module neural_compressor.experimental.metric.metric)": [[273, "neural_compressor.experimental.metric.metric.metric_registry"]], "metrics (neural_compressor.experimental.metric.metric.metrics attribute)": [[273, "neural_compressor.experimental.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.experimental.metric.metric.mxnetmetrics attribute)": [[273, "neural_compressor.experimental.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtitmetrics attribute)": [[273, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtqlmetrics attribute)": [[273, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.pytorchmetrics attribute)": [[273, "neural_compressor.experimental.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.tensorflowmetrics attribute)": [[273, "neural_compressor.experimental.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.experimental.metric.metric.rmse attribute)": [[273, "neural_compressor.experimental.metric.metric.RMSE.mse"]], "neural_compressor.experimental.metric.metric": [[273, "module-neural_compressor.experimental.metric.metric"]], "num_correct (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[273, "neural_compressor.experimental.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[273, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[273, "neural_compressor.experimental.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[273, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[273, "neural_compressor.experimental.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mae attribute)": [[273, "neural_compressor.experimental.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mse attribute)": [[273, "neural_compressor.experimental.metric.metric.MSE.pred_list"]], "sample (neural_compressor.experimental.metric.metric.accuracy attribute)": [[273, "neural_compressor.experimental.metric.metric.Accuracy.sample"]], "sample (neural_compressor.experimental.metric.metric.loss attribute)": [[273, "neural_compressor.experimental.metric.metric.Loss.sample"]], "sum (neural_compressor.experimental.metric.metric.loss attribute)": [[273, "neural_compressor.experimental.metric.metric.Loss.sum"]], "mixedprecision (class in neural_compressor.experimental.mixed_precision)": [[274, "neural_compressor.experimental.mixed_precision.MixedPrecision"]], "neural_compressor.experimental.mixed_precision": [[274, "module-neural_compressor.experimental.mixed_precision"]], "modelconversion (class in neural_compressor.experimental.model_conversion)": [[275, "neural_compressor.experimental.model_conversion.ModelConversion"]], "neural_compressor.experimental.model_conversion": [[275, "module-neural_compressor.experimental.model_conversion"]], "basicnas (class in neural_compressor.experimental.nas.basic_nas)": [[276, "neural_compressor.experimental.nas.basic_nas.BasicNAS"]], "neural_compressor.experimental.nas.basic_nas": [[276, "module-neural_compressor.experimental.nas.basic_nas"]], "dynas (class in neural_compressor.experimental.nas.dynas)": [[277, "neural_compressor.experimental.nas.dynas.DyNAS"]], "neural_compressor.experimental.nas.dynas": [[277, "module-neural_compressor.experimental.nas.dynas"]], "neural_compressor.experimental.nas": [[278, "module-neural_compressor.experimental.nas"]], "nas (class in neural_compressor.experimental.nas.nas)": [[279, "neural_compressor.experimental.nas.nas.NAS"]], "nasbase (class in neural_compressor.experimental.nas.nas)": [[279, "neural_compressor.experimental.nas.nas.NASBase"]], "neural_compressor.experimental.nas.nas": [[279, "module-neural_compressor.experimental.nas.nas"]], "create_search_space_pool() (in module neural_compressor.experimental.nas.nas_utils)": [[280, "neural_compressor.experimental.nas.nas_utils.create_search_space_pool"]], "find_pareto_front() (in module neural_compressor.experimental.nas.nas_utils)": [[280, "neural_compressor.experimental.nas.nas_utils.find_pareto_front"]], "nas_registry() (in module neural_compressor.experimental.nas.nas_utils)": [[280, "neural_compressor.experimental.nas.nas_utils.nas_registry"]], "neural_compressor.experimental.nas.nas_utils": [[280, "module-neural_compressor.experimental.nas.nas_utils"]], "bayesianoptimizationsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[281, "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher"]], "gridsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[281, "neural_compressor.experimental.nas.search_algorithms.GridSearcher"]], "randomsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[281, "neural_compressor.experimental.nas.search_algorithms.RandomSearcher"]], "searcher (class in neural_compressor.experimental.nas.search_algorithms)": [[281, "neural_compressor.experimental.nas.search_algorithms.Searcher"]], "neural_compressor.experimental.nas.search_algorithms": [[281, "module-neural_compressor.experimental.nas.search_algorithms"]], "gradientsensitivitypruner (class in neural_compressor.experimental.pruner_legacy.gradient_sensitivity)": [[282, "neural_compressor.experimental.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[282, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"]], "grouplassopruner (class in neural_compressor.experimental.pruner_legacy.group_lasso)": [[283, "neural_compressor.experimental.pruner_legacy.group_lasso.GroupLassoPruner"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[283, "module-neural_compressor.experimental.pruner_legacy.group_lasso"]], "neural_compressor.experimental.pruner_legacy": [[284, "module-neural_compressor.experimental.pruner_legacy"]], "basicmagnitudepruner (class in neural_compressor.experimental.pruner_legacy.magnitude)": [[285, "neural_compressor.experimental.pruner_legacy.magnitude.BasicMagnitudePruner"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[285, "module-neural_compressor.experimental.pruner_legacy.magnitude"]], "patternlockpruner (class in neural_compressor.experimental.pruner_legacy.pattern_lock)": [[286, "neural_compressor.experimental.pruner_legacy.pattern_lock.PatternLockPruner"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[286, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"]], "pruner (class in neural_compressor.experimental.pruner_legacy.pruner)": [[287, "neural_compressor.experimental.pruner_legacy.pruner.Pruner"]], "neural_compressor.experimental.pruner_legacy.pruner": [[287, "module-neural_compressor.experimental.pruner_legacy.pruner"]], "pruner_registry() (in module neural_compressor.experimental.pruner_legacy.pruner)": [[287, "neural_compressor.experimental.pruner_legacy.pruner.pruner_registry"]], "pruning (class in neural_compressor.experimental.pruning)": [[288, "neural_compressor.experimental.pruning.Pruning"]], "tfpruningcallback (class in neural_compressor.experimental.pruning)": [[288, "neural_compressor.experimental.pruning.TfPruningCallback"]], "conf (neural_compressor.experimental.pruning.pruning attribute)": [[288, "neural_compressor.experimental.pruning.Pruning.conf"]], "neural_compressor.experimental.pruning": [[288, "module-neural_compressor.experimental.pruning"]], "pruners (neural_compressor.experimental.pruning.pruning attribute)": [[288, "neural_compressor.experimental.pruning.Pruning.pruners"]], "neural_compressor.experimental.pruning_recipes": [[289, "module-neural_compressor.experimental.pruning_recipes"]], "neural_compressor.experimental.pruning_recipes.patterns": [[290, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "patterns (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[291, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS"]], "patternbase (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[291, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[291, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "pattern_registry() (in module neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[291, "neural_compressor.experimental.pruning_recipes.patterns.pattern.pattern_registry"]], "patterns (neural_compressor.experimental.pruning_recipes.patterns.pattern.patterns attribute)": [[291, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS.patterns"]], "tilepatternbase (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[292, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePatternBase"]], "tilepattern_1x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[292, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x1"]], "tilepattern_1x16 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[292, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x16"]], "tilepattern_1x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[292, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x2"]], "tilepattern_2x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[292, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_2x2"]], "tilepattern_4x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[292, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_4x1"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[292, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "pruning (class in neural_compressor.experimental.pruning_v2)": [[293, "neural_compressor.experimental.pruning_v2.Pruning"]], "tfpruningcallback (class in neural_compressor.experimental.pruning_v2)": [[293, "neural_compressor.experimental.pruning_v2.TfPruningCallback"]], "conf (neural_compressor.experimental.pruning_v2.pruning attribute)": [[293, "neural_compressor.experimental.pruning_v2.Pruning.conf"]], "neural_compressor.experimental.pruning_v2": [[293, "module-neural_compressor.experimental.pruning_v2"]], "pruners (neural_compressor.experimental.pruning_v2.pruning attribute)": [[293, "neural_compressor.experimental.pruning_v2.Pruning.pruners"]], "neural_compressor.experimental.pytorch_pruner": [[294, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[295, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "m (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[296, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.M"]], "n (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[296, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.N"]], "pattern (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[296, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern"]], "patternninm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[296, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM"]], "patternnxm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[296, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM"]], "block_size (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm attribute)": [[296, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.block_size"]], "get_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[296, "neural_compressor.experimental.pytorch_pruner.patterns.get_pattern"]], "is_global (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[296, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.is_global"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[296, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "pattern (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[296, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.pattern"]], "register_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[296, "neural_compressor.experimental.pytorch_pruner.patterns.register_pattern"]], "check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[297, "neural_compressor.experimental.pytorch_pruner.prune_utils.check_config"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[297, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "parse_not_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[297, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_not_to_prune"]], "parse_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[297, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_to_prune"]], "process_and_check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[297, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_and_check_config"]], "process_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[297, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_config"]], "reset_non_value_to_default() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[297, "neural_compressor.experimental.pytorch_pruner.prune_utils.reset_non_value_to_default"]], "magnitudepruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[298, "neural_compressor.experimental.pytorch_pruner.pruner.MagnitudePruner"]], "patternlockpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[298, "neural_compressor.experimental.pytorch_pruner.pruner.PatternLockPruner"]], "pruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[298, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner"]], "snipmomentumpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[298, "neural_compressor.experimental.pytorch_pruner.pruner.SnipMomentumPruner"]], "snippruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[298, "neural_compressor.experimental.pytorch_pruner.pruner.SnipPruner"]], "config (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[298, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.config"]], "current_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[298, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.current_sparsity_ratio"]], "end_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[298, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.end_step"]], "get_pruner() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[298, "neural_compressor.experimental.pytorch_pruner.pruner.get_pruner"]], "global_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[298, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.global_step"]], "masks (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[298, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.masks"]], "max_sparsity_ratio_per_layer (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[298, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.max_sparsity_ratio_per_layer"]], "modules (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[298, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.modules"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[298, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "pattern (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[298, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.pattern"]], "register_pruners() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[298, "neural_compressor.experimental.pytorch_pruner.pruner.register_pruners"]], "scheduler (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[298, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scheduler"]], "scores (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[298, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scores"]], "start_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[298, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.start_step"]], "target_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[298, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.target_sparsity_ratio"]], "update_frequency_on_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[298, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.update_frequency_on_step"]], "pruning (class in neural_compressor.experimental.pytorch_pruner.pruning)": [[299, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning"]], "config_file_path (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[299, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.config_file_path"]], "model (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[299, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.model"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[299, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "pruner_info (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[299, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruner_info"]], "pruners (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[299, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruners"]], "iterativescheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[300, "neural_compressor.experimental.pytorch_pruner.scheduler.IterativeScheduler"]], "oneshotscheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[300, "neural_compressor.experimental.pytorch_pruner.scheduler.OneshotScheduler"]], "scheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[300, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler"]], "config (neural_compressor.experimental.pytorch_pruner.scheduler.scheduler attribute)": [[300, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler.config"]], "get_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[300, "neural_compressor.experimental.pytorch_pruner.scheduler.get_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[300, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "register_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[300, "neural_compressor.experimental.pytorch_pruner.scheduler.register_scheduler"]], "quantization (class in neural_compressor.experimental.quantization)": [[301, "neural_compressor.experimental.quantization.Quantization"]], "neural_compressor.experimental.quantization": [[301, "module-neural_compressor.experimental.quantization"]], "scheduler (class in neural_compressor.experimental.scheduler)": [[302, "neural_compressor.experimental.scheduler.Scheduler"]], "neural_compressor.experimental.scheduler": [[302, "module-neural_compressor.experimental.scheduler"]], "automixedprecisiontunestrategy (class in neural_compressor.experimental.strategy.auto_mixed_precision)": [[303, "neural_compressor.experimental.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy"]], "neural_compressor.experimental.strategy.auto_mixed_precision": [[303, "module-neural_compressor.experimental.strategy.auto_mixed_precision"]], "basictunestrategy (class in neural_compressor.experimental.strategy.basic)": [[304, "neural_compressor.experimental.strategy.basic.BasicTuneStrategy"]], "neural_compressor.experimental.strategy.basic": [[304, "module-neural_compressor.experimental.strategy.basic"]], "bayesianoptimization (class in neural_compressor.experimental.strategy.bayesian)": [[305, "neural_compressor.experimental.strategy.bayesian.BayesianOptimization"]], "bayesiantunestrategy (class in neural_compressor.experimental.strategy.bayesian)": [[305, "neural_compressor.experimental.strategy.bayesian.BayesianTuneStrategy"]], "targetspace (class in neural_compressor.experimental.strategy.bayesian)": [[305, "neural_compressor.experimental.strategy.bayesian.TargetSpace"]], "acq_max() (in module neural_compressor.experimental.strategy.bayesian)": [[305, "neural_compressor.experimental.strategy.bayesian.acq_max"]], "neural_compressor.experimental.strategy.bayesian": [[305, "module-neural_compressor.experimental.strategy.bayesian"]], "exhaustivetunestrategy (class in neural_compressor.experimental.strategy.exhaustive)": [[306, "neural_compressor.experimental.strategy.exhaustive.ExhaustiveTuneStrategy"]], "neural_compressor.experimental.strategy.exhaustive": [[306, "module-neural_compressor.experimental.strategy.exhaustive"]], "neural_compressor.experimental.strategy": [[307, "module-neural_compressor.experimental.strategy"]], "msetunestrategy (class in neural_compressor.experimental.strategy.mse)": [[308, "neural_compressor.experimental.strategy.mse.MSETuneStrategy"]], "neural_compressor.experimental.strategy.mse": [[308, "module-neural_compressor.experimental.strategy.mse"]], "mse_v2tunestrategy (class in neural_compressor.experimental.strategy.mse_v2)": [[309, "neural_compressor.experimental.strategy.mse_v2.MSE_V2TuneStrategy"]], "neural_compressor.experimental.strategy.mse_v2": [[309, "module-neural_compressor.experimental.strategy.mse_v2"]], "randomtunestrategy (class in neural_compressor.experimental.strategy.random)": [[310, "neural_compressor.experimental.strategy.random.RandomTuneStrategy"]], "neural_compressor.experimental.strategy.random": [[310, "module-neural_compressor.experimental.strategy.random"]], "tunestrategy (class in neural_compressor.experimental.strategy.strategy)": [[311, "neural_compressor.experimental.strategy.strategy.TuneStrategy"]], "neural_compressor.experimental.strategy.strategy": [[311, "module-neural_compressor.experimental.strategy.strategy"]], "strategy_registry() (in module neural_compressor.experimental.strategy.strategy)": [[311, "neural_compressor.experimental.strategy.strategy.strategy_registry"]], "neural_compressor.experimental.strategy.utils.constant": [[312, "module-neural_compressor.experimental.strategy.utils.constant"]], "neural_compressor.experimental.strategy.utils": [[313, "module-neural_compressor.experimental.strategy.utils"]], "fallbacktuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[314, "neural_compressor.experimental.strategy.utils.tuning_sampler.FallbackTuningSampler"]], "modelwisetuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[314, "neural_compressor.experimental.strategy.utils.tuning_sampler.ModelWiseTuningSampler"]], "optypewisetuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[314, "neural_compressor.experimental.strategy.utils.tuning_sampler.OpTypeWiseTuningSampler"]], "opwisetuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[314, "neural_compressor.experimental.strategy.utils.tuning_sampler.OpWiseTuningSampler"]], "smoothquantsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[314, "neural_compressor.experimental.strategy.utils.tuning_sampler.SmoothQuantSampler"]], "tuningorder (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[314, "neural_compressor.experimental.strategy.utils.tuning_sampler.TuningOrder"]], "tuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[314, "neural_compressor.experimental.strategy.utils.tuning_sampler.TuningSampler"]], "tuningsamplerregistry (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[314, "neural_compressor.experimental.strategy.utils.tuning_sampler.TuningSamplerRegistry"]], "neural_compressor.experimental.strategy.utils.tuning_sampler": [[314, "module-neural_compressor.experimental.strategy.utils.tuning_sampler"]], "tuningitem (class in neural_compressor.experimental.strategy.utils.tuning_space)": [[315, "neural_compressor.experimental.strategy.utils.tuning_space.TuningItem"]], "tuningspace (class in neural_compressor.experimental.strategy.utils.tuning_space)": [[315, "neural_compressor.experimental.strategy.utils.tuning_space.TuningSpace"]], "initial_tuning_cfg_with_quant_mode() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[315, "neural_compressor.experimental.strategy.utils.tuning_space.initial_tuning_cfg_with_quant_mode"]], "neural_compressor.experimental.strategy.utils.tuning_space": [[315, "module-neural_compressor.experimental.strategy.utils.tuning_space"]], "pattern_to_internal() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[315, "neural_compressor.experimental.strategy.utils.tuning_space.pattern_to_internal"]], "pattern_to_path() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[315, "neural_compressor.experimental.strategy.utils.tuning_space.pattern_to_path"]], "quant_mode_from_pattern() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[315, "neural_compressor.experimental.strategy.utils.tuning_space.quant_mode_from_pattern"]], "optuningconfig (class in neural_compressor.experimental.strategy.utils.tuning_structs)": [[316, "neural_compressor.experimental.strategy.utils.tuning_structs.OpTuningConfig"]], "neural_compressor.experimental.strategy.utils.tuning_structs": [[316, "module-neural_compressor.experimental.strategy.utils.tuning_structs"]], "ordereddefaultdict (class in neural_compressor.experimental.strategy.utils.utility)": [[317, "neural_compressor.experimental.strategy.utils.utility.OrderedDefaultDict"]], "extract_data_type() (in module neural_compressor.experimental.strategy.utils.utility)": [[317, "neural_compressor.experimental.strategy.utils.utility.extract_data_type"]], "get_adaptor_name() (in module neural_compressor.experimental.strategy.utils.utility)": [[317, "neural_compressor.experimental.strategy.utils.utility.get_adaptor_name"]], "neural_compressor.experimental.strategy.utils.utility": [[317, "module-neural_compressor.experimental.strategy.utils.utility"]], "reverted_data_type() (in module neural_compressor.experimental.strategy.utils.utility)": [[317, "neural_compressor.experimental.strategy.utils.utility.reverted_data_type"]], "neural_compressor": [[318, "module-neural_compressor"]], "bleu (class in neural_compressor.metric.bleu)": [[319, "neural_compressor.metric.bleu.BLEU"]], "unicoderegex (class in neural_compressor.metric.bleu)": [[319, "neural_compressor.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.metric.bleu)": [[319, "neural_compressor.metric.bleu.bleu_tokenize"]], "labels (neural_compressor.metric.bleu.bleu attribute)": [[319, "neural_compressor.metric.bleu.BLEU.labels"]], "neural_compressor.metric.bleu": [[319, "module-neural_compressor.metric.bleu"]], "nondigit_punct_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[319, "neural_compressor.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "predictions (neural_compressor.metric.bleu.bleu attribute)": [[319, "neural_compressor.metric.bleu.BLEU.predictions"]], "punct_nondigit_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[319, "neural_compressor.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "symbol_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[319, "neural_compressor.metric.bleu.UnicodeRegex.symbol_re"]], "compute_bleu() (in module neural_compressor.metric.bleu_util)": [[320, "neural_compressor.metric.bleu_util.compute_bleu"]], "neural_compressor.metric.bleu_util": [[320, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[321, "module-neural_compressor.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.metric.coco_tools)": [[322, "neural_compressor.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.metric.coco_tools)": [[322, "neural_compressor.metric.coco_tools.COCOWrapper"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.metric.coco_tools)": [[322, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.metric.coco_tools)": [[322, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.metric.coco_tools)": [[322, "neural_compressor.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "dataset (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[322, "neural_compressor.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[322, "neural_compressor.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.metric.coco_tools": [[322, "module-neural_compressor.metric.coco_tools"]], "evaluate() (in module neural_compressor.metric.evaluate_squad)": [[323, "neural_compressor.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.metric.evaluate_squad)": [[323, "neural_compressor.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.metric.evaluate_squad)": [[323, "neural_compressor.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.evaluate_squad)": [[323, "neural_compressor.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.metric.evaluate_squad": [[323, "module-neural_compressor.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.metric.f1)": [[324, "neural_compressor.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.metric.f1)": [[324, "neural_compressor.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.f1)": [[324, "neural_compressor.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[324, "module-neural_compressor.metric.f1"]], "normalize_answer() (in module neural_compressor.metric.f1)": [[324, "neural_compressor.metric.f1.normalize_answer"]], "neural_compressor.metric": [[325, "module-neural_compressor.metric"]], "accuracy (class in neural_compressor.metric.metric)": [[326, "neural_compressor.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.metric.metric)": [[326, "neural_compressor.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.metric.metric)": [[326, "neural_compressor.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.metric.metric)": [[326, "neural_compressor.metric.metric.F1"]], "generaltopk (class in neural_compressor.metric.metric)": [[326, "neural_compressor.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.metric.metric)": [[326, "neural_compressor.metric.metric.Loss"]], "mae (class in neural_compressor.metric.metric)": [[326, "neural_compressor.metric.metric.MAE"]], "metrics (class in neural_compressor.metric.metric)": [[326, "neural_compressor.metric.metric.METRICS"]], "mse (class in neural_compressor.metric.metric)": [[326, "neural_compressor.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.metric.metric)": [[326, "neural_compressor.metric.metric.MXNetMetrics"]], "metric (class in neural_compressor.metric.metric)": [[326, "neural_compressor.metric.metric.Metric"]], "onnxrtglue (class in neural_compressor.metric.metric)": [[326, "neural_compressor.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.metric.metric)": [[326, "neural_compressor.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.metric.metric)": [[326, "neural_compressor.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.metric.metric)": [[326, "neural_compressor.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.metric.metric)": [[326, "neural_compressor.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.metric.metric)": [[326, "neural_compressor.metric.metric.RMSE"]], "roc (class in neural_compressor.metric.metric)": [[326, "neural_compressor.metric.metric.ROC"]], "squadf1 (class in neural_compressor.metric.metric)": [[326, "neural_compressor.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.metric.metric)": [[326, "neural_compressor.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.metric.metric)": [[326, "neural_compressor.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.metric.metric)": [[326, "neural_compressor.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.metric.metric)": [[326, "neural_compressor.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.metric.metric)": [[326, "neural_compressor.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.metric.metric)": [[326, "neural_compressor.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.metric.metric)": [[326, "neural_compressor.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.metric.metric)": [[326, "neural_compressor.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.metric.metric.mae attribute)": [[326, "neural_compressor.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.metric.metric.mse attribute)": [[326, "neural_compressor.metric.metric.MSE.compare_label"]], "k (neural_compressor.metric.metric.generaltopk attribute)": [[326, "neural_compressor.metric.metric.GeneralTopK.k"]], "k (neural_compressor.metric.metric.tensorflowtopk attribute)": [[326, "neural_compressor.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.metric.metric.accuracy attribute)": [[326, "neural_compressor.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.metric.metric.mae attribute)": [[326, "neural_compressor.metric.metric.MAE.label_list"]], "label_list (neural_compressor.metric.metric.mse attribute)": [[326, "neural_compressor.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.metric.metric)": [[326, "neural_compressor.metric.metric.mIOU"]], "metric_registry() (in module neural_compressor.metric.metric)": [[326, "neural_compressor.metric.metric.metric_registry"]], "metrics (neural_compressor.metric.metric.metrics attribute)": [[326, "neural_compressor.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.metric.metric.mxnetmetrics attribute)": [[326, "neural_compressor.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtitmetrics attribute)": [[326, "neural_compressor.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtqlmetrics attribute)": [[326, "neural_compressor.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.metric.metric.pytorchmetrics attribute)": [[326, "neural_compressor.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.metric.metric.tensorflowmetrics attribute)": [[326, "neural_compressor.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.metric.metric.rmse attribute)": [[326, "neural_compressor.metric.metric.RMSE.mse"]], "neural_compressor.metric.metric": [[326, "module-neural_compressor.metric.metric"]], "num_correct (neural_compressor.metric.metric.generaltopk attribute)": [[326, "neural_compressor.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.metric.metric.tensorflowtopk attribute)": [[326, "neural_compressor.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.metric.metric.generaltopk attribute)": [[326, "neural_compressor.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.metric.metric.tensorflowtopk attribute)": [[326, "neural_compressor.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.metric.metric.accuracy attribute)": [[326, "neural_compressor.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.metric.metric.mae attribute)": [[326, "neural_compressor.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.metric.metric.mse attribute)": [[326, "neural_compressor.metric.metric.MSE.pred_list"]], "register_customer_metric() (in module neural_compressor.metric.metric)": [[326, "neural_compressor.metric.metric.register_customer_metric"]], "sample (neural_compressor.metric.metric.accuracy attribute)": [[326, "neural_compressor.metric.metric.Accuracy.sample"]], "sample (neural_compressor.metric.metric.loss attribute)": [[326, "neural_compressor.metric.metric.Loss.sample"]], "sum (neural_compressor.metric.metric.loss attribute)": [[326, "neural_compressor.metric.metric.Loss.sum"]], "fit() (in module neural_compressor.mix_precision)": [[327, "neural_compressor.mix_precision.fit"]], "neural_compressor.mix_precision": [[327, "module-neural_compressor.mix_precision"]], "basemodel (class in neural_compressor.model.base_model)": [[328, "neural_compressor.model.base_model.BaseModel"]], "neural_compressor.model.base_model": [[328, "module-neural_compressor.model.base_model"]], "neural_compressor.model": [[329, "module-neural_compressor.model"]], "kerasmodel (class in neural_compressor.model.keras_model)": [[330, "neural_compressor.model.keras_model.KerasModel"]], "neural_compressor.model.keras_model": [[330, "module-neural_compressor.model.keras_model"]], "model (class in neural_compressor.model.model)": [[331, "neural_compressor.model.model.Model"]], "get_model_fwk_name() (in module neural_compressor.model.model)": [[331, "neural_compressor.model.model.get_model_fwk_name"]], "neural_compressor.model.model": [[331, "module-neural_compressor.model.model"]], "mxnetmodel (class in neural_compressor.model.mxnet_model)": [[332, "neural_compressor.model.mxnet_model.MXNetModel"]], "neural_compressor.model.mxnet_model": [[332, "module-neural_compressor.model.mxnet_model"]], "tfslimnetsfactory (class in neural_compressor.model.nets_factory)": [[333, "neural_compressor.model.nets_factory.TFSlimNetsFactory"]], "neural_compressor.model.nets_factory": [[333, "module-neural_compressor.model.nets_factory"]], "onnxmodel (class in neural_compressor.model.onnx_model)": [[334, "neural_compressor.model.onnx_model.ONNXModel"]], "neural_compressor.model.onnx_model": [[334, "module-neural_compressor.model.onnx_model"]], "tensorflowbasemodel (class in neural_compressor.model.tensorflow_model)": [[335, "neural_compressor.model.tensorflow_model.TensorflowBaseModel"]], "tensorflowcheckpointmodel (class in neural_compressor.model.tensorflow_model)": [[335, "neural_compressor.model.tensorflow_model.TensorflowCheckpointModel"]], "tensorflowmodel (class in neural_compressor.model.tensorflow_model)": [[335, "neural_compressor.model.tensorflow_model.TensorflowModel"]], "tensorflowqatmodel (class in neural_compressor.model.tensorflow_model)": [[335, "neural_compressor.model.tensorflow_model.TensorflowQATModel"]], "tensorflowsavedmodelmodel (class in neural_compressor.model.tensorflow_model)": [[335, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel"]], "checkpoint_session() (in module neural_compressor.model.tensorflow_model)": [[335, "neural_compressor.model.tensorflow_model.checkpoint_session"]], "estimator_session() (in module neural_compressor.model.tensorflow_model)": [[335, "neural_compressor.model.tensorflow_model.estimator_session"]], "frozen_pb_session() (in module neural_compressor.model.tensorflow_model)": [[335, "neural_compressor.model.tensorflow_model.frozen_pb_session"]], "get_model_type() (in module neural_compressor.model.tensorflow_model)": [[335, "neural_compressor.model.tensorflow_model.get_model_type"]], "graph_def_session() (in module neural_compressor.model.tensorflow_model)": [[335, "neural_compressor.model.tensorflow_model.graph_def_session"]], "graph_session() (in module neural_compressor.model.tensorflow_model)": [[335, "neural_compressor.model.tensorflow_model.graph_session"]], "keras_session() (in module neural_compressor.model.tensorflow_model)": [[335, "neural_compressor.model.tensorflow_model.keras_session"]], "load_saved_model() (in module neural_compressor.model.tensorflow_model)": [[335, "neural_compressor.model.tensorflow_model.load_saved_model"]], "neural_compressor.model.tensorflow_model": [[335, "module-neural_compressor.model.tensorflow_model"]], "saved_model_session() (in module neural_compressor.model.tensorflow_model)": [[335, "neural_compressor.model.tensorflow_model.saved_model_session"]], "slim_session() (in module neural_compressor.model.tensorflow_model)": [[335, "neural_compressor.model.tensorflow_model.slim_session"]], "validate_and_inference_input_output() (in module neural_compressor.model.tensorflow_model)": [[335, "neural_compressor.model.tensorflow_model.validate_and_inference_input_output"]], "validate_graph_node() (in module neural_compressor.model.tensorflow_model)": [[335, "neural_compressor.model.tensorflow_model.validate_graph_node"]], "ipexmodel (class in neural_compressor.model.torch_model)": [[336, "neural_compressor.model.torch_model.IPEXModel"]], "pytorchbasemodel (class in neural_compressor.model.torch_model)": [[336, "neural_compressor.model.torch_model.PyTorchBaseModel"]], "pytorchfxmodel (class in neural_compressor.model.torch_model)": [[336, "neural_compressor.model.torch_model.PyTorchFXModel"]], "pytorchmodel (class in neural_compressor.model.torch_model)": [[336, "neural_compressor.model.torch_model.PyTorchModel"]], "neural_compressor.model.torch_model": [[336, "module-neural_compressor.model.torch_model"]], "accuracy (class in neural_compressor.objective)": [[337, "neural_compressor.objective.Accuracy"]], "footprint (class in neural_compressor.objective)": [[337, "neural_compressor.objective.Footprint"]], "modelsize (class in neural_compressor.objective)": [[337, "neural_compressor.objective.ModelSize"]], "multiobjective (class in neural_compressor.objective)": [[337, "neural_compressor.objective.MultiObjective"]], "objective (class in neural_compressor.objective)": [[337, "neural_compressor.objective.Objective"]], "performance (class in neural_compressor.objective)": [[337, "neural_compressor.objective.Performance"]], "neural_compressor.objective": [[337, "module-neural_compressor.objective"]], "objective_custom_registry() (in module neural_compressor.objective)": [[337, "neural_compressor.objective.objective_custom_registry"]], "objective_registry() (in module neural_compressor.objective)": [[337, "neural_compressor.objective.objective_registry"]], "neural_compressor.profiling": [[338, "module-neural_compressor.profiling"]], "parserfactory (class in neural_compressor.profiling.parser.factory)": [[339, "neural_compressor.profiling.parser.factory.ParserFactory"]], "neural_compressor.profiling.parser.factory": [[339, "module-neural_compressor.profiling.parser.factory"]], "neural_compressor.profiling.parser": [[340, "module-neural_compressor.profiling.parser"]], "onnxrtparserfactory (class in neural_compressor.profiling.parser.onnx_parser.factory)": [[341, "neural_compressor.profiling.parser.onnx_parser.factory.OnnxrtParserFactory"]], "neural_compressor.profiling.parser.onnx_parser.factory": [[341, "module-neural_compressor.profiling.parser.onnx_parser.factory"]], "neural_compressor.profiling.parser.onnx_parser": [[342, "module-neural_compressor.profiling.parser.onnx_parser"]], "onnxprofilingparser (class in neural_compressor.profiling.parser.onnx_parser.parser)": [[343, "neural_compressor.profiling.parser.onnx_parser.parser.OnnxProfilingParser"]], "neural_compressor.profiling.parser.onnx_parser.parser": [[343, "module-neural_compressor.profiling.parser.onnx_parser.parser"]], "profilingparser (class in neural_compressor.profiling.parser.parser)": [[344, "neural_compressor.profiling.parser.parser.ProfilingParser"]], "neural_compressor.profiling.parser.parser": [[344, "module-neural_compressor.profiling.parser.parser"]], "profilingresult (class in neural_compressor.profiling.parser.result)": [[345, "neural_compressor.profiling.parser.result.ProfilingResult"]], "neural_compressor.profiling.parser.result": [[345, "module-neural_compressor.profiling.parser.result"]], "tensorflowparserfactory (class in neural_compressor.profiling.parser.tensorflow_parser.factory)": [[346, "neural_compressor.profiling.parser.tensorflow_parser.factory.TensorFlowParserFactory"]], "neural_compressor.profiling.parser.tensorflow_parser.factory": [[346, "module-neural_compressor.profiling.parser.tensorflow_parser.factory"]], "neural_compressor.profiling.parser.tensorflow_parser": [[347, "module-neural_compressor.profiling.parser.tensorflow_parser"]], "tensorflowprofilingparser (class in neural_compressor.profiling.parser.tensorflow_parser.parser)": [[348, "neural_compressor.profiling.parser.tensorflow_parser.parser.TensorFlowProfilingParser"]], "neural_compressor.profiling.parser.tensorflow_parser.parser": [[348, "module-neural_compressor.profiling.parser.tensorflow_parser.parser"]], "profilerfactory (class in neural_compressor.profiling.profiler.factory)": [[349, "neural_compressor.profiling.profiler.factory.ProfilerFactory"]], "neural_compressor.profiling.profiler.factory": [[349, "module-neural_compressor.profiling.profiler.factory"]], "neural_compressor.profiling.profiler": [[350, "module-neural_compressor.profiling.profiler"]], "profilerfactory (class in neural_compressor.profiling.profiler.onnxrt_profiler.factory)": [[351, "neural_compressor.profiling.profiler.onnxrt_profiler.factory.ProfilerFactory"]], "neural_compressor.profiling.profiler.onnxrt_profiler.factory": [[351, "module-neural_compressor.profiling.profiler.onnxrt_profiler.factory"]], "neural_compressor.profiling.profiler.onnxrt_profiler": [[352, "module-neural_compressor.profiling.profiler.onnxrt_profiler"]], "profiler (class in neural_compressor.profiling.profiler.onnxrt_profiler.profiler)": [[353, "neural_compressor.profiling.profiler.onnxrt_profiler.profiler.Profiler"]], "neural_compressor.profiling.profiler.onnxrt_profiler.profiler": [[353, "module-neural_compressor.profiling.profiler.onnxrt_profiler.profiler"]], "create_onnx_config() (in module neural_compressor.profiling.profiler.onnxrt_profiler.utils)": [[354, "neural_compressor.profiling.profiler.onnxrt_profiler.utils.create_onnx_config"]], "neural_compressor.profiling.profiler.onnxrt_profiler.utils": [[354, "module-neural_compressor.profiling.profiler.onnxrt_profiler.utils"]], "profiler (class in neural_compressor.profiling.profiler.profiler)": [[355, "neural_compressor.profiling.profiler.profiler.Profiler"]], "neural_compressor.profiling.profiler.profiler": [[355, "module-neural_compressor.profiling.profiler.profiler"]], "profilerfactory (class in neural_compressor.profiling.profiler.tensorflow_profiler.factory)": [[356, "neural_compressor.profiling.profiler.tensorflow_profiler.factory.ProfilerFactory"]], "neural_compressor.profiling.profiler.tensorflow_profiler.factory": [[356, "module-neural_compressor.profiling.profiler.tensorflow_profiler.factory"]], "neural_compressor.profiling.profiler.tensorflow_profiler": [[357, "module-neural_compressor.profiling.profiler.tensorflow_profiler"]], "profiler (class in neural_compressor.profiling.profiler.tensorflow_profiler.profiler)": [[358, "neural_compressor.profiling.profiler.tensorflow_profiler.profiler.Profiler"]], "neural_compressor.profiling.profiler.tensorflow_profiler.profiler": [[358, "module-neural_compressor.profiling.profiler.tensorflow_profiler.profiler"]], "create_tf_config() (in module neural_compressor.profiling.profiler.tensorflow_profiler.utils)": [[359, "neural_compressor.profiling.profiler.tensorflow_profiler.utils.create_tf_config"]], "delete_assign() (in module neural_compressor.profiling.profiler.tensorflow_profiler.utils)": [[359, "neural_compressor.profiling.profiler.tensorflow_profiler.utils.delete_assign"]], "neural_compressor.profiling.profiler.tensorflow_profiler.utils": [[359, "module-neural_compressor.profiling.profiler.tensorflow_profiler.utils"]], "set_eager_execution() (in module neural_compressor.profiling.profiler.tensorflow_profiler.utils)": [[359, "neural_compressor.profiling.profiler.tensorflow_profiler.utils.set_eager_execution"]], "fit() (in module neural_compressor.quantization)": [[360, "neural_compressor.quantization.fit"]], "neural_compressor.quantization": [[360, "module-neural_compressor.quantization"]], "autotunestrategy (class in neural_compressor.strategy.auto)": [[361, "neural_compressor.strategy.auto.AutoTuneStrategy"]], "neural_compressor.strategy.auto": [[361, "module-neural_compressor.strategy.auto"]], "automixedprecisiontunestrategy (class in neural_compressor.strategy.auto_mixed_precision)": [[362, "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[362, "module-neural_compressor.strategy.auto_mixed_precision"]], "basictunestrategy (class in neural_compressor.strategy.basic)": [[363, "neural_compressor.strategy.basic.BasicTuneStrategy"]], "neural_compressor.strategy.basic": [[363, "module-neural_compressor.strategy.basic"]], "bayesianoptimization (class in neural_compressor.strategy.bayesian)": [[364, "neural_compressor.strategy.bayesian.BayesianOptimization"]], "bayesiantunestrategy (class in neural_compressor.strategy.bayesian)": [[364, "neural_compressor.strategy.bayesian.BayesianTuneStrategy"]], "targetspace (class in neural_compressor.strategy.bayesian)": [[364, "neural_compressor.strategy.bayesian.TargetSpace"]], "acq_max() (in module neural_compressor.strategy.bayesian)": [[364, "neural_compressor.strategy.bayesian.acq_max"]], "neural_compressor.strategy.bayesian": [[364, "module-neural_compressor.strategy.bayesian"]], "conservativetunestrategy (class in neural_compressor.strategy.conservative)": [[365, "neural_compressor.strategy.conservative.ConservativeTuneStrategy"]], "neural_compressor.strategy.conservative": [[365, "module-neural_compressor.strategy.conservative"]], "exhaustivetunestrategy (class in neural_compressor.strategy.exhaustive)": [[366, "neural_compressor.strategy.exhaustive.ExhaustiveTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[366, "module-neural_compressor.strategy.exhaustive"]], "hawq_v2tunestrategy (class in neural_compressor.strategy.hawq_v2)": [[367, "neural_compressor.strategy.hawq_v2.HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.hawq_v2": [[367, "module-neural_compressor.strategy.hawq_v2"]], "neural_compressor.strategy": [[368, "module-neural_compressor.strategy"]], "msetunestrategy (class in neural_compressor.strategy.mse)": [[369, "neural_compressor.strategy.mse.MSETuneStrategy"]], "neural_compressor.strategy.mse": [[369, "module-neural_compressor.strategy.mse"]], "mse_v2tunestrategy (class in neural_compressor.strategy.mse_v2)": [[370, "neural_compressor.strategy.mse_v2.MSE_V2TuneStrategy"]], "neural_compressor.strategy.mse_v2": [[370, "module-neural_compressor.strategy.mse_v2"]], "randomtunestrategy (class in neural_compressor.strategy.random)": [[371, "neural_compressor.strategy.random.RandomTuneStrategy"]], "neural_compressor.strategy.random": [[371, "module-neural_compressor.strategy.random"]], "tunestrategy (class in neural_compressor.strategy.strategy)": [[372, "neural_compressor.strategy.strategy.TuneStrategy"]], "tunestrategymeta (class in neural_compressor.strategy.strategy)": [[372, "neural_compressor.strategy.strategy.TuneStrategyMeta"]], "neural_compressor.strategy.strategy": [[372, "module-neural_compressor.strategy.strategy"]], "strategy_registry() (in module neural_compressor.strategy.strategy)": [[372, "neural_compressor.strategy.strategy.strategy_registry"]], "neural_compressor.strategy.utils.constant": [[373, "module-neural_compressor.strategy.utils.constant"]], "neural_compressor.strategy.utils": [[374, "module-neural_compressor.strategy.utils"]], "blockfallbacktuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[375, "neural_compressor.strategy.utils.tuning_sampler.BlockFallbackTuningSampler"]], "fallbacktuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[375, "neural_compressor.strategy.utils.tuning_sampler.FallbackTuningSampler"]], "lowerbitssampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[375, "neural_compressor.strategy.utils.tuning_sampler.LowerBitsSampler"]], "modelwisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[375, "neural_compressor.strategy.utils.tuning_sampler.ModelWiseTuningSampler"]], "optypewisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[375, "neural_compressor.strategy.utils.tuning_sampler.OpTypeWiseTuningSampler"]], "opwisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[375, "neural_compressor.strategy.utils.tuning_sampler.OpWiseTuningSampler"]], "tuningorder (class in neural_compressor.strategy.utils.tuning_sampler)": [[375, "neural_compressor.strategy.utils.tuning_sampler.TuningOrder"]], "tuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[375, "neural_compressor.strategy.utils.tuning_sampler.TuningSampler"]], "tuningsamplerregistry (class in neural_compressor.strategy.utils.tuning_sampler)": [[375, "neural_compressor.strategy.utils.tuning_sampler.TuningSamplerRegistry"]], "neural_compressor.strategy.utils.tuning_sampler": [[375, "module-neural_compressor.strategy.utils.tuning_sampler"]], "tuningitem (class in neural_compressor.strategy.utils.tuning_space)": [[376, "neural_compressor.strategy.utils.tuning_space.TuningItem"]], "tuningspace (class in neural_compressor.strategy.utils.tuning_space)": [[376, "neural_compressor.strategy.utils.tuning_space.TuningSpace"]], "initial_tuning_cfg_with_quant_mode() (in module neural_compressor.strategy.utils.tuning_space)": [[376, "neural_compressor.strategy.utils.tuning_space.initial_tuning_cfg_with_quant_mode"]], "neural_compressor.strategy.utils.tuning_space": [[376, "module-neural_compressor.strategy.utils.tuning_space"]], "pattern_to_internal() (in module neural_compressor.strategy.utils.tuning_space)": [[376, "neural_compressor.strategy.utils.tuning_space.pattern_to_internal"]], "pattern_to_path() (in module neural_compressor.strategy.utils.tuning_space)": [[376, "neural_compressor.strategy.utils.tuning_space.pattern_to_path"]], "quant_mode_from_pattern() (in module neural_compressor.strategy.utils.tuning_space)": [[376, "neural_compressor.strategy.utils.tuning_space.quant_mode_from_pattern"]], "optuningconfig (class in neural_compressor.strategy.utils.tuning_structs)": [[377, "neural_compressor.strategy.utils.tuning_structs.OpTuningConfig"]], "neural_compressor.strategy.utils.tuning_structs": [[377, "module-neural_compressor.strategy.utils.tuning_structs"]], "ordereddefaultdict (class in neural_compressor.strategy.utils.utility)": [[378, "neural_compressor.strategy.utils.utility.OrderedDefaultDict"]], "quantoptions (class in neural_compressor.strategy.utils.utility)": [[378, "neural_compressor.strategy.utils.utility.QuantOptions"]], "quanttype (class in neural_compressor.strategy.utils.utility)": [[378, "neural_compressor.strategy.utils.utility.QuantType"]], "build_slave_faker_model() (in module neural_compressor.strategy.utils.utility)": [[378, "neural_compressor.strategy.utils.utility.build_slave_faker_model"]], "extract_data_type() (in module neural_compressor.strategy.utils.utility)": [[378, "neural_compressor.strategy.utils.utility.extract_data_type"]], "get_adaptor_name() (in module neural_compressor.strategy.utils.utility)": [[378, "neural_compressor.strategy.utils.utility.get_adaptor_name"]], "neural_compressor.strategy.utils.utility": [[378, "module-neural_compressor.strategy.utils.utility"]], "preprocess_user_cfg() (in module neural_compressor.strategy.utils.utility)": [[378, "neural_compressor.strategy.utils.utility.preprocess_user_cfg"]], "reverted_data_type() (in module neural_compressor.strategy.utils.utility)": [[378, "neural_compressor.strategy.utils.utility.reverted_data_type"]], "exampleclass (class in neural_compressor.template.api_doc_example)": [[379, "neural_compressor.template.api_doc_example.ExampleClass"]], "attr1 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[379, "neural_compressor.template.api_doc_example.ExampleClass.attr1"]], "attr2 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[379, "neural_compressor.template.api_doc_example.ExampleClass.attr2"]], "attr5 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[379, "neural_compressor.template.api_doc_example.ExampleClass.attr5"]], "attribute1 (in module neural_compressor.template.api_doc_example)": [[379, "neural_compressor.template.api_doc_example.attribute1"]], "function1() (in module neural_compressor.template.api_doc_example)": [[379, "neural_compressor.template.api_doc_example.function1"]], "function2() (in module neural_compressor.template.api_doc_example)": [[379, "neural_compressor.template.api_doc_example.function2"]], "function3() (in module neural_compressor.template.api_doc_example)": [[379, "neural_compressor.template.api_doc_example.function3"]], "generator1() (in module neural_compressor.template.api_doc_example)": [[379, "neural_compressor.template.api_doc_example.generator1"]], "module_debug_level1 (in module neural_compressor.template.api_doc_example)": [[379, "neural_compressor.template.api_doc_example.module_debug_level1"]], "neural_compressor.template.api_doc_example": [[379, "module-neural_compressor.template.api_doc_example"]], "neural_compressor.template": [[380, "module-neural_compressor.template"]], "callbacks (class in neural_compressor.training)": [[381, "neural_compressor.training.CallBacks"]], "compressionmanager (class in neural_compressor.training)": [[381, "neural_compressor.training.CompressionManager"]], "fit() (in module neural_compressor.training)": [[381, "neural_compressor.training.fit"]], "neural_compressor.training": [[381, "module-neural_compressor.training"]], "prepare_compression() (in module neural_compressor.training)": [[381, "neural_compressor.training.prepare_compression"]], "layerhistogramcollector (class in neural_compressor.utils.collect_layer_histogram)": [[382, "neural_compressor.utils.collect_layer_histogram.LayerHistogramCollector"]], "neural_compressor.utils.collect_layer_histogram": [[382, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[383, "module-neural_compressor.utils.constant"]], "create_dataloader() (in module neural_compressor.utils.create_obj_from_config)": [[384, "neural_compressor.utils.create_obj_from_config.create_dataloader"]], "create_dataset() (in module neural_compressor.utils.create_obj_from_config)": [[384, "neural_compressor.utils.create_obj_from_config.create_dataset"]], "create_eval_func() (in module neural_compressor.utils.create_obj_from_config)": [[384, "neural_compressor.utils.create_obj_from_config.create_eval_func"]], "create_train_func() (in module neural_compressor.utils.create_obj_from_config)": [[384, "neural_compressor.utils.create_obj_from_config.create_train_func"]], "get_algorithm() (in module neural_compressor.utils.create_obj_from_config)": [[384, "neural_compressor.utils.create_obj_from_config.get_algorithm"]], "get_func_from_config() (in module neural_compressor.utils.create_obj_from_config)": [[384, "neural_compressor.utils.create_obj_from_config.get_func_from_config"]], "get_metrics() (in module neural_compressor.utils.create_obj_from_config)": [[384, "neural_compressor.utils.create_obj_from_config.get_metrics"]], "get_postprocess() (in module neural_compressor.utils.create_obj_from_config)": [[384, "neural_compressor.utils.create_obj_from_config.get_postprocess"]], "get_preprocess() (in module neural_compressor.utils.create_obj_from_config)": [[384, "neural_compressor.utils.create_obj_from_config.get_preprocess"]], "neural_compressor.utils.create_obj_from_config": [[384, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils": [[385, "module-neural_compressor.utils"]], "kl_divergence (class in neural_compressor.utils.kl_divergence)": [[386, "neural_compressor.utils.kl_divergence.KL_Divergence"]], "neural_compressor.utils.kl_divergence": [[386, "module-neural_compressor.utils.kl_divergence"]], "optimizedmodel (class in neural_compressor.utils.load_huggingface)": [[387, "neural_compressor.utils.load_huggingface.OptimizedModel"]], "neural_compressor.utils.load_huggingface": [[387, "module-neural_compressor.utils.load_huggingface"]], "save_for_huggingface_upstream() (in module neural_compressor.utils.load_huggingface)": [[387, "neural_compressor.utils.load_huggingface.save_for_huggingface_upstream"]], "logger (class in neural_compressor.utils.logger)": [[388, "neural_compressor.utils.logger.Logger"]], "debug() (in module neural_compressor.utils.logger)": [[388, "neural_compressor.utils.logger.debug"]], "error() (in module neural_compressor.utils.logger)": [[388, "neural_compressor.utils.logger.error"]], "fatal() (in module neural_compressor.utils.logger)": [[388, "neural_compressor.utils.logger.fatal"]], "info() (in module neural_compressor.utils.logger)": [[388, "neural_compressor.utils.logger.info"]], "log() (in module neural_compressor.utils.logger)": [[388, "neural_compressor.utils.logger.log"]], "neural_compressor.utils.logger": [[388, "module-neural_compressor.utils.logger"]], "warn() (in module neural_compressor.utils.logger)": [[388, "neural_compressor.utils.logger.warn"]], "warning() (in module neural_compressor.utils.logger)": [[388, "neural_compressor.utils.logger.warning"]], "neural_compressor.utils.neural_insights_utils": [[389, "module-neural_compressor.utils.neural_insights_utils"]], "register_neural_insights_workload() (in module neural_compressor.utils.neural_insights_utils)": [[389, "neural_compressor.utils.neural_insights_utils.register_neural_insights_workload"]], "update_neural_insights_workload() (in module neural_compressor.utils.neural_insights_utils)": [[389, "neural_compressor.utils.neural_insights_utils.update_neural_insights_workload"]], "update_neural_insights_workload_accuracy_data() (in module neural_compressor.utils.neural_insights_utils)": [[389, "neural_compressor.utils.neural_insights_utils.update_neural_insights_workload_accuracy_data"]], "neural_compressor.utils.options": [[390, "module-neural_compressor.utils.options"]], "onnxrt (class in neural_compressor.utils.options)": [[390, "neural_compressor.utils.options.onnxrt"]], "is_int8_model() (in module neural_compressor.utils.pytorch)": [[391, "neural_compressor.utils.pytorch.is_int8_model"]], "load() (in module neural_compressor.utils.pytorch)": [[391, "neural_compressor.utils.pytorch.load"]], "neural_compressor.utils.pytorch": [[391, "module-neural_compressor.utils.pytorch"]], "captureoutputtofile (class in neural_compressor.utils.utility)": [[392, "neural_compressor.utils.utility.CaptureOutputToFile"]], "cpuinfo (class in neural_compressor.utils.utility)": [[392, "neural_compressor.utils.utility.CpuInfo"]], "dequantize() (in module neural_compressor.utils.utility)": [[392, "neural_compressor.utils.utility.Dequantize"]], "dotdict (class in neural_compressor.utils.utility)": [[392, "neural_compressor.utils.utility.DotDict"]], "global_state (class in neural_compressor.utils.utility)": [[392, "neural_compressor.utils.utility.GLOBAL_STATE"]], "lazyimport (class in neural_compressor.utils.utility)": [[392, "neural_compressor.utils.utility.LazyImport"]], "mode (class in neural_compressor.utils.utility)": [[392, "neural_compressor.utils.utility.MODE"]], "opentry (class in neural_compressor.utils.utility)": [[392, "neural_compressor.utils.utility.OpEntry"]], "statistics (class in neural_compressor.utils.utility)": [[392, "neural_compressor.utils.utility.Statistics"]], "alias_param() (in module neural_compressor.utils.utility)": [[392, "neural_compressor.utils.utility.alias_param"]], "calculate_mse() (in module neural_compressor.utils.utility)": [[392, "neural_compressor.utils.utility.calculate_mse"]], "combine_histogram() (in module neural_compressor.utils.utility)": [[392, "neural_compressor.utils.utility.combine_histogram"]], "compare_objects() (in module neural_compressor.utils.utility)": [[392, "neural_compressor.utils.utility.compare_objects"]], "compute_sparsity() (in module neural_compressor.utils.utility)": [[392, "neural_compressor.utils.utility.compute_sparsity"]], "dequantize_weight() (in module neural_compressor.utils.utility)": [[392, "neural_compressor.utils.utility.dequantize_weight"]], "dump_class_attrs() (in module neural_compressor.utils.utility)": [[392, "neural_compressor.utils.utility.dump_class_attrs"]], "dump_data_to_local() (in module neural_compressor.utils.utility)": [[392, "neural_compressor.utils.utility.dump_data_to_local"]], "dump_elapsed_time() (in module neural_compressor.utils.utility)": [[392, "neural_compressor.utils.utility.dump_elapsed_time"]], "dump_table() (in module neural_compressor.utils.utility)": [[392, "neural_compressor.utils.utility.dump_table"]], "dump_table_to_csv() (in module neural_compressor.utils.utility)": [[392, "neural_compressor.utils.utility.dump_table_to_csv"]], "equal_dicts() (in module neural_compressor.utils.utility)": [[392, "neural_compressor.utils.utility.equal_dicts"]], "fault_tolerant_file() (in module neural_compressor.utils.utility)": [[392, "neural_compressor.utils.utility.fault_tolerant_file"]], "get_all_fp32_data() (in module neural_compressor.utils.utility)": [[392, "neural_compressor.utils.utility.get_all_fp32_data"]], "get_number_of_sockets() (in module neural_compressor.utils.utility)": [[392, "neural_compressor.utils.utility.get_number_of_sockets"]], "get_op_list() (in module neural_compressor.utils.utility)": [[392, "neural_compressor.utils.utility.get_op_list"]], "get_size() (in module neural_compressor.utils.utility)": [[392, "neural_compressor.utils.utility.get_size"]], "get_tensor_histogram() (in module neural_compressor.utils.utility)": [[392, "neural_compressor.utils.utility.get_tensor_histogram"]], "get_tensors_info() (in module neural_compressor.utils.utility)": [[392, "neural_compressor.utils.utility.get_tensors_info"]], "get_tuning_history() (in module neural_compressor.utils.utility)": [[392, "neural_compressor.utils.utility.get_tuning_history"]], "get_weights_details() (in module neural_compressor.utils.utility)": [[392, "neural_compressor.utils.utility.get_weights_details"]], "load_data_from_pkl() (in module neural_compressor.utils.utility)": [[392, "neural_compressor.utils.utility.load_data_from_pkl"]], "mse_metric_gap() (in module neural_compressor.utils.utility)": [[392, "neural_compressor.utils.utility.mse_metric_gap"]], "neural_compressor.utils.utility": [[392, "module-neural_compressor.utils.utility"]], "print_op_list() (in module neural_compressor.utils.utility)": [[392, "neural_compressor.utils.utility.print_op_list"]], "print_table() (in module neural_compressor.utils.utility)": [[392, "neural_compressor.utils.utility.print_table"]], "recover() (in module neural_compressor.utils.utility)": [[392, "neural_compressor.utils.utility.recover"]], "set_random_seed() (in module neural_compressor.utils.utility)": [[392, "neural_compressor.utils.utility.set_random_seed"]], "set_resume_from() (in module neural_compressor.utils.utility)": [[392, "neural_compressor.utils.utility.set_resume_from"]], "set_tensorboard() (in module neural_compressor.utils.utility)": [[392, "neural_compressor.utils.utility.set_tensorboard"]], "set_workspace() (in module neural_compressor.utils.utility)": [[392, "neural_compressor.utils.utility.set_workspace"]], "show_memory_info() (in module neural_compressor.utils.utility)": [[392, "neural_compressor.utils.utility.show_memory_info"]], "singleton() (in module neural_compressor.utils.utility)": [[392, "neural_compressor.utils.utility.singleton"]], "str2array() (in module neural_compressor.utils.utility)": [[392, "neural_compressor.utils.utility.str2array"]], "time_limit() (in module neural_compressor.utils.utility)": [[392, "neural_compressor.utils.utility.time_limit"]], "version1_eq_version2() (in module neural_compressor.utils.utility)": [[392, "neural_compressor.utils.utility.version1_eq_version2"]], "version1_gt_version2() (in module neural_compressor.utils.utility)": [[392, "neural_compressor.utils.utility.version1_gt_version2"]], "version1_gte_version2() (in module neural_compressor.utils.utility)": [[392, "neural_compressor.utils.utility.version1_gte_version2"]], "version1_lt_version2() (in module neural_compressor.utils.utility)": [[392, "neural_compressor.utils.utility.version1_lt_version2"]], "version1_lte_version2() (in module neural_compressor.utils.utility)": [[392, "neural_compressor.utils.utility.version1_lte_version2"]], "weightsdetails (class in neural_compressor.utils.weights_details)": [[393, "neural_compressor.utils.weights_details.WeightsDetails"]], "weightsstatistics (class in neural_compressor.utils.weights_details)": [[393, "neural_compressor.utils.weights_details.WeightsStatistics"]], "neural_compressor.utils.weights_details": [[393, "module-neural_compressor.utils.weights_details"]], "neural_compressor.version": [[394, "module-neural_compressor.version"]]}})