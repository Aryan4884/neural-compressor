Search.setIndex({"docnames": ["autoapi/644ec953a7dc_pruning_support/index", "autoapi/6ece06672ed3_v1_14/index", "autoapi/6f0d0f71d92e_v1_13/index", "autoapi/9e89549a08c8_v1_11/index", "autoapi/block_mask/index", "autoapi/env/index", "autoapi/neural_compressor/adaptor/adaptor/index", "autoapi/neural_compressor/adaptor/index", "autoapi/neural_compressor/adaptor/keras/index", "autoapi/neural_compressor/adaptor/keras_utils/conv2d/index", "autoapi/neural_compressor/adaptor/keras_utils/dense/index", "autoapi/neural_compressor/adaptor/keras_utils/depthwise_conv2d/index", "autoapi/neural_compressor/adaptor/keras_utils/index", "autoapi/neural_compressor/adaptor/keras_utils/quantizer/index", "autoapi/neural_compressor/adaptor/keras_utils/separable_conv2d/index", "autoapi/neural_compressor/adaptor/mxnet/index", "autoapi/neural_compressor/adaptor/mxnet_utils/index", "autoapi/neural_compressor/adaptor/mxnet_utils/util/index", "autoapi/neural_compressor/adaptor/onnxrt/index", "autoapi/neural_compressor/adaptor/ox_utils/calibration/index", "autoapi/neural_compressor/adaptor/ox_utils/calibrator/index", "autoapi/neural_compressor/adaptor/ox_utils/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/activation/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/argmax/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/attention/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/binary_op/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/concat/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/conv/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/direct_q8/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/embed_layernorm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gather/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gavgpool/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/gemm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/lstm/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/matmul/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/maxpool/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/ops/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/pad/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/pooling/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/resize/index", "autoapi/neural_compressor/adaptor/ox_utils/operators/split/index", "autoapi/neural_compressor/adaptor/ox_utils/quantizer/index", "autoapi/neural_compressor/adaptor/ox_utils/util/index", "autoapi/neural_compressor/adaptor/pytorch/index", "autoapi/neural_compressor/adaptor/query/index", "autoapi/neural_compressor/adaptor/tensorflow/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter_without_calib/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/bf16_convert/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_add_to_biasadd/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_layout/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_leakyrelu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_nan_to_random/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_placeholder_to_const/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dequantize_cast_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dilated_contraction/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dummy_biasadd/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/expanddims_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fetch_weight_from_reshape/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_batch_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_constant/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_biasadd_add/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_column_wise_mul/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_conv_with_math/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_in/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_gelu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_layer_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_reshape_transpose/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/graph_cse_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/grappler_pass/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/insert_print_node/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/move_squeeze_after_relu/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/pre_optimize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/remove_training_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/rename_batch_norm/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/split_shared_input/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_equivalent_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_unused_nodes/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/switch_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/graph_base/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_fake_quant/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value_without_calib/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_requantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_requantize/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/meta_op_optimizer/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_hostconst_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_quantized_op_cse/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/rnn_convert/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/scale_propagation/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_node/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_schema/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/tf2onnx_utils/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/insert_qdq_pattern/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/merge_duplicated_qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/share_qdq_y_pattern/index", "autoapi/neural_compressor/adaptor/tf_utils/graph_util/index", "autoapi/neural_compressor/adaptor/tf_utils/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/fake_quantize/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_config/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_helper/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/optimize_layer/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_wrapper/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_concatv2/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_deconv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_in/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_matmul/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_pooling/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/optimize_qdq/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_base/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_bn/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_concatv2/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_conv/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_for_intel_cpu/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_matmul/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_pooling/index", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph_common/index", "autoapi/neural_compressor/adaptor/tf_utils/tf2onnx_converter/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/bias_correction/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/graph_transform_base/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/insert_logging/index", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/rerange_quantized_concat/index", "autoapi/neural_compressor/adaptor/tf_utils/util/index", "autoapi/neural_compressor/adaptor/torch_utils/bf16_convert/index", "autoapi/neural_compressor/adaptor/torch_utils/hawq_metric/index", "autoapi/neural_compressor/adaptor/torch_utils/index", "autoapi/neural_compressor/adaptor/torch_utils/model_wrapper/index", "autoapi/neural_compressor/adaptor/torch_utils/smooth_quant/index", "autoapi/neural_compressor/adaptor/torch_utils/symbolic_trace/index", "autoapi/neural_compressor/adaptor/torch_utils/util/index", "autoapi/neural_compressor/algorithm/algorithm/index", "autoapi/neural_compressor/algorithm/fast_bias_correction/index", "autoapi/neural_compressor/algorithm/index", "autoapi/neural_compressor/algorithm/smooth_quant/index", "autoapi/neural_compressor/algorithm/weight_correction/index", "autoapi/neural_compressor/benchmark/index", "autoapi/neural_compressor/compression/callbacks/index", "autoapi/neural_compressor/compression/distillation/criterions/index", "autoapi/neural_compressor/compression/distillation/index", "autoapi/neural_compressor/compression/index", "autoapi/neural_compressor/compression/pruner/criteria/index", "autoapi/neural_compressor/compression/pruner/index", "autoapi/neural_compressor/compression/pruner/model_slim/auto_slim/index", "autoapi/neural_compressor/compression/pruner/model_slim/index", "autoapi/neural_compressor/compression/pruner/model_slim/pattern_analyzer/index", "autoapi/neural_compressor/compression/pruner/model_slim/weight_slim/index", "autoapi/neural_compressor/compression/pruner/patterns/index", "autoapi/neural_compressor/compression/pruner/pruners/index", "autoapi/neural_compressor/compression/pruner/regs/index", "autoapi/neural_compressor/compression/pruner/schedulers/index", "autoapi/neural_compressor/compression/pruner/utils/index", "autoapi/neural_compressor/conf/config/index", "autoapi/neural_compressor/conf/dotdict/index", "autoapi/neural_compressor/conf/index", "autoapi/neural_compressor/conf/pythonic_config/index", "autoapi/neural_compressor/config/index", "autoapi/neural_compressor/contrib/index", "autoapi/neural_compressor/contrib/strategy/index", "autoapi/neural_compressor/contrib/strategy/sigopt/index", "autoapi/neural_compressor/contrib/strategy/tpe/index", "autoapi/neural_compressor/data/dataloaders/base_dataloader/index", "autoapi/neural_compressor/data/dataloaders/dataloader/index", "autoapi/neural_compressor/data/dataloaders/default_dataloader/index", "autoapi/neural_compressor/data/dataloaders/fetcher/index", "autoapi/neural_compressor/data/dataloaders/index", "autoapi/neural_compressor/data/dataloaders/mxnet_dataloader/index", "autoapi/neural_compressor/data/dataloaders/onnxrt_dataloader/index", "autoapi/neural_compressor/data/dataloaders/pytorch_dataloader/index", "autoapi/neural_compressor/data/dataloaders/sampler/index", "autoapi/neural_compressor/data/dataloaders/tensorflow_dataloader/index", "autoapi/neural_compressor/data/datasets/bert_dataset/index", "autoapi/neural_compressor/data/datasets/coco_dataset/index", "autoapi/neural_compressor/data/datasets/dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/data/datasets/index", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/data/filters/coco_filter/index", "autoapi/neural_compressor/data/filters/filter/index", "autoapi/neural_compressor/data/filters/index", "autoapi/neural_compressor/data/index", "autoapi/neural_compressor/data/transforms/coco_transform/index", "autoapi/neural_compressor/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/data/transforms/index", "autoapi/neural_compressor/data/transforms/postprocess/index", "autoapi/neural_compressor/data/transforms/tokenization/index", "autoapi/neural_compressor/data/transforms/transform/index", "autoapi/neural_compressor/experimental/benchmark/index", "autoapi/neural_compressor/experimental/common/criterion/index", "autoapi/neural_compressor/experimental/common/dataloader/index", "autoapi/neural_compressor/experimental/common/index", "autoapi/neural_compressor/experimental/common/metric/index", "autoapi/neural_compressor/experimental/common/model/index", "autoapi/neural_compressor/experimental/common/optimizer/index", "autoapi/neural_compressor/experimental/common/postprocess/index", "autoapi/neural_compressor/experimental/common/torch_utils/index", "autoapi/neural_compressor/experimental/component/index", "autoapi/neural_compressor/experimental/compression/index", "autoapi/neural_compressor/experimental/compression/pruning/index", "autoapi/neural_compressor/experimental/contrib/index", "autoapi/neural_compressor/experimental/contrib/strategy/index", "autoapi/neural_compressor/experimental/contrib/strategy/sigopt/index", "autoapi/neural_compressor/experimental/contrib/strategy/tpe/index", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index", "autoapi/neural_compressor/experimental/data/dataloaders/index", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index", "autoapi/neural_compressor/experimental/data/datasets/index", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index", "autoapi/neural_compressor/experimental/data/filters/filter/index", "autoapi/neural_compressor/experimental/data/filters/index", "autoapi/neural_compressor/experimental/data/index", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index", "autoapi/neural_compressor/experimental/data/transforms/index", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index", "autoapi/neural_compressor/experimental/data/transforms/transform/index", "autoapi/neural_compressor/experimental/distillation/index", "autoapi/neural_compressor/experimental/export/index", "autoapi/neural_compressor/experimental/export/qlinear2qdq/index", "autoapi/neural_compressor/experimental/export/tf2onnx/index", "autoapi/neural_compressor/experimental/export/torch2onnx/index", "autoapi/neural_compressor/experimental/export/utils/index", "autoapi/neural_compressor/experimental/graph_optimization/index", "autoapi/neural_compressor/experimental/index", "autoapi/neural_compressor/experimental/metric/bleu/index", "autoapi/neural_compressor/experimental/metric/bleu_util/index", "autoapi/neural_compressor/experimental/metric/coco_label_map/index", "autoapi/neural_compressor/experimental/metric/coco_tools/index", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index", "autoapi/neural_compressor/experimental/metric/f1/index", "autoapi/neural_compressor/experimental/metric/index", "autoapi/neural_compressor/experimental/metric/metric/index", "autoapi/neural_compressor/experimental/mixed_precision/index", "autoapi/neural_compressor/experimental/model_conversion/index", "autoapi/neural_compressor/experimental/nas/basic_nas/index", "autoapi/neural_compressor/experimental/nas/dynas/index", "autoapi/neural_compressor/experimental/nas/index", "autoapi/neural_compressor/experimental/nas/nas/index", "autoapi/neural_compressor/experimental/nas/nas_utils/index", "autoapi/neural_compressor/experimental/nas/search_algorithms/index", "autoapi/neural_compressor/experimental/pruner_legacy/gradient_sensitivity/index", "autoapi/neural_compressor/experimental/pruner_legacy/group_lasso/index", "autoapi/neural_compressor/experimental/pruner_legacy/index", "autoapi/neural_compressor/experimental/pruner_legacy/magnitude/index", "autoapi/neural_compressor/experimental/pruner_legacy/pattern_lock/index", "autoapi/neural_compressor/experimental/pruner_legacy/pruner/index", "autoapi/neural_compressor/experimental/pruning/index", "autoapi/neural_compressor/experimental/pruning_recipes/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index", "autoapi/neural_compressor/experimental/pruning_v2/index", "autoapi/neural_compressor/experimental/pytorch_pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index", "autoapi/neural_compressor/experimental/quantization/index", "autoapi/neural_compressor/experimental/scheduler/index", "autoapi/neural_compressor/experimental/strategy/auto_mixed_precision/index", "autoapi/neural_compressor/experimental/strategy/basic/index", "autoapi/neural_compressor/experimental/strategy/bayesian/index", "autoapi/neural_compressor/experimental/strategy/exhaustive/index", "autoapi/neural_compressor/experimental/strategy/index", "autoapi/neural_compressor/experimental/strategy/mse/index", "autoapi/neural_compressor/experimental/strategy/mse_v2/index", "autoapi/neural_compressor/experimental/strategy/random/index", "autoapi/neural_compressor/experimental/strategy/strategy/index", "autoapi/neural_compressor/experimental/strategy/utils/constant/index", "autoapi/neural_compressor/experimental/strategy/utils/index", "autoapi/neural_compressor/experimental/strategy/utils/tuning_sampler/index", "autoapi/neural_compressor/experimental/strategy/utils/tuning_space/index", "autoapi/neural_compressor/experimental/strategy/utils/tuning_structs/index", "autoapi/neural_compressor/experimental/strategy/utils/utility/index", "autoapi/neural_compressor/index", "autoapi/neural_compressor/metric/bleu/index", "autoapi/neural_compressor/metric/bleu_util/index", "autoapi/neural_compressor/metric/coco_label_map/index", "autoapi/neural_compressor/metric/coco_tools/index", "autoapi/neural_compressor/metric/evaluate_squad/index", "autoapi/neural_compressor/metric/f1/index", "autoapi/neural_compressor/metric/index", "autoapi/neural_compressor/metric/metric/index", "autoapi/neural_compressor/mix_precision/index", "autoapi/neural_compressor/model/base_model/index", "autoapi/neural_compressor/model/index", "autoapi/neural_compressor/model/keras_model/index", "autoapi/neural_compressor/model/model/index", "autoapi/neural_compressor/model/mxnet_model/index", "autoapi/neural_compressor/model/nets_factory/index", "autoapi/neural_compressor/model/onnx_model/index", "autoapi/neural_compressor/model/tensorflow_model/index", "autoapi/neural_compressor/model/torch_model/index", "autoapi/neural_compressor/objective/index", "autoapi/neural_compressor/quantization/index", "autoapi/neural_compressor/strategy/auto/index", "autoapi/neural_compressor/strategy/auto_mixed_precision/index", "autoapi/neural_compressor/strategy/basic/index", "autoapi/neural_compressor/strategy/bayesian/index", "autoapi/neural_compressor/strategy/conservative/index", "autoapi/neural_compressor/strategy/exhaustive/index", "autoapi/neural_compressor/strategy/hawq_v2/index", "autoapi/neural_compressor/strategy/index", "autoapi/neural_compressor/strategy/mse/index", "autoapi/neural_compressor/strategy/mse_v2/index", "autoapi/neural_compressor/strategy/random/index", "autoapi/neural_compressor/strategy/strategy/index", "autoapi/neural_compressor/strategy/utils/constant/index", "autoapi/neural_compressor/strategy/utils/index", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index", "autoapi/neural_compressor/strategy/utils/tuning_space/index", "autoapi/neural_compressor/strategy/utils/tuning_structs/index", "autoapi/neural_compressor/strategy/utils/utility/index", "autoapi/neural_compressor/template/api_doc_example/index", "autoapi/neural_compressor/template/index", "autoapi/neural_compressor/training/index", "autoapi/neural_compressor/utils/collect_layer_histogram/index", "autoapi/neural_compressor/utils/constant/index", "autoapi/neural_compressor/utils/create_obj_from_config/index", "autoapi/neural_compressor/utils/index", "autoapi/neural_compressor/utils/kl_divergence/index", "autoapi/neural_compressor/utils/load_huggingface/index", "autoapi/neural_compressor/utils/logger/index", "autoapi/neural_compressor/utils/options/index", "autoapi/neural_compressor/utils/pytorch/index", "autoapi/neural_compressor/utils/utility/index", "autoapi/neural_compressor/ux/components/benchmark/benchmark/index", "autoapi/neural_compressor/ux/components/benchmark/benchmark_model/index", "autoapi/neural_compressor/ux/components/benchmark/execute_benchmark/index", "autoapi/neural_compressor/ux/components/benchmark/index", "autoapi/neural_compressor/ux/components/config_generator/benchmark_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/graph_optimization_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/mixed_precision_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/profiling_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/pruning_config_generator/index", "autoapi/neural_compressor/ux/components/config_generator/quantization_config_generator/index", "autoapi/neural_compressor/ux/components/configuration_wizard/configuration_parser/index", "autoapi/neural_compressor/ux/components/configuration_wizard/get_boundary_nodes/index", "autoapi/neural_compressor/ux/components/configuration_wizard/get_configuration/index", "autoapi/neural_compressor/ux/components/configuration_wizard/index", "autoapi/neural_compressor/ux/components/configuration_wizard/params_feeder/index", "autoapi/neural_compressor/ux/components/configuration_wizard/pruning_config_parser/index", "autoapi/neural_compressor/ux/components/db_manager/db_manager/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/benchmark/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/benchmark_result/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/dataloader/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/dataset/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/domain/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/domain_flavour/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/example/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/framework/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/metric/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/model/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/optimization/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/optimization_type/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/precision/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/profiling/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/profiling_result/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/project/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/pruning_details/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/transform/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/tuning_details/index", "autoapi/neural_compressor/ux/components/db_manager/db_models/tuning_history/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/benchmark_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/dataset_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/db_operations/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/diagnosis_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/dictionaries_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/examples_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/model_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/optimization_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/profiling_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/db_operations/project_api_interface/index", "autoapi/neural_compressor/ux/components/db_manager/index", "autoapi/neural_compressor/ux/components/db_manager/params_interfaces/index", "autoapi/neural_compressor/ux/components/db_manager/utils/index", "autoapi/neural_compressor/ux/components/diagnosis/diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/factory/index", "autoapi/neural_compressor/ux/components/diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/onnx_diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/onnx_diagnosis/onnxrt_diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/op_details/index", "autoapi/neural_compressor/ux/components/diagnosis/op_entry/index", "autoapi/neural_compressor/ux/components/diagnosis/tensorflow_diagnosis/index", "autoapi/neural_compressor/ux/components/diagnosis/tensorflow_diagnosis/tensorflow_diagnosis/index", "autoapi/neural_compressor/ux/components/file_browser/file_browser/index", "autoapi/neural_compressor/ux/components/file_browser/index", "autoapi/neural_compressor/ux/components/graph/attribute/index", "autoapi/neural_compressor/ux/components/graph/collapser/index", "autoapi/neural_compressor/ux/components/graph/edge/index", "autoapi/neural_compressor/ux/components/graph/graph/index", "autoapi/neural_compressor/ux/components/graph/graph_reader/index", "autoapi/neural_compressor/ux/components/graph/index", "autoapi/neural_compressor/ux/components/graph/node/index", "autoapi/neural_compressor/ux/components/graph/reader/index", "autoapi/neural_compressor/ux/components/graph/reader/onnxrt_reader/index", "autoapi/neural_compressor/ux/components/graph/reader/tensorflow_reader/index", "autoapi/neural_compressor/ux/components/index", "autoapi/neural_compressor/ux/components/jobs_management/index", "autoapi/neural_compressor/ux/components/jobs_management/jobs_control_queue/index", "autoapi/neural_compressor/ux/components/jobs_management/jobs_manager/index", "autoapi/neural_compressor/ux/components/jobs_management/request/index", "autoapi/neural_compressor/ux/components/manage_workspace/index", "autoapi/neural_compressor/ux/components/model/domain/index", "autoapi/neural_compressor/ux/components/model/index", "autoapi/neural_compressor/ux/components/model/model/index", "autoapi/neural_compressor/ux/components/model/model_type_getter/index", "autoapi/neural_compressor/ux/components/model/onnxrt/index", "autoapi/neural_compressor/ux/components/model/onnxrt/model/index", "autoapi/neural_compressor/ux/components/model/pytorch/index", "autoapi/neural_compressor/ux/components/model/pytorch/model/index", "autoapi/neural_compressor/ux/components/model/repository/index", "autoapi/neural_compressor/ux/components/model/shape/index", "autoapi/neural_compressor/ux/components/model/tensorflow/frozen_pb/index", "autoapi/neural_compressor/ux/components/model/tensorflow/index", "autoapi/neural_compressor/ux/components/model/tensorflow/keras/index", "autoapi/neural_compressor/ux/components/model/tensorflow/meta_graph/index", "autoapi/neural_compressor/ux/components/model/tensorflow/model/index", "autoapi/neural_compressor/ux/components/model/tensorflow/saved_model/index", "autoapi/neural_compressor/ux/components/model/tensorflow/utils/index", "autoapi/neural_compressor/ux/components/model_zoo/download_config/index", "autoapi/neural_compressor/ux/components/model_zoo/download_model/index", "autoapi/neural_compressor/ux/components/model_zoo/downloader/index", "autoapi/neural_compressor/ux/components/model_zoo/index", "autoapi/neural_compressor/ux/components/model_zoo/list_models/index", "autoapi/neural_compressor/ux/components/names_mapper/index", "autoapi/neural_compressor/ux/components/names_mapper/names_mapper/index", "autoapi/neural_compressor/ux/components/optimization/execute_optimization/index", "autoapi/neural_compressor/ux/components/optimization/factory/index", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/graph_optimization/index", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/index", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/optimize_model/index", "autoapi/neural_compressor/ux/components/optimization/index", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/index", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/mixed_precision/index", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/optimize_model/index", "autoapi/neural_compressor/ux/components/optimization/neural_coder_optimization/index", "autoapi/neural_compressor/ux/components/optimization/neural_coder_optimization/optimize_model/index", "autoapi/neural_compressor/ux/components/optimization/optimization/index", "autoapi/neural_compressor/ux/components/optimization/pruning/index", "autoapi/neural_compressor/ux/components/optimization/pruning/optimize_model/index", "autoapi/neural_compressor/ux/components/optimization/pruning/pruning/index", "autoapi/neural_compressor/ux/components/optimization/tune/index", "autoapi/neural_compressor/ux/components/optimization/tune/tune_model/index", "autoapi/neural_compressor/ux/components/optimization/tune/tuning/index", "autoapi/neural_compressor/ux/components/optimization/tuning_history/index", "autoapi/neural_compressor/ux/components/profiling/execute_profiling/index", "autoapi/neural_compressor/ux/components/profiling/factory/index", "autoapi/neural_compressor/ux/components/profiling/index", "autoapi/neural_compressor/ux/components/profiling/profile_model/index", "autoapi/neural_compressor/ux/components/profiling/profiler/index", "autoapi/neural_compressor/ux/components/profiling/profiling/index", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/factory/index", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/index", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/profiler/index", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/utils/index", "autoapi/neural_compressor/ux/inc_bench/index", "autoapi/neural_compressor/ux/index", "autoapi/neural_compressor/ux/utils/consts/index", "autoapi/neural_compressor/ux/utils/environment/index", "autoapi/neural_compressor/ux/utils/exceptions/index", "autoapi/neural_compressor/ux/utils/executor/index", "autoapi/neural_compressor/ux/utils/expiring_dict/index", "autoapi/neural_compressor/ux/utils/github_info/index", "autoapi/neural_compressor/ux/utils/hw_info/index", "autoapi/neural_compressor/ux/utils/index", "autoapi/neural_compressor/ux/utils/json_serializer/index", "autoapi/neural_compressor/ux/utils/logger/index", "autoapi/neural_compressor/ux/utils/parser/index", "autoapi/neural_compressor/ux/utils/proc/index", "autoapi/neural_compressor/ux/utils/processes/index", "autoapi/neural_compressor/ux/utils/singleton/index", "autoapi/neural_compressor/ux/utils/status_updates/index", "autoapi/neural_compressor/ux/utils/templates/index", "autoapi/neural_compressor/ux/utils/templates/metric/index", "autoapi/neural_compressor/ux/utils/templates/workdir/index", "autoapi/neural_compressor/ux/utils/utils/index", "autoapi/neural_compressor/ux/utils/workload/config/index", "autoapi/neural_compressor/ux/utils/workload/dataloader/index", "autoapi/neural_compressor/ux/utils/workload/evaluation/index", "autoapi/neural_compressor/ux/utils/workload/graph_optimization/index", "autoapi/neural_compressor/ux/utils/workload/index", "autoapi/neural_compressor/ux/utils/workload/mixed_precision/index", "autoapi/neural_compressor/ux/utils/workload/model/index", "autoapi/neural_compressor/ux/utils/workload/pruning/index", "autoapi/neural_compressor/ux/utils/workload/quantization/index", "autoapi/neural_compressor/ux/utils/workload/tuning/index", "autoapi/neural_compressor/ux/utils/yaml_utils/index", "autoapi/neural_compressor/ux/web/communication/index", "autoapi/neural_compressor/ux/web/configuration/index", "autoapi/neural_compressor/ux/web/exceptions/index", "autoapi/neural_compressor/ux/web/index", "autoapi/neural_compressor/ux/web/router/index", "autoapi/neural_compressor/ux/web/server/index", "autoapi/neural_compressor/ux/web/service/benchmark/index", "autoapi/neural_compressor/ux/web/service/history_snapshot_parser/index", "autoapi/neural_compressor/ux/web/service/index", "autoapi/neural_compressor/ux/web/service/model/index", "autoapi/neural_compressor/ux/web/service/optimization/index", "autoapi/neural_compressor/ux/web/service/profiling/index", "autoapi/neural_compressor/ux/web/service/request_data_processor/index", "autoapi/neural_compressor/ux/web/service/response_generator/index", "autoapi/neural_compressor/ux/web/service/workload/index", "autoapi/neural_compressor/version/index", "docs/build_docs/source/index", "docs/source/CODE_OF_CONDUCT", "docs/source/CONTRIBUTING", "docs/source/FX", "docs/source/NAS", "docs/source/SECURITY", "docs/source/Welcome", "docs/source/adaptor", "docs/source/api-doc/adaptor", "docs/source/api-doc/adaptor/onnxrt", "docs/source/api-doc/adaptor/torch_utils", "docs/source/api-doc/api_doc_example", "docs/source/api-doc/apis", "docs/source/api-doc/benchmark", "docs/source/api-doc/compression", "docs/source/api-doc/config", "docs/source/api-doc/mix_precision", "docs/source/api-doc/model", "docs/source/api-doc/objective", "docs/source/api-doc/quantization", "docs/source/api-doc/strategy", "docs/source/api-doc/training", "docs/source/bench", "docs/source/benchmark", "docs/source/dataloader", "docs/source/dataset", "docs/source/design", "docs/source/distillation", "docs/source/distillation_quantization", "docs/source/distributed", "docs/source/examples_readme", "docs/source/export", "docs/source/faq", "docs/source/framework_yaml", "docs/source/get_started", "docs/source/incompatible_changes", "docs/source/infrastructure", "docs/source/installation_guide", "docs/source/legal_information", "docs/source/metric", "docs/source/migration", "docs/source/mixed_precision", "docs/source/model", "docs/source/neural_coder/README", "docs/source/neural_coder/docs/AWSSageMakerSupport", "docs/source/neural_coder/docs/BigDLNanoSupport", "docs/source/neural_coder/docs/IntelCPU_PerformanceSetting", "docs/source/neural_coder/docs/PythonAPI", "docs/source/neural_coder/docs/PythonLauncher", "docs/source/neural_coder/docs/Quantization", "docs/source/neural_coder/docs/SupportMatrix", "docs/source/neural_coder/docs/release_notes/v0.4", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/DEVELOP", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/README", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/RELEASE", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/DEVELOP", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/RELEASE", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/CHANGELOG", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/README", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/vsc-extension-quickstart", "docs/source/objective", "docs/source/orchestration", "docs/source/platform_configuration", "docs/source/pruning", "docs/source/publication_list", "docs/source/pythonic_style", "docs/source/quantization", "docs/source/quantization_mixed_precision", "docs/source/releases_info", "docs/source/sigopt_strategy", "docs/source/smooth_quant", "docs/source/tensorboard", "docs/source/transform", "docs/source/tuning_strategies", "docs/source/user_guide", "docs/source/user_yaml", "docs/source/validated_model_list", "index"], "filenames": ["autoapi/644ec953a7dc_pruning_support/index.rst", "autoapi/6ece06672ed3_v1_14/index.rst", "autoapi/6f0d0f71d92e_v1_13/index.rst", "autoapi/9e89549a08c8_v1_11/index.rst", "autoapi/block_mask/index.rst", "autoapi/env/index.rst", "autoapi/neural_compressor/adaptor/adaptor/index.rst", "autoapi/neural_compressor/adaptor/index.rst", "autoapi/neural_compressor/adaptor/keras/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/conv2d/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/dense/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/depthwise_conv2d/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/quantizer/index.rst", "autoapi/neural_compressor/adaptor/keras_utils/separable_conv2d/index.rst", "autoapi/neural_compressor/adaptor/mxnet/index.rst", "autoapi/neural_compressor/adaptor/mxnet_utils/index.rst", "autoapi/neural_compressor/adaptor/mxnet_utils/util/index.rst", "autoapi/neural_compressor/adaptor/onnxrt/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/calibration/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/calibrator/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/activation/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/argmax/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/attention/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/binary_op/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/concat/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/conv/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/direct_q8/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/embed_layernorm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gather/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gavgpool/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/gemm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/lstm/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/matmul/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/maxpool/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/ops/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/pad/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/pooling/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/resize/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/operators/split/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/quantizer/index.rst", "autoapi/neural_compressor/adaptor/ox_utils/util/index.rst", "autoapi/neural_compressor/adaptor/pytorch/index.rst", "autoapi/neural_compressor/adaptor/query/index.rst", "autoapi/neural_compressor/adaptor/tensorflow/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_converter_without_calib/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/bf16_convert/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/bf16/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_add_to_biasadd/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_layout/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_leakyrelu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_nan_to_random/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/convert_placeholder_to_const/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dequantize_cast_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dilated_contraction/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/dummy_biasadd/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/expanddims_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fetch_weight_from_reshape/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_batch_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fold_constant/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_biasadd_add/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_column_wise_mul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_conv_with_math/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_decomposed_in/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_gelu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_layer_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_pad_with_fp32_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/fuse_reshape_transpose/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/graph_cse_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/grappler_pass/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/insert_print_node/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/move_squeeze_after_relu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/pre_optimize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/remove_training_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/rename_batch_norm/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/split_shared_input/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_equivalent_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/strip_unused_nodes/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/generic/switch_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/graph_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_fake_quant/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/freeze_value_without_calib/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_redundant_dequantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_conv_requantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_redundant_dequantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/fuse_matmul_requantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/meta_op_optimizer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_hostconst_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/post_quantized_op_cse/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/rnn_convert/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/int8/scale_propagation/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_node/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/onnx_schema/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/onnx/tf2onnx_utils/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/insert_qdq_pattern/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/merge_duplicated_qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_rewriter/qdq/share_qdq_y_pattern/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/graph_util/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/fake_quantize/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_config/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_helper/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/optimize_layer/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_add/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_layers/quantize_layer_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qat/quantize_wrapper/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_concatv2/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_deconv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_in/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_matmul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/fuse_qdq_pooling/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/qdq/optimize_qdq/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_bn/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_concatv2/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_conv/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_for_intel_cpu/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_matmul/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph/quantize_graph_pooling/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/quantize_graph_common/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/tf2onnx_converter/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/bias_correction/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/graph_transform_base/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/insert_logging/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/transform_graph/rerange_quantized_concat/index.rst", "autoapi/neural_compressor/adaptor/tf_utils/util/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/bf16_convert/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/hawq_metric/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/model_wrapper/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/smooth_quant/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/symbolic_trace/index.rst", "autoapi/neural_compressor/adaptor/torch_utils/util/index.rst", "autoapi/neural_compressor/algorithm/algorithm/index.rst", "autoapi/neural_compressor/algorithm/fast_bias_correction/index.rst", "autoapi/neural_compressor/algorithm/index.rst", "autoapi/neural_compressor/algorithm/smooth_quant/index.rst", "autoapi/neural_compressor/algorithm/weight_correction/index.rst", "autoapi/neural_compressor/benchmark/index.rst", "autoapi/neural_compressor/compression/callbacks/index.rst", "autoapi/neural_compressor/compression/distillation/criterions/index.rst", "autoapi/neural_compressor/compression/distillation/index.rst", "autoapi/neural_compressor/compression/index.rst", "autoapi/neural_compressor/compression/pruner/criteria/index.rst", "autoapi/neural_compressor/compression/pruner/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/auto_slim/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/pattern_analyzer/index.rst", "autoapi/neural_compressor/compression/pruner/model_slim/weight_slim/index.rst", "autoapi/neural_compressor/compression/pruner/patterns/index.rst", "autoapi/neural_compressor/compression/pruner/pruners/index.rst", "autoapi/neural_compressor/compression/pruner/regs/index.rst", "autoapi/neural_compressor/compression/pruner/schedulers/index.rst", "autoapi/neural_compressor/compression/pruner/utils/index.rst", "autoapi/neural_compressor/conf/config/index.rst", "autoapi/neural_compressor/conf/dotdict/index.rst", "autoapi/neural_compressor/conf/index.rst", "autoapi/neural_compressor/conf/pythonic_config/index.rst", "autoapi/neural_compressor/config/index.rst", "autoapi/neural_compressor/contrib/index.rst", "autoapi/neural_compressor/contrib/strategy/index.rst", "autoapi/neural_compressor/contrib/strategy/sigopt/index.rst", "autoapi/neural_compressor/contrib/strategy/tpe/index.rst", "autoapi/neural_compressor/data/dataloaders/base_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/default_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/fetcher/index.rst", "autoapi/neural_compressor/data/dataloaders/index.rst", "autoapi/neural_compressor/data/dataloaders/mxnet_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/onnxrt_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/pytorch_dataloader/index.rst", "autoapi/neural_compressor/data/dataloaders/sampler/index.rst", "autoapi/neural_compressor/data/dataloaders/tensorflow_dataloader/index.rst", "autoapi/neural_compressor/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/data/datasets/index.rst", "autoapi/neural_compressor/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/data/filters/filter/index.rst", "autoapi/neural_compressor/data/filters/index.rst", "autoapi/neural_compressor/data/index.rst", "autoapi/neural_compressor/data/transforms/coco_transform/index.rst", "autoapi/neural_compressor/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/data/transforms/index.rst", "autoapi/neural_compressor/data/transforms/postprocess/index.rst", "autoapi/neural_compressor/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/benchmark/index.rst", "autoapi/neural_compressor/experimental/common/criterion/index.rst", "autoapi/neural_compressor/experimental/common/dataloader/index.rst", "autoapi/neural_compressor/experimental/common/index.rst", "autoapi/neural_compressor/experimental/common/metric/index.rst", "autoapi/neural_compressor/experimental/common/model/index.rst", "autoapi/neural_compressor/experimental/common/optimizer/index.rst", "autoapi/neural_compressor/experimental/common/postprocess/index.rst", "autoapi/neural_compressor/experimental/common/torch_utils/index.rst", "autoapi/neural_compressor/experimental/component/index.rst", "autoapi/neural_compressor/experimental/compression/index.rst", "autoapi/neural_compressor/experimental/compression/pruning/index.rst", "autoapi/neural_compressor/experimental/contrib/index.rst", "autoapi/neural_compressor/experimental/contrib/strategy/index.rst", "autoapi/neural_compressor/experimental/contrib/strategy/sigopt/index.rst", "autoapi/neural_compressor/experimental/contrib/strategy/tpe/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/base_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/default_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/fetcher/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/mxnet_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/onnxrt_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/pytorch_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/sampler/index.rst", "autoapi/neural_compressor/experimental/data/dataloaders/tensorflow_dataloader/index.rst", "autoapi/neural_compressor/experimental/data/datasets/bert_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/coco_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/dummy_dataset_v2/index.rst", "autoapi/neural_compressor/experimental/data/datasets/imagenet_dataset/index.rst", "autoapi/neural_compressor/experimental/data/datasets/index.rst", "autoapi/neural_compressor/experimental/data/datasets/style_transfer_dataset/index.rst", "autoapi/neural_compressor/experimental/data/filters/coco_filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/filter/index.rst", "autoapi/neural_compressor/experimental/data/filters/index.rst", "autoapi/neural_compressor/experimental/data/index.rst", "autoapi/neural_compressor/experimental/data/transforms/imagenet_transform/index.rst", "autoapi/neural_compressor/experimental/data/transforms/index.rst", "autoapi/neural_compressor/experimental/data/transforms/tokenization/index.rst", "autoapi/neural_compressor/experimental/data/transforms/transform/index.rst", "autoapi/neural_compressor/experimental/distillation/index.rst", "autoapi/neural_compressor/experimental/export/index.rst", "autoapi/neural_compressor/experimental/export/qlinear2qdq/index.rst", "autoapi/neural_compressor/experimental/export/tf2onnx/index.rst", "autoapi/neural_compressor/experimental/export/torch2onnx/index.rst", "autoapi/neural_compressor/experimental/export/utils/index.rst", "autoapi/neural_compressor/experimental/graph_optimization/index.rst", "autoapi/neural_compressor/experimental/index.rst", "autoapi/neural_compressor/experimental/metric/bleu/index.rst", "autoapi/neural_compressor/experimental/metric/bleu_util/index.rst", "autoapi/neural_compressor/experimental/metric/coco_label_map/index.rst", "autoapi/neural_compressor/experimental/metric/coco_tools/index.rst", "autoapi/neural_compressor/experimental/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/experimental/metric/f1/index.rst", "autoapi/neural_compressor/experimental/metric/index.rst", "autoapi/neural_compressor/experimental/metric/metric/index.rst", "autoapi/neural_compressor/experimental/mixed_precision/index.rst", "autoapi/neural_compressor/experimental/model_conversion/index.rst", "autoapi/neural_compressor/experimental/nas/basic_nas/index.rst", "autoapi/neural_compressor/experimental/nas/dynas/index.rst", "autoapi/neural_compressor/experimental/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas/index.rst", "autoapi/neural_compressor/experimental/nas/nas_utils/index.rst", "autoapi/neural_compressor/experimental/nas/search_algorithms/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/gradient_sensitivity/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/group_lasso/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/magnitude/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/pattern_lock/index.rst", "autoapi/neural_compressor/experimental/pruner_legacy/pruner/index.rst", "autoapi/neural_compressor/experimental/pruning/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_recipes/patterns/tile_pattern/index.rst", "autoapi/neural_compressor/experimental/pruning_v2/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/logger/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/patterns/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/prune_utils/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruner/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/pruning/index.rst", "autoapi/neural_compressor/experimental/pytorch_pruner/scheduler/index.rst", "autoapi/neural_compressor/experimental/quantization/index.rst", "autoapi/neural_compressor/experimental/scheduler/index.rst", "autoapi/neural_compressor/experimental/strategy/auto_mixed_precision/index.rst", "autoapi/neural_compressor/experimental/strategy/basic/index.rst", "autoapi/neural_compressor/experimental/strategy/bayesian/index.rst", "autoapi/neural_compressor/experimental/strategy/exhaustive/index.rst", "autoapi/neural_compressor/experimental/strategy/index.rst", "autoapi/neural_compressor/experimental/strategy/mse/index.rst", "autoapi/neural_compressor/experimental/strategy/mse_v2/index.rst", "autoapi/neural_compressor/experimental/strategy/random/index.rst", "autoapi/neural_compressor/experimental/strategy/strategy/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/constant/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/tuning_sampler/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/tuning_space/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/tuning_structs/index.rst", "autoapi/neural_compressor/experimental/strategy/utils/utility/index.rst", "autoapi/neural_compressor/index.rst", "autoapi/neural_compressor/metric/bleu/index.rst", "autoapi/neural_compressor/metric/bleu_util/index.rst", "autoapi/neural_compressor/metric/coco_label_map/index.rst", "autoapi/neural_compressor/metric/coco_tools/index.rst", "autoapi/neural_compressor/metric/evaluate_squad/index.rst", "autoapi/neural_compressor/metric/f1/index.rst", "autoapi/neural_compressor/metric/index.rst", "autoapi/neural_compressor/metric/metric/index.rst", "autoapi/neural_compressor/mix_precision/index.rst", "autoapi/neural_compressor/model/base_model/index.rst", "autoapi/neural_compressor/model/index.rst", "autoapi/neural_compressor/model/keras_model/index.rst", "autoapi/neural_compressor/model/model/index.rst", "autoapi/neural_compressor/model/mxnet_model/index.rst", "autoapi/neural_compressor/model/nets_factory/index.rst", "autoapi/neural_compressor/model/onnx_model/index.rst", "autoapi/neural_compressor/model/tensorflow_model/index.rst", "autoapi/neural_compressor/model/torch_model/index.rst", "autoapi/neural_compressor/objective/index.rst", "autoapi/neural_compressor/quantization/index.rst", "autoapi/neural_compressor/strategy/auto/index.rst", "autoapi/neural_compressor/strategy/auto_mixed_precision/index.rst", "autoapi/neural_compressor/strategy/basic/index.rst", "autoapi/neural_compressor/strategy/bayesian/index.rst", "autoapi/neural_compressor/strategy/conservative/index.rst", "autoapi/neural_compressor/strategy/exhaustive/index.rst", "autoapi/neural_compressor/strategy/hawq_v2/index.rst", "autoapi/neural_compressor/strategy/index.rst", "autoapi/neural_compressor/strategy/mse/index.rst", "autoapi/neural_compressor/strategy/mse_v2/index.rst", "autoapi/neural_compressor/strategy/random/index.rst", "autoapi/neural_compressor/strategy/strategy/index.rst", "autoapi/neural_compressor/strategy/utils/constant/index.rst", "autoapi/neural_compressor/strategy/utils/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_sampler/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_space/index.rst", "autoapi/neural_compressor/strategy/utils/tuning_structs/index.rst", "autoapi/neural_compressor/strategy/utils/utility/index.rst", "autoapi/neural_compressor/template/api_doc_example/index.rst", "autoapi/neural_compressor/template/index.rst", "autoapi/neural_compressor/training/index.rst", "autoapi/neural_compressor/utils/collect_layer_histogram/index.rst", "autoapi/neural_compressor/utils/constant/index.rst", "autoapi/neural_compressor/utils/create_obj_from_config/index.rst", "autoapi/neural_compressor/utils/index.rst", "autoapi/neural_compressor/utils/kl_divergence/index.rst", "autoapi/neural_compressor/utils/load_huggingface/index.rst", "autoapi/neural_compressor/utils/logger/index.rst", "autoapi/neural_compressor/utils/options/index.rst", "autoapi/neural_compressor/utils/pytorch/index.rst", "autoapi/neural_compressor/utils/utility/index.rst", "autoapi/neural_compressor/ux/components/benchmark/benchmark/index.rst", "autoapi/neural_compressor/ux/components/benchmark/benchmark_model/index.rst", "autoapi/neural_compressor/ux/components/benchmark/execute_benchmark/index.rst", "autoapi/neural_compressor/ux/components/benchmark/index.rst", "autoapi/neural_compressor/ux/components/config_generator/benchmark_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/graph_optimization_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/mixed_precision_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/profiling_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/pruning_config_generator/index.rst", "autoapi/neural_compressor/ux/components/config_generator/quantization_config_generator/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/configuration_parser/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/get_boundary_nodes/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/get_configuration/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/params_feeder/index.rst", "autoapi/neural_compressor/ux/components/configuration_wizard/pruning_config_parser/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_manager/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/benchmark/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/benchmark_result/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/dataloader/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/dataset/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/domain/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/domain_flavour/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/example/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/framework/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/metric/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/model/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/optimization/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/optimization_type/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/precision/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/profiling/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/profiling_result/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/project/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/pruning_details/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/transform/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/tuning_details/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_models/tuning_history/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/benchmark_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/dataset_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/db_operations/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/diagnosis_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/dictionaries_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/examples_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/model_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/optimization_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/profiling_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/db_operations/project_api_interface/index.rst", "autoapi/neural_compressor/ux/components/db_manager/index.rst", "autoapi/neural_compressor/ux/components/db_manager/params_interfaces/index.rst", "autoapi/neural_compressor/ux/components/db_manager/utils/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/factory/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/onnx_diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/onnx_diagnosis/onnxrt_diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/op_details/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/op_entry/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/tensorflow_diagnosis/index.rst", "autoapi/neural_compressor/ux/components/diagnosis/tensorflow_diagnosis/tensorflow_diagnosis/index.rst", "autoapi/neural_compressor/ux/components/file_browser/file_browser/index.rst", "autoapi/neural_compressor/ux/components/file_browser/index.rst", "autoapi/neural_compressor/ux/components/graph/attribute/index.rst", "autoapi/neural_compressor/ux/components/graph/collapser/index.rst", "autoapi/neural_compressor/ux/components/graph/edge/index.rst", "autoapi/neural_compressor/ux/components/graph/graph/index.rst", "autoapi/neural_compressor/ux/components/graph/graph_reader/index.rst", "autoapi/neural_compressor/ux/components/graph/index.rst", "autoapi/neural_compressor/ux/components/graph/node/index.rst", "autoapi/neural_compressor/ux/components/graph/reader/index.rst", "autoapi/neural_compressor/ux/components/graph/reader/onnxrt_reader/index.rst", "autoapi/neural_compressor/ux/components/graph/reader/tensorflow_reader/index.rst", "autoapi/neural_compressor/ux/components/index.rst", "autoapi/neural_compressor/ux/components/jobs_management/index.rst", "autoapi/neural_compressor/ux/components/jobs_management/jobs_control_queue/index.rst", "autoapi/neural_compressor/ux/components/jobs_management/jobs_manager/index.rst", "autoapi/neural_compressor/ux/components/jobs_management/request/index.rst", "autoapi/neural_compressor/ux/components/manage_workspace/index.rst", "autoapi/neural_compressor/ux/components/model/domain/index.rst", "autoapi/neural_compressor/ux/components/model/index.rst", "autoapi/neural_compressor/ux/components/model/model/index.rst", "autoapi/neural_compressor/ux/components/model/model_type_getter/index.rst", "autoapi/neural_compressor/ux/components/model/onnxrt/index.rst", "autoapi/neural_compressor/ux/components/model/onnxrt/model/index.rst", "autoapi/neural_compressor/ux/components/model/pytorch/index.rst", "autoapi/neural_compressor/ux/components/model/pytorch/model/index.rst", "autoapi/neural_compressor/ux/components/model/repository/index.rst", "autoapi/neural_compressor/ux/components/model/shape/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/frozen_pb/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/keras/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/meta_graph/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/model/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/saved_model/index.rst", "autoapi/neural_compressor/ux/components/model/tensorflow/utils/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/download_config/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/download_model/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/downloader/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/index.rst", "autoapi/neural_compressor/ux/components/model_zoo/list_models/index.rst", "autoapi/neural_compressor/ux/components/names_mapper/index.rst", "autoapi/neural_compressor/ux/components/names_mapper/names_mapper/index.rst", "autoapi/neural_compressor/ux/components/optimization/execute_optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/factory/index.rst", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/graph_optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/index.rst", "autoapi/neural_compressor/ux/components/optimization/graph_optimizer/optimize_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/index.rst", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/mixed_precision/index.rst", "autoapi/neural_compressor/ux/components/optimization/mixed_precision/optimize_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/neural_coder_optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/neural_coder_optimization/optimize_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/optimization/index.rst", "autoapi/neural_compressor/ux/components/optimization/pruning/index.rst", "autoapi/neural_compressor/ux/components/optimization/pruning/optimize_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/pruning/pruning/index.rst", "autoapi/neural_compressor/ux/components/optimization/tune/index.rst", "autoapi/neural_compressor/ux/components/optimization/tune/tune_model/index.rst", "autoapi/neural_compressor/ux/components/optimization/tune/tuning/index.rst", "autoapi/neural_compressor/ux/components/optimization/tuning_history/index.rst", "autoapi/neural_compressor/ux/components/profiling/execute_profiling/index.rst", "autoapi/neural_compressor/ux/components/profiling/factory/index.rst", "autoapi/neural_compressor/ux/components/profiling/index.rst", "autoapi/neural_compressor/ux/components/profiling/profile_model/index.rst", "autoapi/neural_compressor/ux/components/profiling/profiler/index.rst", "autoapi/neural_compressor/ux/components/profiling/profiling/index.rst", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/factory/index.rst", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/index.rst", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/profiler/index.rst", "autoapi/neural_compressor/ux/components/profiling/tensorflow_profiler/utils/index.rst", "autoapi/neural_compressor/ux/inc_bench/index.rst", "autoapi/neural_compressor/ux/index.rst", "autoapi/neural_compressor/ux/utils/consts/index.rst", "autoapi/neural_compressor/ux/utils/environment/index.rst", "autoapi/neural_compressor/ux/utils/exceptions/index.rst", "autoapi/neural_compressor/ux/utils/executor/index.rst", "autoapi/neural_compressor/ux/utils/expiring_dict/index.rst", "autoapi/neural_compressor/ux/utils/github_info/index.rst", "autoapi/neural_compressor/ux/utils/hw_info/index.rst", "autoapi/neural_compressor/ux/utils/index.rst", "autoapi/neural_compressor/ux/utils/json_serializer/index.rst", "autoapi/neural_compressor/ux/utils/logger/index.rst", "autoapi/neural_compressor/ux/utils/parser/index.rst", "autoapi/neural_compressor/ux/utils/proc/index.rst", "autoapi/neural_compressor/ux/utils/processes/index.rst", "autoapi/neural_compressor/ux/utils/singleton/index.rst", "autoapi/neural_compressor/ux/utils/status_updates/index.rst", "autoapi/neural_compressor/ux/utils/templates/index.rst", "autoapi/neural_compressor/ux/utils/templates/metric/index.rst", "autoapi/neural_compressor/ux/utils/templates/workdir/index.rst", "autoapi/neural_compressor/ux/utils/utils/index.rst", "autoapi/neural_compressor/ux/utils/workload/config/index.rst", "autoapi/neural_compressor/ux/utils/workload/dataloader/index.rst", "autoapi/neural_compressor/ux/utils/workload/evaluation/index.rst", "autoapi/neural_compressor/ux/utils/workload/graph_optimization/index.rst", "autoapi/neural_compressor/ux/utils/workload/index.rst", "autoapi/neural_compressor/ux/utils/workload/mixed_precision/index.rst", "autoapi/neural_compressor/ux/utils/workload/model/index.rst", "autoapi/neural_compressor/ux/utils/workload/pruning/index.rst", "autoapi/neural_compressor/ux/utils/workload/quantization/index.rst", "autoapi/neural_compressor/ux/utils/workload/tuning/index.rst", "autoapi/neural_compressor/ux/utils/yaml_utils/index.rst", "autoapi/neural_compressor/ux/web/communication/index.rst", "autoapi/neural_compressor/ux/web/configuration/index.rst", "autoapi/neural_compressor/ux/web/exceptions/index.rst", "autoapi/neural_compressor/ux/web/index.rst", "autoapi/neural_compressor/ux/web/router/index.rst", "autoapi/neural_compressor/ux/web/server/index.rst", "autoapi/neural_compressor/ux/web/service/benchmark/index.rst", "autoapi/neural_compressor/ux/web/service/history_snapshot_parser/index.rst", "autoapi/neural_compressor/ux/web/service/index.rst", "autoapi/neural_compressor/ux/web/service/model/index.rst", "autoapi/neural_compressor/ux/web/service/optimization/index.rst", "autoapi/neural_compressor/ux/web/service/profiling/index.rst", "autoapi/neural_compressor/ux/web/service/request_data_processor/index.rst", "autoapi/neural_compressor/ux/web/service/response_generator/index.rst", "autoapi/neural_compressor/ux/web/service/workload/index.rst", "autoapi/neural_compressor/version/index.rst", "docs/build_docs/source/index.rst", "docs/source/CODE_OF_CONDUCT.md", "docs/source/CONTRIBUTING.md", "docs/source/FX.md", "docs/source/NAS.md", "docs/source/SECURITY.md", "docs/source/Welcome.md", "docs/source/adaptor.md", "docs/source/api-doc/adaptor.rst", "docs/source/api-doc/adaptor/onnxrt.rst", "docs/source/api-doc/adaptor/torch_utils.rst", "docs/source/api-doc/api_doc_example.rst", "docs/source/api-doc/apis.rst", "docs/source/api-doc/benchmark.rst", "docs/source/api-doc/compression.rst", "docs/source/api-doc/config.rst", "docs/source/api-doc/mix_precision.rst", "docs/source/api-doc/model.rst", "docs/source/api-doc/objective.rst", "docs/source/api-doc/quantization.rst", "docs/source/api-doc/strategy.rst", "docs/source/api-doc/training.rst", "docs/source/bench.md", "docs/source/benchmark.md", "docs/source/dataloader.md", "docs/source/dataset.md", "docs/source/design.md", "docs/source/distillation.md", "docs/source/distillation_quantization.md", "docs/source/distributed.md", "docs/source/examples_readme.md", "docs/source/export.md", "docs/source/faq.md", "docs/source/framework_yaml.md", "docs/source/get_started.md", "docs/source/incompatible_changes.md", "docs/source/infrastructure.md", "docs/source/installation_guide.md", "docs/source/legal_information.md", "docs/source/metric.md", "docs/source/migration.md", "docs/source/mixed_precision.md", "docs/source/model.md", "docs/source/neural_coder/README.md", "docs/source/neural_coder/docs/AWSSageMakerSupport.md", "docs/source/neural_coder/docs/BigDLNanoSupport.md", "docs/source/neural_coder/docs/IntelCPU_PerformanceSetting.md", "docs/source/neural_coder/docs/PythonAPI.md", "docs/source/neural_coder/docs/PythonLauncher.md", "docs/source/neural_coder/docs/Quantization.md", "docs/source/neural_coder/docs/SupportMatrix.md", "docs/source/neural_coder/docs/release_notes/v0.4.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/DEVELOP.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/README.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab/RELEASE.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/DEVELOP.md", "docs/source/neural_coder/extensions/neural_compressor_ext_lab_alibaba/RELEASE.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/CHANGELOG.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/README.md", "docs/source/neural_coder/extensions/neural_compressor_ext_vscode/vsc-extension-quickstart.md", "docs/source/objective.md", "docs/source/orchestration.md", "docs/source/platform_configuration.md", "docs/source/pruning.md", "docs/source/publication_list.md", "docs/source/pythonic_style.md", "docs/source/quantization.md", "docs/source/quantization_mixed_precision.md", "docs/source/releases_info.md", "docs/source/sigopt_strategy.md", "docs/source/smooth_quant.md", "docs/source/tensorboard.md", "docs/source/transform.md", "docs/source/tuning_strategies.md", "docs/source/user_guide.md", "docs/source/user_yaml.md", "docs/source/validated_model_list.md", "index.rst"], "titles": ["<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">644ec953a7dc_pruning_support</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">6ece06672ed3_v1_14</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">6f0d0f71d92e_v1_13</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">9e89549a08c8_v1_11</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">block_mask</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">env</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.adaptor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.dense</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.depthwise_conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.keras_utils.separable_conv2d</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.mxnet_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.onnxrt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.calibration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.calibrator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.activation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.argmax</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.attention</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.binary_op</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.concat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.direct_q8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.embed_layernorm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gather</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gavgpool</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.gemm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.lstm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.maxpool</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.ops</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.pad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.resize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.operators.split</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.quantizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.ox_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.query</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tensorflow</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_converter_without_calib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.bf16</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.graph_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.quantize_graph_common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.tf2onnx_converter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.bias_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.insert_logging</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.tf_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.bf16_convert</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.hawq_metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.model_wrapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.smooth_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.symbolic_trace</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.adaptor.torch_utils.util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.algorithm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.fast_bias_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.smooth_quant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.algorithm.weight_correction</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.callbacks</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.distillation.criterions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.distillation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.criteria</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim.auto_slim</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim.pattern_analyzer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.model_slim.weight_slim</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.pruners</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.regs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.schedulers</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.compression.pruner.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.dotdict</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.conf.pythonic_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy.sigopt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.contrib.strategy.tpe</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.base_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.default_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.fetcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.mxnet_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.onnxrt_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.pytorch_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.dataloaders.tensorflow_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.bert_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.coco_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dummy_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.dummy_dataset_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.imagenet_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.datasets.style_transfer_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters.coco_filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters.filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.filters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.coco_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.imagenet_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.postprocess</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.tokenization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.data.transforms.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.criterion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.postprocess</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.common.torch_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.component</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.compression</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.compression.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib.strategy.sigopt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.contrib.strategy.tpe</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.base_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.default_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.fetcher</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.mxnet_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.onnxrt_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.pytorch_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.dataloaders.tensorflow_dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.bert_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.coco_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dummy_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.dummy_dataset_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.imagenet_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.datasets.style_transfer_dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters.coco_filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters.filter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.filters</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.imagenet_transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.tokenization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.data.transforms.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.distillation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.qlinear2qdq</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.tf2onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.torch2onnx</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.export.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.graph_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.bleu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.bleu_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.coco_label_map</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.coco_tools</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.evaluate_squad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.f1</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.metric.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.model_conversion</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.basic_nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.dynas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.nas</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.nas_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.nas.search_algorithms</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.gradient_sensitivity</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.group_lasso</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.magnitude</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.pattern_lock</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruner_legacy.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns.pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_recipes.patterns.tile_pattern</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pruning_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.patterns</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.prune_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.pruner</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.pytorch_pruner.scheduler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.scheduler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.auto_mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.basic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.bayesian</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.exhaustive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.mse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.mse_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.tuning_sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.tuning_space</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.tuning_structs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.experimental.strategy.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.bleu</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.bleu_util</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.coco_label_map</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.coco_tools</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.evaluate_squad</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.f1</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.metric.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.mix_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.base_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.keras_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.mxnet_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.nets_factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.onnx_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.tensorflow_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.model.torch_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.objective</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.auto</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.auto_mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.basic</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.bayesian</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.conservative</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.exhaustive</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.hawq_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.mse</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.mse_v2</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.random</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.strategy</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_sampler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_space</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.tuning_structs</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.strategy.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.template.api_doc_example</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.template</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.training</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.collect_layer_histogram</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.constant</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.create_obj_from_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.kl_divergence</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.load_huggingface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.options</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.utils.utility</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.benchmark.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.benchmark.benchmark_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.benchmark.execute_benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.benchmark_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.graph_optimization_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.mixed_precision_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.profiling_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.pruning_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.config_generator.quantization_config_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.configuration_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.get_boundary_nodes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.get_configuration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.params_feeder</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.configuration_wizard.pruning_config_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_manager</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.benchmark_result</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.dataset</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.domain</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.domain_flavour</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.example</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.framework</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.optimization_type</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.profiling_result</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.project</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.pruning_details</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.transform</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.tuning_details</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_models.tuning_history</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.db_operations</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.examples_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.model_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.db_operations.project_api_interface</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.params_interfaces</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.db_manager.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.onnx_diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.op_details</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.op_entry</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.tensorflow_diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.file_browser.file_browser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.file_browser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.attribute</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.collapser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.edge</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.graph_reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.node</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.reader.onnxrt_reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.graph.reader.tensorflow_reader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.jobs_management</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.jobs_management.jobs_control_queue</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.jobs_management.jobs_manager</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.jobs_management.request</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.manage_workspace</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.domain</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.model_type_getter</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.onnxrt</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.onnxrt.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.pytorch</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.pytorch.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.repository</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.shape</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.frozen_pb</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.keras</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.meta_graph</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.saved_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model.tensorflow.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo.download_config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo.download_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo.downloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.model_zoo.list_models</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.names_mapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.names_mapper.names_mapper</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.execute_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.graph_optimizer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.graph_optimizer.optimize_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.mixed_precision.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.mixed_precision.optimize_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.neural_coder_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.pruning.optimize_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.pruning.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.tune</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.tune.tune_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.tune.tuning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.optimization.tuning_history</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.execute_profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.profile_model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.tensorflow_profiler.factory</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.tensorflow_profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.tensorflow_profiler.profiler</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.components.profiling.tensorflow_profiler.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.inc_bench</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.consts</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.environment</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.exceptions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.executor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.expiring_dict</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.github_info</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.hw_info</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.json_serializer</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.logger</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.proc</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.processes</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.singleton</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.status_updates</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.templates</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.templates.metric</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.templates.workdir</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.config</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.dataloader</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.evaluation</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.graph_optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.mixed_precision</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.pruning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.quantization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.workload.tuning</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.utils.yaml_utils</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.communication</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.configuration</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.exceptions</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.router</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.server</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.benchmark</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.history_snapshot_parser</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.model</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.optimization</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.profiling</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.request_data_processor</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.response_generator</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.ux.web.service.workload</span></code>", "<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">neural_compressor.version</span></code>", "Intel\u00ae Neural Compressor Documentation", "Contributor Covenant Code of Conduct", "Contribution Guidelines", "FX", "Neural Architecture Search", "Security Policy", "Intel\u00ae Neural Compressor", "Adaptor", "Adaptor", "ONNX Runtime", "Torch Utils", "API Document Example", "APIs", "Benchmark", "Compression", "Config", "Mix Precision", "Model", "Objective", "Quantization", "Strategy", "Training", "Intel\u00ae Neural Compressor Bench", "Benchmarking", "DataLoader", "Dataset", "Design", "Distillation", "Distillation for Quantization", "Distributed Training and Inference (Evaluation)", "Examples", "Export", "Frequently Asked Questions", "Framework YAML Configuration Files", "Getting Started", "Incompatible changes between v1.2 and v1.1", "Infrastructure of Intel\u00ae Neural Compressor", "Installation", "Legal Information", "Metrics", "Code Migration from Intel Neural Compressor 1.X to Intel Neural Compressor 2.X", "Mixed Precision", "Model", "Neural Coder", "AWS Amazon SageMaker Support", "BigDL Nano Support", "Intel CPU Platforms: Best Performance Setting", "Neural Coder as Python API", "Python Launcher", "Neural Coder for Quantization", "Supported Optimization Features", "v0.4", "Changelog", "neural_compressor_ext_lab", "Intel\u00ae Neural Compressor as JupyterLab Extension", "Making a new release of neural_compressor_ext_lab", "Changelog", "neural_compressor_ext_lab_alibaba", "Making a new release of neural_compressor_ext_lab_alibaba", "Change Log", "Neural Coder", "Welcome to your VS Code Extension", "Objective", "Optimization Orchestration", "SYSTEM CONFIGURATION", "Pruning", "Full Publications/Events (59)", "Pythonic Style Access for Configurations", "Quantization", "Turn OFF Auto Mixed Precision during Quantization", "Release", "SigOpt Strategy", "Smooth Quant", "TensorBoard", "Transform", "Tuning Strategies", "User Guide", "User YAML Configuration Files", "Validated Models", "Intel\u00ae Neural Compressor Documentation"], "terms": {"pruning_support": 0, "revis": [0, 1, 2, 3], "id": [0, 1, 2, 3, 158, 209, 211, 251, 261, 263, 264, 265, 266, 314, 316, 317, 318, 319, 436, 586, 618, 622], "644ec953a7dc": 0, "6ece06672ed3": [0, 1], "creat": [0, 1, 2, 3, 5, 17, 20, 104, 177, 178, 183, 193, 195, 213, 227, 237, 239, 264, 274, 275, 310, 317, 349, 352, 357, 531, 548, 551, 554, 572, 589, 600, 602, 604, 605, 608, 615, 618, 620, 622], "date": [0, 1, 2, 3], "2022": [0, 1, 2, 3, 177, 178, 553, 585, 619], "12": [0, 569, 581, 584, 625], "09": [0, 625], "17": [0, 619, 625], "22": [0, 3, 584, 625], "310141": 0, "v1": [1, 2, 3, 145, 205, 206, 249, 265, 266, 268, 318, 319, 321, 330, 576, 581, 586, 589, 612, 617, 618, 625], "14": [1, 2, 178, 256, 257, 578, 584, 619, 625], "6f0d0f71d92e": [1, 2], "08": [1, 210, 252, 621, 625], "31": [1, 625], "07": [1, 2, 619, 624, 625], "16": [1, 571, 572, 619, 625], "24": [1, 612, 619, 622, 625], "229939": 1, "update_dataload": 1, "db_session": [1, 418], "sqlalchemi": [1, 405, 418, 579, 584], "orm": [1, 405, 418], "session": [1, 145, 192, 236, 330, 418, 587, 620], "sourc": [1, 5, 6, 8, 15, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 108, 109, 112, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 163, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 178, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 225, 226, 227, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 249, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 280, 281, 282, 283, 286, 287, 288, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 348, 349, 350, 351, 352, 354, 355, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 417, 418, 419, 420, 423, 424, 425, 427, 428, 430, 431, 432, 433, 434, 436, 438, 439, 445, 446, 448, 449, 451, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 467, 469, 470, 471, 472, 474, 475, 477, 478, 480, 481, 483, 484, 486, 487, 488, 489, 490, 492, 493, 494, 495, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 536, 537, 538, 540, 541, 542, 543, 544, 545, 546, 550, 553, 585, 587, 600, 602, 604, 605, 607, 613], "updat": [1, 73, 152, 163, 169, 173, 257, 293, 333, 367, 418, 488, 515, 569, 578, 579, 586, 587, 593, 598, 601, 611, 612, 619, 622, 623], "dataload": [1, 17, 19, 147, 150, 152, 158, 165, 167, 181, 182, 193, 204, 214, 225, 226, 237, 248, 253, 260, 283, 288, 297, 313, 333, 354, 357, 365, 392, 416, 418, 440, 481, 494, 500, 508, 519, 524, 550, 553, 554, 569, 574, 575, 576, 581, 582, 586, 587, 588, 610, 615, 616, 619, 620, 621, 624], "exist": [1, 52, 158, 175, 211, 330, 451, 519, 578, 586, 594, 622], "databas": [1, 195, 239, 383, 386, 388, 391, 392, 393, 396, 397, 402, 406, 407, 411, 416], "update_transform": 1, "transform": [1, 43, 49, 140, 142, 143, 144, 170, 193, 194, 195, 196, 197, 198, 200, 202, 204, 237, 238, 239, 240, 241, 242, 244, 246, 248, 260, 313, 392, 416, 418, 440, 519, 521, 550, 551, 571, 572, 574, 575, 576, 577, 581, 587, 590, 595, 596, 597, 598, 612, 613, 616, 619, 620, 624, 625], "13": [2, 3, 333, 569, 584, 619], "9e89549a08c8": [2, 3], "29": [2, 619, 625], "41": [2, 619, 625], "291905": 2, "11": [3, 569, 584, 586, 588, 619, 622], "03": [3, 625], "34": [3, 625], "52": [3, 619, 625], "916541": 3, "block": [4, 163, 169, 170, 173, 291, 332, 352, 536, 583, 609, 612, 619], "mask": [4, 168, 169, 170, 193, 237, 264, 293, 317, 612, 625], "run_migrations_offlin": 5, "run": [5, 17, 145, 158, 170, 173, 177, 178, 181, 182, 192, 209, 211, 225, 226, 236, 251, 292, 293, 300, 322, 333, 337, 354, 466, 512, 534, 536, 549, 554, 569, 570, 576, 579, 580, 587, 588, 590, 592, 594, 595, 596, 598, 600, 601, 602, 604, 605, 607, 613, 615, 617, 618, 620, 622, 624], "migrat": [5, 619, 623], "offlin": [5, 364, 548, 587, 615, 619], "mode": [5, 42, 43, 44, 109, 150, 202, 246, 264, 310, 317, 330, 349, 364, 554, 569, 583, 584, 600, 604, 615, 616, 622], "thi": [5, 44, 85, 109, 131, 138, 140, 144, 147, 152, 157, 159, 165, 167, 169, 170, 171, 172, 177, 178, 181, 182, 192, 193, 194, 195, 196, 197, 198, 200, 210, 213, 219, 220, 225, 226, 236, 237, 238, 239, 240, 241, 242, 244, 252, 261, 264, 265, 266, 268, 277, 278, 280, 281, 282, 283, 288, 291, 293, 295, 296, 297, 300, 303, 314, 317, 318, 319, 321, 322, 332, 333, 337, 342, 352, 354, 363, 364, 548, 549, 550, 551, 554, 569, 571, 572, 574, 575, 576, 580, 583, 585, 586, 587, 588, 589, 590, 592, 593, 595, 596, 598, 600, 602, 604, 605, 606, 607, 608, 612, 615, 616, 617, 618, 619, 620, 621, 622, 623], "configur": [5, 15, 17, 18, 44, 117, 146, 152, 158, 173, 174, 177, 178, 181, 182, 184, 195, 198, 211, 216, 225, 226, 239, 242, 253, 257, 259, 270, 271, 272, 274, 283, 288, 292, 296, 297, 303, 313, 322, 332, 333, 342, 354, 356, 357, 362, 363, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 470, 500, 519, 520, 521, 522, 523, 525, 526, 527, 528, 529, 534, 536, 550, 551, 554, 569, 572, 586, 587, 594, 608, 609, 612, 615, 617, 621, 622, 625], "context": [5, 17, 364, 614], "just": [5, 96, 183, 208, 210, 213, 215, 216, 218, 227, 252, 332, 551, 587, 597, 601, 607, 610, 615, 619, 621, 622], "url": [5, 195, 239, 585], "an": [5, 17, 66, 67, 69, 104, 140, 147, 152, 157, 170, 177, 178, 186, 191, 195, 210, 214, 219, 230, 235, 239, 252, 260, 261, 265, 266, 274, 275, 297, 313, 314, 318, 319, 322, 333, 352, 354, 364, 428, 546, 548, 550, 551, 553, 554, 571, 572, 573, 578, 586, 587, 588, 590, 594, 595, 598, 607, 609, 612, 613, 615, 618, 619, 620, 621, 622], "engin": 5, "though": [5, 619], "i": [5, 17, 43, 44, 47, 48, 52, 53, 56, 59, 63, 69, 81, 84, 104, 131, 140, 145, 147, 151, 152, 157, 158, 159, 163, 167, 168, 170, 171, 173, 177, 178, 181, 182, 183, 191, 192, 193, 194, 195, 196, 197, 200, 202, 206, 210, 211, 213, 217, 219, 220, 225, 226, 227, 235, 236, 237, 238, 239, 240, 241, 244, 246, 249, 252, 261, 264, 266, 268, 270, 275, 283, 288, 292, 293, 297, 304, 314, 317, 319, 321, 322, 332, 333, 338, 343, 352, 354, 363, 364, 428, 467, 507, 511, 517, 519, 527, 534, 548, 549, 550, 551, 553, 554, 555, 557, 561, 564, 567, 569, 570, 571, 572, 574, 575, 576, 578, 580, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 595, 596, 598, 600, 601, 602, 604, 605, 607, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625], "accept": [5, 177, 178, 352, 548, 569, 570], "here": [5, 264, 317, 352, 569, 572, 576, 577, 578, 580, 581, 586, 595, 602, 605, 607, 615, 617, 618, 625], "well": [5, 181, 182, 225, 226, 322, 333, 354, 551, 553, 572, 612, 615, 617, 619, 624], "By": [5, 167, 177, 178, 261, 314, 553, 586, 589, 600, 601, 604, 613, 622], "skip": [5, 620, 622], "creation": [5, 380], "we": [5, 43, 66, 67, 69, 73, 85, 140, 150, 156, 157, 158, 167, 177, 178, 192, 211, 213, 236, 261, 264, 314, 317, 340, 548, 550, 554, 571, 576, 578, 580, 586, 587, 594, 595, 598, 602, 605, 607, 608, 609, 610, 612, 614, 615, 618, 619, 620, 622, 623], "don": [5, 140, 157, 169, 177, 178, 550, 569, 612, 622], "t": [5, 66, 67, 69, 140, 157, 169, 177, 178, 210, 213, 252, 266, 319, 550, 554, 569, 574, 576, 587, 608, 612, 615, 622, 624], "even": [5, 569, 619], "need": [5, 17, 43, 104, 108, 150, 158, 167, 178, 181, 182, 183, 191, 192, 195, 202, 210, 213, 215, 216, 225, 226, 227, 235, 236, 239, 246, 252, 297, 303, 321, 322, 332, 333, 342, 354, 363, 364, 550, 554, 569, 571, 572, 574, 576, 583, 587, 588, 590, 592, 593, 596, 600, 601, 602, 604, 605, 607, 608, 612, 614, 615, 616, 617, 619, 621, 622, 624], "dbapi": 5, "avail": [5, 177, 178, 326, 467, 555, 557, 561, 564, 567, 569, 577, 581, 583, 600, 604, 611, 612, 622, 625], "call": [5, 17, 150, 153, 167, 170, 264, 293, 317, 550, 551, 554, 569, 571, 582, 596, 598, 608, 615, 619, 620, 621], "execut": [5, 43, 52, 170, 177, 178, 293, 297, 299, 333, 334, 336, 354, 357, 363, 364, 366, 367, 470, 474, 478, 482, 483, 486, 489, 501, 504, 512, 513, 535, 569, 574, 575, 587, 588, 592, 593, 600, 601, 604, 607, 608, 610, 612, 615, 618, 622, 625], "emit": 5, "given": [5, 17, 20, 66, 67, 69, 103, 104, 115, 145, 152, 210, 252, 264, 317, 333, 428, 505, 519, 551, 612, 619, 621], "string": [5, 43, 44, 115, 145, 160, 167, 169, 170, 171, 172, 173, 174, 177, 178, 195, 212, 217, 239, 253, 257, 259, 261, 264, 270, 271, 272, 274, 275, 283, 288, 291, 292, 293, 294, 295, 296, 314, 317, 326, 330, 357, 364, 377, 519, 586, 619, 621], "script": [5, 167, 261, 262, 265, 266, 314, 315, 318, 319, 366, 367, 453, 470, 474, 478, 480, 483, 486, 492, 576, 583, 590, 594, 597, 598, 601, 613], "output": [5, 43, 52, 56, 58, 73, 97, 104, 109, 145, 152, 167, 168, 169, 175, 177, 178, 181, 182, 215, 219, 225, 226, 256, 257, 261, 291, 314, 321, 322, 330, 333, 354, 360, 361, 364, 474, 478, 550, 554, 569, 574, 575, 576, 578, 580, 582, 586, 587, 589, 598, 607, 608, 610, 612, 614, 615, 619, 620, 621, 622, 624], "run_migrations_onlin": 5, "onlin": [5, 548, 618], "In": [5, 159, 169, 170, 171, 178, 192, 220, 236, 264, 291, 293, 317, 332, 548, 550, 551, 553, 554, 569, 571, 572, 574, 575, 576, 586, 587, 597, 600, 601, 604, 609, 610, 612, 615, 616, 618, 619, 620, 621, 622], "scenario": [5, 381, 554, 569, 570, 574, 587, 612], "associ": [5, 264, 317, 406, 407], "connect": [5, 163, 293, 405, 406, 408, 409, 410, 412, 413, 414, 415, 569, 607, 611, 612, 618], "adaptor_registri": [6, 554], "cl": [6, 153, 160, 169, 170, 171, 172, 195, 202, 210, 212, 217, 239, 246, 252, 275, 282, 286, 291, 293, 295, 306, 321, 332, 345, 364], "The": [6, 8, 15, 18, 20, 37, 43, 52, 73, 112, 118, 120, 145, 152, 153, 158, 159, 160, 163, 167, 169, 170, 171, 172, 173, 174, 175, 177, 178, 181, 182, 183, 193, 194, 195, 196, 197, 201, 202, 210, 212, 215, 217, 220, 222, 225, 226, 227, 237, 238, 239, 240, 241, 245, 246, 252, 253, 259, 261, 262, 263, 265, 266, 268, 270, 271, 272, 274, 275, 277, 278, 280, 281, 282, 283, 286, 288, 291, 292, 293, 294, 295, 296, 298, 299, 300, 301, 303, 304, 305, 306, 310, 312, 314, 315, 316, 318, 319, 321, 322, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 349, 351, 352, 354, 355, 357, 359, 360, 363, 364, 384, 385, 387, 390, 394, 395, 398, 399, 401, 403, 404, 411, 416, 419, 421, 422, 423, 424, 425, 426, 427, 440, 447, 448, 500, 548, 550, 551, 554, 555, 557, 561, 564, 567, 569, 570, 571, 572, 574, 576, 578, 580, 582, 583, 584, 586, 587, 588, 589, 592, 593, 595, 598, 600, 601, 602, 604, 605, 607, 608, 609, 610, 612, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625], "decor": [6, 20, 37, 66, 67, 69, 145, 153, 169, 170, 172, 210, 217, 252, 268, 275, 282, 286, 291, 293, 295, 306, 309, 321, 332, 345, 348, 364, 514, 550, 551, 554, 622], "us": [6, 17, 20, 37, 43, 47, 48, 69, 102, 104, 115, 147, 152, 158, 160, 163, 167, 168, 169, 170, 172, 175, 177, 178, 181, 182, 191, 192, 193, 194, 195, 196, 197, 200, 209, 210, 211, 212, 217, 225, 226, 235, 236, 237, 238, 239, 240, 241, 244, 251, 252, 256, 257, 259, 261, 262, 264, 268, 269, 270, 275, 282, 283, 286, 288, 291, 293, 294, 295, 296, 297, 300, 303, 306, 309, 310, 314, 315, 317, 321, 332, 337, 340, 342, 345, 348, 349, 352, 355, 356, 357, 358, 364, 411, 416, 421, 422, 426, 428, 440, 447, 449, 474, 478, 519, 531, 548, 549, 550, 551, 554, 569, 570, 571, 572, 574, 575, 576, 578, 580, 582, 584, 585, 586, 587, 588, 589, 590, 591, 592, 594, 595, 598, 600, 602, 604, 605, 607, 609, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625], "regist": [6, 20, 37, 153, 160, 163, 169, 170, 171, 172, 195, 202, 210, 212, 217, 239, 246, 252, 268, 275, 282, 286, 291, 293, 295, 306, 309, 321, 332, 345, 348, 551, 554, 572, 576, 586, 587, 608, 609, 619, 622], "all": [6, 17, 20, 37, 44, 62, 96, 153, 155, 158, 159, 169, 170, 173, 177, 178, 183, 184, 191, 195, 202, 210, 211, 217, 220, 222, 227, 235, 239, 246, 252, 257, 261, 264, 266, 268, 275, 282, 286, 287, 291, 297, 306, 309, 314, 317, 319, 321, 323, 332, 345, 348, 357, 364, 368, 380, 392, 416, 421, 422, 435, 437, 440, 441, 447, 466, 473, 475, 479, 480, 482, 485, 491, 496, 500, 513, 536, 548, 553, 554, 569, 571, 572, 576, 580, 584, 587, 590, 598, 601, 602, 605, 606, 607, 608, 610, 611, 612, 613, 615, 616, 619, 621, 622], "subclass": [6, 20, 37, 153, 169, 170, 172, 188, 192, 195, 202, 210, 217, 232, 236, 239, 246, 252, 268, 275, 282, 286, 291, 293, 295, 306, 309, 321, 332, 345, 348, 554], "paramet": [6, 15, 17, 18, 20, 43, 44, 66, 67, 69, 85, 104, 115, 131, 145, 146, 147, 150, 151, 152, 153, 158, 159, 160, 163, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 178, 181, 182, 192, 193, 195, 202, 206, 210, 212, 217, 222, 225, 226, 236, 237, 239, 246, 249, 252, 253, 255, 256, 257, 258, 259, 261, 262, 264, 265, 266, 268, 270, 271, 272, 274, 275, 276, 277, 278, 280, 281, 282, 283, 286, 288, 291, 292, 293, 294, 295, 296, 300, 306, 310, 312, 314, 315, 317, 318, 319, 321, 322, 326, 330, 332, 333, 337, 345, 349, 351, 352, 354, 357, 361, 363, 364, 381, 406, 407, 417, 428, 499, 519, 521, 531, 550, 569, 571, 572, 574, 576, 583, 586, 587, 601, 607, 608, 612, 615, 618, 619, 621, 622, 624], "framework_specific_info": [6, 8, 15, 18, 44, 46, 554], "base": [6, 8, 17, 18, 20, 37, 44, 45, 46, 85, 104, 115, 119, 121, 131, 141, 147, 152, 153, 159, 163, 178, 183, 186, 191, 193, 195, 202, 210, 220, 227, 230, 235, 237, 239, 246, 252, 268, 274, 276, 282, 283, 286, 288, 293, 303, 306, 310, 321, 323, 330, 331, 332, 342, 345, 349, 379, 519, 551, 553, 554, 572, 575, 576, 580, 587, 595, 596, 598, 607, 611, 612, 615, 618, 620, 622, 625], "framework": [6, 8, 15, 17, 18, 44, 158, 160, 170, 179, 180, 184, 185, 189, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 204, 207, 210, 212, 213, 217, 223, 224, 228, 229, 231, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 246, 248, 250, 252, 259, 268, 269, 296, 304, 310, 321, 322, 323, 324, 326, 343, 349, 357, 366, 392, 416, 418, 440, 467, 474, 478, 483, 486, 501, 507, 519, 553, 554, 569, 576, 577, 581, 582, 583, 584, 586, 587, 588, 612, 613, 615, 620, 621, 622, 623, 624], "layer": [6, 8, 15, 18, 43, 44, 45, 46, 115, 116, 117, 118, 120, 121, 150, 156, 160, 165, 167, 168, 169, 173, 177, 178, 212, 219, 291, 292, 355, 357, 364, 531, 554, 575, 583, 612, 617], "mxnet_util": 7, "util": [7, 16, 21, 104, 109, 110, 138, 139, 146, 147, 148, 151, 162, 164, 167, 177, 178, 219, 254, 260, 262, 292, 302, 313, 315, 341, 379, 416, 440, 447, 457, 491, 496, 500, 555, 576, 587, 590, 615, 622, 623], "ox_util": 7, "oper": [7, 21, 43, 103, 109, 145, 167, 168, 169, 177, 178, 206, 249, 291, 531, 550, 569, 570, 571, 578, 607, 615, 619, 621, 622], "activ": [7, 21, 33, 152, 177, 178, 219, 257, 310, 349, 424, 554, 569, 575, 580, 587, 608, 611, 614, 615, 619, 620, 624], "argmax": [7, 21, 33], "attent": [7, 21, 33, 165, 167, 177, 178, 193, 237, 548, 574, 612], "binary_op": [7, 21, 33], "concat": [7, 21, 33, 144], "conv": [7, 21, 33, 57, 61, 65, 70, 71, 72, 91, 108, 156, 177, 178, 550, 587, 612, 614, 615, 622], "direct_q8": [7, 21, 33], "embed_layernorm": [7, 21, 33], "gather": [7, 17, 21, 33, 177, 178, 291, 507], "gavgpool": [7, 21, 33], "gemm": [7, 21, 33, 177, 178], "lstm": [7, 21, 33], "matmul": [7, 21, 33, 51, 58, 64, 72, 93, 108, 127, 136, 169, 177, 178, 257, 291, 578, 580, 622], "maxpool": [7, 21, 33, 128, 137, 580], "op": [7, 17, 21, 33, 43, 44, 51, 56, 64, 65, 66, 67, 68, 69, 70, 71, 73, 77, 80, 84, 87, 90, 91, 92, 93, 95, 104, 106, 108, 122, 123, 124, 130, 132, 133, 134, 135, 140, 143, 145, 146, 147, 151, 152, 156, 167, 177, 178, 257, 303, 310, 311, 338, 340, 342, 349, 350, 359, 424, 425, 535, 554, 569, 580, 587, 588, 612, 615, 616, 617, 619, 620, 622, 624], "pad": [7, 21, 33, 70, 71, 193, 210, 237, 252, 572, 621], "pool": [7, 21, 33], "resiz": [7, 21, 33, 193, 194, 206, 210, 237, 238, 249, 252, 571, 572, 621], "split": [7, 21, 33, 43, 81, 209, 210, 251, 252, 550, 619, 621], "calibr": [7, 15, 17, 18, 21, 43, 48, 88, 89, 152, 158, 177, 178, 181, 182, 225, 226, 259, 296, 333, 359, 528, 554, 571, 572, 582, 583, 615, 622, 624], "quantiz": [7, 15, 17, 18, 20, 21, 43, 47, 48, 87, 91, 93, 95, 98, 106, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 146, 147, 150, 152, 156, 158, 159, 177, 178, 181, 182, 206, 213, 220, 225, 226, 249, 257, 258, 259, 260, 270, 297, 303, 309, 313, 338, 340, 342, 354, 355, 359, 363, 364, 500, 508, 524, 554, 559, 569, 571, 572, 576, 577, 578, 580, 582, 583, 586, 588, 589, 590, 595, 597, 598, 601, 610, 613, 617, 620, 621, 622, 623, 624], "tf_util": 7, "graph_rewrit": [7, 110], "bf16": [7, 56, 86, 110, 146, 177, 178, 310, 349, 554, 580, 587, 588, 592, 597, 601, 607, 616, 622], "gener": [7, 17, 47, 48, 86, 110, 121, 145, 152, 167, 173, 181, 182, 183, 192, 195, 196, 197, 198, 210, 225, 226, 227, 236, 239, 240, 241, 242, 252, 257, 261, 269, 300, 314, 322, 333, 337, 352, 354, 366, 369, 370, 371, 372, 373, 374, 375, 376, 417, 486, 492, 493, 503, 544, 550, 554, 569, 571, 574, 586, 587, 588, 590, 595, 600, 602, 604, 605, 607, 609, 611, 612, 613, 615, 616, 619, 620, 621, 622], "int8": [7, 22, 23, 43, 86, 110, 122, 123, 124, 130, 132, 133, 134, 135, 140, 145, 157, 158, 177, 178, 206, 249, 255, 256, 257, 310, 312, 349, 351, 363, 550, 554, 569, 570, 572, 575, 580, 587, 592, 595, 597, 598, 601, 607, 614, 615, 616, 617, 618, 619, 620, 621, 624], "onnx": [7, 18, 19, 20, 33, 42, 43, 86, 110, 139, 156, 177, 178, 189, 233, 255, 256, 257, 258, 322, 329, 362, 367, 470, 553, 554, 555, 571, 577, 578, 580, 581, 583, 589, 592, 597, 598, 613, 614, 619, 622], "qdq": [7, 86, 110, 111, 112, 139, 152, 177, 178, 255, 256, 257, 554, 578, 583, 597, 598, 615, 619], "graph_bas": [7, 86, 110], "quantize_graph": [7, 110], "qat": [7, 110, 111, 151, 178, 257, 270, 330, 575, 576, 578, 583, 587, 615], "quantize_graph_bas": [7, 110, 111], "quantize_graph_bn": [7, 110, 111], "quantize_graph_concatv2": [7, 110, 111], "quantize_graph_conv": [7, 110, 111], "quantize_graph_for_intel_cpu": [7, 110, 111], "quantize_graph_matmul": [7, 110, 111], "quantize_graph_pool": [7, 110, 111], "transform_graph": [7, 110], "bias_correct": [7, 110, 142], "graph_transform_bas": [7, 110, 142], "insert_log": [7, 110, 142], "rerange_quantized_concat": [7, 110, 142], "graph_convert": [7, 110], "graph_converter_without_calib": [7, 110], "graph_util": [7, 110], "quantize_graph_common": [7, 110], "tf2onnx_convert": [7, 110], "torch_util": [7, 214, 260, 313, 619], "bf16_convert": [7, 50, 86, 110, 148], "hawq_metr": [7, 148], "model_wrapp": [7, 19, 148], "symbolic_trac": [7, 148], "tensorflow": [7, 50, 52, 74, 75, 76, 86, 94, 100, 101, 102, 103, 104, 105, 109, 110, 111, 113, 116, 129, 139, 142, 145, 177, 178, 192, 193, 194, 195, 198, 200, 202, 210, 212, 217, 236, 237, 238, 239, 242, 244, 246, 252, 256, 257, 258, 259, 262, 264, 268, 269, 270, 296, 304, 315, 317, 321, 322, 330, 333, 343, 364, 426, 427, 439, 440, 447, 496, 497, 498, 500, 551, 553, 554, 569, 571, 574, 575, 577, 578, 580, 581, 583, 584, 587, 589, 597, 598, 612, 613, 614, 618, 622, 624], "kerasadaptor": 8, "kerasqueri": 8, "local_config_fil": [8, 18, 44, 46], "none": [8, 17, 18, 42, 43, 44, 46, 47, 48, 62, 88, 101, 103, 104, 109, 115, 139, 145, 147, 150, 152, 158, 159, 160, 165, 167, 173, 174, 175, 177, 178, 181, 182, 183, 185, 188, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 206, 210, 211, 212, 213, 220, 222, 225, 226, 227, 229, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 249, 252, 253, 256, 257, 259, 264, 268, 269, 270, 271, 274, 283, 288, 292, 296, 300, 303, 305, 306, 310, 317, 321, 322, 332, 333, 334, 337, 338, 342, 344, 345, 349, 352, 354, 355, 357, 363, 364, 366, 367, 378, 379, 383, 386, 388, 389, 391, 393, 396, 397, 402, 405, 406, 407, 418, 455, 467, 474, 478, 483, 486, 487, 489, 499, 504, 505, 507, 510, 512, 519, 525, 527, 528, 529, 536, 554, 572, 586, 615, 620, 621, 622], "defin": [8, 18, 44, 45, 85, 147, 149, 167, 169, 170, 171, 172, 177, 178, 181, 182, 225, 226, 271, 272, 274, 275, 276, 283, 288, 291, 292, 293, 295, 322, 333, 354, 363, 442, 443, 444, 531, 548, 551, 554, 569, 571, 572, 574, 575, 580, 583, 586, 587, 608, 610, 612, 615, 618, 619, 620, 622, 624], "queri": [8, 17, 18, 44, 46, 145, 167, 177, 178, 405, 406, 408, 409, 410, 412, 413, 414, 415, 615], "interfac": [8, 18, 44, 45, 85, 112, 174, 259, 283, 288, 296, 297, 357, 365, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 417, 481, 487, 494, 506, 583, 587, 598, 611, 615, 617], "each": [8, 18, 43, 44, 45, 147, 177, 178, 191, 195, 198, 206, 210, 235, 239, 242, 249, 252, 262, 264, 265, 266, 303, 315, 317, 318, 319, 342, 549, 554, 569, 572, 574, 575, 580, 587, 588, 592, 598, 601, 607, 609, 612, 618, 619, 620, 621, 622, 623], "adapt": [8, 18, 44, 45, 548, 553, 572, 598, 613], "should": [8, 18, 44, 45, 53, 114, 115, 165, 167, 177, 178, 181, 182, 191, 193, 195, 210, 215, 225, 226, 235, 237, 239, 252, 257, 262, 315, 321, 322, 333, 352, 354, 364, 428, 550, 551, 554, 569, 572, 574, 576, 586, 587, 588, 593, 602, 605, 607, 609, 612, 615, 621, 622, 624], "implement": [8, 18, 44, 45, 109, 140, 144, 181, 182, 188, 191, 192, 193, 195, 225, 226, 232, 235, 236, 237, 239, 261, 314, 322, 332, 333, 340, 354, 571, 572, 587, 598, 608, 612, 615, 617, 620, 622, 624], "inherit": [8, 18, 44, 45, 159, 160, 170, 172, 177, 190, 210, 212, 220, 234, 252, 293, 295, 551, 554, 572], "specif": [8, 15, 18, 44, 45, 103, 115, 173, 177, 178, 193, 194, 195, 196, 200, 202, 217, 237, 238, 239, 240, 244, 246, 270, 277, 278, 280, 281, 282, 406, 407, 548, 551, 554, 569, 574, 580, 582, 586, 587, 588, 589, 590, 594, 595, 597, 601, 607, 609, 612, 614, 622, 624], "backend": [8, 18, 19, 42, 44, 45, 156, 177, 178, 179, 180, 184, 185, 189, 193, 194, 196, 197, 198, 199, 200, 204, 207, 210, 216, 217, 223, 224, 228, 229, 231, 233, 237, 238, 240, 241, 242, 243, 244, 248, 250, 252, 269, 304, 322, 323, 324, 326, 343, 550, 576, 582, 583, 587, 588, 596, 614, 621, 624], "own": [8, 18, 44, 45, 73, 191, 210, 235, 252, 332, 551, 569, 571, 572, 583, 586, 609, 618, 623], "mxnetadaptor": 15, "do": [15, 18, 159, 177, 178, 192, 193, 236, 237, 253, 257, 261, 264, 294, 314, 317, 363, 548, 569, 572, 576, 580, 583, 584, 586, 587, 602, 605, 612, 616, 617, 619, 622], "inspect": [15, 18, 569, 617, 620], "tensor": [15, 17, 18, 19, 20, 43, 69, 104, 145, 147, 152, 163, 169, 170, 171, 178, 210, 252, 255, 257, 291, 293, 303, 330, 342, 364, 550, 572, 612, 615, 617, 620, 621, 622], "dict": [15, 17, 18, 43, 44, 115, 145, 146, 147, 152, 153, 158, 163, 167, 168, 169, 170, 171, 172, 173, 175, 177, 178, 181, 182, 192, 211, 217, 225, 226, 236, 255, 257, 263, 264, 265, 266, 268, 271, 274, 275, 276, 283, 286, 288, 291, 292, 293, 294, 295, 300, 303, 309, 312, 316, 317, 318, 319, 321, 322, 330, 333, 348, 351, 352, 354, 355, 357, 363, 364, 365, 367, 370, 378, 379, 381, 386, 388, 389, 391, 393, 396, 397, 402, 406, 407, 418, 424, 428, 436, 445, 463, 464, 465, 467, 470, 472, 477, 481, 484, 487, 488, 489, 492, 494, 497, 504, 505, 507, 509, 515, 519, 520, 521, 522, 523, 525, 526, 527, 528, 529, 531, 535, 536, 550, 586, 612, 614, 615, 619, 620, 622], "mxnet": [16, 17, 20, 178, 188, 192, 195, 198, 202, 210, 232, 236, 239, 242, 246, 252, 259, 268, 296, 321, 322, 327, 333, 553, 554, 571, 577, 580, 583, 584, 587, 588, 589, 614, 622, 624], "init": [16, 21, 155, 161, 164, 166, 572, 586], "optyp": [17, 177, 178, 255], "enum": 17, "type": [17, 20, 43, 44, 73, 95, 104, 115, 121, 131, 145, 146, 147, 152, 153, 160, 167, 168, 169, 170, 171, 172, 173, 175, 177, 178, 191, 193, 195, 202, 210, 212, 217, 235, 237, 239, 246, 252, 257, 258, 261, 262, 264, 268, 275, 282, 286, 291, 293, 295, 300, 306, 310, 312, 314, 315, 317, 321, 330, 332, 337, 338, 345, 349, 351, 352, 363, 377, 382, 406, 407, 449, 507, 515, 549, 554, 569, 572, 576, 580, 583, 587, 588, 608, 615, 618, 621, 622, 624], "isiter": 17, "obj": [17, 104, 173, 192, 222, 236, 253, 259, 270, 271, 272, 274, 283, 288, 292, 296, 322, 332, 333, 354, 357, 364], "bool": [17, 145, 151, 152, 169, 177, 178, 193, 195, 206, 210, 237, 239, 249, 252, 257, 262, 268, 291, 309, 315, 321, 348, 352, 363, 364, 428, 436, 455, 467, 470, 504, 507, 519, 538, 572, 586, 614, 621], "check": [17, 66, 67, 104, 145, 152, 173, 195, 239, 255, 292, 363, 364, 467, 470, 507, 519, 549, 553, 569, 576, 584, 591, 593, 595, 602, 605, 606, 617], "whether": [17, 104, 115, 145, 169, 177, 178, 191, 193, 206, 210, 235, 237, 249, 252, 262, 264, 268, 291, 315, 317, 321, 357, 363, 364, 470, 554, 572, 586, 615, 619, 621], "object": [17, 43, 44, 73, 85, 104, 115, 131, 146, 147, 151, 152, 158, 159, 163, 168, 169, 170, 171, 172, 173, 174, 175, 177, 178, 181, 182, 183, 193, 194, 195, 210, 211, 213, 222, 225, 226, 227, 237, 238, 239, 252, 253, 257, 259, 264, 272, 274, 277, 278, 280, 281, 282, 283, 288, 291, 292, 293, 294, 295, 296, 300, 313, 317, 322, 330, 331, 333, 337, 354, 357, 363, 364, 444, 519, 531, 532, 536, 550, 551, 559, 569, 570, 571, 572, 579, 586, 587, 589, 610, 612, 614, 615, 621, 622, 623, 625], "iter": [17, 19, 104, 145, 158, 168, 170, 172, 177, 178, 181, 182, 186, 191, 195, 196, 213, 225, 226, 230, 235, 239, 240, 293, 295, 322, 333, 354, 357, 550, 551, 554, 570, 572, 587, 612, 614, 615, 620, 622, 624], "return": [17, 20, 43, 44, 52, 66, 67, 69, 73, 104, 115, 145, 146, 147, 151, 152, 153, 158, 160, 167, 169, 170, 171, 172, 173, 175, 181, 182, 195, 202, 206, 210, 211, 212, 217, 222, 225, 226, 239, 246, 249, 252, 257, 258, 261, 262, 264, 265, 266, 268, 274, 275, 282, 286, 291, 292, 293, 295, 300, 306, 310, 312, 314, 315, 317, 318, 319, 321, 322, 326, 330, 332, 333, 337, 345, 349, 351, 352, 354, 357, 363, 364, 428, 507, 519, 550, 551, 572, 576, 586, 589, 609, 612, 615, 619, 620, 622], "true": [17, 84, 112, 143, 145, 158, 177, 178, 191, 193, 195, 196, 209, 210, 211, 235, 237, 239, 240, 251, 252, 257, 262, 268, 286, 309, 315, 321, 332, 348, 352, 357, 363, 364, 504, 507, 519, 572, 576, 580, 586, 587, 590, 593, 594, 614, 615, 619, 620, 621, 622, 624], "els": [17, 145, 178, 191, 235, 332, 519, 595, 620], "fals": [17, 18, 19, 42, 46, 47, 48, 70, 71, 88, 91, 98, 101, 102, 104, 112, 130, 135, 140, 143, 144, 145, 151, 152, 158, 160, 177, 178, 183, 185, 188, 190, 192, 193, 195, 206, 210, 211, 212, 213, 219, 227, 229, 232, 234, 236, 237, 239, 249, 252, 264, 268, 317, 321, 332, 352, 357, 364, 436, 455, 507, 519, 538, 554, 572, 580, 586, 587, 600, 604, 614, 615, 619, 620, 621, 624], "boolean": [17, 519], "ensure_list": 17, "x": [17, 53, 73, 168, 177, 178, 192, 210, 236, 252, 300, 337, 352, 576, 578, 588, 589, 615, 619, 620, 621, 623], "ensur": [17, 210, 252, 300, 337, 569, 576, 578, 615, 621], "list": [17, 43, 52, 104, 145, 146, 147, 152, 158, 167, 168, 169, 177, 178, 181, 182, 186, 193, 206, 210, 211, 225, 226, 230, 237, 249, 252, 256, 257, 261, 262, 264, 265, 266, 268, 275, 283, 288, 291, 294, 309, 314, 315, 317, 318, 319, 321, 322, 330, 333, 348, 352, 354, 355, 364, 377, 379, 381, 386, 388, 389, 391, 393, 396, 397, 402, 406, 407, 418, 428, 431, 436, 462, 467, 470, 474, 478, 504, 511, 512, 513, 519, 531, 538, 550, 553, 554, 572, 580, 584, 587, 590, 595, 597, 600, 601, 604, 609, 612, 614, 615, 616, 619, 620, 622], "input": [17, 19, 43, 44, 52, 59, 63, 66, 67, 69, 70, 71, 73, 81, 82, 84, 85, 104, 108, 109, 115, 121, 145, 146, 150, 151, 152, 156, 167, 168, 177, 178, 181, 182, 193, 194, 195, 197, 206, 209, 210, 215, 225, 226, 237, 238, 239, 241, 249, 251, 252, 255, 256, 257, 321, 322, 326, 330, 333, 354, 363, 364, 366, 462, 474, 478, 483, 486, 492, 551, 554, 569, 570, 571, 572, 574, 575, 576, 578, 580, 582, 586, 587, 589, 590, 595, 612, 614, 615, 619, 620, 621, 624], "check_mx_vers": 17, "version": [17, 52, 103, 152, 167, 178, 256, 257, 313, 467, 507, 519, 548, 550, 554, 569, 580, 584, 585, 587, 600, 602, 604, 605, 611, 613, 619, 622, 623], "str": [17, 146, 147, 150, 151, 152, 153, 160, 167, 177, 178, 193, 194, 195, 202, 206, 210, 212, 216, 217, 237, 238, 239, 246, 249, 252, 256, 257, 258, 261, 262, 264, 266, 268, 275, 286, 309, 312, 314, 315, 317, 319, 321, 348, 351, 352, 357, 364, 366, 367, 370, 377, 378, 379, 381, 383, 406, 407, 418, 424, 425, 428, 430, 431, 436, 445, 446, 448, 449, 451, 453, 455, 458, 460, 463, 464, 465, 467, 470, 474, 478, 483, 486, 488, 489, 492, 493, 504, 507, 512, 515, 519, 520, 521, 522, 523, 525, 526, 527, 528, 529, 531, 535, 536, 572, 586, 614, 620, 621], "mx": 17, "__version__": 17, "combine_cap": 17, "current": [17, 43, 69, 103, 150, 163, 167, 169, 170, 177, 178, 270, 277, 278, 280, 281, 282, 291, 293, 300, 304, 337, 343, 550, 551, 554, 569, 576, 580, 584, 586, 587, 590, 594, 607, 609, 612, 615, 619, 622], "new": [17, 20, 145, 150, 158, 183, 195, 210, 211, 227, 239, 252, 292, 332, 531, 549, 576, 587, 588, 601, 607, 608, 612, 613, 615, 617, 618, 621, 623, 624], "combin": [17, 152, 177, 178, 181, 182, 206, 220, 225, 226, 249, 322, 333, 354, 364, 550, 554, 583, 587, 610, 613, 615, 616, 621, 622], "capabl": [17, 46, 310, 349, 570, 580, 587, 588, 598, 612, 614, 615, 622, 624], "contain": [17, 66, 67, 69, 73, 138, 145, 147, 152, 158, 159, 167, 169, 170, 172, 173, 177, 178, 181, 182, 193, 194, 195, 225, 226, 237, 238, 239, 253, 257, 259, 264, 265, 266, 270, 283, 286, 288, 291, 292, 293, 294, 295, 296, 317, 318, 319, 322, 333, 354, 357, 363, 368, 372, 380, 386, 388, 389, 391, 392, 393, 396, 397, 400, 402, 411, 416, 421, 422, 426, 429, 435, 440, 441, 447, 466, 473, 475, 476, 479, 480, 482, 485, 491, 496, 500, 572, 574, 583, 586, 608, 612, 620, 622, 623], "make_nc_model": 17, "target": [17, 43, 101, 167, 172, 173, 178, 292, 295, 300, 337, 432, 572, 576, 587, 612, 620, 621, 622, 624], "sym_model": 17, "ctx": 17, "input_desc": 17, "convert": [17, 43, 47, 48, 49, 51, 52, 53, 54, 55, 65, 73, 85, 98, 99, 101, 102, 103, 104, 130, 135, 139, 146, 152, 167, 177, 178, 193, 206, 209, 210, 237, 249, 251, 252, 256, 264, 270, 292, 310, 317, 349, 352, 550, 587, 588, 592, 615, 616, 619, 621, 622], "symbol": [17, 146, 151, 152, 261, 314, 322, 333, 550, 589], "model": [17, 19, 20, 33, 42, 43, 44, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 115, 117, 139, 145, 146, 147, 150, 151, 152, 156, 158, 159, 165, 167, 170, 172, 173, 177, 178, 181, 182, 189, 192, 193, 195, 210, 211, 214, 215, 222, 225, 226, 233, 236, 237, 239, 252, 253, 255, 256, 257, 258, 259, 260, 268, 269, 270, 271, 274, 277, 278, 280, 281, 282, 283, 288, 292, 293, 294, 295, 296, 297, 300, 303, 305, 306, 313, 321, 322, 332, 333, 334, 337, 338, 342, 344, 345, 352, 354, 360, 363, 364, 366, 367, 368, 392, 408, 410, 412, 416, 417, 428, 433, 434, 435, 438, 439, 440, 464, 465, 467, 470, 473, 474, 475, 476, 478, 479, 480, 485, 486, 491, 496, 500, 501, 508, 519, 524, 534, 535, 539, 546, 550, 551, 553, 554, 559, 570, 571, 572, 574, 575, 576, 577, 582, 583, 585, 586, 588, 590, 595, 597, 598, 601, 607, 609, 610, 611, 613, 615, 617, 618, 620, 621, 622, 623, 624], "neural": [17, 147, 158, 159, 169, 177, 178, 205, 206, 207, 210, 211, 214, 217, 220, 249, 250, 252, 254, 260, 267, 268, 270, 283, 288, 291, 294, 296, 297, 302, 308, 313, 320, 321, 322, 326, 333, 340, 341, 347, 354, 499, 506, 519, 546, 549, 554, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 585, 586, 588, 589, 591, 592, 595, 597, 598, 600, 602, 604, 605, 606, 609, 610, 613, 615, 617, 619, 620, 621, 622, 624, 625], "compressor": [17, 158, 159, 169, 177, 178, 205, 206, 207, 210, 211, 214, 217, 220, 249, 250, 252, 254, 260, 267, 268, 270, 291, 294, 296, 297, 302, 308, 313, 320, 321, 322, 326, 333, 341, 347, 354, 499, 506, 519, 546, 549, 551, 554, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 585, 586, 588, 589, 590, 591, 595, 597, 598, 600, 602, 604, 605, 606, 609, 610, 612, 613, 615, 617, 619, 620, 621, 622, 623, 624, 625], "tupl": [17, 104, 152, 178, 181, 182, 206, 210, 225, 226, 249, 252, 257, 309, 322, 333, 348, 354, 519, 572, 586, 587, 615, 621], "symnet": 17, "arg": [17, 52, 104, 193, 194, 195, 237, 238, 239, 291, 300, 337, 352, 360, 361, 369, 371, 373, 374, 375, 376, 386, 388, 389, 391, 393, 396, 397, 402, 571, 572, 576, 587, 596, 615, 619, 620, 621], "aux": 17, "data": [17, 43, 54, 104, 145, 147, 150, 152, 156, 167, 177, 178, 181, 182, 211, 213, 225, 226, 257, 258, 260, 300, 310, 312, 313, 322, 333, 337, 349, 351, 354, 357, 364, 367, 370, 378, 379, 381, 405, 417, 428, 444, 445, 455, 463, 464, 465, 467, 470, 487, 489, 504, 517, 519, 520, 521, 522, 523, 525, 526, 527, 528, 529, 531, 535, 543, 553, 554, 569, 571, 572, 576, 580, 581, 584, 586, 587, 588, 615, 616, 617, 618, 619, 620, 621, 622], "descript": [17, 131, 257, 258, 352, 549, 550, 619], "ncmodel": 17, "fuse": [17, 57, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 90, 91, 92, 93, 95, 130, 135, 151, 152, 156, 550, 619, 620], "suppli": 17, "get_framework_nam": 17, "get": [17, 43, 44, 66, 67, 69, 103, 104, 145, 150, 152, 158, 163, 165, 167, 169, 170, 171, 172, 175, 178, 186, 210, 211, 217, 219, 230, 252, 257, 258, 291, 293, 295, 303, 310, 312, 330, 342, 349, 351, 357, 364, 378, 379, 381, 418, 428, 445, 449, 462, 467, 470, 488, 499, 507, 515, 519, 535, 536, 569, 579, 583, 584, 587, 593, 619, 622, 623, 626], "name": [17, 43, 44, 52, 66, 67, 69, 103, 104, 109, 115, 145, 146, 147, 150, 151, 152, 153, 158, 163, 167, 169, 170, 171, 172, 175, 177, 178, 193, 194, 195, 198, 202, 208, 210, 211, 215, 218, 219, 237, 238, 239, 242, 246, 252, 255, 256, 257, 263, 268, 286, 291, 293, 295, 310, 312, 316, 321, 326, 330, 332, 349, 351, 355, 357, 364, 428, 430, 467, 468, 469, 470, 507, 519, 521, 550, 569, 572, 576, 580, 585, 586, 587, 589, 593, 600, 604, 608, 611, 612, 615, 617, 618, 620, 622, 624, 625], "prepare_model_data": 17, "nc_model": [17, 283, 288, 354], "data_x": 17, "prepar": [17, 152, 499, 550, 553, 572, 576, 581, 615], "loader": [17, 181, 182, 225, 226, 322, 333, 354, 360, 615], "dataloaderwrap": 17, "prepare_model": 17, "create_data_exampl": 17, "exampl": [17, 147, 152, 158, 167, 168, 177, 178, 193, 194, 195, 206, 210, 237, 238, 239, 249, 252, 264, 265, 266, 268, 294, 317, 318, 319, 321, 322, 332, 333, 352, 354, 392, 410, 416, 440, 464, 465, 466, 467, 519, 548, 549, 553, 559, 569, 582, 583, 590, 593, 594, 595, 598, 616, 617, 621, 622, 623, 626], "prepare_dataload": 17, "io": 17, "ndarray_to_devic": 17, "ndarrai": [17, 66, 67, 69, 210, 252, 355, 579, 621], "devic": [17, 78, 88, 89, 90, 91, 92, 93, 96, 106, 130, 135, 144, 167, 168, 177, 178, 574, 587, 588, 590, 593, 598, 607, 614], "is_model_quant": 17, "query_quantizable_nod": 17, "node": [17, 43, 49, 52, 53, 54, 55, 59, 61, 63, 66, 67, 69, 73, 76, 79, 81, 82, 83, 97, 101, 102, 104, 109, 131, 145, 255, 257, 330, 430, 432, 435, 440, 498, 500, 554, 569, 576, 620, 622], "map": [17, 43, 104, 178, 210, 252, 255, 257, 259, 263, 265, 266, 268, 283, 288, 293, 296, 316, 318, 319, 321, 469, 572, 576, 586, 587, 600, 604, 612, 615], "quantize_sym_model": 17, "qconfig": [17, 620], "accord": [17, 121, 152, 158, 177, 178, 193, 194, 195, 210, 237, 238, 239, 252, 303, 340, 342, 357, 551, 554, 572, 576, 612, 616, 619, 621, 622], "run_forward": 17, "b_filter": 17, "collector": [17, 147, 355], "pre_batch": 17, "post_batch": 17, "forward": [17, 553, 587, 612, 614, 615, 619, 620], "propag": [17, 99], "filter": [17, 193, 194, 195, 196, 197, 198, 200, 204, 237, 238, 239, 240, 241, 242, 244, 248, 260, 313, 364, 428, 521, 571, 572, 583, 612, 620], "which": [17, 54, 82, 109, 147, 150, 163, 167, 168, 169, 170, 172, 173, 177, 178, 193, 194, 195, 206, 211, 237, 238, 239, 249, 261, 266, 275, 277, 278, 280, 281, 282, 286, 291, 292, 293, 295, 300, 314, 319, 321, 326, 332, 333, 337, 364, 517, 548, 550, 551, 554, 569, 571, 572, 574, 576, 579, 580, 583, 586, 587, 588, 589, 591, 595, 598, 601, 607, 608, 610, 612, 614, 615, 616, 617, 619, 620, 621, 622, 623, 624], "batch": [17, 152, 183, 185, 186, 191, 192, 213, 227, 229, 230, 235, 236, 354, 569, 571, 574, 575, 587, 610, 612, 621, 622, 625], "infer": [17, 104, 167, 259, 296, 330, 332, 333, 354, 553, 554, 574, 575, 587, 588, 607, 609, 612, 613, 615, 619, 620, 622], "collect": [17, 20, 43, 208, 210, 213, 215, 216, 218, 252, 266, 268, 319, 321, 355, 364, 470, 507, 519, 578, 615, 620, 622], "inform": [17, 43, 147, 163, 167, 169, 170, 171, 172, 173, 178, 181, 182, 213, 215, 216, 225, 226, 291, 293, 294, 295, 297, 321, 381, 506, 507, 513, 548, 549, 552, 553, 554, 555, 557, 561, 564, 567, 574, 578, 580, 587, 589, 602, 605, 608, 612, 616, 617, 620, 624, 625, 626], "dure": [17, 169, 172, 177, 178, 291, 295, 332, 364, 587, 588, 589, 609, 610, 612, 615, 619, 620, 624], "prior": [17, 87, 622], "after": [17, 43, 77, 152, 165, 169, 170, 177, 178, 193, 206, 210, 213, 237, 249, 252, 257, 293, 338, 352, 505, 551, 569, 571, 572, 574, 575, 578, 583, 586, 587, 600, 601, 604, 608, 609, 610, 612, 615, 616, 618, 619, 620, 621, 622], "count": [17, 551, 572], "int": [17, 20, 43, 104, 145, 152, 165, 177, 178, 192, 193, 194, 206, 210, 236, 237, 238, 249, 252, 256, 257, 262, 264, 268, 275, 315, 317, 321, 352, 364, 383, 418, 462, 505, 507, 510, 519, 527, 572, 586, 587, 614, 621], "make_symbol_block": 17, "gluon": [17, 322, 333, 589], "symbolblock": 17, "make_modul": 17, "parse_tune_config": 17, "tune_cfg": [17, 145, 146, 152, 554, 622], "quantizable_nod": 17, "strategi": [17, 152, 170, 177, 178, 179, 195, 223, 239, 260, 313, 501, 519, 529, 553, 554, 559, 576, 583, 587, 595, 607, 613, 614, 615, 616, 617, 623, 624], "config": [17, 114, 115, 117, 121, 152, 158, 163, 165, 169, 170, 171, 172, 173, 177, 181, 182, 193, 222, 225, 226, 237, 277, 278, 280, 281, 282, 283, 288, 291, 292, 293, 294, 295, 310, 311, 313, 322, 349, 350, 352, 354, 357, 363, 364, 366, 379, 418, 463, 474, 478, 483, 486, 500, 508, 519, 522, 524, 530, 551, 553, 559, 569, 570, 574, 575, 576, 578, 581, 583, 587, 588, 589, 610, 612, 614, 615, 616, 618, 620, 622], "tune": [17, 44, 158, 177, 178, 181, 182, 193, 195, 225, 226, 237, 239, 259, 296, 298, 299, 300, 301, 303, 304, 305, 306, 309, 310, 311, 312, 322, 332, 333, 334, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 348, 349, 350, 351, 354, 364, 403, 404, 417, 440, 470, 475, 488, 500, 508, 524, 554, 569, 571, 572, 576, 583, 585, 587, 588, 607, 609, 612, 613, 616, 617, 618, 620, 624], "from": [17, 43, 44, 60, 66, 67, 69, 104, 145, 150, 152, 158, 159, 160, 163, 169, 170, 171, 172, 173, 177, 178, 181, 182, 183, 186, 190, 193, 194, 195, 196, 197, 198, 200, 205, 206, 212, 213, 216, 225, 226, 227, 230, 234, 237, 238, 239, 240, 241, 242, 244, 249, 253, 255, 256, 257, 258, 261, 264, 265, 266, 270, 275, 291, 292, 293, 295, 310, 312, 314, 317, 318, 319, 322, 330, 332, 333, 349, 351, 352, 357, 363, 364, 417, 428, 451, 463, 464, 465, 467, 492, 512, 517, 519, 536, 548, 550, 551, 554, 570, 571, 572, 574, 575, 576, 577, 578, 579, 581, 583, 586, 588, 589, 590, 594, 595, 596, 598, 608, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623], "distribute_calib_tensor": 17, "calib_tensor": 17, "calib_cfg": 17, "tensor_to_nod": 17, "distribut": [17, 20, 140, 157, 177, 178, 183, 185, 186, 188, 190, 191, 192, 213, 227, 229, 230, 232, 234, 235, 236, 359, 507, 553, 574, 584, 602, 605, 613, 615, 617, 619, 623, 625], "depend": [17, 181, 182, 211, 225, 226, 322, 333, 354, 549, 569, 579, 580, 614, 615, 622], "algorithm": [17, 152, 174, 261, 268, 276, 313, 314, 321, 357, 359, 551, 554, 574, 575, 580, 583, 596, 601, 612, 615, 620, 624], "set": [17, 43, 56, 95, 104, 114, 145, 150, 152, 158, 173, 175, 177, 178, 181, 182, 183, 193, 195, 198, 210, 211, 216, 217, 225, 226, 227, 237, 239, 242, 252, 257, 264, 270, 283, 288, 292, 297, 317, 322, 330, 333, 352, 354, 364, 366, 406, 407, 428, 474, 478, 486, 531, 536, 548, 551, 569, 570, 572, 574, 576, 580, 582, 583, 584, 586, 587, 588, 590, 592, 594, 608, 612, 614, 615, 618, 619, 622, 624], "kl": [17, 20, 177, 178, 355, 359, 580, 587, 622, 624], "minmax": [17, 20, 580, 615, 624], "calib_model": 17, "qsym_model": 17, "calib_data": 17, "calibdata": 17, "threshold": [17, 154, 355, 359, 586], "amp_convert": 17, "amp_cfg": 17, "support": [17, 43, 96, 103, 150, 156, 160, 169, 170, 177, 178, 181, 182, 192, 193, 195, 202, 206, 210, 212, 213, 214, 217, 222, 225, 226, 236, 237, 239, 246, 249, 252, 260, 268, 270, 275, 291, 293, 297, 304, 310, 313, 321, 322, 326, 332, 333, 343, 349, 352, 354, 357, 359, 467, 501, 519, 546, 553, 569, 587, 590, 595, 598, 601, 607, 613, 616, 618, 622, 623], "amp": [17, 590, 597, 611], "wrap": [17, 104, 115, 160, 212, 264, 317, 377, 550, 576, 602, 605], "dataiterload": 17, "data_it": [17, 167], "collectorbas": 17, "calibcollector": 17, "include_tensors_kl": 17, "include_tensors_minmax": 17, "num_bin": [17, 20, 355], "8001": [17, 355], "tensorcollector": 17, "include_nod": 17, "qtensor_to_tensor": 17, "build": [17, 114, 153, 154, 156, 157, 168, 257, 258, 271, 274, 325, 327, 329, 330, 331, 428, 488, 519, 536, 554, 569, 584, 589, 600, 602, 604, 605, 608, 613, 618, 622], "up": [17, 99, 210, 252, 292, 405, 569, 576, 577, 580, 583, 598, 602, 605, 607, 613, 614, 615, 618, 621, 622, 624], "namecollector": 17, "cache_kl": 17, "cache_minmax": 17, "tensors_kl": 17, "tensors_minmax": 17, "onnxruntimeadaptor": 18, "rt": 18, "onnxrt_qlinearopsadaptor": [18, 554], "onnxrt_integeropsadaptor": 18, "onnxrt_qdqadaptor": 18, "onnxrtqueri": 18, "dynam": [18, 178, 183, 227, 257, 310, 349, 372, 554, 571, 574, 583, 587, 590, 595, 596, 597, 598, 601, 607, 613, 622, 625], "static": [18, 42, 46, 150, 156, 167, 178, 258, 310, 333, 349, 536, 554, 583, 587, 590, 595, 596, 597, 598, 601, 607, 619, 622, 625], "format": [18, 22, 43, 52, 145, 177, 178, 193, 194, 195, 237, 238, 239, 257, 264, 270, 310, 317, 349, 352, 470, 572, 576, 578, 586, 587, 588, 589, 590, 615], "onnxrtaug": 19, "dump_op_typ": 19, "black_nod": 19, "white_nod": 19, "cpuexecutionprovid": [19, 42, 615], "reduce_rang": [19, 42, 177, 178, 614], "augment": 19, "dump": [19, 257, 364, 615, 620], "calib_registri": 20, "calib_method": 20, "calibratorbas": 20, "minmaxcalibr": 20, "percentilecalibr": 20, "2048": [20, 364], "percentil": 20, "99": [20, 619, 625], "999": [20, 624, 625], "option": [20, 104, 169, 177, 178, 181, 182, 193, 210, 225, 226, 237, 252, 256, 257, 264, 270, 291, 297, 310, 313, 317, 321, 322, 333, 349, 352, 354, 358, 364, 572, 580, 584, 587, 601, 612, 615, 618, 621, 622, 624], "number": [20, 66, 67, 104, 152, 165, 168, 169, 177, 178, 191, 194, 206, 210, 235, 238, 249, 252, 265, 266, 268, 291, 300, 318, 319, 321, 337, 352, 357, 364, 451, 507, 569, 570, 572, 576, 586, 612, 615, 618, 621, 622], "bin": [20, 364, 579], "histogram": [20, 355, 364, 569, 620], "valu": [20, 43, 54, 66, 67, 69, 88, 89, 104, 140, 145, 152, 157, 158, 163, 167, 168, 173, 175, 177, 178, 181, 182, 193, 196, 197, 206, 210, 211, 225, 226, 237, 240, 241, 249, 252, 264, 268, 292, 300, 303, 310, 317, 321, 322, 333, 337, 342, 349, 352, 354, 355, 357, 364, 377, 379, 381, 386, 388, 389, 391, 393, 396, 397, 402, 406, 407, 428, 430, 501, 505, 519, 527, 530, 550, 569, 572, 580, 586, 587, 593, 609, 612, 614, 615, 619, 621, 622, 624], "default": [20, 96, 145, 173, 175, 177, 178, 181, 182, 185, 193, 194, 195, 206, 210, 225, 226, 229, 237, 238, 239, 249, 252, 256, 257, 261, 270, 292, 312, 314, 321, 330, 351, 357, 364, 386, 388, 389, 391, 393, 396, 397, 402, 428, 445, 519, 550, 554, 569, 572, 578, 580, 583, 584, 586, 587, 588, 595, 598, 600, 604, 609, 612, 614, 615, 616, 618, 619, 621, 622, 624], "float": [20, 43, 147, 169, 170, 171, 173, 177, 178, 193, 206, 237, 249, 262, 264, 265, 266, 293, 315, 317, 318, 319, 352, 367, 425, 480, 505, 519, 527, 530, 572, 586, 614, 615, 619, 621], "A": [20, 43, 53, 73, 74, 102, 115, 145, 152, 159, 163, 167, 169, 170, 171, 172, 173, 177, 178, 195, 210, 213, 215, 216, 222, 239, 252, 253, 261, 264, 265, 266, 268, 271, 274, 275, 276, 283, 286, 288, 291, 292, 293, 294, 295, 300, 314, 317, 318, 319, 321, 322, 326, 330, 337, 354, 364, 572, 577, 580, 586, 587, 589, 600, 601, 604, 607, 612, 613, 615, 619, 621, 622, 624], "between": [20, 140, 157, 170, 177, 178, 210, 252, 265, 268, 318, 321, 531, 535, 550, 554, 574, 578, 583, 586, 587, 598, 615, 617, 618, 619, 621, 622], "0": [20, 43, 52, 89, 104, 145, 154, 156, 160, 165, 177, 178, 183, 185, 188, 190, 192, 193, 196, 197, 200, 206, 210, 212, 213, 227, 229, 232, 234, 236, 237, 240, 241, 244, 249, 252, 257, 259, 268, 275, 283, 288, 296, 321, 332, 338, 352, 550, 569, 572, 574, 576, 578, 579, 580, 581, 584, 585, 586, 587, 588, 593, 595, 600, 604, 611, 612, 614, 615, 617, 618, 619, 620, 621, 622, 624], "100": [20, 158, 177, 178, 195, 239, 352, 570, 572, 576, 582, 587, 614, 615, 619, 621, 622, 624, 625], "klcalibr": 20, "128": [20, 193, 196, 197, 210, 237, 240, 241, 252, 572, 587, 615, 621], "num_quantized_bin": 20, "histogramcollector": 20, "collctor": 20, "smooth_distribut": 20, "p": [20, 569, 608], "ep": [20, 157, 588], "0001": [20, 177, 178, 574, 587, 614], "smooth": [20, 43, 150, 156, 177, 178, 309, 612], "discret": [20, 622], "mai": [20, 145, 277, 278, 280, 281, 282, 352, 548, 549, 569, 571, 579, 585, 588, 600, 604, 611, 613, 615, 622], "have": [20, 43, 73, 82, 145, 168, 169, 170, 191, 213, 235, 261, 264, 291, 293, 314, 317, 352, 548, 549, 569, 571, 572, 576, 580, 585, 586, 587, 588, 590, 607, 609, 612, 615, 619, 622], "been": [20, 169, 170, 261, 291, 293, 314, 549, 551, 569, 574, 587, 588, 607, 619], "normal": [20, 210, 252, 266, 319, 519, 587, 609, 619, 621], "1": [20, 43, 53, 73, 88, 104, 108, 112, 143, 145, 150, 152, 154, 156, 157, 158, 160, 170, 177, 178, 183, 185, 188, 190, 192, 193, 194, 196, 197, 200, 201, 206, 210, 211, 212, 213, 227, 229, 232, 234, 236, 237, 238, 240, 241, 244, 245, 249, 252, 259, 264, 265, 266, 268, 283, 288, 293, 296, 297, 317, 318, 319, 321, 332, 333, 352, 357, 367, 489, 548, 550, 553, 554, 571, 572, 574, 578, 580, 581, 584, 586, 588, 591, 593, 609, 610, 611, 612, 614, 615, 617, 618, 619, 620, 621, 622, 623, 624], "replac": [20, 150, 266, 319, 519, 576, 587, 598, 617], "zero": [20, 43, 170, 173, 210, 252, 293, 364, 553, 612, 615, 619, 621, 622], "multipli": 20, "scale": [20, 43, 99, 140, 150, 152, 156, 157, 206, 210, 249, 252, 257, 578, 615, 618, 619, 621, 622], "factor": [20, 611, 619, 625], "take": [20, 169, 178, 181, 182, 186, 210, 215, 225, 226, 230, 252, 291, 300, 321, 322, 333, 337, 354, 548, 550, 551, 569, 571, 574, 580, 587, 607, 612, 615, 616, 621, 622, 624], "correspond": [20, 43, 147, 167, 177, 178, 193, 237, 261, 264, 268, 314, 317, 321, 357, 554, 580, 587, 612, 614, 615, 618, 619, 622], "amount": 20, "off": [20, 66, 67, 69, 549], "non": [20, 292, 364, 550, 611, 622], "ref": [20, 145], "http": [20, 147, 163, 169, 170, 193, 195, 237, 239, 261, 262, 264, 265, 266, 291, 293, 294, 314, 315, 317, 318, 319, 550, 553, 569, 572, 581, 584, 585, 587, 596, 602, 605, 617], "hanj": 20, "c": [20, 73, 195, 239, 569, 572, 579, 584, 622], "illinoi": 20, "edu": [20, 195, 239, 572], "cs412": 20, "bk3": 20, "diverg": [20, 355, 359, 574, 622], "pdf": 20, "github": [20, 147, 169, 193, 237, 261, 262, 265, 266, 291, 294, 314, 315, 318, 319, 463, 506, 549, 569, 572, 577, 581, 584, 585, 587, 596, 602, 605, 617], "com": [20, 147, 169, 193, 237, 261, 262, 265, 266, 291, 294, 314, 315, 318, 319, 548, 553, 569, 572, 581, 584, 585, 587, 590, 596, 617, 618, 625], "apach": [20, 585], "incub": 20, "blob": [20, 147, 169, 261, 262, 265, 266, 291, 314, 315, 318, 319, 587, 596], "master": [20, 169, 261, 262, 265, 266, 291, 294, 314, 315, 318, 319, 587, 622], "python": [20, 74, 145, 195, 214, 239, 260, 313, 352, 364, 467, 546, 549, 550, 569, 572, 576, 579, 584, 587, 592, 598, 601, 607, 613, 621], "contrib": [20, 260, 313], "py": [20, 145, 147, 170, 177, 178, 262, 264, 265, 266, 293, 315, 317, 318, 319, 352, 535, 550, 554, 569, 576, 584, 587, 592, 594, 595, 596, 602, 605, 615, 617, 620], "microsoft": [20, 554], "onnxruntim": [20, 177, 178, 189, 195, 202, 233, 239, 246, 269, 423, 427, 554, 581, 583, 584, 588, 614], "main": [20, 217, 294, 499, 536, 550, 576, 581, 587, 594, 596, 608, 612, 615], "tool": [20, 145, 256, 364, 553, 554, 587, 600, 604, 612, 613, 615], "arrai": [20, 43, 145, 210, 252, 264, 275, 317, 364, 621], "small": [20, 66, 67, 68, 340, 551, 569, 612, 622], "probabl": [20, 177, 178, 359], "activationoper": 22, "onnx_quant": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41], "onnx_nod": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 86, 100, 110], "removableactivationoper": 22, "remov": [22, 43, 55, 56, 59, 73, 79, 82, 83, 84, 95, 97, 165, 257, 266, 319, 405, 451, 548, 549, 587, 600, 604, 612, 620], "qactivationoper": 22, "children": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 41], "initi": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 35, 36, 37, 38, 39, 40, 41, 43, 104, 115, 145, 160, 170, 181, 182, 190, 193, 212, 225, 226, 234, 237, 292, 293, 310, 333, 349, 354, 406, 407, 499, 551, 569, 571, 572, 586, 606, 612, 615, 619, 622], "qoper": [22, 37, 177, 178], "argmaxoper": 23, "qargmaxoper": 23, "attentionoper": 24, "qattentionoper": 24, "qattent": 24, "binari": [25, 145, 268, 321, 579, 586, 602, 605], "binaryoper": 25, "qbinaryoper": 25, "qbinari": 25, "concatoper": 26, "qconcatoper": 26, "qconcat": 26, "convoper": 27, "qconvoper": 27, "qlinearconv": 27, "direct8bit": 28, "direct8bitoper": 28, "qdirectoper": 28, "qdirect": 28, "embedlayernorm": 29, "embedlayernormalizationoper": 29, "qembedlayernormalizationoper": 29, "qembedlayernorm": 29, "gatheroper": 30, "qgatheroper": 30, "qgather": 30, "globalaveragepool": 31, "globalaveragepooloper": 31, "qglobalaveragepooloper": 31, "qlinearglobalaveragepool": 31, "gemmoper": 32, "qgemmoper": 32, "qgemm": 32, "lstmoper": 34, "matmuloper": 35, "qmatmuloper": 35, "qlinearmatmul": 35, "maxpooloper": 36, "qmaxpooloper": 36, "qmaxpool": 36, "op_registri": 37, "op_typ": [37, 311, 350], "qop_registri": 37, "padoper": 38, "qpadoper": 38, "qpad": 38, "averagepool": 39, "pooloper": 39, "qpooloper": 39, "qlinearaveragepool": 39, "resizeoper": 40, "qresizeoper": 40, "qresiz": 40, "splitoper": 41, "qsplitoper": 41, "qsplit": 41, "q_config": [42, 257, 554], "quantization_param": 42, "op_types_to_quant": 42, "fallback_list": 42, "fp32": [42, 78, 130, 135, 140, 152, 157, 177, 178, 181, 182, 225, 226, 256, 257, 268, 303, 310, 321, 338, 342, 349, 357, 363, 364, 553, 554, 569, 580, 581, 586, 587, 588, 597, 614, 615, 616, 617, 618, 619, 620, 622, 624, 625], "add_qdq_pair_to_weight": [42, 177, 178, 615], "optypes_to_exclude_output_qu": [42, 177, 178, 615], "dedicated_qdq_pair": [42, 177, 178, 615], "helper": [43, 44, 109, 115, 145, 152, 193, 194, 195, 209, 237, 238, 239, 251, 255, 256, 257, 330, 362, 513], "onnxrt": [43, 193, 195, 202, 210, 237, 239, 246, 252, 268, 321, 362, 422, 423, 438, 440, 447, 500, 554, 588, 615], "dtype_to_nam": 43, "dtype_map": 43, "dtype": [43, 101, 104, 177, 178, 196, 197, 206, 210, 240, 241, 249, 252, 257, 258, 572, 578, 580, 590, 614, 615, 619, 620, 621, 624], "its": [43, 59, 95, 147, 167, 170, 178, 189, 195, 210, 233, 239, 252, 255, 262, 263, 293, 300, 315, 316, 337, 548, 569, 572, 574, 585, 586, 588, 598, 600, 604, 607, 608, 611, 612, 618, 621, 622], "represent": [43, 384, 385, 387, 390, 394, 395, 398, 399, 401, 403, 404, 530, 548, 550, 575, 612, 615], "quanttyp": 43, "repres": [43, 169, 170, 171, 173, 195, 200, 239, 244, 264, 266, 268, 317, 319, 321, 386, 388, 389, 391, 393, 396, 397, 400, 402, 517, 548, 572, 578, 612, 615, 622], "make_quant_nod": 43, "make": [43, 104, 140, 157, 169, 170, 172, 191, 235, 291, 293, 295, 364, 548, 549, 554, 569, 570, 571, 580, 586, 587, 595, 600, 604, 607, 615, 616, 618, 619, 622], "quantizelinear": [43, 578], "make_dquant_nod": 43, "axi": [43, 178], "dequantizelinear": [43, 578], "is_b_transpos": 43, "wheter": 43, "inuput": 43, "b": [43, 73, 193, 237, 257, 572, 586, 612, 619, 622], "transpos": [43, 72, 169, 210, 252, 256, 291, 621], "split_shared_bia": 43, "share": [43, 81, 97, 108, 579, 580, 619, 622], "float_to_float16": 43, "float16": [43, 572], "float_to_bfloat16": 43, "bfloat16": [43, 588, 590, 598, 616], "cast_tensor": 43, "tensorproto": [43, 104], "remove_init_from_model_input": 43, "collate_pr": 43, "result": [43, 145, 147, 152, 206, 210, 249, 252, 261, 264, 265, 266, 268, 314, 317, 318, 319, 321, 333, 340, 363, 364, 367, 385, 399, 417, 548, 551, 553, 569, 571, 574, 576, 583, 585, 586, 587, 595, 596, 607, 608, 609, 612, 613, 615, 618, 619, 620, 621, 622, 623, 625], "quantize_data_with_scale_zero": 43, "qtype": [43, 554], "scheme": [43, 152, 536, 554, 571, 580, 598, 622, 624], "zero_point": [43, 257], "point": [43, 206, 249, 265, 266, 275, 300, 318, 319, 337, 586, 607, 615, 619, 621, 622], "To": [43, 264, 317, 332, 549, 569, 572, 576, 578, 588, 591, 594, 600, 602, 604, 605, 614, 616, 617, 619, 622, 624], "pack": [43, 60], "weight": [43, 59, 60, 121, 140, 147, 150, 157, 163, 168, 169, 170, 171, 177, 178, 257, 291, 293, 310, 340, 349, 364, 424, 554, 569, 575, 578, 580, 582, 586, 587, 609, 612, 614, 615, 619, 620, 622, 624], "comput": [43, 104, 147, 152, 261, 262, 265, 266, 268, 314, 315, 318, 319, 321, 364, 553, 575, 578, 586, 587, 588, 590, 601, 612, 613, 615, 619, 622], "linear": [43, 156, 165, 167, 168, 169, 173, 177, 178, 257, 291, 550, 574, 578, 587, 612, 619, 622], "when": [43, 52, 63, 69, 145, 168, 170, 173, 177, 178, 193, 194, 202, 210, 237, 238, 246, 252, 262, 292, 293, 315, 333, 354, 519, 536, 548, 551, 569, 571, 572, 587, 598, 600, 601, 604, 608, 612, 615, 619, 621, 622], "uint8": [43, 206, 249, 264, 312, 317, 351, 554, 572, 580, 614, 615, 621, 624], "rmin": [43, 615], "rmax": [43, 615], "2": [43, 52, 73, 104, 108, 150, 154, 156, 158, 169, 170, 177, 178, 194, 211, 238, 264, 266, 268, 293, 300, 317, 319, 321, 332, 337, 352, 550, 554, 572, 574, 580, 581, 583, 584, 585, 586, 588, 609, 611, 612, 615, 617, 618, 619, 621, 622, 623], "m": [43, 147, 169, 177, 178, 291, 574, 584, 590, 592, 595, 598, 602, 605, 612, 625], "where": [43, 177, 178, 264, 268, 317, 321, 574, 600, 604, 608, 619, 620], "max": [43, 103, 140, 157, 177, 178, 210, 252, 265, 266, 300, 318, 319, 337, 364, 553, 569, 584, 587, 612, 615, 619, 621, 622], "ab": [43, 163, 170, 293, 615, 619], "np": [43, 210, 252, 300, 337, 576, 621], "sym": [43, 580, 615, 624], "asym": [43, 580, 624], "calculate_scale_zp": 43, "quantize_rang": 43, "calcul": [43, 59, 152, 163, 173, 178, 196, 197, 240, 241, 265, 266, 291, 293, 303, 318, 319, 342, 355, 572, 586, 587, 598, 609, 612, 615, 618, 619, 622, 624], "quantize_data": 43, "add": [43, 51, 63, 108, 118, 145, 173, 177, 178, 193, 195, 217, 237, 239, 292, 310, 349, 377, 417, 519, 549, 550, 569, 571, 572, 576, 578, 580, 586, 587, 588, 602, 605, 618, 620, 622], "necessari": [43, 548, 551, 589, 608, 612, 618, 622], "intermedi": [43, 147, 160, 177, 178, 212, 550, 583, 615], "trasnform": 43, "full": [43, 193, 194, 195, 237, 238, 239, 364, 553, 569, 572, 579, 581, 584, 585, 608, 612], "equat": [43, 266, 268, 319, 321, 615, 619], "r": [43, 140, 157, 569, 584, 608, 611, 615, 625], "": [43, 104, 140, 145, 157, 167, 168, 169, 170, 174, 175, 177, 178, 192, 195, 209, 210, 211, 213, 215, 222, 236, 239, 251, 252, 266, 291, 293, 319, 321, 322, 326, 333, 364, 505, 548, 551, 574, 576, 580, 583, 587, 588, 595, 598, 600, 604, 607, 610, 611, 612, 613, 614, 615, 617, 618, 619, 622, 624], "q": [43, 106, 108, 130, 619], "z": [43, 574, 619], "real": [43, 196, 213, 240, 576, 613, 615], "origin": [43, 150, 152, 167, 170, 173, 178, 193, 210, 211, 237, 252, 277, 278, 280, 281, 282, 292, 293, 312, 338, 351, 364, 367, 549, 572, 595, 612, 615, 621, 622, 624], "quantize_data_per_channel": 43, "per": [43, 150, 156, 158, 177, 178, 211, 359, 554, 569, 611, 616, 625], "channel": [43, 140, 150, 156, 157, 165, 168, 169, 177, 178, 206, 210, 249, 252, 291, 554, 583, 584, 590, 592, 597, 612, 621, 625], "dequantize_data_with_scale_zero": 43, "tensor_valu": 43, "scale_valu": 43, "zo_valu": 43, "dequant": [43, 56, 87, 90, 91, 92, 93, 95, 147, 152, 364, 550, 619, 620], "sacal": 43, "dequantize_data": 43, "valueinfo": 43, "tensor_nam": [43, 145], "new_dtyp": 43, "cast": [43, 56, 578, 616, 621], "info": [43, 152, 169, 173, 208, 213, 218, 257, 291, 326, 361, 364, 507, 519, 535, 550, 569, 578, 589], "quantizedvalu": 43, "new_quantized_nam": 43, "scale_nam": 43, "zero_point_nam": 43, "quantized_value_typ": 43, "quint8": 43, "linearli": 43, "intial": 43, "quantizediniti": 43, "quantized_data": 43, "quantizationmod": 43, "quantizedvaluetyp": 43, "quantformat": [43, 257], "quantize_nparrai": 43, "arr": [43, 364], "low": [43, 181, 182, 196, 197, 225, 226, 240, 241, 259, 269, 296, 322, 554, 570, 572, 576, 587, 588, 613, 615, 619, 622], "high": [43, 196, 197, 240, 241, 572, 584, 613, 622], "numpi": [43, 66, 67, 69, 104, 145, 210, 252, 258, 264, 275, 317, 579, 621], "attribute_to_kwarg": 43, "attribut": [43, 82, 103, 104, 152, 167, 175, 178, 364, 435, 436, 440, 500, 554, 571, 580, 582, 587, 614, 624], "kwarg": [43, 104, 121, 122, 123, 124, 125, 126, 127, 128, 131, 132, 133, 134, 136, 137, 165, 177, 178, 195, 208, 210, 215, 218, 239, 252, 309, 311, 321, 322, 323, 325, 327, 329, 330, 331, 333, 348, 350, 352, 354, 360, 361, 363, 364, 369, 371, 373, 374, 375, 376, 386, 388, 389, 391, 393, 396, 397, 402, 571], "make_nod": 43, "find_by_nam": 43, "item_list": 43, "find": [43, 66, 67, 69, 104, 145, 268, 275, 300, 321, 337, 364, 535, 554, 569, 593, 600, 604, 607, 608, 618, 620, 622], "item": [43, 173, 175, 177, 178, 209, 251, 292, 310, 349, 417, 505, 576, 612, 619, 622], "get_smooth_scales_per_op": 43, "max_vals_per_channel": 43, "input_tensors_2_weight": 43, "input_tensors_2_weights_nod": 43, "alpha": [43, 156, 163, 171, 615], "same": [43, 82, 145, 168, 170, 178, 193, 210, 237, 252, 264, 317, 364, 554, 570, 571, 572, 574, 576, 580, 587, 591, 595, 600, 604, 611, 612, 614, 615, 619, 620, 621, 622], "one": [43, 108, 109, 114, 152, 168, 169, 170, 172, 210, 220, 252, 261, 264, 268, 270, 291, 294, 295, 314, 317, 321, 551, 554, 569, 574, 575, 576, 580, 581, 583, 584, 586, 587, 588, 590, 591, 595, 596, 598, 600, 601, 604, 607, 608, 609, 610, 612, 614, 615, 617, 619, 621, 622], "mul": [43, 53, 64, 65, 68, 156, 578, 619], "todo": [43, 193, 196, 237, 240, 264, 310, 317, 349], "individu": [43, 169, 291, 548, 612, 619], "save": [43, 104, 173, 177, 178, 195, 222, 239, 256, 257, 297, 330, 333, 354, 355, 360, 364, 550, 554, 571, 582, 587, 588, 589, 591, 595, 600, 604, 610, 615, 619], "paper": [43, 574, 612, 619], "onli": [43, 52, 62, 69, 85, 108, 114, 140, 150, 156, 157, 158, 168, 169, 170, 177, 178, 193, 211, 213, 217, 237, 270, 291, 293, 304, 333, 343, 352, 519, 531, 553, 554, 570, 571, 574, 576, 578, 580, 587, 588, 595, 608, 612, 613, 614, 615, 619, 620, 622, 624], "get_smooth_scales_per_input": 43, "insert_smooth_mul_op_per_input": 43, "shape_info": 43, "insert": [43, 76, 104, 106, 108, 112, 143, 150, 156, 257, 550, 583, 587, 590, 612, 615, 616, 619, 620], "inupt": 43, "shape": [43, 104, 145, 169, 196, 197, 206, 210, 240, 241, 249, 252, 264, 317, 440, 447, 451, 462, 500, 553, 569, 572, 580, 581, 587, 619, 621], "ad": [43, 170, 193, 237, 261, 300, 314, 337, 569, 588, 590, 595, 598, 602, 605, 612, 620], "new_init_tensor": 43, "new_added_mul_nod": 43, "adjust_weights_per_op": 43, "adjust": [43, 598, 615, 619], "ha": [43, 66, 67, 69, 73, 169, 170, 211, 261, 291, 293, 314, 352, 549, 551, 554, 569, 571, 578, 583, 587, 588, 593, 607, 612, 614, 615, 616, 618, 619, 622], "whose": [43, 150, 156, 169, 292, 582, 619, 622], "adjustd": 43, "adjust_weights_per_input": 43, "insert_smooth_mul_op_per_op": 43, "befor": [43, 106, 108, 156, 169, 170, 172, 177, 178, 193, 237, 257, 291, 293, 295, 405, 549, 569, 572, 574, 575, 576, 579, 580, 584, 587, 602, 605, 615, 618, 620, 622], "name_2_nod": 43, "kei": [43, 145, 147, 150, 167, 173, 175, 177, 178, 275, 292, 330, 352, 355, 357, 364, 527, 553, 569, 578, 613, 620, 622], "fold_scal": 43, "fold": [43, 61, 62, 257, 580, 619], "quant": [43, 152, 177, 178, 310, 349, 550, 587, 615], "trt_env_setup": 43, "environ": [43, 158, 211, 313, 467, 499, 500, 508, 548, 569, 570, 600, 604, 607, 622], "variabl": [43, 158, 171, 177, 178, 195, 211, 239, 300, 337, 569, 584, 612, 622], "tensorrt": [43, 615], "provid": [43, 101, 104, 109, 167, 181, 182, 210, 225, 226, 252, 259, 264, 283, 288, 296, 297, 317, 322, 333, 354, 358, 360, 428, 504, 513, 551, 553, 554, 569, 570, 571, 575, 576, 577, 578, 583, 584, 587, 588, 589, 590, 594, 598, 601, 607, 608, 612, 614, 615, 620, 622, 623, 624, 625], "get_ops_recurs": 44, "prefix": [44, 145, 146, 151, 590, 595, 620], "graph_info": 44, "templateadaptor": 44, "tampl": 44, "dictionari": [44, 66, 67, 69, 146, 147, 152, 175, 177, 178, 209, 251, 264, 271, 274, 276, 317, 364, 386, 388, 389, 391, 393, 396, 397, 402, 406, 407, 409], "yaml": [44, 173, 175, 178, 181, 182, 193, 195, 211, 225, 226, 237, 239, 253, 259, 270, 271, 272, 274, 283, 288, 296, 297, 363, 364, 372, 378, 379, 463, 519, 530, 554, 582, 586, 587, 609, 614, 620, 621], "file": [44, 104, 145, 152, 155, 173, 174, 177, 178, 181, 182, 193, 194, 195, 198, 209, 210, 216, 219, 225, 226, 237, 238, 239, 242, 251, 252, 253, 257, 259, 264, 270, 271, 272, 274, 283, 288, 292, 294, 296, 297, 317, 322, 332, 333, 363, 364, 372, 428, 474, 478, 488, 511, 519, 536, 551, 554, 569, 576, 579, 582, 585, 586, 587, 589, 593, 602, 605, 606, 607, 608, 609, 614, 615, 620, 621], "pytorchadaptor": 44, "api": [44, 69, 74, 109, 221, 259, 264, 296, 309, 310, 317, 333, 348, 349, 352, 364, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 535, 536, 549, 550, 555, 557, 561, 564, 567, 578, 583, 587, 592, 596, 597, 598, 617, 618, 622, 626], "pytorch_ipexadaptor": 44, "intel": [44, 169, 214, 217, 254, 260, 267, 268, 291, 294, 302, 308, 313, 320, 321, 341, 347, 499, 546, 548, 549, 551, 552, 554, 571, 572, 573, 574, 575, 577, 578, 580, 581, 585, 588, 589, 590, 595, 597, 598, 609, 610, 611, 612, 613, 615, 616, 617, 619, 620, 622, 623, 624], "extens": [44, 519, 551, 553, 554, 580, 583, 584, 587, 588, 589, 591, 596, 597, 598, 602, 605, 606, 612, 613, 619, 622, 623, 624], "ipex": [44, 152, 177, 178, 583, 587, 592, 596, 597, 619, 625], "pytorch_fxadaptor": 44, "fx": [44, 152, 177, 304, 333, 343, 583, 596, 597, 613, 615, 616, 625], "graph": [44, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 111, 112, 113, 116, 129, 131, 135, 138, 139, 140, 142, 143, 144, 145, 167, 192, 236, 257, 259, 313, 323, 330, 440, 462, 473, 474, 479, 480, 498, 500, 523, 535, 550, 554, 572, 574, 576, 582, 586, 589, 590, 615, 616, 620], "pytorchqueri": 44, "querybackendcap": [45, 554], "tensorflowadaptor": 46, "stock": [46, 596, 619], "spr": 46, "tensorflow_itexadaptor": 46, "itex": [46, 108, 177, 178, 256, 615], "tensorflowqueri": [46, 554], "performance_onli": [46, 47, 48, 106, 130, 135, 144, 177, 587], "itex_mod": [46, 47, 88, 106, 130, 135], "quant_mod": [46, 310, 349], "graphconvert": 47, "qt_config": 47, "recip": [47, 167, 177, 178, 257, 259, 296, 578, 587, 619, 622], "int8_sequ": 47, "fp32_op": [47, 49, 106], "bf16_op": [47, 49, 106, 616], "data_load": [47, 48, 554], "fake_qu": [47, 87, 106, 130, 135], "qdq_enabl": 47, "new_api": [47, 48, 70, 71, 76, 78, 91, 98, 130, 135, 140], "use_bf16": [47, 48, 177, 614], "without": [48, 89, 145, 170, 210, 252, 293, 312, 351, 519, 548, 569, 571, 574, 576, 586, 587, 598, 612, 613, 614, 622, 623], "graphconverterwithoutcalib": 48, "recover_config": 48, "rewrit": [49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 105, 106, 107, 108, 222], "bf16convert": [49, 616], "biasadd": [51, 58, 63, 65, 108, 580], "convertaddtobiasaddoptim": 51, "conv2d": [51, 58, 59, 60, 64, 65, 70, 124, 134, 140, 580, 619, 620, 622], "addv2": [51, 68, 580], "layout": 52, "convertlayoutoptim": 52, "optim": [52, 73, 74, 78, 79, 115, 117, 167, 170, 174, 177, 178, 214, 220, 222, 259, 260, 276, 296, 300, 313, 337, 354, 355, 367, 392, 406, 407, 413, 416, 417, 419, 420, 421, 422, 423, 426, 427, 440, 500, 501, 511, 517, 523, 527, 534, 539, 551, 553, 570, 574, 575, 576, 580, 581, 583, 584, 587, 589, 590, 592, 594, 595, 598, 601, 611, 612, 613, 614, 615, 616, 618, 619, 620, 622, 624], "nchw": 52, "nhwc": 52, "It": [52, 169, 181, 182, 219, 225, 226, 266, 268, 275, 291, 296, 303, 319, 321, 322, 333, 338, 342, 354, 554, 569, 574, 587, 593, 596, 601, 607, 608, 612, 615, 618, 622, 624], "4": [52, 158, 169, 177, 178, 202, 205, 206, 210, 246, 249, 252, 261, 262, 264, 314, 315, 317, 352, 548, 554, 569, 570, 576, 577, 580, 583, 584, 586, 587, 595, 611, 612, 615, 619, 621, 622, 625], "abov": [52, 554, 574, 612, 615, 619], "graph_def": [52, 145, 256, 322, 330, 333, 462, 498], "leakyrelu": [53, 619], "convertleakyreluoptim": 53, "below": [53, 65, 73, 177, 178, 297, 549, 550, 553, 554, 569, 571, 574, 576, 582, 586, 590, 592, 600, 601, 604, 607, 609, 610, 612, 614, 615, 618, 619, 620, 622, 623], "subgraph": [53, 65, 104, 151, 578], "maximum": [53, 169, 170, 177, 178, 193, 210, 237, 252, 262, 293, 300, 315, 337, 572, 587, 612, 615, 621], "note": [53, 169, 264, 304, 317, 343, 551, 569, 576, 578, 580, 584, 587, 592, 595, 600, 604, 607, 612, 615, 619, 620, 622, 623, 624], "coeffici": [53, 612], "less": [53, 145, 177, 178, 364, 570, 574, 587, 612], "than": [53, 145, 193, 210, 237, 252, 364, 551, 553, 570, 572, 582, 586, 609, 610, 612, 615, 618, 621], "convers": [53, 178, 270, 554, 587, 588, 615, 616, 619], "valid": [53, 66, 67, 104, 170, 173, 177, 178, 195, 239, 264, 292, 293, 317, 330, 467, 519, 536, 549, 551, 553, 554, 572, 574, 577, 580, 583, 585, 587, 598, 612, 615, 617], "nan": 54, "random": [54, 145, 177, 178, 206, 210, 249, 252, 260, 276, 300, 302, 313, 337, 341, 364, 549, 551, 587, 614, 621, 624], "convertnantorandom": 54, "const": [54, 55, 62, 63, 66, 67, 69, 81, 97, 313, 418, 500, 508], "consist": [54, 62, 549, 550, 569, 578, 619, 622], "placehold": [55, 191, 235], "convertplaceholdertoconst": 55, "train": [55, 79, 150, 156, 159, 168, 170, 177, 178, 181, 182, 193, 195, 210, 220, 225, 226, 237, 239, 252, 253, 270, 293, 313, 333, 357, 527, 551, 553, 554, 559, 572, 574, 575, 578, 583, 588, 590, 596, 607, 610, 612, 613, 618, 619, 622, 624], "rerewrit": 56, "dequantizecastoptim": 56, "b16": 56, "dilat": 57, "contract": 57, "dilatedcontract": 57, "spacetobatchnd": 57, "batchtospacend": 57, "pattern": [57, 58, 60, 77, 95, 106, 107, 108, 130, 135, 152, 162, 164, 167, 168, 170, 171, 174, 177, 178, 195, 239, 260, 281, 282, 284, 289, 293, 310, 313, 349, 424, 535, 554, 572, 580, 583, 587, 608, 610, 614, 619, 625], "inject": [58, 587], "dummi": [58, 167, 196, 197, 240, 241, 258, 268, 321, 553, 569, 572, 581, 586, 587], "injectdummybiasaddoptim": 58, "fusion": [58, 60, 69, 77, 108, 125, 126, 127, 130, 131, 132, 136, 550, 554, 580], "expanddim": 59, "expanddimsoptim": 59, "next": [59, 186, 230, 352, 551, 569, 614, 622], "featch": 60, "reshap": [60, 66, 67, 72, 619], "fetchweightfromreshapeoptim": 60, "handl": [60, 145, 150, 156, 361, 536, 550, 552, 571, 619], "batchnorm": [61, 66, 120, 550, 619], "foldbatchnormnodesoptim": 61, "graphfoldconstantoptim": 62, "sequenc": [62, 104, 168, 169, 177, 178, 193, 209, 210, 237, 251, 252, 262, 266, 291, 315, 319, 554, 572, 580, 612, 621], "self": [62, 167, 177, 178, 332, 554, 569, 571, 572, 583, 586, 618, 620, 622], "supported_op_typ": 62, "fusebiasaddandaddoptim": 63, "second": [63, 168, 177, 178, 193, 237, 338, 364, 428, 569, 587, 600, 604, 608, 619, 622, 624], "columnwis": 64, "fusecolumnwisemuloptim": 64, "depthwiseconv2dn": [64, 70, 124, 134, 580], "math": [65, 615], "fuseconvwithmathoptim": 65, "elimin": 65, "sub": [65, 167, 211, 257, 551, 622], "realdiv": [65, 68], "decompos": [66, 67], "fusedecomposedbnoptim": 66, "input_graph_def": [66, 67, 69], "node_name_from_input": [66, 67, 69], "node_nam": [66, 67, 69, 145, 257, 330], "strip": [66, 67, 69, 82, 83, 145, 620], "port": [66, 67, 69, 536, 569], "other": [66, 67, 69, 150, 156, 192, 236, 266, 319, 330, 536, 548, 549, 550, 569, 580, 583, 584, 585, 587, 589, 609, 611, 612, 615, 619, 621, 622, 625], "underli": [66, 67, 69], "node_from_map": [66, 67, 69], "node_map": [66, 67, 69], "pull": [66, 67, 69], "def": [66, 67, 69, 181, 182, 225, 226, 333, 352, 354, 550, 554, 571, 572, 574, 575, 576, 586, 587, 615, 619, 620, 622], "entri": [66, 67, 69, 147, 217, 259, 297, 425, 428, 519, 585], "index": [66, 67, 69, 104, 178, 186, 191, 195, 230, 235, 239, 275, 364, 536, 572, 586, 608, 619], "everi": [66, 67, 69, 169, 170, 177, 178, 291, 293, 554, 595, 600, 604, 622], "identifi": [66, 67, 69, 264, 317, 330, 612], "want": [66, 67, 69, 167, 177, 178, 191, 193, 235, 237, 293, 338, 354, 550, 554, 569, 572, 576, 584, 586, 587, 588, 595, 607, 608, 609, 618, 620, 622], "nodedef": [66, 67, 69], "rais": [66, 67, 69, 104, 169, 170, 173, 264, 291, 292, 293, 317, 322, 352, 519, 553, 612, 613], "valueerror": [66, 67, 69, 264, 317, 352, 579], "If": [66, 67, 69, 73, 158, 177, 178, 181, 182, 195, 210, 225, 226, 239, 252, 292, 322, 333, 352, 354, 549, 550, 569, 570, 572, 576, 578, 584, 585, 586, 587, 588, 593, 601, 602, 605, 607, 609, 615, 618, 619, 620, 621, 622], "isn": [66, 67, 69], "present": [66, 67, 69, 569, 613, 619], "values_from_const": [66, 67, 69], "node_def": [66, 67, 69], "extract": [66, 67, 69, 167, 195, 239, 312, 351, 519, 572], "access": [66, 67, 69, 175, 178, 360, 364, 503, 519, 536, 569, 602, 605], "valid_reshape_input": [66, 67], "reshape_in0_ndef": [66, 67], "reshape_in1_ndef": [66, 67], "ar": [66, 67, 104, 169, 170, 177, 178, 193, 210, 237, 252, 264, 268, 275, 291, 292, 293, 297, 299, 300, 317, 321, 334, 336, 337, 352, 357, 363, 364, 519, 548, 549, 550, 551, 553, 554, 569, 571, 572, 574, 575, 576, 577, 578, 580, 581, 582, 583, 584, 585, 586, 587, 588, 590, 593, 595, 598, 601, 607, 609, 610, 611, 612, 613, 615, 616, 617, 618, 619, 620, 621, 622, 624], "bypass_reshap": [66, 67], "input_node_map": [66, 67], "input_nam": [66, 67, 101, 139, 178, 256, 257, 578], "get_const_dim_count": [66, 67], "dimens": [66, 67, 104, 185, 210, 229, 252, 572, 574, 621], "instancenorm": [67, 619], "fusedecomposedinoptim": 67, "gelu": 68, "fusegeluoptim": 68, "sqrt": 68, "erf": 68, "samll": 69, "layernorm": [69, 619], "fuselayernormoptim": 69, "remap": 69, "smaller": [69, 210, 252, 574, 587, 612, 621], "case": [69, 73, 158, 178, 192, 209, 210, 211, 236, 251, 252, 259, 283, 288, 296, 332, 519, 569, 571, 574, 575, 576, 580, 582, 586, 591, 595, 607, 608, 609, 612, 613, 615, 617, 621, 623, 624, 625], "fusedbatcnormv3": 69, "And": [69, 550, 570, 587, 593, 619], "further": [69, 178, 548, 588, 589, 590, 592, 601, 607], "restrict": [69, 177, 178, 612, 618], "2d": [69, 619], "3d": [69, 613, 619], "kera": [69, 115, 178, 195, 202, 217, 239, 246, 325, 330, 440, 447, 457, 576, 589, 597, 598, 625], "fusepadwithconv2doptim": 70, "excluded_op_nam": [70, 71, 174, 177, 178, 587, 612], "cfg": [70, 71, 152, 174, 310, 349, 357], "itex_qdq_mod": [70, 71], "conv3d": [70, 124], "fusepadwithfp32conv2doptim": 71, "fusetransposereshapeoptim": 72, "cse": [73, 97], "graphcseoptim": 73, "introduc": [73, 549, 554, 578, 580, 587, 615, 617, 619, 623], "ident": [73, 79, 168, 548, 574], "three": [73, 173, 193, 237, 299, 334, 336, 550, 554, 569, 571, 578, 584, 588, 601, 610, 615, 616, 618, 619, 620], "d": [73, 574, 582, 608, 625], "those": [73, 303, 342, 364, 574, 575, 582, 587, 610, 612, 615, 622], "child": [73, 620], "b1": 73, "c1c2": 73, "d1": [73, 364], "c1": 73, "c2": 73, "memori": [73, 259, 283, 288, 296, 332, 364, 571, 575, 587, 588, 590, 609, 612, 615, 619, 622], "bound": [73, 210, 252, 264, 300, 317, 337, 586, 621], "like": [73, 95, 97, 145, 167, 173, 178, 181, 182, 183, 195, 225, 226, 227, 239, 259, 268, 293, 296, 297, 321, 330, 333, 354, 549, 550, 551, 554, 569, 574, 575, 583, 595, 610, 612, 615, 617, 619, 622], "relu": [73, 77, 108, 550, 580, 619, 620], "relu6": [73, 580], "graphdef": [73, 145, 330, 589], "grappler": [74, 580], "grappleroptim": 74, "input_output_nam": 74, "opt_cfg": 74, "wrapper": [74, 101, 102, 103, 104, 121, 146, 160, 192, 210, 212, 213, 215, 216, 222, 236, 252, 264, 268, 317, 321, 326, 330, 536, 616], "leverag": [74, 551, 553, 574, 578, 590, 607, 610, 615, 622], "built": [74, 179, 180, 184, 189, 193, 194, 199, 201, 203, 204, 206, 207, 210, 215, 217, 223, 224, 228, 231, 233, 237, 238, 243, 245, 247, 248, 249, 250, 252, 297, 321, 324, 332, 333, 354, 551, 554, 572, 576, 587, 600, 604, 609, 615, 621, 622, 624], "convert_add_to_biasadd": [75, 86, 110], "convert_layout": [75, 86, 110], "convert_leakyrelu": [75, 86, 110], "convert_nan_to_random": [75, 86, 110], "convert_placeholder_to_const": [75, 86, 110], "dequantize_cast_optim": [75, 86, 110], "dilated_contract": [75, 86, 110], "dummy_biasadd": [75, 86, 110], "expanddims_optim": [75, 86, 110], "fetch_weight_from_reshap": [75, 86, 110], "fold_batch_norm": [75, 86, 110], "fold_const": [75, 86, 110], "fuse_biasadd_add": [75, 86, 110], "fuse_column_wise_mul": [75, 86, 110], "fuse_conv_with_math": [75, 86, 110], "fuse_decomposed_bn": [75, 86, 110], "fuse_decomposed_in": [75, 86, 110], "fuse_gelu": [75, 86, 110], "fuse_layer_norm": [75, 86, 110], "fuse_pad_with_conv": [75, 86, 110], "fuse_pad_with_fp32_conv": [75, 86, 110], "fuse_reshape_transpos": [75, 86, 110], "graph_cse_optim": [75, 86, 110], "grappler_pass": [75, 86, 110], "insert_print_nod": [75, 86, 110], "move_squeeze_after_relu": [75, 86, 110], "pre_optim": [75, 86, 110], "remove_training_nod": [75, 86, 110], "rename_batch_norm": [75, 86, 110], "split_shared_input": [75, 86, 110], "strip_equivalent_nod": [75, 86, 110, 145], "strip_unused_nod": [75, 86, 110, 145], "switch_optim": [75, 86, 110], "print": [76, 147, 167, 268, 321, 352, 569, 576, 586, 587, 612, 619, 622], "insertprintminmaxnod": 76, "pre_node_nam": 76, "post_node_nam": 76, "pass": [76, 145, 158, 364, 462, 531, 550, 554, 570, 572, 574, 575, 576, 578, 582, 586, 587, 608, 612, 614, 615, 616, 619, 624], "sampl": [76, 177, 178, 186, 191, 193, 194, 195, 206, 210, 230, 235, 237, 238, 239, 249, 252, 268, 275, 300, 321, 337, 451, 551, 553, 572, 577, 583, 608, 615, 621, 622, 624, 625], "move": [77, 550, 614, 617], "squeez": [77, 550], "movesqueezeafterreluoptim": 77, "match": [77, 101, 167, 264, 265, 317, 318, 574, 608], "pre": [78, 115, 167, 181, 182, 193, 225, 226, 237, 322, 333, 354, 572, 574, 575, 587, 588, 595, 612, 613, 615, 620, 622], "entranc": [78, 184], "preoptim": 78, "removetrainingnodesoptim": 79, "protected_nod": 79, "types_to_splic": 79, "checknumer": 79, "stopgradi": 79, "renam": [80, 617], "fusedbatchnorm": 80, "fusedbatchnormv2": 80, "renamebatchnormoptim": 80, "splitsharedinputoptim": 81, "equival": [82, 619], "stripequivalentnodesoptim": 82, "output_node_nam": [82, 83, 130, 131, 135, 145], "unus": [83, 145], "stripunusednodesoptim": 83, "input_node_nam": [83, 130, 135, 145], "switch": [84, 590, 620], "switchoptim": 84, "condit": [84, 193, 194, 195, 210, 237, 238, 239, 252, 299, 334, 336, 572, 585, 621, 622], "graphrewriterbas": 85, "abstract": [85, 159, 210, 252, 253, 259, 296, 448, 460, 511, 535, 554, 582], "freeze_fake_qu": [86, 94, 110], "freeze_valu": [86, 94, 110], "freeze_value_without_calib": [86, 94, 110], "fuse_conv_redundant_dequant": [86, 94, 110], "fuse_conv_requant": [86, 94, 110], "fuse_matmul_redundant_dequant": [86, 94, 110], "fuse_matmul_requant": [86, 94, 110], "meta_op_optim": [86, 94, 110], "post_hostconst_convert": [86, 94, 110], "post_quantized_op_cs": [86, 94, 110], "rnn_convert": [86, 94, 110], "scale_propag": [86, 94, 110], "onnx_graph": [86, 100, 110], "onnx_schema": [86, 100, 110], "tf2onnx_util": [86, 100, 110], "insert_qdq_pattern": [86, 105, 110], "merge_duplicated_qdq": [86, 105, 110], "share_qdq_y_pattern": [86, 105, 110], "freez": [87, 88, 89, 590, 612], "fakequ": 87, "freezefakequantopoptim": 87, "follow": [87, 109, 168, 195, 239, 261, 264, 314, 317, 548, 549, 550, 551, 554, 569, 571, 572, 574, 575, 576, 578, 580, 584, 585, 586, 587, 588, 589, 590, 591, 592, 600, 604, 610, 612, 614, 615, 619, 620, 622], "freezevaluetransform": 88, "max_min_data": [88, 89], "postfix": [88, 89], "tensor_data": [88, 364], "th": [88, 89], "gpu": [88, 89, 96, 177, 178, 553, 570, 583, 587, 588, 592, 598, 607, 614, 615], "freezevaluewithoutcalibtransform": 89, "95": [89, 268, 321, 586, 619, 625], "quantizedconv": [90, 91], "quantizeddeconv": 90, "redund": [90, 92], "fuseconvredundantdequantizetransform": 90, "cpu": [90, 91, 92, 93, 177, 178, 364, 553, 570, 583, 587, 588, 590, 592, 598, 607, 611, 613, 614, 615, 616, 620], "_quantizedconv": 90, "_quantizeddeconv": 90, "successor": [90, 91, 92, 93], "requant": [91, 93, 620], "fuseconvrequantizetransform": 91, "quantizedmatmul": [92, 93], "fusematmulredundantdequantizetransform": 92, "_quantizedmatmul": [92, 93], "fusematmulrequantizedequantizetransform": 93, "quantizedmatmulwithbiasanddequant": 93, "fusematmulrequantizetransform": 93, "fusematmulrequantizedequantizenewapitransform": 93, "fusematmulrequantizenewapitransform": 93, "newapi": 93, "meta": [95, 613], "metainfochangingmemopoptim": 95, "metaop": 95, "With": [95, 332, 550, 553, 554, 571, 587, 595, 600, 604, 608, 609, 612, 613, 618, 619, 622, 625], "chang": [95, 140, 150, 157, 170, 172, 177, 178, 293, 295, 340, 364, 379, 488, 510, 549, 571, 576, 579, 585, 586, 587, 590, 600, 601, 604, 607, 612, 620, 621, 622], "better": [95, 177, 178, 181, 182, 225, 226, 275, 322, 333, 354, 575, 586, 588, 612, 613, 615, 618, 622], "perform": [95, 158, 171, 177, 178, 193, 205, 206, 211, 237, 249, 259, 283, 288, 296, 303, 332, 338, 342, 511, 522, 550, 551, 554, 569, 570, 571, 572, 573, 575, 577, 578, 583, 584, 586, 587, 588, 589, 590, 592, 596, 598, 601, 607, 609, 610, 611, 612, 613, 614, 615, 616, 619, 620, 622, 624, 625], "post": [96, 97, 150, 156, 170, 178, 181, 182, 225, 226, 257, 333, 548, 553, 554, 575, 576, 583, 584, 590, 596, 607, 612, 613, 619, 620, 622], "hostconst": 96, "posthostconstconvert": 96, "postcseoptim": 97, "duplic": [97, 107, 300, 337], "quantizev2": 97, "decreas": [97, 612], "size": [97, 169, 185, 186, 192, 195, 201, 206, 210, 229, 230, 236, 239, 245, 249, 252, 291, 332, 364, 519, 548, 569, 571, 572, 576, 579, 587, 607, 608, 609, 612, 619, 621, 624, 625], "rnn": 98, "quantizedrnnconvert": 98, "calibration_data": [98, 106], "rnn_detail": 98, "scalepropagationtransform": 99, "direct": [99, 169, 291, 469, 612], "export": [100, 178, 260, 264, 313, 317, 519, 553, 581, 593, 608, 620, 623], "onnxgraph": 101, "output_shap": 101, "opset": [101, 103, 104, 178, 256, 257], "extra_opset": 101, "output_nam": [101, 139, 178, 256, 257, 578], "is_subgraph": 101, "graph_nam": 101, "manipul": [101, 102], "onnxnod": 102, "skip_convers": 102, "schema": 103, "onnxopschema": 103, "domain": [103, 104, 177, 178, 392, 416, 440, 447, 500, 501, 503, 519, 531, 536, 569, 612, 622], "since_vers": 103, "get_schema": 103, "max_inclusive_opset_vers": 103, "within": [103, 170, 259, 264, 296, 317, 330, 548, 550, 588, 600, 604, 607, 613, 619], "get_max_supported_opset_vers": 103, "packag": [103, 372, 380, 386, 388, 389, 391, 392, 393, 396, 397, 400, 402, 411, 416, 421, 422, 426, 429, 435, 437, 440, 441, 447, 466, 468, 473, 476, 479, 480, 482, 485, 491, 496, 500, 534, 554, 569, 579, 584, 607, 608, 613, 617, 622], "set_nam": 104, "find_opset": 104, "assert_error": 104, "bool_val": 104, "error_msg": 104, "error": [104, 147, 268, 303, 321, 342, 361, 503, 586, 591, 619, 622], "messag": [104, 143, 519, 531, 536, 622], "map_numpy_to_onnx_dtyp": 104, "np_dtype": 104, "map_onnx_to_numpy_typ": 104, "onnx_typ": 104, "add_port_to_nam": 104, "nr": 104, "get_tensorflow_node_attr": 104, "pars": [104, 152, 193, 194, 206, 210, 237, 238, 249, 252, 366, 377, 470, 474, 478, 483, 486, 492, 511, 519, 527, 621], "get_tensorflow_tensor_shap": 104, "get_tensorflow_node_shape_attr": 104, "attr": [104, 145, 167], "map_tensorflow_dtyp": 104, "get_tensorflow_tensor_data": 104, "convert_tensorflow_tensor_to_onnx": 104, "read_tensorflow_node_attr": 104, "read": [104, 145, 198, 210, 242, 252, 292, 572, 616, 618], "infer_onnx_shape_dtyp": 104, "opset_vers": [104, 139, 178, 256, 257, 578], "input_shap": [104, 197, 241, 571, 572], "input_dtyp": 104, "sometim": [104, 550, 615], "so": [104, 210, 252, 550, 554, 579, 583, 586, 593, 595, 615, 616, 619, 620, 621, 623], "make_onnx_shap": 104, "seqtyp": 104, "tensor_dtyp": 104, "around": 104, "signifi": 104, "make_onnx_inputs_output": 104, "elem_typ": 104, "text": [104, 209, 210, 251, 252, 261, 266, 294, 314, 319, 578, 585, 596, 612, 613, 619, 621, 625], "datatyp": [104, 152, 616, 622], "save_protobuf": 104, "path": [104, 145, 152, 167, 173, 174, 193, 194, 195, 210, 237, 238, 239, 252, 253, 256, 257, 259, 270, 271, 272, 274, 283, 288, 292, 294, 296, 297, 310, 322, 330, 333, 349, 364, 428, 445, 448, 451, 453, 458, 460, 488, 519, 550, 551, 554, 569, 571, 572, 576, 582, 586, 587, 588, 589, 593, 596, 607, 610, 621, 624], "as_text": 104, "protobuf": 104, "is_onnx_domain": 104, "is_list_or_tupl": 104, "are_shapes_equ": 104, "src": [104, 608], "dest": 104, "equal": [104, 140, 145, 157, 352, 364, 586, 612], "get_subgraphs_from_onnx": 104, "model_proto": 104, "over": [104, 195, 239, 268, 321, 577, 581, 583, 586, 598, 607, 614, 619, 622], "df": 104, "initialize_name_count": 104, "avoid": [104, 193, 237, 550, 620], "conflict": [104, 579], "counter": 104, "make_nam": 104, "get_index_from_strided_slice_of_shap": 104, "outputs_to_valu": 104, "stride": [104, 210, 252, 621], "slice": 104, "compute_const_folding_using_tf": 104, "g": [104, 169, 177, 178, 574, 577, 581, 590, 595, 612, 617, 619, 622], "const_node_valu": 104, "graph_output": 104, "constant": [104, 257, 260, 300, 302, 308, 313, 337, 341, 347, 358, 501, 571, 580, 621], "tf": [104, 115, 145, 192, 193, 194, 195, 210, 236, 237, 238, 239, 252, 328, 330, 367, 569, 576, 589, 613, 616, 621], "generategraphwithqdqpattern": 106, "op_wise_config": [106, 130, 135], "quantized_nod": 106, "dq": [106, 108, 130, 619], "pair": [106, 177, 178, 571, 587, 588], "merg": [107, 185, 229, 310, 349, 602, 605, 620, 622], "mergeduplicatedqdqoptim": 107, "y": [108, 177, 178, 210, 252, 300, 337, 579, 593, 619, 621], "shareqdqforitexypatternoptim": 108, "enabl": [108, 147, 170, 177, 178, 293, 507, 569, 576, 584, 588, 590, 592, 595, 596, 598, 611, 612, 613, 622], "break": [108, 576, 587], "graphanalyz": 109, "extend_engin": 109, "analyz": [109, 167, 330, 618, 619, 620], "under": [109, 177, 178, 195, 239, 363, 551, 569, 572, 585, 586, 587, 590, 595, 596, 607, 610, 612, 619, 620, 622], "singleton": [109, 313, 364, 500, 508], "specifi": [109, 158, 177, 178, 181, 182, 210, 211, 225, 226, 252, 259, 264, 268, 271, 274, 283, 288, 296, 297, 317, 321, 322, 333, 352, 354, 363, 364, 381, 418, 470, 515, 519, 536, 569, 576, 580, 586, 587, 595, 609, 614, 621, 622, 624], "graphrewriterhelp": 109, "encapsul": [109, 181, 182, 225, 226, 322, 333, 354, 589], "quantize_lay": [110, 111, 113], "fake_quant": [110, 111, 113], "quantize_config": [110, 111, 113], "quantize_help": [110, 111, 113], "quantize_wrapp": [110, 111, 113], "fuse_qdq_bn": [110, 111, 129], "fuse_qdq_concatv2": [110, 111, 129], "fuse_qdq_conv": [110, 111, 129], "fuse_qdq_deconv": [110, 111, 129], "fuse_qdq_in": [110, 111, 129], "fuse_qdq_matmul": [110, 111, 129], "fuse_qdq_pool": [110, 111, 129], "optimize_qdq": [110, 111, 129], "optimize_lay": [111, 113, 116], "quantize_layer_add": [111, 113, 116], "quantize_layer_bas": [111, 113, 116], "quantize_layer_bn": [111, 113, 116], "fake": [112, 150, 156, 587, 615, 619], "fakequantizebas": 112, "abc": [112, 266, 319, 554, 620, 622], "appli": [112, 125, 126, 127, 130, 132, 136, 159, 170, 220, 262, 315, 548, 569, 587, 590, 592, 598, 607, 610, 612, 615, 616, 618, 619, 622, 623, 624], "fakequant": 112, "per_channel": [112, 580, 615, 624], "num_bit": [112, 152, 619], "8": [112, 177, 178, 209, 251, 550, 580, 584, 612, 613, 619, 622, 625], "channel_axi": [112, 154, 157], "symmetr": [112, 615, 621, 622], "narrow_rang": 112, "quantizeconfig": [114, 115], "custom": [114, 158, 297, 321, 332, 363, 570, 574, 575, 590, 612, 618], "There": [114, 297, 299, 334, 336, 569, 574, 580, 583, 586, 587, 588, 590, 619, 622, 624], "instanc": [114, 115, 158, 177, 178, 181, 182, 211, 225, 226, 265, 266, 268, 271, 274, 277, 278, 280, 281, 282, 300, 312, 318, 319, 321, 322, 333, 337, 351, 354, 364, 548, 550, 554, 569, 570, 587, 592, 598, 624, 625], "global": [114, 169, 177, 178, 277, 278, 280, 281, 282, 291, 364, 550, 587, 612, 614, 622], "class": [115, 149, 152, 275, 322, 333, 442, 443, 550, 551, 571, 572, 574, 586, 587, 598, 609, 610, 615, 617, 620, 622, 624], "init_quantize_config": 115, "quantize_recip": 115, "begin": [115, 170, 293, 574, 575, 587, 612, 622], "process": [115, 147, 169, 170, 172, 173, 177, 178, 181, 182, 193, 194, 195, 206, 210, 211, 225, 226, 237, 238, 239, 249, 252, 257, 291, 293, 295, 299, 300, 313, 322, 333, 334, 336, 337, 354, 363, 364, 380, 463, 464, 467, 500, 508, 512, 551, 554, 569, 571, 572, 574, 575, 576, 578, 587, 591, 610, 612, 615, 619, 620, 621, 624], "model_nam": [115, 177, 178, 519], "special": [115, 167, 332, 550, 571, 586, 587, 609, 612, 623], "decid": [115, 177, 178, 262, 293, 315, 428, 554, 587, 615, 617, 622], "qat_clone_funct": 115, "leav": [115, 601], "quantizewrapp": [115, 121], "wrapped_lay": 115, "config_quantizable_lay": 117, "quantizelayeradd": 118, "quantizelay": 119, "quantizelayerbas": 119, "quantizelayerbatchnorm": 120, "quantizewrapperbas": 121, "fusedbatchnormv3": [122, 132], "fusenodestartwithfusedbatchnormv3": [122, 132], "_quantizedfusedbatchnorm": 122, "concatv2": [123, 133, 144, 580], "fusenodestartwithconcatv2": [123, 133], "quantizedconcatv2": [123, 133], "fusenodestartwithconv2d": [124, 134], "conv2dbackpropinput": 125, "conv3dbackpropinputv2": 125, "fusenodestartwithdeconv2d": 125, "fusedinstancenorm": 126, "fusenodestartwithfusedinstancenorm": 126, "batchmatmul": 127, "batchmatmulv2": 127, "fusenodestartwithmatmul": [127, 136], "avgpool": [128, 137, 580], "fusenodestartwithpool": [128, 137], "optimizeqdqgraph": 130, "input_graph": [130, 135, 140, 366, 474, 478, 483, 486, 493, 554], "op_wise_sequ": [130, 135], "quantizegraph": 131, "quantizegraphbas": 131, "quantizenodebas": 131, "quantizegraphforintel": 135, "common": [138, 178, 208, 260, 270, 274, 275, 276, 313, 357, 512, 513, 519, 548, 572, 575, 576, 578, 582, 584, 587, 615, 619], "herlper": 138, "quantizegraphhelp": 138, "sever": [138, 172, 210, 252, 295, 551, 569, 574, 575, 583, 587, 588, 600, 604, 612, 614, 619, 621, 622, 624], "staticmethod": 138, "function": [138, 177, 178, 181, 182, 194, 225, 226, 238, 271, 274, 283, 288, 550, 551, 554, 569, 570, 571, 574, 575, 582, 583, 584, 586, 587, 588, 598, 608, 612, 615, 618, 619, 620, 622, 623], "tensorflowqdqtoonnxqdqconvert": 139, "shape_overrid": 139, "inputs_as_nchw": [139, 256], "default_opset_vers": 139, "bia": [140, 177, 178, 257, 620], "correct": [140, 157, 173, 177, 178, 264, 265, 266, 268, 292, 317, 318, 319, 321, 548, 569, 590], "biascorrect": 140, "fp32_graph": 140, "method": [140, 152, 171, 177, 178, 186, 191, 192, 193, 195, 202, 210, 213, 230, 235, 236, 237, 239, 246, 252, 274, 275, 276, 310, 349, 357, 358, 360, 361, 513, 531, 550, 551, 553, 572, 574, 575, 586, 587, 610, 612, 615, 616, 619, 621, 622], "weight_empir": 140, "Will": [140, 574, 583], "our": [140, 152, 177, 178, 551, 553, 578, 587, 608, 618, 623], "task": [140, 193, 200, 237, 244, 268, 321, 572, 574, 575, 578, 583, 586, 587, 612, 619], "close": [140, 157], "w_int8": [140, 157], "u": [140, 157, 553, 590], "w_fp32": [140, 157], "varianc": [140, 157], "ratio": [140, 157, 169, 170, 173, 177, 178, 206, 210, 249, 252, 293, 572, 587, 612, 621, 625], "differ": [140, 153, 157, 160, 168, 177, 178, 186, 195, 210, 212, 230, 239, 252, 259, 268, 274, 276, 285, 296, 321, 332, 359, 548, 550, 551, 569, 571, 572, 574, 576, 577, 578, 582, 583, 586, 587, 589, 600, 604, 609, 612, 615, 619, 620, 621, 622], "wise": [140, 157, 177, 178, 300, 303, 337, 338, 342, 519, 569, 583, 612, 620, 622, 624], "minim": [140, 157, 300, 337, 574, 577, 586, 587, 600, 604, 612, 615, 622], "round": [140, 157, 615, 619], "scale_c": [140, 157], "shift": [140, 157, 206, 249, 608, 621], "notic": [140, 157, 211, 585, 617], "can": [140, 147, 150, 157, 167, 168, 169, 170, 172, 177, 178, 181, 182, 192, 195, 210, 211, 213, 225, 226, 236, 239, 252, 264, 266, 268, 291, 293, 295, 317, 319, 321, 322, 332, 333, 354, 470, 519, 550, 551, 553, 554, 569, 570, 571, 572, 574, 575, 576, 578, 580, 583, 584, 586, 587, 588, 589, 590, 591, 592, 594, 595, 596, 598, 600, 601, 602, 604, 605, 607, 608, 609, 610, 611, 612, 614, 615, 616, 618, 619, 620, 621, 622, 624, 625], "first": [140, 157, 168, 175, 177, 178, 193, 237, 264, 310, 317, 338, 349, 364, 428, 550, 551, 554, 569, 572, 578, 584, 588, 592, 601, 602, 605, 608, 614, 615, 616, 618, 619, 620, 622, 624], "empir": [140, 157], "solut": [140, 157, 553, 554, 579, 592, 596, 601, 613, 619, 622], "min": [140, 157, 364, 569, 612, 615, 619, 621, 622], "graphtransform": 141, "graphtransformbas": 141, "input_pb": [141, 143, 144], "log": [143, 167, 361, 367, 470, 510, 511, 550, 569, 598, 618, 620, 622], "insertlog": 143, "node_name_list": 143, "show_nam": 143, "show_op": 143, "first_n": 143, "summar": [143, 574], "1024": [143, 195, 239, 593], "dump_fp32": 143, "rerang": 144, "rerangequantizedconcat": 144, "rerange_quant": 144, "version1_lt_version2": [145, 364], "version1": [145, 364], "version2": [145, 364], "version1_gt_version2": [145, 364], "greater": [145, 364, 612], "version1_eq_version2": [145, 364], "version1_gte_version2": [145, 364], "version1_lte_version2": [145, 364], "disable_random": 145, "seed": [145, 177, 178, 276, 364, 587, 624], "disabl": [145, 177, 178, 507, 536, 548, 607, 616], "read_graph": 145, "in_graph": 145, "in_graph_is_binari": 145, "write_graph": 145, "out_graph_def": 145, "out_graph_fil": 145, "write": [145, 202, 246, 364, 576, 582, 587, 590, 620], "is_ckpt_format": 145, "model_path": [145, 449, 519], "ckpt": [145, 322, 330, 333, 625], "folder": [145, 195, 200, 239, 244, 322, 333, 363, 572, 595, 600, 604, 620], "is_saved_model_format": 145, "saved_model": [145, 270, 440, 447, 457], "get_estimator_graph": 145, "estim": [145, 268, 321, 330, 622], "input_fn": [145, 330], "get_tensor_by_nam": 145, "try_cnt": 145, "3": [145, 170, 178, 195, 210, 239, 252, 264, 317, 352, 550, 551, 553, 569, 571, 572, 574, 576, 578, 580, 581, 584, 586, 587, 588, 590, 594, 598, 600, 604, 609, 614, 615, 618, 619, 621, 622, 625], "consid": [145, 268, 321, 548, 574, 608, 622], "import": [145, 158, 177, 178, 270, 322, 332, 333, 352, 354, 364, 550, 551, 553, 570, 571, 572, 574, 575, 576, 578, 581, 586, 587, 588, 589, 590, 594, 596, 609, 610, 612, 614, 615, 616, 617, 618, 619, 620, 621, 622], "scope": [145, 587], "more": [145, 150, 156, 169, 210, 252, 291, 551, 552, 553, 569, 572, 574, 576, 581, 583, 584, 586, 587, 588, 590, 598, 602, 605, 609, 610, 612, 616, 619, 622, 623, 625], "onc": [145, 172, 217, 295, 299, 334, 336, 569, 571, 607, 612, 613, 622, 625], "both": [145, 178, 548, 551, 554, 575, 584, 587, 591, 612, 614, 615, 619, 622], "compat": [145, 330, 576, 589, 602, 605, 607, 617], "suffix": 145, "time": [145, 177, 178, 210, 252, 268, 300, 321, 332, 337, 364, 505, 576, 579, 587, 595, 597, 600, 604, 607, 608, 609, 612, 613, 615, 618, 620, 621, 622], "got": [145, 579, 620], "iterator_sess_run": 145, "sess": [145, 330], "iter_op": 145, "feed_dict": [145, 192, 236], "output_tensor": [145, 330], "measur": [145, 211, 322, 359, 551, 554, 570, 574, 586, 587, 620, 622], "integr": [145, 160, 212, 554, 569, 587, 608], "makeiter": 145, "feed": [145, 192, 236, 574, 612], "end": [145, 170, 177, 178, 193, 209, 210, 237, 251, 252, 293, 299, 334, 336, 554, 574, 575, 580, 584, 587, 601, 609, 612, 620, 621, 622], "predict": [145, 210, 215, 252, 261, 265, 266, 268, 314, 318, 319, 321, 551, 574, 586, 598, 619, 620, 621], "pred": [145, 268, 321, 586], "collate_tf_pr": 145, "collat": [145, 152], "tbe": 145, "get_input_output_node_nam": 145, "fix_ref_type_of_graph_def": 145, "fix": [145, 170, 193, 237, 293, 549, 572, 594, 612, 619, 622], "strip_unused_lib": 145, "offici": [145, 261, 265, 266, 314, 318, 319, 548, 569, 586, 619], "r1": 145, "15": [145, 580, 625], "branch": [145, 569], "get_graph_def": 145, "auto_input_output": 145, "get_model_input_shap": 145, "inout": 145, "get_tensor_val_from_graph_nod": 145, "graph_node_name_map": 145, "val": [145, 173, 195, 198, 239, 242, 292, 587], "tensor_v": 145, "int8_node_name_revers": 145, "revers": [145, 569], "tf_diagnosis_help": 145, "fp32_model": [145, 147, 152, 257, 364, 554], "quan_model": 145, "save_path": [145, 256, 257, 554, 589], "diagnosi": [145, 178, 313, 408, 417, 440, 500, 529, 535, 587], "generate_feed_dict": 145, "input_tensor": [145, 330], "torch": [146, 147, 148, 149, 150, 151, 152, 156, 167, 168, 169, 174, 177, 178, 222, 257, 322, 333, 363, 550, 553, 555, 574, 576, 578, 587, 588, 589, 590, 595, 598, 615, 619, 620], "bf16modulewrapp": 146, "bf16modul": 146, "mix": [146, 177, 178, 298, 310, 322, 335, 349, 476, 477, 478, 525, 553, 554, 559, 583, 590, 596, 597, 598, 623], "precis": [146, 177, 178, 181, 182, 225, 226, 259, 266, 268, 269, 296, 298, 310, 319, 321, 322, 332, 335, 338, 349, 392, 406, 407, 416, 440, 474, 476, 477, 478, 501, 525, 553, 554, 559, 569, 570, 575, 576, 580, 583, 590, 596, 597, 598, 613, 614, 615, 619, 622, 623], "mixed_precision_model": 146, "bf16_symbolic_trac": 146, "fx_sub_module_list": 146, "trace": [146, 147, 151, 152, 167, 177, 178, 257, 333, 340, 550, 597, 622], "_description_": 146, "hessian": [147, 340, 622], "awar": [147, 159, 178, 220, 270, 291, 340, 354, 554, 575, 576, 578, 583, 588, 607, 610, 622], "node_collector": 147, "hook": [147, 159, 219, 220, 283, 288, 357, 574, 575, 587, 612, 619, 620], "record": [147, 152, 160, 193, 194, 195, 201, 212, 219, 237, 238, 239, 245, 364, 572, 618, 620, 622], "hessiantrac": 147, "q_model": [147, 178, 270, 333, 550, 553, 571, 572, 576, 578, 581, 582, 586, 587, 589, 615, 616], "criterion": [147, 159, 161, 162, 163, 169, 170, 177, 178, 214, 217, 260, 313, 487, 527, 574, 575, 578, 587, 612, 615, 622, 624], "pleas": [147, 150, 156, 163, 169, 170, 177, 178, 193, 194, 195, 198, 237, 238, 239, 242, 291, 293, 294, 352, 550, 551, 552, 553, 554, 569, 570, 572, 575, 576, 584, 586, 588, 590, 591, 595, 598, 612, 615, 616, 617, 618, 619, 623], "refer": [147, 150, 156, 163, 169, 170, 173, 177, 178, 193, 237, 261, 262, 268, 291, 293, 294, 314, 315, 321, 352, 550, 554, 570, 571, 572, 575, 576, 582, 584, 585, 586, 587, 588, 590, 595, 598, 609, 614, 617, 621, 622], "yao": 147, "zhewei": 147, "et": [147, 619], "al": [147, 619], "pyhessian": 147, "network": [147, 163, 169, 293, 340, 551, 569, 574, 575, 578, 587, 611, 613, 615, 619, 622], "through": [147, 181, 182, 225, 226, 322, 333, 553, 570, 580, 582, 583, 586, 593, 609, 610, 612, 614, 615, 619], "len": [147, 178, 210, 252, 572, 576, 621], "2020": 147, "ieee": [147, 588, 619], "intern": [147, 310, 349, 503, 571, 572, 612], "confer": [147, 612, 619], "big": 147, "dong": 147, "zhen": 147, "hawq": [147, 340, 622], "v2": [147, 340, 576, 584, 596, 617, 622, 625], "advanc": [147, 177, 178, 528, 548, 553, 559, 615, 624], "system": [147, 158, 211, 364, 507, 534, 535, 570, 593], "33": [147, 625], "18518": 147, "18529": 147, "openvinotoolkit": 147, "nncf": 147, "develop": [147, 332, 519, 549, 550, 584, 587, 588, 590, 596, 607, 612, 613, 616, 618], "hessian_trac": 147, "compare_weight": 147, "float_dict": 147, "ani": [147, 264, 266, 309, 317, 319, 348, 352, 366, 367, 369, 371, 373, 374, 375, 376, 377, 378, 379, 381, 406, 407, 428, 430, 436, 445, 462, 465, 467, 470, 474, 478, 480, 483, 486, 489, 492, 498, 505, 507, 519, 520, 521, 522, 523, 525, 526, 527, 528, 529, 530, 531, 535, 536, 548, 549, 553, 569, 571, 576, 590, 595, 608, 612, 618], "quantized_dict": 147, "compar": [147, 268, 321, 364, 569, 575, 586, 612, 615, 618, 620, 622], "being": [147, 264, 317, 436], "two": [147, 158, 168, 169, 170, 172, 195, 200, 211, 239, 244, 264, 291, 295, 297, 304, 317, 343, 364, 550, 551, 569, 572, 574, 576, 578, 580, 586, 587, 588, 615, 616, 618, 622, 624], "wt_compare_dict": 147, "float_model": 147, "state_dict": [147, 576, 620], "qmodel": 147, "compute_error": 147, "state": [147, 168, 593, 612], "weight_dict": 147, "hawq_top": 147, "enable_act": 147, "modul": [148, 149, 273, 279, 289, 290, 508, 516, 524, 550, 569, 571, 574, 578, 583, 586, 587, 589, 612, 614, 616, 620, 623], "nn": [149, 150, 152, 167, 168, 177, 178, 222, 257, 322, 333, 363, 550, 574, 578, 587, 589, 619, 620], "get_modul": 150, "set_modul": [150, 152], "new_modul": [150, 152], "torchsmoothqu": [150, 619], "q_func": [150, 181, 182, 225, 226, 300, 303, 305, 306, 334, 337, 338, 342, 344, 345, 554, 587, 622], "traced_model": [150, 151], "detail": [150, 156, 167, 210, 252, 401, 403, 424, 487, 492, 506, 519, 548, 549, 553, 574, 580, 581, 582, 586, 587, 588, 590, 598, 607, 612, 617, 618, 620, 622, 623, 625], "smoothquant": [150, 152, 156, 553, 613, 623], "accur": [150, 156, 619], "effici": [150, 156, 551, 571, 574, 590, 610, 613, 619, 622], "larg": [150, 156, 553, 571, 574, 587, 612, 613, 619, 625], "languag": [150, 156, 261, 314, 548, 553, 578, 612, 613, 619], "spiq": [150, 156, 619], "free": [150, 156, 168, 170, 181, 182, 225, 226, 333, 548, 553, 586, 596, 601, 609, 618, 619], "could": [150, 156, 169, 181, 182, 195, 225, 226, 239, 297, 322, 333, 354, 548, 550, 575, 587, 610, 612, 615, 619, 623], "absorb": [150, 156], "later": [150, 156, 620], "inplac": 150, "mean": [150, 169, 177, 178, 206, 210, 249, 252, 266, 268, 291, 303, 319, 321, 342, 550, 571, 576, 580, 586, 587, 593, 612, 615, 619, 621, 622, 624], "you": [150, 177, 178, 191, 193, 235, 237, 293, 549, 550, 569, 572, 576, 578, 584, 585, 586, 590, 592, 593, 595, 600, 604, 607, 608, 612, 615, 617, 618, 619, 620, 623], "recov": [150, 364, 554, 575, 619], "graphtrac": 150, "trace_and_fuse_sub_graph": 151, "is_qat": 151, "get_embedding_contigu": 152, "embed": [152, 612], "contigu": 152, "is_fused_modul": 152, "_propagate_qconfig_help": 152, "detect": [152, 167, 177, 178, 264, 268, 317, 321, 326, 519, 550, 569, 590, 597, 598, 612], "collate_torch_pr": 152, "fetch": [152, 155, 186, 230, 572], "collate_result": 152, "input2tupl": 152, "append_attr": 152, "fx_model": 152, "fx_white_list": 152, "append": [152, 297, 300, 337, 550, 575, 587, 610], "graphmodul": [152, 550, 616], "addit": [152, 178, 354, 569, 574, 601, 617], "dir": [152, 193, 237, 363, 572, 579, 582], "generate_activation_observ": 152, "observ": [152, 618, 620, 622], "what": [152, 170, 191, 235, 354, 548, 569], "check_cfg_and_qconfig": 152, "op_infos_from_cfg": 152, "output_tensor_ids_op_nam": 152, "paser_cfg": 152, "ops_nam": 152, "get_quantizable_ops_from_cfg": 152, "input_tensor_ids_op_nam": 152, "update_sq_scal": 152, "ipex_config_path": 152, "smoothquant_scale_info": 152, "ipex_config": 152, "json": [152, 194, 210, 238, 252, 492, 519, 572, 589, 608, 621], "temporari": [152, 364, 548], "auto_copi": 152, "fetch_modul": 152, "op_nam": [152, 174, 177, 178, 311, 350, 424, 425, 587, 612, 620], "simple_infer": 152, "get_example_input": 152, "dataset": [152, 181, 182, 183, 185, 186, 188, 190, 191, 192, 204, 213, 225, 226, 227, 229, 230, 232, 234, 235, 236, 248, 260, 264, 265, 266, 268, 297, 313, 317, 318, 319, 321, 322, 333, 354, 357, 392, 406, 416, 417, 428, 440, 519, 521, 551, 553, 554, 571, 576, 581, 586, 587, 595, 612, 615, 617, 619, 622, 624, 625], "example_inp": 152, "get_fallback_ord": 152, "confidence_batch": [152, 622], "fallback": [152, 303, 304, 340, 342, 343, 588, 616, 622], "requantize_cfg": 152, "fall": 152, "back": [152, 210, 216, 252, 607], "order": [152, 261, 262, 297, 300, 303, 312, 314, 315, 337, 342, 351, 550, 586, 614, 619, 620, 622], "confid": 152, "ordered_op": 152, "get_mse_order_per_fp32": 152, "mse": [152, 177, 178, 260, 268, 302, 313, 321, 341, 425, 569, 586, 614, 617], "influenc": [152, 612], "last": [152, 163, 173, 177, 178, 569, 588, 590, 592, 597, 601, 615, 619], "fallback_ord": 152, "get_mse_order_per_int8": 152, "example_input": [152, 177, 178, 257, 578], "get_torch_vers": 152, "match_datatype_pattern": 152, "calculate_quant_min_max": 152, "unsign": [152, 312, 351], "qmin": 152, "qmax": 152, "algorithm_registri": 153, "algorithm_typ": 153, "locat": [153, 173, 210, 252, 576, 593, 600, 604, 607, 615, 617, 621, 624], "registr": [153, 195, 202, 210, 239, 246, 252, 286], "algorithmschedul": 153, "conf": [153, 158, 159, 178, 181, 182, 211, 225, 226, 270, 277, 278, 280, 281, 282, 283, 288, 300, 303, 305, 306, 310, 322, 332, 333, 334, 337, 338, 342, 344, 345, 349, 352, 354, 530, 550, 551, 553, 570, 574, 581, 582, 587, 588, 589, 610, 615, 616, 618, 619, 622], "control": [153, 177, 178, 411, 416, 550, 569, 587, 612, 622], "phase": [153, 551, 587, 612, 615, 616, 622], "fastbiascorrect": [154, 157], "fast_bias_correct": [155, 177, 178, 313, 615], "smooth_quant": [155, 177, 178, 313, 615, 619], "weight_correct": [155, 177, 178, 313, 615], "5": [156, 160, 177, 178, 197, 206, 212, 241, 249, 268, 321, 554, 569, 572, 580, 586, 587, 611, 612, 614, 615, 619, 621, 622, 624, 625], "For": [156, 167, 168, 169, 178, 195, 210, 239, 252, 265, 266, 268, 291, 294, 318, 319, 321, 322, 333, 548, 550, 552, 554, 569, 574, 575, 576, 578, 580, 583, 590, 592, 593, 595, 598, 612, 616, 619, 620, 622, 624, 625], "kernel": [156, 177, 178, 507, 554, 611, 622], "futur": [156, 181, 182, 213, 225, 226, 583, 587, 598, 623], "weightcorrect": 157, "1e": [157, 619, 624], "05": [157, 178, 268, 321, 586, 619, 625], "evalu": [158, 159, 169, 177, 181, 182, 193, 211, 225, 226, 237, 253, 261, 264, 265, 266, 268, 270, 314, 317, 318, 319, 321, 322, 332, 333, 354, 357, 500, 508, 524, 551, 554, 571, 572, 574, 575, 582, 583, 586, 587, 588, 590, 596, 598, 601, 607, 609, 612, 615, 618, 620, 622, 624], "set_env_var": [158, 211], "env_var": [158, 211], "overwrite_exist": [158, 211], "env": [158, 211, 579], "alreadi": [158, 195, 209, 211, 239, 251, 505, 554, 569, 572, 583, 602, 605, 622], "param": [158, 183, 211, 217, 227, 268, 300, 321, 337, 418, 519, 554, 589, 622], "set_all_env_var": [158, 211], "physic": [158, 211, 548, 570], "core": [158, 177, 178, 211, 569, 570, 585, 600, 604, 611, 625], "get_architectur": [158, 211], "architectur": [158, 211, 271, 274, 553, 569, 570, 574, 587, 612, 613, 623], "get_threads_per_cor": [158, 211], "thread": [158, 177, 178, 211, 535, 569, 571, 611], "get_thread": [158, 211], "get_physical_id": [158, 211], "socket": [158, 211, 507, 536, 611, 625], "get_core_id": [158, 211], "get_bounded_thread": [158, 211], "core_id": [158, 211], "bind": [158, 211], "fit": [158, 169, 177, 178, 300, 322, 333, 337, 352, 354, 550, 553, 570, 571, 572, 576, 581, 582, 586, 587, 588, 589, 612, 615, 616], "b_dataload": [158, 177, 178, 570, 587], "b_func": [158, 570], "benchmarkconfig": [158, 177, 178, 570, 587], "accuraci": [158, 173, 177, 178, 181, 182, 225, 226, 253, 259, 268, 283, 288, 296, 321, 322, 332, 333, 338, 352, 354, 487, 511, 522, 550, 553, 569, 571, 572, 575, 576, 577, 578, 586, 587, 588, 598, 607, 609, 610, 612, 613, 614, 617, 618, 619, 620, 624, 625], "goal": [158, 253, 259, 283, 288, 296, 322, 333, 571, 610, 615, 622], "prefer": [158, 259, 296, 333, 612], "space": [158, 170, 177, 178, 181, 182, 225, 226, 259, 266, 271, 274, 275, 276, 296, 300, 303, 310, 319, 322, 333, 337, 342, 349, 519, 548, 549, 551, 554, 612, 615, 624], "etc": [158, 159, 209, 251, 253, 259, 266, 283, 288, 296, 319, 322, 333, 363, 574, 583, 612, 618, 622], "user": [158, 167, 170, 173, 177, 178, 181, 182, 195, 198, 202, 210, 211, 217, 222, 225, 226, 239, 242, 246, 252, 259, 283, 288, 294, 296, 297, 322, 332, 333, 338, 354, 364, 503, 550, 551, 554, 559, 570, 574, 575, 578, 580, 583, 586, 587, 588, 589, 590, 591, 592, 594, 595, 596, 598, 601, 607, 609, 610, 612, 613, 615, 616, 617, 619, 620, 621, 622, 626], "cores_per_inst": [158, 177, 178, 570, 587, 614], "num_of_inst": [158, 177, 178, 570, 587, 614], "7": [158, 177, 178, 332, 570, 579, 580, 584, 587, 612, 615, 617, 619, 622, 625], "pb": [158, 177, 178, 322, 330, 333, 456, 459, 470, 553, 570, 576, 581, 587, 589, 620, 625], "eval_dataload": [158, 177, 178, 181, 182, 225, 226, 297, 300, 303, 305, 306, 322, 333, 334, 337, 338, 342, 344, 345, 354, 553, 570, 581, 582, 587, 615, 622], "compon": [159, 253, 260, 297, 313, 500, 535, 550, 576, 584, 585, 590, 607, 610, 611], "quantizationawaretrainingcallback": [159, 354], "pruningcallback": [159, 354], "distillationcallback": 159, "basecallback": 159, "design": [159, 192, 215, 220, 236, 321, 338, 551, 553, 587, 595, 598, 612, 615, 623], "mainli": [159, 172, 220, 295, 587, 612, 615], "prune": [159, 163, 164, 165, 168, 169, 170, 171, 172, 173, 177, 178, 220, 221, 260, 277, 278, 280, 281, 282, 286, 288, 289, 291, 292, 293, 295, 297, 313, 364, 375, 382, 401, 440, 475, 500, 508, 519, 524, 553, 576, 577, 580, 581, 583, 610, 613, 623, 624], "distil": [159, 162, 177, 178, 212, 219, 220, 260, 313, 553, 577, 581, 583, 610, 623, 624], "deriv": [159, 163, 169, 170, 171, 172, 253, 291, 293, 295], "pipelin": [159, 253, 271, 272, 297, 575, 587, 610], "knowledg": [159, 160, 177, 178, 212, 253, 575, 577, 581, 583, 587, 589, 624], "transfer": [159, 200, 244, 253, 572, 574, 575, 587, 619], "teacher": [159, 177, 178, 253, 574, 575, 587, 625], "student": [159, 177, 178, 193, 219, 237, 253, 572, 574, 575, 625], "distillation_conf": [159, 174, 253], "_epoch_ran": [159, 253], "integ": [159, 169, 170, 177, 178, 253, 264, 268, 275, 291, 293, 317, 321, 352, 554, 615, 619, 622], "indic": [159, 177, 178, 186, 191, 193, 230, 235, 237, 253, 264, 275, 317, 550, 569, 579, 620], "how": [159, 163, 169, 170, 177, 178, 210, 252, 253, 291, 549, 550, 552, 554, 569, 571, 572, 574, 575, 576, 582, 587, 601, 602, 605, 606, 607, 612, 615, 619, 621, 622, 623, 624], "much": [159, 163, 177, 178, 210, 252, 253, 574, 601, 619, 621], "epoch": [159, 170, 253, 293, 354, 574, 575, 576, 587, 610, 612, 624], "ran": [159, 253], "eval_frequ": [159, 253], "frequenc": [159, 170, 177, 178, 253, 293, 587, 611, 612, 624], "term": [159, 170, 171, 253, 549, 574, 585, 586, 609, 610, 622], "best_scor": [159, 253], "best": [159, 210, 252, 253, 259, 296, 303, 342, 548, 551, 584, 590, 596, 607, 609, 615, 621, 622], "metric": [159, 177, 178, 181, 182, 214, 225, 226, 253, 259, 260, 275, 283, 288, 296, 297, 313, 322, 333, 354, 357, 392, 416, 440, 500, 508, 516, 519, 522, 551, 554, 569, 571, 572, 576, 587, 588, 615, 618, 620, 622, 623, 624, 625], "best_model": [159, 253], "found": [159, 253, 503, 519, 536, 553, 569, 574, 588, 595, 619, 622, 625], "critet": [160, 212], "includ": [160, 163, 167, 169, 171, 177, 178, 193, 195, 202, 210, 212, 237, 239, 246, 252, 259, 269, 291, 296, 352, 548, 549, 554, 569, 572, 584, 585, 586, 587, 588, 590, 593, 596, 601, 612, 615, 616, 620, 622], "tensorflowknowledgedistillationloss": [160, 212], "pytorchknowledgedistillationloss": [160, 212, 587], "pytorchintermediatelayersknowledgedistillationloss": [160, 212], "tensorflowcriterion": [160, 212], "pytorchcriterion": [160, 212], "criterion_registri": [160, 212], "criterion_typ": [160, 212], "registry_criterion": [160, 212], "knowledgedistillationframework": [160, 212], "student_model": [160, 178, 212, 587], "teacher_model": [160, 177, 178, 212, 574, 575, 587], "knowledgedistillationloss": [160, 212, 587, 624], "temperatur": [160, 177, 178, 212, 587, 624], "loss_typ": [160, 177, 178, 212, 587, 624], "ce": [160, 177, 178, 212, 587, 624], "loss_weight": [160, 177, 178, 212, 587, 624], "pytorchknowledgedistillationlosswrapp": [160, 212], "param_dict": [160, 212, 217], "tensorflowknowledgedistillationlosswrapp": [160, 212], "tensorflowknowledgedistillationlossextern": [160, 212], "intermediatelayersknowledgedistillationloss": [160, 212, 527], "layer_map": [160, 178, 212, 574], "add_origin_loss": [160, 178, 212], "pytorch": [160, 167, 169, 177, 178, 192, 193, 195, 198, 202, 210, 212, 217, 219, 236, 237, 239, 242, 246, 252, 257, 258, 259, 268, 269, 289, 291, 294, 296, 304, 313, 321, 322, 331, 333, 343, 358, 364, 367, 440, 447, 470, 480, 500, 550, 551, 553, 554, 571, 574, 575, 577, 578, 580, 583, 584, 587, 589, 590, 592, 595, 596, 597, 598, 607, 612, 613, 614, 617, 619, 622, 624], "loss": [160, 177, 178, 212, 259, 268, 283, 288, 296, 321, 354, 574, 575, 576, 577, 586, 587, 588, 598, 610, 612, 615, 619, 622, 624], "pytorchintermediatelayersknowledgedistillationlosswrapp": [160, 212], "selfknowledgedistillationloss": [160, 212, 527], "selfknowledg": [160, 212], "pytorchselfknowledgedistillationloss": [160, 212], "pytorchselfknowledgedistillationlosswrapp": [160, 212], "pruner": [162, 260, 277, 278, 279, 280, 281, 283, 288, 289, 291, 294, 313, 530, 587, 612, 624], "model_slim": [162, 164], "auto_slim": [162, 164, 166], "pattern_analyz": [162, 164, 166], "weight_slim": [162, 164, 166], "criteria": [162, 164, 177, 178, 259, 283, 288, 291, 293, 296, 550, 607, 619], "reg": [162, 164, 170], "schedul": [162, 164, 170, 171, 177, 178, 260, 289, 293, 313, 587, 610], "callback": [162, 283, 288, 354, 357, 535, 550, 587, 610, 612, 615], "register_criterion": 163, "registri": [163, 169, 170, 171, 172, 291, 293, 295, 551], "get_criterion": 163, "pruningcriterion": 163, "about": [163, 506, 507, 513, 548, 569, 571, 587, 616, 622, 623, 625], "module_nam": [163, 170, 171, 293, 364, 519], "store": [163, 167, 170, 171, 177, 178, 195, 239, 286, 293, 582], "score": [163, 169, 170, 177, 178, 261, 262, 264, 265, 266, 268, 293, 314, 315, 317, 318, 319, 321, 340, 357, 550, 586, 609, 612, 618, 622], "magnitudecriterion": 163, "magnitud": [163, 177, 178, 260, 268, 279, 313, 321, 583, 612], "criterion_class": 163, "determin": [163, 169, 170, 177, 178, 359, 548, 550, 612, 615, 619], "gradientcriterion": 163, "gradient": [163, 277, 583, 587, 612, 625], "absolut": [163, 177, 178, 268, 321, 586, 587, 611, 612, 615, 622], "snipcriterion": 163, "snip": [163, 177, 178, 293, 583, 612, 625], "product": [163, 583, 588, 590, 591, 607, 611, 613, 615, 618, 622], "singl": [163, 172, 177, 178, 186, 193, 210, 230, 237, 252, 264, 293, 295, 317, 400, 417, 436, 550, 572, 584, 612], "shot": [163, 170, 172, 220, 293, 295, 551, 583, 587, 612, 613], "sensit": [163, 277, 293, 583, 612], "arxiv": [163, 170, 293, 612, 619], "org": [163, 170, 264, 293, 317, 549, 550, 569, 584, 602, 605], "1810": [163, 293], "02340": [163, 293], "snipmomentumcriterion": 163, "snip_momentum": [163, 177, 178, 587, 612], "momentum": [163, 293, 583, 587, 612, 624], "mechan": [163, 612, 618, 623], "preserv": 163, "step": [163, 169, 170, 172, 177, 178, 291, 293, 295, 354, 569, 574, 575, 576, 587, 602, 605, 607, 610, 612, 614, 616, 618, 619, 620, 622], "beta": 163, "snipmomentumblockcriterion": 163, "snip_momentum_block": 163, "retrainfreecriterion": 163, "retrain_fre": [163, 170], "auto": [165, 167, 177, 178, 298, 313, 335, 341, 364, 550, 590, 593, 595, 597, 598, 612, 615], "slim": [165, 166, 167, 264, 317, 328, 330, 589, 612], "round_multipli": 165, "32": [165, 576, 582, 611, 619, 625], "spars": [165, 170, 293, 572, 613], "automat": [165, 167, 168, 177, 178, 195, 198, 205, 206, 239, 242, 249, 259, 269, 296, 550, 553, 569, 570, 572, 583, 587, 588, 590, 592, 595, 596, 598, 600, 601, 602, 604, 605, 607, 610, 612, 615, 619, 621, 622], "model_slim_ffn2": 165, "some": [165, 167, 177, 178, 193, 237, 292, 519, 569, 572, 584, 586, 587, 588, 609, 612, 615, 616, 619, 620, 622], "part": [165, 170, 291, 293, 550, 584, 588, 602, 605, 612, 619, 623], "perman": [165, 548, 612], "obtain": [165, 167, 170, 171, 173, 292, 550, 578, 612, 618, 619, 622], "acceler": [165, 574, 587, 590, 598, 607, 612, 613, 616, 619, 622], "directli": [165, 177, 178, 192, 236, 264, 268, 292, 317, 321, 578, 586, 587, 594, 612, 614, 615, 620], "sprase": 165, "multipl": [165, 177, 178, 179, 180, 184, 185, 193, 194, 196, 197, 198, 199, 200, 204, 207, 210, 217, 223, 224, 228, 229, 231, 237, 238, 240, 241, 242, 243, 244, 248, 250, 252, 269, 322, 323, 324, 326, 332, 570, 572, 578, 587, 610, 612, 618, 619, 622], "model_slim_mha": 165, "parse_auto_slim_config": 165, "ffn2_sparsiti": 165, "mha_spars": 165, "generate_ffn2_pruning_config": 165, "consecut": [165, 167, 168, 612], "generate_mha_pruning_config": 165, "multi": [165, 167, 264, 317, 377, 551, 571, 572, 583, 587, 609, 612, 615, 622], "head": [165, 167, 168, 173, 612], "get_attribut": 167, "level": [167, 338, 352, 361, 510, 548, 619, 622], "descent": 167, "print_iter": 167, "recipesearch": 167, "searcher": [167, 276], "search": [167, 170, 174, 181, 182, 225, 226, 259, 261, 271, 274, 275, 276, 296, 300, 314, 337, 406, 407, 553, 569, 581, 583, 586, 590, 591, 601, 613, 620, 622, 623], "root": [167, 193, 194, 195, 198, 237, 238, 239, 242, 268, 321, 536, 571, 572, 576, 586, 587, 624], "levelwis": 167, "wai": [167, 194, 195, 198, 238, 239, 242, 519, 551, 569, 571, 572, 586, 587, 590, 593, 608, 610, 612, 615, 619, 622, 624], "huggingfac": [167, 168, 193, 237, 360, 572, 577, 581, 595, 596, 597, 598, 619], "bert": [167, 178, 189, 192, 193, 210, 233, 236, 237, 252, 553, 572, 574, 586, 595, 612, 621, 625], "recipe_sampl": 167, "bertattent": 167, "dens": [167, 172, 177, 178, 295, 612, 625], "infom": [167, 213, 257], "basic": [167, 169, 177, 178, 209, 251, 260, 271, 291, 302, 306, 309, 313, 341, 345, 348, 354, 583, 584, 587, 614, 618], "searching_result": 167, "jitbasicsearch": 167, "placeholder_shap": 167, "placeholder_dtyp": 167, "jit": [167, 177, 590, 592, 597, 619, 620], "them": [167, 193, 237, 550, 571, 578, 580, 582, 610, 612, 622], "static_graph": 167, "flatten_static_graph": 167, "target_lay": 167, "linear2linearsearch": 167, "target_op_lut": 167, "lookup": 167, "tabl": [167, 384, 385, 386, 387, 388, 389, 390, 391, 393, 394, 395, 396, 397, 398, 399, 401, 402, 403, 404, 406, 407, 625], "code": [167, 181, 182, 211, 225, 226, 270, 294, 297, 333, 354, 429, 447, 550, 553, 554, 569, 571, 572, 574, 575, 576, 582, 583, 585, 586, 590, 592, 594, 595, 596, 598, 601, 607, 609, 610, 612, 613, 614, 615, 618, 619, 620, 621], "current_pattern": 167, "statu": [167, 515, 531, 548, 571, 609, 612], "selfmhasearch": 167, "classifierheadsearch": 167, "final": [167, 170, 173, 293, 587, 593, 609, 612, 615, 617, 622], "classifi": [167, 173, 193, 237, 268, 321, 572, 574], "squeezer": 168, "postcompressionutil": 168, "librari": [168, 214, 260, 313, 546, 549, 553, 584, 587, 592, 601, 607, 613, 615], "relat": [168, 171, 253, 264, 283, 288, 291, 317, 357, 447, 450, 452, 457, 537, 540, 541, 542, 545, 590, 612, 624], "linearcompress": 168, "root_linear": 168, "target_linear": 168, "also": [168, 192, 195, 210, 236, 239, 252, 261, 314, 332, 333, 549, 551, 553, 554, 569, 571, 577, 581, 583, 586, 587, 590, 595, 600, 601, 604, 607, 608, 609, 612, 613, 615, 616, 619, 622], "while": [168, 170, 173, 293, 300, 337, 554, 569, 572, 577, 583, 588, 590, 595, 607, 614, 615, 619], "hidden": [168, 169, 291, 519, 554], "structur": [168, 170, 177, 178, 293, 311, 350, 444, 583, 606, 608, 612, 615, 620, 623, 625], "layer_1": 168, "act_fn": 168, "layer_2": 168, "linearcompressioniter": 168, "linear_pattern": 168, "mhacompress": 168, "mha": 168, "head_num": 168, "head_siz": 168, "test": [168, 177, 178, 210, 252, 549, 553, 569, 584, 625], "progress": [168, 195, 239, 601, 607, 612, 615], "register_pattern": [169, 291], "sure": [169, 170, 172, 291, 293, 295, 569, 570], "get_pattern": [169, 291], "assertionerror": [169, 170, 173, 291, 292, 293, 322], "basepattern": [169, 171], "unit": [169, 291, 519, 549, 612], "e": [169, 177, 178, 536, 548, 574, 577, 581, 590, 595, 596, 600, 604, 612, 619, 622], "4x1": [169, 177, 178, 287, 587, 612, 625], "is_glob": [169, 291], "local": [169, 177, 178, 291, 364, 379, 411, 416, 429, 449, 569, 600, 604, 612, 618], "contrast": [169, 291, 621], "keep_mask_lay": 169, "invalid_lay": 169, "max_sparsity_ratio_per_op": [169, 170, 174, 177, 178, 587, 612], "sparsiti": [169, 170, 172, 173, 177, 178, 293, 295, 364, 553, 572, 583, 587, 623, 625], "reach": [169, 172, 177, 178, 295, 549, 553, 571, 612, 622], "min_sparsity_ratio_per_op": [169, 174, 177, 178, 587, 612], "minimum": [169, 177, 178, 587, 598, 612, 622], "target_spars": [169, 174, 177, 178, 587, 612, 614, 624], "patternnxm": [169, 291], "nxm": [169, 170, 177, 178, 287, 291, 612], "kept": [169, 291], "block_siz": [169, 291], "height": [169, 206, 210, 249, 252, 291, 576, 621, 624], "width": [169, 206, 210, 249, 252, 291, 576, 612, 615, 621, 624], "vertic": [169, 210, 252, 291, 621], "becaus": [169, 210, 252, 291, 550, 615, 619, 621, 622], "patternninm": [169, 291], "n": [169, 177, 178, 194, 210, 238, 252, 262, 291, 315, 352, 507, 572, 574, 612, 615, 619, 621], "out": [169, 177, 178, 193, 194, 195, 237, 238, 239, 259, 291, 296, 549, 550, 553, 572, 590, 595, 600, 601, 602, 604, 605, 607, 612, 614, 615], "continu": [169, 264, 291, 317, 551, 587, 608, 612], "doc": [169, 177, 178, 291, 309, 310, 348, 349, 352, 364, 586, 587, 602, 605], "md": [169, 177, 178, 291, 576, 615], "element": [169, 173, 191, 235, 264, 291, 317, 364, 572, 583, 586, 612, 619], "register_prun": [170, 293], "parse_valid_pruner_typ": 170, "get_prun": [170, 293], "cuurent": [170, 293], "baseprun": 170, "current_sparsity_ratio": [170, 293], "global_step": [170, 293], "total": [170, 210, 252, 268, 293, 321, 572, 612, 621], "start_step": [170, 174, 177, 178, 293, 587, 612, 614], "trigger": [170, 293, 549], "end_step": [170, 174, 177, 178, 293, 587, 612, 614], "pruning_frequ": [170, 174, 177, 178, 587, 612], "target_sparsity_ratio": [170, 293], "show": [170, 364, 548, 569, 574, 576, 587, 593, 608, 619, 622, 623], "basicprun": 170, "arrang": [170, 194, 195, 198, 238, 239, 242, 572, 612], "proce": 170, "regul": 170, "patternlockprun": [170, 281, 293], "parent": [170, 172, 287, 293, 295, 620], "blockmaskprun": 170, "grad": 170, "retrainfreeprun": 170, "pruner_class": 170, "rearrang": 170, "fast": [170, 177, 178, 553, 613], "retrain": [170, 575, 612], "effect": [170, 553, 554, 613], "2204": 170, "09656": 170, "progressiveprun": 170, "interpol": [170, 210, 252, 586, 612, 621], "fine": [170, 193, 237, 572, 593, 612, 613, 615], "grain": [170, 612, 613, 622], "improv": [170, 549, 553, 587, 590, 607, 608, 612, 613, 615, 616, 622, 625], "interv": [170, 612], "regular": [171, 261, 292, 314], "register_reg": 171, "regulariz": 171, "get_reg_typ": 171, "get_reg": 171, "basereg": 171, "grouplasso": 171, "coeff": 171, "group": [171, 278, 436, 583, 612, 620, 621, 622, 625], "lasso": [171, 278, 583, 612], "select": [171, 178, 193, 237, 550, 551, 569, 583, 584, 607, 612, 615, 620, 622], "reg_term": 171, "coeffient": 171, "register_schedul": [172, 295], "get_schedul": [172, 295], "pruningschedul": 172, "gradual": [172, 295, 612], "oneshotschedul": [172, 295], "iterativeschedul": [172, 295], "get_sparsity_ratio": 173, "elementwise_over_matmul_gemm_conv": 173, "elementwise_over_al": 173, "blockwise_over_matmul_gemm_conv": 173, "check_config": [173, 292], "prune_config": [173, 292], "everyth": [173, 292, 595], "reset_none_to_default": 173, "undefin": [173, 292], "update_param": 173, "process_weight_config": 173, "global_config": [173, 277, 278, 280, 281, 282], "local_config": [173, 177, 178, 277, 278, 280, 281, 282], "default_config": 173, "pruners_info": 173, "process_yaml_config": 173, "check_key_valid": 173, "template_config": 173, "user_config": 173, "process_and_check_config": [173, 292], "process_config": [173, 292], "parse_last_linear": 173, "often": [173, 571, 574, 610, 612], "act": [173, 191, 235, 548], "might": [173, 550, 569, 622], "caus": [173, 591, 612], "drop": [173, 264, 292, 317, 587, 588, 601, 612, 625], "parse_to_prun": [173, 292], "keep": [173, 292, 338, 550, 554, 606, 607, 617], "generate_pruner_config": 173, "dotdict": [173, 174, 178, 332, 364], "prunerv2": 174, "pruning_typ": [174, 177, 178, 587, 612], "pruning_scop": [174, 177, 178, 587, 612], "sparsity_decay_typ": [174, 177, 178, 587, 612], "pruning_op_typ": [174, 177, 178, 587, 612], "reg_typ": 174, "criterion_reduce_typ": 174, "resume_from_pruned_checkpoint": 174, "similiar": 174, "cfg_fname": 174, "parser": [174, 313, 377, 382, 500, 508, 538], "quantization_conf": 174, "pruning_conf": 174, "graph_optimization_conf": [174, 259], "mixedprecision_conf": 174, "benchmark_conf": 174, "nasconfig": [174, 178, 272, 274, 551], "approach": [174, 177, 178, 271, 272, 274, 527, 550, 551, 553, 571, 572, 574, 583, 587, 595, 607, 613, 614, 622, 624], "search_spac": [174, 178, 271, 274, 275, 276], "search_algorithm": [174, 178, 260, 273, 313, 551], "na": [174, 178, 260, 313, 326, 583], "procedur": [174, 551, 612], "deep_get": [175, 332], "dot": [175, 519, 588, 615], "nest": 175, "eg": [175, 195, 239, 572, 614], "person": [175, 548, 613], "john": 175, "deep": [175, 553, 554, 571, 583, 584, 587, 588, 590, 592, 595, 596, 598, 601, 607, 613, 615, 622, 623, 625], "deep_set": [175, 332], "sex": [175, 548], "male": 175, "instead": [175, 178, 192, 236, 364, 593, 595, 598, 612], "notat": [175, 178, 364], "pythonic_config": 176, "random_se": [177, 178, 300, 337, 587, 624], "1978": [177, 178], "workspac": [177, 178, 363, 364, 445, 518, 529, 589], "default_workspac": [177, 178], "resume_from": [177, 178, 364], "tensorboard": [177, 178, 357, 364, 554, 587], "set_random_se": [177, 178, 364], "set_workspac": [177, 178, 364], "set_resume_from": [177, 178, 364], "set_tensorboard": [177, 178, 364], "directori": [177, 178, 194, 195, 238, 239, 330, 360, 363, 364, 428, 519, 572, 576, 579, 600, 602, 604, 605, 620], "histori": [177, 178, 363, 364, 404, 417, 470, 488, 538, 607, 622], "nc_workspac": [177, 178], "datetim": [177, 178], "now": [177, 178, 210, 252, 550, 551, 572, 576, 598, 614, 621, 622], "strftime": [177, 178], "d_": [177, 178], "h": [177, 178, 210, 252, 576, 621], "resum": [177, 178, 181, 182, 225, 226, 305, 306, 334, 337, 338, 342, 344, 345], "wa": [177, 178, 554, 569, 587, 613, 622], "flag": [177, 178, 262, 315], "visual": [177, 178, 553, 598, 607, 618, 620, 622, 623], "displai": [177, 178, 309, 310, 348, 349, 364, 435, 607], "workspace_path": [177, 178, 504, 519], "accuracycriterion": [177, 178, 487, 587, 622], "higher_is_bett": [177, 178, 586, 622, 624], "rel": [177, 178, 332, 587, 614, 622, 624, 625], "tolerable_loss": [177, 178, 587, 622], "01": [177, 178, 587, 611, 614, 622, 624, 625], "higher": [177, 178, 181, 182, 225, 226, 275, 322, 333, 354, 550, 574, 578, 586, 612, 615, 618], "accuracy_criterion": [177, 178, 332, 587, 609, 614, 622, 624], "warmup": [177, 178, 570, 587, 614], "inter_num_of_thread": [177, 178, 587, 614], "intra_num_of_thread": [177, 178, 587, 614], "benchmark": [177, 178, 213, 260, 297, 313, 332, 364, 385, 392, 405, 416, 417, 440, 500, 501, 511, 517, 534, 539, 553, 559, 589, 590, 594, 598, 601, 607, 622, 623, 624, 625], "empti": [177, 178, 593], "onnxrt_trt_ep": [177, 178, 615], "onnxrt_cuda_ep": [177, 178, 588, 615], "inter": [177, 178, 191, 195, 235, 239], "intra": [177, 178], "quantizationconfig": 177, "post_training_static_qu": [177, 571, 572, 587, 614, 622], "calibration_sampling_s": [177, 178, 587], "op_type_dict": [177, 178, 614, 615, 622], "op_name_dict": [177, 178, 587, 615, 622], "strategy_kwarg": [177, 178, 618, 622], "timeout": [177, 178, 587, 614, 622, 624], "max_trial": [177, 178, 587, 622], "quant_level": [177, 178, 622], "use_distributed_tun": [177, 178, 622], "posttrainingquantconfig": [177, 178, 333, 550, 553, 571, 581, 587, 589, 615, 616, 618, 619, 622], "quantizationawaretrainingconfig": [177, 178, 354, 550, 575, 587, 615, 616, 622], "requir": [177, 178, 297, 330, 366, 368, 380, 435, 441, 466, 473, 474, 475, 476, 478, 479, 480, 482, 485, 486, 491, 496, 500, 550, 554, 569, 570, 571, 575, 576, 580, 587, 588, 589, 591, 601, 607, 611, 612, 615, 617, 618, 619, 620, 622, 624], "cv": [177, 178, 612], "object_detect": [177, 178, 264, 317], "nlp": [177, 178, 294, 595, 612, 615], "recommendation_system": [177, 178], "adaptor": [177, 178, 312, 351, 357, 553, 583, 616, 617, 619, 620, 623], "explicitli": [177, 178, 582, 612], "overrid": [177, 178, 364], "quantiztaion": [177, 178], "smooth_quant_arg": [177, 178, 615, 619], "gemm_to_matmul": [177, 178, 615], "graph_optimization_level": [177, 178, 614, 615], "disable_al": [177, 178, 614], "enable_bas": [177, 178], "enable_extend": [177, 178], "enable_al": [177, 178], "first_conv_or_matmul_quant": [177, 178, 615], "last_conv_or_matmul_quant": [177, 178, 615], "pre_post_process_quant": [177, 178, 615], "preprocess": [177, 178, 193, 210, 237, 252, 357, 576, 621], "postprocess": [177, 178, 204, 207, 210, 214, 252, 260, 313, 357, 522, 554, 587, 620, 621], "vaild": [177, 178], "dedic": [177, 178], "quant_format": [177, 178, 257, 578], "constraint": [177, 178, 259, 296, 587, 612, 618, 622, 624], "reduc": [177, 178, 554, 575, 587, 588, 607, 608, 612, 613, 615, 616, 619, 622, 624], "layer1": [177, 178, 587, 612, 615], "conv1": [177, 178, 615, 624], "tuning_strategi": [177, 178], "guarante": [177, 178, 587], "models": [177, 178, 332, 587, 609, 614], "footprint": [177, 178, 259, 283, 288, 296, 332, 575, 587, 609, 612, 614], "earli": [177, 178, 587, 615, 622, 624], "stop": [177, 178, 587, 622, 623, 624], "field": [177, 178, 195, 239, 264, 317, 550, 554, 569, 576, 587, 618, 622, 624], "exit": [177, 178, 299, 334, 336, 569, 587, 588, 624], "bit": [177, 178, 575, 588, 613, 615, 619], "excluded_precis": [177, 178, 616], "exclud": [177, 178, 554, 588, 616], "conserv": [177, 178, 313, 341], "weightpruningconfig": [177, 178, 222, 587, 610, 612], "pruning_config": [177, 178, 587], "9": [177, 178, 550, 584, 587, 612, 614, 619, 622, 624], "98": [177, 178, 587, 612, 614, 625], "exp": [177, 178, 587, 612], "link": [177, 178, 193, 237, 569, 572, 600, 604, 607, 625], "90": [177, 178, 624, 625], "magnitude_progress": [177, 178], "snip_progress": [177, 178], "snip_momentum_progress": [177, 178], "pattern_lock": [177, 178, 260, 279, 313], "most": [177, 178, 268, 321, 569, 587, 588, 612, 615, 619, 622], "feasibl": [177, 178], "situat": [177, 178, 576, 612], "unstructur": [177, 178, 287, 583, 612, 625], "8x1": [177, 178], "channelx1": [177, 178, 612], "1xchannel": [177, 178, 612], "itrex": [177, 178], "start": [177, 178, 210, 252, 264, 317, 338, 584, 621, 622, 623, 626], "togeth": [177, 178, 210, 252, 574, 584, 594, 613, 620, 621], "sort": [177, 178, 303, 342, 428, 622], "sinc": [177, 178, 259, 261, 283, 288, 296, 314, 574, 578, 584, 586, 601, 607, 610], "lead": [177, 178, 519, 574, 587, 588, 612, 619], "increas": [177, 178, 573, 583, 590, 607, 622], "cube": [177, 178, 612], "6": [177, 178, 553, 569, 580, 615, 619, 622, 625], "update_config": [177, 178], "10": [177, 178, 195, 239, 300, 337, 553, 569, 570, 572, 584, 587, 612, 614, 621, 622, 625], "knowledgedistillationlossconfig": [177, 178, 574, 575, 587, 610], "hyperparamet": [177, 178, 309, 618, 619, 622], "entropi": [177, 178, 622], "length": [177, 178, 193, 210, 237, 252, 264, 317, 553, 572, 586, 613, 615, 621], "groundtruth": [177, 178, 264, 317], "label": [177, 178, 181, 182, 193, 195, 196, 197, 198, 201, 206, 210, 215, 225, 226, 237, 239, 240, 241, 242, 245, 249, 252, 261, 263, 268, 314, 316, 321, 322, 333, 354, 436, 550, 571, 572, 586, 587, 615, 621], "tpye": [177, 178], "sum": [177, 178, 268, 321, 574], "distillationconfig": [177, 178, 354, 574, 575, 587, 610], "prepare_compress": [177, 178, 354, 550, 574, 575, 587, 610, 612, 615], "criterion_conf": [177, 178], "d_conf": [177, 178, 575, 587, 610], "compression_manag": [177, 178, 354, 550, 574, 575, 587, 610, 612, 615], "sgd": [177, 178, 217, 574, 587, 614, 624], "learning_r": [177, 178, 587, 614, 624], "callabl": [177, 178, 266, 319, 354, 515, 519, 535, 536], "featur": [177, 178, 193, 194, 206, 210, 237, 238, 249, 252, 549, 553, 570, 571, 573, 574, 587, 588, 589, 590, 594, 595, 598, 607, 612, 613, 617, 621], "altern": [177, 178, 333], "distil_loss": [177, 178, 587], "crossentropyloss": [177, 178, 212, 574, 587], "lr": [177, 178, 574, 576, 587], "tuningcriterion": [178, 587, 609, 618, 622], "tuning_criterion": [178, 587, 609, 618, 622], "ptq": [178, 333, 550, 576, 583, 587, 615, 619, 620, 622], "tri": [178, 622], "meet": [178, 297, 299, 334, 336, 550, 578, 609, 613, 614, 615, 620, 622], "bayesian": [178, 260, 276, 302, 313, 341, 551, 614], "mse_v2": [178, 260, 302, 313, 341], "hawq_v2": [178, 313, 341], "exhaust": [178, 260, 276, 302, 313, 341, 614], "docstr": [178, 352], "copi": [178, 292, 364], "deepcopi": 178, "model_origin": [178, 333, 616], "qat_op_name_dict": 178, "intermediatelayersknowledgedistillationlossconfig": [178, 574], "relationship": 178, "student_layer_nam": 178, "student_layer_output_process": 178, "teacher_layer_nam": 178, "teacher_layer_output_process": 178, "desir": [178, 206, 210, 249, 252, 621], "either": [178, 264, 317, 591, 595, 610, 614, 615], "serv": [178, 330, 536], "numer": [178, 268, 321, 588, 613, 615], "abbrevi": 178, "layer_nam": 178, "l1": 178, "selfknowledgedistillationlossconfig": [178, 574, 587], "student1_layer_name1": 178, "teacher_layer_name1": 178, "student2_layer_name1": 178, "student1_layer_name2": 178, "teacher_layer_name2": 178, "student2_layer_name2": 178, "soft": 178, "l2": [178, 612], "hard": [178, 571], "resblock": 178, "deepst": 178, "fc": 178, "02": [178, 619, 625], "mixedprecisionconfig": [178, 322, 352, 587, 588], "mixedprecis": [178, 269, 477, 525, 587], "fp16": [178, 310, 349, 588, 615], "won": [178, 615], "work": [178, 259, 296, 552, 571, 574, 602, 605, 612, 616, 617, 619, 620], "mix_precis": [178, 313, 352, 587, 588], "converted_model": [178, 322, 587, 588], "exportconfig": 178, "dynamic_ax": [178, 257, 578], "qlinear": [178, 195, 202, 239, 246, 268, 321, 554, 578, 597, 625], "ax": [178, 257], "onnxqlinear2qdqconfig": 178, "onnxqlinear2qdq": 178, "torch2onnxconfig": [178, 578], "qdq_op_fp32_bia": [178, 257, 578], "torch2onnx": [178, 254, 260, 313], "qdq_op_int32_bia": [178, 257, 578], "qdq_op_fp32_bias_qdq": [178, 257, 578], "resnet50": [178, 553, 576, 581, 590, 594, 612, 615, 618, 625], "int8_onnx_config": [178, 578], "randn": [178, 578], "224": [178, 206, 249, 553, 571, 572, 576, 578, 581, 587, 590, 621, 624, 625], "batch_siz": [178, 183, 185, 188, 190, 191, 192, 193, 194, 213, 227, 229, 232, 234, 235, 236, 237, 238, 257, 551, 571, 572, 576, 578, 582, 587, 590, 615], "tf2onnxconfig": 178, "tf2onnx": [178, 254, 260, 313], "keyword": 178, "argument": [178, 352, 366, 474, 478, 483, 486, 492, 551], "output_graph": [178, 474, 478, 483, 486], "42": [178, 276, 611, 625], "dyna": [178, 260, 273, 313, 551, 583, 614], "sigopt": [179, 180, 223, 224, 260, 313, 613], "tpe": [179, 180, 223, 224, 260, 313], "sigopttunestrategi": [181, 225], "q_dataload": [181, 182, 225, 226, 300, 303, 305, 306, 334, 337, 338, 342, 344, 345, 582, 622], "eval_func": [181, 182, 225, 226, 297, 300, 303, 305, 306, 322, 333, 334, 337, 338, 342, 344, 345, 352, 354, 550, 571, 572, 574, 575, 576, 587, 615, 616, 622, 624], "eval_metr": [181, 182, 322, 333, 334, 337, 338, 342, 344, 345, 354, 615], "q_hook": [181, 182, 225, 226, 300, 303, 305, 306, 334, 337, 338, 342, 344, 345], "hpo": [181, 225], "mandatori": [181, 182, 225, 226, 333, 587, 624], "yield": [181, 182, 191, 213, 225, 226, 235, 300, 322, 333, 337, 352, 354, 571, 615, 622], "_": [181, 182, 225, 226, 333, 550, 551, 554, 569, 574, 576, 580, 586, 587, 588, 589, 590, 596, 600, 602, 604, 605, 609, 612, 615, 617, 618, 619, 620, 622, 624], "taken": [181, 182, 225, 226, 322, 333, 354, 615], "reserv": [181, 182, 225, 226], "abl": [181, 182, 225, 226, 322, 333, 354, 598, 607, 615], "tuner": [181, 182, 225, 226, 259, 296, 322, 333, 354, 615], "scalar": [181, 182, 225, 226, 322, 333, 354, 586, 615], "pseudo": [181, 182, 225, 226, 333, 354, 620], "someth": [181, 182, 195, 225, 226, 239, 333, 354], "fefin": [182, 226], "tpetunestrategi": [182, 226], "basedatalod": [183, 227], "basedataload": [183, 188, 190, 227, 232, 234], "last_batch": [183, 185, 188, 190, 192, 213, 227, 229, 232, 234, 236], "rollov": [183, 185, 188, 190, 192, 213, 227, 229, 232, 234, 236], "collate_fn": [183, 185, 186, 188, 190, 192, 213, 227, 229, 230, 232, 234, 236, 572], "sampler": [183, 185, 187, 188, 190, 192, 213, 227, 229, 231, 232, 234, 236, 248, 260, 309, 348, 576], "batch_sampl": [183, 185, 188, 190, 192, 213, 227, 229, 232, 234, 236], "num_work": [183, 185, 188, 190, 192, 213, 227, 229, 232, 234, 236, 587, 615], "pin_memori": [183, 185, 188, 190, 192, 213, 227, 229, 232, 234, 236], "shuffl": [183, 185, 188, 190, 192, 213, 227, 229, 232, 234, 236, 587, 615], "_generate_dataload": [183, 227], "default_col": [185, 229], "outer": [185, 229], "defaultdataload": [185, 192, 229, 236], "definit": [186, 191, 230, 235, 433, 446, 455, 504, 535], "style": [186, 200, 230, 244, 352, 549, 572, 582], "drop_last": [186, 191, 230, 235], "iterablefetch": [186, 230], "indexfetch": [186, 230], "base_dataload": [187, 231, 248, 260], "default_dataload": [187, 231, 248, 260], "fetcher": [187, 231, 248, 260], "mxnet_dataload": [187, 231, 248, 260], "onnxrt_dataload": [187, 231, 248, 260], "pytorch_dataload": [187, 231, 248, 260], "tensorflow_dataload": [187, 231, 248, 260], "mxnetdataload": [188, 232], "onnxrtbertdataload": [189, 233], "varient": [189, 233], "onnxrtdataload": [189, 233], "pytorchdataload": [190, 234], "data_sourc": [191, 235, 357], "__iter__": [191, 195, 235, 239, 571, 572, 587], "matter": [191, 235, 616], "iterablesampl": [191, 235], "squential": [191, 235], "your": [191, 193, 235, 237, 549, 569, 572, 576, 578, 584, 585, 587, 590, 593, 594, 595, 600, 601, 602, 604, 605, 607, 612, 618, 620, 622], "clear": [191, 235, 554, 580, 586, 587], "iterabledataset": [191, 195, 235, 239], "try": [191, 235, 550, 578, 612, 615, 619, 622], "indexdataset": [191, 235], "__getitem__": [191, 195, 210, 235, 239, 252, 572, 587], "__len__": [191, 195, 235, 239, 572], "retriev": [191, 235, 513], "sequentialsampl": [191, 235], "sequenti": [191, 235, 297, 299, 334, 336, 622], "batchsampl": [191, 235], "tfdatadataload": [192, 236], "tensorflow1": [192, 236], "coupl": [192, 236], "satisfi": [192, 236, 584], "usag": [192, 236, 264, 270, 297, 317, 352, 519, 569, 572, 576, 577, 586, 590, 598, 609, 614, 621], "tf1": [192, 236, 589], "although": [192, 236, 618], "tensorflowbertdataload": [192, 236], "tensorflowmodelzoobertdataload": [192, 236], "zoo": [192, 210, 236, 252, 553, 577, 581, 625], "tensorflowdataload": [192, 236], "pytorchbertdataset": [193, 237], "model_typ": [193, 237, 449, 572], "construct": [193, 196, 197, 200, 208, 213, 215, 216, 218, 237, 240, 241, 244, 321, 326, 330, 357, 548, 572, 576, 612, 622], "tensordataset": [193, 237, 572], "repo": [193, 237, 547, 572, 577, 600, 602, 604, 605, 626], "easi": [193, 237, 296, 569, 571, 578, 587, 613, 615, 618], "load": [193, 209, 210, 237, 251, 252, 322, 330, 333, 363, 364, 492, 519, 571, 600, 604, 608, 614, 615, 619], "squad": [193, 210, 237, 252, 265, 266, 268, 318, 319, 321, 572, 586, 612, 621, 625], "distilbert": [193, 237, 553, 572, 613, 625], "xlnet": [193, 237, 572], "xlm": [193, 237, 572, 625], "101": [193, 237, 268, 321, 586, 619, 625], "2043": [193, 237], "2001": [193, 237], "onnxrtbertdataset": [193, 237], "data_dir": [193, 237, 572], "model_name_or_path": [193, 237, 572, 587, 595, 596], "max_seq_length": [193, 210, 237, 252, 572, 621], "do_lower_cas": [193, 209, 210, 237, 251, 252, 572, 621], "mrpc": [193, 237, 268, 321, 572, 586, 595, 612, 622, 625], "dynamic_length": [193, 237, 572], "shortcut": [193, 237, 572], "token": [193, 204, 207, 210, 237, 248, 250, 252, 260, 261, 262, 313, 314, 315, 360, 536, 569, 572, 586, 587, 618, 619, 621, 622], "longer": [193, 210, 237, 252, 572, 621], "truncat": [193, 210, 237, 252, 572, 621], "shorter": [193, 210, 237, 252, 572, 621], "lowercas": [193, 237, 572], "choic": [193, 237, 554, 569, 572, 586, 619], "qqp": [193, 237, 572, 586, 625], "qnli": [193, 237, 572, 586, 625], "rte": [193, 237, 572, 586, 625], "st": [193, 237, 572, 586], "cola": [193, 237, 572, 586, 625], "mnli": [193, 237, 572, 586, 625], "wnli": [193, 237, 572, 586, 625], "mobilebert": [193, 237, 572, 574, 625], "roberta": [193, 237, 572, 625], "uncas": [193, 210, 237, 252, 572, 621, 625], "load_and_cache_exampl": [193, 237], "cach": [193, 237, 449, 536, 579, 615], "convert_examples_to_featur": [193, 210, 237, 252], "max_length": [193, 237], "label_list": [193, 237, 268, 321], "output_mod": [193, 237], "classif": [193, 210, 237, 252, 268, 294, 321, 574, 578, 581, 586, 596, 612, 613], "pad_token": [193, 237], "pad_token_segment_id": [193, 237], "mask_padding_with_zero": [193, 237], "inputfeatur": [193, 210, 237, 252], "properti": [193, 237, 436, 585, 611], "input_id": [193, 210, 237, 252, 587], "vocabulari": [193, 209, 210, 237, 251, 252, 621], "attention_mask": [193, 237, 587], "usual": [193, 237, 574, 610, 612, 615, 619], "NOT": [193, 237, 580, 584], "token_type_id": [193, 237, 587], "segment": [193, 237, 262, 264, 315, 317], "portion": [193, 237], "problem": [193, 237, 268, 321, 586, 588, 608], "regress": [193, 237], "seq_length": [193, 237], "tensorflowbertdataset": [193, 237], "label_fil": [193, 210, 237, 252, 572, 621], "tfrecord": [193, 194, 195, 237, 238, 239, 572], "guid": [193, 237, 550, 553, 572, 574, 584, 590, 598, 607, 626], "parsedecodebert": [193, 237], "tensorflowmodelzoobertdataset": [193, 194, 237, 238], "num_cor": [193, 194, 198, 237, 238, 242, 572], "28": [193, 194, 198, 237, 238, 242, 572, 625], "coco": [194, 201, 205, 238, 245, 264, 268, 317, 321, 586, 612], "parsedecodecoco": [194, 238], "cocorecorddataset": [194, 238], "interleav": [194, 238, 572], "parallel": [194, 238, 572, 587, 622], "cocoraw": [194, 238, 571, 572], "img_dir": [194, 238, 572], "val2017": [194, 238, 572], "anno_dir": [194, 238, 572], "annot": [194, 238, 264, 317, 352, 572, 586, 612], "instances_val2017": [194, 238, 572], "raw": [194, 198, 201, 238, 242, 245, 303, 342, 581, 586, 622], "jpg": [194, 198, 200, 238, 242, 244, 572], "imag": [194, 195, 198, 200, 206, 210, 238, 239, 242, 244, 249, 252, 264, 317, 569, 572, 576, 578, 612, 614, 619, 620, 621, 625], "coconpi": [194, 238, 572], "npy_dir": [194, 238, 572], "npy": [194, 238, 572], "tensorflowdataset": [195, 239], "pytorchdataset": [195, 239], "mxnetdataset": [195, 239], "onnxrtqldataset": [195, 239], "onnxrtitdataset": [195, 239], "IT": [195, 202, 239, 246, 613], "pytorchmxnetwrapdataset": [195, 239], "datafunc": [195, 239], "pytorchmxnetwrapfunct": [195, 210, 239, 252], "framework_dataset": [195, 239], "convent": [195, 239, 264, 317, 574], "imageclassifi": [195, 239], "choos": [195, 239, 569, 583, 584, 595, 617, 619, 622, 624], "tensorflow_itex": [195, 198, 200, 202, 239, 242, 244, 246, 614], "onnxrt_qdq": [195, 202, 239, 246, 614], "onnxrt_qlinearop": [195, 202, 210, 239, 246, 252, 614], "onnxrt_integerop": [195, 202, 210, 239, 246, 252, 614], "pytorch_ipex": [195, 202, 239, 246, 587, 614, 624], "pytorch_fx": [195, 202, 239, 246, 587, 614], "dataset_registri": [195, 239], "dataset_typ": [195, 239], "dataset_format": [195, 239], "data_format": [195, 206, 239, 249], "raw_imag": [195, 239], "overwrit": [195, 239, 600, 604], "download_url": [195, 239], "filenam": [195, 239, 364, 488, 512, 519, 572], "md5": [195, 239], "download": [195, 239, 440, 463, 464, 466, 467, 500, 569, 572, 584, 617], "address": [195, 239, 536, 548, 569, 588, 613], "gen_bar_updat": [195, 239], "bar": [195, 239, 553, 569, 607, 613], "check_integr": [195, 239], "fpath": [195, 239], "checksum": [195, 239], "calculate_md5": [195, 239], "chunk_siz": [195, 239], "cifar10": [195, 239, 572], "cifar100": [195, 239, 572], "otherwis": [195, 210, 239, 252, 364, 548, 572, 602, 605, 614, 621], "www": [195, 239, 572, 625], "toronto": [195, 239, 572], "kriz": [195, 239, 572], "cifar": [195, 239, 572, 625], "tar": [195, 239, 572, 602, 605], "gz": [195, 239, 572, 602, 605], "manual": [195, 239, 572, 590, 596, 598, 601], "subset": [195, 198, 239, 242, 572], "internet": [195, 239, 569, 572], "put": [195, 239, 572, 574], "again": [195, 239, 572, 616], "pytorchcifar10": [195, 239], "mxnetcifar10": [195, 239], "tensorflowcifar10": [195, 239], "pytorchcifar100": [195, 239], "mxnetcifar100": [195, 239], "tensorflowcifar100": [195, 239], "mnist": [195, 239, 572, 576], "modifi": [195, 222, 239, 498, 550, 569, 576, 580, 612, 624], "nation": [195, 239, 548], "institut": [195, 239], "standard": [195, 210, 239, 252, 578, 586, 621, 622], "technologi": [195, 239, 587, 611], "fashionmnist": [195, 239, 572], "npz": [195, 239, 572], "idx1": [195, 239, 572], "ubyt": [195, 239, 572], "idx3": [195, 239, 572], "t10k": [195, 239, 572], "pytorchmnist": [195, 239], "mxnetmnist": [195, 239], "tensorflowmnist": [195, 239], "pytorchfashionmnist": [195, 239], "mxnetfashionmnist": [195, 239], "tensorflowfashionmnist": [195, 239], "imagefold": [195, 239, 572, 576, 587], "expect": [195, 239, 367, 489, 548, 549, 579, 607, 615, 622], "subfold": [195, 239], "belong": [195, 239, 257, 326, 615], "class_1": [195, 239, 572], "xxx": [195, 239, 549, 572, 587], "png": [195, 239, 572], "xxy": [195, 239, 572], "xxz": [195, 239, 572], "class_n": [195, 239, 572], "123": [195, 239, 572, 621], "nsdf3": [195, 239, 572], "asd932_": [195, 239, 572], "categori": [195, 239, 263, 316, 570, 572, 597], "mxnetimagefold": [195, 239], "tensorflowtfrecorddataset": [195, 239], "tensorflowimagerecord": [195, 239], "imagenet": [195, 198, 206, 239, 242, 249, 551, 569, 587, 596, 612, 620, 621, 624, 625], "000": [195, 239, 553, 572], "001": [195, 239, 572, 576, 619, 624], "099": [195, 239, 572], "tensorflowvocrecord": [195, 239], "pascal": [195, 239], "voc": [195, 239, 268, 321], "2012": [195, 239], "00000": [195, 239], "00004": [195, 239], "00001": [195, 239], "00003": [195, 239], "dummydataset": [196, 197, 240, 241], "127": [196, 197, 240, 241, 572, 615, 619], "float32": [196, 197, 210, 240, 241, 252, 264, 317, 554, 570, 572, 587, 615, 619, 621], "rang": [196, 197, 210, 240, 241, 252, 352, 354, 553, 554, 572, 574, 575, 576, 587, 610, 612, 615, 619, 621], "stand_norm": [196, 197, 240, 241, 572], "dummy_v2": [197, 241, 571, 572], "sparse_dummy_v2": [197, 241, 572], "label_shap": [197, 241, 572], "sparsedummydataset": [197, 241], "dense_shap": [197, 241, 572], "sparse_ratio": [197, 241, 572], "imagenetraw": [198, 242, 572], "data_path": [198, 242, 572], "image_list": [198, 242, 572], "img1": [198, 242, 572], "img2": [198, 242, 572], "imgx": [198, 242, 572], "val_map": [198, 242, 572], "txt": [198, 242, 569, 572, 584], "pytorchimagenetraw": [198, 242], "mxnetimagenetraw": [198, 242], "tensorflowimagenetraw": [198, 242], "inteltensorflow": [198, 200, 242, 244, 584], "tensorflowimagenetdataset": [198, 242], "onnxrtimagenetdataset": [198, 242], "bert_dataset": [199, 204, 243, 248, 260, 313], "coco_dataset": [199, 204, 243, 248, 260, 313], "dummy_dataset": [199, 204, 243, 248, 260, 313], "dummy_dataset_v2": [199, 204, 243, 248, 260, 313], "imagenet_dataset": [199, 204, 243, 248, 260, 313], "style_transfer_dataset": [199, 204, 243, 248, 260, 313], "styletransferdataset": [200, 244], "content_fold": [200, 244, 572], "style_fold": [200, 244, 572], "crop_ratio": [200, 244, 572], "resize_shap": [200, 244, 572], "256": [200, 206, 244, 249, 572, 576, 587, 621], "image_format": [200, 244, 572], "holder": [200, 244, 572], "labelbalancecocorecordfilt": [201, 245], "balanc": [201, 245, 611, 619], "labelbalancecocorawfilt": [201, 245], "tensorflowfilt": [202, 246], "onnxrtqlfilt": [202, 246], "onnxrtitfilt": [202, 246], "pytorchfilt": [202, 246], "mxnetfilt": [202, 246], "filter_registri": [202, 246], "filter_typ": [202, 246], "__call__": [202, 246], "coco_filt": [203, 204, 247, 248, 260, 313], "imagenet_transform": [204, 207, 248, 250, 260, 313], "parsedecodecocotransform": 205, "decod": [205, 206, 249, 261, 314, 586, 621], "quantizedinput": [206, 249, 621], "labelshift": [206, 249, 621], "label_shift": [206, 249, 621], "parsedecodeimagenet": [206, 249, 621], "proto": [206, 210, 249, 252, 621], "parsedecodeimagenettransform": [206, 249], "tensorflowresizecropimagenettransform": [206, 249], "random_crop": [206, 249, 621], "resize_sid": [206, 249, 621], "resize_method": [206, 249], "bilinear": [206, 210, 249, 252, 621], "random_flip_left_right": [206, 249, 621], "mean_valu": [206, 249, 621], "channels_last": [206, 249, 590], "subpixel": [206, 249], "rgb": [206, 249], "seri": [206, 249, 553, 584, 587, 621], "applic": [206, 249, 503, 534, 536, 569, 578, 590, 607, 613, 619, 620, 621], "crop": [206, 210, 249, 252, 572, 621], "flip": [206, 210, 249, 252, 621], "left": [206, 210, 249, 252, 569, 601, 607, 619, 621], "right": [206, 249, 264, 317, 548, 550, 569, 607, 619, 621], "std": [206, 210, 249, 252, 587, 621], "bilinearimagenettransform": [206, 249], "central_fract": [206, 249, 621], "875": [206, 249, 621], "fraction": [206, 249, 621], "onnxbilinearimagenettransform": [206, 249], "onnxresizecropimagenettransform": [206, 249], "std_valu": [206, 249], "229": [206, 249, 587, 625], "225": [206, 249, 587, 625], "resizewithaspectratio": [206, 249], "87": [206, 249, 625], "inter_pol": [206, 249], "cv2": [206, 249], "inter_area": [206, 249], "aspect": [206, 210, 249, 252, 621], "postprocess_cl": [208, 218, 587], "user_postprocess": [208, 218], "convert_to_unicod": [209, 251], "unicod": [209, 251], "assum": [209, 251, 264, 275, 317, 554, 580, 607], "utf": [209, 251], "load_vocab": [209, 251], "vocab_fil": [209, 210, 251, 252, 621], "convert_by_vocab": [209, 251], "vocab": [209, 251], "whitespace_token": [209, 251], "whitespac": [209, 251, 266, 319], "clean": [209, 251, 405, 549, 587], "piec": [209, 251, 261, 314, 578, 586], "fulltoken": [209, 251], "tokenzi": [209, 251], "basictoken": [209, 251], "punctuat": [209, 251, 261, 266, 314, 319], "lower": [209, 210, 251, 252, 266, 319, 338, 519, 575, 612, 613, 615, 619, 621, 622], "wordpiecetoken": [209, 251], "unk_token": [209, 251], "unk": [209, 251], "max_input_chars_per_word": [209, 251], "200": [209, 251, 550, 622], "wordpiec": [209, 210, 251, 252, 621], "concat_gener": [210, 252], "inc": [210, 252, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 548, 553, 590, 597, 607, 613, 614, 617], "tensorflowtransform": [210, 252], "mxnettransform": [210, 252], "pytorchtransform": [210, 252], "onnxrtqltransform": [210, 252], "onnxrtittransform": [210, 252], "transform_registri": [210, 252], "transform_typ": [210, 252], "basetransform": [210, 252], "tensorflowwrapfunct": [210, 252], "transform_func": [210, 252], "pytorchmxnettransform": [210, 252], "get_torchvision_map": [210, 252], "torchvis": [210, 252, 569, 577, 581, 590, 596], "composetransform": [210, 252], "transform_list": [210, 252, 621], "compos": [210, 252, 357, 621], "croptoboundingbox": [210, 252, 621], "offset_height": [210, 252, 621], "offset_width": [210, 252, 621], "target_height": [210, 252, 621], "target_width": [210, 252, 621], "box": [210, 252, 264, 268, 317, 321, 550, 569, 586, 590, 601, 607, 620, 621, 622], "coordin": [210, 252, 300, 337, 621, 622], "top": [210, 252, 259, 268, 283, 288, 296, 321, 586, 607, 621], "corner": [210, 252, 554, 621], "horizont": [210, 252, 621], "mxnetcroptoboundingbox": [210, 252], "onnxrtcroptoboundingbox": [210, 252], "tensorflowcroptoboundingbox": [210, 252], "resizewithratio": [210, 252, 621], "min_dim": [210, 252, 621], "800": [210, 252, 621], "max_dim": [210, 252, 621], "1365": [210, 252, 621, 625], "constant_valu": [210, 252], "longest": [210, 252, 621], "side": [210, 252, 569, 572, 601, 621], "doesn": [210, 252, 554, 576, 587, 608, 624], "exce": [210, 252, 621], "tensorflowresizewithratio": [210, 252], "perm": [210, 252, 621], "permut": [210, 252, 621], "tensorflowtranspos": [210, 252], "mxnettranspos": [210, 252], "pytorchtranspos": [210, 252], "randomverticalflip": [210, 252, 621], "randomli": [210, 252, 276, 300, 337, 551, 619, 621, 622], "tensorflowrandomverticalflip": [210, 252], "randomhorizontalflip": [210, 252, 587, 621], "tensorflowrandomhorizontalflip": [210, 252], "toarrai": [210, 252, 621], "pil": [210, 252, 621], "casttftransform": [210, 252], "castonnxtransform": [210, 252], "castpytorchtransform": [210, 252], "centercroptftransform": [210, 252], "center": [210, 252, 552, 553, 584, 621, 622], "paddedcentercroptransform": [210, 252], "crop_pad": [210, 252], "resizetftransform": [210, 252], "nearest": [210, 252, 621], "bicub": [210, 252, 621], "resizepytorchtransform": [210, 252], "randomcroptftransform": [210, 252], "randomresizedcroppytorchtransform": [210, 252], "randomresizedcropmxnettransform": [210, 252], "randomresizedcroptftransform": [210, 252], "normalizetftransform": [210, 252], "rescal": [210, 252, 621], "deviat": [210, 252, 621], "broadcast": [210, 252, 576, 621], "rescalekeraspretraintransform": [210, 252], "rescaletftransform": [210, 252], "rescaletransform": [210, 252], "alignimagechanneltransform": [210, 252], "dim": [210, 252, 619, 621], "align": [210, 252, 548, 621], "w": [210, 252, 612, 619, 621], "must": [210, 252, 264, 317, 549, 550, 569, 570, 571, 584, 615, 621], "pytorchalignimagechannel": [210, 252], "tondarraytransform": [210, 252], "resizemxnettransform": [210, 252], "resizetransform": [210, 252], "cropresizetftransform": [210, 252], "boundari": [210, 252, 621], "area": [210, 252, 264, 317, 586, 621], "pytorchcropresizetransform": [210, 252], "mxnetcropresizetransform": [210, 252], "cropresizetransform": [210, 252], "centercroptransform": [210, 252], "mxnetnormalizetransform": [210, 252], "pytorchnormalizetransform": [210, 252], "normalizetransform": [210, 252], "randomcroptransform": [210, 252], "randomresizedcroptransform": [210, 252], "get_final_text": [210, 252], "pred_text": [210, 252], "orig_text": [210, 252], "project": [210, 252, 392, 415, 416, 440, 547, 548, 549, 613, 618, 622, 626], "squadexampl": [210, 252], "qas_id": [210, 252], "question_text": [210, 252], "doc_token": [210, 252], "orig_answer_text": [210, 252], "start_posit": [210, 252], "end_posit": [210, 252], "is_imposs": [210, 252], "simpl": [210, 252, 569, 584, 587, 618, 619, 622], "answer": [210, 252, 265, 266, 318, 319, 548, 612, 621, 625], "posit": [210, 252, 548, 569, 586, 590], "unique_id": [210, 252], "example_index": [210, 252], "doc_span_index": [210, 252], "token_to_orig_map": [210, 252], "token_is_max_context": [210, 252], "input_mask": [210, 252, 587], "segment_id": [210, 252, 587], "read_squad_exampl": [210, 252], "input_fil": [210, 252], "doc_strid": [210, 252, 621], "max_query_length": [210, 252, 621], "output_fn": [210, 252], "inputbatch": [210, 252], "collecttransform": [210, 252], "10833": [210, 252], "tfsquadv1posttransform": [210, 252], "n_best_siz": [210, 252, 621], "20": [210, 252, 611, 619, 621, 624, 625], "384": [210, 252, 621], "64": [210, 252, 551, 619, 621, 625], "max_answer_length": [210, 252, 621], "30": [210, 252, 577, 581, 583, 619, 621, 625], "nbest_predict": [210, 252, 621], "question": [210, 252, 265, 266, 318, 319, 548, 549, 554, 584, 590, 612, 619, 621, 625], "anoth": [210, 252, 261, 270, 314, 364, 574, 588, 600, 604, 621, 622], "long": [210, 252, 579, 621], "document": [210, 252, 352, 549, 559, 576, 588, 592, 602, 605, 606, 617, 621, 623], "chunk": [210, 252, 621], "tfmodelzoocollecttransform": [210, 252], "tfsquadv1modelzooposttransform": [210, 252], "squadv1": [210, 252, 621], "see": [210, 252, 261, 314, 548, 550, 552, 569, 585, 587, 600, 601, 604, 607, 608, 619, 620, 622, 625], "parsedecodevoctransform": [210, 252], "conf_fname_or_obj": [211, 220, 253, 259, 269, 270, 271, 272, 274, 283, 288, 296], "thei": [211, 352, 548, 574, 580, 586, 587, 588, 595, 609], "command": [211, 354, 504, 512, 569, 576, 590, 592, 595, 600, 604, 608], "possibl": [211, 381, 569, 610, 612, 616, 622], "unnecessari": [211, 587], "tensorflowcrossentropyloss": 212, "pytorchcrossentropyloss": 212, "tensorflowsparsecategoricalcrossentropi": 212, "sparsecategoricalcrossentropyloss": 212, "setter": 213, "calib_dataload": [213, 297, 333, 550, 553, 571, 572, 581, 582, 586, 587, 615, 616], "reason": [213, 548, 571, 620, 622], "know": [213, 505, 576, 617], "known": [213, 300, 337, 578, 587, 620, 622], "open": [214, 260, 313, 357, 546, 548, 553, 569, 578, 579, 587, 602, 605, 608, 613], "metric_cl": [215, 321, 587], "user_metr": [215, 321], "alwai": [215, 264, 317, 321, 586, 587], "recommend": [215, 321, 554, 572, 578, 580, 598, 601, 606, 608, 612, 614, 622], "set_backend": 216, "tensorflowoptim": 217, "pytorchoptim": 217, "optimizer_registri": 217, "optimizer_typ": 217, "cross": [217, 268, 321, 582, 622], "tensorflowsgd": 217, "tensorflowadamw": 217, "tensorflow_addon": 217, "adamw": 217, "tensorflowadam": 217, "adam": [217, 624], "pytorchsgd": 217, "record_output": 219, "output_process": 219, "help": [219, 270, 381, 519, 589, 590, 596, 607, 622, 623], "get_activ": 219, "f": [222, 574, 576, 615, 619], "pickle_modul": 222, "pickle_protocol": 222, "_use_new_zipfile_seri": 222, "prepare_prun": [222, 612], "opt": [222, 553, 595, 619], "tensorflowimagefold": 239, "qlinear2qdq": [254, 260, 313], "qlinearop": [255, 583, 598, 615], "check_model": 255, "modelproto": [255, 257, 322, 589], "onnx_qlinear_to_qdq": 255, "input_name_to_nod": 255, "destin": [255, 270], "tf_to_fp32_onnx": 256, "tf_to_int8_onnx": 256, "int8_model": [256, 257, 554], "update_weight_bia": 257, "fp32_onnx_path": [257, 258], "wegiht": 257, "set_data_typ": 257, "weight_typ": 257, "activation_typ": 257, "get_node_map": 257, "module_node_map": 257, "get_quantizable_onnx_op": 257, "quantize_nod": 257, "build_scale_map": 257, "int8_scale_info": 257, "scale_zp_dict": 257, "set_scale_info": 257, "int8_onnx_model": 257, "int8_onnx_path": 257, "recalculate_bia": 257, "recalcul": [257, 619], "remove_nodes_by_nam": 257, "sub_graph_with_int32_bia": 257, "a_info": 257, "b_info": 257, "bias_nam": 257, "int32": [257, 572], "nodeproto": 257, "_type_": 257, "qdq_fp32_bia": 257, "excut": 257, "qdq_int32_bia": 257, "qdq_fp32_bias_qdq": 257, "torch_to_fp32_onnx": 257, "do_constant_fold": 257, "verbos": [257, 300, 337], "torch_to_int8_onnx": 257, "u8s8": 257, "optionl": 257, "onnx2numpy_dtyp": 258, "onnx_node_typ": 258, "dummydataread": 258, "dataread": 258, "achiev": [259, 296, 578, 586, 587, 610, 612, 613, 615, 620, 622], "across": [259, 269, 296, 322, 573, 587, 612, 619, 622], "variou": [259, 269, 296, 322, 583, 590, 612, 614], "dl": [259, 269, 283, 288, 296, 322, 582, 594, 607, 613], "bring": [259, 296, 601, 615, 619], "unifi": [259, 296, 554, 571, 582, 583, 587, 589], "vari": [259, 283, 288, 296, 611, 612, 619, 625], "roc": [259, 268, 283, 288, 296, 321], "flexibl": [259, 283, 288, 296, 574, 612], "via": [259, 283, 288, 296, 536, 548, 576, 583, 587, 590, 607, 612], "popular": [260, 313, 546, 553, 554, 574, 577, 578, 581, 587, 612, 615, 622, 623], "compress": [260, 283, 288, 313, 332, 354, 546, 553, 559, 574, 583, 587, 607, 609, 610, 612, 613, 615, 619, 623, 625], "techniqu": [260, 313, 546, 553, 583, 587, 590, 610, 612, 614, 615, 623, 624, 625], "bleu": [260, 262, 267, 313, 315, 320, 586, 612], "bleu_util": [260, 267, 313, 320], "coco_label_map": [260, 267, 313, 320], "coco_tool": [260, 267, 313, 320], "evaluate_squad": [260, 267, 313, 320], "f1": [260, 265, 267, 268, 313, 318, 320, 321, 576, 586, 587, 618, 625], "basic_na": [260, 273, 313], "nas_util": [260, 273, 313], "pruner_legaci": [260, 313], "gradient_sensit": [260, 279, 313], "group_lasso": [260, 279, 313], "pruning_recip": [260, 313], "tile_pattern": [260, 284, 285], "pytorch_prun": [260, 313], "logger": [260, 289, 313, 355, 358, 364, 500, 508], "prune_util": [260, 289, 313], "tuning_sampl": [260, 302, 308, 313, 341, 347], "tuning_spac": [260, 302, 308, 309, 311, 313, 341, 347, 348, 350], "tuning_struct": [260, 302, 308, 309, 310, 313, 341, 347, 348, 349], "auto_mixed_precis": [260, 302, 313, 341], "graph_optim": [260, 313, 440, 475, 479, 480, 500, 508, 524], "mixed_precis": [260, 313, 322, 440, 475, 500, 508, 524, 587], "model_convers": [260, 313], "pruning_v2": [260, 313], "unicoderegex": [261, 314], "hoc": [261, 314], "hack": [261, 314], "recogn": [261, 314, 622], "nondigit_punct_r": [261, 314], "compil": [261, 314, 587, 611], "express": [261, 314, 548], "preced": [261, 314, 619], "digit": [261, 314, 613], "punct_nondigit_r": [261, 314], "symbol_r": [261, 314], "bleu_token": [261, 314], "mose": [261, 314], "smt": [261, 314], "mosesdecod": [261, 314], "mteval": [261, 314], "v14": [261, 314], "pl": [261, 314], "l954": [261, 314], "l983": [261, 314], "bilingu": [261, 314], "understudi": [261, 314], "qualiti": [261, 314], "machin": [261, 314, 379, 569, 578, 584, 593, 607, 613, 619, 620], "translat": [261, 262, 314, 315, 612, 622], "natur": [261, 314, 578], "approxim": [261, 262, 314, 315, 586], "glue": [261, 268, 314, 321, 572, 586, 587, 596], "word": [261, 314, 586, 612], "ngram": [261, 314, 586], "breviti": [261, 262, 314, 315, 586], "penalti": [261, 262, 314, 315, 586], "doe": [261, 314, 572, 586, 587, 617, 621], "beam": [261, 314, 586], "tensor2tensor": [262, 315], "bleu_hook": [262, 315], "compute_bleu": [262, 315], "reference_corpu": [262, 315], "translation_corpu": [262, 315], "max_ord": [262, 315], "use_bp": [262, 315], "against": [262, 315], "gram": [262, 315], "bleu_scor": [262, 315], "third": [264, 317, 569, 585], "parti": [264, 317, 585, 615], "pycocotool": [264, 317, 579, 584], "noth": [264, 317, 622], "thu": [264, 317, 587, 612, 615], "cannot": [264, 317, 507, 550, 578, 579, 588, 620], "jonathanhuang": [264, 317], "image_id": [264, 317, 586], "encod": [264, 317, 621], "invok": [264, 317], "groundtruth_dict": [264, 317], "exportgroundtruthtococo": [264, 317], "groundtruth_boxes_list": [264, 317], "groundtruth_classes_list": [264, 317], "max_num_class": [264, 317], "output_path": [264, 317], "detections_list": [264, 317], "exportdetectionstococo": [264, 317], "detection_boxes_list": [264, 317], "detection_scores_list": [264, 317], "detection_classes_list": [264, 317], "cocowrapp": [264, 317], "loadannot": [264, 317], "cocoevalwrapp": [264, 317], "agnostic_mod": [264, 317], "computemetr": [264, 317], "detection_typ": [264, 317], "bbox": [264, 317, 550, 586], "hold": [264, 300, 317, 337, 572], "iou_typ": [264, 317], "iou_thr": [264, 268, 317, 321, 586], "map_point": [264, 268, 317, 321, 586], "cocoev": [264, 317], "mscoco": [264, 317], "Then": [264, 317, 569, 600, 602, 604, 605, 619, 622], "exportsingleimagegroundtruthtococo": [264, 317], "next_annotation_id": [264, 317], "category_id_set": [264, 317], "groundtruth_box": [264, 317], "groundtruth_class": [264, 317], "groundtruth_mask": [264, 317], "groundtruth_is_crowd": [264, 317], "ingest": [264, 317], "ones": [264, 317, 612], "exportsingleimagedetectionstococo": [264, 317], "uniqu": [264, 297, 317, 406, 407, 615], "assign": [264, 317, 364, 569, 576, 614], "num_gt_box": [264, 317], "num_detect": [264, 268, 317, 321, 586, 587, 624], "image_height": [264, 317], "image_width": [264, 317], "detection_mask": [264, 317], "crowd": [264, 317], "insid": [264, 317, 574, 575, 608, 612, 622], "exportsingleimagedetectionboxestococo": [264, 317], "detection_box": [264, 317, 587, 624], "detection_scor": [264, 317, 587, 624], "detection_class": [264, 317, 587, 624], "exporsingleimagedetectionboxestococo": [264, 317], "exportsingleimagedetectionmaskstococo": [264, 317], "allenai": [265, 266, 318, 319], "bi": [265, 266, 318, 319], "att": [265, 266, 318, 319], "flow": [265, 266, 318, 319, 550, 551, 587], "f1_score": [265, 266, 318, 319], "ground_truth": [265, 266, 318, 319], "ground": [265, 266, 318, 319], "truth": [265, 266, 318, 319], "metric_max_over_ground_truth": [265, 266, 318, 319], "metric_fn": [265, 266, 318, 319], "exact_match_scor": [265, 318], "exact": [265, 318], "averag": [265, 266, 268, 318, 319, 321, 586, 587, 622], "articl": [265, 266, 318, 319], "paragraph": [265, 266, 318, 319], "qa": [265, 266, 318, 319], "cantain": [265, 266, 318, 319], "normalize_answ": [266, 319], "extra": [266, 319, 587], "newlin": [266, 319], "tab": [266, 319, 417, 535, 607, 620], "harmon": [266, 268, 319, 321], "recal": [266, 268, 319, 321], "answer_start": [266, 319], "177": [266, 319], "denver": [266, 319], "bronco": [266, 319], "nfl": [266, 319], "team": [266, 319, 548, 616], "afc": [266, 319], "super": [266, 319, 551], "bowl": [266, 319], "50": [266, 319, 551, 619, 625], "56be4db0acb8001400a502ec": [266, 319], "form": [266, 319, 569, 574, 607], "percentag": [266, 319, 624], "tensorflowmetr": [268, 321], "maintain": [268, 321, 548, 549, 553, 589, 590, 602, 605, 617], "pytorchmetr": [268, 321], "mxnetmetr": [268, 321], "onnxrtqlmetr": [268, 321], "onnxrtitmetr": [268, 321], "metric_registri": [268, 321], "metric_typ": [268, 321], "decorator_metr": [268, 321], "basemetr": [268, 321], "single_output": [268, 321], "hvd": [268, 321, 576], "wrappytorchmetr": [268, 321], "wrapmxnetmetr": [268, 321], "wraponnxrtmetr": [268, 321], "proport": [268, 321], "were": [268, 321, 593, 612], "pred_list": [268, 321], "pytorchloss": [268, 321], "mae": [268, 321, 586], "compare_label": [268, 321, 586], "actual": [268, 321, 576, 619], "rmse": [268, 321, 586, 622], "squar": [268, 303, 321, 342, 586, 619, 622], "tensorflowtopk": [268, 321], "k": [268, 321, 586], "among": [268, 321, 601, 619], "outcom": [268, 321], "num_correct": [268, 321], "num_sampl": [268, 321], "generaltopk": [268, 321], "cocomapv2": [268, 321, 586], "anno_path": [268, 321, 586], "map_kei": [268, 321], "detectionboxes_precis": [268, 321], "output_index_map": [268, 321, 586], "tensorflowmap": [268, 321], "tensorflowcocomap": [268, 321], "tensorflowvocmap": [268, 321], "squadf1": [268, 321, 586], "miou": [268, 321], "num_class": [268, 321], "21": [268, 321, 595, 596, 613, 619, 625], "iou": [268, 321], "intersect": [268, 321, 554, 586], "union": [268, 321, 354, 586], "onnxrtglu": [268, 321], "dlrm": [268, 321], "modelconvers": 270, "typic": [270, 297, 551, 553, 575, 577, 581, 612, 625], "basicna": 271, "model_build": [271, 274], "conf_fnam": 271, "nasbas": [274, 551], "nas_registri": 275, "nas_method": 275, "create_search_space_pool": 275, "idx": [275, 572], "enumer": [275, 354, 368, 469, 475, 501, 554, 574, 575, 576, 587, 610, 612, 620], "find_pareto_front": 275, "pareto": [275, 551], "front": [275, 551], "n_point": 275, "n_metric": 275, "n_pareto_point": 275, "gridsearch": 276, "grid": [276, 551], "whole": [276, 534, 569, 615], "randomsearch": 276, "bayesianoptimizationsearch": 276, "gradientsensitivityprun": 277, "pytorchmodel": [277, 278, 280, 281, 282, 331], "overwritten": [277, 278, 280, 281, 282, 595], "grouplassoprun": 278, "legaci": 279, "basicmagnitudeprun": 280, "lock": [281, 282, 583, 610, 612], "pruner_registri": 282, "clase": 282, "pruningconf": [283, 288], "tfpruningcallback": [283, 288], "input_model": [283, 288, 589, 620], "pure": [283, 288, 588, 612], "pattern_registri": 286, "pattern_typ": 286, "patternbas": 286, "mask_shap": [286, 287], "is_contigu": 286, "tile": 287, "tilepatternbas": 287, "tilepattern_1x1": 287, "1x1": [287, 574, 587, 612], "tilepattern_2x2": 287, "2x2": [287, 619], "tilepattern_1x16": 287, "1x16": 287, "tilepattern_4x1": 287, "tilepattern_1x2": 287, "1x2": [287, 619], "reset_non_value_to_default": 292, "obejct": 292, "parse_not_to_prun": 292, "update_frequency_on_step": [293, 614], "max_sparsity_ratio_per_lay": [293, 614], "magnitudeprun": 293, "snipprun": 293, "snipmomentumprun": 293, "moreoev": 293, "least": [294, 587, 612, 622], "templat": [294, 313, 500, 508, 569, 587, 612], "tree": [294, 310, 349], "huggingface_model": 294, "eager": [294, 366, 474, 478, 486, 576, 583, 615, 616, 620, 625], "config_file_path": 294, "pruner_info": 294, "quantconf": 296, "server": [297, 313, 440, 447, 499, 500, 507, 508, 516, 519, 530, 532, 534, 569, 607], "seper": 297, "opt_model": [297, 587], "fulli": [297, 587, 615, 619], "train_func": [297, 354, 576, 587, 615], "automixedprecisiontunestrategi": [298, 335], "basictunestrategi": [299, 336], "stage": [299, 304, 334, 336, 343, 574, 612, 620, 622], "polici": [299, 303, 334, 336, 342, 548, 553, 611, 624, 626], "bayesiantunestrategi": [300, 337], "acq_max": [300, 337], "ac": [300, 337], "gp": [300, 337], "y_max": [300, 337], "n_warmup": [300, 337], "10000": [300, 337, 612], "n_iter": [300, 337], "acquisit": [300, 337], "gaussian": [300, 337, 622], "relev": [300, 337], "limit": [300, 337, 364, 553, 574, 620], "acq": [300, 337], "randomst": [300, 337], "scipi": [300, 337], "x_max": [300, 337], "targetspac": [300, 337], "pbound": [300, 337], "9527": [300, 337, 587, 624], "allow": [300, 337, 536, 569, 574, 576, 586, 587, 588, 614, 619, 622, 624], "bayesianoptim": [300, 337], "exhaustivetunestrategi": [301, 339], "msetunestrategi": [303, 342], "mse_v2tunestrategi": [304, 343], "revert": [304, 312, 343, 351, 622], "randomtunestrategi": [305, 344], "strategy_registri": [306, 345, 622], "tunestrategi": [306, 345, 622], "tuningsamplerregistri": [309, 348], "tuningsampl": [309, 348], "tuningord": [309, 348], "Not": [309, 310, 348, 349, 364, 503, 551], "tuningspac": [309, 310, 348, 349], "tuning_order_lst": [309, 348], "initial_op_tuning_cfg": [309, 348], "modelwisetuningsampl": [309, 348], "tuning_items_prior": [309, 348], "op_dtype_dict": [309, 348], "optuningconfig": [309, 310, 311, 348, 349, 350], "optypewisetuningsampl": [309, 348], "opwisetuningsampl": [309, 348], "fallbacktuningsampl": [309, 348], "op_dtyp": [309, 348], "accumul": [309, 348, 622], "skip_first": [309, 348], "smoothquantsampl": 309, "tuningitem": [310, 349], "item_typ": [310, 349], "pattern_to_intern": [310, 349], "default_dtyp": [310, 349], "pattern_to_path": [310, 349], "quant_mode_from_pattern": [310, 349], "internal_pattern": [310, 349], "initial_tuning_cfg_with_quant_mod": [310, 349], "op_name_typ": [310, 349], "step1": [310, 349], "step2": [310, 349], "complet": [310, 349, 554, 569, 615, 622, 624, 625], "step3": [310, 349], "step4": [310, 349], "step5": [310, 349], "op_quant_mod": [311, 350], "ordereddefaultdict": [312, 351], "extract_data_typ": [312, 351], "data_typ": [312, 351], "sign": [312, 351, 549, 569, 615, 618], "reverted_data_typ": [312, 351], "signed_flag": [312, 351], "get_adaptor_nam": [312, 351], "experiment": [313, 551, 572, 575, 576, 578, 587, 612, 614, 617, 621], "base_model": [313, 324], "keras_model": [313, 324], "mxnet_model": [313, 324], "nets_factori": [313, 324], "onnx_model": [313, 324], "tensorflow_model": [313, 324], "torch_model": [313, 324], "collect_layer_histogram": [313, 358], "create_obj_from_config": [313, 358], "kl_diverg": [313, 358], "load_huggingfac": [313, 358, 587], "ux": 313, "config_gener": [313, 440, 500], "configuration_wizard": [313, 440, 500], "db_manag": [313, 440, 500], "file_brows": [313, 440, 500], "jobs_manag": [313, 440, 500], "model_zoo": [313, 440, 500], "names_mapp": [313, 440, 500], "profil": [313, 392, 399, 414, 416, 417, 440, 500, 501, 511, 534, 539], "manage_workspac": [313, 440, 500], "workload": [313, 379, 500, 508, 519, 534, 539, 540, 613], "except": [313, 352, 364, 500, 508, 519, 534], "executor": [313, 367, 500, 508], "expiring_dict": [313, 500, 508], "github_info": [313, 500, 508], "hw_info": [313, 500, 508], "json_seri": [313, 500, 508], "proc": [313, 500, 508], "status_upd": [313, 500, 508], "yaml_util": [313, 500, 508], "web": [313, 499, 500, 553, 569, 620], "servic": [313, 500, 533, 534, 553, 607, 611], "commun": [313, 500, 534, 536, 548, 569], "router": [313, 500, 534], "inc_bench": [313, 500, 569, 581], "sub_class": 321, "frozen": [322, 330, 333, 456, 459, 569, 589], "savedmodel": [322, 330, 333, 625], "chould": 322, "onnx_ml_pb2": [322, 589], "hybirdblock": [322, 333], "paramt": [322, 354], "_mixedprecis": 322, "basemodel": 323, "plai": [323, 613, 619], "role": [323, 619], "kerasmodel": [325, 458], "get_model_fwk_nam": 326, "fwk": 326, "mxnetmodel": 327, "net": 328, "factori": [328, 421, 440, 475, 491, 496, 500, 511, 515], "tfslimnetsfactori": 328, "onnxmodel": 329, "get_model_typ": [330, 449], "validate_graph_nod": 330, "validate_and_inference_input_output": 330, "input_tensor_nam": 330, "output_tensor_nam": 330, "graph_sess": 330, "graph_def_sess": 330, "frozen_pb_sess": 330, "load_saved_model": 330, "saved_model_tag": 330, "signatur": 330, "saved_model_dir": 330, "tag": [330, 519, 619, 620], "metagraphdef": 330, "keras_sess": 330, "slim_sess": 330, "checkpoint_sess": 330, "estimator_sess": 330, "saved_model_sess": 330, "tensorflowbasemodel": 330, "tensorflowsavedmodelmodel": 330, "tensorflowqatmodel": 330, "tensorflowcheckpointmodel": 330, "checkpoint": [330, 363, 589], "tensorflowmodel": [330, 460], "pytorchbasemodel": 331, "pytorchfxmodel": 331, "ipexmodel": 331, "driven": [332, 553, 587, 588, 607, 609, 620], "objective_registri": 332, "objective_custom_registri": 332, "obj_cl": 332, "eural_compressor": 332, "objective_cl": 332, "user_object": 332, "__class__": 332, "__name__": 332, "objective_cfg": 332, "usr_cfg": 332, "user_obj_cfg": 332, "easili": [332, 554, 591, 595, 607, 609, 619], "peak": [332, 609], "multiobject": [332, 529], "metric_criterion": 332, "metric_weight": 332, "obj_criterion": 332, "obj_weight": 332, "is_measur": 332, "calib_func": [333, 616], "entir": [333, 354, 550, 612, 619], "autotunestrategi": 334, "conservativetunestrategi": 338, "o0": [338, 622], "who": [338, 548], "hawq_v2tunestrategi": 340, "made": [340, 554, 615, 617, 622], "impact": [340, 617, 622], "tunestrategymeta": 345, "metaclass": 345, "blockfallbacktuningsampl": 348, "op_block_lst": 348, "target_dtyp": 348, "fun": 352, "attribute1": 352, "module_debug_level1": 352, "debug": [352, 361, 421, 422, 426, 569, 600, 604, 608, 622], "function1": 352, "param1": 352, "param2": 352, "parameter1": 352, "parameter2": 352, "o": [352, 428, 584, 592, 611, 619], "function2": 352, "pep": 352, "484": 352, "output_model": [352, 571, 587, 620], "function3": 352, "section": [352, 569, 574, 575, 607, 612, 614, 624], "restructuredtext": 352, "liter": 352, "attributeerror": 352, "generator1": 352, "example_gener": 352, "exampleclass": 352, "param3": 352, "public": [352, 548, 602, 605], "attr1": 352, "attr2": 352, "attr5": 352, "api_doc_exampl": 353, "loop": [354, 550, 551, 580, 618, 622], "compressionmanag": 354, "callbacks_list": 354, "uesd": 354, "deal": 354, "Such": 354, "distillationcallbback": 354, "on_train_begin": [354, 550, 574, 575, 587, 610, 612, 615], "train_loop": [354, 587, 610], "on_epoch_begin": [354, 357, 574, 575, 587, 610], "on_step_begin": [354, 357, 574, 575, 587, 610, 612], "on_after_compute_loss": [354, 574, 575, 587, 610], "backward": [354, 574, 575, 576, 587, 610, 612, 615, 617], "on_before_optimizer_step": [354, 574, 575, 587, 610, 612], "on_step_end": [354, 357, 574, 575, 587, 610], "on_epoch_end": [354, 357, 574, 575, 587, 610], "on_train_end": [354, 574, 575, 587, 610, 612, 615], "path_to_sav": 354, "manag": [354, 357, 383, 418, 441, 502, 518, 581, 587, 590, 591, 601], "summari": [354, 569, 602, 605, 611, 620], "pruningconfig": 354, "orchestr": [354, 553, 583, 623], "layerhistogramcollector": 355, "layer_tensor": 355, "include_lay": 355, "get_func_from_config": 357, "func_dict": 357, "get_preprocess": 357, "get_metr": 357, "get_postprocess": 357, "get_algorithm": 357, "algo": 357, "create_dataset": 357, "cfg_preprocess": 357, "cfg_filter": 357, "create_dataload": 357, "dataloader_cfg": 357, "create_eval_func": 357, "postprocess_cfg": 357, "fp32_baselin": [357, 554], "baselin": [357, 618, 620], "create_train_func": 357, "train_cfg": 357, "Their": 357, "auxiliari": 358, "pretrain": [360, 590, 596], "optimizedmodel": 360, "from_pretrain": [360, 587], "save_for_huggingface_upstream": [360, 587], "output_dir": [360, 512, 587, 595, 596], "msg": 361, "fatal": 361, "warn": [361, 569], "warin": 361, "alia": [361, 592, 597], "is_int8_model": 363, "checkpoint_dir": 363, "history_cfg": 363, "best_configur": 363, "best_model_weight": 363, "pt": [363, 589, 613, 615, 616], "snapshot": [363, 538], "cfg_from_fil": 364, "yaml_fil": [364, 572, 576, 586], "lazyimport": 364, "lazi": 364, "till": [364, 622], "decorat": 364, "time_limit": 364, "get_siz": [364, 519], "seen": [364, 554], "recurs": 364, "compute_spars": 364, "fault_tolerant_fil": 364, "equal_dict": 364, "d2": 364, "compare_kei": 364, "ignore_kei": 364, "ignor": [364, 572, 619], "cpuinfo": 364, "dump_elapsed_tim": [364, 554], "customized_msg": 364, "elaps": 364, "combine_histogram": 364, "old_hist": 364, "old": [364, 587, 617], "get_tensor_histogram": 364, "get_all_fp32_data": 364, "get_tuning_histori": 364, "tuning_history_path": [364, 488], "num": [364, 586], "str2arrai": 364, "dequantizeweight": 364, "weight_tensor": 364, "min_filter_tensor": 364, "max_filter_tensor": 364, "scale_info": 364, "captureoutputtofil": 364, "tmp_file_path": 364, "stream": 364, "sy": [364, 593], "stderr": 364, "captur": 364, "statist": 364, "header": [364, 579], "field_nam": 364, "output_handl": 364, "printer": 364, "global_st": 364, "load_data_from_pkl": 364, "pkl": 364, "dump_data_to_loc": 364, "show_memory_info": 364, "hint": 364, "dump_class_attr": 364, "compare_object": 364, "obj1": 364, "obj2": 364, "ignore_attr": 364, "comparison": [364, 617, 620], "project_data": [365, 472, 477, 481, 484, 487, 494], "benchmark_data": 365, "dataloaderinterfac": [365, 481, 494], "dataloader_data": [365, 481, 494], "parse_arg": [366, 474, 478, 483, 486, 492], "benchmark_mod": 366, "set_eager_execut": [366, 474, 478, 486], "request_id": [367, 470, 488, 489, 512], "asd": [367, 489], "benchmark_id": 367, "benchmark_result_upd": 367, "benchmark_result_update_pytorch_script": 367, "neural_coder_perform": 367, "neural_coder_tim": 367, "pytorch_script_bench_optim": 367, "command_line_of_script": 367, "pytorch_script_bench_original_model": 367, "execute_real_benchmark": 367, "project_detail": [367, 470, 489], "benchmark_detail": 367, "benchmark_model": [368, 440, 500], "execute_benchmark": [368, 440, 500], "benchmarkconfiggener": 369, "configgener": 370, "workload_directori": 370, "configuration_path": 370, "graphoptimizationconfiggener": 371, "benchmark_config_gener": [372, 440, 500], "graph_optimization_config_gener": [372, 440, 500], "mixed_precision_config_gener": [372, 440, 500], "profiling_config_gener": [372, 440, 500], "pruning_config_gener": [372, 440, 500], "quantization_config_gener": [372, 440, 500], "mixedprecisionconfiggener": 373, "profilingconfiggener": 374, "pruningconfiggener": 375, "quantizationconfiggener": 376, "configurationpars": 377, "parse_list_valu": 377, "required_typ": 377, "parse_multidim_list": 377, "dimension": 377, "normalize_string_list": 377, "string_list": 377, "bracket": 377, "miss": [377, 612, 615], "get_predefined_configur": 379, "update_config_to_machine_specif": 379, "configuration_pars": [380, 440, 500], "get_boundary_nod": [380, 440, 500], "get_configur": [380, 440, 500], "params_feed": [380, 440, 500], "pruning_config_pars": [380, 440, 500], "feeder": 381, "get_possible_valu": 381, "pruningconfigpars": 382, "bench": [383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 470, 499, 590], "dbmanag": 383, "database_loc": 383, "log_level": [383, 510], "benchmarkresult": 385, "fill_dictionari": [386, 388, 389, 391, 393, 396, 397, 402], "fill": [386, 388, 389, 391, 393, 396, 397, 402, 569, 607, 618, 621], "domainflavour": [389, 501], "db": [389, 417, 418], "benchmark_result": [392, 416, 440], "domain_flavour": [392, 416, 440, 446, 519], "optimization_typ": [392, 416, 440], "profiling_result": [392, 416, 440], "pruning_detail": [392, 416, 440], "tuning_detail": [392, 416, 440], "tuning_histori": [392, 416, 440, 475, 500], "optimizationtyp": [396, 501], "profilingresult": 399, "pruningdetail": 401, "tuningdetail": [403, 487], "tuninghistori": [404, 488], "benchmarkapiinterfac": 405, "before_delete_benchmark_entri": 405, "mapper": [405, 468, 469], "sqlite3": 405, "db_model": [405, 416, 440, 500], "datasetapiinterfac": 406, "set_database_vers": [406, 407], "version_num": [406, 407], "alembic_vers": [406, 407], "initialize_associ": [406, 407], "initialize_precision_optimization_types_associ": [406, 407], "search_in_list_of_dict_for_unique_valu": [406, 407], "list_of_dict": [406, 407], "search_in_list_of_dict": [406, 407], "diagnosisapiinterfac": 408, "dictionariesapiinterfac": 409, "dictonari": 409, "examplesapiinterfac": 410, "predefin": [410, 519], "benchmark_api_interfac": [411, 416, 440], "dataset_api_interfac": [411, 416, 440], "diagnosis_api_interfac": [411, 416, 440], "dictionaries_api_interfac": [411, 416, 440], "examples_api_interfac": [411, 416, 440], "model_api_interfac": [411, 416, 440], "optimization_api_interfac": [411, 416, 440], "profiling_api_interfac": [411, 416, 440], "project_api_interfac": [411, 416, 440], "modelapiinterfac": 412, "optimizationapiinterfac": 413, "profilingapiinterfac": 414, "projectapiinterfac": 415, "db_oper": [416, 440, 500], "params_interfac": [416, 440, 500], "modeladdparamsinterfac": 417, "datasetaddparamsinterfac": 417, "optimizationaddparamsinterfac": 417, "optimizationeditparamsinterfac": 417, "edit": [417, 548], "benchmarkaddparamsinterfac": 417, "benchmarkeditparamsinterfac": 417, "profilingaddparamsinterfac": 417, "profilingeditparamsinterfac": 417, "profilingresultaddparamsinterfac": 417, "tuninghistoryiteminterfac": 417, "tuninghistoryinterfac": 417, "diagnosisoptimizationparamsinterfac": 417, "update_dataloaders_param": 418, "framework_id": 418, "dataloaders_to_upd": 418, "framework_dataloaders_config": 418, "get_framework_dataloaders_config": 418, "get_framework_transforms_config": 418, "diagnosisfactori": 420, "onnx_diagnosi": [421, 440, 500], "onnxrt_diagnosi": [421, 422, 440], "tensorflow_diagnosi": [421, 440, 500], "op_detail": [421, 440, 500], "op_entri": [421, 440, 500], "onnxrtdiagnosi": 423, "opdetail": 424, "oppattern": 424, "pattern_data": 424, "opweight": 424, "weights_data": 424, "opactiv": 424, "op_activ": 424, "opentri": 425, "activation_min": 425, "activation_max": 425, "tensorflowdiagnosi": 427, "browser": [428, 569, 600, 604], "get_directory_entri": 428, "get_requested_path": 428, "request": [428, 440, 441, 442, 463, 464, 467, 488, 500, 531, 533, 536, 543, 569, 615], "get_non_hidden_directory_entri": 428, "create_dir_entri": 428, "direntri": 428, "create_file_entri": 428, "create_entri": 428, "is_directori": 428, "sort_entri": 428, "should_show_fil": 428, "should_show_only_model_fil": 428, "get_setting_valu": 428, "get_filter_valu": 428, "filter_requested_entri": 428, "filter_nam": 428, "is_directory_entri": 428, "is_model_or_directory_entri": 428, "shown": [428, 551, 569, 571, 574, 586, 587, 601, 609, 610, 612, 619, 622], "is_dataset_or_directory_entri": 428, "brows": 429, "filesystem": [429, 519], "attribute_typ": 430, "expanded_group": 431, "reader": [434, 435, 440, 500], "graphread": 434, "onnxrt_read": [435, 437, 440], "tensorflow_read": [435, 437, 440], "collaps": [435, 440, 500, 569], "edg": [435, 440, 500, 621], "graph_read": [435, 440, 500], "highlight": [436, 550, 569], "groupnod": 436, "group_nam": 436, "onnxrtread": 438, "tensorflowread": 439, "jobs_control_queu": [440, 441, 500], "frozen_pb": [440, 447, 457], "meta_graph": [440, 447, 457], "model_type_gett": [440, 447, 500], "repositori": [440, 445, 447, 500, 506, 602, 605], "download_config": [440, 466, 500], "download_model": [440, 466, 500], "list_model": [440, 466, 500], "optimize_model": [440, 473, 475, 476, 479, 482], "neural_coder_optim": [440, 475, 500], "tune_model": [440, 475, 485], "execute_optim": [440, 475, 500], "tensorflow_profil": [440, 491, 500], "execute_profil": [440, 491, 500], "profile_model": [440, 491, 500], "job": [441, 515], "_jobscontrolqueu": 442, "queu": 442, "jobsmanag": 442, "_jobsmmanag": 443, "_job": 443, "get_default_path": 445, "getter": 449, "onnxrtmodel": 451, "remove_number_of_samples_from_shap": 451, "pytorchscriptmodel": 453, "modelrepositori": 454, "trust": [455, 569], "frozenpbmodel": 456, "metagraphmodel": 459, "metagraph": 459, "savedmodelmodel": 461, "get_input_shap": 462, "fix_dynamic_shap": 462, "get_available_model": 467, "check_vers": 467, "framework_vers": 467, "supported_vers": 467, "validate_model_list": 467, "model_list": 467, "get_framework_module_nam": 467, "framework_nam": [467, 507], "get_installed_framework": 467, "instal": [467, 576, 579, 581, 590, 592, 595, 598, 602, 605, 607, 608, 611, 626], "mappingdirect": 469, "namesmapp": 469, "execute_optimization_pytorch_script": 470, "optimization_id": 470, "execute_optimization_regular": 470, "parse_model_data_to_bench_nam": 470, "parse_log": 470, "optimization_detail": 470, "check_if_collect_tuning_histori": 470, "optimizationfactori": 471, "graphoptim": [472, 523], "optimization_data": [472, 477, 481, 484, 487], "dataset_data": [472, 477, 481, 484, 487], "optimize_graph": [474, 478], "optimize_graph_config": [474, 478], "optimize_pt_script": 480, "optimizationinterfac": 481, "optimization_workdir": 488, "watcher": 488, "send": [488, 531, 536, 549], "profiling_id": 489, "execute_real_profil": 489, "profiling_detail": 489, "profilerfactori": [490, 495], "load_profiling_detail": 492, "json_path": 492, "profiling_data": [494, 497], "delete_assign": 498, "wsgi": 499, "prepare_environ": 499, "app": [500, 534], "workdir": [500, 508, 516], "history_snapshot_pars": [500, 534, 539], "request_data_processor": [500, 534, 539], "response_gener": [500, 534, 539], "flavour": 501, "executionstatu": 501, "status": 501, "notfoundexcept": 503, "accessdeniedexcept": 503, "deni": 503, "clienterrorexcept": 503, "internalexcept": 503, "subject": [504, 531, 585], "send_respons": 504, "log_nam": 504, "additional_log_nam": [504, 512], "shell": [504, 512, 620], "expir": 505, "expiringdictitem": 505, "expires_at": 505, "expiringdict": 505, "initial_valu": 505, "ttl": 505, "120": [505, 619], "githubinfo": 506, "hw": 507, "hwinfo": 507, "respons": [507, 511, 518, 531, 536, 544, 615], "platform": [507, 553, 583, 590, 598, 613, 615, 625], "hardwar": [507, 549, 553, 554, 574, 583, 587, 588, 607, 611, 612, 613, 614], "get_number_of_socket": 507, "get_distribut": 507, "distibut": 507, "get_bios_vers": 507, "bio": [507, 611], "is_turbo_boost_en": 507, "turbo": [507, 611], "boost": [507, 588, 591, 607, 612, 613], "get_kernel_vers": 507, "get_framework_info": 507, "get_framework_dependency_info": 507, "subdepend": 507, "jsonseri": 509, "serializ": 509, "change_log_level": 510, "optimizationpars": 511, "performancepars": 511, "accuracypars": 511, "benchmarkparserfactori": 511, "profilingpars": 511, "pid": 512, "ncprocess": 513, "aggreg": 513, "get_status_update_funct": 515, "job_typ": 515, "sent": 517, "deprec": [519, 602, 605, 621], "func": [519, 536, 615, 624], "signal": 519, "is_hidden": 519, "get_dataset_path": 519, "get_framework_from_path": 519, "get_file_extens": 519, "is_dataset_fil": 519, "get_predefined_config_path": 519, "normalize_domain": 519, "underscor": 519, "normalize_framework": 519, "normalize_str": 519, "string_to_norm": 519, "get_model_zoo_config_path": 519, "model_dict": 519, "get_model_zoo_model_path": 519, "check_modul": 519, "get_module_vers": 519, "mb": 519, "add_unit": 519, "load_model_config": 519, "load_dataloader_config": 519, "load_transforms_config": 519, "load_transforms_filter_config": 519, "meaning": [519, 587, 610], "load_precisions_config": 519, "load_pruning_details_config": 519, "get_default_pruning_config_path": 519, "load_model_wise_param": 519, "load_metrics_config": 519, "get_metrics_dict": 519, "load_help_nc_param": 519, "replace_with_valu": 519, "file_path": 519, "verify_file_path": 519, "determine_ip": 519, "ip": 519, "is_development_env": 519, "nc_mode": 519, "filter_transform": 519, "parse_bool_valu": 519, "release_tag": 519, "releas": [519, 553, 584, 596, 598, 600, 604, 606, 626], "get_shape_from_transform": 519, "shape_elements_ord": 519, "get_height_width_from_s": 519, "parse_to_string_list": 519, "parse_to_float_list": 519, "export_to_csv": 519, "csv": [519, 551, 569], "parse_vers": 519, "string_vers": 519, "are_archive_filenames_valid": 519, "archiv": 519, "malici": 519, "safe_extract_arch": 519, "zipfil": 519, "tarfil": 519, "destination_dir": 519, "member": [519, 548, 554], "safe": [519, 549], "labelbal": [521, 571, 572], "postprocessschema": 522, "sgdoptim": 527, "adamwoptim": 527, "adamoptim": 527, "crossentropylosscriterion": 527, "sparsecategoricalcrossentropycriterion": 527, "knowledgedistillationlosscriterion": 527, "weightcompressionapproach": 527, "parse_dict_value_to_float": 527, "parse_dict_value_to_int": 527, "wiseconfigdetail": 528, "wiseconfig": 528, "acccriterion": 529, "exitpolici": 529, "float_represent": 530, "dumper": 530, "pruner_represent": 530, "logic": [531, 624], "outsid": 531, "create_simple_respons": 531, "gui": [531, 536, 553, 569, 583, 584, 612, 623], "messagequeu": 531, "queue": [531, 536], "servicenotfoundexcept": 533, "unknown": 533, "connector": 535, "routingdefinit": 535, "rout": 535, "realtimeroutingdefinit": 535, "realtim": 535, "deferredroutingdefinit": 535, "separ": [535, 548, 569, 582, 585, 610, 614], "deferredsubprocessroutingdefinit": 535, "spawn": 535, "subprocess": 535, "get_model_graph": 535, "find_pattern_in_graph": 535, "get_system_info": 535, "endpoint": 536, "run_serv": 536, "webserv": 536, "get_tls_arg": 536, "tl": [536, 569], "block_ifram": 536, "werkzeug": 536, "ifram": 536, "csp": 536, "block_snif": 536, "mime": 536, "snif": 536, "require_api_token": 536, "author": [536, 585], "j": [536, 549, 553, 619, 625], "handle_api_cal": 536, "subpath": 536, "allow_api_cal": 536, "page_not_found": 536, "disable_cach": 536, "build_paramet": 536, "flask": [536, 569], "web_socket_publish": 536, "web_socket": 536, "flask_socketio": 536, "socketio": [536, 569], "benchmarkservic": 537, "historysnapshotpars": 538, "history_snapshot": 538, "provide_perform": 538, "modelservic": 540, "optimizationservic": 541, "profilingservic": 542, "processor": [543, 553, 588, 611, 613, 615, 616, 625], "requestdataprocessor": 543, "responsegener": 544, "workloadservic": 545, "welcom": [547, 548, 549, 553, 626], "interest": [548, 553, 620], "foster": 548, "particip": 548, "harass": 548, "experi": [548, 590, 618, 619, 622], "everyon": 548, "regardless": 548, "ag": 548, "bodi": 548, "ethnic": 548, "characterist": 548, "gender": 548, "educ": 548, "socio": 548, "econom": 548, "appear": [548, 569, 601, 607], "race": 548, "religion": 548, "sexual": 548, "orient": 548, "behavior": [548, 549, 554, 580, 589, 620, 622, 624], "contribut": [548, 553, 612], "inclus": 548, "Being": 548, "respect": [548, 580, 612, 619, 624], "viewpoint": 548, "gracefulli": 548, "critic": 548, "focus": [548, 554], "empathi": 548, "toward": [548, 574], "unaccept": 548, "imageri": 548, "unwelcom": 548, "troll": 548, "insult": 548, "derogatori": 548, "comment": [548, 572, 586, 587, 621], "polit": 548, "attack": 548, "privat": 548, "publish": [548, 585, 588, 608, 619], "electron": 548, "explicit": 548, "permiss": 548, "inappropri": 548, "profession": 548, "clarifi": 548, "appropri": [548, 619], "fair": 548, "action": [548, 602, 605], "reject": 548, "commit": [548, 549], "wiki": 548, "issu": [548, 549, 552, 569, 584, 615, 620], "ban": 548, "temporarili": 548, "deem": 548, "threaten": 548, "offens": 548, "harm": 548, "mail": 548, "social": [548, 553, 613], "media": [548, 553, 613], "account": [548, 618, 622], "appoint": 548, "event": [548, 620], "abus": 548, "report": [548, 549, 569, 618], "contact": [548, 617, 618], "complaint": 548, "review": [548, 549], "investig": 548, "circumst": [548, 614], "oblig": 548, "confidenti": [548, 569], "regard": [548, 616], "incid": 548, "good": [548, 615, 622], "faith": 548, "face": [548, 553, 559, 590, 594, 613, 617], "repercuss": 548, "leadership": 548, "faq": [548, 553], "page": [548, 549, 553], "view": [549, 553, 569, 577, 598, 607, 617], "pylint": 549, "flake8": 549, "autopep8": 549, "cover": [549, 578, 582, 613], "would": [549, 587, 588, 612, 615, 619], "adopt": [549, 553, 590, 612, 613, 619], "certif": [549, 569], "agre": 549, "bug": 549, "jira": 549, "ticket": 549, "potenti": [549, 551], "risk": 549, "pr": [549, 586, 602, 605, 617], "reproduc": 549, "submit": [549, 613], "intend": 549, "collabor": [549, 592, 598], "adher": 549, "toolkit": [550, 553, 584, 590, 598, 613, 623], "tracer": 550, "resolv": [550, 552], "floatfunct": 550, "cat": [550, 593], "done": [550, 574, 575, 591, 607, 612, 615], "10004": [550, 551, 554, 571, 574, 575, 578, 580, 583, 588, 610, 614, 624], "neural_compressor": [550, 551, 553, 570, 571, 572, 574, 575, 576, 578, 581, 582, 586, 587, 588, 589, 609, 610, 612, 614, 615, 616, 617, 618, 619, 621, 622, 624], "eval": [550, 571, 590, 615, 620], "fail": 550, "conduct": [550, 587, 595, 607, 623], "imper": 550, "therefor": [550, 587, 612, 615, 617, 619], "lot": [550, 619], "As": [550, 569, 571, 574, 587, 601, 612, 622], "failur": 550, "successfulli": [550, 576, 613], "suggest": [550, 618], "traceabl": 550, "proxi": 550, "tutori": [550, 598, 613, 623], "prototyp": 550, "html": [550, 553, 602, 605], "untrac": 550, "ssd": [550, 625], "resnet34": [550, 625], "r34": 550, "bboxes_labels_scor": 550, "prob": 550, "45": [550, 619, 625], "max_output": 550, "zip": 550, "dbox": 550, "dlabel": 550, "dscore": 550, "decode_singl": 550, "autom": [551, 590, 607, 608, 619], "artifici": 551, "ann": 551, "par": 551, "outperform": 551, "hand": [551, 569], "propos": [551, 554, 574, 588, 619], "lie": 551, "predictor": 551, "4x": [551, 615], "figur": [551, 600, 601, 604], "popul": 551, "inner": 551, "evolutionari": 551, "cycl": 551, "until": [551, 622], "conclud": 551, "met": [551, 580, 588, 615, 620], "yet": [551, 569, 602, 605, 608], "simplest": [551, 593], "launcher": [551, 553, 574, 575, 598, 623], "agent": 551, "nsga2": 551, "supernet": 551, "ofa_mbv3_d234_e346_k357_w1": 551, "acc": [551, 612, 620, 625], "mac": [551, 608], "num_ev": 551, "250": [551, 612], "results_csv_path": 551, "search_result": 551, "dataset_path": 551, "ilsvrc2012": 551, "aim": [551, 553, 590, 612, 619, 622, 623], "mobilenetv3": 551, "lt": [551, 572, 611, 625], "wmt": 551, "en": 551, "de": 551, "guidelin": [552, 553], "mainstream": [553, 623], "learn": [553, 554, 571, 572, 578, 582, 583, 584, 587, 588, 590, 592, 595, 596, 598, 601, 602, 605, 607, 612, 613, 615, 619, 620, 622, 623], "runtim": [553, 554, 555, 571, 577, 580, 583, 592, 597, 598, 614], "workflow": [553, 574, 584, 588, 602, 605, 620, 623], "particular": [553, 612], "wide": [553, 577, 588, 612, 615, 625], "xeon": [553, 584, 585, 588, 611, 613, 615, 616, 625], "scalabl": [553, 584, 588, 611, 613, 615, 616, 625], "flex": [553, 584], "amd": [553, 583, 584, 625], "arm": [553, 583, 584, 625], "nvidia": [553, 583, 584, 615, 625], "bloom": [553, 619], "176b": [553, 619], "7b": [553, 619], "stabl": [553, 569, 584, 612, 613], "diffus": [553, 613, 625], "gpt": [553, 612, 619, 625], "hub": [553, 577, 581, 598], "hug": [553, 613], "vision": [553, 578, 581, 594, 619], "coder": [553, 583, 591, 592, 595, 598, 601, 613], "cloud": [553, 613], "marketplac": [553, 608, 613], "googl": [553, 588, 613], "amazon": [553, 590, 598], "azur": [553, 613], "softwar": [553, 585, 588, 611, 612, 613, 617], "alibaba": [553, 597, 604, 605, 613], "tencent": [553, 613], "taco": [553, 613], "ai": [553, 590, 613, 616, 623], "ecosystem": [553, 613], "lightn": [553, 597], "pip": [553, 569, 576, 579, 581, 584, 592, 595, 600, 602, 604, 605, 617], "wget": [553, 579, 581], "storag": [553, 581, 586, 619], "googleapi": [553, 581], "v1_6": [553, 581], "mobilenet_v1_1": [553, 581], "0_224_frozen": [553, 581], "quick": [553, 580, 623, 624], "overview": 553, "notebook": [553, 623], "oneapi": [553, 584, 613, 623], "analyt": [553, 584, 613, 623], "jupyterlab": [553, 590, 596, 598, 600, 604, 623], "studio": [553, 598, 607, 623], "matrix": [553, 598, 623], "topic": 553, "blog": [553, 613], "medium": [553, 613], "enhanc": [553, 590, 613, 616], "apr": [553, 613], "2023": [553, 619, 625], "still": [553, 587, 613, 615, 616], "mlperf": [553, 613, 625], "5x": [553, 613], "heterogen": [553, 613], "power": [553, 574, 587, 601, 611, 613], "mar": [553, 613], "busi": [553, 613], "jan": [553, 613], "neurip": [553, 613], "oct": [553, 613], "quala": [553, 613], "minilm": [553, 613, 625], "legal": [553, 626], "secur": [553, 611, 613, 626], "idea": [553, 612, 619, 622], "feel": 553, "look": [553, 554, 580, 586, 624], "bridg": [554, 583], "vanilla": [554, 583], "abcadaptor": 554, "__init__": [554, 571, 572, 586, 622], "query_fw_cap": 554, "query_fused_pattern": 554, "he": 554, "besid": [554, 574], "describ": [554, 569, 580, 620], "past": 554, "mainten": 554, "difficult": [554, 619], "abil": [554, 572, 580, 619], "modif": [554, 571, 580, 595], "fragment": 554, "granular": [554, 580, 583, 593, 615, 619, 624], "semant": [554, 580], "mla": [554, 615], "becom": [554, 578, 612], "explor": 554, "inspect_tensor": 554, "op_list": [554, 620], "iteration_list": 554, "inspect_typ": 554, "save_to_disk": 554, "quantization_cfg": 554, "set_tensor": 554, "tensor_dict": 554, "diagnosis_help": 554, "easier": [569, 600, 604, 607, 613], "nightli": [569, 584], "pypi": [569, 584, 602, 605], "conda": [569, 579, 584, 593, 601, 617], "forg": [569, 579, 584], "git": [569, 579, 584], "clone": [569, 584, 600, 604], "cd": [569, 576, 584], "setup": [569, 580, 584, 602, 605, 612], "instruct": [569, 574, 584, 588, 602, 605, 613, 614, 615], "ui": 569, "5000": 569, "338174d13706855fc6924cec7b3a8ae8": 569, "listen": 569, "firewal": 569, "8080": 569, "tf_enable_onednn_opt": [569, 584], "cert": 569, "path_to_cert": 569, "crt": 569, "path_to_private_kei": 569, "encrypt": 569, "insecur": 569, "expos": 569, "forfeit": 569, "client": 569, "extern": 569, "threat": 569, "button": [569, 583, 601, 607], "click": [569, 581, 583, 590, 591, 598, 601, 607, 613, 620], "pop": [569, 607], "recognit": [569, 576, 578, 612, 620], "few": [569, 613, 622], "finish": [569, 601], "chosen": 569, "synthet": 569, "plu": 569, "icon": 569, "unfold": 569, "On": [569, 615], "panel": [569, 602, 605, 607], "navig": 569, "previou": [569, 587, 612, 617, 619, 620, 622, 623], "trash": 569, "visibl": 569, "cursor": 569, "prompt": [569, 576], "confirm": 569, "bottom": 569, "pencil": 569, "light": [569, 575], "blue": 569, "color": [569, 612], "That": 569, "row": [569, 619], "arrow": 569, "line": [569, 576, 583, 590, 595, 596, 620], "checkbox": 569, "column": [569, 619], "chart": [569, 615, 618, 620], "offer": [569, 572], "conveni": [569, 587], "variat": 569, "pictur": 569, "yellow": 569, "remind": 569, "ofa": 569, "fvcore": 569, "autograd": 569, "pymoo": 569, "numba": 569, "ilsvrc": 569, "hour": [569, 622], "One": [569, 572, 576, 583, 612, 613, 622], "dialog": 569, "organ": [569, 624], "cryptographi": 569, "linux": [570, 579, 601, 607], "window": [570, 607, 608], "x86_64": 570, "aarch64": 570, "encount": 571, "consum": 571, "previous": 571, "lack": [571, 579], "faster": [571, 573, 613, 622, 625], "treat": 571, "manner": [571, 574, 589], "300": [571, 572], "input_data": 571, "customis": [571, 572], "ensp": [572, 586, 621], "imagerecord": [572, 576, 624], "image_nam": 572, "cocorecord": 572, "gt": [572, 578, 619, 621], "int64": 572, "style_transf": 572, "content": 572, "tfrecorddataset": 572, "helloworld": [572, 621], "aid": 573, "deploy": [573, 590, 607, 619], "infrastructur": 573, "expens": [574, 587, 622], "deploi": [574, 587, 622], "mobil": [574, 587, 625], "produc": 574, "logit": 574, "softmax": 574, "l": [574, 620, 622], "kd": 574, "distanc": 574, "euclidean": 574, "kullback": 574, "leibler": 574, "patient": 574, "compact": [574, 587, 593, 612], "agnost": 574, "resourc": [574, 622], "convolut": [574, 613], "ia": 574, "attach": [574, 587, 619], "shallow": 574, "depth": [574, 616], "deepest": 574, "deeper": 574, "10006": [574, 575], "student_output": [574, 575], "student_loss": [574, 575], "training_func_for_nc": [574, 575], "distil_loss_conf": 574, "accordingli": [574, 598], "promis": [575, 587, 612], "huge": [575, 612], "heavi": 575, "booster": 575, "degrad": [575, 612, 622], "incorpor": [575, 622], "novel": [575, 590, 601, 607], "place": [575, 584, 612, 620], "illustr": 575, "comb": 575, "distillation_criterion": [575, 587, 610], "q_conf": 575, "horovod": 576, "builtin": 576, "program": [576, 585, 588, 590, 607], "addition": [576, 622], "enable_eager_execut": 576, "yaml_file_path": 576, "pre_process": 576, "simpli": [576, 589, 590, 592, 595, 607], "evaluation_result": 576, "evaluation_time_cost": 576, "partit": [576, 612], "distributedsampl": 576, "train_sampl": 576, "train_dataset": [576, 615], "num_replica": 576, "rank": 576, "train_load": 576, "train_kwarg": 576, "adadelta": 576, "distributedoptim": 576, "named_paramet": 576, "broadcast_paramet": 576, "root_rank": 576, "broadcast_optimizer_st": 576, "set_epoch": 576, "batch_idx": 576, "zero_grad": [576, 587, 612], "nll_loss": 576, "log_interv": 576, "0f": 576, "tloss": 576, "6f": 576, "dry_run": 576, "test_func": 576, "host": 576, "num_of_process": 576, "002": 576, "ssh": [576, 607], "readm": 576, "exactli": [576, 591], "resnet50_v1": [576, 587], "topk": [576, 586, 587, 615], "resizecropimagenet": [576, 621], "realiz": [576, 586, 609, 616, 618], "tow": 576, "node1": 576, "node2": 576, "TO": [576, 592], "your_node1_nam": 576, "your_node2_nam": 576, "resnet50_fp32_pretrained_model": 576, "nc_resnet50_v1": 576, "resnet": [576, 581, 625], "varieti": [577, 614, 622], "demonstr": [577, 590, 620], "10k": [577, 581], "speedup": [577, 583, 615], "2x": [577, 583, 611], "vnni": [577, 583, 614, 615], "exchang": 578, "howev": [578, 612, 619], "hope": 578, "briefli": [578, 587, 619], "matur": 578, "major": [578, 582, 615, 619], "reus": 578, "inc_model": [578, 589], "fp32_onnx_config": 578, "verifi": 578, "gap": [578, 589], "matmulintegertofloat": 578, "matmulinteg": 578, "toolchain": 579, "bare": 579, "metal": 579, "sudo": [579, 593], "apt": [579, 584, 593, 601], "python3": 579, "dev": [579, 600, 604], "distutil": 579, "essenti": 579, "libgl1": 579, "mesa": 579, "glx": 579, "libglib2": 579, "numactl": [579, 593, 601], "ln": 579, "sf": 579, "usr": 579, "incompat": 579, "88": [579, 618, 625], "80": [579, 619, 620, 625], "pyobject": 579, "reinstal": 579, "importerror": 579, "libgl": 579, "No": [579, 587, 611, 613], "yum": [579, 584], "opencv": [579, 601], "pend": 579, "27": [579, 584, 625], "alemb": [579, 584], "friendli": [580, 587, 619, 624], "dive": [580, 623], "unless": 580, "purpos": [580, 588, 607, 614, 615], "let": [580, 595, 612, 614, 624], "syntax": 580, "go": [580, 602, 605, 614, 621], "up1": 580, "up2": 580, "valid_mixed_precis": 580, "per_tensor": [580, 615, 624], "addn": 580, "grappler_optim": 580, "constfold": 580, "arithmet": 580, "debug_stripp": 580, "jupyt": [581, 598, 600, 601, 604], "lab": [581, 600, 601, 602, 604, 605], "concept": [582, 618, 623], "rather": 582, "custom_metr": 582, "refin": [582, 612], "These": 583, "broad": [583, 596, 623], "420": 583, "geomean": 583, "snippet": 583, "upload": [583, 602, 605], "dispatch": 583, "qintegerop": [583, 615], "plan": 583, "success": 584, "re": [584, 607], "uninstal": [584, 607], "frequent": 584, "ask": 584, "consolid": 584, "latest": [584, 613, 617], "eas": [584, 592, 613], "along": [584, 612], "streamlin": 584, "scienc": 584, "mani": [584, 622, 624], "websit": 584, "anaconda": 584, "suit": [584, 608, 620], "esri": 584, "formerli": 584, "skylak": 584, "cascad": 584, "lake": [584, 588, 613], "cooper": [584, 588, 613], "ic": [584, 613], "sapphir": 584, "rapid": 584, "hbm": 584, "arctic": 584, "sound": 584, "pont": 584, "vecchio": 584, "cento": 584, "ubuntu": [584, 611], "04": [584, 611, 625], "fortensorflow": 584, "forpytorch": 584, "onednn": [584, 615], "newer": 584, "copyright": 585, "accompani": 585, "research": [585, 619], "wish": 585, "bibtex": 585, "misc": 585, "feng": 585, "tian": 585, "hanwen": 585, "haihao": [585, 612], "shen": [585, 612], "suyu": 585, "chen": 585, "titl": [585, 608], "howpublish": 585, "year": 585, "logo": [585, 611], "atom": 585, "phi": 585, "pentium": 585, "vtune": 585, "corpor": [585, 611], "subsidiari": [585, 611], "brand": [585, 611], "claim": [585, 611], "popularli": 586, "industri": [586, 613], "label_map": 586, "decis": 586, "ap": 586, "curv": 586, "turn": [586, 601], "target_boxes_num": 586, "str_label": 586, "int_label": 586, "inturn": 586, "cocomap": 586, "vocmap": 586, "categor": 586, "multiclass": 586, "multilabel": 586, "multi_metr": 586, "newmetr": 586, "reset": 586, "reflect": [586, 611, 621], "deliv": [587, 613], "upgrad": 587, "veri": [587, 608, 615, 622], "speed": [587, 598, 612, 613, 615, 622], "fundament": 587, "comprehens": [587, 623], "kind": 587, "resort": 587, "automodelforsequenceclassif": 587, "autotoken": 587, "val_dataset": [587, 615], "val_dataload": [587, 615], "worker": [587, 615], "ping_memori": [587, 615], "formul": 587, "effort": 587, "written": 587, "onnxrt_integ": [587, 624], "onnxrt_qlinear": [587, 624], "unsupport": [587, 612], "image_tensor": [587, 624], "post_training_dynamic_qu": [587, 614, 622], "1000": [587, 624], "2000": 587, "sampling_s": [587, 624], "model_wis": [587, 624], "op_dict": 587, "op_wis": [587, 620, 624], "sigopt_api_token": [587, 618, 622], "sigopt_project_id": [587, 618, 622], "sigopt_experiment_nam": [587, 618, 622], "demo": 587, "600": [587, 625], "training_arg": 587, "emul": [587, 615], "trainer": [587, 598], "similar": [587, 614, 619, 622, 624], "maxim": [587, 612, 622], "pruning_func": 587, "num_train_epoch": [587, 612], "train_dataload": [587, 612, 615], "n_gpu": 587, "gradient_accumulation_step": 587, "clip_grad_norm_": 587, "max_grad_norm": 587, "rate": [587, 612, 615], "start_epoch": [587, 614, 624], "end_epoch": [587, 614, 624], "97": [587, 619, 625], "newli": [587, 612], "on_after_optimizer_step": [587, 612], "layer3": [587, 612], "layer2": [587, 612, 615], "lr_schedul": [587, 612], "weight_decai": [587, 624], "0004": 587, "nesterov": [587, 624], "randomresizedcrop": [587, 621], "totensor": [587, 621], "485": 587, "456": 587, "406": 587, "nepoch": 587, "cnt": 587, "loss_sum": 587, "iter_bar": 587, "tqdm": 587, "desc": 587, "teacher_logit": 587, "train_fun": 587, "training_func": 587, "recent": [587, 588], "growth": [587, 588, 612], "complex": [587, 588, 612], "significantli": [587, 588, 612, 622], "bandwidth": [587, 588], "exit_polici": [587, 624], "determinist": 587, "arbitrari": [587, 610], "reli": [587, 619], "prune_conf": 587, "quantization_aware_training_conf": 587, "aforement": 587, "inset": 587, "p_conf": [587, 610], "ssd_mobilenet_v1": 587, "benchmarkconf": 587, "half": [588, 598], "sixteen": 588, "launch": [588, 608], "3rd": [588, 613, 615, 616], "gen": [588, 613, 616], "codenam": 588, "x86": 588, "avx512": [588, 615], "vcvtne2ps2bf16": 588, "vcvtneps2bf16": 588, "vdpbf16p": 588, "consequ": 588, "avx512_bf16": 588, "cuda": [588, 590, 592, 615], "persist": 589, "brought": [589, 591, 598, 615], "tf2": 589, "h5": 589, "hybridblock": 589, "0000": 589, "saved_result": 589, "simplifi": [590, 601, 607, 612], "subsequ": [590, 607], "acquir": 590, "analysi": [590, 607, 612, 618], "heurist": [590, 607], "rule": [590, 612], "great": 590, "facilit": 590, "autocast": 590, "simultan": [590, 610, 614], "my_model": 590, "no_grad": 590, "memory_format": 590, "112": [590, 625], "rand": [590, 619], "plugin": [590, 608], "aw": [590, 598, 613, 625], "sagemak": [590, 598], "inlin": [590, 595, 598], "neural_cod": [590, 592, 594, 595, 596, 598], "superbench": 590, "enjoi": [591, 595, 598], "rebuild": [591, 600, 604], "reload": [591, 608], "modern": 592, "democrat": [592, 613], "programm": [592, 598, 607], "nano_bf16_channels_last": 592, "resnet18": [592, 625], "nano_bf16_ipex_channels_last": 592, "nano_bf16_ipex": 592, "nano_bf16": 592, "nano_fp32_channels_last": 592, "nano_fp32_ipex_channels_last": 592, "nano_fp32_ipex": 592, "nano_gpu_to_cpu": 592, "nano_int8": 592, "nano_jit_bf16_channels_last": 592, "nano_jit_bf16_ipex_channels_last": 592, "nano_jit_bf16_ipex": 592, "nano_jit_bf16": 592, "nano_jit_fp32_channels_last": 592, "nano_jit_fp32_ipex_channels_last": 592, "nano_jit_fp32_ipex": 592, "nano_jit_fp32": 592, "nano_onnxruntime_fp32": 592, "nano_onnxruntime_int8_qlinear": 592, "openvino": 592, "nano_openvino_fp32": 592, "nano_openvino_int8": 592, "bc": [593, 601], "conda_prefix": 593, "echo": 593, "tradit": [593, 612], "libjemalloc": 593, "libiomp5": 593, "home": 593, "lib": 593, "ld_preload": 593, "malloc_conf": 593, "oversize_threshold": 593, "background_thread": 593, "metadata_thp": 593, "dirty_decay_m": 593, "9000000000": 593, "muzzy_decay_m": 593, "kmp_affin": 593, "kmp_blocktim": 593, "dnnl_primitive_cache_capac": 593, "cpufreq": 593, "scaling_governor": 593, "powersav": 593, "tee": 593, "pytorch_jit_script": [594, 597], "pytorch_channels_last": [594, 597], "run_bench": 594, "patch": [594, 607], "patch_path": 594, "your_patch_path": 594, "sweep": 594, "sweep_object": 594, "bench_config": 594, "bench_featur": 594, "sai": 595, "run_glu": [595, 596], "requisit": 595, "task_nam": [595, 596], "do_ev": [595, 596], "remain": 595, "itself": 595, "run_glue_optim": 595, "static_ipex": 595, "auto_qu": 596, "v4": [596, 625], "albert": [596, 625], "sst2": 596, "alexnet": [596, 625], "pytorch_amp": 597, "optimize_for_infer": 597, "pytorch_jit_trac": 597, "pytorch_jit_script_ofi": 597, "pytorch_jit_trace_ofi": 597, "torchdynamo": 597, "pytorch_torchdynamo_jit_script": 597, "pytorch_torchdynamo_jit_trac": 597, "pytorch_torchdynamo_jit_script_ofi": 597, "pytorch_torchdynamo_jit_trace_ofi": 597, "pytorch_inc_bf16": 597, "pytorch_inc_static_quant_fx": 597, "pytorch_inc_static_quant_ipex": 597, "pytorch_inc_dynamic_qu": 597, "pytorch_ipex_fp32": 597, "pytorch_ipex_bf16": 597, "pytorch_ipex_int8_static_qu": 597, "pytorch_ipex_int8_dynamic_qu": 597, "blade": 597, "disc": 597, "pytorch_aliblad": 597, "pytorch_lightning_bf16_cpu": 597, "tensorflow_amp": 597, "keras_amp": 597, "tensorflow_inc": 597, "keras_inc": 597, "onnx_inc_static_quant_qlinear": 597, "onnx_inc_static_quant_qdq": 597, "onnx_inc_dynamic_qu": 597, "optimum": [597, 598], "pytorch_inc_huggingface_optimum_stat": 597, "pytorch_inc_huggingface_optimum_dynam": 597, "intel_extension_for_transform": 597, "bigdl": [597, 598], "nano": [597, 598], "nano_": 597, "inc_auto": 597, "delight": 598, "announc": 598, "v": [598, 607, 612, 622, 624], "500": 598, "innov": [598, 613, 623], "isa": 598, "xpu": 598, "delta": 598, "acc_delta": 598, "int8_acc": 598, "fp32_acc": 598, "ext": [600, 602, 604, 605, 606], "nodej": [600, 604], "jlpm": [600, 604], "pin": [600, 604], "yarn": [600, 604], "npm": [600, 601, 604], "lieu": [600, 604], "labextens": [600, 601, 604], "typescript": [600, 604], "watch": [600, 604], "termin": [600, 601, 604], "immedi": [600, 604, 612], "refresh": [600, 604], "wait": [600, 604, 607], "rebuilt": [600, 604], "symlink": [600, 604], "down": 601, "enter": [601, 607], "blank": 601, "cell": 601, "gain": [601, 610, 613], "mkl": 601, "jemalloc": 601, "pip3": 601, "headless": 601, "pyproject": [602, 605], "toml": [602, 605], "twine": [602, 605], "whl": [602, 605], "dist": [602, 605], "sdist": [602, 605], "bdist_wheel": [602, 605], "frontend": [602, 605], "login": [602, 605, 618], "cut": [602, 605], "fork": [602, 605], "admin_github_token": [602, 605], "pypi_token": [602, 605], "npm_token": [602, 605], "secret": [602, 605], "draft": [602, 605], "changelog": [602, 605, 606], "pkg": [602, 605], "bot": [602, 605], "pick": [602, 605, 608], "feedstock": [602, 605], "hatch": 605, "notabl": 606, "vscode": [606, 608], "daili": 607, "give": [607, 622], "advantag": [607, 612, 614, 622], "remot": 607, "market": 607, "upper": 607, "sidebar": 607, "hover": 607, "track": [607, 618], "argpars": 607, "diff": 607, "manifest": 608, "declar": 608, "palett": 608, "registercommand": 608, "amodio": 608, "tsl": 608, "matcher": 608, "dbaeumer": 608, "eslint": 608, "press": 608, "f5": 608, "ctrl": [608, 625], "cmd": 608, "hello": 608, "world": 608, "breakpoint": 608, "consol": 608, "relaunch": 608, "toolbar": 608, "node_modul": 608, "viewlet": 608, "dropdown": 608, "runner": 608, "startup": 608, "bundl": 608, "multi_object": 609, "benefit": 610, "instanti": 610, "platinum": [611, 625], "8358": 611, "manufactur": 611, "m50cyp2sbstd": 611, "se5c620": 611, "86b": 611, "0005": 611, "2202160810": 611, "microcod": 611, "0xd000332": 611, "irq": 611, "60ghz": 611, "6chz": 611, "perf": 611, "512gb": 611, "16x32gb": 611, "ddr4": 611, "3200": 611, "mt": 611, "nic": 611, "1x": 611, "ethernet": 611, "100mb": 611, "i350": 611, "gigabit": 611, "drive": 611, "intel_ssdsckkb48": 611, "447": 611, "1g": 611, "publicli": 611, "degre": 611, "mark": 611, "trademark": 611, "neuron": 612, "art": 612, "grown": 612, "unpreced": 612, "increasingli": 612, "crucial": 612, "stand": 612, "delet": 612, "due": [612, 615, 619, 620], "commonli": 612, "salient": 612, "shrink": 612, "contextu": 612, "scene": 612, "haven": 612, "lowest": [612, 622], "formula": [612, 619], "emsp": 612, "partial": [612, 615], "downstream": 612, "finetun": 612, "prone": 612, "larger": [612, 619], "co": 612, "discourag": 612, "push": [612, 619], "penal": 612, "parameter": 612, "exemplifi": 612, "complement": 612, "fortieth": 612, "pruner2": 612, "mention": 612, "readi": 612, "hesit": 612, "sst": [612, 625], "25": [612, 619, 625], "63": [612, 619, 625], "35": [612, 625], "flan": 612, "t5": 612, "english": 612, "romanian": 612, "404": [612, 625], "381": 612, "yolov5": 612, "75": [612, 619, 625], "2x1": [612, 625], "top1": [612, 615, 625], "801": 612, "7895": 612, "signific": [612, 613, 615, 619], "reduct": [612, 624], "namhoon": 612, "lee": 612, "thalaiyasingam": 612, "ajanthan": 612, "philip": 612, "torr": 612, "2019": 612, "zafrir": 612, "ofir": 612, "ariel": 612, "larei": 612, "boudoukh": 612, "mosh": 612, "wasserblat": 612, "preprint": [612, 619], "2111": 612, "05754": 612, "2021": 612, "amx": 613, "4th": 613, "mleffici": 613, "dec": 613, "wechat": 613, "deepen": 613, "foundat": 613, "intellig": 613, "vmware": 613, "virtual": 613, "applianc": 613, "bitnami": 613, "nov": 613, "sota": 613, "plug": 613, "twitter": 613, "linkedin": 613, "zone": 613, "land": 613, "gcp": 613, "pat": 613, "keynot": 613, "intelon": 613, "sep": 613, "chines": 613, "aug": 613, "purif": 613, "sacrif": 613, "jun": 613, "partner": 613, "feb": 613, "joint": 613, "msft": 613, "bilibili": 613, "gestalt": 613, "ml": 613, "doubl": 613, "reconstruct": 613, "abound": 613, "lpot": [613, 617], "nextplatform": 613, "cern": 613, "gan": 613, "3dgan": 613, "iml": 613, "workshop": 613, "asplo": 613, "18": [613, 625], "highli": 613, "intelcaff": 613, "aris": 614, "tell": 614, "henc": 614, "onnxrt_qoper": 614, "quant_aware_train": 614, "weight_compress": [614, 624], "initial_spars": [614, 624], "prune_typ": [614, 624], "basic_magnitud": [614, 624], "update_frequ": 614, "prune_domain": 614, "tile_pattern_1x1": 614, "invent": 615, "int4": 615, "cost": 615, "theoret": 615, "affin": 615, "zeropoint": 615, "asymmetr": [615, 622], "255": [615, 619], "overflow": 615, "solv": [615, 617], "fbgemm": 615, "unseen": 615, "enough": 615, "peopl": 615, "mimic": 615, "fact": 615, "ultim": 615, "pain": 615, "lossi": 615, "understand": [615, 620, 623], "philosophi": 615, "neither": 615, "nor": 615, "val_load": 615, "avg": 615, "themselv": 615, "tensorrtexecutionprovid": 615, "cudaexecutionprovid": 615, "ON": 616, "forc": 616, "postposttrainingquantconfig": 616, "bf16wrapper": 616, "retrac": 616, "site": 617, "assist": 617, "sed": 617, "your_script": 617, "backbon": 618, "interact": 618, "sigopt_experiment_id": 618, "nc": [618, 622], "certain": 618, "suffici": 618, "ordinari": 618, "capac": 618, "receiv": 618, "latenc": [618, 622], "draw": [618, 622], "mobilenet": [618, 625], "durat": 618, "8266": 618, "8372": 618, "2132": 618, "83": [618, 619, 625], "7495": 618, "8299": 618, "8294": 618, "85": [618, 619, 625], "0837": 618, "8291": 618, "4469": 618, "llm": 619, "gigant": 619, "systemat": 619, "outlier": 619, "quantif": 619, "difficulti": 619, "mathemat": 619, "allevi": 619, "coarsest": 619, "finer": [619, 622], "matric": 619, "similarli": 619, "finest": 619, "consumpt": 619, "why": [619, 620], "suppos": 619, "6839": 619, "4741": 619, "7451": 619, "9301": 619, "1742": 619, "6835": 619, "frac": 619, "q_min": 619, "q_max": 619, "clip": 619, "zp": 619, "q_x": 619, "clamp_": 619, "round_": 619, "w_q": 619, "00296431384049356": 619, "59": [619, 625], "172": 619, "192": 619, "w_dq": 619, "1220": 619, "0500": 619, "1430": 619, "2570": 619, "1890": 619, "mseloss": 619, "1983354538679123": 619, "6848": 619, "4743": 619, "7440": 619, "9308": 619, "1749": 619, "385297635664756e": 619, "affect": 619, "quantize_per_channel": 619, "x_tmp": 619, "detach": 619, "keepdim": 619, "divid": [619, 622], "dequantize_per_channel": 619, "0029": [619, 625], "0036": 619, "162": [619, 625], "48": [619, 625], "72": [619, 625], "93": [619, 625], "207": [619, 625], "139": [619, 625], "6837": 619, "4734": 619, "1751": 619, "6821": 619, "637690492221736e": 619, "6376e": 619, "3852e": 619, "cdot": 619, "quantize_per_tensor_absmax": 619, "n_bit": 619, "div_": 619, "0806": 619, "7589": 619, "6038": 619, "3815": 619, "5040": 619, "7174": 619, "5444": 619, "5826": 619, "7772": 619, "5555": 619, "3740": 619, "3253": 619, "0698": 619, "1381": 619, "5972": 619, "0086": 619, "0737": 619, "8298": 619, "6883": 619, "2991": 619, "1601": 619, "6506": 619, "8246": 619, "3924": 619, "3845": 619, "8768": 619, "w_scale": 619, "x_q": 619, "x_scale": 619, "84": [619, 625], "0059755356051027775": 619, "89": [619, 625], "119": [619, 625], "57": [619, 625], "91": [619, 625], "006533813662827015": 619, "y_q": 619, "17509": 619, "7608": 619, "4055": 619, "16599": 619, "21020": 619, "10016": 619, "9860": 619, "22444": 619, "y_dq": 619, "6836": 619, "2970": 619, "1583": 619, "6481": 619, "8207": 619, "3911": 619, "3850": 619, "8763": 619, "prove": 619, "simplic": 619, "middl": 619, "denot": 619, "fp1": 619, "fp2": 619, "subsect": [619, 624], "explain": 619, "suppress": 619, "straightforward": 619, "intuit": 619, "x1": [619, 622], "x2": [619, 622], "herebi": 619, "sq": 619, "torchscript": 619, "overhead": 619, "stai": 619, "hardtanh": 619, "t5norm": 619, "llamanorm": 619, "groupnorm": 619, "lambada": 619, "sweet": 619, "spot": 619, "region": 619, "bigscienc": 619, "560m": 619, "65": [619, 625], "44": [619, 625], "66": [619, 625], "76": [619, 625], "1b7": 619, "71": [619, 625], "43": [619, 625], "67": [619, 625], "78": [619, 621, 625], "56": [619, 625], "58": [619, 625], "55": [619, 625], "3b": 619, "73": [619, 625], "69": [619, 625], "74": [619, 625], "7b1": 619, "77": [619, 625], "46": [619, 625], "82": [619, 625], "facebook": 619, "125m": 619, "70": [619, 625], "94": [619, 621, 625], "79": [619, 620, 625], "60": [619, 625], "81": [619, 625], "26": [619, 625], "39": [619, 625], "68": [619, 621, 625], "eleutherai": 619, "6b": 619, "96": [619, 625], "jason": 619, "wei": 619, "emerg": 619, "transact": 619, "yvinec": 619, "edouard": 619, "proceed": 619, "cvf": 619, "winter": 619, "xiui": 619, "2209": 619, "13325": 619, "xiao": 619, "guangxuan": 619, "2211": 619, "10438": 619, "discov": 620, "valuabl": 620, "instrument": 620, "writer": 620, "_pre_eval_hook": 620, "_post_eval_hook": 620, "submodul": 620, "whitelist": 620, "_recordingobserv": 620, "output_tensors_dict": 620, "current_it": 620, "get_tensor_valu": 620, "_observer_forward_hook": 620, "activation_post_process": 620, "_add_observer_": 620, "named_children": 620, "leaf": 620, "add_modul": 620, "register_forward_hook": 620, "dump_tim": 620, "summarywrit": 620, "_acc": 620, "tune_": 620, "add_graph": 620, "get_observer_dict": 620, "observer_dict": 620, "is_quant": 620, "add_histogram": 620, "bind_al": 620, "logdir_spec": 620, "tune_0_acc0": 620, "tune_1": 620, "tune_1_acc0": 620, "four": 620, "baseline_acc_0": 620, "776": 620, "tune_1_acc_0": 620, "095": 620, "runs_v3": 620, "image_recognit": 620, "run_tuning_dump_tensor": 620, "sh": 620, "inceptionv3": 620, "v0": 620, "cg": 620, "conv0": 620, "bash": 620, "run_tun": 620, "topologi": 620, "inception_v3": 620, "dataset_loc": 620, "inceptionv3_fp32_pretrained_model": 620, "nc_inceptionv3": 620, "inceptionv3_dump_tensor": 620, "poor": 620, "eightbit": 620, "disappear": 620, "centercrop": 621, "randomcrop": 621, "cropres": 621, "decodeimag": 621, "jpeg": 621, "encodejp": 621, "alignimagechannel": 621, "116": 621, "103": 621, "017": 621, "bilinearimagenet": [621, 624], "topilimag": 621, "padding_mod": 621, "border": 621, "pixel": 621, "colorjitt": 621, "bright": 621, "satur": 621, "hue": 621, "jitter": 621, "tondarrai": 621, "quickli": [622, 623], "travers": 622, "human": 622, "concret": 622, "insight": 622, "aggress": 622, "classic": 622, "six": 622, "At": 622, "ii": 622, "iii": 622, "post_training_auto_qu": 622, "iv": 622, "vi": 622, "increment": 622, "primari": 622, "highest": 622, "spent": 622, "hawq_v2_loss": 622, "model_loss": 622, "black": 622, "come": 622, "compli": 622, "posterior": 622, "focu": 622, "short": 622, "never": 622, "loglevel": 622, "endlessli": 622, "perspect": 622, "smbo": 622, "trial": 622, "appl": 622, "surrog": 622, "repeat": 622, "quantil": 622, "densiti": 622, "parzen": 622, "greatest": 622, "dai": 622, "next_tune_cfg": 622, "overridden": 622, "cluster": 622, "seamlessli": 622, "mpi": 622, "replic": 622, "replica": 622, "fed": 622, "handler": 622, "synchron": 622, "slave": 622, "abctunestrategi": 622, "familiar": 623, "mobilenet_v1": 624, "hyper": 624, "40": [624, 625], "06": [624, 625], "beta_1": 624, "beta_2": 624, "epsilon": 624, "sparsecategoricalcrossentropi": 624, "sum_over_batch_s": 624, "from_logit": 624, "54": [624, 625], "19": [624, 625], "overal": 624, "8380": 625, "visit": 625, "performancethroughput": 625, "sec": 625, "86": 625, "00": 625, "170": 625, "82x": 625, "92": 625, "85x": 625, "61": 625, "83x": 625, "densenet": 625, "121": 625, "274": 625, "148": 625, "161": 625, "132": 625, "39x": 625, "169": 625, "38": 625, "36": 625, "191": 625, "118": 625, "61x": 625, "cnn": 625, "incept": 625, "37": 625, "84x": 625, "resnet101": 625, "21x": 625, "70x": 625, "51": 625, "14x": 625, "955": 625, "328": 625, "91x": 625, "709": 625, "282": 625, "51x": 625, "v3": 625, "337": 625, "160": 625, "11x": 625, "438": 625, "204": 625, "223": 625, "105": 625, "12x": 625, "10x": 625, "47": 625, "1347": 625, "439": 625, "07x": 625, "1192": 625, "492": 625, "42x": 625, "412": 625, "376": 625, "662": 625, "397": 625, "66x": 625, "299": 625, "23": 625, "154": 625, "93x": 625, "476": 625, "227": 625, "fashion": 625, "2734": 625, "1299": 625, "498": 625, "178": 625, "79x": 625, "427": 625, "173": 625, "47x": 625, "resnetv2": 625, "194": 625, "146": 625, "33x": 625, "237": 625, "187": 625, "27x": 625, "152": 625, "155": 625, "38x": 625, "302": 625, "215": 625, "40x": 625, "346": 625, "312": 625, "277": 625, "60x": 625, "273": 625, "31x": 625, "18x": 625, "53x": 625, "24x": 625, "vgg16": 625, "219": 625, "vgg19": 625, "193": 625, "11506": 625, "9665": 625, "19x": 625, "xception": 625, "262": 625, "137": 625, "barthez": 625, "143": 625, "02x": 625, "20x": 625, "209": 625, "08x": 625, "221": 625, "stsb": 625, "218": 625, "16x": 625, "62": 625, "57x": 625, "55x": 625, "56x": 625, "53": 625, "89x": 625, "blendcnn": 625, "4885": 625, "3715": 625, "camembert": 625, "206": 625, "09x": 625, "deberta": 625, "125": 625, "366": 625, "197": 625, "399": 625, "flaubert": 625, "592": 625, "385": 625, "54x": 625, "wikitext": 625, "hubert": 625, "446": 625, "181": 625, "46x": 625, "layoutlm": 625, "longform": 625, "49": 625, "mbart": 625, "625": 625, "451": 625, "lvwerra": 625, "pegasu": 625, "samsum": 625, "peleenet": 625, "402": 625, "29x": 625, "pokemon": 625, "275": 625, "334": 625, "48x": 625, "reform": 625, "crime": 625, "punish": 625, "153": 625, "06x": 625, "657": 625, "327": 625, "01x": 625, "812": 625, "344": 625, "36x": 625, "360": 625, "23x": 625, "resnext101": 625, "32x8d": 625, "182": 625, "squeezebert": 625, "195": 625, "150": 625, "30x": 625, "75x": 625, "transfo": 625, "xl": 625, "41x": 625, "wave2vec2": 625, "22x": 625, "102": 625, "00x": 625, "115": 625, "17x": 625, "yolo": 625, "232": 625, "28x": 625, "664": 625, "329": 625, "832": 625, "338": 625, "433": 625, "164": 625, "63x": 625, "836": 625, "1396": 625, "463": 625, "90x": 625, "159": 625, "32x": 625, "968": 625, "473": 625, "05x": 625, "958": 625, "477": 625, "arcfac": 625, "126": 625, "78x": 625, "298": 625, "124": 625, "624": 625, "254": 625, "45x": 625, "caffenet": 625, "1432": 625, "540": 625, "65x": 625, "1460": 625, "357": 625, "265": 625, "35x": 625, "86x": 625, "524": 625, "duc": 625, "efficientnet": 625, "1211": 625, "758": 625, "856": 625, "762": 625, "emot": 625, "ferplu": 625, "925": 625, "694": 625, "fcn": 625, "25x": 625, "googlenet": 625, "771": 625, "571": 625, "763": 625, "579": 625, "hf": 625, "156": 625, "multilingu": 625, "99x": 625, "199": 625, "104": 625, "73x": 625, "449": 625, "74x": 625, "l12": 625, "h384": 625, "466": 625, "247": 625, "88x": 625, "l6": 625, "523": 625, "354": 625, "183": 625, "107": 625, "spanbert": 625, "208": 625, "795": 625, "780": 625, "591": 625, "515": 625, "15x": 625, "2370": 625, "1526": 625, "2216": 625, "1506": 625, "2078": 625, "1028": 625, "1762": 625, "76x": 625, "mobilenetv2": 625, "2615": 625, "1645": 625, "59x": 625, "2461": 625, "1674": 625, "766": 625, "431": 625, "77x": 625, "575": 625, "430": 625, "34x": 625, "747": 625, "564": 625, "594": 625, "590": 625, "643": 625, "253": 625, "shufflenet": 625, "2354": 625, "1461": 625, "1850": 625, "1368": 625, "squeezenet": 625, "2484": 625, "1912": 625, "2526": 625, "1911": 625, "710": 625, "549": 625, "622": 625, "497": 625, "652": 625, "507": 625, "573": 625, "470": 625, "527": 625, "396": 625, "68x": 625, "tini": 625, "647": 625, "514": 625, "26x": 625, "ultrafac": 625, "314": 625, "50x": 625, "304": 625, "316": 625, "315": 625, "zfnet": 625, "462": 625, "268": 625, "72x": 625, "465": 625, "62x": 625, "436": 625, "270": 625, "429": 625, "92x": 625, "94x": 625, "331": 625, "242": 625, "37x": 625, "98x": 625, "taskdataset": 625, "accuracyspars": 625, "ratiospars": 625, "commentsbalancedor": 625, "unbalanc": 625, "mini": 625, "answeringsquad": 625, "87f1": 625, "momentumunbalanc": 625, "momentumbalanc": 625, "90f1": 625, "59f1": 625, "23f1": 625, "classificationmrpc": 625, "52f1": 625, "26f1": 625, "classificationsst": 625, "61accuraci": 625, "recognitionimagenet": 625, "95top1": 625, "v5s6": 625, "detectioncoco": 625, "ap0": 625, "6ap0": 625, "393": 625, "584": 625, "34f1": 625, "lassounbalanc": 625, "classificationmnli": 625, "mm": 625, "allbalanc": 625, "32accuraci": 625, "sensitivitybalanc": 625, "classificationqqp": 625, "classificationqnli": 625, "54accuraci": 625, "em": 625, "7965": 625, "wideresnet40": 625, "9522": 625, "8178": 625, "0213": 625, "8235": 625, "027": 625, "5494": 625, "7153": 625, "5540": 625, "0046": 625, "5523": 625, "vgg": 625, "bn": 625, "7022": 625, "7415": 625, "7025": 625, "0003": 625, "wip": 625, "6739": 625, "7399": 625, "6845": 625, "0106": 625, "7034": 625, "8382": 625, "bilstm": 625, "8314": 625, "9403": 625, "9048": 625, "0734": 625, "7323": 625, "8256": 625, "8084": 625, "8814": 625, "7442": 625, "8371": 625, "0119": 625, "0115": 625, "tinybert": 625, "8018": 625, "8044": 625, "8363": 625, "8411": 625, "8025": 625, "8074": 625, "0007": 625, "0030": 625, "8626": 625, "8213": 625, "9091": 625, "8782": 625, "8684": 625, "8259": 625, "0058": 625, "distilroberta": 625, "6057": 625, "6455": 625, "6187": 625, "0130": 625, "c6i": 625, "2xlarg": 625, "c6a": 625, "c6g": 625, "a100cuda": 625, "executionprovid": 625}, "objects": {"": [[0, 0, 0, "-", "644ec953a7dc_pruning_support"], [1, 0, 0, "-", "6ece06672ed3_v1_14"], [2, 0, 0, "-", "6f0d0f71d92e_v1_13"], [3, 0, 0, "-", "9e89549a08c8_v1_11"], [4, 0, 0, "-", "block_mask"], [5, 0, 0, "-", "env"], [313, 0, 0, "-", "neural_compressor"]], "6ece06672ed3_v1_14": [[1, 1, 1, "ece06672ed3_v1_14.update_dataloaders", "update_dataloaders"], [1, 1, 1, "ece06672ed3_v1_14.update_transformations", "update_transformations"]], "env": [[5, 1, 1, "", "run_migrations_offline"], [5, 1, 1, "", "run_migrations_online"]], "neural_compressor": [[7, 0, 0, "-", "adaptor"], [155, 0, 0, "-", "algorithm"], [158, 0, 0, "-", "benchmark"], [162, 0, 0, "-", "compression"], [176, 0, 0, "-", "conf"], [178, 0, 0, "-", "config"], [179, 0, 0, "-", "contrib"], [204, 0, 0, "-", "data"], [260, 0, 0, "-", "experimental"], [320, 0, 0, "-", "metric"], [322, 0, 0, "-", "mix_precision"], [324, 0, 0, "-", "model"], [332, 0, 0, "-", "objective"], [333, 0, 0, "-", "quantization"], [341, 0, 0, "-", "strategy"], [353, 0, 0, "-", "template"], [354, 0, 0, "-", "training"], [358, 0, 0, "-", "utils"], [500, 0, 0, "-", "ux"], [546, 0, 0, "-", "version"]], "neural_compressor.adaptor": [[6, 0, 0, "-", "adaptor"], [8, 0, 0, "-", "keras"], [12, 0, 0, "-", "keras_utils"], [15, 0, 0, "-", "mxnet"], [16, 0, 0, "-", "mxnet_utils"], [18, 0, 0, "-", "onnxrt"], [21, 0, 0, "-", "ox_utils"], [44, 0, 0, "-", "pytorch"], [45, 0, 0, "-", "query"], [46, 0, 0, "-", "tensorflow"], [110, 0, 0, "-", "tf_utils"], [148, 0, 0, "-", "torch_utils"]], "neural_compressor.adaptor.adaptor": [[6, 2, 1, "", "Adaptor"], [6, 1, 1, "", "adaptor_registry"]], "neural_compressor.adaptor.keras": [[8, 2, 1, "", "KerasAdaptor"], [8, 2, 1, "", "KerasQuery"]], "neural_compressor.adaptor.keras_utils": [[9, 0, 0, "-", "conv2d"], [10, 0, 0, "-", "dense"], [11, 0, 0, "-", "depthwise_conv2d"], [13, 0, 0, "-", "quantizer"], [14, 0, 0, "-", "separable_conv2d"]], "neural_compressor.adaptor.mxnet": [[15, 2, 1, "", "MxNetAdaptor"]], "neural_compressor.adaptor.mxnet_utils": [[17, 0, 0, "-", "util"]], "neural_compressor.adaptor.mxnet_utils.util": [[17, 2, 1, "", "CalibCollector"], [17, 2, 1, "", "CalibData"], [17, 2, 1, "", "CollectorBase"], [17, 2, 1, "", "DataIterLoader"], [17, 2, 1, "", "DataLoaderWrap"], [17, 2, 1, "", "NameCollector"], [17, 2, 1, "", "OpType"], [17, 2, 1, "", "TensorCollector"], [17, 1, 1, "", "amp_convert"], [17, 1, 1, "", "calib_model"], [17, 1, 1, "", "check_mx_version"], [17, 1, 1, "", "combine_capabilities"], [17, 1, 1, "", "create_data_example"], [17, 1, 1, "", "distribute_calib_tensors"], [17, 1, 1, "", "ensure_list"], [17, 1, 1, "", "fuse"], [17, 1, 1, "", "get_framework_name"], [17, 1, 1, "", "is_model_quantized"], [17, 1, 1, "", "isiterable"], [17, 1, 1, "", "make_module"], [17, 1, 1, "", "make_nc_model"], [17, 1, 1, "", "make_symbol_block"], [17, 1, 1, "", "ndarray_to_device"], [17, 1, 1, "", "parse_tune_config"], [17, 1, 1, "", "prepare_dataloader"], [17, 1, 1, "", "prepare_model"], [17, 1, 1, "", "prepare_model_data"], [17, 1, 1, "", "quantize_sym_model"], [17, 1, 1, "", "query_quantizable_nodes"], [17, 1, 1, "", "run_forward"]], "neural_compressor.adaptor.onnxrt": [[18, 2, 1, "", "ONNXRTQuery"], [18, 2, 1, "", "ONNXRT_IntegerOpsAdaptor"], [18, 2, 1, "", "ONNXRT_QDQAdaptor"], [18, 2, 1, "", "ONNXRT_QLinearOpsAdaptor"], [18, 2, 1, "", "ONNXRUNTIMEAdaptor"]], "neural_compressor.adaptor.ox_utils": [[19, 0, 0, "-", "calibration"], [20, 0, 0, "-", "calibrator"], [33, 0, 0, "-", "operators"], [42, 0, 0, "-", "quantizer"], [43, 0, 0, "-", "util"]], "neural_compressor.adaptor.ox_utils.calibration": [[19, 2, 1, "", "ONNXRTAugment"]], "neural_compressor.adaptor.ox_utils.calibrator": [[20, 2, 1, "", "CalibratorBase"], [20, 2, 1, "", "HistogramCollector"], [20, 2, 1, "", "KLCalibrator"], [20, 2, 1, "", "MinMaxCalibrator"], [20, 2, 1, "", "PercentileCalibrator"], [20, 1, 1, "", "calib_registry"], [20, 1, 1, "", "smooth_distribution"]], "neural_compressor.adaptor.ox_utils.operators": [[22, 0, 0, "-", "activation"], [23, 0, 0, "-", "argmax"], [24, 0, 0, "-", "attention"], [25, 0, 0, "-", "binary_op"], [26, 0, 0, "-", "concat"], [27, 0, 0, "-", "conv"], [28, 0, 0, "-", "direct_q8"], [29, 0, 0, "-", "embed_layernorm"], [30, 0, 0, "-", "gather"], [31, 0, 0, "-", "gavgpool"], [32, 0, 0, "-", "gemm"], [34, 0, 0, "-", "lstm"], [35, 0, 0, "-", "matmul"], [36, 0, 0, "-", "maxpool"], [37, 0, 0, "-", "ops"], [38, 0, 0, "-", "pad"], [39, 0, 0, "-", "pooling"], [40, 0, 0, "-", "resize"], [41, 0, 0, "-", "split"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[22, 2, 1, "", "ActivationOperator"], [22, 2, 1, "", "QActivationOperator"], [22, 2, 1, "", "RemovableActivationOperator"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[23, 2, 1, "", "ArgMaxOperator"], [23, 2, 1, "", "QArgMaxOperator"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[24, 2, 1, "", "AttentionOperator"], [24, 2, 1, "", "QAttentionOperator"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[25, 2, 1, "", "BinaryOperator"], [25, 2, 1, "", "QBinaryOperator"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[26, 2, 1, "", "ConcatOperator"], [26, 2, 1, "", "QConcatOperator"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[27, 2, 1, "", "ConvOperator"], [27, 2, 1, "", "QConvOperator"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[28, 2, 1, "", "Direct8BitOperator"], [28, 2, 1, "", "QDirectOperator"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[29, 2, 1, "", "EmbedLayerNormalizationOperator"], [29, 2, 1, "", "QEmbedLayerNormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[30, 2, 1, "", "GatherOperator"], [30, 2, 1, "", "QGatherOperator"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[31, 2, 1, "", "GlobalAveragePoolOperator"], [31, 2, 1, "", "QGlobalAveragePoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[32, 2, 1, "", "GemmOperator"], [32, 2, 1, "", "QGemmOperator"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[34, 2, 1, "", "LSTMOperator"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[35, 2, 1, "", "MatMulOperator"], [35, 2, 1, "", "QMatMulOperator"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[36, 2, 1, "", "MaxPoolOperator"], [36, 2, 1, "", "QMaxPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[37, 2, 1, "", "Operator"], [37, 2, 1, "", "QOperator"], [37, 1, 1, "", "op_registry"], [37, 1, 1, "", "qop_registry"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[38, 2, 1, "", "PadOperator"], [38, 2, 1, "", "QPadOperator"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[39, 2, 1, "", "PoolOperator"], [39, 2, 1, "", "QPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[40, 2, 1, "", "QResizeOperator"], [40, 2, 1, "", "ResizeOperator"]], "neural_compressor.adaptor.ox_utils.operators.split": [[41, 2, 1, "", "QSplitOperator"], [41, 2, 1, "", "SplitOperator"]], "neural_compressor.adaptor.ox_utils.quantizer": [[42, 2, 1, "", "Quantizer"]], "neural_compressor.adaptor.ox_utils.util": [[43, 2, 1, "", "QuantFormat"], [43, 2, 1, "", "QuantType"], [43, 2, 1, "", "QuantizationMode"], [43, 2, 1, "", "QuantizedInitializer"], [43, 2, 1, "", "QuantizedValue"], [43, 2, 1, "", "QuantizedValueType"], [43, 2, 1, "", "ValueInfo"], [43, 1, 1, "", "adjust_weights_per_input"], [43, 1, 1, "", "adjust_weights_per_op"], [43, 1, 1, "", "attribute_to_kwarg"], [43, 1, 1, "", "calculate_scale_zp"], [43, 1, 1, "", "cast_tensor"], [43, 1, 1, "", "collate_preds"], [43, 1, 1, "", "dequantize_data"], [43, 1, 1, "", "dequantize_data_with_scale_zero"], [43, 1, 1, "", "dtype_to_name"], [43, 1, 1, "", "find_by_name"], [43, 1, 1, "", "float_to_bfloat16"], [43, 1, 1, "", "float_to_float16"], [43, 1, 1, "", "fold_scale"], [43, 1, 1, "", "get_smooth_scales_per_input"], [43, 1, 1, "", "get_smooth_scales_per_op"], [43, 1, 1, "", "insert_smooth_mul_op_per_input"], [43, 1, 1, "", "insert_smooth_mul_op_per_op"], [43, 1, 1, "", "is_B_transposed"], [43, 1, 1, "", "make_dquant_node"], [43, 1, 1, "", "make_quant_node"], [43, 1, 1, "", "quantize_data"], [43, 1, 1, "", "quantize_data_per_channel"], [43, 1, 1, "", "quantize_data_with_scale_zero"], [43, 1, 1, "", "quantize_nparray"], [43, 1, 1, "", "remove_init_from_model_input"], [43, 1, 1, "", "split_shared_bias"], [43, 1, 1, "", "trt_env_setup"]], "neural_compressor.adaptor.pytorch": [[44, 2, 1, "", "PyTorchAdaptor"], [44, 2, 1, "", "PyTorchQuery"], [44, 2, 1, "", "PyTorch_FXAdaptor"], [44, 2, 1, "", "PyTorch_IPEXAdaptor"], [44, 2, 1, "", "TemplateAdaptor"], [44, 1, 1, "", "get_ops_recursively"]], "neural_compressor.adaptor.query": [[45, 2, 1, "", "QueryBackendCapability"]], "neural_compressor.adaptor.tensorflow": [[46, 2, 1, "", "TensorFlowAdaptor"], [46, 2, 1, "", "TensorflowQuery"], [46, 2, 1, "", "Tensorflow_ITEXAdaptor"]], "neural_compressor.adaptor.tf_utils": [[47, 0, 0, "-", "graph_converter"], [48, 0, 0, "-", "graph_converter_without_calib"], [86, 0, 0, "-", "graph_rewriter"], [109, 0, 0, "-", "graph_util"], [111, 0, 0, "-", "quantize_graph"], [138, 0, 0, "-", "quantize_graph_common"], [139, 0, 0, "-", "tf2onnx_converter"], [142, 0, 0, "-", "transform_graph"], [145, 0, 0, "-", "util"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[47, 2, 1, "", "GraphConverter"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[48, 2, 1, "", "GraphConverterWithoutCalib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[50, 0, 0, "-", "bf16"], [75, 0, 0, "-", "generic"], [85, 0, 0, "-", "graph_base"], [94, 0, 0, "-", "int8"], [100, 0, 0, "-", "onnx"], [105, 0, 0, "-", "qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[49, 0, 0, "-", "bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[49, 2, 1, "", "BF16Convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[51, 0, 0, "-", "convert_add_to_biasadd"], [52, 0, 0, "-", "convert_layout"], [53, 0, 0, "-", "convert_leakyrelu"], [54, 0, 0, "-", "convert_nan_to_random"], [55, 0, 0, "-", "convert_placeholder_to_const"], [56, 0, 0, "-", "dequantize_cast_optimizer"], [57, 0, 0, "-", "dilated_contraction"], [58, 0, 0, "-", "dummy_biasadd"], [59, 0, 0, "-", "expanddims_optimizer"], [60, 0, 0, "-", "fetch_weight_from_reshape"], [61, 0, 0, "-", "fold_batch_norm"], [62, 0, 0, "-", "fold_constant"], [63, 0, 0, "-", "fuse_biasadd_add"], [64, 0, 0, "-", "fuse_column_wise_mul"], [65, 0, 0, "-", "fuse_conv_with_math"], [66, 0, 0, "-", "fuse_decomposed_bn"], [67, 0, 0, "-", "fuse_decomposed_in"], [68, 0, 0, "-", "fuse_gelu"], [69, 0, 0, "-", "fuse_layer_norm"], [70, 0, 0, "-", "fuse_pad_with_conv"], [71, 0, 0, "-", "fuse_pad_with_fp32_conv"], [72, 0, 0, "-", "fuse_reshape_transpose"], [73, 0, 0, "-", "graph_cse_optimizer"], [74, 0, 0, "-", "grappler_pass"], [76, 0, 0, "-", "insert_print_node"], [77, 0, 0, "-", "move_squeeze_after_relu"], [78, 0, 0, "-", "pre_optimize"], [79, 0, 0, "-", "remove_training_nodes"], [80, 0, 0, "-", "rename_batch_norm"], [81, 0, 0, "-", "split_shared_input"], [82, 0, 0, "-", "strip_equivalent_nodes"], [83, 0, 0, "-", "strip_unused_nodes"], [84, 0, 0, "-", "switch_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[51, 2, 1, "", "ConvertAddToBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[52, 2, 1, "", "ConvertLayoutOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[53, 2, 1, "", "ConvertLeakyReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[54, 2, 1, "", "ConvertNanToRandom"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[55, 2, 1, "", "ConvertPlaceholderToConst"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[56, 2, 1, "", "DequantizeCastOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[57, 2, 1, "", "DilatedContraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[58, 2, 1, "", "InjectDummyBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[59, 2, 1, "", "ExpandDimsOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[60, 2, 1, "", "FetchWeightFromReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[61, 2, 1, "", "FoldBatchNormNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[62, 2, 1, "", "GraphFoldConstantOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[63, 2, 1, "", "FuseBiasAddAndAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[64, 2, 1, "", "FuseColumnWiseMulOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[65, 2, 1, "", "FuseConvWithMathOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[66, 2, 1, "", "FuseDecomposedBNOptimizer"], [66, 1, 1, "", "bypass_reshape"], [66, 1, 1, "", "get_const_dim_count"], [66, 1, 1, "", "node_from_map"], [66, 1, 1, "", "node_name_from_input"], [66, 1, 1, "", "valid_reshape_inputs"], [66, 1, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[67, 2, 1, "", "FuseDecomposedINOptimizer"], [67, 1, 1, "", "bypass_reshape"], [67, 1, 1, "", "get_const_dim_count"], [67, 1, 1, "", "node_from_map"], [67, 1, 1, "", "node_name_from_input"], [67, 1, 1, "", "valid_reshape_inputs"], [67, 1, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[68, 2, 1, "", "FuseGeluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[69, 2, 1, "", "FuseLayerNormOptimizer"], [69, 1, 1, "", "node_from_map"], [69, 1, 1, "", "node_name_from_input"], [69, 1, 1, "", "values_from_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[70, 2, 1, "", "FusePadWithConv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[71, 2, 1, "", "FusePadWithFP32Conv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[72, 2, 1, "", "FuseTransposeReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[73, 2, 1, "", "GraphCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[74, 2, 1, "", "GrapplerOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[76, 2, 1, "", "InsertPrintMinMaxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[77, 2, 1, "", "MoveSqueezeAfterReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[78, 2, 1, "", "PreOptimization"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[79, 2, 1, "", "RemoveTrainingNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[80, 2, 1, "", "RenameBatchNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[81, 2, 1, "", "SplitSharedInputOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[82, 2, 1, "", "StripEquivalentNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[83, 2, 1, "", "StripUnusedNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[84, 2, 1, "", "SwitchOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[85, 2, 1, "", "GraphRewriterBase"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[87, 0, 0, "-", "freeze_fake_quant"], [88, 0, 0, "-", "freeze_value"], [89, 0, 0, "-", "freeze_value_without_calib"], [90, 0, 0, "-", "fuse_conv_redundant_dequantize"], [91, 0, 0, "-", "fuse_conv_requantize"], [92, 0, 0, "-", "fuse_matmul_redundant_dequantize"], [93, 0, 0, "-", "fuse_matmul_requantize"], [95, 0, 0, "-", "meta_op_optimizer"], [96, 0, 0, "-", "post_hostconst_converter"], [97, 0, 0, "-", "post_quantized_op_cse"], [98, 0, 0, "-", "rnn_convert"], [99, 0, 0, "-", "scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[87, 2, 1, "", "FreezeFakeQuantOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[88, 2, 1, "", "FreezeValueTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[89, 2, 1, "", "FreezeValueWithoutCalibTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[90, 2, 1, "", "FuseConvRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[91, 2, 1, "", "FuseConvRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[92, 2, 1, "", "FuseMatMulRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[93, 2, 1, "", "FuseMatMulRequantizeDequantizeNewAPITransformer"], [93, 2, 1, "", "FuseMatMulRequantizeDequantizeTransformer"], [93, 2, 1, "", "FuseMatMulRequantizeNewAPITransformer"], [93, 2, 1, "", "FuseMatMulRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[95, 2, 1, "", "MetaInfoChangingMemOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[96, 2, 1, "", "PostHostConstConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[97, 2, 1, "", "PostCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[98, 2, 1, "", "QuantizedRNNConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[99, 2, 1, "", "ScaleProPagationTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[101, 0, 0, "-", "onnx_graph"], [102, 0, 0, "-", "onnx_node"], [103, 0, 0, "-", "onnx_schema"], [104, 0, 0, "-", "tf2onnx_utils"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[101, 2, 1, "", "OnnxGraph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[102, 2, 1, "", "OnnxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[103, 2, 1, "", "OnnxOpSchema"], [103, 1, 1, "", "get_max_supported_opset_version"], [103, 1, 1, "", "get_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[104, 2, 1, "", "SeqType"], [104, 1, 1, "", "add_port_to_name"], [104, 1, 1, "", "are_shapes_equal"], [104, 1, 1, "", "assert_error"], [104, 1, 1, "", "compute_const_folding_using_tf"], [104, 1, 1, "", "convert_tensorflow_tensor_to_onnx"], [104, 1, 1, "", "find_opset"], [104, 1, 1, "", "get_index_from_strided_slice_of_shape"], [104, 1, 1, "", "get_subgraphs_from_onnx"], [104, 1, 1, "", "get_tensorflow_node_attr"], [104, 1, 1, "", "get_tensorflow_node_shape_attr"], [104, 1, 1, "", "get_tensorflow_tensor_data"], [104, 1, 1, "", "get_tensorflow_tensor_shape"], [104, 1, 1, "", "infer_onnx_shape_dtype"], [104, 1, 1, "", "initialize_name_counter"], [104, 1, 1, "", "is_list_or_tuple"], [104, 1, 1, "", "is_onnx_domain"], [104, 1, 1, "", "make_onnx_inputs_outputs"], [104, 1, 1, "", "make_onnx_shape"], [104, 1, 1, "", "map_numpy_to_onnx_dtype"], [104, 1, 1, "", "map_onnx_to_numpy_type"], [104, 1, 1, "", "map_tensorflow_dtype"], [104, 1, 1, "", "read_tensorflow_node_attrs"], [104, 1, 1, "", "save_protobuf"], [104, 1, 1, "", "set_name"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[106, 0, 0, "-", "insert_qdq_pattern"], [107, 0, 0, "-", "merge_duplicated_qdq"], [108, 0, 0, "-", "share_qdq_y_pattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[106, 2, 1, "", "GenerateGraphWithQDQPattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[107, 2, 1, "", "MergeDuplicatedQDQOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[108, 2, 1, "", "ShareQDQForItexYPatternOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_util": [[109, 2, 1, "", "GraphAnalyzer"], [109, 2, 1, "", "GraphRewriterHelper"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[113, 0, 0, "-", "qat"], [129, 0, 0, "-", "qdq"], [131, 0, 0, "-", "quantize_graph_base"], [132, 0, 0, "-", "quantize_graph_bn"], [133, 0, 0, "-", "quantize_graph_concatv2"], [134, 0, 0, "-", "quantize_graph_conv"], [135, 0, 0, "-", "quantize_graph_for_intel_cpu"], [136, 0, 0, "-", "quantize_graph_matmul"], [137, 0, 0, "-", "quantize_graph_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[112, 0, 0, "-", "fake_quantize"], [114, 0, 0, "-", "quantize_config"], [115, 0, 0, "-", "quantize_helper"], [116, 0, 0, "-", "quantize_layers"], [121, 0, 0, "-", "quantize_wrapper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[112, 2, 1, "", "FakeQuantize"], [112, 2, 1, "", "FakeQuantizeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[114, 2, 1, "", "QuantizeConfig"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[115, 1, 1, "", "init_quantize_config"], [115, 1, 1, "", "qat_clone_function"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[117, 0, 0, "-", "optimize_layer"], [118, 0, 0, "-", "quantize_layer_add"], [119, 0, 0, "-", "quantize_layer_base"], [120, 0, 0, "-", "quantize_layer_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[117, 1, 1, "", "config_quantizable_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[118, 2, 1, "", "QuantizeLayerAdd"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[119, 2, 1, "", "QuantizeLayerBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[120, 2, 1, "", "QuantizeLayerBatchNormalization"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[121, 2, 1, "", "QuantizeWrapper"], [121, 2, 1, "", "QuantizeWrapperBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[122, 0, 0, "-", "fuse_qdq_bn"], [123, 0, 0, "-", "fuse_qdq_concatv2"], [124, 0, 0, "-", "fuse_qdq_conv"], [125, 0, 0, "-", "fuse_qdq_deconv"], [126, 0, 0, "-", "fuse_qdq_in"], [127, 0, 0, "-", "fuse_qdq_matmul"], [128, 0, 0, "-", "fuse_qdq_pooling"], [130, 0, 0, "-", "optimize_qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[122, 2, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[123, 2, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[124, 2, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[125, 2, 1, "", "FuseNodeStartWithDeconv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[126, 2, 1, "", "FuseNodeStartWithFusedInstanceNorm"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[127, 2, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[128, 2, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[130, 2, 1, "", "OptimizeQDQGraph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[131, 2, 1, "", "QuantizeGraphBase"], [131, 2, 1, "", "QuantizeNodeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[132, 2, 1, "", "FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[133, 2, 1, "", "FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[134, 2, 1, "", "FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[135, 2, 1, "", "QuantizeGraphForIntel"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[136, 2, 1, "", "FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[137, 2, 1, "", "FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[138, 2, 1, "", "QuantizeGraphHelper"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[139, 2, 1, "", "TensorflowQDQToOnnxQDQConverter"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[140, 0, 0, "-", "bias_correction"], [141, 0, 0, "-", "graph_transform_base"], [143, 0, 0, "-", "insert_logging"], [144, 0, 0, "-", "rerange_quantized_concat"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[140, 2, 1, "", "BiasCorrection"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[141, 2, 1, "", "GraphTransformBase"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[143, 2, 1, "", "InsertLogging"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[144, 2, 1, "", "RerangeQuantizedConcat"]], "neural_compressor.adaptor.tf_utils.util": [[145, 1, 1, "", "collate_tf_preds"], [145, 1, 1, "", "disable_random"], [145, 1, 1, "", "fix_ref_type_of_graph_def"], [145, 1, 1, "", "generate_feed_dict"], [145, 1, 1, "", "get_estimator_graph"], [145, 1, 1, "", "get_graph_def"], [145, 1, 1, "", "get_input_output_node_names"], [145, 1, 1, "", "get_model_input_shape"], [145, 1, 1, "", "get_tensor_by_name"], [145, 1, 1, "", "get_tensor_val_from_graph_node"], [145, 1, 1, "", "int8_node_name_reverse"], [145, 1, 1, "", "is_ckpt_format"], [145, 1, 1, "", "is_saved_model_format"], [145, 1, 1, "", "iterator_sess_run"], [145, 1, 1, "", "read_graph"], [145, 1, 1, "", "strip_equivalent_nodes"], [145, 1, 1, "", "strip_unused_nodes"], [145, 1, 1, "", "tf_diagnosis_helper"], [145, 1, 1, "", "version1_eq_version2"], [145, 1, 1, "", "version1_gt_version2"], [145, 1, 1, "", "version1_gte_version2"], [145, 1, 1, "", "version1_lt_version2"], [145, 1, 1, "", "version1_lte_version2"], [145, 1, 1, "", "write_graph"]], "neural_compressor.adaptor.torch_utils": [[146, 0, 0, "-", "bf16_convert"], [147, 0, 0, "-", "hawq_metric"], [149, 0, 0, "-", "model_wrapper"], [150, 0, 0, "-", "smooth_quant"], [151, 0, 0, "-", "symbolic_trace"], [152, 0, 0, "-", "util"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[146, 2, 1, "", "BF16ModuleWrapper"], [146, 1, 1, "", "Convert"], [146, 1, 1, "", "bf16_symbolic_trace"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[147, 2, 1, "", "HessianTrace"], [147, 2, 1, "", "Node_collector"], [147, 1, 1, "", "compare_weights"], [147, 1, 1, "", "hawq_top"]], "neural_compressor.adaptor.torch_utils.smooth_quant": [[150, 2, 1, "", "GraphTrace"], [150, 2, 1, "", "TorchSmoothQuant"], [150, 1, 1, "", "get_module"], [150, 1, 1, "", "set_module"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[151, 1, 1, "", "symbolic_trace"], [151, 1, 1, "", "trace_and_fuse_sub_graph"]], "neural_compressor.adaptor.torch_utils.util": [[152, 1, 1, "", "append_attr"], [152, 1, 1, "", "auto_copy"], [152, 1, 1, "", "calculate_quant_min_max"], [152, 1, 1, "", "check_cfg_and_qconfig"], [152, 1, 1, "", "collate_torch_preds"], [152, 1, 1, "", "fetch_module"], [152, 1, 1, "", "generate_activation_observer"], [152, 1, 1, "", "get_embedding_contiguous"], [152, 1, 1, "", "get_example_input"], [152, 1, 1, "", "get_fallback_order"], [152, 1, 1, "", "get_mse_order_per_fp32"], [152, 1, 1, "", "get_mse_order_per_int8"], [152, 1, 1, "", "get_quantizable_ops_from_cfgs"], [152, 1, 1, "", "get_torch_version"], [152, 1, 1, "", "input2tuple"], [152, 1, 1, "", "is_fused_module"], [152, 1, 1, "", "match_datatype_pattern"], [152, 1, 1, "", "paser_cfgs"], [152, 1, 1, "", "set_module"], [152, 1, 1, "", "simple_inference"], [152, 1, 1, "", "update_sq_scale"]], "neural_compressor.algorithm": [[153, 0, 0, "-", "algorithm"], [154, 0, 0, "-", "fast_bias_correction"], [156, 0, 0, "-", "smooth_quant"], [157, 0, 0, "-", "weight_correction"]], "neural_compressor.algorithm.algorithm": [[153, 2, 1, "", "ALGORITHMS"], [153, 2, 1, "", "Algorithm"], [153, 2, 1, "", "AlgorithmScheduler"], [153, 1, 1, "", "algorithm_registry"]], "neural_compressor.algorithm.fast_bias_correction": [[154, 2, 1, "", "FastBiasCorrection"]], "neural_compressor.algorithm.smooth_quant": [[156, 2, 1, "", "SmoothQuant"]], "neural_compressor.algorithm.weight_correction": [[157, 2, 1, "", "WeightCorrection"]], "neural_compressor.benchmark": [[158, 1, 1, "", "fit"], [158, 1, 1, "", "get_architecture"], [158, 1, 1, "", "get_bounded_threads"], [158, 1, 1, "", "get_core_ids"], [158, 1, 1, "", "get_physical_ids"], [158, 1, 1, "", "get_threads"], [158, 1, 1, "", "get_threads_per_core"], [158, 1, 1, "", "set_all_env_var"], [158, 1, 1, "", "set_env_var"]], "neural_compressor.compression": [[159, 0, 0, "-", "callbacks"], [161, 0, 0, "-", "distillation"], [164, 0, 0, "-", "pruner"]], "neural_compressor.compression.callbacks": [[159, 2, 1, "", "BaseCallbacks"], [159, 2, 1, "", "DistillationCallbacks"], [159, 2, 1, "", "PruningCallbacks"], [159, 2, 1, "", "QuantizationAwareTrainingCallbacks"]], "neural_compressor.compression.callbacks.DistillationCallbacks": [[159, 3, 1, "", "_epoch_ran"], [159, 3, 1, "", "best_model"], [159, 3, 1, "", "best_score"], [159, 3, 1, "", "eval_frequency"]], "neural_compressor.compression.distillation": [[160, 0, 0, "-", "criterions"]], "neural_compressor.compression.distillation.criterions": [[160, 2, 1, "", "Criterions"], [160, 2, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [160, 2, 1, "", "KnowledgeDistillationFramework"], [160, 2, 1, "", "KnowledgeDistillationLoss"], [160, 2, 1, "", "PyTorchCriterions"], [160, 2, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLoss"], [160, 2, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"], [160, 2, 1, "", "PyTorchKnowledgeDistillationLoss"], [160, 2, 1, "", "PyTorchKnowledgeDistillationLossWrapper"], [160, 2, 1, "", "PyTorchSelfKnowledgeDistillationLoss"], [160, 2, 1, "", "PyTorchSelfKnowledgeDistillationLossWrapper"], [160, 2, 1, "", "SelfKnowledgeDistillationLoss"], [160, 2, 1, "", "TensorflowCriterions"], [160, 2, 1, "", "TensorflowKnowledgeDistillationLoss"], [160, 2, 1, "", "TensorflowKnowledgeDistillationLossExternal"], [160, 2, 1, "", "TensorflowKnowledgeDistillationLossWrapper"], [160, 1, 1, "", "criterion_registry"]], "neural_compressor.compression.pruner": [[163, 0, 0, "-", "criteria"], [166, 0, 0, "-", "model_slim"], [169, 0, 0, "-", "patterns"], [170, 0, 0, "-", "pruners"], [171, 0, 0, "-", "regs"], [172, 0, 0, "-", "schedulers"], [173, 0, 0, "-", "utils"]], "neural_compressor.compression.pruner.criteria": [[163, 2, 1, "", "GradientCriterion"], [163, 2, 1, "", "MagnitudeCriterion"], [163, 2, 1, "", "PruningCriterion"], [163, 2, 1, "", "RetrainFreeCriterion"], [163, 2, 1, "", "SnipCriterion"], [163, 2, 1, "", "SnipMomentumBlockCriterion"], [163, 2, 1, "", "SnipMomentumCriterion"], [163, 1, 1, "", "get_criterion"], [163, 1, 1, "", "register_criterion"]], "neural_compressor.compression.pruner.criteria.GradientCriterion": [[163, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.MagnitudeCriterion": [[163, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.PruningCriterion": [[163, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.RetrainFreeCriterion": [[163, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.SnipCriterion": [[163, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.SnipMomentumBlockCriterion": [[163, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion": [[163, 3, 1, "", "scores"]], "neural_compressor.compression.pruner.model_slim": [[165, 0, 0, "-", "auto_slim"], [167, 0, 0, "-", "pattern_analyzer"], [168, 0, 0, "-", "weight_slim"]], "neural_compressor.compression.pruner.model_slim.auto_slim": [[165, 1, 1, "", "generate_ffn2_pruning_config"], [165, 1, 1, "", "generate_mha_pruning_config"], [165, 1, 1, "", "model_slim"], [165, 1, 1, "", "model_slim_ffn2"], [165, 1, 1, "", "model_slim_mha"], [165, 1, 1, "", "parse_auto_slim_config"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer": [[167, 2, 1, "", "ClassifierHeadSearcher"], [167, 2, 1, "", "JitBasicSearcher"], [167, 2, 1, "", "Linear2LinearSearcher"], [167, 2, 1, "", "RecipeSearcher"], [167, 2, 1, "", "SelfMHASearcher"], [167, 1, 1, "", "get_attributes"], [167, 1, 1, "", "print_iterables"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher": [[167, 3, 1, "", "device"], [167, 3, 1, "", "flatten_static_graph"], [167, 3, 1, "", "model"], [167, 3, 1, "", "static_graph"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher": [[167, 3, 1, "", "device"], [167, 3, 1, "", "flatten_static_graph"], [167, 3, 1, "", "model"], [167, 3, 1, "", "searching_results"], [167, 3, 1, "", "static_graph"], [167, 3, 1, "", "target_layers"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher": [[167, 3, 1, "", "current_pattern"], [167, 3, 1, "", "device"], [167, 3, 1, "", "flatten_static_graph"], [167, 3, 1, "", "model"], [167, 3, 1, "", "searching_results"], [167, 3, 1, "", "static_graph"], [167, 3, 1, "", "target_layers"], [167, 3, 1, "", "target_op_lut"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher": [[167, 3, 1, "", "model"], [167, 3, 1, "", "recipe"], [167, 3, 1, "", "searching_results"], [167, 3, 1, "", "targets"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher": [[167, 3, 1, "", "device"], [167, 3, 1, "", "flatten_static_graph"], [167, 3, 1, "", "model"], [167, 3, 1, "", "static_graph"]], "neural_compressor.compression.pruner.model_slim.weight_slim": [[168, 2, 1, "", "LinearCompression"], [168, 2, 1, "", "LinearCompressionIterator"], [168, 2, 1, "", "MHACompression"], [168, 2, 1, "", "PostCompressionUtils"]], "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression": [[168, 3, 1, "", "device"], [168, 3, 1, "", "layer_1"], [168, 3, 1, "", "layer_2"]], "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompressionIterator": [[168, 3, 1, "", "linear_patterns"]], "neural_compressor.compression.pruner.patterns": [[169, 2, 1, "", "BasePattern"], [169, 2, 1, "", "PatternNInM"], [169, 2, 1, "", "PatternNxM"], [169, 1, 1, "", "get_pattern"], [169, 1, 1, "", "register_pattern"]], "neural_compressor.compression.pruner.patterns.BasePattern": [[169, 3, 1, "", "config"], [169, 3, 1, "", "invalid_layers"], [169, 3, 1, "", "is_global"], [169, 3, 1, "", "keep_mask_layers"], [169, 3, 1, "", "max_sparsity_ratio_per_op"], [169, 3, 1, "", "min_sparsity_ratio_per_op"], [169, 3, 1, "", "modules"], [169, 3, 1, "", "pattern"], [169, 3, 1, "", "target_sparsity"]], "neural_compressor.compression.pruner.patterns.PatternNInM": [[169, 3, 1, "", "M"], [169, 3, 1, "", "N"]], "neural_compressor.compression.pruner.patterns.PatternNxM": [[169, 3, 1, "", "block_size"]], "neural_compressor.compression.pruner.pruners": [[170, 2, 1, "", "BasePruner"], [170, 2, 1, "", "BasicPruner"], [170, 2, 1, "", "BlockMaskPruner"], [170, 2, 1, "", "PatternLockPruner"], [170, 2, 1, "", "ProgressivePruner"], [170, 2, 1, "", "RetrainFreePruner"], [170, 1, 1, "", "get_pruner"], [170, 1, 1, "", "parse_valid_pruner_types"], [170, 1, 1, "", "register_pruner"]], "neural_compressor.compression.pruner.pruners.BasePruner": [[170, 3, 1, "", "config"], [170, 3, 1, "", "current_sparsity_ratio"], [170, 3, 1, "", "end_step"], [170, 3, 1, "", "global_step"], [170, 3, 1, "", "masks"], [170, 3, 1, "", "max_sparsity_ratio_per_op"], [170, 3, 1, "", "modules"], [170, 3, 1, "", "pattern"], [170, 3, 1, "", "pruning_frequency"], [170, 3, 1, "", "scheduler"], [170, 3, 1, "", "scores"], [170, 3, 1, "", "start_step"], [170, 3, 1, "", "target_sparsity_ratio"]], "neural_compressor.compression.pruner.pruners.BasicPruner": [[170, 3, 1, "", "criterion"], [170, 3, 1, "", "pattern"], [170, 3, 1, "", "reg"], [170, 3, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruners.BlockMaskPruner": [[170, 3, 1, "", "criterion"], [170, 3, 1, "", "pattern"], [170, 3, 1, "", "reg"], [170, 3, 1, "", "scheduler"]], "neural_compressor.compression.pruner.pruners.RetrainFreePruner": [[170, 3, 1, "", "criterion"], [170, 3, 1, "", "pattern"], [170, 3, 1, "", "reg"], [170, 3, 1, "", "scheduler"]], "neural_compressor.compression.pruner.regs": [[171, 2, 1, "", "BaseReg"], [171, 2, 1, "", "GroupLasso"], [171, 1, 1, "", "get_reg"], [171, 1, 1, "", "get_reg_type"], [171, 1, 1, "", "register_reg"]], "neural_compressor.compression.pruner.regs.GroupLasso": [[171, 3, 1, "", "alpha"], [171, 3, 1, "", "reg_terms"]], "neural_compressor.compression.pruner.schedulers": [[172, 2, 1, "", "IterativeScheduler"], [172, 2, 1, "", "OneshotScheduler"], [172, 2, 1, "", "PruningScheduler"], [172, 1, 1, "", "get_scheduler"], [172, 1, 1, "", "register_scheduler"]], "neural_compressor.compression.pruner.schedulers.PruningScheduler": [[172, 3, 1, "", "config"]], "neural_compressor.compression.pruner.utils": [[173, 1, 1, "", "check_config"], [173, 1, 1, "", "check_key_validity"], [173, 1, 1, "", "generate_pruner_config"], [173, 1, 1, "", "get_sparsity_ratio"], [173, 1, 1, "", "parse_last_linear"], [173, 1, 1, "", "parse_to_prune"], [173, 1, 1, "", "process_and_check_config"], [173, 1, 1, "", "process_config"], [173, 1, 1, "", "process_weight_config"], [173, 1, 1, "", "process_yaml_config"], [173, 1, 1, "", "reset_none_to_default"], [173, 1, 1, "", "update_params"]], "neural_compressor.conf": [[174, 0, 0, "-", "config"], [175, 0, 0, "-", "dotdict"], [177, 0, 0, "-", "pythonic_config"]], "neural_compressor.conf.config": [[174, 2, 1, "", "Benchmark_Conf"], [174, 2, 1, "", "Conf"], [174, 2, 1, "", "Distillation_Conf"], [174, 2, 1, "", "Graph_Optimization_Conf"], [174, 2, 1, "", "MixedPrecision_Conf"], [174, 2, 1, "", "NASConfig"], [174, 2, 1, "", "PrunerV2"], [174, 2, 1, "", "Pruning_Conf"], [174, 2, 1, "", "Quantization_Conf"]], "neural_compressor.conf.dotdict": [[175, 2, 1, "", "DotDict"], [175, 1, 1, "", "deep_get"], [175, 1, 1, "", "deep_set"]], "neural_compressor.conf.pythonic_config": [[177, 2, 1, "", "AccuracyCriterion"], [177, 2, 1, "", "BenchmarkConfig"], [177, 2, 1, "", "DistillationConfig"], [177, 2, 1, "", "KnowledgeDistillationLossConfig"], [177, 2, 1, "", "Options"], [177, 2, 1, "", "QuantizationConfig"], [177, 2, 1, "", "WeightPruningConfig"]], "neural_compressor.config": [[178, 2, 1, "", "AccuracyCriterion"], [178, 2, 1, "", "BenchmarkConfig"], [178, 2, 1, "", "DistillationConfig"], [178, 2, 1, "", "DotDict"], [178, 2, 1, "", "ExportConfig"], [178, 2, 1, "", "IntermediateLayersKnowledgeDistillationLossConfig"], [178, 2, 1, "", "Keras"], [178, 2, 1, "", "KnowledgeDistillationLossConfig"], [178, 2, 1, "", "MXNet"], [178, 2, 1, "", "MixedPrecisionConfig"], [178, 2, 1, "", "NASConfig"], [178, 2, 1, "", "ONNX"], [178, 2, 1, "", "ONNXQlinear2QDQConfig"], [178, 2, 1, "", "Options"], [178, 2, 1, "", "PostTrainingQuantConfig"], [178, 2, 1, "", "PyTorch"], [178, 2, 1, "", "QuantizationAwareTrainingConfig"], [178, 2, 1, "", "SelfKnowledgeDistillationLossConfig"], [178, 2, 1, "", "TF2ONNXConfig"], [178, 2, 1, "", "TensorFlow"], [178, 2, 1, "", "Torch2ONNXConfig"], [178, 2, 1, "", "TuningCriterion"], [178, 2, 1, "", "WeightPruningConfig"]], "neural_compressor.contrib": [[180, 0, 0, "-", "strategy"]], "neural_compressor.contrib.strategy": [[181, 0, 0, "-", "sigopt"], [182, 0, 0, "-", "tpe"]], "neural_compressor.contrib.strategy.sigopt": [[181, 2, 1, "", "SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.tpe": [[182, 2, 1, "", "TpeTuneStrategy"]], "neural_compressor.data": [[187, 0, 0, "-", "dataloaders"], [199, 0, 0, "-", "datasets"], [203, 0, 0, "-", "filters"], [207, 0, 0, "-", "transforms"]], "neural_compressor.data.dataloaders": [[183, 0, 0, "-", "base_dataloader"], [184, 0, 0, "-", "dataloader"], [185, 0, 0, "-", "default_dataloader"], [186, 0, 0, "-", "fetcher"], [188, 0, 0, "-", "mxnet_dataloader"], [189, 0, 0, "-", "onnxrt_dataloader"], [190, 0, 0, "-", "pytorch_dataloader"], [191, 0, 0, "-", "sampler"], [192, 0, 0, "-", "tensorflow_dataloader"]], "neural_compressor.data.dataloaders.base_dataloader": [[183, 2, 1, "", "BaseDataLoader"]], "neural_compressor.data.dataloaders.dataloader": [[184, 2, 1, "", "DataLoader"]], "neural_compressor.data.dataloaders.default_dataloader": [[185, 2, 1, "", "DefaultDataLoader"], [185, 1, 1, "", "default_collate"]], "neural_compressor.data.dataloaders.fetcher": [[186, 2, 1, "", "Fetcher"], [186, 2, 1, "", "IndexFetcher"], [186, 2, 1, "", "IterableFetcher"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[188, 2, 1, "", "MXNetDataLoader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[189, 2, 1, "", "ONNXRTBertDataLoader"], [189, 2, 1, "", "ONNXRTDataLoader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[190, 2, 1, "", "PyTorchDataLoader"]], "neural_compressor.data.dataloaders.sampler": [[191, 2, 1, "", "BatchSampler"], [191, 2, 1, "", "IterableSampler"], [191, 2, 1, "", "Sampler"], [191, 2, 1, "", "SequentialSampler"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[192, 2, 1, "", "TFDataDataLoader"], [192, 2, 1, "", "TensorflowBertDataLoader"], [192, 2, 1, "", "TensorflowDataLoader"], [192, 2, 1, "", "TensorflowModelZooBertDataLoader"]], "neural_compressor.data.datasets": [[193, 0, 0, "-", "bert_dataset"], [194, 0, 0, "-", "coco_dataset"], [195, 0, 0, "-", "dataset"], [196, 0, 0, "-", "dummy_dataset"], [197, 0, 0, "-", "dummy_dataset_v2"], [198, 0, 0, "-", "imagenet_dataset"], [200, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.data.datasets.bert_dataset": [[193, 2, 1, "", "InputFeatures"], [193, 2, 1, "", "ONNXRTBertDataset"], [193, 2, 1, "", "ParseDecodeBert"], [193, 2, 1, "", "PytorchBertDataset"], [193, 2, 1, "", "TensorflowBertDataset"], [193, 2, 1, "", "TensorflowModelZooBertDataset"], [193, 1, 1, "", "convert_examples_to_features"], [193, 1, 1, "", "load_and_cache_examples"]], "neural_compressor.data.datasets.coco_dataset": [[194, 2, 1, "", "COCONpy"], [194, 2, 1, "", "COCORaw"], [194, 2, 1, "", "COCORecordDataset"], [194, 2, 1, "", "ParseDecodeCoco"]], "neural_compressor.data.datasets.dataset": [[195, 2, 1, "", "CIFAR10"], [195, 2, 1, "", "CIFAR100"], [195, 2, 1, "", "Dataset"], [195, 2, 1, "", "Datasets"], [195, 2, 1, "", "FashionMNIST"], [195, 2, 1, "", "ImageFolder"], [195, 2, 1, "", "IterableDataset"], [195, 2, 1, "", "MNIST"], [195, 2, 1, "", "MXNetCIFAR10"], [195, 2, 1, "", "MXNetCIFAR100"], [195, 2, 1, "", "MXNetDatasets"], [195, 2, 1, "", "MXNetFashionMNIST"], [195, 2, 1, "", "MXNetImageFolder"], [195, 2, 1, "", "MXNetMNIST"], [195, 2, 1, "", "ONNXRTITDatasets"], [195, 2, 1, "", "ONNXRTQLDatasets"], [195, 2, 1, "", "PyTorchDatasets"], [195, 2, 1, "", "PytorchCIFAR10"], [195, 2, 1, "", "PytorchCIFAR100"], [195, 2, 1, "", "PytorchFashionMNIST"], [195, 2, 1, "", "PytorchMNIST"], [195, 2, 1, "", "PytorchMxnetWrapDataset"], [195, 2, 1, "", "PytorchMxnetWrapFunction"], [195, 2, 1, "", "Tensorflow"], [195, 2, 1, "", "TensorflowCIFAR10"], [195, 2, 1, "", "TensorflowCIFAR100"], [195, 2, 1, "", "TensorflowDatasets"], [195, 2, 1, "", "TensorflowFashionMNIST"], [195, 2, 1, "", "TensorflowImageRecord"], [195, 2, 1, "", "TensorflowMNIST"], [195, 2, 1, "", "TensorflowTFRecordDataset"], [195, 2, 1, "", "TensorflowVOCRecord"], [195, 1, 1, "", "calculate_md5"], [195, 1, 1, "", "check_integrity"], [195, 1, 1, "", "dataset_registry"], [195, 1, 1, "", "download_url"], [195, 4, 1, "", "framework_datasets"], [195, 1, 1, "", "gen_bar_updater"]], "neural_compressor.data.datasets.dummy_dataset": [[196, 2, 1, "", "DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[197, 2, 1, "", "DummyDataset"], [197, 2, 1, "", "SparseDummyDataset"]], "neural_compressor.data.datasets.imagenet_dataset": [[198, 2, 1, "", "ImagenetRaw"], [198, 2, 1, "", "MXNetImagenetRaw"], [198, 2, 1, "", "ONNXRTImagenetDataset"], [198, 2, 1, "", "PytorchImagenetRaw"], [198, 2, 1, "", "TensorflowImagenetDataset"], [198, 2, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.data.datasets.style_transfer_dataset": [[200, 2, 1, "", "StyleTransferDataset"]], "neural_compressor.data.filters": [[201, 0, 0, "-", "coco_filter"], [202, 0, 0, "-", "filter"]], "neural_compressor.data.filters.coco_filter": [[201, 2, 1, "", "LabelBalanceCOCORawFilter"], [201, 2, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.filter": [[202, 2, 1, "", "FILTERS"], [202, 2, 1, "", "Filter"], [202, 2, 1, "", "MXNetFilters"], [202, 2, 1, "", "ONNXRTITFilters"], [202, 2, 1, "", "ONNXRTQLFilters"], [202, 2, 1, "", "PyTorchFilters"], [202, 2, 1, "", "TensorflowFilters"], [202, 1, 1, "", "filter_registry"]], "neural_compressor.data.transforms": [[205, 0, 0, "-", "coco_transform"], [206, 0, 0, "-", "imagenet_transform"], [208, 0, 0, "-", "postprocess"], [209, 0, 0, "-", "tokenization"], [210, 0, 0, "-", "transform"]], "neural_compressor.data.transforms.coco_transform": [[205, 2, 1, "", "ParseDecodeCocoTransform"]], "neural_compressor.data.transforms.imagenet_transform": [[206, 2, 1, "", "BilinearImagenetTransform"], [206, 2, 1, "", "LabelShift"], [206, 2, 1, "", "ONNXResizeCropImagenetTransform"], [206, 2, 1, "", "OnnxBilinearImagenetTransform"], [206, 2, 1, "", "ParseDecodeImagenet"], [206, 2, 1, "", "ParseDecodeImagenetTransform"], [206, 2, 1, "", "QuantizedInput"], [206, 2, 1, "", "ResizeWithAspectRatio"], [206, 2, 1, "", "TensorflowResizeCropImagenetTransform"]], "neural_compressor.data.transforms.postprocess": [[208, 2, 1, "", "Postprocess"]], "neural_compressor.data.transforms.tokenization": [[209, 2, 1, "", "BasicTokenizer"], [209, 2, 1, "", "FullTokenizer"], [209, 2, 1, "", "WordpieceTokenizer"], [209, 1, 1, "", "convert_by_vocab"], [209, 1, 1, "", "convert_to_unicode"], [209, 1, 1, "", "load_vocab"], [209, 1, 1, "", "whitespace_tokenize"]], "neural_compressor.data.transforms.transform": [[210, 2, 1, "", "AlignImageChannelTransform"], [210, 2, 1, "", "BaseTransform"], [210, 2, 1, "", "CastONNXTransform"], [210, 2, 1, "", "CastPyTorchTransform"], [210, 2, 1, "", "CastTFTransform"], [210, 2, 1, "", "CenterCropTFTransform"], [210, 2, 1, "", "CenterCropTransform"], [210, 2, 1, "", "CollectTransform"], [210, 2, 1, "", "ComposeTransform"], [210, 2, 1, "", "CropResizeTFTransform"], [210, 2, 1, "", "CropResizeTransform"], [210, 2, 1, "", "CropToBoundingBox"], [210, 2, 1, "", "InputFeatures"], [210, 2, 1, "", "MXNetCropResizeTransform"], [210, 2, 1, "", "MXNetCropToBoundingBox"], [210, 2, 1, "", "MXNetNormalizeTransform"], [210, 2, 1, "", "MXNetTransforms"], [210, 2, 1, "", "MXNetTranspose"], [210, 2, 1, "", "NormalizeTFTransform"], [210, 2, 1, "", "NormalizeTransform"], [210, 2, 1, "", "ONNXRTCropToBoundingBox"], [210, 2, 1, "", "ONNXRTITTransforms"], [210, 2, 1, "", "ONNXRTQLTransforms"], [210, 2, 1, "", "PaddedCenterCropTransform"], [210, 2, 1, "", "ParseDecodeVocTransform"], [210, 2, 1, "", "PyTorchAlignImageChannel"], [210, 2, 1, "", "PyTorchCropResizeTransform"], [210, 2, 1, "", "PyTorchNormalizeTransform"], [210, 2, 1, "", "PyTorchTransforms"], [210, 2, 1, "", "PyTorchTranspose"], [210, 2, 1, "", "PytorchMxnetTransform"], [210, 2, 1, "", "PytorchMxnetWrapFunction"], [210, 2, 1, "", "RandomCropTFTransform"], [210, 2, 1, "", "RandomCropTransform"], [210, 2, 1, "", "RandomHorizontalFlip"], [210, 2, 1, "", "RandomResizedCropMXNetTransform"], [210, 2, 1, "", "RandomResizedCropPytorchTransform"], [210, 2, 1, "", "RandomResizedCropTFTransform"], [210, 2, 1, "", "RandomResizedCropTransform"], [210, 2, 1, "", "RandomVerticalFlip"], [210, 2, 1, "", "RescaleKerasPretrainTransform"], [210, 2, 1, "", "RescaleTFTransform"], [210, 2, 1, "", "RescaleTransform"], [210, 2, 1, "", "ResizeMXNetTransform"], [210, 2, 1, "", "ResizePytorchTransform"], [210, 2, 1, "", "ResizeTFTransform"], [210, 2, 1, "", "ResizeTransform"], [210, 2, 1, "", "ResizeWithRatio"], [210, 2, 1, "", "SquadExample"], [210, 2, 1, "", "TFModelZooCollectTransform"], [210, 2, 1, "", "TFSquadV1ModelZooPostTransform"], [210, 2, 1, "", "TFSquadV1PostTransform"], [210, 2, 1, "", "TRANSFORMS"], [210, 2, 1, "", "TensorflowCropToBoundingBox"], [210, 2, 1, "", "TensorflowRandomHorizontalFlip"], [210, 2, 1, "", "TensorflowRandomVerticalFlip"], [210, 2, 1, "", "TensorflowResizeWithRatio"], [210, 2, 1, "", "TensorflowTransform"], [210, 2, 1, "", "TensorflowTransforms"], [210, 2, 1, "", "TensorflowTranspose"], [210, 2, 1, "", "TensorflowWrapFunction"], [210, 2, 1, "", "ToArray"], [210, 2, 1, "", "ToNDArrayTransform"], [210, 2, 1, "", "Transforms"], [210, 2, 1, "", "Transpose"], [210, 1, 1, "", "convert_examples_to_features"], [210, 1, 1, "", "get_final_text"], [210, 1, 1, "", "get_torchvision_map"], [210, 1, 1, "", "read_squad_examples"], [210, 1, 1, "", "transform_registry"]], "neural_compressor.experimental": [[211, 0, 0, "-", "benchmark"], [214, 0, 0, "-", "common"], [220, 0, 0, "-", "component"], [221, 0, 0, "-", "compression"], [223, 0, 0, "-", "contrib"], [248, 0, 0, "-", "data"], [253, 0, 0, "-", "distillation"], [254, 0, 0, "-", "export"], [259, 0, 0, "-", "graph_optimization"], [267, 0, 0, "-", "metric"], [269, 0, 0, "-", "mixed_precision"], [270, 0, 0, "-", "model_conversion"], [273, 0, 0, "-", "nas"], [279, 0, 0, "-", "pruner_legacy"], [283, 0, 0, "-", "pruning"], [284, 0, 0, "-", "pruning_recipes"], [288, 0, 0, "-", "pruning_v2"], [289, 0, 0, "-", "pytorch_pruner"], [296, 0, 0, "-", "quantization"], [297, 0, 0, "-", "scheduler"], [302, 0, 0, "-", "strategy"]], "neural_compressor.experimental.benchmark": [[211, 2, 1, "", "Benchmark"], [211, 1, 1, "", "get_architecture"], [211, 1, 1, "", "get_bounded_threads"], [211, 1, 1, "", "get_core_ids"], [211, 1, 1, "", "get_physical_ids"], [211, 1, 1, "", "get_threads"], [211, 1, 1, "", "get_threads_per_core"], [211, 1, 1, "", "set_all_env_var"], [211, 1, 1, "", "set_env_var"]], "neural_compressor.experimental.common": [[212, 0, 0, "-", "criterion"], [213, 0, 0, "-", "dataloader"], [215, 0, 0, "-", "metric"], [216, 0, 0, "-", "model"], [217, 0, 0, "-", "optimizer"], [218, 0, 0, "-", "postprocess"], [219, 0, 0, "-", "torch_utils"]], "neural_compressor.experimental.common.criterion": [[212, 2, 1, "", "Criterions"], [212, 2, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [212, 2, 1, "", "KnowledgeDistillationFramework"], [212, 2, 1, "", "KnowledgeDistillationLoss"], [212, 2, 1, "", "PyTorchCriterions"], [212, 2, 1, "", "PyTorchCrossEntropyLoss"], [212, 2, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLoss"], [212, 2, 1, "", "PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"], [212, 2, 1, "", "PyTorchKnowledgeDistillationLoss"], [212, 2, 1, "", "PyTorchKnowledgeDistillationLossWrapper"], [212, 2, 1, "", "PyTorchSelfKnowledgeDistillationLoss"], [212, 2, 1, "", "PyTorchSelfKnowledgeDistillationLossWrapper"], [212, 2, 1, "", "SelfKnowledgeDistillationLoss"], [212, 2, 1, "", "TensorFlowCrossEntropyLoss"], [212, 2, 1, "", "TensorFlowSparseCategoricalCrossentropy"], [212, 2, 1, "", "TensorflowCriterions"], [212, 2, 1, "", "TensorflowKnowledgeDistillationLoss"], [212, 2, 1, "", "TensorflowKnowledgeDistillationLossExternal"], [212, 2, 1, "", "TensorflowKnowledgeDistillationLossWrapper"], [212, 1, 1, "", "criterion_registry"]], "neural_compressor.experimental.common.dataloader": [[213, 2, 1, "", "DataLoader"]], "neural_compressor.experimental.common.metric": [[215, 2, 1, "", "Metric"]], "neural_compressor.experimental.common.model": [[216, 2, 1, "", "Model"], [216, 1, 1, "", "set_backend"]], "neural_compressor.experimental.common.optimizer": [[217, 2, 1, "", "Optimizers"], [217, 2, 1, "", "PyTorchOptimizers"], [217, 2, 1, "", "PyTorchSGD"], [217, 2, 1, "", "TensorFlowAdam"], [217, 2, 1, "", "TensorFlowAdamW"], [217, 2, 1, "", "TensorFlowSGD"], [217, 2, 1, "", "TensorflowOptimizers"], [217, 1, 1, "", "optimizer_registry"]], "neural_compressor.experimental.common.postprocess": [[218, 2, 1, "", "Postprocess"]], "neural_compressor.experimental.common.torch_utils": [[219, 1, 1, "", "get_activation"], [219, 1, 1, "", "record_output"]], "neural_compressor.experimental.component": [[220, 2, 1, "", "Component"]], "neural_compressor.experimental.compression": [[222, 0, 0, "-", "pruning"]], "neural_compressor.experimental.compression.pruning": [[222, 1, 1, "", "prepare_pruning"], [222, 1, 1, "", "save"]], "neural_compressor.experimental.contrib": [[224, 0, 0, "-", "strategy"]], "neural_compressor.experimental.contrib.strategy": [[225, 0, 0, "-", "sigopt"], [226, 0, 0, "-", "tpe"]], "neural_compressor.experimental.contrib.strategy.sigopt": [[225, 2, 1, "", "SigOptTuneStrategy"]], "neural_compressor.experimental.contrib.strategy.tpe": [[226, 2, 1, "", "TpeTuneStrategy"]], "neural_compressor.experimental.data": [[231, 0, 0, "-", "dataloaders"], [243, 0, 0, "-", "datasets"], [247, 0, 0, "-", "filters"], [250, 0, 0, "-", "transforms"]], "neural_compressor.experimental.data.dataloaders": [[227, 0, 0, "-", "base_dataloader"], [228, 0, 0, "-", "dataloader"], [229, 0, 0, "-", "default_dataloader"], [230, 0, 0, "-", "fetcher"], [232, 0, 0, "-", "mxnet_dataloader"], [233, 0, 0, "-", "onnxrt_dataloader"], [234, 0, 0, "-", "pytorch_dataloader"], [235, 0, 0, "-", "sampler"], [236, 0, 0, "-", "tensorflow_dataloader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[227, 2, 1, "", "BaseDataLoader"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[229, 2, 1, "", "DefaultDataLoader"], [229, 1, 1, "", "default_collate"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[230, 2, 1, "", "Fetcher"], [230, 2, 1, "", "IndexFetcher"], [230, 2, 1, "", "IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[232, 2, 1, "", "MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[233, 2, 1, "", "ONNXRTBertDataLoader"], [233, 2, 1, "", "ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[234, 2, 1, "", "PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[235, 2, 1, "", "BatchSampler"], [235, 2, 1, "", "IterableSampler"], [235, 2, 1, "", "Sampler"], [235, 2, 1, "", "SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[236, 2, 1, "", "TFDataDataLoader"], [236, 2, 1, "", "TensorflowBertDataLoader"], [236, 2, 1, "", "TensorflowDataLoader"], [236, 2, 1, "", "TensorflowModelZooBertDataLoader"]], "neural_compressor.experimental.data.datasets": [[237, 0, 0, "-", "bert_dataset"], [238, 0, 0, "-", "coco_dataset"], [239, 0, 0, "-", "dataset"], [240, 0, 0, "-", "dummy_dataset"], [241, 0, 0, "-", "dummy_dataset_v2"], [242, 0, 0, "-", "imagenet_dataset"], [244, 0, 0, "-", "style_transfer_dataset"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[237, 2, 1, "", "InputFeatures"], [237, 2, 1, "", "ONNXRTBertDataset"], [237, 2, 1, "", "ParseDecodeBert"], [237, 2, 1, "", "PytorchBertDataset"], [237, 2, 1, "", "TensorflowBertDataset"], [237, 2, 1, "", "TensorflowModelZooBertDataset"], [237, 1, 1, "", "convert_examples_to_features"], [237, 1, 1, "", "load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[238, 2, 1, "", "COCONpy"], [238, 2, 1, "", "COCORaw"], [238, 2, 1, "", "COCORecordDataset"], [238, 2, 1, "", "ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.dataset": [[239, 2, 1, "", "CIFAR10"], [239, 2, 1, "", "CIFAR100"], [239, 2, 1, "", "Dataset"], [239, 2, 1, "", "Datasets"], [239, 2, 1, "", "FashionMNIST"], [239, 2, 1, "", "ImageFolder"], [239, 2, 1, "", "IterableDataset"], [239, 2, 1, "", "MNIST"], [239, 2, 1, "", "MXNetCIFAR10"], [239, 2, 1, "", "MXNetCIFAR100"], [239, 2, 1, "", "MXNetDatasets"], [239, 2, 1, "", "MXNetFashionMNIST"], [239, 2, 1, "", "MXNetImageFolder"], [239, 2, 1, "", "MXNetMNIST"], [239, 2, 1, "", "ONNXRTITDatasets"], [239, 2, 1, "", "ONNXRTQLDatasets"], [239, 2, 1, "", "PyTorchDatasets"], [239, 2, 1, "", "PytorchCIFAR10"], [239, 2, 1, "", "PytorchCIFAR100"], [239, 2, 1, "", "PytorchFashionMNIST"], [239, 2, 1, "", "PytorchMNIST"], [239, 2, 1, "", "PytorchMxnetWrapDataset"], [239, 2, 1, "", "PytorchMxnetWrapFunction"], [239, 2, 1, "", "TensorflowCIFAR10"], [239, 2, 1, "", "TensorflowCIFAR100"], [239, 2, 1, "", "TensorflowDatasets"], [239, 2, 1, "", "TensorflowFashionMNIST"], [239, 2, 1, "", "TensorflowImageFolder"], [239, 2, 1, "", "TensorflowImageRecord"], [239, 2, 1, "", "TensorflowMNIST"], [239, 2, 1, "", "TensorflowTFRecordDataset"], [239, 2, 1, "", "TensorflowVOCRecord"], [239, 1, 1, "", "calculate_md5"], [239, 1, 1, "", "check_integrity"], [239, 1, 1, "", "dataset_registry"], [239, 1, 1, "", "download_url"], [239, 4, 1, "", "framework_datasets"], [239, 1, 1, "", "gen_bar_updater"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[240, 2, 1, "", "DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[241, 2, 1, "", "DummyDataset"], [241, 2, 1, "", "SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[242, 2, 1, "", "ImagenetRaw"], [242, 2, 1, "", "MXNetImagenetRaw"], [242, 2, 1, "", "ONNXRTImagenetDataset"], [242, 2, 1, "", "PytorchImagenetRaw"], [242, 2, 1, "", "TensorflowImagenetDataset"], [242, 2, 1, "", "TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[244, 2, 1, "", "StyleTransferDataset"]], "neural_compressor.experimental.data.filters": [[245, 0, 0, "-", "coco_filter"], [246, 0, 0, "-", "filter"]], "neural_compressor.experimental.data.filters.coco_filter": [[245, 2, 1, "", "LabelBalanceCOCORawFilter"], [245, 2, 1, "", "LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.filter": [[246, 2, 1, "", "FILTERS"], [246, 2, 1, "", "Filter"], [246, 2, 1, "", "MXNetFilters"], [246, 2, 1, "", "ONNXRTITFilters"], [246, 2, 1, "", "ONNXRTQLFilters"], [246, 2, 1, "", "PyTorchFilters"], [246, 2, 1, "", "TensorflowFilters"], [246, 1, 1, "", "filter_registry"]], "neural_compressor.experimental.data.transforms": [[249, 0, 0, "-", "imagenet_transform"], [251, 0, 0, "-", "tokenization"], [252, 0, 0, "-", "transform"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[249, 2, 1, "", "BilinearImagenetTransform"], [249, 2, 1, "", "LabelShift"], [249, 2, 1, "", "ONNXResizeCropImagenetTransform"], [249, 2, 1, "", "OnnxBilinearImagenetTransform"], [249, 2, 1, "", "ParseDecodeImagenet"], [249, 2, 1, "", "ParseDecodeImagenetTransform"], [249, 2, 1, "", "QuantizedInput"], [249, 2, 1, "", "ResizeWithAspectRatio"], [249, 2, 1, "", "TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental.data.transforms.tokenization": [[251, 2, 1, "", "BasicTokenizer"], [251, 2, 1, "", "FullTokenizer"], [251, 2, 1, "", "WordpieceTokenizer"], [251, 1, 1, "", "convert_by_vocab"], [251, 1, 1, "", "convert_to_unicode"], [251, 1, 1, "", "load_vocab"], [251, 1, 1, "", "whitespace_tokenize"]], "neural_compressor.experimental.data.transforms.transform": [[252, 2, 1, "", "AlignImageChannelTransform"], [252, 2, 1, "", "BaseTransform"], [252, 2, 1, "", "CastONNXTransform"], [252, 2, 1, "", "CastPyTorchTransform"], [252, 2, 1, "", "CastTFTransform"], [252, 2, 1, "", "CenterCropTFTransform"], [252, 2, 1, "", "CenterCropTransform"], [252, 2, 1, "", "CollectTransform"], [252, 2, 1, "", "ComposeTransform"], [252, 2, 1, "", "CropResizeTFTransform"], [252, 2, 1, "", "CropResizeTransform"], [252, 2, 1, "", "CropToBoundingBox"], [252, 2, 1, "", "InputFeatures"], [252, 2, 1, "", "MXNetCropResizeTransform"], [252, 2, 1, "", "MXNetCropToBoundingBox"], [252, 2, 1, "", "MXNetNormalizeTransform"], [252, 2, 1, "", "MXNetTransforms"], [252, 2, 1, "", "MXNetTranspose"], [252, 2, 1, "", "NormalizeTFTransform"], [252, 2, 1, "", "NormalizeTransform"], [252, 2, 1, "", "ONNXRTCropToBoundingBox"], [252, 2, 1, "", "ONNXRTITTransforms"], [252, 2, 1, "", "ONNXRTQLTransforms"], [252, 2, 1, "", "PaddedCenterCropTransform"], [252, 2, 1, "", "ParseDecodeVocTransform"], [252, 2, 1, "", "PyTorchAlignImageChannel"], [252, 2, 1, "", "PyTorchCropResizeTransform"], [252, 2, 1, "", "PyTorchNormalizeTransform"], [252, 2, 1, "", "PyTorchTransforms"], [252, 2, 1, "", "PyTorchTranspose"], [252, 2, 1, "", "PytorchMxnetTransform"], [252, 2, 1, "", "PytorchMxnetWrapFunction"], [252, 2, 1, "", "RandomCropTFTransform"], [252, 2, 1, "", "RandomCropTransform"], [252, 2, 1, "", "RandomHorizontalFlip"], [252, 2, 1, "", "RandomResizedCropMXNetTransform"], [252, 2, 1, "", "RandomResizedCropPytorchTransform"], [252, 2, 1, "", "RandomResizedCropTFTransform"], [252, 2, 1, "", "RandomResizedCropTransform"], [252, 2, 1, "", "RandomVerticalFlip"], [252, 2, 1, "", "RescaleKerasPretrainTransform"], [252, 2, 1, "", "RescaleTFTransform"], [252, 2, 1, "", "RescaleTransform"], [252, 2, 1, "", "ResizeMXNetTransform"], [252, 2, 1, "", "ResizePytorchTransform"], [252, 2, 1, "", "ResizeTFTransform"], [252, 2, 1, "", "ResizeTransform"], [252, 2, 1, "", "ResizeWithRatio"], [252, 2, 1, "", "SquadExample"], [252, 2, 1, "", "TFModelZooCollectTransform"], [252, 2, 1, "", "TFSquadV1ModelZooPostTransform"], [252, 2, 1, "", "TFSquadV1PostTransform"], [252, 2, 1, "", "TRANSFORMS"], [252, 2, 1, "", "TensorflowCropToBoundingBox"], [252, 2, 1, "", "TensorflowRandomHorizontalFlip"], [252, 2, 1, "", "TensorflowRandomVerticalFlip"], [252, 2, 1, "", "TensorflowResizeWithRatio"], [252, 2, 1, "", "TensorflowTransform"], [252, 2, 1, "", "TensorflowTransforms"], [252, 2, 1, "", "TensorflowTranspose"], [252, 2, 1, "", "TensorflowWrapFunction"], [252, 2, 1, "", "ToArray"], [252, 2, 1, "", "ToNDArrayTransform"], [252, 2, 1, "", "Transforms"], [252, 2, 1, "", "Transpose"], [252, 1, 1, "", "convert_examples_to_features"], [252, 1, 1, "", "get_final_text"], [252, 1, 1, "", "get_torchvision_map"], [252, 1, 1, "", "read_squad_examples"], [252, 1, 1, "", "transform_registry"]], "neural_compressor.experimental.distillation": [[253, 2, 1, "", "Distillation"]], "neural_compressor.experimental.distillation.Distillation": [[253, 3, 1, "", "_epoch_ran"], [253, 3, 1, "", "best_model"], [253, 3, 1, "", "best_score"], [253, 3, 1, "", "eval_frequency"]], "neural_compressor.experimental.export": [[255, 0, 0, "-", "qlinear2qdq"], [256, 0, 0, "-", "tf2onnx"], [257, 0, 0, "-", "torch2onnx"], [258, 0, 0, "-", "utils"]], "neural_compressor.experimental.export.qlinear2qdq": [[255, 1, 1, "", "check_model"], [255, 1, 1, "", "onnx_qlinear_to_qdq"]], "neural_compressor.experimental.export.tf2onnx": [[256, 1, 1, "", "tf_to_fp32_onnx"], [256, 1, 1, "", "tf_to_int8_onnx"]], "neural_compressor.experimental.export.torch2onnx": [[257, 1, 1, "", "build_scale_mapping"], [257, 1, 1, "", "get_node_mapping"], [257, 1, 1, "", "get_quantizable_onnx_ops"], [257, 1, 1, "", "qdq_fp32_bias"], [257, 1, 1, "", "qdq_fp32_bias_qdq"], [257, 1, 1, "", "qdq_int32_bias"], [257, 1, 1, "", "recalculate_bias"], [257, 1, 1, "", "remove_nodes_by_name"], [257, 1, 1, "", "set_data_type"], [257, 1, 1, "", "set_scale_info"], [257, 1, 1, "", "sub_graph_with_int32_bias"], [257, 1, 1, "", "torch_to_fp32_onnx"], [257, 1, 1, "", "torch_to_int8_onnx"], [257, 1, 1, "", "update_weight_bias"]], "neural_compressor.experimental.export.utils": [[258, 2, 1, "", "DummyDataReader"], [258, 1, 1, "", "ONNX2Numpy_dtype"]], "neural_compressor.experimental.graph_optimization": [[259, 2, 1, "", "Graph_Optimization"]], "neural_compressor.experimental.metric": [[261, 0, 0, "-", "bleu"], [262, 0, 0, "-", "bleu_util"], [263, 0, 0, "-", "coco_label_map"], [264, 0, 0, "-", "coco_tools"], [265, 0, 0, "-", "evaluate_squad"], [266, 0, 0, "-", "f1"], [268, 0, 0, "-", "metric"]], "neural_compressor.experimental.metric.bleu": [[261, 2, 1, "", "BLEU"], [261, 2, 1, "", "UnicodeRegex"], [261, 1, 1, "", "bleu_tokenize"]], "neural_compressor.experimental.metric.bleu.BLEU": [[261, 3, 1, "", "labels"], [261, 3, 1, "", "predictions"]], "neural_compressor.experimental.metric.bleu.UnicodeRegex": [[261, 3, 1, "", "nondigit_punct_re"], [261, 3, 1, "", "punct_nondigit_re"], [261, 3, 1, "", "symbol_re"]], "neural_compressor.experimental.metric.bleu_util": [[262, 1, 1, "", "compute_bleu"]], "neural_compressor.experimental.metric.coco_tools": [[264, 2, 1, "", "COCOEvalWrapper"], [264, 2, 1, "", "COCOWrapper"], [264, 1, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [264, 1, 1, "", "ExportSingleImageDetectionMasksToCoco"], [264, 1, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.experimental.metric.coco_tools.COCOWrapper": [[264, 3, 1, "", "dataset"], [264, 3, 1, "", "detection_type"]], "neural_compressor.experimental.metric.evaluate_squad": [[265, 1, 1, "", "evaluate"], [265, 1, 1, "", "exact_match_score"], [265, 1, 1, "", "f1_score"], [265, 1, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[266, 1, 1, "", "evaluate"], [266, 1, 1, "", "f1_score"], [266, 1, 1, "", "metric_max_over_ground_truths"], [266, 1, 1, "", "normalize_answer"]], "neural_compressor.experimental.metric.metric": [[268, 2, 1, "", "Accuracy"], [268, 2, 1, "", "BaseMetric"], [268, 2, 1, "", "COCOmAPv2"], [268, 2, 1, "", "F1"], [268, 2, 1, "", "GeneralTopK"], [268, 2, 1, "", "Loss"], [268, 2, 1, "", "MAE"], [268, 2, 1, "", "METRICS"], [268, 2, 1, "", "MSE"], [268, 2, 1, "", "MXNetMetrics"], [268, 2, 1, "", "ONNXRTGLUE"], [268, 2, 1, "", "ONNXRTITMetrics"], [268, 2, 1, "", "ONNXRTQLMetrics"], [268, 2, 1, "", "PyTorchLoss"], [268, 2, 1, "", "PyTorchMetrics"], [268, 2, 1, "", "RMSE"], [268, 2, 1, "", "ROC"], [268, 2, 1, "", "SquadF1"], [268, 2, 1, "", "TensorflowCOCOMAP"], [268, 2, 1, "", "TensorflowMAP"], [268, 2, 1, "", "TensorflowMetrics"], [268, 2, 1, "", "TensorflowTopK"], [268, 2, 1, "", "TensorflowVOCMAP"], [268, 2, 1, "", "WrapMXNetMetric"], [268, 2, 1, "", "WrapONNXRTMetric"], [268, 2, 1, "", "WrapPyTorchMetric"], [268, 2, 1, "", "mIOU"], [268, 1, 1, "", "metric_registry"]], "neural_compressor.experimental.metric.metric.Accuracy": [[268, 3, 1, "", "label_list"], [268, 3, 1, "", "pred_list"], [268, 3, 1, "", "sample"]], "neural_compressor.experimental.metric.metric.GeneralTopK": [[268, 3, 1, "", "k"], [268, 3, 1, "", "num_correct"], [268, 3, 1, "", "num_sample"]], "neural_compressor.experimental.metric.metric.Loss": [[268, 3, 1, "", "sample"], [268, 3, 1, "", "sum"]], "neural_compressor.experimental.metric.metric.MAE": [[268, 3, 1, "", "compare_label"], [268, 3, 1, "", "label_list"], [268, 3, 1, "", "pred_list"]], "neural_compressor.experimental.metric.metric.METRICS": [[268, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.MSE": [[268, 3, 1, "", "compare_label"], [268, 3, 1, "", "label_list"], [268, 3, 1, "", "pred_list"]], "neural_compressor.experimental.metric.metric.MXNetMetrics": [[268, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTITMetrics": [[268, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics": [[268, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.PyTorchMetrics": [[268, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.RMSE": [[268, 3, 1, "", "mse"]], "neural_compressor.experimental.metric.metric.TensorflowMetrics": [[268, 3, 1, "", "metrics"]], "neural_compressor.experimental.metric.metric.TensorflowTopK": [[268, 3, 1, "", "k"], [268, 3, 1, "", "num_correct"], [268, 3, 1, "", "num_sample"]], "neural_compressor.experimental.mixed_precision": [[269, 2, 1, "", "MixedPrecision"]], "neural_compressor.experimental.model_conversion": [[270, 2, 1, "", "ModelConversion"]], "neural_compressor.experimental.nas": [[271, 0, 0, "-", "basic_nas"], [272, 0, 0, "-", "dynas"], [274, 0, 0, "-", "nas"], [275, 0, 0, "-", "nas_utils"], [276, 0, 0, "-", "search_algorithms"]], "neural_compressor.experimental.nas.basic_nas": [[271, 2, 1, "", "BasicNAS"]], "neural_compressor.experimental.nas.dynas": [[272, 2, 1, "", "DyNAS"]], "neural_compressor.experimental.nas.nas": [[274, 2, 1, "", "NAS"], [274, 2, 1, "", "NASBase"]], "neural_compressor.experimental.nas.nas_utils": [[275, 1, 1, "", "create_search_space_pool"], [275, 1, 1, "", "find_pareto_front"], [275, 1, 1, "", "nas_registry"]], "neural_compressor.experimental.nas.search_algorithms": [[276, 2, 1, "", "BayesianOptimizationSearcher"], [276, 2, 1, "", "GridSearcher"], [276, 2, 1, "", "RandomSearcher"], [276, 2, 1, "", "Searcher"]], "neural_compressor.experimental.pruner_legacy": [[277, 0, 0, "-", "gradient_sensitivity"], [278, 0, 0, "-", "group_lasso"], [280, 0, 0, "-", "magnitude"], [281, 0, 0, "-", "pattern_lock"], [282, 0, 0, "-", "pruner"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[277, 2, 1, "", "GradientSensitivityPruner"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[278, 2, 1, "", "GroupLassoPruner"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[280, 2, 1, "", "BasicMagnitudePruner"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[281, 2, 1, "", "PatternLockPruner"]], "neural_compressor.experimental.pruner_legacy.pruner": [[282, 2, 1, "", "Pruner"], [282, 1, 1, "", "pruner_registry"]], "neural_compressor.experimental.pruning": [[283, 2, 1, "", "Pruning"], [283, 2, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning.Pruning": [[283, 3, 1, "", "conf"], [283, 3, 1, "", "pruners"]], "neural_compressor.experimental.pruning_recipes": [[285, 0, 0, "-", "patterns"]], "neural_compressor.experimental.pruning_recipes.patterns": [[286, 0, 0, "-", "pattern"], [287, 0, 0, "-", "tile_pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[286, 2, 1, "", "PATTERNS"], [286, 2, 1, "", "PatternBase"], [286, 1, 1, "", "pattern_registry"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS": [[286, 3, 1, "", "patterns"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[287, 2, 1, "", "TilePatternBase"], [287, 2, 1, "", "TilePattern_1x1"], [287, 2, 1, "", "TilePattern_1x16"], [287, 2, 1, "", "TilePattern_1x2"], [287, 2, 1, "", "TilePattern_2x2"], [287, 2, 1, "", "TilePattern_4x1"]], "neural_compressor.experimental.pruning_v2": [[288, 2, 1, "", "Pruning"], [288, 2, 1, "", "TfPruningCallback"]], "neural_compressor.experimental.pruning_v2.Pruning": [[288, 3, 1, "", "conf"], [288, 3, 1, "", "pruners"]], "neural_compressor.experimental.pytorch_pruner": [[290, 0, 0, "-", "logger"], [291, 0, 0, "-", "patterns"], [292, 0, 0, "-", "prune_utils"], [293, 0, 0, "-", "pruner"], [294, 0, 0, "-", "pruning"], [295, 0, 0, "-", "scheduler"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[291, 2, 1, "", "Pattern"], [291, 2, 1, "", "PatternNInM"], [291, 2, 1, "", "PatternNxM"], [291, 1, 1, "", "get_pattern"], [291, 1, 1, "", "register_pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.Pattern": [[291, 3, 1, "", "is_global"], [291, 3, 1, "", "pattern"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM": [[291, 3, 1, "", "M"], [291, 3, 1, "", "N"]], "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM": [[291, 3, 1, "", "block_size"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[292, 1, 1, "", "check_config"], [292, 1, 1, "", "parse_not_to_prune"], [292, 1, 1, "", "parse_to_prune"], [292, 1, 1, "", "process_and_check_config"], [292, 1, 1, "", "process_config"], [292, 1, 1, "", "reset_non_value_to_default"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[293, 2, 1, "", "MagnitudePruner"], [293, 2, 1, "", "PatternLockPruner"], [293, 2, 1, "", "Pruner"], [293, 2, 1, "", "SnipMomentumPruner"], [293, 2, 1, "", "SnipPruner"], [293, 1, 1, "", "get_pruner"], [293, 1, 1, "", "register_pruners"]], "neural_compressor.experimental.pytorch_pruner.pruner.Pruner": [[293, 3, 1, "", "config"], [293, 3, 1, "", "current_sparsity_ratio"], [293, 3, 1, "", "end_step"], [293, 3, 1, "", "global_step"], [293, 3, 1, "", "masks"], [293, 3, 1, "", "max_sparsity_ratio_per_layer"], [293, 3, 1, "", "modules"], [293, 3, 1, "", "pattern"], [293, 3, 1, "", "scheduler"], [293, 3, 1, "", "scores"], [293, 3, 1, "", "start_step"], [293, 3, 1, "", "target_sparsity_ratio"], [293, 3, 1, "", "update_frequency_on_step"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[294, 2, 1, "", "Pruning"]], "neural_compressor.experimental.pytorch_pruner.pruning.Pruning": [[294, 3, 1, "", "config_file_path"], [294, 3, 1, "", "model"], [294, 3, 1, "", "pruner_info"], [294, 3, 1, "", "pruners"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[295, 2, 1, "", "IterativeScheduler"], [295, 2, 1, "", "OneshotScheduler"], [295, 2, 1, "", "Scheduler"], [295, 1, 1, "", "get_scheduler"], [295, 1, 1, "", "register_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler": [[295, 3, 1, "", "config"]], "neural_compressor.experimental.quantization": [[296, 2, 1, "", "Quantization"]], "neural_compressor.experimental.scheduler": [[297, 2, 1, "", "Scheduler"]], "neural_compressor.experimental.strategy": [[298, 0, 0, "-", "auto_mixed_precision"], [299, 0, 0, "-", "basic"], [300, 0, 0, "-", "bayesian"], [301, 0, 0, "-", "exhaustive"], [303, 0, 0, "-", "mse"], [304, 0, 0, "-", "mse_v2"], [305, 0, 0, "-", "random"], [306, 0, 0, "-", "strategy"], [308, 0, 0, "-", "utils"]], "neural_compressor.experimental.strategy.auto_mixed_precision": [[298, 2, 1, "", "AutoMixedPrecisionTuneStrategy"]], "neural_compressor.experimental.strategy.basic": [[299, 2, 1, "", "BasicTuneStrategy"]], "neural_compressor.experimental.strategy.bayesian": [[300, 2, 1, "", "BayesianOptimization"], [300, 2, 1, "", "BayesianTuneStrategy"], [300, 2, 1, "", "TargetSpace"], [300, 1, 1, "", "acq_max"]], "neural_compressor.experimental.strategy.exhaustive": [[301, 2, 1, "", "ExhaustiveTuneStrategy"]], "neural_compressor.experimental.strategy.mse": [[303, 2, 1, "", "MSETuneStrategy"]], "neural_compressor.experimental.strategy.mse_v2": [[304, 2, 1, "", "MSE_V2TuneStrategy"]], "neural_compressor.experimental.strategy.random": [[305, 2, 1, "", "RandomTuneStrategy"]], "neural_compressor.experimental.strategy.strategy": [[306, 2, 1, "", "TuneStrategy"], [306, 1, 1, "", "strategy_registry"]], "neural_compressor.experimental.strategy.utils": [[307, 0, 0, "-", "constant"], [309, 0, 0, "-", "tuning_sampler"], [310, 0, 0, "-", "tuning_space"], [311, 0, 0, "-", "tuning_structs"], [312, 0, 0, "-", "utility"]], "neural_compressor.experimental.strategy.utils.tuning_sampler": [[309, 2, 1, "", "FallbackTuningSampler"], [309, 2, 1, "", "ModelWiseTuningSampler"], [309, 2, 1, "", "OpTypeWiseTuningSampler"], [309, 2, 1, "", "OpWiseTuningSampler"], [309, 2, 1, "", "SmoothQuantSampler"], [309, 2, 1, "", "TuningOrder"], [309, 2, 1, "", "TuningSampler"], [309, 2, 1, "", "TuningSamplerRegistry"]], "neural_compressor.experimental.strategy.utils.tuning_space": [[310, 2, 1, "", "TuningItem"], [310, 2, 1, "", "TuningSpace"], [310, 1, 1, "", "initial_tuning_cfg_with_quant_mode"], [310, 1, 1, "", "pattern_to_internal"], [310, 1, 1, "", "pattern_to_path"], [310, 1, 1, "", "quant_mode_from_pattern"]], "neural_compressor.experimental.strategy.utils.tuning_structs": [[311, 2, 1, "", "OpTuningConfig"]], "neural_compressor.experimental.strategy.utils.utility": [[312, 2, 1, "", "OrderedDefaultDict"], [312, 1, 1, "", "extract_data_type"], [312, 1, 1, "", "get_adaptor_name"], [312, 1, 1, "", "reverted_data_type"]], "neural_compressor.metric": [[314, 0, 0, "-", "bleu"], [315, 0, 0, "-", "bleu_util"], [316, 0, 0, "-", "coco_label_map"], [317, 0, 0, "-", "coco_tools"], [318, 0, 0, "-", "evaluate_squad"], [319, 0, 0, "-", "f1"], [321, 0, 0, "-", "metric"]], "neural_compressor.metric.bleu": [[314, 2, 1, "", "BLEU"], [314, 2, 1, "", "UnicodeRegex"], [314, 1, 1, "", "bleu_tokenize"]], "neural_compressor.metric.bleu.BLEU": [[314, 3, 1, "", "labels"], [314, 3, 1, "", "predictions"]], "neural_compressor.metric.bleu.UnicodeRegex": [[314, 3, 1, "", "nondigit_punct_re"], [314, 3, 1, "", "punct_nondigit_re"], [314, 3, 1, "", "symbol_re"]], "neural_compressor.metric.bleu_util": [[315, 1, 1, "", "compute_bleu"]], "neural_compressor.metric.coco_tools": [[317, 2, 1, "", "COCOEvalWrapper"], [317, 2, 1, "", "COCOWrapper"], [317, 1, 1, "", "ExportSingleImageDetectionBoxesToCoco"], [317, 1, 1, "", "ExportSingleImageDetectionMasksToCoco"], [317, 1, 1, "", "ExportSingleImageGroundtruthToCoco"]], "neural_compressor.metric.coco_tools.COCOWrapper": [[317, 3, 1, "", "dataset"], [317, 3, 1, "", "detection_type"]], "neural_compressor.metric.evaluate_squad": [[318, 1, 1, "", "evaluate"], [318, 1, 1, "", "exact_match_score"], [318, 1, 1, "", "f1_score"], [318, 1, 1, "", "metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[319, 1, 1, "", "evaluate"], [319, 1, 1, "", "f1_score"], [319, 1, 1, "", "metric_max_over_ground_truths"], [319, 1, 1, "", "normalize_answer"]], "neural_compressor.metric.metric": [[321, 2, 1, "", "Accuracy"], [321, 2, 1, "", "BaseMetric"], [321, 2, 1, "", "COCOmAPv2"], [321, 2, 1, "", "F1"], [321, 2, 1, "", "GeneralTopK"], [321, 2, 1, "", "Loss"], [321, 2, 1, "", "MAE"], [321, 2, 1, "", "METRICS"], [321, 2, 1, "", "MSE"], [321, 2, 1, "", "MXNetMetrics"], [321, 2, 1, "", "Metric"], [321, 2, 1, "", "ONNXRTGLUE"], [321, 2, 1, "", "ONNXRTITMetrics"], [321, 2, 1, "", "ONNXRTQLMetrics"], [321, 2, 1, "", "PyTorchLoss"], [321, 2, 1, "", "PyTorchMetrics"], [321, 2, 1, "", "RMSE"], [321, 2, 1, "", "ROC"], [321, 2, 1, "", "SquadF1"], [321, 2, 1, "", "TensorflowCOCOMAP"], [321, 2, 1, "", "TensorflowMAP"], [321, 2, 1, "", "TensorflowMetrics"], [321, 2, 1, "", "TensorflowTopK"], [321, 2, 1, "", "TensorflowVOCMAP"], [321, 2, 1, "", "WrapMXNetMetric"], [321, 2, 1, "", "WrapONNXRTMetric"], [321, 2, 1, "", "WrapPyTorchMetric"], [321, 2, 1, "", "mIOU"], [321, 1, 1, "", "metric_registry"]], "neural_compressor.metric.metric.Accuracy": [[321, 3, 1, "", "label_list"], [321, 3, 1, "", "pred_list"], [321, 3, 1, "", "sample"]], "neural_compressor.metric.metric.GeneralTopK": [[321, 3, 1, "", "k"], [321, 3, 1, "", "num_correct"], [321, 3, 1, "", "num_sample"]], "neural_compressor.metric.metric.Loss": [[321, 3, 1, "", "sample"], [321, 3, 1, "", "sum"]], "neural_compressor.metric.metric.MAE": [[321, 3, 1, "", "compare_label"], [321, 3, 1, "", "label_list"], [321, 3, 1, "", "pred_list"]], "neural_compressor.metric.metric.METRICS": [[321, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.MSE": [[321, 3, 1, "", "compare_label"], [321, 3, 1, "", "label_list"], [321, 3, 1, "", "pred_list"]], "neural_compressor.metric.metric.MXNetMetrics": [[321, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTITMetrics": [[321, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.ONNXRTQLMetrics": [[321, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.PyTorchMetrics": [[321, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.RMSE": [[321, 3, 1, "", "mse"]], "neural_compressor.metric.metric.TensorflowMetrics": [[321, 3, 1, "", "metrics"]], "neural_compressor.metric.metric.TensorflowTopK": [[321, 3, 1, "", "k"], [321, 3, 1, "", "num_correct"], [321, 3, 1, "", "num_sample"]], "neural_compressor.mix_precision": [[322, 1, 1, "", "fit"]], "neural_compressor.model": [[323, 0, 0, "-", "base_model"], [325, 0, 0, "-", "keras_model"], [326, 0, 0, "-", "model"], [327, 0, 0, "-", "mxnet_model"], [328, 0, 0, "-", "nets_factory"], [329, 0, 0, "-", "onnx_model"], [330, 0, 0, "-", "tensorflow_model"], [331, 0, 0, "-", "torch_model"]], "neural_compressor.model.base_model": [[323, 2, 1, "", "BaseModel"]], "neural_compressor.model.keras_model": [[325, 2, 1, "", "KerasModel"]], "neural_compressor.model.model": [[326, 2, 1, "", "Model"], [326, 1, 1, "", "get_model_fwk_name"]], "neural_compressor.model.mxnet_model": [[327, 2, 1, "", "MXNetModel"]], "neural_compressor.model.nets_factory": [[328, 2, 1, "", "TFSlimNetsFactory"]], "neural_compressor.model.onnx_model": [[329, 2, 1, "", "ONNXModel"]], "neural_compressor.model.tensorflow_model": [[330, 2, 1, "", "TensorflowBaseModel"], [330, 2, 1, "", "TensorflowCheckpointModel"], [330, 2, 1, "", "TensorflowModel"], [330, 2, 1, "", "TensorflowQATModel"], [330, 2, 1, "", "TensorflowSavedModelModel"], [330, 1, 1, "", "checkpoint_session"], [330, 1, 1, "", "estimator_session"], [330, 1, 1, "", "frozen_pb_session"], [330, 1, 1, "", "get_model_type"], [330, 1, 1, "", "graph_def_session"], [330, 1, 1, "", "graph_session"], [330, 1, 1, "", "keras_session"], [330, 1, 1, "", "load_saved_model"], [330, 1, 1, "", "saved_model_session"], [330, 1, 1, "", "slim_session"], [330, 1, 1, "", "validate_and_inference_input_output"], [330, 1, 1, "", "validate_graph_node"]], "neural_compressor.model.torch_model": [[331, 2, 1, "", "IPEXModel"], [331, 2, 1, "", "PyTorchBaseModel"], [331, 2, 1, "", "PyTorchFXModel"], [331, 2, 1, "", "PyTorchModel"]], "neural_compressor.objective": [[332, 2, 1, "", "Accuracy"], [332, 2, 1, "", "Footprint"], [332, 2, 1, "", "ModelSize"], [332, 2, 1, "", "MultiObjective"], [332, 2, 1, "", "Objective"], [332, 2, 1, "", "Performance"], [332, 1, 1, "", "objective_custom_registry"], [332, 1, 1, "", "objective_registry"]], "neural_compressor.quantization": [[333, 1, 1, "", "fit"]], "neural_compressor.strategy": [[334, 0, 0, "-", "auto"], [335, 0, 0, "-", "auto_mixed_precision"], [336, 0, 0, "-", "basic"], [337, 0, 0, "-", "bayesian"], [338, 0, 0, "-", "conservative"], [339, 0, 0, "-", "exhaustive"], [340, 0, 0, "-", "hawq_v2"], [342, 0, 0, "-", "mse"], [343, 0, 0, "-", "mse_v2"], [344, 0, 0, "-", "random"], [345, 0, 0, "-", "strategy"], [347, 0, 0, "-", "utils"]], "neural_compressor.strategy.auto": [[334, 2, 1, "", "AutoTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[335, 2, 1, "", "AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.basic": [[336, 2, 1, "", "BasicTuneStrategy"]], "neural_compressor.strategy.bayesian": [[337, 2, 1, "", "BayesianOptimization"], [337, 2, 1, "", "BayesianTuneStrategy"], [337, 2, 1, "", "TargetSpace"], [337, 1, 1, "", "acq_max"]], "neural_compressor.strategy.conservative": [[338, 2, 1, "", "ConservativeTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[339, 2, 1, "", "ExhaustiveTuneStrategy"]], "neural_compressor.strategy.hawq_v2": [[340, 2, 1, "", "HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.mse": [[342, 2, 1, "", "MSETuneStrategy"]], "neural_compressor.strategy.mse_v2": [[343, 2, 1, "", "MSE_V2TuneStrategy"]], "neural_compressor.strategy.random": [[344, 2, 1, "", "RandomTuneStrategy"]], "neural_compressor.strategy.strategy": [[345, 2, 1, "", "TuneStrategy"], [345, 2, 1, "", "TuneStrategyMeta"], [345, 1, 1, "", "strategy_registry"]], "neural_compressor.strategy.utils": [[346, 0, 0, "-", "constant"], [348, 0, 0, "-", "tuning_sampler"], [349, 0, 0, "-", "tuning_space"], [350, 0, 0, "-", "tuning_structs"], [351, 0, 0, "-", "utility"]], "neural_compressor.strategy.utils.tuning_sampler": [[348, 2, 1, "", "BlockFallbackTuningSampler"], [348, 2, 1, "", "FallbackTuningSampler"], [348, 2, 1, "", "ModelWiseTuningSampler"], [348, 2, 1, "", "OpTypeWiseTuningSampler"], [348, 2, 1, "", "OpWiseTuningSampler"], [348, 2, 1, "", "TuningOrder"], [348, 2, 1, "", "TuningSampler"], [348, 2, 1, "", "TuningSamplerRegistry"]], "neural_compressor.strategy.utils.tuning_space": [[349, 2, 1, "", "TuningItem"], [349, 2, 1, "", "TuningSpace"], [349, 1, 1, "", "initial_tuning_cfg_with_quant_mode"], [349, 1, 1, "", "pattern_to_internal"], [349, 1, 1, "", "pattern_to_path"], [349, 1, 1, "", "quant_mode_from_pattern"]], "neural_compressor.strategy.utils.tuning_structs": [[350, 2, 1, "", "OpTuningConfig"]], "neural_compressor.strategy.utils.utility": [[351, 2, 1, "", "OrderedDefaultDict"], [351, 1, 1, "", "extract_data_type"], [351, 1, 1, "", "get_adaptor_name"], [351, 1, 1, "", "reverted_data_type"]], "neural_compressor.template": [[352, 0, 0, "-", "api_doc_example"]], "neural_compressor.template.api_doc_example": [[352, 2, 1, "", "ExampleClass"], [352, 3, 1, "", "attribute1"], [352, 1, 1, "", "function1"], [352, 1, 1, "", "function2"], [352, 1, 1, "", "function3"], [352, 1, 1, "", "generator1"], [352, 4, 1, "", "module_debug_level1"]], "neural_compressor.template.api_doc_example.ExampleClass": [[352, 3, 1, "", "attr1"], [352, 3, 1, "", "attr2"], [352, 3, 1, "", "attr5"]], "neural_compressor.training": [[354, 2, 1, "", "CallBacks"], [354, 2, 1, "", "CompressionManager"], [354, 1, 1, "", "fit"], [354, 1, 1, "", "prepare_compression"]], "neural_compressor.utils": [[355, 0, 0, "-", "collect_layer_histogram"], [356, 0, 0, "-", "constant"], [357, 0, 0, "-", "create_obj_from_config"], [359, 0, 0, "-", "kl_divergence"], [360, 0, 0, "-", "load_huggingface"], [361, 0, 0, "-", "logger"], [362, 0, 0, "-", "options"], [363, 0, 0, "-", "pytorch"], [364, 0, 0, "-", "utility"]], "neural_compressor.utils.collect_layer_histogram": [[355, 2, 1, "", "LayerHistogramCollector"]], "neural_compressor.utils.create_obj_from_config": [[357, 1, 1, "", "create_dataloader"], [357, 1, 1, "", "create_dataset"], [357, 1, 1, "", "create_eval_func"], [357, 1, 1, "", "create_train_func"], [357, 1, 1, "", "get_algorithm"], [357, 1, 1, "", "get_func_from_config"], [357, 1, 1, "", "get_metrics"], [357, 1, 1, "", "get_postprocess"], [357, 1, 1, "", "get_preprocess"]], "neural_compressor.utils.kl_divergence": [[359, 2, 1, "", "KL_Divergence"]], "neural_compressor.utils.load_huggingface": [[360, 2, 1, "", "OptimizedModel"], [360, 1, 1, "", "save_for_huggingface_upstream"]], "neural_compressor.utils.logger": [[361, 2, 1, "", "Logger"], [361, 1, 1, "", "debug"], [361, 1, 1, "", "error"], [361, 1, 1, "", "fatal"], [361, 1, 1, "", "info"], [361, 1, 1, "", "log"], [361, 1, 1, "", "warn"], [361, 1, 1, "", "warning"]], "neural_compressor.utils.options": [[362, 2, 1, "", "onnxrt"]], "neural_compressor.utils.pytorch": [[363, 1, 1, "", "is_int8_model"], [363, 1, 1, "", "load"]], "neural_compressor.utils.utility": [[364, 2, 1, "", "CaptureOutputToFile"], [364, 2, 1, "", "CpuInfo"], [364, 1, 1, "", "Dequantize"], [364, 1, 1, "", "DequantizeWeight"], [364, 2, 1, "", "DotDict"], [364, 2, 1, "", "GLOBAL_STATE"], [364, 2, 1, "", "LazyImport"], [364, 2, 1, "", "MODE"], [364, 2, 1, "", "Statistics"], [364, 1, 1, "", "combine_histogram"], [364, 1, 1, "", "compare_objects"], [364, 1, 1, "", "compute_sparsity"], [364, 1, 1, "", "dump_class_attrs"], [364, 1, 1, "", "dump_data_to_local"], [364, 1, 1, "", "dump_elapsed_time"], [364, 1, 1, "", "equal_dicts"], [364, 1, 1, "", "fault_tolerant_file"], [364, 1, 1, "", "get_all_fp32_data"], [364, 1, 1, "", "get_size"], [364, 1, 1, "", "get_tensor_histogram"], [364, 1, 1, "", "get_tuning_history"], [364, 1, 1, "", "load_data_from_pkl"], [364, 1, 1, "", "recover"], [364, 1, 1, "", "set_random_seed"], [364, 1, 1, "", "set_resume_from"], [364, 1, 1, "", "set_tensorboard"], [364, 1, 1, "", "set_workspace"], [364, 1, 1, "", "show_memory_info"], [364, 1, 1, "", "singleton"], [364, 1, 1, "", "str2array"], [364, 1, 1, "", "time_limit"], [364, 1, 1, "", "version1_eq_version2"], [364, 1, 1, "", "version1_gt_version2"], [364, 1, 1, "", "version1_gte_version2"], [364, 1, 1, "", "version1_lt_version2"], [364, 1, 1, "", "version1_lte_version2"]], "neural_compressor.ux": [[440, 0, 0, "-", "components"], [499, 0, 0, "-", "inc_bench"], [508, 0, 0, "-", "utils"], [534, 0, 0, "-", "web"]], "neural_compressor.ux.components": [[368, 0, 0, "-", "benchmark"], [372, 0, 0, "-", "config_generator"], [380, 0, 0, "-", "configuration_wizard"], [416, 0, 0, "-", "db_manager"], [421, 0, 0, "-", "diagnosis"], [429, 0, 0, "-", "file_browser"], [435, 0, 0, "-", "graph"], [441, 0, 0, "-", "jobs_management"], [445, 0, 0, "-", "manage_workspace"], [447, 0, 0, "-", "model"], [466, 0, 0, "-", "model_zoo"], [468, 0, 0, "-", "names_mapper"], [475, 0, 0, "-", "optimization"], [491, 0, 0, "-", "profiling"]], "neural_compressor.ux.components.benchmark": [[368, 2, 1, "", "Benchmarks"], [365, 0, 0, "-", "benchmark"], [366, 0, 0, "-", "benchmark_model"], [367, 0, 0, "-", "execute_benchmark"]], "neural_compressor.ux.components.benchmark.benchmark": [[365, 2, 1, "", "Benchmark"], [365, 2, 1, "", "DataloaderInterface"]], "neural_compressor.ux.components.benchmark.benchmark_model": [[366, 1, 1, "", "benchmark_model"], [366, 1, 1, "", "parse_args"], [366, 1, 1, "", "set_eager_execution"]], "neural_compressor.ux.components.benchmark.execute_benchmark": [[367, 1, 1, "", "benchmark_result_update"], [367, 1, 1, "", "benchmark_result_update_pytorch_script"], [367, 1, 1, "", "execute_benchmark"], [367, 1, 1, "", "execute_real_benchmark"], [367, 1, 1, "", "pytorch_script_bench_optimizations"], [367, 1, 1, "", "pytorch_script_bench_original_model"]], "neural_compressor.ux.components.config_generator": [[369, 0, 0, "-", "benchmark_config_generator"], [370, 0, 0, "-", "config_generator"], [371, 0, 0, "-", "graph_optimization_config_generator"], [373, 0, 0, "-", "mixed_precision_config_generator"], [374, 0, 0, "-", "profiling_config_generator"], [375, 0, 0, "-", "pruning_config_generator"], [376, 0, 0, "-", "quantization_config_generator"]], "neural_compressor.ux.components.config_generator.benchmark_config_generator": [[369, 2, 1, "", "BenchmarkConfigGenerator"]], "neural_compressor.ux.components.config_generator.config_generator": [[370, 2, 1, "", "ConfigGenerator"]], "neural_compressor.ux.components.config_generator.graph_optimization_config_generator": [[371, 2, 1, "", "GraphOptimizationConfigGenerator"]], "neural_compressor.ux.components.config_generator.mixed_precision_config_generator": [[373, 2, 1, "", "MixedPrecisionConfigGenerator"]], "neural_compressor.ux.components.config_generator.profiling_config_generator": [[374, 2, 1, "", "ProfilingConfigGenerator"]], "neural_compressor.ux.components.config_generator.pruning_config_generator": [[375, 2, 1, "", "PruningConfigGenerator"]], "neural_compressor.ux.components.config_generator.quantization_config_generator": [[376, 2, 1, "", "QuantizationConfigGenerator"]], "neural_compressor.ux.components.configuration_wizard": [[377, 0, 0, "-", "configuration_parser"], [378, 0, 0, "-", "get_boundary_nodes"], [379, 0, 0, "-", "get_configuration"], [381, 0, 0, "-", "params_feeder"], [382, 0, 0, "-", "pruning_config_parser"]], "neural_compressor.ux.components.configuration_wizard.configuration_parser": [[377, 2, 1, "", "ConfigurationParser"], [377, 1, 1, "", "normalize_string_list"], [377, 1, 1, "", "parse_list_value"], [377, 1, 1, "", "parse_multidim_list"]], "neural_compressor.ux.components.configuration_wizard.get_boundary_nodes": [[378, 1, 1, "", "get_boundary_nodes"]], "neural_compressor.ux.components.configuration_wizard.get_configuration": [[379, 1, 1, "", "get_predefined_configuration"], [379, 1, 1, "", "update_config_to_machine_specification"]], "neural_compressor.ux.components.configuration_wizard.params_feeder": [[381, 2, 1, "", "Feeder"], [381, 1, 1, "", "get_possible_values"]], "neural_compressor.ux.components.configuration_wizard.pruning_config_parser": [[382, 2, 1, "", "PruningConfigParser"]], "neural_compressor.ux.components.db_manager": [[383, 0, 0, "-", "db_manager"], [392, 0, 0, "-", "db_models"], [411, 0, 0, "-", "db_operations"], [417, 0, 0, "-", "params_interfaces"], [418, 0, 0, "-", "utils"]], "neural_compressor.ux.components.db_manager.db_manager": [[383, 2, 1, "", "DBManager"]], "neural_compressor.ux.components.db_manager.db_models": [[384, 0, 0, "-", "benchmark"], [385, 0, 0, "-", "benchmark_result"], [386, 0, 0, "-", "dataloader"], [387, 0, 0, "-", "dataset"], [388, 0, 0, "-", "domain"], [389, 0, 0, "-", "domain_flavour"], [390, 0, 0, "-", "example"], [391, 0, 0, "-", "framework"], [393, 0, 0, "-", "metric"], [394, 0, 0, "-", "model"], [395, 0, 0, "-", "optimization"], [396, 0, 0, "-", "optimization_type"], [397, 0, 0, "-", "precision"], [398, 0, 0, "-", "profiling"], [399, 0, 0, "-", "profiling_result"], [400, 0, 0, "-", "project"], [401, 0, 0, "-", "pruning_details"], [402, 0, 0, "-", "transform"], [403, 0, 0, "-", "tuning_details"], [404, 0, 0, "-", "tuning_history"]], "neural_compressor.ux.components.db_manager.db_models.benchmark": [[384, 2, 1, "", "Benchmark"]], "neural_compressor.ux.components.db_manager.db_models.benchmark_result": [[385, 2, 1, "", "BenchmarkResult"]], "neural_compressor.ux.components.db_manager.db_models.dataloader": [[386, 2, 1, "", "Dataloader"], [386, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.dataset": [[387, 2, 1, "", "Dataset"]], "neural_compressor.ux.components.db_manager.db_models.domain": [[388, 2, 1, "", "Domain"], [388, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.domain_flavour": [[389, 2, 1, "", "DomainFlavour"], [389, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.example": [[390, 2, 1, "", "Example"]], "neural_compressor.ux.components.db_manager.db_models.framework": [[391, 2, 1, "", "Framework"], [391, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.metric": [[393, 2, 1, "", "Metric"], [393, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.model": [[394, 2, 1, "", "Model"]], "neural_compressor.ux.components.db_manager.db_models.optimization": [[395, 2, 1, "", "Optimization"]], "neural_compressor.ux.components.db_manager.db_models.optimization_type": [[396, 2, 1, "", "OptimizationType"], [396, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.precision": [[397, 2, 1, "", "Precision"], [397, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.profiling": [[398, 2, 1, "", "Profiling"]], "neural_compressor.ux.components.db_manager.db_models.profiling_result": [[399, 2, 1, "", "ProfilingResult"]], "neural_compressor.ux.components.db_manager.db_models.project": [[400, 2, 1, "", "Project"]], "neural_compressor.ux.components.db_manager.db_models.pruning_details": [[401, 2, 1, "", "PruningDetails"]], "neural_compressor.ux.components.db_manager.db_models.transform": [[402, 2, 1, "", "Transform"], [402, 1, 1, "", "fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.tuning_details": [[403, 2, 1, "", "TuningDetails"]], "neural_compressor.ux.components.db_manager.db_models.tuning_history": [[404, 2, 1, "", "TuningHistory"]], "neural_compressor.ux.components.db_manager.db_operations": [[405, 0, 0, "-", "benchmark_api_interface"], [406, 0, 0, "-", "dataset_api_interface"], [407, 0, 0, "-", "db_operations"], [408, 0, 0, "-", "diagnosis_api_interface"], [409, 0, 0, "-", "dictionaries_api_interface"], [410, 0, 0, "-", "examples_api_interface"], [412, 0, 0, "-", "model_api_interface"], [413, 0, 0, "-", "optimization_api_interface"], [414, 0, 0, "-", "profiling_api_interface"], [415, 0, 0, "-", "project_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface": [[405, 2, 1, "", "BenchmarkAPIInterface"], [405, 1, 1, "", "before_delete_benchmark_entry"]], "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface": [[406, 2, 1, "", "DatasetAPIInterface"], [406, 1, 1, "", "initialize_associations"], [406, 1, 1, "", "initialize_precision_optimization_types_association"], [406, 1, 1, "", "search_in_list_of_dict"], [406, 1, 1, "", "search_in_list_of_dict_for_unique_value"], [406, 1, 1, "", "set_database_version"]], "neural_compressor.ux.components.db_manager.db_operations.db_operations": [[407, 1, 1, "", "initialize_associations"], [407, 1, 1, "", "initialize_precision_optimization_types_association"], [407, 1, 1, "", "search_in_list_of_dict"], [407, 1, 1, "", "search_in_list_of_dict_for_unique_value"], [407, 1, 1, "", "set_database_version"]], "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface": [[408, 2, 1, "", "DiagnosisAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface": [[409, 2, 1, "", "DictionariesAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface": [[410, 2, 1, "", "ExamplesAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.model_api_interface": [[412, 2, 1, "", "ModelAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface": [[413, 2, 1, "", "OptimizationAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface": [[414, 2, 1, "", "ProfilingAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.project_api_interface": [[415, 2, 1, "", "ProjectAPIInterface"]], "neural_compressor.ux.components.db_manager.params_interfaces": [[417, 2, 1, "", "BenchmarkAddParamsInterface"], [417, 2, 1, "", "BenchmarkEditParamsInterface"], [417, 2, 1, "", "DatasetAddParamsInterface"], [417, 2, 1, "", "DiagnosisOptimizationParamsInterface"], [417, 2, 1, "", "ModelAddParamsInterface"], [417, 2, 1, "", "OptimizationAddParamsInterface"], [417, 2, 1, "", "OptimizationEditParamsInterface"], [417, 2, 1, "", "ProfilingAddParamsInterface"], [417, 2, 1, "", "ProfilingEditParamsInterface"], [417, 2, 1, "", "ProfilingResultAddParamsInterface"], [417, 2, 1, "", "TuningHistoryInterface"], [417, 2, 1, "", "TuningHistoryItemInterface"]], "neural_compressor.ux.components.db_manager.utils": [[418, 1, 1, "", "get_framework_dataloaders_config"], [418, 1, 1, "", "get_framework_transforms_config"], [418, 1, 1, "", "update_dataloaders_params"]], "neural_compressor.ux.components.diagnosis": [[419, 0, 0, "-", "diagnosis"], [420, 0, 0, "-", "factory"], [422, 0, 0, "-", "onnx_diagnosis"], [424, 0, 0, "-", "op_details"], [425, 0, 0, "-", "op_entry"], [426, 0, 0, "-", "tensorflow_diagnosis"]], "neural_compressor.ux.components.diagnosis.diagnosis": [[419, 2, 1, "", "Diagnosis"]], "neural_compressor.ux.components.diagnosis.factory": [[420, 2, 1, "", "DiagnosisFactory"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis": [[423, 0, 0, "-", "onnxrt_diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis": [[423, 2, 1, "", "OnnxRtDiagnosis"]], "neural_compressor.ux.components.diagnosis.op_details": [[424, 2, 1, "", "OpActivation"], [424, 2, 1, "", "OpDetails"], [424, 2, 1, "", "OpPattern"], [424, 2, 1, "", "OpWeights"]], "neural_compressor.ux.components.diagnosis.op_entry": [[425, 2, 1, "", "OpEntry"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis": [[427, 0, 0, "-", "tensorflow_diagnosis"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis": [[427, 2, 1, "", "TensorflowDiagnosis"]], "neural_compressor.ux.components.file_browser": [[428, 0, 0, "-", "file_browser"]], "neural_compressor.ux.components.file_browser.file_browser": [[428, 1, 1, "", "create_dir_entry"], [428, 1, 1, "", "create_entry"], [428, 1, 1, "", "create_file_entry"], [428, 1, 1, "", "filter_requested_entries"], [428, 1, 1, "", "get_directory_entries"], [428, 1, 1, "", "get_filter_value"], [428, 1, 1, "", "get_non_hidden_directory_entries"], [428, 1, 1, "", "get_requested_path"], [428, 1, 1, "", "get_setting_value"], [428, 1, 1, "", "is_dataset_or_directory_entry"], [428, 1, 1, "", "is_directory_entry"], [428, 1, 1, "", "is_model_or_directory_entry"], [428, 1, 1, "", "should_show_files"], [428, 1, 1, "", "should_show_only_model_files"], [428, 1, 1, "", "sort_entries"]], "neural_compressor.ux.components.graph": [[430, 0, 0, "-", "attribute"], [431, 0, 0, "-", "collapser"], [432, 0, 0, "-", "edge"], [433, 0, 0, "-", "graph"], [434, 0, 0, "-", "graph_reader"], [436, 0, 0, "-", "node"], [437, 0, 0, "-", "reader"]], "neural_compressor.ux.components.graph.attribute": [[430, 2, 1, "", "Attribute"]], "neural_compressor.ux.components.graph.collapser": [[431, 2, 1, "", "Collapser"]], "neural_compressor.ux.components.graph.edge": [[432, 2, 1, "", "Edge"]], "neural_compressor.ux.components.graph.graph": [[433, 2, 1, "", "Graph"]], "neural_compressor.ux.components.graph.graph_reader": [[434, 2, 1, "", "GraphReader"]], "neural_compressor.ux.components.graph.node": [[436, 2, 1, "", "GroupNode"], [436, 2, 1, "", "Node"]], "neural_compressor.ux.components.graph.reader": [[438, 0, 0, "-", "onnxrt_reader"], [439, 0, 0, "-", "tensorflow_reader"]], "neural_compressor.ux.components.graph.reader.onnxrt_reader": [[438, 2, 1, "", "OnnxrtReader"]], "neural_compressor.ux.components.graph.reader.tensorflow_reader": [[439, 2, 1, "", "TensorflowReader"]], "neural_compressor.ux.components.jobs_management": [[442, 0, 0, "-", "jobs_control_queue"], [443, 0, 0, "-", "jobs_manager"], [444, 0, 0, "-", "request"]], "neural_compressor.ux.components.manage_workspace": [[445, 1, 1, "", "get_default_path"]], "neural_compressor.ux.components.model": [[446, 0, 0, "-", "domain"], [448, 0, 0, "-", "model"], [449, 0, 0, "-", "model_type_getter"], [450, 0, 0, "-", "onnxrt"], [452, 0, 0, "-", "pytorch"], [454, 0, 0, "-", "repository"], [455, 0, 0, "-", "shape"], [457, 0, 0, "-", "tensorflow"]], "neural_compressor.ux.components.model.domain": [[446, 2, 1, "", "Domain"]], "neural_compressor.ux.components.model.model": [[448, 2, 1, "", "Model"]], "neural_compressor.ux.components.model.model_type_getter": [[449, 1, 1, "", "get_model_type"]], "neural_compressor.ux.components.model.onnxrt": [[451, 0, 0, "-", "model"]], "neural_compressor.ux.components.model.onnxrt.model": [[451, 2, 1, "", "OnnxrtModel"], [451, 1, 1, "", "remove_number_of_samples_from_shape"]], "neural_compressor.ux.components.model.pytorch": [[453, 0, 0, "-", "model"]], "neural_compressor.ux.components.model.pytorch.model": [[453, 2, 1, "", "PyTorchScriptModel"]], "neural_compressor.ux.components.model.repository": [[454, 2, 1, "", "ModelRepository"]], "neural_compressor.ux.components.model.shape": [[455, 2, 1, "", "Shape"]], "neural_compressor.ux.components.model.tensorflow": [[456, 0, 0, "-", "frozen_pb"], [458, 0, 0, "-", "keras"], [459, 0, 0, "-", "meta_graph"], [460, 0, 0, "-", "model"], [461, 0, 0, "-", "saved_model"], [462, 0, 0, "-", "utils"]], "neural_compressor.ux.components.model.tensorflow.frozen_pb": [[456, 2, 1, "", "FrozenPbModel"]], "neural_compressor.ux.components.model.tensorflow.keras": [[458, 2, 1, "", "KerasModel"]], "neural_compressor.ux.components.model.tensorflow.meta_graph": [[459, 2, 1, "", "MetaGraphModel"]], "neural_compressor.ux.components.model.tensorflow.model": [[460, 2, 1, "", "TensorflowModel"]], "neural_compressor.ux.components.model.tensorflow.saved_model": [[461, 2, 1, "", "SavedModelModel"]], "neural_compressor.ux.components.model.tensorflow.utils": [[462, 1, 1, "", "get_input_shape"]], "neural_compressor.ux.components.model_zoo": [[463, 0, 0, "-", "download_config"], [464, 0, 0, "-", "download_model"], [465, 0, 0, "-", "downloader"], [467, 0, 0, "-", "list_models"]], "neural_compressor.ux.components.model_zoo.download_config": [[463, 1, 1, "", "download_config"]], "neural_compressor.ux.components.model_zoo.download_model": [[464, 1, 1, "", "download_model"]], "neural_compressor.ux.components.model_zoo.downloader": [[465, 2, 1, "", "Downloader"]], "neural_compressor.ux.components.model_zoo.list_models": [[467, 1, 1, "", "check_version"], [467, 1, 1, "", "get_available_models"], [467, 1, 1, "", "get_framework_module_name"], [467, 1, 1, "", "get_installed_frameworks"], [467, 1, 1, "", "list_models"], [467, 1, 1, "", "validate_model_list"]], "neural_compressor.ux.components.names_mapper": [[469, 0, 0, "-", "names_mapper"]], "neural_compressor.ux.components.names_mapper.names_mapper": [[469, 2, 1, "", "MappingDirection"], [469, 2, 1, "", "NamesMapper"]], "neural_compressor.ux.components.optimization": [[475, 2, 1, "", "Optimizations"], [470, 0, 0, "-", "execute_optimization"], [471, 0, 0, "-", "factory"], [473, 0, 0, "-", "graph_optimizer"], [476, 0, 0, "-", "mixed_precision"], [479, 0, 0, "-", "neural_coder_optimization"], [481, 0, 0, "-", "optimization"], [482, 0, 0, "-", "pruning"], [485, 0, 0, "-", "tune"], [488, 0, 0, "-", "tuning_history"]], "neural_compressor.ux.components.optimization.execute_optimization": [[470, 1, 1, "", "check_if_collect_tuning_history"], [470, 1, 1, "", "execute_optimization"], [470, 1, 1, "", "execute_optimization_pytorch_script"], [470, 1, 1, "", "execute_optimization_regular"], [470, 1, 1, "", "parse_logs"], [470, 1, 1, "", "parse_model_data_to_bench_names"]], "neural_compressor.ux.components.optimization.factory": [[471, 2, 1, "", "OptimizationFactory"]], "neural_compressor.ux.components.optimization.graph_optimizer": [[472, 0, 0, "-", "graph_optimization"], [474, 0, 0, "-", "optimize_model"]], "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization": [[472, 2, 1, "", "GraphOptimization"]], "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model": [[474, 1, 1, "", "optimize_graph"], [474, 1, 1, "", "optimize_graph_config"], [474, 1, 1, "", "parse_args"], [474, 1, 1, "", "set_eager_execution"]], "neural_compressor.ux.components.optimization.mixed_precision": [[477, 0, 0, "-", "mixed_precision"], [478, 0, 0, "-", "optimize_model"]], "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision": [[477, 2, 1, "", "MixedPrecision"]], "neural_compressor.ux.components.optimization.mixed_precision.optimize_model": [[478, 1, 1, "", "optimize_graph"], [478, 1, 1, "", "optimize_graph_config"], [478, 1, 1, "", "parse_args"], [478, 1, 1, "", "set_eager_execution"]], "neural_compressor.ux.components.optimization.neural_coder_optimization": [[480, 0, 0, "-", "optimize_model"]], "neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model": [[480, 1, 1, "", "optimize_pt_script"]], "neural_compressor.ux.components.optimization.optimization": [[481, 2, 1, "", "DataloaderInterface"], [481, 2, 1, "", "Optimization"], [481, 2, 1, "", "OptimizationInterface"]], "neural_compressor.ux.components.optimization.pruning": [[483, 0, 0, "-", "optimize_model"], [484, 0, 0, "-", "pruning"]], "neural_compressor.ux.components.optimization.pruning.optimize_model": [[483, 1, 1, "", "optimize_model"], [483, 1, 1, "", "parse_args"]], "neural_compressor.ux.components.optimization.pruning.pruning": [[484, 2, 1, "", "Pruning"]], "neural_compressor.ux.components.optimization.tune": [[486, 0, 0, "-", "tune_model"], [487, 0, 0, "-", "tuning"]], "neural_compressor.ux.components.optimization.tune.tune_model": [[486, 1, 1, "", "parse_args"], [486, 1, 1, "", "set_eager_execution"], [486, 1, 1, "", "tune_model"]], "neural_compressor.ux.components.optimization.tune.tuning": [[487, 2, 1, "", "AccuracyCriterion"], [487, 2, 1, "", "Tuning"], [487, 2, 1, "", "TuningDetails"]], "neural_compressor.ux.components.optimization.tuning_history": [[488, 2, 1, "", "TuningHistory"], [488, 2, 1, "", "Watcher"], [488, 1, 1, "", "tuning_history"], [488, 1, 1, "", "tuning_history_path"]], "neural_compressor.ux.components.profiling": [[489, 0, 0, "-", "execute_profiling"], [490, 0, 0, "-", "factory"], [492, 0, 0, "-", "profile_model"], [493, 0, 0, "-", "profiler"], [494, 0, 0, "-", "profiling"], [496, 0, 0, "-", "tensorflow_profiler"]], "neural_compressor.ux.components.profiling.execute_profiling": [[489, 1, 1, "", "execute_profiling"], [489, 1, 1, "", "execute_real_profiling"]], "neural_compressor.ux.components.profiling.factory": [[490, 2, 1, "", "ProfilerFactory"]], "neural_compressor.ux.components.profiling.profile_model": [[492, 1, 1, "", "load_profiling_details"], [492, 1, 1, "", "parse_args"]], "neural_compressor.ux.components.profiling.profiler": [[493, 2, 1, "", "Profiler"]], "neural_compressor.ux.components.profiling.profiling": [[494, 2, 1, "", "DataloaderInterface"], [494, 2, 1, "", "Profiling"]], "neural_compressor.ux.components.profiling.tensorflow_profiler": [[495, 0, 0, "-", "factory"], [497, 0, 0, "-", "profiler"], [498, 0, 0, "-", "utils"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.factory": [[495, 2, 1, "", "ProfilerFactory"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler": [[497, 2, 1, "", "Profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.utils": [[498, 1, 1, "", "delete_assign"]], "neural_compressor.ux.inc_bench": [[499, 1, 1, "", "main"], [499, 1, 1, "", "prepare_environment"]], "neural_compressor.ux.utils": [[501, 0, 0, "-", "consts"], [502, 0, 0, "-", "environment"], [503, 0, 0, "-", "exceptions"], [504, 0, 0, "-", "executor"], [505, 0, 0, "-", "expiring_dict"], [506, 0, 0, "-", "github_info"], [507, 0, 0, "-", "hw_info"], [509, 0, 0, "-", "json_serializer"], [510, 0, 0, "-", "logger"], [511, 0, 0, "-", "parser"], [512, 0, 0, "-", "proc"], [513, 0, 0, "-", "processes"], [514, 0, 0, "-", "singleton"], [515, 0, 0, "-", "status_updates"], [516, 0, 0, "-", "templates"], [519, 0, 0, "-", "utils"], [524, 0, 0, "-", "workload"], [530, 0, 0, "-", "yaml_utils"]], "neural_compressor.ux.utils.consts": [[501, 2, 1, "", "DomainFlavours"], [501, 2, 1, "", "Domains"], [501, 2, 1, "", "ExecutionStatus"], [501, 2, 1, "", "Frameworks"], [501, 2, 1, "", "OptimizationTypes"], [501, 2, 1, "", "Precisions"], [501, 2, 1, "", "Strategies"]], "neural_compressor.ux.utils.environment": [[502, 2, 1, "", "Environment"]], "neural_compressor.ux.utils.exceptions": [[503, 5, 1, "", "AccessDeniedException"], [503, 5, 1, "", "ClientErrorException"], [503, 5, 1, "", "InternalException"], [503, 5, 1, "", "NotFoundException"]], "neural_compressor.ux.utils.executor": [[504, 2, 1, "", "Executor"]], "neural_compressor.ux.utils.expiring_dict": [[505, 2, 1, "", "ExpiringDict"], [505, 2, 1, "", "ExpiringDictItem"]], "neural_compressor.ux.utils.github_info": [[506, 2, 1, "", "GithubInfo"]], "neural_compressor.ux.utils.hw_info": [[507, 2, 1, "", "HWInfo"], [507, 1, 1, "", "get_bios_version"], [507, 1, 1, "", "get_distribution"], [507, 1, 1, "", "get_framework_dependency_info"], [507, 1, 1, "", "get_framework_info"], [507, 1, 1, "", "get_kernel_version"], [507, 1, 1, "", "get_number_of_sockets"], [507, 1, 1, "", "is_turbo_boost_enabled"]], "neural_compressor.ux.utils.json_serializer": [[509, 2, 1, "", "JsonSerializer"]], "neural_compressor.ux.utils.logger": [[510, 1, 1, "", "change_log_level"]], "neural_compressor.ux.utils.parser": [[511, 2, 1, "", "AccuracyParser"], [511, 2, 1, "", "BenchmarkParserFactory"], [511, 2, 1, "", "OptimizationParser"], [511, 2, 1, "", "Parser"], [511, 2, 1, "", "PerformanceParser"], [511, 2, 1, "", "ProfilingParser"]], "neural_compressor.ux.utils.proc": [[512, 2, 1, "", "Proc"]], "neural_compressor.ux.utils.processes": [[513, 2, 1, "", "NCProcesses"]], "neural_compressor.ux.utils.singleton": [[514, 2, 1, "", "Singleton"]], "neural_compressor.ux.utils.status_updates": [[515, 1, 1, "", "get_status_update_function"]], "neural_compressor.ux.utils.templates": [[517, 0, 0, "-", "metric"], [518, 0, 0, "-", "workdir"]], "neural_compressor.ux.utils.templates.metric": [[517, 2, 1, "", "Metric"]], "neural_compressor.ux.utils.templates.workdir": [[518, 2, 1, "", "Workdir"]], "neural_compressor.ux.utils.utils": [[519, 1, 1, "", "are_archive_filenames_valid"], [519, 1, 1, "", "check_module"], [519, 1, 1, "", "deprecated"], [519, 1, 1, "", "determine_ip"], [519, 1, 1, "", "export_to_csv"], [519, 1, 1, "", "filter_transforms"], [519, 1, 1, "", "get_dataset_path"], [519, 1, 1, "", "get_default_pruning_config_path"], [519, 1, 1, "", "get_file_extension"], [519, 1, 1, "", "get_framework_from_path"], [519, 1, 1, "", "get_height_width_from_size"], [519, 1, 1, "", "get_metrics_dict"], [519, 1, 1, "", "get_model_zoo_config_path"], [519, 1, 1, "", "get_model_zoo_model_path"], [519, 1, 1, "", "get_module_version"], [519, 1, 1, "", "get_predefined_config_path"], [519, 1, 1, "", "get_shape_from_transforms"], [519, 1, 1, "", "get_size"], [519, 1, 1, "", "is_dataset_file"], [519, 1, 1, "", "is_development_env"], [519, 1, 1, "", "is_hidden"], [519, 1, 1, "", "load_dataloader_config"], [519, 1, 1, "", "load_help_nc_params"], [519, 1, 1, "", "load_metrics_config"], [519, 1, 1, "", "load_model_config"], [519, 1, 1, "", "load_model_wise_params"], [519, 1, 1, "", "load_precisions_config"], [519, 1, 1, "", "load_pruning_details_config"], [519, 1, 1, "", "load_transforms_config"], [519, 1, 1, "", "load_transforms_filter_config"], [519, 1, 1, "", "normalize_domain"], [519, 1, 1, "", "normalize_framework"], [519, 1, 1, "", "normalize_string"], [519, 1, 1, "", "parse_bool_value"], [519, 1, 1, "", "parse_to_float_list"], [519, 1, 1, "", "parse_to_string_list"], [519, 1, 1, "", "parse_version"], [519, 1, 1, "", "release_tag"], [519, 1, 1, "", "replace_with_values"], [519, 1, 1, "", "safe_extract_archive"], [519, 1, 1, "", "verify_file_path"]], "neural_compressor.ux.utils.workload": [[520, 0, 0, "-", "config"], [521, 0, 0, "-", "dataloader"], [522, 0, 0, "-", "evaluation"], [523, 0, 0, "-", "graph_optimization"], [525, 0, 0, "-", "mixed_precision"], [526, 0, 0, "-", "model"], [527, 0, 0, "-", "pruning"], [528, 0, 0, "-", "quantization"], [529, 0, 0, "-", "tuning"]], "neural_compressor.ux.utils.workload.config": [[520, 2, 1, "", "Config"]], "neural_compressor.ux.utils.workload.dataloader": [[521, 2, 1, "", "Dataloader"], [521, 2, 1, "", "Dataset"], [521, 2, 1, "", "Filter"], [521, 2, 1, "", "LabelBalance"], [521, 2, 1, "", "Transform"]], "neural_compressor.ux.utils.workload.evaluation": [[522, 2, 1, "", "Accuracy"], [522, 2, 1, "", "Configs"], [522, 2, 1, "", "Evaluation"], [522, 2, 1, "", "Metric"], [522, 2, 1, "", "Performance"], [522, 2, 1, "", "Postprocess"], [522, 2, 1, "", "PostprocessSchema"]], "neural_compressor.ux.utils.workload.graph_optimization": [[523, 2, 1, "", "GraphOptimization"]], "neural_compressor.ux.utils.workload.mixed_precision": [[525, 2, 1, "", "MixedPrecision"]], "neural_compressor.ux.utils.workload.model": [[526, 2, 1, "", "Model"]], "neural_compressor.ux.utils.workload.pruning": [[527, 2, 1, "", "AdamOptimizer"], [527, 2, 1, "", "AdamWOptimizer"], [527, 2, 1, "", "Approach"], [527, 2, 1, "", "Criterion"], [527, 2, 1, "", "CrossEntropyLossCriterion"], [527, 2, 1, "", "IntermediateLayersKnowledgeDistillationLoss"], [527, 2, 1, "", "KnowledgeDistillationLossCriterion"], [527, 2, 1, "", "Optimizer"], [527, 2, 1, "", "Pruning"], [527, 2, 1, "", "SGDOptimizer"], [527, 2, 1, "", "SelfKnowledgeDistillationLoss"], [527, 2, 1, "", "SparseCategoricalCrossentropyCriterion"], [527, 2, 1, "", "Train"], [527, 2, 1, "", "WeightCompressionApproach"], [527, 1, 1, "", "parse_dict_value_to_float"], [527, 1, 1, "", "parse_dict_value_to_int"]], "neural_compressor.ux.utils.workload.quantization": [[528, 2, 1, "", "Advance"], [528, 2, 1, "", "Calibration"], [528, 2, 1, "", "Quantization"], [528, 2, 1, "", "WiseConfig"], [528, 2, 1, "", "WiseConfigDetails"]], "neural_compressor.ux.utils.workload.tuning": [[529, 2, 1, "", "AccCriterion"], [529, 2, 1, "", "Diagnosis"], [529, 2, 1, "", "ExitPolicy"], [529, 2, 1, "", "MultiObjectives"], [529, 2, 1, "", "Strategy"], [529, 2, 1, "", "Tuning"], [529, 2, 1, "", "Workspace"]], "neural_compressor.ux.utils.yaml_utils": [[530, 1, 1, "", "float_representer"], [530, 1, 1, "", "pruner_representer"]], "neural_compressor.ux.web": [[531, 0, 0, "-", "communication"], [532, 0, 0, "-", "configuration"], [533, 0, 0, "-", "exceptions"], [535, 0, 0, "-", "router"], [536, 0, 0, "-", "server"], [539, 0, 0, "-", "service"]], "neural_compressor.ux.web.communication": [[531, 2, 1, "", "Message"], [531, 2, 1, "", "MessageQueue"], [531, 2, 1, "", "Request"], [531, 2, 1, "", "Response"], [531, 1, 1, "", "create_simple_response"]], "neural_compressor.ux.web.configuration": [[532, 2, 1, "", "Configuration"]], "neural_compressor.ux.web.exceptions": [[533, 2, 1, "", "ServiceNotFoundException"]], "neural_compressor.ux.web.router": [[535, 2, 1, "", "DeferredRoutingDefinition"], [535, 2, 1, "", "DeferredSubprocessRoutingDefinition"], [535, 2, 1, "", "RealtimeRoutingDefinition"], [535, 2, 1, "", "Router"], [535, 2, 1, "", "RoutingDefinition"], [535, 1, 1, "", "find_pattern_in_graph"], [535, 1, 1, "", "get_model_graph"], [535, 1, 1, "", "get_system_info"]], "neural_compressor.ux.web.server": [[536, 1, 1, "", "allow_api_call"], [536, 1, 1, "", "block_iframe"], [536, 1, 1, "", "block_sniffing"], [536, 1, 1, "", "build_parameters"], [536, 1, 1, "", "disable_cache"], [536, 1, 1, "", "get_tls_args"], [536, 1, 1, "", "handle_api_call"], [536, 1, 1, "", "page_not_found"], [536, 1, 1, "", "require_api_token"], [536, 1, 1, "", "root"], [536, 1, 1, "", "run_server"], [536, 1, 1, "", "web_socket_publisher"]], "neural_compressor.ux.web.service": [[537, 0, 0, "-", "benchmark"], [538, 0, 0, "-", "history_snapshot_parser"], [540, 0, 0, "-", "model"], [541, 0, 0, "-", "optimization"], [542, 0, 0, "-", "profiling"], [543, 0, 0, "-", "request_data_processor"], [544, 0, 0, "-", "response_generator"], [545, 0, 0, "-", "workload"]], "neural_compressor.ux.web.service.benchmark": [[537, 2, 1, "", "BenchmarkService"]], "neural_compressor.ux.web.service.history_snapshot_parser": [[538, 2, 1, "", "HistorySnapshotParser"]], "neural_compressor.ux.web.service.model": [[540, 2, 1, "", "ModelService"]], "neural_compressor.ux.web.service.optimization": [[541, 2, 1, "", "OptimizationService"]], "neural_compressor.ux.web.service.profiling": [[542, 2, 1, "", "ProfilingService"]], "neural_compressor.ux.web.service.request_data_processor": [[543, 2, 1, "", "RequestDataProcessor"]], "neural_compressor.ux.web.service.response_generator": [[544, 2, 1, "", "ResponseGenerator"]], "neural_compressor.ux.web.service.workload": [[545, 2, 1, "", "WorkloadService"]]}, "objtypes": {"0": "py:module", "1": "py:function", "2": "py:class", "3": "py:attribute", "4": "py:data", "5": "py:exception"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "function", "Python function"], "2": ["py", "class", "Python class"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "data", "Python data"], "5": ["py", "exception", "Python exception"]}, "titleterms": {"644ec953a7dc_pruning_support": 0, "6ece06672ed3_v1_14": 1, "modul": [1, 5, 6, 8, 15, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 108, 109, 112, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 163, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 178, 181, 182, 183, 184, 185, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 202, 205, 206, 208, 209, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 222, 225, 226, 227, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 244, 245, 246, 249, 251, 252, 253, 255, 256, 257, 258, 259, 261, 262, 264, 265, 266, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 280, 281, 282, 283, 286, 287, 288, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 309, 310, 311, 312, 314, 315, 317, 318, 319, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 348, 349, 350, 351, 352, 354, 355, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 417, 418, 419, 420, 423, 424, 425, 427, 428, 430, 431, 432, 433, 434, 436, 438, 439, 445, 446, 448, 449, 451, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 467, 469, 470, 471, 472, 474, 477, 478, 480, 481, 483, 484, 486, 487, 488, 489, 490, 492, 493, 494, 495, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 536, 537, 538, 540, 541, 542, 543, 544, 545], "content": [1, 5, 6, 7, 8, 15, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 108, 109, 112, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 165, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 178, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 225, 226, 227, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 309, 310, 311, 312, 314, 315, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 348, 349, 350, 351, 352, 354, 355, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 379, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 417, 418, 419, 420, 423, 424, 425, 427, 428, 430, 431, 432, 433, 434, 436, 438, 439, 445, 446, 448, 449, 451, 453, 454, 455, 456, 458, 459, 460, 461, 462, 463, 464, 465, 467, 469, 470, 471, 472, 474, 475, 477, 478, 480, 481, 483, 484, 486, 487, 488, 489, 490, 492, 493, 494, 495, 497, 498, 499, 501, 502, 503, 504, 505, 506, 507, 509, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522, 523, 525, 526, 527, 528, 529, 530, 531, 532, 533, 535, 536, 537, 538, 540, 541, 542, 543, 544, 545, 553, 569], "function": [1, 5, 6, 17, 20, 37, 43, 44, 66, 67, 69, 103, 104, 115, 117, 145, 146, 147, 150, 151, 152, 153, 155, 158, 160, 163, 165, 167, 169, 170, 171, 172, 173, 175, 185, 193, 195, 199, 202, 203, 204, 207, 209, 210, 211, 212, 214, 216, 217, 219, 222, 229, 237, 239, 243, 246, 247, 248, 250, 251, 252, 255, 256, 257, 258, 261, 262, 264, 265, 266, 267, 268, 275, 282, 286, 291, 292, 293, 295, 300, 306, 310, 312, 314, 315, 317, 318, 319, 320, 321, 322, 326, 330, 332, 333, 337, 345, 349, 351, 352, 354, 357, 358, 360, 361, 363, 364, 366, 367, 377, 378, 379, 381, 386, 388, 389, 391, 393, 396, 397, 402, 405, 406, 407, 418, 428, 445, 449, 451, 462, 463, 464, 467, 470, 474, 478, 480, 483, 486, 488, 489, 492, 498, 499, 507, 510, 515, 519, 527, 530, 531, 535, 536, 576], "6f0d0f71d92e_v1_13": 2, "9e89549a08c8_v1_11": 3, "block_mask": 4, "env": 5, "neural_compressor": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546], "adaptor": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 554, 555], "class": [6, 8, 15, 17, 18, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 101, 102, 103, 104, 106, 107, 108, 109, 112, 114, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 146, 147, 150, 153, 154, 155, 156, 157, 159, 160, 163, 167, 168, 169, 170, 171, 172, 174, 175, 177, 178, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 225, 226, 227, 229, 230, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 258, 259, 260, 261, 264, 267, 268, 269, 270, 271, 272, 274, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 303, 304, 305, 306, 309, 310, 311, 312, 314, 317, 320, 321, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 342, 343, 344, 345, 348, 349, 350, 351, 352, 354, 355, 358, 359, 360, 361, 362, 364, 365, 368, 369, 370, 371, 373, 374, 375, 376, 377, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 408, 409, 410, 412, 413, 414, 415, 417, 419, 420, 423, 424, 425, 427, 430, 431, 432, 433, 434, 436, 438, 439, 446, 448, 451, 453, 454, 455, 456, 458, 459, 460, 461, 465, 469, 471, 472, 475, 477, 481, 484, 487, 488, 490, 493, 494, 495, 497, 501, 502, 504, 505, 506, 507, 509, 511, 512, 513, 514, 517, 518, 520, 521, 522, 523, 525, 526, 527, 528, 529, 531, 532, 533, 535, 537, 538, 540, 541, 542, 543, 544, 545, 554], "subpackag": [7, 21, 86, 110, 111, 113, 162, 164, 179, 204, 223, 248, 260, 284, 302, 313, 341, 416, 421, 435, 440, 447, 475, 491, 500, 508, 534], "submodul": [7, 16, 21, 33, 50, 75, 86, 94, 100, 105, 110, 111, 113, 116, 129, 142, 148, 155, 161, 162, 164, 166, 176, 180, 187, 199, 203, 207, 214, 221, 224, 231, 243, 247, 250, 254, 260, 267, 273, 279, 285, 289, 302, 308, 313, 320, 324, 341, 347, 353, 358, 368, 372, 380, 392, 411, 416, 421, 422, 426, 429, 435, 437, 440, 441, 447, 450, 452, 457, 466, 468, 473, 475, 476, 479, 482, 485, 491, 496, 500, 508, 516, 524, 534, 539], "packag": [7, 33, 155, 187, 199, 203, 204, 207, 214, 231, 243, 247, 248, 250, 260, 267, 279, 284, 285, 302, 320, 324, 341, 358, 368, 475, 600, 602, 604, 605], "kera": [8, 458], "keras_util": [9, 10, 11, 12, 13, 14], "conv2d": 9, "dens": 10, "depthwise_conv2d": 11, "quantiz": [13, 42, 296, 333, 528, 550, 553, 566, 575, 581, 584, 587, 596, 607, 614, 615, 616, 619, 625], "separable_conv2d": 14, "mxnet": [15, 572, 586, 615, 621, 625], "mxnet_util": [16, 17], "util": [17, 43, 145, 152, 173, 258, 307, 308, 309, 310, 311, 312, 346, 347, 348, 349, 350, 351, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 418, 462, 498, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 557], "onnxrt": [18, 450, 451, 572, 586, 621], "ox_util": [19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43], "calibr": [19, 20], "oper": [22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41], "activ": 22, "argmax": 23, "attent": 24, "binary_op": 25, "concat": 26, "conv": 27, "direct_q8": 28, "embed_layernorm": 29, "gather": 30, "gavgpool": 31, "gemm": 32, "lstm": 34, "matmul": [35, 619], "maxpool": 36, "op": 37, "pad": 38, "pool": 39, "resiz": 40, "split": 41, "pytorch": [44, 363, 452, 453, 572, 576, 586, 588, 615, 616, 620, 621, 625], "queri": [45, 554], "tensorflow": [46, 456, 457, 458, 459, 460, 461, 462, 572, 576, 586, 588, 615, 616, 620, 621, 625], "tf_util": [47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145], "graph_convert": 47, "graph_converter_without_calib": 48, "graph_rewrit": [49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108], "bf16": [49, 50], "bf16_convert": [49, 146], "gener": [51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84], "convert_add_to_biasadd": 51, "convert_layout": 52, "convert_leakyrelu": 53, "convert_nan_to_random": 54, "convert_placeholder_to_const": 55, "dequantize_cast_optim": 56, "dilated_contract": 57, "dummy_biasadd": 58, "expanddims_optim": 59, "fetch_weight_from_reshap": 60, "fold_batch_norm": 61, "fold_const": 62, "fuse_biasadd_add": 63, "fuse_column_wise_mul": 64, "fuse_conv_with_math": 65, "fuse_decomposed_bn": 66, "fuse_decomposed_in": 67, "fuse_gelu": 68, "fuse_layer_norm": 69, "fuse_pad_with_conv": 70, "fuse_pad_with_fp32_conv": 71, "fuse_reshape_transpos": 72, "graph_cse_optim": 73, "grappler_pass": 74, "insert_print_nod": 76, "move_squeeze_after_relu": 77, "pre_optim": 78, "remove_training_nod": 79, "rename_batch_norm": 80, "split_shared_input": 81, "strip_equivalent_nod": 82, "strip_unused_nod": 83, "switch_optim": 84, "graph_bas": 85, "int8": [87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 578, 625], "freeze_fake_qu": 87, "freeze_valu": 88, "freeze_value_without_calib": 89, "fuse_conv_redundant_dequant": 90, "fuse_conv_requant": 91, "fuse_matmul_redundant_dequant": 92, "fuse_matmul_requant": 93, "meta_op_optim": 95, "post_hostconst_convert": 96, "post_quantized_op_cs": 97, "rnn_convert": 98, "scale_propag": 99, "onnx": [100, 101, 102, 103, 104, 556, 584, 588, 615, 625], "onnx_graph": 101, "onnx_nod": 102, "onnx_schema": 103, "tf2onnx_util": 104, "qdq": [105, 106, 107, 108, 122, 123, 124, 125, 126, 127, 128, 129, 130, 625], "insert_qdq_pattern": 106, "merge_duplicated_qdq": 107, "share_qdq_y_pattern": 108, "graph_util": 109, "quantize_graph": [111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137], "qat": [112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 625], "fake_quant": 112, "quantize_config": 114, "quantize_help": 115, "quantize_lay": [116, 117, 118, 119, 120], "optimize_lay": 117, "quantize_layer_add": 118, "quantize_layer_bas": 119, "quantize_layer_bn": 120, "quantize_wrapp": 121, "fuse_qdq_bn": 122, "fuse_qdq_concatv2": 123, "fuse_qdq_conv": 124, "fuse_qdq_deconv": 125, "fuse_qdq_in": 126, "fuse_qdq_matmul": 127, "fuse_qdq_pool": 128, "optimize_qdq": 130, "quantize_graph_bas": 131, "quantize_graph_bn": 132, "quantize_graph_concatv2": 133, "quantize_graph_conv": 134, "quantize_graph_for_intel_cpu": 135, "quantize_graph_matmul": 136, "quantize_graph_pool": 137, "quantize_graph_common": 138, "tf2onnx_convert": 139, "transform_graph": [140, 141, 142, 143, 144], "bias_correct": 140, "graph_transform_bas": 141, "insert_log": 143, "rerange_quantized_concat": 144, "torch_util": [146, 147, 148, 149, 150, 151, 152, 219], "hawq_metr": 147, "model_wrapp": 149, "smooth_quant": [150, 156], "symbolic_trac": 151, "algorithm": [153, 154, 155, 156, 157, 619, 622], "fast_bias_correct": 154, "weight_correct": 157, "benchmark": [158, 211, 365, 366, 367, 368, 384, 537, 560, 569, 570, 587, 614], "compress": [159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 221, 222, 561], "callback": 159, "distil": [160, 161, 253, 574, 575, 587, 614, 625], "criterion": [160, 212], "pruner": [163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 282, 293], "criteria": [163, 612, 622], "model_slim": [165, 166, 167, 168], "auto_slim": 165, "pattern_analyz": 167, "weight_slim": 168, "pattern": [169, 285, 286, 287, 291, 612], "reg": 171, "schedul": [172, 295, 297, 612], "conf": [174, 175, 176, 177], "config": [174, 178, 520, 562, 571, 572, 609], "dotdict": 175, "pythonic_config": 177, "contrib": [179, 180, 181, 182, 223, 224, 225, 226], "strategi": [180, 181, 182, 224, 225, 226, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 567, 618, 622], "sigopt": [181, 225, 618, 622], "tpe": [182, 226, 622], "data": [183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 577], "dataload": [183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 213, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 386, 521, 571, 572], "base_dataload": [183, 227], "default_dataload": [185, 229], "fetcher": [186, 230], "attribut": [187, 195, 204, 239, 248, 260, 284, 324, 352, 358, 430, 548], "mxnet_dataload": [188, 232], "onnxrt_dataload": [189, 233], "pytorch_dataload": [190, 234], "sampler": [191, 235], "tensorflow_dataload": [192, 236], "dataset": [193, 194, 195, 196, 197, 198, 199, 200, 237, 238, 239, 240, 241, 242, 243, 244, 387, 569, 572, 582], "bert_dataset": [193, 237], "coco_dataset": [194, 238], "dummy_dataset": [196, 240], "dummy_dataset_v2": [197, 241], "imagenet_dataset": [198, 242], "style_transfer_dataset": [200, 244], "filter": [201, 202, 203, 245, 246, 247], "coco_filt": [201, 245], "transform": [205, 206, 207, 208, 209, 210, 249, 250, 251, 252, 402, 582, 621], "coco_transform": 205, "imagenet_transform": [206, 249], "postprocess": [208, 218], "token": [209, 251], "experiment": [211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312], "common": [212, 213, 214, 215, 216, 217, 218, 219, 550, 579], "metric": [215, 261, 262, 263, 264, 265, 266, 267, 268, 314, 315, 316, 317, 318, 319, 320, 321, 393, 517, 582, 586], "model": [216, 323, 324, 325, 326, 327, 328, 329, 330, 331, 394, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 526, 540, 564, 569, 578, 581, 584, 587, 589, 596, 612, 619, 625], "optim": [217, 395, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 541, 569, 597, 607, 610, 623], "compon": [220, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498], "prune": [222, 283, 294, 482, 483, 484, 527, 569, 587, 612, 614, 625], "export": [254, 255, 256, 257, 258, 578], "qlinear2qdq": 255, "tf2onnx": 256, "torch2onnx": 257, "graph_optim": [259, 472, 473, 474, 523], "bleu": [261, 314], "bleu_util": [262, 315], "coco_label_map": [263, 316], "coco_tool": [264, 317], "evaluate_squad": [265, 318], "f1": [266, 319], "mixed_precis": [269, 476, 477, 478, 525], "model_convers": 270, "na": [271, 272, 273, 274, 275, 276, 551, 569, 614], "basic_na": 271, "dyna": 272, "nas_util": 275, "search_algorithm": 276, "pruner_legaci": [277, 278, 279, 280, 281, 282], "gradient_sensit": 277, "group_lasso": 278, "magnitud": 280, "pattern_lock": 281, "pruning_recip": [284, 285, 286, 287], "tile_pattern": 287, "pruning_v2": 288, "pytorch_prun": [289, 290, 291, 292, 293, 294, 295], "logger": [290, 361, 510], "prune_util": 292, "auto_mixed_precis": [298, 335], "basic": [299, 336, 551, 622], "bayesian": [300, 337, 622], "exhaust": [301, 339, 622], "mse": [303, 342, 622], "mse_v2": [304, 343, 622], "random": [305, 344, 622], "constant": [307, 346, 356], "tuning_sampl": [309, 348], "tuning_spac": [310, 349], "tuning_struct": [311, 350], "mix_precis": 322, "base_model": 323, "keras_model": 325, "mxnet_model": 327, "nets_factori": 328, "onnx_model": 329, "tensorflow_model": 330, "torch_model": 331, "object": [332, 565, 609], "auto": [334, 601, 607, 616, 619, 622], "conserv": [338, 622], "hawq_v2": [340, 622], "templat": [352, 353, 516, 517, 518, 549], "api_doc_exampl": 352, "train": [354, 550, 568, 576, 587, 615], "collect_layer_histogram": 355, "create_obj_from_config": 357, "kl_diverg": 359, "load_huggingfac": 360, "option": [362, 569, 576, 595], "ux": [365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545], "benchmark_model": 366, "execute_benchmark": 367, "config_gener": [369, 370, 371, 372, 373, 374, 375, 376], "benchmark_config_gener": 369, "graph_optimization_config_gener": 371, "mixed_precision_config_gener": 373, "profiling_config_gener": 374, "pruning_config_gener": 375, "quantization_config_gener": 376, "configuration_wizard": [377, 378, 379, 380, 381, 382], "configuration_pars": 377, "get_boundary_nod": 378, "get_configur": 379, "params_feed": 381, "pruning_config_pars": 382, "db_manag": [383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418], "db_model": [384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404], "benchmark_result": 385, "domain": [388, 446], "domain_flavour": 389, "exampl": [390, 550, 551, 554, 558, 570, 571, 572, 574, 575, 576, 577, 578, 587, 588, 589, 592, 596, 609, 610, 612, 615, 619, 620, 625], "framework": [391, 571, 572, 578, 580, 589, 614, 619], "optimization_typ": 396, "precis": [397, 563, 587, 588, 616], "profil": [398, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 542, 569], "profiling_result": 399, "project": [400, 569], "pruning_detail": 401, "tuning_detail": 403, "tuning_histori": [404, 488], "db_oper": [405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415], "benchmark_api_interfac": 405, "dataset_api_interfac": 406, "diagnosis_api_interfac": 408, "dictionaries_api_interfac": 409, "examples_api_interfac": 410, "model_api_interfac": 412, "optimization_api_interfac": 413, "profiling_api_interfac": 414, "project_api_interfac": 415, "params_interfac": 417, "diagnosi": [419, 420, 421, 422, 423, 424, 425, 426, 427, 569], "factori": [420, 471, 490, 495], "onnx_diagnosi": [422, 423], "onnxrt_diagnosi": 423, "op_detail": 424, "op_entri": 425, "tensorflow_diagnosi": [426, 427], "file_brows": [428, 429], "graph": [430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 569], "collaps": 431, "edg": 432, "graph_read": 434, "node": 436, "reader": [437, 438, 439], "onnxrt_read": 438, "tensorflow_read": 439, "jobs_manag": [441, 442, 443, 444], "jobs_control_queu": 442, "request": [444, 549], "manage_workspac": 445, "model_type_gett": 449, "repositori": 454, "shape": 455, "frozen_pb": 456, "meta_graph": 459, "saved_model": 461, "model_zoo": [463, 464, 465, 466, 467], "download_config": 463, "download_model": 464, "download": 465, "list_model": 467, "names_mapp": [468, 469], "execute_optim": 470, "optimize_model": [474, 478, 480, 483], "neural_coder_optim": [479, 480], "tune": [485, 486, 487, 529, 615, 619, 622], "tune_model": 486, "execute_profil": 489, "profile_model": 492, "tensorflow_profil": [495, 496, 497, 498], "inc_bench": 499, "const": 501, "environ": [502, 584, 593], "except": [503, 533], "executor": 504, "expiring_dict": 505, "github_info": 506, "hw_info": 507, "json_seri": 509, "parser": 511, "proc": 512, "process": [513, 622], "singleton": 514, "status_upd": 515, "workdir": 518, "workload": [520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 545], "evalu": [522, 576], "yaml_util": 530, "web": [531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545], "commun": 531, "configur": [532, 576, 580, 611, 614, 618, 624], "router": 535, "server": 536, "servic": [537, 538, 539, 540, 541, 542, 543, 544, 545], "history_snapshot_pars": 538, "request_data_processor": 543, "response_gener": 544, "version": 546, "intel": [547, 553, 569, 583, 584, 587, 593, 601, 607, 625, 626], "neural": [547, 550, 551, 553, 569, 583, 584, 587, 590, 594, 596, 601, 607, 612, 618, 623, 626], "compressor": [547, 550, 553, 569, 583, 584, 587, 601, 607, 618, 626], "document": [547, 553, 558, 626], "section": [547, 626], "contributor": [548, 549], "coven": [548, 549], "code": [548, 549, 551, 587, 608, 623], "conduct": [548, 549], "our": [548, 619], "pledg": 548, "standard": 548, "respons": 548, "scope": [548, 612], "enforc": 548, "contribut": [549, 600, 604], "guidelin": 549, "pull": 549, "checklist": 549, "support": [549, 550, 551, 554, 570, 571, 572, 574, 575, 576, 578, 580, 583, 584, 586, 588, 589, 591, 592, 596, 597, 609, 610, 612, 614, 615, 619, 620, 621, 624], "fx": 550, "introduct": [550, 551, 554, 569, 570, 571, 572, 574, 575, 576, 578, 580, 583, 586, 588, 589, 607, 609, 610, 612, 614, 615, 618, 619, 620, 621, 622, 624], "mode": [550, 625], "matrix": [550, 551, 554, 570, 571, 572, 574, 575, 576, 578, 580, 583, 586, 588, 589, 592, 609, 610, 612, 614, 615, 619, 620, 624], "get": [550, 551, 553, 554, 570, 571, 572, 574, 575, 576, 580, 581, 586, 588, 590, 601, 608, 609, 610, 612, 614, 615, 620, 624], "start": [550, 551, 553, 554, 569, 570, 571, 572, 574, 575, 576, 580, 581, 586, 588, 590, 591, 595, 601, 609, 610, 612, 614, 615, 620, 624], "post": [550, 587, 615], "static": [550, 615], "dynam": [550, 551, 615], "awar": [550, 587, 615], "note": [550, 617], "detail": [550, 569], "problem": 550, "architectur": [551, 573, 583, 584], "search": [551, 607], "api": [551, 553, 554, 558, 559, 570, 571, 572, 574, 575, 576, 581, 582, 586, 588, 590, 594, 608, 609, 610, 612, 614, 623], "usag": [551, 596, 607, 620, 622], "1": [551, 569, 576, 579, 582, 587, 607, 625], "python": [551, 553, 581, 586, 590, 594, 595, 602, 605, 614, 623], "yaml": [551, 571, 572, 576, 580, 624], "2": [551, 569, 576, 579, 582, 587, 607, 625], "onli": 551, "advanc": [551, 623], "custom": [551, 569, 586, 622], "secur": [552, 569, 576], "polici": [552, 622], "report": 552, "vulner": 552, "instal": [553, 569, 584, 591, 593, 600, 601, 604], "from": [553, 569, 584, 587], "pypi": [553, 596], "select": [553, 601], "public": [553, 613], "event": [553, 613], "addit": 553, "research": 553, "collabor": 553, "work": [554, 615], "flow": [554, 615], "background": [554, 607], "ad": 554, "new": [554, 569, 602, 605, 622], "backend": [554, 615], "capabl": 554, "implement": 554, "onnxrtadaptor": 554, "runtim": [556, 584, 588, 615, 625], "torch": [557, 625], "mix": [563, 587, 588, 616], "bench": [569, 594], "tabl": 569, "binari": [569, 584], "sourc": [569, 584], "home": 569, "screen": 569, "creat": [569, 571], "predefin": 569, "displai": 569, "list": [569, 577, 621], "remov": 569, "develop": [569, 600, 604], "tab": 569, "wizard": 569, "edit": 569, "entri": 569, "inform": [569, 585], "demo": 569, "system": [569, 584, 611], "file": [571, 572, 580, 624], "user": [571, 572, 576, 582, 614, 623, 624], "specif": [571, 572], "design": [573, 622], "workflow": 573, "knowledg": [574, 625], "intermedi": 574, "layer": [574, 619], "self": 574, "distribut": [576, 596, 622], "infer": 576, "featur": [576, 580, 583, 596, 597, 601, 614, 615, 620, 624], "pure": 576, "defin": 576, "horovodrun": 576, "execut": 576, "releas": [577, 602, 605, 617], "fp32": 578, "appendix": 578, "frequent": 579, "ask": 579, "question": 579, "build": [579, 586], "issu": [579, 617], "3": [579, 591, 607], "4": [579, 598, 607, 613], "quick": [581, 595], "sampl": 581, "jupyterlab": [581, 601], "extens": [581, 590, 600, 601, 604, 607, 608, 625], "gui": 581, "valid": [581, 584, 619, 625], "incompat": [582, 617], "chang": [582, 606, 608, 617], "between": 582, "v1": 582, "face": 582, "built": [582, 584, 586], "infrastructur": 583, "linux": 584, "prerequisit": 584, "ai": 584, "kit": 584, "window": 584, "requir": [584, 600, 604], "hardwar": [584, 625], "cpu": [584, 593, 625], "base": [584, 623], "64": 584, "compat": 584, "processor": 584, "gpu": 584, "": [584, 608], "xe": 584, "multipl": [584, 609, 625], "vendor": 584, "through": [584, 625], "softwar": 584, "legal": 585, "licens": 585, "citat": 585, "trademark": 585, "singl": [586, 609], "multi": 586, "migrat": 587, "x": 587, "orchestr": [587, 610], "coder": [590, 594, 596, 607, 623], "what": [590, 608], "do": 590, "we": 590, "offer": 590, "jupyt": [590, 591, 602, 605], "lab": [590, 591], "launcher": [590, 595], "contact": 590, "aw": 591, "amazon": 591, "sagemak": 591, "For": 591, "studio": 591, "notebook": 591, "instanc": 591, "guid": [591, 623], "bigdl": 592, "nano": 592, "platform": [593, 618], "best": [593, 601], "perform": [593, 618], "set": [593, 607], "mkl": 593, "openmp": 593, "jemalloc": 593, "numa": 593, "control": 593, "variabl": 593, "frequenc": 593, "govern": 593, "enabl": [594, 601, 607], "superbench": 594, "argument": 595, "v0": 598, "highlight": 598, "other": 598, "changelog": [599, 603], "neural_compressor_ext_lab": [600, 602], "uninstal": [600, 604], "Or": 601, "let": 601, "u": 601, "help": 601, "you": 601, "pre": 601, "requisit": 601, "make": [602, 605, 608], "manual": [602, 605], "npm": [602, 605], "autom": [602, 605], "publish": [602, 605], "conda": [602, 605], "forg": [602, 605], "neural_compressor_ext_lab_alibaba": [604, 605], "log": 606, "unreleas": 606, "vscode": 607, "open": 607, "icon": 607, "5": 607, "welcom": 608, "your": 608, "v": 608, "folder": 608, "setup": 608, "up": 608, "run": 608, "straight": 608, "awai": 608, "explor": 608, "test": 608, "go": 608, "further": 608, "One": 610, "shot": 610, "network": 612, "type": 612, "sparsiti": 612, "decai": 612, "regular": 612, "spars": 612, "deploy": 612, "refer": [612, 615, 619], "full": 613, "59": 613, "2023": 613, "6": 613, "2022": 613, "34": 613, "2021": 613, "15": 613, "2018": 613, "2020": 613, "style": 614, "access": 614, "fundament": [615, 619], "scheme": 615, "ipex": 615, "approach": 615, "With": 615, "without": 615, "accuraci": [615, 622], "specifi": 615, "rule": 615, "recip": 615, "devic": 615, "turn": 616, "off": 616, "dure": 616, "known": 617, "prepar": 618, "benefit": 618, "comparison": 618, "differ": 618, "smooth": 619, "quant": 619, "per": 619, "tensor": 619, "channel": 619, "limit": 619, "smoothquant": 619, "enhanc": 619, "wise": 619, "alpha": 619, "engin": 619, "tensorboard": 620, "space": 622, "exit": 622, "overview": 623, "zero": 623, "topic": 623, "11": 625, "0": 625, "13": 625, "ptq": 625, "9": 625}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"644ec953a7dc_pruning_support": [[0, "module-644ec953a7dc_pruning_support"]], "6ece06672ed3_v1_14": [[1, "module-6ece06672ed3_v1_14"]], "Module Contents": [[1, "module-contents"], [5, "module-contents"], [6, "module-contents"], [8, "module-contents"], [15, "module-contents"], [17, "module-contents"], [18, "module-contents"], [19, "module-contents"], [20, "module-contents"], [22, "module-contents"], [23, "module-contents"], [24, "module-contents"], [25, "module-contents"], [26, "module-contents"], [27, "module-contents"], [28, "module-contents"], [29, "module-contents"], [30, "module-contents"], [31, "module-contents"], [32, "module-contents"], [34, "module-contents"], [35, "module-contents"], [36, "module-contents"], [37, "module-contents"], [38, "module-contents"], [39, "module-contents"], [40, "module-contents"], [41, "module-contents"], [42, "module-contents"], [43, "module-contents"], [44, "module-contents"], [45, "module-contents"], [46, "module-contents"], [47, "module-contents"], [48, "module-contents"], [49, "module-contents"], [51, "module-contents"], [52, "module-contents"], [53, "module-contents"], [54, "module-contents"], [55, "module-contents"], [56, "module-contents"], [57, "module-contents"], [58, "module-contents"], [59, "module-contents"], [60, "module-contents"], [61, "module-contents"], [62, "module-contents"], [63, "module-contents"], [64, "module-contents"], [65, "module-contents"], [66, "module-contents"], [67, "module-contents"], [68, "module-contents"], [69, "module-contents"], [70, "module-contents"], [71, "module-contents"], [72, "module-contents"], [73, "module-contents"], [74, "module-contents"], [76, "module-contents"], [77, "module-contents"], [78, "module-contents"], [79, "module-contents"], [80, "module-contents"], [81, "module-contents"], [82, "module-contents"], [83, "module-contents"], [84, "module-contents"], [85, "module-contents"], [87, "module-contents"], [88, "module-contents"], [89, "module-contents"], [90, "module-contents"], [91, "module-contents"], [92, "module-contents"], [93, "module-contents"], [95, "module-contents"], [96, "module-contents"], [97, "module-contents"], [98, "module-contents"], [99, "module-contents"], [101, "module-contents"], [102, "module-contents"], [103, "module-contents"], [104, "module-contents"], [106, "module-contents"], [107, "module-contents"], [108, "module-contents"], [109, "module-contents"], [112, "module-contents"], [114, "module-contents"], [115, "module-contents"], [117, "module-contents"], [118, "module-contents"], [119, "module-contents"], [120, "module-contents"], [121, "module-contents"], [122, "module-contents"], [123, "module-contents"], [124, "module-contents"], [125, "module-contents"], [126, "module-contents"], [127, "module-contents"], [128, "module-contents"], [130, "module-contents"], [131, "module-contents"], [132, "module-contents"], [133, "module-contents"], [134, "module-contents"], [135, "module-contents"], [136, "module-contents"], [137, "module-contents"], [138, "module-contents"], [139, "module-contents"], [140, "module-contents"], [141, "module-contents"], [143, "module-contents"], [144, "module-contents"], [145, "module-contents"], [146, "module-contents"], [147, "module-contents"], [150, "module-contents"], [151, "module-contents"], [152, "module-contents"], [153, "module-contents"], [154, "module-contents"], [156, "module-contents"], [157, "module-contents"], [158, "module-contents"], [159, "module-contents"], [160, "module-contents"], [163, "module-contents"], [165, "module-contents"], [167, "module-contents"], [168, "module-contents"], [169, "module-contents"], [170, "module-contents"], [171, "module-contents"], [172, "module-contents"], [173, "module-contents"], [174, "module-contents"], [175, "module-contents"], [177, "module-contents"], [178, "module-contents"], [181, "module-contents"], [182, "module-contents"], [183, "module-contents"], [184, "module-contents"], [185, "module-contents"], [186, "module-contents"], [188, "module-contents"], [189, "module-contents"], [190, "module-contents"], [191, "module-contents"], [192, "module-contents"], [193, "module-contents"], [194, "module-contents"], [195, "module-contents"], [196, "module-contents"], [197, "module-contents"], [198, "module-contents"], [200, "module-contents"], [201, "module-contents"], [202, "module-contents"], [205, "module-contents"], [206, "module-contents"], [208, "module-contents"], [209, "module-contents"], [210, "module-contents"], [211, "module-contents"], [212, "module-contents"], [213, "module-contents"], [215, "module-contents"], [216, "module-contents"], [217, "module-contents"], [218, "module-contents"], [219, "module-contents"], [220, "module-contents"], [222, "module-contents"], [225, "module-contents"], [226, "module-contents"], [227, "module-contents"], [229, "module-contents"], [230, "module-contents"], [232, "module-contents"], [233, "module-contents"], [234, "module-contents"], [235, "module-contents"], [236, "module-contents"], [237, "module-contents"], [238, "module-contents"], [239, "module-contents"], [240, "module-contents"], [241, "module-contents"], [242, "module-contents"], [244, "module-contents"], [245, "module-contents"], [246, "module-contents"], [249, "module-contents"], [251, "module-contents"], [252, "module-contents"], [253, "module-contents"], [255, "module-contents"], [256, "module-contents"], [257, "module-contents"], [258, "module-contents"], [259, "module-contents"], [261, "module-contents"], [262, "module-contents"], [264, "module-contents"], [265, "module-contents"], [266, "module-contents"], [268, "module-contents"], [269, "module-contents"], [270, "module-contents"], [271, "module-contents"], [272, "module-contents"], [274, "module-contents"], [275, "module-contents"], [276, "module-contents"], [277, "module-contents"], [278, "module-contents"], [280, "module-contents"], [281, "module-contents"], [282, "module-contents"], [283, "module-contents"], [286, "module-contents"], [287, "module-contents"], [288, "module-contents"], [291, "module-contents"], [292, "module-contents"], [293, "module-contents"], [294, "module-contents"], [295, "module-contents"], [296, "module-contents"], [297, "module-contents"], [298, "module-contents"], [299, "module-contents"], [300, "module-contents"], [301, "module-contents"], [303, "module-contents"], [304, "module-contents"], [305, "module-contents"], [306, "module-contents"], [309, "module-contents"], [310, "module-contents"], [311, "module-contents"], [312, "module-contents"], [314, "module-contents"], [315, "module-contents"], [317, "module-contents"], [318, "module-contents"], [319, "module-contents"], [321, "module-contents"], [322, "module-contents"], [323, "module-contents"], [325, "module-contents"], [326, "module-contents"], [327, "module-contents"], [328, "module-contents"], [329, "module-contents"], [330, "module-contents"], [331, "module-contents"], [332, "module-contents"], [333, "module-contents"], [334, "module-contents"], [335, "module-contents"], [336, "module-contents"], [337, "module-contents"], [338, "module-contents"], [339, "module-contents"], [340, "module-contents"], [342, "module-contents"], [343, "module-contents"], [344, "module-contents"], [345, "module-contents"], [348, "module-contents"], [349, "module-contents"], [350, "module-contents"], [351, "module-contents"], [352, "module-contents"], [354, "module-contents"], [355, "module-contents"], [357, "module-contents"], [359, "module-contents"], [360, "module-contents"], [361, "module-contents"], [362, "module-contents"], [363, "module-contents"], [364, "module-contents"], [365, "module-contents"], [366, "module-contents"], [367, "module-contents"], [369, "module-contents"], [370, "module-contents"], [371, "module-contents"], [373, "module-contents"], [374, "module-contents"], [375, "module-contents"], [376, "module-contents"], [377, "module-contents"], [378, "module-contents"], [379, "module-contents"], [381, "module-contents"], [382, "module-contents"], [383, "module-contents"], [384, "module-contents"], [385, "module-contents"], [386, "module-contents"], [387, "module-contents"], [388, "module-contents"], [389, "module-contents"], [390, "module-contents"], [391, "module-contents"], [393, "module-contents"], [394, "module-contents"], [395, "module-contents"], [396, "module-contents"], [397, "module-contents"], [398, "module-contents"], [399, "module-contents"], [400, "module-contents"], [401, "module-contents"], [402, "module-contents"], [403, "module-contents"], [404, "module-contents"], [405, "module-contents"], [406, "module-contents"], [407, "module-contents"], [408, "module-contents"], [409, "module-contents"], [410, "module-contents"], [412, "module-contents"], [413, "module-contents"], [414, "module-contents"], [415, "module-contents"], [417, "module-contents"], [418, "module-contents"], [419, "module-contents"], [420, "module-contents"], [423, "module-contents"], [424, "module-contents"], [425, "module-contents"], [427, "module-contents"], [428, "module-contents"], [430, "module-contents"], [431, "module-contents"], [432, "module-contents"], [433, "module-contents"], [434, "module-contents"], [436, "module-contents"], [438, "module-contents"], [439, "module-contents"], [445, "module-contents"], [446, "module-contents"], [448, "module-contents"], [449, "module-contents"], [451, "module-contents"], [453, "module-contents"], [454, "module-contents"], [455, "module-contents"], [456, "module-contents"], [458, "module-contents"], [459, "module-contents"], [460, "module-contents"], [461, "module-contents"], [462, "module-contents"], [463, "module-contents"], [464, "module-contents"], [465, "module-contents"], [467, "module-contents"], [469, "module-contents"], [470, "module-contents"], [471, "module-contents"], [472, "module-contents"], [474, "module-contents"], [477, "module-contents"], [478, "module-contents"], [480, "module-contents"], [481, "module-contents"], [483, "module-contents"], [484, "module-contents"], [486, "module-contents"], [487, "module-contents"], [488, "module-contents"], [489, "module-contents"], [490, "module-contents"], [492, "module-contents"], [493, "module-contents"], [494, "module-contents"], [495, "module-contents"], [497, "module-contents"], [498, "module-contents"], [499, "module-contents"], [501, "module-contents"], [502, "module-contents"], [503, "module-contents"], [504, "module-contents"], [505, "module-contents"], [506, "module-contents"], [507, "module-contents"], [509, "module-contents"], [510, "module-contents"], [511, "module-contents"], [512, "module-contents"], [513, "module-contents"], [514, "module-contents"], [515, "module-contents"], [517, "module-contents"], [518, "module-contents"], [519, "module-contents"], [520, "module-contents"], [521, "module-contents"], [522, "module-contents"], [523, "module-contents"], [525, "module-contents"], [526, "module-contents"], [527, "module-contents"], [528, "module-contents"], [529, "module-contents"], [530, "module-contents"], [531, "module-contents"], [532, "module-contents"], [533, "module-contents"], [535, "module-contents"], [536, "module-contents"], [537, "module-contents"], [538, "module-contents"], [540, "module-contents"], [541, "module-contents"], [542, "module-contents"], [543, "module-contents"], [544, "module-contents"], [545, "module-contents"]], "Functions": [[1, "functions"], [5, "functions"], [6, "functions"], [17, "functions"], [20, "functions"], [37, "functions"], [43, "functions"], [44, "functions"], [66, "functions"], [67, "functions"], [69, "functions"], [103, "functions"], [104, "functions"], [115, "functions"], [117, "functions"], [145, "functions"], [146, "functions"], [147, "functions"], [150, "functions"], [151, "functions"], [152, "functions"], [153, "functions"], [155, "functions"], [158, "functions"], [160, "functions"], [163, "functions"], [165, "functions"], [167, "functions"], [169, "functions"], [170, "functions"], [171, "functions"], [172, "functions"], [173, "functions"], [175, "functions"], [185, "functions"], [193, "functions"], [195, "functions"], [199, "functions"], [202, "functions"], [203, "functions"], [204, "functions"], [207, "functions"], [209, "functions"], [210, "functions"], [211, "functions"], [212, "functions"], [214, "functions"], [216, "functions"], [217, "functions"], [219, "functions"], [222, "functions"], [229, "functions"], [237, "functions"], [239, "functions"], [243, "functions"], [246, "functions"], [247, "functions"], [248, "functions"], [250, "functions"], [251, "functions"], [252, "functions"], [255, "functions"], [256, "functions"], [257, "functions"], [258, "functions"], [261, "functions"], [262, "functions"], [264, "functions"], [265, "functions"], [266, "functions"], [267, "functions"], [268, "functions"], [275, "functions"], [282, "functions"], [286, "functions"], [291, "functions"], [292, "functions"], [293, "functions"], [295, "functions"], [300, "functions"], [306, "functions"], [310, "functions"], [312, "functions"], [314, "functions"], [315, "functions"], [317, "functions"], [318, "functions"], [319, "functions"], [320, "functions"], [321, "functions"], [322, "functions"], [326, "functions"], [330, "functions"], [332, "functions"], [333, "functions"], [337, "functions"], [345, "functions"], [349, "functions"], [351, "functions"], [352, "functions"], [354, "functions"], [357, "functions"], [358, "functions"], [360, "functions"], [361, "functions"], [363, "functions"], [364, "functions"], [366, "functions"], [367, "functions"], [377, "functions"], [378, "functions"], [379, "functions"], [381, "functions"], [386, "functions"], [388, "functions"], [389, "functions"], [391, "functions"], [393, "functions"], [396, "functions"], [397, "functions"], [402, "functions"], [405, "functions"], [406, "functions"], [407, "functions"], [418, "functions"], [428, "functions"], [445, "functions"], [449, "functions"], [451, "functions"], [462, "functions"], [463, "functions"], [464, "functions"], [467, "functions"], [470, "functions"], [474, "functions"], [478, "functions"], [480, "functions"], [483, "functions"], [486, "functions"], [488, "functions"], [489, "functions"], [492, "functions"], [498, "functions"], [499, "functions"], [507, "functions"], [510, "functions"], [515, "functions"], [519, "functions"], [527, "functions"], [530, "functions"], [531, "functions"], [535, "functions"], [536, "functions"]], "6f0d0f71d92e_v1_13": [[2, "module-6f0d0f71d92e_v1_13"]], "9e89549a08c8_v1_11": [[3, "module-9e89549a08c8_v1_11"]], "block_mask": [[4, "module-block_mask"]], "env": [[5, "module-env"]], "neural_compressor.adaptor.adaptor": [[6, "module-neural_compressor.adaptor.adaptor"]], "Classes": [[6, "classes"], [8, "classes"], [15, "classes"], [17, "classes"], [18, "classes"], [19, "classes"], [20, "classes"], [22, "classes"], [23, "classes"], [24, "classes"], [25, "classes"], [26, "classes"], [27, "classes"], [28, "classes"], [29, "classes"], [30, "classes"], [31, "classes"], [32, "classes"], [34, "classes"], [35, "classes"], [36, "classes"], [37, "classes"], [38, "classes"], [39, "classes"], [40, "classes"], [41, "classes"], [42, "classes"], [43, "classes"], [44, "classes"], [45, "classes"], [46, "classes"], [47, "classes"], [48, "classes"], [49, "classes"], [51, "classes"], [52, "classes"], [53, "classes"], [54, "classes"], [55, "classes"], [56, "classes"], [57, "classes"], [58, "classes"], [59, "classes"], [60, "classes"], [61, "classes"], [62, "classes"], [63, "classes"], [64, "classes"], [65, "classes"], [66, "classes"], [67, "classes"], [68, "classes"], [69, "classes"], [70, "classes"], [71, "classes"], [72, "classes"], [73, "classes"], [74, "classes"], [76, "classes"], [77, "classes"], [78, "classes"], [79, "classes"], [80, "classes"], [81, "classes"], [82, "classes"], [83, "classes"], [84, "classes"], [85, "classes"], [87, "classes"], [88, "classes"], [89, "classes"], [90, "classes"], [91, "classes"], [92, "classes"], [93, "classes"], [95, "classes"], [96, "classes"], [97, "classes"], [98, "classes"], [99, "classes"], [101, "classes"], [102, "classes"], [103, "classes"], [104, "classes"], [106, "classes"], [107, "classes"], [108, "classes"], [109, "classes"], [112, "classes"], [114, "classes"], [118, "classes"], [119, "classes"], [120, "classes"], [121, "classes"], [122, "classes"], [123, "classes"], [124, "classes"], [125, "classes"], [126, "classes"], [127, "classes"], [128, "classes"], [130, "classes"], [131, "classes"], [132, "classes"], [133, "classes"], [134, "classes"], [135, "classes"], [136, "classes"], [137, "classes"], [138, "classes"], [139, "classes"], [140, "classes"], [141, "classes"], [143, "classes"], [144, "classes"], [146, "classes"], [147, "classes"], [150, "classes"], [153, "classes"], [154, "classes"], [155, "classes"], [156, "classes"], [157, "classes"], [159, "classes"], [160, "classes"], [163, "classes"], [167, "classes"], [168, "classes"], [169, "classes"], [170, "classes"], [171, "classes"], [172, "classes"], [174, "classes"], [175, "classes"], [177, "classes"], [178, "classes"], [181, "classes"], [182, "classes"], [183, "classes"], [184, "classes"], [185, "classes"], [186, "classes"], [187, "classes"], [188, "classes"], [189, "classes"], [190, "classes"], [191, "classes"], [192, "classes"], [193, "classes"], [194, "classes"], [195, "classes"], [196, "classes"], [197, "classes"], [198, "classes"], [199, "classes"], [200, "classes"], [201, "classes"], [202, "classes"], [203, "classes"], [204, "classes"], [205, "classes"], [206, "classes"], [207, "classes"], [208, "classes"], [209, "classes"], [210, "classes"], [211, "classes"], [212, "classes"], [213, "classes"], [214, "classes"], [215, "classes"], [216, "classes"], [217, "classes"], [218, "classes"], [220, "classes"], [225, "classes"], [226, "classes"], [227, "classes"], [229, "classes"], [230, "classes"], [232, "classes"], [233, "classes"], [234, "classes"], [235, "classes"], [236, "classes"], [237, "classes"], [238, "classes"], [239, "classes"], [240, "classes"], [241, "classes"], [242, "classes"], [243, "classes"], [244, "classes"], [245, "classes"], [246, "classes"], [247, "classes"], [248, "classes"], [249, "classes"], [250, "classes"], [251, "classes"], [252, "classes"], [253, "classes"], [258, "classes"], [259, "classes"], [260, "classes"], [261, "classes"], [264, "classes"], [267, "classes"], [268, "classes"], [269, "classes"], [270, "classes"], [271, "classes"], [272, "classes"], [274, "classes"], [276, "classes"], [277, "classes"], [278, "classes"], [280, "classes"], [281, "classes"], [282, "classes"], [283, "classes"], [284, "classes"], [285, "classes"], [286, "classes"], [287, "classes"], [288, "classes"], [291, "classes"], [293, "classes"], [294, "classes"], [295, "classes"], [296, "classes"], [297, "classes"], [298, "classes"], [299, "classes"], [300, "classes"], [301, "classes"], [303, "classes"], [304, "classes"], [305, "classes"], [306, "classes"], [309, "classes"], [310, "classes"], [311, "classes"], [312, "classes"], [314, "classes"], [317, "classes"], [320, "classes"], [321, "classes"], [323, "classes"], [324, "classes"], [325, "classes"], [326, "classes"], [327, "classes"], [328, "classes"], [329, "classes"], [330, "classes"], [331, "classes"], [332, "classes"], [334, "classes"], [335, "classes"], [336, "classes"], [337, "classes"], [338, "classes"], [339, "classes"], [340, "classes"], [342, "classes"], [343, "classes"], [344, "classes"], [345, "classes"], [348, "classes"], [349, "classes"], [350, "classes"], [351, "classes"], [352, "classes"], [354, "classes"], [355, "classes"], [358, "classes"], [359, "classes"], [360, "classes"], [361, "classes"], [362, "classes"], [364, "classes"], [365, "classes"], [368, "classes"], [369, "classes"], [370, "classes"], [371, "classes"], [373, "classes"], [374, "classes"], [375, "classes"], [376, "classes"], [377, "classes"], [381, "classes"], [382, "classes"], [383, "classes"], [384, "classes"], [385, "classes"], [386, "classes"], [387, "classes"], [388, "classes"], [389, "classes"], [390, "classes"], [391, "classes"], [393, "classes"], [394, "classes"], [395, "classes"], [396, "classes"], [397, "classes"], [398, "classes"], [399, "classes"], [400, "classes"], [401, "classes"], [402, "classes"], [403, "classes"], [404, "classes"], [405, "classes"], [406, "classes"], [408, "classes"], [409, "classes"], [410, "classes"], [412, "classes"], [413, "classes"], [414, "classes"], [415, "classes"], [417, "classes"], [419, "classes"], [420, "classes"], [423, "classes"], [424, "classes"], [425, "classes"], [427, "classes"], [430, "classes"], [431, "classes"], [432, "classes"], [433, "classes"], [434, "classes"], [436, "classes"], [438, "classes"], [439, "classes"], [446, "classes"], [448, "classes"], [451, "classes"], [453, "classes"], [454, "classes"], [455, "classes"], [456, "classes"], [458, "classes"], [459, "classes"], [460, "classes"], [461, "classes"], [465, "classes"], [469, "classes"], [471, "classes"], [472, "classes"], [475, "classes"], [477, "classes"], [481, "classes"], [484, "classes"], [487, "classes"], [488, "classes"], [490, "classes"], [493, "classes"], [494, "classes"], [495, "classes"], [497, "classes"], [501, "classes"], [502, "classes"], [504, "classes"], [505, "classes"], [506, "classes"], [507, "classes"], [509, "classes"], [511, "classes"], [512, "classes"], [513, "classes"], [514, "classes"], [517, "classes"], [518, "classes"], [520, "classes"], [521, "classes"], [522, "classes"], [523, "classes"], [525, "classes"], [526, "classes"], [527, "classes"], [528, "classes"], [529, "classes"], [531, "classes"], [532, "classes"], [533, "classes"], [535, "classes"], [537, "classes"], [538, "classes"], [540, "classes"], [541, "classes"], [542, "classes"], [543, "classes"], [544, "classes"], [545, "classes"]], "neural_compressor.adaptor": [[7, "module-neural_compressor.adaptor"]], "Subpackages": [[7, "subpackages"], [21, "subpackages"], [86, "subpackages"], [110, "subpackages"], [111, "subpackages"], [113, "subpackages"], [162, "subpackages"], [164, "subpackages"], [179, "subpackages"], [204, "subpackages"], [223, "subpackages"], [248, "subpackages"], [260, "subpackages"], [284, "subpackages"], [302, "subpackages"], [313, "subpackages"], [341, "subpackages"], [416, "subpackages"], [421, "subpackages"], [435, "subpackages"], [440, "subpackages"], [447, "subpackages"], [475, "subpackages"], [491, "subpackages"], [500, "subpackages"], [508, "subpackages"], [534, "subpackages"]], "Submodules": [[7, "submodules"], [16, "submodules"], [21, "submodules"], [33, "submodules"], [50, "submodules"], [75, "submodules"], [86, "submodules"], [94, "submodules"], [100, "submodules"], [105, "submodules"], [110, "submodules"], [111, "submodules"], [113, "submodules"], [116, "submodules"], [129, "submodules"], [142, "submodules"], [148, "submodules"], [155, "submodules"], [161, "submodules"], [162, "submodules"], [164, "submodules"], [166, "submodules"], [176, "submodules"], [180, "submodules"], [187, "submodules"], [199, "submodules"], [203, "submodules"], [207, "submodules"], [214, "submodules"], [221, "submodules"], [224, "submodules"], [231, "submodules"], [243, "submodules"], [247, "submodules"], [250, "submodules"], [254, "submodules"], [260, "submodules"], [267, "submodules"], [273, "submodules"], [279, "submodules"], [285, "submodules"], [289, "submodules"], [302, "submodules"], [308, "submodules"], [313, "submodules"], [320, "submodules"], [324, "submodules"], [341, "submodules"], [347, "submodules"], [353, "submodules"], [358, "submodules"], [368, "submodules"], [372, "submodules"], [380, "submodules"], [392, "submodules"], [411, "submodules"], [416, "submodules"], [421, "submodules"], [422, "submodules"], [426, "submodules"], [429, "submodules"], [435, "submodules"], [437, "submodules"], [440, "submodules"], [441, "submodules"], [447, "submodules"], [450, "submodules"], [452, "submodules"], [457, "submodules"], [466, "submodules"], [468, "submodules"], [473, "submodules"], [475, "submodules"], [476, "submodules"], [479, "submodules"], [482, "submodules"], [485, "submodules"], [491, "submodules"], [496, "submodules"], [500, "submodules"], [508, "submodules"], [516, "submodules"], [524, "submodules"], [534, "submodules"], [539, "submodules"]], "Package Contents": [[7, "package-contents"], [33, "package-contents"], [155, "package-contents"], [187, "package-contents"], [199, "package-contents"], [203, "package-contents"], [204, "package-contents"], [207, "package-contents"], [214, "package-contents"], [231, "package-contents"], [243, "package-contents"], [247, "package-contents"], [248, "package-contents"], [250, "package-contents"], [260, "package-contents"], [267, "package-contents"], [279, "package-contents"], [284, "package-contents"], [285, "package-contents"], [302, "package-contents"], [320, "package-contents"], [324, "package-contents"], [341, "package-contents"], [358, "package-contents"], [368, "package-contents"], [475, "package-contents"]], "neural_compressor.adaptor.keras": [[8, "module-neural_compressor.adaptor.keras"]], "neural_compressor.adaptor.keras_utils.conv2d": [[9, "module-neural_compressor.adaptor.keras_utils.conv2d"]], "neural_compressor.adaptor.keras_utils.dense": [[10, "module-neural_compressor.adaptor.keras_utils.dense"]], "neural_compressor.adaptor.keras_utils.depthwise_conv2d": [[11, "module-neural_compressor.adaptor.keras_utils.depthwise_conv2d"]], "neural_compressor.adaptor.keras_utils": [[12, "module-neural_compressor.adaptor.keras_utils"]], "neural_compressor.adaptor.keras_utils.quantizer": [[13, "module-neural_compressor.adaptor.keras_utils.quantizer"]], "neural_compressor.adaptor.keras_utils.separable_conv2d": [[14, "module-neural_compressor.adaptor.keras_utils.separable_conv2d"]], "neural_compressor.adaptor.mxnet": [[15, "module-neural_compressor.adaptor.mxnet"]], "neural_compressor.adaptor.mxnet_utils": [[16, "module-neural_compressor.adaptor.mxnet_utils"]], "neural_compressor.adaptor.mxnet_utils.util": [[17, "module-neural_compressor.adaptor.mxnet_utils.util"]], "neural_compressor.adaptor.onnxrt": [[18, "module-neural_compressor.adaptor.onnxrt"]], "neural_compressor.adaptor.ox_utils.calibration": [[19, "module-neural_compressor.adaptor.ox_utils.calibration"]], "neural_compressor.adaptor.ox_utils.calibrator": [[20, "module-neural_compressor.adaptor.ox_utils.calibrator"]], "neural_compressor.adaptor.ox_utils": [[21, "module-neural_compressor.adaptor.ox_utils"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[22, "module-neural_compressor.adaptor.ox_utils.operators.activation"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[23, "module-neural_compressor.adaptor.ox_utils.operators.argmax"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[24, "module-neural_compressor.adaptor.ox_utils.operators.attention"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[25, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[26, "module-neural_compressor.adaptor.ox_utils.operators.concat"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[27, "module-neural_compressor.adaptor.ox_utils.operators.conv"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[28, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[29, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[30, "module-neural_compressor.adaptor.ox_utils.operators.gather"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[31, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[32, "module-neural_compressor.adaptor.ox_utils.operators.gemm"]], "neural_compressor.adaptor.ox_utils.operators": [[33, "module-neural_compressor.adaptor.ox_utils.operators"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[34, "module-neural_compressor.adaptor.ox_utils.operators.lstm"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[35, "module-neural_compressor.adaptor.ox_utils.operators.matmul"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[36, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[37, "module-neural_compressor.adaptor.ox_utils.operators.ops"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[38, "module-neural_compressor.adaptor.ox_utils.operators.pad"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[39, "module-neural_compressor.adaptor.ox_utils.operators.pooling"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[40, "module-neural_compressor.adaptor.ox_utils.operators.resize"]], "neural_compressor.adaptor.ox_utils.operators.split": [[41, "module-neural_compressor.adaptor.ox_utils.operators.split"]], "neural_compressor.adaptor.ox_utils.quantizer": [[42, "module-neural_compressor.adaptor.ox_utils.quantizer"]], "neural_compressor.adaptor.ox_utils.util": [[43, "module-neural_compressor.adaptor.ox_utils.util"]], "neural_compressor.adaptor.pytorch": [[44, "module-neural_compressor.adaptor.pytorch"]], "neural_compressor.adaptor.query": [[45, "module-neural_compressor.adaptor.query"]], "neural_compressor.adaptor.tensorflow": [[46, "module-neural_compressor.adaptor.tensorflow"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[47, "module-neural_compressor.adaptor.tf_utils.graph_converter"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[48, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[49, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "neural_compressor.adaptor.tf_utils.graph_util": [[109, "module-neural_compressor.adaptor.tf_utils.graph_util"]], "neural_compressor.adaptor.tf_utils": [[110, "module-neural_compressor.adaptor.tf_utils"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[111, "module-neural_compressor.adaptor.tf_utils.quantize_graph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[112, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[135, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[137, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[138, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[139, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[140, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[141, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[142, "module-neural_compressor.adaptor.tf_utils.transform_graph"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[143, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[144, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"]], "neural_compressor.adaptor.tf_utils.util": [[145, "module-neural_compressor.adaptor.tf_utils.util"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[146, "module-neural_compressor.adaptor.torch_utils.bf16_convert"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[147, "module-neural_compressor.adaptor.torch_utils.hawq_metric"]], "neural_compressor.adaptor.torch_utils": [[148, "module-neural_compressor.adaptor.torch_utils"]], "neural_compressor.adaptor.torch_utils.model_wrapper": [[149, "module-neural_compressor.adaptor.torch_utils.model_wrapper"]], "neural_compressor.adaptor.torch_utils.smooth_quant": [[150, "module-neural_compressor.adaptor.torch_utils.smooth_quant"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[151, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"]], "neural_compressor.adaptor.torch_utils.util": [[152, "module-neural_compressor.adaptor.torch_utils.util"]], "neural_compressor.algorithm.algorithm": [[153, "module-neural_compressor.algorithm.algorithm"]], "neural_compressor.algorithm.fast_bias_correction": [[154, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm": [[155, "module-neural_compressor.algorithm"]], "neural_compressor.algorithm.smooth_quant": [[156, "module-neural_compressor.algorithm.smooth_quant"]], "neural_compressor.algorithm.weight_correction": [[157, "module-neural_compressor.algorithm.weight_correction"]], "neural_compressor.benchmark": [[158, "module-neural_compressor.benchmark"]], "neural_compressor.compression.callbacks": [[159, "module-neural_compressor.compression.callbacks"]], "neural_compressor.compression.distillation.criterions": [[160, "module-neural_compressor.compression.distillation.criterions"]], "neural_compressor.compression.distillation": [[161, "module-neural_compressor.compression.distillation"]], "neural_compressor.compression": [[162, "module-neural_compressor.compression"]], "neural_compressor.compression.pruner.criteria": [[163, "module-neural_compressor.compression.pruner.criteria"]], "neural_compressor.compression.pruner": [[164, "module-neural_compressor.compression.pruner"]], "neural_compressor.compression.pruner.model_slim.auto_slim": [[165, "module-neural_compressor.compression.pruner.model_slim.auto_slim"]], "neural_compressor.compression.pruner.model_slim": [[166, "module-neural_compressor.compression.pruner.model_slim"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer": [[167, "module-neural_compressor.compression.pruner.model_slim.pattern_analyzer"]], "neural_compressor.compression.pruner.model_slim.weight_slim": [[168, "module-neural_compressor.compression.pruner.model_slim.weight_slim"]], "neural_compressor.compression.pruner.patterns": [[169, "module-neural_compressor.compression.pruner.patterns"]], "neural_compressor.compression.pruner.pruners": [[170, "module-neural_compressor.compression.pruner.pruners"]], "neural_compressor.compression.pruner.regs": [[171, "module-neural_compressor.compression.pruner.regs"]], "neural_compressor.compression.pruner.schedulers": [[172, "module-neural_compressor.compression.pruner.schedulers"]], "neural_compressor.compression.pruner.utils": [[173, "module-neural_compressor.compression.pruner.utils"]], "neural_compressor.conf.config": [[174, "module-neural_compressor.conf.config"]], "neural_compressor.conf.dotdict": [[175, "module-neural_compressor.conf.dotdict"]], "neural_compressor.conf": [[176, "module-neural_compressor.conf"]], "neural_compressor.conf.pythonic_config": [[177, "module-neural_compressor.conf.pythonic_config"]], "neural_compressor.config": [[178, "module-neural_compressor.config"]], "neural_compressor.contrib": [[179, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[180, "module-neural_compressor.contrib.strategy"]], "neural_compressor.contrib.strategy.sigopt": [[181, "module-neural_compressor.contrib.strategy.sigopt"]], "neural_compressor.contrib.strategy.tpe": [[182, "module-neural_compressor.contrib.strategy.tpe"]], "neural_compressor.data.dataloaders.base_dataloader": [[183, "module-neural_compressor.data.dataloaders.base_dataloader"]], "neural_compressor.data.dataloaders.dataloader": [[184, "module-neural_compressor.data.dataloaders.dataloader"]], "neural_compressor.data.dataloaders.default_dataloader": [[185, "module-neural_compressor.data.dataloaders.default_dataloader"]], "neural_compressor.data.dataloaders.fetcher": [[186, "module-neural_compressor.data.dataloaders.fetcher"]], "neural_compressor.data.dataloaders": [[187, "module-neural_compressor.data.dataloaders"]], "Attributes": [[187, "attributes"], [195, "attributes"], [204, "attributes"], [239, "attributes"], [248, "attributes"], [260, "attributes"], [284, "attributes"], [324, "attributes"], [352, "attributes"], [358, "attributes"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[188, "module-neural_compressor.data.dataloaders.mxnet_dataloader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[189, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[190, "module-neural_compressor.data.dataloaders.pytorch_dataloader"]], "neural_compressor.data.dataloaders.sampler": [[191, "module-neural_compressor.data.dataloaders.sampler"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[192, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"]], "neural_compressor.data.datasets.bert_dataset": [[193, "module-neural_compressor.data.datasets.bert_dataset"]], "neural_compressor.data.datasets.coco_dataset": [[194, "module-neural_compressor.data.datasets.coco_dataset"]], "neural_compressor.data.datasets.dataset": [[195, "module-neural_compressor.data.datasets.dataset"]], "neural_compressor.data.datasets.dummy_dataset": [[196, "module-neural_compressor.data.datasets.dummy_dataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[197, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "neural_compressor.data.datasets.imagenet_dataset": [[198, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[199, "module-neural_compressor.data.datasets"]], "neural_compressor.data.datasets.style_transfer_dataset": [[200, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "neural_compressor.data.filters.coco_filter": [[201, "module-neural_compressor.data.filters.coco_filter"]], "neural_compressor.data.filters.filter": [[202, "module-neural_compressor.data.filters.filter"]], "neural_compressor.data.filters": [[203, "module-neural_compressor.data.filters"]], "neural_compressor.data": [[204, "module-neural_compressor.data"]], "neural_compressor.data.transforms.coco_transform": [[205, "module-neural_compressor.data.transforms.coco_transform"]], "neural_compressor.data.transforms.imagenet_transform": [[206, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[207, "module-neural_compressor.data.transforms"]], "neural_compressor.data.transforms.postprocess": [[208, "module-neural_compressor.data.transforms.postprocess"]], "neural_compressor.data.transforms.tokenization": [[209, "module-neural_compressor.data.transforms.tokenization"]], "neural_compressor.data.transforms.transform": [[210, "module-neural_compressor.data.transforms.transform"]], "neural_compressor.experimental.benchmark": [[211, "module-neural_compressor.experimental.benchmark"]], "neural_compressor.experimental.common.criterion": [[212, "module-neural_compressor.experimental.common.criterion"]], "neural_compressor.experimental.common.dataloader": [[213, "module-neural_compressor.experimental.common.dataloader"]], "neural_compressor.experimental.common": [[214, "module-neural_compressor.experimental.common"]], "neural_compressor.experimental.common.metric": [[215, "module-neural_compressor.experimental.common.metric"]], "neural_compressor.experimental.common.model": [[216, "module-neural_compressor.experimental.common.model"]], "neural_compressor.experimental.common.optimizer": [[217, "module-neural_compressor.experimental.common.optimizer"]], "neural_compressor.experimental.common.postprocess": [[218, "module-neural_compressor.experimental.common.postprocess"]], "neural_compressor.experimental.common.torch_utils": [[219, "module-neural_compressor.experimental.common.torch_utils"]], "neural_compressor.experimental.component": [[220, "module-neural_compressor.experimental.component"]], "neural_compressor.experimental.compression": [[221, "module-neural_compressor.experimental.compression"]], "neural_compressor.experimental.compression.pruning": [[222, "module-neural_compressor.experimental.compression.pruning"]], "neural_compressor.experimental.contrib": [[223, "module-neural_compressor.experimental.contrib"]], "neural_compressor.experimental.contrib.strategy": [[224, "module-neural_compressor.experimental.contrib.strategy"]], "neural_compressor.experimental.contrib.strategy.sigopt": [[225, "module-neural_compressor.experimental.contrib.strategy.sigopt"]], "neural_compressor.experimental.contrib.strategy.tpe": [[226, "module-neural_compressor.experimental.contrib.strategy.tpe"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[227, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[228, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[229, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[230, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[231, "module-neural_compressor.experimental.data.dataloaders"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[232, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[233, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[234, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "neural_compressor.experimental.data.dataloaders.sampler": [[235, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[236, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[237, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[238, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "neural_compressor.experimental.data.datasets.dataset": [[239, "module-neural_compressor.experimental.data.datasets.dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[240, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[241, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[242, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "neural_compressor.experimental.data.datasets": [[243, "module-neural_compressor.experimental.data.datasets"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[244, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "neural_compressor.experimental.data.filters.coco_filter": [[245, "module-neural_compressor.experimental.data.filters.coco_filter"]], "neural_compressor.experimental.data.filters.filter": [[246, "module-neural_compressor.experimental.data.filters.filter"]], "neural_compressor.experimental.data.filters": [[247, "module-neural_compressor.experimental.data.filters"]], "neural_compressor.experimental.data": [[248, "module-neural_compressor.experimental.data"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[249, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "neural_compressor.experimental.data.transforms": [[250, "module-neural_compressor.experimental.data.transforms"]], "neural_compressor.experimental.data.transforms.tokenization": [[251, "module-neural_compressor.experimental.data.transforms.tokenization"]], "neural_compressor.experimental.data.transforms.transform": [[252, "module-neural_compressor.experimental.data.transforms.transform"]], "neural_compressor.experimental.distillation": [[253, "module-neural_compressor.experimental.distillation"]], "neural_compressor.experimental.export": [[254, "module-neural_compressor.experimental.export"]], "neural_compressor.experimental.export.qlinear2qdq": [[255, "module-neural_compressor.experimental.export.qlinear2qdq"]], "neural_compressor.experimental.export.tf2onnx": [[256, "module-neural_compressor.experimental.export.tf2onnx"]], "neural_compressor.experimental.export.torch2onnx": [[257, "module-neural_compressor.experimental.export.torch2onnx"]], "neural_compressor.experimental.export.utils": [[258, "module-neural_compressor.experimental.export.utils"]], "neural_compressor.experimental.graph_optimization": [[259, "module-neural_compressor.experimental.graph_optimization"]], "neural_compressor.experimental": [[260, "module-neural_compressor.experimental"]], "neural_compressor.experimental.metric.bleu": [[261, "module-neural_compressor.experimental.metric.bleu"]], "neural_compressor.experimental.metric.bleu_util": [[262, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[263, "module-neural_compressor.experimental.metric.coco_label_map"]], "neural_compressor.experimental.metric.coco_tools": [[264, "module-neural_compressor.experimental.metric.coco_tools"]], "neural_compressor.experimental.metric.evaluate_squad": [[265, "module-neural_compressor.experimental.metric.evaluate_squad"]], "neural_compressor.experimental.metric.f1": [[266, "module-neural_compressor.experimental.metric.f1"]], "neural_compressor.experimental.metric": [[267, "module-neural_compressor.experimental.metric"]], "neural_compressor.experimental.metric.metric": [[268, "module-neural_compressor.experimental.metric.metric"]], "neural_compressor.experimental.mixed_precision": [[269, "module-neural_compressor.experimental.mixed_precision"]], "neural_compressor.experimental.model_conversion": [[270, "module-neural_compressor.experimental.model_conversion"]], "neural_compressor.experimental.nas.basic_nas": [[271, "module-neural_compressor.experimental.nas.basic_nas"]], "neural_compressor.experimental.nas.dynas": [[272, "module-neural_compressor.experimental.nas.dynas"]], "neural_compressor.experimental.nas": [[273, "module-neural_compressor.experimental.nas"]], "neural_compressor.experimental.nas.nas": [[274, "module-neural_compressor.experimental.nas.nas"]], "neural_compressor.experimental.nas.nas_utils": [[275, "module-neural_compressor.experimental.nas.nas_utils"]], "neural_compressor.experimental.nas.search_algorithms": [[276, "module-neural_compressor.experimental.nas.search_algorithms"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[277, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[278, "module-neural_compressor.experimental.pruner_legacy.group_lasso"]], "neural_compressor.experimental.pruner_legacy": [[279, "module-neural_compressor.experimental.pruner_legacy"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[280, "module-neural_compressor.experimental.pruner_legacy.magnitude"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[281, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"]], "neural_compressor.experimental.pruner_legacy.pruner": [[282, "module-neural_compressor.experimental.pruner_legacy.pruner"]], "neural_compressor.experimental.pruning": [[283, "module-neural_compressor.experimental.pruning"]], "neural_compressor.experimental.pruning_recipes": [[284, "module-neural_compressor.experimental.pruning_recipes"]], "neural_compressor.experimental.pruning_recipes.patterns": [[285, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[286, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[287, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "neural_compressor.experimental.pruning_v2": [[288, "module-neural_compressor.experimental.pruning_v2"]], "neural_compressor.experimental.pytorch_pruner": [[289, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[290, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[291, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[292, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[293, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[294, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[295, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "neural_compressor.experimental.quantization": [[296, "module-neural_compressor.experimental.quantization"]], "neural_compressor.experimental.scheduler": [[297, "module-neural_compressor.experimental.scheduler"]], "neural_compressor.experimental.strategy.auto_mixed_precision": [[298, "module-neural_compressor.experimental.strategy.auto_mixed_precision"]], "neural_compressor.experimental.strategy.basic": [[299, "module-neural_compressor.experimental.strategy.basic"]], "neural_compressor.experimental.strategy.bayesian": [[300, "module-neural_compressor.experimental.strategy.bayesian"]], "neural_compressor.experimental.strategy.exhaustive": [[301, "module-neural_compressor.experimental.strategy.exhaustive"]], "neural_compressor.experimental.strategy": [[302, "module-neural_compressor.experimental.strategy"]], "neural_compressor.experimental.strategy.mse": [[303, "module-neural_compressor.experimental.strategy.mse"]], "neural_compressor.experimental.strategy.mse_v2": [[304, "module-neural_compressor.experimental.strategy.mse_v2"]], "neural_compressor.experimental.strategy.random": [[305, "module-neural_compressor.experimental.strategy.random"]], "neural_compressor.experimental.strategy.strategy": [[306, "module-neural_compressor.experimental.strategy.strategy"]], "neural_compressor.experimental.strategy.utils.constant": [[307, "module-neural_compressor.experimental.strategy.utils.constant"]], "neural_compressor.experimental.strategy.utils": [[308, "module-neural_compressor.experimental.strategy.utils"]], "neural_compressor.experimental.strategy.utils.tuning_sampler": [[309, "module-neural_compressor.experimental.strategy.utils.tuning_sampler"]], "neural_compressor.experimental.strategy.utils.tuning_space": [[310, "module-neural_compressor.experimental.strategy.utils.tuning_space"]], "neural_compressor.experimental.strategy.utils.tuning_structs": [[311, "module-neural_compressor.experimental.strategy.utils.tuning_structs"]], "neural_compressor.experimental.strategy.utils.utility": [[312, "module-neural_compressor.experimental.strategy.utils.utility"]], "neural_compressor": [[313, "module-neural_compressor"]], "neural_compressor.metric.bleu": [[314, "module-neural_compressor.metric.bleu"]], "neural_compressor.metric.bleu_util": [[315, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[316, "module-neural_compressor.metric.coco_label_map"]], "neural_compressor.metric.coco_tools": [[317, "module-neural_compressor.metric.coco_tools"]], "neural_compressor.metric.evaluate_squad": [[318, "module-neural_compressor.metric.evaluate_squad"]], "neural_compressor.metric.f1": [[319, "module-neural_compressor.metric.f1"]], "neural_compressor.metric": [[320, "module-neural_compressor.metric"]], "neural_compressor.metric.metric": [[321, "module-neural_compressor.metric.metric"]], "neural_compressor.mix_precision": [[322, "module-neural_compressor.mix_precision"]], "neural_compressor.model.base_model": [[323, "module-neural_compressor.model.base_model"]], "neural_compressor.model": [[324, "module-neural_compressor.model"]], "neural_compressor.model.keras_model": [[325, "module-neural_compressor.model.keras_model"]], "neural_compressor.model.model": [[326, "module-neural_compressor.model.model"]], "neural_compressor.model.mxnet_model": [[327, "module-neural_compressor.model.mxnet_model"]], "neural_compressor.model.nets_factory": [[328, "module-neural_compressor.model.nets_factory"]], "neural_compressor.model.onnx_model": [[329, "module-neural_compressor.model.onnx_model"]], "neural_compressor.model.tensorflow_model": [[330, "module-neural_compressor.model.tensorflow_model"]], "neural_compressor.model.torch_model": [[331, "module-neural_compressor.model.torch_model"]], "neural_compressor.objective": [[332, "module-neural_compressor.objective"]], "neural_compressor.quantization": [[333, "module-neural_compressor.quantization"]], "neural_compressor.strategy.auto": [[334, "module-neural_compressor.strategy.auto"]], "neural_compressor.strategy.auto_mixed_precision": [[335, "module-neural_compressor.strategy.auto_mixed_precision"]], "neural_compressor.strategy.basic": [[336, "module-neural_compressor.strategy.basic"]], "neural_compressor.strategy.bayesian": [[337, "module-neural_compressor.strategy.bayesian"]], "neural_compressor.strategy.conservative": [[338, "module-neural_compressor.strategy.conservative"]], "neural_compressor.strategy.exhaustive": [[339, "module-neural_compressor.strategy.exhaustive"]], "neural_compressor.strategy.hawq_v2": [[340, "module-neural_compressor.strategy.hawq_v2"]], "neural_compressor.strategy": [[341, "module-neural_compressor.strategy"]], "neural_compressor.strategy.mse": [[342, "module-neural_compressor.strategy.mse"]], "neural_compressor.strategy.mse_v2": [[343, "module-neural_compressor.strategy.mse_v2"]], "neural_compressor.strategy.random": [[344, "module-neural_compressor.strategy.random"]], "neural_compressor.strategy.strategy": [[345, "module-neural_compressor.strategy.strategy"]], "neural_compressor.strategy.utils.constant": [[346, "module-neural_compressor.strategy.utils.constant"]], "neural_compressor.strategy.utils": [[347, "module-neural_compressor.strategy.utils"]], "neural_compressor.strategy.utils.tuning_sampler": [[348, "module-neural_compressor.strategy.utils.tuning_sampler"]], "neural_compressor.strategy.utils.tuning_space": [[349, "module-neural_compressor.strategy.utils.tuning_space"]], "neural_compressor.strategy.utils.tuning_structs": [[350, "module-neural_compressor.strategy.utils.tuning_structs"]], "neural_compressor.strategy.utils.utility": [[351, "module-neural_compressor.strategy.utils.utility"]], "neural_compressor.template.api_doc_example": [[352, "module-neural_compressor.template.api_doc_example"]], "neural_compressor.template": [[353, "module-neural_compressor.template"]], "neural_compressor.training": [[354, "module-neural_compressor.training"]], "neural_compressor.utils.collect_layer_histogram": [[355, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[356, "module-neural_compressor.utils.constant"]], "neural_compressor.utils.create_obj_from_config": [[357, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils": [[358, "module-neural_compressor.utils"]], "neural_compressor.utils.kl_divergence": [[359, "module-neural_compressor.utils.kl_divergence"]], "neural_compressor.utils.load_huggingface": [[360, "module-neural_compressor.utils.load_huggingface"]], "neural_compressor.utils.logger": [[361, "module-neural_compressor.utils.logger"]], "neural_compressor.utils.options": [[362, "module-neural_compressor.utils.options"]], "neural_compressor.utils.pytorch": [[363, "module-neural_compressor.utils.pytorch"]], "neural_compressor.utils.utility": [[364, "module-neural_compressor.utils.utility"]], "neural_compressor.ux.components.benchmark.benchmark": [[365, "module-neural_compressor.ux.components.benchmark.benchmark"]], "neural_compressor.ux.components.benchmark.benchmark_model": [[366, "module-neural_compressor.ux.components.benchmark.benchmark_model"]], "neural_compressor.ux.components.benchmark.execute_benchmark": [[367, "module-neural_compressor.ux.components.benchmark.execute_benchmark"]], "neural_compressor.ux.components.benchmark": [[368, "module-neural_compressor.ux.components.benchmark"]], "neural_compressor.ux.components.config_generator.benchmark_config_generator": [[369, "module-neural_compressor.ux.components.config_generator.benchmark_config_generator"]], "neural_compressor.ux.components.config_generator.config_generator": [[370, "module-neural_compressor.ux.components.config_generator.config_generator"]], "neural_compressor.ux.components.config_generator.graph_optimization_config_generator": [[371, "module-neural_compressor.ux.components.config_generator.graph_optimization_config_generator"]], "neural_compressor.ux.components.config_generator": [[372, "module-neural_compressor.ux.components.config_generator"]], "neural_compressor.ux.components.config_generator.mixed_precision_config_generator": [[373, "module-neural_compressor.ux.components.config_generator.mixed_precision_config_generator"]], "neural_compressor.ux.components.config_generator.profiling_config_generator": [[374, "module-neural_compressor.ux.components.config_generator.profiling_config_generator"]], "neural_compressor.ux.components.config_generator.pruning_config_generator": [[375, "module-neural_compressor.ux.components.config_generator.pruning_config_generator"]], "neural_compressor.ux.components.config_generator.quantization_config_generator": [[376, "module-neural_compressor.ux.components.config_generator.quantization_config_generator"]], "neural_compressor.ux.components.configuration_wizard.configuration_parser": [[377, "module-neural_compressor.ux.components.configuration_wizard.configuration_parser"]], "neural_compressor.ux.components.configuration_wizard.get_boundary_nodes": [[378, "module-neural_compressor.ux.components.configuration_wizard.get_boundary_nodes"]], "neural_compressor.ux.components.configuration_wizard.get_configuration": [[379, "module-neural_compressor.ux.components.configuration_wizard.get_configuration"]], "neural_compressor.ux.components.configuration_wizard": [[380, "module-neural_compressor.ux.components.configuration_wizard"]], "neural_compressor.ux.components.configuration_wizard.params_feeder": [[381, "module-neural_compressor.ux.components.configuration_wizard.params_feeder"]], "neural_compressor.ux.components.configuration_wizard.pruning_config_parser": [[382, "module-neural_compressor.ux.components.configuration_wizard.pruning_config_parser"]], "neural_compressor.ux.components.db_manager.db_manager": [[383, "module-neural_compressor.ux.components.db_manager.db_manager"]], "neural_compressor.ux.components.db_manager.db_models.benchmark": [[384, "module-neural_compressor.ux.components.db_manager.db_models.benchmark"]], "neural_compressor.ux.components.db_manager.db_models.benchmark_result": [[385, "module-neural_compressor.ux.components.db_manager.db_models.benchmark_result"]], "neural_compressor.ux.components.db_manager.db_models.dataloader": [[386, "module-neural_compressor.ux.components.db_manager.db_models.dataloader"]], "neural_compressor.ux.components.db_manager.db_models.dataset": [[387, "module-neural_compressor.ux.components.db_manager.db_models.dataset"]], "neural_compressor.ux.components.db_manager.db_models.domain": [[388, "module-neural_compressor.ux.components.db_manager.db_models.domain"]], "neural_compressor.ux.components.db_manager.db_models.domain_flavour": [[389, "module-neural_compressor.ux.components.db_manager.db_models.domain_flavour"]], "neural_compressor.ux.components.db_manager.db_models.example": [[390, "module-neural_compressor.ux.components.db_manager.db_models.example"]], "neural_compressor.ux.components.db_manager.db_models.framework": [[391, "module-neural_compressor.ux.components.db_manager.db_models.framework"]], "neural_compressor.ux.components.db_manager.db_models": [[392, "module-neural_compressor.ux.components.db_manager.db_models"]], "neural_compressor.ux.components.db_manager.db_models.metric": [[393, "module-neural_compressor.ux.components.db_manager.db_models.metric"]], "neural_compressor.ux.components.db_manager.db_models.model": [[394, "module-neural_compressor.ux.components.db_manager.db_models.model"]], "neural_compressor.ux.components.db_manager.db_models.optimization": [[395, "module-neural_compressor.ux.components.db_manager.db_models.optimization"]], "neural_compressor.ux.components.db_manager.db_models.optimization_type": [[396, "module-neural_compressor.ux.components.db_manager.db_models.optimization_type"]], "neural_compressor.ux.components.db_manager.db_models.precision": [[397, "module-neural_compressor.ux.components.db_manager.db_models.precision"]], "neural_compressor.ux.components.db_manager.db_models.profiling": [[398, "module-neural_compressor.ux.components.db_manager.db_models.profiling"]], "neural_compressor.ux.components.db_manager.db_models.profiling_result": [[399, "module-neural_compressor.ux.components.db_manager.db_models.profiling_result"]], "neural_compressor.ux.components.db_manager.db_models.project": [[400, "module-neural_compressor.ux.components.db_manager.db_models.project"]], "neural_compressor.ux.components.db_manager.db_models.pruning_details": [[401, "module-neural_compressor.ux.components.db_manager.db_models.pruning_details"]], "neural_compressor.ux.components.db_manager.db_models.transform": [[402, "module-neural_compressor.ux.components.db_manager.db_models.transform"]], "neural_compressor.ux.components.db_manager.db_models.tuning_details": [[403, "module-neural_compressor.ux.components.db_manager.db_models.tuning_details"]], "neural_compressor.ux.components.db_manager.db_models.tuning_history": [[404, "module-neural_compressor.ux.components.db_manager.db_models.tuning_history"]], "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface": [[405, "module-neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface": [[406, "module-neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.db_operations": [[407, "module-neural_compressor.ux.components.db_manager.db_operations.db_operations"]], "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface": [[408, "module-neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface": [[409, "module-neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface": [[410, "module-neural_compressor.ux.components.db_manager.db_operations.examples_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations": [[411, "module-neural_compressor.ux.components.db_manager.db_operations"]], "neural_compressor.ux.components.db_manager.db_operations.model_api_interface": [[412, "module-neural_compressor.ux.components.db_manager.db_operations.model_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface": [[413, "module-neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface": [[414, "module-neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations.project_api_interface": [[415, "module-neural_compressor.ux.components.db_manager.db_operations.project_api_interface"]], "neural_compressor.ux.components.db_manager": [[416, "module-neural_compressor.ux.components.db_manager"]], "neural_compressor.ux.components.db_manager.params_interfaces": [[417, "module-neural_compressor.ux.components.db_manager.params_interfaces"]], "neural_compressor.ux.components.db_manager.utils": [[418, "module-neural_compressor.ux.components.db_manager.utils"]], "neural_compressor.ux.components.diagnosis.diagnosis": [[419, "module-neural_compressor.ux.components.diagnosis.diagnosis"]], "neural_compressor.ux.components.diagnosis.factory": [[420, "module-neural_compressor.ux.components.diagnosis.factory"]], "neural_compressor.ux.components.diagnosis": [[421, "module-neural_compressor.ux.components.diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis": [[422, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis": [[423, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis"]], "neural_compressor.ux.components.diagnosis.op_details": [[424, "module-neural_compressor.ux.components.diagnosis.op_details"]], "neural_compressor.ux.components.diagnosis.op_entry": [[425, "module-neural_compressor.ux.components.diagnosis.op_entry"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis": [[426, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis": [[427, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis"]], "neural_compressor.ux.components.file_browser.file_browser": [[428, "module-neural_compressor.ux.components.file_browser.file_browser"]], "neural_compressor.ux.components.file_browser": [[429, "module-neural_compressor.ux.components.file_browser"]], "neural_compressor.ux.components.graph.attribute": [[430, "module-neural_compressor.ux.components.graph.attribute"]], "neural_compressor.ux.components.graph.collapser": [[431, "module-neural_compressor.ux.components.graph.collapser"]], "neural_compressor.ux.components.graph.edge": [[432, "module-neural_compressor.ux.components.graph.edge"]], "neural_compressor.ux.components.graph.graph": [[433, "module-neural_compressor.ux.components.graph.graph"]], "neural_compressor.ux.components.graph.graph_reader": [[434, "module-neural_compressor.ux.components.graph.graph_reader"]], "neural_compressor.ux.components.graph": [[435, "module-neural_compressor.ux.components.graph"]], "neural_compressor.ux.components.graph.node": [[436, "module-neural_compressor.ux.components.graph.node"]], "neural_compressor.ux.components.graph.reader": [[437, "module-neural_compressor.ux.components.graph.reader"]], "neural_compressor.ux.components.graph.reader.onnxrt_reader": [[438, "module-neural_compressor.ux.components.graph.reader.onnxrt_reader"]], "neural_compressor.ux.components.graph.reader.tensorflow_reader": [[439, "module-neural_compressor.ux.components.graph.reader.tensorflow_reader"]], "neural_compressor.ux.components": [[440, "module-neural_compressor.ux.components"]], "neural_compressor.ux.components.jobs_management": [[441, "module-neural_compressor.ux.components.jobs_management"]], "neural_compressor.ux.components.jobs_management.jobs_control_queue": [[442, "module-neural_compressor.ux.components.jobs_management.jobs_control_queue"]], "neural_compressor.ux.components.jobs_management.jobs_manager": [[443, "module-neural_compressor.ux.components.jobs_management.jobs_manager"]], "neural_compressor.ux.components.jobs_management.request": [[444, "module-neural_compressor.ux.components.jobs_management.request"]], "neural_compressor.ux.components.manage_workspace": [[445, "module-neural_compressor.ux.components.manage_workspace"]], "neural_compressor.ux.components.model.domain": [[446, "module-neural_compressor.ux.components.model.domain"]], "neural_compressor.ux.components.model": [[447, "module-neural_compressor.ux.components.model"]], "neural_compressor.ux.components.model.model": [[448, "module-neural_compressor.ux.components.model.model"]], "neural_compressor.ux.components.model.model_type_getter": [[449, "module-neural_compressor.ux.components.model.model_type_getter"]], "neural_compressor.ux.components.model.onnxrt": [[450, "module-neural_compressor.ux.components.model.onnxrt"]], "neural_compressor.ux.components.model.onnxrt.model": [[451, "module-neural_compressor.ux.components.model.onnxrt.model"]], "neural_compressor.ux.components.model.pytorch": [[452, "module-neural_compressor.ux.components.model.pytorch"]], "neural_compressor.ux.components.model.pytorch.model": [[453, "module-neural_compressor.ux.components.model.pytorch.model"]], "neural_compressor.ux.components.model.repository": [[454, "module-neural_compressor.ux.components.model.repository"]], "neural_compressor.ux.components.model.shape": [[455, "module-neural_compressor.ux.components.model.shape"]], "neural_compressor.ux.components.model.tensorflow.frozen_pb": [[456, "module-neural_compressor.ux.components.model.tensorflow.frozen_pb"]], "neural_compressor.ux.components.model.tensorflow": [[457, "module-neural_compressor.ux.components.model.tensorflow"]], "neural_compressor.ux.components.model.tensorflow.keras": [[458, "module-neural_compressor.ux.components.model.tensorflow.keras"]], "neural_compressor.ux.components.model.tensorflow.meta_graph": [[459, "module-neural_compressor.ux.components.model.tensorflow.meta_graph"]], "neural_compressor.ux.components.model.tensorflow.model": [[460, "module-neural_compressor.ux.components.model.tensorflow.model"]], "neural_compressor.ux.components.model.tensorflow.saved_model": [[461, "module-neural_compressor.ux.components.model.tensorflow.saved_model"]], "neural_compressor.ux.components.model.tensorflow.utils": [[462, "module-neural_compressor.ux.components.model.tensorflow.utils"]], "neural_compressor.ux.components.model_zoo.download_config": [[463, "module-neural_compressor.ux.components.model_zoo.download_config"]], "neural_compressor.ux.components.model_zoo.download_model": [[464, "module-neural_compressor.ux.components.model_zoo.download_model"]], "neural_compressor.ux.components.model_zoo.downloader": [[465, "module-neural_compressor.ux.components.model_zoo.downloader"]], "neural_compressor.ux.components.model_zoo": [[466, "module-neural_compressor.ux.components.model_zoo"]], "neural_compressor.ux.components.model_zoo.list_models": [[467, "module-neural_compressor.ux.components.model_zoo.list_models"]], "neural_compressor.ux.components.names_mapper": [[468, "module-neural_compressor.ux.components.names_mapper"]], "neural_compressor.ux.components.names_mapper.names_mapper": [[469, "module-neural_compressor.ux.components.names_mapper.names_mapper"]], "neural_compressor.ux.components.optimization.execute_optimization": [[470, "module-neural_compressor.ux.components.optimization.execute_optimization"]], "neural_compressor.ux.components.optimization.factory": [[471, "module-neural_compressor.ux.components.optimization.factory"]], "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization": [[472, "module-neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization"]], "neural_compressor.ux.components.optimization.graph_optimizer": [[473, "module-neural_compressor.ux.components.optimization.graph_optimizer"]], "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model": [[474, "module-neural_compressor.ux.components.optimization.graph_optimizer.optimize_model"]], "neural_compressor.ux.components.optimization": [[475, "module-neural_compressor.ux.components.optimization"]], "neural_compressor.ux.components.optimization.mixed_precision": [[476, "module-neural_compressor.ux.components.optimization.mixed_precision"]], "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision": [[477, "module-neural_compressor.ux.components.optimization.mixed_precision.mixed_precision"]], "neural_compressor.ux.components.optimization.mixed_precision.optimize_model": [[478, "module-neural_compressor.ux.components.optimization.mixed_precision.optimize_model"]], "neural_compressor.ux.components.optimization.neural_coder_optimization": [[479, "module-neural_compressor.ux.components.optimization.neural_coder_optimization"]], "neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model": [[480, "module-neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model"]], "neural_compressor.ux.components.optimization.optimization": [[481, "module-neural_compressor.ux.components.optimization.optimization"]], "neural_compressor.ux.components.optimization.pruning": [[482, "module-neural_compressor.ux.components.optimization.pruning"]], "neural_compressor.ux.components.optimization.pruning.optimize_model": [[483, "module-neural_compressor.ux.components.optimization.pruning.optimize_model"]], "neural_compressor.ux.components.optimization.pruning.pruning": [[484, "module-neural_compressor.ux.components.optimization.pruning.pruning"]], "neural_compressor.ux.components.optimization.tune": [[485, "module-neural_compressor.ux.components.optimization.tune"]], "neural_compressor.ux.components.optimization.tune.tune_model": [[486, "module-neural_compressor.ux.components.optimization.tune.tune_model"]], "neural_compressor.ux.components.optimization.tune.tuning": [[487, "module-neural_compressor.ux.components.optimization.tune.tuning"]], "neural_compressor.ux.components.optimization.tuning_history": [[488, "module-neural_compressor.ux.components.optimization.tuning_history"]], "neural_compressor.ux.components.profiling.execute_profiling": [[489, "module-neural_compressor.ux.components.profiling.execute_profiling"]], "neural_compressor.ux.components.profiling.factory": [[490, "module-neural_compressor.ux.components.profiling.factory"]], "neural_compressor.ux.components.profiling": [[491, "module-neural_compressor.ux.components.profiling"]], "neural_compressor.ux.components.profiling.profile_model": [[492, "module-neural_compressor.ux.components.profiling.profile_model"]], "neural_compressor.ux.components.profiling.profiler": [[493, "module-neural_compressor.ux.components.profiling.profiler"]], "neural_compressor.ux.components.profiling.profiling": [[494, "module-neural_compressor.ux.components.profiling.profiling"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.factory": [[495, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.factory"]], "neural_compressor.ux.components.profiling.tensorflow_profiler": [[496, "module-neural_compressor.ux.components.profiling.tensorflow_profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler": [[497, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.utils": [[498, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.utils"]], "neural_compressor.ux.inc_bench": [[499, "module-neural_compressor.ux.inc_bench"]], "neural_compressor.ux": [[500, "module-neural_compressor.ux"]], "neural_compressor.ux.utils.consts": [[501, "module-neural_compressor.ux.utils.consts"]], "neural_compressor.ux.utils.environment": [[502, "module-neural_compressor.ux.utils.environment"]], "neural_compressor.ux.utils.exceptions": [[503, "module-neural_compressor.ux.utils.exceptions"]], "neural_compressor.ux.utils.executor": [[504, "module-neural_compressor.ux.utils.executor"]], "neural_compressor.ux.utils.expiring_dict": [[505, "module-neural_compressor.ux.utils.expiring_dict"]], "neural_compressor.ux.utils.github_info": [[506, "module-neural_compressor.ux.utils.github_info"]], "neural_compressor.ux.utils.hw_info": [[507, "module-neural_compressor.ux.utils.hw_info"]], "neural_compressor.ux.utils": [[508, "module-neural_compressor.ux.utils"]], "neural_compressor.ux.utils.json_serializer": [[509, "module-neural_compressor.ux.utils.json_serializer"]], "neural_compressor.ux.utils.logger": [[510, "module-neural_compressor.ux.utils.logger"]], "neural_compressor.ux.utils.parser": [[511, "module-neural_compressor.ux.utils.parser"]], "neural_compressor.ux.utils.proc": [[512, "module-neural_compressor.ux.utils.proc"]], "neural_compressor.ux.utils.processes": [[513, "module-neural_compressor.ux.utils.processes"]], "neural_compressor.ux.utils.singleton": [[514, "module-neural_compressor.ux.utils.singleton"]], "neural_compressor.ux.utils.status_updates": [[515, "module-neural_compressor.ux.utils.status_updates"]], "neural_compressor.ux.utils.templates": [[516, "module-neural_compressor.ux.utils.templates"]], "neural_compressor.ux.utils.templates.metric": [[517, "module-neural_compressor.ux.utils.templates.metric"]], "neural_compressor.ux.utils.templates.workdir": [[518, "module-neural_compressor.ux.utils.templates.workdir"]], "neural_compressor.ux.utils.utils": [[519, "module-neural_compressor.ux.utils.utils"]], "neural_compressor.ux.utils.workload.config": [[520, "module-neural_compressor.ux.utils.workload.config"]], "neural_compressor.ux.utils.workload.dataloader": [[521, "module-neural_compressor.ux.utils.workload.dataloader"]], "neural_compressor.ux.utils.workload.evaluation": [[522, "module-neural_compressor.ux.utils.workload.evaluation"]], "neural_compressor.ux.utils.workload.graph_optimization": [[523, "module-neural_compressor.ux.utils.workload.graph_optimization"]], "neural_compressor.ux.utils.workload": [[524, "module-neural_compressor.ux.utils.workload"]], "neural_compressor.ux.utils.workload.mixed_precision": [[525, "module-neural_compressor.ux.utils.workload.mixed_precision"]], "neural_compressor.ux.utils.workload.model": [[526, "module-neural_compressor.ux.utils.workload.model"]], "neural_compressor.ux.utils.workload.pruning": [[527, "module-neural_compressor.ux.utils.workload.pruning"]], "neural_compressor.ux.utils.workload.quantization": [[528, "module-neural_compressor.ux.utils.workload.quantization"]], "neural_compressor.ux.utils.workload.tuning": [[529, "module-neural_compressor.ux.utils.workload.tuning"]], "neural_compressor.ux.utils.yaml_utils": [[530, "module-neural_compressor.ux.utils.yaml_utils"]], "neural_compressor.ux.web.communication": [[531, "module-neural_compressor.ux.web.communication"]], "neural_compressor.ux.web.configuration": [[532, "module-neural_compressor.ux.web.configuration"]], "neural_compressor.ux.web.exceptions": [[533, "module-neural_compressor.ux.web.exceptions"]], "neural_compressor.ux.web": [[534, "module-neural_compressor.ux.web"]], "neural_compressor.ux.web.router": [[535, "module-neural_compressor.ux.web.router"]], "neural_compressor.ux.web.server": [[536, "module-neural_compressor.ux.web.server"]], "neural_compressor.ux.web.service.benchmark": [[537, "module-neural_compressor.ux.web.service.benchmark"]], "neural_compressor.ux.web.service.history_snapshot_parser": [[538, "module-neural_compressor.ux.web.service.history_snapshot_parser"]], "neural_compressor.ux.web.service": [[539, "module-neural_compressor.ux.web.service"]], "neural_compressor.ux.web.service.model": [[540, "module-neural_compressor.ux.web.service.model"]], "neural_compressor.ux.web.service.optimization": [[541, "module-neural_compressor.ux.web.service.optimization"]], "neural_compressor.ux.web.service.profiling": [[542, "module-neural_compressor.ux.web.service.profiling"]], "neural_compressor.ux.web.service.request_data_processor": [[543, "module-neural_compressor.ux.web.service.request_data_processor"]], "neural_compressor.ux.web.service.response_generator": [[544, "module-neural_compressor.ux.web.service.response_generator"]], "neural_compressor.ux.web.service.workload": [[545, "module-neural_compressor.ux.web.service.workload"]], "neural_compressor.version": [[546, "module-neural_compressor.version"]], "Intel\u00ae Neural Compressor Documentation": [[547, "intel-neural-compressor-documentation"], [626, "intel-neural-compressor-documentation"]], "Sections": [[547, "sections"], [626, "sections"]], "Contributor Covenant Code of Conduct": [[548, "contributor-covenant-code-of-conduct"], [549, "contributor-covenant-code-of-conduct"]], "Our Pledge": [[548, "our-pledge"]], "Our Standards": [[548, "our-standards"]], "Our Responsibilities": [[548, "our-responsibilities"]], "Scope": [[548, "scope"]], "Enforcement": [[548, "enforcement"]], "Attribution": [[548, "attribution"]], "Contribution Guidelines": [[549, "contribution-guidelines"]], "Pull Request Checklist": [[549, "pull-request-checklist"]], "Pull Request Template": [[549, "pull-request-template"]], "Support": [[549, "support"]], "FX": [[550, "fx"]], "Introduction": [[550, "introduction"], [551, "introduction"], [554, "introduction"], [569, "introduction"], [570, "introduction"], [571, "introduction"], [572, "introduction"], [574, "introduction"], [575, "introduction"], [576, "introduction"], [578, "introduction"], [580, "introduction"], [583, "introduction"], [586, "introduction"], [588, "introduction"], [589, "introduction"], [609, "introduction"], [610, "introduction"], [612, "introduction"], [614, "introduction"], [618, "introduction"], [619, "introduction"], [620, "introduction"], [621, "introduction"], [622, "introduction"], [624, "introduction"]], "FX Mode Support Matrix in Neural Compressor": [[550, "fx-mode-support-matrix-in-neural-compressor"]], "Get Start": [[550, "get-start"]], "Post Training Static Quantization": [[550, "post-training-static-quantization"], [615, "post-training-static-quantization"]], "Post Training Dynamic Quantization": [[550, "post-training-dynamic-quantization"], [615, "post-training-dynamic-quantization"]], "Quantization-Aware Training": [[550, "quantization-aware-training"]], "Examples": [[550, "examples"], [551, "examples"], [570, "examples"], [571, "examples"], [572, "examples"], [574, "examples"], [575, "examples"], [576, "examples"], [577, "examples"], [578, "examples"], [587, "examples"], [588, "examples"], [589, "examples"], [610, "examples"], [612, "examples"], [615, "examples"], [620, "examples"]], "Note": [[550, "note"]], "Details": [[550, "details"]], "Common Problem": [[550, "common-problem"]], "Dynamic Quantization": [[550, "dynamic-quantization"]], "Static Quantization & Quantization Aware Training": [[550, "static-quantization-quantization-aware-training"]], "Neural Architecture Search": [[551, "neural-architecture-search"]], "Basic NAS": [[551, "basic-nas"]], "Dynamic NAS": [[551, "dynamic-nas"]], "NAS Support Matrix": [[551, "nas-support-matrix"]], "Get Started with NAS API": [[551, "get-started-with-nas-api"]], "Basic Usage": [[551, "basic-usage"]], "1. Python code + YAML": [[551, "python-code-yaml"]], "2. Python code only": [[551, "python-code-only"]], "Advanced Usage (Custom NAS)": [[551, "advanced-usage-custom-nas"]], "Security Policy": [[552, "security-policy"]], "Report a Vulnerability": [[552, "report-a-vulnerability"]], "Intel\u00ae Neural Compressor": [[553, "intel-neural-compressor"], [607, "intel-neural-compressor"]], "Installation": [[553, "installation"], [584, "installation"], [601, "installation"]], "Install from pypi": [[553, "install-from-pypi"]], "Getting Started": [[553, "getting-started"], [581, "getting-started"]], "Quantization with Python API": [[553, "quantization-with-python-api"], [581, "quantization-with-python-api"]], "Documentation": [[553, "documentation"]], "Selected Publications/Events": [[553, "selected-publications-events"]], "Additional Content": [[553, "additional-content"]], "Research Collaborations": [[553, "research-collaborations"]], "Adaptor": [[554, "adaptor"], [555, "adaptor"]], "Adaptor Support Matrix": [[554, "adaptor-support-matrix"]], "Working Flow": [[554, "working-flow"], [615, "working-flow"]], "Get Start with Adaptor API": [[554, "get-start-with-adaptor-api"]], "Query API": [[554, "query-api"]], "Background": [[554, "background"]], "Query API Introduction": [[554, "query-api-introduction"]], "Example of Adding a New Backend Support": [[554, "example-of-adding-a-new-backend-support"]], "Capability": [[554, "capability"]], "Implement ONNXRTAdaptor Class": [[554, "implement-onnxrtadaptor-class"]], "ONNX Runtime": [[556, "onnx-runtime"], [588, "onnx-runtime"], [588, "id1"]], "Torch Utils": [[557, "torch-utils"]], "API Document Example": [[558, "api-document-example"]], "APIs": [[559, "apis"]], "Benchmark": [[560, "benchmark"], [587, "benchmark"], [614, "benchmark"]], "Compression": [[561, "compression"]], "Config": [[562, "config"]], "Mix Precision": [[563, "mix-precision"], [587, "mix-precision"]], "Model": [[564, "model"], [589, "model"]], "Objective": [[565, "objective"], [609, "objective"]], "Quantization": [[566, "quantization"], [614, "quantization"], [615, "quantization"]], "Strategy": [[567, "strategy"]], "Training": [[568, "training"]], "Intel\u00ae Neural Compressor Bench": [[569, "intel-neural-compressor-bench"]], "Table of Contents": [[569, "table-of-contents"]], "Install Intel\u00ae Neural Compressor with Bench": [[569, "install-intel-neural-compressor-with-bench"]], "Option 1: Install from Binary": [[569, "option-1-install-from-binary"]], "Option 2: Install from Source": [[569, "option-2-install-from-source"]], "Start the Intel\u00ae Neural Compressor Bench": [[569, "start-the-intel-neural-compressor-bench"]], "Home Screen": [[569, "home-screen"]], "Create New Project": [[569, "create-new-project"]], "Predefined Model": [[569, "predefined-model"]], "Custom Model": [[569, "custom-model"]], "Display Model Graph": [[569, "display-model-graph"]], "Project List": [[569, "project-list"]], "Remove Project": [[569, "remove-project"]], "Develop Project": [[569, "develop-project"]], "Optimization Tab": [[569, "optimization-tab"]], "Optimization Table": [[569, "optimization-table"]], "Optimization Wizard": [[569, "optimization-wizard"]], "Editing Optimization Entries": [[569, "editing-optimization-entries"]], "Optimization Details": [[569, "optimization-details"]], "Pruning": [[569, "pruning"], [587, "pruning"], [612, "pruning"], [614, "pruning"]], "Benchmark Tab": [[569, "benchmark-tab"]], "Benchmark Table": [[569, "benchmark-table"]], "Benchmark Wizard": [[569, "benchmark-wizard"]], "Editing Benchmark Entries": [[569, "editing-benchmark-entries"]], "Benchmark Details": [[569, "benchmark-details"]], "Profiling Tab": [[569, "profiling-tab"]], "Profiling Table": [[569, "profiling-table"]], "Profiling Wizard": [[569, "profiling-wizard"]], "Editing Profiling Entries": [[569, "editing-profiling-entries"]], "Profiling Details": [[569, "profiling-details"]], "Diagnosis Tab": [[569, "diagnosis-tab"]], "Dataset Tab": [[569, "dataset-tab"]], "Dataset List": [[569, "dataset-list"]], "Dataset Wizard": [[569, "dataset-wizard"]], "Dataset Details": [[569, "dataset-details"]], "Custom Dataset": [[569, "custom-dataset"]], "Project Information": [[569, "project-information"]], "NAS demo": [[569, "nas-demo"]], "System Information": [[569, "system-information"]], "Security": [[569, "security"], [576, "security"]], "Benchmarking": [[570, "benchmarking"]], "Benchmark Support Matrix": [[570, "benchmark-support-matrix"]], "Get Started with Benchmark API": [[570, "get-started-with-benchmark-api"]], "DataLoader": [[571, "dataloader"]], "Supported Framework Dataloader Matrix": [[571, "supported-framework-dataloader-matrix"]], "Get Start with Dataloader API": [[571, "get-start-with-dataloader-api"]], "Config Dataloader in a Yaml File": [[571, "config-dataloader-in-a-yaml-file"]], "Create a User-specific Dataloader": [[571, "create-a-user-specific-dataloader"]], "Dataset": [[572, "dataset"]], "Supported Framework Dataset Matrix": [[572, "supported-framework-dataset-matrix"]], "TensorFlow": [[572, "tensorflow"], [586, "tensorflow"], [588, "tensorflow"], [621, "tensorflow"]], "PyTorch": [[572, "pytorch"], [586, "pytorch"], [588, "pytorch"], [616, "pytorch"]], "MXNet": [[572, "mxnet"], [586, "mxnet"], [621, "mxnet"]], "ONNXRT": [[572, "onnxrt"], [586, "onnxrt"], [621, "onnxrt"]], "Get start with Dataset API": [[572, "get-start-with-dataset-api"]], "Config dataloader in a yaml file": [[572, "config-dataloader-in-a-yaml-file"]], "User-specific dataset": [[572, "user-specific-dataset"]], "Design": [[573, "design"], [622, "design"], [622, "id1"], [622, "id3"], [622, "id5"], [622, "id7"], [622, "id9"], [622, "id11"], [622, "id13"], [622, "id15"], [622, "id17"], [622, "id19"], [622, "id21"]], "Architecture": [[573, "architecture"], [583, "architecture"]], "Workflow": [[573, "workflow"]], "Distillation": [[574, "distillation"], [587, "distillation"], [614, "distillation"]], "Knowledge Distillation": [[574, "knowledge-distillation"]], "Intermediate Layer Knowledge Distillation": [[574, "intermediate-layer-knowledge-distillation"]], "Self Distillation": [[574, "self-distillation"]], "Distillation Support Matrix": [[574, "distillation-support-matrix"]], "Get Started with Distillation API": [[574, "get-started-with-distillation-api"]], "Distillation for Quantization": [[575, "distillation-for-quantization"]], "Distillation for Quantization Support Matrix": [[575, "distillation-for-quantization-support-matrix"]], "Get Started with Distillation for Quantization API": [[575, "get-started-with-distillation-for-quantization-api"]], "Distributed Training and Inference (Evaluation)": [[576, "distributed-training-and-inference-evaluation"]], "Supported Feature Matrix": [[576, "supported-feature-matrix"], [580, "supported-feature-matrix"], [583, "supported-feature-matrix"], [614, "supported-feature-matrix"], [615, "supported-feature-matrix"], [620, "supported-feature-matrix"], [624, "supported-feature-matrix"]], "Get Started with Distributed Training and Inference API": [[576, "get-started-with-distributed-training-and-inference-api"]], "Option 1: Pure Yaml Configuration": [[576, "option-1-pure-yaml-configuration"]], "Option 2: User Defined Training Function": [[576, "option-2-user-defined-training-function"]], "Horovodrun Execution": [[576, "horovodrun-execution"]], "PyTorch Examples:": [[576, "pytorch-examples"]], "TensorFlow Examples:": [[576, "tensorflow-examples"]], "Example List": [[577, "example-list"]], "Release Data": [[577, "release-data"]], "Export": [[578, "export"]], "Supported Framework Model Matrix": [[578, "supported-framework-model-matrix"], [589, "supported-framework-model-matrix"]], "FP32 Model Export": [[578, "fp32-model-export"]], "INT8 Model Export": [[578, "int8-model-export"]], "Appendix": [[578, "appendix"]], "Frequently Asked Questions": [[579, "frequently-asked-questions"]], "Common Build Issues": [[579, "common-build-issues"]], "Issue 1:": [[579, "issue-1"]], "Issue 2:": [[579, "issue-2"]], "Issue 3:": [[579, "issue-3"]], "Issue 4:": [[579, "issue-4"]], "Framework YAML Configuration Files": [[580, "framework-yaml-configuration-files"]], "Get started with Framework YAML Files": [[580, "get-started-with-framework-yaml-files"]], "Quick Samples": [[581, "quick-samples"]], "Quantization with JupyterLab Extension": [[581, "quantization-with-jupyterlab-extension"]], "Quantization with GUI": [[581, "quantization-with-gui"]], "Validated Models": [[581, "validated-models"], [619, "validated-models"], [625, "validated-models"]], "Incompatible changes between v1.2 and v1.1": [[582, "incompatible-changes-between-v1-2-and-v1-1"]], "User-facing APIs": [[582, "user-facing-apis"]], "Built-in transform/dataset/metric APIs": [[582, "built-in-transform-dataset-metric-apis"]], "Infrastructure of Intel\u00ae Neural Compressor": [[583, "infrastructure-of-intel-neural-compressor"]], "Linux Installation": [[584, "linux-installation"]], "Prerequisites": [[584, "prerequisites"], [584, "id1"]], "Install from Binary": [[584, "install-from-binary"], [584, "id2"]], "Install from Source": [[584, "install-from-source"], [584, "id3"]], "Install from AI Kit": [[584, "install-from-ai-kit"]], "Windows Installation": [[584, "windows-installation"]], "System Requirements": [[584, "system-requirements"]], "Validated Hardware Environment": [[584, "validated-hardware-environment"]], "Intel\u00ae Neural Compressor supports CPUs based on Intel 64 architecture or compatible processors:": [[584, "intel-neural-compressor-supports-cpus-based-on-intel-64-architecture-or-compatible-processors"]], "Intel\u00ae Neural Compressor supports GPUs built on Intel\u2019s Xe architecture:": [[584, "intel-neural-compressor-supports-gpus-built-on-intel-s-xe-architecture"]], "Intel\u00ae Neural Compressor quantized ONNX models support multiple hardware vendors through ONNX Runtime:": [[584, "intel-neural-compressor-quantized-onnx-models-support-multiple-hardware-vendors-through-onnx-runtime"]], "Validated Software Environment": [[584, "validated-software-environment"]], "Legal Information": [[585, "legal-information"]], "License": [[585, "license"]], "Citation": [[585, "citation"]], "Trademarks": [[585, "trademarks"]], "Metrics": [[586, "metrics"]], "Supported Built-in Metric Matrix": [[586, "supported-built-in-metric-matrix"]], "Get Start with Metrics": [[586, "get-start-with-metrics"]], "Support Single-metric and Multi-metrics": [[586, "support-single-metric-and-multi-metrics"]], "Build Custom Metric with Python API": [[586, "build-custom-metric-with-python-api"]], "Code Migration from Intel Neural Compressor 1.X to Intel Neural Compressor 2.X": [[587, "code-migration-from-intel-neural-compressor-1-x-to-intel-neural-compressor-2-x"]], "Model Quantization": [[587, "model-quantization"]], "Post-training Quantization": [[587, "post-training-quantization"]], "Quantization Aware Training": [[587, "quantization-aware-training"], [615, "quantization-aware-training"], [615, "id1"]], "Orchestration": [[587, "orchestration"]], "Mixed Precision": [[588, "mixed-precision"]], "Mixed Precision Support Matrix": [[588, "mixed-precision-support-matrix"]], "Get Started with Mixed Precision API": [[588, "get-started-with-mixed-precision-api"]], "Neural Coder": [[590, "neural-coder"], [607, "neural-coder"], [607, "id1"]], "What do we offer?": [[590, "what-do-we-offer"]], "Getting Started!": [[590, "getting-started"], [601, "getting-started"]], "Jupyter Lab Extension": [[590, "jupyter-lab-extension"]], "Python Launcher": [[590, "python-launcher"], [595, "python-launcher"]], "Python API": [[590, "python-api"]], "Contact": [[590, "contact"]], "AWS Amazon SageMaker Support": [[591, "aws-amazon-sagemaker-support"]], "Start Jupyter Lab 3": [[591, "start-jupyter-lab-3"]], "For SageMaker Studio": [[591, "for-sagemaker-studio"]], "For SageMaker Notebook instance": [[591, "for-sagemaker-notebook-instance"]], "Installation Guide": [[591, "installation-guide"]], "BigDL Nano Support": [[592, "bigdl-nano-support"]], "Example": [[592, "example"], [596, "example"], [609, "example"], [619, "example"]], "Support Matrix": [[592, "support-matrix"]], "Intel CPU Platforms: Best Performance Setting": [[593, "intel-cpu-platforms-best-performance-setting"]], "Install MKL, OpenMP and JEMALLOC": [[593, "install-mkl-openmp-and-jemalloc"]], "Install NUMA Controller": [[593, "install-numa-controller"]], "Environment Variables": [[593, "environment-variables"]], "Frequency Governers": [[593, "frequency-governers"]], "Neural Coder as Python API": [[594, "neural-coder-as-python-api"]], "Enable": [[594, "enable"]], "Bench": [[594, "bench"]], "SuperBench": [[594, "superbench"]], "Quick-Start": [[595, "quick-start"]], "Launcher Arguments (Optional)": [[595, "launcher-arguments-optional"]], "Neural Coder for Quantization": [[596, "neural-coder-for-quantization"]], "Features Supported": [[596, "features-supported"]], "Models Supported": [[596, "models-supported"]], "Usage": [[596, "usage"], [620, "usage"], [620, "id1"], [622, "usage"], [622, "id2"], [622, "id4"], [622, "id6"], [622, "id8"], [622, "id10"], [622, "id12"], [622, "id14"], [622, "id16"], [622, "id18"], [622, "id20"], [622, "id22"]], "PyPI distribution:": [[596, "pypi-distribution"]], "Supported Optimization Features": [[597, "supported-optimization-features"]], "v0.4": [[598, "v0-4"]], "Highlights": [[598, "highlights"]], "Others": [[598, "others"]], "Changelog": [[599, "changelog"], [603, "changelog"]], "neural_compressor_ext_lab": [[600, "neural-compressor-ext-lab"]], "Requirements": [[600, "requirements"], [604, "requirements"]], "Install": [[600, "install"], [604, "install"]], "Uninstall": [[600, "uninstall"], [604, "uninstall"]], "Contributing": [[600, "contributing"], [604, "contributing"]], "Development install": [[600, "development-install"], [604, "development-install"]], "Development uninstall": [[600, "development-uninstall"], [604, "development-uninstall"]], "Packaging the extension": [[600, "packaging-the-extension"], [604, "packaging-the-extension"]], "Intel\u00ae Neural Compressor as JupyterLab Extension": [[601, "intel-neural-compressor-as-jupyterlab-extension"]], "Auto-enable a feature": [[601, "auto-enable-a-feature"]], "Or let us help you auto-select the best feature": [[601, "or-let-us-help-you-auto-select-the-best-feature"]], "Pre-requisites": [[601, "pre-requisites"]], "Making a new release of neural_compressor_ext_lab": [[602, "making-a-new-release-of-neural-compressor-ext-lab"]], "Manual release": [[602, "manual-release"], [605, "manual-release"]], "Python package": [[602, "python-package"], [605, "python-package"]], "NPM package": [[602, "npm-package"], [605, "npm-package"]], "Automated releases with the Jupyter Releaser": [[602, "automated-releases-with-the-jupyter-releaser"], [605, "automated-releases-with-the-jupyter-releaser"]], "Publishing to conda-forge": [[602, "publishing-to-conda-forge"], [605, "publishing-to-conda-forge"]], "neural_compressor_ext_lab_alibaba": [[604, "neural-compressor-ext-lab-alibaba"]], "Making a new release of neural_compressor_ext_lab_alibaba": [[605, "making-a-new-release-of-neural-compressor-ext-lab-alibaba"]], "Change Log": [[606, "change-log"]], "[Unreleased]": [[606, "unreleased"]], "Background Introduction": [[607, "background-introduction"]], "Neural Coder Extension in VSCode": [[607, "neural-coder-extension-in-vscode"]], "Neural Coder Extension Usage": [[607, "neural-coder-extension-usage"]], "1. Open": [[607, "open"]], "2. Search": [[607, "search"]], "3. Setting": [[607, "setting"]], "4. Icon": [[607, "icon"]], "5. optimization (quantization)": [[607, "optimization-quantization"]], "5.1 Enable": [[607, "enable"]], "5.2 Auto": [[607, "auto"]], "Welcome to your VS Code Extension": [[608, "welcome-to-your-vs-code-extension"]], "What\u2019s in the folder": [[608, "what-s-in-the-folder"]], "Setup": [[608, "setup"]], "Get up and running straight away": [[608, "get-up-and-running-straight-away"]], "Make changes": [[608, "make-changes"]], "Explore the API": [[608, "explore-the-api"]], "Run tests": [[608, "run-tests"]], "Go further": [[608, "go-further"]], "Single Objective": [[609, "single-objective"]], "Multiple Objectives": [[609, "multiple-objectives"]], "Objective Support Matrix": [[609, "objective-support-matrix"]], "Get Started with Objective API": [[609, "get-started-with-objective-api"]], "Config Single Objective": [[609, "config-single-objective"]], "Config Multiple Objectives": [[609, "config-multiple-objectives"]], "Optimization Orchestration": [[610, "optimization-orchestration"]], "One-shot": [[610, "one-shot"]], "Orchestration Support Matrix": [[610, "orchestration-support-matrix"]], "Get Started with Orchestration API": [[610, "get-started-with-orchestration-api"]], "SYSTEM CONFIGURATION": [[611, "system-configuration"]], "Neural Network Pruning": [[612, "neural-network-pruning"]], "Pruning Patterns": [[612, "pruning-patterns"]], "Pruning Criteria": [[612, "pruning-criteria"]], "Pruning Types": [[612, "pruning-types"]], "Pruning Schedules": [[612, "pruning-schedules"]], "Pruning Scope": [[612, "pruning-scope"]], "Sparsity Decay Types": [[612, "sparsity-decay-types"]], "Regularization": [[612, "regularization"]], "Pruning Support Matrix": [[612, "pruning-support-matrix"]], "Get Started with Pruning API": [[612, "get-started-with-pruning-api"]], "Sparse Model Deployment": [[612, "sparse-model-deployment"]], "Reference": [[612, "reference"], [615, "reference"], [619, "reference"]], "Full Publications/Events (59)": [[613, "full-publications-events-59"]], "2023 (6)": [[613, "id1"]], "2022 (34)": [[613, "id2"]], "2021 (15)": [[613, "id3"]], "2018 - 2020 (4)": [[613, "id4"]], "Pythonic Style Access for Configurations": [[614, "pythonic-style-access-for-configurations"]], "Pythonic API for User Configurations": [[614, "pythonic-api-for-user-configurations"], [614, "id1"]], "Pythonic API for Framework Configurations": [[614, "pythonic-api-for-framework-configurations"], [614, "id2"]], "Get Started with Pythonic API for Configurations": [[614, "get-started-with-pythonic-api-for-configurations"]], "NAS": [[614, "nas"]], "Quantization Introduction": [[615, "quantization-introduction"]], "Quantization Fundamentals": [[615, "quantization-fundamentals"], [619, "quantization-fundamentals"]], "Quantization Support Matrix": [[615, "quantization-support-matrix"]], "Quantization Scheme in TensorFlow": [[615, "quantization-scheme-in-tensorflow"]], "Quantization Scheme in PyTorch": [[615, "quantization-scheme-in-pytorch"]], "Quantization Scheme in IPEX": [[615, "quantization-scheme-in-ipex"]], "Quantization Scheme in MXNet": [[615, "quantization-scheme-in-mxnet"]], "Quantization Scheme in ONNX Runtime": [[615, "quantization-scheme-in-onnx-runtime"]], "Quantization Approaches": [[615, "quantization-approaches"]], "With or Without Accuracy Aware Tuning": [[615, "with-or-without-accuracy-aware-tuning"]], "Get Started": [[615, "get-started"]], "Post Training Quantization": [[615, "post-training-quantization"]], "Specify Quantization Rules": [[615, "specify-quantization-rules"]], "Specify Quantization Recipes": [[615, "specify-quantization-recipes"]], "Specify Quantization Backend and Device": [[615, "specify-quantization-backend-and-device"]], "Turn OFF Auto Mixed Precision during Quantization": [[616, "turn-off-auto-mixed-precision-during-quantization"]], "Tensorflow": [[616, "tensorflow"]], "Release": [[617, "release"]], "Release Notes": [[617, "release-notes"]], "Known Issues": [[617, "known-issues"]], "Incompatible Changes": [[617, "incompatible-changes"]], "SigOpt Strategy": [[618, "sigopt-strategy"]], "Preparation": [[618, "preparation"]], "SigOpt Platform": [[618, "sigopt-platform"]], "Neural Compressor Configuration": [[618, "neural-compressor-configuration"]], "Performance": [[618, "performance"]], "Benefit of SigOpt Strategy": [[618, "benefit-of-sigopt-strategy"]], "Performance Comparison of Different Strategies": [[618, "performance-comparison-of-different-strategies"]], "Smooth Quant": [[619, "smooth-quant"]], "Per-tensor & Per-channel": [[619, "per-tensor-per-channel"]], "Per-tensor example": [[619, "per-tensor-example"]], "Per-channel example": [[619, "per-channel-example"]], "Matmul quantization example": [[619, "matmul-quantization-example"]], "Per-channel limitation": [[619, "per-channel-limitation"]], "SmoothQuant and Our Enhancement": [[619, "smoothquant-and-our-enhancement"]], "SmoothQuant": [[619, "smoothquant"]], "Our enhancement:": [[619, "our-enhancement"]], "Algorithm: Layer-wise Auto-tuning of $\\alpha$.": [[619, "algorithm-layer-wise-auto-tuning-of-alpha"]], "Engineering": [[619, "engineering"]], "Supported Framework Matrix": [[619, "supported-framework-matrix"]], "TensorBoard": [[620, "tensorboard"]], "Get Started with TensorBoard": [[620, "get-started-with-tensorboard"]], "PyTorch TensorBoard": [[620, "pytorch-tensorboard"]], "TensorFlow Tensorboard": [[620, "tensorflow-tensorboard"]], "PyTorch Examples": [[620, "pytorch-examples"]], "TensorFlow Examples": [[620, "tensorflow-examples"]], "Transform": [[621, "transform"]], "Transform Support List": [[621, "transform-support-list"]], "Pytorch": [[621, "pytorch"]], "Tuning Strategies": [[622, "tuning-strategies"]], "Strategy Design": [[622, "strategy-design"]], "Tuning Space": [[622, "tuning-space"]], "Exit Policy": [[622, "exit-policy"]], "Accuracy Criteria": [[622, "accuracy-criteria"]], "Tuning Process": [[622, "tuning-process"]], "Tuning Algorithms": [[622, "tuning-algorithms"]], "Auto": [[622, "auto"]], "Conservative Tuning": [[622, "conservative-tuning"]], "Basic": [[622, "basic"]], "MSE": [[622, "mse"]], "MSE_V2": [[622, "mse-v2"]], "HAWQ_V2": [[622, "hawq-v2"]], "Bayesian": [[622, "bayesian"]], "Exhaustive": [[622, "exhaustive"]], "Random": [[622, "random"]], "SigOpt": [[622, "sigopt"]], "TPE": [[622, "tpe"]], "Distributed Tuning": [[622, "distributed-tuning"]], "Customize a New Tuning Strategy": [[622, "customize-a-new-tuning-strategy"]], "User Guide": [[623, "user-guide"]], "Overview": [[623, "overview"]], "Python-based APIs": [[623, "python-based-apis"]], "Neural Coder (Zero-code Optimization)": [[623, "neural-coder-zero-code-optimization"]], "Advanced Topics": [[623, "advanced-topics"]], "User YAML Configuration Files": [[624, "user-yaml-configuration-files"]], "Get started with User YAML Files": [[624, "get-started-with-user-yaml-files"]], "Validated Quantization Examples": [[625, "validated-quantization-examples"]], "TensorFlow Models with Intel TensorFlow 2.11.0": [[625, "tensorflow-models-with-intel-tensorflow-2-11-0"]], "PyTorch Models with Torch 1.13.0+cpu in PTQ Mode": [[625, "pytorch-models-with-torch-1-13-0-cpu-in-ptq-mode"]], "PyTorch Models with Torch 1.13.0+cpu in QAT Mode": [[625, "pytorch-models-with-torch-1-13-0-cpu-in-qat-mode"]], "PyTorch Models with Torch and Intel\u00ae Extension for PyTorch* 1.13.0+cpu": [[625, "pytorch-models-with-torch-and-intel-extension-for-pytorch-1-13-0-cpu"]], "ONNX Models with ONNX Runtime 1.13.1": [[625, "onnx-models-with-onnx-runtime-1-13-1"]], "MXNet Models with MXNet 1.9.1": [[625, "mxnet-models-with-mxnet-1-9-1"]], "Validated Pruning Examples": [[625, "validated-pruning-examples"]], "Validated Knowledge Distillation Examples": [[625, "validated-knowledge-distillation-examples"]], "Validated ONNX QDQ INT8 Models on Multiple Hardware through ONNX Runtime": [[625, "validated-onnx-qdq-int8-models-on-multiple-hardware-through-onnx-runtime"]]}, "indexentries": {"644ec953a7dc_pruning_support": [[0, "module-644ec953a7dc_pruning_support"]], "module": [[0, "module-644ec953a7dc_pruning_support"], [1, "module-6ece06672ed3_v1_14"], [2, "module-6f0d0f71d92e_v1_13"], [3, "module-9e89549a08c8_v1_11"], [4, "module-block_mask"], [5, "module-env"], [6, "module-neural_compressor.adaptor.adaptor"], [7, "module-neural_compressor.adaptor"], [8, "module-neural_compressor.adaptor.keras"], [9, "module-neural_compressor.adaptor.keras_utils.conv2d"], [10, "module-neural_compressor.adaptor.keras_utils.dense"], [11, "module-neural_compressor.adaptor.keras_utils.depthwise_conv2d"], [12, "module-neural_compressor.adaptor.keras_utils"], [13, "module-neural_compressor.adaptor.keras_utils.quantizer"], [14, "module-neural_compressor.adaptor.keras_utils.separable_conv2d"], [15, "module-neural_compressor.adaptor.mxnet"], [16, "module-neural_compressor.adaptor.mxnet_utils"], [17, "module-neural_compressor.adaptor.mxnet_utils.util"], [18, "module-neural_compressor.adaptor.onnxrt"], [19, "module-neural_compressor.adaptor.ox_utils.calibration"], [20, "module-neural_compressor.adaptor.ox_utils.calibrator"], [21, "module-neural_compressor.adaptor.ox_utils"], [22, "module-neural_compressor.adaptor.ox_utils.operators.activation"], [23, "module-neural_compressor.adaptor.ox_utils.operators.argmax"], [24, "module-neural_compressor.adaptor.ox_utils.operators.attention"], [25, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"], [26, "module-neural_compressor.adaptor.ox_utils.operators.concat"], [27, "module-neural_compressor.adaptor.ox_utils.operators.conv"], [28, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"], [29, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"], [30, "module-neural_compressor.adaptor.ox_utils.operators.gather"], [31, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"], [32, "module-neural_compressor.adaptor.ox_utils.operators.gemm"], [33, "module-neural_compressor.adaptor.ox_utils.operators"], [34, "module-neural_compressor.adaptor.ox_utils.operators.lstm"], [35, "module-neural_compressor.adaptor.ox_utils.operators.matmul"], [36, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"], [37, "module-neural_compressor.adaptor.ox_utils.operators.ops"], [38, "module-neural_compressor.adaptor.ox_utils.operators.pad"], [39, "module-neural_compressor.adaptor.ox_utils.operators.pooling"], [40, "module-neural_compressor.adaptor.ox_utils.operators.resize"], [41, "module-neural_compressor.adaptor.ox_utils.operators.split"], [42, "module-neural_compressor.adaptor.ox_utils.quantizer"], [43, "module-neural_compressor.adaptor.ox_utils.util"], [44, "module-neural_compressor.adaptor.pytorch"], [45, "module-neural_compressor.adaptor.query"], [46, "module-neural_compressor.adaptor.tensorflow"], [47, "module-neural_compressor.adaptor.tf_utils.graph_converter"], [48, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"], [49, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"], [50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"], [51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"], [52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"], [53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"], [54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"], [55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"], [56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"], [57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"], [58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"], [59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"], [60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"], [61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"], [62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"], [63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"], [64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"], [65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"], [66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"], [67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"], [68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"], [69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"], [70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"], [71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"], [72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"], [73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"], [74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"], [75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"], [76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"], [77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"], [78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"], [79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"], [80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"], [81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"], [82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"], [83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"], [84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"], [85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"], [86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"], [87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"], [88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"], [89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"], [90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"], [91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"], [92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"], [93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"], [94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"], [95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"], [96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"], [97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"], [98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"], [99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"], [100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"], [101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"], [102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"], [103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"], [104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"], [105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"], [106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"], [107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"], [108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"], [109, "module-neural_compressor.adaptor.tf_utils.graph_util"], [110, "module-neural_compressor.adaptor.tf_utils"], [111, "module-neural_compressor.adaptor.tf_utils.quantize_graph"], [112, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"], [113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"], [114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"], [115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"], [116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"], [117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"], [118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"], [119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"], [120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"], [121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"], [122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"], [123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"], [124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"], [125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"], [126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"], [127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"], [128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"], [129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"], [130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"], [131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"], [132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"], [133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"], [134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"], [135, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"], [136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"], [137, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"], [138, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"], [139, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"], [140, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"], [141, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"], [142, "module-neural_compressor.adaptor.tf_utils.transform_graph"], [143, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"], [144, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"], [145, "module-neural_compressor.adaptor.tf_utils.util"], [146, "module-neural_compressor.adaptor.torch_utils.bf16_convert"], [147, "module-neural_compressor.adaptor.torch_utils.hawq_metric"], [148, "module-neural_compressor.adaptor.torch_utils"], [149, "module-neural_compressor.adaptor.torch_utils.model_wrapper"], [150, "module-neural_compressor.adaptor.torch_utils.smooth_quant"], [151, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"], [152, "module-neural_compressor.adaptor.torch_utils.util"], [153, "module-neural_compressor.algorithm.algorithm"], [154, "module-neural_compressor.algorithm.fast_bias_correction"], [155, "module-neural_compressor.algorithm"], [156, "module-neural_compressor.algorithm.smooth_quant"], [157, "module-neural_compressor.algorithm.weight_correction"], [158, "module-neural_compressor.benchmark"], [159, "module-neural_compressor.compression.callbacks"], [160, "module-neural_compressor.compression.distillation.criterions"], [161, "module-neural_compressor.compression.distillation"], [162, "module-neural_compressor.compression"], [163, "module-neural_compressor.compression.pruner.criteria"], [164, "module-neural_compressor.compression.pruner"], [165, "module-neural_compressor.compression.pruner.model_slim.auto_slim"], [166, "module-neural_compressor.compression.pruner.model_slim"], [167, "module-neural_compressor.compression.pruner.model_slim.pattern_analyzer"], [168, "module-neural_compressor.compression.pruner.model_slim.weight_slim"], [169, "module-neural_compressor.compression.pruner.patterns"], [170, "module-neural_compressor.compression.pruner.pruners"], [171, "module-neural_compressor.compression.pruner.regs"], [172, "module-neural_compressor.compression.pruner.schedulers"], [173, "module-neural_compressor.compression.pruner.utils"], [174, "module-neural_compressor.conf.config"], [175, "module-neural_compressor.conf.dotdict"], [176, "module-neural_compressor.conf"], [177, "module-neural_compressor.conf.pythonic_config"], [178, "module-neural_compressor.config"], [179, "module-neural_compressor.contrib"], [180, "module-neural_compressor.contrib.strategy"], [181, "module-neural_compressor.contrib.strategy.sigopt"], [182, "module-neural_compressor.contrib.strategy.tpe"], [183, "module-neural_compressor.data.dataloaders.base_dataloader"], [184, "module-neural_compressor.data.dataloaders.dataloader"], [185, "module-neural_compressor.data.dataloaders.default_dataloader"], [186, "module-neural_compressor.data.dataloaders.fetcher"], [187, "module-neural_compressor.data.dataloaders"], [188, "module-neural_compressor.data.dataloaders.mxnet_dataloader"], [189, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"], [190, "module-neural_compressor.data.dataloaders.pytorch_dataloader"], [191, "module-neural_compressor.data.dataloaders.sampler"], [192, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"], [193, "module-neural_compressor.data.datasets.bert_dataset"], [194, "module-neural_compressor.data.datasets.coco_dataset"], [195, "module-neural_compressor.data.datasets.dataset"], [196, "module-neural_compressor.data.datasets.dummy_dataset"], [197, "module-neural_compressor.data.datasets.dummy_dataset_v2"], [198, "module-neural_compressor.data.datasets.imagenet_dataset"], [199, "module-neural_compressor.data.datasets"], [200, "module-neural_compressor.data.datasets.style_transfer_dataset"], [201, "module-neural_compressor.data.filters.coco_filter"], [202, "module-neural_compressor.data.filters.filter"], [203, "module-neural_compressor.data.filters"], [204, "module-neural_compressor.data"], [205, "module-neural_compressor.data.transforms.coco_transform"], [206, "module-neural_compressor.data.transforms.imagenet_transform"], [207, "module-neural_compressor.data.transforms"], [208, "module-neural_compressor.data.transforms.postprocess"], [209, "module-neural_compressor.data.transforms.tokenization"], [210, "module-neural_compressor.data.transforms.transform"], [211, "module-neural_compressor.experimental.benchmark"], [212, "module-neural_compressor.experimental.common.criterion"], [213, "module-neural_compressor.experimental.common.dataloader"], [214, "module-neural_compressor.experimental.common"], [215, "module-neural_compressor.experimental.common.metric"], [216, "module-neural_compressor.experimental.common.model"], [217, "module-neural_compressor.experimental.common.optimizer"], [218, "module-neural_compressor.experimental.common.postprocess"], [219, "module-neural_compressor.experimental.common.torch_utils"], [220, "module-neural_compressor.experimental.component"], [221, "module-neural_compressor.experimental.compression"], [222, "module-neural_compressor.experimental.compression.pruning"], [223, "module-neural_compressor.experimental.contrib"], [224, "module-neural_compressor.experimental.contrib.strategy"], [225, "module-neural_compressor.experimental.contrib.strategy.sigopt"], [226, "module-neural_compressor.experimental.contrib.strategy.tpe"], [227, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"], [228, "module-neural_compressor.experimental.data.dataloaders.dataloader"], [229, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"], [230, "module-neural_compressor.experimental.data.dataloaders.fetcher"], [231, "module-neural_compressor.experimental.data.dataloaders"], [232, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"], [233, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"], [234, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"], [235, "module-neural_compressor.experimental.data.dataloaders.sampler"], [236, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"], [237, "module-neural_compressor.experimental.data.datasets.bert_dataset"], [238, "module-neural_compressor.experimental.data.datasets.coco_dataset"], [239, "module-neural_compressor.experimental.data.datasets.dataset"], [240, "module-neural_compressor.experimental.data.datasets.dummy_dataset"], [241, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"], [242, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"], [243, "module-neural_compressor.experimental.data.datasets"], [244, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"], [245, "module-neural_compressor.experimental.data.filters.coco_filter"], [246, "module-neural_compressor.experimental.data.filters.filter"], [247, "module-neural_compressor.experimental.data.filters"], [248, "module-neural_compressor.experimental.data"], [249, "module-neural_compressor.experimental.data.transforms.imagenet_transform"], [250, "module-neural_compressor.experimental.data.transforms"], [251, "module-neural_compressor.experimental.data.transforms.tokenization"], [252, "module-neural_compressor.experimental.data.transforms.transform"], [253, "module-neural_compressor.experimental.distillation"], [254, "module-neural_compressor.experimental.export"], [255, "module-neural_compressor.experimental.export.qlinear2qdq"], [256, "module-neural_compressor.experimental.export.tf2onnx"], [257, "module-neural_compressor.experimental.export.torch2onnx"], [258, "module-neural_compressor.experimental.export.utils"], [259, "module-neural_compressor.experimental.graph_optimization"], [260, "module-neural_compressor.experimental"], [261, "module-neural_compressor.experimental.metric.bleu"], [262, "module-neural_compressor.experimental.metric.bleu_util"], [263, "module-neural_compressor.experimental.metric.coco_label_map"], [264, "module-neural_compressor.experimental.metric.coco_tools"], [265, "module-neural_compressor.experimental.metric.evaluate_squad"], [266, "module-neural_compressor.experimental.metric.f1"], [267, "module-neural_compressor.experimental.metric"], [268, "module-neural_compressor.experimental.metric.metric"], [269, "module-neural_compressor.experimental.mixed_precision"], [270, "module-neural_compressor.experimental.model_conversion"], [271, "module-neural_compressor.experimental.nas.basic_nas"], [272, "module-neural_compressor.experimental.nas.dynas"], [273, "module-neural_compressor.experimental.nas"], [274, "module-neural_compressor.experimental.nas.nas"], [275, "module-neural_compressor.experimental.nas.nas_utils"], [276, "module-neural_compressor.experimental.nas.search_algorithms"], [277, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"], [278, "module-neural_compressor.experimental.pruner_legacy.group_lasso"], [279, "module-neural_compressor.experimental.pruner_legacy"], [280, "module-neural_compressor.experimental.pruner_legacy.magnitude"], [281, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"], [282, "module-neural_compressor.experimental.pruner_legacy.pruner"], [283, "module-neural_compressor.experimental.pruning"], [284, "module-neural_compressor.experimental.pruning_recipes"], [285, "module-neural_compressor.experimental.pruning_recipes.patterns"], [286, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"], [287, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"], [288, "module-neural_compressor.experimental.pruning_v2"], [289, "module-neural_compressor.experimental.pytorch_pruner"], [290, "module-neural_compressor.experimental.pytorch_pruner.logger"], [291, "module-neural_compressor.experimental.pytorch_pruner.patterns"], [292, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"], [293, "module-neural_compressor.experimental.pytorch_pruner.pruner"], [294, "module-neural_compressor.experimental.pytorch_pruner.pruning"], [295, "module-neural_compressor.experimental.pytorch_pruner.scheduler"], [296, "module-neural_compressor.experimental.quantization"], [297, "module-neural_compressor.experimental.scheduler"], [298, "module-neural_compressor.experimental.strategy.auto_mixed_precision"], [299, "module-neural_compressor.experimental.strategy.basic"], [300, "module-neural_compressor.experimental.strategy.bayesian"], [301, "module-neural_compressor.experimental.strategy.exhaustive"], [302, "module-neural_compressor.experimental.strategy"], [303, "module-neural_compressor.experimental.strategy.mse"], [304, "module-neural_compressor.experimental.strategy.mse_v2"], [305, "module-neural_compressor.experimental.strategy.random"], [306, "module-neural_compressor.experimental.strategy.strategy"], [307, "module-neural_compressor.experimental.strategy.utils.constant"], [308, "module-neural_compressor.experimental.strategy.utils"], [309, "module-neural_compressor.experimental.strategy.utils.tuning_sampler"], [310, "module-neural_compressor.experimental.strategy.utils.tuning_space"], [311, "module-neural_compressor.experimental.strategy.utils.tuning_structs"], [312, "module-neural_compressor.experimental.strategy.utils.utility"], [313, "module-neural_compressor"], [314, "module-neural_compressor.metric.bleu"], [315, "module-neural_compressor.metric.bleu_util"], [316, "module-neural_compressor.metric.coco_label_map"], [317, "module-neural_compressor.metric.coco_tools"], [318, "module-neural_compressor.metric.evaluate_squad"], [319, "module-neural_compressor.metric.f1"], [320, "module-neural_compressor.metric"], [321, "module-neural_compressor.metric.metric"], [322, "module-neural_compressor.mix_precision"], [323, "module-neural_compressor.model.base_model"], [324, "module-neural_compressor.model"], [325, "module-neural_compressor.model.keras_model"], [326, "module-neural_compressor.model.model"], [327, "module-neural_compressor.model.mxnet_model"], [328, "module-neural_compressor.model.nets_factory"], [329, "module-neural_compressor.model.onnx_model"], [330, "module-neural_compressor.model.tensorflow_model"], [331, "module-neural_compressor.model.torch_model"], [332, "module-neural_compressor.objective"], [333, "module-neural_compressor.quantization"], [334, "module-neural_compressor.strategy.auto"], [335, "module-neural_compressor.strategy.auto_mixed_precision"], [336, "module-neural_compressor.strategy.basic"], [337, "module-neural_compressor.strategy.bayesian"], [338, "module-neural_compressor.strategy.conservative"], [339, "module-neural_compressor.strategy.exhaustive"], [340, "module-neural_compressor.strategy.hawq_v2"], [341, "module-neural_compressor.strategy"], [342, "module-neural_compressor.strategy.mse"], [343, "module-neural_compressor.strategy.mse_v2"], [344, "module-neural_compressor.strategy.random"], [345, "module-neural_compressor.strategy.strategy"], [346, "module-neural_compressor.strategy.utils.constant"], [347, "module-neural_compressor.strategy.utils"], [348, "module-neural_compressor.strategy.utils.tuning_sampler"], [349, "module-neural_compressor.strategy.utils.tuning_space"], [350, "module-neural_compressor.strategy.utils.tuning_structs"], [351, "module-neural_compressor.strategy.utils.utility"], [352, "module-neural_compressor.template.api_doc_example"], [353, "module-neural_compressor.template"], [354, "module-neural_compressor.training"], [355, "module-neural_compressor.utils.collect_layer_histogram"], [356, "module-neural_compressor.utils.constant"], [357, "module-neural_compressor.utils.create_obj_from_config"], [358, "module-neural_compressor.utils"], [359, "module-neural_compressor.utils.kl_divergence"], [360, "module-neural_compressor.utils.load_huggingface"], [361, "module-neural_compressor.utils.logger"], [362, "module-neural_compressor.utils.options"], [363, "module-neural_compressor.utils.pytorch"], [364, "module-neural_compressor.utils.utility"], [365, "module-neural_compressor.ux.components.benchmark.benchmark"], [366, "module-neural_compressor.ux.components.benchmark.benchmark_model"], [367, "module-neural_compressor.ux.components.benchmark.execute_benchmark"], [368, "module-neural_compressor.ux.components.benchmark"], [369, "module-neural_compressor.ux.components.config_generator.benchmark_config_generator"], [370, "module-neural_compressor.ux.components.config_generator.config_generator"], [371, "module-neural_compressor.ux.components.config_generator.graph_optimization_config_generator"], [372, "module-neural_compressor.ux.components.config_generator"], [373, "module-neural_compressor.ux.components.config_generator.mixed_precision_config_generator"], [374, "module-neural_compressor.ux.components.config_generator.profiling_config_generator"], [375, "module-neural_compressor.ux.components.config_generator.pruning_config_generator"], [376, "module-neural_compressor.ux.components.config_generator.quantization_config_generator"], [377, "module-neural_compressor.ux.components.configuration_wizard.configuration_parser"], [378, "module-neural_compressor.ux.components.configuration_wizard.get_boundary_nodes"], [379, "module-neural_compressor.ux.components.configuration_wizard.get_configuration"], [380, "module-neural_compressor.ux.components.configuration_wizard"], [381, "module-neural_compressor.ux.components.configuration_wizard.params_feeder"], [382, "module-neural_compressor.ux.components.configuration_wizard.pruning_config_parser"], [383, "module-neural_compressor.ux.components.db_manager.db_manager"], [384, "module-neural_compressor.ux.components.db_manager.db_models.benchmark"], [385, "module-neural_compressor.ux.components.db_manager.db_models.benchmark_result"], [386, "module-neural_compressor.ux.components.db_manager.db_models.dataloader"], [387, "module-neural_compressor.ux.components.db_manager.db_models.dataset"], [388, "module-neural_compressor.ux.components.db_manager.db_models.domain"], [389, "module-neural_compressor.ux.components.db_manager.db_models.domain_flavour"], [390, "module-neural_compressor.ux.components.db_manager.db_models.example"], [391, "module-neural_compressor.ux.components.db_manager.db_models.framework"], [392, "module-neural_compressor.ux.components.db_manager.db_models"], [393, "module-neural_compressor.ux.components.db_manager.db_models.metric"], [394, "module-neural_compressor.ux.components.db_manager.db_models.model"], [395, "module-neural_compressor.ux.components.db_manager.db_models.optimization"], [396, "module-neural_compressor.ux.components.db_manager.db_models.optimization_type"], [397, "module-neural_compressor.ux.components.db_manager.db_models.precision"], [398, "module-neural_compressor.ux.components.db_manager.db_models.profiling"], [399, "module-neural_compressor.ux.components.db_manager.db_models.profiling_result"], [400, "module-neural_compressor.ux.components.db_manager.db_models.project"], [401, "module-neural_compressor.ux.components.db_manager.db_models.pruning_details"], [402, "module-neural_compressor.ux.components.db_manager.db_models.transform"], [403, "module-neural_compressor.ux.components.db_manager.db_models.tuning_details"], [404, "module-neural_compressor.ux.components.db_manager.db_models.tuning_history"], [405, "module-neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface"], [406, "module-neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface"], [407, "module-neural_compressor.ux.components.db_manager.db_operations.db_operations"], [408, "module-neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface"], [409, "module-neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface"], [410, "module-neural_compressor.ux.components.db_manager.db_operations.examples_api_interface"], [411, "module-neural_compressor.ux.components.db_manager.db_operations"], [412, "module-neural_compressor.ux.components.db_manager.db_operations.model_api_interface"], [413, "module-neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface"], [414, "module-neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface"], [415, "module-neural_compressor.ux.components.db_manager.db_operations.project_api_interface"], [416, "module-neural_compressor.ux.components.db_manager"], [417, "module-neural_compressor.ux.components.db_manager.params_interfaces"], [418, "module-neural_compressor.ux.components.db_manager.utils"], [419, "module-neural_compressor.ux.components.diagnosis.diagnosis"], [420, "module-neural_compressor.ux.components.diagnosis.factory"], [421, "module-neural_compressor.ux.components.diagnosis"], [422, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis"], [423, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis"], [424, "module-neural_compressor.ux.components.diagnosis.op_details"], [425, "module-neural_compressor.ux.components.diagnosis.op_entry"], [426, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis"], [427, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis"], [428, "module-neural_compressor.ux.components.file_browser.file_browser"], [429, "module-neural_compressor.ux.components.file_browser"], [430, "module-neural_compressor.ux.components.graph.attribute"], [431, "module-neural_compressor.ux.components.graph.collapser"], [432, "module-neural_compressor.ux.components.graph.edge"], [433, "module-neural_compressor.ux.components.graph.graph"], [434, "module-neural_compressor.ux.components.graph.graph_reader"], [435, "module-neural_compressor.ux.components.graph"], [436, "module-neural_compressor.ux.components.graph.node"], [437, "module-neural_compressor.ux.components.graph.reader"], [438, "module-neural_compressor.ux.components.graph.reader.onnxrt_reader"], [439, "module-neural_compressor.ux.components.graph.reader.tensorflow_reader"], [440, "module-neural_compressor.ux.components"], [441, "module-neural_compressor.ux.components.jobs_management"], [442, "module-neural_compressor.ux.components.jobs_management.jobs_control_queue"], [443, "module-neural_compressor.ux.components.jobs_management.jobs_manager"], [444, "module-neural_compressor.ux.components.jobs_management.request"], [445, "module-neural_compressor.ux.components.manage_workspace"], [446, "module-neural_compressor.ux.components.model.domain"], [447, "module-neural_compressor.ux.components.model"], [448, "module-neural_compressor.ux.components.model.model"], [449, "module-neural_compressor.ux.components.model.model_type_getter"], [450, "module-neural_compressor.ux.components.model.onnxrt"], [451, "module-neural_compressor.ux.components.model.onnxrt.model"], [452, "module-neural_compressor.ux.components.model.pytorch"], [453, "module-neural_compressor.ux.components.model.pytorch.model"], [454, "module-neural_compressor.ux.components.model.repository"], [455, "module-neural_compressor.ux.components.model.shape"], [456, "module-neural_compressor.ux.components.model.tensorflow.frozen_pb"], [457, "module-neural_compressor.ux.components.model.tensorflow"], [458, "module-neural_compressor.ux.components.model.tensorflow.keras"], [459, "module-neural_compressor.ux.components.model.tensorflow.meta_graph"], [460, "module-neural_compressor.ux.components.model.tensorflow.model"], [461, "module-neural_compressor.ux.components.model.tensorflow.saved_model"], [462, "module-neural_compressor.ux.components.model.tensorflow.utils"], [463, "module-neural_compressor.ux.components.model_zoo.download_config"], [464, "module-neural_compressor.ux.components.model_zoo.download_model"], [465, "module-neural_compressor.ux.components.model_zoo.downloader"], [466, "module-neural_compressor.ux.components.model_zoo"], [467, "module-neural_compressor.ux.components.model_zoo.list_models"], [468, "module-neural_compressor.ux.components.names_mapper"], [469, "module-neural_compressor.ux.components.names_mapper.names_mapper"], [470, "module-neural_compressor.ux.components.optimization.execute_optimization"], [471, "module-neural_compressor.ux.components.optimization.factory"], [472, "module-neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization"], [473, "module-neural_compressor.ux.components.optimization.graph_optimizer"], [474, "module-neural_compressor.ux.components.optimization.graph_optimizer.optimize_model"], [475, "module-neural_compressor.ux.components.optimization"], [476, "module-neural_compressor.ux.components.optimization.mixed_precision"], [477, "module-neural_compressor.ux.components.optimization.mixed_precision.mixed_precision"], [478, "module-neural_compressor.ux.components.optimization.mixed_precision.optimize_model"], [479, "module-neural_compressor.ux.components.optimization.neural_coder_optimization"], [480, "module-neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model"], [481, "module-neural_compressor.ux.components.optimization.optimization"], [482, "module-neural_compressor.ux.components.optimization.pruning"], [483, "module-neural_compressor.ux.components.optimization.pruning.optimize_model"], [484, "module-neural_compressor.ux.components.optimization.pruning.pruning"], [485, "module-neural_compressor.ux.components.optimization.tune"], [486, "module-neural_compressor.ux.components.optimization.tune.tune_model"], [487, "module-neural_compressor.ux.components.optimization.tune.tuning"], [488, "module-neural_compressor.ux.components.optimization.tuning_history"], [489, "module-neural_compressor.ux.components.profiling.execute_profiling"], [490, "module-neural_compressor.ux.components.profiling.factory"], [491, "module-neural_compressor.ux.components.profiling"], [492, "module-neural_compressor.ux.components.profiling.profile_model"], [493, "module-neural_compressor.ux.components.profiling.profiler"], [494, "module-neural_compressor.ux.components.profiling.profiling"], [495, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.factory"], [496, "module-neural_compressor.ux.components.profiling.tensorflow_profiler"], [497, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.profiler"], [498, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.utils"], [499, "module-neural_compressor.ux.inc_bench"], [500, "module-neural_compressor.ux"], [501, "module-neural_compressor.ux.utils.consts"], [502, "module-neural_compressor.ux.utils.environment"], [503, "module-neural_compressor.ux.utils.exceptions"], [504, "module-neural_compressor.ux.utils.executor"], [505, "module-neural_compressor.ux.utils.expiring_dict"], [506, "module-neural_compressor.ux.utils.github_info"], [507, "module-neural_compressor.ux.utils.hw_info"], [508, "module-neural_compressor.ux.utils"], [509, "module-neural_compressor.ux.utils.json_serializer"], [510, "module-neural_compressor.ux.utils.logger"], [511, "module-neural_compressor.ux.utils.parser"], [512, "module-neural_compressor.ux.utils.proc"], [513, "module-neural_compressor.ux.utils.processes"], [514, "module-neural_compressor.ux.utils.singleton"], [515, "module-neural_compressor.ux.utils.status_updates"], [516, "module-neural_compressor.ux.utils.templates"], [517, "module-neural_compressor.ux.utils.templates.metric"], [518, "module-neural_compressor.ux.utils.templates.workdir"], [519, "module-neural_compressor.ux.utils.utils"], [520, "module-neural_compressor.ux.utils.workload.config"], [521, "module-neural_compressor.ux.utils.workload.dataloader"], [522, "module-neural_compressor.ux.utils.workload.evaluation"], [523, "module-neural_compressor.ux.utils.workload.graph_optimization"], [524, "module-neural_compressor.ux.utils.workload"], [525, "module-neural_compressor.ux.utils.workload.mixed_precision"], [526, "module-neural_compressor.ux.utils.workload.model"], [527, "module-neural_compressor.ux.utils.workload.pruning"], [528, "module-neural_compressor.ux.utils.workload.quantization"], [529, "module-neural_compressor.ux.utils.workload.tuning"], [530, "module-neural_compressor.ux.utils.yaml_utils"], [531, "module-neural_compressor.ux.web.communication"], [532, "module-neural_compressor.ux.web.configuration"], [533, "module-neural_compressor.ux.web.exceptions"], [534, "module-neural_compressor.ux.web"], [535, "module-neural_compressor.ux.web.router"], [536, "module-neural_compressor.ux.web.server"], [537, "module-neural_compressor.ux.web.service.benchmark"], [538, "module-neural_compressor.ux.web.service.history_snapshot_parser"], [539, "module-neural_compressor.ux.web.service"], [540, "module-neural_compressor.ux.web.service.model"], [541, "module-neural_compressor.ux.web.service.optimization"], [542, "module-neural_compressor.ux.web.service.profiling"], [543, "module-neural_compressor.ux.web.service.request_data_processor"], [544, "module-neural_compressor.ux.web.service.response_generator"], [545, "module-neural_compressor.ux.web.service.workload"], [546, "module-neural_compressor.version"]], "6ece06672ed3_v1_14": [[1, "module-6ece06672ed3_v1_14"]], "update_dataloaders() (in module 6ece06672ed3_v1_14)": [[1, "ece06672ed3_v1_14.update_dataloaders"]], "update_transformations() (in module 6ece06672ed3_v1_14)": [[1, "ece06672ed3_v1_14.update_transformations"]], "6f0d0f71d92e_v1_13": [[2, "module-6f0d0f71d92e_v1_13"]], "9e89549a08c8_v1_11": [[3, "module-9e89549a08c8_v1_11"]], "block_mask": [[4, "module-block_mask"]], "env": [[5, "module-env"]], "run_migrations_offline() (in module env)": [[5, "env.run_migrations_offline"]], "run_migrations_online() (in module env)": [[5, "env.run_migrations_online"]], "adaptor (class in neural_compressor.adaptor.adaptor)": [[6, "neural_compressor.adaptor.adaptor.Adaptor"]], "adaptor_registry() (in module neural_compressor.adaptor.adaptor)": [[6, "neural_compressor.adaptor.adaptor.adaptor_registry"]], "neural_compressor.adaptor.adaptor": [[6, "module-neural_compressor.adaptor.adaptor"]], "neural_compressor.adaptor": [[7, "module-neural_compressor.adaptor"]], "kerasadaptor (class in neural_compressor.adaptor.keras)": [[8, "neural_compressor.adaptor.keras.KerasAdaptor"]], "kerasquery (class in neural_compressor.adaptor.keras)": [[8, "neural_compressor.adaptor.keras.KerasQuery"]], "neural_compressor.adaptor.keras": [[8, "module-neural_compressor.adaptor.keras"]], "neural_compressor.adaptor.keras_utils.conv2d": [[9, "module-neural_compressor.adaptor.keras_utils.conv2d"]], "neural_compressor.adaptor.keras_utils.dense": [[10, "module-neural_compressor.adaptor.keras_utils.dense"]], "neural_compressor.adaptor.keras_utils.depthwise_conv2d": [[11, "module-neural_compressor.adaptor.keras_utils.depthwise_conv2d"]], "neural_compressor.adaptor.keras_utils": [[12, "module-neural_compressor.adaptor.keras_utils"]], "neural_compressor.adaptor.keras_utils.quantizer": [[13, "module-neural_compressor.adaptor.keras_utils.quantizer"]], "neural_compressor.adaptor.keras_utils.separable_conv2d": [[14, "module-neural_compressor.adaptor.keras_utils.separable_conv2d"]], "mxnetadaptor (class in neural_compressor.adaptor.mxnet)": [[15, "neural_compressor.adaptor.mxnet.MxNetAdaptor"]], "neural_compressor.adaptor.mxnet": [[15, "module-neural_compressor.adaptor.mxnet"]], "neural_compressor.adaptor.mxnet_utils": [[16, "module-neural_compressor.adaptor.mxnet_utils"]], "calibcollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.CalibCollector"]], "calibdata (class in neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.CalibData"]], "collectorbase (class in neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.CollectorBase"]], "dataiterloader (class in neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.DataIterLoader"]], "dataloaderwrap (class in neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.DataLoaderWrap"]], "namecollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.NameCollector"]], "optype (class in neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.OpType"]], "tensorcollector (class in neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.TensorCollector"]], "amp_convert() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.amp_convert"]], "calib_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.calib_model"]], "check_mx_version() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.check_mx_version"]], "combine_capabilities() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.combine_capabilities"]], "create_data_example() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.create_data_example"]], "distribute_calib_tensors() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.distribute_calib_tensors"]], "ensure_list() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.ensure_list"]], "fuse() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.fuse"]], "get_framework_name() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.get_framework_name"]], "is_model_quantized() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.is_model_quantized"]], "isiterable() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.isiterable"]], "make_module() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.make_module"]], "make_nc_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.make_nc_model"]], "make_symbol_block() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.make_symbol_block"]], "ndarray_to_device() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.ndarray_to_device"]], "neural_compressor.adaptor.mxnet_utils.util": [[17, "module-neural_compressor.adaptor.mxnet_utils.util"]], "parse_tune_config() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.parse_tune_config"]], "prepare_dataloader() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.prepare_dataloader"]], "prepare_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.prepare_model"]], "prepare_model_data() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.prepare_model_data"]], "quantize_sym_model() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.quantize_sym_model"]], "query_quantizable_nodes() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.query_quantizable_nodes"]], "run_forward() (in module neural_compressor.adaptor.mxnet_utils.util)": [[17, "neural_compressor.adaptor.mxnet_utils.util.run_forward"]], "onnxrtquery (class in neural_compressor.adaptor.onnxrt)": [[18, "neural_compressor.adaptor.onnxrt.ONNXRTQuery"]], "onnxrt_integeropsadaptor (class in neural_compressor.adaptor.onnxrt)": [[18, "neural_compressor.adaptor.onnxrt.ONNXRT_IntegerOpsAdaptor"]], "onnxrt_qdqadaptor (class in neural_compressor.adaptor.onnxrt)": [[18, "neural_compressor.adaptor.onnxrt.ONNXRT_QDQAdaptor"]], "onnxrt_qlinearopsadaptor (class in neural_compressor.adaptor.onnxrt)": [[18, "neural_compressor.adaptor.onnxrt.ONNXRT_QLinearOpsAdaptor"]], "onnxruntimeadaptor (class in neural_compressor.adaptor.onnxrt)": [[18, "neural_compressor.adaptor.onnxrt.ONNXRUNTIMEAdaptor"]], "neural_compressor.adaptor.onnxrt": [[18, "module-neural_compressor.adaptor.onnxrt"]], "onnxrtaugment (class in neural_compressor.adaptor.ox_utils.calibration)": [[19, "neural_compressor.adaptor.ox_utils.calibration.ONNXRTAugment"]], "neural_compressor.adaptor.ox_utils.calibration": [[19, "module-neural_compressor.adaptor.ox_utils.calibration"]], "calibratorbase (class in neural_compressor.adaptor.ox_utils.calibrator)": [[20, "neural_compressor.adaptor.ox_utils.calibrator.CalibratorBase"]], "histogramcollector (class in neural_compressor.adaptor.ox_utils.calibrator)": [[20, "neural_compressor.adaptor.ox_utils.calibrator.HistogramCollector"]], "klcalibrator (class in neural_compressor.adaptor.ox_utils.calibrator)": [[20, "neural_compressor.adaptor.ox_utils.calibrator.KLCalibrator"]], "minmaxcalibrator (class in neural_compressor.adaptor.ox_utils.calibrator)": [[20, "neural_compressor.adaptor.ox_utils.calibrator.MinMaxCalibrator"]], "percentilecalibrator (class in neural_compressor.adaptor.ox_utils.calibrator)": [[20, "neural_compressor.adaptor.ox_utils.calibrator.PercentileCalibrator"]], "calib_registry() (in module neural_compressor.adaptor.ox_utils.calibrator)": [[20, "neural_compressor.adaptor.ox_utils.calibrator.calib_registry"]], "neural_compressor.adaptor.ox_utils.calibrator": [[20, "module-neural_compressor.adaptor.ox_utils.calibrator"]], "smooth_distribution() (in module neural_compressor.adaptor.ox_utils.calibrator)": [[20, "neural_compressor.adaptor.ox_utils.calibrator.smooth_distribution"]], "neural_compressor.adaptor.ox_utils": [[21, "module-neural_compressor.adaptor.ox_utils"]], "activationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[22, "neural_compressor.adaptor.ox_utils.operators.activation.ActivationOperator"]], "qactivationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[22, "neural_compressor.adaptor.ox_utils.operators.activation.QActivationOperator"]], "removableactivationoperator (class in neural_compressor.adaptor.ox_utils.operators.activation)": [[22, "neural_compressor.adaptor.ox_utils.operators.activation.RemovableActivationOperator"]], "neural_compressor.adaptor.ox_utils.operators.activation": [[22, "module-neural_compressor.adaptor.ox_utils.operators.activation"]], "argmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.argmax)": [[23, "neural_compressor.adaptor.ox_utils.operators.argmax.ArgMaxOperator"]], "qargmaxoperator (class in neural_compressor.adaptor.ox_utils.operators.argmax)": [[23, "neural_compressor.adaptor.ox_utils.operators.argmax.QArgMaxOperator"]], "neural_compressor.adaptor.ox_utils.operators.argmax": [[23, "module-neural_compressor.adaptor.ox_utils.operators.argmax"]], "attentionoperator (class in neural_compressor.adaptor.ox_utils.operators.attention)": [[24, "neural_compressor.adaptor.ox_utils.operators.attention.AttentionOperator"]], "qattentionoperator (class in neural_compressor.adaptor.ox_utils.operators.attention)": [[24, "neural_compressor.adaptor.ox_utils.operators.attention.QAttentionOperator"]], "neural_compressor.adaptor.ox_utils.operators.attention": [[24, "module-neural_compressor.adaptor.ox_utils.operators.attention"]], "binaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[25, "neural_compressor.adaptor.ox_utils.operators.binary_op.BinaryOperator"]], "qbinaryoperator (class in neural_compressor.adaptor.ox_utils.operators.binary_op)": [[25, "neural_compressor.adaptor.ox_utils.operators.binary_op.QBinaryOperator"]], "neural_compressor.adaptor.ox_utils.operators.binary_op": [[25, "module-neural_compressor.adaptor.ox_utils.operators.binary_op"]], "concatoperator (class in neural_compressor.adaptor.ox_utils.operators.concat)": [[26, "neural_compressor.adaptor.ox_utils.operators.concat.ConcatOperator"]], "qconcatoperator (class in neural_compressor.adaptor.ox_utils.operators.concat)": [[26, "neural_compressor.adaptor.ox_utils.operators.concat.QConcatOperator"]], "neural_compressor.adaptor.ox_utils.operators.concat": [[26, "module-neural_compressor.adaptor.ox_utils.operators.concat"]], "convoperator (class in neural_compressor.adaptor.ox_utils.operators.conv)": [[27, "neural_compressor.adaptor.ox_utils.operators.conv.ConvOperator"]], "qconvoperator (class in neural_compressor.adaptor.ox_utils.operators.conv)": [[27, "neural_compressor.adaptor.ox_utils.operators.conv.QConvOperator"]], "neural_compressor.adaptor.ox_utils.operators.conv": [[27, "module-neural_compressor.adaptor.ox_utils.operators.conv"]], "direct8bitoperator (class in neural_compressor.adaptor.ox_utils.operators.direct_q8)": [[28, "neural_compressor.adaptor.ox_utils.operators.direct_q8.Direct8BitOperator"]], "qdirectoperator (class in neural_compressor.adaptor.ox_utils.operators.direct_q8)": [[28, "neural_compressor.adaptor.ox_utils.operators.direct_q8.QDirectOperator"]], "neural_compressor.adaptor.ox_utils.operators.direct_q8": [[28, "module-neural_compressor.adaptor.ox_utils.operators.direct_q8"]], "embedlayernormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.embed_layernorm)": [[29, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.EmbedLayerNormalizationOperator"]], "qembedlayernormalizationoperator (class in neural_compressor.adaptor.ox_utils.operators.embed_layernorm)": [[29, "neural_compressor.adaptor.ox_utils.operators.embed_layernorm.QEmbedLayerNormalizationOperator"]], "neural_compressor.adaptor.ox_utils.operators.embed_layernorm": [[29, "module-neural_compressor.adaptor.ox_utils.operators.embed_layernorm"]], "gatheroperator (class in neural_compressor.adaptor.ox_utils.operators.gather)": [[30, "neural_compressor.adaptor.ox_utils.operators.gather.GatherOperator"]], "qgatheroperator (class in neural_compressor.adaptor.ox_utils.operators.gather)": [[30, "neural_compressor.adaptor.ox_utils.operators.gather.QGatherOperator"]], "neural_compressor.adaptor.ox_utils.operators.gather": [[30, "module-neural_compressor.adaptor.ox_utils.operators.gather"]], "globalaveragepooloperator (class in neural_compressor.adaptor.ox_utils.operators.gavgpool)": [[31, "neural_compressor.adaptor.ox_utils.operators.gavgpool.GlobalAveragePoolOperator"]], "qglobalaveragepooloperator (class in neural_compressor.adaptor.ox_utils.operators.gavgpool)": [[31, "neural_compressor.adaptor.ox_utils.operators.gavgpool.QGlobalAveragePoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.gavgpool": [[31, "module-neural_compressor.adaptor.ox_utils.operators.gavgpool"]], "gemmoperator (class in neural_compressor.adaptor.ox_utils.operators.gemm)": [[32, "neural_compressor.adaptor.ox_utils.operators.gemm.GemmOperator"]], "qgemmoperator (class in neural_compressor.adaptor.ox_utils.operators.gemm)": [[32, "neural_compressor.adaptor.ox_utils.operators.gemm.QGemmOperator"]], "neural_compressor.adaptor.ox_utils.operators.gemm": [[32, "module-neural_compressor.adaptor.ox_utils.operators.gemm"]], "neural_compressor.adaptor.ox_utils.operators": [[33, "module-neural_compressor.adaptor.ox_utils.operators"]], "lstmoperator (class in neural_compressor.adaptor.ox_utils.operators.lstm)": [[34, "neural_compressor.adaptor.ox_utils.operators.lstm.LSTMOperator"]], "neural_compressor.adaptor.ox_utils.operators.lstm": [[34, "module-neural_compressor.adaptor.ox_utils.operators.lstm"]], "matmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[35, "neural_compressor.adaptor.ox_utils.operators.matmul.MatMulOperator"]], "qmatmuloperator (class in neural_compressor.adaptor.ox_utils.operators.matmul)": [[35, "neural_compressor.adaptor.ox_utils.operators.matmul.QMatMulOperator"]], "neural_compressor.adaptor.ox_utils.operators.matmul": [[35, "module-neural_compressor.adaptor.ox_utils.operators.matmul"]], "maxpooloperator (class in neural_compressor.adaptor.ox_utils.operators.maxpool)": [[36, "neural_compressor.adaptor.ox_utils.operators.maxpool.MaxPoolOperator"]], "qmaxpooloperator (class in neural_compressor.adaptor.ox_utils.operators.maxpool)": [[36, "neural_compressor.adaptor.ox_utils.operators.maxpool.QMaxPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.maxpool": [[36, "module-neural_compressor.adaptor.ox_utils.operators.maxpool"]], "operator (class in neural_compressor.adaptor.ox_utils.operators.ops)": [[37, "neural_compressor.adaptor.ox_utils.operators.ops.Operator"]], "qoperator (class in neural_compressor.adaptor.ox_utils.operators.ops)": [[37, "neural_compressor.adaptor.ox_utils.operators.ops.QOperator"]], "neural_compressor.adaptor.ox_utils.operators.ops": [[37, "module-neural_compressor.adaptor.ox_utils.operators.ops"]], "op_registry() (in module neural_compressor.adaptor.ox_utils.operators.ops)": [[37, "neural_compressor.adaptor.ox_utils.operators.ops.op_registry"]], "qop_registry() (in module neural_compressor.adaptor.ox_utils.operators.ops)": [[37, "neural_compressor.adaptor.ox_utils.operators.ops.qop_registry"]], "padoperator (class in neural_compressor.adaptor.ox_utils.operators.pad)": [[38, "neural_compressor.adaptor.ox_utils.operators.pad.PadOperator"]], "qpadoperator (class in neural_compressor.adaptor.ox_utils.operators.pad)": [[38, "neural_compressor.adaptor.ox_utils.operators.pad.QPadOperator"]], "neural_compressor.adaptor.ox_utils.operators.pad": [[38, "module-neural_compressor.adaptor.ox_utils.operators.pad"]], "pooloperator (class in neural_compressor.adaptor.ox_utils.operators.pooling)": [[39, "neural_compressor.adaptor.ox_utils.operators.pooling.PoolOperator"]], "qpooloperator (class in neural_compressor.adaptor.ox_utils.operators.pooling)": [[39, "neural_compressor.adaptor.ox_utils.operators.pooling.QPoolOperator"]], "neural_compressor.adaptor.ox_utils.operators.pooling": [[39, "module-neural_compressor.adaptor.ox_utils.operators.pooling"]], "qresizeoperator (class in neural_compressor.adaptor.ox_utils.operators.resize)": [[40, "neural_compressor.adaptor.ox_utils.operators.resize.QResizeOperator"]], "resizeoperator (class in neural_compressor.adaptor.ox_utils.operators.resize)": [[40, "neural_compressor.adaptor.ox_utils.operators.resize.ResizeOperator"]], "neural_compressor.adaptor.ox_utils.operators.resize": [[40, "module-neural_compressor.adaptor.ox_utils.operators.resize"]], "qsplitoperator (class in neural_compressor.adaptor.ox_utils.operators.split)": [[41, "neural_compressor.adaptor.ox_utils.operators.split.QSplitOperator"]], "splitoperator (class in neural_compressor.adaptor.ox_utils.operators.split)": [[41, "neural_compressor.adaptor.ox_utils.operators.split.SplitOperator"]], "neural_compressor.adaptor.ox_utils.operators.split": [[41, "module-neural_compressor.adaptor.ox_utils.operators.split"]], "quantizer (class in neural_compressor.adaptor.ox_utils.quantizer)": [[42, "neural_compressor.adaptor.ox_utils.quantizer.Quantizer"]], "neural_compressor.adaptor.ox_utils.quantizer": [[42, "module-neural_compressor.adaptor.ox_utils.quantizer"]], "quantformat (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantFormat"]], "quanttype (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantType"]], "quantizationmode (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantizationMode"]], "quantizedinitializer (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantizedInitializer"]], "quantizedvalue (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantizedValue"]], "quantizedvaluetype (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.QuantizedValueType"]], "valueinfo (class in neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.ValueInfo"]], "adjust_weights_per_input() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.adjust_weights_per_input"]], "adjust_weights_per_op() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.adjust_weights_per_op"]], "attribute_to_kwarg() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.attribute_to_kwarg"]], "calculate_scale_zp() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.calculate_scale_zp"]], "cast_tensor() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.cast_tensor"]], "collate_preds() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.collate_preds"]], "dequantize_data() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.dequantize_data"]], "dequantize_data_with_scale_zero() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.dequantize_data_with_scale_zero"]], "dtype_to_name() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.dtype_to_name"]], "find_by_name() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.find_by_name"]], "float_to_bfloat16() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.float_to_bfloat16"]], "float_to_float16() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.float_to_float16"]], "fold_scale() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.fold_scale"]], "get_smooth_scales_per_input() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.get_smooth_scales_per_input"]], "get_smooth_scales_per_op() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.get_smooth_scales_per_op"]], "insert_smooth_mul_op_per_input() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.insert_smooth_mul_op_per_input"]], "insert_smooth_mul_op_per_op() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.insert_smooth_mul_op_per_op"]], "is_b_transposed() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.is_B_transposed"]], "make_dquant_node() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.make_dquant_node"]], "make_quant_node() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.make_quant_node"]], "neural_compressor.adaptor.ox_utils.util": [[43, "module-neural_compressor.adaptor.ox_utils.util"]], "quantize_data() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.quantize_data"]], "quantize_data_per_channel() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.quantize_data_per_channel"]], "quantize_data_with_scale_zero() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.quantize_data_with_scale_zero"]], "quantize_nparray() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.quantize_nparray"]], "remove_init_from_model_input() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.remove_init_from_model_input"]], "split_shared_bias() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.split_shared_bias"]], "trt_env_setup() (in module neural_compressor.adaptor.ox_utils.util)": [[43, "neural_compressor.adaptor.ox_utils.util.trt_env_setup"]], "pytorchadaptor (class in neural_compressor.adaptor.pytorch)": [[44, "neural_compressor.adaptor.pytorch.PyTorchAdaptor"]], "pytorchquery (class in neural_compressor.adaptor.pytorch)": [[44, "neural_compressor.adaptor.pytorch.PyTorchQuery"]], "pytorch_fxadaptor (class in neural_compressor.adaptor.pytorch)": [[44, "neural_compressor.adaptor.pytorch.PyTorch_FXAdaptor"]], "pytorch_ipexadaptor (class in neural_compressor.adaptor.pytorch)": [[44, "neural_compressor.adaptor.pytorch.PyTorch_IPEXAdaptor"]], "templateadaptor (class in neural_compressor.adaptor.pytorch)": [[44, "neural_compressor.adaptor.pytorch.TemplateAdaptor"]], "get_ops_recursively() (in module neural_compressor.adaptor.pytorch)": [[44, "neural_compressor.adaptor.pytorch.get_ops_recursively"]], "neural_compressor.adaptor.pytorch": [[44, "module-neural_compressor.adaptor.pytorch"]], "querybackendcapability (class in neural_compressor.adaptor.query)": [[45, "neural_compressor.adaptor.query.QueryBackendCapability"]], "neural_compressor.adaptor.query": [[45, "module-neural_compressor.adaptor.query"]], "tensorflowadaptor (class in neural_compressor.adaptor.tensorflow)": [[46, "neural_compressor.adaptor.tensorflow.TensorFlowAdaptor"]], "tensorflowquery (class in neural_compressor.adaptor.tensorflow)": [[46, "neural_compressor.adaptor.tensorflow.TensorflowQuery"]], "tensorflow_itexadaptor (class in neural_compressor.adaptor.tensorflow)": [[46, "neural_compressor.adaptor.tensorflow.Tensorflow_ITEXAdaptor"]], "neural_compressor.adaptor.tensorflow": [[46, "module-neural_compressor.adaptor.tensorflow"]], "graphconverter (class in neural_compressor.adaptor.tf_utils.graph_converter)": [[47, "neural_compressor.adaptor.tf_utils.graph_converter.GraphConverter"]], "neural_compressor.adaptor.tf_utils.graph_converter": [[47, "module-neural_compressor.adaptor.tf_utils.graph_converter"]], "graphconverterwithoutcalib (class in neural_compressor.adaptor.tf_utils.graph_converter_without_calib)": [[48, "neural_compressor.adaptor.tf_utils.graph_converter_without_calib.GraphConverterWithoutCalib"]], "neural_compressor.adaptor.tf_utils.graph_converter_without_calib": [[48, "module-neural_compressor.adaptor.tf_utils.graph_converter_without_calib"]], "bf16convert (class in neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert)": [[49, "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert.BF16Convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert": [[49, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16.bf16_convert"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.bf16": [[50, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.bf16"]], "convertaddtobiasaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd)": [[51, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd.ConvertAddToBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd": [[51, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_add_to_biasadd"]], "convertlayoutoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout)": [[52, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout.ConvertLayoutOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout": [[52, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_layout"]], "convertleakyreluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu)": [[53, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu.ConvertLeakyReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu": [[53, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_leakyrelu"]], "convertnantorandom (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random)": [[54, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random.ConvertNanToRandom"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random": [[54, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_nan_to_random"]], "convertplaceholdertoconst (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const)": [[55, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const.ConvertPlaceholderToConst"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const": [[55, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.convert_placeholder_to_const"]], "dequantizecastoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer)": [[56, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer.DequantizeCastOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer": [[56, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dequantize_cast_optimizer"]], "dilatedcontraction (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction)": [[57, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction.DilatedContraction"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction": [[57, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dilated_contraction"]], "injectdummybiasaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd)": [[58, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd.InjectDummyBiasAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd": [[58, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.dummy_biasadd"]], "expanddimsoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer)": [[59, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer.ExpandDimsOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer": [[59, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.expanddims_optimizer"]], "fetchweightfromreshapeoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape)": [[60, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape.FetchWeightFromReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape": [[60, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fetch_weight_from_reshape"]], "foldbatchnormnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm)": [[61, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm.FoldBatchNormNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm": [[61, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_batch_norm"]], "graphfoldconstantoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant)": [[62, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant.GraphFoldConstantOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant": [[62, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fold_constant"]], "fusebiasaddandaddoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add)": [[63, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add.FuseBiasAddAndAddOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add": [[63, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_biasadd_add"]], "fusecolumnwisemuloptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul)": [[64, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul.FuseColumnWiseMulOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul": [[64, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_column_wise_mul"]], "fuseconvwithmathoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math)": [[65, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math.FuseConvWithMathOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math": [[65, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_conv_with_math"]], "fusedecomposedbnoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.FuseDecomposedBNOptimizer"]], "bypass_reshape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.bypass_reshape"]], "get_const_dim_count() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.get_const_dim_count"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn": [[66, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.node_name_from_input"]], "valid_reshape_inputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.valid_reshape_inputs"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn)": [[66, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_bn.values_from_const"]], "fusedecomposedinoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.FuseDecomposedINOptimizer"]], "bypass_reshape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.bypass_reshape"]], "get_const_dim_count() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.get_const_dim_count"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in": [[67, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.node_name_from_input"]], "valid_reshape_inputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.valid_reshape_inputs"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in)": [[67, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_decomposed_in.values_from_const"]], "fusegeluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu)": [[68, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu.FuseGeluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu": [[68, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_gelu"]], "fuselayernormoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[69, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.FuseLayerNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm": [[69, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm"]], "node_from_map() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[69, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.node_from_map"]], "node_name_from_input() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[69, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.node_name_from_input"]], "values_from_const() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm)": [[69, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_layer_norm.values_from_const"]], "fusepadwithconv2doptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv)": [[70, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv.FusePadWithConv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv": [[70, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_conv"]], "fusepadwithfp32conv2doptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv)": [[71, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv.FusePadWithFP32Conv2DOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv": [[71, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_pad_with_fp32_conv"]], "fusetransposereshapeoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose)": [[72, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose.FuseTransposeReshapeOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose": [[72, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.fuse_reshape_transpose"]], "graphcseoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer)": [[73, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer.GraphCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer": [[73, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.graph_cse_optimizer"]], "grappleroptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass)": [[74, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass.GrapplerOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass": [[74, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.grappler_pass"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic": [[75, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic"]], "insertprintminmaxnode (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node)": [[76, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node.InsertPrintMinMaxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node": [[76, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.insert_print_node"]], "movesqueezeafterreluoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu)": [[77, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu.MoveSqueezeAfterReluOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu": [[77, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.move_squeeze_after_relu"]], "preoptimization (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize)": [[78, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize.PreOptimization"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize": [[78, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.pre_optimize"]], "removetrainingnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes)": [[79, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes.RemoveTrainingNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes": [[79, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.remove_training_nodes"]], "renamebatchnormoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm)": [[80, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm.RenameBatchNormOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm": [[80, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.rename_batch_norm"]], "splitsharedinputoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input)": [[81, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input.SplitSharedInputOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input": [[81, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.split_shared_input"]], "stripequivalentnodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes)": [[82, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes.StripEquivalentNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes": [[82, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_equivalent_nodes"]], "stripunusednodesoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes)": [[83, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes.StripUnusedNodesOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes": [[83, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.strip_unused_nodes"]], "switchoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer)": [[84, "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer.SwitchOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer": [[84, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.generic.switch_optimizer"]], "graphrewriterbase (class in neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base)": [[85, "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base.GraphRewriterBase"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base": [[85, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.graph_base"]], "neural_compressor.adaptor.tf_utils.graph_rewriter": [[86, "module-neural_compressor.adaptor.tf_utils.graph_rewriter"]], "freezefakequantopoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant)": [[87, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant.FreezeFakeQuantOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant": [[87, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_fake_quant"]], "freezevaluetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value)": [[88, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value.FreezeValueTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value": [[88, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value"]], "freezevaluewithoutcalibtransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib)": [[89, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib.FreezeValueWithoutCalibTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib": [[89, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.freeze_value_without_calib"]], "fuseconvredundantdequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize)": [[90, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize.FuseConvRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize": [[90, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_redundant_dequantize"]], "fuseconvrequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize)": [[91, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize.FuseConvRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize": [[91, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_conv_requantize"]], "fusematmulredundantdequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize)": [[92, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize.FuseMatMulRedundantDequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize": [[92, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_redundant_dequantize"]], "fusematmulrequantizedequantizenewapitransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[93, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeNewAPITransformer"]], "fusematmulrequantizedequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[93, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeDequantizeTransformer"]], "fusematmulrequantizenewapitransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[93, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeNewAPITransformer"]], "fusematmulrequantizetransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize)": [[93, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize.FuseMatMulRequantizeTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize": [[93, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.fuse_matmul_requantize"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8": [[94, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8"]], "metainfochangingmemopoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer)": [[95, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer.MetaInfoChangingMemOpOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer": [[95, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.meta_op_optimizer"]], "posthostconstconverter (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter)": [[96, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter.PostHostConstConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter": [[96, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_hostconst_converter"]], "postcseoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse)": [[97, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse.PostCseOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse": [[97, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.post_quantized_op_cse"]], "quantizedrnnconverter (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert)": [[98, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert.QuantizedRNNConverter"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert": [[98, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.rnn_convert"]], "scalepropagationtransformer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation)": [[99, "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation.ScaleProPagationTransformer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation": [[99, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.int8.scale_propagation"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx": [[100, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx"]], "onnxgraph (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph)": [[101, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph.OnnxGraph"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph": [[101, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_graph"]], "onnxnode (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node)": [[102, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node.OnnxNode"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node": [[102, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_node"]], "onnxopschema (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.OnnxOpSchema"]], "get_max_supported_opset_version() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.get_max_supported_opset_version"]], "get_schema() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema)": [[103, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema.get_schema"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema": [[103, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.onnx_schema"]], "seqtype (class in neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.SeqType"]], "add_port_to_name() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.add_port_to_name"]], "are_shapes_equal() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.are_shapes_equal"]], "assert_error() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.assert_error"]], "compute_const_folding_using_tf() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.compute_const_folding_using_tf"]], "convert_tensorflow_tensor_to_onnx() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.convert_tensorflow_tensor_to_onnx"]], "find_opset() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.find_opset"]], "get_index_from_strided_slice_of_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_index_from_strided_slice_of_shape"]], "get_subgraphs_from_onnx() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_subgraphs_from_onnx"]], "get_tensorflow_node_attr() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_node_attr"]], "get_tensorflow_node_shape_attr() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_node_shape_attr"]], "get_tensorflow_tensor_data() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_tensor_data"]], "get_tensorflow_tensor_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.get_tensorflow_tensor_shape"]], "infer_onnx_shape_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.infer_onnx_shape_dtype"]], "initialize_name_counter() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.initialize_name_counter"]], "is_list_or_tuple() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.is_list_or_tuple"]], "is_onnx_domain() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.is_onnx_domain"]], "make_onnx_inputs_outputs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.make_onnx_inputs_outputs"]], "make_onnx_shape() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.make_onnx_shape"]], "map_numpy_to_onnx_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_numpy_to_onnx_dtype"]], "map_onnx_to_numpy_type() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_onnx_to_numpy_type"]], "map_tensorflow_dtype() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.map_tensorflow_dtype"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils": [[104, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils"]], "read_tensorflow_node_attrs() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.read_tensorflow_node_attrs"]], "save_protobuf() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.save_protobuf"]], "set_name() (in module neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils)": [[104, "neural_compressor.adaptor.tf_utils.graph_rewriter.onnx.tf2onnx_utils.set_name"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq": [[105, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq"]], "generategraphwithqdqpattern (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern)": [[106, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern.GenerateGraphWithQDQPattern"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern": [[106, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.insert_qdq_pattern"]], "mergeduplicatedqdqoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq)": [[107, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq.MergeDuplicatedQDQOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq": [[107, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.merge_duplicated_qdq"]], "shareqdqforitexypatternoptimizer (class in neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern)": [[108, "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern.ShareQDQForItexYPatternOptimizer"]], "neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern": [[108, "module-neural_compressor.adaptor.tf_utils.graph_rewriter.qdq.share_qdq_y_pattern"]], "graphanalyzer (class in neural_compressor.adaptor.tf_utils.graph_util)": [[109, "neural_compressor.adaptor.tf_utils.graph_util.GraphAnalyzer"]], "graphrewriterhelper (class in neural_compressor.adaptor.tf_utils.graph_util)": [[109, "neural_compressor.adaptor.tf_utils.graph_util.GraphRewriterHelper"]], "neural_compressor.adaptor.tf_utils.graph_util": [[109, "module-neural_compressor.adaptor.tf_utils.graph_util"]], "neural_compressor.adaptor.tf_utils": [[110, "module-neural_compressor.adaptor.tf_utils"]], "neural_compressor.adaptor.tf_utils.quantize_graph": [[111, "module-neural_compressor.adaptor.tf_utils.quantize_graph"]], "fakequantize (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize)": [[112, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantize"]], "fakequantizebase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize)": [[112, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize.FakeQuantizeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize": [[112, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.fake_quantize"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat": [[113, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat"]], "quantizeconfig (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config)": [[114, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config.QuantizeConfig"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config": [[114, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_config"]], "init_quantize_config() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper)": [[115, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper.init_quantize_config"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper": [[115, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper"]], "qat_clone_function() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper)": [[115, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_helper.qat_clone_function"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers": [[116, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers"]], "config_quantizable_layers() (in module neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer)": [[117, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer.config_quantizable_layers"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer": [[117, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.optimize_layer"]], "quantizelayeradd (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add)": [[118, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add.QuantizeLayerAdd"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add": [[118, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_add"]], "quantizelayerbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base)": [[119, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base.QuantizeLayerBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base": [[119, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_base"]], "quantizelayerbatchnormalization (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn)": [[120, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn.QuantizeLayerBatchNormalization"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn": [[120, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_layers.quantize_layer_bn"]], "quantizewrapper (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper)": [[121, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapper"]], "quantizewrapperbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper)": [[121, "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper.QuantizeWrapperBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper": [[121, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qat.quantize_wrapper"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn)": [[122, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn.FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn": [[122, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2)": [[123, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2.FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2": [[123, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv)": [[124, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv.FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv": [[124, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_conv"]], "fusenodestartwithdeconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv)": [[125, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv.FuseNodeStartWithDeconv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv": [[125, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_deconv"]], "fusenodestartwithfusedinstancenorm (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in)": [[126, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in.FuseNodeStartWithFusedInstanceNorm"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in": [[126, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_in"]], "fusenodestartwithmatmul (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul)": [[127, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul.FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul": [[127, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_matmul"]], "fusenodestartwithpooling (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling)": [[128, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling.FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling": [[128, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.fuse_qdq_pooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq": [[129, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq"]], "optimizeqdqgraph (class in neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq)": [[130, "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq.OptimizeQDQGraph"]], "neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq": [[130, "module-neural_compressor.adaptor.tf_utils.quantize_graph.qdq.optimize_qdq"]], "quantizegraphbase (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base)": [[131, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeGraphBase"]], "quantizenodebase (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base)": [[131, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base.QuantizeNodeBase"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base": [[131, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_base"]], "fusenodestartwithfusedbatchnormv3 (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn)": [[132, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn.FuseNodeStartWithFusedBatchNormV3"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn": [[132, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_bn"]], "fusenodestartwithconcatv2 (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2)": [[133, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2.FuseNodeStartWithConcatV2"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2": [[133, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_concatv2"]], "fusenodestartwithconv2d (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv)": [[134, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv.FuseNodeStartWithConv2d"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv": [[134, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_conv"]], "quantizegraphforintel (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu)": [[135, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu.QuantizeGraphForIntel"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu": [[135, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_for_intel_cpu"]], "fusenodestartwithmatmul (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul)": [[136, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul.FuseNodeStartWithMatmul"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul": [[136, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_matmul"]], "fusenodestartwithpooling (class in neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling)": [[137, "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling.FuseNodeStartWithPooling"]], "neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling": [[137, "module-neural_compressor.adaptor.tf_utils.quantize_graph.quantize_graph_pooling"]], "quantizegraphhelper (class in neural_compressor.adaptor.tf_utils.quantize_graph_common)": [[138, "neural_compressor.adaptor.tf_utils.quantize_graph_common.QuantizeGraphHelper"]], "neural_compressor.adaptor.tf_utils.quantize_graph_common": [[138, "module-neural_compressor.adaptor.tf_utils.quantize_graph_common"]], "tensorflowqdqtoonnxqdqconverter (class in neural_compressor.adaptor.tf_utils.tf2onnx_converter)": [[139, "neural_compressor.adaptor.tf_utils.tf2onnx_converter.TensorflowQDQToOnnxQDQConverter"]], "neural_compressor.adaptor.tf_utils.tf2onnx_converter": [[139, "module-neural_compressor.adaptor.tf_utils.tf2onnx_converter"]], "biascorrection (class in neural_compressor.adaptor.tf_utils.transform_graph.bias_correction)": [[140, "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction.BiasCorrection"]], "neural_compressor.adaptor.tf_utils.transform_graph.bias_correction": [[140, "module-neural_compressor.adaptor.tf_utils.transform_graph.bias_correction"]], "graphtransformbase (class in neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base)": [[141, "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base.GraphTransformBase"]], "neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base": [[141, "module-neural_compressor.adaptor.tf_utils.transform_graph.graph_transform_base"]], "neural_compressor.adaptor.tf_utils.transform_graph": [[142, "module-neural_compressor.adaptor.tf_utils.transform_graph"]], "insertlogging (class in neural_compressor.adaptor.tf_utils.transform_graph.insert_logging)": [[143, "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging.InsertLogging"]], "neural_compressor.adaptor.tf_utils.transform_graph.insert_logging": [[143, "module-neural_compressor.adaptor.tf_utils.transform_graph.insert_logging"]], "rerangequantizedconcat (class in neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat)": [[144, "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat.RerangeQuantizedConcat"]], "neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat": [[144, "module-neural_compressor.adaptor.tf_utils.transform_graph.rerange_quantized_concat"]], "collate_tf_preds() (in module neural_compressor.adaptor.tf_utils.util)": [[145, "neural_compressor.adaptor.tf_utils.util.collate_tf_preds"]], "disable_random() (in module neural_compressor.adaptor.tf_utils.util)": [[145, "neural_compressor.adaptor.tf_utils.util.disable_random"]], "fix_ref_type_of_graph_def() (in module neural_compressor.adaptor.tf_utils.util)": [[145, "neural_compressor.adaptor.tf_utils.util.fix_ref_type_of_graph_def"]], "generate_feed_dict() (in module neural_compressor.adaptor.tf_utils.util)": [[145, "neural_compressor.adaptor.tf_utils.util.generate_feed_dict"]], "get_estimator_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[145, "neural_compressor.adaptor.tf_utils.util.get_estimator_graph"]], "get_graph_def() (in module neural_compressor.adaptor.tf_utils.util)": [[145, "neural_compressor.adaptor.tf_utils.util.get_graph_def"]], "get_input_output_node_names() (in module neural_compressor.adaptor.tf_utils.util)": [[145, "neural_compressor.adaptor.tf_utils.util.get_input_output_node_names"]], "get_model_input_shape() (in module neural_compressor.adaptor.tf_utils.util)": [[145, "neural_compressor.adaptor.tf_utils.util.get_model_input_shape"]], "get_tensor_by_name() (in module neural_compressor.adaptor.tf_utils.util)": [[145, "neural_compressor.adaptor.tf_utils.util.get_tensor_by_name"]], "get_tensor_val_from_graph_node() (in module neural_compressor.adaptor.tf_utils.util)": [[145, "neural_compressor.adaptor.tf_utils.util.get_tensor_val_from_graph_node"]], "int8_node_name_reverse() (in module neural_compressor.adaptor.tf_utils.util)": [[145, "neural_compressor.adaptor.tf_utils.util.int8_node_name_reverse"]], "is_ckpt_format() (in module neural_compressor.adaptor.tf_utils.util)": [[145, "neural_compressor.adaptor.tf_utils.util.is_ckpt_format"]], "is_saved_model_format() (in module neural_compressor.adaptor.tf_utils.util)": [[145, "neural_compressor.adaptor.tf_utils.util.is_saved_model_format"]], "iterator_sess_run() (in module neural_compressor.adaptor.tf_utils.util)": [[145, "neural_compressor.adaptor.tf_utils.util.iterator_sess_run"]], "neural_compressor.adaptor.tf_utils.util": [[145, "module-neural_compressor.adaptor.tf_utils.util"]], "read_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[145, "neural_compressor.adaptor.tf_utils.util.read_graph"]], "strip_equivalent_nodes() (in module neural_compressor.adaptor.tf_utils.util)": [[145, "neural_compressor.adaptor.tf_utils.util.strip_equivalent_nodes"]], "strip_unused_nodes() (in module neural_compressor.adaptor.tf_utils.util)": [[145, "neural_compressor.adaptor.tf_utils.util.strip_unused_nodes"]], "tf_diagnosis_helper() (in module neural_compressor.adaptor.tf_utils.util)": [[145, "neural_compressor.adaptor.tf_utils.util.tf_diagnosis_helper"]], "version1_eq_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[145, "neural_compressor.adaptor.tf_utils.util.version1_eq_version2"]], "version1_gt_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[145, "neural_compressor.adaptor.tf_utils.util.version1_gt_version2"]], "version1_gte_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[145, "neural_compressor.adaptor.tf_utils.util.version1_gte_version2"]], "version1_lt_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[145, "neural_compressor.adaptor.tf_utils.util.version1_lt_version2"]], "version1_lte_version2() (in module neural_compressor.adaptor.tf_utils.util)": [[145, "neural_compressor.adaptor.tf_utils.util.version1_lte_version2"]], "write_graph() (in module neural_compressor.adaptor.tf_utils.util)": [[145, "neural_compressor.adaptor.tf_utils.util.write_graph"]], "bf16modulewrapper (class in neural_compressor.adaptor.torch_utils.bf16_convert)": [[146, "neural_compressor.adaptor.torch_utils.bf16_convert.BF16ModuleWrapper"]], "convert() (in module neural_compressor.adaptor.torch_utils.bf16_convert)": [[146, "neural_compressor.adaptor.torch_utils.bf16_convert.Convert"]], "bf16_symbolic_trace() (in module neural_compressor.adaptor.torch_utils.bf16_convert)": [[146, "neural_compressor.adaptor.torch_utils.bf16_convert.bf16_symbolic_trace"]], "neural_compressor.adaptor.torch_utils.bf16_convert": [[146, "module-neural_compressor.adaptor.torch_utils.bf16_convert"]], "hessiantrace (class in neural_compressor.adaptor.torch_utils.hawq_metric)": [[147, "neural_compressor.adaptor.torch_utils.hawq_metric.HessianTrace"]], "node_collector (class in neural_compressor.adaptor.torch_utils.hawq_metric)": [[147, "neural_compressor.adaptor.torch_utils.hawq_metric.Node_collector"]], "compare_weights() (in module neural_compressor.adaptor.torch_utils.hawq_metric)": [[147, "neural_compressor.adaptor.torch_utils.hawq_metric.compare_weights"]], "hawq_top() (in module neural_compressor.adaptor.torch_utils.hawq_metric)": [[147, "neural_compressor.adaptor.torch_utils.hawq_metric.hawq_top"]], "neural_compressor.adaptor.torch_utils.hawq_metric": [[147, "module-neural_compressor.adaptor.torch_utils.hawq_metric"]], "neural_compressor.adaptor.torch_utils": [[148, "module-neural_compressor.adaptor.torch_utils"]], "neural_compressor.adaptor.torch_utils.model_wrapper": [[149, "module-neural_compressor.adaptor.torch_utils.model_wrapper"]], "graphtrace (class in neural_compressor.adaptor.torch_utils.smooth_quant)": [[150, "neural_compressor.adaptor.torch_utils.smooth_quant.GraphTrace"]], "torchsmoothquant (class in neural_compressor.adaptor.torch_utils.smooth_quant)": [[150, "neural_compressor.adaptor.torch_utils.smooth_quant.TorchSmoothQuant"]], "get_module() (in module neural_compressor.adaptor.torch_utils.smooth_quant)": [[150, "neural_compressor.adaptor.torch_utils.smooth_quant.get_module"]], "neural_compressor.adaptor.torch_utils.smooth_quant": [[150, "module-neural_compressor.adaptor.torch_utils.smooth_quant"]], "set_module() (in module neural_compressor.adaptor.torch_utils.smooth_quant)": [[150, "neural_compressor.adaptor.torch_utils.smooth_quant.set_module"]], "neural_compressor.adaptor.torch_utils.symbolic_trace": [[151, "module-neural_compressor.adaptor.torch_utils.symbolic_trace"]], "symbolic_trace() (in module neural_compressor.adaptor.torch_utils.symbolic_trace)": [[151, "neural_compressor.adaptor.torch_utils.symbolic_trace.symbolic_trace"]], "trace_and_fuse_sub_graph() (in module neural_compressor.adaptor.torch_utils.symbolic_trace)": [[151, "neural_compressor.adaptor.torch_utils.symbolic_trace.trace_and_fuse_sub_graph"]], "append_attr() (in module neural_compressor.adaptor.torch_utils.util)": [[152, "neural_compressor.adaptor.torch_utils.util.append_attr"]], "auto_copy() (in module neural_compressor.adaptor.torch_utils.util)": [[152, "neural_compressor.adaptor.torch_utils.util.auto_copy"]], "calculate_quant_min_max() (in module neural_compressor.adaptor.torch_utils.util)": [[152, "neural_compressor.adaptor.torch_utils.util.calculate_quant_min_max"]], "check_cfg_and_qconfig() (in module neural_compressor.adaptor.torch_utils.util)": [[152, "neural_compressor.adaptor.torch_utils.util.check_cfg_and_qconfig"]], "collate_torch_preds() (in module neural_compressor.adaptor.torch_utils.util)": [[152, "neural_compressor.adaptor.torch_utils.util.collate_torch_preds"]], "fetch_module() (in module neural_compressor.adaptor.torch_utils.util)": [[152, "neural_compressor.adaptor.torch_utils.util.fetch_module"]], "generate_activation_observer() (in module neural_compressor.adaptor.torch_utils.util)": [[152, "neural_compressor.adaptor.torch_utils.util.generate_activation_observer"]], "get_embedding_contiguous() (in module neural_compressor.adaptor.torch_utils.util)": [[152, "neural_compressor.adaptor.torch_utils.util.get_embedding_contiguous"]], "get_example_input() (in module neural_compressor.adaptor.torch_utils.util)": [[152, "neural_compressor.adaptor.torch_utils.util.get_example_input"]], "get_fallback_order() (in module neural_compressor.adaptor.torch_utils.util)": [[152, "neural_compressor.adaptor.torch_utils.util.get_fallback_order"]], "get_mse_order_per_fp32() (in module neural_compressor.adaptor.torch_utils.util)": [[152, "neural_compressor.adaptor.torch_utils.util.get_mse_order_per_fp32"]], "get_mse_order_per_int8() (in module neural_compressor.adaptor.torch_utils.util)": [[152, "neural_compressor.adaptor.torch_utils.util.get_mse_order_per_int8"]], "get_quantizable_ops_from_cfgs() (in module neural_compressor.adaptor.torch_utils.util)": [[152, "neural_compressor.adaptor.torch_utils.util.get_quantizable_ops_from_cfgs"]], "get_torch_version() (in module neural_compressor.adaptor.torch_utils.util)": [[152, "neural_compressor.adaptor.torch_utils.util.get_torch_version"]], "input2tuple() (in module neural_compressor.adaptor.torch_utils.util)": [[152, "neural_compressor.adaptor.torch_utils.util.input2tuple"]], "is_fused_module() (in module neural_compressor.adaptor.torch_utils.util)": [[152, "neural_compressor.adaptor.torch_utils.util.is_fused_module"]], "match_datatype_pattern() (in module neural_compressor.adaptor.torch_utils.util)": [[152, "neural_compressor.adaptor.torch_utils.util.match_datatype_pattern"]], "neural_compressor.adaptor.torch_utils.util": [[152, "module-neural_compressor.adaptor.torch_utils.util"]], "paser_cfgs() (in module neural_compressor.adaptor.torch_utils.util)": [[152, "neural_compressor.adaptor.torch_utils.util.paser_cfgs"]], "set_module() (in module neural_compressor.adaptor.torch_utils.util)": [[152, "neural_compressor.adaptor.torch_utils.util.set_module"]], "simple_inference() (in module neural_compressor.adaptor.torch_utils.util)": [[152, "neural_compressor.adaptor.torch_utils.util.simple_inference"]], "update_sq_scale() (in module neural_compressor.adaptor.torch_utils.util)": [[152, "neural_compressor.adaptor.torch_utils.util.update_sq_scale"]], "algorithms (class in neural_compressor.algorithm.algorithm)": [[153, "neural_compressor.algorithm.algorithm.ALGORITHMS"]], "algorithm (class in neural_compressor.algorithm.algorithm)": [[153, "neural_compressor.algorithm.algorithm.Algorithm"]], "algorithmscheduler (class in neural_compressor.algorithm.algorithm)": [[153, "neural_compressor.algorithm.algorithm.AlgorithmScheduler"]], "algorithm_registry() (in module neural_compressor.algorithm.algorithm)": [[153, "neural_compressor.algorithm.algorithm.algorithm_registry"]], "neural_compressor.algorithm.algorithm": [[153, "module-neural_compressor.algorithm.algorithm"]], "fastbiascorrection (class in neural_compressor.algorithm.fast_bias_correction)": [[154, "neural_compressor.algorithm.fast_bias_correction.FastBiasCorrection"]], "neural_compressor.algorithm.fast_bias_correction": [[154, "module-neural_compressor.algorithm.fast_bias_correction"]], "neural_compressor.algorithm": [[155, "module-neural_compressor.algorithm"]], "smoothquant (class in neural_compressor.algorithm.smooth_quant)": [[156, "neural_compressor.algorithm.smooth_quant.SmoothQuant"]], "neural_compressor.algorithm.smooth_quant": [[156, "module-neural_compressor.algorithm.smooth_quant"]], "weightcorrection (class in neural_compressor.algorithm.weight_correction)": [[157, "neural_compressor.algorithm.weight_correction.WeightCorrection"]], "neural_compressor.algorithm.weight_correction": [[157, "module-neural_compressor.algorithm.weight_correction"]], "fit() (in module neural_compressor.benchmark)": [[158, "neural_compressor.benchmark.fit"]], "get_architecture() (in module neural_compressor.benchmark)": [[158, "neural_compressor.benchmark.get_architecture"]], "get_bounded_threads() (in module neural_compressor.benchmark)": [[158, "neural_compressor.benchmark.get_bounded_threads"]], "get_core_ids() (in module neural_compressor.benchmark)": [[158, "neural_compressor.benchmark.get_core_ids"]], "get_physical_ids() (in module neural_compressor.benchmark)": [[158, "neural_compressor.benchmark.get_physical_ids"]], "get_threads() (in module neural_compressor.benchmark)": [[158, "neural_compressor.benchmark.get_threads"]], "get_threads_per_core() (in module neural_compressor.benchmark)": [[158, "neural_compressor.benchmark.get_threads_per_core"]], "neural_compressor.benchmark": [[158, "module-neural_compressor.benchmark"]], "set_all_env_var() (in module neural_compressor.benchmark)": [[158, "neural_compressor.benchmark.set_all_env_var"]], "set_env_var() (in module neural_compressor.benchmark)": [[158, "neural_compressor.benchmark.set_env_var"]], "basecallbacks (class in neural_compressor.compression.callbacks)": [[159, "neural_compressor.compression.callbacks.BaseCallbacks"]], "distillationcallbacks (class in neural_compressor.compression.callbacks)": [[159, "neural_compressor.compression.callbacks.DistillationCallbacks"]], "pruningcallbacks (class in neural_compressor.compression.callbacks)": [[159, "neural_compressor.compression.callbacks.PruningCallbacks"]], "quantizationawaretrainingcallbacks (class in neural_compressor.compression.callbacks)": [[159, "neural_compressor.compression.callbacks.QuantizationAwareTrainingCallbacks"]], "_epoch_ran (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[159, "neural_compressor.compression.callbacks.DistillationCallbacks._epoch_ran"]], "best_model (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[159, "neural_compressor.compression.callbacks.DistillationCallbacks.best_model"]], "best_score (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[159, "neural_compressor.compression.callbacks.DistillationCallbacks.best_score"]], "eval_frequency (neural_compressor.compression.callbacks.distillationcallbacks attribute)": [[159, "neural_compressor.compression.callbacks.DistillationCallbacks.eval_frequency"]], "neural_compressor.compression.callbacks": [[159, "module-neural_compressor.compression.callbacks"]], "criterions (class in neural_compressor.compression.distillation.criterions)": [[160, "neural_compressor.compression.distillation.criterions.Criterions"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[160, "neural_compressor.compression.distillation.criterions.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationframework (class in neural_compressor.compression.distillation.criterions)": [[160, "neural_compressor.compression.distillation.criterions.KnowledgeDistillationFramework"]], "knowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[160, "neural_compressor.compression.distillation.criterions.KnowledgeDistillationLoss"]], "pytorchcriterions (class in neural_compressor.compression.distillation.criterions)": [[160, "neural_compressor.compression.distillation.criterions.PyTorchCriterions"]], "pytorchintermediatelayersknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[160, "neural_compressor.compression.distillation.criterions.PyTorchIntermediateLayersKnowledgeDistillationLoss"]], "pytorchintermediatelayersknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[160, "neural_compressor.compression.distillation.criterions.PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"]], "pytorchknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[160, "neural_compressor.compression.distillation.criterions.PyTorchKnowledgeDistillationLoss"]], "pytorchknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[160, "neural_compressor.compression.distillation.criterions.PyTorchKnowledgeDistillationLossWrapper"]], "pytorchselfknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[160, "neural_compressor.compression.distillation.criterions.PyTorchSelfKnowledgeDistillationLoss"]], "pytorchselfknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[160, "neural_compressor.compression.distillation.criterions.PyTorchSelfKnowledgeDistillationLossWrapper"]], "selfknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[160, "neural_compressor.compression.distillation.criterions.SelfKnowledgeDistillationLoss"]], "tensorflowcriterions (class in neural_compressor.compression.distillation.criterions)": [[160, "neural_compressor.compression.distillation.criterions.TensorflowCriterions"]], "tensorflowknowledgedistillationloss (class in neural_compressor.compression.distillation.criterions)": [[160, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLoss"]], "tensorflowknowledgedistillationlossexternal (class in neural_compressor.compression.distillation.criterions)": [[160, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLossExternal"]], "tensorflowknowledgedistillationlosswrapper (class in neural_compressor.compression.distillation.criterions)": [[160, "neural_compressor.compression.distillation.criterions.TensorflowKnowledgeDistillationLossWrapper"]], "criterion_registry() (in module neural_compressor.compression.distillation.criterions)": [[160, "neural_compressor.compression.distillation.criterions.criterion_registry"]], "neural_compressor.compression.distillation.criterions": [[160, "module-neural_compressor.compression.distillation.criterions"]], "neural_compressor.compression.distillation": [[161, "module-neural_compressor.compression.distillation"]], "neural_compressor.compression": [[162, "module-neural_compressor.compression"]], "gradientcriterion (class in neural_compressor.compression.pruner.criteria)": [[163, "neural_compressor.compression.pruner.criteria.GradientCriterion"]], "magnitudecriterion (class in neural_compressor.compression.pruner.criteria)": [[163, "neural_compressor.compression.pruner.criteria.MagnitudeCriterion"]], "pruningcriterion (class in neural_compressor.compression.pruner.criteria)": [[163, "neural_compressor.compression.pruner.criteria.PruningCriterion"]], "retrainfreecriterion (class in neural_compressor.compression.pruner.criteria)": [[163, "neural_compressor.compression.pruner.criteria.RetrainFreeCriterion"]], "snipcriterion (class in neural_compressor.compression.pruner.criteria)": [[163, "neural_compressor.compression.pruner.criteria.SnipCriterion"]], "snipmomentumblockcriterion (class in neural_compressor.compression.pruner.criteria)": [[163, "neural_compressor.compression.pruner.criteria.SnipMomentumBlockCriterion"]], "snipmomentumcriterion (class in neural_compressor.compression.pruner.criteria)": [[163, "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion"]], "get_criterion() (in module neural_compressor.compression.pruner.criteria)": [[163, "neural_compressor.compression.pruner.criteria.get_criterion"]], "neural_compressor.compression.pruner.criteria": [[163, "module-neural_compressor.compression.pruner.criteria"]], "register_criterion() (in module neural_compressor.compression.pruner.criteria)": [[163, "neural_compressor.compression.pruner.criteria.register_criterion"]], "scores (neural_compressor.compression.pruner.criteria.gradientcriterion attribute)": [[163, "neural_compressor.compression.pruner.criteria.GradientCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.magnitudecriterion attribute)": [[163, "neural_compressor.compression.pruner.criteria.MagnitudeCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.pruningcriterion attribute)": [[163, "neural_compressor.compression.pruner.criteria.PruningCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.retrainfreecriterion attribute)": [[163, "neural_compressor.compression.pruner.criteria.RetrainFreeCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.snipcriterion attribute)": [[163, "neural_compressor.compression.pruner.criteria.SnipCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.snipmomentumblockcriterion attribute)": [[163, "neural_compressor.compression.pruner.criteria.SnipMomentumBlockCriterion.scores"]], "scores (neural_compressor.compression.pruner.criteria.snipmomentumcriterion attribute)": [[163, "neural_compressor.compression.pruner.criteria.SnipMomentumCriterion.scores"]], "neural_compressor.compression.pruner": [[164, "module-neural_compressor.compression.pruner"]], "generate_ffn2_pruning_config() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[165, "neural_compressor.compression.pruner.model_slim.auto_slim.generate_ffn2_pruning_config"]], "generate_mha_pruning_config() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[165, "neural_compressor.compression.pruner.model_slim.auto_slim.generate_mha_pruning_config"]], "model_slim() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[165, "neural_compressor.compression.pruner.model_slim.auto_slim.model_slim"]], "model_slim_ffn2() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[165, "neural_compressor.compression.pruner.model_slim.auto_slim.model_slim_ffn2"]], "model_slim_mha() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[165, "neural_compressor.compression.pruner.model_slim.auto_slim.model_slim_mha"]], "neural_compressor.compression.pruner.model_slim.auto_slim": [[165, "module-neural_compressor.compression.pruner.model_slim.auto_slim"]], "parse_auto_slim_config() (in module neural_compressor.compression.pruner.model_slim.auto_slim)": [[165, "neural_compressor.compression.pruner.model_slim.auto_slim.parse_auto_slim_config"]], "neural_compressor.compression.pruner.model_slim": [[166, "module-neural_compressor.compression.pruner.model_slim"]], "classifierheadsearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[167, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher"]], "jitbasicsearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[167, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher"]], "linear2linearsearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[167, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher"]], "recipesearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[167, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher"]], "selfmhasearcher (class in neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[167, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher"]], "current_pattern (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[167, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.current_pattern"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[167, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[167, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[167, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.device"]], "device (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[167, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.device"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[167, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[167, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[167, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.flatten_static_graph"]], "flatten_static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[167, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.flatten_static_graph"]], "get_attributes() (in module neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[167, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.get_attributes"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[167, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[167, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[167, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[167, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.model"]], "model (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[167, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.model"]], "neural_compressor.compression.pruner.model_slim.pattern_analyzer": [[167, "module-neural_compressor.compression.pruner.model_slim.pattern_analyzer"]], "print_iterables() (in module neural_compressor.compression.pruner.model_slim.pattern_analyzer)": [[167, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.print_iterables"]], "recipe (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[167, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.recipe"]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[167, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.searching_results"]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[167, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.searching_results"]], "searching_results (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[167, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.searching_results"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.classifierheadsearcher attribute)": [[167, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.ClassifierHeadSearcher.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[167, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[167, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.static_graph"]], "static_graph (neural_compressor.compression.pruner.model_slim.pattern_analyzer.selfmhasearcher attribute)": [[167, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.SelfMHASearcher.static_graph"]], "target_layers (neural_compressor.compression.pruner.model_slim.pattern_analyzer.jitbasicsearcher attribute)": [[167, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.JitBasicSearcher.target_layers"]], "target_layers (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[167, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.target_layers"]], "target_op_lut (neural_compressor.compression.pruner.model_slim.pattern_analyzer.linear2linearsearcher attribute)": [[167, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.Linear2LinearSearcher.target_op_lut"]], "targets (neural_compressor.compression.pruner.model_slim.pattern_analyzer.recipesearcher attribute)": [[167, "neural_compressor.compression.pruner.model_slim.pattern_analyzer.RecipeSearcher.targets"]], "linearcompression (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[168, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression"]], "linearcompressioniterator (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[168, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompressionIterator"]], "mhacompression (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[168, "neural_compressor.compression.pruner.model_slim.weight_slim.MHACompression"]], "postcompressionutils (class in neural_compressor.compression.pruner.model_slim.weight_slim)": [[168, "neural_compressor.compression.pruner.model_slim.weight_slim.PostCompressionUtils"]], "device (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompression attribute)": [[168, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression.device"]], "layer_1 (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompression attribute)": [[168, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression.layer_1"]], "layer_2 (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompression attribute)": [[168, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompression.layer_2"]], "linear_patterns (neural_compressor.compression.pruner.model_slim.weight_slim.linearcompressioniterator attribute)": [[168, "neural_compressor.compression.pruner.model_slim.weight_slim.LinearCompressionIterator.linear_patterns"]], "neural_compressor.compression.pruner.model_slim.weight_slim": [[168, "module-neural_compressor.compression.pruner.model_slim.weight_slim"]], "basepattern (class in neural_compressor.compression.pruner.patterns)": [[169, "neural_compressor.compression.pruner.patterns.BasePattern"]], "m (neural_compressor.compression.pruner.patterns.patternninm attribute)": [[169, "neural_compressor.compression.pruner.patterns.PatternNInM.M"]], "n (neural_compressor.compression.pruner.patterns.patternninm attribute)": [[169, "neural_compressor.compression.pruner.patterns.PatternNInM.N"]], "patternninm (class in neural_compressor.compression.pruner.patterns)": [[169, "neural_compressor.compression.pruner.patterns.PatternNInM"]], "patternnxm (class in neural_compressor.compression.pruner.patterns)": [[169, "neural_compressor.compression.pruner.patterns.PatternNxM"]], "block_size (neural_compressor.compression.pruner.patterns.patternnxm attribute)": [[169, "neural_compressor.compression.pruner.patterns.PatternNxM.block_size"]], "config (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[169, "neural_compressor.compression.pruner.patterns.BasePattern.config"]], "get_pattern() (in module neural_compressor.compression.pruner.patterns)": [[169, "neural_compressor.compression.pruner.patterns.get_pattern"]], "invalid_layers (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[169, "neural_compressor.compression.pruner.patterns.BasePattern.invalid_layers"]], "is_global (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[169, "neural_compressor.compression.pruner.patterns.BasePattern.is_global"]], "keep_mask_layers (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[169, "neural_compressor.compression.pruner.patterns.BasePattern.keep_mask_layers"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[169, "neural_compressor.compression.pruner.patterns.BasePattern.max_sparsity_ratio_per_op"]], "min_sparsity_ratio_per_op (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[169, "neural_compressor.compression.pruner.patterns.BasePattern.min_sparsity_ratio_per_op"]], "modules (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[169, "neural_compressor.compression.pruner.patterns.BasePattern.modules"]], "neural_compressor.compression.pruner.patterns": [[169, "module-neural_compressor.compression.pruner.patterns"]], "pattern (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[169, "neural_compressor.compression.pruner.patterns.BasePattern.pattern"]], "register_pattern() (in module neural_compressor.compression.pruner.patterns)": [[169, "neural_compressor.compression.pruner.patterns.register_pattern"]], "target_sparsity (neural_compressor.compression.pruner.patterns.basepattern attribute)": [[169, "neural_compressor.compression.pruner.patterns.BasePattern.target_sparsity"]], "basepruner (class in neural_compressor.compression.pruner.pruners)": [[170, "neural_compressor.compression.pruner.pruners.BasePruner"]], "basicpruner (class in neural_compressor.compression.pruner.pruners)": [[170, "neural_compressor.compression.pruner.pruners.BasicPruner"]], "blockmaskpruner (class in neural_compressor.compression.pruner.pruners)": [[170, "neural_compressor.compression.pruner.pruners.BlockMaskPruner"]], "patternlockpruner (class in neural_compressor.compression.pruner.pruners)": [[170, "neural_compressor.compression.pruner.pruners.PatternLockPruner"]], "progressivepruner (class in neural_compressor.compression.pruner.pruners)": [[170, "neural_compressor.compression.pruner.pruners.ProgressivePruner"]], "retrainfreepruner (class in neural_compressor.compression.pruner.pruners)": [[170, "neural_compressor.compression.pruner.pruners.RetrainFreePruner"]], "config (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[170, "neural_compressor.compression.pruner.pruners.BasePruner.config"]], "criterion (neural_compressor.compression.pruner.pruners.basicpruner attribute)": [[170, "neural_compressor.compression.pruner.pruners.BasicPruner.criterion"]], "criterion (neural_compressor.compression.pruner.pruners.blockmaskpruner attribute)": [[170, "neural_compressor.compression.pruner.pruners.BlockMaskPruner.criterion"]], "criterion (neural_compressor.compression.pruner.pruners.retrainfreepruner attribute)": [[170, "neural_compressor.compression.pruner.pruners.RetrainFreePruner.criterion"]], "current_sparsity_ratio (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[170, "neural_compressor.compression.pruner.pruners.BasePruner.current_sparsity_ratio"]], "end_step (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[170, "neural_compressor.compression.pruner.pruners.BasePruner.end_step"]], "get_pruner() (in module neural_compressor.compression.pruner.pruners)": [[170, "neural_compressor.compression.pruner.pruners.get_pruner"]], "global_step (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[170, "neural_compressor.compression.pruner.pruners.BasePruner.global_step"]], "masks (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[170, "neural_compressor.compression.pruner.pruners.BasePruner.masks"]], "max_sparsity_ratio_per_op (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[170, "neural_compressor.compression.pruner.pruners.BasePruner.max_sparsity_ratio_per_op"]], "modules (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[170, "neural_compressor.compression.pruner.pruners.BasePruner.modules"]], "neural_compressor.compression.pruner.pruners": [[170, "module-neural_compressor.compression.pruner.pruners"]], "parse_valid_pruner_types() (in module neural_compressor.compression.pruner.pruners)": [[170, "neural_compressor.compression.pruner.pruners.parse_valid_pruner_types"]], "pattern (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[170, "neural_compressor.compression.pruner.pruners.BasePruner.pattern"]], "pattern (neural_compressor.compression.pruner.pruners.basicpruner attribute)": [[170, "neural_compressor.compression.pruner.pruners.BasicPruner.pattern"]], "pattern (neural_compressor.compression.pruner.pruners.blockmaskpruner attribute)": [[170, "neural_compressor.compression.pruner.pruners.BlockMaskPruner.pattern"]], "pattern (neural_compressor.compression.pruner.pruners.retrainfreepruner attribute)": [[170, "neural_compressor.compression.pruner.pruners.RetrainFreePruner.pattern"]], "pruning_frequency (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[170, "neural_compressor.compression.pruner.pruners.BasePruner.pruning_frequency"]], "reg (neural_compressor.compression.pruner.pruners.basicpruner attribute)": [[170, "neural_compressor.compression.pruner.pruners.BasicPruner.reg"]], "reg (neural_compressor.compression.pruner.pruners.blockmaskpruner attribute)": [[170, "neural_compressor.compression.pruner.pruners.BlockMaskPruner.reg"]], "reg (neural_compressor.compression.pruner.pruners.retrainfreepruner attribute)": [[170, "neural_compressor.compression.pruner.pruners.RetrainFreePruner.reg"]], "register_pruner() (in module neural_compressor.compression.pruner.pruners)": [[170, "neural_compressor.compression.pruner.pruners.register_pruner"]], "scheduler (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[170, "neural_compressor.compression.pruner.pruners.BasePruner.scheduler"]], "scheduler (neural_compressor.compression.pruner.pruners.basicpruner attribute)": [[170, "neural_compressor.compression.pruner.pruners.BasicPruner.scheduler"]], "scheduler (neural_compressor.compression.pruner.pruners.blockmaskpruner attribute)": [[170, "neural_compressor.compression.pruner.pruners.BlockMaskPruner.scheduler"]], "scheduler (neural_compressor.compression.pruner.pruners.retrainfreepruner attribute)": [[170, "neural_compressor.compression.pruner.pruners.RetrainFreePruner.scheduler"]], "scores (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[170, "neural_compressor.compression.pruner.pruners.BasePruner.scores"]], "start_step (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[170, "neural_compressor.compression.pruner.pruners.BasePruner.start_step"]], "target_sparsity_ratio (neural_compressor.compression.pruner.pruners.basepruner attribute)": [[170, "neural_compressor.compression.pruner.pruners.BasePruner.target_sparsity_ratio"]], "basereg (class in neural_compressor.compression.pruner.regs)": [[171, "neural_compressor.compression.pruner.regs.BaseReg"]], "grouplasso (class in neural_compressor.compression.pruner.regs)": [[171, "neural_compressor.compression.pruner.regs.GroupLasso"]], "alpha (neural_compressor.compression.pruner.regs.grouplasso attribute)": [[171, "neural_compressor.compression.pruner.regs.GroupLasso.alpha"]], "get_reg() (in module neural_compressor.compression.pruner.regs)": [[171, "neural_compressor.compression.pruner.regs.get_reg"]], "get_reg_type() (in module neural_compressor.compression.pruner.regs)": [[171, "neural_compressor.compression.pruner.regs.get_reg_type"]], "neural_compressor.compression.pruner.regs": [[171, "module-neural_compressor.compression.pruner.regs"]], "reg_terms (neural_compressor.compression.pruner.regs.grouplasso attribute)": [[171, "neural_compressor.compression.pruner.regs.GroupLasso.reg_terms"]], "register_reg() (in module neural_compressor.compression.pruner.regs)": [[171, "neural_compressor.compression.pruner.regs.register_reg"]], "iterativescheduler (class in neural_compressor.compression.pruner.schedulers)": [[172, "neural_compressor.compression.pruner.schedulers.IterativeScheduler"]], "oneshotscheduler (class in neural_compressor.compression.pruner.schedulers)": [[172, "neural_compressor.compression.pruner.schedulers.OneshotScheduler"]], "pruningscheduler (class in neural_compressor.compression.pruner.schedulers)": [[172, "neural_compressor.compression.pruner.schedulers.PruningScheduler"]], "config (neural_compressor.compression.pruner.schedulers.pruningscheduler attribute)": [[172, "neural_compressor.compression.pruner.schedulers.PruningScheduler.config"]], "get_scheduler() (in module neural_compressor.compression.pruner.schedulers)": [[172, "neural_compressor.compression.pruner.schedulers.get_scheduler"]], "neural_compressor.compression.pruner.schedulers": [[172, "module-neural_compressor.compression.pruner.schedulers"]], "register_scheduler() (in module neural_compressor.compression.pruner.schedulers)": [[172, "neural_compressor.compression.pruner.schedulers.register_scheduler"]], "check_config() (in module neural_compressor.compression.pruner.utils)": [[173, "neural_compressor.compression.pruner.utils.check_config"]], "check_key_validity() (in module neural_compressor.compression.pruner.utils)": [[173, "neural_compressor.compression.pruner.utils.check_key_validity"]], "generate_pruner_config() (in module neural_compressor.compression.pruner.utils)": [[173, "neural_compressor.compression.pruner.utils.generate_pruner_config"]], "get_sparsity_ratio() (in module neural_compressor.compression.pruner.utils)": [[173, "neural_compressor.compression.pruner.utils.get_sparsity_ratio"]], "neural_compressor.compression.pruner.utils": [[173, "module-neural_compressor.compression.pruner.utils"]], "parse_last_linear() (in module neural_compressor.compression.pruner.utils)": [[173, "neural_compressor.compression.pruner.utils.parse_last_linear"]], "parse_to_prune() (in module neural_compressor.compression.pruner.utils)": [[173, "neural_compressor.compression.pruner.utils.parse_to_prune"]], "process_and_check_config() (in module neural_compressor.compression.pruner.utils)": [[173, "neural_compressor.compression.pruner.utils.process_and_check_config"]], "process_config() (in module neural_compressor.compression.pruner.utils)": [[173, "neural_compressor.compression.pruner.utils.process_config"]], "process_weight_config() (in module neural_compressor.compression.pruner.utils)": [[173, "neural_compressor.compression.pruner.utils.process_weight_config"]], "process_yaml_config() (in module neural_compressor.compression.pruner.utils)": [[173, "neural_compressor.compression.pruner.utils.process_yaml_config"]], "reset_none_to_default() (in module neural_compressor.compression.pruner.utils)": [[173, "neural_compressor.compression.pruner.utils.reset_none_to_default"]], "update_params() (in module neural_compressor.compression.pruner.utils)": [[173, "neural_compressor.compression.pruner.utils.update_params"]], "benchmark_conf (class in neural_compressor.conf.config)": [[174, "neural_compressor.conf.config.Benchmark_Conf"]], "conf (class in neural_compressor.conf.config)": [[174, "neural_compressor.conf.config.Conf"]], "distillation_conf (class in neural_compressor.conf.config)": [[174, "neural_compressor.conf.config.Distillation_Conf"]], "graph_optimization_conf (class in neural_compressor.conf.config)": [[174, "neural_compressor.conf.config.Graph_Optimization_Conf"]], "mixedprecision_conf (class in neural_compressor.conf.config)": [[174, "neural_compressor.conf.config.MixedPrecision_Conf"]], "nasconfig (class in neural_compressor.conf.config)": [[174, "neural_compressor.conf.config.NASConfig"]], "prunerv2 (class in neural_compressor.conf.config)": [[174, "neural_compressor.conf.config.PrunerV2"]], "pruning_conf (class in neural_compressor.conf.config)": [[174, "neural_compressor.conf.config.Pruning_Conf"]], "quantization_conf (class in neural_compressor.conf.config)": [[174, "neural_compressor.conf.config.Quantization_Conf"]], "neural_compressor.conf.config": [[174, "module-neural_compressor.conf.config"]], "dotdict (class in neural_compressor.conf.dotdict)": [[175, "neural_compressor.conf.dotdict.DotDict"]], "deep_get() (in module neural_compressor.conf.dotdict)": [[175, "neural_compressor.conf.dotdict.deep_get"]], "deep_set() (in module neural_compressor.conf.dotdict)": [[175, "neural_compressor.conf.dotdict.deep_set"]], "neural_compressor.conf.dotdict": [[175, "module-neural_compressor.conf.dotdict"]], "neural_compressor.conf": [[176, "module-neural_compressor.conf"]], "accuracycriterion (class in neural_compressor.conf.pythonic_config)": [[177, "neural_compressor.conf.pythonic_config.AccuracyCriterion"]], "benchmarkconfig (class in neural_compressor.conf.pythonic_config)": [[177, "neural_compressor.conf.pythonic_config.BenchmarkConfig"]], "distillationconfig (class in neural_compressor.conf.pythonic_config)": [[177, "neural_compressor.conf.pythonic_config.DistillationConfig"]], "knowledgedistillationlossconfig (class in neural_compressor.conf.pythonic_config)": [[177, "neural_compressor.conf.pythonic_config.KnowledgeDistillationLossConfig"]], "options (class in neural_compressor.conf.pythonic_config)": [[177, "neural_compressor.conf.pythonic_config.Options"]], "quantizationconfig (class in neural_compressor.conf.pythonic_config)": [[177, "neural_compressor.conf.pythonic_config.QuantizationConfig"]], "weightpruningconfig (class in neural_compressor.conf.pythonic_config)": [[177, "neural_compressor.conf.pythonic_config.WeightPruningConfig"]], "neural_compressor.conf.pythonic_config": [[177, "module-neural_compressor.conf.pythonic_config"]], "accuracycriterion (class in neural_compressor.config)": [[178, "neural_compressor.config.AccuracyCriterion"]], "benchmarkconfig (class in neural_compressor.config)": [[178, "neural_compressor.config.BenchmarkConfig"]], "distillationconfig (class in neural_compressor.config)": [[178, "neural_compressor.config.DistillationConfig"]], "dotdict (class in neural_compressor.config)": [[178, "neural_compressor.config.DotDict"]], "exportconfig (class in neural_compressor.config)": [[178, "neural_compressor.config.ExportConfig"]], "intermediatelayersknowledgedistillationlossconfig (class in neural_compressor.config)": [[178, "neural_compressor.config.IntermediateLayersKnowledgeDistillationLossConfig"]], "keras (class in neural_compressor.config)": [[178, "neural_compressor.config.Keras"]], "knowledgedistillationlossconfig (class in neural_compressor.config)": [[178, "neural_compressor.config.KnowledgeDistillationLossConfig"]], "mxnet (class in neural_compressor.config)": [[178, "neural_compressor.config.MXNet"]], "mixedprecisionconfig (class in neural_compressor.config)": [[178, "neural_compressor.config.MixedPrecisionConfig"]], "nasconfig (class in neural_compressor.config)": [[178, "neural_compressor.config.NASConfig"]], "onnx (class in neural_compressor.config)": [[178, "neural_compressor.config.ONNX"]], "onnxqlinear2qdqconfig (class in neural_compressor.config)": [[178, "neural_compressor.config.ONNXQlinear2QDQConfig"]], "options (class in neural_compressor.config)": [[178, "neural_compressor.config.Options"]], "posttrainingquantconfig (class in neural_compressor.config)": [[178, "neural_compressor.config.PostTrainingQuantConfig"]], "pytorch (class in neural_compressor.config)": [[178, "neural_compressor.config.PyTorch"]], "quantizationawaretrainingconfig (class in neural_compressor.config)": [[178, "neural_compressor.config.QuantizationAwareTrainingConfig"]], "selfknowledgedistillationlossconfig (class in neural_compressor.config)": [[178, "neural_compressor.config.SelfKnowledgeDistillationLossConfig"]], "tf2onnxconfig (class in neural_compressor.config)": [[178, "neural_compressor.config.TF2ONNXConfig"]], "tensorflow (class in neural_compressor.config)": [[178, "neural_compressor.config.TensorFlow"]], "torch2onnxconfig (class in neural_compressor.config)": [[178, "neural_compressor.config.Torch2ONNXConfig"]], "tuningcriterion (class in neural_compressor.config)": [[178, "neural_compressor.config.TuningCriterion"]], "weightpruningconfig (class in neural_compressor.config)": [[178, "neural_compressor.config.WeightPruningConfig"]], "neural_compressor.config": [[178, "module-neural_compressor.config"]], "neural_compressor.contrib": [[179, "module-neural_compressor.contrib"]], "neural_compressor.contrib.strategy": [[180, "module-neural_compressor.contrib.strategy"]], "sigopttunestrategy (class in neural_compressor.contrib.strategy.sigopt)": [[181, "neural_compressor.contrib.strategy.sigopt.SigOptTuneStrategy"]], "neural_compressor.contrib.strategy.sigopt": [[181, "module-neural_compressor.contrib.strategy.sigopt"]], "tpetunestrategy (class in neural_compressor.contrib.strategy.tpe)": [[182, "neural_compressor.contrib.strategy.tpe.TpeTuneStrategy"]], "neural_compressor.contrib.strategy.tpe": [[182, "module-neural_compressor.contrib.strategy.tpe"]], "basedataloader (class in neural_compressor.data.dataloaders.base_dataloader)": [[183, "neural_compressor.data.dataloaders.base_dataloader.BaseDataLoader"]], "neural_compressor.data.dataloaders.base_dataloader": [[183, "module-neural_compressor.data.dataloaders.base_dataloader"]], "dataloader (class in neural_compressor.data.dataloaders.dataloader)": [[184, "neural_compressor.data.dataloaders.dataloader.DataLoader"]], "neural_compressor.data.dataloaders.dataloader": [[184, "module-neural_compressor.data.dataloaders.dataloader"]], "defaultdataloader (class in neural_compressor.data.dataloaders.default_dataloader)": [[185, "neural_compressor.data.dataloaders.default_dataloader.DefaultDataLoader"]], "default_collate() (in module neural_compressor.data.dataloaders.default_dataloader)": [[185, "neural_compressor.data.dataloaders.default_dataloader.default_collate"]], "neural_compressor.data.dataloaders.default_dataloader": [[185, "module-neural_compressor.data.dataloaders.default_dataloader"]], "fetcher (class in neural_compressor.data.dataloaders.fetcher)": [[186, "neural_compressor.data.dataloaders.fetcher.Fetcher"]], "indexfetcher (class in neural_compressor.data.dataloaders.fetcher)": [[186, "neural_compressor.data.dataloaders.fetcher.IndexFetcher"]], "iterablefetcher (class in neural_compressor.data.dataloaders.fetcher)": [[186, "neural_compressor.data.dataloaders.fetcher.IterableFetcher"]], "neural_compressor.data.dataloaders.fetcher": [[186, "module-neural_compressor.data.dataloaders.fetcher"]], "neural_compressor.data.dataloaders": [[187, "module-neural_compressor.data.dataloaders"]], "mxnetdataloader (class in neural_compressor.data.dataloaders.mxnet_dataloader)": [[188, "neural_compressor.data.dataloaders.mxnet_dataloader.MXNetDataLoader"]], "neural_compressor.data.dataloaders.mxnet_dataloader": [[188, "module-neural_compressor.data.dataloaders.mxnet_dataloader"]], "onnxrtbertdataloader (class in neural_compressor.data.dataloaders.onnxrt_dataloader)": [[189, "neural_compressor.data.dataloaders.onnxrt_dataloader.ONNXRTBertDataLoader"]], "onnxrtdataloader (class in neural_compressor.data.dataloaders.onnxrt_dataloader)": [[189, "neural_compressor.data.dataloaders.onnxrt_dataloader.ONNXRTDataLoader"]], "neural_compressor.data.dataloaders.onnxrt_dataloader": [[189, "module-neural_compressor.data.dataloaders.onnxrt_dataloader"]], "pytorchdataloader (class in neural_compressor.data.dataloaders.pytorch_dataloader)": [[190, "neural_compressor.data.dataloaders.pytorch_dataloader.PyTorchDataLoader"]], "neural_compressor.data.dataloaders.pytorch_dataloader": [[190, "module-neural_compressor.data.dataloaders.pytorch_dataloader"]], "batchsampler (class in neural_compressor.data.dataloaders.sampler)": [[191, "neural_compressor.data.dataloaders.sampler.BatchSampler"]], "iterablesampler (class in neural_compressor.data.dataloaders.sampler)": [[191, "neural_compressor.data.dataloaders.sampler.IterableSampler"]], "sampler (class in neural_compressor.data.dataloaders.sampler)": [[191, "neural_compressor.data.dataloaders.sampler.Sampler"]], "sequentialsampler (class in neural_compressor.data.dataloaders.sampler)": [[191, "neural_compressor.data.dataloaders.sampler.SequentialSampler"]], "neural_compressor.data.dataloaders.sampler": [[191, "module-neural_compressor.data.dataloaders.sampler"]], "tfdatadataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[192, "neural_compressor.data.dataloaders.tensorflow_dataloader.TFDataDataLoader"]], "tensorflowbertdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[192, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowBertDataLoader"]], "tensorflowdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[192, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowDataLoader"]], "tensorflowmodelzoobertdataloader (class in neural_compressor.data.dataloaders.tensorflow_dataloader)": [[192, "neural_compressor.data.dataloaders.tensorflow_dataloader.TensorflowModelZooBertDataLoader"]], "neural_compressor.data.dataloaders.tensorflow_dataloader": [[192, "module-neural_compressor.data.dataloaders.tensorflow_dataloader"]], "inputfeatures (class in neural_compressor.data.datasets.bert_dataset)": [[193, "neural_compressor.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[193, "neural_compressor.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.data.datasets.bert_dataset)": [[193, "neural_compressor.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[193, "neural_compressor.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[193, "neural_compressor.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.data.datasets.bert_dataset)": [[193, "neural_compressor.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.data.datasets.bert_dataset)": [[193, "neural_compressor.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.data.datasets.bert_dataset)": [[193, "neural_compressor.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.data.datasets.bert_dataset": [[193, "module-neural_compressor.data.datasets.bert_dataset"]], "coconpy (class in neural_compressor.data.datasets.coco_dataset)": [[194, "neural_compressor.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.data.datasets.coco_dataset)": [[194, "neural_compressor.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.data.datasets.coco_dataset)": [[194, "neural_compressor.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.data.datasets.coco_dataset)": [[194, "neural_compressor.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.data.datasets.coco_dataset": [[194, "module-neural_compressor.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.data.datasets.dataset)": [[195, "neural_compressor.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.data.datasets.dataset)": [[195, "neural_compressor.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.data.datasets.dataset)": [[195, "neural_compressor.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.data.datasets.dataset)": [[195, "neural_compressor.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.data.datasets.dataset)": [[195, "neural_compressor.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.data.datasets.dataset)": [[195, "neural_compressor.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.data.datasets.dataset)": [[195, "neural_compressor.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.data.datasets.dataset)": [[195, "neural_compressor.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.data.datasets.dataset)": [[195, "neural_compressor.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.data.datasets.dataset)": [[195, "neural_compressor.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.data.datasets.dataset)": [[195, "neural_compressor.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.data.datasets.dataset)": [[195, "neural_compressor.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.data.datasets.dataset)": [[195, "neural_compressor.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.data.datasets.dataset)": [[195, "neural_compressor.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.data.datasets.dataset)": [[195, "neural_compressor.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.data.datasets.dataset)": [[195, "neural_compressor.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.data.datasets.dataset)": [[195, "neural_compressor.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.data.datasets.dataset)": [[195, "neural_compressor.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.data.datasets.dataset)": [[195, "neural_compressor.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.data.datasets.dataset)": [[195, "neural_compressor.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.data.datasets.dataset)": [[195, "neural_compressor.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.data.datasets.dataset)": [[195, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.datasets.dataset)": [[195, "neural_compressor.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflow (class in neural_compressor.data.datasets.dataset)": [[195, "neural_compressor.data.datasets.dataset.Tensorflow"]], "tensorflowcifar10 (class in neural_compressor.data.datasets.dataset)": [[195, "neural_compressor.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.data.datasets.dataset)": [[195, "neural_compressor.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.data.datasets.dataset)": [[195, "neural_compressor.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.data.datasets.dataset)": [[195, "neural_compressor.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagerecord (class in neural_compressor.data.datasets.dataset)": [[195, "neural_compressor.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.data.datasets.dataset)": [[195, "neural_compressor.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.data.datasets.dataset)": [[195, "neural_compressor.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.data.datasets.dataset)": [[195, "neural_compressor.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.data.datasets.dataset)": [[195, "neural_compressor.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.data.datasets.dataset)": [[195, "neural_compressor.data.datasets.dataset.check_integrity"]], "dataset_registry() (in module neural_compressor.data.datasets.dataset)": [[195, "neural_compressor.data.datasets.dataset.dataset_registry"]], "download_url() (in module neural_compressor.data.datasets.dataset)": [[195, "neural_compressor.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.data.datasets.dataset)": [[195, "neural_compressor.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.data.datasets.dataset)": [[195, "neural_compressor.data.datasets.dataset.gen_bar_updater"]], "neural_compressor.data.datasets.dataset": [[195, "module-neural_compressor.data.datasets.dataset"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset)": [[196, "neural_compressor.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.data.datasets.dummy_dataset": [[196, "module-neural_compressor.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[197, "neural_compressor.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.data.datasets.dummy_dataset_v2)": [[197, "neural_compressor.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.data.datasets.dummy_dataset_v2": [[197, "module-neural_compressor.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[198, "neural_compressor.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[198, "neural_compressor.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[198, "neural_compressor.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[198, "neural_compressor.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.data.datasets.imagenet_dataset)": [[198, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.data.datasets.imagenet_dataset)": [[198, "neural_compressor.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.data.datasets.imagenet_dataset": [[198, "module-neural_compressor.data.datasets.imagenet_dataset"]], "neural_compressor.data.datasets": [[199, "module-neural_compressor.data.datasets"]], "styletransferdataset (class in neural_compressor.data.datasets.style_transfer_dataset)": [[200, "neural_compressor.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.data.datasets.style_transfer_dataset": [[200, "module-neural_compressor.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.data.filters.coco_filter)": [[201, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.data.filters.coco_filter)": [[201, "neural_compressor.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.data.filters.coco_filter": [[201, "module-neural_compressor.data.filters.coco_filter"]], "filters (class in neural_compressor.data.filters.filter)": [[202, "neural_compressor.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.data.filters.filter)": [[202, "neural_compressor.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.data.filters.filter)": [[202, "neural_compressor.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.data.filters.filter)": [[202, "neural_compressor.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.data.filters.filter)": [[202, "neural_compressor.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.data.filters.filter)": [[202, "neural_compressor.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.data.filters.filter)": [[202, "neural_compressor.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.data.filters.filter)": [[202, "neural_compressor.data.filters.filter.filter_registry"]], "neural_compressor.data.filters.filter": [[202, "module-neural_compressor.data.filters.filter"]], "neural_compressor.data.filters": [[203, "module-neural_compressor.data.filters"]], "neural_compressor.data": [[204, "module-neural_compressor.data"]], "parsedecodecocotransform (class in neural_compressor.data.transforms.coco_transform)": [[205, "neural_compressor.data.transforms.coco_transform.ParseDecodeCocoTransform"]], "neural_compressor.data.transforms.coco_transform": [[205, "module-neural_compressor.data.transforms.coco_transform"]], "bilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[206, "neural_compressor.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.data.transforms.imagenet_transform)": [[206, "neural_compressor.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[206, "neural_compressor.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[206, "neural_compressor.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.data.transforms.imagenet_transform)": [[206, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[206, "neural_compressor.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.data.transforms.imagenet_transform)": [[206, "neural_compressor.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.data.transforms.imagenet_transform)": [[206, "neural_compressor.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.data.transforms.imagenet_transform)": [[206, "neural_compressor.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "neural_compressor.data.transforms.imagenet_transform": [[206, "module-neural_compressor.data.transforms.imagenet_transform"]], "neural_compressor.data.transforms": [[207, "module-neural_compressor.data.transforms"]], "postprocess (class in neural_compressor.data.transforms.postprocess)": [[208, "neural_compressor.data.transforms.postprocess.Postprocess"]], "neural_compressor.data.transforms.postprocess": [[208, "module-neural_compressor.data.transforms.postprocess"]], "basictokenizer (class in neural_compressor.data.transforms.tokenization)": [[209, "neural_compressor.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.data.transforms.tokenization)": [[209, "neural_compressor.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.data.transforms.tokenization)": [[209, "neural_compressor.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.data.transforms.tokenization)": [[209, "neural_compressor.data.transforms.tokenization.convert_by_vocab"]], "convert_to_unicode() (in module neural_compressor.data.transforms.tokenization)": [[209, "neural_compressor.data.transforms.tokenization.convert_to_unicode"]], "load_vocab() (in module neural_compressor.data.transforms.tokenization)": [[209, "neural_compressor.data.transforms.tokenization.load_vocab"]], "neural_compressor.data.transforms.tokenization": [[209, "module-neural_compressor.data.transforms.tokenization"]], "whitespace_tokenize() (in module neural_compressor.data.transforms.tokenization)": [[209, "neural_compressor.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.TRANSFORMS"], [210, "neural_compressor.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.get_final_text"]], "get_torchvision_map() (in module neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.get_torchvision_map"]], "neural_compressor.data.transforms.transform": [[210, "module-neural_compressor.data.transforms.transform"]], "read_squad_examples() (in module neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.read_squad_examples"]], "transform_registry() (in module neural_compressor.data.transforms.transform)": [[210, "neural_compressor.data.transforms.transform.transform_registry"]], "benchmark (class in neural_compressor.experimental.benchmark)": [[211, "neural_compressor.experimental.benchmark.Benchmark"]], "get_architecture() (in module neural_compressor.experimental.benchmark)": [[211, "neural_compressor.experimental.benchmark.get_architecture"]], "get_bounded_threads() (in module neural_compressor.experimental.benchmark)": [[211, "neural_compressor.experimental.benchmark.get_bounded_threads"]], "get_core_ids() (in module neural_compressor.experimental.benchmark)": [[211, "neural_compressor.experimental.benchmark.get_core_ids"]], "get_physical_ids() (in module neural_compressor.experimental.benchmark)": [[211, "neural_compressor.experimental.benchmark.get_physical_ids"]], "get_threads() (in module neural_compressor.experimental.benchmark)": [[211, "neural_compressor.experimental.benchmark.get_threads"]], "get_threads_per_core() (in module neural_compressor.experimental.benchmark)": [[211, "neural_compressor.experimental.benchmark.get_threads_per_core"]], "neural_compressor.experimental.benchmark": [[211, "module-neural_compressor.experimental.benchmark"]], "set_all_env_var() (in module neural_compressor.experimental.benchmark)": [[211, "neural_compressor.experimental.benchmark.set_all_env_var"]], "set_env_var() (in module neural_compressor.experimental.benchmark)": [[211, "neural_compressor.experimental.benchmark.set_env_var"]], "criterions (class in neural_compressor.experimental.common.criterion)": [[212, "neural_compressor.experimental.common.criterion.Criterions"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[212, "neural_compressor.experimental.common.criterion.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationframework (class in neural_compressor.experimental.common.criterion)": [[212, "neural_compressor.experimental.common.criterion.KnowledgeDistillationFramework"]], "knowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[212, "neural_compressor.experimental.common.criterion.KnowledgeDistillationLoss"]], "pytorchcriterions (class in neural_compressor.experimental.common.criterion)": [[212, "neural_compressor.experimental.common.criterion.PyTorchCriterions"]], "pytorchcrossentropyloss (class in neural_compressor.experimental.common.criterion)": [[212, "neural_compressor.experimental.common.criterion.PyTorchCrossEntropyLoss"]], "pytorchintermediatelayersknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[212, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLoss"]], "pytorchintermediatelayersknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[212, "neural_compressor.experimental.common.criterion.PyTorchIntermediateLayersKnowledgeDistillationLossWrapper"]], "pytorchknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[212, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLoss"]], "pytorchknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[212, "neural_compressor.experimental.common.criterion.PyTorchKnowledgeDistillationLossWrapper"]], "pytorchselfknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[212, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLoss"]], "pytorchselfknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[212, "neural_compressor.experimental.common.criterion.PyTorchSelfKnowledgeDistillationLossWrapper"]], "selfknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[212, "neural_compressor.experimental.common.criterion.SelfKnowledgeDistillationLoss"]], "tensorflowcrossentropyloss (class in neural_compressor.experimental.common.criterion)": [[212, "neural_compressor.experimental.common.criterion.TensorFlowCrossEntropyLoss"]], "tensorflowsparsecategoricalcrossentropy (class in neural_compressor.experimental.common.criterion)": [[212, "neural_compressor.experimental.common.criterion.TensorFlowSparseCategoricalCrossentropy"]], "tensorflowcriterions (class in neural_compressor.experimental.common.criterion)": [[212, "neural_compressor.experimental.common.criterion.TensorflowCriterions"]], "tensorflowknowledgedistillationloss (class in neural_compressor.experimental.common.criterion)": [[212, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLoss"]], "tensorflowknowledgedistillationlossexternal (class in neural_compressor.experimental.common.criterion)": [[212, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossExternal"]], "tensorflowknowledgedistillationlosswrapper (class in neural_compressor.experimental.common.criterion)": [[212, "neural_compressor.experimental.common.criterion.TensorflowKnowledgeDistillationLossWrapper"]], "criterion_registry() (in module neural_compressor.experimental.common.criterion)": [[212, "neural_compressor.experimental.common.criterion.criterion_registry"]], "neural_compressor.experimental.common.criterion": [[212, "module-neural_compressor.experimental.common.criterion"]], "dataloader (class in neural_compressor.experimental.common.dataloader)": [[213, "neural_compressor.experimental.common.dataloader.DataLoader"]], "neural_compressor.experimental.common.dataloader": [[213, "module-neural_compressor.experimental.common.dataloader"]], "neural_compressor.experimental.common": [[214, "module-neural_compressor.experimental.common"]], "metric (class in neural_compressor.experimental.common.metric)": [[215, "neural_compressor.experimental.common.metric.Metric"]], "neural_compressor.experimental.common.metric": [[215, "module-neural_compressor.experimental.common.metric"]], "model (class in neural_compressor.experimental.common.model)": [[216, "neural_compressor.experimental.common.model.Model"]], "neural_compressor.experimental.common.model": [[216, "module-neural_compressor.experimental.common.model"]], "set_backend() (in module neural_compressor.experimental.common.model)": [[216, "neural_compressor.experimental.common.model.set_backend"]], "optimizers (class in neural_compressor.experimental.common.optimizer)": [[217, "neural_compressor.experimental.common.optimizer.Optimizers"]], "pytorchoptimizers (class in neural_compressor.experimental.common.optimizer)": [[217, "neural_compressor.experimental.common.optimizer.PyTorchOptimizers"]], "pytorchsgd (class in neural_compressor.experimental.common.optimizer)": [[217, "neural_compressor.experimental.common.optimizer.PyTorchSGD"]], "tensorflowadam (class in neural_compressor.experimental.common.optimizer)": [[217, "neural_compressor.experimental.common.optimizer.TensorFlowAdam"]], "tensorflowadamw (class in neural_compressor.experimental.common.optimizer)": [[217, "neural_compressor.experimental.common.optimizer.TensorFlowAdamW"]], "tensorflowsgd (class in neural_compressor.experimental.common.optimizer)": [[217, "neural_compressor.experimental.common.optimizer.TensorFlowSGD"]], "tensorflowoptimizers (class in neural_compressor.experimental.common.optimizer)": [[217, "neural_compressor.experimental.common.optimizer.TensorflowOptimizers"]], "neural_compressor.experimental.common.optimizer": [[217, "module-neural_compressor.experimental.common.optimizer"]], "optimizer_registry() (in module neural_compressor.experimental.common.optimizer)": [[217, "neural_compressor.experimental.common.optimizer.optimizer_registry"]], "postprocess (class in neural_compressor.experimental.common.postprocess)": [[218, "neural_compressor.experimental.common.postprocess.Postprocess"]], "neural_compressor.experimental.common.postprocess": [[218, "module-neural_compressor.experimental.common.postprocess"]], "get_activation() (in module neural_compressor.experimental.common.torch_utils)": [[219, "neural_compressor.experimental.common.torch_utils.get_activation"]], "neural_compressor.experimental.common.torch_utils": [[219, "module-neural_compressor.experimental.common.torch_utils"]], "record_output() (in module neural_compressor.experimental.common.torch_utils)": [[219, "neural_compressor.experimental.common.torch_utils.record_output"]], "component (class in neural_compressor.experimental.component)": [[220, "neural_compressor.experimental.component.Component"]], "neural_compressor.experimental.component": [[220, "module-neural_compressor.experimental.component"]], "neural_compressor.experimental.compression": [[221, "module-neural_compressor.experimental.compression"]], "neural_compressor.experimental.compression.pruning": [[222, "module-neural_compressor.experimental.compression.pruning"]], "prepare_pruning() (in module neural_compressor.experimental.compression.pruning)": [[222, "neural_compressor.experimental.compression.pruning.prepare_pruning"]], "save() (in module neural_compressor.experimental.compression.pruning)": [[222, "neural_compressor.experimental.compression.pruning.save"]], "neural_compressor.experimental.contrib": [[223, "module-neural_compressor.experimental.contrib"]], "neural_compressor.experimental.contrib.strategy": [[224, "module-neural_compressor.experimental.contrib.strategy"]], "sigopttunestrategy (class in neural_compressor.experimental.contrib.strategy.sigopt)": [[225, "neural_compressor.experimental.contrib.strategy.sigopt.SigOptTuneStrategy"]], "neural_compressor.experimental.contrib.strategy.sigopt": [[225, "module-neural_compressor.experimental.contrib.strategy.sigopt"]], "tpetunestrategy (class in neural_compressor.experimental.contrib.strategy.tpe)": [[226, "neural_compressor.experimental.contrib.strategy.tpe.TpeTuneStrategy"]], "neural_compressor.experimental.contrib.strategy.tpe": [[226, "module-neural_compressor.experimental.contrib.strategy.tpe"]], "basedataloader (class in neural_compressor.experimental.data.dataloaders.base_dataloader)": [[227, "neural_compressor.experimental.data.dataloaders.base_dataloader.BaseDataLoader"]], "neural_compressor.experimental.data.dataloaders.base_dataloader": [[227, "module-neural_compressor.experimental.data.dataloaders.base_dataloader"]], "neural_compressor.experimental.data.dataloaders.dataloader": [[228, "module-neural_compressor.experimental.data.dataloaders.dataloader"]], "defaultdataloader (class in neural_compressor.experimental.data.dataloaders.default_dataloader)": [[229, "neural_compressor.experimental.data.dataloaders.default_dataloader.DefaultDataLoader"]], "default_collate() (in module neural_compressor.experimental.data.dataloaders.default_dataloader)": [[229, "neural_compressor.experimental.data.dataloaders.default_dataloader.default_collate"]], "neural_compressor.experimental.data.dataloaders.default_dataloader": [[229, "module-neural_compressor.experimental.data.dataloaders.default_dataloader"]], "fetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[230, "neural_compressor.experimental.data.dataloaders.fetcher.Fetcher"]], "indexfetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[230, "neural_compressor.experimental.data.dataloaders.fetcher.IndexFetcher"]], "iterablefetcher (class in neural_compressor.experimental.data.dataloaders.fetcher)": [[230, "neural_compressor.experimental.data.dataloaders.fetcher.IterableFetcher"]], "neural_compressor.experimental.data.dataloaders.fetcher": [[230, "module-neural_compressor.experimental.data.dataloaders.fetcher"]], "neural_compressor.experimental.data.dataloaders": [[231, "module-neural_compressor.experimental.data.dataloaders"]], "mxnetdataloader (class in neural_compressor.experimental.data.dataloaders.mxnet_dataloader)": [[232, "neural_compressor.experimental.data.dataloaders.mxnet_dataloader.MXNetDataLoader"]], "neural_compressor.experimental.data.dataloaders.mxnet_dataloader": [[232, "module-neural_compressor.experimental.data.dataloaders.mxnet_dataloader"]], "onnxrtbertdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[233, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTBertDataLoader"]], "onnxrtdataloader (class in neural_compressor.experimental.data.dataloaders.onnxrt_dataloader)": [[233, "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader.ONNXRTDataLoader"]], "neural_compressor.experimental.data.dataloaders.onnxrt_dataloader": [[233, "module-neural_compressor.experimental.data.dataloaders.onnxrt_dataloader"]], "pytorchdataloader (class in neural_compressor.experimental.data.dataloaders.pytorch_dataloader)": [[234, "neural_compressor.experimental.data.dataloaders.pytorch_dataloader.PyTorchDataLoader"]], "neural_compressor.experimental.data.dataloaders.pytorch_dataloader": [[234, "module-neural_compressor.experimental.data.dataloaders.pytorch_dataloader"]], "batchsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[235, "neural_compressor.experimental.data.dataloaders.sampler.BatchSampler"]], "iterablesampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[235, "neural_compressor.experimental.data.dataloaders.sampler.IterableSampler"]], "sampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[235, "neural_compressor.experimental.data.dataloaders.sampler.Sampler"]], "sequentialsampler (class in neural_compressor.experimental.data.dataloaders.sampler)": [[235, "neural_compressor.experimental.data.dataloaders.sampler.SequentialSampler"]], "neural_compressor.experimental.data.dataloaders.sampler": [[235, "module-neural_compressor.experimental.data.dataloaders.sampler"]], "tfdatadataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[236, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TFDataDataLoader"]], "tensorflowbertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[236, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowBertDataLoader"]], "tensorflowdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[236, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowDataLoader"]], "tensorflowmodelzoobertdataloader (class in neural_compressor.experimental.data.dataloaders.tensorflow_dataloader)": [[236, "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader.TensorflowModelZooBertDataLoader"]], "neural_compressor.experimental.data.dataloaders.tensorflow_dataloader": [[236, "module-neural_compressor.experimental.data.dataloaders.tensorflow_dataloader"]], "inputfeatures (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[237, "neural_compressor.experimental.data.datasets.bert_dataset.InputFeatures"]], "onnxrtbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[237, "neural_compressor.experimental.data.datasets.bert_dataset.ONNXRTBertDataset"]], "parsedecodebert (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[237, "neural_compressor.experimental.data.datasets.bert_dataset.ParseDecodeBert"]], "pytorchbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[237, "neural_compressor.experimental.data.datasets.bert_dataset.PytorchBertDataset"]], "tensorflowbertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[237, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowBertDataset"]], "tensorflowmodelzoobertdataset (class in neural_compressor.experimental.data.datasets.bert_dataset)": [[237, "neural_compressor.experimental.data.datasets.bert_dataset.TensorflowModelZooBertDataset"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[237, "neural_compressor.experimental.data.datasets.bert_dataset.convert_examples_to_features"]], "load_and_cache_examples() (in module neural_compressor.experimental.data.datasets.bert_dataset)": [[237, "neural_compressor.experimental.data.datasets.bert_dataset.load_and_cache_examples"]], "neural_compressor.experimental.data.datasets.bert_dataset": [[237, "module-neural_compressor.experimental.data.datasets.bert_dataset"]], "coconpy (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[238, "neural_compressor.experimental.data.datasets.coco_dataset.COCONpy"]], "cocoraw (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[238, "neural_compressor.experimental.data.datasets.coco_dataset.COCORaw"]], "cocorecorddataset (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[238, "neural_compressor.experimental.data.datasets.coco_dataset.COCORecordDataset"]], "parsedecodecoco (class in neural_compressor.experimental.data.datasets.coco_dataset)": [[238, "neural_compressor.experimental.data.datasets.coco_dataset.ParseDecodeCoco"]], "neural_compressor.experimental.data.datasets.coco_dataset": [[238, "module-neural_compressor.experimental.data.datasets.coco_dataset"]], "cifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[239, "neural_compressor.experimental.data.datasets.dataset.CIFAR10"]], "cifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[239, "neural_compressor.experimental.data.datasets.dataset.CIFAR100"]], "dataset (class in neural_compressor.experimental.data.datasets.dataset)": [[239, "neural_compressor.experimental.data.datasets.dataset.Dataset"]], "datasets (class in neural_compressor.experimental.data.datasets.dataset)": [[239, "neural_compressor.experimental.data.datasets.dataset.Datasets"]], "fashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[239, "neural_compressor.experimental.data.datasets.dataset.FashionMNIST"]], "imagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[239, "neural_compressor.experimental.data.datasets.dataset.ImageFolder"]], "iterabledataset (class in neural_compressor.experimental.data.datasets.dataset)": [[239, "neural_compressor.experimental.data.datasets.dataset.IterableDataset"]], "mnist (class in neural_compressor.experimental.data.datasets.dataset)": [[239, "neural_compressor.experimental.data.datasets.dataset.MNIST"]], "mxnetcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[239, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR10"]], "mxnetcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[239, "neural_compressor.experimental.data.datasets.dataset.MXNetCIFAR100"]], "mxnetdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[239, "neural_compressor.experimental.data.datasets.dataset.MXNetDatasets"]], "mxnetfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[239, "neural_compressor.experimental.data.datasets.dataset.MXNetFashionMNIST"]], "mxnetimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[239, "neural_compressor.experimental.data.datasets.dataset.MXNetImageFolder"]], "mxnetmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[239, "neural_compressor.experimental.data.datasets.dataset.MXNetMNIST"]], "onnxrtitdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[239, "neural_compressor.experimental.data.datasets.dataset.ONNXRTITDatasets"]], "onnxrtqldatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[239, "neural_compressor.experimental.data.datasets.dataset.ONNXRTQLDatasets"]], "pytorchdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[239, "neural_compressor.experimental.data.datasets.dataset.PyTorchDatasets"]], "pytorchcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[239, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR10"]], "pytorchcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[239, "neural_compressor.experimental.data.datasets.dataset.PytorchCIFAR100"]], "pytorchfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[239, "neural_compressor.experimental.data.datasets.dataset.PytorchFashionMNIST"]], "pytorchmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[239, "neural_compressor.experimental.data.datasets.dataset.PytorchMNIST"]], "pytorchmxnetwrapdataset (class in neural_compressor.experimental.data.datasets.dataset)": [[239, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapDataset"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.datasets.dataset)": [[239, "neural_compressor.experimental.data.datasets.dataset.PytorchMxnetWrapFunction"]], "tensorflowcifar10 (class in neural_compressor.experimental.data.datasets.dataset)": [[239, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR10"]], "tensorflowcifar100 (class in neural_compressor.experimental.data.datasets.dataset)": [[239, "neural_compressor.experimental.data.datasets.dataset.TensorflowCIFAR100"]], "tensorflowdatasets (class in neural_compressor.experimental.data.datasets.dataset)": [[239, "neural_compressor.experimental.data.datasets.dataset.TensorflowDatasets"]], "tensorflowfashionmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[239, "neural_compressor.experimental.data.datasets.dataset.TensorflowFashionMNIST"]], "tensorflowimagefolder (class in neural_compressor.experimental.data.datasets.dataset)": [[239, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageFolder"]], "tensorflowimagerecord (class in neural_compressor.experimental.data.datasets.dataset)": [[239, "neural_compressor.experimental.data.datasets.dataset.TensorflowImageRecord"]], "tensorflowmnist (class in neural_compressor.experimental.data.datasets.dataset)": [[239, "neural_compressor.experimental.data.datasets.dataset.TensorflowMNIST"]], "tensorflowtfrecorddataset (class in neural_compressor.experimental.data.datasets.dataset)": [[239, "neural_compressor.experimental.data.datasets.dataset.TensorflowTFRecordDataset"]], "tensorflowvocrecord (class in neural_compressor.experimental.data.datasets.dataset)": [[239, "neural_compressor.experimental.data.datasets.dataset.TensorflowVOCRecord"]], "calculate_md5() (in module neural_compressor.experimental.data.datasets.dataset)": [[239, "neural_compressor.experimental.data.datasets.dataset.calculate_md5"]], "check_integrity() (in module neural_compressor.experimental.data.datasets.dataset)": [[239, "neural_compressor.experimental.data.datasets.dataset.check_integrity"]], "dataset_registry() (in module neural_compressor.experimental.data.datasets.dataset)": [[239, "neural_compressor.experimental.data.datasets.dataset.dataset_registry"]], "download_url() (in module neural_compressor.experimental.data.datasets.dataset)": [[239, "neural_compressor.experimental.data.datasets.dataset.download_url"]], "framework_datasets (in module neural_compressor.experimental.data.datasets.dataset)": [[239, "neural_compressor.experimental.data.datasets.dataset.framework_datasets"]], "gen_bar_updater() (in module neural_compressor.experimental.data.datasets.dataset)": [[239, "neural_compressor.experimental.data.datasets.dataset.gen_bar_updater"]], "neural_compressor.experimental.data.datasets.dataset": [[239, "module-neural_compressor.experimental.data.datasets.dataset"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset)": [[240, "neural_compressor.experimental.data.datasets.dummy_dataset.DummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset": [[240, "module-neural_compressor.experimental.data.datasets.dummy_dataset"]], "dummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[241, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.DummyDataset"]], "sparsedummydataset (class in neural_compressor.experimental.data.datasets.dummy_dataset_v2)": [[241, "neural_compressor.experimental.data.datasets.dummy_dataset_v2.SparseDummyDataset"]], "neural_compressor.experimental.data.datasets.dummy_dataset_v2": [[241, "module-neural_compressor.experimental.data.datasets.dummy_dataset_v2"]], "imagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[242, "neural_compressor.experimental.data.datasets.imagenet_dataset.ImagenetRaw"]], "mxnetimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[242, "neural_compressor.experimental.data.datasets.imagenet_dataset.MXNetImagenetRaw"]], "onnxrtimagenetdataset (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[242, "neural_compressor.experimental.data.datasets.imagenet_dataset.ONNXRTImagenetDataset"]], "pytorchimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[242, "neural_compressor.experimental.data.datasets.imagenet_dataset.PytorchImagenetRaw"]], "tensorflowimagenetdataset (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[242, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetDataset"]], "tensorflowimagenetraw (class in neural_compressor.experimental.data.datasets.imagenet_dataset)": [[242, "neural_compressor.experimental.data.datasets.imagenet_dataset.TensorflowImagenetRaw"]], "neural_compressor.experimental.data.datasets.imagenet_dataset": [[242, "module-neural_compressor.experimental.data.datasets.imagenet_dataset"]], "neural_compressor.experimental.data.datasets": [[243, "module-neural_compressor.experimental.data.datasets"]], "styletransferdataset (class in neural_compressor.experimental.data.datasets.style_transfer_dataset)": [[244, "neural_compressor.experimental.data.datasets.style_transfer_dataset.StyleTransferDataset"]], "neural_compressor.experimental.data.datasets.style_transfer_dataset": [[244, "module-neural_compressor.experimental.data.datasets.style_transfer_dataset"]], "labelbalancecocorawfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[245, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORawFilter"]], "labelbalancecocorecordfilter (class in neural_compressor.experimental.data.filters.coco_filter)": [[245, "neural_compressor.experimental.data.filters.coco_filter.LabelBalanceCOCORecordFilter"]], "neural_compressor.experimental.data.filters.coco_filter": [[245, "module-neural_compressor.experimental.data.filters.coco_filter"]], "filters (class in neural_compressor.experimental.data.filters.filter)": [[246, "neural_compressor.experimental.data.filters.filter.FILTERS"]], "filter (class in neural_compressor.experimental.data.filters.filter)": [[246, "neural_compressor.experimental.data.filters.filter.Filter"]], "mxnetfilters (class in neural_compressor.experimental.data.filters.filter)": [[246, "neural_compressor.experimental.data.filters.filter.MXNetFilters"]], "onnxrtitfilters (class in neural_compressor.experimental.data.filters.filter)": [[246, "neural_compressor.experimental.data.filters.filter.ONNXRTITFilters"]], "onnxrtqlfilters (class in neural_compressor.experimental.data.filters.filter)": [[246, "neural_compressor.experimental.data.filters.filter.ONNXRTQLFilters"]], "pytorchfilters (class in neural_compressor.experimental.data.filters.filter)": [[246, "neural_compressor.experimental.data.filters.filter.PyTorchFilters"]], "tensorflowfilters (class in neural_compressor.experimental.data.filters.filter)": [[246, "neural_compressor.experimental.data.filters.filter.TensorflowFilters"]], "filter_registry() (in module neural_compressor.experimental.data.filters.filter)": [[246, "neural_compressor.experimental.data.filters.filter.filter_registry"]], "neural_compressor.experimental.data.filters.filter": [[246, "module-neural_compressor.experimental.data.filters.filter"]], "neural_compressor.experimental.data.filters": [[247, "module-neural_compressor.experimental.data.filters"]], "neural_compressor.experimental.data": [[248, "module-neural_compressor.experimental.data"]], "bilinearimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[249, "neural_compressor.experimental.data.transforms.imagenet_transform.BilinearImagenetTransform"]], "labelshift (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[249, "neural_compressor.experimental.data.transforms.imagenet_transform.LabelShift"]], "onnxresizecropimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[249, "neural_compressor.experimental.data.transforms.imagenet_transform.ONNXResizeCropImagenetTransform"]], "onnxbilinearimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[249, "neural_compressor.experimental.data.transforms.imagenet_transform.OnnxBilinearImagenetTransform"]], "parsedecodeimagenet (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[249, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenet"]], "parsedecodeimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[249, "neural_compressor.experimental.data.transforms.imagenet_transform.ParseDecodeImagenetTransform"]], "quantizedinput (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[249, "neural_compressor.experimental.data.transforms.imagenet_transform.QuantizedInput"]], "resizewithaspectratio (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[249, "neural_compressor.experimental.data.transforms.imagenet_transform.ResizeWithAspectRatio"]], "tensorflowresizecropimagenettransform (class in neural_compressor.experimental.data.transforms.imagenet_transform)": [[249, "neural_compressor.experimental.data.transforms.imagenet_transform.TensorflowResizeCropImagenetTransform"]], "neural_compressor.experimental.data.transforms.imagenet_transform": [[249, "module-neural_compressor.experimental.data.transforms.imagenet_transform"]], "neural_compressor.experimental.data.transforms": [[250, "module-neural_compressor.experimental.data.transforms"]], "basictokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[251, "neural_compressor.experimental.data.transforms.tokenization.BasicTokenizer"]], "fulltokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[251, "neural_compressor.experimental.data.transforms.tokenization.FullTokenizer"]], "wordpiecetokenizer (class in neural_compressor.experimental.data.transforms.tokenization)": [[251, "neural_compressor.experimental.data.transforms.tokenization.WordpieceTokenizer"]], "convert_by_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[251, "neural_compressor.experimental.data.transforms.tokenization.convert_by_vocab"]], "convert_to_unicode() (in module neural_compressor.experimental.data.transforms.tokenization)": [[251, "neural_compressor.experimental.data.transforms.tokenization.convert_to_unicode"]], "load_vocab() (in module neural_compressor.experimental.data.transforms.tokenization)": [[251, "neural_compressor.experimental.data.transforms.tokenization.load_vocab"]], "neural_compressor.experimental.data.transforms.tokenization": [[251, "module-neural_compressor.experimental.data.transforms.tokenization"]], "whitespace_tokenize() (in module neural_compressor.experimental.data.transforms.tokenization)": [[251, "neural_compressor.experimental.data.transforms.tokenization.whitespace_tokenize"]], "alignimagechanneltransform (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.AlignImageChannelTransform"]], "basetransform (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.BaseTransform"]], "castonnxtransform (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.CastONNXTransform"]], "castpytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.CastPyTorchTransform"]], "casttftransform (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.CastTFTransform"]], "centercroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.CenterCropTFTransform"]], "centercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.CenterCropTransform"]], "collecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.CollectTransform"]], "composetransform (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.ComposeTransform"]], "cropresizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.CropResizeTFTransform"]], "cropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.CropResizeTransform"]], "croptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.CropToBoundingBox"]], "inputfeatures (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.InputFeatures"]], "mxnetcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.MXNetCropResizeTransform"]], "mxnetcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.MXNetCropToBoundingBox"]], "mxnetnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.MXNetNormalizeTransform"]], "mxnettransforms (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.MXNetTransforms"]], "mxnettranspose (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.MXNetTranspose"]], "normalizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.NormalizeTFTransform"]], "normalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.NormalizeTransform"]], "onnxrtcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.ONNXRTCropToBoundingBox"]], "onnxrtittransforms (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.ONNXRTITTransforms"]], "onnxrtqltransforms (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.ONNXRTQLTransforms"]], "paddedcentercroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.PaddedCenterCropTransform"]], "parsedecodevoctransform (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.ParseDecodeVocTransform"]], "pytorchalignimagechannel (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.PyTorchAlignImageChannel"]], "pytorchcropresizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.PyTorchCropResizeTransform"]], "pytorchnormalizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.PyTorchNormalizeTransform"]], "pytorchtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.PyTorchTransforms"]], "pytorchtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.PyTorchTranspose"]], "pytorchmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetTransform"]], "pytorchmxnetwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.PytorchMxnetWrapFunction"]], "randomcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.RandomCropTFTransform"]], "randomcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.RandomCropTransform"]], "randomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.RandomHorizontalFlip"]], "randomresizedcropmxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropMXNetTransform"]], "randomresizedcroppytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropPytorchTransform"]], "randomresizedcroptftransform (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTFTransform"]], "randomresizedcroptransform (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.RandomResizedCropTransform"]], "randomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.RandomVerticalFlip"]], "rescalekeraspretraintransform (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.RescaleKerasPretrainTransform"]], "rescaletftransform (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.RescaleTFTransform"]], "rescaletransform (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.RescaleTransform"]], "resizemxnettransform (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.ResizeMXNetTransform"]], "resizepytorchtransform (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.ResizePytorchTransform"]], "resizetftransform (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.ResizeTFTransform"]], "resizetransform (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.ResizeTransform"]], "resizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.ResizeWithRatio"]], "squadexample (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.SquadExample"]], "tfmodelzoocollecttransform (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.TFModelZooCollectTransform"]], "tfsquadv1modelzooposttransform (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.TFSquadV1ModelZooPostTransform"]], "tfsquadv1posttransform (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.TFSquadV1PostTransform"]], "transforms (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.TRANSFORMS"], [252, "neural_compressor.experimental.data.transforms.transform.Transforms"]], "tensorflowcroptoboundingbox (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.TensorflowCropToBoundingBox"]], "tensorflowrandomhorizontalflip (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomHorizontalFlip"]], "tensorflowrandomverticalflip (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.TensorflowRandomVerticalFlip"]], "tensorflowresizewithratio (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.TensorflowResizeWithRatio"]], "tensorflowtransform (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.TensorflowTransform"]], "tensorflowtransforms (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.TensorflowTransforms"]], "tensorflowtranspose (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.TensorflowTranspose"]], "tensorflowwrapfunction (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.TensorflowWrapFunction"]], "toarray (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.ToArray"]], "tondarraytransform (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.ToNDArrayTransform"]], "transpose (class in neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.Transpose"]], "convert_examples_to_features() (in module neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.convert_examples_to_features"]], "get_final_text() (in module neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.get_final_text"]], "get_torchvision_map() (in module neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.get_torchvision_map"]], "neural_compressor.experimental.data.transforms.transform": [[252, "module-neural_compressor.experimental.data.transforms.transform"]], "read_squad_examples() (in module neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.read_squad_examples"]], "transform_registry() (in module neural_compressor.experimental.data.transforms.transform)": [[252, "neural_compressor.experimental.data.transforms.transform.transform_registry"]], "distillation (class in neural_compressor.experimental.distillation)": [[253, "neural_compressor.experimental.distillation.Distillation"]], "_epoch_ran (neural_compressor.experimental.distillation.distillation attribute)": [[253, "neural_compressor.experimental.distillation.Distillation._epoch_ran"]], "best_model (neural_compressor.experimental.distillation.distillation attribute)": [[253, "neural_compressor.experimental.distillation.Distillation.best_model"]], "best_score (neural_compressor.experimental.distillation.distillation attribute)": [[253, "neural_compressor.experimental.distillation.Distillation.best_score"]], "eval_frequency (neural_compressor.experimental.distillation.distillation attribute)": [[253, "neural_compressor.experimental.distillation.Distillation.eval_frequency"]], "neural_compressor.experimental.distillation": [[253, "module-neural_compressor.experimental.distillation"]], "neural_compressor.experimental.export": [[254, "module-neural_compressor.experimental.export"]], "check_model() (in module neural_compressor.experimental.export.qlinear2qdq)": [[255, "neural_compressor.experimental.export.qlinear2qdq.check_model"]], "neural_compressor.experimental.export.qlinear2qdq": [[255, "module-neural_compressor.experimental.export.qlinear2qdq"]], "onnx_qlinear_to_qdq() (in module neural_compressor.experimental.export.qlinear2qdq)": [[255, "neural_compressor.experimental.export.qlinear2qdq.onnx_qlinear_to_qdq"]], "neural_compressor.experimental.export.tf2onnx": [[256, "module-neural_compressor.experimental.export.tf2onnx"]], "tf_to_fp32_onnx() (in module neural_compressor.experimental.export.tf2onnx)": [[256, "neural_compressor.experimental.export.tf2onnx.tf_to_fp32_onnx"]], "tf_to_int8_onnx() (in module neural_compressor.experimental.export.tf2onnx)": [[256, "neural_compressor.experimental.export.tf2onnx.tf_to_int8_onnx"]], "build_scale_mapping() (in module neural_compressor.experimental.export.torch2onnx)": [[257, "neural_compressor.experimental.export.torch2onnx.build_scale_mapping"]], "get_node_mapping() (in module neural_compressor.experimental.export.torch2onnx)": [[257, "neural_compressor.experimental.export.torch2onnx.get_node_mapping"]], "get_quantizable_onnx_ops() (in module neural_compressor.experimental.export.torch2onnx)": [[257, "neural_compressor.experimental.export.torch2onnx.get_quantizable_onnx_ops"]], "neural_compressor.experimental.export.torch2onnx": [[257, "module-neural_compressor.experimental.export.torch2onnx"]], "qdq_fp32_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[257, "neural_compressor.experimental.export.torch2onnx.qdq_fp32_bias"]], "qdq_fp32_bias_qdq() (in module neural_compressor.experimental.export.torch2onnx)": [[257, "neural_compressor.experimental.export.torch2onnx.qdq_fp32_bias_qdq"]], "qdq_int32_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[257, "neural_compressor.experimental.export.torch2onnx.qdq_int32_bias"]], "recalculate_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[257, "neural_compressor.experimental.export.torch2onnx.recalculate_bias"]], "remove_nodes_by_name() (in module neural_compressor.experimental.export.torch2onnx)": [[257, "neural_compressor.experimental.export.torch2onnx.remove_nodes_by_name"]], "set_data_type() (in module neural_compressor.experimental.export.torch2onnx)": [[257, "neural_compressor.experimental.export.torch2onnx.set_data_type"]], "set_scale_info() (in module neural_compressor.experimental.export.torch2onnx)": [[257, "neural_compressor.experimental.export.torch2onnx.set_scale_info"]], "sub_graph_with_int32_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[257, "neural_compressor.experimental.export.torch2onnx.sub_graph_with_int32_bias"]], "torch_to_fp32_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[257, "neural_compressor.experimental.export.torch2onnx.torch_to_fp32_onnx"]], "torch_to_int8_onnx() (in module neural_compressor.experimental.export.torch2onnx)": [[257, "neural_compressor.experimental.export.torch2onnx.torch_to_int8_onnx"]], "update_weight_bias() (in module neural_compressor.experimental.export.torch2onnx)": [[257, "neural_compressor.experimental.export.torch2onnx.update_weight_bias"]], "dummydatareader (class in neural_compressor.experimental.export.utils)": [[258, "neural_compressor.experimental.export.utils.DummyDataReader"]], "onnx2numpy_dtype() (in module neural_compressor.experimental.export.utils)": [[258, "neural_compressor.experimental.export.utils.ONNX2Numpy_dtype"]], "neural_compressor.experimental.export.utils": [[258, "module-neural_compressor.experimental.export.utils"]], "graph_optimization (class in neural_compressor.experimental.graph_optimization)": [[259, "neural_compressor.experimental.graph_optimization.Graph_Optimization"]], "neural_compressor.experimental.graph_optimization": [[259, "module-neural_compressor.experimental.graph_optimization"]], "neural_compressor.experimental": [[260, "module-neural_compressor.experimental"]], "bleu (class in neural_compressor.experimental.metric.bleu)": [[261, "neural_compressor.experimental.metric.bleu.BLEU"]], "unicoderegex (class in neural_compressor.experimental.metric.bleu)": [[261, "neural_compressor.experimental.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.experimental.metric.bleu)": [[261, "neural_compressor.experimental.metric.bleu.bleu_tokenize"]], "labels (neural_compressor.experimental.metric.bleu.bleu attribute)": [[261, "neural_compressor.experimental.metric.bleu.BLEU.labels"]], "neural_compressor.experimental.metric.bleu": [[261, "module-neural_compressor.experimental.metric.bleu"]], "nondigit_punct_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[261, "neural_compressor.experimental.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "predictions (neural_compressor.experimental.metric.bleu.bleu attribute)": [[261, "neural_compressor.experimental.metric.bleu.BLEU.predictions"]], "punct_nondigit_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[261, "neural_compressor.experimental.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "symbol_re (neural_compressor.experimental.metric.bleu.unicoderegex attribute)": [[261, "neural_compressor.experimental.metric.bleu.UnicodeRegex.symbol_re"]], "compute_bleu() (in module neural_compressor.experimental.metric.bleu_util)": [[262, "neural_compressor.experimental.metric.bleu_util.compute_bleu"]], "neural_compressor.experimental.metric.bleu_util": [[262, "module-neural_compressor.experimental.metric.bleu_util"]], "neural_compressor.experimental.metric.coco_label_map": [[263, "module-neural_compressor.experimental.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.experimental.metric.coco_tools)": [[264, "neural_compressor.experimental.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.experimental.metric.coco_tools)": [[264, "neural_compressor.experimental.metric.coco_tools.COCOWrapper"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.experimental.metric.coco_tools)": [[264, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.experimental.metric.coco_tools)": [[264, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.experimental.metric.coco_tools)": [[264, "neural_compressor.experimental.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "dataset (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[264, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.experimental.metric.coco_tools.cocowrapper attribute)": [[264, "neural_compressor.experimental.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.experimental.metric.coco_tools": [[264, "module-neural_compressor.experimental.metric.coco_tools"]], "evaluate() (in module neural_compressor.experimental.metric.evaluate_squad)": [[265, "neural_compressor.experimental.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[265, "neural_compressor.experimental.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.experimental.metric.evaluate_squad)": [[265, "neural_compressor.experimental.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.evaluate_squad)": [[265, "neural_compressor.experimental.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.evaluate_squad": [[265, "module-neural_compressor.experimental.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.experimental.metric.f1)": [[266, "neural_compressor.experimental.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.experimental.metric.f1)": [[266, "neural_compressor.experimental.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.experimental.metric.f1)": [[266, "neural_compressor.experimental.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.experimental.metric.f1": [[266, "module-neural_compressor.experimental.metric.f1"]], "normalize_answer() (in module neural_compressor.experimental.metric.f1)": [[266, "neural_compressor.experimental.metric.f1.normalize_answer"]], "neural_compressor.experimental.metric": [[267, "module-neural_compressor.experimental.metric"]], "accuracy (class in neural_compressor.experimental.metric.metric)": [[268, "neural_compressor.experimental.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.experimental.metric.metric)": [[268, "neural_compressor.experimental.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.experimental.metric.metric)": [[268, "neural_compressor.experimental.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.experimental.metric.metric)": [[268, "neural_compressor.experimental.metric.metric.F1"]], "generaltopk (class in neural_compressor.experimental.metric.metric)": [[268, "neural_compressor.experimental.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.experimental.metric.metric)": [[268, "neural_compressor.experimental.metric.metric.Loss"]], "mae (class in neural_compressor.experimental.metric.metric)": [[268, "neural_compressor.experimental.metric.metric.MAE"]], "metrics (class in neural_compressor.experimental.metric.metric)": [[268, "neural_compressor.experimental.metric.metric.METRICS"]], "mse (class in neural_compressor.experimental.metric.metric)": [[268, "neural_compressor.experimental.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.experimental.metric.metric)": [[268, "neural_compressor.experimental.metric.metric.MXNetMetrics"]], "onnxrtglue (class in neural_compressor.experimental.metric.metric)": [[268, "neural_compressor.experimental.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.experimental.metric.metric)": [[268, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.experimental.metric.metric)": [[268, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.experimental.metric.metric)": [[268, "neural_compressor.experimental.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.experimental.metric.metric)": [[268, "neural_compressor.experimental.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.experimental.metric.metric)": [[268, "neural_compressor.experimental.metric.metric.RMSE"]], "roc (class in neural_compressor.experimental.metric.metric)": [[268, "neural_compressor.experimental.metric.metric.ROC"]], "squadf1 (class in neural_compressor.experimental.metric.metric)": [[268, "neural_compressor.experimental.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.experimental.metric.metric)": [[268, "neural_compressor.experimental.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.experimental.metric.metric)": [[268, "neural_compressor.experimental.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.experimental.metric.metric)": [[268, "neural_compressor.experimental.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.experimental.metric.metric)": [[268, "neural_compressor.experimental.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.experimental.metric.metric)": [[268, "neural_compressor.experimental.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.experimental.metric.metric)": [[268, "neural_compressor.experimental.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.experimental.metric.metric)": [[268, "neural_compressor.experimental.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.experimental.metric.metric)": [[268, "neural_compressor.experimental.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.experimental.metric.metric.mae attribute)": [[268, "neural_compressor.experimental.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.experimental.metric.metric.mse attribute)": [[268, "neural_compressor.experimental.metric.metric.MSE.compare_label"]], "k (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[268, "neural_compressor.experimental.metric.metric.GeneralTopK.k"]], "k (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[268, "neural_compressor.experimental.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[268, "neural_compressor.experimental.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mae attribute)": [[268, "neural_compressor.experimental.metric.metric.MAE.label_list"]], "label_list (neural_compressor.experimental.metric.metric.mse attribute)": [[268, "neural_compressor.experimental.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.experimental.metric.metric)": [[268, "neural_compressor.experimental.metric.metric.mIOU"]], "metric_registry() (in module neural_compressor.experimental.metric.metric)": [[268, "neural_compressor.experimental.metric.metric.metric_registry"]], "metrics (neural_compressor.experimental.metric.metric.metrics attribute)": [[268, "neural_compressor.experimental.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.experimental.metric.metric.mxnetmetrics attribute)": [[268, "neural_compressor.experimental.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtitmetrics attribute)": [[268, "neural_compressor.experimental.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.onnxrtqlmetrics attribute)": [[268, "neural_compressor.experimental.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.pytorchmetrics attribute)": [[268, "neural_compressor.experimental.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.experimental.metric.metric.tensorflowmetrics attribute)": [[268, "neural_compressor.experimental.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.experimental.metric.metric.rmse attribute)": [[268, "neural_compressor.experimental.metric.metric.RMSE.mse"]], "neural_compressor.experimental.metric.metric": [[268, "module-neural_compressor.experimental.metric.metric"]], "num_correct (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[268, "neural_compressor.experimental.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[268, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.experimental.metric.metric.generaltopk attribute)": [[268, "neural_compressor.experimental.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.experimental.metric.metric.tensorflowtopk attribute)": [[268, "neural_compressor.experimental.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.experimental.metric.metric.accuracy attribute)": [[268, "neural_compressor.experimental.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mae attribute)": [[268, "neural_compressor.experimental.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.experimental.metric.metric.mse attribute)": [[268, "neural_compressor.experimental.metric.metric.MSE.pred_list"]], "sample (neural_compressor.experimental.metric.metric.accuracy attribute)": [[268, "neural_compressor.experimental.metric.metric.Accuracy.sample"]], "sample (neural_compressor.experimental.metric.metric.loss attribute)": [[268, "neural_compressor.experimental.metric.metric.Loss.sample"]], "sum (neural_compressor.experimental.metric.metric.loss attribute)": [[268, "neural_compressor.experimental.metric.metric.Loss.sum"]], "mixedprecision (class in neural_compressor.experimental.mixed_precision)": [[269, "neural_compressor.experimental.mixed_precision.MixedPrecision"]], "neural_compressor.experimental.mixed_precision": [[269, "module-neural_compressor.experimental.mixed_precision"]], "modelconversion (class in neural_compressor.experimental.model_conversion)": [[270, "neural_compressor.experimental.model_conversion.ModelConversion"]], "neural_compressor.experimental.model_conversion": [[270, "module-neural_compressor.experimental.model_conversion"]], "basicnas (class in neural_compressor.experimental.nas.basic_nas)": [[271, "neural_compressor.experimental.nas.basic_nas.BasicNAS"]], "neural_compressor.experimental.nas.basic_nas": [[271, "module-neural_compressor.experimental.nas.basic_nas"]], "dynas (class in neural_compressor.experimental.nas.dynas)": [[272, "neural_compressor.experimental.nas.dynas.DyNAS"]], "neural_compressor.experimental.nas.dynas": [[272, "module-neural_compressor.experimental.nas.dynas"]], "neural_compressor.experimental.nas": [[273, "module-neural_compressor.experimental.nas"]], "nas (class in neural_compressor.experimental.nas.nas)": [[274, "neural_compressor.experimental.nas.nas.NAS"]], "nasbase (class in neural_compressor.experimental.nas.nas)": [[274, "neural_compressor.experimental.nas.nas.NASBase"]], "neural_compressor.experimental.nas.nas": [[274, "module-neural_compressor.experimental.nas.nas"]], "create_search_space_pool() (in module neural_compressor.experimental.nas.nas_utils)": [[275, "neural_compressor.experimental.nas.nas_utils.create_search_space_pool"]], "find_pareto_front() (in module neural_compressor.experimental.nas.nas_utils)": [[275, "neural_compressor.experimental.nas.nas_utils.find_pareto_front"]], "nas_registry() (in module neural_compressor.experimental.nas.nas_utils)": [[275, "neural_compressor.experimental.nas.nas_utils.nas_registry"]], "neural_compressor.experimental.nas.nas_utils": [[275, "module-neural_compressor.experimental.nas.nas_utils"]], "bayesianoptimizationsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[276, "neural_compressor.experimental.nas.search_algorithms.BayesianOptimizationSearcher"]], "gridsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[276, "neural_compressor.experimental.nas.search_algorithms.GridSearcher"]], "randomsearcher (class in neural_compressor.experimental.nas.search_algorithms)": [[276, "neural_compressor.experimental.nas.search_algorithms.RandomSearcher"]], "searcher (class in neural_compressor.experimental.nas.search_algorithms)": [[276, "neural_compressor.experimental.nas.search_algorithms.Searcher"]], "neural_compressor.experimental.nas.search_algorithms": [[276, "module-neural_compressor.experimental.nas.search_algorithms"]], "gradientsensitivitypruner (class in neural_compressor.experimental.pruner_legacy.gradient_sensitivity)": [[277, "neural_compressor.experimental.pruner_legacy.gradient_sensitivity.GradientSensitivityPruner"]], "neural_compressor.experimental.pruner_legacy.gradient_sensitivity": [[277, "module-neural_compressor.experimental.pruner_legacy.gradient_sensitivity"]], "grouplassopruner (class in neural_compressor.experimental.pruner_legacy.group_lasso)": [[278, "neural_compressor.experimental.pruner_legacy.group_lasso.GroupLassoPruner"]], "neural_compressor.experimental.pruner_legacy.group_lasso": [[278, "module-neural_compressor.experimental.pruner_legacy.group_lasso"]], "neural_compressor.experimental.pruner_legacy": [[279, "module-neural_compressor.experimental.pruner_legacy"]], "basicmagnitudepruner (class in neural_compressor.experimental.pruner_legacy.magnitude)": [[280, "neural_compressor.experimental.pruner_legacy.magnitude.BasicMagnitudePruner"]], "neural_compressor.experimental.pruner_legacy.magnitude": [[280, "module-neural_compressor.experimental.pruner_legacy.magnitude"]], "patternlockpruner (class in neural_compressor.experimental.pruner_legacy.pattern_lock)": [[281, "neural_compressor.experimental.pruner_legacy.pattern_lock.PatternLockPruner"]], "neural_compressor.experimental.pruner_legacy.pattern_lock": [[281, "module-neural_compressor.experimental.pruner_legacy.pattern_lock"]], "pruner (class in neural_compressor.experimental.pruner_legacy.pruner)": [[282, "neural_compressor.experimental.pruner_legacy.pruner.Pruner"]], "neural_compressor.experimental.pruner_legacy.pruner": [[282, "module-neural_compressor.experimental.pruner_legacy.pruner"]], "pruner_registry() (in module neural_compressor.experimental.pruner_legacy.pruner)": [[282, "neural_compressor.experimental.pruner_legacy.pruner.pruner_registry"]], "pruning (class in neural_compressor.experimental.pruning)": [[283, "neural_compressor.experimental.pruning.Pruning"]], "tfpruningcallback (class in neural_compressor.experimental.pruning)": [[283, "neural_compressor.experimental.pruning.TfPruningCallback"]], "conf (neural_compressor.experimental.pruning.pruning attribute)": [[283, "neural_compressor.experimental.pruning.Pruning.conf"]], "neural_compressor.experimental.pruning": [[283, "module-neural_compressor.experimental.pruning"]], "pruners (neural_compressor.experimental.pruning.pruning attribute)": [[283, "neural_compressor.experimental.pruning.Pruning.pruners"]], "neural_compressor.experimental.pruning_recipes": [[284, "module-neural_compressor.experimental.pruning_recipes"]], "neural_compressor.experimental.pruning_recipes.patterns": [[285, "module-neural_compressor.experimental.pruning_recipes.patterns"]], "patterns (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[286, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS"]], "patternbase (class in neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[286, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PatternBase"]], "neural_compressor.experimental.pruning_recipes.patterns.pattern": [[286, "module-neural_compressor.experimental.pruning_recipes.patterns.pattern"]], "pattern_registry() (in module neural_compressor.experimental.pruning_recipes.patterns.pattern)": [[286, "neural_compressor.experimental.pruning_recipes.patterns.pattern.pattern_registry"]], "patterns (neural_compressor.experimental.pruning_recipes.patterns.pattern.patterns attribute)": [[286, "neural_compressor.experimental.pruning_recipes.patterns.pattern.PATTERNS.patterns"]], "tilepatternbase (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[287, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePatternBase"]], "tilepattern_1x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[287, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x1"]], "tilepattern_1x16 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[287, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x16"]], "tilepattern_1x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[287, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_1x2"]], "tilepattern_2x2 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[287, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_2x2"]], "tilepattern_4x1 (class in neural_compressor.experimental.pruning_recipes.patterns.tile_pattern)": [[287, "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern.TilePattern_4x1"]], "neural_compressor.experimental.pruning_recipes.patterns.tile_pattern": [[287, "module-neural_compressor.experimental.pruning_recipes.patterns.tile_pattern"]], "pruning (class in neural_compressor.experimental.pruning_v2)": [[288, "neural_compressor.experimental.pruning_v2.Pruning"]], "tfpruningcallback (class in neural_compressor.experimental.pruning_v2)": [[288, "neural_compressor.experimental.pruning_v2.TfPruningCallback"]], "conf (neural_compressor.experimental.pruning_v2.pruning attribute)": [[288, "neural_compressor.experimental.pruning_v2.Pruning.conf"]], "neural_compressor.experimental.pruning_v2": [[288, "module-neural_compressor.experimental.pruning_v2"]], "pruners (neural_compressor.experimental.pruning_v2.pruning attribute)": [[288, "neural_compressor.experimental.pruning_v2.Pruning.pruners"]], "neural_compressor.experimental.pytorch_pruner": [[289, "module-neural_compressor.experimental.pytorch_pruner"]], "neural_compressor.experimental.pytorch_pruner.logger": [[290, "module-neural_compressor.experimental.pytorch_pruner.logger"]], "m (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[291, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.M"]], "n (neural_compressor.experimental.pytorch_pruner.patterns.patternninm attribute)": [[291, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM.N"]], "pattern (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[291, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern"]], "patternninm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[291, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNInM"]], "patternnxm (class in neural_compressor.experimental.pytorch_pruner.patterns)": [[291, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM"]], "block_size (neural_compressor.experimental.pytorch_pruner.patterns.patternnxm attribute)": [[291, "neural_compressor.experimental.pytorch_pruner.patterns.PatternNxM.block_size"]], "get_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[291, "neural_compressor.experimental.pytorch_pruner.patterns.get_pattern"]], "is_global (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[291, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.is_global"]], "neural_compressor.experimental.pytorch_pruner.patterns": [[291, "module-neural_compressor.experimental.pytorch_pruner.patterns"]], "pattern (neural_compressor.experimental.pytorch_pruner.patterns.pattern attribute)": [[291, "neural_compressor.experimental.pytorch_pruner.patterns.Pattern.pattern"]], "register_pattern() (in module neural_compressor.experimental.pytorch_pruner.patterns)": [[291, "neural_compressor.experimental.pytorch_pruner.patterns.register_pattern"]], "check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[292, "neural_compressor.experimental.pytorch_pruner.prune_utils.check_config"]], "neural_compressor.experimental.pytorch_pruner.prune_utils": [[292, "module-neural_compressor.experimental.pytorch_pruner.prune_utils"]], "parse_not_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[292, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_not_to_prune"]], "parse_to_prune() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[292, "neural_compressor.experimental.pytorch_pruner.prune_utils.parse_to_prune"]], "process_and_check_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[292, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_and_check_config"]], "process_config() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[292, "neural_compressor.experimental.pytorch_pruner.prune_utils.process_config"]], "reset_non_value_to_default() (in module neural_compressor.experimental.pytorch_pruner.prune_utils)": [[292, "neural_compressor.experimental.pytorch_pruner.prune_utils.reset_non_value_to_default"]], "magnitudepruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[293, "neural_compressor.experimental.pytorch_pruner.pruner.MagnitudePruner"]], "patternlockpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[293, "neural_compressor.experimental.pytorch_pruner.pruner.PatternLockPruner"]], "pruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[293, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner"]], "snipmomentumpruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[293, "neural_compressor.experimental.pytorch_pruner.pruner.SnipMomentumPruner"]], "snippruner (class in neural_compressor.experimental.pytorch_pruner.pruner)": [[293, "neural_compressor.experimental.pytorch_pruner.pruner.SnipPruner"]], "config (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[293, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.config"]], "current_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[293, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.current_sparsity_ratio"]], "end_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[293, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.end_step"]], "get_pruner() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[293, "neural_compressor.experimental.pytorch_pruner.pruner.get_pruner"]], "global_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[293, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.global_step"]], "masks (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[293, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.masks"]], "max_sparsity_ratio_per_layer (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[293, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.max_sparsity_ratio_per_layer"]], "modules (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[293, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.modules"]], "neural_compressor.experimental.pytorch_pruner.pruner": [[293, "module-neural_compressor.experimental.pytorch_pruner.pruner"]], "pattern (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[293, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.pattern"]], "register_pruners() (in module neural_compressor.experimental.pytorch_pruner.pruner)": [[293, "neural_compressor.experimental.pytorch_pruner.pruner.register_pruners"]], "scheduler (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[293, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scheduler"]], "scores (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[293, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.scores"]], "start_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[293, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.start_step"]], "target_sparsity_ratio (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[293, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.target_sparsity_ratio"]], "update_frequency_on_step (neural_compressor.experimental.pytorch_pruner.pruner.pruner attribute)": [[293, "neural_compressor.experimental.pytorch_pruner.pruner.Pruner.update_frequency_on_step"]], "pruning (class in neural_compressor.experimental.pytorch_pruner.pruning)": [[294, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning"]], "config_file_path (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[294, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.config_file_path"]], "model (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[294, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.model"]], "neural_compressor.experimental.pytorch_pruner.pruning": [[294, "module-neural_compressor.experimental.pytorch_pruner.pruning"]], "pruner_info (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[294, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruner_info"]], "pruners (neural_compressor.experimental.pytorch_pruner.pruning.pruning attribute)": [[294, "neural_compressor.experimental.pytorch_pruner.pruning.Pruning.pruners"]], "iterativescheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[295, "neural_compressor.experimental.pytorch_pruner.scheduler.IterativeScheduler"]], "oneshotscheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[295, "neural_compressor.experimental.pytorch_pruner.scheduler.OneshotScheduler"]], "scheduler (class in neural_compressor.experimental.pytorch_pruner.scheduler)": [[295, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler"]], "config (neural_compressor.experimental.pytorch_pruner.scheduler.scheduler attribute)": [[295, "neural_compressor.experimental.pytorch_pruner.scheduler.Scheduler.config"]], "get_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[295, "neural_compressor.experimental.pytorch_pruner.scheduler.get_scheduler"]], "neural_compressor.experimental.pytorch_pruner.scheduler": [[295, "module-neural_compressor.experimental.pytorch_pruner.scheduler"]], "register_scheduler() (in module neural_compressor.experimental.pytorch_pruner.scheduler)": [[295, "neural_compressor.experimental.pytorch_pruner.scheduler.register_scheduler"]], "quantization (class in neural_compressor.experimental.quantization)": [[296, "neural_compressor.experimental.quantization.Quantization"]], "neural_compressor.experimental.quantization": [[296, "module-neural_compressor.experimental.quantization"]], "scheduler (class in neural_compressor.experimental.scheduler)": [[297, "neural_compressor.experimental.scheduler.Scheduler"]], "neural_compressor.experimental.scheduler": [[297, "module-neural_compressor.experimental.scheduler"]], "automixedprecisiontunestrategy (class in neural_compressor.experimental.strategy.auto_mixed_precision)": [[298, "neural_compressor.experimental.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy"]], "neural_compressor.experimental.strategy.auto_mixed_precision": [[298, "module-neural_compressor.experimental.strategy.auto_mixed_precision"]], "basictunestrategy (class in neural_compressor.experimental.strategy.basic)": [[299, "neural_compressor.experimental.strategy.basic.BasicTuneStrategy"]], "neural_compressor.experimental.strategy.basic": [[299, "module-neural_compressor.experimental.strategy.basic"]], "bayesianoptimization (class in neural_compressor.experimental.strategy.bayesian)": [[300, "neural_compressor.experimental.strategy.bayesian.BayesianOptimization"]], "bayesiantunestrategy (class in neural_compressor.experimental.strategy.bayesian)": [[300, "neural_compressor.experimental.strategy.bayesian.BayesianTuneStrategy"]], "targetspace (class in neural_compressor.experimental.strategy.bayesian)": [[300, "neural_compressor.experimental.strategy.bayesian.TargetSpace"]], "acq_max() (in module neural_compressor.experimental.strategy.bayesian)": [[300, "neural_compressor.experimental.strategy.bayesian.acq_max"]], "neural_compressor.experimental.strategy.bayesian": [[300, "module-neural_compressor.experimental.strategy.bayesian"]], "exhaustivetunestrategy (class in neural_compressor.experimental.strategy.exhaustive)": [[301, "neural_compressor.experimental.strategy.exhaustive.ExhaustiveTuneStrategy"]], "neural_compressor.experimental.strategy.exhaustive": [[301, "module-neural_compressor.experimental.strategy.exhaustive"]], "neural_compressor.experimental.strategy": [[302, "module-neural_compressor.experimental.strategy"]], "msetunestrategy (class in neural_compressor.experimental.strategy.mse)": [[303, "neural_compressor.experimental.strategy.mse.MSETuneStrategy"]], "neural_compressor.experimental.strategy.mse": [[303, "module-neural_compressor.experimental.strategy.mse"]], "mse_v2tunestrategy (class in neural_compressor.experimental.strategy.mse_v2)": [[304, "neural_compressor.experimental.strategy.mse_v2.MSE_V2TuneStrategy"]], "neural_compressor.experimental.strategy.mse_v2": [[304, "module-neural_compressor.experimental.strategy.mse_v2"]], "randomtunestrategy (class in neural_compressor.experimental.strategy.random)": [[305, "neural_compressor.experimental.strategy.random.RandomTuneStrategy"]], "neural_compressor.experimental.strategy.random": [[305, "module-neural_compressor.experimental.strategy.random"]], "tunestrategy (class in neural_compressor.experimental.strategy.strategy)": [[306, "neural_compressor.experimental.strategy.strategy.TuneStrategy"]], "neural_compressor.experimental.strategy.strategy": [[306, "module-neural_compressor.experimental.strategy.strategy"]], "strategy_registry() (in module neural_compressor.experimental.strategy.strategy)": [[306, "neural_compressor.experimental.strategy.strategy.strategy_registry"]], "neural_compressor.experimental.strategy.utils.constant": [[307, "module-neural_compressor.experimental.strategy.utils.constant"]], "neural_compressor.experimental.strategy.utils": [[308, "module-neural_compressor.experimental.strategy.utils"]], "fallbacktuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[309, "neural_compressor.experimental.strategy.utils.tuning_sampler.FallbackTuningSampler"]], "modelwisetuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[309, "neural_compressor.experimental.strategy.utils.tuning_sampler.ModelWiseTuningSampler"]], "optypewisetuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[309, "neural_compressor.experimental.strategy.utils.tuning_sampler.OpTypeWiseTuningSampler"]], "opwisetuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[309, "neural_compressor.experimental.strategy.utils.tuning_sampler.OpWiseTuningSampler"]], "smoothquantsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[309, "neural_compressor.experimental.strategy.utils.tuning_sampler.SmoothQuantSampler"]], "tuningorder (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[309, "neural_compressor.experimental.strategy.utils.tuning_sampler.TuningOrder"]], "tuningsampler (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[309, "neural_compressor.experimental.strategy.utils.tuning_sampler.TuningSampler"]], "tuningsamplerregistry (class in neural_compressor.experimental.strategy.utils.tuning_sampler)": [[309, "neural_compressor.experimental.strategy.utils.tuning_sampler.TuningSamplerRegistry"]], "neural_compressor.experimental.strategy.utils.tuning_sampler": [[309, "module-neural_compressor.experimental.strategy.utils.tuning_sampler"]], "tuningitem (class in neural_compressor.experimental.strategy.utils.tuning_space)": [[310, "neural_compressor.experimental.strategy.utils.tuning_space.TuningItem"]], "tuningspace (class in neural_compressor.experimental.strategy.utils.tuning_space)": [[310, "neural_compressor.experimental.strategy.utils.tuning_space.TuningSpace"]], "initial_tuning_cfg_with_quant_mode() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[310, "neural_compressor.experimental.strategy.utils.tuning_space.initial_tuning_cfg_with_quant_mode"]], "neural_compressor.experimental.strategy.utils.tuning_space": [[310, "module-neural_compressor.experimental.strategy.utils.tuning_space"]], "pattern_to_internal() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[310, "neural_compressor.experimental.strategy.utils.tuning_space.pattern_to_internal"]], "pattern_to_path() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[310, "neural_compressor.experimental.strategy.utils.tuning_space.pattern_to_path"]], "quant_mode_from_pattern() (in module neural_compressor.experimental.strategy.utils.tuning_space)": [[310, "neural_compressor.experimental.strategy.utils.tuning_space.quant_mode_from_pattern"]], "optuningconfig (class in neural_compressor.experimental.strategy.utils.tuning_structs)": [[311, "neural_compressor.experimental.strategy.utils.tuning_structs.OpTuningConfig"]], "neural_compressor.experimental.strategy.utils.tuning_structs": [[311, "module-neural_compressor.experimental.strategy.utils.tuning_structs"]], "ordereddefaultdict (class in neural_compressor.experimental.strategy.utils.utility)": [[312, "neural_compressor.experimental.strategy.utils.utility.OrderedDefaultDict"]], "extract_data_type() (in module neural_compressor.experimental.strategy.utils.utility)": [[312, "neural_compressor.experimental.strategy.utils.utility.extract_data_type"]], "get_adaptor_name() (in module neural_compressor.experimental.strategy.utils.utility)": [[312, "neural_compressor.experimental.strategy.utils.utility.get_adaptor_name"]], "neural_compressor.experimental.strategy.utils.utility": [[312, "module-neural_compressor.experimental.strategy.utils.utility"]], "reverted_data_type() (in module neural_compressor.experimental.strategy.utils.utility)": [[312, "neural_compressor.experimental.strategy.utils.utility.reverted_data_type"]], "neural_compressor": [[313, "module-neural_compressor"]], "bleu (class in neural_compressor.metric.bleu)": [[314, "neural_compressor.metric.bleu.BLEU"]], "unicoderegex (class in neural_compressor.metric.bleu)": [[314, "neural_compressor.metric.bleu.UnicodeRegex"]], "bleu_tokenize() (in module neural_compressor.metric.bleu)": [[314, "neural_compressor.metric.bleu.bleu_tokenize"]], "labels (neural_compressor.metric.bleu.bleu attribute)": [[314, "neural_compressor.metric.bleu.BLEU.labels"]], "neural_compressor.metric.bleu": [[314, "module-neural_compressor.metric.bleu"]], "nondigit_punct_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[314, "neural_compressor.metric.bleu.UnicodeRegex.nondigit_punct_re"]], "predictions (neural_compressor.metric.bleu.bleu attribute)": [[314, "neural_compressor.metric.bleu.BLEU.predictions"]], "punct_nondigit_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[314, "neural_compressor.metric.bleu.UnicodeRegex.punct_nondigit_re"]], "symbol_re (neural_compressor.metric.bleu.unicoderegex attribute)": [[314, "neural_compressor.metric.bleu.UnicodeRegex.symbol_re"]], "compute_bleu() (in module neural_compressor.metric.bleu_util)": [[315, "neural_compressor.metric.bleu_util.compute_bleu"]], "neural_compressor.metric.bleu_util": [[315, "module-neural_compressor.metric.bleu_util"]], "neural_compressor.metric.coco_label_map": [[316, "module-neural_compressor.metric.coco_label_map"]], "cocoevalwrapper (class in neural_compressor.metric.coco_tools)": [[317, "neural_compressor.metric.coco_tools.COCOEvalWrapper"]], "cocowrapper (class in neural_compressor.metric.coco_tools)": [[317, "neural_compressor.metric.coco_tools.COCOWrapper"]], "exportsingleimagedetectionboxestococo() (in module neural_compressor.metric.coco_tools)": [[317, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionBoxesToCoco"]], "exportsingleimagedetectionmaskstococo() (in module neural_compressor.metric.coco_tools)": [[317, "neural_compressor.metric.coco_tools.ExportSingleImageDetectionMasksToCoco"]], "exportsingleimagegroundtruthtococo() (in module neural_compressor.metric.coco_tools)": [[317, "neural_compressor.metric.coco_tools.ExportSingleImageGroundtruthToCoco"]], "dataset (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[317, "neural_compressor.metric.coco_tools.COCOWrapper.dataset"]], "detection_type (neural_compressor.metric.coco_tools.cocowrapper attribute)": [[317, "neural_compressor.metric.coco_tools.COCOWrapper.detection_type"]], "neural_compressor.metric.coco_tools": [[317, "module-neural_compressor.metric.coco_tools"]], "evaluate() (in module neural_compressor.metric.evaluate_squad)": [[318, "neural_compressor.metric.evaluate_squad.evaluate"]], "exact_match_score() (in module neural_compressor.metric.evaluate_squad)": [[318, "neural_compressor.metric.evaluate_squad.exact_match_score"]], "f1_score() (in module neural_compressor.metric.evaluate_squad)": [[318, "neural_compressor.metric.evaluate_squad.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.evaluate_squad)": [[318, "neural_compressor.metric.evaluate_squad.metric_max_over_ground_truths"]], "neural_compressor.metric.evaluate_squad": [[318, "module-neural_compressor.metric.evaluate_squad"]], "evaluate() (in module neural_compressor.metric.f1)": [[319, "neural_compressor.metric.f1.evaluate"]], "f1_score() (in module neural_compressor.metric.f1)": [[319, "neural_compressor.metric.f1.f1_score"]], "metric_max_over_ground_truths() (in module neural_compressor.metric.f1)": [[319, "neural_compressor.metric.f1.metric_max_over_ground_truths"]], "neural_compressor.metric.f1": [[319, "module-neural_compressor.metric.f1"]], "normalize_answer() (in module neural_compressor.metric.f1)": [[319, "neural_compressor.metric.f1.normalize_answer"]], "neural_compressor.metric": [[320, "module-neural_compressor.metric"]], "accuracy (class in neural_compressor.metric.metric)": [[321, "neural_compressor.metric.metric.Accuracy"]], "basemetric (class in neural_compressor.metric.metric)": [[321, "neural_compressor.metric.metric.BaseMetric"]], "cocomapv2 (class in neural_compressor.metric.metric)": [[321, "neural_compressor.metric.metric.COCOmAPv2"]], "f1 (class in neural_compressor.metric.metric)": [[321, "neural_compressor.metric.metric.F1"]], "generaltopk (class in neural_compressor.metric.metric)": [[321, "neural_compressor.metric.metric.GeneralTopK"]], "loss (class in neural_compressor.metric.metric)": [[321, "neural_compressor.metric.metric.Loss"]], "mae (class in neural_compressor.metric.metric)": [[321, "neural_compressor.metric.metric.MAE"]], "metrics (class in neural_compressor.metric.metric)": [[321, "neural_compressor.metric.metric.METRICS"]], "mse (class in neural_compressor.metric.metric)": [[321, "neural_compressor.metric.metric.MSE"]], "mxnetmetrics (class in neural_compressor.metric.metric)": [[321, "neural_compressor.metric.metric.MXNetMetrics"]], "metric (class in neural_compressor.metric.metric)": [[321, "neural_compressor.metric.metric.Metric"]], "onnxrtglue (class in neural_compressor.metric.metric)": [[321, "neural_compressor.metric.metric.ONNXRTGLUE"]], "onnxrtitmetrics (class in neural_compressor.metric.metric)": [[321, "neural_compressor.metric.metric.ONNXRTITMetrics"]], "onnxrtqlmetrics (class in neural_compressor.metric.metric)": [[321, "neural_compressor.metric.metric.ONNXRTQLMetrics"]], "pytorchloss (class in neural_compressor.metric.metric)": [[321, "neural_compressor.metric.metric.PyTorchLoss"]], "pytorchmetrics (class in neural_compressor.metric.metric)": [[321, "neural_compressor.metric.metric.PyTorchMetrics"]], "rmse (class in neural_compressor.metric.metric)": [[321, "neural_compressor.metric.metric.RMSE"]], "roc (class in neural_compressor.metric.metric)": [[321, "neural_compressor.metric.metric.ROC"]], "squadf1 (class in neural_compressor.metric.metric)": [[321, "neural_compressor.metric.metric.SquadF1"]], "tensorflowcocomap (class in neural_compressor.metric.metric)": [[321, "neural_compressor.metric.metric.TensorflowCOCOMAP"]], "tensorflowmap (class in neural_compressor.metric.metric)": [[321, "neural_compressor.metric.metric.TensorflowMAP"]], "tensorflowmetrics (class in neural_compressor.metric.metric)": [[321, "neural_compressor.metric.metric.TensorflowMetrics"]], "tensorflowtopk (class in neural_compressor.metric.metric)": [[321, "neural_compressor.metric.metric.TensorflowTopK"]], "tensorflowvocmap (class in neural_compressor.metric.metric)": [[321, "neural_compressor.metric.metric.TensorflowVOCMAP"]], "wrapmxnetmetric (class in neural_compressor.metric.metric)": [[321, "neural_compressor.metric.metric.WrapMXNetMetric"]], "wraponnxrtmetric (class in neural_compressor.metric.metric)": [[321, "neural_compressor.metric.metric.WrapONNXRTMetric"]], "wrappytorchmetric (class in neural_compressor.metric.metric)": [[321, "neural_compressor.metric.metric.WrapPyTorchMetric"]], "compare_label (neural_compressor.metric.metric.mae attribute)": [[321, "neural_compressor.metric.metric.MAE.compare_label"]], "compare_label (neural_compressor.metric.metric.mse attribute)": [[321, "neural_compressor.metric.metric.MSE.compare_label"]], "k (neural_compressor.metric.metric.generaltopk attribute)": [[321, "neural_compressor.metric.metric.GeneralTopK.k"]], "k (neural_compressor.metric.metric.tensorflowtopk attribute)": [[321, "neural_compressor.metric.metric.TensorflowTopK.k"]], "label_list (neural_compressor.metric.metric.accuracy attribute)": [[321, "neural_compressor.metric.metric.Accuracy.label_list"]], "label_list (neural_compressor.metric.metric.mae attribute)": [[321, "neural_compressor.metric.metric.MAE.label_list"]], "label_list (neural_compressor.metric.metric.mse attribute)": [[321, "neural_compressor.metric.metric.MSE.label_list"]], "miou (class in neural_compressor.metric.metric)": [[321, "neural_compressor.metric.metric.mIOU"]], "metric_registry() (in module neural_compressor.metric.metric)": [[321, "neural_compressor.metric.metric.metric_registry"]], "metrics (neural_compressor.metric.metric.metrics attribute)": [[321, "neural_compressor.metric.metric.METRICS.metrics"]], "metrics (neural_compressor.metric.metric.mxnetmetrics attribute)": [[321, "neural_compressor.metric.metric.MXNetMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtitmetrics attribute)": [[321, "neural_compressor.metric.metric.ONNXRTITMetrics.metrics"]], "metrics (neural_compressor.metric.metric.onnxrtqlmetrics attribute)": [[321, "neural_compressor.metric.metric.ONNXRTQLMetrics.metrics"]], "metrics (neural_compressor.metric.metric.pytorchmetrics attribute)": [[321, "neural_compressor.metric.metric.PyTorchMetrics.metrics"]], "metrics (neural_compressor.metric.metric.tensorflowmetrics attribute)": [[321, "neural_compressor.metric.metric.TensorflowMetrics.metrics"]], "mse (neural_compressor.metric.metric.rmse attribute)": [[321, "neural_compressor.metric.metric.RMSE.mse"]], "neural_compressor.metric.metric": [[321, "module-neural_compressor.metric.metric"]], "num_correct (neural_compressor.metric.metric.generaltopk attribute)": [[321, "neural_compressor.metric.metric.GeneralTopK.num_correct"]], "num_correct (neural_compressor.metric.metric.tensorflowtopk attribute)": [[321, "neural_compressor.metric.metric.TensorflowTopK.num_correct"]], "num_sample (neural_compressor.metric.metric.generaltopk attribute)": [[321, "neural_compressor.metric.metric.GeneralTopK.num_sample"]], "num_sample (neural_compressor.metric.metric.tensorflowtopk attribute)": [[321, "neural_compressor.metric.metric.TensorflowTopK.num_sample"]], "pred_list (neural_compressor.metric.metric.accuracy attribute)": [[321, "neural_compressor.metric.metric.Accuracy.pred_list"]], "pred_list (neural_compressor.metric.metric.mae attribute)": [[321, "neural_compressor.metric.metric.MAE.pred_list"]], "pred_list (neural_compressor.metric.metric.mse attribute)": [[321, "neural_compressor.metric.metric.MSE.pred_list"]], "sample (neural_compressor.metric.metric.accuracy attribute)": [[321, "neural_compressor.metric.metric.Accuracy.sample"]], "sample (neural_compressor.metric.metric.loss attribute)": [[321, "neural_compressor.metric.metric.Loss.sample"]], "sum (neural_compressor.metric.metric.loss attribute)": [[321, "neural_compressor.metric.metric.Loss.sum"]], "fit() (in module neural_compressor.mix_precision)": [[322, "neural_compressor.mix_precision.fit"]], "neural_compressor.mix_precision": [[322, "module-neural_compressor.mix_precision"]], "basemodel (class in neural_compressor.model.base_model)": [[323, "neural_compressor.model.base_model.BaseModel"]], "neural_compressor.model.base_model": [[323, "module-neural_compressor.model.base_model"]], "neural_compressor.model": [[324, "module-neural_compressor.model"]], "kerasmodel (class in neural_compressor.model.keras_model)": [[325, "neural_compressor.model.keras_model.KerasModel"]], "neural_compressor.model.keras_model": [[325, "module-neural_compressor.model.keras_model"]], "model (class in neural_compressor.model.model)": [[326, "neural_compressor.model.model.Model"]], "get_model_fwk_name() (in module neural_compressor.model.model)": [[326, "neural_compressor.model.model.get_model_fwk_name"]], "neural_compressor.model.model": [[326, "module-neural_compressor.model.model"]], "mxnetmodel (class in neural_compressor.model.mxnet_model)": [[327, "neural_compressor.model.mxnet_model.MXNetModel"]], "neural_compressor.model.mxnet_model": [[327, "module-neural_compressor.model.mxnet_model"]], "tfslimnetsfactory (class in neural_compressor.model.nets_factory)": [[328, "neural_compressor.model.nets_factory.TFSlimNetsFactory"]], "neural_compressor.model.nets_factory": [[328, "module-neural_compressor.model.nets_factory"]], "onnxmodel (class in neural_compressor.model.onnx_model)": [[329, "neural_compressor.model.onnx_model.ONNXModel"]], "neural_compressor.model.onnx_model": [[329, "module-neural_compressor.model.onnx_model"]], "tensorflowbasemodel (class in neural_compressor.model.tensorflow_model)": [[330, "neural_compressor.model.tensorflow_model.TensorflowBaseModel"]], "tensorflowcheckpointmodel (class in neural_compressor.model.tensorflow_model)": [[330, "neural_compressor.model.tensorflow_model.TensorflowCheckpointModel"]], "tensorflowmodel (class in neural_compressor.model.tensorflow_model)": [[330, "neural_compressor.model.tensorflow_model.TensorflowModel"]], "tensorflowqatmodel (class in neural_compressor.model.tensorflow_model)": [[330, "neural_compressor.model.tensorflow_model.TensorflowQATModel"]], "tensorflowsavedmodelmodel (class in neural_compressor.model.tensorflow_model)": [[330, "neural_compressor.model.tensorflow_model.TensorflowSavedModelModel"]], "checkpoint_session() (in module neural_compressor.model.tensorflow_model)": [[330, "neural_compressor.model.tensorflow_model.checkpoint_session"]], "estimator_session() (in module neural_compressor.model.tensorflow_model)": [[330, "neural_compressor.model.tensorflow_model.estimator_session"]], "frozen_pb_session() (in module neural_compressor.model.tensorflow_model)": [[330, "neural_compressor.model.tensorflow_model.frozen_pb_session"]], "get_model_type() (in module neural_compressor.model.tensorflow_model)": [[330, "neural_compressor.model.tensorflow_model.get_model_type"]], "graph_def_session() (in module neural_compressor.model.tensorflow_model)": [[330, "neural_compressor.model.tensorflow_model.graph_def_session"]], "graph_session() (in module neural_compressor.model.tensorflow_model)": [[330, "neural_compressor.model.tensorflow_model.graph_session"]], "keras_session() (in module neural_compressor.model.tensorflow_model)": [[330, "neural_compressor.model.tensorflow_model.keras_session"]], "load_saved_model() (in module neural_compressor.model.tensorflow_model)": [[330, "neural_compressor.model.tensorflow_model.load_saved_model"]], "neural_compressor.model.tensorflow_model": [[330, "module-neural_compressor.model.tensorflow_model"]], "saved_model_session() (in module neural_compressor.model.tensorflow_model)": [[330, "neural_compressor.model.tensorflow_model.saved_model_session"]], "slim_session() (in module neural_compressor.model.tensorflow_model)": [[330, "neural_compressor.model.tensorflow_model.slim_session"]], "validate_and_inference_input_output() (in module neural_compressor.model.tensorflow_model)": [[330, "neural_compressor.model.tensorflow_model.validate_and_inference_input_output"]], "validate_graph_node() (in module neural_compressor.model.tensorflow_model)": [[330, "neural_compressor.model.tensorflow_model.validate_graph_node"]], "ipexmodel (class in neural_compressor.model.torch_model)": [[331, "neural_compressor.model.torch_model.IPEXModel"]], "pytorchbasemodel (class in neural_compressor.model.torch_model)": [[331, "neural_compressor.model.torch_model.PyTorchBaseModel"]], "pytorchfxmodel (class in neural_compressor.model.torch_model)": [[331, "neural_compressor.model.torch_model.PyTorchFXModel"]], "pytorchmodel (class in neural_compressor.model.torch_model)": [[331, "neural_compressor.model.torch_model.PyTorchModel"]], "neural_compressor.model.torch_model": [[331, "module-neural_compressor.model.torch_model"]], "accuracy (class in neural_compressor.objective)": [[332, "neural_compressor.objective.Accuracy"]], "footprint (class in neural_compressor.objective)": [[332, "neural_compressor.objective.Footprint"]], "modelsize (class in neural_compressor.objective)": [[332, "neural_compressor.objective.ModelSize"]], "multiobjective (class in neural_compressor.objective)": [[332, "neural_compressor.objective.MultiObjective"]], "objective (class in neural_compressor.objective)": [[332, "neural_compressor.objective.Objective"]], "performance (class in neural_compressor.objective)": [[332, "neural_compressor.objective.Performance"]], "neural_compressor.objective": [[332, "module-neural_compressor.objective"]], "objective_custom_registry() (in module neural_compressor.objective)": [[332, "neural_compressor.objective.objective_custom_registry"]], "objective_registry() (in module neural_compressor.objective)": [[332, "neural_compressor.objective.objective_registry"]], "fit() (in module neural_compressor.quantization)": [[333, "neural_compressor.quantization.fit"]], "neural_compressor.quantization": [[333, "module-neural_compressor.quantization"]], "autotunestrategy (class in neural_compressor.strategy.auto)": [[334, "neural_compressor.strategy.auto.AutoTuneStrategy"]], "neural_compressor.strategy.auto": [[334, "module-neural_compressor.strategy.auto"]], "automixedprecisiontunestrategy (class in neural_compressor.strategy.auto_mixed_precision)": [[335, "neural_compressor.strategy.auto_mixed_precision.AutoMixedPrecisionTuneStrategy"]], "neural_compressor.strategy.auto_mixed_precision": [[335, "module-neural_compressor.strategy.auto_mixed_precision"]], "basictunestrategy (class in neural_compressor.strategy.basic)": [[336, "neural_compressor.strategy.basic.BasicTuneStrategy"]], "neural_compressor.strategy.basic": [[336, "module-neural_compressor.strategy.basic"]], "bayesianoptimization (class in neural_compressor.strategy.bayesian)": [[337, "neural_compressor.strategy.bayesian.BayesianOptimization"]], "bayesiantunestrategy (class in neural_compressor.strategy.bayesian)": [[337, "neural_compressor.strategy.bayesian.BayesianTuneStrategy"]], "targetspace (class in neural_compressor.strategy.bayesian)": [[337, "neural_compressor.strategy.bayesian.TargetSpace"]], "acq_max() (in module neural_compressor.strategy.bayesian)": [[337, "neural_compressor.strategy.bayesian.acq_max"]], "neural_compressor.strategy.bayesian": [[337, "module-neural_compressor.strategy.bayesian"]], "conservativetunestrategy (class in neural_compressor.strategy.conservative)": [[338, "neural_compressor.strategy.conservative.ConservativeTuneStrategy"]], "neural_compressor.strategy.conservative": [[338, "module-neural_compressor.strategy.conservative"]], "exhaustivetunestrategy (class in neural_compressor.strategy.exhaustive)": [[339, "neural_compressor.strategy.exhaustive.ExhaustiveTuneStrategy"]], "neural_compressor.strategy.exhaustive": [[339, "module-neural_compressor.strategy.exhaustive"]], "hawq_v2tunestrategy (class in neural_compressor.strategy.hawq_v2)": [[340, "neural_compressor.strategy.hawq_v2.HAWQ_V2TuneStrategy"]], "neural_compressor.strategy.hawq_v2": [[340, "module-neural_compressor.strategy.hawq_v2"]], "neural_compressor.strategy": [[341, "module-neural_compressor.strategy"]], "msetunestrategy (class in neural_compressor.strategy.mse)": [[342, "neural_compressor.strategy.mse.MSETuneStrategy"]], "neural_compressor.strategy.mse": [[342, "module-neural_compressor.strategy.mse"]], "mse_v2tunestrategy (class in neural_compressor.strategy.mse_v2)": [[343, "neural_compressor.strategy.mse_v2.MSE_V2TuneStrategy"]], "neural_compressor.strategy.mse_v2": [[343, "module-neural_compressor.strategy.mse_v2"]], "randomtunestrategy (class in neural_compressor.strategy.random)": [[344, "neural_compressor.strategy.random.RandomTuneStrategy"]], "neural_compressor.strategy.random": [[344, "module-neural_compressor.strategy.random"]], "tunestrategy (class in neural_compressor.strategy.strategy)": [[345, "neural_compressor.strategy.strategy.TuneStrategy"]], "tunestrategymeta (class in neural_compressor.strategy.strategy)": [[345, "neural_compressor.strategy.strategy.TuneStrategyMeta"]], "neural_compressor.strategy.strategy": [[345, "module-neural_compressor.strategy.strategy"]], "strategy_registry() (in module neural_compressor.strategy.strategy)": [[345, "neural_compressor.strategy.strategy.strategy_registry"]], "neural_compressor.strategy.utils.constant": [[346, "module-neural_compressor.strategy.utils.constant"]], "neural_compressor.strategy.utils": [[347, "module-neural_compressor.strategy.utils"]], "blockfallbacktuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[348, "neural_compressor.strategy.utils.tuning_sampler.BlockFallbackTuningSampler"]], "fallbacktuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[348, "neural_compressor.strategy.utils.tuning_sampler.FallbackTuningSampler"]], "modelwisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[348, "neural_compressor.strategy.utils.tuning_sampler.ModelWiseTuningSampler"]], "optypewisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[348, "neural_compressor.strategy.utils.tuning_sampler.OpTypeWiseTuningSampler"]], "opwisetuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[348, "neural_compressor.strategy.utils.tuning_sampler.OpWiseTuningSampler"]], "tuningorder (class in neural_compressor.strategy.utils.tuning_sampler)": [[348, "neural_compressor.strategy.utils.tuning_sampler.TuningOrder"]], "tuningsampler (class in neural_compressor.strategy.utils.tuning_sampler)": [[348, "neural_compressor.strategy.utils.tuning_sampler.TuningSampler"]], "tuningsamplerregistry (class in neural_compressor.strategy.utils.tuning_sampler)": [[348, "neural_compressor.strategy.utils.tuning_sampler.TuningSamplerRegistry"]], "neural_compressor.strategy.utils.tuning_sampler": [[348, "module-neural_compressor.strategy.utils.tuning_sampler"]], "tuningitem (class in neural_compressor.strategy.utils.tuning_space)": [[349, "neural_compressor.strategy.utils.tuning_space.TuningItem"]], "tuningspace (class in neural_compressor.strategy.utils.tuning_space)": [[349, "neural_compressor.strategy.utils.tuning_space.TuningSpace"]], "initial_tuning_cfg_with_quant_mode() (in module neural_compressor.strategy.utils.tuning_space)": [[349, "neural_compressor.strategy.utils.tuning_space.initial_tuning_cfg_with_quant_mode"]], "neural_compressor.strategy.utils.tuning_space": [[349, "module-neural_compressor.strategy.utils.tuning_space"]], "pattern_to_internal() (in module neural_compressor.strategy.utils.tuning_space)": [[349, "neural_compressor.strategy.utils.tuning_space.pattern_to_internal"]], "pattern_to_path() (in module neural_compressor.strategy.utils.tuning_space)": [[349, "neural_compressor.strategy.utils.tuning_space.pattern_to_path"]], "quant_mode_from_pattern() (in module neural_compressor.strategy.utils.tuning_space)": [[349, "neural_compressor.strategy.utils.tuning_space.quant_mode_from_pattern"]], "optuningconfig (class in neural_compressor.strategy.utils.tuning_structs)": [[350, "neural_compressor.strategy.utils.tuning_structs.OpTuningConfig"]], "neural_compressor.strategy.utils.tuning_structs": [[350, "module-neural_compressor.strategy.utils.tuning_structs"]], "ordereddefaultdict (class in neural_compressor.strategy.utils.utility)": [[351, "neural_compressor.strategy.utils.utility.OrderedDefaultDict"]], "extract_data_type() (in module neural_compressor.strategy.utils.utility)": [[351, "neural_compressor.strategy.utils.utility.extract_data_type"]], "get_adaptor_name() (in module neural_compressor.strategy.utils.utility)": [[351, "neural_compressor.strategy.utils.utility.get_adaptor_name"]], "neural_compressor.strategy.utils.utility": [[351, "module-neural_compressor.strategy.utils.utility"]], "reverted_data_type() (in module neural_compressor.strategy.utils.utility)": [[351, "neural_compressor.strategy.utils.utility.reverted_data_type"]], "exampleclass (class in neural_compressor.template.api_doc_example)": [[352, "neural_compressor.template.api_doc_example.ExampleClass"]], "attr1 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[352, "neural_compressor.template.api_doc_example.ExampleClass.attr1"]], "attr2 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[352, "neural_compressor.template.api_doc_example.ExampleClass.attr2"]], "attr5 (neural_compressor.template.api_doc_example.exampleclass attribute)": [[352, "neural_compressor.template.api_doc_example.ExampleClass.attr5"]], "attribute1 (in module neural_compressor.template.api_doc_example)": [[352, "neural_compressor.template.api_doc_example.attribute1"]], "function1() (in module neural_compressor.template.api_doc_example)": [[352, "neural_compressor.template.api_doc_example.function1"]], "function2() (in module neural_compressor.template.api_doc_example)": [[352, "neural_compressor.template.api_doc_example.function2"]], "function3() (in module neural_compressor.template.api_doc_example)": [[352, "neural_compressor.template.api_doc_example.function3"]], "generator1() (in module neural_compressor.template.api_doc_example)": [[352, "neural_compressor.template.api_doc_example.generator1"]], "module_debug_level1 (in module neural_compressor.template.api_doc_example)": [[352, "neural_compressor.template.api_doc_example.module_debug_level1"]], "neural_compressor.template.api_doc_example": [[352, "module-neural_compressor.template.api_doc_example"]], "neural_compressor.template": [[353, "module-neural_compressor.template"]], "callbacks (class in neural_compressor.training)": [[354, "neural_compressor.training.CallBacks"]], "compressionmanager (class in neural_compressor.training)": [[354, "neural_compressor.training.CompressionManager"]], "fit() (in module neural_compressor.training)": [[354, "neural_compressor.training.fit"]], "neural_compressor.training": [[354, "module-neural_compressor.training"]], "prepare_compression() (in module neural_compressor.training)": [[354, "neural_compressor.training.prepare_compression"]], "layerhistogramcollector (class in neural_compressor.utils.collect_layer_histogram)": [[355, "neural_compressor.utils.collect_layer_histogram.LayerHistogramCollector"]], "neural_compressor.utils.collect_layer_histogram": [[355, "module-neural_compressor.utils.collect_layer_histogram"]], "neural_compressor.utils.constant": [[356, "module-neural_compressor.utils.constant"]], "create_dataloader() (in module neural_compressor.utils.create_obj_from_config)": [[357, "neural_compressor.utils.create_obj_from_config.create_dataloader"]], "create_dataset() (in module neural_compressor.utils.create_obj_from_config)": [[357, "neural_compressor.utils.create_obj_from_config.create_dataset"]], "create_eval_func() (in module neural_compressor.utils.create_obj_from_config)": [[357, "neural_compressor.utils.create_obj_from_config.create_eval_func"]], "create_train_func() (in module neural_compressor.utils.create_obj_from_config)": [[357, "neural_compressor.utils.create_obj_from_config.create_train_func"]], "get_algorithm() (in module neural_compressor.utils.create_obj_from_config)": [[357, "neural_compressor.utils.create_obj_from_config.get_algorithm"]], "get_func_from_config() (in module neural_compressor.utils.create_obj_from_config)": [[357, "neural_compressor.utils.create_obj_from_config.get_func_from_config"]], "get_metrics() (in module neural_compressor.utils.create_obj_from_config)": [[357, "neural_compressor.utils.create_obj_from_config.get_metrics"]], "get_postprocess() (in module neural_compressor.utils.create_obj_from_config)": [[357, "neural_compressor.utils.create_obj_from_config.get_postprocess"]], "get_preprocess() (in module neural_compressor.utils.create_obj_from_config)": [[357, "neural_compressor.utils.create_obj_from_config.get_preprocess"]], "neural_compressor.utils.create_obj_from_config": [[357, "module-neural_compressor.utils.create_obj_from_config"]], "neural_compressor.utils": [[358, "module-neural_compressor.utils"]], "kl_divergence (class in neural_compressor.utils.kl_divergence)": [[359, "neural_compressor.utils.kl_divergence.KL_Divergence"]], "neural_compressor.utils.kl_divergence": [[359, "module-neural_compressor.utils.kl_divergence"]], "optimizedmodel (class in neural_compressor.utils.load_huggingface)": [[360, "neural_compressor.utils.load_huggingface.OptimizedModel"]], "neural_compressor.utils.load_huggingface": [[360, "module-neural_compressor.utils.load_huggingface"]], "save_for_huggingface_upstream() (in module neural_compressor.utils.load_huggingface)": [[360, "neural_compressor.utils.load_huggingface.save_for_huggingface_upstream"]], "logger (class in neural_compressor.utils.logger)": [[361, "neural_compressor.utils.logger.Logger"]], "debug() (in module neural_compressor.utils.logger)": [[361, "neural_compressor.utils.logger.debug"]], "error() (in module neural_compressor.utils.logger)": [[361, "neural_compressor.utils.logger.error"]], "fatal() (in module neural_compressor.utils.logger)": [[361, "neural_compressor.utils.logger.fatal"]], "info() (in module neural_compressor.utils.logger)": [[361, "neural_compressor.utils.logger.info"]], "log() (in module neural_compressor.utils.logger)": [[361, "neural_compressor.utils.logger.log"]], "neural_compressor.utils.logger": [[361, "module-neural_compressor.utils.logger"]], "warn() (in module neural_compressor.utils.logger)": [[361, "neural_compressor.utils.logger.warn"]], "warning() (in module neural_compressor.utils.logger)": [[361, "neural_compressor.utils.logger.warning"]], "neural_compressor.utils.options": [[362, "module-neural_compressor.utils.options"]], "onnxrt (class in neural_compressor.utils.options)": [[362, "neural_compressor.utils.options.onnxrt"]], "is_int8_model() (in module neural_compressor.utils.pytorch)": [[363, "neural_compressor.utils.pytorch.is_int8_model"]], "load() (in module neural_compressor.utils.pytorch)": [[363, "neural_compressor.utils.pytorch.load"]], "neural_compressor.utils.pytorch": [[363, "module-neural_compressor.utils.pytorch"]], "captureoutputtofile (class in neural_compressor.utils.utility)": [[364, "neural_compressor.utils.utility.CaptureOutputToFile"]], "cpuinfo (class in neural_compressor.utils.utility)": [[364, "neural_compressor.utils.utility.CpuInfo"]], "dequantize() (in module neural_compressor.utils.utility)": [[364, "neural_compressor.utils.utility.Dequantize"]], "dequantizeweight() (in module neural_compressor.utils.utility)": [[364, "neural_compressor.utils.utility.DequantizeWeight"]], "dotdict (class in neural_compressor.utils.utility)": [[364, "neural_compressor.utils.utility.DotDict"]], "global_state (class in neural_compressor.utils.utility)": [[364, "neural_compressor.utils.utility.GLOBAL_STATE"]], "lazyimport (class in neural_compressor.utils.utility)": [[364, "neural_compressor.utils.utility.LazyImport"]], "mode (class in neural_compressor.utils.utility)": [[364, "neural_compressor.utils.utility.MODE"]], "statistics (class in neural_compressor.utils.utility)": [[364, "neural_compressor.utils.utility.Statistics"]], "combine_histogram() (in module neural_compressor.utils.utility)": [[364, "neural_compressor.utils.utility.combine_histogram"]], "compare_objects() (in module neural_compressor.utils.utility)": [[364, "neural_compressor.utils.utility.compare_objects"]], "compute_sparsity() (in module neural_compressor.utils.utility)": [[364, "neural_compressor.utils.utility.compute_sparsity"]], "dump_class_attrs() (in module neural_compressor.utils.utility)": [[364, "neural_compressor.utils.utility.dump_class_attrs"]], "dump_data_to_local() (in module neural_compressor.utils.utility)": [[364, "neural_compressor.utils.utility.dump_data_to_local"]], "dump_elapsed_time() (in module neural_compressor.utils.utility)": [[364, "neural_compressor.utils.utility.dump_elapsed_time"]], "equal_dicts() (in module neural_compressor.utils.utility)": [[364, "neural_compressor.utils.utility.equal_dicts"]], "fault_tolerant_file() (in module neural_compressor.utils.utility)": [[364, "neural_compressor.utils.utility.fault_tolerant_file"]], "get_all_fp32_data() (in module neural_compressor.utils.utility)": [[364, "neural_compressor.utils.utility.get_all_fp32_data"]], "get_size() (in module neural_compressor.utils.utility)": [[364, "neural_compressor.utils.utility.get_size"]], "get_tensor_histogram() (in module neural_compressor.utils.utility)": [[364, "neural_compressor.utils.utility.get_tensor_histogram"]], "get_tuning_history() (in module neural_compressor.utils.utility)": [[364, "neural_compressor.utils.utility.get_tuning_history"]], "load_data_from_pkl() (in module neural_compressor.utils.utility)": [[364, "neural_compressor.utils.utility.load_data_from_pkl"]], "neural_compressor.utils.utility": [[364, "module-neural_compressor.utils.utility"]], "recover() (in module neural_compressor.utils.utility)": [[364, "neural_compressor.utils.utility.recover"]], "set_random_seed() (in module neural_compressor.utils.utility)": [[364, "neural_compressor.utils.utility.set_random_seed"]], "set_resume_from() (in module neural_compressor.utils.utility)": [[364, "neural_compressor.utils.utility.set_resume_from"]], "set_tensorboard() (in module neural_compressor.utils.utility)": [[364, "neural_compressor.utils.utility.set_tensorboard"]], "set_workspace() (in module neural_compressor.utils.utility)": [[364, "neural_compressor.utils.utility.set_workspace"]], "show_memory_info() (in module neural_compressor.utils.utility)": [[364, "neural_compressor.utils.utility.show_memory_info"]], "singleton() (in module neural_compressor.utils.utility)": [[364, "neural_compressor.utils.utility.singleton"]], "str2array() (in module neural_compressor.utils.utility)": [[364, "neural_compressor.utils.utility.str2array"]], "time_limit() (in module neural_compressor.utils.utility)": [[364, "neural_compressor.utils.utility.time_limit"]], "version1_eq_version2() (in module neural_compressor.utils.utility)": [[364, "neural_compressor.utils.utility.version1_eq_version2"]], "version1_gt_version2() (in module neural_compressor.utils.utility)": [[364, "neural_compressor.utils.utility.version1_gt_version2"]], "version1_gte_version2() (in module neural_compressor.utils.utility)": [[364, "neural_compressor.utils.utility.version1_gte_version2"]], "version1_lt_version2() (in module neural_compressor.utils.utility)": [[364, "neural_compressor.utils.utility.version1_lt_version2"]], "version1_lte_version2() (in module neural_compressor.utils.utility)": [[364, "neural_compressor.utils.utility.version1_lte_version2"]], "benchmark (class in neural_compressor.ux.components.benchmark.benchmark)": [[365, "neural_compressor.ux.components.benchmark.benchmark.Benchmark"]], "dataloaderinterface (class in neural_compressor.ux.components.benchmark.benchmark)": [[365, "neural_compressor.ux.components.benchmark.benchmark.DataloaderInterface"]], "neural_compressor.ux.components.benchmark.benchmark": [[365, "module-neural_compressor.ux.components.benchmark.benchmark"]], "benchmark_model() (in module neural_compressor.ux.components.benchmark.benchmark_model)": [[366, "neural_compressor.ux.components.benchmark.benchmark_model.benchmark_model"]], "neural_compressor.ux.components.benchmark.benchmark_model": [[366, "module-neural_compressor.ux.components.benchmark.benchmark_model"]], "parse_args() (in module neural_compressor.ux.components.benchmark.benchmark_model)": [[366, "neural_compressor.ux.components.benchmark.benchmark_model.parse_args"]], "set_eager_execution() (in module neural_compressor.ux.components.benchmark.benchmark_model)": [[366, "neural_compressor.ux.components.benchmark.benchmark_model.set_eager_execution"]], "benchmark_result_update() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[367, "neural_compressor.ux.components.benchmark.execute_benchmark.benchmark_result_update"]], "benchmark_result_update_pytorch_script() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[367, "neural_compressor.ux.components.benchmark.execute_benchmark.benchmark_result_update_pytorch_script"]], "execute_benchmark() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[367, "neural_compressor.ux.components.benchmark.execute_benchmark.execute_benchmark"]], "execute_real_benchmark() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[367, "neural_compressor.ux.components.benchmark.execute_benchmark.execute_real_benchmark"]], "neural_compressor.ux.components.benchmark.execute_benchmark": [[367, "module-neural_compressor.ux.components.benchmark.execute_benchmark"]], "pytorch_script_bench_optimizations() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[367, "neural_compressor.ux.components.benchmark.execute_benchmark.pytorch_script_bench_optimizations"]], "pytorch_script_bench_original_model() (in module neural_compressor.ux.components.benchmark.execute_benchmark)": [[367, "neural_compressor.ux.components.benchmark.execute_benchmark.pytorch_script_bench_original_model"]], "benchmarks (class in neural_compressor.ux.components.benchmark)": [[368, "neural_compressor.ux.components.benchmark.Benchmarks"]], "neural_compressor.ux.components.benchmark": [[368, "module-neural_compressor.ux.components.benchmark"]], "benchmarkconfiggenerator (class in neural_compressor.ux.components.config_generator.benchmark_config_generator)": [[369, "neural_compressor.ux.components.config_generator.benchmark_config_generator.BenchmarkConfigGenerator"]], "neural_compressor.ux.components.config_generator.benchmark_config_generator": [[369, "module-neural_compressor.ux.components.config_generator.benchmark_config_generator"]], "configgenerator (class in neural_compressor.ux.components.config_generator.config_generator)": [[370, "neural_compressor.ux.components.config_generator.config_generator.ConfigGenerator"]], "neural_compressor.ux.components.config_generator.config_generator": [[370, "module-neural_compressor.ux.components.config_generator.config_generator"]], "graphoptimizationconfiggenerator (class in neural_compressor.ux.components.config_generator.graph_optimization_config_generator)": [[371, "neural_compressor.ux.components.config_generator.graph_optimization_config_generator.GraphOptimizationConfigGenerator"]], "neural_compressor.ux.components.config_generator.graph_optimization_config_generator": [[371, "module-neural_compressor.ux.components.config_generator.graph_optimization_config_generator"]], "neural_compressor.ux.components.config_generator": [[372, "module-neural_compressor.ux.components.config_generator"]], "mixedprecisionconfiggenerator (class in neural_compressor.ux.components.config_generator.mixed_precision_config_generator)": [[373, "neural_compressor.ux.components.config_generator.mixed_precision_config_generator.MixedPrecisionConfigGenerator"]], "neural_compressor.ux.components.config_generator.mixed_precision_config_generator": [[373, "module-neural_compressor.ux.components.config_generator.mixed_precision_config_generator"]], "profilingconfiggenerator (class in neural_compressor.ux.components.config_generator.profiling_config_generator)": [[374, "neural_compressor.ux.components.config_generator.profiling_config_generator.ProfilingConfigGenerator"]], "neural_compressor.ux.components.config_generator.profiling_config_generator": [[374, "module-neural_compressor.ux.components.config_generator.profiling_config_generator"]], "pruningconfiggenerator (class in neural_compressor.ux.components.config_generator.pruning_config_generator)": [[375, "neural_compressor.ux.components.config_generator.pruning_config_generator.PruningConfigGenerator"]], "neural_compressor.ux.components.config_generator.pruning_config_generator": [[375, "module-neural_compressor.ux.components.config_generator.pruning_config_generator"]], "quantizationconfiggenerator (class in neural_compressor.ux.components.config_generator.quantization_config_generator)": [[376, "neural_compressor.ux.components.config_generator.quantization_config_generator.QuantizationConfigGenerator"]], "neural_compressor.ux.components.config_generator.quantization_config_generator": [[376, "module-neural_compressor.ux.components.config_generator.quantization_config_generator"]], "configurationparser (class in neural_compressor.ux.components.configuration_wizard.configuration_parser)": [[377, "neural_compressor.ux.components.configuration_wizard.configuration_parser.ConfigurationParser"]], "neural_compressor.ux.components.configuration_wizard.configuration_parser": [[377, "module-neural_compressor.ux.components.configuration_wizard.configuration_parser"]], "normalize_string_list() (in module neural_compressor.ux.components.configuration_wizard.configuration_parser)": [[377, "neural_compressor.ux.components.configuration_wizard.configuration_parser.normalize_string_list"]], "parse_list_value() (in module neural_compressor.ux.components.configuration_wizard.configuration_parser)": [[377, "neural_compressor.ux.components.configuration_wizard.configuration_parser.parse_list_value"]], "parse_multidim_list() (in module neural_compressor.ux.components.configuration_wizard.configuration_parser)": [[377, "neural_compressor.ux.components.configuration_wizard.configuration_parser.parse_multidim_list"]], "get_boundary_nodes() (in module neural_compressor.ux.components.configuration_wizard.get_boundary_nodes)": [[378, "neural_compressor.ux.components.configuration_wizard.get_boundary_nodes.get_boundary_nodes"]], "neural_compressor.ux.components.configuration_wizard.get_boundary_nodes": [[378, "module-neural_compressor.ux.components.configuration_wizard.get_boundary_nodes"]], "get_predefined_configuration() (in module neural_compressor.ux.components.configuration_wizard.get_configuration)": [[379, "neural_compressor.ux.components.configuration_wizard.get_configuration.get_predefined_configuration"]], "neural_compressor.ux.components.configuration_wizard.get_configuration": [[379, "module-neural_compressor.ux.components.configuration_wizard.get_configuration"]], "update_config_to_machine_specification() (in module neural_compressor.ux.components.configuration_wizard.get_configuration)": [[379, "neural_compressor.ux.components.configuration_wizard.get_configuration.update_config_to_machine_specification"]], "neural_compressor.ux.components.configuration_wizard": [[380, "module-neural_compressor.ux.components.configuration_wizard"]], "feeder (class in neural_compressor.ux.components.configuration_wizard.params_feeder)": [[381, "neural_compressor.ux.components.configuration_wizard.params_feeder.Feeder"]], "get_possible_values() (in module neural_compressor.ux.components.configuration_wizard.params_feeder)": [[381, "neural_compressor.ux.components.configuration_wizard.params_feeder.get_possible_values"]], "neural_compressor.ux.components.configuration_wizard.params_feeder": [[381, "module-neural_compressor.ux.components.configuration_wizard.params_feeder"]], "pruningconfigparser (class in neural_compressor.ux.components.configuration_wizard.pruning_config_parser)": [[382, "neural_compressor.ux.components.configuration_wizard.pruning_config_parser.PruningConfigParser"]], "neural_compressor.ux.components.configuration_wizard.pruning_config_parser": [[382, "module-neural_compressor.ux.components.configuration_wizard.pruning_config_parser"]], "dbmanager (class in neural_compressor.ux.components.db_manager.db_manager)": [[383, "neural_compressor.ux.components.db_manager.db_manager.DBManager"]], "neural_compressor.ux.components.db_manager.db_manager": [[383, "module-neural_compressor.ux.components.db_manager.db_manager"]], "benchmark (class in neural_compressor.ux.components.db_manager.db_models.benchmark)": [[384, "neural_compressor.ux.components.db_manager.db_models.benchmark.Benchmark"]], "neural_compressor.ux.components.db_manager.db_models.benchmark": [[384, "module-neural_compressor.ux.components.db_manager.db_models.benchmark"]], "benchmarkresult (class in neural_compressor.ux.components.db_manager.db_models.benchmark_result)": [[385, "neural_compressor.ux.components.db_manager.db_models.benchmark_result.BenchmarkResult"]], "neural_compressor.ux.components.db_manager.db_models.benchmark_result": [[385, "module-neural_compressor.ux.components.db_manager.db_models.benchmark_result"]], "dataloader (class in neural_compressor.ux.components.db_manager.db_models.dataloader)": [[386, "neural_compressor.ux.components.db_manager.db_models.dataloader.Dataloader"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.dataloader)": [[386, "neural_compressor.ux.components.db_manager.db_models.dataloader.fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.dataloader": [[386, "module-neural_compressor.ux.components.db_manager.db_models.dataloader"]], "dataset (class in neural_compressor.ux.components.db_manager.db_models.dataset)": [[387, "neural_compressor.ux.components.db_manager.db_models.dataset.Dataset"]], "neural_compressor.ux.components.db_manager.db_models.dataset": [[387, "module-neural_compressor.ux.components.db_manager.db_models.dataset"]], "domain (class in neural_compressor.ux.components.db_manager.db_models.domain)": [[388, "neural_compressor.ux.components.db_manager.db_models.domain.Domain"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.domain)": [[388, "neural_compressor.ux.components.db_manager.db_models.domain.fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.domain": [[388, "module-neural_compressor.ux.components.db_manager.db_models.domain"]], "domainflavour (class in neural_compressor.ux.components.db_manager.db_models.domain_flavour)": [[389, "neural_compressor.ux.components.db_manager.db_models.domain_flavour.DomainFlavour"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.domain_flavour)": [[389, "neural_compressor.ux.components.db_manager.db_models.domain_flavour.fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.domain_flavour": [[389, "module-neural_compressor.ux.components.db_manager.db_models.domain_flavour"]], "example (class in neural_compressor.ux.components.db_manager.db_models.example)": [[390, "neural_compressor.ux.components.db_manager.db_models.example.Example"]], "neural_compressor.ux.components.db_manager.db_models.example": [[390, "module-neural_compressor.ux.components.db_manager.db_models.example"]], "framework (class in neural_compressor.ux.components.db_manager.db_models.framework)": [[391, "neural_compressor.ux.components.db_manager.db_models.framework.Framework"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.framework)": [[391, "neural_compressor.ux.components.db_manager.db_models.framework.fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.framework": [[391, "module-neural_compressor.ux.components.db_manager.db_models.framework"]], "neural_compressor.ux.components.db_manager.db_models": [[392, "module-neural_compressor.ux.components.db_manager.db_models"]], "metric (class in neural_compressor.ux.components.db_manager.db_models.metric)": [[393, "neural_compressor.ux.components.db_manager.db_models.metric.Metric"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.metric)": [[393, "neural_compressor.ux.components.db_manager.db_models.metric.fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.metric": [[393, "module-neural_compressor.ux.components.db_manager.db_models.metric"]], "model (class in neural_compressor.ux.components.db_manager.db_models.model)": [[394, "neural_compressor.ux.components.db_manager.db_models.model.Model"]], "neural_compressor.ux.components.db_manager.db_models.model": [[394, "module-neural_compressor.ux.components.db_manager.db_models.model"]], "optimization (class in neural_compressor.ux.components.db_manager.db_models.optimization)": [[395, "neural_compressor.ux.components.db_manager.db_models.optimization.Optimization"]], "neural_compressor.ux.components.db_manager.db_models.optimization": [[395, "module-neural_compressor.ux.components.db_manager.db_models.optimization"]], "optimizationtype (class in neural_compressor.ux.components.db_manager.db_models.optimization_type)": [[396, "neural_compressor.ux.components.db_manager.db_models.optimization_type.OptimizationType"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.optimization_type)": [[396, "neural_compressor.ux.components.db_manager.db_models.optimization_type.fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.optimization_type": [[396, "module-neural_compressor.ux.components.db_manager.db_models.optimization_type"]], "precision (class in neural_compressor.ux.components.db_manager.db_models.precision)": [[397, "neural_compressor.ux.components.db_manager.db_models.precision.Precision"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.precision)": [[397, "neural_compressor.ux.components.db_manager.db_models.precision.fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.precision": [[397, "module-neural_compressor.ux.components.db_manager.db_models.precision"]], "profiling (class in neural_compressor.ux.components.db_manager.db_models.profiling)": [[398, "neural_compressor.ux.components.db_manager.db_models.profiling.Profiling"]], "neural_compressor.ux.components.db_manager.db_models.profiling": [[398, "module-neural_compressor.ux.components.db_manager.db_models.profiling"]], "profilingresult (class in neural_compressor.ux.components.db_manager.db_models.profiling_result)": [[399, "neural_compressor.ux.components.db_manager.db_models.profiling_result.ProfilingResult"]], "neural_compressor.ux.components.db_manager.db_models.profiling_result": [[399, "module-neural_compressor.ux.components.db_manager.db_models.profiling_result"]], "project (class in neural_compressor.ux.components.db_manager.db_models.project)": [[400, "neural_compressor.ux.components.db_manager.db_models.project.Project"]], "neural_compressor.ux.components.db_manager.db_models.project": [[400, "module-neural_compressor.ux.components.db_manager.db_models.project"]], "pruningdetails (class in neural_compressor.ux.components.db_manager.db_models.pruning_details)": [[401, "neural_compressor.ux.components.db_manager.db_models.pruning_details.PruningDetails"]], "neural_compressor.ux.components.db_manager.db_models.pruning_details": [[401, "module-neural_compressor.ux.components.db_manager.db_models.pruning_details"]], "transform (class in neural_compressor.ux.components.db_manager.db_models.transform)": [[402, "neural_compressor.ux.components.db_manager.db_models.transform.Transform"]], "fill_dictionary() (in module neural_compressor.ux.components.db_manager.db_models.transform)": [[402, "neural_compressor.ux.components.db_manager.db_models.transform.fill_dictionary"]], "neural_compressor.ux.components.db_manager.db_models.transform": [[402, "module-neural_compressor.ux.components.db_manager.db_models.transform"]], "tuningdetails (class in neural_compressor.ux.components.db_manager.db_models.tuning_details)": [[403, "neural_compressor.ux.components.db_manager.db_models.tuning_details.TuningDetails"]], "neural_compressor.ux.components.db_manager.db_models.tuning_details": [[403, "module-neural_compressor.ux.components.db_manager.db_models.tuning_details"]], "tuninghistory (class in neural_compressor.ux.components.db_manager.db_models.tuning_history)": [[404, "neural_compressor.ux.components.db_manager.db_models.tuning_history.TuningHistory"]], "neural_compressor.ux.components.db_manager.db_models.tuning_history": [[404, "module-neural_compressor.ux.components.db_manager.db_models.tuning_history"]], "benchmarkapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface)": [[405, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.BenchmarkAPIInterface"]], "before_delete_benchmark_entry() (in module neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface)": [[405, "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface.before_delete_benchmark_entry"]], "neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface": [[405, "module-neural_compressor.ux.components.db_manager.db_operations.benchmark_api_interface"]], "datasetapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[406, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.DatasetAPIInterface"]], "initialize_associations() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[406, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.initialize_associations"]], "initialize_precision_optimization_types_association() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[406, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.initialize_precision_optimization_types_association"]], "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface": [[406, "module-neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface"]], "search_in_list_of_dict() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[406, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.search_in_list_of_dict"]], "search_in_list_of_dict_for_unique_value() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[406, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.search_in_list_of_dict_for_unique_value"]], "set_database_version() (in module neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface)": [[406, "neural_compressor.ux.components.db_manager.db_operations.dataset_api_interface.set_database_version"]], "initialize_associations() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[407, "neural_compressor.ux.components.db_manager.db_operations.db_operations.initialize_associations"]], "initialize_precision_optimization_types_association() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[407, "neural_compressor.ux.components.db_manager.db_operations.db_operations.initialize_precision_optimization_types_association"]], "neural_compressor.ux.components.db_manager.db_operations.db_operations": [[407, "module-neural_compressor.ux.components.db_manager.db_operations.db_operations"]], "search_in_list_of_dict() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[407, "neural_compressor.ux.components.db_manager.db_operations.db_operations.search_in_list_of_dict"]], "search_in_list_of_dict_for_unique_value() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[407, "neural_compressor.ux.components.db_manager.db_operations.db_operations.search_in_list_of_dict_for_unique_value"]], "set_database_version() (in module neural_compressor.ux.components.db_manager.db_operations.db_operations)": [[407, "neural_compressor.ux.components.db_manager.db_operations.db_operations.set_database_version"]], "diagnosisapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface)": [[408, "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface.DiagnosisAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface": [[408, "module-neural_compressor.ux.components.db_manager.db_operations.diagnosis_api_interface"]], "dictionariesapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface)": [[409, "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface.DictionariesAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface": [[409, "module-neural_compressor.ux.components.db_manager.db_operations.dictionaries_api_interface"]], "examplesapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.examples_api_interface)": [[410, "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface.ExamplesAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.examples_api_interface": [[410, "module-neural_compressor.ux.components.db_manager.db_operations.examples_api_interface"]], "neural_compressor.ux.components.db_manager.db_operations": [[411, "module-neural_compressor.ux.components.db_manager.db_operations"]], "modelapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.model_api_interface)": [[412, "neural_compressor.ux.components.db_manager.db_operations.model_api_interface.ModelAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.model_api_interface": [[412, "module-neural_compressor.ux.components.db_manager.db_operations.model_api_interface"]], "optimizationapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface)": [[413, "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface.OptimizationAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface": [[413, "module-neural_compressor.ux.components.db_manager.db_operations.optimization_api_interface"]], "profilingapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface)": [[414, "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface.ProfilingAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface": [[414, "module-neural_compressor.ux.components.db_manager.db_operations.profiling_api_interface"]], "projectapiinterface (class in neural_compressor.ux.components.db_manager.db_operations.project_api_interface)": [[415, "neural_compressor.ux.components.db_manager.db_operations.project_api_interface.ProjectAPIInterface"]], "neural_compressor.ux.components.db_manager.db_operations.project_api_interface": [[415, "module-neural_compressor.ux.components.db_manager.db_operations.project_api_interface"]], "neural_compressor.ux.components.db_manager": [[416, "module-neural_compressor.ux.components.db_manager"]], "benchmarkaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[417, "neural_compressor.ux.components.db_manager.params_interfaces.BenchmarkAddParamsInterface"]], "benchmarkeditparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[417, "neural_compressor.ux.components.db_manager.params_interfaces.BenchmarkEditParamsInterface"]], "datasetaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[417, "neural_compressor.ux.components.db_manager.params_interfaces.DatasetAddParamsInterface"]], "diagnosisoptimizationparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[417, "neural_compressor.ux.components.db_manager.params_interfaces.DiagnosisOptimizationParamsInterface"]], "modeladdparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[417, "neural_compressor.ux.components.db_manager.params_interfaces.ModelAddParamsInterface"]], "optimizationaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[417, "neural_compressor.ux.components.db_manager.params_interfaces.OptimizationAddParamsInterface"]], "optimizationeditparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[417, "neural_compressor.ux.components.db_manager.params_interfaces.OptimizationEditParamsInterface"]], "profilingaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[417, "neural_compressor.ux.components.db_manager.params_interfaces.ProfilingAddParamsInterface"]], "profilingeditparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[417, "neural_compressor.ux.components.db_manager.params_interfaces.ProfilingEditParamsInterface"]], "profilingresultaddparamsinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[417, "neural_compressor.ux.components.db_manager.params_interfaces.ProfilingResultAddParamsInterface"]], "tuninghistoryinterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[417, "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryInterface"]], "tuninghistoryiteminterface (class in neural_compressor.ux.components.db_manager.params_interfaces)": [[417, "neural_compressor.ux.components.db_manager.params_interfaces.TuningHistoryItemInterface"]], "neural_compressor.ux.components.db_manager.params_interfaces": [[417, "module-neural_compressor.ux.components.db_manager.params_interfaces"]], "get_framework_dataloaders_config() (in module neural_compressor.ux.components.db_manager.utils)": [[418, "neural_compressor.ux.components.db_manager.utils.get_framework_dataloaders_config"]], "get_framework_transforms_config() (in module neural_compressor.ux.components.db_manager.utils)": [[418, "neural_compressor.ux.components.db_manager.utils.get_framework_transforms_config"]], "neural_compressor.ux.components.db_manager.utils": [[418, "module-neural_compressor.ux.components.db_manager.utils"]], "update_dataloaders_params() (in module neural_compressor.ux.components.db_manager.utils)": [[418, "neural_compressor.ux.components.db_manager.utils.update_dataloaders_params"]], "diagnosis (class in neural_compressor.ux.components.diagnosis.diagnosis)": [[419, "neural_compressor.ux.components.diagnosis.diagnosis.Diagnosis"]], "neural_compressor.ux.components.diagnosis.diagnosis": [[419, "module-neural_compressor.ux.components.diagnosis.diagnosis"]], "diagnosisfactory (class in neural_compressor.ux.components.diagnosis.factory)": [[420, "neural_compressor.ux.components.diagnosis.factory.DiagnosisFactory"]], "neural_compressor.ux.components.diagnosis.factory": [[420, "module-neural_compressor.ux.components.diagnosis.factory"]], "neural_compressor.ux.components.diagnosis": [[421, "module-neural_compressor.ux.components.diagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis": [[422, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis"]], "onnxrtdiagnosis (class in neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis)": [[423, "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis.OnnxRtDiagnosis"]], "neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis": [[423, "module-neural_compressor.ux.components.diagnosis.onnx_diagnosis.onnxrt_diagnosis"]], "opactivation (class in neural_compressor.ux.components.diagnosis.op_details)": [[424, "neural_compressor.ux.components.diagnosis.op_details.OpActivation"]], "opdetails (class in neural_compressor.ux.components.diagnosis.op_details)": [[424, "neural_compressor.ux.components.diagnosis.op_details.OpDetails"]], "oppattern (class in neural_compressor.ux.components.diagnosis.op_details)": [[424, "neural_compressor.ux.components.diagnosis.op_details.OpPattern"]], "opweights (class in neural_compressor.ux.components.diagnosis.op_details)": [[424, "neural_compressor.ux.components.diagnosis.op_details.OpWeights"]], "neural_compressor.ux.components.diagnosis.op_details": [[424, "module-neural_compressor.ux.components.diagnosis.op_details"]], "opentry (class in neural_compressor.ux.components.diagnosis.op_entry)": [[425, "neural_compressor.ux.components.diagnosis.op_entry.OpEntry"]], "neural_compressor.ux.components.diagnosis.op_entry": [[425, "module-neural_compressor.ux.components.diagnosis.op_entry"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis": [[426, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis"]], "tensorflowdiagnosis (class in neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis)": [[427, "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis.TensorflowDiagnosis"]], "neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis": [[427, "module-neural_compressor.ux.components.diagnosis.tensorflow_diagnosis.tensorflow_diagnosis"]], "create_dir_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[428, "neural_compressor.ux.components.file_browser.file_browser.create_dir_entry"]], "create_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[428, "neural_compressor.ux.components.file_browser.file_browser.create_entry"]], "create_file_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[428, "neural_compressor.ux.components.file_browser.file_browser.create_file_entry"]], "filter_requested_entries() (in module neural_compressor.ux.components.file_browser.file_browser)": [[428, "neural_compressor.ux.components.file_browser.file_browser.filter_requested_entries"]], "get_directory_entries() (in module neural_compressor.ux.components.file_browser.file_browser)": [[428, "neural_compressor.ux.components.file_browser.file_browser.get_directory_entries"]], "get_filter_value() (in module neural_compressor.ux.components.file_browser.file_browser)": [[428, "neural_compressor.ux.components.file_browser.file_browser.get_filter_value"]], "get_non_hidden_directory_entries() (in module neural_compressor.ux.components.file_browser.file_browser)": [[428, "neural_compressor.ux.components.file_browser.file_browser.get_non_hidden_directory_entries"]], "get_requested_path() (in module neural_compressor.ux.components.file_browser.file_browser)": [[428, "neural_compressor.ux.components.file_browser.file_browser.get_requested_path"]], "get_setting_value() (in module neural_compressor.ux.components.file_browser.file_browser)": [[428, "neural_compressor.ux.components.file_browser.file_browser.get_setting_value"]], "is_dataset_or_directory_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[428, "neural_compressor.ux.components.file_browser.file_browser.is_dataset_or_directory_entry"]], "is_directory_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[428, "neural_compressor.ux.components.file_browser.file_browser.is_directory_entry"]], "is_model_or_directory_entry() (in module neural_compressor.ux.components.file_browser.file_browser)": [[428, "neural_compressor.ux.components.file_browser.file_browser.is_model_or_directory_entry"]], "neural_compressor.ux.components.file_browser.file_browser": [[428, "module-neural_compressor.ux.components.file_browser.file_browser"]], "should_show_files() (in module neural_compressor.ux.components.file_browser.file_browser)": [[428, "neural_compressor.ux.components.file_browser.file_browser.should_show_files"]], "should_show_only_model_files() (in module neural_compressor.ux.components.file_browser.file_browser)": [[428, "neural_compressor.ux.components.file_browser.file_browser.should_show_only_model_files"]], "sort_entries() (in module neural_compressor.ux.components.file_browser.file_browser)": [[428, "neural_compressor.ux.components.file_browser.file_browser.sort_entries"]], "neural_compressor.ux.components.file_browser": [[429, "module-neural_compressor.ux.components.file_browser"]], "attribute (class in neural_compressor.ux.components.graph.attribute)": [[430, "neural_compressor.ux.components.graph.attribute.Attribute"]], "neural_compressor.ux.components.graph.attribute": [[430, "module-neural_compressor.ux.components.graph.attribute"]], "collapser (class in neural_compressor.ux.components.graph.collapser)": [[431, "neural_compressor.ux.components.graph.collapser.Collapser"]], "neural_compressor.ux.components.graph.collapser": [[431, "module-neural_compressor.ux.components.graph.collapser"]], "edge (class in neural_compressor.ux.components.graph.edge)": [[432, "neural_compressor.ux.components.graph.edge.Edge"]], "neural_compressor.ux.components.graph.edge": [[432, "module-neural_compressor.ux.components.graph.edge"]], "graph (class in neural_compressor.ux.components.graph.graph)": [[433, "neural_compressor.ux.components.graph.graph.Graph"]], "neural_compressor.ux.components.graph.graph": [[433, "module-neural_compressor.ux.components.graph.graph"]], "graphreader (class in neural_compressor.ux.components.graph.graph_reader)": [[434, "neural_compressor.ux.components.graph.graph_reader.GraphReader"]], "neural_compressor.ux.components.graph.graph_reader": [[434, "module-neural_compressor.ux.components.graph.graph_reader"]], "neural_compressor.ux.components.graph": [[435, "module-neural_compressor.ux.components.graph"]], "groupnode (class in neural_compressor.ux.components.graph.node)": [[436, "neural_compressor.ux.components.graph.node.GroupNode"]], "node (class in neural_compressor.ux.components.graph.node)": [[436, "neural_compressor.ux.components.graph.node.Node"]], "neural_compressor.ux.components.graph.node": [[436, "module-neural_compressor.ux.components.graph.node"]], "neural_compressor.ux.components.graph.reader": [[437, "module-neural_compressor.ux.components.graph.reader"]], "onnxrtreader (class in neural_compressor.ux.components.graph.reader.onnxrt_reader)": [[438, "neural_compressor.ux.components.graph.reader.onnxrt_reader.OnnxrtReader"]], "neural_compressor.ux.components.graph.reader.onnxrt_reader": [[438, "module-neural_compressor.ux.components.graph.reader.onnxrt_reader"]], "tensorflowreader (class in neural_compressor.ux.components.graph.reader.tensorflow_reader)": [[439, "neural_compressor.ux.components.graph.reader.tensorflow_reader.TensorflowReader"]], "neural_compressor.ux.components.graph.reader.tensorflow_reader": [[439, "module-neural_compressor.ux.components.graph.reader.tensorflow_reader"]], "neural_compressor.ux.components": [[440, "module-neural_compressor.ux.components"]], "neural_compressor.ux.components.jobs_management": [[441, "module-neural_compressor.ux.components.jobs_management"]], "neural_compressor.ux.components.jobs_management.jobs_control_queue": [[442, "module-neural_compressor.ux.components.jobs_management.jobs_control_queue"]], "neural_compressor.ux.components.jobs_management.jobs_manager": [[443, "module-neural_compressor.ux.components.jobs_management.jobs_manager"]], "neural_compressor.ux.components.jobs_management.request": [[444, "module-neural_compressor.ux.components.jobs_management.request"]], "get_default_path() (in module neural_compressor.ux.components.manage_workspace)": [[445, "neural_compressor.ux.components.manage_workspace.get_default_path"]], "neural_compressor.ux.components.manage_workspace": [[445, "module-neural_compressor.ux.components.manage_workspace"]], "domain (class in neural_compressor.ux.components.model.domain)": [[446, "neural_compressor.ux.components.model.domain.Domain"]], "neural_compressor.ux.components.model.domain": [[446, "module-neural_compressor.ux.components.model.domain"]], "neural_compressor.ux.components.model": [[447, "module-neural_compressor.ux.components.model"]], "model (class in neural_compressor.ux.components.model.model)": [[448, "neural_compressor.ux.components.model.model.Model"]], "neural_compressor.ux.components.model.model": [[448, "module-neural_compressor.ux.components.model.model"]], "get_model_type() (in module neural_compressor.ux.components.model.model_type_getter)": [[449, "neural_compressor.ux.components.model.model_type_getter.get_model_type"]], "neural_compressor.ux.components.model.model_type_getter": [[449, "module-neural_compressor.ux.components.model.model_type_getter"]], "neural_compressor.ux.components.model.onnxrt": [[450, "module-neural_compressor.ux.components.model.onnxrt"]], "onnxrtmodel (class in neural_compressor.ux.components.model.onnxrt.model)": [[451, "neural_compressor.ux.components.model.onnxrt.model.OnnxrtModel"]], "neural_compressor.ux.components.model.onnxrt.model": [[451, "module-neural_compressor.ux.components.model.onnxrt.model"]], "remove_number_of_samples_from_shape() (in module neural_compressor.ux.components.model.onnxrt.model)": [[451, "neural_compressor.ux.components.model.onnxrt.model.remove_number_of_samples_from_shape"]], "neural_compressor.ux.components.model.pytorch": [[452, "module-neural_compressor.ux.components.model.pytorch"]], "pytorchscriptmodel (class in neural_compressor.ux.components.model.pytorch.model)": [[453, "neural_compressor.ux.components.model.pytorch.model.PyTorchScriptModel"]], "neural_compressor.ux.components.model.pytorch.model": [[453, "module-neural_compressor.ux.components.model.pytorch.model"]], "modelrepository (class in neural_compressor.ux.components.model.repository)": [[454, "neural_compressor.ux.components.model.repository.ModelRepository"]], "neural_compressor.ux.components.model.repository": [[454, "module-neural_compressor.ux.components.model.repository"]], "shape (class in neural_compressor.ux.components.model.shape)": [[455, "neural_compressor.ux.components.model.shape.Shape"]], "neural_compressor.ux.components.model.shape": [[455, "module-neural_compressor.ux.components.model.shape"]], "frozenpbmodel (class in neural_compressor.ux.components.model.tensorflow.frozen_pb)": [[456, "neural_compressor.ux.components.model.tensorflow.frozen_pb.FrozenPbModel"]], "neural_compressor.ux.components.model.tensorflow.frozen_pb": [[456, "module-neural_compressor.ux.components.model.tensorflow.frozen_pb"]], "neural_compressor.ux.components.model.tensorflow": [[457, "module-neural_compressor.ux.components.model.tensorflow"]], "kerasmodel (class in neural_compressor.ux.components.model.tensorflow.keras)": [[458, "neural_compressor.ux.components.model.tensorflow.keras.KerasModel"]], "neural_compressor.ux.components.model.tensorflow.keras": [[458, "module-neural_compressor.ux.components.model.tensorflow.keras"]], "metagraphmodel (class in neural_compressor.ux.components.model.tensorflow.meta_graph)": [[459, "neural_compressor.ux.components.model.tensorflow.meta_graph.MetaGraphModel"]], "neural_compressor.ux.components.model.tensorflow.meta_graph": [[459, "module-neural_compressor.ux.components.model.tensorflow.meta_graph"]], "tensorflowmodel (class in neural_compressor.ux.components.model.tensorflow.model)": [[460, "neural_compressor.ux.components.model.tensorflow.model.TensorflowModel"]], "neural_compressor.ux.components.model.tensorflow.model": [[460, "module-neural_compressor.ux.components.model.tensorflow.model"]], "savedmodelmodel (class in neural_compressor.ux.components.model.tensorflow.saved_model)": [[461, "neural_compressor.ux.components.model.tensorflow.saved_model.SavedModelModel"]], "neural_compressor.ux.components.model.tensorflow.saved_model": [[461, "module-neural_compressor.ux.components.model.tensorflow.saved_model"]], "get_input_shape() (in module neural_compressor.ux.components.model.tensorflow.utils)": [[462, "neural_compressor.ux.components.model.tensorflow.utils.get_input_shape"]], "neural_compressor.ux.components.model.tensorflow.utils": [[462, "module-neural_compressor.ux.components.model.tensorflow.utils"]], "download_config() (in module neural_compressor.ux.components.model_zoo.download_config)": [[463, "neural_compressor.ux.components.model_zoo.download_config.download_config"]], "neural_compressor.ux.components.model_zoo.download_config": [[463, "module-neural_compressor.ux.components.model_zoo.download_config"]], "download_model() (in module neural_compressor.ux.components.model_zoo.download_model)": [[464, "neural_compressor.ux.components.model_zoo.download_model.download_model"]], "neural_compressor.ux.components.model_zoo.download_model": [[464, "module-neural_compressor.ux.components.model_zoo.download_model"]], "downloader (class in neural_compressor.ux.components.model_zoo.downloader)": [[465, "neural_compressor.ux.components.model_zoo.downloader.Downloader"]], "neural_compressor.ux.components.model_zoo.downloader": [[465, "module-neural_compressor.ux.components.model_zoo.downloader"]], "neural_compressor.ux.components.model_zoo": [[466, "module-neural_compressor.ux.components.model_zoo"]], "check_version() (in module neural_compressor.ux.components.model_zoo.list_models)": [[467, "neural_compressor.ux.components.model_zoo.list_models.check_version"]], "get_available_models() (in module neural_compressor.ux.components.model_zoo.list_models)": [[467, "neural_compressor.ux.components.model_zoo.list_models.get_available_models"]], "get_framework_module_name() (in module neural_compressor.ux.components.model_zoo.list_models)": [[467, "neural_compressor.ux.components.model_zoo.list_models.get_framework_module_name"]], "get_installed_frameworks() (in module neural_compressor.ux.components.model_zoo.list_models)": [[467, "neural_compressor.ux.components.model_zoo.list_models.get_installed_frameworks"]], "list_models() (in module neural_compressor.ux.components.model_zoo.list_models)": [[467, "neural_compressor.ux.components.model_zoo.list_models.list_models"]], "neural_compressor.ux.components.model_zoo.list_models": [[467, "module-neural_compressor.ux.components.model_zoo.list_models"]], "validate_model_list() (in module neural_compressor.ux.components.model_zoo.list_models)": [[467, "neural_compressor.ux.components.model_zoo.list_models.validate_model_list"]], "neural_compressor.ux.components.names_mapper": [[468, "module-neural_compressor.ux.components.names_mapper"]], "mappingdirection (class in neural_compressor.ux.components.names_mapper.names_mapper)": [[469, "neural_compressor.ux.components.names_mapper.names_mapper.MappingDirection"]], "namesmapper (class in neural_compressor.ux.components.names_mapper.names_mapper)": [[469, "neural_compressor.ux.components.names_mapper.names_mapper.NamesMapper"]], "neural_compressor.ux.components.names_mapper.names_mapper": [[469, "module-neural_compressor.ux.components.names_mapper.names_mapper"]], "check_if_collect_tuning_history() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[470, "neural_compressor.ux.components.optimization.execute_optimization.check_if_collect_tuning_history"]], "execute_optimization() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[470, "neural_compressor.ux.components.optimization.execute_optimization.execute_optimization"]], "execute_optimization_pytorch_script() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[470, "neural_compressor.ux.components.optimization.execute_optimization.execute_optimization_pytorch_script"]], "execute_optimization_regular() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[470, "neural_compressor.ux.components.optimization.execute_optimization.execute_optimization_regular"]], "neural_compressor.ux.components.optimization.execute_optimization": [[470, "module-neural_compressor.ux.components.optimization.execute_optimization"]], "parse_logs() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[470, "neural_compressor.ux.components.optimization.execute_optimization.parse_logs"]], "parse_model_data_to_bench_names() (in module neural_compressor.ux.components.optimization.execute_optimization)": [[470, "neural_compressor.ux.components.optimization.execute_optimization.parse_model_data_to_bench_names"]], "optimizationfactory (class in neural_compressor.ux.components.optimization.factory)": [[471, "neural_compressor.ux.components.optimization.factory.OptimizationFactory"]], "neural_compressor.ux.components.optimization.factory": [[471, "module-neural_compressor.ux.components.optimization.factory"]], "graphoptimization (class in neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization)": [[472, "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization.GraphOptimization"]], "neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization": [[472, "module-neural_compressor.ux.components.optimization.graph_optimizer.graph_optimization"]], "neural_compressor.ux.components.optimization.graph_optimizer": [[473, "module-neural_compressor.ux.components.optimization.graph_optimizer"]], "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model": [[474, "module-neural_compressor.ux.components.optimization.graph_optimizer.optimize_model"]], "optimize_graph() (in module neural_compressor.ux.components.optimization.graph_optimizer.optimize_model)": [[474, "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model.optimize_graph"]], "optimize_graph_config() (in module neural_compressor.ux.components.optimization.graph_optimizer.optimize_model)": [[474, "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model.optimize_graph_config"]], "parse_args() (in module neural_compressor.ux.components.optimization.graph_optimizer.optimize_model)": [[474, "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model.parse_args"]], "set_eager_execution() (in module neural_compressor.ux.components.optimization.graph_optimizer.optimize_model)": [[474, "neural_compressor.ux.components.optimization.graph_optimizer.optimize_model.set_eager_execution"]], "optimizations (class in neural_compressor.ux.components.optimization)": [[475, "neural_compressor.ux.components.optimization.Optimizations"]], "neural_compressor.ux.components.optimization": [[475, "module-neural_compressor.ux.components.optimization"]], "neural_compressor.ux.components.optimization.mixed_precision": [[476, "module-neural_compressor.ux.components.optimization.mixed_precision"]], "mixedprecision (class in neural_compressor.ux.components.optimization.mixed_precision.mixed_precision)": [[477, "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision.MixedPrecision"]], "neural_compressor.ux.components.optimization.mixed_precision.mixed_precision": [[477, "module-neural_compressor.ux.components.optimization.mixed_precision.mixed_precision"]], "neural_compressor.ux.components.optimization.mixed_precision.optimize_model": [[478, "module-neural_compressor.ux.components.optimization.mixed_precision.optimize_model"]], "optimize_graph() (in module neural_compressor.ux.components.optimization.mixed_precision.optimize_model)": [[478, "neural_compressor.ux.components.optimization.mixed_precision.optimize_model.optimize_graph"]], "optimize_graph_config() (in module neural_compressor.ux.components.optimization.mixed_precision.optimize_model)": [[478, "neural_compressor.ux.components.optimization.mixed_precision.optimize_model.optimize_graph_config"]], "parse_args() (in module neural_compressor.ux.components.optimization.mixed_precision.optimize_model)": [[478, "neural_compressor.ux.components.optimization.mixed_precision.optimize_model.parse_args"]], "set_eager_execution() (in module neural_compressor.ux.components.optimization.mixed_precision.optimize_model)": [[478, "neural_compressor.ux.components.optimization.mixed_precision.optimize_model.set_eager_execution"]], "neural_compressor.ux.components.optimization.neural_coder_optimization": [[479, "module-neural_compressor.ux.components.optimization.neural_coder_optimization"]], "neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model": [[480, "module-neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model"]], "optimize_pt_script() (in module neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model)": [[480, "neural_compressor.ux.components.optimization.neural_coder_optimization.optimize_model.optimize_pt_script"]], "dataloaderinterface (class in neural_compressor.ux.components.optimization.optimization)": [[481, "neural_compressor.ux.components.optimization.optimization.DataloaderInterface"]], "optimization (class in neural_compressor.ux.components.optimization.optimization)": [[481, "neural_compressor.ux.components.optimization.optimization.Optimization"]], "optimizationinterface (class in neural_compressor.ux.components.optimization.optimization)": [[481, "neural_compressor.ux.components.optimization.optimization.OptimizationInterface"]], "neural_compressor.ux.components.optimization.optimization": [[481, "module-neural_compressor.ux.components.optimization.optimization"]], "neural_compressor.ux.components.optimization.pruning": [[482, "module-neural_compressor.ux.components.optimization.pruning"]], "neural_compressor.ux.components.optimization.pruning.optimize_model": [[483, "module-neural_compressor.ux.components.optimization.pruning.optimize_model"]], "optimize_model() (in module neural_compressor.ux.components.optimization.pruning.optimize_model)": [[483, "neural_compressor.ux.components.optimization.pruning.optimize_model.optimize_model"]], "parse_args() (in module neural_compressor.ux.components.optimization.pruning.optimize_model)": [[483, "neural_compressor.ux.components.optimization.pruning.optimize_model.parse_args"]], "pruning (class in neural_compressor.ux.components.optimization.pruning.pruning)": [[484, "neural_compressor.ux.components.optimization.pruning.pruning.Pruning"]], "neural_compressor.ux.components.optimization.pruning.pruning": [[484, "module-neural_compressor.ux.components.optimization.pruning.pruning"]], "neural_compressor.ux.components.optimization.tune": [[485, "module-neural_compressor.ux.components.optimization.tune"]], "neural_compressor.ux.components.optimization.tune.tune_model": [[486, "module-neural_compressor.ux.components.optimization.tune.tune_model"]], "parse_args() (in module neural_compressor.ux.components.optimization.tune.tune_model)": [[486, "neural_compressor.ux.components.optimization.tune.tune_model.parse_args"]], "set_eager_execution() (in module neural_compressor.ux.components.optimization.tune.tune_model)": [[486, "neural_compressor.ux.components.optimization.tune.tune_model.set_eager_execution"]], "tune_model() (in module neural_compressor.ux.components.optimization.tune.tune_model)": [[486, "neural_compressor.ux.components.optimization.tune.tune_model.tune_model"]], "accuracycriterion (class in neural_compressor.ux.components.optimization.tune.tuning)": [[487, "neural_compressor.ux.components.optimization.tune.tuning.AccuracyCriterion"]], "tuning (class in neural_compressor.ux.components.optimization.tune.tuning)": [[487, "neural_compressor.ux.components.optimization.tune.tuning.Tuning"]], "tuningdetails (class in neural_compressor.ux.components.optimization.tune.tuning)": [[487, "neural_compressor.ux.components.optimization.tune.tuning.TuningDetails"]], "neural_compressor.ux.components.optimization.tune.tuning": [[487, "module-neural_compressor.ux.components.optimization.tune.tuning"]], "tuninghistory (class in neural_compressor.ux.components.optimization.tuning_history)": [[488, "neural_compressor.ux.components.optimization.tuning_history.TuningHistory"]], "watcher (class in neural_compressor.ux.components.optimization.tuning_history)": [[488, "neural_compressor.ux.components.optimization.tuning_history.Watcher"]], "neural_compressor.ux.components.optimization.tuning_history": [[488, "module-neural_compressor.ux.components.optimization.tuning_history"]], "tuning_history() (in module neural_compressor.ux.components.optimization.tuning_history)": [[488, "neural_compressor.ux.components.optimization.tuning_history.tuning_history"]], "tuning_history_path() (in module neural_compressor.ux.components.optimization.tuning_history)": [[488, "neural_compressor.ux.components.optimization.tuning_history.tuning_history_path"]], "execute_profiling() (in module neural_compressor.ux.components.profiling.execute_profiling)": [[489, "neural_compressor.ux.components.profiling.execute_profiling.execute_profiling"]], "execute_real_profiling() (in module neural_compressor.ux.components.profiling.execute_profiling)": [[489, "neural_compressor.ux.components.profiling.execute_profiling.execute_real_profiling"]], "neural_compressor.ux.components.profiling.execute_profiling": [[489, "module-neural_compressor.ux.components.profiling.execute_profiling"]], "profilerfactory (class in neural_compressor.ux.components.profiling.factory)": [[490, "neural_compressor.ux.components.profiling.factory.ProfilerFactory"]], "neural_compressor.ux.components.profiling.factory": [[490, "module-neural_compressor.ux.components.profiling.factory"]], "neural_compressor.ux.components.profiling": [[491, "module-neural_compressor.ux.components.profiling"]], "load_profiling_details() (in module neural_compressor.ux.components.profiling.profile_model)": [[492, "neural_compressor.ux.components.profiling.profile_model.load_profiling_details"]], "neural_compressor.ux.components.profiling.profile_model": [[492, "module-neural_compressor.ux.components.profiling.profile_model"]], "parse_args() (in module neural_compressor.ux.components.profiling.profile_model)": [[492, "neural_compressor.ux.components.profiling.profile_model.parse_args"]], "profiler (class in neural_compressor.ux.components.profiling.profiler)": [[493, "neural_compressor.ux.components.profiling.profiler.Profiler"]], "neural_compressor.ux.components.profiling.profiler": [[493, "module-neural_compressor.ux.components.profiling.profiler"]], "dataloaderinterface (class in neural_compressor.ux.components.profiling.profiling)": [[494, "neural_compressor.ux.components.profiling.profiling.DataloaderInterface"]], "profiling (class in neural_compressor.ux.components.profiling.profiling)": [[494, "neural_compressor.ux.components.profiling.profiling.Profiling"]], "neural_compressor.ux.components.profiling.profiling": [[494, "module-neural_compressor.ux.components.profiling.profiling"]], "profilerfactory (class in neural_compressor.ux.components.profiling.tensorflow_profiler.factory)": [[495, "neural_compressor.ux.components.profiling.tensorflow_profiler.factory.ProfilerFactory"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.factory": [[495, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.factory"]], "neural_compressor.ux.components.profiling.tensorflow_profiler": [[496, "module-neural_compressor.ux.components.profiling.tensorflow_profiler"]], "profiler (class in neural_compressor.ux.components.profiling.tensorflow_profiler.profiler)": [[497, "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler.Profiler"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.profiler": [[497, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.profiler"]], "delete_assign() (in module neural_compressor.ux.components.profiling.tensorflow_profiler.utils)": [[498, "neural_compressor.ux.components.profiling.tensorflow_profiler.utils.delete_assign"]], "neural_compressor.ux.components.profiling.tensorflow_profiler.utils": [[498, "module-neural_compressor.ux.components.profiling.tensorflow_profiler.utils"]], "main() (in module neural_compressor.ux.inc_bench)": [[499, "neural_compressor.ux.inc_bench.main"]], "neural_compressor.ux.inc_bench": [[499, "module-neural_compressor.ux.inc_bench"]], "prepare_environment() (in module neural_compressor.ux.inc_bench)": [[499, "neural_compressor.ux.inc_bench.prepare_environment"]], "neural_compressor.ux": [[500, "module-neural_compressor.ux"]], "domainflavours (class in neural_compressor.ux.utils.consts)": [[501, "neural_compressor.ux.utils.consts.DomainFlavours"]], "domains (class in neural_compressor.ux.utils.consts)": [[501, "neural_compressor.ux.utils.consts.Domains"]], "executionstatus (class in neural_compressor.ux.utils.consts)": [[501, "neural_compressor.ux.utils.consts.ExecutionStatus"]], "frameworks (class in neural_compressor.ux.utils.consts)": [[501, "neural_compressor.ux.utils.consts.Frameworks"]], "optimizationtypes (class in neural_compressor.ux.utils.consts)": [[501, "neural_compressor.ux.utils.consts.OptimizationTypes"]], "precisions (class in neural_compressor.ux.utils.consts)": [[501, "neural_compressor.ux.utils.consts.Precisions"]], "strategies (class in neural_compressor.ux.utils.consts)": [[501, "neural_compressor.ux.utils.consts.Strategies"]], "neural_compressor.ux.utils.consts": [[501, "module-neural_compressor.ux.utils.consts"]], "environment (class in neural_compressor.ux.utils.environment)": [[502, "neural_compressor.ux.utils.environment.Environment"]], "neural_compressor.ux.utils.environment": [[502, "module-neural_compressor.ux.utils.environment"]], "accessdeniedexception": [[503, "neural_compressor.ux.utils.exceptions.AccessDeniedException"]], "clienterrorexception": [[503, "neural_compressor.ux.utils.exceptions.ClientErrorException"]], "internalexception": [[503, "neural_compressor.ux.utils.exceptions.InternalException"]], "notfoundexception": [[503, "neural_compressor.ux.utils.exceptions.NotFoundException"]], "neural_compressor.ux.utils.exceptions": [[503, "module-neural_compressor.ux.utils.exceptions"]], "executor (class in neural_compressor.ux.utils.executor)": [[504, "neural_compressor.ux.utils.executor.Executor"]], "neural_compressor.ux.utils.executor": [[504, "module-neural_compressor.ux.utils.executor"]], "expiringdict (class in neural_compressor.ux.utils.expiring_dict)": [[505, "neural_compressor.ux.utils.expiring_dict.ExpiringDict"]], "expiringdictitem (class in neural_compressor.ux.utils.expiring_dict)": [[505, "neural_compressor.ux.utils.expiring_dict.ExpiringDictItem"]], "neural_compressor.ux.utils.expiring_dict": [[505, "module-neural_compressor.ux.utils.expiring_dict"]], "githubinfo (class in neural_compressor.ux.utils.github_info)": [[506, "neural_compressor.ux.utils.github_info.GithubInfo"]], "neural_compressor.ux.utils.github_info": [[506, "module-neural_compressor.ux.utils.github_info"]], "hwinfo (class in neural_compressor.ux.utils.hw_info)": [[507, "neural_compressor.ux.utils.hw_info.HWInfo"]], "get_bios_version() (in module neural_compressor.ux.utils.hw_info)": [[507, "neural_compressor.ux.utils.hw_info.get_bios_version"]], "get_distribution() (in module neural_compressor.ux.utils.hw_info)": [[507, "neural_compressor.ux.utils.hw_info.get_distribution"]], "get_framework_dependency_info() (in module neural_compressor.ux.utils.hw_info)": [[507, "neural_compressor.ux.utils.hw_info.get_framework_dependency_info"]], "get_framework_info() (in module neural_compressor.ux.utils.hw_info)": [[507, "neural_compressor.ux.utils.hw_info.get_framework_info"]], "get_kernel_version() (in module neural_compressor.ux.utils.hw_info)": [[507, "neural_compressor.ux.utils.hw_info.get_kernel_version"]], "get_number_of_sockets() (in module neural_compressor.ux.utils.hw_info)": [[507, "neural_compressor.ux.utils.hw_info.get_number_of_sockets"]], "is_turbo_boost_enabled() (in module neural_compressor.ux.utils.hw_info)": [[507, "neural_compressor.ux.utils.hw_info.is_turbo_boost_enabled"]], "neural_compressor.ux.utils.hw_info": [[507, "module-neural_compressor.ux.utils.hw_info"]], "neural_compressor.ux.utils": [[508, "module-neural_compressor.ux.utils"]], "jsonserializer (class in neural_compressor.ux.utils.json_serializer)": [[509, "neural_compressor.ux.utils.json_serializer.JsonSerializer"]], "neural_compressor.ux.utils.json_serializer": [[509, "module-neural_compressor.ux.utils.json_serializer"]], "change_log_level() (in module neural_compressor.ux.utils.logger)": [[510, "neural_compressor.ux.utils.logger.change_log_level"]], "neural_compressor.ux.utils.logger": [[510, "module-neural_compressor.ux.utils.logger"]], "accuracyparser (class in neural_compressor.ux.utils.parser)": [[511, "neural_compressor.ux.utils.parser.AccuracyParser"]], "benchmarkparserfactory (class in neural_compressor.ux.utils.parser)": [[511, "neural_compressor.ux.utils.parser.BenchmarkParserFactory"]], "optimizationparser (class in neural_compressor.ux.utils.parser)": [[511, "neural_compressor.ux.utils.parser.OptimizationParser"]], "parser (class in neural_compressor.ux.utils.parser)": [[511, "neural_compressor.ux.utils.parser.Parser"]], "performanceparser (class in neural_compressor.ux.utils.parser)": [[511, "neural_compressor.ux.utils.parser.PerformanceParser"]], "profilingparser (class in neural_compressor.ux.utils.parser)": [[511, "neural_compressor.ux.utils.parser.ProfilingParser"]], "neural_compressor.ux.utils.parser": [[511, "module-neural_compressor.ux.utils.parser"]], "proc (class in neural_compressor.ux.utils.proc)": [[512, "neural_compressor.ux.utils.proc.Proc"]], "neural_compressor.ux.utils.proc": [[512, "module-neural_compressor.ux.utils.proc"]], "ncprocesses (class in neural_compressor.ux.utils.processes)": [[513, "neural_compressor.ux.utils.processes.NCProcesses"]], "neural_compressor.ux.utils.processes": [[513, "module-neural_compressor.ux.utils.processes"]], "singleton (class in neural_compressor.ux.utils.singleton)": [[514, "neural_compressor.ux.utils.singleton.Singleton"]], "neural_compressor.ux.utils.singleton": [[514, "module-neural_compressor.ux.utils.singleton"]], "get_status_update_function() (in module neural_compressor.ux.utils.status_updates)": [[515, "neural_compressor.ux.utils.status_updates.get_status_update_function"]], "neural_compressor.ux.utils.status_updates": [[515, "module-neural_compressor.ux.utils.status_updates"]], "neural_compressor.ux.utils.templates": [[516, "module-neural_compressor.ux.utils.templates"]], "metric (class in neural_compressor.ux.utils.templates.metric)": [[517, "neural_compressor.ux.utils.templates.metric.Metric"]], "neural_compressor.ux.utils.templates.metric": [[517, "module-neural_compressor.ux.utils.templates.metric"]], "workdir (class in neural_compressor.ux.utils.templates.workdir)": [[518, "neural_compressor.ux.utils.templates.workdir.Workdir"]], "neural_compressor.ux.utils.templates.workdir": [[518, "module-neural_compressor.ux.utils.templates.workdir"]], "are_archive_filenames_valid() (in module neural_compressor.ux.utils.utils)": [[519, "neural_compressor.ux.utils.utils.are_archive_filenames_valid"]], "check_module() (in module neural_compressor.ux.utils.utils)": [[519, "neural_compressor.ux.utils.utils.check_module"]], "deprecated() (in module neural_compressor.ux.utils.utils)": [[519, "neural_compressor.ux.utils.utils.deprecated"]], "determine_ip() (in module neural_compressor.ux.utils.utils)": [[519, "neural_compressor.ux.utils.utils.determine_ip"]], "export_to_csv() (in module neural_compressor.ux.utils.utils)": [[519, "neural_compressor.ux.utils.utils.export_to_csv"]], "filter_transforms() (in module neural_compressor.ux.utils.utils)": [[519, "neural_compressor.ux.utils.utils.filter_transforms"]], "get_dataset_path() (in module neural_compressor.ux.utils.utils)": [[519, "neural_compressor.ux.utils.utils.get_dataset_path"]], "get_default_pruning_config_path() (in module neural_compressor.ux.utils.utils)": [[519, "neural_compressor.ux.utils.utils.get_default_pruning_config_path"]], "get_file_extension() (in module neural_compressor.ux.utils.utils)": [[519, "neural_compressor.ux.utils.utils.get_file_extension"]], "get_framework_from_path() (in module neural_compressor.ux.utils.utils)": [[519, "neural_compressor.ux.utils.utils.get_framework_from_path"]], "get_height_width_from_size() (in module neural_compressor.ux.utils.utils)": [[519, "neural_compressor.ux.utils.utils.get_height_width_from_size"]], "get_metrics_dict() (in module neural_compressor.ux.utils.utils)": [[519, "neural_compressor.ux.utils.utils.get_metrics_dict"]], "get_model_zoo_config_path() (in module neural_compressor.ux.utils.utils)": [[519, "neural_compressor.ux.utils.utils.get_model_zoo_config_path"]], "get_model_zoo_model_path() (in module neural_compressor.ux.utils.utils)": [[519, "neural_compressor.ux.utils.utils.get_model_zoo_model_path"]], "get_module_version() (in module neural_compressor.ux.utils.utils)": [[519, "neural_compressor.ux.utils.utils.get_module_version"]], "get_predefined_config_path() (in module neural_compressor.ux.utils.utils)": [[519, "neural_compressor.ux.utils.utils.get_predefined_config_path"]], "get_shape_from_transforms() (in module neural_compressor.ux.utils.utils)": [[519, "neural_compressor.ux.utils.utils.get_shape_from_transforms"]], "get_size() (in module neural_compressor.ux.utils.utils)": [[519, "neural_compressor.ux.utils.utils.get_size"]], "is_dataset_file() (in module neural_compressor.ux.utils.utils)": [[519, "neural_compressor.ux.utils.utils.is_dataset_file"]], "is_development_env() (in module neural_compressor.ux.utils.utils)": [[519, "neural_compressor.ux.utils.utils.is_development_env"]], "is_hidden() (in module neural_compressor.ux.utils.utils)": [[519, "neural_compressor.ux.utils.utils.is_hidden"]], "load_dataloader_config() (in module neural_compressor.ux.utils.utils)": [[519, "neural_compressor.ux.utils.utils.load_dataloader_config"]], "load_help_nc_params() (in module neural_compressor.ux.utils.utils)": [[519, "neural_compressor.ux.utils.utils.load_help_nc_params"]], "load_metrics_config() (in module neural_compressor.ux.utils.utils)": [[519, "neural_compressor.ux.utils.utils.load_metrics_config"]], "load_model_config() (in module neural_compressor.ux.utils.utils)": [[519, "neural_compressor.ux.utils.utils.load_model_config"]], "load_model_wise_params() (in module neural_compressor.ux.utils.utils)": [[519, "neural_compressor.ux.utils.utils.load_model_wise_params"]], "load_precisions_config() (in module neural_compressor.ux.utils.utils)": [[519, "neural_compressor.ux.utils.utils.load_precisions_config"]], "load_pruning_details_config() (in module neural_compressor.ux.utils.utils)": [[519, "neural_compressor.ux.utils.utils.load_pruning_details_config"]], "load_transforms_config() (in module neural_compressor.ux.utils.utils)": [[519, "neural_compressor.ux.utils.utils.load_transforms_config"]], "load_transforms_filter_config() (in module neural_compressor.ux.utils.utils)": [[519, "neural_compressor.ux.utils.utils.load_transforms_filter_config"]], "neural_compressor.ux.utils.utils": [[519, "module-neural_compressor.ux.utils.utils"]], "normalize_domain() (in module neural_compressor.ux.utils.utils)": [[519, "neural_compressor.ux.utils.utils.normalize_domain"]], "normalize_framework() (in module neural_compressor.ux.utils.utils)": [[519, "neural_compressor.ux.utils.utils.normalize_framework"]], "normalize_string() (in module neural_compressor.ux.utils.utils)": [[519, "neural_compressor.ux.utils.utils.normalize_string"]], "parse_bool_value() (in module neural_compressor.ux.utils.utils)": [[519, "neural_compressor.ux.utils.utils.parse_bool_value"]], "parse_to_float_list() (in module neural_compressor.ux.utils.utils)": [[519, "neural_compressor.ux.utils.utils.parse_to_float_list"]], "parse_to_string_list() (in module neural_compressor.ux.utils.utils)": [[519, "neural_compressor.ux.utils.utils.parse_to_string_list"]], "parse_version() (in module neural_compressor.ux.utils.utils)": [[519, "neural_compressor.ux.utils.utils.parse_version"]], "release_tag() (in module neural_compressor.ux.utils.utils)": [[519, "neural_compressor.ux.utils.utils.release_tag"]], "replace_with_values() (in module neural_compressor.ux.utils.utils)": [[519, "neural_compressor.ux.utils.utils.replace_with_values"]], "safe_extract_archive() (in module neural_compressor.ux.utils.utils)": [[519, "neural_compressor.ux.utils.utils.safe_extract_archive"]], "verify_file_path() (in module neural_compressor.ux.utils.utils)": [[519, "neural_compressor.ux.utils.utils.verify_file_path"]], "config (class in neural_compressor.ux.utils.workload.config)": [[520, "neural_compressor.ux.utils.workload.config.Config"]], "neural_compressor.ux.utils.workload.config": [[520, "module-neural_compressor.ux.utils.workload.config"]], "dataloader (class in neural_compressor.ux.utils.workload.dataloader)": [[521, "neural_compressor.ux.utils.workload.dataloader.Dataloader"]], "dataset (class in neural_compressor.ux.utils.workload.dataloader)": [[521, "neural_compressor.ux.utils.workload.dataloader.Dataset"]], "filter (class in neural_compressor.ux.utils.workload.dataloader)": [[521, "neural_compressor.ux.utils.workload.dataloader.Filter"]], "labelbalance (class in neural_compressor.ux.utils.workload.dataloader)": [[521, "neural_compressor.ux.utils.workload.dataloader.LabelBalance"]], "transform (class in neural_compressor.ux.utils.workload.dataloader)": [[521, "neural_compressor.ux.utils.workload.dataloader.Transform"]], "neural_compressor.ux.utils.workload.dataloader": [[521, "module-neural_compressor.ux.utils.workload.dataloader"]], "accuracy (class in neural_compressor.ux.utils.workload.evaluation)": [[522, "neural_compressor.ux.utils.workload.evaluation.Accuracy"]], "configs (class in neural_compressor.ux.utils.workload.evaluation)": [[522, "neural_compressor.ux.utils.workload.evaluation.Configs"]], "evaluation (class in neural_compressor.ux.utils.workload.evaluation)": [[522, "neural_compressor.ux.utils.workload.evaluation.Evaluation"]], "metric (class in neural_compressor.ux.utils.workload.evaluation)": [[522, "neural_compressor.ux.utils.workload.evaluation.Metric"]], "performance (class in neural_compressor.ux.utils.workload.evaluation)": [[522, "neural_compressor.ux.utils.workload.evaluation.Performance"]], "postprocess (class in neural_compressor.ux.utils.workload.evaluation)": [[522, "neural_compressor.ux.utils.workload.evaluation.Postprocess"]], "postprocessschema (class in neural_compressor.ux.utils.workload.evaluation)": [[522, "neural_compressor.ux.utils.workload.evaluation.PostprocessSchema"]], "neural_compressor.ux.utils.workload.evaluation": [[522, "module-neural_compressor.ux.utils.workload.evaluation"]], "graphoptimization (class in neural_compressor.ux.utils.workload.graph_optimization)": [[523, "neural_compressor.ux.utils.workload.graph_optimization.GraphOptimization"]], "neural_compressor.ux.utils.workload.graph_optimization": [[523, "module-neural_compressor.ux.utils.workload.graph_optimization"]], "neural_compressor.ux.utils.workload": [[524, "module-neural_compressor.ux.utils.workload"]], "mixedprecision (class in neural_compressor.ux.utils.workload.mixed_precision)": [[525, "neural_compressor.ux.utils.workload.mixed_precision.MixedPrecision"]], "neural_compressor.ux.utils.workload.mixed_precision": [[525, "module-neural_compressor.ux.utils.workload.mixed_precision"]], "model (class in neural_compressor.ux.utils.workload.model)": [[526, "neural_compressor.ux.utils.workload.model.Model"]], "neural_compressor.ux.utils.workload.model": [[526, "module-neural_compressor.ux.utils.workload.model"]], "adamoptimizer (class in neural_compressor.ux.utils.workload.pruning)": [[527, "neural_compressor.ux.utils.workload.pruning.AdamOptimizer"]], "adamwoptimizer (class in neural_compressor.ux.utils.workload.pruning)": [[527, "neural_compressor.ux.utils.workload.pruning.AdamWOptimizer"]], "approach (class in neural_compressor.ux.utils.workload.pruning)": [[527, "neural_compressor.ux.utils.workload.pruning.Approach"]], "criterion (class in neural_compressor.ux.utils.workload.pruning)": [[527, "neural_compressor.ux.utils.workload.pruning.Criterion"]], "crossentropylosscriterion (class in neural_compressor.ux.utils.workload.pruning)": [[527, "neural_compressor.ux.utils.workload.pruning.CrossEntropyLossCriterion"]], "intermediatelayersknowledgedistillationloss (class in neural_compressor.ux.utils.workload.pruning)": [[527, "neural_compressor.ux.utils.workload.pruning.IntermediateLayersKnowledgeDistillationLoss"]], "knowledgedistillationlosscriterion (class in neural_compressor.ux.utils.workload.pruning)": [[527, "neural_compressor.ux.utils.workload.pruning.KnowledgeDistillationLossCriterion"]], "optimizer (class in neural_compressor.ux.utils.workload.pruning)": [[527, "neural_compressor.ux.utils.workload.pruning.Optimizer"]], "pruning (class in neural_compressor.ux.utils.workload.pruning)": [[527, "neural_compressor.ux.utils.workload.pruning.Pruning"]], "sgdoptimizer (class in neural_compressor.ux.utils.workload.pruning)": [[527, "neural_compressor.ux.utils.workload.pruning.SGDOptimizer"]], "selfknowledgedistillationloss (class in neural_compressor.ux.utils.workload.pruning)": [[527, "neural_compressor.ux.utils.workload.pruning.SelfKnowledgeDistillationLoss"]], "sparsecategoricalcrossentropycriterion (class in neural_compressor.ux.utils.workload.pruning)": [[527, "neural_compressor.ux.utils.workload.pruning.SparseCategoricalCrossentropyCriterion"]], "train (class in neural_compressor.ux.utils.workload.pruning)": [[527, "neural_compressor.ux.utils.workload.pruning.Train"]], "weightcompressionapproach (class in neural_compressor.ux.utils.workload.pruning)": [[527, "neural_compressor.ux.utils.workload.pruning.WeightCompressionApproach"]], "neural_compressor.ux.utils.workload.pruning": [[527, "module-neural_compressor.ux.utils.workload.pruning"]], "parse_dict_value_to_float() (in module neural_compressor.ux.utils.workload.pruning)": [[527, "neural_compressor.ux.utils.workload.pruning.parse_dict_value_to_float"]], "parse_dict_value_to_int() (in module neural_compressor.ux.utils.workload.pruning)": [[527, "neural_compressor.ux.utils.workload.pruning.parse_dict_value_to_int"]], "advance (class in neural_compressor.ux.utils.workload.quantization)": [[528, "neural_compressor.ux.utils.workload.quantization.Advance"]], "calibration (class in neural_compressor.ux.utils.workload.quantization)": [[528, "neural_compressor.ux.utils.workload.quantization.Calibration"]], "quantization (class in neural_compressor.ux.utils.workload.quantization)": [[528, "neural_compressor.ux.utils.workload.quantization.Quantization"]], "wiseconfig (class in neural_compressor.ux.utils.workload.quantization)": [[528, "neural_compressor.ux.utils.workload.quantization.WiseConfig"]], "wiseconfigdetails (class in neural_compressor.ux.utils.workload.quantization)": [[528, "neural_compressor.ux.utils.workload.quantization.WiseConfigDetails"]], "neural_compressor.ux.utils.workload.quantization": [[528, "module-neural_compressor.ux.utils.workload.quantization"]], "acccriterion (class in neural_compressor.ux.utils.workload.tuning)": [[529, "neural_compressor.ux.utils.workload.tuning.AccCriterion"]], "diagnosis (class in neural_compressor.ux.utils.workload.tuning)": [[529, "neural_compressor.ux.utils.workload.tuning.Diagnosis"]], "exitpolicy (class in neural_compressor.ux.utils.workload.tuning)": [[529, "neural_compressor.ux.utils.workload.tuning.ExitPolicy"]], "multiobjectives (class in neural_compressor.ux.utils.workload.tuning)": [[529, "neural_compressor.ux.utils.workload.tuning.MultiObjectives"]], "strategy (class in neural_compressor.ux.utils.workload.tuning)": [[529, "neural_compressor.ux.utils.workload.tuning.Strategy"]], "tuning (class in neural_compressor.ux.utils.workload.tuning)": [[529, "neural_compressor.ux.utils.workload.tuning.Tuning"]], "workspace (class in neural_compressor.ux.utils.workload.tuning)": [[529, "neural_compressor.ux.utils.workload.tuning.Workspace"]], "neural_compressor.ux.utils.workload.tuning": [[529, "module-neural_compressor.ux.utils.workload.tuning"]], "float_representer() (in module neural_compressor.ux.utils.yaml_utils)": [[530, "neural_compressor.ux.utils.yaml_utils.float_representer"]], "neural_compressor.ux.utils.yaml_utils": [[530, "module-neural_compressor.ux.utils.yaml_utils"]], "pruner_representer() (in module neural_compressor.ux.utils.yaml_utils)": [[530, "neural_compressor.ux.utils.yaml_utils.pruner_representer"]], "message (class in neural_compressor.ux.web.communication)": [[531, "neural_compressor.ux.web.communication.Message"]], "messagequeue (class in neural_compressor.ux.web.communication)": [[531, "neural_compressor.ux.web.communication.MessageQueue"]], "request (class in neural_compressor.ux.web.communication)": [[531, "neural_compressor.ux.web.communication.Request"]], "response (class in neural_compressor.ux.web.communication)": [[531, "neural_compressor.ux.web.communication.Response"]], "create_simple_response() (in module neural_compressor.ux.web.communication)": [[531, "neural_compressor.ux.web.communication.create_simple_response"]], "neural_compressor.ux.web.communication": [[531, "module-neural_compressor.ux.web.communication"]], "configuration (class in neural_compressor.ux.web.configuration)": [[532, "neural_compressor.ux.web.configuration.Configuration"]], "neural_compressor.ux.web.configuration": [[532, "module-neural_compressor.ux.web.configuration"]], "servicenotfoundexception (class in neural_compressor.ux.web.exceptions)": [[533, "neural_compressor.ux.web.exceptions.ServiceNotFoundException"]], "neural_compressor.ux.web.exceptions": [[533, "module-neural_compressor.ux.web.exceptions"]], "neural_compressor.ux.web": [[534, "module-neural_compressor.ux.web"]], "deferredroutingdefinition (class in neural_compressor.ux.web.router)": [[535, "neural_compressor.ux.web.router.DeferredRoutingDefinition"]], "deferredsubprocessroutingdefinition (class in neural_compressor.ux.web.router)": [[535, "neural_compressor.ux.web.router.DeferredSubprocessRoutingDefinition"]], "realtimeroutingdefinition (class in neural_compressor.ux.web.router)": [[535, "neural_compressor.ux.web.router.RealtimeRoutingDefinition"]], "router (class in neural_compressor.ux.web.router)": [[535, "neural_compressor.ux.web.router.Router"]], "routingdefinition (class in neural_compressor.ux.web.router)": [[535, "neural_compressor.ux.web.router.RoutingDefinition"]], "find_pattern_in_graph() (in module neural_compressor.ux.web.router)": [[535, "neural_compressor.ux.web.router.find_pattern_in_graph"]], "get_model_graph() (in module neural_compressor.ux.web.router)": [[535, "neural_compressor.ux.web.router.get_model_graph"]], "get_system_info() (in module neural_compressor.ux.web.router)": [[535, "neural_compressor.ux.web.router.get_system_info"]], "neural_compressor.ux.web.router": [[535, "module-neural_compressor.ux.web.router"]], "allow_api_call() (in module neural_compressor.ux.web.server)": [[536, "neural_compressor.ux.web.server.allow_api_call"]], "block_iframe() (in module neural_compressor.ux.web.server)": [[536, "neural_compressor.ux.web.server.block_iframe"]], "block_sniffing() (in module neural_compressor.ux.web.server)": [[536, "neural_compressor.ux.web.server.block_sniffing"]], "build_parameters() (in module neural_compressor.ux.web.server)": [[536, "neural_compressor.ux.web.server.build_parameters"]], "disable_cache() (in module neural_compressor.ux.web.server)": [[536, "neural_compressor.ux.web.server.disable_cache"]], "get_tls_args() (in module neural_compressor.ux.web.server)": [[536, "neural_compressor.ux.web.server.get_tls_args"]], "handle_api_call() (in module neural_compressor.ux.web.server)": [[536, "neural_compressor.ux.web.server.handle_api_call"]], "neural_compressor.ux.web.server": [[536, "module-neural_compressor.ux.web.server"]], "page_not_found() (in module neural_compressor.ux.web.server)": [[536, "neural_compressor.ux.web.server.page_not_found"]], "require_api_token() (in module neural_compressor.ux.web.server)": [[536, "neural_compressor.ux.web.server.require_api_token"]], "root() (in module neural_compressor.ux.web.server)": [[536, "neural_compressor.ux.web.server.root"]], "run_server() (in module neural_compressor.ux.web.server)": [[536, "neural_compressor.ux.web.server.run_server"]], "web_socket_publisher() (in module neural_compressor.ux.web.server)": [[536, "neural_compressor.ux.web.server.web_socket_publisher"]], "benchmarkservice (class in neural_compressor.ux.web.service.benchmark)": [[537, "neural_compressor.ux.web.service.benchmark.BenchmarkService"]], "neural_compressor.ux.web.service.benchmark": [[537, "module-neural_compressor.ux.web.service.benchmark"]], "historysnapshotparser (class in neural_compressor.ux.web.service.history_snapshot_parser)": [[538, "neural_compressor.ux.web.service.history_snapshot_parser.HistorySnapshotParser"]], "neural_compressor.ux.web.service.history_snapshot_parser": [[538, "module-neural_compressor.ux.web.service.history_snapshot_parser"]], "neural_compressor.ux.web.service": [[539, "module-neural_compressor.ux.web.service"]], "modelservice (class in neural_compressor.ux.web.service.model)": [[540, "neural_compressor.ux.web.service.model.ModelService"]], "neural_compressor.ux.web.service.model": [[540, "module-neural_compressor.ux.web.service.model"]], "optimizationservice (class in neural_compressor.ux.web.service.optimization)": [[541, "neural_compressor.ux.web.service.optimization.OptimizationService"]], "neural_compressor.ux.web.service.optimization": [[541, "module-neural_compressor.ux.web.service.optimization"]], "profilingservice (class in neural_compressor.ux.web.service.profiling)": [[542, "neural_compressor.ux.web.service.profiling.ProfilingService"]], "neural_compressor.ux.web.service.profiling": [[542, "module-neural_compressor.ux.web.service.profiling"]], "requestdataprocessor (class in neural_compressor.ux.web.service.request_data_processor)": [[543, "neural_compressor.ux.web.service.request_data_processor.RequestDataProcessor"]], "neural_compressor.ux.web.service.request_data_processor": [[543, "module-neural_compressor.ux.web.service.request_data_processor"]], "responsegenerator (class in neural_compressor.ux.web.service.response_generator)": [[544, "neural_compressor.ux.web.service.response_generator.ResponseGenerator"]], "neural_compressor.ux.web.service.response_generator": [[544, "module-neural_compressor.ux.web.service.response_generator"]], "workloadservice (class in neural_compressor.ux.web.service.workload)": [[545, "neural_compressor.ux.web.service.workload.WorkloadService"]], "neural_compressor.ux.web.service.workload": [[545, "module-neural_compressor.ux.web.service.workload"]], "neural_compressor.version": [[546, "module-neural_compressor.version"]]}})